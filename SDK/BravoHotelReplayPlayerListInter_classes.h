// BravoHotelReplayPlayerListInter BravoHotelGame.BravoHotelReplayPlayerListInter
 struct UBravoHotelReplayPlayerListInter : UInterface {
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown BlockMouse; // 0x250(0x08)
	Unknown Button_Accept; // 0x258(0x08)
	Unknown Button_Cancel; // 0x260(0x08)
	Unknown Button_Close; // 0x268(0x08)
	Unknown Button_Max; // 0x270(0x08)
	Unknown Button_Min; // 0x278(0x08)
	Unknown Image_9; // 0x280(0x08)
	Unknown Slider_137; // 0x288(0x08)
	Unknown TextBlock_Accept; // 0x290(0x08)
	Unknown TextBlock_MaxCount; // 0x298(0x08)
	Unknown TextBlock_MinCount; // 0x2a0(0x08)
	Unknown TextBlock_Title; // 0x2a8(0x08)
	Unknown TextBox_DropCount; // 0x2b0(0x08)
	int32_t CurrentCount; // 0x2b8(0x04)
	int32_t MaxCount; // 0x2bc(0x04)
	struct FText LastEnteredText; // 0x2c0(0x18)
	Unknown ItemInfo; // 0x2d8(0x98)
	Unknown ItemDetailInfo; // 0x370(0x490)
	Unknown PickupRef; // 0x800(0x08)
	Unknown DropBoxRef; // 0x808(0x08)
	Unknown InventoryWidget; // 0x810(0x08)
	Unknown bClosing; // 0x818(0x01)
	Unknown MaterialSlot; // 0x820(0x08)
	Unknown DefaultSceneRoot; // 0x638(0x08)
	Unknown MassMode; // 0x28(0x01)
	float UniformMass; // 0x2c(0x04)
	float TotalMass; // 0x30(0x04)
	float Density; // 0x34(0x04)
	float MinPerParticleMass; // 0x38(0x04)
	float EdgeStiffness; // 0x3c(0x04)
	float BendingStiffness; // 0x40(0x04)
	float AreaStiffness; // 0x44(0x04)
	float VolumeStiffness; // 0x48(0x04)
	float StrainLimitingStiffness; // 0x4c(0x04)
	float LimitScale; // 0x50(0x04)
	Unknown bUseGeodesicDistance; // 0x54(0x01)
	float ShapeTargetStiffness; // 0x58(0x04)
	float CollisionThickness; // 0x5c(0x04)
	float FrictionCoefficient; // 0x60(0x04)
	float DampingCoefficient; // 0x64(0x04)
	float DragCoefficient; // 0x68(0x04)
	float AnimDriveSpringStiffness; // 0x6c(0x04)
	Unknown bUseBendingElements; // 0x70(0x01)
	Unknown bUseTetrahedralConstraints; // 0x71(0x01)
	Unknown bUseThinShellVolumeConstraints; // 0x72(0x01)
	Unknown bUseSelfCollisions; // 0x73(0x01)
	Unknown bUseContinuousCollisionDetection; // 0x74(0x01)
	Unknown LinearVelocityScale; // 0x78(0x0c)
	float AngularVelocityScale; // 0x84(0x04)
	int32_t IterationCount; // 0x28(0x04)
	int32_t SubdivisionCount; // 0x2c(0x04)
	float SelfCollisionThickness; // 0x30(0x04)
	float CollisionThickness; // 0x34(0x04)
	Unknown bUseDampingOverride; // 0x38(0x01)
	float Damping; // 0x3c(0x04)
	Unknown bUseGravityOverride; // 0x40(0x01)
	float GravityScale; // 0x44(0x04)
	Unknown Gravity; // 0x48(0x0c)
	Unknown bUseLocalSpaceSimulation; // 0x54(0x01)
	Unknown bUseXPBDConstraints; // 0x55(0x01)
	Unknown Type; // 0x28(0x01)
	Unknown ByteValue; // 0x29(0x01)
	int32_t IntegerValue; // 0x2c(0x04)
	Unknown LongBytesValue; // 0x30(0x08)
	float FloatValue; // 0x38(0x04)
	Unknown DoubleBytesValue; // 0x40(0x08)
	Unknown BooleanValue; // 0x48(0x01)
	struct FString StringUtf8Value; // 0x50(0x10)
	Unknown ByteArrayValue; // 0x60(0x10)
	Unknown IntegerArrayValue; // 0x70(0x10)
	Unknown LongBytesArrayValue; // 0x80(0x10)
	Unknown FloatArrayValue; // 0x90(0x10)
	Unknown DoubleBytesArrayValue; // 0xa0(0x10)
	Unknown BooleanArrayValue; // 0xb0(0x10)
	Unknown StringUtf8ArrayValue; // 0xc0(0x10)
	Unknown Bytes; // 0x28(0x10)
	int32_t Position; // 0x38(0x04)
	Unknown CurrentByte; // 0x3c(0x01)
	int32_t CurrentBytePosition; // 0x40(0x04)
	Unknown Bytes; // 0x28(0x10)
	Unknown CurrentByte; // 0x38(0x01)
	int32_t CurrentBytePosition; // 0x3c(0x04)
	Unknown ByteArray; // 0x28(0x10)
	Unknown Type; // 0x28(0x01)
	Unknown ByteValue; // 0x29(0x01)
	int32_t IntegerValue; // 0x2c(0x04)
	Unknown LongBytesValue; // 0x30(0x08)
	float FloatValue; // 0x38(0x04)
	Unknown DoubleBytesValue; // 0x40(0x08)
	Unknown BooleanValue; // 0x48(0x01)
	struct FString StringUtf8Value; // 0x50(0x10)
	Unknown ByteArrayValue; // 0x60(0x10)
	Unknown IntegerArrayValue; // 0x70(0x10)
	Unknown LongBytesArrayValue; // 0x80(0x10)
	Unknown FloatArrayValue; // 0x90(0x10)
	Unknown DoubleBytesArrayValue; // 0xa0(0x10)
	Unknown BooleanArrayValue; // 0xb0(0x10)
	Unknown StringUtf8ArrayValue; // 0xc0(0x10)
	Unknown Bytes; // 0x28(0x10)
	int32_t Position; // 0x38(0x04)
	Unknown Bytes; // 0x28(0x10)
	Unknown Bytes; // 0x28(0x10)
	int32_t Count; // 0x28(0x04)
	Unknown Next; // 0x2c(0x01)
	Unknown Finished; // 0x28(0x01)
	Unknown Result; // 0x29(0x01)
	int32_t KeepAliveCount; // 0x2c(0x04)
	Unknown Finished; // 0x28(0x01)
	float Result; // 0x2c(0x04)
	int32_t KeepAliveCount; // 0x30(0x04)
	Unknown Finished; // 0x28(0x01)
	int32_t Result; // 0x2c(0x04)
	int32_t KeepAliveCount; // 0x30(0x04)
	Unknown Finished; // 0x28(0x01)
	int32_t KeepAliveCount; // 0x2c(0x04)
	Unknown Finished; // 0x28(0x01)
	Unknown Result; // 0x30(0x08)
	int32_t KeepAliveCount; // 0x38(0x04)
	Unknown Finished; // 0x28(0x01)
	struct FString Result; // 0x30(0x10)
	int32_t KeepAliveCount; // 0x40(0x04)
	Unknown Bytes; // 0x28(0x10)
	Unknown Valid; // 0x28(0x01)
	struct FString Resource; // 0x30(0x10)
	Unknown Date; // 0x40(0x08)
	int32_t Bits; // 0x48(0x04)
	Unknown GeometryCollection; // 0x28(0x08)
	Unknown OriginalGeometryCollection; // 0x30(0x08)
	int32_t GeometryCollectionLODIndex; // 0x38(0x04)
	Unknown Adapters; // 0x3b8(0x10)
	int32_t TextureCoordinateCount; // 0x3d0(0x04)
	int32_t PendingCompactCounter; // 0x51c(0x04)
	int32_t SubdivisionCount; // 0x520(0x04)
	Unknown StaticMesh; // 0x28(0x08)
	Unknown OriginalStaticMesh; // 0x30(0x08)
	int32_t StaticMeshLODIndex; // 0x38(0x04)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown CanvasPanel_1; // 0x250(0x08)
	Unknown Image; // 0x258(0x08)
	Unknown Image_2; // 0x260(0x08)
	Unknown Image_3; // 0x268(0x08)
	Unknown Image_4; // 0x270(0x08)
	Unknown Image_5; // 0x278(0x08)
	Unknown Image_6; // 0x280(0x08)
	Unknown Image_7; // 0x288(0x08)
	Unknown Image_8; // 0x290(0x08)
	Unknown Image_9; // 0x298(0x08)
	Unknown Image_10; // 0x2a0(0x08)
	Unknown Image_11; // 0x2a8(0x08)
	Unknown Image_12; // 0x2b0(0x08)
	Unknown Image_13; // 0x2b8(0x08)
	Unknown Image_14; // 0x2c0(0x08)
	Unknown Image_15; // 0x2c8(0x08)
	Unknown Image_16; // 0x2d0(0x08)
	Unknown Image_17; // 0x2d8(0x08)
	Unknown Image_18; // 0x2e0(0x08)
	Unknown Image_47; // 0x2e8(0x08)
	Unknown ScaleBox4X_5mm; // 0x2f0(0x08)
	Unknown ScaleBox4X_7mm; // 0x2f8(0x08)
	Unknown ScaleBox4X_SR; // 0x300(0x08)
	Unknown WidgetSwitcher_167; // 0x308(0x08)
	Unknown NewVar_1; // 0x310(0x08)
	Unknown UberGraphFrame; // 0x128(0x08)
	struct FMulticastInlineDelegate RequestOnServer; // 0x130(0x10)
	Unknown SelectionMode; // 0x140(0x01)
	float TimeoutBetweenPings; // 0x144(0x04)
	Unknown PingTimeouts; // 0x148(0x10)
	Unknown ExecutingMenuIconIDs; // 0x158(0x10)
	Unknown ExecutingMenuIconSettings; // 0x168(0x10)
	Unknown OwningPawn; // 0x178(0x08)
	Unknown SelectionMenu; // 0x180(0x08)
	struct FMulticastInlineDelegate ExecuteOwningClient; // 0x188(0x10)
	Unknown TraceMethod; // 0x198(0x01)
	float TraceLength; // 0x19c(0x04)
	float TraceRadius; // 0x1a0(0x04)
	Unknown TraceChannel; // 0x1a4(0x01)
	Unknown TraceComplex; // 0x1a5(0x01)
	struct FMulticastInlineDelegate MenuActivated; // 0x1a8(0x10)
	struct FMulticastInlineDelegate MenuDeactivated; // 0x1b8(0x10)
	struct FMulticastInlineDelegate PingReceivedOnServer; // 0x1c8(0x10)
	Unknown ExecutingPingInfo2; // 0x1d8(0x38)
	Unknown NoneHitActor; // 0x210(0x01)
	Unknown IgnorInput; // 0x211(0x01)
	struct FName TempItemPingTableIndex; // 0x214(0x08)
	Unknown Enable; // 0x21c(0x01)
	struct FName NewVar_1; // 0x220(0x08)
	Unknown MainWidget; // 0x228(0x08)
	Unknown EnableEndPingType; // 0x230(0x01)
	Unknown IsSelectionMenuOnMap; // 0x231(0x01)
	Unknown TmpLocation; // 0x234(0x0c)
	Unknown TmpMousePosition; // 0x240(0x08)
	Unknown IsVisibleSelectionMenu; // 0x248(0x01)
	Unknown IsPressedCtrl; // 0x249(0x01)
	Unknown FindPickUpItem; // 0x24a(0x01)
	Unknown UberGraphFrame; // 0x310(0x08)
	Unknown DefaultSceneRoot; // 0x318(0x08)
	Unknown Muted; // 0x320(0x10)
	Unknown Two; // 0x330(0x01)
	struct FString Player; // 0x338(0x10)
	Unknown Players; // 0x348(0x10)
	Unknown Game; // 0x358(0x08)
	Unknown Joined; // 0x360(0x10)
	Unknown Banned; // 0x370(0x10)
	Unknown Owned; // 0x380(0x10)
	Unknown Chat; // 0x390(0x08)
	Unknown HU; // 0x398(0x08)
	Unknown PrimaryComponentTick; // 0x30(0x30)
	Unknown ComponentTags; // 0x60(0x10)
	Unknown AssetUserData; // 0x70(0x10)
	int32_t UCSSerializationIndex; // 0x84(0x04)
	Unknown bNetAddressable; // 0x88(0x01)
	Unknown bReplicates; // 0x88(0x01)
	Unknown bAutoActivate; // 0x89(0x01)
	Unknown bIsActive; // 0x8a(0x01)
	Unknown bEditableWhenInherited; // 0x8a(0x01)
	Unknown bCanEverAffectNavigation; // 0x8a(0x01)
	Unknown bIsEditorOnly; // 0x8a(0x01)
	Unknown CreationMethod; // 0x8c(0x01)
	struct FMulticastSparseDelegate OnComponentActivated; // 0x8d(0x01)
	struct FMulticastSparseDelegate OnComponentDeactivated; // 0x8e(0x01)
	Unknown UCSModifiedProperties; // 0x90(0x10)
	Unknown PhysicsVolume; // 0x144(0x08)
	Unknown AttachParent; // 0x1d0(0x08)
	struct FName AttachSocketName; // 0x1dc(0x08)
	Unknown AttachChildren; // 0xb8(0x10)
	Unknown ClientAttachedChildren; // 0x190(0x10)
	Unknown RelativeLocation; // 0x224(0x0c)
	Unknown RelativeRotation; // 0x1b4(0x0c)
	Unknown RelativeScale3D; // 0x1c4(0x0c)
	Unknown ComponentVelocity; // 0x164(0x0c)
	Unknown bComponentToWorldUpdated; // 0x140(0x01)
	Unknown bAbsoluteLocation; // 0x220(0x01)
	Unknown bAbsoluteRotation; // 0x1d8(0x01)
	Unknown bAbsoluteScale; // 0x188(0x01)
	Unknown bVisible; // 0xc8(0x01)
	Unknown bShouldBeAttached; // 0x220(0x01)
	Unknown bShouldSnapLocationWhenAttached; // 0x1b0(0x01)
	Unknown bShouldSnapRotationWhenAttached; // 0x188(0x01)
	Unknown bShouldUpdatePhysicsVolume; // 0x1a0(0x01)
	Unknown bHiddenInGame; // 0x220(0x01)
	Unknown bBoundsChangeTriggersStreamingDataRebuild; // 0xc8(0x01)
	Unknown bUseAttachParentBound; // 0x1d8(0x01)
	Unknown Mobility; // 0x221(0x01)
	Unknown DetailMode; // 0x160(0x01)
	struct FMulticastSparseDelegate PhysicsVolumeChangedDelegate; // 0xb0(0x01)
	Unknown ReplaySamplable; // 0x28(0x01)
	Unknown ReplaySampleClass; // 0x30(0x08)
	float ReplaySamplingFrequency; // 0x38(0x04)
	uint32_t ClientReplaySamplingGUID; // 0x3c(0x04)
	Unknown bReplayLevelAttached; // 0x44(0x01)
	Unknown ReplaySamplesForPlayback; // 0x68(0x10)
	Unknown SelfActor; // 0x88(0x08)
	Unknown PrimaryActorTick; // 0x1d8(0x30)
	Unknown bNetTemporary; // 0x284(0x01)
	Unknown bNetStartup; // 0x248(0x01)
	Unknown bOnlyRelevantToOwner; // 0x1c4(0x01)
	Unknown bAlwaysRelevant; // 0xa1(0x01)
	Unknown bReplicateMovement; // 0x260(0x01)
	Unknown bHidden; // 0x222(0x01)
	Unknown bTearOff; // 0x284(0x01)
	Unknown bExchangedRoles; // 0x120(0x01)
	Unknown bNetLoadOnClient; // 0x138(0x01)
	Unknown bNetUseOwnerRelevancy; // 0xe8(0x01)
	Unknown bRelevantForNetworkReplays; // 0x170(0x01)
	Unknown bRelevantForLevelBounds; // 0x138(0x01)
	Unknown bReplayRewindable; // 0x9f(0x01)
	Unknown bAllowTickBeforeBeginPlay; // 0x1c4(0x01)
	Unknown bAutoDestroyWhenFinished; // 0x1c4(0x01)
	Unknown bCanBeDamaged; // 0x1a0(0x01)
	Unknown bBlockInput; // 0x303(0x01)
	Unknown bCollideWhenPlacing; // 0x301(0x01)
	Unknown bFindCameraComponentWhenViewTar; // 0x251(0x01)
	Unknown bGenerateOverlapEventsDuringLevelStreaming; // 0x30e(0x01)
	Unknown bIgnoresOriginShifting; // 0x155(0x01)
	Unknown bEnableAutoLODGeneration; // 0x251(0x01)
	Unknown bIsEditorOnlyActor; // 0x120(0x01)
	Unknown bActorSeamlessTraveled; // 0xea(0x01)
	Unknown bReplicates; // 0x9d(0x01)
	Unknown bCanBeInCluster; // 0x90(0x01)
	Unknown bAllowReceiveTickEv; // 0x198(0x01)
	Unknown bActorEnableCollision; // 0x1b8(0x01)
	Unknown bActorIsBeingDestroyed; // 0x30e(0x01)
	Unknown UpdateOverlapsMethodDuringLevelStreaming; // 0x154(0x01)
	Unknown DefaultUpdateOverlapsMethodDuringLevelStreaming; // 0xa3(0x01)
	Unknown RemoteRole; // 0x279(0x01)
	Unknown ReplicatedMovement; // 0xec(0x34)
	float InitialLifeSpan; // 0x2e0(0x04)
	float CustomTimeDilation; // 0x308(0x04)
	Unknown AttachmentReplication; // 0xa8(0x40)
	Unknown Owner; // 0x178(0x08)
	struct FName NetDriverName; // 0x94(0x08)
	Unknown Role; // 0x9e(0x01)
	Unknown NetDormancy; // 0x238(0x01)
	Unknown SpawnCollisionHandlingMethod; // 0x304(0x01)
	Unknown AutoReceiveInput; // 0x302(0x01)
	int32_t InputPriority; // 0x150(0x04)
	Unknown InputComponent; // 0x2f8(0x08)
	float NetCullDistanceSquared; // 0x280(0x04)
	int32_t NetTag; // 0x24c(0x04)
	float NetUpdateFrequency; // 0x27c(0x04)
	float MinNetUpdateFrequency; // 0x288(0x04)
	float NetPriority; // 0x21c(0x04)
	Unknown Instigator; // 0x258(0x08)
	Unknown Children; // 0x268(0x10)
	Unknown RootComponent; // 0x158(0x08)
	Unknown ControllingMatineeActors; // 0x208(0x10)
	Unknown Layers; // 0x188(0x10)
	Unknown ParentComponent; // 0x1bc(0x08)
	Unknown bEnableRerunConstructionScript; // 0x30c(0x01)
	Unknown Tags; // 0x140(0x10)
	struct FMulticastSparseDelegate OnTakeAnyDamage; // 0x218(0x01)
	struct FMulticastSparseDelegate OnTakePointDamage; // 0x27a(0x01)
	struct FMulticastSparseDelegate OnTakeRadialDamage; // 0x9c(0x01)
	struct FMulticastSparseDelegate OnActorBeginOverlap; // 0x27b(0x01)
	struct FMulticastSparseDelegate OnActorEndOverlap; // 0xa0(0x01)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x221(0x01)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0xe9(0x01)
	struct FMulticastSparseDelegate OnClicked; // 0x278(0x01)
	struct FMulticastSparseDelegate OnReleased; // 0x2e4(0x01)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x300(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x285(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0xa2(0x01)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x250(0x01)
	struct FMulticastSparseDelegate OnActorHit; // 0x180(0x01)
	struct FMulticastSparseDelegate OnDestroyed; // 0x220(0x01)
	struct FMulticastSparseDelegate OnEndPlay; // 0x30d(0x01)
	Unknown InstanceComponents; // 0x128(0x10)
	Unknown BlueprintCreatedComponents; // 0x1a8(0x10)
	Unknown LoadedObjects; // 0x1c8(0x10)
	Unknown bShouldDoAnimNotifies; // 0x318(0x01)
	Unknown bWakeOnLevelStart; // 0x318(0x01)
	Unknown SkeletalMeshComponent; // 0x320(0x08)
	Unknown ReplicatedMesh; // 0x328(0x08)
	Unknown ReplicatedPhysAsset; // 0x330(0x08)
	Unknown ReplicatedMaterial0; // 0x338(0x08)
	Unknown ReplicatedMaterial1; // 0x340(0x08)
	float MinDrawDistance; // 0x240(0x04)
	float LDMaxDrawDistance; // 0x244(0x04)
	float CachedMaxDrawDistance; // 0x248(0x04)
	Unknown DepthPriorityGroup; // 0x24c(0x01)
	Unknown ViewOwnerDepthPriorityGroup; // 0x24d(0x01)
	Unknown IndirectLightingCacheQuality; // 0x24e(0x01)
	Unknown LightmapType; // 0x24f(0x01)
	Unknown bUseMaxLODAsImposter; // 0x250(0x01)
	Unknown bBatchImpostersAsInstances; // 0x250(0x01)
	Unknown bNeverDistanceCull; // 0x250(0x01)
	Unknown bAlwaysCreatePhysicsState; // 0x250(0x01)
	Unknown bGenerateOverlapEvents; // 0x251(0x01)
	Unknown bMultiBodyOverlap; // 0x251(0x01)
	Unknown bTraceComplexOnMove; // 0x251(0x01)
	Unknown bReturnMaterialOnMove; // 0x251(0x01)
	Unknown bUseViewOwnerDepthPriorityGroup; // 0x251(0x01)
	Unknown bAllowCullDistanceVolume; // 0x251(0x01)
	Unknown bHasMotionBlurVelocityMeshes; // 0x251(0x01)
	Unknown bVisibleInReflectionCaptures; // 0x251(0x01)
	Unknown bVisibleInRayTracing; // 0x252(0x01)
	Unknown bRenderInMainPass; // 0x252(0x01)
	Unknown bRenderInDepthPass; // 0x252(0x01)
	Unknown bReceivesDecals; // 0x252(0x01)
	Unknown bOwnerNoSee; // 0x252(0x01)
	Unknown bOnlyOwnerSee; // 0x252(0x01)
	Unknown bIgnoreNearClippingForOcclusion; // 0x252(0x01)
	Unknown bTreatAsBackgroundForOcclusion; // 0x252(0x01)
	Unknown bUseAsOccluder; // 0x253(0x01)
	Unknown bSelectable; // 0x253(0x01)
	Unknown bForceMipStreaming; // 0x253(0x01)
	Unknown bHasPerInstanceHitProxies; // 0x253(0x01)
	Unknown CastShadow; // 0x253(0x01)
	Unknown bAffectDynamicIndirectLighting; // 0x253(0x01)
	Unknown bAffectDistanceFieldLighting; // 0x253(0x01)
	Unknown bCastDynamicShadow; // 0x253(0x01)
	Unknown bCastStaticShadow; // 0x254(0x01)
	Unknown bCastDirectionalShadow; // 0x254(0x01)
	Unknown bCastVolumetricTranslucentShadow; // 0x254(0x01)
	Unknown bSelfShadowOnly; // 0x254(0x01)
	Unknown bCastFarShadow; // 0x254(0x01)
	Unknown bCastInsetShadow; // 0x254(0x01)
	Unknown bCastCinematicShadow; // 0x254(0x01)
	Unknown bCastHiddenShadow; // 0x254(0x01)
	Unknown bCastShadowAsTwoSided; // 0x255(0x01)
	Unknown bLightAsIfStatic; // 0x255(0x01)
	Unknown bLightAttachmentsAsGroup; // 0x255(0x01)
	Unknown bExcludeFromLightAttachmentGroup; // 0x255(0x01)
	Unknown bReceiveMobileCSMShadows; // 0x255(0x01)
	Unknown bSingleSampleShadowFromStationaryLights; // 0x255(0x01)
	Unknown bIgnoreRadialImpulse; // 0x255(0x01)
	Unknown bIgnoreRadialForce; // 0x255(0x01)
	Unknown bApplyImpulseOnDamage; // 0x256(0x01)
	Unknown bReplicatePhysicsToAutonomousPr; // 0x256(0x01)
	Unknown bFillCollisionUnderneathForNavmesh; // 0x256(0x01)
	Unknown AlwaysLoadOnClient; // 0x256(0x01)
	Unknown AlwaysLoadOnServer; // 0x256(0x01)
	Unknown bUseEditorCompositing; // 0x256(0x01)
	Unknown bRenderCustomDepth; // 0x256(0x01)
	Unknown bHasNoStreamableTextures; // 0x257(0x01)
	Unknown bHasCustomNavigableGeometry; // 0x258(0x01)
	Unknown CanCharacterStepUpOn; // 0x25a(0x01)
	Unknown LightingChannels; // 0x25b(0x01)
	Unknown CustomDepthStencilWriteMask; // 0x25c(0x01)
	int32_t CustomDepthStencilValue; // 0x260(0x04)
	Unknown CustomPrimitiveData; // 0x268(0x10)
	Unknown CustomPrimitiveDataInternal; // 0x278(0x10)
	int32_t TranslucencySortPriority; // 0x288(0x04)
	int32_t VisibilityId; // 0x28c(0x04)
	Unknown RuntimeVirtualTextures; // 0x290(0x10)
	int8_t VirtualTextureLodBias; // 0x2a0(0x01)
	int8_t VirtualTextureCullMips; // 0x2a1(0x01)
	int8_t VirtualTextureMinCoverage; // 0x2a2(0x01)
	Unknown VirtualTextureRenderPassType; // 0x2a3(0x01)
	float LpvBiasMultiplier; // 0x2a8(0x04)
	float BoundsScale; // 0x2b4(0x04)
	Unknown MoveIgnoreActors; // 0x2c8(0x10)
	Unknown MoveIgnoreComponents; // 0x2d8(0x10)
	Unknown BodyInstance; // 0x2f8(0x190)
	struct FMulticastSparseDelegate OnComponentHit; // 0x488(0x01)
	struct FMulticastSparseDelegate OnComponent; // 0x489(0x01)
	struct FMulticastSparseDelegate OnComponentEndOverlap; // 0x48a(0x01)
	struct FMulticastSparseDelegate OnComponentWake; // 0x48b(0x01)
	struct FMulticastSparseDelegate OnComponentSleep; // 0x48c(0x01)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x48e(0x01)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0x48f(0x01)
	struct FMulticastSparseDelegate OnClicked; // 0x490(0x01)
	struct FMulticastSparseDelegate OnReleased; // 0x491(0x01)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x492(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x493(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x494(0x01)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x495(0x01)
	Unknown LODParentPrimitive; // 0x4b0(0x08)
	float MipStreamingScale; // 0x4b8(0x04)
	Unknown OverrideMaterials; // 0x4c0(0x10)
	Unknown bEnableMaterialParameter; // 0x4e0(0x01)
	Unknown SkeletalMesh; // 0x4e8(0x08)
	Unknown MasterPoseComponent; // 0x4f0(0x08)
	Unknown SkinCacheUsage; // 0x4f8(0x10)
	Unknown PhysicsAssetOverride; // 0x600(0x08)
	int32_t ForcedLodModel; // 0x608(0x04)
	int32_t MinLodModel; // 0x60c(0x04)
	float StreamingDistanceMultiplier; // 0x618(0x04)
	Unknown LODInfo; // 0x628(0x10)
	Unknown VisibilityBasedAnimTickOption; // 0x65c(0x01)
	Unknown bOverrideMinLod; // 0x65e(0x01)
	Unknown bUseBoundsFromMasterPoseC; // 0x65e(0x01)
	Unknown bForceWireframe; // 0x65e(0x01)
	Unknown bDisplayBones; // 0x65e(0x01)
	Unknown bDisableMorphTarget; // 0x65e(0x01)
	Unknown bHideSkin; // 0x65e(0x01)
	Unknown bPerBoneMotionBlur; // 0x65f(0x01)
	Unknown bComponentUseFixedSkelBounds; // 0x65f(0x01)
	Unknown bConsiderAllBodiesForBounds; // 0x65f(0x01)
	Unknown bSyncAttachParentLOD; // 0x65f(0x01)
	Unknown bCanHighlightSelectedSections; // 0x65f(0x01)
	Unknown bRecentlyRendered; // 0x65f(0x01)
	Unknown bCastCapsuleDirectShadow; // 0x65f(0x01)
	Unknown bCastCapsuleIndirectShadow; // 0x65f(0x01)
	Unknown bCPUSkinning; // 0x660(0x01)
	Unknown bEnableUpdateRateOptimizations; // 0x660(0x01)
	Unknown bDisplayDebugUpdateRateOptimizations; // 0x660(0x01)
	Unknown bRenderStatic; // 0x660(0x01)
	Unknown bIgnoreMasterPoseComponentLOD; // 0x660(0x01)
	Unknown bCachedLocalBoundsUpToDate; // 0x660(0x01)
	Unknown bForceMeshObjectUpdate; // 0x661(0x01)
	float CapsuleIndirectShadowMinVisibility; // 0x664(0x04)
	Unknown CachedWorldSpaceBounds; // 0x678(0x1c)
	Unknown CachedWorldToLocalTransform; // 0x6a0(0x40)
	double ForceMipLevelsToBeResidentTimestamp; // 0x28(0x08)
	int32_t NumCinematicMipLevels; // 0x30(0x04)
	int32_t StreamingIndex; // 0x34(0x04)
	int32_t CachedCombinedLODBias; // 0x38(0x04)
	Unknown CachedNumResidentLODs; // 0x3c(0x01)
	Unknown bCachedReadyForStreaming; // 0x3d(0x01)
	Unknown NeverStream; // 0x3d(0x01)
	Unknown bGlobalForceMipLevelsToBeResident; // 0x3d(0x01)
	Unknown bIsStreamable; // 0x3d(0x01)
	Unknown bHasStreamingUpdatePending; // 0x3d(0x01)
	Unknown bForceMiplevelsToBeResident; // 0x3d(0x01)
	Unknown bIgnoreStreamingMipBias; // 0x3d(0x01)
	Unknown bUseCinematicMipLev; // 0x3d(0x01)
	Unknown Skeleton; // 0x60(0x08)
	Unknown ImportedBounds; // 0x68(0x1c)
	Unknown ExtendedBounds; // 0x84(0x1c)
	Unknown PositiveBoundsExtension; // 0xa0(0x0c)
	Unknown NegativeBoundsExtension; // 0xac(0x0c)
	Unknown Materials; // 0xb8(0x10)
	Unknown SkelMirrorTable; // 0xc8(0x10)
	Unknown LODInfo; // 0xd8(0x10)
	Unknown MinLOD; // 0x138(0x04)
	Unknown DisableBelowMinLodStripping; // 0x13c(0x01)
	Unknown SkelMirrorAxis; // 0x13d(0x01)
	Unknown SkelMirrorFlipAxis; // 0x13e(0x01)
	Unknown bUseFullPrecisionUVs; // 0x13f(0x01)
	Unknown bUseHighPrecisionTangentBasis; // 0x13f(0x01)
	Unknown bHasBeenSimplified; // 0x13f(0x01)
	Unknown bHasVertexColors; // 0x13f(0x01)
	Unknown bEnablePerPolyCollision; // 0x13f(0x01)
	Unknown BodySetup; // 0x140(0x08)
	Unknown PhysicsAsset; // 0x148(0x08)
	Unknown ShadowPhysicsAsset; // 0x150(0x08)
	Unknown NodeMappingData; // 0x158(0x10)
	Unknown MorphTargets; // 0x168(0x10)
	Unknown PostProcessAnimBlueprint; // 0x2f0(0x08)
	Unknown MeshClothingAssets; // 0x2f8(0x10)
	Unknown SamplingInfo; // 0x308(0x30)
	Unknown AssetUserData; // 0x338(0x10)
	Unknown Sockets; // 0x350(0x10)
	Unknown SkinWeightProfiles; // 0x370(0x10)
	Unknown StaticMeshComponent; // 0x310(0x08)
	Unknown bStaticMeshReplicateMovement; // 0x318(0x01)
	Unknown NavigationGeometryGatheringMode; // 0x319(0x01)
	Unknown LightingGuid; // 0x48(0x10)
	int32_t LODBias; // 0x58(0x04)
	Unknown CompressionSettings; // 0x5c(0x01)
	Unknown Filter; // 0x5d(0x01)
	Unknown MipLoadOptions; // 0x5e(0x01)
	Unknown LODGroup; // 0x5f(0x01)
	Unknown SRGB; // 0x60(0x01)
	Unknown bNoTiling; // 0x60(0x01)
	Unknown VirtualTextureStreaming; // 0x60(0x01)
	Unknown CompressionYCoCg; // 0x60(0x01)
	Unknown bAsyncResourceReleaseHasBeenStarted; // 0x60(0x01)
	Unknown AssetUserData; // 0x68(0x10)
	Unknown Format; // 0xc0(0x01)
	Unknown PlayerOwner; // 0x310(0x08)
	Unknown bLostFocusPaused; // 0x318(0x01)
	Unknown bShowHUD; // 0x318(0x01)
	Unknown bShowDebugInfo; // 0x318(0x01)
	int32_t CurrentTargetIndex; // 0x31c(0x04)
	Unknown bShowHitBoxDebugInfo; // 0x320(0x01)
	Unknown bShowOverlays; // 0x320(0x01)
	Unknown bEnableDebugTextShadow; // 0x320(0x01)
	Unknown PostRenderedActors; // 0x328(0x10)
	Unknown DebugDisplay; // 0x340(0x10)
	Unknown ToggledDebugCategories; // 0x350(0x10)
	Unknown Canvas; // 0x360(0x08)
	Unknown DebugCanvas; // 0x368(0x08)
	Unknown DebugTextList; // 0x370(0x10)
	Unknown ShowDebugTargetDesiredClass; // 0x380(0x08)
	Unknown ShowDebugTargetActor; // 0x388(0x08)
	Unknown PlayerController; // 0x30(0x08)
	int32_t CurrentNetSpeed; // 0x38(0x04)
	int32_t ConfiguredInternetSpeed; // 0x3c(0x04)
	int32_t ConfiguredLanSpeed; // 0x40(0x04)
	Unknown SelfNetConnection; // 0xb0(0x08)
	Unknown Children; // 0xb8(0x10)
	Unknown Driver; // 0xc8(0x08)
	Unknown PackageMapClass; // 0xd0(0x08)
	Unknown PackageMap; // 0xd8(0x08)
	Unknown OpenChannels; // 0xe0(0x10)
	Unknown SentTemporaries; // 0xf0(0x10)
	Unknown ViewTarget; // 0x100(0x08)
	Unknown OwningActor; // 0x108(0x08)
	int32_t MaxPacket; // 0x110(0x04)
	Unknown InternalAck; // 0x114(0x01)
	Unknown PlayerId; // 0x1d0(0x28)
	double LastReceiveTime; // 0x240(0x08)
	Unknown ChannelsToTick; // 0x1580(0x10)
	struct FString NetConnectionClassName; // 0x30(0x10)
	struct FString ReplicationDriverClassName; // 0x40(0x10)
	int32_t MaxDownloadSize; // 0x50(0x04)
	Unknown bClampListenServerTickRate; // 0x54(0x01)
	int32_t NetServerMaxTickRate; // 0x58(0x04)
	int32_t MaxNetTickRate; // 0x5c(0x04)
	int32_t MaxInternetClientRate; // 0x60(0x04)
	int32_t MaxClientRate; // 0x64(0x04)
	float ServerTravelPause; // 0x68(0x04)
	float SpawnPrioritySeconds; // 0x6c(0x04)
	float RelevantTimeout; // 0x70(0x04)
	float KeepAliveTime; // 0x74(0x04)
	float InitialConnectTimeout; // 0x78(0x04)
	float ConnectionTimeout; // 0x7c(0x04)
	float TimeoutMultiplierForUnoptimizedBuilds; // 0x80(0x04)
	Unknown bNoTimeouts; // 0x84(0x01)
	Unknown bNeverApplyNetworkEmulationSettings; // 0x85(0x01)
	Unknown ServerConnection; // 0x88(0x08)
	Unknown ClientConnections; // 0x90(0x10)
	int32_t RecentlyDisconnectedTrackingTime; // 0x100(0x04)
	Unknown World; // 0x140(0x08)
	Unknown WorldPackage; // 0x148(0x08)
	Unknown NetConnectionClass; // 0x170(0x08)
	Unknown ReplicationDriverClass; // 0x178(0x08)
	struct FName NetDriverName; // 0x190(0x08)
	Unknown ChannelDefinitions; // 0x198(0x10)
	Unknown ChannelDefinitionMap; // 0x1a8(0x50)
	Unknown ActorChannelPool; // 0x1f8(0x10)
	float Time; // 0x210(0x04)
	Unknown ReplicationDriver; // 0x6e8(0x08)
	Unknown TinyFont; // 0x30(0x08)
	Unknown TinyFontName; // 0x38(0x18)
	Unknown SmallFont; // 0x50(0x08)
	Unknown SmallFontName; // 0x58(0x18)
	Unknown MediumFont; // 0x70(0x08)
	Unknown MediumFontName; // 0x78(0x18)
	Unknown LargeFont; // 0x90(0x08)
	Unknown LargeFontName; // 0x98(0x18)
	Unknown SubtitleFont; // 0xb0(0x08)
	Unknown SubtitleFontName; // 0xb8(0x18)
	Unknown AdditionalFonts; // 0xd0(0x10)
	Unknown AdditionalFontNames; // 0xe8(0x10)
	Unknown ConsoleClass; // 0xf8(0x08)
	Unknown ConsoleClassName; // 0x100(0x18)
	Unknown GameViewportClientClass; // 0x118(0x08)
	Unknown GameViewportClientClassName; // 0x120(0x18)
	Unknown LocalPlayerClass; // 0x138(0x08)
	Unknown LocalPlayerClassName; // 0x140(0x18)
	Unknown WorldSettingsClass; // 0x158(0x08)
	Unknown WorldSettingsClassName; // 0x160(0x18)
	Unknown NavigationSystemClassName; // 0x178(0x18)
	Unknown NavigationSystemClass; // 0x190(0x08)
	Unknown NavigationSystemConfigClassName; // 0x198(0x18)
	Unknown NavigationSystemConfigClass; // 0x1b0(0x08)
	Unknown AvoidanceManagerClassName; // 0x1b8(0x18)
	Unknown AvoidanceManagerClass; // 0x1d0(0x08)
	Unknown PhysicsCollisionHandlerClass; // 0x1d8(0x08)
	Unknown PhysicsCollisionHandlerClassName; // 0x1e0(0x18)
	Unknown GameUserSettingsClassName; // 0x1f8(0x18)
	Unknown GameUserSettingsClass; // 0x210(0x08)
	Unknown AIControllerClassName; // 0x218(0x18)
	Unknown GameUserSettings; // 0x230(0x08)
	Unknown LevelScriptActorClass; // 0x238(0x08)
	Unknown LevelScriptActorClassName; // 0x240(0x18)
	Unknown DefaultBlueprintBaseClassName; // 0x258(0x18)
	Unknown GameSingletonClassName; // 0x270(0x18)
	Unknown GameSingleton; // 0x288(0x08)
	Unknown AssetManagerClassName; // 0x290(0x18)
	Unknown AssetManager; // 0x2a8(0x08)
	Unknown DefaultTexture; // 0x2b0(0x08)
	Unknown DefaultTextureName; // 0x2b8(0x18)
	Unknown DefaultDiffuseTexture; // 0x2d0(0x08)
	Unknown DefaultDiffuseTextureName; // 0x2d8(0x18)
	Unknown DefaultBSPVertexTexture; // 0x2f0(0x08)
	Unknown DefaultBSPVertexTextureName; // 0x2f8(0x18)
	Unknown HighFrequencyNoiseTexture; // 0x310(0x08)
	Unknown HighFrequencyNoiseTextureName; // 0x318(0x18)
	Unknown DefaultBokehTexture; // 0x330(0x08)
	Unknown DefaultBokehTextureName; // 0x338(0x18)
	Unknown DefaultBloomKernelTexture; // 0x350(0x08)
	Unknown DefaultBloomKernelTextureName; // 0x358(0x18)
	Unknown WireframeMaterial; // 0x370(0x08)
	struct FString WireframeMaterialName; // 0x378(0x10)
	Unknown DebugMeshMaterial; // 0x388(0x08)
	Unknown DebugMeshMaterialName; // 0x390(0x18)
	Unknown EmissiveMeshMaterial; // 0x3a8(0x08)
	Unknown EmissiveMeshMaterialName; // 0x3b0(0x18)
	Unknown LevelColorationLitMaterial; // 0x3c8(0x08)
	struct FString LevelColorationLitMaterialName; // 0x3d0(0x10)
	Unknown LevelColorationUnlitMaterial; // 0x3e0(0x08)
	struct FString LevelColorationUnlitMaterialName; // 0x3e8(0x10)
	Unknown LightingTexelDensityMaterial; // 0x3f8(0x08)
	struct FString LightingTexelDensityName; // 0x400(0x10)
	Unknown ShadedLevelColorationLitMaterial; // 0x410(0x08)
	struct FString ShadedLevelColorationLitMaterialName; // 0x418(0x10)
	Unknown ShadedLevelColorationUnlitMater; // 0x428(0x08)
	struct FString ShadedLevelColorationUnlitMaterlNa; // 0x430(0x10)
	Unknown RemoveSurfaceMaterial; // 0x440(0x08)
	Unknown RemoveSurfaceMaterialName; // 0x448(0x18)
	Unknown VertexColorMaterial; // 0x460(0x08)
	struct FString VertexColorMaterialName; // 0x468(0x10)
	Unknown VertexColorViewModeMaterial_ColorOnly; // 0x478(0x08)
	struct FString VertexColorViewModeMaterialName_ColorOnly; // 0x480(0x10)
	Unknown VertexColorViewModeMaterial_AlphaAsColor; // 0x490(0x08)
	struct FString VertexColorViewModeMaterialName_AlphaAsColor; // 0x498(0x10)
	Unknown VertexColorViewModeMaterial_RedOnly; // 0x4a8(0x08)
	struct FString VertexColorViewModeMaterialName_RedOnly; // 0x4b0(0x10)
	Unknown VertexColorViewModeMaterial_GreenOnly; // 0x4c0(0x08)
	struct FString VertexColorViewModeMaterialName_GreenOnly; // 0x4c8(0x10)
	Unknown VertexColorViewModeMaterial_BlueOnly; // 0x4d8(0x08)
	struct FString VertexColorViewModeMaterialName_BlueOnly; // 0x4e0(0x10)
	Unknown DebugEditorMaterialName; // 0x4f0(0x18)
	Unknown ConstraintLimitMaterial; // 0x508(0x08)
	Unknown ConstraintLimitMaterialX; // 0x510(0x08)
	Unknown ConstraintLimitMaterialXAxis; // 0x518(0x08)
	Unknown ConstraintLimitMaterialY; // 0x520(0x08)
	Unknown ConstraintLimitMaterialYAxis; // 0x528(0x08)
	Unknown ConstraintLimitMaterialZ; // 0x530(0x08)
	Unknown ConstraintLimitMaterialZAxis; // 0x538(0x08)
	Unknown ConstraintLimitMaterialPrismatic; // 0x540(0x08)
	Unknown InvalidLightmapSettingsMaterial; // 0x548(0x08)
	Unknown InvalidLightmapSettingsMaterialName; // 0x550(0x18)
	Unknown PreviewShadowsIndicatorMaterial; // 0x568(0x08)
	Unknown PreviewShadowsIndicatorMaterialName; // 0x570(0x18)
	Unknown ArrowMaterial; // 0x588(0x08)
	Unknown ArrowMaterialYellow; // 0x590(0x08)
	Unknown ArrowMaterialName; // 0x598(0x18)
	Unknown LightingOnlyBrightness; // 0x5b0(0x10)
	Unknown ShaderComplexityColors; // 0x5c0(0x10)
	Unknown QuadComplexityColors; // 0x5d0(0x10)
	Unknown LightComplexityColors; // 0x5e0(0x10)
	Unknown StationaryLightOverlapColors; // 0x5f0(0x10)
	Unknown LODColorationColors; // 0x600(0x10)
	Unknown HLODColorationColors; // 0x610(0x10)
	Unknown StreamingAccuracyColors; // 0x620(0x10)
	float MaxPixelShaderAdditiveComplexityCoun; // 0x630(0x04)
	float MaxES3PixelShaderAdditiveComplexityCount; // 0x634(0x04)
	float MinLightMapDensity; // 0x638(0x04)
	float IdealLightMapDensity; // 0x63c(0x04)
	float MaxLightMapDensity; // 0x640(0x04)
	Unknown bRenderLightMapDensityGrayscale; // 0x644(0x01)
	float RenderLightMapDensityGrayscaleScale; // 0x648(0x04)
	float RenderLightMapDensityColorScale; // 0x64c(0x04)
	Unknown LightMapDensityVertexMappedColor; // 0x650(0x10)
	Unknown LightMapDensitySelectedColor; // 0x660(0x10)
	Unknown StatColorMappings; // 0x670(0x10)
	Unknown DefaultPhysMaterial; // 0x680(0x08)
	Unknown DefaultPhysMaterialName; // 0x688(0x18)
	Unknown ActiveGameNameRedirects; // 0x6a0(0x10)
	Unknown ActiveClassRedirects; // 0x6b0(0x10)
	Unknown ActivePluginRedirects; // 0x6c0(0x10)
	Unknown ActiveStructRedirects; // 0x6d0(0x10)
	Unknown PreIntegratedSkinBRDFTexture; // 0x6e0(0x08)
	Unknown PreIntegratedSkinBRDFTextureName; // 0x6e8(0x18)
	Unknown BlueNoiseTexture; // 0x700(0x08)
	Unknown BlueNoiseTextureName; // 0x708(0x18)
	Unknown MiniFontTexture; // 0x720(0x08)
	Unknown MiniFontTextureName; // 0x728(0x18)
	Unknown WeightMapPlaceholderTexture; // 0x740(0x08)
	Unknown WeightMapPlaceholderTextureName; // 0x748(0x18)
	Unknown LightMapDensityTexture; // 0x760(0x08)
	Unknown LightMapDensityTextureName; // 0x768(0x18)
	Unknown GameViewport; // 0x788(0x08)
	Unknown DeferredCommands; // 0x790(0x10)
	int32_t TickCycles; // 0x7a0(0x04)
	int32_t GameCycles; // 0x7a4(0x04)
	int32_t ClientCycles; // 0x7a8(0x04)
	float NearClipPlane; // 0x7ac(0x04)
	float EditorNearClipPlane; // 0x7b0(0x04)
	Unknown bUseCustomAudioModule; // 0x7b4(0x01)
	Unknown bHardwareSurveyEnabled; // 0x7b8(0x01)
	Unknown bSubtitlesEnabled; // 0x7b8(0x01)
	Unknown bSubtitlesForcedOff; // 0x7b8(0x01)
	int32_t MaximumLoopIterationCount; // 0x7bc(0x04)
	Unknown bCanBlueprintsTickByDefault; // 0x7c0(0x01)
	Unknown bOptimizeAnimBlueprintMemberVar; // 0x7c0(0x01)
	Unknown bAllowMultiThreadedAnimationUpdate; // 0x7c0(0x01)
	Unknown bEnableEditorPSysRealtimeLOD; // 0x7c0(0x01)
	Unknown bSmoothFrameRate; // 0x7c0(0x01)
	Unknown bUseFixedFrameRate; // 0x7c0(0x01)
	float FixedFrameRate; // 0x7c4(0x04)
	Unknown SmoothedFrameRateRange; // 0x7c8(0x10)
	Unknown CustomTimeStep; // 0x7d8(0x08)
	Unknown CustomTimeStepClassName; // 0x800(0x18)
	Unknown TimecodeProvider; // 0x818(0x08)
	Unknown TimecodeProviderClassName; // 0x840(0x18)
	Unknown bGenerateDefaultTimecode; // 0x858(0x01)
	Unknown GenerateDefaultTimecodeFrameRate; // 0x85c(0x08)
	float GenerateDefaultTimecodeFrameDelay; // 0x864(0x04)
	Unknown bCheckForMultiplePawnsSpawnedInAFrame; // 0x868(0x01)
	int32_t NumPawnsAllowedToBeSpawnedInAFr; // 0x86c(0x04)
	Unknown bShouldGenerateLowQualityLightmaps; // 0x870(0x01)
	Unknown C_WorldBox; // 0x874(0x04)
	Unknown C_BrushWire; // 0x878(0x04)
	Unknown C_AddWire; // 0x87c(0x04)
	Unknown C_SubtractWire; // 0x880(0x04)
	Unknown C_SemiSolidWire; // 0x884(0x04)
	Unknown C_NonSolidWire; // 0x888(0x04)
	Unknown C_WireBackground; // 0x88c(0x04)
	Unknown C_ScaleBoxHi; // 0x890(0x04)
	Unknown C_VolumeCollision; // 0x894(0x04)
	Unknown C_BSPCollision; // 0x898(0x04)
	Unknown C_OrthoBackground; // 0x89c(0x04)
	Unknown C_Volume; // 0x8a0(0x04)
	Unknown C_BrushShape; // 0x8a4(0x04)
	float StreamingDistanceFactor; // 0x8a8(0x04)
	Unknown GameScreenshotSaveDirectory; // 0x8b0(0x10)
	Unknown TransitionType; // 0x8c0(0x01)
	struct FString TransitionDescription; // 0x8c8(0x10)
	struct FString TransitionGameMode; // 0x8d8(0x10)
	float MeshLODRange; // 0x8e8(0x04)
	Unknown bAllowMatureLanguage; // 0x8ec(0x01)
	float CameraRotationThreshold; // 0x8f0(0x04)
	float CameraTranslationThreshold; // 0x8f4(0x04)
	float PrimitiveProbablyVisibleTime; // 0x8f8(0x04)
	float MaxOcclusionPixelsFraction; // 0x8fc(0x04)
	Unknown bPauseOnLossOfFocus; // 0x900(0x01)
	int32_t MaxParticleResize; // 0x904(0x04)
	int32_t MaxParticleResizeWarn; // 0x908(0x04)
	Unknown PendingDroppedNotes; // 0x910(0x10)
	float NetClientTicksPerSecond; // 0x920(0x04)
	float DisplayGamma; // 0x924(0x04)
	float MinDesiredFrameRate; // 0x928(0x04)
	Unknown DefaultSelectedMaterialColor; // 0x92c(0x10)
	Unknown SelectedMaterialColor; // 0x93c(0x10)
	Unknown SelectionOutlineColor; // 0x94c(0x10)
	Unknown SubduedSelectionOutlineColor; // 0x95c(0x10)
	Unknown SelectedMaterialColorOverride; // 0x96c(0x10)
	Unknown bIsOverridingSelectedColor; // 0x97c(0x01)
	Unknown bEnableOnScreenDebugMessages; // 0x980(0x01)
	Unknown bEnableOnScreenDebugMessagesDisplay; // 0x980(0x01)
	Unknown bSuppressMapWarnings; // 0x980(0x01)
	Unknown bDisableAILogging; // 0x980(0x01)
	uint32_t bEnableVisualLogRecordingOnStar; // 0x984(0x04)
	int32_t ScreenSaverInhibitorSemaphore; // 0x98c(0x04)
	Unknown bLockReadOnlyLevels; // 0x990(0x01)
	struct FString ParticleEventManagerClassPath; // 0x998(0x10)
	float SelectionHighlightIntensity; // 0x9a8(0x04)
	float BSPSelectionHighlightIntensity; // 0x9ac(0x04)
	float SelectionHighlightIntensityBillboards; // 0x9b0(0x04)
	Unknown NetDriverDefinitions; // 0xc00(0x10)
	Unknown ServerActors; // 0xc10(0x10)
	Unknown RuntimeServerActors; // 0xc20(0x10)
	float NetErrorLogInterval; // 0xc30(0x04)
	Unknown bStartedLoadMapMovie; // 0xc34(0x01)
	int32_t NextWorldContextHandle; // 0xc50(0x04)
	Unknown ViewportClient; // 0x70(0x08)
	Unknown AspectRatioAxisConstraint; // 0x94(0x01)
	Unknown PendingLevelPlayerControllerClass; // 0x98(0x08)
	Unknown bSentSplitJoin; // 0xa0(0x01)
	int32_t ControllerId; // 0xb8(0x04)
	Unknown AnimBlueprintGeneratedClass; // 0x700(0x08)
	Unknown AnimClass; // 0x708(0x08)
	Unknown AnimScriptInstance; // 0x710(0x08)
	Unknown PostprocessAnimInstance; // 0x718(0x08)
	Unknown AnimationData; // 0x720(0x18)
	Unknown RootBoneTranslation; // 0x748(0x0c)
	Unknown LineCheckBoundsScale; // 0x754(0x0c)
	Unknown LinkedInstances; // 0x780(0x10)
	Unknown CachedBoneSpaceTransforms; // 0x790(0x10)
	Unknown CachedComponentSpaceTransforms; // 0x7a0(0x10)
	float GlobalAnimRateScale; // 0x7d0(0x04)
	Unknown KinematicBonesUpdateType; // 0x7d4(0x01)
	Unknown PhysicsTransformUpdateMode; // 0x7d5(0x01)
	Unknown AnimationMode; // 0x7dd(0x01)
	Unknown bDisablePostProcessBlueprint; // 0x7df(0x01)
	Unknown bUpdateOverlapsOnAnimationFinalize; // 0x7df(0x01)
	Unknown bHasValidBodies; // 0x7df(0x01)
	Unknown bBlendPhysics; // 0x7df(0x01)
	Unknown bEnablePhysicsOnDedicatedServer; // 0x7df(0x01)
	Unknown bUpdateJointsFromAnimation; // 0x7e0(0x01)
	Unknown bDisableClothSimulation; // 0x7e0(0x01)
	Unknown bDisableRigidBodyAnimNode; // 0x7e0(0x01)
	Unknown bAllowAnimCurveEvaluation; // 0x7e0(0x01)
	Unknown bDisableAnimCurves; // 0x7e0(0x01)
	Unknown bCollideWithEnvironment; // 0x7e1(0x01)
	Unknown bCollideWithAttachedChildren; // 0x7e1(0x01)
	Unknown bLocalSpaceSimulation; // 0x7e1(0x01)
	Unknown bResetAfterTeleport; // 0x7e1(0x01)
	Unknown bDeferKinematicBoneUpdate; // 0x7e1(0x01)
	Unknown bNoSkeletonUpdate; // 0x7e1(0x01)
	Unknown bPauseAnims; // 0x7e1(0x01)
	Unknown bUseRefPoseOnInitAnim; // 0x7e2(0x01)
	Unknown bEnablePerPolyCollision; // 0x7e2(0x01)
	Unknown bForceRefpose; // 0x7e2(0x01)
	Unknown bOnlyAllowAutonomousTickPose; // 0x7e2(0x01)
	Unknown bIsAutonomousTickPose; // 0x7e2(0x01)
	Unknown bOldForceRefPose; // 0x7e2(0x01)
	Unknown bShowPrePhysBones; // 0x7e2(0x01)
	Unknown bRequiredBonesUpToDate; // 0x7e2(0x01)
	Unknown bAnimTreeInitialised; // 0x7e3(0x01)
	Unknown bIncludeComponentLocationIntoBounds; // 0x7e3(0x01)
	Unknown bEnableLineCheckWithBounds; // 0x7e3(0x01)
	Unknown bUseBendingElements; // 0x7e3(0x01)
	Unknown bUseTetrahedralConstraints; // 0x7e3(0x01)
	Unknown bUseThinShellVolumeConstraints; // 0x7e3(0x01)
	Unknown bUseSelfCollisions; // 0x7e3(0x01)
	Unknown bUseContinuousCollisionDetection; // 0x7e3(0x01)
	Unknown bPropagateCurvesToSlaves; // 0x7e4(0x01)
	Unknown bSkipKinematicUpdateWhenInterpolatin; // 0x7e4(0x01)
	Unknown bSkipBoundsUpdateWhenInterpolating; // 0x7e4(0x01)
	Unknown bNeedsQueuedAnimEventsDispatched; // 0x7e4(0x01)
	uint16_t CachedAnimCurveUidVersion; // 0x7e6(0x02)
	Unknown MassMode; // 0x7e8(0x01)
	float UniformMass; // 0x7ec(0x04)
	float TotalMass; // 0x7f0(0x04)
	float Density; // 0x7f4(0x04)
	float MinPerParticleMass; // 0x7f8(0x04)
	float ClothBlendWeight; // 0x7fc(0x04)
	float EdgeStiffness; // 0x800(0x04)
	float BendingStiffness; // 0x804(0x04)
	float AreaStiffness; // 0x808(0x04)
	float VolumeStiffness; // 0x80c(0x04)
	float StrainLimitingStiffness; // 0x810(0x04)
	float ShapeTargetStiffness; // 0x814(0x04)
	Unknown DisallowedAnimCurves; // 0x818(0x10)
	Unknown BodySetup; // 0x828(0x08)
	struct FMulticastInlineDelegate OnConstraintBroken; // 0x838(0x10)
	Unknown ClothingSimulationFactory; // 0x848(0x08)
	float TeleportDistanceThreshold; // 0x918(0x04)
	float TeleportRotationThreshold; // 0x91c(0x04)
	uint32_t LastPoseTickFrame; // 0x928(0x04)
	Unknown ClothingInteractor; // 0x980(0x08)
	struct FMulticastInlineDelegate OnAnimInitialized; // 0xa50(0x10)
	Unknown CurrentSkeleton; // 0x28(0x08)
	Unknown RootMotionMode; // 0x30(0x01)
	Unknown bUseMultiThreadedAnimationUpdate; // 0x31(0x01)
	Unknown bUsingCopyPoseFromMesh; // 0x31(0x01)
	Unknown bReceiveNotifiesFromLinkedInstances; // 0x31(0x01)
	Unknown bPropagateNotifiesToLinkedInstances; // 0x31(0x01)
	Unknown bQueueMontageEvents; // 0x31(0x01)
	struct FMulticastInlineDelegate OnMontageBlendingOut; // 0x38(0x10)
	struct FMulticastInlineDelegate OnMontageStarted; // 0x48(0x10)
	struct FMulticastInlineDelegate OnMontageEnded; // 0x58(0x10)
	struct FMulticastInlineDelegate OnAllMontageInstancesEnded; // 0x68(0x10)
	Unknown NotifyQueue; // 0x100(0x70)
	Unknown ActiveAnimNotifyState; // 0x170(0x10)
	Unknown SupportedClass; // 0x28(0x08)
	Unknown ExportRootScope; // 0x30(0x08)
	Unknown FormatExtension; // 0x38(0x10)
	Unknown FormatDescription; // 0x48(0x10)
	int32_t PreferredFormatIndex; // 0x58(0x04)
	int32_t TextIndent; // 0x5c(0x04)
	Unknown bText; // 0x60(0x01)
	Unknown bSelectedOnly; // 0x60(0x01)
	Unknown bForceFileOperations; // 0x60(0x01)
	Unknown ExportTask; // 0x68(0x08)
	Unknown bInputEnabled; // 0x310(0x01)
	uint32_t MaxPoolSize; // 0x28(0x04)
	Unknown BrushType; // 0x310(0x01)
	Unknown BrushColor; // 0x314(0x04)
	int32_t PolyFlags; // 0x318(0x04)
	Unknown bColored; // 0x31c(0x01)
	Unknown bSolidWhenSelected; // 0x31c(0x01)
	Unknown bPlaceableFromClassBrowser; // 0x31c(0x01)
	Unknown bNotForClientOrServ; // 0x31c(0x01)
	Unknown Brush; // 0x320(0x08)
	Unknown BrushComponent; // 0x328(0x08)
	Unknown bInManipulation; // 0x330(0x01)
	Unknown SavedSelections; // 0x338(0x10)
	Unknown SelfWorld; // 0x38(0x08)
	Unknown PersistentLevel; // 0x48(0x08)
	Unknown NetDriver; // 0x50(0x08)
	Unknown LineBatcher; // 0x58(0x08)
	Unknown PersistentLineBatcher; // 0x60(0x08)
	Unknown ForegroundLineBatcher; // 0x68(0x08)
	Unknown NetworkManager; // 0x70(0x08)
	Unknown PhysicsCollisionHandler; // 0x78(0x08)
	Unknown ExtraReferencedObjects; // 0x80(0x10)
	Unknown PerModuleDataObjects; // 0x90(0x10)
	Unknown LevelSequenceActors; // 0xa0(0x10)
	Unknown StreamingLevels; // 0xb0(0x10)
	Unknown StreamingLevelsToConsider; // 0xc0(0x48)
	struct FString StreamingLevelsPrefix; // 0x120(0x10)
	Unknown CurrentLevelPendingVisibility; // 0x130(0x08)
	Unknown CurrentLevelPendingInvisibility; // 0x138(0x08)
	Unknown DemoNetDriver; // 0x140(0x08)
	Unknown MyParticleEventManager; // 0x148(0x08)
	Unknown DefaultPhysicsVolume; // 0x150(0x08)
	Unknown bAreConstraintsDirty; // 0x16e(0x01)
	Unknown NavigationSystem; // 0x170(0x08)
	Unknown AuthorityGameMode; // 0x178(0x08)
	Unknown GameState; // 0x180(0x08)
	Unknown AISystem; // 0x188(0x08)
	Unknown AvoidanceManager; // 0x190(0x08)
	Unknown Levels; // 0x198(0x10)
	Unknown LevelCollections; // 0x1a8(0x10)
	Unknown OwningGameInstance; // 0x1d8(0x08)
	Unknown ParameterCollectionInstances; // 0x1e0(0x10)
	Unknown CanvasForRenderingToTarget; // 0x1f0(0x08)
	Unknown CanvasForDrawMaterialToRenderTarget; // 0x1f8(0x08)
	Unknown ComponentsThatNeedEndOfFrameUpdate; // 0x250(0x10)
	Unknown ComponentsThatNeedEndOfFrameUpdate_OnGameThread; // 0x260(0x10)
	Unknown WorldComposition; // 0x5b0(0x08)
	Unknown PSCPool; // 0x650(0x58)
	Unknown SubTracks; // 0x38(0x10)
	Unknown TrackInstClass; // 0x48(0x08)
	Unknown ActiveCondition; // 0x50(0x01)
	struct FString TrackTitle; // 0x58(0x10)
	Unknown bOnePerGroup; // 0x68(0x01)
	Unknown bDirGroupOnly; // 0x68(0x01)
	Unknown bDisableTrack; // 0x68(0x01)
	Unknown bIsSelected; // 0x68(0x01)
	Unknown bIsAnimControlTrack; // 0x68(0x01)
	Unknown bSubTrackOnly; // 0x68(0x01)
	Unknown bVisible; // 0x68(0x01)
	Unknown bIsRecording; // 0x68(0x01)
	Unknown VectorTrack; // 0x70(0x18)
	float CurveTension; // 0x88(0x04)
	Unknown FloatTrack; // 0x70(0x18)
	float CurveTension; // 0x88(0x04)
	Unknown NativeClass; // 0x28(0x08)
	Unknown Material; // 0x28(0x08)
	Unknown Function; // 0x30(0x08)
	Unknown bIsParameterExpression; // 0x38(0x01)
	Unknown Texture; // 0x40(0x08)
	Unknown SamplerType; // 0x48(0x01)
	Unknown IsDefaultMeshpaintTexture; // 0x49(0x01)
	Unknown Coordinates; // 0x50(0x0c)
	Unknown TextureObject; // 0x64(0x0c)
	Unknown MipValue; // 0x78(0x0c)
	Unknown CoordinatesDX; // 0x8c(0x0c)
	Unknown CoordinatesDY; // 0xa0(0x0c)
	Unknown AutomaticViewMipBiasValue; // 0xb4(0x0c)
	Unknown MipValueMode; // 0xc8(0x01)
	Unknown SamplerSource; // 0xc9(0x01)
	Unknown AutomaticViewMipBias; // 0xca(0x01)
	Unknown ConstCoordinate; // 0xcb(0x01)
	int32_t ConstMipValue; // 0xcc(0x04)
	struct FName ParameterName; // 0xd0(0x08)
	Unknown ExpressionGUID; // 0xd8(0x10)
	struct FName Group; // 0xe8(0x08)
	Unknown SelfPawn; // 0x318(0x08)
	Unknown bUseControllerRotationPitch; // 0x328(0x01)
	Unknown bUseControllerRotationYaw; // 0x328(0x01)
	Unknown bUseControllerRotationRoll; // 0x328(0x01)
	Unknown bCanAffectNavigationGeneration; // 0x328(0x01)
	float BaseEyeHeight; // 0x32c(0x04)
	Unknown AutoPossessPlayer; // 0x330(0x01)
	Unknown AutoPossessAI; // 0x331(0x01)
	uint16_t RemoteViewPitch; // 0x332(0x02)
	uint16_t RemoteViewYaw; // 0x334(0x02)
	Unknown AIControllerClass; // 0x338(0x08)
	Unknown PlayerState; // 0x340(0x08)
	Unknown LastHitBy; // 0x350(0x08)
	Unknown Controller; // 0x358(0x08)
	Unknown ControlInputVector; // 0x364(0x0c)
	Unknown LastControlInputVector; // 0x370(0x0c)
	Unknown SelfCharacter; // 0x388(0x08)
	Unknown Mesh; // 0x398(0x08)
	Unknown CharacterMovement; // 0x3a0(0x08)
	Unknown CapsuleComponent; // 0x3a8(0x08)
	Unknown BasedMovement; // 0x3b8(0x30)
	Unknown ReplicatedBasedMovement; // 0x3e8(0x30)
	float AnimRootMotionTranslationScale; // 0x418(0x04)
	Unknown BaseTranslationOffset; // 0x41c(0x0c)
	Unknown BaseRotationOffset; // 0x430(0x10)
	float ReplicatedServerLastTransformUpdateTimeStamp; // 0x440(0x04)
	float ReplayLastTransformUpdateTimeStamp; // 0x444(0x04)
	Unknown ReplicatedMovementMode; // 0x448(0x01)
	Unknown bInBaseReplication; // 0x449(0x01)
	float CrouchedEyeHeight; // 0x44c(0x04)
	Unknown bIsCrouched; // 0x450(0x01)
	Unknown bProxyIsJumpForceApplied; // 0x450(0x01)
	Unknown bPressedJump; // 0x450(0x01)
	Unknown bClientUpdating; // 0x450(0x01)
	Unknown bClientWasFalling; // 0x450(0x01)
	Unknown bClientResimulateRootMotion; // 0x450(0x01)
	Unknown bClientResimulateRootMotionSour; // 0x450(0x01)
	Unknown bSimGravityDisabled; // 0x450(0x01)
	Unknown bClientCheckEncroachmentOnNetUpdate; // 0x451(0x01)
	Unknown bServerMoveIgnoreRootMotion; // 0x451(0x01)
	Unknown bWasJumping; // 0x451(0x01)
	float JumpKeyHoldTime; // 0x454(0x04)
	float JumpForceTimeRemaining; // 0x458(0x04)
	float ProxyJumpForceStartedTime; // 0x45c(0x04)
	float JumpMaxHoldTime; // 0x460(0x04)
	int32_t JumpMaxCount; // 0x464(0x04)
	int32_t JumpCurrentCount; // 0x468(0x04)
	struct FMulticastInlineDelegate OnReachedJumpApex; // 0x470(0x10)
	struct FMulticastInlineDelegate MovementModeChangedDelegate; // 0x490(0x10)
	struct FMulticastInlineDelegate OnCharacterMovementUpdated; // 0x4a0(0x10)
	Unknown SavedRootMotion; // 0x4b0(0x38)
	Unknown ClientRootMotionParams; // 0x4f0(0x40)
	Unknown RootMotionRepMoves; // 0x530(0x10)
	Unknown RepRootMotion; // 0x540(0x98)
	Unknown SplineCurves; // 0x4b8(0x68)
	Unknown SplineInfo; // 0x520(0x18)
	Unknown SplineRotInfo; // 0x538(0x18)
	Unknown SplineScaleInfo; // 0x550(0x18)
	Unknown SplineReparamTable; // 0x568(0x18)
	Unknown bAllowSplineEditingPerInstance; // 0x580(0x01)
	int32_t ReparamStepsPerSegment; // 0x584(0x04)
	float Duration; // 0x588(0x04)
	Unknown bStationaryEndpoints; // 0x58c(0x01)
	Unknown bSplineHasBeenEdited; // 0x58d(0x01)
	Unknown bModifiedByConstructionScript; // 0x58e(0x01)
	Unknown bInputSplinePointsToConstructionScript; // 0x58f(0x01)
	Unknown bDrawDebug; // 0x590(0x01)
	Unknown bClosedLoop; // 0x591(0x01)
	Unknown bLoopPositionOverride; // 0x592(0x01)
	float LoopPosition; // 0x594(0x04)
	Unknown DefaultUpVector; // 0x598(0x0c)
	struct FString HelpDescription; // 0x28(0x10)
	struct FString HelpUsage; // 0x38(0x10)
	struct FString HelpWebLink; // 0x48(0x10)
	Unknown HelpParamNames; // 0x58(0x10)
	Unknown HelpParamDescriptions; // 0x68(0x10)
	Unknown IsServer; // 0x78(0x01)
	Unknown IsClient; // 0x78(0x01)
	Unknown IsEditor; // 0x78(0x01)
	Unknown LogToConsole; // 0x78(0x01)
	Unknown ShowErrorCount; // 0x78(0x01)
	Unknown ShowProgress; // 0x78(0x01)
	Unknown Sound; // 0x238(0x08)
	Unknown InstanceParameters; // 0x240(0x10)
	Unknown SoundClassOverride; // 0x250(0x08)
	Unknown bAutoDestroy; // 0x258(0x01)
	Unknown bStopWhenOwnerDestroyed; // 0x258(0x01)
	Unknown bShouldRemainActiveIfDropped; // 0x258(0x01)
	Unknown bAllowSpatialization; // 0x258(0x01)
	Unknown bOverrideAttenuation; // 0x258(0x01)
	Unknown bOverrideSubtitlePriority; // 0x258(0x01)
	Unknown bIsUISound; // 0x258(0x01)
	Unknown bEnableLowPassFilter; // 0x258(0x01)
	Unknown bOverridePriority; // 0x259(0x01)
	Unknown bSuppressSubtitles; // 0x259(0x01)
	Unknown bAutoManageAttachment; // 0x25a(0x01)
	struct FName AudioComponentUserID; // 0x260(0x08)
	float PitchModulationMin; // 0x268(0x04)
	float PitchModulationMax; // 0x26c(0x04)
	float VolumeModulationMin; // 0x270(0x04)
	float VolumeModulationMax; // 0x274(0x04)
	float VolumeMultiplier; // 0x278(0x04)
	int32_t EnvelopeFollowerAttackTime; // 0x27c(0x04)
	int32_t EnvelopeFollowerReleaseTime; // 0x280(0x04)
	float Priority; // 0x284(0x04)
	float SubtitlePriority; // 0x288(0x04)
	Unknown SourceEffectChain; // 0x290(0x08)
	float PitchMultiplier; // 0x298(0x04)
	float LowPassFilterFrequency; // 0x29c(0x04)
	Unknown AttenuationSettings; // 0x2a8(0x08)
	Unknown AttenuationOverrides; // 0x2b0(0x3a0)
	Unknown ConcurrencySettings; // 0x650(0x08)
	Unknown ConcurrencySet; // 0x658(0x50)
	Unknown AutoAttachLocationRule; // 0x6b4(0x01)
	Unknown AutoAttachRotationRule; // 0x6b5(0x01)
	Unknown AutoAttachScaleRule; // 0x6b6(0x01)
	struct FMulticastInlineDelegate OnAudioFinished; // 0x6b8(0x10)
	struct FMulticastInlineDelegate OnAudioPlaybackPercent; // 0x6e0(0x10)
	struct FMulticastInlineDelegate OnAudioSingleEnvelopeValue; // 0x708(0x10)
	struct FMulticastInlineDelegate OnAudioMultiEnvelopeValue; // 0x730(0x10)
	Unknown Modulation; // 0x758(0x10)
	struct FDelegate OnQueueSubtitles; // 0x768(0x10)
	Unknown AutoAttachParent; // 0x778(0x08)
	struct FName AutoAttachSocketName; // 0x780(0x08)
	struct FString OptionsString; // 0x310(0x10)
	Unknown GameSessionClass; // 0x320(0x08)
	Unknown GameStateClass; // 0x328(0x08)
	Unknown PlayerControllerClass; // 0x330(0x08)
	Unknown PlayerStateClass; // 0x338(0x08)
	Unknown HUDClass; // 0x340(0x08)
	Unknown DefaultPawnClass; // 0x348(0x08)
	Unknown SpectatorClass; // 0x350(0x08)
	Unknown ReplaySpectatorPlayerController; // 0x358(0x08)
	Unknown ServerStatReplicatorClass; // 0x360(0x08)
	Unknown GameSession; // 0x368(0x08)
	Unknown GameState; // 0x370(0x08)
	Unknown ServerStatReplicator; // 0x378(0x08)
	struct FText DefaultPlayerName; // 0x380(0x18)
	Unknown bUseSeamlessTravel; // 0x398(0x01)
	Unknown bStartPlayersAsSpectators; // 0x398(0x01)
	Unknown bPauseable; // 0x398(0x01)
	struct FName MatchState; // 0x3b0(0x08)
	Unknown bDelayedStart; // 0x3b8(0x01)
	int32_t NumSpectators; // 0x3bc(0x04)
	int32_t NumPlayers; // 0x3c0(0x04)
	int32_t NumBots; // 0x3c4(0x04)
	float MinRespawnDelay; // 0x3c8(0x04)
	int32_t NumTravellingPlayers; // 0x3cc(0x04)
	Unknown EngineMessageClass; // 0x3d0(0x08)
	Unknown InactivePlayerArray; // 0x3d8(0x10)
	float InactivePlayerStateLifeSpan; // 0x3e8(0x04)
	int32_t MaxInactivePlayers; // 0x3ec(0x04)
	Unknown bHandleDedicatedServerReplays; // 0x3f0(0x01)
	Unknown GameModeClass; // 0x310(0x08)
	Unknown AuthorityGameMode; // 0x318(0x08)
	Unknown SpectatorClass; // 0x320(0x08)
	Unknown PlayerArray; // 0x328(0x10)
	Unknown bReplicatedHasBegunPlay; // 0x338(0x01)
	float ReplicatedWorldTimeSeconds; // 0x33c(0x04)
	float ServerWorldTimeSecondsDelta; // 0x340(0x04)
	float ServerWorldTimeSecondsUpdateFrequency; // 0x344(0x04)
	struct FName MatchState; // 0x360(0x08)
	struct FName PreviousMatchState; // 0x368(0x08)
	int32_t ElapsedTime; // 0x370(0x04)
	Unknown PlayerState; // 0x348(0x08)
	struct FMulticastInlineDelegate OnInstigatedAnyDamage; // 0x388(0x10)
	struct FName StateName; // 0x324(0x08)
	Unknown Pawn; // 0x378(0x08)
	Unknown Character; // 0x338(0x08)
	Unknown TransformComponent; // 0x330(0x08)
	Unknown ControlRotation; // 0x39c(0x0c)
	Unknown bAttachToPawn; // 0x32c(0x01)
	Unknown SelfPlayerController; // 0x3b0(0x08)
	Unknown Player; // 0x510(0x08)
	Unknown AcknowledgedPawn; // 0x428(0x08)
	Unknown ControllingDirTrackInst; // 0x4f8(0x08)
	Unknown MyHUD; // 0x5e8(0x08)
	Unknown PlayerCameraManager; // 0x438(0x08)
	Unknown PlayerCameraManagerClass; // 0x480(0x08)
	Unknown bAutoManageActiveCameraTarget; // 0x6e4(0x01)
	Unknown TargetViewRotation; // 0x664(0x0c)
	float SmoothTargetViewRotationSpeed; // 0x640(0x04)
	Unknown HiddenActors; // 0x5b8(0x10)
	Unknown HiddenPrimitiveComponents; // 0x4d0(0x10)
	float LastSpectatorStateSynchTime; // 0x674(0x04)
	Unknown LastSpectatorSyncLocation; // 0x558(0x0c)
	Unknown LastSpectatorSyncRotation; // 0x45c(0x0c)
	int32_t ClientCap; // 0x478(0x04)
	Unknown CheatManager; // 0x568(0x08)
	Unknown CheatClass; // 0x590(0x08)
	Unknown PlayerInput; // 0x518(0x08)
	Unknown ActiveForceFeedbackEffects; // 0x580(0x10)
	Unknown bPlayerIsWaiting; // 0x498(0x01)
	Unknown NetPlayerIndex; // 0x4bc(0x01)
	Unknown PendingSwapConnection; // 0x468(0x08)
	Unknown NetConnection; // 0x3e0(0x08)
	float InputYawScale; // 0x5e0(0x04)
	float InputPitchScale; // 0x5a8(0x04)
	float InputRollScale; // 0x578(0x04)
	Unknown bShowMouseCursor; // 0x670(0x01)
	Unknown bEnableClickEvents; // 0x5b4(0x01)
	Unknown bEnableTouchEvents; // 0x4e0(0x01)
	Unknown bEnableMouseOverEvents; // 0x670(0x01)
	Unknown bEnableTouchOverEvents; // 0x670(0x01)
	Unknown bForceFeedbackEnabled; // 0x57c(0x01)
	float ForceFeedbackScale; // 0x488(0x04)
	Unknown ClickEventKeys; // 0x4a0(0x10)
	Unknown DefaultMouseCursor; // 0x618(0x01)
	Unknown CurrentMouseCursor; // 0x5e4(0x01)
	Unknown DefaultClickTraceChannel; // 0x47c(0x01)
	Unknown CurrentClickTraceChannel; // 0x48c(0x01)
	float HitResultTraceDistance; // 0x3ec(0x04)
	uint16_t SeamlessTravelCount; // 0x5ac(0x02)
	uint16_t LastCompletedSeamlessTravelCount; // 0x540(0x02)
	Unknown InactiveStateInputComponent; // 0x490(0x08)
	Unknown bShouldPerformFullTickWhenPaused; // 0x570(0x01)
	Unknown CurrentTouchInterface; // 0x550(0x08)
	Unknown SpectatorPawn; // 0x470(0x08)
	Unknown bIsLocalPlayerController; // 0x5c8(0x01)
	Unknown SpawnLocation; // 0x61c(0x0c)
	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0xb0(0x10)
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0xc0(0x10)
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0xd0(0x10)
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0xe0(0x10)
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0xf0(0x10)
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x100(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x110(0x10)
	struct FMulticastInlineDelegate OnTemperatureChangeDelegate; // 0x120(0x10)
	struct FMulticastInlineDelegate OnLowPowerModeDelegate; // 0x130(0x10)
	Unknown UpdatedComponent; // 0xb0(0x08)
	Unknown UpdatedPrimitive; // 0xb8(0x08)
	Unknown Velocity; // 0xc4(0x0c)
	Unknown PlaneConstraintNormal; // 0xd0(0x0c)
	Unknown PlaneConstraintOrigin; // 0xdc(0x0c)
	Unknown bUpdateOnlyIfRendered; // 0xe8(0x01)
	Unknown bAutoUpdateTickRegistration; // 0xe8(0x01)
	Unknown bTickBeforeOwner; // 0xe8(0x01)
	Unknown bAutoRegisterUpdatedComponent; // 0xe8(0x01)
	Unknown bConstrainToPlane; // 0xe8(0x01)
	Unknown bSnapToPlaneAtStart; // 0xe8(0x01)
	Unknown bAutoRegisterPhysicsVolumeUpdates; // 0xe8(0x01)
	Unknown bComponentShouldUpdatePhysicsVolume; // 0xe8(0x01)
	Unknown PlaneConstraintAxisSetting; // 0xeb(0x01)
	Unknown NavAgentProps; // 0xf0(0x30)
	float FixedPathBrakingDistance; // 0x120(0x04)
	Unknown bUpdateNavAgentWithOwnersCollision; // 0x124(0x01)
	Unknown bUseAccelerationForPaths; // 0x124(0x01)
	Unknown bUseFixedBrakingDistanceForPaths; // 0x124(0x01)
	Unknown MovementState; // 0x125(0x01)
	Unknown PathFollowingComp; // 0x128(0x08)
	Unknown PawnOwner; // 0x130(0x08)
	Unknown CharacterOwner; // 0x2b0(0x08)
	float GravityScale; // 0x2ec(0x04)
	float MaxStepHeight; // 0x468(0x04)
	float JumpZVelocity; // 0x474(0x04)
	float JumpOffJumpZFactor; // 0x6c8(0x04)
	float WalkableFloorAngle; // 0x4f8(0x04)
	float WalkableFloorZ; // 0x488(0x04)
	Unknown MovementMode; // 0x438(0x01)
	Unknown CustomMovementMode; // 0x56c(0x01)
	Unknown NetworkSmoothingMode; // 0x280(0x01)
	float GroundFriction; // 0x470(0x04)
	float MaxWalkSpeed; // 0x300(0x04)
	float MaxWalkSpeedCrouched; // 0x6e0(0x04)
	float MaxSwimSpeed; // 0x548(0x04)
	float MaxFlySpeed; // 0x4e8(0x04)
	float MaxCustomMovementSpeed; // 0x460(0x04)
	float MaxAcceleration; // 0x484(0x04)
	float MinAnalogWalkSpeed; // 0x4e0(0x04)
	float BrakingFrictionFactor; // 0x2a0(0x04)
	float BrakingFriction; // 0x54c(0x04)
	float BrakingSubStepTime; // 0x6bc(0x04)
	float BrakingDecelerationWalking; // 0x554(0x04)
	float BrakingDecelerationFalling; // 0x51c(0x04)
	float BrakingDecelerationSwimming; // 0x414(0x04)
	float BrakingDecelerationFlying; // 0x568(0x04)
	float AirControl; // 0x544(0x04)
	float AirControlBoostMultiplier; // 0x308(0x04)
	float AirControlBoostVelocityThreshold; // 0x3f4(0x04)
	float FallingLateralFriction; // 0x3f0(0x04)
	float CrouchedHalfHeight; // 0x264(0x04)
	float Buoyancy; // 0x40c(0x04)
	float PerchRadiusThreshold; // 0x244(0x04)
	float PerchAdditionalHeight; // 0x248(0x04)
	Unknown RotationRate; // 0x520(0x0c)
	Unknown bUseSeparateBrakingFriction; // 0x298(0x01)
	Unknown bApplyGravityWhileJumping; // 0x2d4(0x01)
	Unknown bUseControllerDesiredRotation; // 0x2e4(0x01)
	Unknown bOrientRotationToMovement; // 0x550(0x01)
	Unknown bSweepWhileNavWalking; // 0x620(0x01)
	Unknown bMovementInProgress; // 0x3c0(0x01)
	Unknown bEnableScopedMovementUpdates; // 0x5d0(0x01)
	Unknown bEnableServerDualMoveScopedMovementUpdates; // 0x4e4(0x01)
	Unknown bForceMaxAccel; // 0x4b8(0x01)
	Unknown bRunPhysicsWithNoController; // 0x2f3(0x01)
	Unknown bForceNextFloorCheck; // 0x490(0x01)
	Unknown bShrinkProxyCapsule; // 0x2fc(0x01)
	Unknown bCanWalkOffLedges; // 0x2e4(0x01)
	Unknown bCanWalkOffLedgesWhenCrouching; // 0x44c(0x01)
	Unknown bNetworkSkipProxyPredictionOnNetUpdate; // 0x490(0x01)
	Unknown bNetworkAlwaysReplicateTransfor; // 0x490(0x01)
	Unknown bDeferUpdateMoveComponent; // 0x510(0x01)
	Unknown bEnablePhysicsInteraction; // 0x4dc(0x01)
	Unknown bTouchForceScaledToMass; // 0x304(0x01)
	Unknown bPushForceScaledToMass; // 0x540(0x01)
	Unknown bPushForceUsingZOffset; // 0x5ac(0x01)
	Unknown bScalePushForceToVelocity; // 0x6dc(0x01)
	Unknown DeferredUpdatedMoveComponent; // 0x3e8(0x08)
	float MaxOutOfWaterStepHeight; // 0x240(0x04)
	float OutofWaterZ; // 0x22c(0x04)
	float Mass; // 0x23c(0x04)
	float StandingDownwardForceScale; // 0x4c8(0x04)
	float InitialPushForceFactor; // 0x294(0x04)
	float PushForceFactor; // 0x2c0(0x04)
	float PushForcePointZOffsetFactor; // 0x2d0(0x04)
	float TouchForceFactor; // 0x434(0x04)
	float MinTouchForce; // 0x3a8(0x04)
	float MaxTouchForce; // 0x5a8(0x04)
	float RepulsionForce; // 0x3ac(0x04)
	Unknown Acceleration; // 0x6d0(0x0c)
	Unknown LastUpdateRotation; // 0x270(0x10)
	Unknown LastUpdateLocation; // 0x288(0x0c)
	Unknown LastUpdateVelocity; // 0x2d8(0x0c)
	float ServerLastTransformUpdateTimeStamp; // 0x310(0x04)
	float ServerLastClientGoodMoveAckTime; // 0x50c(0x04)
	float ServerLastClientAdjustmentTime; // 0x4bc(0x04)
	Unknown PendingImpulseToApply; // 0x21c(0x0c)
	Unknown PendingForceToApply; // 0x5c4(0x0c)
	float AnalogInputModifier; // 0x4d4(0x04)
	float MaxSimulationTimeStep; // 0x2f4(0x04)
	int32_t MaxSimulationIterations; // 0x444(0x04)
	int32_t MaxJumpApexAttemptsPerSimulation; // 0x47c(0x04)
	float MaxDepenetrationWithGeometry; // 0x4ac(0x04)
	float MaxDepenetrationWithGeometryAsProxy; // 0x494(0x04)
	float MaxDepenetrationWithPawn; // 0x25c(0x04)
	float MaxDepenetrationWithPawnAsProxy; // 0x564(0x04)
	float NetworkSimulatedSmoothLocationTime; // 0x3f8(0x04)
	float NetworkSimulatedSmoothRotationTime; // 0x6cc(0x04)
	float ListenServerNetworkSimulatedSmoothLocationTime; // 0x62c(0x04)
	float ListenServerNetworkSimulatedSmoothRotationTime; // 0x3e4(0x04)
	float NetProxyShrinkRadius; // 0x6c4(0x04)
	float NetProxyShrinkHalfHeight; // 0x440(0x04)
	float NetworkMaxSmoothUpdateDistance; // 0x258(0x04)
	float NetworkNoSmoothUpdateDistance; // 0x4d8(0x04)
	float NetworkMinTimeBetweenClientAckGoodMoves; // 0x530(0x04)
	float NetworkMinTimeBetweenClientAdjustmen; // 0x284(0x04)
	float NetworkMinTimeBetweenClientAdjustmenve; // 0x2e8(0x04)
	float NetworkLargeClientCorrectionDistance; // 0x410(0x04)
	float LedgeCheckThreshold; // 0x514(0x04)
	float JumpOutOfWaterPitch; // 0x4cc(0x04)
	Unknown CurrentFloor; // 0x314(0x94)
	Unknown DefaultLandMovementMode; // 0x3fc(0x01)
	Unknown DefaultWaterMovementMode; // 0x2f2(0x01)
	Unknown GroundMovementMode; // 0x305(0x01)
	Unknown bMaintainHorizontalGroundVelocity; // 0x518(0x01)
	Unknown bImpartBaseVelocityX; // 0x5c0(0x01)
	Unknown bImpartBaseVelocityY; // 0x2fc(0x01)
	Unknown bImpartBaseVelocityZ; // 0x4c0(0x01)
	Unknown bImpartBaseAngularVelocity; // 0x518(0x01)
	Unknown bJustTeleported; // 0x44c(0x01)
	Unknown bNetworkUpdateReceived; // 0x2fc(0x01)
	Unknown bNetworkMovementModeChanged; // 0x230(0x01)
	Unknown bIgnoreClientMovementErrorChecksAndCorr; // 0x6c0(0x01)
	Unknown bServerAcceptClientAuthoritativePosition; // 0x480(0x01)
	Unknown bNotifyApex; // 0x464(0x01)
	Unknown bCheatFlying; // 0x24c(0x01)
	Unknown bWantsToCrouch; // 0x4b8(0x01)
	Unknown bCrouchMaintainsBaseLocation; // 0x2b8(0x01)
	Unknown bIgnoreBaseRotation; // 0x538(0x01)
	Unknown bFastAttachedMove; // 0x218(0x01)
	Unknown bAlwaysCheckFloor; // 0x430(0x01)
	Unknown bUseFlatBaseForFloorChecks; // 0x238(0x01)
	Unknown bPerformingJumpOff; // 0x2f1(0x01)
	Unknown bWantsToLeaveNavWalking; // 0x46c(0x01)
	Unknown bUseRVOAvoidance; // 0x6c0(0x01)
	Unknown bRequestedMoveUseAcceleration; // 0x498(0x01)
	Unknown bWasSimulatingRootMotion; // 0x478(0x01)
	Unknown bAllowPhysicsRotationDuringAnimRootMotion; // 0x44c(0x01)
	Unknown bHasRequestedVelocity; // 0x304(0x01)
	Unknown bRequestedMoveWithMaxSpeed; // 0x52c(0x01)
	Unknown bWasAvoidanceUpdated; // 0x2fc(0x01)
	Unknown bProjectNavMeshWalking; // 0x508(0x01)
	Unknown bProjectNavMeshOnBothWorldChannels; // 0x228(0x01)
	float AvoidanceConsiderationRadius; // 0x448(0x04)
	Unknown RequestedVelocity; // 0x4a0(0x0c)
	int32_t AvoidanceUID; // 0x250(0x04)
	Unknown AvoidanceGroup; // 0x48c(0x04)
	Unknown GroupsToAvoid; // 0x2bc(0x04)
	Unknown GroupsToIgnore; // 0x4c4(0x04)
	float AvoidanceWeight; // 0x2a8(0x04)
	Unknown PendingLaunchVelocity; // 0x558(0x0c)
	float NavMeshProjectionInterval; // 0x2a4(0x04)
	float NavMeshProjectionTimer; // 0x30c(0x04)
	float NavMeshProjectionInterpSpeed; // 0x254(0x04)
	float NavMeshProjectionHeightScaleUp; // 0x234(0x04)
	float NavMeshProjectionHeightScaleDown; // 0x408(0x04)
	float NavWalkingFloorDistTolerance; // 0x2f8(0x04)
	Unknown PostPhysicsTickFunction; // 0x148(0x30)
	float MinTimeBetweenTimeStampResets; // 0x5b0(0x04)
	Unknown ClientAutonomuousBase; // 0x4f0(0x08)
	Unknown CurrentRootMotion; // 0x570(0x38)
	Unknown RootMotionParams; // 0x5e0(0x40)
	Unknown AnimRootMotionVelocity; // 0x2c4(0x0c)
	float BlockingHit_SlideAccelerator; // 0x628(0x04)
	Unknown BlockingPhysMaterial; // 0x4b0(0x08)
	Unknown MeshComp; // 0x310(0x08)
	Unknown SceneComponent; // 0x318(0x08)
	Unknown CaptureComponent2D; // 0x320(0x08)
	Unknown ObjectReferenceList; // 0x2c0(0x10)
	Unknown bIsGlobalAsyncScanEnvironment; // 0x2d0(0x01)
	Unknown bShouldGuessTypeAndName; // 0x2d1(0x01)
	Unknown bShouldUseSynchronousLoad; // 0x2d2(0x01)
	Unknown bIsLoadingFromPakFiles; // 0x2d3(0x01)
	Unknown bShouldAcquireMissingChunksOnLoad; // 0x2d4(0x01)
	Unknown bOnlyCookProductionAssets; // 0x2d5(0x01)
	Unknown bIsBulkScanning; // 0x2d6(0x01)
	Unknown bIsPrimaryAssetDirectory; // 0x2d7(0x01)
	Unknown bIsManagementDatabaseCurrent; // 0x2d8(0x01)
	Unknown bUpdateManagementDatabaseAfterScan; // 0x2d9(0x01)
	Unknown bIncludeOnlyOnDiskAssets; // 0x2da(0x01)
	int32_t NumberOfSpawnedNotifications; // 0x2dc(0x04)
	Unknown ShapeBodySetup; // 0x4b8(0x08)
	Unknown AreaClass; // 0x4c0(0x08)
	Unknown ShapeColor; // 0x4c8(0x04)
	Unknown bDrawOnlyIfSelected; // 0x4cc(0x01)
	Unknown bShouldCollideWhenPlacing; // 0x4cc(0x01)
	Unknown bDynamicObstacle; // 0x4cc(0x01)
	Unknown BoxExtent; // 0x4d0(0x0c)
	float LineThickness; // 0x4dc(0x04)
	float FieldOfView; // 0x238(0x04)
	float OrthoWidth; // 0x23c(0x04)
	float OrthoNearClipPlane; // 0x240(0x04)
	float OrthoFarClipPlane; // 0x244(0x04)
	float AspectRatio; // 0x248(0x04)
	Unknown bConstrainAspectRatio; // 0x24c(0x01)
	Unknown bUseFieldOfViewForLOD; // 0x24c(0x01)
	Unknown bLockToHmd; // 0x254(0x01)
	Unknown bUsePawnControlRotation; // 0x254(0x01)
	Unknown ProjectionMode; // 0x255(0x01)
	float PostProcess; // 0x290(0x04)
	Unknown PostProcessSettings; // 0x2c0(0x5c0)
	Unknown DebugCameraControllerRef; // 0x28(0x08)
	Unknown DebugCameraControllerClass; // 0x30(0x08)
	Unknown bCausedByWorld; // 0x28(0x01)
	Unknown bScaleMomentumByMass; // 0x28(0x01)
	Unknown bRadialDamageVelChange; // 0x28(0x01)
	float DamageImpulse; // 0x2c(0x04)
	float DestructibleImpulse; // 0x30(0x04)
	float DestructibleDamageSpreadScale; // 0x34(0x04)
	float DamageFalloff; // 0x38(0x04)
	Unknown SpectatorControllerClass; // 0x928(0x08)
	Unknown SelfDemoNetDriver; // 0x930(0x08)
	Unknown RollbackNetStartupActors; // 0xa50(0x50)
	float CheckpointSaveMaxMSPerFrame; // 0xecc(0x04)
	Unknown MulticastRecordOptions; // 0xf00(0x10)
	Unknown bIsLocalReplay; // 0xf60(0x01)
	Unknown SpectatorControllers; // 0xf68(0x10)
	int32_t ForcedLodModel; // 0x4e8(0x04)
	int32_t PreviousLODLevel; // 0x4ec(0x04)
	int32_t MinLOD; // 0x4f0(0x04)
	int32_t SubDivisionStepSize; // 0x4f4(0x04)
	Unknown StaticMesh; // 0x4f8(0x08)
	Unknown WireframeColorOverride; // 0x500(0x04)
	Unknown bEvaluateWorldPositionOffset; // 0x504(0x01)
	Unknown bOverrideWireframeColor; // 0x504(0x01)
	Unknown bOverrideMinLod; // 0x504(0x01)
	Unknown bOverrideNavigationExport; // 0x504(0x01)
	Unknown bForceNavigationObstacle; // 0x504(0x01)
	Unknown bDisallowMeshPaintPerInstance; // 0x504(0x01)
	Unknown bIgnoreInstanceForTextureStreaming; // 0x504(0x01)
	Unknown bOverrideLightMapRes; // 0x504(0x01)
	Unknown bCastDistanceFieldIndirectShadow; // 0x505(0x01)
	Unknown bOverrideDistanceFieldSelfShadowBias; // 0x505(0x01)
	Unknown bUseSubDivisions; // 0x505(0x01)
	Unknown bUseDefaultCollision; // 0x505(0x01)
	Unknown bReverseCulling; // 0x505(0x01)
	int32_t OverriddenLightMapRes; // 0x508(0x04)
	float DistanceFieldIndirectShadowMinVisibility; // 0x50c(0x04)
	float DistanceFieldSelfShadowBias; // 0x510(0x04)
	float StreamingDistanceMultiplier; // 0x514(0x04)
	Unknown LODData; // 0x518(0x10)
	Unknown StreamingTextureData; // 0x528(0x10)
	Unknown LightmassSettings; // 0x538(0x18)
	float MaxDeltaTime; // 0xde8(0x04)
	float ServerFlushLogInterval; // 0xdec(0x04)
	Unknown GameInstance; // 0xdf0(0x08)
	Unknown ReplayListItemInfos; // 0x28(0x10)
	struct FMulticastInlineDelegate OnEnumerateReplayListCompleteEvent; // 0x38(0x10)
	struct FMulticastInlineDelegate OnDeleteReplayCompleteEvent; // 0x48(0x10)
	struct FMulticastInlineDelegate OnKeepAndDeleteOldetsReplaysCompleteEvent; // 0x58(0x10)
	struct FMulticastInlineDelegate OnKeepAndDeleteOldVersionReplaysCompleteEvent; // 0x68(0x10)
	Unknown SelfGameInstance; // 0x80(0x08)
	Unknown bLoadingWidgetVisible; // 0x88(0x01)
	Unknown LocalPlayers; // 0xb8(0x10)
	Unknown OnlineSession; // 0xc8(0x08)
	Unknown ReferencedObjects; // 0xd0(0x10)
	int32_t MaxSpectators; // 0x310(0x04)
	int32_t MaxPlayers; // 0x314(0x04)
	int32_t MaxPartySize; // 0x318(0x04)
	Unknown MaxSplitscreensPerConnection; // 0x31c(0x01)
	Unknown bRequiresPushToTalk; // 0x31d(0x01)
	struct FName SessionName; // 0x320(0x08)
	Unknown PerInstanceSMData; // 0x550(0x10)
	int32_t NumCustomDataFloats; // 0x560(0x04)
	Unknown PerInstanceSMCustomData; // 0x568(0x10)
	Unknown bMergeCollision; // 0x578(0x01)
	int32_t InstancingRandomSeed; // 0x57c(0x04)
	int32_t InstanceStartCullDistance; // 0x580(0x04)
	int32_t InstanceEndCullDistance; // 0x584(0x04)
	int8_t CulldistanceType; // 0x588(0x01)
	float MinScreenSizeScale; // 0x58c(0x04)
	Unknown InstanceBodiesSplitRatio; // 0x590(0x01)
	Unknown InstanceReorderTable; // 0x598(0x10)
	int32_t NumPendingLightmaps; // 0x604(0x04)
	Unknown CachedMappings; // 0x608(0x10)
	Unknown SortedInstances; // 0x628(0x10)
	int32_t NumBuiltInstances; // 0x638(0x04)
	Unknown BuiltInstanceBounds; // 0x640(0x1c)
	Unknown UnbuiltInstanceBounds; // 0x65c(0x1c)
	Unknown UnbuiltInstanceBoundsList; // 0x678(0x10)
	Unknown bEnableDensityScaling; // 0x688(0x01)
	int32_t OcclusionLayerNumNodes; // 0x690(0x04)
	Unknown CacheMeshExtendedBounds; // 0x694(0x1c)
	Unknown bDisableCollision; // 0x6b0(0x01)
	int32_t InstanceCountToRender; // 0x6b4(0x04)
	struct FMulticastInlineDelegate OnReplayPauseEvent; // 0x6f0(0x10)
	struct FMulticastInlineDelegate OnReplayJumpEvent; // 0x700(0x10)
	struct FMulticastInlineDelegate OnReplayJumpCompleteEvent; // 0x710(0x10)
	struct FString PlayerCameraManagerClassName; // 0x7a8(0x10)
	struct FString SpectatorPawnClassName; // 0x7b8(0x10)
	struct FMulticastInlineDelegate ChangeViewModeDelegate; // 0x7c8(0x10)
	struct FMulticastInlineDelegate ChangeCameraTypeDelegate; // 0x7d8(0x10)
	struct FMulticastInlineDelegate ChangeCameraTypeByNetGuidDelegate; // 0x7e8(0x10)
	Unknown WidgetInfoArray; // 0x800(0x10)
	Unknown ReplayWidgetMap; // 0x810(0x50)
	Unknown KillcamComponent; // 0x8c0(0x08)
	Unknown TargetcamComponent; // 0x8c8(0x08)
	Unknown pTargetPlayerInRecording; // 0x8e0(0x08)
	struct FString AfterKillcamHUDClassName; // 0x8e8(0x10)
	Unknown AfterKillcamHUDClass; // 0x8f8(0x08)
	struct FString ReplayHUDClassName; // 0x910(0x10)
	Unknown ReplayHUDClass; // 0x920(0x08)
	float BaseTurnRate; // 0x380(0x04)
	float BaseLookUpRate; // 0x384(0x04)
	Unknown MovementComponent; // 0x388(0x08)
	Unknown CollisionComponent; // 0x390(0x08)
	Unknown MeshComponent; // 0x398(0x08)
	Unknown bAddDefaultMovementBindings; // 0x3a0(0x01)
	float Friction; // 0x28(0x04)
	Unknown FrictionCombineMode; // 0x2c(0x01)
	Unknown bOverrideFrictionCombineMode; // 0x2d(0x01)
	float Restitution; // 0x30(0x04)
	Unknown RestitutionCombineMode; // 0x34(0x01)
	Unknown bOverrideRestitutionCombineMode; // 0x35(0x01)
	float Density; // 0x38(0x04)
	float RaiseMassToPower; // 0x3c(0x04)
	float DestructibleDamageThresholdScale; // 0x40(0x04)
	Unknown PhysicalMaterialProperty; // 0x48(0x08)
	Unknown SurfaceType; // 0x50(0x01)
	float TireFrictionScale; // 0x54(0x04)
	Unknown TireFrictionScales; // 0x58(0x10)
	Unknown PCOwner; // 0x310(0x08)
	Unknown TransformComponent; // 0x318(0x08)
	float DefaultFOV; // 0x328(0x04)
	float DefaultOrthoWidth; // 0x330(0x04)
	float DefaultAspectRatio; // 0x338(0x04)
	Unknown CameraCache; // 0x380(0x660)
	Unknown LastFrameCameraCache; // 0x9e0(0x660)
	Unknown ViewTarget; // 0x1040(0x670)
	Unknown PendingViewTarget; // 0x16b0(0x670)
	Unknown CameraCachePrivate; // 0x1d50(0x660)
	Unknown LastFrameCameraCachePrivate; // 0x23b0(0x660)
	Unknown ModifierList; // 0x2a10(0x10)
	Unknown DefaultModifiers; // 0x2a20(0x10)
	float FreeCamDistance; // 0x2a30(0x04)
	Unknown FreeCamOffset; // 0x2a34(0x0c)
	Unknown ViewTargetOffset; // 0x2a40(0x0c)
	Unknown CameraLensEffects; // 0x2a60(0x10)
	Unknown CachedCameraShakeMod; // 0x2a70(0x08)
	Unknown AnimInstPool; // 0x2a78(0x40)
	Unknown PostProcess; // 0x2ab8(0x10)
	Unknown ActiveAnims; // 0x2ad8(0x10)
	Unknown FreeAnims; // 0x2ae8(0x10)
	Unknown AnimCameraActor; // 0x2af8(0x08)
	Unknown bIsOrthographic; // 0x2b00(0x01)
	Unknown bDefaultConstrainAspectRatio; // 0x2b00(0x01)
	Unknown bClientSimulatingViewTarget; // 0x2b00(0x01)
	Unknown bUseClientSideCameraUpdates; // 0x2b00(0x01)
	Unknown bGameCameraCutThisFrame; // 0x2b01(0x01)
	float ViewPitchMin; // 0x2b04(0x04)
	float ViewPitchMax; // 0x2b08(0x04)
	float ViewYawMin; // 0x2b0c(0x04)
	float ViewYawMax; // 0x2b10(0x04)
	float ViewRollMin; // 0x2b14(0x04)
	float ViewRollMax; // 0x2b18(0x04)
	float ServerUpdateCameraTimeout; // 0x2b20(0x04)
	Unknown SelfPlayerState; // 0x310(0x08)
	float Score; // 0x318(0x04)
	int32_t PlayerId; // 0x31c(0x04)
	Unknown Ping; // 0x320(0x01)
	Unknown bShouldUpdateReplicatedPing; // 0x322(0x01)
	Unknown bIsSpectator; // 0x322(0x01)
	Unknown bOnlySpectator; // 0x322(0x01)
	Unknown bIsABot; // 0x322(0x01)
	Unknown bIsInactive; // 0x322(0x01)
	Unknown bFromPreviousLevel; // 0x322(0x01)
	int32_t StartTime; // 0x324(0x04)
	Unknown EngineMessageClass; // 0x328(0x08)
	struct FString SavedNetworkAddress; // 0x338(0x10)
	Unknown UniqueID; // 0x348(0x28)
	Unknown PawnPrivate; // 0x378(0x08)
	struct FString PlayerNamePrivate; // 0x3f8(0x10)
	Unknown PrimitiveRenderMode; // 0x238(0x01)
	Unknown bTonemapPropagateAlpha; // 0x239(0x01)
	Unknown bUsePostProcessMaterial; // 0x239(0x01)
	Unknown bUseDirectionalLights; // 0x239(0x01)
	Unknown CaptureSource; // 0x23a(0x01)
	Unknown bCaptureEveryFrame; // 0x23b(0x01)
	Unknown bCaptureOnMovement; // 0x23b(0x01)
	Unknown bAlwaysPersistRenderingState; // 0x23c(0x01)
	Unknown HiddenComponents; // 0x240(0x10)
	Unknown HiddenActors; // 0x250(0x10)
	Unknown ShowOnlyComponents; // 0x260(0x10)
	Unknown ShowOnlyActors; // 0x270(0x10)
	float LODDistanceFactor; // 0x280(0x04)
	float MaxViewDistanceOverride; // 0x284(0x04)
	int32_t CaptureSortPriority; // 0x288(0x04)
	Unknown bUseRayTracingIfEnabled; // 0x28c(0x01)
	Unknown ShowFlagSettings; // 0x290(0x10)
	struct FString ProfilingEventName; // 0x2b0(0x10)
	Unknown ProjectionType; // 0x2d0(0x01)
	float FOVAngle; // 0x2d4(0x04)
	float OrthoWidth; // 0x2d8(0x04)
	Unknown TextureTarget; // 0x2e0(0x08)
	Unknown CompositeMode; // 0x2e8(0x01)
	Unknown PostProcessSettings; // 0x2f0(0x5c0)
	float PostProcess; // 0x8b0(0x04)
	Unknown bOverride_CustomNearClippingPlane; // 0x8b4(0x01)
	float CustomNearClippingPlane; // 0x8b8(0x04)
	Unknown bUseCustomProjectionMatrix; // 0x8bc(0x01)
	Unknown CustomProjectionMatrix; // 0x8c0(0x40)
	Unknown bEnableClipPlane; // 0x900(0x01)
	Unknown ClipPlaneBase; // 0x904(0x0c)
	Unknown ClipPlaneNormal; // 0x910(0x0c)
	Unknown bCameraCutThisFrame; // 0x91c(0x01)
	Unknown bConsiderUnrenderedOpaquePixelAsFullyTr; // 0x91c(0x01)
	Unknown bDisableFlipCopyGLES; // 0x920(0x01)
	Unknown ArrowColor; // 0x4b8(0x04)
	float ArrowSize; // 0x4bc(0x04)
	float ScreenSize; // 0x4c0(0x04)
	Unknown bIsScreenSizeScaled; // 0x4c4(0x01)
	Unknown bTreatAsASprite; // 0x4c4(0x01)
	Unknown CapsuleComponent; // 0x318(0x08)
	Unknown GoodSprite; // 0x320(0x08)
	Unknown BadSprite; // 0x328(0x08)
	Unknown bIsPIEPlayerStart; // 0x330(0x01)
	struct FName PlayerStartTag; // 0x338(0x08)
	float InitialSpeed; // 0xf0(0x04)
	float MaxSpeed; // 0xf4(0x04)
	Unknown bRotationFollowsVelocity; // 0xf8(0x01)
	Unknown bRotationRemainsVertical; // 0xf8(0x01)
	Unknown bShouldBounce; // 0xf8(0x01)
	Unknown bInitialVelocityInLocalSpace; // 0xf8(0x01)
	Unknown bForceSubStepping; // 0xf8(0x01)
	Unknown bSimulationEnabled; // 0xf8(0x01)
	Unknown bSweepCollision; // 0xf8(0x01)
	Unknown bIsHomingProjectile; // 0xf8(0x01)
	Unknown bBounceAngleAffectsFriction; // 0xf9(0x01)
	Unknown bIsSliding; // 0xf9(0x01)
	Unknown bInterpMovement; // 0xf9(0x01)
	Unknown bInterpRotation; // 0xf9(0x01)
	float PreviousHitTime; // 0xfc(0x04)
	Unknown PreviousHitNormal; // 0x100(0x0c)
	float ProjectileGravityScale; // 0x10c(0x04)
	float Buoyancy; // 0x110(0x04)
	float Bounciness; // 0x114(0x04)
	float Friction; // 0x118(0x04)
	float BounceVelocityStopSimulatingThr; // 0x11c(0x04)
	float MinFrictionFraction; // 0x120(0x04)
	struct FMulticastInlineDelegate OnProjectileBounce; // 0x128(0x10)
	struct FMulticastInlineDelegate OnProjectileStop; // 0x138(0x10)
	float HomingAccelerationMagnitude; // 0x148(0x04)
	Unknown HomingTargetComponent; // 0x14c(0x08)
	float MaxSimulationTimeStep; // 0x154(0x04)
	int32_t MaxSimulationIterations; // 0x158(0x04)
	int32_t BounceAdditionalIterations; // 0x15c(0x04)
	float InterpLocationTime; // 0x160(0x04)
	float InterpRotationTime; // 0x164(0x04)
	float InterpLocationMaxLagDistance; // 0x168(0x04)
	float InterpLocationSnapToTargetDistance; // 0x16c(0x04)
	Unknown bUseVSync; // 0x28(0x01)
	Unknown bIsSmoothFrameRate; // 0x29(0x01)
	Unknown bUseDynamicResolution; // 0x2a(0x01)
	uint32_t ResolutionSizeX; // 0x80(0x04)
	uint32_t ResolutionSizeY; // 0x84(0x04)
	uint32_t LastUserConfirmedResolutionSizeX; // 0x88(0x04)
	uint32_t LastUserConfirmedResolutionSizeY; // 0x8c(0x04)
	int32_t WindowPosX; // 0x90(0x04)
	int32_t WindowPosY; // 0x94(0x04)
	int32_t FullscreenMode; // 0x98(0x04)
	int32_t LastConfirmedFullscreenMode; // 0x9c(0x04)
	int32_t PreferredFullscreenMode; // 0xa0(0x04)
	uint32_t Version; // 0xa4(0x04)
	int32_t AudioQualityLevel; // 0xa8(0x04)
	int32_t LastConfirmedAudioQualityLevel; // 0xac(0x04)
	float FrameRateLimit; // 0xb0(0x04)
	float LobbyFrameRateLimit; // 0xb4(0x04)
	int32_t DesiredScreenWidth; // 0xbc(0x04)
	Unknown bUseDesiredScreenHeight; // 0xc0(0x01)
	int32_t DesiredScreenHeight; // 0xc4(0x04)
	int32_t LastUserConfirmedDesiredScreenWidth; // 0xc8(0x04)
	int32_t LastUserConfirmedDesiredScreenHeight; // 0xcc(0x04)
	float LastRecommendedScreenWidth; // 0xd0(0x04)
	float LastRecommendedScreenHeight; // 0xd4(0x04)
	float LastCPUBenchmarkResult; // 0xd8(0x04)
	float LastGPUBenchmarkResult; // 0xdc(0x04)
	Unknown LastCPUBenchmarkSteps; // 0xe0(0x10)
	Unknown LastGPUBenchmarkSteps; // 0xf0(0x10)
	struct FString LastCPUBrand; // 0x100(0x10)
	struct FString LastGPUBrand; // 0x110(0x10)
	int32_t LastInstallStorageType; // 0x120(0x04)
	int64_t LastTotalGraphicsMemory; // 0x128(0x08)
	float LastGPUBenchmarkMultiplier; // 0x130(0x04)
	Unknown bUseHDRDisplayOutput; // 0x134(0x01)
	int32_t HDRDisplayOutputNits; // 0x138(0x04)
	Unknown ShowHUD; // 0x13c(0x01)
	struct FMulticastInlineDelegate OnGameUserSettingsUINeedsUpdate; // 0x140(0x10)
	float CapsuleHalfHeight; // 0x4d0(0x04)
	float CapsuleRadius; // 0x4d4(0x04)
	Unknown ViewportConsole; // 0x40(0x08)
	Unknown DebugProperties; // 0x48(0x10)
	int32_t MaxSplitscreenPlayers; // 0x68(0x04)
	Unknown World; // 0x78(0x08)
	Unknown GameInstance; // 0x80(0x08)
	float TerminalVelocity; // 0x348(0x04)
	int32_t Priority; // 0x34c(0x04)
	float FluidFriction; // 0x350(0x04)
	Unknown bWaterVolume; // 0x354(0x01)
	Unknown bPhysicsOnContact; // 0x354(0x01)
	int32_t VisibilityCellSize; // 0x318(0x04)
	Unknown VisibilityAggressivyu; // 0x31c(0x01)
	Unknown bPrecomputeVisibility; // 0x31d(0x01)
	Unknown bPlaceCellsOnlyAlongCameraTracks; // 0x31d(0x01)
	Unknown bEnableWorldBoundsChecks; // 0x31d(0x01)
	Unknown bEnableNavigationSystem; // 0x31d(0x01)
	Unknown bEnableAISystem; // 0x31d(0x01)
	Unknown bEnableWorldComposition; // 0x31d(0x01)
	Unknown bUseClientSideLevelStreamingVolumes; // 0x31d(0x01)
	Unknown bEnableWorldOriginRebasing; // 0x31d(0x01)
	Unknown bWorldGravitySet; // 0x31e(0x01)
	Unknown bGlobalGravitySet; // 0x31e(0x01)
	Unknown bMinimizeBSPSections; // 0x31e(0x01)
	Unknown bForceNoPrecomputedLighting; // 0x31e(0x01)
	Unknown bHighPriorityLoading; // 0x31e(0x01)
	Unknown bHighPriorityLoadingLocal; // 0x31e(0x01)
	Unknown bOverrideDefaultBroadphaseSettings; // 0x31e(0x01)
	Unknown NavigationSystemConfig; // 0x320(0x08)
	Unknown NavigationSystemConfigOverride; // 0x328(0x08)
	float WorldToMeters; // 0x330(0x04)
	float KillZ; // 0x334(0x04)
	Unknown KillZDamageType; // 0x338(0x08)
	float WorldGravityZ; // 0x340(0x04)
	float GlobalGravityZ; // 0x344(0x04)
	Unknown DefaultPhysicsVolumeClass; // 0x348(0x08)
	Unknown PhysicsCollisionHandlerClass; // 0x350(0x08)
	Unknown DefaultGameMode; // 0x358(0x08)
	Unknown GameNetworkManagerClass; // 0x360(0x08)
	int32_t PackedLightAndShadowMapTextureSize; // 0x368(0x04)
	Unknown DefaultColorScale; // 0x36c(0x0c)
	float DefaultMaxDistanceFieldOcclusionDistance; // 0x378(0x04)
	float GlobalDistanceFieldViewDistance; // 0x37c(0x04)
	float DynamicIndirectShadowsSelfShadowingIntensity; // 0x380(0x04)
	Unknown DefaultReverbSettings; // 0x388(0x20)
	Unknown DefaultAmbientZoneSettings; // 0x3a8(0x24)
	float MonoCullingDistance; // 0x3cc(0x04)
	Unknown DefaultBaseSoundMix; // 0x3d0(0x08)
	float TimeDilation; // 0x3d8(0x04)
	float MatineeTimeDilation; // 0x3dc(0x04)
	float DemoPlayTimeDilation; // 0x3e0(0x04)
	float MinGlobalTimeDilation; // 0x3e4(0x04)
	float MaxGlobalTimeDilation; // 0x3e8(0x04)
	float MinUndilatedFrameTime; // 0x3ec(0x04)
	float MaxUndilatedFrameTime; // 0x3f0(0x04)
	Unknown BroadphaseSettings; // 0x3f4(0x40)
	Unknown Pauser; // 0x438(0x08)
	Unknown ReplicationViewers; // 0x440(0x10)
	Unknown AssetUserData; // 0x450(0x10)
	Unknown PauserPlayerState; // 0x460(0x08)
	int32_t MaxNumberOf; // 0x468(0x04)
	Unknown DefaultBookmarkClass; // 0x470(0x08)
	Unknown BookmarkArray; // 0x478(0x10)
	Unknown LastBookmarkClass; // 0x488(0x08)
	Unknown bUseInstancedStaticCollision; // 0x490(0x01)
	Unknown bDebug; // 0x28(0x01)
	Unknown bExclusive; // 0x28(0x01)
	Unknown Priority; // 0x2c(0x01)
	Unknown CameraOwner; // 0x30(0x08)
	float AlphaInTime; // 0x38(0x04)
	float AlphaOutTime; // 0x3c(0x04)
	float ALPHA; // 0x40(0x04)
	Unknown LightComponent; // 0x310(0x08)
	Unknown bEnabled; // 0x318(0x01)
	Unknown SubsurfaceProfile; // 0x38(0x08)
	Unknown LightmassSettings; // 0x50(0x10)
	Unknown TextureStreamingData; // 0x60(0x10)
	Unknown AssetUserData; // 0x70(0x10)
	Unknown PhysMaterial; // 0x88(0x08)
	Unknown PhysicalMaterialMap; // 0x90(0x40)
	Unknown Parent; // 0xd0(0x08)
	Unknown bHasStaticPermutationResource; // 0xd8(0x01)
	Unknown bOverrideSubsurfaceProfile; // 0xd8(0x01)
	Unknown ScalarParameterValues; // 0xe0(0x10)
	Unknown VectorParameterValues; // 0xf0(0x10)
	Unknown TextureParameterValues; // 0x100(0x10)
	Unknown RuntimeVirtualTextureParameterValues; // 0x110(0x10)
	Unknown FontParameterValues; // 0x120(0x10)
	Unknown BasePropertyOverrides; // 0x130(0x08)
	Unknown StaticParameters; // 0x148(0x40)
	Unknown CachedLayerParameters; // 0x188(0x1a0)
	Unknown CachedReferencedTextures; // 0x328(0x10)
	Unknown PhysMaterialMask; // 0x408(0x08)
	int32_t NumReplicatedProperties; // 0x2d0(0x04)
	Unknown bHasNativizedParent; // 0x2d4(0x01)
	Unknown bHasCookedComponentInstancingData; // 0x2d4(0x01)
	Unknown DynamicBindingObjects; // 0x2d8(0x10)
	Unknown ComponentTemplates; // 0x2e8(0x10)
	Unknown Timelines; // 0x2f8(0x10)
	Unknown ComponentClassOverrides; // 0x308(0x10)
	Unknown SimpleConstructionScript; // 0x318(0x08)
	Unknown InheritableComponentHandler; // 0x320(0x08)
	Unknown UberGraphFramePointerProperty; // 0x328(0x08)
	Unknown UberGraphFunction; // 0x338(0x08)
	Unknown CookedComponentInstancingData; // 0x340(0x50)
	Unknown AutoActivateForPlayer; // 0x310(0x01)
	Unknown CameraComponent; // 0x318(0x08)
	Unknown SceneComponent; // 0x320(0x08)
	Unknown bConstrainAspectRatio; // 0x330(0x01)
	float AspectRatio; // 0x334(0x04)
	float FOVAngle; // 0x338(0x04)
	float PostProcess; // 0x33c(0x04)
	Unknown PostProcessSettings; // 0x340(0x5c0)
	Unknown SoundClassObject; // 0x28(0x08)
	Unknown bDebug; // 0x30(0x01)
	Unknown bOverrideConcurrency; // 0x30(0x01)
	Unknown bOutputToBusOnly; // 0x30(0x01)
	Unknown bHasDelayNode; // 0x30(0x01)
	Unknown bHasConcatenatorNode; // 0x30(0x01)
	Unknown bBypassVolumeScaleForPriority; // 0x30(0x01)
	Unknown VirtualizationMode; // 0x31(0x01)
	Unknown ConcurrencySet; // 0x88(0x50)
	Unknown ConcurrencyOverrides; // 0xd8(0x20)
	float Duration; // 0xf8(0x04)
	float MaxDistance; // 0xfc(0x04)
	float TotalSamples; // 0x100(0x04)
	float Priority; // 0x104(0x04)
	Unknown AttenuationSettings; // 0x108(0x08)
	Unknown Modulation; // 0x110(0x10)
	Unknown SoundSubmixObject; // 0x120(0x08)
	Unknown SoundSubmixSends; // 0x128(0x10)
	Unknown SourceEffectChain; // 0x138(0x08)
	Unknown BusSends; // 0x140(0x10)
	Unknown PreEffectBusSends; // 0x150(0x10)
	int32_t CompressionQuality; // 0x160(0x04)
	int32_t StreamingPriority; // 0x164(0x04)
	Unknown SampleRateQuality; // 0x168(0x01)
	Unknown SoundGroup; // 0x16a(0x01)
	Unknown bLooping; // 0x16b(0x01)
	Unknown bStreaming; // 0x16b(0x01)
	Unknown bSeekableStreaming; // 0x16b(0x01)
	Unknown LoadingBehavior; // 0x16c(0x01)
	Unknown bMature; // 0x16d(0x01)
	Unknown bManualWordWrap; // 0x16d(0x01)
	Unknown bSingleLine; // 0x16d(0x01)
	Unknown bIsAmbisonics; // 0x16e(0x01)
	Unknown FrequenciesToAnalyze; // 0x170(0x10)
	Unknown CookedSpectralTimeData; // 0x180(0x10)
	Unknown CookedEnvelopeTimeData; // 0x190(0x10)
	int32_t InitialChunkSize; // 0x1a0(0x04)
	struct FString SpokenText; // 0x1e8(0x10)
	float SubtitlePriority; // 0x1f8(0x04)
	float Volume; // 0x1fc(0x04)
	float Pitch; // 0x200(0x04)
	int32_t NumChannels; // 0x204(0x04)
	int32_t SampleRate; // 0x208(0x04)
	Unknown Subtitles; // 0x218(0x10)
	Unknown Curves; // 0x228(0x08)
	Unknown InternalCurves; // 0x230(0x08)
	Unknown SkeletonGeneratedClass; // 0x28(0x08)
	Unknown GeneratedClass; // 0x30(0x08)
	Unknown bLegacyNeedToPurgeSkelRefs; // 0x38(0x01)
	Unknown BlueprintGuid; // 0x3c(0x10)
	Unknown ParentClass; // 0x50(0x08)
	Unknown BlueprintType; // 0x58(0x01)
	Unknown bRecompileOnLoad; // 0x59(0x01)
	Unknown bHasBeenRegenerated; // 0x59(0x01)
	Unknown bIsRegeneratingOnLoad; // 0x59(0x01)
	int32_t BlueprintSystemVersion; // 0x5c(0x04)
	Unknown SimpleConstructionScript; // 0x60(0x08)
	Unknown ComponentTemplates; // 0x68(0x10)
	Unknown Timelines; // 0x78(0x10)
	Unknown ComponentClassOverrides; // 0x88(0x10)
	Unknown InheritableComponentHandler; // 0x98(0x08)
	Unknown SelfChannel; // 0x30(0x08)
	Unknown Connection; // 0x38(0x08)
	Unknown SelfActorChannel; // 0xa0(0x08)
	Unknown Actor; // 0xa8(0x08)
	Unknown CreateSubObjects; // 0x198(0x10)
	Unknown Skeleton; // 0x38(0x08)
	Unknown MetaData; // 0x60(0x10)
	Unknown AssetUserData; // 0x70(0x10)
	Unknown bRotationBlendInMeshSpace; // 0x88(0x01)
	float AnimLength; // 0x8c(0x04)
	Unknown InterpolationParam; // 0x90(0x18)
	float TargetWeightInterpolationSpeedPerSec; // 0xa8(0x04)
	Unknown NotifyTriggerMode; // 0xac(0x01)
	Unknown PerBoneBlend; // 0xb0(0x10)
	int32_t SampleIndexWithMarkers; // 0xc0(0x04)
	Unknown SampleData; // 0xc8(0x10)
	Unknown GridSamples; // 0xd8(0x10)
	Unknown BlendParameters; // 0xe8(0x60)
	Unknown AxisToScaleAnimation; // 0x148(0x01)
	Unknown bScaleAnimation; // 0x148(0x01)
	Unknown AISystemClassName; // 0x28(0x18)
	struct FName AISystemModuleName; // 0x40(0x08)
	Unknown bInstantiateAISystemOnClient; // 0x50(0x01)
	Unknown AudioComponent; // 0x310(0x08)
	int32_t CompressCommandletVersion; // 0x38(0x04)
	Unknown KeyEndEffectorsMatchNameArray; // 0x40(0x10)
	Unknown ForceRecompression; // 0x50(0x01)
	Unknown bOnlyCheckForMissingSkeletalMeshes; // 0x51(0x01)
	Unknown bForceBelowThreshold; // 0x52(0x01)
	Unknown bFirstRecompressUsingCurrentOrDefault; // 0x53(0x01)
	Unknown bRaiseMaxErrorToExisting; // 0x54(0x01)
	Unknown bEnablePerformanceLog; // 0x55(0x01)
	Unknown bStripAnimationDataOnDedicatedServer; // 0x56(0x01)
	Unknown bTickAnimationOnSkeletalMeshInit; // 0x57(0x01)
	Unknown TargetSkeleton; // 0xa8(0x08)
	Unknown Groups; // 0xb0(0x10)
	Unknown bUseMultiThreadedAnimationUpdate; // 0xc0(0x01)
	Unknown bWarnAboutBlueprintUsage; // 0xc1(0x01)
	Unknown BakedStateMachines; // 0x3d0(0x10)
	Unknown TargetSkeleton; // 0x3e0(0x08)
	Unknown AnimNotifies; // 0x3e8(0x10)
	Unknown OrderedSavedPoseIndicesMap; // 0x3f8(0x50)
	Unknown SyncGroupNames; // 0x4c8(0x10)
	Unknown EvaluateGraphExposedInputs; // 0x4d8(0x10)
	Unknown GraphAssetPlayerInformation; // 0x4e8(0x50)
	Unknown GraphBlendOptions; // 0x538(0x50)
	struct FString Description; // 0x28(0x10)
	Unknown Codecs; // 0x28(0x10)
	Unknown BakedStateMachines; // 0x30(0x10)
	Unknown TargetSkeleton; // 0x40(0x08)
	Unknown AnimNotifies; // 0x48(0x10)
	Unknown OrderedSavedPoseIndicesMap; // 0x58(0x50)
	Unknown AnimBlueprintFunctions; // 0xa8(0x10)
	Unknown AnimBlueprintFunctionData; // 0xb8(0x10)
	Unknown AnimNodeProperties; // 0xc8(0x10)
	Unknown LinkedAnimGraphNodeProperties; // 0xe8(0x10)
	Unknown LinkedAnimLayerNodeProperties; // 0x108(0x10)
	Unknown PreUpdateNodeProperties; // 0x128(0x10)
	Unknown DynamicResetNodeProperties; // 0x148(0x10)
	Unknown StateMachineNodeProperties; // 0x168(0x10)
	Unknown InitializationNodeProperties; // 0x188(0x10)
	Unknown GraphNameAssetPlayers; // 0x1a8(0x50)
	Unknown SyncGroupNames; // 0x1f8(0x10)
	Unknown EvaluateGraphExposedInputs; // 0x208(0x10)
	Unknown GraphBlendOptions; // 0x218(0x50)
	Unknown Notifies; // 0x80(0x10)
	float SequenceLength; // 0x90(0x04)
	float RateScale; // 0x94(0x04)
	Unknown RawCurveData; // 0x98(0x10)
	Unknown AnimationTrack; // 0xa8(0x10)
	Unknown bNeedsSkeleton; // 0x38(0x01)
	Unknown TranslationCompressionFormat; // 0x3c(0x01)
	Unknown RotationCompressionFormat; // 0x3d(0x01)
	Unknown ScaleCompressionFormat; // 0x3e(0x01)
	float MaxPosDiff; // 0x40(0x04)
	float MaxAngleDiff; // 0x44(0x04)
	float MaxScaleDiff; // 0x48(0x04)
	float MaxEffectorDiff; // 0x4c(0x04)
	float MinEffectorDiff; // 0x50(0x04)
	float EffectorDiffSocket; // 0x54(0x04)
	float ParentKeyScale; // 0x58(0x04)
	Unknown bRetarget; // 0x5c(0x01)
	Unknown bActuallyFilterLinearKeys; // 0x5c(0x01)
	float MaxZeroingThreshold; // 0x60(0x04)
	float MaxPosDiffBitwise; // 0x64(0x04)
	float MaxAngleDiffBitwise; // 0x68(0x04)
	float MaxScaleDiffBitwise; // 0x6c(0x04)
	Unknown AllowedRotationFormats; // 0x70(0x10)
	Unknown AllowedTranslationFormats; // 0x80(0x10)
	Unknown AllowedScaleFormats; // 0x90(0x10)
	Unknown bResampleAnimation; // 0xa0(0x01)
	float ResampledFramerate; // 0xa4(0x04)
	int32_t MinKeysForResampling; // 0xa8(0x04)
	Unknown bUseAdaptiveError; // 0xac(0x01)
	Unknown bUseOverrideForEndEffectors; // 0xac(0x01)
	int32_t TrackHeight; // 0xb0(0x04)
	float ParentingDivisor; // 0xb4(0x04)
	float ParentingDivisorExponent; // 0xb8(0x04)
	Unknown bUseAdaptiveError2; // 0xbc(0x01)
	float RotationErrorSourceRatio; // 0xc0(0x04)
	float TranslationErrorSourceRatio; // 0xc4(0x04)
	float ScaleErrorSourceRatio; // 0xc8(0x04)
	float MaxErrorPerTrackRatio; // 0xcc(0x04)
	float PerturbationProbeSize; // 0xd0(0x04)
	int32_t MinKeys; // 0x40(0x04)
	Unknown bStartAtSecondKey; // 0x44(0x01)
	float MaxPosDiff; // 0x40(0x04)
	float MaxAngleDiff; // 0x44(0x04)
	float MaxScaleDiff; // 0x48(0x04)
	Unknown Codec; // 0x28(0x08)
	Unknown BlendIn; // 0xa8(0x30)
	float BlendInTime; // 0xd8(0x04)
	Unknown BlendOut; // 0xe0(0x30)
	float BlendOutTime; // 0x110(0x04)
	float BlendOutTriggerTime; // 0x114(0x04)
	struct FName SyncGroup; // 0x118(0x08)
	int32_t SyncSlotIndex; // 0x120(0x04)
	Unknown MarkerData; // 0x128(0x20)
	Unknown CompositeSections; // 0x148(0x10)
	Unknown SlotAnimTracks; // 0x158(0x10)
	Unknown BranchingPoints; // 0x168(0x10)
	Unknown bEnableRootMotionTranslation; // 0x178(0x01)
	Unknown bEnableRootMotionRotation; // 0x179(0x01)
	Unknown bEnableAuto; // 0x17a(0x01)
	Unknown RootMotionRootLock; // 0x17b(0x01)
	Unknown BranchingPointMarkers; // 0x180(0x10)
	Unknown BranchingPointStateNotifyIndices; // 0x190(0x10)
	Unknown TimeStretchCurve; // 0x1a0(0x28)
	struct FName TimeStretchCurveName; // 0x1c8(0x08)
	Unknown PSTemplate; // 0x38(0x08)
	Unknown LocationOffset; // 0x40(0x0c)
	Unknown RotationOffset; // 0x4c(0x0c)
	Unknown Scale; // 0x58(0x0c)
	Unknown Attached; // 0x80(0x01)
	struct FName SocketName; // 0x84(0x08)
	Unknown Sound; // 0x38(0x08)
	float VolumeMultiplier; // 0x40(0x04)
	float PitchMultiplier; // 0x44(0x04)
	Unknown bFollow; // 0x48(0x01)
	struct FName AttachName; // 0x4c(0x08)
	Unknown PSTemplate; // 0x30(0x08)
	struct FName SocketName; // 0x38(0x08)
	Unknown LocationOffset; // 0x40(0x0c)
	Unknown RotationOffset; // 0x4c(0x0c)
	Unknown bDestroyAtEnd; // 0x58(0x01)
	Unknown PSTemplate; // 0x30(0x08)
	struct FName FirstSocketName; // 0x38(0x08)
	struct FName SecondSocketName; // 0x40(0x08)
	Unknown WidthScaleMode; // 0x48(0x01)
	struct FName WidthScaleCurve; // 0x4c(0x08)
	Unknown bRecycleSpawnedSystems; // 0x54(0x01)
	int32_t NumFrames; // 0xa8(0x04)
	Unknown TrackToSkeletonMapTable; // 0xb0(0x10)
	Unknown BoneCompressionSettings; // 0xd0(0x08)
	Unknown CurveCompressionSettings; // 0xd8(0x08)
	Unknown AdditiveAnimType; // 0x150(0x01)
	Unknown RefPoseType; // 0x151(0x01)
	Unknown RefPoseSeq; // 0x158(0x08)
	int32_t RefFrameIndex; // 0x160(0x04)
	struct FName RetargetSource; // 0x164(0x08)
	Unknown Interpolation; // 0x16c(0x01)
	Unknown bEnableRootMotion; // 0x16d(0x01)
	Unknown RootMotionRootLock; // 0x16e(0x01)
	Unknown bForceRootLock; // 0x16f(0x01)
	Unknown bUseNormalizedRootMotionScale; // 0x170(0x01)
	Unknown bRootMotionSettingsCopiedFromMontage; // 0x171(0x01)
	Unknown AuthoredSyncMarkers; // 0x178(0x10)
	Unknown bAnimRotationOnly; // 0x28(0x01)
	Unknown TrackBoneNames; // 0x30(0x10)
	Unknown LinkupCache; // 0x40(0x10)
	Unknown BoneUseAnimTranslation; // 0x50(0x10)
	Unknown ForceUseMeshTranslation; // 0x60(0x10)
	Unknown UseTranslationBoneNames; // 0x70(0x10)
	Unknown ForceMeshTranslationBoneNames; // 0x80(0x10)
	struct FName PreviewSkelMeshName; // 0x90(0x08)
	struct FName BestRatioSkelMeshName; // 0x98(0x08)
	Unknown CurrentAsset; // 0x268(0x08)
	struct FDelegate PostEvaluateAnimEvent; // 0x270(0x10)
	int32_t NumFrames; // 0xa8(0x04)
	Unknown Interpolation; // 0xac(0x01)
	struct FName RetargetSource; // 0xb0(0x08)
	Unknown BoneCompressionSettings; // 0xc8(0x08)
	Unknown CurveCompressionSettings; // 0xd0(0x08)
	Unknown bEnableRootMotion; // 0xd8(0x01)
	Unknown RootMotionRootLock; // 0xd9(0x01)
	Unknown bForceRootLock; // 0xda(0x01)
	Unknown bUseNormalizedRootMotionScale; // 0xdb(0x01)
	Unknown Object; // 0x28(0x08)
	Unknown Exporter; // 0x30(0x08)
	struct FString Filename; // 0x38(0x10)
	Unknown bSelected; // 0x48(0x01)
	Unknown bReplaceIdentical; // 0x49(0x01)
	Unknown bPrompt; // 0x4a(0x01)
	Unknown bAutomated; // 0x4b(0x01)
	Unknown bUseFileArchive; // 0x4c(0x01)
	Unknown bWriteEmptyFiles; // 0x4d(0x01)
	Unknown IgnoreObjectList; // 0x50(0x10)
	Unknown options; // 0x60(0x08)
	Unknown Errors; // 0x68(0x10)
	Unknown PrimaryAssetTypesToScan; // 0x38(0x10)
	Unknown DirectoriesToExclude; // 0x48(0x10)
	Unknown PrimaryAssetRules; // 0x58(0x10)
	Unknown CustomPrimaryAssetRules; // 0x68(0x10)
	Unknown bOnlyCookProductionAssets; // 0x78(0x01)
	Unknown bShouldManagerDetermineTypeAndName; // 0x79(0x01)
	Unknown bShouldGuessTypeAndNameInEditor; // 0x7a(0x01)
	Unknown bShouldAcquireMissingChunksOnLoad; // 0x7b(0x01)
	Unknown PrimaryAssetIdRedirects; // 0x80(0x10)
	Unknown PrimaryAssetTypeRedirects; // 0x90(0x10)
	Unknown AssetPathRedirects; // 0xa0(0x10)
	Unknown MetaDataTagsForAssetRegistry; // 0xb0(0x50)
	Unknown bUsePathExcludedFromScan; // 0x100(0x01)
	Unknown bRemoveRedundantDirectroyChunks; // 0x101(0x01)
	Unknown MappedAssets; // 0x28(0x10)
	struct FMulticastInlineDelegate Completed; // 0x30(0x10)
	Unknown SaveGameObject; // 0x60(0x08)
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)
	Unknown AtmosphericFogComponent; // 0x310(0x08)
	float SunMultiplier; // 0x238(0x04)
	float FogMultiplier; // 0x23c(0x04)
	float DensityMultiplier; // 0x240(0x04)
	float DensityOffset; // 0x244(0x04)
	float DistanceScale; // 0x248(0x04)
	float AltitudeScale; // 0x24c(0x04)
	float DistanceOffset; // 0x250(0x04)
	float GroundOffset; // 0x254(0x04)
	float StartDistance; // 0x258(0x04)
	float SunDiscScale; // 0x25c(0x04)
	float DefaultBrightness; // 0x260(0x04)
	Unknown DefaultLightColor; // 0x264(0x04)
	Unknown bDisableSunDisk; // 0x268(0x01)
	Unknown bAtmosphereAffectsSunIlluminance; // 0x268(0x01)
	Unknown bDisableGroundScattering; // 0x268(0x01)
	Unknown PrecomputeParams; // 0x26c(0x2c)
	Unknown TransmittanceTexture; // 0x298(0x08)
	Unknown IrradianceTexture; // 0x2a0(0x08)
	Unknown DefaultSoundClassName; // 0x38(0x18)
	Unknown DefaultMediaSoundClassName; // 0x50(0x18)
	Unknown DefaultSoundConcurrencyName; // 0x68(0x18)
	Unknown DefaultBaseSoundMix; // 0x80(0x18)
	Unknown VoiPSoundClass; // 0x98(0x18)
	Unknown MasterSubmix; // 0xb0(0x18)
	Unknown ReverbSubmix; // 0xc8(0x18)
	Unknown EQSubmix; // 0xe0(0x18)
	Unknown VoiPSampleRate; // 0xf8(0x04)
	float DefaultReverbSendLevel; // 0xfc(0x04)
	int32_t MaximumConcurrentStreams; // 0x100(0x04)
	float GlobalMinPitchScale; // 0x104(0x04)
	float GlobalMaxPitchScale; // 0x108(0x04)
	Unknown QualityLevels; // 0x110(0x10)
	Unknown bAllowPlayWhenSilent; // 0x120(0x01)
	Unknown bDisableMasterEQ; // 0x120(0x01)
	Unknown bAllowCenterChannel3DPanning; // 0x120(0x01)
	uint32_t NumStoppingSources; // 0x124(0x04)
	Unknown PanningMethod; // 0x128(0x01)
	Unknown MonoChannelUpmixMethod; // 0x129(0x01)
	struct FString DialogueFilenameFormat; // 0x130(0x10)
	float Priority; // 0x348(0x04)
	Unknown bEnabled; // 0x34c(0x01)
	Unknown Settings; // 0x350(0x20)
	Unknown AmbientZoneSettings; // 0x370(0x24)
	Unknown ActorsToPoll; // 0x38(0x10)
	Unknown EngineTestModules; // 0x28(0x10)
	Unknown EditorTestModules; // 0x38(0x10)
	Unknown AutomationTestmap; // 0x48(0x18)
	Unknown EditorPerformanceTestMaps; // 0x60(0x10)
	Unknown AssetsToOpen; // 0x70(0x10)
	Unknown BuildPromotionTest; // 0x80(0x1f0)
	Unknown MaterialEditorPromotionTest; // 0x270(0x30)
	Unknown ParticleEditorPromotionTest; // 0x2a0(0x10)
	Unknown BlueprintEditorPromotionTest; // 0x2b0(0x30)
	Unknown TestLevelFolders; // 0x2e0(0x10)
	Unknown ExternalTools; // 0x2f0(0x10)
	Unknown ImportExportTestDefinitions; // 0x300(0x10)
	Unknown LaunchOnSettings; // 0x310(0x10)
	Unknown DefaultScreenshotResolution; // 0x320(0x08)
	float DefaultTimeToLive; // 0x30(0x04)
	float LockTimeAfterAvoid; // 0x34(0x04)
	float LockTimeAfterClean; // 0x38(0x04)
	float DeltaTimeToPredict; // 0x3c(0x04)
	float ArtificialRadiusExpansion; // 0x40(0x04)
	float TestHeightDifference; // 0x44(0x04)
	float HeightCheckMargin; // 0x48(0x04)
	Unknown BandwidthGenerator; // 0x310(0x20)
	Unknown Sprite; // 0x4b8(0x08)
	Unknown bIsScreenSizeScaled; // 0x4c0(0x01)
	float ScreenSize; // 0x4c4(0x04)
	float U; // 0x4c8(0x04)
	float UL; // 0x4cc(0x04)
	float V; // 0x4d0(0x04)
	float VL; // 0x4d4(0x04)
	Unknown BoneTree; // 0x38(0x10)
	Unknown RefLocalPoses; // 0x48(0x10)
	Unknown VirtualBoneGuid; // 0x170(0x10)
	Unknown VirtualBones; // 0x180(0x10)
	Unknown Sockets; // 0x190(0x10)
	Unknown SmartNames; // 0x1f0(0x50)
	Unknown BlendProfiles; // 0x270(0x10)
	Unknown SlotGroups; // 0x280(0x10)
	Unknown AssetUserData; // 0x358(0x10)
	Unknown OwningSkeleton; // 0x30(0x08)
	Unknown ProfileEntries; // 0x38(0x10)
	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0x218(0x10)
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0x228(0x10)
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0x238(0x10)
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0x248(0x10)
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0x258(0x10)
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x268(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x278(0x10)
	struct FMulticastInlineDelegate ApplicationRegisteredForRemoteNotificationsDelegate; // 0x288(0x10)
	struct FMulticastInlineDelegate ApplicationRegisteredForUserNotificationsDelegate; // 0x298(0x10)
	struct FMulticastInlineDelegate ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x2a8(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedRemoteNotificationDelegate; // 0x2b8(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedLocalNotification; // 0x2c8(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedScreenOrientationnDelegat; // 0x2d8(0x10)
	Unknown AggGeom; // 0x28(0x58)
	struct FName BoneName; // 0x80(0x08)
	Unknown PhysicsType; // 0x88(0x01)
	Unknown bAlwaysFullAnimWeight; // 0x89(0x01)
	Unknown bConsiderForBounds; // 0x89(0x01)
	Unknown bMeshCollideAll; // 0x89(0x01)
	Unknown bDoubleSidedGeometry; // 0x89(0x01)
	Unknown bGenerateNonMirroredCollision; // 0x89(0x01)
	Unknown bSharedCookedData; // 0x89(0x01)
	Unknown bGenerateMirroredCollision; // 0x89(0x01)
	Unknown bSupportUVsAndFaceRemap; // 0x89(0x01)
	Unknown CollisionReponse; // 0x8b(0x01)
	Unknown CollisionTraceFlag; // 0x8c(0x01)
	Unknown PhysMaterial; // 0x90(0x08)
	Unknown WalkableSlopeOverride; // 0x98(0x10)
	Unknown DefaultInstance; // 0x120(0x190)
	Unknown BuildScale3D; // 0x2b8(0x0c)
	Unknown BlendPoses; // 0x28(0x10)
	Unknown Location; // 0x28(0x0c)
	Unknown Rotation; // 0x34(0x0c)
	Unknown HiddenLevels; // 0x40(0x10)
	float Zoom2D; // 0x28(0x04)
	Unknown Location; // 0x2c(0x08)
	Unknown CaptureComponent; // 0x310(0x08)
	Unknown VisualizationMesh; // 0x238(0x08)
	Unknown CaptureOffsetComponent; // 0x240(0x08)
	Unknown ReflectionSourceType; // 0x248(0x01)
	Unknown Cubemap; // 0x250(0x08)
	float SourceCubemapAngle; // 0x258(0x04)
	float Brightness; // 0x25c(0x04)
	float DiffuseRadiance; // 0x260(0x04)
	Unknown CaptureOffset; // 0x264(0x0c)
	Unknown MapBuildDataId; // 0x270(0x10)
	float BoxTransitionDistance; // 0x2c0(0x04)
	Unknown PreviewInfluenceBox; // 0x2c8(0x08)
	Unknown PreviewCaptureBox; // 0x2d0(0x08)
	Unknown bEnabled; // 0x28(0x01)
	Unknown Node; // 0x30(0x08)
	Unknown bStepOnce; // 0x38(0x01)
	Unknown bStepOnce_WasPreviouslyDisabled; // 0x38(0x01)
	Unknown bStepOnce_RemoveAfterHit; // 0x38(0x01)
	struct FString BitmapFilename; // 0x28(0x10)
	struct FString Tooltip; // 0x38(0x10)
	Unknown NotifyBadParams; // 0x48(0x01)
	Unknown Vertices; // 0x50(0x10)
	Unknown Polys; // 0x60(0x10)
	struct FName Layer; // 0x70(0x08)
	Unknown MergeCoplanars; // 0x78(0x01)
	Unknown Brush; // 0x4b8(0x08)
	Unknown BrushBodySetup; // 0x4c0(0x08)
	Unknown ButtonStyle; // 0x28(0x278)
	Unknown CameraInterpGroup; // 0x28(0x08)
	float AnimLength; // 0x30(0x04)
	Unknown BoundingBox; // 0x34(0x1c)
	Unknown bRelativeToInitialTransform; // 0x50(0x01)
	Unknown bRelativeToInitialFOV; // 0x50(0x01)
	float BaseFOV; // 0x54(0x04)
	Unknown BasePostProcessSettings; // 0x60(0x5c0)
	float BasePostProcessBlendWeight; // 0x620(0x04)
	Unknown CamAnim; // 0x28(0x08)
	Unknown InterpGroupInst; // 0x30(0x08)
	float PlayRate; // 0x50(0x04)
	Unknown MoveTrack; // 0x68(0x08)
	Unknown MoveInst; // 0x70(0x08)
	Unknown PlaySpace; // 0x78(0x01)
	Unknown ActiveShakes; // 0x48(0x10)
	Unknown ExpiredPooledShakesMap; // 0x58(0x50)
	float SplitScreenShakeScale; // 0xa8(0x04)
	Unknown bSingleInstance; // 0x28(0x01)
	float OscillationDuration; // 0x2c(0x04)
	float Oscillation; // 0x30(0x04)
	float OscillationBuration; // 0x34(0x04)
	Unknown RotOscillation; // 0x38(0x24)
	Unknown LocOscillation; // 0x5c(0x24)
	Unknown FOVOscillation; // 0x80(0x0c)
	float AnimPlayRate; // 0x8c(0x04)
	float AnimScale; // 0x90(0x04)
	float AnimBlendInTime; // 0x94(0x04)
	float AnimBlendOutTime; // 0x98(0x04)
	float RandomAnimSegmentDuration; // 0x9c(0x04)
	Unknown Anim; // 0xa0(0x08)
	Unknown bRandomAnimSegment; // 0xa8(0x01)
	Unknown CameraOwner; // 0xc0(0x08)
	float ShakeScale; // 0x148(0x04)
	float OscillatorTimeRemaining; // 0x14c(0x04)
	Unknown AnimInst; // 0x150(0x08)
	Unknown CameraShakeSourceComponent; // 0x310(0x08)
	Unknown Attenuation; // 0x238(0x01)
	float InnerAttenuationRadius; // 0x23c(0x04)
	float OuterAttenuationRadius; // 0x240(0x04)
	Unknown CameraShake; // 0x248(0x08)
	Unknown bAutoPlay; // 0x250(0x01)
	float OrgX; // 0x28(0x04)
	float OrgY; // 0x2c(0x04)
	float ClipX; // 0x30(0x04)
	float ClipY; // 0x34(0x04)
	Unknown DrawColor; // 0x38(0x04)
	Unknown bCenterX; // 0x3c(0x01)
	Unknown bCenterY; // 0x3c(0x01)
	Unknown bNoSmooth; // 0x3c(0x01)
	int32_t SizeX; // 0x40(0x04)
	int32_t SizeY; // 0x44(0x04)
	Unknown ColorModulate; // 0x50(0x10)
	Unknown DefaultTexture; // 0x60(0x08)
	Unknown GradientTexture0; // 0x68(0x08)
	Unknown ReporterGraph; // 0x70(0x08)
	float TargetGamma; // 0xb8(0x04)
	int32_t SizeX; // 0xc0(0x04)
	int32_t SizeY; // 0xc4(0x04)
	Unknown ClearColor; // 0xc8(0x10)
	Unknown AddressX; // 0xd8(0x01)
	Unknown AddressY; // 0xd9(0x01)
	Unknown bForceLinearGamma; // 0xda(0x01)
	Unknown bHDR; // 0xda(0x01)
	Unknown bGPUSharedFlag; // 0xda(0x01)
	Unknown RenderTargetFormat; // 0xdb(0x01)
	Unknown bAutoGenerateMips; // 0xdc(0x01)
	Unknown MipsSamplerFilter; // 0xdd(0x01)
	Unknown MipsAddressU; // 0xde(0x01)
	Unknown MipsAddressV; // 0xdf(0x01)
	Unknown OverrideFormat; // 0xe0(0x01)
	struct FMulticastInlineDelegate OnCanvasRenderTargetUpdate; // 0xe8(0x10)
	Unknown World; // 0xf8(0x08)
	Unknown bShouldClearRenderTargetOnReceiveUpdate; // 0x100(0x01)
	float Friction; // 0x28(0x04)
	float StaticFriction; // 0x2c(0x04)
	float Restitution; // 0x30(0x04)
	float LinearEtherDrag; // 0x34(0x04)
	float AngularEtherDrag; // 0x38(0x04)
	float SleepingLinearVelocityThreshold; // 0x3c(0x04)
	float SleepingAngularVelocityThreshold; // 0x40(0x04)
	Unknown CheckBoxStyle; // 0x28(0x580)
	Unknown ChildActorClass; // 0x238(0x08)
	Unknown ChildActor; // 0x240(0x08)
	Unknown ChildActorTemplate; // 0x248(0x08)
	Unknown Parent; // 0x1aa0(0x08)
	Unknown AllDelegates; // 0x28(0x10)
	Unknown LocalCloudFiles; // 0x38(0x10)
	Unknown bSuppressDelegateCalls; // 0x48(0x01)
	Unknown Profiles; // 0x38(0x10)
	Unknown DefaultChannelResponses; // 0x48(0x10)
	Unknown EditProfiles; // 0x58(0x10)
	Unknown ProfileRedirects; // 0x68(0x10)
	Unknown CollisionChannelRedirects; // 0x78(0x10)
	Unknown ComponentDelegateBindings; // 0x28(0x10)
	Unknown ParentTables; // 0xa0(0x10)
	Unknown OldParentTables; // 0xb0(0x10)
	Unknown RowStruct; // 0x28(0x08)
	Unknown bStripFromClientBuilds; // 0x80(0x01)
	Unknown bIgnoreExtraFields; // 0x80(0x01)
	Unknown bIgnoreMissingFields; // 0x80(0x01)
	struct FString ImportKeyField; // 0x88(0x10)
	Unknown ParentTables; // 0xc8(0x10)
	Unknown OldParentTables; // 0xd8(0x10)
	Unknown ConsoleTargetPlayer; // 0x38(0x08)
	Unknown DefaultTexture_Black; // 0x40(0x08)
	Unknown DefaultTexture_White; // 0x48(0x08)
	Unknown HistoryBuffer; // 0x68(0x10)
	Unknown AsyncLoadingThreadEnabled; // 0x38(0x01)
	Unknown AsyncPostLoadEnabled; // 0x38(0x01)
	Unknown WarnIfTimeLimitExceeded; // 0x38(0x01)
	float TimeLimitExceededMultiplier; // 0x3c(0x04)
	float TimeLimitExceededMinTime; // 0x40(0x04)
	int32_t MinBulkDataSizeForAsyncLoading; // 0x44(0x04)
	Unknown UseBackgroundLevelStreaming; // 0x48(0x01)
	Unknown AsyncLoadingUseFullTimeLimit; // 0x48(0x01)
	float AsyncLoadingTimeLimit; // 0x4c(0x04)
	float PriorityAsyncLoadingExtraTime; // 0x50(0x04)
	float LevelStreamingActorsUpdateTimeLimit; // 0x54(0x04)
	float PriorityLevelStreamingActorsUpdateExtraTime; // 0x58(0x04)
	int32_t LevelStreamingComponentsRegistr; // 0x5c(0x04)
	float LevelStreamingUnregisterC; // 0x60(0x04)
	int32_t LevelStreamingComponentsUnregistrationGranularity; // 0x64(0x04)
	Unknown FlushStreamingOnExit; // 0x68(0x01)
	Unknown EventDrivenLoaderEnabled; // 0x68(0x01)
	float TimeBetweenPurgingPendingKillObjects; // 0x38(0x04)
	Unknown FlushStreamingOnGC; // 0x3c(0x01)
	Unknown AllowParallelGC; // 0x3c(0x01)
	Unknown Incremental; // 0x3c(0x01)
	Unknown MultithreadedDestructionEnabled; // 0x3c(0x01)
	Unknown CreateGCClusters; // 0x3c(0x01)
	Unknown AssetClusteringEnabled; // 0x3c(0x01)
	Unknown ActorClusteringEnabled; // 0x3c(0x01)
	Unknown BlueprintClusteringEnabled; // 0x3c(0x01)
	Unknown UseDisregardForGCOnDedicatedSer; // 0x3d(0x01)
	int32_t MinGCClusterSize; // 0x40(0x04)
	int32_t NumRetriesBeforeForcingGC; // 0x44(0x04)
	int32_t MaxObjectsNotConsideredByGC; // 0x48(0x04)
	int32_t SizeOfPermanentObjectPool; // 0x4c(0x04)
	int32_t MaxObjectsInGame; // 0x50(0x04)
	int32_t MaxObjectsInEditor; // 0x54(0x04)
	Unknown CullDistances; // 0x348(0x10)
	Unknown bEnabled; // 0x358(0x01)
	Unknown FloatCurve; // 0x30(0x80)
	Unknown bIsEventCurve; // 0xb0(0x01)
	Unknown FloatCurves; // 0x30(0x200)
	float AdjustHue; // 0x230(0x04)
	float AdjustSaturation; // 0x234(0x04)
	float AdjustBrightness; // 0x238(0x04)
	float AdjustBrightnessCurve; // 0x23c(0x04)
	float AdjustVibrance; // 0x240(0x04)
	float AdjustMinAlpha; // 0x244(0x04)
	float AdjustMaxAlpha; // 0x248(0x04)
	int32_t LevelIndex; // 0xb8(0x04)
	int32_t FirstResourceMemMip; // 0xbc(0x04)
	Unknown bTemporarilyDisableStreaming; // 0xc0(0x01)
	Unknown AddressX; // 0xc1(0x01)
	Unknown AddressY; // 0xc2(0x01)
	Unknown ImportedSize; // 0xc4(0x08)
	uint32_t TextureSize; // 0xe8(0x04)
	Unknown GradientCurves; // 0xf0(0x10)
	Unknown FloatCurves; // 0x30(0x180)
	Unknown bShowSelectedInfo; // 0x6f0(0x01)
	Unknown bIsFrozenRendering; // 0x6f0(0x01)
	Unknown bOverrideInitialMaxSpeed; // 0x6f0(0x01)
	float OverrideInitialMaxSpeed; // 0x6f4(0x04)
	Unknown bIsOrbitingSelectedActor; // 0x6f8(0x01)
	Unknown bOrbitPivotUseCenter; // 0x6f8(0x01)
	Unknown bEnableBufferVisualization; // 0x6f8(0x01)
	Unknown bEnableBufferVisualizationFullMode; // 0x6f8(0x01)
	Unknown bIsBufferVisualizationInputSetup; // 0x6f8(0x01)
	Unknown bLastDisplayEnabled; // 0x6f8(0x01)
	Unknown DrawFrustum; // 0x700(0x08)
	Unknown SelectedActor; // 0x708(0x08)
	Unknown SelectedComponent; // 0x710(0x08)
	Unknown SelectedHitPoint; // 0x718(0x88)
	Unknown OriginalControllerRef; // 0x7a0(0x08)
	Unknown OriginalPlayer; // 0x7a8(0x08)
	float SpeedScale; // 0x7b0(0x04)
	float InitialMaxSpeed; // 0x7b4(0x04)
	float InitialAccel; // 0x7b8(0x04)
	float InitialDecel; // 0x7bc(0x04)
	Unknown CycleViewModes; // 0x38(0x10)
	Unknown Decal; // 0x310(0x08)
	Unknown DecalMaterial; // 0x238(0x08)
	int32_t SortOrder; // 0x240(0x04)
	float FadeScreenSize; // 0x244(0x04)
	float FadeStartDelay; // 0x248(0x04)
	float FadeDuration; // 0x24c(0x04)
	float FadeInDuration; // 0x250(0x04)
	float FadeInStartDelay; // 0x254(0x04)
	Unknown bDestroyOwnerAfterFade; // 0x258(0x01)
	Unknown DecalSize; // 0x25c(0x0c)
	Unknown SelfDemoNetConnection; // 0x1be8(0x08)
	Unknown NetDriver; // 0x30(0x08)
	Unknown DemoNetDriver; // 0x38(0x08)
	Unknown TextureLODGroups; // 0x28(0x10)
	struct FString DeviceType; // 0x38(0x10)
	struct FString BaseProfileName; // 0x48(0x10)
	Unknown Parent; // 0x58(0x08)
	Unknown CVars; // 0x78(0x10)
	Unknown Profiles; // 0x28(0x10)
	Unknown gender; // 0x28(0x01)
	Unknown Plurality; // 0x29(0x01)
	Unknown LocalizationGUID; // 0x2c(0x10)
	Unknown bMature; // 0x28(0x01)
	Unknown bOverride_SubtitleOverride; // 0x28(0x01)
	struct FString SpokenText; // 0x30(0x10)
	struct FString SubtitleOverride; // 0x40(0x10)
	Unknown ContextMappings; // 0x50(0x10)
	Unknown LocalizationGUID; // 0x60(0x10)
	Unknown LightComponent; // 0x310(0x08)
	Unknown bEnabled; // 0x318(0x01)
	Unknown LightGuid; // 0x238(0x10)
	float Brightness; // 0x248(0x04)
	float Intensity; // 0x24c(0x04)
	Unknown LightColor; // 0x250(0x04)
	Unknown bAffectsWorld; // 0x254(0x01)
	Unknown CastShadows; // 0x254(0x01)
	Unknown CastStaticShadows; // 0x254(0x01)
	Unknown CastDynamicShadows; // 0x254(0x01)
	Unknown bAffectTranslucentLighting; // 0x254(0x01)
	Unknown bTransmission; // 0x254(0x01)
	Unknown bCastVolumetricShadow; // 0x254(0x01)
	Unknown bCastDeepShadow; // 0x254(0x01)
	Unknown bCastRaytracedShadow; // 0x255(0x01)
	Unknown bAffectReflection; // 0x255(0x01)
	Unknown bAffectGlobalIllumination; // 0x255(0x01)
	float IndirectLightingIntensity; // 0x258(0x04)
	float VolumetricScatteringIntensity; // 0x25c(0x04)
	float VolumetricAttenuationScale; // 0x260(0x04)
	float VolumetricSourceRadiusScale; // 0x264(0x04)
	int32_t SamplesPerPixel; // 0x268(0x04)
	float Temperature; // 0x270(0x04)
	float MaxDrawDistance; // 0x274(0x04)
	float MaxDistanceFadeRange; // 0x278(0x04)
	Unknown bUseTemperature; // 0x27c(0x01)
	int32_t ShadowMapChannel; // 0x280(0x04)
	float MinRoughness; // 0x288(0x04)
	float SpecularScale; // 0x28c(0x04)
	float ShadowResolutionScale; // 0x290(0x04)
	float ShadowBias; // 0x294(0x04)
	float ShadowSlope; // 0x298(0x04)
	float ShadowSharpen; // 0x29c(0x04)
	float ContactShadowLength; // 0x2a0(0x04)
	Unknown ContactShadowLengthInWS; // 0x2a4(0x01)
	float ContactShadowStartDistance; // 0x2a8(0x04)
	float ContactShadowFadeDistance; // 0x2ac(0x04)
	float ShadowStrength; // 0x2b0(0x04)
	float TranslucentShadowDensity; // 0x2b4(0x04)
	Unknown InverseSquaredFalloff; // 0x2b8(0x01)
	Unknown CastTranslucentShadows; // 0x2b8(0x01)
	Unknown bCastShadowsFromCinematicObjectsOnly; // 0x2b8(0x01)
	Unknown bAffectDynamicIndirectLighting; // 0x2b8(0x01)
	Unknown bForceCachedShadowsFromMovablePrimitivesAsStatic; // 0x2b8(0x01)
	Unknown bForceCachedShadowsForMovablePr; // 0x2b8(0x01)
	Unknown LightingChannels; // 0x2bc(0x01)
	Unknown LightFunctionMaterial; // 0x2c0(0x08)
	Unknown LightFunctionScale; // 0x2c8(0x0c)
	Unknown IESTexture; // 0x2d8(0x08)
	Unknown bUseIESBrightness; // 0x2e0(0x01)
	float IESBrightnessScale; // 0x2e4(0x04)
	float LightFunctionFadeDistance; // 0x2e8(0x04)
	float DisabledBrightness; // 0x2ec(0x04)
	Unknown bEnableLightShaftBloom; // 0x2f0(0x01)
	float BloomScale; // 0x2f4(0x04)
	float BloomThreshold; // 0x2f8(0x04)
	float BloomMaxBrightness; // 0x2fc(0x04)
	Unknown BloomTint; // 0x300(0x04)
	Unknown bUseFoliageLighting; // 0x304(0x01)
	Unknown bUseRayTracedDistanceFieldShadows; // 0x305(0x01)
	float RayStartOffsetDepthScale; // 0x308(0x04)
	float ShadowCascadeBiasDistribution; // 0x380(0x04)
	Unknown bEnableLightShaftOcclusion; // 0x384(0x01)
	float OcclusionMaskDarkness; // 0x388(0x04)
	float OcclusionDepthRange; // 0x38c(0x04)
	Unknown LightShaftOverrideDirection; // 0x390(0x0c)
	float WholeSceneDynamicShadowRadius; // 0x39c(0x04)
	float DynamicShadowDistanceMovableLight; // 0x3a0(0x04)
	float DynamicShadowDistanceStationaryLight; // 0x3a4(0x04)
	int32_t DynamicShadowCascades; // 0x3a8(0x04)
	float CascadeDistributionExponent; // 0x3ac(0x04)
	float CascadeTransitionFraction; // 0x3b0(0x04)
	float ShadowDistanceFadeoutFraction; // 0x3b4(0x04)
	Unknown bUseInsetShadowsForMovableObj; // 0x3b8(0x01)
	int32_t FarShadowCascadeCount; // 0x3bc(0x04)
	float FarShadowDistance; // 0x3c0(0x04)
	Unknown bUseFarShadowAsStaticWorldShadow; // 0x3c4(0x01)
	float DistanceFieldShadowDistance; // 0x3c8(0x04)
	float LightSourceAngle; // 0x3cc(0x04)
	float LightSourceSoftAngle; // 0x3d0(0x04)
	float TraceDistance; // 0x3d4(0x04)
	Unknown LightmassSettings; // 0x3d8(0x10)
	Unknown bCastModulatedShadows; // 0x3e8(0x01)
	Unknown ModulatedShadowColor; // 0x3ec(0x04)
	float ShadowAmount; // 0x3f0(0x04)
	Unknown bUsedAsAtmosphereSunLight; // 0x3f4(0x01)
	int32_t AtmosphereSunLightIndex; // 0x3f8(0x04)
	Unknown bCanBeBaked; // 0x30(0x01)
	Unknown bBakedDataSuccesfully; // 0x30(0x01)
	float Constant; // 0x38(0x04)
	Unknown ConstantCurve; // 0x38(0x18)
	struct FName ParameterName; // 0x40(0x08)
	float MinInput; // 0x48(0x04)
	float MaxInput; // 0x4c(0x04)
	float MinOutput; // 0x50(0x04)
	float MaxOutput; // 0x54(0x04)
	Unknown ParamMode; // 0x58(0x01)
	float Min; // 0x38(0x04)
	float MAX; // 0x3c(0x04)
	Unknown ConstantCurve; // 0x38(0x18)
	Unknown bCanBeBaked; // 0x30(0x01)
	Unknown bIsDirty; // 0x30(0x01)
	Unknown bBakedDataSuccesfully; // 0x30(0x01)
	Unknown Constant; // 0x38(0x0c)
	Unknown bLockAxes; // 0x44(0x01)
	Unknown LockedAxes; // 0x48(0x01)
	Unknown ConstantCurve; // 0x38(0x18)
	Unknown bLockAxes; // 0x50(0x01)
	Unknown LockedAxes; // 0x54(0x01)
	struct FName ParameterName; // 0x50(0x08)
	Unknown MinInput; // 0x58(0x0c)
	Unknown MaxInput; // 0x64(0x0c)
	Unknown MinOutput; // 0x70(0x0c)
	Unknown MaxOutput; // 0x7c(0x0c)
	Unknown ParamModes; // 0x88(0x03)
	Unknown MAX; // 0x38(0x0c)
	Unknown Min; // 0x44(0x0c)
	Unknown bLockAxes; // 0x50(0x01)
	Unknown LockedAxes; // 0x54(0x01)
	Unknown MirrorFlags; // 0x55(0x03)
	Unknown bUseExtremes; // 0x58(0x01)
	Unknown ConstantCurve; // 0x38(0x18)
	Unknown bLockAxes1; // 0x50(0x01)
	Unknown bLockAxes2; // 0x50(0x01)
	Unknown LockedAxes; // 0x54(0x02)
	Unknown MirrorFlags; // 0x56(0x03)
	Unknown bUseExtremes; // 0x5c(0x01)
	Unknown FrustumColor; // 0x4b8(0x04)
	float FrustumAngle; // 0x4bc(0x04)
	float FrustumAspectRatio; // 0x4c0(0x04)
	float FrustumStartDist; // 0x4c4(0x04)
	float FrustumEndDist; // 0x4c8(0x04)
	Unknown Texture; // 0x4d0(0x08)
	float SphereRadius; // 0x4d0(0x04)
	Unknown Schema; // 0x28(0x08)
	Unknown Nodes; // 0x30(0x10)
	Unknown bEditable; // 0x40(0x01)
	Unknown bAllowDeletion; // 0x40(0x01)
	Unknown bAllowRenaming; // 0x40(0x01)
	Unknown Blueprint; // 0x28(0x08)
	Unknown Graph; // 0x30(0x08)
	Unknown Node; // 0x38(0x08)
	Unknown bIsDebugging; // 0x48(0x01)
	Unknown DeprecatedPins; // 0x38(0x10)
	int32_t NodePosX; // 0x48(0x04)
	int32_t NodePosY; // 0x4c(0x04)
	int32_t NodeWidth; // 0x50(0x04)
	int32_t NodeHeight; // 0x54(0x04)
	Unknown AdvancedPinDisplay; // 0x58(0x01)
	Unknown EnabledState; // 0x59(0x01)
	Unknown bDisplayAsDisabled; // 0x5b(0x01)
	Unknown bUserSetEnabledState; // 0x5b(0x01)
	Unknown bIsNodeEnabled; // 0x5b(0x01)
	Unknown bHasCompilerMessage; // 0x5b(0x01)
	struct FString NodeComment; // 0x60(0x10)
	int32_t ErrorType; // 0x70(0x04)
	struct FString ErrorMsg; // 0x78(0x10)
	Unknown NodeGuid; // 0x88(0x10)
	struct FString Link; // 0x98(0x10)
	struct FString Excerpt; // 0xa8(0x10)
	struct FString PinName; // 0x28(0x10)
	struct FString PinToolTip; // 0x38(0x10)
	Unknown Direction; // 0x48(0x01)
	Unknown PinType; // 0x50(0x58)
	struct FString DefaultValue; // 0xa8(0x10)
	struct FString AutogeneratedDefaultValue; // 0xb8(0x10)
	Unknown DefaultObject; // 0xc8(0x08)
	struct FText DefaultTextValue; // 0xd0(0x18)
	Unknown LinkedTo; // 0xe8(0x10)
	Unknown SubPins; // 0xf8(0x10)
	Unknown ParentPin; // 0x108(0x08)
	Unknown ReferencePassThroughConnection; // 0x110(0x08)
	Unknown ParticleSystemComponent; // 0x310(0x08)
	Unknown bDestroyOnSystemFinish; // 0x318(0x01)
	Unknown bPostUpdateTickGroup; // 0x318(0x01)
	Unknown bCurrentlyActive; // 0x318(0x01)
	struct FMulticastInlineDelegate OnParticleSpawn; // 0x320(0x10)
	struct FMulticastInlineDelegate OnParticleBurst; // 0x330(0x10)
	struct FMulticastInlineDelegate OnParticleDeath; // 0x340(0x10)
	struct FMulticastInlineDelegate OnParticleCollide; // 0x350(0x10)
	Unknown PS_CameraEffect; // 0x360(0x08)
	Unknown PS_CameraEffectNonExtremeContent; // 0x368(0x08)
	Unknown BaseCamera; // 0x370(0x08)
	Unknown RelativeTransform; // 0x380(0x30)
	float BaseFOV; // 0x3b0(0x04)
	Unknown bAllowMultipleInstances; // 0x3b4(0x01)
	Unknown bResetWhenRetriggered; // 0x3b4(0x01)
	Unknown EmittersToTreatAsSame; // 0x3b8(0x10)
	float DistFromCamera; // 0x3c8(0x04)
	struct FString FailedPlaceMessage; // 0x28(0x10)
	struct FString MaxedOutMessage; // 0x38(0x10)
	struct FString EnteredMessage; // 0x48(0x10)
	struct FString LeftMessage; // 0x58(0x10)
	struct FString GlobalNameChange; // 0x68(0x10)
	struct FString SpecEnteredMessage; // 0x78(0x10)
	struct FString NewPlayerMessage; // 0x88(0x10)
	struct FString NewSpecMessage; // 0x98(0x10)
	Unknown Component; // 0x310(0x08)
	Unknown bEnabled; // 0x318(0x01)
	float FogDensity; // 0x238(0x04)
	float FogHeightFalloff; // 0x23c(0x04)
	Unknown SecondFogData; // 0x240(0x0c)
	Unknown FogInscatteringColor; // 0x24c(0x10)
	Unknown InscatteringColorCubemap; // 0x260(0x08)
	float InscatteringColorCubemapAngle; // 0x268(0x04)
	Unknown InscatteringTextureTint; // 0x26c(0x10)
	float FullyDirectionalInscatteringColorDistance; // 0x27c(0x04)
	float NonDirectionalInscatteringColor; // 0x280(0x04)
	float DirectionalInscatteringExponent; // 0x284(0x04)
	float DirectionalInscatteringStartDistance; // 0x288(0x04)
	Unknown DirectionalInscatteringColor; // 0x28c(0x10)
	float FogMaxOpacity; // 0x29c(0x04)
	float StartDistance; // 0x2a0(0x04)
	float FogCutoffDistance; // 0x2a4(0x04)
	Unknown bEnableVolumetricFog; // 0x2a8(0x01)
	float VolumetricFogScatteringDistribution; // 0x2ac(0x04)
	Unknown VolumetricFogAlbedo; // 0x2b0(0x04)
	Unknown VolumetricFogEmissive; // 0x2b4(0x10)
	float VolumetricFogExtinctionScale; // 0x2c4(0x04)
	float VolumetricFogDistance; // 0x2c8(0x04)
	float VolumetricFogStaticLightingScatterinjan; // 0x2cc(0x04)
	Unknown bOverrideLightColorsWithFogInscatteringColors; // 0x2d0(0x01)
	float MaxSpeed; // 0x138(0x04)
	float Acceleration; // 0x13c(0x04)
	float Deceleration; // 0x140(0x04)
	float TurningBoost; // 0x144(0x04)
	Unknown bPositionCorrected; // 0x148(0x01)
	Unknown FontCacheType; // 0x30(0x01)
	Unknown Characters; // 0x38(0x10)
	Unknown Textures; // 0x48(0x10)
	int32_t IsRemapped; // 0x58(0x04)
	float EmScale; // 0x5c(0x04)
	float Ascent; // 0x60(0x04)
	float Descent; // 0x64(0x04)
	float Leading; // 0x68(0x04)
	int32_t Kerning; // 0x6c(0x04)
	Unknown ImportOptions; // 0x70(0xb0)
	int32_t NumCharacters; // 0x120(0x04)
	Unknown MaxCharHeight; // 0x128(0x10)
	float ScalingFactor; // 0x138(0x04)
	int32_t LegacyFontSize; // 0x13c(0x04)
	struct FName LegacyFontName; // 0x140(0x08)
	Unknown CompositeFont; // 0x148(0x38)
	struct FString SourceFilename; // 0x30(0x10)
	Unknown Hinting; // 0x40(0x01)
	Unknown LoadingPolicy; // 0x41(0x01)
	Unknown LayoutMethod; // 0x42(0x01)
	Unknown Data; // 0x28(0xb0)
	Unknown Attenuation; // 0x28(0xb0)
	Unknown ForceFeedbackEffect; // 0x238(0x08)
	Unknown bAutoDestroy; // 0x240(0x01)
	Unknown bStopWhenOwnerDestroyed; // 0x240(0x01)
	Unknown bLooping; // 0x240(0x01)
	Unknown bIgnoreTimeDilation; // 0x240(0x01)
	Unknown bOverrideAttenuation; // 0x240(0x01)
	float IntensityMultiplier; // 0x244(0x04)
	Unknown AttenuationSettings; // 0x248(0x08)
	Unknown AttenuationOverrides; // 0x250(0xb0)
	struct FMulticastInlineDelegate OnForceFeedbackFinished; // 0x300(0x10)
	Unknown ChannelDetails; // 0x28(0x10)
	float Duration; // 0x38(0x04)
	float BadPacketLossThreshold; // 0x310(0x04)
	float SeverePacketLossThreshold; // 0x314(0x04)
	int32_t BadPingThreshold; // 0x318(0x04)
	int32_t SeverePingThreshold; // 0x31c(0x04)
	int32_t AdjustedNetSpeed; // 0x320(0x04)
	float LastNetSpeedUpdateTime; // 0x324(0x04)
	int32_t TotalNetBandwidth; // 0x328(0x04)
	int32_t MinDynamicBandwidth; // 0x32c(0x04)
	int32_t MaxDynamicBandwidth; // 0x330(0x04)
	Unknown bIsStandbyCheckingEnabled; // 0x334(0x01)
	Unknown bHasStandbyCheatTriggered; // 0x334(0x01)
	float StandbyRxCheatTime; // 0x338(0x04)
	float StandbyTxCheatTime; // 0x33c(0x04)
	float PercentMissingForRxStandby; // 0x340(0x04)
	float PercentMissingForTxStandby; // 0x344(0x04)
	float PercentForBadPing; // 0x348(0x04)
	float JoinInProgressStandbyWaitTime; // 0x34c(0x04)
	float MoveRepSize; // 0x350(0x04)
	float MAXPOSITIONERRORSQUARED; // 0x354(0x04)
	float MAXNEARZEROVELOCITYSQUARED; // 0x358(0x04)
	float CLIENTADJUSTUPDATECOST; // 0x35c(0x04)
	float MAXCLIENTUPDATEINTERVAL; // 0x360(0x04)
	float MaxClientForcedUpdateDuration; // 0x364(0x04)
	float ServerForcedUpdateHitchThreshold; // 0x368(0x04)
	float ServerForcedUpdateHitchCooldown; // 0x36c(0x04)
	float MaxMoveDeltaTime; // 0x370(0x04)
	float MaxClientSmoothingDeltaTime; // 0x374(0x04)
	float ClientNetSendMoveDeltaTime; // 0x378(0x04)
	float ClientNetSendMoveDeltaTimeThrottled; // 0x37c(0x04)
	float ClientNetSendMoveDeltaTimeStationary; // 0x380(0x04)
	int32_t ClientNetSendMoveThrottleAtNetSpeed; // 0x384(0x04)
	int32_t ClientNetSendMoveThrottleOverPlayerCount; // 0x388(0x04)
	Unknown ClientAuthorativePosition; // 0x38c(0x01)
	float ClientErrorUpdateRateLimit; // 0x390(0x04)
	float ClientNetCamUpdateDeltaTime; // 0x394(0x04)
	float ClientNetCamUpdatePositionLimit; // 0x398(0x04)
	Unknown bMovementTimeDiscrepancyDetection; // 0x39c(0x01)
	Unknown bMovementTimeDiscrepancyResolution; // 0x39d(0x01)
	float MovementTimeDiscrepancyMaxTimeMargin; // 0x3a0(0x04)
	float MovementTimeDiscrepancyMinTimeMargin; // 0x3a4(0x04)
	float MovementTimeDiscrepancyResolutionRate; // 0x3a8(0x04)
	float MovementTimeDiscrepancyDriftAllowance; // 0x3ac(0x04)
	Unknown bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x3b0(0x01)
	Unknown bUseDistanceBasedRelevancy; // 0x3b1(0x01)
	Unknown SpotLightComponent; // 0x320(0x08)
	Unknown Amplitudes; // 0x28(0x10)
	int32_t SampleRate; // 0x38(0x04)
	Unknown HapticDetails; // 0x28(0x110)
	Unknown SoundWave; // 0x28(0x08)
	Unknown ProxyMeshes; // 0x28(0x10)
	Unknown bShouldPauseWhileAdOpen; // 0x38(0x01)
	Unknown ClickedBannerDelegates; // 0x40(0x10)
	Unknown ClosedAdDelegates; // 0x50(0x10)
	Unknown Records; // 0x28(0x10)
	Unknown UnnecessaryComponents; // 0x38(0x10)
	Unknown InputActionDelegateBindings; // 0x28(0x10)
	Unknown InputAxisDelegateBindings; // 0x28(0x10)
	Unknown InputAxisKeyDelegateBindings; // 0x28(0x10)
	Unknown CachedKeyToActionInfo; // 0x120(0x10)
	Unknown InputKeyDelegateBindings; // 0x28(0x10)
	Unknown AxisConfig; // 0x28(0x10)
	Unknown bAltEnterTogglesFullscreen; // 0x38(0x01)
	Unknown bF11TogglesFullscreen; // 0x38(0x01)
	Unknown bUseMouseForTouch; // 0x38(0x01)
	Unknown bEnableMouseSmoothing; // 0x38(0x01)
	Unknown bEnableFOVScaling; // 0x38(0x01)
	Unknown bCaptureMouseOnLaunch; // 0x38(0x01)
	Unknown bDefaultViewportMouseLock; // 0x38(0x01)
	Unknown bAlwaysShowTouchInterface; // 0x38(0x01)
	Unknown bShowConsoleOnFourFingerTap; // 0x39(0x01)
	Unknown bEnableGestureRecognizer; // 0x39(0x01)
	Unknown bUseAutocorrect; // 0x3a(0x01)
	Unknown ExcludedAutocorrectOS; // 0x40(0x10)
	Unknown ExcludedAutocorrectCultures; // 0x50(0x10)
	Unknown ExcludedAutocorrectDeviceModels; // 0x60(0x10)
	Unknown DefaultViewportMouseCaptureMode; // 0x70(0x01)
	Unknown DefaultViewportMouseLockMode; // 0x71(0x01)
	float FOVScale; // 0x74(0x04)
	float DoubleClickTime; // 0x78(0x04)
	Unknown ActionMappings; // 0x80(0x10)
	Unknown AxisMappings; // 0x90(0x10)
	Unknown SpeechMappings; // 0xa0(0x10)
	Unknown DefaultTouchInterface; // 0xb0(0x18)
	Unknown ConsoleKey; // 0xc8(0x18)
	Unknown ConsoleKeys; // 0xe0(0x10)
	Unknown InputTouchDelegateBindings; // 0x28(0x10)
	Unknown StaticMeshComponents; // 0xb0(0x10)
	Unknown StaticMeshComponent; // 0xd0(0x08)
	Unknown InstancedCollisionComponentMap; // 0x310(0x50)
	Unknown Tabs; // 0x28(0x10)
	int32_t ActiveTab; // 0x38(0x04)
	float InterpLength; // 0x28(0x04)
	float PathBuildTime; // 0x2c(0x04)
	Unknown InterpGroups; // 0x30(0x10)
	Unknown CurveEdSetup; // 0x40(0x08)
	float EdSectionStart; // 0x48(0x04)
	float EdSectionEnd; // 0x4c(0x04)
	Unknown bShouldBakeAndPrune; // 0x50(0x01)
	Unknown CachedDirectorGroup; // 0x58(0x08)
	Unknown AllEventNames; // 0x60(0x10)
	struct FString Caption; // 0x28(0x10)
	Unknown InterpTracks; // 0x30(0x10)
	struct FName GroupName; // 0x40(0x08)
	Unknown GroupColor; // 0x48(0x04)
	Unknown bCollapsed; // 0x4c(0x01)
	Unknown bVisible; // 0x4c(0x01)
	Unknown bIsFolder; // 0x4c(0x01)
	Unknown bIsParented; // 0x4c(0x01)
	Unknown bIsSelected; // 0x4c(0x01)
	Unknown CameraAnimInst; // 0x50(0x08)
	float CompressTolerance; // 0x58(0x04)
	Unknown Group; // 0x28(0x08)
	Unknown GroupActor; // 0x30(0x08)
	Unknown TrackInst; // 0x38(0x10)
	float Duration; // 0xf0(0x04)
	Unknown bPauseOnImpact; // 0xf4(0x01)
	Unknown bSweep; // 0xf8(0x01)
	Unknown TeleportType; // 0xf9(0x01)
	Unknown BehaviourType; // 0xfa(0x01)
	Unknown bCheckIfStillInWorld; // 0xfb(0x01)
	Unknown bForceSubStepping; // 0xfc(0x01)
	struct FMulticastInlineDelegate OnInterpToReverse; // 0x100(0x10)
	struct FMulticastInlineDelegate OnInterpToStop; // 0x110(0x10)
	struct FMulticastInlineDelegate OnWaitBeginDelegate; // 0x120(0x10)
	struct FMulticastInlineDelegate OnWaitEndDelegate; // 0x130(0x10)
	struct FMulticastInlineDelegate OnResetDelegate; // 0x140(0x10)
	float MaxSimulationTimeStep; // 0x150(0x04)
	int32_t MaxSimulationIterations; // 0x154(0x04)
	Unknown ControlPoints; // 0x158(0x10)
	struct FName SlotName; // 0x90(0x08)
	Unknown AnimSeqs; // 0x98(0x10)
	Unknown bSkipAnimNotifiers; // 0xa8(0x01)
	Unknown BoolTrack; // 0x70(0x10)
	struct FName PropertyName; // 0x80(0x08)
	struct FName PropertyName; // 0x90(0x08)
	Unknown CutTrack; // 0x70(0x10)
	Unknown bSimulateCameraCutsOnClients; // 0x80(0x01)
	Unknown EventTrack; // 0x70(0x10)
	Unknown bFireEventsWhenForwards; // 0x80(0x01)
	Unknown bFireEventsWhenBackwards; // 0x80(0x01)
	Unknown bFireEventsWhenJumpingForwards; // 0x80(0x01)
	Unknown bUseCustomEventName; // 0x80(0x01)
	Unknown bPersistFade; // 0x90(0x01)
	Unknown bFadeAudio; // 0x90(0x01)
	Unknown FadeColor; // 0x94(0x10)
	Unknown AnimBlueprintClass; // 0x90(0x08)
	Unknown AnimClass; // 0x98(0x08)
	struct FName ParamName; // 0xa0(0x08)
	Unknown TargetMaterials; // 0x90(0x10)
	struct FName ParamName; // 0xa0(0x08)
	struct FName ParamName; // 0x90(0x08)
	struct FName PropertyName; // 0x90(0x08)
	float LastUpdatePosition; // 0x28(0x04)
	Unknown InterpProperty; // 0x28(0x20)
	Unknown PropertyOuterObjectInst; // 0x48(0x08)
	Unknown ResetBool; // 0x60(0x01)
	Unknown ResetColor; // 0x58(0x04)
	Unknown OldViewTarget; // 0x28(0x08)
	float LastUpdatePosition; // 0x28(0x04)
	Unknown AnimScriptInstance; // 0x28(0x08)
	float ResetFloat; // 0x30(0x04)
	Unknown MaterialInstances; // 0x28(0x10)
	Unknown ResetFloats; // 0x38(0x10)
	Unknown PrimitiveMaterialRefs; // 0x48(0x10)
	Unknown InstancedTrack; // 0x58(0x08)
	float ResetFloat; // 0x28(0x04)
	float ResetFloat; // 0x58(0x04)
	Unknown ResetColor; // 0x58(0x10)
	Unknown ResetLocation; // 0x28(0x0c)
	Unknown ResetRotation; // 0x34(0x0c)
	float LastUpdatePosition; // 0x28(0x04)
	float OldTimeDilation; // 0x28(0x04)
	float LastUpdatePosition; // 0x28(0x04)
	Unknown PlayAudioComp; // 0x30(0x08)
	Unknown Action; // 0x28(0x01)
	float LastUpdatePosition; // 0x2c(0x04)
	Unknown bSavedActiveState; // 0x30(0x01)
	Unknown MaterialInstances; // 0x28(0x10)
	Unknown ResetVectors; // 0x38(0x10)
	Unknown PrimitiveMaterialRefs; // 0x48(0x10)
	Unknown InstancedTrack; // 0x58(0x08)
	Unknown ResetVector; // 0x58(0x0c)
	Unknown Action; // 0x28(0x01)
	float LastUpdatePosition; // 0x2c(0x04)
	Unknown LinearColorTrack; // 0x70(0x18)
	float CurveTension; // 0x88(0x04)
	struct FName PropertyName; // 0x90(0x08)
	Unknown PosTrack; // 0x70(0x18)
	Unknown EulerTrack; // 0x88(0x18)
	Unknown LookupTrack; // 0xa0(0x10)
	struct FName LookAtGroupName; // 0xb0(0x08)
	float LinCurveTension; // 0xb8(0x04)
	float AngCurveTension; // 0xbc(0x04)
	Unknown bUseQuatInterpolation; // 0xc0(0x01)
	Unknown bShowArrowAtKeys; // 0xc0(0x01)
	Unknown bDisableMovement; // 0xc0(0x01)
	Unknown bShowTranslationOnCurveEd; // 0xc0(0x01)
	Unknown bShowRotationOnCurv; // 0xc0(0x01)
	Unknown bHide3DTrack; // 0xc0(0x01)
	Unknown RotMode; // 0xc4(0x01)
	Unknown MoveAxis; // 0x90(0x01)
	Unknown LookupTrack; // 0x98(0x10)
	Unknown TrackKeys; // 0x70(0x10)
	Unknown Sounds; // 0x90(0x10)
	Unknown bPlayOnReverse; // 0xa0(0x01)
	Unknown bContinueSoundOnMatineeEnd; // 0xa0(0x01)
	Unknown bSuppressSubtitles; // 0xa0(0x01)
	Unknown bTreatAsDialogue; // 0xa0(0x01)
	Unknown bAttach; // 0xa0(0x01)
	Unknown ToggleTrack; // 0x70(0x10)
	Unknown bActivateSystemEachUpdate; // 0x80(0x01)
	Unknown bActivateWithJustAttachedFlag; // 0x80(0x01)
	Unknown bFireEventsWhenForwards; // 0x80(0x01)
	Unknown bFireEventsWhenBackwards; // 0x80(0x01)
	Unknown bFireEventsWhenJumpingForwards; // 0x80(0x01)
	Unknown TargetMaterials; // 0x90(0x10)
	struct FName ParamName; // 0xa0(0x08)
	struct FName PropertyName; // 0x90(0x08)
	Unknown VisibilityTrack; // 0x70(0x10)
	Unknown bFireEventsWhenForwards; // 0x80(0x01)
	Unknown bFireEventsWhenBackwards; // 0x80(0x01)
	Unknown bFireEventsWhenJumpingForwards; // 0x80(0x01)
	uint16_t UnsignedInt16Variable; // 0x28(0x02)
	uint32_t UnsignedInt32Variable; // 0x2c(0x04)
	uint64_t UnsignedInt64Variable; // 0x30(0x08)
	int8_t SignedInt8Variable; // 0x38(0x01)
	int16_t SignedInt16Variable; // 0x3a(0x02)
	int64_t SignedInt64Variable; // 0x40(0x08)
	Unknown UnsignedInt8Variable; // 0x48(0x01)
	int32_t SignedInt32Variable; // 0x4c(0x04)
	struct FName LayerName; // 0x28(0x08)
	Unknown bIsVisible; // 0x30(0x01)
	Unknown ActorStats; // 0x38(0x10)
	Unknown OwningWorld; // 0xb8(0x08)
	Unknown Model; // 0xc0(0x08)
	Unknown ModelComponents; // 0xc8(0x10)
	Unknown ActorCluster; // 0xd8(0x08)
	int32_t NumTextureStreamingUnbuiltComponents; // 0xe0(0x04)
	int32_t NumTextureStreamingDirtyResources; // 0xe4(0x04)
	Unknown LevelScriptActor; // 0xe8(0x08)
	Unknown NavListStart; // 0xf0(0x08)
	Unknown NavListEnd; // 0xf8(0x08)
	Unknown NavDataChunks; // 0x100(0x10)
	float LightmapTotalSize; // 0x110(0x04)
	float ShadowmapTotalSize; // 0x114(0x04)
	Unknown StaticNavigableGeometry; // 0x118(0x10)
	Unknown StreamingTextureGuids; // 0x128(0x10)
	Unknown LevelBuildDataId; // 0x1d0(0x10)
	Unknown MapBuildData; // 0x1e0(0x08)
	Unknown LightBuildLevelOffset; // 0x1e8(0x0c)
	Unknown bIsLightingScenario; // 0x1f4(0x01)
	Unknown bTextureStreamingRotationChanged; // 0x1f4(0x01)
	Unknown bStaticComponentsRegisteredInStreamingManager; // 0x1f4(0x01)
	Unknown bIsVisible; // 0x1f4(0x01)
	Unknown WorldSettings; // 0x240(0x08)
	Unknown AssetUserData; // 0x250(0x10)
	Unknown DestroyedReplicatedStaticActors; // 0x270(0x10)
	Unknown Actors; // 0x28(0x10)
	Unknown BoxComponent; // 0x310(0x08)
	Unknown bAutoUpdate; // 0x318(0x01)
	Unknown WorldAsset; // 0x28(0x28)
	struct FName PackageNameToLoad; // 0x50(0x08)
	Unknown LODPackageNames; // 0x58(0x10)
	Unknown LevelTransform; // 0x80(0x30)
	int32_t LevelLODIndex; // 0xb0(0x04)
	int32_t StreamingPriority; // 0xb4(0x04)
	Unknown bShouldBeVisible; // 0xc0(0x01)
	Unknown bShouldBeLoaded; // 0xc0(0x01)
	Unknown bLocked; // 0xc0(0x01)
	Unknown bIsStatic; // 0xc0(0x01)
	Unknown bShouldBlockOnLoad; // 0xc0(0x01)
	Unknown bShouldBlockOnUnload; // 0xc0(0x01)
	Unknown bDisableDistanceStreaming; // 0xc0(0x01)
	Unknown bDrawOnLevelStatusMap; // 0xc0(0x01)
	Unknown LevelColor; // 0xc4(0x10)
	Unknown EditorStreamingVolumes; // 0xd8(0x10)
	float MinTimeBetweenVolumeUnloadRequests; // 0xe8(0x04)
	struct FMulticastInlineDelegate OnLevelLoaded; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnLevelUnloaded; // 0x100(0x10)
	struct FMulticastInlineDelegate OnLevelShown; // 0x110(0x10)
	struct FMulticastInlineDelegate OnLevelHidden; // 0x120(0x10)
	Unknown LoadedLevel; // 0x130(0x08)
	Unknown PendingUnloadLevel; // 0x138(0x08)
	Unknown bInitiallyLoaded; // 0x158(0x01)
	Unknown bInitiallyVisible; // 0x158(0x01)
	Unknown StreamingLevelNames; // 0x348(0x10)
	Unknown bEditorPreVisOnly; // 0x358(0x01)
	Unknown bDisabled; // 0x358(0x01)
	Unknown StreamingUsage; // 0x35c(0x01)
	Unknown SourceModel; // 0x28(0x08)
	Unknown Surfaces; // 0x30(0x10)
	Unknown PortalComponent; // 0x310(0x08)
	Unknown PreviewBox; // 0x238(0x08)
	Unknown LightmassSettings; // 0x28(0x18)
	Unknown IntensityUnits; // 0x380(0x01)
	float Radius; // 0x384(0x04)
	float AttenuationRadius; // 0x388(0x04)
	Unknown LightmassSettings; // 0x38c(0x0c)
	Unknown StaticMeshComponent; // 0x310(0x08)
	Unknown ImpostersStaticMeshComponents; // 0x318(0x50)
	Unknown Proxy; // 0x368(0x08)
	struct FName Key; // 0x370(0x08)
	float LODDrawDistance; // 0x378(0x04)
	int32_t LODLevel; // 0x37c(0x04)
	Unknown SubActors; // 0x380(0x10)
	Unknown CachedNumHLODLevels; // 0x390(0x01)
	Unknown LevelLightingQuality; // 0x28(0x01)
	Unknown PhysMaterial; // 0x88(0x08)
	Unknown PhysMaterialMask; // 0x90(0x08)
	Unknown PhysicalMaterialMap; // 0x98(0x40)
	Unknown Metallic; // 0xd8(0x0c)
	Unknown Specular; // 0xec(0x0c)
	Unknown Anisotropy; // 0x100(0x0c)
	Unknown Normal; // 0x114(0x0c)
	Unknown Tangent; // 0x128(0x0c)
	Unknown EmissiveColor; // 0x13c(0x0c)
	Unknown MaterialDomain; // 0x150(0x01)
	Unknown BlendMode; // 0x151(0x01)
	Unknown DecalBlendMode; // 0x152(0x01)
	Unknown MaterialDecalResponse; // 0x153(0x01)
	Unknown ShadingModel; // 0x154(0x01)
	Unknown bCastDynamicShadowAsMasked; // 0x155(0x01)
	Unknown ShadingModels; // 0x156(0x02)
	float OpacityMaskClipValue; // 0x158(0x04)
	Unknown WorldPositionOffset; // 0x15c(0x0c)
	Unknown Refraction; // 0x170(0x0c)
	Unknown MaterialAttributes; // 0x184(0x10)
	Unknown PixelDepthOffset; // 0x19c(0x0c)
	Unknown ShadingModelFromMaterialExpression; // 0x1b0(0x0c)
	Unknown bEnableSeparateTranslucency; // 0x1c4(0x01)
	Unknown bEnableResponsiveAA; // 0x1c4(0x01)
	Unknown bEnableTranslucentVelocity; // 0x1c8(0x01)
	Unknown bScreenSpaceReflections; // 0x1cc(0x01)
	Unknown bContactShadows; // 0x1cc(0x01)
	Unknown TwoSided; // 0x1cc(0x01)
	Unknown DitheredLODTransition; // 0x1cc(0x01)
	Unknown DitherOpacityMask; // 0x1cc(0x01)
	Unknown bAllowNegativeEmissiveColor; // 0x1cc(0x01)
	Unknown TranslucencyLightingMode; // 0x1cd(0x01)
	Unknown bEnableMobileSeparateTranslucency; // 0x1ce(0x01)
	int32_t NumCustomizedUVs; // 0x1d0(0x04)
	float TranslucencyDirectionalLightingIntenj; // 0x1d4(0x04)
	float TranslucentShadowDensityScale; // 0x1d8(0x04)
	float TranslucentSelfShadowDensityScale; // 0x1dc(0x04)
	float TranslucentSelfShadowSecondDensityScale; // 0x1e0(0x04)
	float TranslucentSelfShadowSecondOpacity; // 0x1e4(0x04)
	float Translucent; // 0x1e8(0x04)
	Unknown TranslucentMultipleScatteringExtinction; // 0x1ec(0x10)
	float TranslucentShadowStartOffset; // 0x1fc(0x04)
	Unknown bDisableDepthTest; // 0x200(0x01)
	Unknown bWriteOnlyAlpha; // 0x200(0x01)
	Unknown bGenerateSphericalParticleNormals; // 0x200(0x01)
	Unknown bTangentSpaceNormal; // 0x200(0x01)
	Unknown bUseEmissiveForDynamicAreaLighting; // 0x200(0x01)
	Unknown bBlockGI; // 0x200(0x01)
	Unknown bUsedAsSpecialEngineMaterial; // 0x200(0x01)
	Unknown bUsedWithSkeletalMesh; // 0x200(0x01)
	Unknown bUsedWithEditorCompositing; // 0x201(0x01)
	Unknown bUsedWithParticleSprites; // 0x201(0x01)
	Unknown bUsedWithBeamTrails; // 0x201(0x01)
	Unknown bUsedWithMeshParticles; // 0x201(0x01)
	Unknown bUsedWithNiagaraSprites; // 0x201(0x01)
	Unknown bUsedWithNiagaraRibbons; // 0x201(0x01)
	Unknown bUsedWithNiagaraMeshParticles; // 0x201(0x01)
	Unknown bUsedWithGeometryCache; // 0x201(0x01)
	Unknown bUsedWithStaticLighting; // 0x202(0x01)
	Unknown bUsedWithMorphTargets; // 0x202(0x01)
	Unknown bUsedWithSplineMeshes; // 0x202(0x01)
	Unknown bUsedWithInstancedStaticMeshes; // 0x202(0x01)
	Unknown bUsedWithGeometryCollections; // 0x202(0x01)
	Unknown bUsesDistortion; // 0x202(0x01)
	Unknown bUsedWithClothing; // 0x202(0x01)
	Unknown bUsedWithWater; // 0x204(0x01)
	Unknown bUsedWithHairStrands; // 0x204(0x01)
	Unknown bUsedWithLidarPointCloud; // 0x204(0x01)
	Unknown bUsedWithUI; // 0x208(0x01)
	Unknown bAutomaticallySetUsageInEditor; // 0x208(0x01)
	Unknown bFullyRough; // 0x208(0x01)
	Unknown bUseFullPrecision; // 0x208(0x01)
	Unknown bUseLightmapDirectionality; // 0x208(0x01)
	Unknown bForwardRenderUsePreintegratedGFForSimpleIBL; // 0x20c(0x01)
	Unknown bUseHQForwardReflections; // 0x210(0x01)
	Unknown bUsePlanarForwardReflections; // 0x210(0x01)
	Unknown bNormalCurvatureToRoughness; // 0x210(0x01)
	Unknown D3D11TessellationMode; // 0x211(0x01)
	Unknown bEnableCrackFreeDisplacement; // 0x212(0x01)
	Unknown bEnableAdaptiveTessellation; // 0x212(0x01)
	Unknown AllowTranslucentCustomDepthWrites; // 0x212(0x01)
	Unknown Wireframe; // 0x212(0x01)
	Unknown bCanMaskedBeAssumedOpaque; // 0x212(0x01)
	Unknown bIsMasked; // 0x212(0x01)
	Unknown bIsPreviewMaterial; // 0x212(0x01)
	Unknown bIsFunctionPreviewMaterial; // 0x212(0x01)
	Unknown bUseMaterialAttributes; // 0x213(0x01)
	Unknown bCastRayTracedShadows; // 0x213(0x01)
	Unknown bUseTranslucencyVertexFog; // 0x213(0x01)
	Unknown bIsSky; // 0x213(0x01)
	Unknown bComputeFogPerPixel; // 0x213(0x01)
	Unknown bOutputTranslucentVelocity; // 0x213(0x01)
	Unknown bAllowDevelopmentShaderCompile; // 0x213(0x01)
	Unknown bIsMaterialEditorStatsMaterial; // 0x213(0x01)
	Unknown BlendableLocation; // 0x214(0x01)
	Unknown BlendableOutputAlpha; // 0x215(0x01)
	Unknown bEnableStencilTest; // 0x215(0x01)
	Unknown StencilCompare; // 0x216(0x01)
	Unknown StencilRefValue; // 0x217(0x01)
	Unknown RefractionMode; // 0x218(0x01)
	int32_t BlendablePriority; // 0x21c(0x04)
	Unknown bIsBlendable; // 0x220(0x01)
	uint32_t UsageFlagWarnings; // 0x224(0x04)
	float RefractionDepthBias; // 0x228(0x04)
	Unknown StateID; // 0x22c(0x10)
	float MaxDisplacement; // 0x23c(0x04)
	Unknown CachedExpressionData; // 0x2c8(0x228)
	Unknown Elements; // 0x4b8(0x10)
	Unknown Input; // 0x40(0x0c)
	Unknown A; // 0x40(0x0c)
	Unknown B; // 0x54(0x0c)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
	float threshold; // 0xf0(0x04)
	Unknown Channel; // 0xf4(0x01)
	Unknown A; // 0x40(0x0c)
	Unknown B; // 0x54(0x0c)
	Unknown Input; // 0x40(0x0c)
	Unknown Input; // 0x40(0x0c)
	Unknown Input; // 0x40(0x0c)
	Unknown Input; // 0x40(0x0c)
	Unknown Input; // 0x40(0x0c)
	Unknown Y; // 0x40(0x0c)
	Unknown X; // 0x54(0x0c)
	Unknown Y; // 0x40(0x0c)
	Unknown X; // 0x54(0x0c)
	Unknown Input; // 0x40(0x0c)
	Unknown WorldPosition; // 0x40(0x0c)
	Unknown Input; // 0x40(0x0c)
	Unknown Temp; // 0x40(0x0c)
	Unknown A; // 0x40(0x10)
	Unknown B; // 0x58(0x10)
	Unknown ALPHA; // 0x70(0x0c)
	Unknown PixelAttributeBlendType; // 0x84(0x01)
	Unknown VertexAttributeBlendType; // 0x85(0x01)
	Unknown MaterialAttributes; // 0x40(0x10)
	Unknown Coordinate; // 0x40(0x0c)
	Unknown Height; // 0x54(0x0c)
	Unknown HeightRatioInput; // 0x68(0x0c)
	float HeightRatio; // 0x7c(0x04)
	float ReferencePlane; // 0x80(0x04)
	uint32_t ConstCoordinate; // 0x84(0x04)
	Unknown Input; // 0x40(0x0c)
	struct FName ParameterName; // 0x40(0x08)
	Unknown ExpressionGUID; // 0x48(0x10)
	Unknown DefaultValue; // 0x58(0x10)
	Unknown bUseCustomPrimitiveData; // 0x68(0x01)
	Unknown PrimitiveDataIndex; // 0x69(0x01)
	Unknown MaskChannel; // 0x70(0x01)
	Unknown Input; // 0x74(0x0c)
	Unknown Input; // 0x40(0x0c)
	Unknown Min; // 0x54(0x0c)
	Unknown MAX; // 0x68(0x0c)
	Unknown ClampMode; // 0x7c(0x01)
	float MinDefault; // 0x80(0x04)
	float MaxDefault; // 0x84(0x04)
	Unknown Input; // 0x40(0x0c)
	Unknown Collection; // 0x40(0x08)
	struct FName ParameterName; // 0x48(0x08)
	Unknown ParameterId; // 0x50(0x10)
	int32_t SizeX; // 0x40(0x04)
	int32_t SizeY; // 0x44(0x04)
	struct FString Text; // 0x48(0x10)
	Unknown CommentColor; // 0x58(0x10)
	int32_t FontSize; // 0x68(0x04)
	Unknown Input; // 0x40(0x0c)
	Unknown R; // 0x54(0x01)
	Unknown G; // 0x54(0x01)
	Unknown B; // 0x54(0x01)
	Unknown A; // 0x54(0x01)
	float R; // 0x40(0x04)
	float R; // 0x40(0x04)
	float G; // 0x44(0x04)
	Unknown Constant; // 0x40(0x10)
	Unknown Constant; // 0x40(0x10)
	Unknown Input; // 0x40(0x0c)
	float Bias; // 0x54(0x04)
	float Scale; // 0x58(0x04)
	Unknown Input; // 0x40(0x0c)
	float Period; // 0x54(0x04)
	Unknown A; // 0x40(0x0c)
	Unknown B; // 0x54(0x0c)
	float DefaultValue; // 0x58(0x04)
	Unknown bUseCustomPrimitiveData; // 0x5c(0x01)
	Unknown PrimitiveDataIndex; // 0x5d(0x01)
	Unknown Curve; // 0x60(0x08)
	Unknown Atlas; // 0x68(0x08)
	Unknown InputTime; // 0x70(0x0c)
	struct FString Code; // 0x40(0x10)
	Unknown OutputType; // 0x50(0x01)
	struct FString Description; // 0x58(0x10)
	Unknown Inputs; // 0x68(0x10)
	Unknown AdditionalDefines; // 0x78(0x10)
	Unknown IncludeFilePaths; // 0x88(0x10)
	Unknown Value; // 0x40(0x0c)
	Unknown Value; // 0x40(0x0c)
	Unknown TextureSize; // 0x40(0x0c)
	float ConstWidth; // 0x54(0x04)
	float ConstHeight; // 0x58(0x04)
	Unknown InOpacity; // 0x40(0x0c)
	Unknown FadeDistance; // 0x54(0x0c)
	float OpacityDefault; // 0x68(0x04)
	float FadeDistanceDefault; // 0x6c(0x04)
	Unknown FunctionValue; // 0x40(0x01)
	Unknown Depth; // 0x44(0x0c)
	Unknown InXY; // 0x40(0x0c)
	Unknown Input; // 0x40(0x0c)
	Unknown Fraction; // 0x54(0x0c)
	Unknown LuminanceFactors; // 0x68(0x10)
	Unknown A; // 0x40(0x0c)
	Unknown B; // 0x54(0x0c)
	Unknown Position; // 0x40(0x0c)
	Unknown Position; // 0x40(0x0c)
	Unknown A; // 0x40(0x0c)
	Unknown B; // 0x54(0x0c)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
	Unknown A; // 0x40(0x0c)
	Unknown B; // 0x54(0x0c)
	Unknown ParamNames; // 0x40(0x10)
	Unknown DefaultValue; // 0x50(0x10)
	uint32_t ParameterIndex; // 0x60(0x04)
	Unknown Default; // 0x40(0x0c)
	Unknown Inputs; // 0x54(0x30)
	Unknown Input; // 0x40(0x0c)
	Unknown A; // 0x40(0x0c)
	Unknown B; // 0x54(0x0c)
	Unknown Font; // 0x40(0x08)
	int32_t FontTexturePage; // 0x48(0x04)
	struct FName ParameterName; // 0x50(0x08)
	Unknown ExpressionGUID; // 0x58(0x10)
	struct FName Group; // 0x68(0x08)
	Unknown Input; // 0x40(0x0c)
	Unknown ExponentIn; // 0x40(0x0c)
	float Exponent; // 0x54(0x04)
	Unknown BaseReflectFractionIn; // 0x58(0x0c)
	float BaseReflectFraction; // 0x6c(0x04)
	Unknown Normal; // 0x70(0x0c)
	Unknown Preview; // 0x40(0x0c)
	struct FName InputName; // 0x54(0x08)
	struct FString Description; // 0x60(0x10)
	Unknown ID; // 0x70(0x10)
	Unknown InputType; // 0x80(0x01)
	Unknown PreviewValue; // 0x90(0x10)
	Unknown bUsePreviewValueAsDefault; // 0xa0(0x01)
	int32_t SortPriority; // 0xa4(0x04)
	Unknown bCompilingFunctionPreview; // 0xa8(0x01)
	struct FName OutputName; // 0x40(0x08)
	struct FString Description; // 0x48(0x10)
	int32_t SortPriority; // 0x58(0x04)
	Unknown A; // 0x5c(0x0c)
	Unknown bLastPreviewed; // 0x70(0x01)
	Unknown ID; // 0x74(0x10)
	Unknown MaterialAttributes; // 0x40(0x10)
	Unknown AttributeGetTypes; // 0x58(0x10)
	Unknown Default; // 0x40(0x0c)
	Unknown StaticIndirect; // 0x54(0x0c)
	Unknown DynamicIndirect; // 0x68(0x0c)
	Unknown A; // 0x40(0x0c)
	Unknown B; // 0x54(0x0c)
	Unknown AGreaterThanB; // 0x68(0x0c)
	Unknown AEqualsB; // 0x7c(0x0c)
	Unknown ALessThanB; // 0x90(0x0c)
	float EqualsThreshold; // 0xa4(0x04)
	float ConstB; // 0xa8(0x04)
	float ConstAEqualsB; // 0xac(0x04)
	Unknown Realtime; // 0x40(0x0c)
	Unknown Lightmass; // 0x54(0x0c)
	Unknown A; // 0x40(0x0c)
	Unknown B; // 0x54(0x0c)
	Unknown ALPHA; // 0x68(0x0c)
	float ConstA; // 0x7c(0x04)
	float ConstB; // 0x80(0x04)
	float ConstAlpha; // 0x84(0x04)
	Unknown X; // 0x40(0x0c)
	Unknown X; // 0x40(0x0c)
	Unknown BaseColor; // 0x40(0x0c)
	Unknown Metallic; // 0x54(0x0c)
	Unknown Specular; // 0x68(0x0c)
	Unknown Roughness; // 0x7c(0x0c)
	Unknown Anisotropy; // 0x90(0x0c)
	Unknown EmissiveColor; // 0xa4(0x0c)
	Unknown Opacity; // 0xb8(0x0c)
	Unknown OpacityMask; // 0xcc(0x0c)
	Unknown Normal; // 0xe0(0x0c)
	Unknown Tangent; // 0xf4(0x0c)
	Unknown WorldPositionOffset; // 0x108(0x0c)
	Unknown WorldDisplacement; // 0x11c(0x0c)
	Unknown TessellationMultiplier; // 0x130(0x0c)
	Unknown SubsurfaceColor; // 0x144(0x0c)
	Unknown ClearCoat; // 0x158(0x0c)
	Unknown ClearCoatRoughness; // 0x16c(0x0c)
	Unknown AmbientOcclusion; // 0x180(0x0c)
	Unknown Refraction; // 0x194(0x0c)
	Unknown CustomizedUVs; // 0x1a8(0x60)
	Unknown PixelDepthOffset; // 0x248(0x0c)
	Unknown ShadingModel; // 0x25c(0x0c)
	Unknown Coordinates; // 0x40(0x0c)
	struct FName ParameterName; // 0x40(0x08)
	Unknown ExpressionGUID; // 0x48(0x10)
	Unknown Input; // 0x58(0x10)
	Unknown DefaultLayers; // 0x70(0x40)
	Unknown LayerCallers; // 0xb0(0x10)
	int32_t NumActiveLayerCallers; // 0xc0(0x04)
	Unknown BlendCallers; // 0xc8(0x10)
	int32_t NumActiveBlendCallers; // 0xd8(0x04)
	Unknown bIsLayerGraphBuilt; // 0xdc(0x01)
	Unknown MaterialFunction; // 0x40(0x08)
	Unknown FunctionParameterInfo; // 0x48(0x10)
	Unknown Realtime; // 0x40(0x0c)
	Unknown MaterialProxy; // 0x54(0x0c)
	Unknown A; // 0x40(0x0c)
	Unknown B; // 0x54(0x0c)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
	Unknown A; // 0x40(0x0c)
	Unknown B; // 0x54(0x0c)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
	Unknown A; // 0x40(0x0c)
	Unknown B; // 0x54(0x0c)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
	Unknown Position; // 0x40(0x0c)
	Unknown FilterWidth; // 0x54(0x0c)
	float Scale; // 0x68(0x04)
	int32_t Quality; // 0x6c(0x04)
	Unknown NoiseFunction; // 0x70(0x01)
	Unknown bTurbulence; // 0x74(0x01)
	int32_t Levels; // 0x78(0x04)
	float OutputMin; // 0x7c(0x04)
	float OutputMax; // 0x80(0x04)
	float LevelScale; // 0x84(0x04)
	Unknown bTiling; // 0x88(0x01)
	uint32_t RepeatSize; // 0x8c(0x04)
	Unknown VectorInput; // 0x40(0x0c)
	Unknown Input; // 0x40(0x0c)
	Unknown Coordinate; // 0x40(0x0c)
	Unknown Time; // 0x54(0x0c)
	Unknown Speed; // 0x68(0x0c)
	float SpeedX; // 0x7c(0x04)
	float SpeedY; // 0x80(0x04)
	uint32_t ConstCoordinate; // 0x84(0x04)
	Unknown bFractionalPart; // 0x88(0x01)
	Unknown bBlend; // 0xd0(0x01)
	Unknown DefaultValue; // 0x40(0x0c)
	float ConstDefaultValue; // 0x54(0x04)
	uint32_t DataIndex; // 0x58(0x04)
	Unknown Base; // 0x40(0x0c)
	Unknown Exponent; // 0x54(0x0c)
	float ConstExponent; // 0x68(0x04)
	Unknown CurrentFrame; // 0x40(0x0c)
	Unknown PreviousFrame; // 0x54(0x0c)
	Unknown Default; // 0x40(0x0c)
	Unknown Inputs; // 0x54(0x24)
	Unknown Normal; // 0x40(0x0c)
	Unknown RayTraced; // 0x54(0x0c)
	Unknown InputVector; // 0x40(0x0c)
	Unknown CustomWorldNormal; // 0x40(0x0c)
	Unknown bNormalizeCustomWorldNormal; // 0x54(0x01)
	Unknown Input; // 0x40(0x0c)
	Unknown NormalizedRotationAxis; // 0x40(0x0c)
	Unknown RotationAngle; // 0x54(0x0c)
	Unknown PivotPoint; // 0x68(0x0c)
	Unknown Position; // 0x7c(0x0c)
	float Period; // 0x90(0x04)
	Unknown Coordinate; // 0x40(0x0c)
	Unknown Time; // 0x54(0x0c)
	float CenterX; // 0x68(0x04)
	float CenterY; // 0x6c(0x04)
	float Speed; // 0x70(0x04)
	uint32_t ConstCoordinate; // 0x74(0x04)
	Unknown Input; // 0x40(0x0c)
	Unknown BaseColor; // 0x40(0x0c)
	Unknown Specular; // 0x54(0x0c)
	Unknown Roughness; // 0x68(0x0c)
	Unknown Normal; // 0x7c(0x0c)
	Unknown WorldHeight; // 0x90(0x0c)
	Unknown Opacity; // 0xa4(0x0c)
	Unknown Mask; // 0xb8(0x0c)
	Unknown Default; // 0x40(0x0c)
	Unknown VirtualTextureOutput; // 0x54(0x0c)
	Unknown Coordinates; // 0x40(0x0c)
	Unknown WorldPosition; // 0x54(0x0c)
	Unknown MipValue; // 0x68(0x0c)
	Unknown VirtualTexture; // 0x80(0x08)
	Unknown MaterialType; // 0x88(0x01)
	Unknown bSinglePhysicalSpace; // 0x89(0x01)
	Unknown MipValueMode; // 0x8a(0x01)
	struct FName ParameterName; // 0x90(0x08)
	Unknown ExpressionGUID; // 0x98(0x10)
	struct FName Group; // 0xa8(0x08)
	Unknown Input; // 0x40(0x0c)
	Unknown InputMode; // 0x40(0x01)
	Unknown Input; // 0x44(0x0c)
	Unknown OffsetFraction; // 0x58(0x0c)
	Unknown ConstInput; // 0x6c(0x08)
	Unknown InputMode; // 0x40(0x01)
	Unknown Input; // 0x44(0x0c)
	Unknown Coordinates; // 0x58(0x0c)
	Unknown ConstInput; // 0x6c(0x08)
	Unknown Coordinates; // 0x40(0x0c)
	Unknown SceneTextureId; // 0x54(0x01)
	Unknown bFiltered; // 0x55(0x01)
	Unknown Inputs; // 0x40(0x10)
	Unknown AttributeSetTypes; // 0x50(0x10)
	Unknown PixelShader; // 0x40(0x0c)
	Unknown VertexShader; // 0x54(0x0c)
	Unknown ShadingModel; // 0x40(0x01)
	Unknown Default; // 0x40(0x0c)
	Unknown Inputs; // 0x54(0x24)
	Unknown Default; // 0x40(0x0c)
	Unknown Shadow; // 0x54(0x0c)
	Unknown Input; // 0x40(0x0c)
	Unknown Input; // 0x40(0x0c)
	float Period; // 0x54(0x04)
	Unknown ScatteringCoefficients; // 0x40(0x0c)
	Unknown AbsorptionCoefficients; // 0x54(0x0c)
	Unknown PhaseG; // 0x68(0x0c)
	int32_t LightIndex; // 0x40(0x04)
	int32_t LightIndex; // 0x40(0x04)
	Unknown WorldPosition; // 0x44(0x0c)
	int32_t LightIndex; // 0x40(0x04)
	Unknown WorldPosition; // 0x40(0x0c)
	Unknown cell; // 0x40(0x0c)
	Unknown Index; // 0x54(0x0c)
	Unknown Seed; // 0x68(0x0c)
	uint32_t ConstIndex; // 0x7c(0x04)
	Unknown ConstSeed; // 0x80(0x08)
	Unknown GeometryInput; // 0x40(0x0c)
	Unknown WindInput; // 0x54(0x0c)
	Unknown LODInput; // 0x68(0x0c)
	Unknown ExtraBendWS; // 0x7c(0x0c)
	Unknown GeometryType; // 0x90(0x01)
	Unknown WindType; // 0x91(0x01)
	Unknown LODType; // 0x92(0x01)
	float BillboardThreshold; // 0x94(0x04)
	Unknown bAccurateWindVelocities; // 0x98(0x01)
	Unknown A; // 0x40(0x0c)
	Unknown B; // 0x54(0x0c)
	Unknown Radius; // 0x68(0x0c)
	Unknown Hardness; // 0x7c(0x0c)
	float AttenuationRadius; // 0x90(0x04)
	float HardnessPercent; // 0x94(0x04)
	Unknown Density; // 0x40(0x0c)
	float ConstantDensity; // 0x54(0x04)
	Unknown Input; // 0x40(0x0c)
	Unknown Value; // 0x40(0x01)
	Unknown DefaultValue; // 0x58(0x01)
	Unknown Input; // 0x58(0x0c)
	Unknown DefaultR; // 0x6c(0x01)
	Unknown DefaultG; // 0x6c(0x01)
	Unknown DefaultB; // 0x6c(0x01)
	Unknown DefaultA; // 0x6c(0x01)
	Unknown DefaultValue; // 0x40(0x01)
	Unknown A; // 0x44(0x0c)
	Unknown B; // 0x58(0x0c)
	Unknown Value; // 0x6c(0x0c)
	Unknown A; // 0x60(0x0c)
	Unknown B; // 0x74(0x0c)
	Unknown A; // 0x40(0x0c)
	Unknown B; // 0x54(0x0c)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
	Unknown Input; // 0x40(0x0c)
	float Period; // 0x54(0x04)
	Unknown Input; // 0x40(0x0c)
	Unknown Index; // 0x40(0x0c)
	Unknown Seed; // 0x54(0x0c)
	uint32_t ConstIndex; // 0x68(0x04)
	Unknown ConstSeed; // 0x6c(0x08)
	int32_t CoordinateIndex; // 0x40(0x04)
	float UTiling; // 0x44(0x04)
	float VTiling; // 0x48(0x04)
	Unknown UnMirrorU; // 0x4c(0x01)
	Unknown UnMirrorV; // 0x4c(0x01)
	Unknown TextureObject; // 0x40(0x0c)
	Unknown Property; // 0x54(0x01)
	Unknown bBlend; // 0xf0(0x01)
	Unknown TransmittanceColor; // 0x40(0x0c)
	Unknown bIgnorePause; // 0x40(0x01)
	Unknown bOverride_Period; // 0x40(0x01)
	float Period; // 0x44(0x04)
	Unknown Input; // 0x40(0x0c)
	Unknown TransformSourceType; // 0x54(0x01)
	Unknown TransformType; // 0x55(0x01)
	Unknown Input; // 0x40(0x0c)
	Unknown TransformSourceType; // 0x54(0x01)
	Unknown TransformType; // 0x55(0x01)
	Unknown Input; // 0x40(0x0c)
	Unknown Position; // 0x40(0x0c)
	Unknown NoiseFunction; // 0x54(0x01)
	int32_t Quality; // 0x58(0x04)
	Unknown bTiling; // 0x5c(0x01)
	uint32_t TileSize; // 0x60(0x04)
	Unknown Input; // 0x40(0x0c)
	Unknown Property; // 0x40(0x01)
	Unknown No; // 0x40(0x0c)
	Unknown Yes; // 0x54(0x0c)
	Unknown WorldPositionShaderOffset; // 0x40(0x01)
	Unknown StateID; // 0x28(0x10)
	Unknown MaterialFunctionUsage; // 0x38(0x01)
	struct FString Description; // 0x40(0x10)
	Unknown bExposeToLibrary; // 0x50(0x01)
	Unknown bPrefixParameterNames; // 0x50(0x01)
	Unknown bReentrantFlag; // 0x50(0x01)
	Unknown Parent; // 0x40(0x08)
	Unknown Base; // 0x48(0x08)
	Unknown ScalarParameterValues; // 0x50(0x10)
	Unknown VectorParameterValues; // 0x60(0x10)
	Unknown TextureParameterValues; // 0x70(0x10)
	Unknown FontParameterValues; // 0x80(0x10)
	Unknown StaticSwitchParameterValues; // 0x90(0x10)
	Unknown StaticComponentMaskParameterValues; // 0xa0(0x10)
	Unknown RuntimeVirtualTextureParameterValues; // 0xb0(0x10)
	Unknown TargetActors; // 0x310(0x10)
	Unknown StateID; // 0x28(0x10)
	Unknown ScalarParameters; // 0x38(0x10)
	Unknown VectorParameters; // 0x48(0x10)
	Unknown Collection; // 0x30(0x08)
	Unknown MatineeData; // 0x310(0x08)
	struct FName MatineeControllerName; // 0x318(0x08)
	float PlayRate; // 0x320(0x04)
	Unknown bPlayOnLevelLoad; // 0x324(0x01)
	Unknown bForceStartPos; // 0x324(0x01)
	float ForceStartPosition; // 0x328(0x04)
	Unknown bLooping; // 0x32c(0x01)
	Unknown bRewindOnPlay; // 0x32c(0x01)
	Unknown bNoResetOnRewind; // 0x32c(0x01)
	Unknown bRewindIfAlreadyPlaying; // 0x32c(0x01)
	Unknown bDisableRadioFilter; // 0x32c(0x01)
	Unknown bClientSideOnly; // 0x32c(0x01)
	Unknown bSkipUpdateIfNotVisible; // 0x32c(0x01)
	Unknown bIsSkippable; // 0x32c(0x01)
	int32_t PreferredSplitScreenNum; // 0x330(0x04)
	Unknown bDisableMovementInput; // 0x334(0x01)
	Unknown bDisableLookAtInput; // 0x334(0x01)
	Unknown bHidePlayer; // 0x334(0x01)
	Unknown bHideHud; // 0x334(0x01)
	Unknown GroupActorInfos; // 0x338(0x10)
	Unknown bShouldShowGore; // 0x348(0x01)
	Unknown GroupInst; // 0x350(0x10)
	Unknown CameraCuts; // 0x360(0x10)
	Unknown bIsPlaying; // 0x370(0x01)
	Unknown bReversePlayback; // 0x370(0x01)
	Unknown bPaused; // 0x370(0x01)
	Unknown bPendingStop; // 0x370(0x01)
	float InterpPosition; // 0x374(0x04)
	Unknown ReplicationForceIsPlaying; // 0x37c(0x01)
	struct FMulticastInlineDelegate OnPlay; // 0x380(0x10)
	struct FMulticastInlineDelegate OnStop; // 0x390(0x10)
	struct FMulticastInlineDelegate OnPause; // 0x3a0(0x10)
	Unknown CameraAnim; // 0x3b8(0x08)
	struct FName MeshReductionModuleName; // 0x38(0x08)
	Unknown AvailableProducts; // 0x38(0x10)
	struct FString LastError; // 0x48(0x10)
	struct FString LastErrorSolution; // 0x58(0x10)
	struct FMulticastInlineDelegate OnMK3DKillcamCompleteEvent; // 0xb0(0x10)
	Unknown MK3DKillEvents; // 0xd8(0x10)
	float KillcamBeforeSec; // 0xe8(0x04)
	float KillcamAfterSec; // 0xec(0x04)
	struct FMulticastInlineDelegate OnMK3DTargetcamCompleteEvent; // 0xb0(0x10)
	Unknown MK3DTargetEvents; // 0xd8(0x10)
	Unknown PendingNetObjectsHolder; // 0x2f0(0x10)
	Unknown DataVersion; // 0x30(0x01)
	float Time; // 0x34(0x04)
	Unknown ModelBodySetup; // 0x4d0(0x08)
	Unknown BaseSkelMesh; // 0x28(0x08)
	Unknown bIsDynamicObstacle; // 0x28(0x01)
	struct FName NavigationDataName; // 0x28(0x08)
	Unknown NavigationSystemClass; // 0x28(0x18)
	Unknown SupportedAgentsMask; // 0x40(0x04)
	struct FName DefaultAgentName; // 0x44(0x08)
	Unknown bIsOverriden; // 0x4c(0x01)
	Unknown LINKS; // 0x28(0x10)
	Unknown SegmentLinks; // 0x38(0x10)
	Unknown bVerifyPeer; // 0x38(0x01)
	Unknown bEnableMultiplayerWorldOriginRebasin; // 0x38(0x01)
	int32_t MaxRepArraySize; // 0x3c(0x04)
	int32_t MaxRepArrayMemory; // 0x40(0x04)
	Unknown NetworkEmulationProfiles; // 0x48(0x10)
	Unknown SourceItems; // 0x28(0x50)
	Unknown TargetItems; // 0x78(0x50)
	Unknown SourceToTarget; // 0xc8(0x50)
	Unknown SourceAsset; // 0x118(0x28)
	Unknown TargetAsset; // 0x140(0x28)
	Unknown ObjectBaseClass; // 0x28(0x08)
	Unknown bHasBlueprintClasses; // 0x30(0x01)
	Unknown Objects; // 0x38(0x10)
	Unknown WeakObjects; // 0x48(0x10)
	Unknown bUseWeakReferences; // 0x58(0x01)
	Unknown bIsFullyLoaded; // 0x59(0x01)
	Unknown ReferencedObjects; // 0x28(0x10)
	Unknown bPainCausing; // 0x358(0x01)
	float DamagePerSec; // 0x35c(0x04)
	Unknown DamageType; // 0x360(0x08)
	float PainInterval; // 0x368(0x04)
	Unknown bEntryPain; // 0x36c(0x01)
	Unknown BACKUP_bPainCausing; // 0x36c(0x01)
	Unknown DamageInstigator; // 0x370(0x08)
	struct FName EmitterName; // 0x28(0x08)
	int32_t SubUVDataOffset; // 0x30(0x04)
	Unknown EmitterRenderMode; // 0x34(0x01)
	Unknown SignificanceLevel; // 0x35(0x01)
	Unknown bUseLegacySpawningBehavior; // 0x37(0x01)
	Unknown ConvertedModules; // 0x37(0x01)
	Unknown bIsSoloing; // 0x37(0x01)
	Unknown bCookedOut; // 0x37(0x01)
	Unknown bDisabledLODsKeepEmitterAlive; // 0x37(0x01)
	Unknown bDisableWhenInsignficant; // 0x38(0x01)
	Unknown LODLevels; // 0x40(0x10)
	int32_t PeakActiveParticles; // 0x50(0x04)
	int32_t InitialAllocationCount; // 0x54(0x04)
	float QualityLevelSpawnRateScale; // 0x58(0x04)
	uint32_t DetailModeBitmask; // 0x5c(0x04)
	int32_t Level; // 0x28(0x04)
	Unknown bEnabled; // 0x2c(0x01)
	Unknown RequiredModule; // 0x30(0x08)
	Unknown Modules; // 0x38(0x10)
	Unknown TypeDataModule; // 0x48(0x08)
	Unknown SpawnModule; // 0x50(0x08)
	Unknown EventGenerator; // 0x58(0x08)
	Unknown SpawningModules; // 0x60(0x10)
	Unknown SpawnModules; // 0x70(0x10)
	Unknown UpdateModules; // 0x80(0x10)
	Unknown OrbitModules; // 0x90(0x10)
	Unknown EventReceiverModules; // 0xa0(0x10)
	Unknown ConvertedModules; // 0xb0(0x01)
	int32_t PeakActiveParticles; // 0xb4(0x04)
	Unknown bSpawnModule; // 0x28(0x01)
	Unknown bUpdateModule; // 0x28(0x01)
	Unknown bFinalUpdateModule; // 0x28(0x01)
	Unknown bUpdateForGPUEmitter; // 0x28(0x01)
	Unknown bCurvesAsColor; // 0x28(0x01)
	Unknown b3DDrawMode; // 0x28(0x01)
	Unknown bSupported3DDrawMode; // 0x28(0x01)
	Unknown bEnabled; // 0x28(0x01)
	Unknown bEditable; // 0x29(0x01)
	Unknown LODDuplicate; // 0x29(0x01)
	Unknown bSupportsRandomSeed; // 0x29(0x01)
	Unknown bRequiresLoopingNotification; // 0x29(0x01)
	Unknown LODValidity; // 0x2a(0x01)
	Unknown bAlwaysInWorldSpace; // 0x30(0x01)
	Unknown Acceleration; // 0x38(0x48)
	Unknown bApplyOwnerScale; // 0x80(0x01)
	Unknown Acceleration; // 0x38(0x0c)
	Unknown DragCoefficient; // 0x38(0x08)
	Unknown DragCoefficientRaw; // 0x40(0x30)
	Unknown DragScale; // 0x38(0x08)
	Unknown DragScaleRaw; // 0x40(0x30)
	Unknown AccelOverLife; // 0x38(0x48)
	Unknown EndPoint0; // 0x30(0x0c)
	Unknown EndPoint1; // 0x3c(0x0c)
	Unknown Range; // 0x48(0x30)
	Unknown Strength; // 0x78(0x30)
	struct FName EmitterName; // 0x30(0x08)
	Unknown Range; // 0x38(0x30)
	Unknown bStrengthByDistance; // 0x68(0x01)
	Unknown Strength; // 0x70(0x30)
	Unknown bAffectBaseVelocity; // 0xa0(0x01)
	Unknown SelectionMethod; // 0xa4(0x01)
	Unknown bRenewSource; // 0xa8(0x01)
	Unknown bInheritSourceVel; // 0xa8(0x01)
	int32_t LastSelIndex; // 0xac(0x04)
	Unknown Position; // 0x30(0x48)
	Unknown Range; // 0x78(0x30)
	Unknown Strength; // 0xa8(0x30)
	Unknown StrengthByDistance; // 0xd8(0x01)
	Unknown bAffectBaseVelocity; // 0xd8(0x01)
	Unknown bOverrideVelocity; // 0xd8(0x01)
	Unknown bUseWorldSpacePosition; // 0xd8(0x01)
	Unknown Positive_X; // 0xd8(0x01)
	Unknown Positive_Y; // 0xd8(0x01)
	Unknown Positive_Z; // 0xd8(0x01)
	Unknown Negative_X; // 0xd8(0x01)
	Unknown Negative_Y; // 0xd9(0x01)
	Unknown Negative_Z; // 0xd9(0x01)
	Unknown Position; // 0x30(0x0c)
	float Radius; // 0x3c(0x04)
	Unknown Strength; // 0x40(0x08)
	Unknown StrengthRaw; // 0x48(0x30)
	Unknown ModifierType; // 0x30(0x01)
	Unknown PositionOptions; // 0x34(0x04)
	Unknown Position; // 0x38(0x48)
	Unknown TangentOptions; // 0x80(0x04)
	Unknown Tangent; // 0x88(0x48)
	Unknown bAbsoluteTangent; // 0xd0(0x01)
	Unknown StrengthOptions; // 0xd4(0x04)
	Unknown Strength; // 0xd8(0x30)
	Unknown bLowFreq_Enabled; // 0x30(0x01)
	int32_t Frequency; // 0x34(0x04)
	int32_t Frequency_LowRange; // 0x38(0x04)
	Unknown NoiseRange; // 0x40(0x48)
	Unknown NoiseRangeScale; // 0x88(0x30)
	Unknown bNRScaleEmitterTime; // 0xb8(0x01)
	Unknown NoiseSpeed; // 0xc0(0x48)
	Unknown bSmooth; // 0x108(0x01)
	float NoiseLockRadius; // 0x10c(0x04)
	Unknown bNoiseLock; // 0x110(0x01)
	Unknown bOscillate; // 0x110(0x01)
	float NoiseLockTime; // 0x114(0x04)
	float NoiseTension; // 0x118(0x04)
	Unknown bUseNoiseTangents; // 0x11c(0x01)
	Unknown NoiseTangentStrength; // 0x120(0x30)
	int32_t NoiseTessellation; // 0x150(0x04)
	Unknown bTargetNoise; // 0x154(0x01)
	float FrequencyDistance; // 0x158(0x04)
	Unknown bApplyNoiseScale; // 0x15c(0x01)
	Unknown NoiseScale; // 0x160(0x30)
	Unknown SourceMethod; // 0x30(0x01)
	struct FName SourceName; // 0x34(0x08)
	Unknown bSourceAbsolute; // 0x3c(0x01)
	Unknown Source; // 0x40(0x48)
	Unknown bLockSource; // 0x88(0x01)
	Unknown SourceTangentMethod; // 0x8c(0x01)
	Unknown SourceTangent; // 0x90(0x48)
	Unknown bLockSourceTangent; // 0xd8(0x01)
	Unknown SourceStrength; // 0xe0(0x30)
	Unknown bLockSourceStength; // 0x110(0x01)
	Unknown TargetMethod; // 0x30(0x01)
	struct FName TargetName; // 0x34(0x08)
	Unknown Target; // 0x40(0x48)
	Unknown bTargetAbsolute; // 0x88(0x01)
	Unknown bLockTarget; // 0x88(0x01)
	Unknown TargetTangentMethod; // 0x8c(0x01)
	Unknown TargetTangent; // 0x90(0x48)
	Unknown bLockTargetTangent; // 0xd8(0x01)
	Unknown TargetStrength; // 0xe0(0x30)
	Unknown bLockTargetStength; // 0x110(0x01)
	float LockRadius; // 0x114(0x04)
	Unknown CameraOffset; // 0x30(0x30)
	Unknown bSpawnTimeOnly; // 0x60(0x01)
	Unknown UpdateMethod; // 0x64(0x01)
	Unknown DampingFactor; // 0x30(0x48)
	Unknown DampingFactorRotation; // 0x78(0x48)
	Unknown MaxCollisions; // 0xc0(0x30)
	Unknown CollisionCompletionOption; // 0xf0(0x01)
	Unknown CollisionTypes; // 0xf8(0x10)
	Unknown bApplyPhysics; // 0x110(0x01)
	Unknown bIgnoreTriggerVolumes; // 0x110(0x01)
	Unknown ParticleMass; // 0x118(0x30)
	float DirScalar; // 0x148(0x04)
	Unknown bPawnsDoNotDecrementCount; // 0x14c(0x01)
	Unknown bOnlyVerticalNormalsDecrementCount; // 0x14c(0x01)
	float VerticalFudgeFactor; // 0x150(0x04)
	Unknown DelayAmount; // 0x158(0x30)
	Unknown bDropDetail; // 0x188(0x01)
	Unknown bCollideOnlyIfVisible; // 0x188(0x01)
	Unknown bIgnoreSourceActor; // 0x188(0x01)
	float MaxCollisionDistance; // 0x18c(0x04)
	Unknown Resilience; // 0x30(0x30)
	Unknown ResilienceScaleOverLife; // 0x60(0x30)
	float Friction; // 0x90(0x04)
	float RandomSpread; // 0x94(0x04)
	float RandomDistribution; // 0x98(0x04)
	float RadiusScale; // 0x9c(0x04)
	float RadiusBias; // 0xa0(0x04)
	Unknown Response; // 0xa4(0x01)
	Unknown CollisionMode; // 0xa5(0x01)
	Unknown StartColor; // 0x30(0x48)
	Unknown StartAlpha; // 0x78(0x30)
	Unknown bClampAlpha; // 0xa8(0x01)
	Unknown RandomSeedInfo; // 0xb0(0x20)
	Unknown ColorOverLife; // 0x30(0x48)
	Unknown AlphaOverLife; // 0x78(0x30)
	Unknown bClampAlpha; // 0xa8(0x01)
	Unknown ColorScaleOverLife; // 0x30(0x48)
	Unknown AlphaScaleOverLife; // 0x78(0x30)
	Unknown bEmitterTime; // 0xa8(0x01)
	Unknown Events; // 0x30(0x10)
	Unknown EventGeneratorType; // 0x30(0x01)
	struct FName EventName; // 0x34(0x08)
	Unknown bStopSpawning; // 0x40(0x01)
	Unknown SpawnCount; // 0x40(0x30)
	Unknown bUseParticleTime; // 0x70(0x01)
	Unknown bUsePSysLocation; // 0x70(0x01)
	Unknown bInheritVelocity; // 0x70(0x01)
	Unknown InheritVelocityScale; // 0x78(0x48)
	Unknown PhysicalMaterials; // 0xc0(0x10)
	Unknown bBanPhysicalMaterials; // 0xd0(0x01)
	Unknown LowerLeftCorner; // 0x30(0x48)
	Unknown UpperRightCorner; // 0x78(0x48)
	Unknown bAbsolute; // 0xc0(0x01)
	Unknown bKillInside; // 0xc0(0x01)
	Unknown bAxisAlignedAndFixedSize; // 0xc0(0x01)
	Unknown Height; // 0x30(0x30)
	Unknown bAbsolute; // 0x60(0x01)
	Unknown bFloor; // 0x60(0x01)
	Unknown bApplyPSysScale; // 0x60(0x01)
	Unknown LifeTime; // 0x30(0x30)
	Unknown RandomSeedInfo; // 0x60(0x20)
	Unknown bUseInverseSquaredFalloff; // 0x30(0x01)
	Unknown bAffectsTranslucency; // 0x31(0x01)
	Unknown bPreviewLightRadius; // 0x32(0x01)
	float SpawnFraction; // 0x34(0x04)
	Unknown ColorScaleOverLife; // 0x38(0x48)
	Unknown BrightnessOverLife; // 0x80(0x30)
	Unknown RadiusScale; // 0xb0(0x30)
	Unknown LightExponent; // 0xe0(0x30)
	Unknown LightingChannels; // 0x110(0x01)
	float VolumetricScatteringIntensity; // 0x114(0x04)
	Unknown bHighQualityLights; // 0x118(0x01)
	Unknown bShadowCastingLights; // 0x119(0x01)
	Unknown RandomSeedInfo; // 0x120(0x20)
	Unknown StartLocation; // 0x30(0x48)
	float DistributeOverNPoints; // 0x78(0x04)
	float DistributeThreshold; // 0x7c(0x04)
	Unknown RandomSeedInfo; // 0x80(0x20)
	Unknown SourceType; // 0x30(0x01)
	Unknown UniversalOffset; // 0x34(0x0c)
	Unknown SourceLocations; // 0x40(0x10)
	Unknown SelectionMethod; // 0x50(0x01)
	Unknown bUpdatePositionEachFrame; // 0x54(0x01)
	Unknown bOrientMeshEmitters; // 0x54(0x01)
	Unknown bInheritBoneVelocity; // 0x54(0x01)
	float InheritVelocityScale; // 0x58(0x04)
	struct FName SkelMeshActorParamName; // 0x5c(0x08)
	int32_t NumPreSelectedIndices; // 0x64(0x04)
	Unknown Location; // 0x30(0x48)
	Unknown LocationOffset; // 0x78(0x48)
	Unknown ScaleFactor; // 0xc0(0x48)
	Unknown Direction; // 0x108(0x48)
	struct FName EmitterName; // 0x30(0x08)
	Unknown SelectionMethod; // 0x38(0x01)
	Unknown InheritSourceVelocity; // 0x3c(0x01)
	float InheritSourceVelocityScale; // 0x40(0x04)
	Unknown bInheritSourceRotation; // 0x44(0x01)
	float InheritSourceRotationScale; // 0x48(0x04)
	struct FName EmitterName; // 0x30(0x08)
	Unknown Positive_X; // 0x30(0x01)
	Unknown Positive_Y; // 0x30(0x01)
	Unknown Positive_Z; // 0x30(0x01)
	Unknown Negative_X; // 0x30(0x01)
	Unknown Negative_Y; // 0x30(0x01)
	Unknown Negative_Z; // 0x30(0x01)
	Unknown SurfaceOnly; // 0x30(0x01)
	Unknown Velocity; // 0x30(0x01)
	Unknown VelocityScale; // 0x38(0x30)
	Unknown StartLocation; // 0x68(0x48)
	Unknown RadialVelocity; // 0xb0(0x01)
	Unknown StartRadius; // 0xb8(0x30)
	Unknown StartHeight; // 0xe8(0x30)
	Unknown HeightAxis; // 0x118(0x01)
	Unknown RandomSeedInfo; // 0x120(0x20)
	Unknown StartRadius; // 0xb0(0x30)
	Unknown RandomSeedInfo; // 0xe0(0x20)
	Unknown StartOffset; // 0x30(0x48)
	Unknown Height; // 0x78(0x30)
	Unknown Angle; // 0xa8(0x30)
	Unknown Thickness; // 0xd8(0x30)
	Unknown SourceType; // 0x30(0x01)
	Unknown UniversalOffset; // 0x34(0x0c)
	Unknown bUpdatePositionEachFrame; // 0x40(0x01)
	Unknown bOrientMeshEmitters; // 0x40(0x01)
	Unknown bInheritBoneVelocity; // 0x40(0x01)
	float InheritVelocityScale; // 0x44(0x04)
	struct FName SkelMeshActorParamName; // 0x48(0x08)
	Unknown ValidAssociatedBones; // 0x50(0x10)
	Unknown bEnforceNormalCheck; // 0x60(0x01)
	Unknown NormalToCompare; // 0x64(0x0c)
	float NormalCheckToleranceDegrees; // 0x70(0x04)
	float NormalCheckTolerance; // 0x74(0x04)
	Unknown ValidMaterialIndices; // 0x78(0x10)
	Unknown bInheritVertexColor; // 0x88(0x01)
	Unknown bInheritUV; // 0x88(0x01)
	uint32_t InheritUVChannel; // 0x8c(0x04)
	Unknown RandomSeedInfo; // 0x80(0x20)
	Unknown MeshMaterials; // 0x30(0x10)
	Unknown StartRotation; // 0x30(0x48)
	Unknown bInheritParent; // 0x78(0x01)
	Unknown RandomSeedInfo; // 0x80(0x20)
	Unknown StartRotationRate; // 0x30(0x48)
	Unknown RandomSeedInfo; // 0x78(0x20)
	Unknown LifeMultiplier; // 0x30(0x48)
	Unknown RotRate; // 0x30(0x48)
	Unknown bScaleRotRate; // 0x78(0x01)
	Unknown bUseEmitterTime; // 0x30(0x01)
	Unknown ChainMode; // 0x38(0x01)
	Unknown OffsetAmount; // 0x40(0x48)
	Unknown OffsetOptions; // 0x88(0x04)
	Unknown RotationAmount; // 0x90(0x48)
	Unknown RotationOptions; // 0xd8(0x04)
	Unknown RotationRateAmount; // 0xe0(0x48)
	Unknown RotationRateOptions; // 0x128(0x04)
	Unknown LockAxisFlags; // 0x30(0x01)
	Unknown DynamicParams; // 0x30(0x10)
	int32_t UpdateFlags; // 0x40(0x04)
	Unknown bUsesVelocity; // 0x44(0x01)
	Unknown RandomSeedInfo; // 0x48(0x20)
	Unknown PivotOffset; // 0x30(0x08)
	Unknown Material; // 0x30(0x08)
	float MinFacingCameraBlendDistance; // 0x38(0x04)
	float MaxFacingCameraBlendDistance; // 0x3c(0x04)
	Unknown EmitterOrigin; // 0x40(0x0c)
	Unknown EmitterRotation; // 0x4c(0x0c)
	Unknown ScreenAlignment; // 0x58(0x01)
	Unknown bUseLocalSpace; // 0x59(0x01)
	Unknown bKillOnDeactivate; // 0x59(0x01)
	Unknown bKillOnCompleted; // 0x59(0x01)
	Unknown SortMode; // 0x5a(0x01)
	Unknown bUseLegacyEmitterTime; // 0x5b(0x01)
	Unknown bRemoveHMDRoll; // 0x5b(0x01)
	Unknown bEmitterDurationUseRange; // 0x5b(0x01)
	float EmitterDuration; // 0x5c(0x04)
	Unknown SpawnRate; // 0x60(0x30)
	Unknown BurstList; // 0x90(0x10)
	float EmitterDelay; // 0xa0(0x04)
	float EmitterDelayLow; // 0xa4(0x04)
	Unknown bDelayFirstLoopOnly; // 0xa8(0x01)
	Unknown InterpolationMethod; // 0xa9(0x01)
	Unknown bScaleUV; // 0xaa(0x01)
	Unknown bEmitterDelayUseRange; // 0xaa(0x01)
	Unknown ParticleBurstMethod; // 0xab(0x01)
	Unknown bOverrideSystemMacroUV; // 0xac(0x01)
	Unknown bUseMaxDrawCount; // 0xac(0x01)
	Unknown OpacitySourceMode; // 0xad(0x01)
	Unknown EmitterNormalsMode; // 0xae(0x01)
	Unknown bOrbitModuleAffectsVelocityAlignment; // 0xaf(0x01)
	int32_t SubImages_Horizontal; // 0xb0(0x04)
	int32_t SubImages_Vertical; // 0xb4(0x04)
	float RandomImageTime; // 0xb8(0x04)
	int32_t RandomImageChanges; // 0xbc(0x04)
	Unknown MacroUVPosition; // 0xc0(0x0c)
	float MacroUVRadius; // 0xcc(0x04)
	Unknown UVFlippingMode; // 0xd0(0x01)
	Unknown BoundingMode; // 0xd1(0x01)
	Unknown bDurationRecalcEachLoop; // 0xd2(0x01)
	Unknown NormalsSphereCenter; // 0xd4(0x0c)
	float AlphaThreshold; // 0xe0(0x04)
	int32_t EmitterLoops; // 0xe4(0x04)
	Unknown CutoutTexture; // 0xe8(0x08)
	int32_t MaxDrawCount; // 0xf0(0x04)
	float EmitterDurationLow; // 0xf4(0x04)
	Unknown NormalsCylinderDirection; // 0xf8(0x0c)
	Unknown NamedMaterialOverrides; // 0x108(0x10)
	Unknown StartRotation; // 0x30(0x30)
	Unknown RandomSeedInfo; // 0x60(0x20)
	Unknown RotationOverLife; // 0x30(0x30)
	Unknown Scale; // 0x60(0x01)
	Unknown StartRotationRate; // 0x30(0x30)
	Unknown RandomSeedInfo; // 0x60(0x20)
	Unknown LifeMultiplier; // 0x30(0x30)
	Unknown StartSize; // 0x30(0x48)
	Unknown RandomSeedInfo; // 0x78(0x20)
	Unknown LifeMultiplier; // 0x30(0x48)
	Unknown MultiplyX; // 0x78(0x01)
	Unknown MultiplyY; // 0x78(0x01)
	Unknown MultiplyZ; // 0x78(0x01)
	Unknown SizeScale; // 0x30(0x48)
	Unknown EnableX; // 0x78(0x01)
	Unknown EnableY; // 0x78(0x01)
	Unknown EnableZ; // 0x78(0x01)
	Unknown SpeedScale; // 0x30(0x08)
	Unknown MaxScale; // 0x38(0x08)
	Unknown SourceMovementScale; // 0x30(0x48)
	Unknown bProcessSpawnRate; // 0x30(0x01)
	Unknown bProcessBurstList; // 0x30(0x01)
	Unknown Rate; // 0x38(0x30)
	Unknown RateScale; // 0x68(0x30)
	Unknown ParticleBurstMethod; // 0x98(0x01)
	Unknown BurstList; // 0xa0(0x10)
	Unknown BurstScale; // 0xb0(0x30)
	Unknown bApplyGlobalSpawnRateScale; // 0xe0(0x01)
	float UnitScalar; // 0x38(0x04)
	float MovementTolerance; // 0x3c(0x04)
	Unknown SpawnPerUnit; // 0x40(0x30)
	float MaxFrameDistance; // 0x70(0x04)
	Unknown bIgnoreSpawnRateWhenMoving; // 0x74(0x01)
	Unknown bIgnoreMovementAlongX; // 0x74(0x01)
	Unknown bIgnoreMovementAlongY; // 0x74(0x01)
	Unknown bIgnoreMovementAlongZ; // 0x74(0x01)
	Unknown Animation; // 0x30(0x08)
	Unknown SubImageIndex; // 0x38(0x30)
	Unknown bUseRealTime; // 0x68(0x01)
	Unknown bUseEmitterTime; // 0x70(0x01)
	Unknown FrameRate; // 0x78(0x30)
	int32_t StartingFrame; // 0xa8(0x04)
	Unknown SourceMethod; // 0x30(0x01)
	struct FName SourceName; // 0x34(0x08)
	Unknown SourceStrength; // 0x40(0x30)
	Unknown bLockSourceStength; // 0x70(0x01)
	int32_t SourceOffsetCount; // 0x74(0x04)
	Unknown SourceOffsetDefaults; // 0x78(0x10)
	Unknown SelectionMethod; // 0x88(0x01)
	Unknown bInheritRotation; // 0x8c(0x01)
	Unknown bDeadTrailsOnDeactivate; // 0x30(0x01)
	Unknown bEnablePreviousTangentRecalculation; // 0x30(0x01)
	Unknown bTangentRecalculationEveryFrame; // 0x30(0x01)
	float TilingDistance; // 0x34(0x04)
	float DistanceTessellationStepSize; // 0x38(0x04)
	float TangentTessellationStepSize; // 0x3c(0x04)
	float WidthTessellationStepSize; // 0x40(0x04)
	Unknown BeamMethod; // 0x30(0x01)
	int32_t TextureTile; // 0x34(0x04)
	float TextureTileDistance; // 0x38(0x04)
	int32_t Sheets; // 0x3c(0x04)
	int32_t MaxBeamCount; // 0x40(0x04)
	float Speed; // 0x44(0x04)
	int32_t InterpolationPoints; // 0x48(0x04)
	Unknown bAlwaysOn; // 0x4c(0x01)
	int32_t UpVectorStepSize; // 0x50(0x04)
	struct FName BranchParentName; // 0x54(0x08)
	Unknown Distance; // 0x60(0x30)
	Unknown TaperMethod; // 0x90(0x01)
	Unknown TaperFactor; // 0x98(0x30)
	Unknown TaperScale; // 0xc8(0x30)
	Unknown RenderGeometry; // 0xf8(0x01)
	Unknown RenderDirectLine; // 0xf8(0x01)
	Unknown RenderLines; // 0xf8(0x01)
	Unknown RenderTessellation; // 0xf8(0x01)
	Unknown EmitterInfo; // 0x30(0x280)
	Unknown ResourceData; // 0x2b0(0x160)
	float CameraMotionBlurAmount; // 0x410(0x04)
	Unknown bClearExistingParticlesOnInit; // 0x414(0x01)
	Unknown Mesh; // 0x30(0x08)
	float LODSizeScale; // 0x40(0x04)
	Unknown bUseStaticMeshLODs; // 0x44(0x01)
	Unknown CastShadows; // 0x44(0x01)
	Unknown DoCollisions; // 0x44(0x01)
	Unknown MeshAlignment; // 0x45(0x01)
	Unknown bOverrideMaterial; // 0x46(0x01)
	Unknown bOverrideDefaultMotionBlurSettings; // 0x46(0x01)
	Unknown bEnableMotionBlur; // 0x46(0x01)
	Unknown RollPitchYawRange; // 0x48(0x48)
	Unknown AxisLockOption; // 0x90(0x01)
	Unknown bCameraFacing; // 0x91(0x01)
	Unknown CameraFacingUpAxisOption; // 0x92(0x01)
	Unknown CameraFacingOption; // 0x93(0x01)
	Unknown bApplyParticleRotationAsSpin; // 0x94(0x01)
	Unknown bFaceCameraDirectionRatherThanPosition; // 0x94(0x01)
	Unknown bCollisionsConsiderPartilceSize; // 0x94(0x01)
	int32_t MaxTessellationBetweenParticles; // 0x30(0x04)
	int32_t SheetsPerTrail; // 0x34(0x04)
	int32_t MaxTrailCount; // 0x38(0x04)
	int32_t MaxParticleInTrailCount; // 0x3c(0x04)
	Unknown bDeadTrailsOnDeactivate; // 0x40(0x01)
	Unknown bDeadTrailsOnSourceLoss; // 0x40(0x01)
	Unknown bClipSourceSegement; // 0x40(0x01)
	Unknown bEnablePreviousTangentRecalculation; // 0x40(0x01)
	Unknown bTangentRecalculationEveryFrame; // 0x40(0x01)
	Unknown bSpawnInitialParticle; // 0x40(0x01)
	Unknown RenderAxis; // 0x44(0x01)
	float TangentSpawningScalar; // 0x48(0x04)
	Unknown bRenderGeometry; // 0x4c(0x01)
	Unknown bRenderSpawnPoints; // 0x4c(0x01)
	Unknown bRenderTangents; // 0x4c(0x01)
	Unknown bRenderTessellation; // 0x4c(0x01)
	float TilingDistance; // 0x50(0x04)
	float DistanceTessellationStepSize; // 0x54(0x04)
	Unknown bEnableTangentDiffInterpScale; // 0x58(0x01)
	float TangentTessellationScalar; // 0x5c(0x04)
	Unknown bOverrideGlobalVectorFieldTightness; // 0x30(0x01)
	float GlobalVectorFieldScale; // 0x34(0x04)
	float GlobalVectorFieldTightness; // 0x38(0x04)
	Unknown VectorField; // 0x30(0x08)
	Unknown RelativeTranslation; // 0x38(0x0c)
	Unknown RelativeRotation; // 0x44(0x0c)
	Unknown RelativeScale3D; // 0x50(0x0c)
	float Intensity; // 0x5c(0x04)
	float Tightness; // 0x60(0x04)
	Unknown bIgnoreComponentTransform; // 0x64(0x01)
	Unknown bTileX; // 0x64(0x01)
	Unknown bTileY; // 0x64(0x01)
	Unknown bTileZ; // 0x64(0x01)
	Unknown bUseFixDT; // 0x64(0x01)
	Unknown MinInitialRotation; // 0x30(0x0c)
	Unknown MaxInitialRotation; // 0x3c(0x0c)
	Unknown RotationRate; // 0x30(0x0c)
	Unknown VectorFieldScale; // 0x30(0x08)
	Unknown VectorFieldScaleRaw; // 0x38(0x30)
	Unknown VectorFieldScaleOverLife; // 0x30(0x08)
	Unknown VectorFieldScaleOverLifeRaw; // 0x38(0x30)
	Unknown bInWorldSpace; // 0x30(0x01)
	Unknown bApplyOwnerScale; // 0x30(0x01)
	Unknown StartVelocity; // 0x38(0x48)
	Unknown StartVelocityRadial; // 0x80(0x30)
	Unknown RandomSeedInfo; // 0xb0(0x20)
	Unknown Angle; // 0x38(0x30)
	Unknown Velocity; // 0x68(0x30)
	Unknown Direction; // 0x98(0x0c)
	Unknown Scale; // 0x38(0x48)
	Unknown VelOverLife; // 0x38(0x48)
	Unknown Absolute; // 0x80(0x01)
	float UpdateTime_FPS; // 0x30(0x04)
	float UpdateTime_Delta; // 0x34(0x04)
	float WarmupTime; // 0x38(0x04)
	float WarmupTickRate; // 0x3c(0x04)
	Unknown Emitters; // 0x40(0x10)
	Unknown PreviewComponent; // 0x50(0x08)
	Unknown CurveEdSetup; // 0x58(0x08)
	float LODDistanceCheckTime; // 0x60(0x04)
	float MacroUVRadius; // 0x64(0x04)
	Unknown LODDistances; // 0x68(0x10)
	Unknown LODSettings; // 0x78(0x10)
	Unknown FixedRelativeBoundingBox; // 0x88(0x1c)
	float SecondsBeforeInactive; // 0xa4(0x04)
	float Delay; // 0xa8(0x04)
	float DelayLow; // 0xac(0x04)
	Unknown bOrientZAxisTowardCamera; // 0xb0(0x01)
	Unknown bUseFixedRelativeBoundingBox; // 0xb0(0x01)
	Unknown bShouldResetPeakCounts; // 0xb0(0x01)
	Unknown bHasPhysics; // 0xb0(0x01)
	Unknown bUseRealtimeThumbnail; // 0xb0(0x01)
	Unknown ThumbnailImageOutOfDate; // 0xb0(0x01)
	Unknown bUseDelayRange; // 0xb1(0x01)
	Unknown bAllowManagedTicking; // 0xb1(0x01)
	Unknown bAutoDeactivate; // 0xb1(0x01)
	Unknown bRegenerateLODDuplicate; // 0xb1(0x01)
	Unknown SystemUpdateMode; // 0xb2(0x01)
	Unknown LODMethod; // 0xb3(0x01)
	Unknown InsignificantReaction; // 0xb4(0x01)
	Unknown OcclusionBoundsMethod; // 0xb5(0x01)
	Unknown MaxSignificanceLevel; // 0xb7(0x01)
	uint32_t MinTimeBetweenTicks; // 0xb8(0x04)
	float InsignificanceDelay; // 0xbc(0x04)
	Unknown MacroUVPosition; // 0xc0(0x0c)
	Unknown CustomOcclusionBounds; // 0xcc(0x1c)
	Unknown SoloTracking; // 0xe8(0x10)
	Unknown NamedMaterialSlots; // 0xf8(0x10)
	Unknown Template; // 0x4b8(0x08)
	Unknown EmitterMaterials; // 0x4c0(0x10)
	Unknown SkelMeshComponents; // 0x4d0(0x10)
	Unknown bResetOnDetach; // 0x4e1(0x01)
	Unknown bUpdateOnDedicatedServer; // 0x4e1(0x01)
	Unknown bAllowRecycling; // 0x4e1(0x01)
	Unknown bAutoManageAttachment; // 0x4e1(0x01)
	Unknown bAutoAttachWeldSimulatedBodies; // 0x4e1(0x01)
	Unknown bWarmingUp; // 0x4e2(0x01)
	Unknown bOverrideLODMethod; // 0x4e2(0x01)
	Unknown bSkipUpdateDynamicDataDuringTick; // 0x4e2(0x01)
	Unknown LODMethod; // 0x4ed(0x01)
	Unknown RequiredSignificance; // 0x4ee(0x01)
	Unknown InstanceParameters; // 0x4f0(0x10)
	struct FMulticastInlineDelegate OnParticleSpawn; // 0x500(0x10)
	struct FMulticastInlineDelegate OnParticleBurst; // 0x510(0x10)
	struct FMulticastInlineDelegate OnParticleDeath; // 0x520(0x10)
	struct FMulticastInlineDelegate OnParticleCollide; // 0x530(0x10)
	Unknown bOldPositionValid; // 0x540(0x01)
	Unknown OldPosition; // 0x544(0x0c)
	Unknown PartSysVelocity; // 0x550(0x0c)
	float WarmupTime; // 0x55c(0x04)
	float WarmupTickRate; // 0x560(0x04)
	float SecondsBeforeInactive; // 0x578(0x04)
	float MaxTimeBeforeForceUpdateTransform; // 0x580(0x04)
	Unknown ReplayClips; // 0x5a0(0x10)
	float CustomTimeDilation; // 0x5b8(0x04)
	Unknown AutoAttachParent; // 0x610(0x08)
	struct FName AutoAttachSocketName; // 0x618(0x08)
	Unknown AutoAttachLocationRule; // 0x620(0x01)
	Unknown AutoAttachRotationRule; // 0x621(0x01)
	Unknown AutoAttachScaleRule; // 0x622(0x01)
	struct FMulticastInlineDelegate OnSystemFinished; // 0x650(0x10)
	int32_t ClipIDNumber; // 0x28(0x04)
	Unknown bAIPerceptionSystemCompatibilityMode; // 0xb0(0x01)
	Unknown LastRemoteNoisePosition; // 0xb4(0x0c)
	float NoiseLifetime; // 0xc0(0x04)
	float LastRemoteNoiseVolume; // 0xc4(0x04)
	float LastRemoteNoiseTime; // 0xc8(0x04)
	float LastLocalNoiseVolume; // 0xcc(0x04)
	float LastLocalNoiseTime; // 0xd0(0x04)
	float StrengthMultiplyer; // 0xb0(0x04)
	Unknown SkeletalMeshComponent; // 0xb8(0x08)
	int32_t UVChannelIndex; // 0x28(0x04)
	Unknown AddressX; // 0x2c(0x01)
	Unknown AddressY; // 0x2d(0x01)
	Unknown BoundsBodies; // 0x30(0x10)
	Unknown SkeletalBodySetups; // 0x40(0x10)
	Unknown ConstraintSetup; // 0x50(0x10)
	Unknown SolverIterations; // 0x60(0x18)
	Unknown bNotForDedicatedServer; // 0x78(0x01)
	Unknown ThumbnailInfo; // 0x120(0x08)
	Unknown BodySetup; // 0x128(0x10)
	Unknown bSkipScaleFromAnimation; // 0x2d0(0x01)
	Unknown PhysicalAnimationData; // 0x2d8(0x10)
	float ImpactThreshold; // 0x28(0x04)
	float ImpactReFireDelay; // 0x2c(0x04)
	Unknown DefaultImpactSound; // 0x30(0x08)
	float LastImpactSoundTime; // 0x38(0x04)
	Unknown ConstraintComp; // 0x310(0x08)
	Unknown ConstraintActor1; // 0x318(0x08)
	Unknown ConstraintActor2; // 0x320(0x08)
	Unknown bDisableCollision; // 0x328(0x01)
	Unknown ConstraintActor1; // 0x238(0x08)
	Unknown ComponentName1; // 0x240(0x08)
	Unknown ConstraintActor2; // 0x248(0x08)
	Unknown ComponentName2; // 0x250(0x08)
	Unknown ConstraintSetup; // 0x268(0x08)
	struct FMulticastInlineDelegate OnConstraintBroken; // 0x270(0x10)
	Unknown ConstraintInstance; // 0x280(0x1b8)
	Unknown DefaultInstance; // 0x28(0x1b8)
	Unknown ProfileHandles; // 0x1e0(0x10)
	Unknown DefaultProfile; // 0x1f0(0x104)
	Unknown GrabbedComponent; // 0xb0(0x08)
	Unknown bSoftAngularConstraint; // 0xc0(0x01)
	Unknown bSoftLinearConstraint; // 0xc0(0x01)
	Unknown bInterpolateTarget; // 0xc0(0x01)
	float LinearDamping; // 0xc4(0x04)
	float LinearStiffness; // 0xc8(0x04)
	float AngularDamping; // 0xcc(0x04)
	float AngularStiffness; // 0xd0(0x04)
	float InterpolationSpeed; // 0x140(0x04)
	float DefaultGravityZ; // 0x38(0x04)
	float DefaultTerminalVelocity; // 0x3c(0x04)
	float DefaultFluidFriction; // 0x40(0x04)
	int32_t SimulateScratchMemorySize; // 0x44(0x04)
	int32_t RagdollAggregateThreshold; // 0x48(0x04)
	float TriangleMeshTriangleMinAreaThreshold; // 0x4c(0x04)
	Unknown bEnableShapeSharing; // 0x50(0x01)
	Unknown bEnablePCM; // 0x51(0x01)
	Unknown bEnableStabilization; // 0x52(0x01)
	Unknown bWarnMissingLocks; // 0x53(0x01)
	Unknown bEnable2DPhysics; // 0x54(0x01)
	Unknown PhysicErrorCorrection; // 0x58(0x34)
	Unknown LockedAxis; // 0x8c(0x01)
	Unknown DefaultDegreesOfFreedom; // 0x8d(0x01)
	float BounceThresholdVelocity; // 0x90(0x04)
	Unknown FrictionCombineMode; // 0x94(0x01)
	Unknown RestitutionCombineMode; // 0x95(0x01)
	float MaxAngularVelocity; // 0x98(0x04)
	float MaxDepenetrationVelocity; // 0x9c(0x04)
	float ContactOffsetMultiplier; // 0xa0(0x04)
	float MinContactOffset; // 0xa4(0x04)
	float MaxContactOffset; // 0xa8(0x04)
	Unknown bSimulateSkeletalMeshOnDedicatedServer; // 0xac(0x01)
	Unknown DefaultShapeComplexity; // 0xad(0x01)
	Unknown bDefaultHasComplexCollision; // 0xae(0x01)
	Unknown bSuppressFaceRemapTable; // 0xaf(0x01)
	Unknown bSupportUVFromHitResults; // 0xb0(0x01)
	Unknown bDisableActiveActors; // 0xb1(0x01)
	Unknown bDisableKinematicStaticPairs; // 0xb2(0x01)
	Unknown bDisableKinematicKinematicPairs; // 0xb3(0x01)
	Unknown bDisableCCD; // 0xb4(0x01)
	Unknown bEnableEnhancedDeterminism; // 0xb5(0x01)
	float AnimPhysicsMinDeltaTime; // 0xb8(0x04)
	Unknown bSimulateAnimPhysicsAfterReset; // 0xbc(0x01)
	float MaxPhysicsDeltaTime; // 0xc0(0x04)
	Unknown bSubstepping; // 0xc4(0x01)
	Unknown bSubsteppingAsync; // 0xc5(0x01)
	float MaxSubstepDeltaTime; // 0xc8(0x04)
	int32_t MaxSubsteps; // 0xcc(0x04)
	float SyncSceneSmoothingFactor; // 0xd0(0x04)
	float InitialAverageFrameRate; // 0xd4(0x04)
	int32_t PhysXTreeRebuildRate; // 0xd8(0x04)
	Unknown PhysicalSurfaces; // 0xe0(0x10)
	Unknown DefaultBroadphaseSettings; // 0xf0(0x40)
	Unknown ChaosSettings; // 0x130(0x03)
	float SpringStiffness; // 0x238(0x04)
	float SpringDamping; // 0x23c(0x04)
	float SpringLengthAtRest; // 0x240(0x04)
	float SpringRadius; // 0x244(0x04)
	Unknown SpringChannel; // 0x248(0x01)
	Unknown bIgnoreSelf; // 0x249(0x01)
	float SpringCompression; // 0x24c(0x04)
	Unknown ThrusterComponent; // 0x310(0x08)
	float ThrustStrength; // 0x238(0x04)
	Unknown PlanarReflectionComponent; // 0x320(0x08)
	Unknown bShowPreviewPlane; // 0x328(0x01)
	Unknown PreviewBox; // 0x2d0(0x08)
	float NormalDistortionStrength; // 0x2d8(0x04)
	float PrefilterRoughness; // 0x2dc(0x04)
	float PrefilterRoughnessDistance; // 0x2e0(0x04)
	int32_t ScreenPercentage; // 0x2e4(0x04)
	float ExtraFOV; // 0x2e8(0x04)
	float DistanceFromPlaneFadeStart; // 0x2ec(0x04)
	float DistanceFromPlaneFadeEnd; // 0x2f0(0x04)
	float DistanceFromPlaneFadeoutStart; // 0x2f4(0x04)
	float DistanceFromPlaneFadeoutEnd; // 0x2f8(0x04)
	float AngleFromPlaneFadeStart; // 0x2fc(0x04)
	float AngleFromPlaneFadeEnd; // 0x300(0x04)
	Unknown bShowPreviewPlane; // 0x304(0x01)
	Unknown bRenderSceneTwoSided; // 0x305(0x01)
	float InfluenceRadiusScale; // 0x2c0(0x04)
	Unknown PreviewInfluenceRadius; // 0x2c8(0x08)
	Unknown PreviewCaptureBox; // 0x2d0(0x08)
	struct FMulticastInlineDelegate PlatformChangedToLaptopModeDelegate; // 0xb0(0x10)
	struct FMulticastInlineDelegate PlatformChangedToTabletModeDelegate; // 0xc0(0x10)
	struct FString OriginalURL; // 0x28(0x10)
	int32_t responsecode; // 0x38(0x04)
	int32_t Tag; // 0x3c(0x04)
	struct FString StringResponse; // 0x40(0x10)
	Unknown BinaryResponse; // 0x50(0x10)
	Unknown DebugExecBindings; // 0x120(0x10)
	Unknown InvertedAxis; // 0x160(0x10)
	Unknown PointLightComponent; // 0x320(0x08)
	Unknown bUseInverseSquaredFalloff; // 0x398(0x01)
	float LightFalloffExponent; // 0x39c(0x04)
	float SourceRadius; // 0x3a0(0x04)
	float SoftSourceRadius; // 0x3a4(0x04)
	float SourceLength; // 0x3a8(0x04)
	Unknown PoseContainer; // 0x80(0x90)
	Unknown bAdditivePose; // 0x110(0x01)
	int32_t BasePoseIndex; // 0x114(0x04)
	struct FName RetargetSource; // 0x118(0x08)
	Unknown Node; // 0x28(0x08)
	Unknown PoseWatchColour; // 0x30(0x04)
	Unknown Settings; // 0x240(0x5c0)
	float Priority; // 0x800(0x04)
	float BlendRadius; // 0x804(0x04)
	float BlendWeight; // 0x808(0x04)
	Unknown bEnabled; // 0x80c(0x01)
	Unknown bUnbound; // 0x80c(0x01)
	Unknown Settings; // 0x350(0x5c0)
	float Priority; // 0x910(0x04)
	float BlendRadius; // 0x914(0x04)
	float BlendWeight; // 0x918(0x04)
	Unknown bEnabled; // 0x91c(0x01)
	Unknown bUnbound; // 0x91c(0x01)
	Unknown OverrideVisibleActors; // 0x348(0x10)
	Unknown OverrideInvisibleActors; // 0x358(0x10)
	Unknown OverrideInvisibleLevels; // 0x368(0x10)
	Unknown Skeleton; // 0x38(0x08)
	Unknown SkeletalMeshes; // 0x40(0x10)
	Unknown Rules; // 0x30(0x0c)
	Unknown bLabelAssetsInMyDirectory; // 0x3c(0x01)
	Unknown bIsRuntimeLabel; // 0x3c(0x01)
	Unknown ExplicitAssets; // 0x40(0x10)
	Unknown ExplicitBlueprints; // 0x50(0x10)
	Unknown AssetCollection; // 0x60(0x08)
	struct FName ProxyLODMeshReductionModuleName; // 0x38(0x08)
	Unknown ForceComponent; // 0x310(0x08)
	float Radius; // 0x238(0x04)
	Unknown Falloff; // 0x23c(0x01)
	float ImpulseStrength; // 0x240(0x04)
	Unknown bImpulseVelChange; // 0x244(0x01)
	Unknown bIgnoreOwningActor; // 0x244(0x01)
	float ForceStrength; // 0x248(0x04)
	float DestructibleDamage; // 0x24c(0x04)
	Unknown ObjectTypesToAffect; // 0x250(0x10)
	Unknown RectLightComponent; // 0x320(0x08)
	float SourceWidth; // 0x398(0x04)
	float SourceHeight; // 0x39c(0x04)
	float BarnDoorAngle; // 0x3a0(0x04)
	float BarnDoorLength; // 0x3a4(0x04)
	Unknown SourceTexture; // 0x3a8(0x08)
	Unknown bMobileDisableVertexFog; // 0x38(0x01)
	int32_t MaxMobileCascades; // 0x3c(0x04)
	Unknown MobileMSAASampleCount; // 0x40(0x01)
	Unknown bMobileUseLegacyShadingModel; // 0x44(0x01)
	Unknown bMobileAllowDitheredLODTransition; // 0x44(0x01)
	Unknown bMobileAllowSoftwareOcclusionCulling; // 0x44(0x01)
	Unknown bMobileVirtualTextures; // 0x44(0x01)
	Unknown bDiscardUnusedQualityLevels; // 0x44(0x01)
	Unknown bOcclusionCulling; // 0x44(0x01)
	float MinScreenRadiusForLights; // 0x48(0x04)
	float MinScreenRadiusForEarlyZPass; // 0x4c(0x04)
	float MinScreenRadiusForCSMdepth; // 0x50(0x04)
	Unknown bPrecomputedVisibilityWarning; // 0x54(0x01)
	Unknown bUseCullDistanceVolumes; // 0x54(0x01)
	Unknown bTextureStreaming; // 0x54(0x01)
	Unknown bUseDXT5NormalMaps; // 0x54(0x01)
	Unknown bVirtualTextures; // 0x54(0x01)
	Unknown bVirtualTexturedLightmaps; // 0x54(0x01)
	uint32_t VirtualTextureTileSize; // 0x58(0x04)
	uint32_t VirtualTextureTileBorderSize; // 0x5c(0x04)
	uint32_t VirtualTextureFeedbackFactor; // 0x60(0x04)
	Unknown bVirtualTextureEnableCompressZlib; // 0x64(0x01)
	Unknown bVirtualTextureEnableCompressCr; // 0x64(0x01)
	Unknown bClearCoatEnableSecondNormal; // 0x64(0x01)
	Unknown bPreIntegratedSkinBRDF; // 0x64(0x01)
	Unknown bAnisotropicBRDF; // 0x64(0x01)
	int32_t ReflectionCaptureResolution; // 0x68(0x04)
	Unknown ReflectionEnvironmentLightmapMixBasedOnRoughness; // 0x6c(0x01)
	Unknown bForwardShading; // 0x6c(0x01)
	Unknown bVertexFoggingForOpaque; // 0x6c(0x01)
	Unknown bAllowStaticLighting; // 0x6c(0x01)
	Unknown bUseNormalMapsForStaticLighting; // 0x6c(0x01)
	Unknown bGenerateMeshDistanceFields; // 0x6c(0x01)
	Unknown bEightBitMeshDistanceFields; // 0x6c(0x01)
	Unknown bGenerateLandscapeGIData; // 0x6c(0x01)
	Unknown bCompressMeshDistanceFields; // 0x6d(0x01)
	float TessellationAdaptiv; // 0x70(0x04)
	Unknown bSeparateTranslucency; // 0x74(0x01)
	Unknown TranslucentSortPolicy; // 0x78(0x01)
	Unknown TranslucentSortAxis; // 0x7c(0x0c)
	Unknown CustomDepthStencil; // 0x88(0x01)
	Unknown bCustomDepthTaaJitter; // 0x8c(0x01)
	Unknown bEnableAlphaChannelInPostProcessing; // 0x90(0x01)
	Unknown bDefaultFeatureBloom; // 0x94(0x01)
	Unknown bDefaultFeatureAmbientOcclusion; // 0x94(0x01)
	Unknown bDefaultFeatureAmbientOcclusionStaticFr; // 0x94(0x01)
	Unknown bDefaultFeatureAutoExposure; // 0x94(0x01)
	Unknown DefaultFeatureAutoExposure; // 0x98(0x01)
	float DefaultFeatureAutoExposureBias; // 0x9c(0x04)
	Unknown bExtendDefaultLuminanceRangeInAutoExposureSettings; // 0xa0(0x01)
	Unknown bUsePreExposure; // 0xa0(0x01)
	Unknown bEnablePreExposureOnlyInTheEditor; // 0xa0(0x01)
	Unknown bDefaultFeatureMotionBlur; // 0xa0(0x01)
	Unknown bDefaultFeatureLensFlare; // 0xa0(0x01)
	Unknown bTemporalUpsampling; // 0xa0(0x01)
	Unknown bSSGI; // 0xa0(0x01)
	Unknown DefaultFeatureAntiAliasing; // 0xa4(0x01)
	Unknown DefaultLightUnits; // 0xa5(0x01)
	Unknown DefaultBack; // 0xa6(0x01)
	Unknown bRenderUnbuiltPreviewShadowsInGame; // 0xa8(0x01)
	Unknown bStencilForLODDither; // 0xa8(0x01)
	Unknown EarlyZPass; // 0xac(0x01)
	Unknown bEarlyZPassOnlyMaterialMasking; // 0xb0(0x01)
	Unknown bDBuffer; // 0xb0(0x01)
	Unknown ClearSceneMethod; // 0xb4(0x01)
	Unknown bBasePassOutputsVelocity; // 0xb8(0x01)
	Unknown bVertexDeformationOutputsVelocity; // 0xb8(0x01)
	Unknown bSelectiveBasePassOutputs; // 0xb8(0x01)
	Unknown bDefaultParticleCutouts; // 0xb8(0x01)
	int32_t GPUSimulationTextureSizeX; // 0xbc(0x04)
	int32_t GPUSimulationTextureSizeY; // 0xc0(0x04)
	Unknown bGlobalClipPlane; // 0xc4(0x01)
	Unknown GBufferFormat; // 0xc8(0x01)
	Unknown bUseGPUMorphTargets; // 0xcc(0x01)
	Unknown bNvidiaAftermathEnabled; // 0xcc(0x01)
	Unknown bMultiView; // 0xcc(0x01)
	Unknown bMobilePostProcessing; // 0xcc(0x01)
	Unknown bMobileMultiView; // 0xcc(0x01)
	Unknown bMobileUseHWsRGBEncoding; // 0xcc(0x01)
	Unknown bRoundRobinOcclusion; // 0xcc(0x01)
	Unknown bODSCapture; // 0xcc(0x01)
	Unknown bMeshStreaming; // 0xcd(0x01)
	float WireframeCullThreshold; // 0xd0(0x04)
	Unknown bEnableRayTracing; // 0xd4(0x01)
	Unknown bEnableRayTracingTextureLOD; // 0xd4(0x01)
	Unknown bSupportStationarySkylight; // 0xd4(0x01)
	Unknown bSupportLowQualityLightmaps; // 0xd4(0x01)
	Unknown bSupportPointLightWholeSceneShadows; // 0xd4(0x01)
	Unknown bSupportAtmosphericFog; // 0xd4(0x01)
	Unknown bSupportSkyAtmosphere; // 0xd4(0x01)
	Unknown bSupportSkyAtmosphereAffectsHeightFog; // 0xd4(0x01)
	Unknown bSupportSkinCacheShaders; // 0xd5(0x01)
	Unknown DefaultSkinCacheBehavior; // 0xd8(0x01)
	float SkinCacheSceneMemoryLimitInMB; // 0xdc(0x04)
	Unknown bMobileEnableStaticAndCSMShadowReceiver; // 0xe0(0x01)
	Unknown bMobileEnableMovableLightCSMShaderCulling; // 0xe0(0x01)
	Unknown bMobileAllowDistanceFieldShadows; // 0xe0(0x01)
	Unknown bMobileAllowMovableDirectionalLights; // 0xe0(0x01)
	uint32_t MobileNumDynamicPointLights; // 0xe4(0x04)
	Unknown bMobileDynamicPointLightsUseStaticBranch; // 0xe8(0x01)
	Unknown bMobileAllowMovableSpotlights; // 0xe8(0x01)
	Unknown bSupport16BitBoneIndex; // 0xe8(0x01)
	Unknown bGPUSkinLimit2BoneInfluences; // 0xe8(0x01)
	Unknown bSupportDepthOnlyIndexBuffers; // 0xe8(0x01)
	Unknown bSupportReversedIndexBuffers; // 0xe8(0x01)
	Unknown bSupportMaterialLayers; // 0xe8(0x01)
	Unknown bLPV; // 0xe8(0x01)
	Unknown bSupportAllShaderPermutations; // 0x38(0x01)
	Unknown bForceRecomputeTangents; // 0x38(0x01)
	float Density; // 0x28(0x04)
	float Diffusion; // 0x2c(0x04)
	float Gain; // 0x30(0x04)
	float GainHF; // 0x34(0x04)
	float DecayTime; // 0x38(0x04)
	float DecayHFRatio; // 0x3c(0x04)
	float ReflectionsGain; // 0x40(0x04)
	float ReflectionsDelay; // 0x44(0x04)
	float LateGain; // 0x48(0x04)
	float LateDelay; // 0x4c(0x04)
	float AirAbsorptionGainHF; // 0x50(0x04)
	float RoomRolloffFactor; // 0x54(0x04)
	Unknown TransformBases; // 0x30(0x10)
	Unknown Nodes; // 0x40(0x10)
	Unknown RotationRate; // 0xf0(0x0c)
	Unknown PivotTranslation; // 0xfc(0x0c)
	Unknown bRotationInLocalSpace; // 0x108(0x01)
	Unknown MaterialType; // 0x28(0x01)
	Unknown bCompressTextures; // 0x29(0x01)
	Unknown bEnable; // 0x2a(0x01)
	Unknown bClearTextures; // 0x2b(0x01)
	Unknown bSinglePhysicalSpace; // 0x2c(0x01)
	Unknown bPrivateSpace; // 0x2d(0x01)
	Unknown bEnableScalability; // 0x2e(0x01)
	int32_t Size; // 0x30(0x04)
	int32_t TileCount; // 0x34(0x04)
	int32_t TileSize; // 0x38(0x04)
	int32_t TileBorderSize; // 0x3c(0x04)
	int32_t StreamLowMips; // 0x40(0x04)
	Unknown StreamingTexture; // 0x48(0x08)
	Unknown bEnableCompressCrunch; // 0x50(0x01)
	int32_t RemoveLowMips; // 0x54(0x04)
	Unknown VirtualTexture; // 0x238(0x08)
	Unknown bUseStreamingLowMipsInEditor; // 0x240(0x01)
	Unknown BoundsSourceActor; // 0x248(0x08)
	Unknown Settings; // 0xe8(0x0c)
	Unknown bSinglePhysicalSpace; // 0xf4(0x01)
	uint32_t BuildHash; // 0xf8(0x04)
	Unknown VirtualTextureComponent; // 0x310(0x08)
	Unknown TextureTarget; // 0x2d0(0x08)
	Unknown bCaptureRotation; // 0x2d8(0x01)
	Unknown TextureTargetLeft; // 0x2e0(0x08)
	Unknown TextureTargetRight; // 0x2e8(0x08)
	Unknown TextureTargetODS; // 0x2f0(0x08)
	float IPD; // 0x2f8(0x04)
	Unknown CaptureComponentCube; // 0x320(0x08)
	Unknown ComponentClass; // 0x28(0x08)
	Unknown ComponentTemplate; // 0x30(0x08)
	Unknown CookedComponentInstancingData; // 0x38(0x48)
	struct FName AttachToName; // 0x80(0x08)
	struct FName ParentComponentOrVariableName; // 0x88(0x08)
	struct FName ParentComponentOwnerClassName; // 0x90(0x08)
	Unknown bIsParentComponentNative; // 0x98(0x01)
	Unknown ChildNodes; // 0xa0(0x10)
	Unknown MetaDataArray; // 0xb0(0x10)
	Unknown VariableGuid; // 0xc0(0x10)
	struct FName InternalVariableName; // 0xd0(0x08)
	Unknown bUpdateStatNet; // 0x310(0x01)
	Unknown bOverwriteClientStats; // 0x311(0x01)
	uint32_t Channels; // 0x314(0x04)
	uint32_t InRate; // 0x318(0x04)
	uint32_t OutRate; // 0x31c(0x04)
	uint32_t MaxPacketOverhead; // 0x324(0x04)
	uint32_t InRateClientMax; // 0x328(0x04)
	uint32_t InRateClientMin; // 0x32c(0x04)
	uint32_t InRateClientAvg; // 0x330(0x04)
	uint32_t InPacketsClientMax; // 0x334(0x04)
	uint32_t InPacketsClientMin; // 0x338(0x04)
	uint32_t InPacketsClientAvg; // 0x33c(0x04)
	uint32_t OutRateClientMax; // 0x340(0x04)
	uint32_t OutRateClientMin; // 0x344(0x04)
	uint32_t OutRateClientAvg; // 0x348(0x04)
	uint32_t OutPacketsClientMax; // 0x34c(0x04)
	uint32_t OutPacketsClientMin; // 0x350(0x04)
	uint32_t OutPacketsClientAvg; // 0x354(0x04)
	uint32_t NetNumClients; // 0x358(0x04)
	uint32_t InPackets; // 0x35c(0x04)
	uint32_t OutPackets; // 0x360(0x04)
	uint32_t InBunches; // 0x364(0x04)
	uint32_t OutBunches; // 0x368(0x04)
	uint32_t OutLoss; // 0x36c(0x04)
	uint32_t InLoss; // 0x370(0x04)
	uint32_t VoiceBytesSent; // 0x374(0x04)
	uint32_t VoiceBytesRecv; // 0x378(0x04)
	uint32_t VoicePacketsSent; // 0x37c(0x04)
	uint32_t VoicePacketsRecv; // 0x380(0x04)
	uint32_t PercentInVoice; // 0x384(0x04)
	uint32_t PercentOutVoice; // 0x388(0x04)
	uint32_t NumActorChannels; // 0x38c(0x04)
	uint32_t NumConsideredActors; // 0x390(0x04)
	uint32_t PrioritizedActors; // 0x394(0x04)
	uint32_t NumRelevantActors; // 0x398(0x04)
	uint32_t NumRelevantDeletedActors; // 0x39c(0x04)
	uint32_t NumReplicatedActorAttempts; // 0x3a0(0x04)
	uint32_t NumReplicatedActors; // 0x3a4(0x04)
	uint32_t NumActors; // 0x3a8(0x04)
	uint32_t NumNetActors; // 0x3ac(0x04)
	uint32_t NumDormantActors; // 0x3b0(0x04)
	uint32_t NumInitiallyDormantActors; // 0x3b4(0x04)
	uint32_t NumNetGUIDsAckd; // 0x3b8(0x04)
	uint32_t NumNetGUIDsPending; // 0x3bc(0x04)
	uint32_t NumNetGUIDsUnAckd; // 0x3c0(0x04)
	uint32_t ObjPathBytes; // 0x3c4(0x04)
	uint32_t NetGUIDOutRate; // 0x3c8(0x04)
	uint32_t NetGUIDInRate; // 0x3cc(0x04)
	uint32_t NetSaturated; // 0x3d0(0x04)
	Unknown ShadowmapFlags; // 0xe8(0x01)
	Unknown RootNodes; // 0x28(0x10)
	Unknown AllNodes; // 0x38(0x10)
	Unknown DefaultSceneRootNode; // 0x48(0x08)
	Unknown MinLOD; // 0x30(0x04)
	Unknown DisableBelowMinLodStripping; // 0x34(0x01)
	Unknown bSupportLODStreaming; // 0x35(0x01)
	Unknown MaxNumStreamedLODs; // 0x38(0x04)
	Unknown MaxNumOptionalLODs; // 0x3c(0x04)
	Unknown LODGroups; // 0x40(0x10)
	struct FName SkeletalMeshReductionModuleName; // 0x38(0x08)
	struct FName SocketName; // 0x28(0x08)
	struct FName BoneName; // 0x30(0x08)
	Unknown RelativeLocation; // 0x38(0x0c)
	Unknown RelativeRotation; // 0x44(0x0c)
	Unknown RelativeScale; // 0x50(0x0c)
	Unknown bForceAlwaysAnimated; // 0x5c(0x01)
	Unknown TransformMode; // 0x238(0x01)
	float BottomRadius; // 0x23c(0x04)
	Unknown GroundAlbedo; // 0x240(0x04)
	float AtmosphereHeight; // 0x244(0x04)
	float MultiScatteringFactor; // 0x248(0x04)
	float RayleighScatteringScale; // 0x24c(0x04)
	Unknown RayleighScattering; // 0x250(0x10)
	float RayleighExponentialDistribution; // 0x260(0x04)
	float MieScatteringScale; // 0x264(0x04)
	Unknown MieScattering; // 0x268(0x10)
	float MieAbsorptionScale; // 0x278(0x04)
	Unknown MieAbsorption; // 0x27c(0x10)
	float MieAnisotropy; // 0x28c(0x04)
	float MieExponentialDistribution; // 0x290(0x04)
	float OtherAbsorptionScale; // 0x294(0x04)
	Unknown OtherAbsorption; // 0x298(0x10)
	Unknown OtherTentDistribution; // 0x2a8(0x0c)
	Unknown SkyLuminanceFactor; // 0x2b4(0x10)
	float AerialPespectiveViewDistanceScale; // 0x2c4(0x04)
	float HeightFogContribution; // 0x2c8(0x04)
	float TransmittanceMinLightElevationAngle; // 0x2cc(0x04)
	Unknown bStaticLightingBuiltGUID; // 0x2f4(0x10)
	Unknown SkyAtmosphereComponent; // 0x310(0x08)
	Unknown SourceType; // 0x270(0x01)
	Unknown Cubemap; // 0x278(0x08)
	float SourceCubemapAngle; // 0x280(0x04)
	int32_t CubemapResolution; // 0x284(0x04)
	float SkyDistanceThreshold; // 0x288(0x04)
	Unknown bCaptureEmissiveOnly; // 0x28c(0x01)
	Unknown bLowerHemisphereIsBlack; // 0x28d(0x01)
	Unknown LowerHemisphereColor; // 0x290(0x10)
	Unknown bAffectDynamicIndirectLighting; // 0x2a0(0x01)
	float OcclusionMaxDistance; // 0x2a4(0x04)
	float Contrast; // 0x2a8(0x04)
	float OcclusionExponent; // 0x2ac(0x04)
	Unknown OcclusionFoliageTint; // 0x2b0(0x04)
	float MinOcclusion; // 0x2b4(0x04)
	Unknown OcclusionBarkTint; // 0x2b8(0x04)
	Unknown OcclusionTint; // 0x2bc(0x04)
	Unknown OcclusionCombineMode; // 0x2c0(0x01)
	Unknown SpecularOcclusionMode; // 0x2c1(0x01)
	float SpecularOcclusionStrength; // 0x2c4(0x04)
	float SelfShadowBiasForObjectAO; // 0x2c8(0x04)
	float OcclusionTranslucencyForTwoSidedFoliages; // 0x2cc(0x04)
	Unknown BlendDestinationCubemap; // 0x388(0x08)
	Unknown Brush; // 0x28(0x88)
	Unknown Attenuation; // 0x28(0x3a0)
	Unknown Properties; // 0x28(0x58)
	Unknown ChildClasses; // 0x80(0x10)
	Unknown PassiveSoundMixModifiers; // 0x90(0x10)
	Unknown Modulation; // 0xa0(0x10)
	Unknown ParentClass; // 0xb0(0x08)
	Unknown Concurrency; // 0x28(0x20)
	Unknown bPrimeOnLoad; // 0x160(0x01)
	Unknown FirstNode; // 0x168(0x08)
	float VolumeMultiplier; // 0x170(0x04)
	float PitchMultiplier; // 0x174(0x04)
	Unknown AttenuationOverrides; // 0x178(0x3a0)
	float SubtitlePriority; // 0x518(0x04)
	Unknown bOverrideAttenuation; // 0x520(0x01)
	Unknown bExcludeFromRandomNodeBranchCulling; // 0x520(0x01)
	int32_t CookedQualityIndex; // 0x524(0x04)
	Unknown bHasPlayWhenSilent; // 0x528(0x01)
	Unknown Chain; // 0x28(0x10)
	Unknown bPlayEffectChainTails; // 0x38(0x01)
	Unknown SoundGroupProfiles; // 0x28(0x10)
	Unknown bApplyEQ; // 0x28(0x01)
	float EQPriority; // 0x2c(0x04)
	Unknown EQSettings; // 0x30(0x40)
	Unknown SoundClassEffects; // 0x70(0x10)
	float InitialDelay; // 0x80(0x04)
	float FadeInTime; // 0x84(0x04)
	float Duration; // 0x88(0x04)
	float FadeOutTime; // 0x8c(0x04)
	Unknown ChildNodes; // 0x28(0x10)
	Unknown AttenuationSettings; // 0x48(0x08)
	Unknown AttenuationOverrides; // 0x50(0x3a0)
	Unknown bOverrideAttenuation; // 0x3f0(0x01)
	struct FName BoolParameterName; // 0x48(0x08)
	Unknown InputVolume; // 0x48(0x10)
	float DelayMin; // 0x48(0x04)
	float DelayMax; // 0x4c(0x04)
	Unknown DialogueWaveParameter; // 0x48(0x20)
	Unknown bLooping; // 0x68(0x01)
	Unknown CrossFadeInput; // 0x48(0x10)
	float DopplerIntensity; // 0x48(0x04)
	Unknown bUseSmoothing; // 0x4c(0x01)
	float SmoothingInterpSpeed; // 0x50(0x04)
	float LoopStart; // 0x48(0x04)
	float LoopEnd; // 0x4c(0x04)
	float DurationAfterLoop; // 0x50(0x04)
	int32_t LoopCount; // 0x54(0x04)
	Unknown bLoopIndefinitely; // 0x58(0x01)
	Unknown bLoop; // 0x58(0x01)
	Unknown VolumeInterpCurve; // 0x60(0x08)
	Unknown PitchInterpCurve; // 0x68(0x08)
	Unknown VolumeCurve; // 0x70(0x88)
	Unknown PitchCurve; // 0xf8(0x88)
	float PitchMin; // 0x180(0x04)
	float PitchMax; // 0x184(0x04)
	float VolumeMin; // 0x188(0x04)
	float VolumeMax; // 0x18c(0x04)
	Unknown GroupSizes; // 0x48(0x10)
	int32_t LoopCount; // 0x48(0x04)
	Unknown bLoopIndefinitely; // 0x4c(0x01)
	Unknown InputVolume; // 0x48(0x10)
	float PitchMin; // 0x48(0x04)
	float PitchMax; // 0x4c(0x04)
	float VolumeMin; // 0x50(0x04)
	float VolumeMax; // 0x54(0x04)
	Unknown PitchModulationParams; // 0x48(0x20)
	Unknown VolumeModulationParams; // 0x68(0x20)
	Unknown bModulateVolume; // 0x48(0x01)
	Unknown bModulatePitch; // 0x48(0x01)
	float AmplitudeMin; // 0x4c(0x04)
	float AmplitudeMax; // 0x50(0x04)
	float FrequencyMin; // 0x54(0x04)
	float FrequencyMax; // 0x58(0x04)
	float OffsetMin; // 0x5c(0x04)
	float OffsetMax; // 0x60(0x04)
	float CenterMin; // 0x64(0x04)
	float CenterMax; // 0x68(0x04)
	struct FName ParamName; // 0x58(0x08)
	Unknown Weights; // 0x48(0x10)
	Unknown HasBeenUsed; // 0x58(0x10)
	int32_t NumRandomUsed; // 0x68(0x04)
	int32_t PreselectAtLevelLoad; // 0x6c(0x04)
	Unknown bShouldExcludeFromBranch; // 0x70(0x01)
	Unknown bSoundCueExcludedFromBranchCulling; // 0x70(0x01)
	Unknown bRandomizeWithoutReplacement; // 0x70(0x01)
	Unknown SoundClassOverride; // 0x48(0x08)
	struct FName IntParameterName; // 0x48(0x08)
	struct FName WaveParameterName; // 0x48(0x08)
	Unknown SoundWaveAssetPtr; // 0x48(0x28)
	Unknown SoundWave; // 0x70(0x08)
	Unknown bLooping; // 0x78(0x01)
	Unknown SourceBusChannels; // 0x308(0x01)
	float SourceBusDuration; // 0x30c(0x04)
	Unknown bAutoDeactivateWhenSilent; // 0x310(0x01)
	Unknown ChildSubmixes; // 0x28(0x10)
	Unknown ParentSubmix; // 0x38(0x08)
	Unknown bMuteWhenBackgrounded; // 0x40(0x01)
	Unknown SubmixEffectChain; // 0x48(0x10)
	Unknown AmbisonicsPluginSettings; // 0x58(0x08)
	int32_t EnvelopeFollowerAttackTime; // 0x60(0x04)
	int32_t EnvelopeFollowerReleaseTime; // 0x64(0x04)
	float OutputVolume; // 0x68(0x04)
	struct FMulticastInlineDelegate OnSubmixRecordedFileDone; // 0x70(0x10)
	struct FName SoundfieldEncodingFormat; // 0x40(0x08)
	Unknown EncodingSettings; // 0x48(0x08)
	Unknown SoundfieldEffectChain; // 0x50(0x10)
	Unknown EncodingSettingsClass; // 0x60(0x08)
	struct FName EndpointType; // 0x38(0x08)
	Unknown EndpointSettingsClass; // 0x40(0x08)
	Unknown EndpointSettings; // 0x48(0x08)
	struct FName SoundfieldEndpointType; // 0x38(0x08)
	Unknown EndpointSettingsClass; // 0x40(0x08)
	Unknown EndpointSettings; // 0x48(0x08)
	Unknown EncodingSettingsClass; // 0x50(0x08)
	Unknown EncodingSettings; // 0x58(0x08)
	Unknown SoundfieldEffectChain; // 0x60(0x10)
	Unknown bIgnoreTimeDilation; // 0x150(0x01)
	Unknown DrawCaptureRadius; // 0x318(0x08)
	float InfluenceRadius; // 0x2c0(0x04)
	float CaptureDistanceScale; // 0x2c4(0x04)
	Unknown PreviewInfluenceRadius; // 0x2c8(0x08)
	Unknown SplineMeshComponent; // 0x310(0x08)
	Unknown SplineParams; // 0x558(0x58)
	Unknown SplineUpDir; // 0x5b0(0x0c)
	float SplineBoundaryMin; // 0x5bc(0x04)
	Unknown CachedMeshBodySetupGuid; // 0x5c0(0x10)
	Unknown BodySetup; // 0x5d0(0x08)
	float SplineBoundaryMax; // 0x5d8(0x04)
	Unknown bAllowSplineEditingPerInstance; // 0x5dc(0x01)
	Unknown bSmoothInterpRollScale; // 0x5dc(0x01)
	Unknown bMeshDirty; // 0x5dc(0x01)
	Unknown ForwardAxis; // 0x5dd(0x01)
	float VirtualTextureMainPassMaxDrawDistance; // 0x5e0(0x04)
	float InnerConeAngle; // 0x3b0(0x04)
	float OuterConeAngle; // 0x3b4(0x04)
	float LightShaftConeAngle; // 0x3b8(0x04)
	Unknown bUsePCSS; // 0x3bc(0x01)
	float PCSSSharpness; // 0x3c0(0x04)
	float PCSSContrast; // 0x3c4(0x04)
	float TargetArmLength; // 0x238(0x04)
	Unknown SocketOffset; // 0x23c(0x0c)
	Unknown TargetOffset; // 0x248(0x0c)
	float ProbeSize; // 0x254(0x04)
	Unknown ProbeChannel; // 0x258(0x01)
	Unknown bDoCollisionTest; // 0x25c(0x01)
	Unknown bUsePawnControlRotation; // 0x25c(0x01)
	Unknown bInheritPitch; // 0x25c(0x01)
	Unknown bInheritYaw; // 0x25c(0x01)
	Unknown bInheritRoll; // 0x25c(0x01)
	Unknown bEnableCameraLag; // 0x25c(0x01)
	Unknown bEnableCameraRotationLag; // 0x25c(0x01)
	Unknown bUseCameraLagSubstepping; // 0x25c(0x01)
	Unknown bDrawDebugLagMarkers; // 0x25d(0x01)
	float CameraLagSpeed; // 0x260(0x04)
	float CameraRotationLagSpeed; // 0x264(0x04)
	float CameraLagMaxTimeStep; // 0x268(0x04)
	float CameraLagMaxDistance; // 0x26c(0x04)
	Unknown bUseAsOccluderForSoftwareOcclusion; // 0x60(0x01)
	struct FName LODGroup; // 0x64(0x08)
	struct FName MeshStreamingGroup; // 0x6c(0x08)
	Unknown MinLOD; // 0x80(0x04)
	float LpvBiasMultiplier; // 0x84(0x04)
	Unknown StaticMaterials; // 0x88(0x10)
	float LightmapUVDensity; // 0x98(0x04)
	int32_t LightMapResolution; // 0x9c(0x04)
	int32_t LightMapCoordinateIndex; // 0xa0(0x04)
	float DistanceFieldSelfShadowBias; // 0xa4(0x04)
	Unknown BodySetup; // 0xa8(0x08)
	int32_t LODForCollision; // 0xb0(0x04)
	Unknown bGenerateMeshDistanceField; // 0xb4(0x01)
	Unknown bStripComplexCollisionForConsole; // 0xb4(0x01)
	Unknown bHasNavigationData; // 0xb4(0x01)
	Unknown bSupportUniformlyDistributedSampling; // 0xb4(0x01)
	Unknown bSupportPhysicalMaterialMasks; // 0xb4(0x01)
	Unknown bIsBuiltAtRuntime; // 0xb4(0x01)
	Unknown bAllowCPUAccess; // 0xb4(0x01)
	Unknown bSupportGpuUniformlyDistributedSampling; // 0xb5(0x01)
	Unknown Sockets; // 0xd8(0x10)
	Unknown PositiveBoundsExtension; // 0xf8(0x0c)
	Unknown NegativeBoundsExtension; // 0x104(0x0c)
	Unknown ExtendedBounds; // 0x110(0x1c)
	int32_t ElementToIgnoreForTexFactor; // 0x12c(0x04)
	Unknown AssetUserData; // 0x130(0x10)
	Unknown EditableMesh; // 0x148(0x08)
	Unknown NavCollision; // 0x150(0x08)
	struct FName SocketName; // 0x28(0x08)
	Unknown RelativeLocation; // 0x30(0x0c)
	Unknown RelativeRotation; // 0x3c(0x0c)
	Unknown RelativeScale; // 0x48(0x0c)
	struct FString Tag; // 0x58(0x10)
	Unknown bLiveTexture; // 0x238(0x01)
	Unknown bSupportsDepth; // 0x238(0x01)
	Unknown bNoAlphaChannel; // 0x238(0x01)
	Unknown Texture; // 0x240(0x08)
	Unknown LeftTexture; // 0x248(0x08)
	Unknown bQuadPreserveTextureRatio; // 0x250(0x01)
	Unknown QuadSize; // 0x254(0x08)
	Unknown UVRect; // 0x25c(0x14)
	float CylinderRadius; // 0x270(0x04)
	float CylinderOverlayArc; // 0x274(0x04)
	int32_t CylinderHeight; // 0x278(0x04)
	Unknown EquirectProps; // 0x27c(0x48)
	Unknown StereoLayerType; // 0x2c4(0x01)
	Unknown StereoLayerShape; // 0x2c5(0x01)
	Unknown Shape; // 0x2c8(0x08)
	int32_t Priority; // 0x2d0(0x04)
	float Radius; // 0x28(0x04)
	float OverlayArc; // 0x2c(0x04)
	int32_t Height; // 0x30(0x04)
	Unknown LeftUVRect; // 0x28(0x14)
	Unknown RightUVRect; // 0x3c(0x14)
	Unknown LeftScale; // 0x50(0x08)
	Unknown RightScale; // 0x58(0x08)
	Unknown LeftBias; // 0x60(0x08)
	Unknown RightBias; // 0x68(0x08)
	Unknown Settings; // 0x28(0x8c)
	Unknown SubUVTexture; // 0x28(0x08)
	int32_t SubImages_Horizontal; // 0x30(0x04)
	int32_t SubImages_Vertical; // 0x34(0x04)
	Unknown BoundingMode; // 0x38(0x01)
	Unknown OpacitySourceMode; // 0x39(0x01)
	float AlphaThreshold; // 0x3c(0x04)
	float FrameDelay; // 0x28(0x04)
	Unknown FrameRate; // 0x30(0x08)
	Unknown bGenerateFullFrame; // 0x38(0x01)
	Unknown bUseHighPerformanceClock; // 0x39(0x01)
	struct FText DefaultedText; // 0x28(0x18)
	struct FText UndefaultedText; // 0x40(0x18)
	struct FText TransientText; // 0x58(0x18)
	Unknown TextRender; // 0x310(0x08)
	struct FText Text; // 0x4b8(0x18)
	Unknown TextMaterial; // 0x4d0(0x08)
	Unknown Font; // 0x4d8(0x08)
	Unknown HorizontalAlignment; // 0x4e0(0x01)
	Unknown VerticalAlignment; // 0x4e1(0x01)
	Unknown TextRenderColor; // 0x4e4(0x04)
	float XScale; // 0x4e8(0x04)
	float YScale; // 0x4ec(0x04)
	float WorldSize; // 0x4f0(0x04)
	float InvDefaultSize; // 0x4f4(0x04)
	float HorizSpacingAdjust; // 0x4f8(0x04)
	float VertSpacingAdjust; // 0x4fc(0x04)
	Unknown bAlwaysRenderAsText; // 0x500(0x01)
	float Brightness; // 0xe8(0x04)
	float TextureMultiplier; // 0xec(0x04)
	int32_t SizeX; // 0xc0(0x04)
	Unknown ClearColor; // 0xc4(0x10)
	Unknown OverrideFormat; // 0xd4(0x01)
	Unknown bHDR; // 0xd5(0x01)
	Unknown bForceLinearGamma; // 0xd5(0x01)
	Unknown TheTimeline; // 0xb0(0x98)
	Unknown bIgnoreTimeDilation; // 0x148(0x01)
	float TimelineLength; // 0x28(0x04)
	Unknown LengthMode; // 0x2c(0x01)
	Unknown bAutoPlay; // 0x2d(0x01)
	Unknown bLoop; // 0x2d(0x01)
	Unknown bReplicated; // 0x2d(0x01)
	Unknown bIgnoreTimeDilation; // 0x2d(0x01)
	Unknown EventTracks; // 0x30(0x10)
	Unknown FloatTracks; // 0x40(0x10)
	Unknown VectorTracks; // 0x50(0x10)
	Unknown LinearColorTracks; // 0x60(0x10)
	Unknown MetaDataArray; // 0x70(0x10)
	Unknown TimelineGuid; // 0x80(0x10)
	struct FName VariableName; // 0x90(0x08)
	struct FName DirectionPropertyName; // 0x98(0x08)
	struct FName UpdateFunctionName; // 0xa0(0x08)
	struct FName FinishedFunctionName; // 0xa8(0x08)
	float FrictionScale; // 0x30(0x04)
	Unknown Controls; // 0x28(0x10)
	float ActiveOpacity; // 0x38(0x04)
	float InactiveOpacity; // 0x3c(0x04)
	float TimeUntilDeactive; // 0x40(0x04)
	float TimeUntilReset; // 0x44(0x04)
	float ActivationDelay; // 0x48(0x04)
	Unknown bPreventRecenter; // 0x4c(0x01)
	float StartupDelay; // 0x50(0x04)
	Unknown CollisionComponent; // 0x310(0x08)
	Unknown DisplayNameMap; // 0x60(0x50)
	Unknown status; // 0xc0(0x01)
	Unknown Guid; // 0xc4(0x10)
	Unknown RenderFocusRule; // 0x38(0x01)
	Unknown HardwareCursors; // 0x40(0x50)
	Unknown SoftwareCursors; // 0x90(0x50)
	Unknown DefaultCursor; // 0xe0(0x18)
	Unknown TextEditBeamCursor; // 0xf8(0x18)
	Unknown CrosshairsCursor; // 0x110(0x18)
	Unknown HandCursor; // 0x128(0x18)
	Unknown GrabHandCursor; // 0x140(0x18)
	Unknown GrabHandClosedCursor; // 0x158(0x18)
	Unknown SlashedCircleCursor; // 0x170(0x18)
	float ApplicationScale; // 0x188(0x04)
	Unknown UIScaleRule; // 0x18c(0x01)
	Unknown CustomScalingRuleClass; // 0x190(0x18)
	Unknown UIScaleCurve; // 0x1a8(0x88)
	Unknown bAllowHighDPIInGameMode; // 0x230(0x01)
	Unknown bLoadWidgetsOnDedicatedServer; // 0x231(0x01)
	Unknown CursorClasses; // 0x238(0x10)
	Unknown CustomScalingRuleClassInstance; // 0x248(0x08)
	Unknown CustomScalingRule; // 0x250(0x08)
	Unknown Bounds; // 0x28(0x1c)
	float Intensity; // 0x44(0x04)
	Unknown Texture; // 0x48(0x08)
	Unknown ConstructionOp; // 0x50(0x01)
	int32_t VolumeSizeX; // 0x54(0x04)
	int32_t VolumeSizeY; // 0x58(0x04)
	int32_t VolumeSizeZ; // 0x5c(0x04)
	int32_t SubImagesX; // 0x60(0x04)
	int32_t SubImagesY; // 0x64(0x04)
	int32_t FrameCount; // 0x68(0x04)
	float FramesPerSecond; // 0x6c(0x04)
	Unknown bLoop; // 0x70(0x01)
	Unknown NoiseField; // 0x78(0x08)
	float NoiseScale; // 0x80(0x04)
	float NoiseMax; // 0x84(0x04)
	Unknown VectorField; // 0x4b8(0x08)
	float Intensity; // 0x4c0(0x04)
	float Tightness; // 0x4c4(0x04)
	Unknown bPreviewVectorField; // 0x4c8(0x01)
	int32_t SizeX; // 0x48(0x04)
	int32_t SizeY; // 0x4c(0x04)
	int32_t SizeZ; // 0x50(0x04)
	Unknown bAllowCPUAccess; // 0x54(0x01)
	Unknown CPUData; // 0x80(0x10)
	Unknown VectorFieldComponent; // 0x310(0x08)
	Unknown TypeToLayer; // 0xe8(0x10)
	int32_t DefaultSizeInMegabyte; // 0x28(0x04)
	Unknown Pools; // 0x30(0x10)
	Unknown Settings; // 0xb0(0x18)
	Unknown AllowedMipLevelRange; // 0x348(0x08)
	Unknown Component; // 0x310(0x08)
	float Strength; // 0x238(0x04)
	float Speed; // 0x23c(0x04)
	float MinGustAmount; // 0x240(0x04)
	float MaxGustAmount; // 0x244(0x04)
	float Radius; // 0x248(0x04)
	Unknown bPointWind; // 0x24c(0x01)
	Unknown TilesStreaming; // 0x130(0x10)
	double TilesStreamingTimeThreshold; // 0x140(0x08)
	Unknown bLoadAllTilesDuringCinematic; // 0x148(0x01)
	Unknown bRebaseOriginIn3DSpace; // 0x149(0x01)
	float RebaseOriginDistance; // 0x14c(0x04)
	Unknown bApplyMinStreamingPriorityToLOD; // 0x150(0x01)
	Unknown bApplyStreamingDistanceScaleToLOD; // 0x151(0x01)
	Unknown DevFilterRule; // 0x158(0x10)
	Unknown HierarchicalLODSetup; // 0x28(0x10)
	Unknown OverrideBaseMaterial; // 0x38(0x28)
	int32_t NumLOD; // 0x28(0x04)
	Unknown LOD1; // 0x2c(0x13c)
	Unknown LOD2; // 0x168(0x13c)
	Unknown LOD3; // 0x2a4(0x13c)
	Unknown LOD4; // 0x3e0(0x13c)
	Unknown UberGraphFrame; // 0x310(0x08)
	Unknown Widget1; // 0x318(0x08)
	Unknown DefaultSceneRoot; // 0x320(0x08)
	Unknown Settings; // 0x30(0x70)
	float BlendWeight; // 0xa0(0x04)
	Unknown RenderingLogSeverity; // 0x28(0x01)
	Unknown ShowWarningsOnScreen; // 0x29(0x01)
	struct FString DeveloperOptions; // 0x30(0x10)
	Unknown Texture; // 0x70(0x08)
	Unknown SharedWorldData; // 0x3f8(0x10)
	struct FMulticastInlineDelegate OnNewLocalDataFromClients; // 0x408(0x10)
	float PinSelectionConfidenceThreshold; // 0x418(0x04)
	Unknown ChosenOne; // 0x4c0(0x08)
	Unknown SharedWorldData; // 0x380(0x10)
	Unknown AlignmentTransforms; // 0x390(0x10)
	struct FMulticastInlineDelegate OnSharedWorldDataUpdated; // 0x3a0(0x10)
	struct FMulticastInlineDelegate OnAlignmentTransformsUpdated; // 0x3b0(0x10)
	Unknown GeneratedMaterials; // 0x30(0x10)
	Unknown GeneratedMeshes; // 0x40(0x10)
	Unknown GeneratedTextures; // 0x50(0x10)
	Unknown ParameterDecorations; // 0xe8(0x10)
	Unknown TextureReuseCache; // 0x108(0x50)
	Unknown ReferencedMaterials; // 0x320(0x10)
	Unknown PhysicsAssetsToMerge; // 0x3d0(0x10)
	Unknown Materials; // 0x28(0x50)
	Unknown Textures; // 0x78(0x50)
	Unknown ReferenceSkeletalMesh; // 0x28(0x08)
	Unknown ReferenceStaticMesh; // 0x30(0x08)
	Unknown Relevancy; // 0x38(0x01)
	Unknown bDisableTextureLayoutManagement; // 0x39(0x01)
	Unknown ReferencedMaterials; // 0x40(0x10)
	Unknown ImageProperties; // 0x50(0x10)
	Unknown GroupNodeMap; // 0x60(0x50)
	Unknown ContributingMorphTargets; // 0xb0(0x10)
	Unknown MorphTargetReconstructionInfo; // 0xc0(0x10)
	Unknown VersionId; // 0xd0(0x10)
	Unknown ParameterProperties; // 0xe0(0x10)
	Unknown ParameterUIDataMap; // 0x140(0x50)
	Unknown StateUIDataMap; // 0x190(0x50)
	Unknown PhysicsAssetsMap; // 0x1e0(0x50)
	Unknown MaskOutCache; // 0x230(0x28)
	Unknown bIsChildObject; // 0x258(0x01)
	Unknown MaskOutCache_HardRef; // 0x260(0x08)
	Unknown CustomizableObject; // 0x28(0x08)
	Unknown SkeletalMesh; // 0x30(0x08)
	Unknown BoolParameters; // 0x38(0x10)
	Unknown IntParameters; // 0x48(0x10)
	Unknown FloatParameters; // 0x58(0x10)
	Unknown TextureParameters; // 0x68(0x10)
	Unknown VectorParameters; // 0x78(0x10)
	Unknown ProjectorParameters; // 0x88(0x10)
	Unknown bBuildParameterDecorations; // 0x98(0x01)
	struct FMulticastInlineDelegate UpdatedDelegate; // 0xa0(0x10)
	struct FString SkeletalMeshStatus; // 0x110(0x10)
	Unknown MaterialTags; // 0x140(0x10)
	Unknown PrivateData; // 0x1d0(0x08)
	Unknown Textures; // 0x28(0x10)
	Unknown PendingReleaseSkeletalMesh; // 0x28(0x10)
	Unknown PreviewExternalImageProvider; // 0x48(0x08)
	Unknown ProtectedCachedTextures; // 0x150(0x10)
	Unknown DefaultInstanceLODManagement; // 0x170(0x08)
	Unknown CurrentInstanceLODManagement; // 0x178(0x08)
	float SkippedLastRenderTime; // 0x23c(0x04)
	Unknown CustomizableObjectInstance; // 0x240(0x08)
	Unknown CustomizableSkeletalComponent; // 0x398(0x08)
	Unknown UberGraphFrame; // 0x330(0x08)
	Unknown AnimGraphNode_BlendListByEnum; // 0x338(0xb0)
	Unknown AnimGraphNode_SequencePlayer_3; // 0x3e8(0x78)
	Unknown AnimGraphNode_SequencePlayer_2; // 0x460(0x78)
	Unknown AnimGraphNode_SequencePlayer; // 0x4d8(0x78)
	Unknown AnimGraphNode_Slot_4; // 0x550(0x48)
	Unknown AnimGraphNode_TwoWayBlend; // 0x598(0xc8)
	Unknown AnimGraphNode_LayeredBoneBlend; // 0x660(0xc0)
	Unknown AnimGraphNode_LocalRefPose_3; // 0x720(0x18)
	Unknown AnimGraphNode_Root; // 0x738(0x30)
	Unknown AnimGraphNode_Slot_3; // 0x768(0x48)
	Unknown AnimGraphNode_Slot_2; // 0x7b0(0x48)
	Unknown AnimGraphNode_LocalRefPose_2; // 0x7f8(0x18)
	Unknown AnimGraphNode_LocalRefPose; // 0x810(0x18)
	Unknown AnimGraphNode_Slot; // 0x828(0x48)
	Unknown AnimGraphNode_BlendListByBool; // 0x870(0xa0)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown FadeIn; // 0x250(0x08)
	Unknown FadeOut; // 0x258(0x08)
	Unknown Image; // 0x260(0x08)
	Unknown Image_2; // 0x268(0x08)
	Unknown Image_69; // 0x270(0x08)
	Unknown ListenerCode; // 0x38(0x08)
	struct FString Host; // 0x40(0x10)
	int32_t Port; // 0x50(0x04)
	int32_t PortUdp; // 0x54(0x04)
	Unknown SendingBytes; // 0x58(0x10)
	Unknown ReceivedBytes; // 0x68(0x10)
	Unknown ReceivingBuffer; // 0x78(0x10)
	Unknown CanCallOnDisconnect; // 0x98(0x01)
	struct FDelegate OnConnectEvent; // 0x9c(0x10)
	struct FDelegate OnDisconnectEvent; // 0xac(0x10)
	struct FDelegate OnReceiveMessageEvent; // 0xbc(0x10)
	struct FDelegate OnReceiveUnreliableMessageEvent; // 0xcc(0x10)
	Unknown Stopped; // 0x28(0x01)
	Unknown RunExec; // 0x29(0x01)
	Unknown ConnectionSuccess; // 0x2a(0x01)
	Unknown JustConnected; // 0x38(0x01)
	float WaitingForConnectionTime; // 0x3c(0x04)
	Unknown SocketConnection; // 0x40(0x08)
	int32_t LatentUUID; // 0x48(0x04)
	Unknown ListenerCode; // 0x38(0x08)
	struct FString Host; // 0x40(0x10)
	int32_t Port; // 0x50(0x04)
	int32_t PortUdp; // 0x54(0x04)
	int32_t NextConnectionValidationFunctionCallId; // 0x58(0x04)
	int32_t NextFunctionCallId; // 0x5c(0x04)
	int32_t NextLatentFunctionCallId; // 0xb0(0x04)
	Unknown SendingBytes; // 0x108(0x10)
	Unknown ReceivedBytes; // 0x118(0x10)
	Unknown ReceivingBuffer; // 0x128(0x10)
	Unknown ReceivingType; // 0x139(0x01)
	int32_t ReceivingFunctionCallId; // 0x13c(0x04)
	int32_t ReceivingPacketSize; // 0x140(0x04)
	Unknown ReceivingPacket; // 0x148(0x10)
	Unknown WaitingForConnectionValidationRespon; // 0x168(0x01)
	float ConnectionValidationResponseTime; // 0x16c(0x04)
	float ConnectionValidationDelayTime; // 0x170(0x04)
	float LatentFunctionConnectionValidationDelayTime; // 0x174(0x04)
	int32_t ConnectionValidationFunctionCallId; // 0x178(0x04)
	Unknown PeriodicConnectionValidationEnabled; // 0x17c(0x01)
	Unknown CanCallOnDisconnect; // 0x17d(0x01)
	struct FDelegate OnConnectEvent; // 0x180(0x10)
	struct FDelegate OnDisconnectEvent; // 0x190(0x10)
	struct FDelegate OnReceiveMessageEvent; // 0x1a0(0x10)
	struct FDelegate OnReceiveUnreliableMessageEvent; // 0x1b0(0x10)
	Unknown Stopped; // 0x28(0x01)
	Unknown RunExec; // 0x29(0x01)
	Unknown ConnectionSuccess; // 0x2a(0x01)
	Unknown JustConnected; // 0x38(0x01)
	float WaitingForConnectionTime; // 0x3c(0x04)
	Unknown SocketConnection; // 0x40(0x08)
	int32_t LatentUUID; // 0x48(0x04)
	Unknown TargetImageTexture; // 0x238(0x08)
	struct FString Name; // 0x240(0x10)
	float LongerDimension; // 0x250(0x04)
	Unknown bIsStationary; // 0x254(0x01)
	Unknown bUseUnreliablePose; // 0x255(0x01)
	struct FMulticastInlineDelegate OnSetImageTargetSucceeded; // 0x258(0x10)
	struct FMulticastInlineDelegate OnSetImageTargetFailed; // 0x268(0x10)
	struct FMulticastInlineDelegate OnImageTargetFound; // 0x278(0x10)
	struct FMulticastInlineDelegate OnImageTargetLost; // 0x288(0x10)
	struct FMulticastInlineDelegate OnImageTargetUnreliableTracking; // 0x298(0x10)
	struct FName playerName; // 0x80(0x08)
	struct FString FilePath; // 0x88(0x10)
	Unknown PrecacheFile; // 0x98(0x01)
	Unknown MediaTexture; // 0xb0(0x08)
	Unknown MediaPlayer; // 0xb8(0x08)
	struct FMulticastInlineDelegate OnEndReached; // 0x28(0x10)
	struct FMulticastInlineDelegate OnMediaClosed; // 0x38(0x10)
	struct FMulticastInlineDelegate OnMediaOpened; // 0x48(0x10)
	struct FMulticastInlineDelegate OnMediaOpenFailed; // 0x58(0x10)
	struct FMulticastInlineDelegate OnPlaybackResumed; // 0x68(0x10)
	struct FMulticastInlineDelegate OnPlaybackSuspended; // 0x78(0x10)
	struct FMulticastInlineDelegate OnSeekCompleted; // 0x88(0x10)
	struct FMulticastInlineDelegate OnTracksChanged; // 0x98(0x10)
	Unknown CacheAhead; // 0xa8(0x08)
	Unknown CacheBehind; // 0xb0(0x08)
	Unknown CacheBehindGame; // 0xb8(0x08)
	Unknown NativeAudioOut; // 0xc0(0x01)
	Unknown PlayOnOpen; // 0xc1(0x01)
	Unknown Shuffle; // 0xc4(0x01)
	Unknown Loop; // 0xc4(0x01)
	Unknown Playlist; // 0xc8(0x08)
	int32_t PlaylistIndex; // 0xd0(0x04)
	Unknown TimeDelay; // 0xd8(0x08)
	float HorizontalFieldOfView; // 0xe0(0x04)
	float VerticalFieldOfView; // 0xe4(0x04)
	Unknown ViewRotation; // 0xe8(0x0c)
	Unknown playerGUID; // 0x120(0x10)
	Unknown OwnerWidget; // 0x138(0x08)
	Unknown Items; // 0x28(0x10)
	Unknown Channels; // 0x710(0x04)
	Unknown DynamicRateAdjustment; // 0x714(0x01)
	float RateAdjustmentFactor; // 0x718(0x04)
	Unknown RateAdjustmentRange; // 0x71c(0x10)
	Unknown MediaPlayer; // 0x730(0x08)
	Unknown AddressX; // 0xb8(0x01)
	Unknown AddressY; // 0xb9(0x01)
	Unknown AutoClear; // 0xba(0x01)
	Unknown ClearColor; // 0xbc(0x10)
	Unknown EnableGenMips; // 0xcc(0x01)
	Unknown NumMips; // 0xcd(0x01)
	Unknown MediaPlayer; // 0xd0(0x08)
	Unknown MediaSource; // 0x80(0x08)
	struct FString StreamUrl; // 0x88(0x10)
	Unknown bUseTimeSynchronization; // 0x88(0x01)
	int32_t FrameDelay; // 0x8c(0x04)
	double TimeDelay; // 0x90(0x08)
	Unknown DestructibleComponent; // 0x310(0x08)
	struct FMulticastInlineDelegate OnActorFracture; // 0x318(0x10)
	Unknown bFractureEffectOverride; // 0x700(0x01)
	Unknown FractureEffects; // 0x708(0x10)
	Unknown bEnableHardSleeping; // 0x718(0x01)
	float LargeChunkThreshold; // 0x71c(0x04)
	struct FMulticastInlineDelegate OnComponentFracture; // 0x730(0x10)
	struct FMulticastInlineDelegate OnFractureEffectSpawned; // 0x740(0x10)
	int32_t CellSiteCount; // 0x28(0x04)
	Unknown FractureMaterialDesc; // 0x2c(0x24)
	int32_t RandomSeed; // 0x50(0x04)
	Unknown VoronoiSites; // 0x58(0x10)
	int32_t OriginalSubmeshCount; // 0x68(0x04)
	Unknown Materials; // 0x70(0x10)
	Unknown ChunkParameters; // 0x80(0x10)
	Unknown DefaultDestructibleParameters; // 0x380(0x88)
	Unknown FractureEffects; // 0x408(0x10)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown Event2; // 0x250(0x08)
	Unknown Event; // 0x258(0x08)
	Unknown Anim_Second; // 0x260(0x08)
	Unknown Hide; // 0x268(0x08)
	Unknown Infos_ani; // 0x270(0x08)
	Unknown Anim_Defeat; // 0x278(0x08)
	Unknown Anim_Victory; // 0x280(0x08)
	Unknown Arrow; // 0x288(0x08)
	Unknown Arrow_2; // 0x290(0x08)
	Unknown ArrowLine; // 0x298(0x08)
	Unknown ArrowLine_2; // 0x2a0(0x08)
	Unknown BackgroundBlur; // 0x2a8(0x08)
	Unknown BackgroundBlur_447; // 0x2b0(0x08)
	Unknown BlackBG01; // 0x2b8(0x08)
	Unknown BlackBG02; // 0x2c0(0x08)
	Unknown BottomLine; // 0x2c8(0x08)
	Unknown BottomLine_2; // 0x2d0(0x08)
	Unknown Button; // 0x2d8(0x08)
	Unknown Button_2; // 0x2e0(0x08)
	Unknown Button_104; // 0x2e8(0x08)
	Unknown CanvasPanel_7; // 0x2f0(0x08)
	Unknown CanvasPanel_49; // 0x2f8(0x08)
	Unknown CanvasPanel_488; // 0x300(0x08)
	Unknown CanvasPanel_832; // 0x308(0x08)
	Unknown Glow1; // 0x310(0x08)
	Unknown Glow1_2; // 0x318(0x08)
	Unknown Glow2; // 0x320(0x08)
	Unknown Glow3; // 0x328(0x08)
	Unknown Glow3_2; // 0x330(0x08)
	Unknown GlowLine; // 0x338(0x08)
	Unknown HeadShot; // 0x340(0x08)
	Unknown HorizontalBox_KillerWeaponInfo; // 0x348(0x08)
	Unknown HorizontalBox_Rarity; // 0x350(0x08)
	Unknown Image_4; // 0x358(0x08)
	Unknown Image_5; // 0x360(0x08)
	Unknown Image_6; // 0x368(0x08)
	Unknown Image_7; // 0x370(0x08)
	Unknown Image_8; // 0x378(0x08)
	Unknown Image_16; // 0x380(0x08)
	Unknown Image_17; // 0x388(0x08)
	Unknown Image_18; // 0x390(0x08)
	Unknown Image_19; // 0x398(0x08)
	Unknown Image_20; // 0x3a0(0x08)
	Unknown Image_21; // 0x3a8(0x08)
	Unknown Image_22; // 0x3b0(0x08)
	Unknown Image_23; // 0x3b8(0x08)
	Unknown Image_252; // 0x3c0(0x08)
	Unknown Image_505; // 0x3c8(0x08)
	Unknown Image_1091; // 0x3d0(0x08)
	Unknown Image_1443; // 0x3d8(0x08)
	Unknown Image_1558; // 0x3e0(0x08)
	Unknown L_Wing01; // 0x3e8(0x08)
	Unknown L_Wing01_2; // 0x3f0(0x08)
	Unknown L_Wing01_3; // 0x3f8(0x08)
	Unknown L_Wing01_4; // 0x400(0x08)
	Unknown L_Wing02; // 0x408(0x08)
	Unknown L_Wing02_2; // 0x410(0x08)
	Unknown L_Wing02_3; // 0x418(0x08)
	Unknown L_Wing02_4; // 0x420(0x08)
	Unknown L_Wing03; // 0x428(0x08)
	Unknown L_Wing03_2; // 0x430(0x08)
	Unknown L_Wing03_3; // 0x438(0x08)
	Unknown L_Wing03_4; // 0x440(0x08)
	Unknown L_WingLine; // 0x448(0x08)
	Unknown L_WingLine_2; // 0x450(0x08)
	Unknown Logo; // 0x458(0x08)
	Unknown Logo_2; // 0x460(0x08)
	Unknown Overlay_1; // 0x468(0x08)
	Unknown Overlay_WeaponLevel; // 0x470(0x08)
	Unknown PosX; // 0x478(0x08)
	Unknown PosY; // 0x480(0x08)
	Unknown PosZ; // 0x488(0x08)
	Unknown R_Wing01; // 0x490(0x08)
	Unknown R_Wing01_2; // 0x498(0x08)
	Unknown R_Wing01_3; // 0x4a0(0x08)
	Unknown R_Wing01_4; // 0x4a8(0x08)
	Unknown R_Wing02; // 0x4b0(0x08)
	Unknown R_Wing02_2; // 0x4b8(0x08)
	Unknown R_Wing02_3; // 0x4c0(0x08)
	Unknown R_Wing02_4; // 0x4c8(0x08)
	Unknown R_Wing03; // 0x4d0(0x08)
	Unknown R_Wing03_2; // 0x4d8(0x08)
	Unknown R_Wing03_3; // 0x4e0(0x08)
	Unknown R_Wing03_4; // 0x4e8(0x08)
	Unknown R_WingLine; // 0x4f0(0x08)
	Unknown R_WingLine_2; // 0x4f8(0x08)
	Unknown Ribbon; // 0x500(0x08)
	Unknown Ribbon_2; // 0x508(0x08)
	Unknown Ring; // 0x510(0x08)
	Unknown ScrollBox_1; // 0x518(0x08)
	Unknown T_DamageType; // 0x520(0x08)
	Unknown T_WeaponLevel; // 0x528(0x08)
	Unknown TextBlock_3; // 0x530(0x08)
	Unknown TextBlock_4; // 0x538(0x08)
	Unknown TextBlock_5; // 0x540(0x08)
	Unknown TextBlock_6; // 0x548(0x08)
	Unknown TextBlock_8; // 0x550(0x08)
	Unknown TextBlock_9; // 0x558(0x08)
	Unknown TextBlock_10; // 0x560(0x08)
	Unknown TextBlock_11; // 0x568(0x08)
	Unknown TextBlock_900; // 0x570(0x08)
	Unknown TopLine; // 0x578(0x08)
	Unknown TopLine_2; // 0x580(0x08)
	Unknown U; // 0x588(0x08)
	Unknown U; // 0x590(0x08)
	Unknown WeaponName; // 0x598(0x08)
	Unknown WidgetSwitcher_DamageCauser; // 0x5a0(0x08)
	Unknown WinText1; // 0x5a8(0x08)
	Unknown WinText1_2; // 0x5b0(0x08)
	Unknown WinText1_3; // 0x5b8(0x08)
	Unknown WinText1_4; // 0x5c0(0x08)
	Unknown WinText2; // 0x5c8(0x08)
	Unknown WinText3; // 0x5d0(0x08)
	Unknown MatchEnd; // 0x5d8(0x01)
	Unknown AnimationData; // 0x5d9(0x02)
	Unknown MatchEndWidgetRef; // 0x5e0(0x08)
	Unknown SimpleResult; // 0x5e8(0xa8)
	Unknown SimpleTimer; // 0x690(0x10)
	struct FMulticastInlineDelegate EventDispatcher_HideComplete; // 0x6a0(0x10)
	Unknown bSuccessWinEventCall; // 0x6b0(0x01)
	Unknown PlayingAudio; // 0x6b8(0x10)
	Unknown bTestMode; // 0x6c8(0x01)
	Unknown bTestIsWin; // 0x6c9(0x01)
	float MatchFinalResultShowTime; // 0x6cc(0x04)
	struct FString UniqueKey; // 0x320(0x10)
	Unknown SideActors; // 0x330(0x10)
	Unknown SideMeshes; // 0x340(0x10)
	Unknown SplineMeshAxis; // 0x310(0x01)
	Unknown LocalOffset; // 0x314(0x0c)
	Unknown Father; // 0x320(0x08)
	struct FString UniqueKey; // 0x328(0x10)
	Unknown Spline; // 0x338(0x08)
	int32_t Index; // 0x340(0x04)
	int32_t Segmentation; // 0x344(0x04)
	int32_t StepGeneration; // 0x348(0x04)
	float Size; // 0x34c(0x04)
	Unknown RoadMesh; // 0x350(0x08)
	Unknown RoadMeshesComp; // 0x358(0x10)
	Unknown SideActors; // 0x368(0x10)
	Unknown SideMeshes; // 0x378(0x10)
	Unknown SideCurbs; // 0x388(0x10)
	struct FMulticastInlineDelegate InAppPurchaseLogMessage; // 0xb0(0x10)
	struct FMulticastInlineDelegate GetItemsDetailsSuccess; // 0xc0(0x10)
	struct FMulticastInlineDelegate GetItemsDetailsFailure; // 0xd0(0x10)
	struct FMulticastInlineDelegate PurchaseConfirmationSuccess; // 0xe0(0x10)
	struct FMulticastInlineDelegate PurchaseConfirmationFailure; // 0xf0(0x10)
	struct FMulticastInlineDelegate GetPurchaseHistorySuccess; // 0x100(0x10)
	struct FMulticastInlineDelegate GetPurchaseHistoryFailure; // 0x110(0x10)
	struct FMulticastInlineDelegate DeviceHasReactivatedDelegate; // 0x140(0x10)
	struct FMulticastInlineDelegate DeviceWillEnterRealityModeDelegate; // 0x150(0x10)
	struct FMulticastInlineDelegate DeviceWillGoInStandbyDelegate; // 0x160(0x10)
	struct FMulticastInlineDelegate FocusLostDelegate; // 0x170(0x10)
	struct FMulticastInlineDelegate FocusGainedDelegate; // 0x180(0x10)
	struct FMulticastInlineDelegate OnHeadTrackingLost; // 0x140(0x10)
	struct FMulticastInlineDelegate OnHeadTrackingRecov; // 0x150(0x10)
	struct FMulticastInlineDelegate OnHeadTrackingRecovngNo; // 0x160(0x10)
	struct FMulticastInlineDelegate OnHeadTrackingNewSessionStarted; // 0x170(0x10)
	struct FMulticastInlineDelegate OnMeshTrackerUpdated; // 0x240(0x10)
	Unknown ScanWorld; // 0x250(0x01)
	Unknown MeshType; // 0x251(0x01)
	Unknown BoundingVolume; // 0x258(0x08)
	Unknown LevelOfDetail; // 0x260(0x01)
	float PerimeterOfGapsToFill; // 0x264(0x04)
	Unknown Planarize; // 0x268(0x01)
	float DisconnectedSectionArea; // 0x26c(0x04)
	Unknown RequestNormals; // 0x270(0x01)
	Unknown RequestVertexConfidence; // 0x271(0x01)
	Unknown VertexColorMode; // 0x272(0x01)
	Unknown BlockVertexColors; // 0x278(0x10)
	Unknown VertexColorFromConfidenceZero; // 0x288(0x10)
	Unknown VertexColorFromConfidenceOne; // 0x298(0x10)
	Unknown RemoveOverlappingTriangles; // 0x2a8(0x01)
	Unknown MRMesh; // 0x2b0(0x08)
	int32_t BricksPerFrame; // 0x2b8(0x04)
	Unknown bEnableZI; // 0x28(0x01)
	Unknown bUseVulkanForZI; // 0x29(0x01)
	Unknown bUseMLAudioForZI; // 0x2a(0x01)
	Unknown FrameRateOverride; // 0x88(0x08)
	struct FString ProxyOverride; // 0x90(0x10)
	Unknown SequencePath; // 0xa0(0x10)
	Unknown DefaultFrameRate; // 0x28(0x08)
	float CacheBehindPercentage; // 0x30(0x04)
	float CacheSizeGB; // 0x34(0x04)
	int32_t CacheThreads; // 0x38(0x04)
	int32_t CacheThreadStackSizeKB; // 0x3c(0x04)
	float GlobalCacheSizeGB; // 0x40(0x04)
	Unknown UseGlobalCache; // 0x44(0x01)
	uint32_t ExrDecoderThreads; // 0x48(0x04)
	struct FString DefaultProxy; // 0x50(0x10)
	Unknown UseDefaultProxy; // 0x60(0x01)
	Unknown UberGraphFrame; // 0x258(0x08)
	Unknown btn_Cancel; // 0x260(0x08)
	Unknown btn_confirm; // 0x268(0x08)
	Unknown popup; // 0x270(0x08)
	Unknown txt_description; // 0x278(0x08)
	Unknown uw; // 0x280(0x08)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown Button_Request; // 0x250(0x08)
	Unknown Image_955; // 0x258(0x08)
	Unknown Image_1208; // 0x260(0x08)
	Unknown SizeBox_77; // 0x268(0x08)
	Unknown SizeBox_78; // 0x270(0x08)
	Unknown Text_Price; // 0x278(0x08)
	Unknown TextBlock_767; // 0x280(0x08)
	Unknown WidgetSwitcher_Price; // 0x288(0x08)
	Unknown PlayerControllerRef; // 0x290(0x08)
	Unknown bCanRequest; // 0x298(0x01)
	Unknown bRequest; // 0x299(0x01)
	struct FText RequstingResuscitationText; // 0x2a0(0x18)
	float RequestingSizeBoxWidth; // 0x2b8(0x04)
	Unknown RequestTextColor; // 0x2c0(0x28)
	Unknown RequestingTextColor; // 0x2e8(0x28)
	float RequestingSizeBoxInitWidth; // 0x310(0x04)
	struct FText RequstingResuscitationInitText; // 0x318(0x18)
	Unknown InitButtonStyle; // 0x330(0x278)
	Unknown RequestingButtonStyle; // 0x5a8(0x278)
	Unknown CanRequestButtonStyle; // 0x820(0x278)
	Unknown bHideWorkInProgress; // 0x28(0x01)
	Unknown MainTab; // 0x29(0x01)
	Unknown WeaponSubTab; // 0x2a(0x01)
	Unknown AttachmentSubTab; // 0x2b(0x01)
	Unknown WearableSubTab; // 0x2c(0x01)
	Unknown CustomSubTab; // 0x2d(0x01)
	Unknown GearSubTab; // 0x2e(0x01)
	Unknown BravoHotelShellCasingArrow_Clip; // 0x22f0(0x08)
	struct FString PackageURL; // 0x38(0x10)
	Unknown ParentFactory; // 0x48(0x08)
	Unknown ImageSources; // 0x50(0x50)
	Unknown CreatedMaterial; // 0xa0(0x08)
	Unknown ConstantCreatedMaterial; // 0xa8(0x08)
	Unknown DynamicCreatedMaterial; // 0xb0(0x08)
	Unknown OutputTextureLinkData; // 0xb8(0x50)
	Unknown OutputInstances; // 0x108(0x50)
	Unknown bIsFrozen; // 0x158(0x01)
	Unknown mGraphInstances; // 0x28(0x10)
	struct FString RelativeSourceFilePath; // 0x50(0x10)
	struct FString AbsoluteSourceFilePath; // 0x60(0x10)
	struct FString SourceFileTimestamp; // 0x70(0x10)
	Unknown GenerationMode; // 0x80(0x01)
	Unknown ConnectedObject; // 0x28(0x08)
	Unknown ParamInfo; // 0x30(0x10)
	Unknown ParentInstance; // 0x40(0x08)
	Unknown CacheGuid; // 0x48(0x10)
	int32_t MemoryBudgetMb; // 0x28(0x04)
	int32_t CPUCores; // 0x2c(0x04)
	int32_t AsyncLoadMipClip; // 0x30(0x04)
	int32_t MaxAsyncSubstancesRenderedPerFr; // 0x34(0x04)
	Unknown SubstanceEngine; // 0x38(0x01)
	Unknown DefaultSubstanceOutputSizeX; // 0x39(0x01)
	Unknown DefaultSubstanceOutputSizeY; // 0x3a(0x01)
	Unknown DefaultTemplateMaterial; // 0x40(0x28)
	Unknown ParentInstance; // 0x100(0x08)
	Unknown AddressX; // 0x108(0x01)
	Unknown AddressY; // 0x109(0x01)
	Unknown bCooked; // 0x10a(0x01)
	Unknown Slot; // 0x28(0x08)
	struct FDelegate bIsEnabledDelegate; // 0x30(0x10)
	struct FText ToolTipText; // 0x40(0x18)
	struct FDelegate ToolTipTextDelegate; // 0x58(0x10)
	Unknown ToolTipWidget; // 0x68(0x08)
	struct FDelegate ToolTipWidgetDelegate; // 0x70(0x10)
	struct FDelegate VisibilityDelegate; // 0x80(0x10)
	Unknown RenderTransform; // 0x90(0x1c)
	Unknown RenderTransformPivot; // 0xac(0x08)
	Unknown bIsVariable; // 0xb4(0x01)
	Unknown bCreatedByConstructionScript; // 0xb4(0x01)
	Unknown bIsEnabled; // 0xb4(0x01)
	Unknown bOverride_Cursor; // 0xb4(0x01)
	Unknown AccessibleWidgetData; // 0xb8(0x08)
	Unknown bIsVolatile; // 0xc0(0x01)
	Unknown Cursor; // 0xc1(0x01)
	Unknown Clipping; // 0xc2(0x01)
	Unknown Visibility; // 0xc3(0x01)
	float RenderOpacity; // 0xc4(0x04)
	Unknown Navigation; // 0xc8(0x08)
	Unknown FlowDirectionPreference; // 0xd0(0x01)
	Unknown NativeBindings; // 0xf8(0x10)
	Unknown ColorAndOpacity; // 0x110(0x10)
	struct FDelegate ColorAndOpacityDelegate; // 0x120(0x10)
	Unknown ForegroundColor; // 0x130(0x28)
	struct FDelegate ForegroundColorDelegate; // 0x158(0x10)
	Unknown Padding; // 0x168(0x10)
	Unknown ActiveSequencePlayers; // 0x178(0x10)
	Unknown StoppedSequencePlayers; // 0x188(0x10)
	Unknown NoPixelSnapping; // 0x198(0x01)
	struct FDelegate NoPixelSnappingDelegate; // 0x19c(0x10)
	Unknown NamedSlotBindings; // 0x1b0(0x10)
	Unknown WidgetTree; // 0x1c0(0x08)
	int32_t Priority; // 0x1c8(0x04)
	Unknown bSupportsKeyboardFocus; // 0x1cc(0x01)
	Unknown bIsFocusable; // 0x1cc(0x01)
	Unknown bStopAction; // 0x1cc(0x01)
	Unknown bHasScriptImplementedTick; // 0x1cc(0x01)
	Unknown bHasScriptImplementedPaint; // 0x1cc(0x01)
	Unknown bCookedWidgetTree; // 0x1cc(0x01)
	Unknown TickFrequency; // 0x1d8(0x01)
	Unknown InputComponent; // 0x1e0(0x08)
	Unknown AnimationCallbacks; // 0x1e8(0x10)
	Unknown Slots; // 0x108(0x10)
	Unknown HorizontalAlignment; // 0x120(0x01)
	Unknown VerticalAlignment; // 0x121(0x01)
	Unknown bShowEffectWhenDisabled; // 0x122(0x01)
	Unknown ContentColorAndOpacity; // 0x124(0x10)
	struct FDelegate ContentColorAndOpacityDelegate; // 0x134(0x10)
	Unknown Padding; // 0x144(0x10)
	Unknown Background; // 0x158(0x88)
	struct FDelegate BackgroundDelegate; // 0x1e0(0x10)
	Unknown BrushColor; // 0x1f0(0x10)
	struct FDelegate BrushColorDelegate; // 0x200(0x10)
	Unknown DesiredSizeScale; // 0x210(0x08)
	Unknown bFlipForRightToLeftFlowDirection; // 0x218(0x01)
	struct FDelegate OnMouseButtonDownEv; // 0x21c(0x10)
	struct FDelegate OnMouseButtonUpEvent; // 0x22c(0x10)
	struct FDelegate OnMouseMoveEvent; // 0x23c(0x10)
	struct FDelegate OnMouseDoubleClickEvent; // 0x24c(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFail; // 0x40(0x10)
	Unknown Padding; // 0x120(0x10)
	Unknown HorizontalAlignment; // 0x130(0x01)
	Unknown VerticalAlignment; // 0x131(0x01)
	Unknown bApplyAlphaToBlur; // 0x132(0x01)
	float BlurStrength; // 0x134(0x04)
	Unknown bOverrideAutoRadiusCalculation; // 0x138(0x01)
	int32_t BlurRadius; // 0x13c(0x04)
	Unknown LowQualityFallbackBrush; // 0x140(0x88)
	Unknown Parent; // 0x28(0x08)
	Unknown Content; // 0x30(0x08)
	Unknown Padding; // 0x38(0x10)
	Unknown HorizontalAlignment; // 0x48(0x01)
	Unknown VerticalAlignment; // 0x49(0x01)
	Unknown SourceObject; // 0x28(0x08)
	Unknown SourcePath; // 0x30(0x28)
	struct FName DestinationProperty; // 0x58(0x08)
	Unknown Padding; // 0x38(0x10)
	Unknown HorizontalAlignment; // 0x48(0x01)
	Unknown VerticalAlignment; // 0x49(0x01)
	Unknown Style; // 0x160(0x08)
	Unknown WidgetStyle; // 0x168(0x278)
	Unknown ColorAndOpacity; // 0x3e0(0x10)
	Unknown BackgroundColor; // 0x3f0(0x10)
	Unknown ClickMethod; // 0x400(0x01)
	Unknown TouchMethod; // 0x401(0x01)
	Unknown PressMethod; // 0x402(0x01)
	Unknown IsFocusable; // 0x403(0x01)
	struct FMulticastInlineDelegate OnClicked; // 0x408(0x10)
	struct FMulticastInlineDelegate OnPressed; // 0x418(0x10)
	struct FMulticastInlineDelegate OnReleased; // 0x428(0x10)
	struct FMulticastInlineDelegate OnHovered; // 0x438(0x10)
	struct FMulticastInlineDelegate OnUnhovered; // 0x448(0x10)
	Unknown Padding; // 0x38(0x10)
	Unknown HorizontalAlignment; // 0x48(0x01)
	Unknown VerticalAlignment; // 0x49(0x01)
	Unknown LayoutData; // 0x38(0x28)
	Unknown bAutoSize; // 0x60(0x01)
	int32_t ZOrder; // 0x64(0x04)
	Unknown CheckedState; // 0x120(0x01)
	struct FDelegate CheckedStateDelegate; // 0x124(0x10)
	Unknown WidgetStyle; // 0x138(0x580)
	Unknown Style; // 0x6b8(0x08)
	Unknown UncheckedImage; // 0x6c0(0x08)
	Unknown UncheckedHoveredImage; // 0x6c8(0x08)
	Unknown UncheckedPressedImage; // 0x6d0(0x08)
	Unknown CheckedImage; // 0x6d8(0x08)
	Unknown CheckedHoveredImage; // 0x6e0(0x08)
	Unknown CheckedPressedImage; // 0x6e8(0x08)
	Unknown UndeterminedImage; // 0x6f0(0x08)
	Unknown UndeterminedHoveredImage; // 0x6f8(0x08)
	Unknown UndeterminedPressedImage; // 0x700(0x08)
	Unknown HorizontalAlignment; // 0x708(0x01)
	Unknown Padding; // 0x70c(0x10)
	Unknown BorderBackgroundColor; // 0x720(0x28)
	Unknown IsFocusable; // 0x748(0x01)
	struct FMulticastInlineDelegate OnCheckStateChanged; // 0x750(0x10)
	int32_t NumberOfPieces; // 0x108(0x04)
	float Period; // 0x10c(0x04)
	float Radius; // 0x110(0x04)
	Unknown PieceImage; // 0x118(0x08)
	Unknown Image; // 0x120(0x88)
	Unknown bEnableRadius; // 0x1a8(0x01)
	Unknown Items; // 0x108(0x10)
	struct FDelegate OnGenerateWidgetEvent; // 0x118(0x10)
	Unknown bIsFocusable; // 0x128(0x01)
	Unknown DefaultOptions; // 0x108(0x10)
	struct FString SelectedOption; // 0x118(0x10)
	Unknown WidgetStyle; // 0x128(0x3f0)
	Unknown ItemStyle; // 0x518(0x7c8)
	Unknown ContentPadding; // 0xce0(0x10)
	float MaxListHeight; // 0xcf0(0x04)
	Unknown HasDownArrow; // 0xcf4(0x01)
	Unknown EnableGamepadNavigationMode; // 0xcf5(0x01)
	Unknown Font; // 0xcf8(0x50)
	Unknown ForegroundColor; // 0xd48(0x28)
	Unknown bIsFocusable; // 0xd70(0x01)
	struct FDelegate OnGenerateWidgetEvent; // 0xd74(0x10)
	struct FMulticastInlineDelegate OnSelectionChanged; // 0xd88(0x10)
	struct FMulticastInlineDelegate OnOpening; // 0xd98(0x10)
	struct FString Tag; // 0x28(0x10)
	Unknown payload; // 0x38(0x08)
	Unknown DefaultDragVisual; // 0x40(0x08)
	Unknown Pivot; // 0x48(0x01)
	Unknown Offset; // 0x4c(0x08)
	Unknown bUseMoveAnimation; // 0x54(0x01)
	struct FMulticastInlineDelegate OnDrop; // 0x58(0x10)
	struct FMulticastInlineDelegate OnDragCancelled; // 0x68(0x10)
	struct FMulticastInlineDelegate OnDragged; // 0x78(0x10)
	Unknown EntryBoxType; // 0x108(0x01)
	Unknown EntrySpacing; // 0x10c(0x08)
	Unknown SpacingPattern; // 0x118(0x10)
	Unknown EntrySizeRule; // 0x128(0x08)
	Unknown EntryHorizontalAlignment; // 0x130(0x01)
	Unknown EntryVerticalAlignment; // 0x131(0x01)
	int32_t MaxElementSize; // 0x134(0x04)
	Unknown EntryWidgetPool; // 0x148(0x80)
	Unknown EntryWidgetClass; // 0x1c8(0x08)
	struct FText Text; // 0x108(0x18)
	struct FDelegate TextDelegate; // 0x120(0x10)
	struct FText HintText; // 0x130(0x18)
	struct FDelegate HintTextDelegate; // 0x148(0x10)
	Unknown WidgetStyle; // 0x158(0x218)
	Unknown Style; // 0x370(0x08)
	Unknown BackgroundImageSelected; // 0x378(0x08)
	Unknown BackgroundImageComposing; // 0x380(0x08)
	Unknown CaretImage; // 0x388(0x08)
	Unknown Font; // 0x390(0x50)
	Unknown ColorAndOpacity; // 0x3e0(0x28)
	Unknown IsReadOnly; // 0x408(0x01)
	Unknown IsPassword; // 0x409(0x01)
	float MinimumDesiredWidth; // 0x40c(0x04)
	Unknown IsCaretMovedWhenGainFocus; // 0x410(0x01)
	Unknown SelectAllTextWhenFocused; // 0x411(0x01)
	Unknown RevertTextOnEscape; // 0x412(0x01)
	Unknown ClearKeyboardFocusOnCommit; // 0x413(0x01)
	Unknown SelectAllTextOnCommit; // 0x414(0x01)
	Unknown AllowContextMenu; // 0x415(0x01)
	Unknown KeyboardType; // 0x416(0x01)
	Unknown VirtualKeyboardOptions; // 0x417(0x01)
	Unknown VirtualKeyboardTrigger; // 0x418(0x01)
	Unknown VirtualKeyboardDismissAction; // 0x419(0x01)
	Unknown Justification; // 0x41a(0x01)
	Unknown ShapedTextOptions; // 0x41b(0x03)
	struct FMulticastInlineDelegate OnTextChanged; // 0x420(0x10)
	struct FMulticastInlineDelegate OnTextCommitted; // 0x430(0x10)
	struct FText Text; // 0x108(0x18)
	struct FDelegate TextDelegate; // 0x120(0x10)
	Unknown WidgetStyle; // 0x130(0x7f0)
	Unknown Style; // 0x920(0x08)
	struct FText HintText; // 0x928(0x18)
	struct FDelegate HintTextDelegate; // 0x940(0x10)
	Unknown Font; // 0x950(0x50)
	Unknown ForegroundColor; // 0x9a0(0x10)
	Unknown BackgroundColor; // 0x9b0(0x10)
	Unknown ReadOnlyForegroundColor; // 0x9c0(0x10)
	Unknown IsReadOnly; // 0x9d0(0x01)
	Unknown IsPassword; // 0x9d1(0x01)
	float MinimumDesiredWidth; // 0x9d4(0x04)
	Unknown Padding; // 0x9d8(0x10)
	Unknown IsCaretMovedWhenGainFocus; // 0x9e8(0x01)
	Unknown SelectAllTextWhenFocused; // 0x9e9(0x01)
	Unknown RevertTextOnEscape; // 0x9ea(0x01)
	Unknown ClearKeyboardFocusOnCommit; // 0x9eb(0x01)
	Unknown SelectAllTextOnCommit; // 0x9ec(0x01)
	Unknown AllowContextMenu; // 0x9ed(0x01)
	Unknown KeyboardType; // 0x9ee(0x01)
	Unknown VirtualKeyboardOptions; // 0x9ef(0x01)
	Unknown VirtualKeyboardTrigger; // 0x9f0(0x01)
	Unknown VirtualKeyboardDismissAction; // 0x9f1(0x01)
	Unknown Justification; // 0x9f2(0x01)
	Unknown ShapedTextOptions; // 0x9f3(0x03)
	struct FMulticastInlineDelegate OnTextChanged; // 0x9f8(0x10)
	struct FMulticastInlineDelegate OnTextCommitted; // 0xa08(0x10)
	Unknown Style; // 0x110(0x120)
	Unknown BorderBrush; // 0x230(0x88)
	Unknown BorderColor; // 0x2b8(0x28)
	Unknown bIsExpanded; // 0x2e0(0x01)
	float MaxHeight; // 0x2e4(0x04)
	Unknown HeaderPadding; // 0x2e8(0x10)
	Unknown AreaPadding; // 0x2f8(0x10)
	struct FMulticastInlineDelegate OnExpansionChanged; // 0x308(0x10)
	Unknown HeaderContent; // 0x318(0x08)
	Unknown BodyContent; // 0x320(0x08)
	Unknown ColumnFill; // 0x120(0x10)
	Unknown RowFill; // 0x130(0x10)
	Unknown Padding; // 0x38(0x10)
	Unknown HorizontalAlignment; // 0x48(0x01)
	Unknown VerticalAlignment; // 0x49(0x01)
	int32_t Row; // 0x4c(0x04)
	int32_t RowSpan; // 0x50(0x04)
	int32_t Column; // 0x54(0x04)
	int32_t ColumnSpan; // 0x58(0x04)
	int32_t Layer; // 0x5c(0x04)
	Unknown Nudge; // 0x60(0x08)
	Unknown Padding; // 0x40(0x10)
	Unknown Size; // 0x50(0x08)
	Unknown HorizontalAlignment; // 0x58(0x01)
	Unknown VerticalAlignment; // 0x59(0x01)
	Unknown Brush; // 0x108(0x88)
	struct FDelegate BrushDelegate; // 0x190(0x10)
	Unknown ColorAndOpacity; // 0x1a0(0x10)
	struct FDelegate ColorAndOpacityDelegate; // 0x1b0(0x10)
	Unknown bFlipForRightToLeftFlowDirection; // 0x1c0(0x01)
	struct FDelegate OnMouseButtonDownEv; // 0x1c4(0x10)
	Unknown WidgetStyle; // 0x108(0x278)
	Unknown TextStyle; // 0x380(0x268)
	Unknown SelectedKey; // 0x5e8(0x20)
	Unknown Font; // 0x608(0x50)
	Unknown Margin; // 0x658(0x10)
	Unknown ColorAndOpacity; // 0x668(0x10)
	struct FText KeySelectionText; // 0x678(0x18)
	struct FText NoKeySpecifiedText; // 0x690(0x18)
	Unknown bAllowModifierKeys; // 0x6a8(0x01)
	Unknown bAllowGamepadKeys; // 0x6a9(0x01)
	Unknown EscapeKeys; // 0x6b0(0x10)
	struct FMulticastInlineDelegate OnKeySelected; // 0x6c0(0x10)
	struct FMulticastInlineDelegate OnIsSelectingKeyChanged; // 0x6d0(0x10)
	Unknown bCanCache; // 0x120(0x01)
	Unknown CacheRelativeTransforms; // 0x121(0x01)
	Unknown EntryWidgetClass; // 0x108(0x08)
	float WheelScrollMultiplier; // 0x110(0x04)
	Unknown bEnableScrollAnimation; // 0x114(0x01)
	Unknown bEnableFixedLineOffset; // 0x115(0x01)
	float FixedLineScrollOffset; // 0x118(0x04)
	struct FMulticastInlineDelegate BP_OnEntryGenerated; // 0x120(0x10)
	struct FMulticastInlineDelegate BP_OnEntryReleased; // 0x130(0x10)
	Unknown EntryWidgetPool; // 0x140(0x80)
	Unknown Orientation; // 0x2d8(0x01)
	Unknown SelectionMode; // 0x2d9(0x01)
	Unknown ConsumeMouseWheel; // 0x2da(0x01)
	Unknown bClearSelectionOnClick; // 0x2db(0x01)
	Unknown bIsFocusable; // 0x2dc(0x01)
	float EntrySpacing; // 0x2e0(0x04)
	Unknown bReturnFocusToSelection; // 0x2e4(0x01)
	Unknown ListItems; // 0x2e8(0x10)
	struct FMulticastInlineDelegate BP_OnEntryInitialized; // 0x308(0x10)
	struct FMulticastInlineDelegate BP_OnItemClicked; // 0x318(0x10)
	struct FMulticastInlineDelegate BP_OnItemDoubleClicked; // 0x328(0x10)
	struct FMulticastInlineDelegate BP_OnItemIsHoveredChanged; // 0x338(0x10)
	struct FMulticastInlineDelegate BP_OnItemSelectionChanged; // 0x348(0x10)
	struct FMulticastInlineDelegate BP_OnItemScrolledIntoView; // 0x358(0x10)
	Unknown MenuClass; // 0x120(0x08)
	struct FDelegate OnGetMenuContentEvent; // 0x128(0x10)
	Unknown Placement; // 0x138(0x01)
	Unknown bFitInWindow; // 0x139(0x01)
	Unknown ShouldDeferPaintingAfterWindowContenj; // 0x13a(0x01)
	Unknown UseApplicationMenuStack; // 0x13b(0x01)
	struct FMulticastInlineDelegate OnMenuOpenChanged; // 0x140(0x10)
	Unknown TransformMask; // 0xe0(0x04)
	Unknown Translation; // 0xe8(0x140)
	Unknown Rotation; // 0x228(0xa0)
	Unknown Scale; // 0x2c8(0x140)
	Unknown Shear; // 0x408(0x140)
	Unknown TopCurve; // 0xe0(0xa0)
	Unknown LeftCurve; // 0x180(0xa0)
	Unknown RightCurve; // 0x220(0xa0)
	Unknown BottomCurve; // 0x2c0(0xa0)
	Unknown BrushPropertyNamePath; // 0x68(0x10)
	struct FName TrackName; // 0x78(0x08)
	Unknown ShapedTextOptions; // 0x108(0x03)
	Unknown Justification; // 0x10b(0x01)
	Unknown WrappingPolicy; // 0x10c(0x01)
	Unknown AutoWrapText; // 0x10d(0x01)
	float WrapTextAt; // 0x110(0x04)
	Unknown Margin; // 0x114(0x10)
	float LineHeightPercentage; // 0x124(0x04)
	struct FText Text; // 0x128(0x18)
	struct FText HintText; // 0x140(0x18)
	struct FDelegate HintTextDelegate; // 0x158(0x10)
	Unknown WidgetStyle; // 0x168(0x268)
	Unknown bIsReadOnly; // 0x3d0(0x01)
	Unknown Font; // 0x3d8(0x50)
	Unknown SelectAllTextWhenFocused; // 0x428(0x01)
	Unknown ClearTextSelectionOnFocusLoss; // 0x429(0x01)
	Unknown RevertTextOnEscape; // 0x42a(0x01)
	Unknown ClearKeyboardFocusOnCommit; // 0x42b(0x01)
	Unknown AllowContextMenu; // 0x42c(0x01)
	Unknown VirtualKeyboardOptions; // 0x42d(0x01)
	Unknown VirtualKeyboardDismissAction; // 0x42e(0x01)
	struct FMulticastInlineDelegate OnTextChanged; // 0x430(0x10)
	struct FMulticastInlineDelegate OnTextCommitted; // 0x440(0x10)
	struct FText Text; // 0x128(0x18)
	struct FText HintText; // 0x140(0x18)
	struct FDelegate HintTextDelegate; // 0x158(0x10)
	Unknown WidgetStyle; // 0x168(0x7f0)
	Unknown TextStyle; // 0x958(0x268)
	Unknown bIsReadOnly; // 0xbc0(0x01)
	Unknown AllowContextMenu; // 0xbc1(0x01)
	Unknown VirtualKeyboardOptions; // 0xbc2(0x01)
	Unknown VirtualKeyboardDismissAction; // 0xbc3(0x01)
	Unknown Style; // 0xbc8(0x08)
	Unknown Font; // 0xbd0(0x50)
	Unknown ForegroundColor; // 0xc20(0x10)
	Unknown BackgroundColor; // 0xc30(0x10)
	Unknown ReadOnlyForegroundColor; // 0xc40(0x10)
	struct FMulticastInlineDelegate OnTextChanged; // 0xc50(0x10)
	struct FMulticastInlineDelegate OnTextCommitted; // 0xc60(0x10)
	Unknown Padding; // 0x40(0x10)
	Unknown HorizontalAlignment; // 0x50(0x01)
	Unknown VerticalAlignment; // 0x51(0x01)
	Unknown WidgetStyle; // 0x108(0x1a0)
	Unknown Style; // 0x2a8(0x08)
	Unknown BackgroundImage; // 0x2b0(0x08)
	Unknown FillImage; // 0x2b8(0x08)
	Unknown MarqueeImage; // 0x2c0(0x08)
	float Percent; // 0x2c8(0x04)
	Unknown BarFillType; // 0x2cc(0x01)
	Unknown bIsMarquee; // 0x2cd(0x01)
	Unknown BorderPadding; // 0x2d0(0x08)
	struct FDelegate PercentDelegate; // 0x2d8(0x10)
	Unknown FillColorAndOpacity; // 0x2e8(0x10)
	struct FDelegate FillColorAndOpacityDelegate; // 0x2f8(0x10)
	Unknown RenderOnInvalidation; // 0x120(0x01)
	Unknown RenderOnPhase; // 0x121(0x01)
	int32_t Phase; // 0x124(0x04)
	int32_t PhaseCount; // 0x128(0x04)
	Unknown EffectMaterial; // 0x130(0x08)
	struct FName TextureParameter; // 0x138(0x08)
	struct FText Text; // 0x128(0x18)
	Unknown TextStyleSet; // 0x140(0x08)
	Unknown DecoratorClasses; // 0x148(0x10)
	Unknown bOverrideDefaultStyle; // 0x158(0x01)
	Unknown DefaultTextStyleOverride; // 0x160(0x268)
	float MinDesiredWidth; // 0x3c8(0x04)
	Unknown InstanceDecorators; // 0x638(0x10)
	Unknown ImageSet; // 0x28(0x08)
	Unknown PadLeft; // 0x120(0x01)
	Unknown PadRight; // 0x121(0x01)
	Unknown PadTop; // 0x122(0x01)
	Unknown PadBottom; // 0x123(0x01)
	Unknown bIsTitleSafe; // 0x38(0x01)
	Unknown SafeAreaScale; // 0x3c(0x10)
	Unknown HAlign; // 0x4c(0x01)
	Unknown VAlign; // 0x4d(0x01)
	Unknown Padding; // 0x50(0x10)
	Unknown Stretch; // 0x120(0x01)
	Unknown StretchDirection; // 0x121(0x01)
	float UserSpecifiedScale; // 0x124(0x04)
	Unknown IgnoreInheritedScale; // 0x128(0x01)
	Unknown Padding; // 0x38(0x10)
	Unknown HorizontalAlignment; // 0x48(0x01)
	Unknown VerticalAlignment; // 0x49(0x01)
	Unknown WidgetStyle; // 0x108(0x4d0)
	Unknown Style; // 0x5d8(0x08)
	Unknown bAlwaysShowScrollbar; // 0x5e0(0x01)
	Unknown bAlwaysShowScrollbarTrack; // 0x5e1(0x01)
	Unknown Orientation; // 0x5e2(0x01)
	Unknown Thickness; // 0x5e4(0x08)
	Unknown Padding; // 0x5ec(0x10)
	Unknown WidgetStyle; // 0x120(0x228)
	Unknown WidgetBarStyle; // 0x348(0x4d0)
	Unknown Style; // 0x818(0x08)
	Unknown BarStyle; // 0x820(0x08)
	Unknown Orientation; // 0x828(0x01)
	Unknown ScrollBarVisibility; // 0x829(0x01)
	Unknown ConsumeMouseWheel; // 0x82a(0x01)
	Unknown ScrollbarThickness; // 0x82c(0x08)
	Unknown ScrollbarPadding; // 0x834(0x10)
	Unknown AlwaysShowScrollbar; // 0x844(0x01)
	Unknown AlwaysShowScrollbarTrack; // 0x845(0x01)
	Unknown AllowOverscroll; // 0x846(0x01)
	Unknown bAnimateWheelScrolling; // 0x847(0x01)
	Unknown NavigationDestination; // 0x848(0x01)
	float NavigationScrollPadding; // 0x84c(0x04)
	Unknown ScrollWhenFocusChanges; // 0x850(0x01)
	Unknown bAllowRightClickDragScrolling; // 0x851(0x01)
	float WheelScrollMultiplier; // 0x854(0x04)
	struct FMulticastInlineDelegate OnUserScrolled; // 0x858(0x10)
	Unknown Padding; // 0x38(0x10)
	Unknown HorizontalAlignment; // 0x48(0x01)
	Unknown VerticalAlignment; // 0x49(0x01)
	float WidthOverride; // 0x130(0x04)
	float HeightOverride; // 0x134(0x04)
	float MinDesiredWidth; // 0x138(0x04)
	float MinDesiredHeight; // 0x13c(0x04)
	float MaxDesiredWidth; // 0x140(0x04)
	float MaxDesiredHeight; // 0x144(0x04)
	float MinAspectRatio; // 0x148(0x04)
	float MaxAspectRatio; // 0x14c(0x04)
	Unknown bOverride_WidthOverride; // 0x150(0x01)
	Unknown bOverride_HeightOverride; // 0x150(0x01)
	Unknown bOverride_MinDesiredWidth; // 0x150(0x01)
	Unknown bOverride_MinDesiredHeight; // 0x150(0x01)
	Unknown bOverride_MaxDesiredWidth; // 0x150(0x01)
	Unknown bOverride_MaxDesiredHeight; // 0x150(0x01)
	Unknown bOverride_MinAspectRatio; // 0x150(0x01)
	Unknown bOverride_MaxAspectRatio; // 0x150(0x01)
	Unknown Padding; // 0x38(0x10)
	Unknown HorizontalAlignment; // 0x58(0x01)
	Unknown VerticalAlignment; // 0x59(0x01)
	Unknown VertexData; // 0x28(0x10)
	Unknown IndexData; // 0x38(0x10)
	Unknown Material; // 0x48(0x08)
	Unknown ExtentMin; // 0x50(0x08)
	Unknown ExtentMax; // 0x58(0x08)
	Unknown bCanChildrenBeAccessible; // 0x28(0x01)
	Unknown AccessibleBehavior; // 0x29(0x01)
	Unknown AccessibleSummaryBehavior; // 0x2a(0x01)
	struct FText AccessibleText; // 0x30(0x18)
	struct FDelegate AccessibleTextDelegate; // 0x48(0x10)
	struct FText AccessibleSummaryText; // 0x58(0x18)
	struct FDelegate AccessibleSummaryTextDelegate; // 0x70(0x10)
	float Value; // 0x108(0x04)
	struct FDelegate ValueDelegate; // 0x10c(0x10)
	float MinValue; // 0x11c(0x04)
	float MaxValue; // 0x120(0x04)
	Unknown WidgetStyle; // 0x128(0x340)
	Unknown Orientation; // 0x468(0x01)
	Unknown SliderBarColor; // 0x46c(0x10)
	Unknown SliderHandleColor; // 0x47c(0x10)
	Unknown IndentHandle; // 0x48c(0x01)
	Unknown Locked; // 0x48d(0x01)
	Unknown MouseUsesStep; // 0x48e(0x01)
	Unknown RequiresControllerLock; // 0x48f(0x01)
	float StepSize; // 0x490(0x04)
	Unknown IsFocusable; // 0x494(0x01)
	struct FMulticastInlineDelegate OnMouseCaptureBegin; // 0x498(0x10)
	struct FMulticastInlineDelegate OnMouseCaptureEnd; // 0x4a8(0x10)
	struct FMulticastInlineDelegate OnControllerCaptureBegin; // 0x4b8(0x10)
	struct FMulticastInlineDelegate OnControllerCaptureEnd; // 0x4c8(0x10)
	struct FMulticastInlineDelegate OnValueChanged; // 0x4d8(0x10)
	Unknown Size; // 0x108(0x08)
	float Value; // 0x108(0x04)
	struct FDelegate ValueDelegate; // 0x10c(0x10)
	Unknown WidgetStyle; // 0x120(0x2e8)
	Unknown Style; // 0x408(0x08)
	int32_t MinFractionalDigits; // 0x410(0x04)
	int32_t MaxFractionalDigits; // 0x414(0x04)
	Unknown bAlwaysUsesDeltaSnap; // 0x418(0x01)
	float Delta; // 0x41c(0x04)
	float SliderExponent; // 0x420(0x04)
	Unknown Font; // 0x428(0x50)
	Unknown Justification; // 0x478(0x01)
	float MinDesiredWidth; // 0x47c(0x04)
	Unknown ClearKeyboardFocusOnCommit; // 0x480(0x01)
	Unknown SelectAllTextOnCommit; // 0x481(0x01)
	Unknown ForegroundColor; // 0x488(0x28)
	struct FMulticastInlineDelegate OnValueChanged; // 0x4b0(0x10)
	struct FMulticastInlineDelegate OnValueCommitted; // 0x4c0(0x10)
	struct FMulticastInlineDelegate OnBeginSliderMovement; // 0x4d0(0x10)
	struct FMulticastInlineDelegate OnEndSliderMovement; // 0x4e0(0x10)
	Unknown bOverride_MinValue; // 0x4f0(0x01)
	Unknown bOverride_MaxValue; // 0x4f0(0x01)
	Unknown bOverride_MinSliderValue; // 0x4f0(0x01)
	Unknown bOverride_MaxSliderValue; // 0x4f0(0x01)
	float MinValue; // 0x4f4(0x04)
	float MaxValue; // 0x4f8(0x04)
	float MinSliderValue; // 0x4fc(0x04)
	float MaxSliderValue; // 0x500(0x04)
	struct FText Text; // 0x128(0x18)
	struct FDelegate TextDelegate; // 0x140(0x10)
	Unknown ColorAndOpacity; // 0x150(0x28)
	struct FDelegate ColorAndOpacityDelegate; // 0x178(0x10)
	Unknown Font; // 0x188(0x50)
	Unknown StrikeBrush; // 0x1d8(0x88)
	Unknown ShadowOffset; // 0x260(0x08)
	Unknown ShadowColorAndOpacity; // 0x268(0x10)
	struct FDelegate ShadowColorAndOpacityDelegate; // 0x278(0x10)
	float MinDesiredWidth; // 0x288(0x04)
	Unknown bWrapWithInvalidationPanel; // 0x28c(0x01)
	Unknown bAutoWrapText; // 0x28d(0x01)
	Unknown bSimpleTextMode; // 0x28e(0x01)
	int32_t NumberOfPieces; // 0x108(0x04)
	Unknown bAnimateHorizontally; // 0x10c(0x01)
	Unknown bAnimateVertically; // 0x10d(0x01)
	Unknown bAnimateOpacity; // 0x10e(0x01)
	Unknown PieceImage; // 0x110(0x08)
	Unknown Image; // 0x118(0x88)
	float EntryHeight; // 0x368(0x04)
	float EntryWidth; // 0x36c(0x04)
	Unknown TileAlignment; // 0x370(0x01)
	Unknown bWrapHorizontalNavigation; // 0x371(0x01)
	struct FDelegate BP_OnGetItemChildren; // 0x378(0x10)
	struct FMulticastInlineDelegate BP_OnItemExpansionChanged; // 0x388(0x10)
	Unknown Animation; // 0x408(0x08)
	Unknown SlotPadding; // 0x120(0x10)
	float MinDesiredSlotWidth; // 0x130(0x04)
	float MinDesiredSlotHeight; // 0x134(0x04)
	Unknown HorizontalAlignment; // 0x38(0x01)
	Unknown VerticalAlignment; // 0x39(0x01)
	int32_t Row; // 0x3c(0x04)
	int32_t Column; // 0x40(0x04)
	Unknown Size; // 0x38(0x08)
	Unknown Padding; // 0x40(0x10)
	Unknown HorizontalAlignment; // 0x58(0x01)
	Unknown VerticalAlignment; // 0x59(0x01)
	Unknown BackgroundColor; // 0x120(0x10)
	Unknown MovieScene; // 0x348(0x08)
	Unknown AnimationBindings; // 0x350(0x10)
	Unknown bLegacyFinishOnStop; // 0x360(0x01)
	struct FString DisplayLabel; // 0x368(0x10)
	Unknown WidgetAnimationDelegateBindings; // 0x28(0x10)
	struct FMulticastInlineDelegate Finished; // 0x28(0x10)
	Unknown WidgetTree; // 0x3c8(0x08)
	Unknown bAllowTemplate; // 0x3d0(0x01)
	Unknown bAllowDynamicCreation; // 0x3d0(0x01)
	Unknown bValidTemplate; // 0x3d0(0x01)
	Unknown bTemplateInitialized; // 0x3d0(0x01)
	Unknown bCookedTemplate; // 0x3d0(0x01)
	Unknown bClassRequiresNativ; // 0x3d0(0x01)
	Unknown Bindings; // 0x3d8(0x10)
	Unknown Animations; // 0x3e8(0x10)
	Unknown NamedSlots; // 0x3f8(0x10)
	Unknown TemplateAsset; // 0x408(0x28)
	Unknown Template; // 0x430(0x08)
	Unknown Space; // 0x4e8(0x01)
	Unknown TimingPolicy; // 0x4e9(0x01)
	Unknown WidgetClass; // 0x4f0(0x08)
	Unknown DrawSize; // 0x4f8(0x08)
	Unknown bManuallyRedraw; // 0x500(0x01)
	Unknown bRedrawRequested; // 0x501(0x01)
	float RedrawTime; // 0x504(0x04)
	Unknown CurrentDrawSize; // 0x510(0x08)
	Unknown bDrawAtDesiredSize; // 0x518(0x01)
	Unknown Pivot; // 0x51c(0x08)
	Unknown bReceiveHardwareInput; // 0x524(0x01)
	Unknown bWindowFocusable; // 0x525(0x01)
	Unknown WindowVisibility; // 0x526(0x01)
	Unknown bApplyGammaCorrection; // 0x527(0x01)
	Unknown OwnerPlayer; // 0x528(0x08)
	Unknown BackgroundColor; // 0x530(0x10)
	Unknown TintColorAndOpacity; // 0x540(0x10)
	float OpacityFromTexture; // 0x550(0x04)
	Unknown BlendMode; // 0x554(0x01)
	Unknown bIsTwoSided; // 0x555(0x01)
	Unknown TickWhenOffscreen; // 0x556(0x01)
	Unknown Widget; // 0x558(0x08)
	Unknown BodySetup; // 0x580(0x08)
	Unknown TranslucentMaterial; // 0x588(0x08)
	Unknown TranslucentMaterial_OneSided; // 0x590(0x08)
	Unknown OpaqueMaterial; // 0x598(0x08)
	Unknown OpaqueMaterial_OneSided; // 0x5a0(0x08)
	Unknown MaskedMaterial; // 0x5a8(0x08)
	Unknown MaskedMaterial_OneSided; // 0x5b0(0x08)
	Unknown RenderTarget; // 0x5b8(0x08)
	Unknown MaterialInstance; // 0x5c0(0x08)
	Unknown bAddedToScreen; // 0x5c8(0x01)
	Unknown bEditTimeUsable; // 0x5c9(0x01)
	struct FName SharedLayerName; // 0x5cc(0x08)
	int32_t LayerZOrder; // 0x5d4(0x04)
	Unknown GeometryMode; // 0x5d8(0x01)
	float CylinderArcAngle; // 0x5dc(0x04)
	struct FMulticastInlineDelegate OnHoveredWidgetChanged; // 0x238(0x10)
	int32_t VirtualUserIndex; // 0x258(0x04)
	float PointerIndex; // 0x25c(0x04)
	Unknown TraceChannel; // 0x260(0x01)
	float InteractionDistance; // 0x264(0x04)
	Unknown InteractionSource; // 0x268(0x01)
	Unknown bEnableHitTesting; // 0x269(0x01)
	Unknown bShowDebug; // 0x26a(0x01)
	Unknown DebugColor; // 0x26c(0x10)
	Unknown CustomHitResult; // 0x2f8(0x88)
	Unknown LocalHitLocation; // 0x380(0x08)
	Unknown LastLocalHitLocation; // 0x388(0x08)
	Unknown HoveredWidgetComponent; // 0x390(0x08)
	Unknown LastHitResult; // 0x398(0x88)
	Unknown bIsHoveredWidgetInteractable; // 0x420(0x01)
	Unknown bIsHoveredWidgetFocusable; // 0x421(0x01)
	Unknown bIsHoveredWidgetHitTestVisible; // 0x422(0x01)
	Unknown Up; // 0x28(0x24)
	Unknown Down; // 0x4c(0x24)
	Unknown Left; // 0x70(0x24)
	Unknown Right; // 0x94(0x24)
	Unknown Next; // 0xb8(0x24)
	Unknown Previous; // 0xdc(0x24)
	int32_t ActiveWidgetIndex; // 0x120(0x04)
	Unknown Padding; // 0x40(0x10)
	Unknown HorizontalAlignment; // 0x50(0x01)
	Unknown VerticalAlignment; // 0x51(0x01)
	Unknown RootWidget; // 0x28(0x08)
	Unknown bWindowButtonsEnabled; // 0x120(0x01)
	Unknown bDoubleClickTogglesFullscreen; // 0x121(0x01)
	Unknown Padding; // 0x38(0x10)
	Unknown HorizontalAlignment; // 0x48(0x01)
	Unknown VerticalAlignment; // 0x49(0x01)
	Unknown InnerSlotPadding; // 0x120(0x08)
	float WrapWidth; // 0x128(0x04)
	Unknown bExplicitWrapWidth; // 0x12c(0x01)
	Unknown HorizontalAlignment; // 0x12d(0x01)
	Unknown Padding; // 0x38(0x10)
	Unknown bFillEmptySpace; // 0x48(0x01)
	float FillSpanWhenLessThan; // 0x4c(0x04)
	Unknown HorizontalAlignment; // 0x50(0x01)
	Unknown VerticalAlignment; // 0x51(0x01)
	Unknown Owner; // 0x28(0x08)
	Unknown Sounds; // 0x30(0x50)
	struct FMulticastInlineDelegate ReadyForBindings; // 0xb0(0x10)
	struct FMulticastInlineDelegate BindingsReleased; // 0xc0(0x10)
	struct FMulticastInlineDelegate FinishLoad; // 0xd0(0x10)
	struct FMulticastInlineDelegate FailLoad; // 0xe0(0x10)
	struct FMulticastInlineDelegate StartLoading; // 0xf0(0x10)
	struct FMulticastInlineDelegate NavigateTo; // 0x100(0x10)
	struct FMulticastInlineDelegate JavaScriptEvent; // 0x110(0x10)
	struct FMulticastInlineDelegate UIGTScriptingReady; // 0x120(0x10)
	struct FDelegate LiveViewSizeRequested; // 0x130(0x10)
	Unknown Texture; // 0x158(0x08)
	Unknown Filter; // 0x160(0x01)
	Unknown bReceiveInput; // 0x161(0x01)
	Unknown bReceiveInputWhenTransparent; // 0x162(0x01)
	Unknown AllowPerformanceWarnings; // 0x163(0x01)
	float ExecuteJSTimersThresholdMs; // 0x164(0x04)
	float UpdateStylesAndLayoutThresholdMs; // 0x168(0x04)
	float RecordRenderingCommandsThresholdMs; // 0x16c(0x04)
	float PaintWarningThresholdMs; // 0x170(0x04)
	int32_t LayersCountThreshold; // 0x174(0x04)
	int32_t LayerWidthThreshold; // 0x178(0x04)
	int32_t LayerHeightThreshold; // 0x17c(0x04)
	Unknown bEnableAdditionalDefaultStyles; // 0x180(0x01)
	Unknown bDelayedUpdate; // 0x181(0x01)
	Unknown AudioWrapper; // 0x1f8(0x08)
	struct FString URL; // 0x230(0x10)
	int32_t Width; // 0x240(0x04)
	int32_t Height; // 0x244(0x04)
	Unknown ManualTexture; // 0x248(0x01)
	float ClickThroughAlphaThreshold; // 0x24c(0x04)
	Unknown Transparent; // 0x250(0x01)
	Unknown CoherentUIGTHUD; // 0x400(0x08)
	Unknown HUDMaterialName; // 0x230(0x18)
	Unknown HUDMaterial; // 0x248(0x08)
	Unknown HUDMaterialInstance; // 0x250(0x08)
	struct FMulticastInlineDelegate OnCoherentUIGTInputActorMouseButtonDown; // 0x310(0x10)
	struct FMulticastInlineDelegate OnCoherentUIGTInputActorMouseButtonUp; // 0x320(0x10)
	struct FMulticastInlineDelegate OnCoherentUIGTInputActorKeyDown; // 0x330(0x10)
	struct FMulticastInlineDelegate OnCoherentUIGTInputActorKeyUp; // 0x340(0x10)
	Unknown StructTypes; // 0xa8(0x10)
	struct FString EventName; // 0x28(0x10)
	struct FString LinkName; // 0xb0(0x10)
	Unknown Texture; // 0xc0(0x08)
	Unknown EnableLiveReload; // 0x28(0x01)
	int32_t InspectorPort; // 0x2c(0x04)
	int32_t WebdriverPort; // 0x30(0x04)
	Unknown EnableWebSecurity; // 0x34(0x01)
	Unknown EnableLocalization; // 0x35(0x01)
	Unknown RunAsynchronous; // 0x36(0x01)
	Unknown AllowPerformanceWarningsInEditor; // 0x37(0x01)
	Unknown ShowWarningsOnScreen; // 0x38(0x01)
	Unknown LogSeverity; // 0x39(0x01)
	Unknown bPaintToBackBuffer; // 0x3a(0x01)
	Unknown bRespectTitleSafeZone; // 0x3b(0x01)
	Unknown bRespectLetterboxing; // 0x3c(0x01)
	struct FString HUDMaterialName; // 0x40(0x10)
	struct FString CoUIResourcesRoot; // 0x50(0x10)
	Unknown TickWhileGameIsPaused; // 0x60(0x01)
	Unknown bUseLowerCaseNamesForAutoExposedProperties; // 0x61(0x01)
	Unknown MSAA; // 0x62(0x01)
	struct FString CookiesResource; // 0x68(0x10)
	struct FString LocalStorageFolder; // 0x78(0x10)
	Unknown UseCacheFile; // 0x88(0x01)
	Unknown UseReceivedFromServ; // 0x89(0x01)
	Unknown Owner; // 0x120(0x08)
	struct FMulticastInlineDelegate ReadyForBindings; // 0x128(0x10)
	struct FMulticastInlineDelegate BindingsReleased; // 0x138(0x10)
	struct FMulticastInlineDelegate FinishLoad; // 0x148(0x10)
	struct FMulticastInlineDelegate FailLoad; // 0x158(0x10)
	struct FMulticastInlineDelegate StartLoading; // 0x168(0x10)
	struct FMulticastInlineDelegate NavigateTo; // 0x178(0x10)
	struct FMulticastInlineDelegate JavaScriptEvent; // 0x188(0x10)
	struct FMulticastInlineDelegate UIGTScriptingReady; // 0x198(0x10)
	struct FMulticastInlineDelegate AkAudioEvent; // 0x1c0(0x10)
	struct FMulticastInlineDelegate KeyUpDelegate; // 0x1d0(0x10)
	struct FMulticastInlineDelegate KeyDownDelegate; // 0x1e0(0x10)
	struct FMulticastInlineDelegate MouseEventDelegate; // 0x1f0(0x10)
	Unknown Filter; // 0x200(0x01)
	Unknown bReceiveInput; // 0x201(0x01)
	Unknown InputPropagationBehaviour; // 0x202(0x01)
	Unknown bReceiveInputWhenTransparent; // 0x203(0x01)
	Unknown bGammaCorrectedMaterial; // 0x204(0x01)
	float TickPeriodInMinimizedGame; // 0x208(0x04)
	Unknown AllowPerformanceWarnings; // 0x20c(0x01)
	float ExecuteJSTimersThresholdMs; // 0x210(0x04)
	float UpdateStylesAndLayoutThresholdMs; // 0x214(0x04)
	float RecordRenderingCommandsThresholdMs; // 0x218(0x04)
	float PaintWarningThresholdMs; // 0x21c(0x04)
	int32_t LayersCountThreshold; // 0x220(0x04)
	int32_t LayerWidthThreshold; // 0x224(0x04)
	int32_t LayerHeightThreshold; // 0x228(0x04)
	Unknown bEnableAdditionalDefaultStyles; // 0x22c(0x01)
	Unknown AudioWrapper; // 0x2a0(0x08)
	struct FString URL; // 0x328(0x10)
	float ClickThroughAlphaThreshold; // 0x338(0x04)
	Unknown OffscreenCanvasRendering; // 0x33c(0x01)
	Unknown Transparent; // 0x33d(0x01)
	Unknown Components; // 0x28(0x10)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown BGImage; // 0x250(0x08)
	Unknown BorderImage; // 0x258(0x08)
	Unknown DisableImage; // 0x260(0x08)
	Unknown Image_177; // 0x268(0x08)
	Unknown ItemCount; // 0x270(0x08)
	Unknown ItemImage; // 0x278(0x08)
	Unknown WidgetReference; // 0x280(0x08)
	Unknown Lock; // 0x288(0x01)
	Unknown InventoryDragType; // 0x289(0x01)
	Unknown ChangeTarget; // 0x290(0x08)
	Unknown PlayerHUDRef; // 0x298(0x08)
	Unknown ChaosSolverActorSet; // 0x30(0x50)
	Unknown DataSourceType; // 0x80(0x01)
	int32_t DataProcessFrequency; // 0x84(0x04)
	int32_t MaxNumberOfDataEntriesToSpawn; // 0x88(0x04)
	Unknown DoSpawn; // 0x8c(0x01)
	Unknown SpawnMultiplierMinMax; // 0x90(0x08)
	float SpawnChance; // 0x98(0x04)
	Unknown ImpulseToSpawnMinMax; // 0x9c(0x08)
	Unknown SpeedToSpawnMinMax; // 0xa4(0x08)
	Unknown MassToSpawnMinMax; // 0xac(0x08)
	Unknown ExtentMinToSpawnMinMax; // 0xb4(0x08)
	Unknown ExtentMaxToSpawnMinMax; // 0xbc(0x08)
	Unknown VolumeToSpawnMinMax; // 0xc4(0x08)
	Unknown SolverTimeToSpawnMinMax; // 0xcc(0x08)
	int32_t SurfaceTypeToSpawn; // 0xd4(0x04)
	Unknown LocationFilteringMode; // 0xd8(0x01)
	Unknown LocationXToSpawn; // 0xd9(0x01)
	Unknown LocationXToSpawnMinMax; // 0xdc(0x08)
	Unknown LocationYToSpawn; // 0xe4(0x01)
	Unknown LocationYToSpawnMinMax; // 0xe8(0x08)
	Unknown LocationZToSpawn; // 0xf0(0x01)
	Unknown LocationZToSpawnMinMax; // 0xf4(0x08)
	Unknown DataSortingType; // 0xfc(0x01)
	Unknown bGetExternalCollisionData; // 0xfd(0x01)
	Unknown DoSpatialHash; // 0xfe(0x01)
	Unknown SpatialHashVolumeMin; // 0x100(0x0c)
	Unknown SpatialHashVolumeMax; // 0x10c(0x0c)
	Unknown SpatialHashVolumeCellSize; // 0x118(0x0c)
	int32_t MaxDataPerCell; // 0x124(0x04)
	Unknown bApplyMaterialsFilter; // 0x128(0x01)
	Unknown ChaosBreakingMaterialSet; // 0x130(0x50)
	Unknown bGetExternalBreakingData; // 0x180(0x01)
	Unknown bGetExternalTrailingData; // 0x181(0x01)
	Unknown RandomPositionMagnitudeMinMax; // 0x184(0x08)
	float InheritedVelocityMultiplier; // 0x18c(0x04)
	Unknown RandomVelocityGenerationType; // 0x190(0x01)
	Unknown RandomVelocityMagnitudeMinMax; // 0x194(0x08)
	float SpreadAngleMax; // 0x19c(0x04)
	Unknown VelocityOffsetMin; // 0x1a0(0x0c)
	Unknown VelocityOffsetMax; // 0x1ac(0x0c)
	Unknown FinalVelocityMagnitudeMinMax; // 0x1b8(0x08)
	float MaxLatency; // 0x1c0(0x04)
	Unknown DebugType; // 0x1c4(0x01)
	int32_t LastSpawnedPointID; // 0x1c8(0x04)
	float LastSpawnTime; // 0x1cc(0x04)
	float SolverTime; // 0x1e0(0x04)
	float TimeStampOfLastProcessedData; // 0x1e4(0x04)
	float CharacterRotationVelocity; // 0x30(0x04)
	float CameraMoveVelocity; // 0x34(0x04)
	float CameraTop; // 0x38(0x04)
	float CameraBottom; // 0x3c(0x04)
	float CameraZoomVelocity; // 0x40(0x04)
	float CameraInterpSpeed; // 0x44(0x04)
	float CharacterRotationInterpSpeed; // 0x48(0x04)
	Unknown CameraMove; // 0x50(0x08)
	Unknown bIsPassthrough; // 0x1b40(0x01)
	Unknown UberGraphFrame; // 0x360(0x08)
	Unknown U; // 0x368(0x08)
	Unknown U; // 0x370(0x08)
	Unknown UW_SimpleResult; // 0x378(0x08)
	Unknown MainWidgetRef; // 0x380(0x08)
	Unknown PlayerHUDRef; // 0x388(0x08)
	Unknown UW_FinalResult; // 0x390(0x08)
	Unknown UW_Animation; // 0x398(0x08)
	Unknown PlayerControllerRef; // 0x3a0(0x08)
	Unknown NewResult; // 0x3a8(0x01)
	Unknown ResultData; // 0x3a9(0x04)
	Unknown IsGiveUp; // 0x3ad(0x01)
	float WinMatchEndResultShowTime; // 0x3b0(0x04)
	Unknown ResultMatchEndAnimation; // 0x3b4(0x02)
	float SocketErrorDisconnectDelay; // 0x1af0(0x04)
	Unknown LogPortUnreach; // 0x748(0x01)
	Unknown AllowPlayerPortUnreach; // 0x748(0x01)
	uint32_t MaxPortCountToTry; // 0x74c(0x04)
	uint32_t ServerDesiredSocketReceiveBufferBytes; // 0x75c(0x04)
	uint32_t ServerDesiredSocketSendBufferBytes; // 0x760(0x04)
	uint32_t ClientDesiredSocketReceiveBufferBytes; // 0x764(0x04)
	uint32_t ClientDesiredSocketSendBufferBytes; // 0x768(0x04)
	double MaxSecondsInReceive; // 0x770(0x08)
	int32_t NbPacketsBetweenReceiveTimeTest; // 0x778(0x04)
	float ResolutionConnectionTimeout; // 0x77c(0x04)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x28(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x38(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x28(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x38(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x28(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x38(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x28(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x38(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x28(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x38(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x28(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x38(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x28(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x38(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x28(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x38(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	float BeaconConnectionInitialTimeout; // 0x318(0x04)
	float BeaconConnectionTimeout; // 0x31c(0x04)
	Unknown NetDriver; // 0x320(0x08)
	Unknown BeaconOwner; // 0x340(0x08)
	Unknown BeaconConnection; // 0x348(0x08)
	Unknown ConnectionState; // 0x350(0x01)
	int32_t ListenPort; // 0x340(0x04)
	Unknown ClientActors; // 0x348(0x10)
	struct FString BeaconTypeName; // 0x310(0x10)
	Unknown ClientBeaconActorClass; // 0x320(0x08)
	Unknown ClientActors; // 0x328(0x10)
	struct FName VoiceSubsystemNameOverride; // 0x28(0x08)
	Unknown bOnlinePIEEnabled; // 0x38(0x01)
	Unknown Logins; // 0x40(0x10)
	Unknown bIsFromInvite; // 0x188(0x01)
	Unknown bHandlingDisconnect; // 0x189(0x01)
	struct FString DestSessionId; // 0x3d0(0x10)
	Unknown PendingReservation; // 0x3e0(0x50)
	Unknown RequestType; // 0x430(0x01)
	Unknown bPendingReservationSent; // 0x431(0x01)
	Unknown bCancelReservation; // 0x432(0x01)
	Unknown State; // 0x338(0x08)
	Unknown bLogoutOnSessionTimeout; // 0x3a0(0x01)
	float SessionTimeoutSecs; // 0x3a4(0x04)
	float TravelSessionTimeoutSecs; // 0x3a8(0x04)
	struct FName SessionName; // 0x28(0x08)
	int32_t NumConsumedReservations; // 0x30(0x04)
	int32_t MaxReservations; // 0x34(0x04)
	int32_t NumTeams; // 0x38(0x04)
	int32_t NumPlayersPerTeam; // 0x3c(0x04)
	struct FName TeamAssignmentMethod; // 0x40(0x08)
	int32_t ReservedHostTeamNum; // 0x48(0x04)
	int32_t ForceTeamNum; // 0x4c(0x04)
	Unknown bRestrictCrossConsole; // 0x50(0x01)
	Unknown bEnableRemovalRequests; // 0x51(0x01)
	Unknown Reservations; // 0x58(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	struct FString DestSessionId; // 0x3d0(0x10)
	Unknown PendingReservation; // 0x3e0(0x78)
	Unknown RequestType; // 0x458(0x01)
	Unknown bPendingReservationSent; // 0x459(0x01)
	Unknown bCancelReservation; // 0x45a(0x01)
	Unknown State; // 0x338(0x08)
	Unknown bLogoutOnSessionTimeout; // 0x3a0(0x01)
	float SessionTimeoutSecs; // 0x3a4(0x04)
	float TravelSessionTimeoutSecs; // 0x3a8(0x04)
	struct FName SessionName; // 0x28(0x08)
	int32_t NumConsumedReservations; // 0x30(0x04)
	int32_t MaxReservations; // 0x34(0x04)
	Unknown bRestrictCrossConsole; // 0x38(0x01)
	Unknown Reservations; // 0x40(0x10)
	Unknown NamedInterfaces; // 0x28(0x10)
	Unknown NamedInterfaceDefs; // 0x38(0x10)
	Unknown DirectorClass; // 0x28(0x08)
	Unknown VariantSets; // 0x30(0x10)
	Unknown LevelVariantSets; // 0x310(0x18)
	Unknown Properties; // 0x88(0x10)
	Unknown PropertyIndices; // 0x98(0x10)
	Unknown CapturedPropSegments; // 0xa8(0x10)
	struct FString FullDisplayString; // 0xb8(0x10)
	struct FName PropertySetterName; // 0xc8(0x08)
	Unknown PropertySetterParameterDefaults; // 0xd0(0x50)
	Unknown bHasRecordedData; // 0x120(0x01)
	Unknown LeafPropertyClass; // 0x128(0x08)
	Unknown ValueBytes; // 0x138(0x10)
	Unknown PropCategory; // 0x148(0x01)
	Unknown SceneComponent; // 0x328(0x08)
	int32_t LastSelectedOption; // 0x330(0x04)
	struct FText DisplayText; // 0x28(0x18)
	Unknown ObjectBindings; // 0x58(0x10)
	Unknown Thumbnail; // 0x68(0x08)
	struct FString CachedActorLabel; // 0x28(0x10)
	Unknown ObjectPtr; // 0x38(0x18)
	Unknown LazyObjectPtr; // 0x50(0x1c)
	Unknown CapturedProperties; // 0x70(0x10)
	Unknown FunctionCallers; // 0x80(0x10)
	struct FText DisplayText; // 0x28(0x18)
	Unknown bExpanded; // 0x58(0x01)
	Unknown Variants; // 0x60(0x10)
	Unknown bAutoDestroy; // 0x238(0x01)
	Unknown bStopWhenOwnerDestroyed; // 0x238(0x01)
	Unknown bAllowSpatialization; // 0x238(0x01)
	Unknown bOverrideAttenuation; // 0x238(0x01)
	Unknown bOutputToBusOnly; // 0x23c(0x01)
	Unknown AttenuationSettings; // 0x240(0x08)
	Unknown AttenuationOverrides; // 0x248(0x3a0)
	Unknown ConcurrencySettings; // 0x5e8(0x08)
	Unknown ConcurrencySet; // 0x5f0(0x50)
	Unknown SoundClass; // 0x640(0x08)
	Unknown SourceEffectChain; // 0x648(0x08)
	Unknown SoundSubmix; // 0x650(0x08)
	Unknown SoundSubmixSends; // 0x658(0x10)
	Unknown BusSends; // 0x668(0x10)
	Unknown Modulation; // 0x678(0x10)
	Unknown PreEffectBusSends; // 0x688(0x10)
	Unknown bIsUISound; // 0x698(0x01)
	Unknown bIsPreviewSound; // 0x698(0x01)
	int32_t EnvelopeFollowerAttackTime; // 0x69c(0x04)
	int32_t EnvelopeFollowerReleaseTime; // 0x6a0(0x04)
	struct FMulticastInlineDelegate OnAudioEnvelopeValue; // 0x6a8(0x10)
	Unknown Synth; // 0x6d8(0x08)
	Unknown AudioComponent; // 0x6e0(0x08)
	Unknown Settings; // 0xb8(0x50)
	Unknown Settings; // 0x78(0x10)
	Unknown Settings; // 0x9c(0x34)
	Unknown Settings; // 0xa0(0x38)
	Unknown OwningSynthComponent; // 0x360(0x08)
	Unknown Materials; // 0x30(0x10)
	Unknown Tracks; // 0x40(0x10)
	int32_t StartFrame; // 0x60(0x04)
	int32_t EndFrame; // 0x64(0x04)
	Unknown GeometryCacheComponent; // 0x310(0x08)
	Unknown TopologyRanges; // 0x28(0x10)
	int32_t DummyProperty; // 0x38(0x04)
	Unknown GeometryCache; // 0x4e8(0x08)
	Unknown bRunning; // 0x4f0(0x01)
	Unknown bLooping; // 0x4f1(0x01)
	float StartTimeOffset; // 0x4f4(0x04)
	float PlaybackSpeed; // 0x4f8(0x04)
	int32_t NumTracks; // 0x4fc(0x04)
	float ElapsedTime; // 0x500(0x04)
	float Duration; // 0x534(0x04)
	Unknown bManualTick; // 0x538(0x01)
	float Duration; // 0x28(0x04)
	uint32_t NumMeshSamples; // 0x58(0x04)
	Unknown Codec; // 0x58(0x08)
	float StartSampleTime; // 0xc8(0x04)
	Unknown Target; // 0x30(0x08)
	struct FName StateName; // 0x38(0x08)
	float Timer; // 0x40(0x04)
	Unknown Repeat; // 0x44(0x01)
	Unknown TimerHandle; // 0x48(0x08)
	struct FMulticastInlineDelegate OnSuccess; // 0x50(0x10)
	struct FMulticastInlineDelegate OnAborted; // 0x60(0x10)
	Unknown Target; // 0x30(0x08)
	Unknown StateID; // 0x38(0x01)
	float Timer; // 0x3c(0x04)
	Unknown Repeat; // 0x40(0x01)
	Unknown TimerHandle; // 0x48(0x08)
	struct FMulticastInlineDelegate OnSuccess; // 0x50(0x10)
	struct FMulticastInlineDelegate OnAborted; // 0x60(0x10)
	Unknown Target; // 0x30(0x08)
	Unknown Conditional; // 0x38(0x01)
	struct FName StateName; // 0x3c(0x08)
	float Timer; // 0x44(0x04)
	Unknown Repeat; // 0x48(0x01)
	Unknown TimerHandle; // 0x50(0x08)
	struct FMulticastInlineDelegate OnSuccess; // 0x58(0x10)
	struct FMulticastInlineDelegate OnAborted; // 0x68(0x10)
	Unknown Target; // 0x30(0x08)
	Unknown Conditional; // 0x38(0x01)
	Unknown StateID; // 0x39(0x01)
	float Timer; // 0x3c(0x04)
	Unknown Repeat; // 0x40(0x01)
	Unknown TimerHandle; // 0x48(0x08)
	struct FMulticastInlineDelegate OnSuccess; // 0x50(0x10)
	struct FMulticastInlineDelegate OnAborted; // 0x60(0x10)
	Unknown Target; // 0x30(0x08)
	struct FDelegate InBegin; // 0x38(0x10)
	struct FDelegate InExit; // 0x48(0x10)
	struct FName StateName; // 0x58(0x08)
	float Timer; // 0x60(0x04)
	Unknown Repeat; // 0x64(0x01)
	Unknown TimerHandle; // 0x68(0x08)
	struct FMulticastInlineDelegate OnSuccess; // 0x70(0x10)
	struct FMulticastInlineDelegate OnAborted; // 0x80(0x10)
	Unknown Target; // 0x30(0x08)
	struct FDelegate InBegin; // 0x38(0x10)
	struct FDelegate InExit; // 0x48(0x10)
	Unknown StateID; // 0x58(0x01)
	float Timer; // 0x5c(0x04)
	Unknown Repeat; // 0x60(0x01)
	Unknown TimerHandle; // 0x68(0x08)
	struct FMulticastInlineDelegate OnSuccess; // 0x70(0x10)
	struct FMulticastInlineDelegate OnAborted; // 0x80(0x10)
	Unknown Target; // 0x30(0x08)
	Unknown Conditional; // 0x38(0x01)
	struct FDelegate InBegin; // 0x3c(0x10)
	struct FDelegate InExit; // 0x4c(0x10)
	struct FName StateName; // 0x5c(0x08)
	float Timer; // 0x64(0x04)
	Unknown Repeat; // 0x68(0x01)
	Unknown TimerHandle; // 0x70(0x08)
	struct FMulticastInlineDelegate OnSuccess; // 0x78(0x10)
	struct FMulticastInlineDelegate OnAborted; // 0x88(0x10)
	Unknown Target; // 0x30(0x08)
	Unknown Conditional; // 0x38(0x01)
	struct FDelegate InBegin; // 0x3c(0x10)
	struct FDelegate InExit; // 0x4c(0x10)
	Unknown StateID; // 0x5c(0x01)
	float Timer; // 0x60(0x04)
	Unknown Repeat; // 0x64(0x01)
	Unknown TimerHandle; // 0x68(0x08)
	struct FMulticastInlineDelegate OnSuccess; // 0x70(0x10)
	struct FMulticastInlineDelegate OnAborted; // 0x80(0x10)
	Unknown Target; // 0x30(0x08)
	float Timer; // 0x38(0x04)
	Unknown TimerHandle; // 0x40(0x08)
	struct FMulticastInlineDelegate OnSuccess; // 0x48(0x10)
	struct FMulticastInlineDelegate OnAborted; // 0x58(0x10)
	Unknown Target; // 0x30(0x08)
	Unknown Conditional; // 0x38(0x01)
	struct FName FallbackState; // 0x3c(0x08)
	float Timer; // 0x44(0x04)
	Unknown TimerHandle; // 0x48(0x08)
	struct FMulticastInlineDelegate OnSuccess; // 0x50(0x10)
	struct FMulticastInlineDelegate OnAborted; // 0x60(0x10)
	Unknown Target; // 0x30(0x08)
	struct FDelegate InBegin; // 0x38(0x10)
	struct FDelegate InExit; // 0x48(0x10)
	float Timer; // 0x58(0x04)
	Unknown TimerHandle; // 0x60(0x08)
	struct FMulticastInlineDelegate OnSuccess; // 0x68(0x10)
	struct FMulticastInlineDelegate OnAborted; // 0x78(0x10)
	Unknown Target; // 0x30(0x08)
	Unknown Conditional; // 0x38(0x01)
	struct FDelegate InBegin; // 0x3c(0x10)
	struct FDelegate InExit; // 0x4c(0x10)
	struct FDelegate InFallback; // 0x5c(0x10)
	struct FName FallbackState; // 0x6c(0x08)
	float Timer; // 0x74(0x04)
	Unknown TimerHandle; // 0x78(0x08)
	struct FMulticastInlineDelegate OnSuccess; // 0x80(0x10)
	struct FMulticastInlineDelegate OnAborted; // 0x90(0x10)
	Unknown FSM; // 0x98(0x08)
	struct FName TargetFSM; // 0xa0(0x08)
	struct FName NewStateName; // 0xa8(0x08)
	Unknown Debug; // 0xb0(0x01)
	Unknown ForceSuccess; // 0xb1(0x01)
	Unknown FSM; // 0x98(0x08)
	struct FName TargetFSM; // 0xa0(0x08)
	struct FName StateName; // 0xa8(0x08)
	Unknown Debug; // 0xb0(0x01)
	Unknown ForceSuccess; // 0xb1(0x01)
	Unknown FSM; // 0x98(0x08)
	struct FName TargetFSM; // 0xa0(0x08)
	struct FName StateName; // 0xa8(0x08)
	Unknown Debug; // 0xb0(0x01)
	Unknown ForceSuccess; // 0xb1(0x01)
	Unknown FSM; // 0x98(0x08)
	struct FName TargetFSM; // 0xa0(0x08)
	struct FName StateName; // 0xa8(0x08)
	Unknown Debug; // 0xb0(0x01)
	Unknown ForceSuccess; // 0xb1(0x01)
	Unknown SGUID; // 0x28(0x10)
	int32_t PlayerId; // 0x38(0x04)
	Unknown Owner; // 0x3c(0x08)
	Unknown StateGraph; // 0x58(0x10)
	float MachineTime; // 0x68(0x04)
	struct FMulticastInlineDelegate _OnEntry; // 0x70(0x10)
	struct FMulticastInlineDelegate _OnExit; // 0x80(0x10)
	Unknown MachineData; // 0x90(0x50)
	Unknown EnableInterfaceStatePropagation; // 0x28(0x01)
	Unknown SuppressRPCWarnings; // 0x29(0x01)
	float DefaultTickInterval; // 0x2c(0x04)
	Unknown DefaultStates; // 0x30(0x10)
	Unknown MachineStack; // 0x30(0x10)
	Unknown FSM; // 0x268(0x08)
	Unknown OverrideFSM; // 0x270(0x01)
	struct FName TargetFSM; // 0x274(0x08)
	struct FName TargetASM; // 0x27c(0x08)
	Unknown FSM_ExitArguments; // 0xb8(0x0c)
	Unknown FSM_BeginArguments; // 0xc4(0x0c)
	Unknown FSM_UpdateArguments; // 0xd0(0x08)
	Unknown IsOverriden; // 0xe0(0x01)
	Unknown IsFullyInitialized; // 0xe1(0x01)
	Unknown StateID; // 0xe2(0x01)
	Unknown PreviousStateID; // 0xe3(0x01)
	float StateTime; // 0xe4(0x04)
	Unknown STATE_Null; // 0xe8(0x40)
	Unknown State; // 0x128(0x50)
	struct FDelegate InBegin; // 0x178(0x10)
	struct FDelegate InUpdate; // 0x188(0x10)
	struct FDelegate InExit; // 0x198(0x10)
	struct FName StartupState; // 0x1a8(0x08)
	Unknown States; // 0x1b0(0x10)
	Unknown LINKS; // 0x1c0(0x50)
	Unknown UseEnumFromCPP; // 0x210(0x01)
	struct FString CPP_EnumName; // 0x218(0x10)
	Unknown K2_Enumerator; // 0x228(0x08)
	Unknown ReplicationMode; // 0x230(0x01)
	Unknown BlueprintAutoFlowFSM; // 0x231(0x01)
	Unknown BlueprintAutoFlowTransitions; // 0x232(0x01)
	Unknown AlwaysTickFSM; // 0x233(0x01)
	Unknown ReplicateStateID; // 0x234(0x01)
	Unknown ReplicatePreviousStateID; // 0x235(0x01)
	Unknown ReplicateStateTime; // 0x236(0x01)
	Unknown Debug; // 0x237(0x01)
	struct FMulticastInlineDelegate OnInitialized; // 0x238(0x10)
	struct FMulticastInlineDelegate OnBegin; // 0x248(0x10)
	struct FMulticastInlineDelegate OnUpdate; // 0x258(0x10)
	struct FMulticastInlineDelegate OnExit; // 0x268(0x10)
	Unknown Image_SupplyBoxMarker; // 0x248(0x08)
	Unknown PersonalSupplyBox; // 0x250(0x08)
	Unknown WidgetSwitcher_2; // 0x258(0x08)
	struct FMulticastInlineDelegate OnMarkerClicked; // 0x260(0x10)
	Unknown CurrentMarker; // 0x270(0x08)
	Unknown MapCompRef; // 0x278(0x08)
	Unknown TmpPingTypeTexture; // 0x280(0x08)
	Unknown bUseComplexAsSimpleCollision; // 0x4f0(0x01)
	Unknown bUseAsyncCooking; // 0x4f1(0x01)
	Unknown ProcMeshBodySetup; // 0x4f8(0x08)
	Unknown ProcMeshSections; // 0x500(0x10)
	Unknown CollisionConvexElems; // 0x510(0x10)
	Unknown LocalBounds; // 0x520(0x1c)
	Unknown AsyncBodySetupQueue; // 0x540(0x10)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown Armory_Repair_M; // 0x250(0x08)
	Unknown Armory_Strengthen_M; // 0x258(0x08)
	Unknown Armory_Failed_M; // 0x260(0x08)
	Unknown Armory_Break_M; // 0x268(0x08)
	Unknown Armory_Failed_Break_M; // 0x270(0x08)
	Unknown Armory_Failed_Down_M; // 0x278(0x08)
	Unknown Armory_Awesome_M; // 0x280(0x08)
	Unknown Armory_Success_M; // 0x288(0x08)
	Unknown Armory_Awesome; // 0x290(0x08)
	Unknown Armory_Break; // 0x298(0x08)
	Unknown Armory_Failed; // 0x2a0(0x08)
	Unknown Armory_Failed_Break; // 0x2a8(0x08)
	Unknown Armory_Failed_Down; // 0x2b0(0x08)
	Unknown Armory_Repair; // 0x2b8(0x08)
	Unknown Armory_Strengthen; // 0x2c0(0x08)
	Unknown Armory_Success; // 0x2c8(0x08)
	Unknown Awesome_Damage1; // 0x2d0(0x08)
	Unknown Awesome_Damage2; // 0x2d8(0x08)
	Unknown Awesome_ItemName; // 0x2e0(0x08)
	Unknown Awesome_Level1; // 0x2e8(0x08)
	Unknown Awesome_Level2; // 0x2f0(0x08)
	Unknown Awesome_MagSize1; // 0x2f8(0x08)
	Unknown Awesome_MagSize2; // 0x300(0x08)
	Unknown Awesome_Spread1; // 0x308(0x08)
	Unknown Awesome_Spread2; // 0x310(0x08)
	Unknown Awesome_UpLevel; // 0x318(0x08)
	Unknown Break_Count; // 0x320(0x08)
	Unknown Break_ItemName; // 0x328(0x08)
	Unknown BreakTitle; // 0x330(0x08)
	Unknown Button_1; // 0x338(0x08)
	Unknown Button_2; // 0x340(0x08)
	Unknown Button_228; // 0x348(0x08)
	Unknown Button_230; // 0x350(0x08)
	Unknown Button_232; // 0x358(0x08)
	Unknown Button_233; // 0x360(0x08)
	Unknown Button_EnchanceCancle; // 0x368(0x08)
	Unknown Button_Enhance; // 0x370(0x08)
	Unknown Button_Fatigue; // 0x378(0x08)
	Unknown Empty; // 0x380(0x08)
	Unknown FB_Damage1; // 0x388(0x08)
	Unknown FB_Damage2; // 0x390(0x08)
	Unknown FB_Level1; // 0x398(0x08)
	Unknown FB_Level2; // 0x3a0(0x08)
	Unknown FB_MagSize1; // 0x3a8(0x08)
	Unknown FB_MagSize2; // 0x3b0(0x08)
	Unknown FB_Spread1; // 0x3b8(0x08)
	Unknown FB_Spread2; // 0x3c0(0x08)
	Unknown FD_Damage1; // 0x3c8(0x08)
	Unknown FD_Damage2; // 0x3d0(0x08)
	Unknown FD_DownLevel; // 0x3d8(0x08)
	Unknown FD_Level1; // 0x3e0(0x08)
	Unknown FD_Level2; // 0x3e8(0x08)
	Unknown FD_MagSize1; // 0x3f0(0x08)
	Unknown FD_MagSize2; // 0x3f8(0x08)
	Unknown FD_Spread1; // 0x400(0x08)
	Unknown FD_Spread2; // 0x408(0x08)
	Unknown HorizontalBox_Awesome_Damage; // 0x410(0x08)
	Unknown HorizontalBox_Awesome_MagSize; // 0x418(0x08)
	Unknown HorizontalBox_Awesome_Spread; // 0x420(0x08)
	Unknown HorizontalBox_FB_Damage; // 0x428(0x08)
	Unknown HorizontalBox_FB_MagSize; // 0x430(0x08)
	Unknown HorizontalBox_FB_Spread; // 0x438(0x08)
	Unknown HorizontalBox_FD_Damage; // 0x440(0x08)
	Unknown HorizontalBox_FD_MasSize; // 0x448(0x08)
	Unknown HorizontalBox_FD_Spread; // 0x450(0x08)
	Unknown HorizontalBox_Strengthen_Damage; // 0x458(0x08)
	Unknown HorizontalBox_Strengthen_MagSize; // 0x460(0x08)
	Unknown HorizontalBox_Strengthen_Spread; // 0x468(0x08)
	Unknown HorizontalBox_Success_Damage; // 0x470(0x08)
	Unknown HorizontalBox_Success_Durable; // 0x478(0x08)
	Unknown HorizontalBox_Success_Fatigue; // 0x480(0x08)
	Unknown HorizontalBox_Success_MagSize; // 0x488(0x08)
	Unknown HorizontalBox_Success_Spread; // 0x490(0x08)
	Unknown Image; // 0x498(0x08)
	Unknown Image_2; // 0x4a0(0x08)
	Unknown Image_3; // 0x4a8(0x08)
	Unknown Image_4; // 0x4b0(0x08)
	Unknown Image_8; // 0x4b8(0x08)
	Unknown Image_14; // 0x4c0(0x08)
	Unknown Image_15; // 0x4c8(0x08)
	Unknown Image_16; // 0x4d0(0x08)
	Unknown Image_17; // 0x4d8(0x08)
	Unknown Image_18; // 0x4e0(0x08)
	Unknown Image_20; // 0x4e8(0x08)
	Unknown Image_27; // 0x4f0(0x08)
	Unknown Image_167; // 0x4f8(0x08)
	Unknown Image_501; // 0x500(0x08)
	Unknown Image_503; // 0x508(0x08)
	Unknown Image_817; // 0x510(0x08)
	Unknown Image_820; // 0x518(0x08)
	Unknown Image_821; // 0x520(0x08)
	Unknown Image_822; // 0x528(0x08)
	Unknown Image_823; // 0x530(0x08)
	Unknown Image_824; // 0x538(0x08)
	Unknown Image_825; // 0x540(0x08)
	Unknown Image_826; // 0x548(0x08)
	Unknown Image_827; // 0x550(0x08)
	Unknown Image_828; // 0x558(0x08)
	Unknown Image_829; // 0x560(0x08)
	Unknown Image_830; // 0x568(0x08)
	Unknown Image_831; // 0x570(0x08)
	Unknown Image_832; // 0x578(0x08)
	Unknown Image_833; // 0x580(0x08)
	Unknown Image_834; // 0x588(0x08)
	Unknown Image_835; // 0x590(0x08)
	Unknown Image_836; // 0x598(0x08)
	Unknown Image_837; // 0x5a0(0x08)
	Unknown Image_838; // 0x5a8(0x08)
	Unknown Image_839; // 0x5b0(0x08)
	Unknown Image_840; // 0x5b8(0x08)
	Unknown Image_841; // 0x5c0(0x08)
	Unknown Image_842; // 0x5c8(0x08)
	Unknown Image_843; // 0x5d0(0x08)
	Unknown Image_845; // 0x5d8(0x08)
	Unknown Image_846; // 0x5e0(0x08)
	Unknown Image_847; // 0x5e8(0x08)
	Unknown Image_848; // 0x5f0(0x08)
	Unknown Image_849; // 0x5f8(0x08)
	Unknown Image_850; // 0x600(0x08)
	Unknown Image_851; // 0x608(0x08)
	Unknown Image_852; // 0x610(0x08)
	Unknown Image_853; // 0x618(0x08)
	Unknown Image_854; // 0x620(0x08)
	Unknown Image_855; // 0x628(0x08)
	Unknown Image_856; // 0x630(0x08)
	Unknown Image_857; // 0x638(0x08)
	Unknown Image_858; // 0x640(0x08)
	Unknown Image_859; // 0x648(0x08)
	Unknown Image_860; // 0x650(0x08)
	Unknown Image_861; // 0x658(0x08)
	Unknown Image_862; // 0x660(0x08)
	Unknown Image_863; // 0x668(0x08)
	Unknown Image_864; // 0x670(0x08)
	Unknown Image_865; // 0x678(0x08)
	Unknown Image_866; // 0x680(0x08)
	Unknown Image_867; // 0x688(0x08)
	Unknown Image_868; // 0x690(0x08)
	Unknown Image_921; // 0x698(0x08)
	Unknown Image_1264; // 0x6a0(0x08)
	Unknown Image_1266; // 0x6a8(0x08)
	Unknown Image_1269; // 0x6b0(0x08)
	Unknown Image_1270; // 0x6b8(0x08)
	Unknown Image_1271; // 0x6c0(0x08)
	Unknown Image_1272; // 0x6c8(0x08)
	Unknown Image_1273; // 0x6d0(0x08)
	Unknown Image_1277; // 0x6d8(0x08)
	Unknown Image_1278; // 0x6e0(0x08)
	Unknown Image_1279; // 0x6e8(0x08)
	Unknown Image_1280; // 0x6f0(0x08)
	Unknown Image_1284; // 0x6f8(0x08)
	Unknown Image_1285; // 0x700(0x08)
	Unknown Image_1318; // 0x708(0x08)
	Unknown Image_1319; // 0x710(0x08)
	Unknown Image_1320; // 0x718(0x08)
	Unknown Image_1321; // 0x720(0x08)
	Unknown Image_1322; // 0x728(0x08)
	Unknown Image_1323; // 0x730(0x08)
	Unknown Image_1324; // 0x738(0x08)
	Unknown Image_1329; // 0x740(0x08)
	Unknown Image_1330; // 0x748(0x08)
	Unknown Image_1335; // 0x750(0x08)
	Unknown Image_1336; // 0x758(0x08)
	Unknown Image_1341; // 0x760(0x08)
	Unknown Image_1342; // 0x768(0x08)
	Unknown Image_1343; // 0x770(0x08)
	Unknown Image_1344; // 0x778(0x08)
	Unknown Image_1345; // 0x780(0x08)
	Unknown Image_1346; // 0x788(0x08)
	Unknown Image_1347; // 0x790(0x08)
	Unknown Image_1348; // 0x798(0x08)
	Unknown Image_1349; // 0x7a0(0x08)
	Unknown Image_1350; // 0x7a8(0x08)
	Unknown Image_1351; // 0x7b0(0x08)
	Unknown Image_1352; // 0x7b8(0x08)
	Unknown Image_1353; // 0x7c0(0x08)
	Unknown Image_1354; // 0x7c8(0x08)
	Unknown Image_1355; // 0x7d0(0x08)
	Unknown Image_1356; // 0x7d8(0x08)
	Unknown Image_1358; // 0x7e0(0x08)
	Unknown Image_1359; // 0x7e8(0x08)
	Unknown Image_1361; // 0x7f0(0x08)
	Unknown Image_1362; // 0x7f8(0x08)
	Unknown Image_1363; // 0x800(0x08)
	Unknown Image_1364; // 0x808(0x08)
	Unknown Image_1366; // 0x810(0x08)
	Unknown Image_1368; // 0x818(0x08)
	Unknown Image_1369; // 0x820(0x08)
	Unknown Image_1370; // 0x828(0x08)
	Unknown Image_1372; // 0x830(0x08)
	Unknown Image_1374; // 0x838(0x08)
	Unknown Image_1375; // 0x840(0x08)
	Unknown Image_1376; // 0x848(0x08)
	Unknown Image_1378; // 0x850(0x08)
	Unknown Image_1380; // 0x858(0x08)
	Unknown Image_1381; // 0x860(0x08)
	Unknown Image_1382; // 0x868(0x08)
	Unknown Image_1384; // 0x870(0x08)
	Unknown Image_1972; // 0x878(0x08)
	Unknown ImageTX_Complete_Fail; // 0x880(0x08)
	Unknown ItemList; // 0x888(0x08)
	Unknown Overlay_FB_ItemList; // 0x890(0x08)
	Unknown Strengthen_Cost; // 0x898(0x08)
	Unknown Strengthen_Count; // 0x8a0(0x08)
	Unknown Strengthen_CurrentDamageText1; // 0x8a8(0x08)
	Unknown Strengthen_CurrentDamageText2; // 0x8b0(0x08)
	Unknown Strengthen_CurrentMagSizeText1; // 0x8b8(0x08)
	Unknown Strengthen_CurrentMagSizeText2; // 0x8c0(0x08)
	Unknown Strengthen_CurrentSpreadText1; // 0x8c8(0x08)
	Unknown Strengthen_CurrentSpreadText2; // 0x8d0(0x08)
	Unknown Strengthen_Icon; // 0x8d8(0x08)
	Unknown Strengthen_IconType1; // 0x8e0(0x08)
	Unknown Strengthen_IconType2; // 0x8e8(0x08)
	Unknown Strengthen_IconType3; // 0x8f0(0x08)
	Unknown Strengthen_Level1; // 0x8f8(0x08)
	Unknown Strengthen_Level2; // 0x900(0x08)
	Unknown Strengthen_Name; // 0x908(0x08)
	Unknown Strengthen_TextType1; // 0x910(0x08)
	Unknown Strengthen_TextType2; // 0x918(0x08)
	Unknown Strengthen_TextType3; // 0x920(0x08)
	Unknown Success_Damage1; // 0x928(0x08)
	Unknown Success_Damage2; // 0x930(0x08)
	Unknown Success_ItemName; // 0x938(0x08)
	Unknown Success_ItemName_2; // 0x940(0x08)
	Unknown Success_Level1; // 0x948(0x08)
	Unknown Success_Level2; // 0x950(0x08)
	Unknown Success_MagSize1; // 0x958(0x08)
	Unknown Success_MagSize2; // 0x960(0x08)
	Unknown Success_Spread1; // 0x968(0x08)
	Unknown Success_Spread2; // 0x970(0x08)
	Unknown Success_UpLevel; // 0x978(0x08)
	Unknown T_Durability; // 0x980(0x08)
	Unknown T_Fatigue; // 0x988(0x08)
	Unknown T_PreFatigue; // 0x990(0x08)
	Unknown TerrainHeight; // 0x998(0x08)
	Unknown TextBlock_2089; // 0x9a0(0x08)
	Unknown TextBlock_F; // 0x9a8(0x08)
	Unknown TextBlock_FBt; // 0x9b0(0x08)
	Unknown TextBlock_F; // 0x9b8(0x08)
	Unknown WidgetSwitcher_1; // 0x9c0(0x08)
	Unknown ResultInfo; // 0x9c8(0x38)
	float CurrentDurability; // 0xa00(0x04)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown WrapBox_Main; // 0x250(0x08)
	Unknown DefaultTextStyle; // 0x258(0x268)
	struct FText TextString; // 0x4c0(0x18)
	Unknown Game; // 0x4d8(0x08)
	Unknown HorizontalAlignment; // 0x4e0(0x01)
	float KeyImageScale; // 0x4e4(0x04)
	struct FString NodeName; // 0x30(0x10)
	Unknown TreeAsset; // 0x40(0x08)
	Unknown ParentNode; // 0x48(0x08)
	Unknown Services; // 0x58(0x10)
	Unknown bIgnoreRestartSelf; // 0x68(0x01)
	Unknown BlackboardKey; // 0x70(0x28)
	Unknown bStartAILogicOnPossess; // 0x3e8(0x01)
	Unknown bStopAILogicOnUnposses; // 0x3e8(0x01)
	Unknown bLOSflag; // 0x3e8(0x01)
	Unknown bSkipExtraLOSChecks; // 0x3e8(0x01)
	Unknown bAllowStrafe; // 0x3e8(0x01)
	Unknown bWantsPlayerState; // 0x3e8(0x01)
	Unknown bSetControlRotationFromPawnOrientation; // 0x3e8(0x01)
	Unknown PathFollowingComponent; // 0x3f0(0x08)
	Unknown BrainComponent; // 0x3f8(0x08)
	Unknown PerceptionComponent; // 0x400(0x08)
	Unknown ActionsComp; // 0x408(0x08)
	Unknown Blackboard; // 0x410(0x08)
	Unknown CachedGameplayTasksComponent; // 0x418(0x08)
	Unknown DefaultNavigationFilterClass; // 0x420(0x08)
	struct FMulticastInlineDelegate ReceiveMoveCompleted; // 0x428(0x10)
	float Interval; // 0x60(0x04)
	float RandomDeviation; // 0x64(0x04)
	Unknown bCallTickOnSearchStart; // 0x68(0x01)
	Unknown bRestartTimerOnEachActivation; // 0x68(0x01)
	struct FMulticastInlineDelegate OnSuccess; // 0x28(0x10)
	struct FMulticastInlineDelegate OnFail; // 0x38(0x10)
	struct FName ParamName; // 0x28(0x08)
	float FloatValue; // 0x30(0x04)
	int32_t IntValue; // 0x34(0x04)
	Unknown BoolValue; // 0x38(0x01)
	float Min; // 0x40(0x04)
	float MAX; // 0x44(0x04)
	Unknown bInteger; // 0x48(0x01)
	Unknown SensesConfig; // 0xb0(0x10)
	Unknown DominantSense; // 0xc0(0x08)
	Unknown AIOwner; // 0xd8(0x08)
	struct FMulticastInlineDelegate OnPerceptionUpdated; // 0x160(0x10)
	struct FMulticastInlineDelegate OnTargetPerceptionUpdated; // 0x170(0x10)
	Unknown bAutoRegisterAsSource; // 0xb0(0x01)
	Unknown RegisterAsSourceForSenses; // 0xb8(0x10)
	Unknown AISystem; // 0x30(0x08)
	Unknown Senses; // 0x88(0x10)
	float PerceptionAgingRate; // 0x98(0x04)
	float DefaultExpirationAge; // 0x28(0x04)
	Unknown NotifyType; // 0x2c(0x01)
	Unknown bWantsNewPawnNotification; // 0x30(0x01)
	Unknown bAutoRegisterAllPawnsAsSources; // 0x30(0x01)
	Unknown PerceptionSystemInstance; // 0x38(0x08)
	Unknown ListenerDataType; // 0x80(0x08)
	Unknown ListenerContainer; // 0x88(0x10)
	Unknown UnprocessedEvents; // 0x98(0x10)
	Unknown RegisteredEvents; // 0x80(0x10)
	Unknown NoiseEvents; // 0x80(0x10)
	float SpeedOfSoundSq; // 0x90(0x04)
	Unknown RegisteredEvents; // 0x80(0x10)
	int32_t MaxTracesPerTick; // 0x148(0x04)
	int32_t MinQueriesPerTimeSliceCheck; // 0x14c(0x04)
	double MaxTimeSlicePerTick; // 0x150(0x08)
	float HighImportanceQueryDistanceThreshold; // 0x158(0x04)
	float MaxQueryImportance; // 0x160(0x04)
	float SightLimitQueryImportance; // 0x164(0x04)
	Unknown RegisteredEvents; // 0x80(0x10)
	Unknown RegisteredEvents; // 0x80(0x10)
	Unknown DebugColor; // 0x28(0x04)
	float MaxAge; // 0x2c(0x04)
	Unknown bStartsEnabled; // 0x30(0x01)
	Unknown Implementation; // 0x48(0x08)
	Unknown Implementation; // 0x48(0x08)
	Unknown Implementation; // 0x48(0x08)
	float HearingRange; // 0x50(0x04)
	float LoSHearingRange; // 0x54(0x04)
	Unknown bUseLoSHearing; // 0x58(0x01)
	Unknown DetectionByAffiliation; // 0x5c(0x04)
	Unknown Implementation; // 0x48(0x08)
	float SightRadius; // 0x50(0x04)
	float LoseSightRadius; // 0x54(0x04)
	float PeripheralVisionAngleDegrees; // 0x58(0x04)
	Unknown DetectionByAffiliation; // 0x5c(0x04)
	float AutoSuccessRangeFromLastSeenLocation; // 0x60(0x04)
	Unknown Event; // 0x28(0x30)
	Unknown Event; // 0x28(0x30)
	Unknown PerceptionSystemClassName; // 0x58(0x18)
	Unknown HotSpotManagerClassName; // 0x70(0x18)
	float AcceptanceRadius; // 0x88(0x04)
	float PathfollowingRegularPathPointAcceptanceRadius; // 0x8c(0x04)
	float PathfollowingNavLinkAcceptanceRadius; // 0x90(0x04)
	Unknown bFinishMoveOnGoalOv; // 0x94(0x01)
	Unknown bAcceptPartialPaths; // 0x95(0x01)
	Unknown bAllowStrafing; // 0x96(0x01)
	Unknown bEnableBTAITasks; // 0x97(0x01)
	Unknown bAllowControllersAsEQSQuerier; // 0x98(0x01)
	Unknown bEnableDebuggerPlugin; // 0x99(0x01)
	Unknown bForgetStaleActors; // 0x9a(0x01)
	Unknown DefaultSightCollisionChannel; // 0x9b(0x01)
	Unknown BehaviorTreeManager; // 0xa0(0x08)
	Unknown EnvironmentQueryManager; // 0xa8(0x08)
	Unknown PerceptionSystem; // 0xb0(0x08)
	Unknown AllProxyObjects; // 0xb8(0x10)
	Unknown HotSpotManager; // 0xc8(0x08)
	Unknown NavLocalGrids; // 0xd0(0x08)
	Unknown OwnerController; // 0x68(0x08)
	struct FMulticastInlineDelegate OnRequestFailed; // 0x70(0x10)
	struct FMulticastInlineDelegate OnMoveFinished; // 0x80(0x10)
	Unknown MoveRequest; // 0x90(0x40)
	Unknown RootNode; // 0x30(0x08)
	Unknown BlackboardAsset; // 0x38(0x08)
	Unknown RootDecorators; // 0x40(0x10)
	Unknown RootDecoratorOps; // 0x50(0x10)
	Unknown BlackboardComp; // 0xb8(0x08)
	Unknown AIOwner; // 0xc0(0x08)
	Unknown NodeInstances; // 0x130(0x10)
	Unknown DefaultBehaviorTreeAsset; // 0x268(0x08)
	int32_t MaxDebuggerSteps; // 0x28(0x04)
	Unknown LoadedTemplates; // 0x30(0x10)
	Unknown ActiveComponents; // 0x40(0x10)
	Unknown BrainComp; // 0xb0(0x08)
	Unknown DefaultBlackboardAsset; // 0xb8(0x08)
	Unknown BlackboardAsset; // 0xc0(0x08)
	Unknown KeyInstances; // 0xe8(0x10)
	Unknown Parent; // 0x30(0x08)
	Unknown Keys; // 0x38(0x10)
	Unknown bHasSynchronizedKeys; // 0x48(0x01)
	Unknown BaseClass; // 0x30(0x08)
	Unknown EnumType; // 0x30(0x08)
	struct FString EnumName; // 0x38(0x10)
	Unknown bIsEnumNameValid; // 0x48(0x01)
	struct FString EnumName; // 0x30(0x10)
	Unknown EnumType; // 0x40(0x08)
	Unknown BaseClass; // 0x30(0x08)
	struct FString StringValue; // 0x30(0x10)
	Unknown Children; // 0x58(0x10)
	Unknown Services; // 0x68(0x10)
	Unknown bApplyDecoratorScope; // 0x88(0x01)
	Unknown FinishMode; // 0x90(0x01)
	Unknown bInverseCondition; // 0x60(0x01)
	Unknown FlowAbortMode; // 0x64(0x01)
	Unknown BlackboardKey; // 0x68(0x28)
	int32_t IntValue; // 0x90(0x04)
	float FloatValue; // 0x94(0x04)
	struct FString StringValue; // 0x98(0x10)
	struct FString CachedDescription; // 0xa8(0x10)
	Unknown OperationType; // 0xb8(0x01)
	Unknown NotifyObserver; // 0xb9(0x01)
	Unknown AIOwner; // 0x68(0x08)
	Unknown ActorOwner; // 0x70(0x08)
	Unknown ObservedKeyNames; // 0x78(0x10)
	Unknown bShowPropertyDetails; // 0x98(0x01)
	Unknown bCheckConditionOnlyBlackBoardChanges; // 0x98(0x01)
	Unknown bIsObservingBB; // 0x98(0x01)
	Unknown ActorToCheck; // 0x68(0x28)
	Unknown TagsToMatch; // 0x90(0x01)
	Unknown GameplayTags; // 0x98(0x20)
	struct FString CachedDescription; // 0xb8(0x10)
	Unknown Operator; // 0x68(0x01)
	Unknown BlackboardKeyA; // 0x70(0x28)
	Unknown BlackboardKeyB; // 0x98(0x28)
	float ConeHalfAngle; // 0x68(0x04)
	Unknown ConeOrigin; // 0x70(0x28)
	Unknown ConeDirection; // 0x98(0x28)
	Unknown Observed; // 0xc0(0x28)
	float CoolDownTime; // 0x68(0x04)
	Unknown BlackboardKeyA; // 0x68(0x28)
	Unknown BlackboardKeyB; // 0x90(0x28)
	Unknown bUseSelf; // 0xb8(0x01)
	Unknown PathQueryType; // 0xbc(0x01)
	Unknown FilterClass; // 0xc0(0x08)
	float AcceptableRadius; // 0x90(0x04)
	Unknown ParametrizedAcceptableRadius; // 0x98(0x38)
	Unknown GeometricDistanceType; // 0xd0(0x01)
	Unknown bUseParametrizedRadius; // 0xd4(0x01)
	Unknown bUseNavAgentGoalLocation; // 0xd4(0x01)
	Unknown bPathFindingBasedTest; // 0xd4(0x01)
	Unknown TestClass; // 0x90(0x08)
	float ConeHalfAngle; // 0x68(0x04)
	Unknown ConeOrigin; // 0x70(0x28)
	Unknown Observed; // 0x98(0x28)
	Unknown bUseSelfAsOrigin; // 0xc0(0x01)
	Unknown bUseSelfAsObserved; // 0xc0(0x01)
	int32_t NumLoops; // 0x68(0x04)
	Unknown bInfiniteLoop; // 0x6c(0x01)
	float InfiniteLoopTimeoutTime; // 0x70(0x04)
	Unknown CooldownTag; // 0x68(0x08)
	float CooldownDuration; // 0x70(0x04)
	Unknown bAddToExistingDuration; // 0x74(0x01)
	Unknown CooldownTag; // 0x68(0x08)
	float CooldownDuration; // 0x70(0x04)
	Unknown bAddToExistingDuration; // 0x74(0x01)
	Unknown bActivatesCooldown; // 0x75(0x01)
	float TimeLimit; // 0x68(0x04)
	Unknown BlackboardKey; // 0x70(0x28)
	Unknown AIOwner; // 0x70(0x08)
	Unknown ActorOwner; // 0x78(0x08)
	Unknown bShowPropertyDetails; // 0x90(0x01)
	Unknown bShowEventDetails; // 0x90(0x01)
	Unknown FocusPriority; // 0x98(0x01)
	Unknown EQSRequest; // 0x98(0x48)
	Unknown AIOwner; // 0x70(0x08)
	Unknown ActorOwner; // 0x78(0x08)
	Unknown TickInterval; // 0x80(0x08)
	Unknown bShowPropertyDetails; // 0xa0(0x01)
	Unknown Result; // 0x70(0x01)
	Unknown bWaitForGameplayTask; // 0x70(0x01)
	float Loudnes; // 0x70(0x04)
	float AcceptableRadius; // 0x98(0x04)
	Unknown FilterClass; // 0xa0(0x08)
	float ObservedBlackboardValueTolerance; // 0xa8(0x04)
	Unknown bObserveBlackboardValue; // 0xac(0x01)
	Unknown bAllowStrafe; // 0xac(0x01)
	Unknown bAllowPartialPath; // 0xac(0x01)
	Unknown bTrackMovingGoal; // 0xac(0x01)
	Unknown bProjectGoalLocation; // 0xac(0x01)
	Unknown bReachTestIncludesAgentRadius; // 0xac(0x01)
	Unknown bReachTestIncludesGoalRadius; // 0xac(0x01)
	Unknown bStopOnOverlap; // 0xac(0x01)
	Unknown bStopOnOverlapNeedsUpdate; // 0xad(0x01)
	Unknown bDisablePathUpdateOnGoalLocationChan; // 0xb0(0x01)
	Unknown bProjectVectorGoalToNavigation; // 0xb0(0x01)
	Unknown bUpdatedDeprecatedProperties; // 0xb0(0x01)
	Unknown AnimationToPlay; // 0x70(0x08)
	Unknown bLooping; // 0x78(0x01)
	Unknown bNonBlocking; // 0x78(0x01)
	Unknown MyOwnerComp; // 0x80(0x08)
	Unknown CachedSkelMesh; // 0x88(0x08)
	Unknown SoundToPlay; // 0x70(0x08)
	Unknown Action; // 0x70(0x08)
	float Precision; // 0x98(0x04)
	Unknown BehaviorAsset; // 0x70(0x08)
	Unknown InjectionTag; // 0x70(0x08)
	Unknown DefaultBehaviorAsset; // 0x78(0x08)
	Unknown BehaviorAsset; // 0x80(0x08)
	Unknown QueryTemplate; // 0x98(0x08)
	Unknown QueryParams; // 0xa0(0x10)
	Unknown QueryConfig; // 0xb0(0x10)
	Unknown RunMode; // 0xc0(0x01)
	Unknown EQSQueryBlackboardKey; // 0xc8(0x28)
	Unknown bUseBBKey; // 0xf0(0x01)
	Unknown EQSRequest; // 0xf8(0x48)
	Unknown CooldownTag; // 0x70(0x08)
	Unknown bAddToExistingDuration; // 0x78(0x01)
	float CooldownDuration; // 0x7c(0x04)
	float WaitTime; // 0x70(0x04)
	float RandomDeviation; // 0x74(0x04)
	Unknown BlackboardKey; // 0x78(0x28)
	Unknown MovementComp; // 0xe8(0x08)
	Unknown MyNavData; // 0xf8(0x08)
	Unknown CharacterMovement; // 0x260(0x08)
	Unknown CrowdAgentMoveDirection; // 0x268(0x0c)
	Unknown MyNavData; // 0x28(0x08)
	Unknown AvoidanceConfig; // 0x30(0x10)
	Unknown SamplingPatterns; // 0x40(0x10)
	int32_t MaxAgents; // 0x50(0x04)
	float MaxAgentRadius; // 0x54(0x04)
	int32_t MaxAvoidedAgents; // 0x58(0x04)
	int32_t MaxAvoidedWalls; // 0x5c(0x04)
	float NavmeshCheckInterval; // 0x60(0x04)
	float PathOptimizationInterval; // 0x64(0x04)
	float SeparationDirClamp; // 0x68(0x04)
	float PathOffsetRadiusMultiplier; // 0x6c(0x04)
	Unknown bResolveCollisions; // 0x70(0x01)
	struct FName QueryName; // 0x30(0x08)
	Unknown options; // 0x38(0x10)
	int32_t VerNum; // 0x28(0x04)
	struct FString OptionName; // 0x30(0x10)
	Unknown ItemType; // 0x40(0x08)
	Unknown bAutoSortTests; // 0x48(0x01)
	Unknown SearchedActorClass; // 0x50(0x08)
	Unknown GenerateOnlyActorsInRadius; // 0x58(0x38)
	Unknown SearchRadius; // 0x90(0x38)
	Unknown SearchCenter; // 0xc8(0x08)
	struct FText GeneratorsActionDescription; // 0x50(0x18)
	Unknown Context; // 0x68(0x08)
	Unknown GeneratedItemType; // 0x70(0x08)
	Unknown Generators; // 0x50(0x10)
	Unknown bAllowDifferentItemTypes; // 0x60(0x01)
	Unknown bHasMatchingItemType; // 0x60(0x01)
	Unknown ForcedItemType; // 0x68(0x08)
	Unknown ProjectionData; // 0x50(0x30)
	Unknown AlignedPointsDistance; // 0x80(0x38)
	Unknown ConeDegrees; // 0xb8(0x38)
	Unknown AngleStep; // 0xf0(0x38)
	Unknown Range; // 0x128(0x38)
	Unknown CenterActor; // 0x160(0x08)
	Unknown bIncludeContextLocation; // 0x168(0x01)
	Unknown QueryContext; // 0x50(0x08)
	Unknown InnerRadius; // 0x80(0x38)
	Unknown OuterRadius; // 0xb8(0x38)
	Unknown NumberOfRings; // 0xf0(0x38)
	Unknown PointsPerRing; // 0x128(0x38)
	Unknown ArcDirection; // 0x160(0x20)
	Unknown ArcAngle; // 0x180(0x38)
	Unknown bUseSpiralPattern; // 0x1b8(0x01)
	Unknown Center; // 0x1c0(0x08)
	Unknown bDefineArc; // 0x1c8(0x01)
	Unknown CircleRadius; // 0x80(0x38)
	Unknown SpaceBetween; // 0xb8(0x38)
	Unknown NumberOfPoints; // 0xf0(0x38)
	Unknown PointOnCircleSpacingMethod; // 0x128(0x01)
	Unknown ArcDirection; // 0x130(0x20)
	Unknown ArcAngle; // 0x150(0x38)
	float AngleRadians; // 0x188(0x04)
	Unknown CircleCenter; // 0x190(0x08)
	Unknown bIgnoreAnyContextActorsWhenGeneratinj; // 0x198(0x01)
	Unknown CircleCenterZOffset; // 0x1a0(0x38)
	Unknown TraceData; // 0x1d8(0x30)
	Unknown bDefineArc; // 0x208(0x01)
	Unknown GridSize; // 0x80(0x38)
	Unknown SpaceBetween; // 0xb8(0x38)
	Unknown GenerateAround; // 0xf0(0x08)
	Unknown PathToItem; // 0xf8(0x38)
	Unknown NavigationFilter; // 0x130(0x08)
	Unknown ScanRangeMultiplier; // 0x138(0x38)
	int32_t QueryID; // 0x30(0x04)
	Unknown ItemType; // 0x58(0x08)
	int32_t OptionIndex; // 0x60(0x04)
	struct FMulticastInlineDelegate OnQueryFinishedEvent; // 0x68(0x10)
	Unknown InstanceCache; // 0xa8(0x10)
	Unknown LocalContexts; // 0xb8(0x10)
	Unknown GCShieldedWrappers; // 0xc8(0x10)
	float MaxAllowedTestingTime; // 0x12c(0x04)
	Unknown bTestQueriesUsingBreadth; // 0x130(0x01)
	int32_t QueryCountWarningThreshold; // 0x134(0x04)
	double QueryCountWarningInterval; // 0x138(0x08)
	Unknown Generator; // 0x28(0x08)
	Unknown Tests; // 0x30(0x10)
	int32_t TestOrder; // 0x30(0x04)
	Unknown TestPurpose; // 0x34(0x01)
	struct FString TestComment; // 0x38(0x10)
	Unknown MultipleContextFilterOp; // 0x48(0x01)
	Unknown MultipleContextScoreOp; // 0x49(0x01)
	Unknown FilterType; // 0x4a(0x01)
	Unknown BoolValue; // 0x50(0x38)
	Unknown FloatValueMin; // 0x88(0x38)
	Unknown FloatValueMax; // 0xc0(0x38)
	Unknown ScoringEquation; // 0xf9(0x01)
	Unknown ClampMinType; // 0xfa(0x01)
	Unknown ClampMaxType; // 0xfb(0x01)
	Unknown NormalizationType; // 0xfc(0x01)
	Unknown ScoreClampMin; // 0x100(0x38)
	Unknown ScoreClampMax; // 0x138(0x38)
	Unknown ScoringFactor; // 0x170(0x38)
	Unknown ReferenceValue; // 0x1a8(0x38)
	Unknown bDefineReferenceValue; // 0x1e0(0x01)
	Unknown bWorkOnFloatValues; // 0x1f0(0x01)
	Unknown TestMode; // 0x1f8(0x01)
	Unknown DistanceTo; // 0x200(0x08)
	Unknown LineA; // 0x1f8(0x20)
	Unknown LineB; // 0x218(0x20)
	Unknown TestMode; // 0x238(0x01)
	Unknown bAbsoluteValue; // 0x239(0x01)
	Unknown TagQueryToMatch; // 0x1f8(0x48)
	Unknown bUpdatedToUseQuery; // 0x240(0x01)
	Unknown TagsToMatch; // 0x241(0x01)
	Unknown GameplayTags; // 0x248(0x20)
	Unknown OverlapData; // 0x1f8(0x20)
	Unknown TestMode; // 0x1f8(0x01)
	Unknown Context; // 0x200(0x08)
	Unknown PathFromContext; // 0x208(0x38)
	Unknown SkipUnreachable; // 0x240(0x38)
	Unknown FilterClass; // 0x278(0x08)
	Unknown ScanRangeMultiplier; // 0x280(0x38)
	Unknown ProjectionData; // 0x1f8(0x30)
	Unknown TraceData; // 0x1f8(0x30)
	Unknown TraceFromContext; // 0x228(0x38)
	Unknown ItemHeightOffset; // 0x260(0x38)
	Unknown ContextHeightOffset; // 0x298(0x38)
	Unknown Context; // 0x2d0(0x08)
	Unknown VolumeContext; // 0x1f8(0x08)
	Unknown VolumeClass; // 0x200(0x08)
	Unknown bDoComplexVolumeTest; // 0x208(0x01)
	Unknown QueryTemplate; // 0x5e0(0x08)
	Unknown QueryParams; // 0x5e8(0x10)
	Unknown QueryConfig; // 0x5f8(0x10)
	float TimeLimitPerStep; // 0x608(0x04)
	int32_t StepToDebugDraw; // 0x60c(0x04)
	Unknown HighlightMode; // 0x610(0x01)
	Unknown bDrawLabels; // 0x614(0x01)
	Unknown bDrawFailedItems; // 0x614(0x01)
	Unknown bReRunQueryOnlyOnFinishedMove; // 0x614(0x01)
	Unknown bShouldBeVisibleInGame; // 0x614(0x01)
	Unknown bTickDuringGame; // 0x614(0x01)
	Unknown QueryingMode; // 0x618(0x01)
	Unknown NavAgentProperties; // 0x620(0x30)
	Unknown GridManager; // 0x258(0x08)
	Unknown PointLinks; // 0x320(0x10)
	Unknown SegmentLinks; // 0x330(0x10)
	Unknown SmartLinkComp; // 0x340(0x08)
	Unknown bSmartLinkIsRelevant; // 0x348(0x01)
	struct FMulticastInlineDelegate OnSmartLinkReached; // 0x350(0x10)
	Unknown ChildAction; // 0x28(0x08)
	Unknown ParentAction; // 0x30(0x08)
	Unknown OwnerComponent; // 0x38(0x08)
	Unknown Instigator; // 0x40(0x08)
	Unknown BrainComp; // 0x48(0x08)
	Unknown bAllowNewSameClassInstance; // 0x80(0x01)
	Unknown bReplaceActiveSameClassInstance; // 0x80(0x01)
	Unknown bShouldPauseMovement; // 0x80(0x01)
	Unknown bAlwaysNotifyOnFinished; // 0x80(0x01)
	Unknown GoalActor; // 0x98(0x08)
	Unknown GoalLocation; // 0xa0(0x0c)
	float AcceptableRadius; // 0xac(0x04)
	Unknown FilterClass; // 0xb0(0x08)
	Unknown bAllowStrafe; // 0xb8(0x01)
	Unknown bFinishOnOverlap; // 0xb8(0x01)
	Unknown bUsePathfinding; // 0xb8(0x01)
	Unknown bAllowPartialPath; // 0xb8(0x01)
	Unknown bProjectGoalToNavigation; // 0xb8(0x01)
	Unknown bUpdatePathToGoal; // 0xb8(0x01)
	Unknown bAbortChildActionOnPathChange; // 0xb8(0x01)
	Unknown ActionToRepeat; // 0x98(0x08)
	Unknown RecentActionCopy; // 0xa0(0x08)
	Unknown ChildFailureHandlingMode; // 0xa8(0x01)
	Unknown ActionSequence; // 0x98(0x10)
	Unknown ChildFailureHandlingMode; // 0xa8(0x01)
	Unknown RecentActionCopy; // 0xb0(0x08)
	float TimeToWait; // 0x98(0x04)
	Unknown ControlledPawn; // 0xb0(0x08)
	Unknown ActionStacks; // 0xb8(0x10)
	Unknown ActionEvents; // 0xc8(0x10)
	Unknown CurrentAction; // 0xd8(0x08)
	float HearingThreshold; // 0xb0(0x04)
	float LOSHearingThreshold; // 0xb4(0x04)
	float SightRadius; // 0xb8(0x04)
	float SensingInterval; // 0xbc(0x04)
	float HearingMaxSoundAge; // 0xc0(0x04)
	Unknown bEnableSensingUpdates; // 0xc4(0x01)
	Unknown bOnlySensePlayers; // 0xc4(0x01)
	Unknown bSeePawns; // 0xc4(0x01)
	Unknown bHearNoises; // 0xc4(0x01)
	struct FMulticastInlineDelegate OnSeePawn; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnHearNoise; // 0xe0(0x10)
	float PeripheralVisionAngle; // 0xf0(0x04)
	float PeripheralVisionCosine; // 0xf4(0x04)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown BackgroundBlurFadeIn; // 0x250(0x08)
	Unknown Idle; // 0x258(0x08)
	Unknown BackgroundBlur_1; // 0x260(0x08)
	Unknown BT; // 0x268(0x08)
	Unknown Btn; // 0x270(0x08)
	Unknown Btn; // 0x278(0x08)
	Unknown Btn; // 0x280(0x08)
	Unknown Canvas_Main; // 0x288(0x08)
	Unknown KillcamBtns; // 0x290(0x08)
	Unknown MemberChangeBox; // 0x298(0x08)
	Unknown TextDepth_Replay; // 0x2a0(0x08)
	Unknown U; // 0x2a8(0x08)
	Unknown bIsKillCam; // 0x2b0(0x01)
	Unknown GridNode; // 0x5c8(0x08)
	Unknown SpatializedClasses; // 0x5d0(0x10)
	Unknown NonSpatializedChildClasses; // 0x5e0(0x10)
	Unknown AlwaysRelevantNode; // 0x5f0(0x08)
	Unknown ExplicitlySetClasses; // 0x940(0x10)
	Unknown LastViewer; // 0x50(0x08)
	Unknown LastViewTarget; // 0x58(0x08)
	int32_t PingCounter; // 0xb0(0x04)
	Unknown bEnabled; // 0xb4(0x01)
	Unknown PlayerState; // 0xb8(0x08)
	Unknown ReplicationConnectionManagerClass; // 0x28(0x08)
	Unknown NetDriver; // 0x30(0x08)
	Unknown Connections; // 0x38(0x10)
	Unknown PendingConnections; // 0x48(0x10)
	Unknown GlobalGraphNodes; // 0x98(0x10)
	Unknown PrepareForReplicationNodes; // 0xa8(0x10)
	Unknown AllChildNodes; // 0x28(0x10)
	Unknown GridNode; // 0x578(0x08)
	Unknown AlwaysRelevantNode; // 0x580(0x08)
	Unknown AlwaysRelevantForConnectionList; // 0x588(0x10)
	Unknown ActorsWithoutNetConnection; // 0x598(0x10)
	Unknown StaticNode; // 0x140(0x08)
	Unknown DynamicNode; // 0x1d0(0x08)
	Unknown DormancyNode; // 0x1d8(0x08)
	Unknown ChildNode; // 0x50(0x08)
	Unknown PastRelevantActors; // 0x110(0x10)
	Unknown LastViewer; // 0x120(0x08)
	Unknown LastViewTarget; // 0x128(0x08)
	Unknown TearOffActors; // 0x50(0x10)
	Unknown NetConnection; // 0x28(0x08)
	Unknown DebugActor; // 0x180(0x08)
	Unknown LastGatherLocations; // 0x1a0(0x10)
	Unknown ConnectionGraphNodes; // 0x1b8(0x10)
	Unknown TearOffNode; // 0x1c8(0x08)
	Unknown ReplicationGraph; // 0x310(0x08)
	Unknown ConnectionManager; // 0x318(0x08)
	Unknown Layers; // 0x30(0x50)
	Unknown Tags; // 0x80(0x50)
	Unknown LightType; // 0x310(0x01)
	Unknown LightShape; // 0x311(0x01)
	Unknown Dimensions; // 0x314(0x08)
	float Intensity; // 0x31c(0x04)
	Unknown IntensityUnits; // 0x320(0x01)
	Unknown Color; // 0x324(0x10)
	float Temperature; // 0x334(0x04)
	Unknown IESTexture; // 0x338(0x08)
	Unknown bUseIESBrightness; // 0x340(0x01)
	float IESBrightnessScale; // 0x344(0x04)
	Unknown Rotation; // 0x348(0x0c)
	float SourceRadius; // 0x354(0x04)
	float SourceLength; // 0x358(0x04)
	float AttenuationRadius; // 0x35c(0x04)
	float SpotlightInnerAngle; // 0x360(0x04)
	float SpotlightOuterAngle; // 0x364(0x04)
	Unknown LightType; // 0x30(0x01)
	Unknown LightShape; // 0x31(0x01)
	Unknown Dimensions; // 0x34(0x08)
	Unknown Color; // 0x3c(0x10)
	float Intensity; // 0x4c(0x04)
	Unknown IntensityUnits; // 0x50(0x01)
	float Temperature; // 0x54(0x04)
	Unknown IESTexture; // 0x58(0x28)
	Unknown bUseIESBrightness; // 0x80(0x01)
	float IESBrightnessScale; // 0x84(0x04)
	Unknown Rotation; // 0x88(0x0c)
	float SourceRadius; // 0x94(0x04)
	float SourceLength; // 0x98(0x04)
	float AttenuationRadius; // 0x9c(0x04)
	struct FString Generator; // 0x28(0x10)
	float Version; // 0x38(0x04)
	struct FString Author; // 0x40(0x10)
	struct FString License; // 0x50(0x10)
	struct FString Source; // 0x60(0x10)
	struct FString SourceMeshName; // 0x28(0x10)
	Unknown bGenerateLightmapUVs; // 0x28(0x01)
	struct FString TexturesDir; // 0x30(0x10)
	Unknown IntermediateSerialization; // 0x40(0x01)
	Unknown bColorizeMaterials; // 0x41(0x01)
	Unknown bMergeNodes; // 0x48(0x01)
	Unknown bOptimizeDuplicatedNodes; // 0x49(0x01)
	Unknown bRemoveInvisibleNodes; // 0x4a(0x01)
	Unknown bSimplifyNodeHierarchy; // 0x4b(0x01)
	Unknown bImportVar; // 0x4c(0x01)
	struct FString VarPath; // 0x50(0x10)
	Unknown bImportPos; // 0x60(0x01)
	struct FString PosPath; // 0x68(0x10)
	Unknown bImportTml; // 0x78(0x01)
	struct FString TmlPath; // 0x80(0x10)
	Unknown bMergeNodes; // 0x48(0x01)
	Unknown bOptimizeDuplicatedNodes; // 0x49(0x01)
	Unknown bImportMats; // 0x4a(0x01)
	struct FString MatsPath; // 0x50(0x10)
	Unknown bImportVar; // 0x60(0x01)
	Unknown bCleanVar; // 0x61(0x01)
	struct FString VarPath; // 0x68(0x10)
	Unknown bImportLightInfo; // 0x78(0x01)
	struct FString LightInfoPath; // 0x80(0x10)
	Unknown bImportClipInfo; // 0x90(0x01)
	struct FString ClipInfoPath; // 0x98(0x10)
	struct FString SourceGlobalId; // 0x28(0x10)
	Unknown MetaData; // 0x28(0x50)
	Unknown LookatTrackingSettings; // 0x30(0x30)
	Unknown FilmbackSettings; // 0x30(0x08)
	Unknown LensSettings; // 0x38(0x04)
	Unknown FocusSettings; // 0x3c(0x08)
	float CurrentFocalLength; // 0x44(0x04)
	float CurrentAperture; // 0x48(0x04)
	Unknown PostProcessSettings; // 0x50(0x40)
	Unknown ImportedSequences; // 0x310(0x10)
	Unknown options; // 0x28(0x10)
	Unknown SearchPackagePolicy; // 0x28(0x01)
	Unknown MaterialConflictPolicy; // 0x29(0x01)
	Unknown TextureConflictPolicy; // 0x2a(0x01)
	Unknown StaticMeshActorImportPolicy; // 0x2b(0x01)
	Unknown LightImportPolicy; // 0x2c(0x01)
	Unknown CameraImportPolicy; // 0x2d(0x01)
	Unknown OtherActorImportPolicy; // 0x2e(0x01)
	Unknown MaterialQuality; // 0x2f(0x01)
	Unknown BaseOptions; // 0x34(0x14)
	Unknown ReimportOptions; // 0x48(0x02)
	struct FString Filename; // 0x50(0x10)
	struct FString FilePath; // 0x60(0x10)
	Unknown LandscapeMaterial; // 0x30(0x08)
	int32_t StaticLightingLOD; // 0x38(0x04)
	Unknown bVisible; // 0x30(0x01)
	Unknown CastShadows; // 0x34(0x01)
	Unknown bUseTemperature; // 0x34(0x01)
	Unknown bUseIESBrightness; // 0x34(0x01)
	float Intensity; // 0x38(0x04)
	float Temperature; // 0x3c(0x04)
	float IESBrightnessScale; // 0x40(0x04)
	Unknown LightColor; // 0x44(0x10)
	Unknown LightFunctionMaterial; // 0x58(0x08)
	Unknown IESTexture; // 0x60(0x08)
	Unknown ParentMaterial; // 0x30(0x28)
	Unknown ScalarParameterValues; // 0x58(0x50)
	Unknown VectorParameterValues; // 0xa8(0x50)
	Unknown TextureParameterValues; // 0xf8(0x50)
	Unknown StaticParameters; // 0x148(0x50)
	Unknown IntensityUnits; // 0x30(0x01)
	float SourceRadius; // 0x34(0x04)
	float SourceLength; // 0x38(0x04)
	float AttenuationRadius; // 0x3c(0x04)
	Unknown Settings; // 0x30(0x40)
	Unknown bEnabled; // 0x70(0x01)
	Unknown bUnbound; // 0x70(0x01)
	Unknown Scene; // 0x310(0x08)
	Unknown RelatedActors; // 0x318(0x50)
	Unknown RelativeTransform; // 0x30(0x30)
	Unknown Mobility; // 0x60(0x01)
	Unknown AttachParent; // 0x68(0x28)
	Unknown Tags; // 0x90(0x50)
	Unknown SourceType; // 0x30(0x01)
	int32_t CubemapResolution; // 0x34(0x04)
	Unknown Cubemap; // 0x38(0x08)
	float InnerConeAngle; // 0x30(0x04)
	float OuterConeAngle; // 0x34(0x04)
	Unknown StaticMesh; // 0x30(0x08)
	Unknown OverrideMaterials; // 0x38(0x10)
	Unknown SectionInfoMap; // 0x30(0x50)
	int32_t LightMapCoordinateIndex; // 0x80(0x04)
	int32_t LightMapResolution; // 0x84(0x04)
	Unknown BuildSettings; // 0x88(0x10)
	Unknown StaticMaterials; // 0x98(0x10)
	Unknown PrefabComponent; // 0x310(0x08)
	Unknown AssetReferences; // 0x28(0x50)
	Unknown GeneratedBlueprintAssetReference; // 0x78(0x18)
	Unknown SimplifiedMeshAssetReference; // 0x90(0x18)
	Unknown PrefabId; // 0xa8(0x10)
	struct FString PrefabContent; // 0xb8(0x10)
	struct FString PrefabHash; // 0xc8(0x10)
	int32_t NumActors; // 0xd8(0x04)
	Unknown PrefabPivot; // 0xdc(0x0c)
	Unknown Parent; // 0xe8(0x08)
	Unknown bConnected; // 0x4b8(0x01)
	Unknown bLockSelection; // 0x4b8(0x01)
	Unknown Prefab; // 0x4c0(0x08)
	Unknown GeneratedBlueprint; // 0x4c8(0x08)
	Unknown SimplifiedMesh; // 0x4d0(0x08)
	Unknown PrefabInstancesMap; // 0x4d8(0x50)
	Unknown VariantRulesOverwrite; // 0x528(0x10)
	Unknown bTransient; // 0x538(0x01)
	Unknown ParentClass; // 0x540(0x08)
	Unknown bInitialPivotToWorldOrigin; // 0x28(0x01)
	Unknown bReplaceActorsWithCreatedPrefab; // 0x29(0x01)
	Unknown bAutoIncludeAttachedActorsWhenCreateNewPrefab; // 0x2a(0x01)
	Unknown bNestedPrefabSupport; // 0x2b(0x01)
	Unknown bRestorePrefabActorCollapseStatusAfterPIE; // 0x2c(0x01)
	Unknown bCollapseAllPrefabActorsAfterMapOpen; // 0x2d(0x01)
	Unknown bMoveActorsInWorldAfterSetPrefabPivot; // 0x2e(0x01)
	Unknown bDuplicateNoRevertWithOffset; // 0x2f(0x01)
	struct FString NewPrefabNamePattern; // 0x30(0x10)
	Unknown UITheme; // 0x40(0x04)
	Unknown bUpdateAllPrefabActorsWhenOpenMap; // 0x44(0x01)
	Unknown bCheckPrefabChangeBeforeUpdateAllPrefabActorsWhenOpenMap; // 0x45(0x01)
	Unknown bUpdateAllPrefabActorsWhenApply; // 0x46(0x01)
	Unknown bApplyToNestedPrefab; // 0x47(0x01)
	Unknown bEnableApplyFromDisconnectedPrefabActor; // 0x48(0x01)
	Unknown bAutoAddRemoveVariantActorPrefix; // 0x49(0x01)
	struct FString VariantActorPrefix; // 0x50(0x10)
	Unknown bEnablePrefabComponentVisualizer; // 0x60(0x01)
	Unknown PrefabComponentVisualizerType; // 0x61(0x01)
	Unknown bDisplayPrefabComponentVisualizerEvenNotSelected; // 0x62(0x01)
	Unknown PrefabViewVisualizerColor; // 0x64(0x04)
	Unknown TargetActorColor; // 0x68(0x04)
	Unknown UnLockedConnectedColor; // 0x6c(0x04)
	Unknown LockedConnectedColor; // 0x70(0x04)
	Unknown UnLockedDisConnectedColor; // 0x74(0x04)
	Unknown LockedDisConnectedColor; // 0x78(0x04)
	Unknown UnLockedNoPrefabAssigned; // 0x7c(0x04)
	Unknown LockedNoPrefabAssignedColor; // 0x80(0x04)
	Unknown PrefabMaterialPath; // 0x88(0x18)
	Unknown bShadedPrefabViewVisualizer; // 0xc8(0x01)
	Unknown bLockPrefabSelectionByDefault; // 0xc9(0x01)
	Unknown bDisableLockPrefabSelectionFeature; // 0xca(0x01)
	Unknown bSupportGroupWhenPasting; // 0xcb(0x01)
	Unknown bForceApplyPerInstanceVertexColor; // 0xcc(0x01)
	Unknown bHideChildActorsInPIEIfHiddenInEditor; // 0xcd(0x01)
	Unknown bCanToggleChildActorVisibilityInPIE; // 0xce(0x01)
	Unknown bIgnoreLayersInPrefab; // 0xd0(0x01)
	Unknown ChangeComponentActor; // 0xd8(0x10)
	Unknown DefaultActorClass; // 0xe8(0x08)
	Unknown bEnabledAutoThumbnail; // 0xf0(0x01)
	Unknown bAutoOpenBlueprintEditor; // 0xf1(0x01)
	Unknown InteriorActorClass; // 0xf8(0x08)
	Unknown ExteriorActorClass; // 0x100(0x08)
	Unknown InteriorShowActorClass; // 0x108(0x08)
	Unknown HouseActorClass; // 0x110(0x08)
	Unknown bSupportGenerateBlueprint; // 0x118(0x01)
	Unknown bHarvestComponentsWhenGeneratingBlueprint; // 0x119(0x01)
	Unknown bUseActorNameAsVariableNameWhenGeneratingBluepr; // 0x11a(0x01)
	Unknown bForceMobilityToMov; // 0x11b(0x01)
	Unknown IgnoreActorClassesWhenGeneratingBlueprint; // 0x120(0x10)
	Unknown IgnoreActorTagsWhenGeneratingBlueprint; // 0x130(0x10)
	Unknown bFlashPrefabWindowForTargetPrefabActor; // 0x140(0x01)
	Unknown bEnablePrefabTextEditor; // 0x141(0x01)
	Unknown bDebugMode; // 0x142(0x01)
	Unknown bDisableThumbnailRender; // 0x143(0x01)
	Unknown bShowPrefabInstanceTagInPrefabToolWindow; // 0x144(0x01)
	Unknown Ani_MouseRight; // 0x248(0x08)
	Unknown Image; // 0x250(0x08)
	Unknown Image_2; // 0x258(0x08)
	Unknown Image_292; // 0x260(0x08)
	Unknown Image_503; // 0x268(0x08)
	struct FName CurveSource; // 0x820(0x08)
	float CurveSyncOffset; // 0x828(0x04)
	Unknown mSheets; // 0x28(0x10)
	Unknown mActiveSheet; // 0x38(0x08)
	Unknown UberGraphFrame; // 0x3ac8(0x08)
	Unknown Listener; // 0x3ad0(0x08)
	float _P_Cam_Z_NewTrack_0_898B65D1462B08609DA61C81A7B52313; // 0x3ad8(0x04)
	Unknown _P_Cam_Z__Direction_898B65D1462B08609DA61C81A7B52313; // 0x3adc(0x01)
	Unknown 3P_Cam_Z; // 0x3ae0(0x08)
	Unknown CriticalUITimeHandler; // 0x3ae8(0x08)
	Unknown DyingUITimeHandler; // 0x3af0(0x08)
	Unknown ClothHandler; // 0x3af8(0x08)
	Unknown ClothBallObject; // 0x3b00(0x08)
	Unknown BallHandleLocation; // 0x3b08(0x0c)
	float GamepadInputModifier; // 0x3b14(0x04)
	float BaseTurnRate; // 0x3b18(0x04)
	float BaseLookUpRate; // 0x3b1c(0x04)
	Unknown PerkLevelUpWidgets; // 0x3b20(0x10)
	float PerkLevelUpWidthDepth; // 0x3b30(0x04)
	Unknown AmplifierEffect; // 0x3b38(0x08)
	float Cam_Shake_Radius; // 0x3b40(0x04)
	Unknown MainWidget; // 0x3b48(0x08)
	Unknown HeartBeatSensorEffect; // 0x3b50(0x08)
	Unknown SignificanceManagerClassName; // 0x158(0x18)
	Unknown UberGraphFrame; // 0x278(0x08)
	Unknown btn_Cancel; // 0x280(0x08)
	Unknown btn_report; // 0x288(0x08)
	Unknown Button_2; // 0x290(0x08)
	Unknown Button_3; // 0x298(0x08)
	Unknown Button_4; // 0x2a0(0x08)
	Unknown Button_5; // 0x2a8(0x08)
	Unknown CheckBox_2; // 0x2b0(0x08)
	Unknown CheckBox_3; // 0x2b8(0x08)
	Unknown CheckBox_4; // 0x2c0(0x08)
	Unknown CheckBox_5; // 0x2c8(0x08)
	Unknown combobox_button_overlay; // 0x2d0(0x08)
	Unknown combobox_string; // 0x2d8(0x08)
	Unknown Image; // 0x2e0(0x08)
	Unknown Image_2; // 0x2e8(0x08)
	Unknown Image_545; // 0x2f0(0x08)
	Unknown NormalArrow; // 0x2f8(0x08)
	Unknown OpeningArrow; // 0x300(0x08)
	Unknown popup; // 0x308(0x08)
	Unknown txt_description; // 0x310(0x08)
	Unknown txt_nickname; // 0x318(0x08)
	Unknown uw; // 0x320(0x08)
	struct FText DescriptionText; // 0x328(0x18)
	Unknown ReportIndexText; // 0x340(0x10)
	struct FText DefaultComboString; // 0x350(0x18)
	int32_t CurrentSelectIndex; // 0x368(0x04)
	Unknown CheckCloseComboArrow; // 0x36c(0x01)
	Unknown MyStruct; // 0x28(0x10)
	Unknown WidgetInfoArray; // 0x310(0x10)
	Unknown ReplayWidgetMap; // 0x320(0x50)
	Unknown Button_PlayerName; // 0x248(0x08)
	Unknown Text_PlayerName; // 0x250(0x08)
	Unknown SortMethodTextBlock; // 0x248(0x08)
	Unknown PlayerListPrevButton; // 0x250(0x08)
	Unknown PlayerListNextButton; // 0x258(0x08)
	Unknown ScrollBox_PlayerName; // 0x260(0x08)
	Unknown EventBorder; // 0x248(0x08)
	Unknown VisualBorder; // 0x250(0x08)
	Unknown EventInform; // 0x258(0x08)
	Unknown KillEvent; // 0x270(0x30)
	float ClickToJumpDeltaSec; // 0x2a8(0x04)
	Unknown ReplayListItemBtn; // 0x248(0x08)
	Unknown TextName; // 0x250(0x08)
	Unknown TextLive; // 0x258(0x08)
	Unknown TextTime; // 0x260(0x08)
	struct FMulticastInlineDelegate OnSelectedReplayListItemEvent; // 0x278(0x10)
	Unknown ReplayListWidget; // 0x318(0x08)
	Unknown ReplayListWidgetClass; // 0x320(0x08)
	Unknown PageSizeTB; // 0x248(0x08)
	Unknown CurrentPageTB; // 0x250(0x08)
	Unknown ScrollBoxReplayList; // 0x258(0x08)
	Unknown RefreshBtn; // 0x260(0x08)
	Unknown PrevBtn; // 0x268(0x08)
	Unknown NextBtn; // 0x270(0x08)
	Unknown TotalReplaysTB; // 0x278(0x08)
	Unknown TotalPageText; // 0x280(0x08)
	Unknown ReplayItemInform; // 0x288(0x08)
	Unknown ShouldKeepChkBox; // 0x290(0x08)
	Unknown PlayBtn; // 0x298(0x08)
	Unknown DeleteBtn; // 0x2a0(0x08)
	Unknown DeleteOldReplaysBtn; // 0x2a8(0x08)
	Unknown ReplaysToKeepTB; // 0x2b0(0x08)
	int32_t TotalPages; // 0x2b8(0x04)
	int32_t CurrentPage; // 0x2bc(0x04)
	int32_t PageSize; // 0x2c0(0x04)
	int32_t TotalReplays; // 0x2c4(0x04)
	int32_t ReplaysToKeep; // 0x2c8(0x04)
	Unknown ReplayTimelineScrollBox; // 0x248(0x08)
	Unknown ReplayTimelineSizeBox; // 0x250(0x08)
	Unknown ReplayTimelineBorder; // 0x258(0x08)
	Unknown ReplayTimelineSlider; // 0x260(0x08)
	Unknown ReplayTimeToGoBorder; // 0x268(0x08)
	Unknown ReplayTimeToGoText; // 0x270(0x08)
	Unknown ReplayCurrentTimeTextBlock; // 0x278(0x08)
	Unknown ReplayTotalTimeTextBlock; // 0x280(0x08)
	Unknown ReplayPause; // 0x288(0x08)
	Unknown ReplayResumeButton; // 0x290(0x08)
	Unknown ReplaySpeedUpButton; // 0x298(0x08)
	Unknown ReplaySpeedDownButton; // 0x2a0(0x08)
	Unknown ReplaySpeedTextBlock; // 0x2a8(0x08)
	Unknown ShowKillChk; // 0x2b0(0x08)
	Unknown ShowKnockoutChkBox; // 0x2b8(0x08)
	Unknown TimelineScaleUpButton; // 0x2c0(0x08)
	Unknown TimelineScaleDownButton; // 0x2c8(0x08)
	Unknown TimelineScaleTextBlock; // 0x2d0(0x08)
	float TimelineScaleDelta; // 0x2d8(0x04)
	float TimelineMaxScale; // 0x2dc(0x04)
	Unknown KillEventMarkers; // 0x300(0x10)
	Unknown KnockoutEventMarkers; // 0x310(0x10)
	Unknown MK3DKillEvents; // 0x320(0x10)
	Unknown MK3DKnockoutEvents; // 0x330(0x10)
	struct FDelegate OnMouseEnterEvent; // 0x270(0x10)
	struct FDelegate OnMouseEnterEvent; // 0x270(0x10)
	struct FDelegate OnMouseLeaveEvent; // 0x280(0x10)
	struct FString Filename; // 0x28(0x10)
	int32_t NumberOfRows; // 0x38(0x04)
	int32_t NumberOfColumns; // 0x3c(0x04)
	int32_t NumberOfPoints; // 0x40(0x04)
	struct FString SourceTitleRow; // 0x48(0x10)
	Unknown ColumnTitleArray; // 0x58(0x10)
	Unknown FloatCSVData; // 0x68(0x10)
	Unknown SpawnTimes; // 0x78(0x10)
	Unknown LifeValues; // 0x88(0x10)
	Unknown PointTypes; // 0x98(0x10)
	Unknown SpecialAttributesColumnIndexes; // 0xa8(0x10)
	Unknown PointValueIndexes; // 0xb8(0x10)
	Unknown UseCustomTitleRow; // 0xc8(0x01)
	Unknown HoudiniCSVAsset; // 0x30(0x08)
	int32_t LastSpawnedPointID; // 0x38(0x04)
	float LastSpawnTime; // 0x3c(0x04)
	Unknown UberGraphFrame; // 0x308(0x08)
	Unknown Anim_IconBouncing; // 0x310(0x08)
	Unknown Progress_Stroke; // 0x318(0x08)
	Unknown Shoot_ani; // 0x320(0x08)
	Unknown CanvasPanel_Main; // 0x328(0x08)
	Unknown death; // 0x330(0x08)
	Unknown Image_126; // 0x338(0x08)
	Unknown Image_168; // 0x340(0x08)
	Unknown Image_280; // 0x348(0x08)
	Unknown Image_623; // 0x350(0x08)
	Unknown Image_624; // 0x358(0x08)
	Unknown Image_1058; // 0x360(0x08)
	Unknown Image_Firing; // 0x368(0x08)
	Unknown Image_Heart; // 0x370(0x08)
	Unknown Image_Outline; // 0x378(0x08)
	Unknown Image_TeamInfoClassIcon; // 0x380(0x08)
	Unknown Img_LogOut; // 0x388(0x08)
	Unknown Img_Voice; // 0x390(0x08)
	Unknown Img_VoiceMute; // 0x398(0x08)
	Unknown InvalidationBox_1; // 0x3a0(0x08)
	Unknown Overlay_447; // 0x3a8(0x08)
	Unknown Overlay_Death; // 0x3b0(0x08)
	Unknown Overlay_RemainGoldenTimeSelf; // 0x3b8(0x08)
	Unknown Overlay_RequestResus; // 0x3c0(0x08)
	Unknown ProgressBar_440; // 0x3c8(0x08)
	Unknown ProgressBar_443; // 0x3d0(0x08)
	Unknown SizeBox_132; // 0x3d8(0x08)
	Unknown StateGoldenTime; // 0x3e0(0x08)
	Unknown StateKnockdown; // 0x3e8(0x08)
	Unknown T_ClassName; // 0x3f0(0x08)
	Unknown T_ClassWeapon; // 0x3f8(0x08)
	Unknown T_PlayerIndex; // 0x400(0x08)
	Unknown T_PlayerName; // 0x408(0x08)
	Unknown TeamColor; // 0x410(0x08)
	Unknown TextBlock_4; // 0x418(0x08)
	Unknown TextBlock_297; // 0x420(0x08)
	Unknown TextBlock_590; // 0x428(0x08)
	Unknown TextBlock_591; // 0x430(0x08)
	Unknown TextBlock_1016; // 0x438(0x08)
	Unknown TextBlock_RemainGoldenTimeSelf; // 0x440(0x08)
	Unknown TextBlock_RequestResus; // 0x448(0x08)
	Unknown TextBlock_Resuscitating; // 0x450(0x08)
	Unknown U; // 0x458(0x08)
	Unknown WidgetSwitcher_LogOut; // 0x460(0x08)
	Unknown WidgetSwitcher_Resuscitate; // 0x468(0x08)
	int32_t Index; // 0x470(0x04)
	Unknown Behavior; // 0x474(0x01)
	float hp; // 0x478(0x04)
	struct FText Name; // 0x480(0x18)
	Unknown ColorList; // 0x498(0x10)
	Unknown bPin; // 0x4a8(0x01)
	float PrevHP; // 0x4ac(0x04)
	Unknown bReduceHP; // 0x4b0(0x01)
	Unknown TimerHandleReduceHP; // 0x4b8(0x08)
	Unknown bIncreaseHP; // 0x4c0(0x01)
	Unknown HealthChangeCurve; // 0x4c8(0x08)
	Unknown HealthDangerCurve; // 0x4d0(0x08)
	Unknown HealTimer; // 0x4d8(0x08)
	Unknown FaintTimer; // 0x4e0(0x08)
	float BaseHealth; // 0x4e8(0x04)
	float TargetHealth; // 0x4ec(0x04)
	float HealthWeight; // 0x4f0(0x04)
	float TargetFaint; // 0x4f4(0x04)
	float BaseFaint; // 0x4f8(0x04)
	float FaintWeight; // 0x4fc(0x04)
	float CurrentHPPercent; // 0x500(0x04)
	float HealHPPercent; // 0x504(0x04)
	float FaintPercent; // 0x508(0x04)
	float CurrentAlpha; // 0x50c(0x04)
	float AlphaTimer; // 0x510(0x04)
	Unknown AlphaCurve; // 0x518(0x08)
	Unknown KnockDown; // 0x520(0x01)
	float HeartBeat; // 0x524(0x04)
	Unknown DisConnectSprite; // 0x528(0x08)
	Unknown KnockDownSprite; // 0x530(0x08)
	Unknown DeathSprite; // 0x538(0x08)
	Unknown VehicleSprite; // 0x540(0x08)
	Unknown HpTimer; // 0x548(0x08)
	float EndTime; // 0x550(0x04)
	float StartTime; // 0x554(0x04)
	float TotalTime; // 0x558(0x04)
	float ResultValue; // 0x55c(0x04)
	float AddTme; // 0x560(0x04)
	float PreStart; // 0x564(0x04)
	Unknown PhysicsAsset; // 0x48(0x08)
	Unknown ClothConfigs; // 0x50(0x50)
	Unknown ClothSharedSimConfig; // 0xa0(0x08)
	Unknown ClothSimConfig; // 0xa8(0x08)
	Unknown ChaosClothSimConfig; // 0xb0(0x08)
	Unknown ClothLODData; // 0xb8(0x10)
	Unknown LODData; // 0xc8(0x10)
	Unknown LodMap; // 0xd8(0x10)
	Unknown UsedBoneNames; // 0xe8(0x10)
	Unknown UsedBoneIndices; // 0xf8(0x10)
	int32_t ReferenceBoneIndex; // 0x108(0x04)
	Unknown CustomData; // 0x110(0x08)
	Unknown ClothConfig; // 0x118(0xd4)
	Unknown PhysicalMeshData; // 0x28(0x08)
	Unknown ClothPhysicalMeshData; // 0x30(0xf8)
	Unknown CollisionData; // 0x128(0x40)
	Unknown Sections; // 0x58(0x10)
	Unknown Parameter; // 0x68(0x28)
	Unknown SectionStartBehavior; // 0xe0(0x04)
	Unknown SectionEvaluateBehavior; // 0xe4(0x04)
	Unknown SectionEndBehavior; // 0xe8(0x04)
	Unknown AgeUpdateMode; // 0xec(0x01)
	int32_t ChannelsUsed; // 0x90(0x04)
	Unknown NiagaraComponent; // 0x310(0x08)
	Unknown bDestroyOnSystemFinish; // 0x318(0x01)
	Unknown Asset; // 0x4b8(0x08)
	Unknown TickBehavior; // 0x4c0(0x01)
	Unknown OverrideParameters; // 0x4c8(0x108)
	Unknown bForceSolo; // 0x5d0(0x01)
	Unknown bAutoDestroy; // 0x5fc(0x01)
	Unknown bRenderingEnabled; // 0x5fc(0x01)
	Unknown bAutoManageAttachment; // 0x5fc(0x01)
	Unknown bAutoAttachWeldSimulatedBodies; // 0x5fc(0x01)
	float MaxTimeBeforeForceUpdateTransform; // 0x600(0x04)
	struct FMulticastInlineDelegate OnSystemFinished; // 0x608(0x10)
	Unknown AutoAttachParent; // 0x618(0x08)
	struct FName AutoAttachSocketName; // 0x620(0x08)
	Unknown AutoAttachLocationRule; // 0x628(0x01)
	Unknown AutoAttachRotationRule; // 0x629(0x01)
	Unknown AutoAttachScaleRule; // 0x62a(0x01)
	Unknown WorldParticleSystemPools; // 0x28(0x50)
	Unknown Submix; // 0x30(0x08)
	Unknown Submix; // 0x30(0x08)
	int32_t Resolution; // 0x38(0x04)
	float ScopeInMilliseconds; // 0x3c(0x04)
	int32_t Resolution; // 0x38(0x04)
	float MinimumFrequency; // 0x3c(0x04)
	float MaximumFrequency; // 0x40(0x04)
	float NoiseFloorDb; // 0x44(0x04)
	int32_t PlayerControllerIndex; // 0x30(0x04)
	Unknown ShaderLUT; // 0x30(0x10)
	float LUTMinTime; // 0x40(0x04)
	float LUTMaxTime; // 0x44(0x04)
	float LUTInvTimeRange; // 0x48(0x04)
	float LUTNumSamplesMinusOne; // 0x4c(0x04)
	Unknown bUseLUT; // 0x50(0x01)
	Unknown RedCurve; // 0x58(0x80)
	Unknown GreenCurve; // 0xd8(0x80)
	Unknown BlueCurve; // 0x158(0x80)
	Unknown AlphaCurve; // 0x1d8(0x80)
	uint32_t Seed; // 0x30(0x04)
	Unknown Curve; // 0x58(0x80)
	Unknown CallbackHandlerParameter; // 0x30(0x28)
	Unknown OutputShaderStages; // 0x30(0x50)
	Unknown IterationShaderStages; // 0x80(0x50)
	int32_t NumCellsX; // 0xd0(0x04)
	int32_t NumCellsY; // 0xd4(0x04)
	int32_t NumCellsMaxAxis; // 0xd8(0x04)
	int32_t NumAttributes; // 0xdc(0x04)
	Unknown SetGridFromMaxAxis; // 0xe0(0x01)
	Unknown WorldBBoxSize; // 0xe4(0x08)
	Unknown NumVoxels; // 0xd0(0x0c)
	float VoxelSize; // 0xdc(0x04)
	Unknown SetGridFromVoxelSize; // 0xe0(0x01)
	Unknown WorldBBoxSize; // 0xe4(0x0c)
	uint32_t MaxNeighborsPerVoxel; // 0xf0(0x04)
	struct FString EmitterName; // 0x30(0x10)
	Unknown Source; // 0x30(0x08)
	Unknown MeshUserParameter; // 0x38(0x28)
	Unknown SourceComponent; // 0x60(0x08)
	Unknown SkinningMode; // 0x68(0x01)
	Unknown SamplingRegions; // 0x70(0x10)
	int32_t WholeMeshLOD; // 0x80(0x04)
	Unknown FilteredBones; // 0x88(0x10)
	Unknown FilteredSockets; // 0x98(0x10)
	struct FName ExcludeBoneName; // 0xa8(0x08)
	Unknown bExcludeBone; // 0xb0(0x01)
	Unknown Source; // 0x30(0x08)
	Unknown DefaultMesh; // 0x30(0x08)
	Unknown Source; // 0x38(0x08)
	Unknown SourceComponent; // 0x40(0x08)
	Unknown SectionFilter; // 0x48(0x10)
	Unknown Texture; // 0x30(0x08)
	Unknown XCurve; // 0x58(0x80)
	Unknown YCurve; // 0xd8(0x80)
	Unknown XCurve; // 0x58(0x80)
	Unknown YCurve; // 0xd8(0x80)
	Unknown ZCurve; // 0x158(0x80)
	Unknown WCurve; // 0x1d8(0x80)
	Unknown XCurve; // 0x58(0x80)
	Unknown YCurve; // 0xd8(0x80)
	Unknown ZCurve; // 0x158(0x80)
	Unknown Field; // 0x30(0x08)
	Unknown bTileX; // 0x38(0x01)
	Unknown bTileY; // 0x39(0x01)
	Unknown bTileZ; // 0x3a(0x01)
	Unknown Texture; // 0x30(0x08)
	Unknown UpdateFrequency; // 0x28(0x04)
	Unknown CullReaction; // 0x2c(0x04)
	Unknown DetailLevelScalabilitySettings; // 0x30(0x10)
	Unknown SystemScalabilitySettings; // 0x40(0x10)
	Unknown EmitterScalabilitySettings; // 0x50(0x10)
	Unknown bLocalSpace; // 0x28(0x01)
	Unknown bDeterminism; // 0x29(0x01)
	int32_t RandomSeed; // 0x2c(0x04)
	Unknown AllocationMode; // 0x30(0x01)
	int32_t PreAllocationCount; // 0x34(0x04)
	Unknown UpdateScriptProps; // 0x38(0x28)
	Unknown SpawnScriptProps; // 0x60(0x28)
	Unknown EmitterSpawnScriptProps; // 0x88(0x28)
	Unknown EmitterUpdateScriptProps; // 0xb0(0x28)
	Unknown SimTarget; // 0xd8(0x01)
	Unknown FixedBounds; // 0xdc(0x1c)
	int32_t MinDetailLevel; // 0xf8(0x04)
	int32_t MaxDetailLevel; // 0xfc(0x04)
	Unknown GlobalSpawnCountScaleOverrides; // 0x100(0x14)
	Unknown Platforms; // 0x118(0x20)
	Unknown ScalabilityOverrides; // 0x138(0x10)
	Unknown bInterpolatedSpawning; // 0x148(0x01)
	Unknown bFixedBounds; // 0x148(0x01)
	Unknown bUseMinDetailLevel; // 0x148(0x01)
	Unknown bUseMaxDetailLevel; // 0x148(0x01)
	Unknown bOverrideGlobalSpawnCountScale; // 0x148(0x01)
	Unknown bRequiresPersistentIDs; // 0x148(0x01)
	float MaxDeltaTimePerTick; // 0x14c(0x04)
	uint32_t DefaultShaderStageIndex; // 0x150(0x04)
	uint32_t MaxUpdateIterations; // 0x154(0x04)
	Unknown SpawnStages; // 0x158(0x50)
	Unknown bSimulationStagesEnabled; // 0x1a8(0x01)
	Unknown bDeprecatedShaderStagesEnabled; // 0x1a8(0x01)
	Unknown bLimitDeltaTime; // 0x1a8(0x01)
	struct FString UniqueEmitterName; // 0x1b0(0x10)
	Unknown RendererProperties; // 0x1c0(0x10)
	Unknown EventHandlerScriptProps; // 0x1d0(0x10)
	Unknown SimulationStages; // 0x1e0(0x10)
	Unknown GPUComputeScript; // 0x1f0(0x08)
	Unknown SharedEventGeneratorIds; // 0x1f8(0x10)
	uint32_t NumParticles; // 0x28(0x04)
	int32_t SortOrderHint; // 0x28(0x04)
	Unknown bIsEnabled; // 0x2c(0x01)
	Unknown bMotionBlurEnabled; // 0x2d(0x01)
	Unknown bUseInverseSquaredFalloff; // 0x50(0x01)
	Unknown bAffectsTranslucency; // 0x50(0x01)
	Unknown bOverrideRenderingEnabled; // 0x50(0x01)
	float RadiusScale; // 0x54(0x04)
	Unknown ColorAdd; // 0x58(0x0c)
	Unknown LightRenderingEnabledBinding; // 0x68(0x78)
	Unknown LightExponentBinding; // 0xe0(0x78)
	Unknown PositionBinding; // 0x158(0x78)
	Unknown ColorBinding; // 0x1d0(0x78)
	Unknown RadiusBinding; // 0x248(0x78)
	Unknown VolumetricScatteringBinding; // 0x2c0(0x78)
	Unknown ParticleMesh; // 0x50(0x08)
	Unknown SortMode; // 0x58(0x01)
	Unknown bOverrideMaterials; // 0x5c(0x01)
	Unknown bSortOnlyWhenTranslucent; // 0x5c(0x01)
	Unknown OverrideMaterials; // 0x60(0x10)
	Unknown SubImageSize; // 0x70(0x08)
	Unknown bSubImageBlend; // 0x78(0x01)
	Unknown FacingMode; // 0x7c(0x01)
	Unknown bLockedAxisEnable; // 0x80(0x01)
	Unknown LockedAxis; // 0x84(0x0c)
	Unknown LockedAxisSpace; // 0x90(0x01)
	Unknown PositionBinding; // 0x98(0x78)
	Unknown ColorBinding; // 0x110(0x78)
	Unknown VelocityBinding; // 0x188(0x78)
	Unknown MeshOrientationBinding; // 0x200(0x78)
	Unknown ScaleBinding; // 0x278(0x78)
	Unknown SubImageIndexBinding; // 0x2f0(0x78)
	Unknown DynamicMaterialBinding; // 0x368(0x78)
	Unknown DynamicMaterial1Binding; // 0x3e0(0x78)
	Unknown DynamicMaterial2Binding; // 0x458(0x78)
	Unknown DynamicMaterial3Binding; // 0x4d0(0x78)
	Unknown MaterialRandomBinding; // 0x548(0x78)
	Unknown CustomSortingBinding; // 0x5c0(0x78)
	Unknown NormalizedAgeBinding; // 0x638(0x78)
	Unknown CameraOffsetBinding; // 0x6b0(0x78)
	Unknown Collection; // 0x28(0x08)
	Unknown OverridenParameters; // 0x30(0x10)
	Unknown ParameterStorage; // 0x40(0xb8)
	struct FName Namespace; // 0x28(0x08)
	Unknown Parameters; // 0x30(0x10)
	Unknown DefaultInstance; // 0x40(0x08)
	Unknown CompileId; // 0x48(0x10)
	Unknown Scripts; // 0x28(0x10)
	Unknown System; // 0x38(0x08)
	struct FName Param; // 0x28(0x08)
	int32_t Count; // 0x30(0x04)
	int32_t Min; // 0x38(0x04)
	int32_t MAX; // 0x3c(0x04)
	float Min; // 0x38(0x04)
	float MAX; // 0x3c(0x04)
	Unknown Min; // 0x38(0x08)
	Unknown MAX; // 0x40(0x08)
	Unknown Min; // 0x38(0x0c)
	Unknown MAX; // 0x44(0x0c)
	Unknown Min; // 0x40(0x10)
	Unknown MAX; // 0x50(0x10)
	Unknown Min; // 0x38(0x10)
	Unknown MAX; // 0x48(0x10)
	Unknown System; // 0x310(0x08)
	Unknown ResetMode; // 0x318(0x01)
	Unknown PreviewAxisX; // 0x320(0x08)
	Unknown PreviewAxisY; // 0x328(0x08)
	Unknown PreviewClass; // 0x330(0x08)
	float SpacingX; // 0x338(0x04)
	float SpacingY; // 0x33c(0x04)
	int32_t NumX; // 0x340(0x04)
	int32_t NumY; // 0x344(0x04)
	Unknown PreviewComponents; // 0x348(0x10)
	Unknown Material; // 0x50(0x08)
	Unknown MaterialUserParamBinding; // 0x58(0x28)
	Unknown FacingMode; // 0x80(0x01)
	float UV0TilingDistance; // 0x84(0x04)
	Unknown UV0Scale; // 0x88(0x08)
	Unknown UV0Offset; // 0x90(0x08)
	Unknown UV0AgeOffsetMode; // 0x98(0x01)
	float UV1TilingDistance; // 0x9c(0x04)
	Unknown UV1Scale; // 0xa0(0x08)
	Unknown UV1Offset; // 0xa8(0x08)
	Unknown UV1AgeOffsetMode; // 0xb0(0x01)
	Unknown DrawDirection; // 0xb1(0x01)
	float CurveTension; // 0xb4(0x04)
	Unknown TessellationMode; // 0xb8(0x01)
	int32_t TessellationFactor; // 0xbc(0x04)
	Unknown bUseConstantFactor; // 0xc0(0x01)
	float TessellationAngle; // 0xc4(0x04)
	Unknown bScreenSpaceTessellation; // 0xc8(0x01)
	Unknown PositionBinding; // 0xd0(0x78)
	Unknown ColorBinding; // 0x148(0x78)
	Unknown VelocityBinding; // 0x1c0(0x78)
	Unknown NormalizedAgeBinding; // 0x238(0x78)
	Unknown RibbonTwist; // 0x2b0(0x78)
	Unknown RibbonWidthBeBindi; // 0x328(0x78)
	Unknown RibbonFacingBinding; // 0x3a0(0x78)
	Unknown RibbonIdBinding; // 0x418(0x78)
	Unknown RibbonLinkOrderBinding; // 0x490(0x78)
	Unknown MaterialRandomBinding; // 0x508(0x78)
	Unknown DynamicMaterialBinding; // 0x580(0x78)
	Unknown DynamicMaterial1Binding; // 0x5f8(0x78)
	Unknown DynamicMaterial2Binding; // 0x670(0x78)
	Unknown DynamicMaterial3Binding; // 0x6e8(0x78)
	Unknown Usage; // 0x28(0x01)
	int32_t UsageIndex; // 0x2c(0x04)
	Unknown UsageId; // 0x30(0x10)
	Unknown RapidIterationParameters; // 0x40(0xb8)
	Unknown ScriptExecutionParamStore; // 0xf8(0xd8)
	Unknown ScriptExecutionBoundParameters; // 0x1d0(0x10)
	Unknown CachedScriptVMId; // 0x1e0(0x48)
	Unknown CachedScriptVM; // 0x3d8(0x128)
	Unknown CachedParameterCollectionReferences; // 0x500(0x10)
	Unknown CachedDefaultDataInterfaces; // 0x510(0x10)
	Unknown AdditionalParameterTypes; // 0x38(0x10)
	Unknown AdditionalPayloadTypes; // 0x48(0x10)
	Unknown AdditionalParameterEnums; // 0x58(0x10)
	Unknown DefaultEffectType; // 0x68(0x18)
	Unknown QualityLevels; // 0x80(0x10)
	Unknown DefaultEffectTypePtr; // 0x90(0x08)
	Unknown Script; // 0x28(0x08)
	struct FName SimulationStageName; // 0x30(0x08)
	Unknown IterationSource; // 0x38(0x01)
	int32_t Iterations; // 0x3c(0x04)
	Unknown bSpawnOnly; // 0x40(0x01)
	Unknown DataInterface; // 0x48(0x28)
	Unknown Material; // 0x50(0x08)
	Unknown MaterialUserParamBinding; // 0x58(0x28)
	Unknown Alignment; // 0x80(0x01)
	Unknown FacingMode; // 0x81(0x01)
	Unknown PivotInUVSpace; // 0x84(0x08)
	Unknown SortMode; // 0x8c(0x01)
	Unknown SubImageSize; // 0x90(0x08)
	Unknown bSubImageBlend; // 0x98(0x01)
	Unknown bRemoveHMDRollInVR; // 0x98(0x01)
	Unknown bSortOnlyWhenTranslucent; // 0x98(0x01)
	float MinFacingCameraBlendDistance; // 0x9c(0x04)
	float MaxFacingCameraBlendDistance; // 0xa0(0x04)
	Unknown PositionBinding; // 0xa8(0x78)
	Unknown ColorBinding; // 0x120(0x78)
	Unknown VelocityBinding; // 0x198(0x78)
	Unknown SpriteRotationBinding; // 0x210(0x78)
	Unknown SpriteSizeBinding; // 0x288(0x78)
	Unknown SpriteFacingBinding; // 0x300(0x78)
	Unknown SpriteAlignmentBinding; // 0x378(0x78)
	Unknown SubImageIndexBinding; // 0x3f0(0x78)
	Unknown DynamicMaterialBinding; // 0x468(0x78)
	Unknown DynamicMaterial1Binding; // 0x4e0(0x78)
	Unknown DynamicMaterial2Binding; // 0x558(0x78)
	Unknown DynamicMaterial3Binding; // 0x5d0(0x78)
	Unknown CameraOffsetBinding; // 0x648(0x78)
	Unknown UVScaleBinding; // 0x6c0(0x78)
	Unknown MaterialRandomBinding; // 0x738(0x78)
	Unknown CustomSortingBinding; // 0x7b0(0x78)
	Unknown NormalizedAgeBinding; // 0x828(0x78)
	Unknown bDumpDebugSystemInfo; // 0x31(0x01)
	Unknown bDumpDebugEmitterInfo; // 0x32(0x01)
	Unknown bFixedBounds; // 0x34(0x01)
	Unknown EffectType; // 0x38(0x08)
	Unknown bOverrideScalabilitySettings; // 0x40(0x01)
	Unknown ScalabilityOverrides; // 0x48(0x10)
	Unknown SystemScalabilityOv; // 0x58(0x10)
	Unknown EmitterHandles; // 0x68(0x10)
	Unknown ParameterCollectionOverrides; // 0x78(0x10)
	Unknown SystemSpawnScript; // 0x88(0x08)
	Unknown SystemUpdateScript; // 0x90(0x08)
	Unknown SystemCompiledData; // 0xa8(0x258)
	Unknown ExposedParameters; // 0x300(0x108)
	Unknown FixedBounds; // 0x408(0x1c)
	Unknown bAutoDeactivate; // 0x424(0x01)
	float WarmupTime; // 0x428(0x04)
	int32_t WarmupTickCount; // 0x42c(0x04)
	float WarmupTickDelta; // 0x430(0x04)
	Unknown bHasSystemScriptDIsWithPerInstanceData; // 0x434(0x01)
	Unknown UserDINamesReadInSystemScripts; // 0x438(0x10)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown UpArrow; // 0x250(0x08)
	Unknown InteractivePopup_motion; // 0x258(0x08)
	Unknown AmmoCnt; // 0x260(0x08)
	Unknown AmmoDown; // 0x268(0x08)
	Unknown AmmoUp; // 0x270(0x08)
	Unknown Attack; // 0x278(0x08)
	Unknown AttackDown; // 0x280(0x08)
	Unknown AttackUp; // 0x288(0x08)
	Unknown BuffListWithText; // 0x290(0x08)
	Unknown CanvasPanel_17; // 0x298(0x08)
	Unknown CP_Key; // 0x2a0(0x08)
	Unknown CustomWidgetSwitcher; // 0x2a8(0x08)
	Unknown fill; // 0x2b0(0x08)
	Unknown Firingrate; // 0x2b8(0x08)
	Unknown FiringrateDown; // 0x2c0(0x08)
	Unknown FiringrateUp; // 0x2c8(0x08)
	Unknown HB_BuffList; // 0x2d0(0x08)
	Unknown HorizontalBox_Rarity; // 0x2d8(0x08)
	Unknown HorizontalBox_WeaponRarity; // 0x2e0(0x08)
	Unknown Image; // 0x2e8(0x08)
	Unknown Image_4; // 0x2f0(0x08)
	Unknown Image_10; // 0x2f8(0x08)
	Unknown Image_152; // 0x300(0x08)
	Unknown Image_ItemIcon; // 0x308(0x08)
	Unknown Image_WeaponLock; // 0x310(0x08)
	Unknown Interactive; // 0x318(0x08)
	Unknown ItemBg_01; // 0x320(0x08)
	Unknown Key_Bomb; // 0x328(0x08)
	Unknown KeyImageWidget_C_1; // 0x330(0x08)
	Unknown NeedItem; // 0x338(0x08)
	Unknown PickUpBg; // 0x340(0x08)
	Unknown PickupItem; // 0x348(0x08)
	Unknown Range; // 0x350(0x08)
	Unknown RangeDown; // 0x358(0x08)
	Unknown RangeUp; // 0x360(0x08)
	Unknown RichT_Action; // 0x368(0x08)
	Unknown RichT_ActionDescription; // 0x370(0x08)
	Unknown SizeBox_WeaponOwner; // 0x378(0x08)
	Unknown Stability; // 0x380(0x08)
	Unknown StabilityDown; // 0x388(0x08)
	Unknown StabilityUp; // 0x390(0x08)
	Unknown Switcher_Item; // 0x398(0x08)
	Unknown T_BombCancel; // 0x3a0(0x08)
	Unknown T_ComparingWeaponName; // 0x3a8(0x08)
	Unknown T_PickupItemName; // 0x3b0(0x08)
	Unknown T_WeaponName; // 0x3b8(0x08)
	Unknown Text_CombineTarget; // 0x3c0(0x08)
	Unknown TextBlock_5; // 0x3c8(0x08)
	Unknown U; // 0x3d0(0x08)
	Unknown U_2; // 0x3d8(0x08)
	Unknown U_3; // 0x3e0(0x08)
	Unknown U; // 0x3e8(0x08)
	Unknown U_2; // 0x3f0(0x08)
	Unknown U_3; // 0x3f8(0x08)
	Unknown VerticalBox_CombineTarget; // 0x400(0x08)
	Unknown VerticalBox_StatUp; // 0x408(0x08)
	Unknown WeaponDesc; // 0x410(0x08)
	Unknown WeaponItemImage; // 0x418(0x08)
	Unknown WeaponItemSlot; // 0x420(0x08)
	Unknown WeaponItemSlot_2; // 0x428(0x08)
	Unknown WeaponItemSlotHover; // 0x430(0x08)
	Unknown WidgetSwitcher_123; // 0x438(0x08)
	Unknown DisableTextColor; // 0x440(0x28)
	Unknown EnableTextColor; // 0x468(0x28)
	Unknown IsDisable; // 0x490(0x01)
	Unknown PickupItemInfo_1; // 0x498(0x98)
	Unknown UpLinearColor; // 0x530(0x10)
	Unknown DownLinearColor; // 0x540(0x10)
	Unknown NormalSlateColor; // 0x550(0x28)
	Unknown UpSlateColor; // 0x578(0x28)
	Unknown DownSlateColor; // 0x5a0(0x28)
	Unknown bAction; // 0x5c8(0x01)
	Unknown bCompare; // 0x5c9(0x01)
	Unknown CompareWeaponInfo; // 0x5d0(0xb30)
	Unknown IsNoHide; // 0x1100(0x01)
	Unknown bWeapon; // 0x1101(0x01)
	Unknown bPlayAnimation_WeaponCompare; // 0x1102(0x01)
	Unknown VisibleTextColor; // 0x1108(0x28)
	Unknown BrushActionKeyWhite; // 0x1130(0x88)
	Unknown BrushActionKeyRed; // 0x11b8(0x88)
	struct FName TempName; // 0x1240(0x08)
	struct FText AvailableAmmoQuantity; // 0x1248(0x18)
	Unknown Signature; // 0x28(0x10)
	Unknown EvalOptions; // 0x50(0x04)
	Unknown bIsEvalDisabled; // 0x55(0x01)
	Unknown EvalOptions; // 0x50(0x02)
	Unknown Easing; // 0x58(0x38)
	Unknown SectionRange; // 0x90(0x10)
	Unknown PreRollFrames; // 0xa0(0x04)
	Unknown PostRollFrames; // 0xa4(0x04)
	int32_t rowIndex; // 0xa8(0x04)
	int32_t OverlapPriority; // 0xac(0x04)
	Unknown bIsActive; // 0xb0(0x01)
	Unknown bIsLocked; // 0xb0(0x01)
	float StartTime; // 0xb4(0x04)
	float EndTime; // 0xb8(0x04)
	float PrerollTime; // 0xbc(0x04)
	float PostrollTime; // 0xc0(0x04)
	Unknown bIsInfinite; // 0xc4(0x01)
	Unknown bSupportsInfiniteRange; // 0xc8(0x01)
	Unknown BlendType; // 0xc9(0x02)
	Unknown PrecompiledEvaluationTemplate; // 0x50(0x2f0)
	Unknown DefaultCompletionMode; // 0x340(0x01)
	Unknown bParentContextsAreSignificant; // 0x341(0x01)
	Unknown bPlayableDirectly; // 0x342(0x01)
	struct FMulticastInlineDelegate OnPlay; // 0x408(0x10)
	struct FMulticastInlineDelegate OnPlayReverse; // 0x418(0x10)
	struct FMulticastInlineDelegate OnStop; // 0x428(0x10)
	struct FMulticastInlineDelegate OnPause; // 0x438(0x10)
	struct FMulticastInlineDelegate OnFinished; // 0x448(0x10)
	Unknown status; // 0x458(0x01)
	Unknown bReversePlayback; // 0x45c(0x01)
	Unknown Sequence; // 0x460(0x08)
	Unknown StartTime; // 0x468(0x04)
	int32_t DurationFrames; // 0x46c(0x04)
	int32_t CurrentNumLoops; // 0x470(0x04)
	Unknown PlaybackSettings; // 0x488(0x14)
	Unknown RootTemplateInstance; // 0x4a0(0x320)
	Unknown NetSyncProps; // 0x828(0x10)
	Unknown PlaybackClient; // 0x838(0x10)
	Unknown Parameters; // 0xe0(0x24)
	float StartOffset; // 0x104(0x04)
	float TimeScale; // 0x108(0x04)
	float PrerollTime; // 0x10c(0x04)
	Unknown SubSequence; // 0x110(0x08)
	Unknown ActorToRecord; // 0x118(0x1c)
	struct FString TargetSequenceName; // 0x138(0x10)
	Unknown TargetPathToRecordTo; // 0x148(0x10)
	Unknown Sections; // 0x58(0x10)
	Unknown Spawnables; // 0x50(0x10)
	Unknown Possessables; // 0x60(0x10)
	Unknown ObjectBindings; // 0x70(0x10)
	Unknown BindingGroups; // 0x80(0x50)
	Unknown MasterTracks; // 0xd0(0x10)
	Unknown CameraCutTrack; // 0xe0(0x08)
	Unknown SelectionRange; // 0xe8(0x10)
	Unknown PlaybackRange; // 0xf8(0x10)
	Unknown TickResolution; // 0x108(0x08)
	Unknown DisplayRate; // 0x110(0x08)
	Unknown EvaluationType; // 0x118(0x01)
	Unknown ClockSource; // 0x119(0x01)
	Unknown CustomClockSourcePath; // 0x120(0x18)
	Unknown MarkedFrames; // 0x138(0x10)
	Unknown BindingData; // 0x28(0x10)
	Unknown Type; // 0x30(0x01)
	Unknown Curve; // 0x30(0x08)
	struct FName FolderName; // 0x28(0x08)
	Unknown ChildFolders; // 0x30(0x10)
	Unknown ChildMasterTracks; // 0x40(0x10)
	Unknown ChildObject; // 0x50(0x10)
	Unknown bHighPassFilter; // 0x58(0x01)
	Unknown SectionArray; // 0x60(0x10)
	Unknown MovieScene; // 0x348(0x08)
	Unknown SectionArray; // 0x68(0x10)
	Unknown UberGraphFrame; // 0x13b8(0x08)
	Unknown Observer; // 0x13c0(0x08)
	Unknown PlayingKillCam; // 0x13c8(0x01)
	Unknown AfterGameHUD; // 0x13d0(0x08)
	Unknown GameInstanceRef; // 0x13d8(0x08)
	Unknown bKillCamFinish; // 0x13e0(0x01)
	Unknown Template; // 0x38(0x08)
	Unknown LocationOffset; // 0x40(0x0c)
	Unknown RotationOffset; // 0x4c(0x0c)
	Unknown Scale; // 0x58(0x0c)
	Unknown Attached; // 0x80(0x01)
	struct FName SocketName; // 0x84(0x08)
	Unknown Template; // 0x30(0x08)
	struct FName SocketName; // 0x38(0x08)
	Unknown LocationOffset; // 0x40(0x0c)
	Unknown RotationOffset; // 0x4c(0x0c)
	Unknown bDestroyAtEnd; // 0x58(0x01)
	Unknown UberGraphFrame; // 0x258(0x08)
	Unknown U; // 0x260(0x08)
	Unknown U_2; // 0x268(0x08)
	Unknown VerticalBox_InfoList; // 0x270(0x08)
	Unknown Params; // 0xe0(0x40)
	Unknown AnimationSections; // 0x58(0x10)
	Unknown InitialState; // 0x348(0x01)
	float ObstructionRefreshInterval; // 0x34c(0x04)
	Unknown ObstructionCollisionChannel; // 0x350(0x01)
	uint32_t ShortID; // 0x28(0x04)
	Unknown UserData; // 0x30(0x10)
	Unknown AkAudioEvent; // 0x310(0x08)
	Unknown AkComponent; // 0x318(0x08)
	Unknown StopWhenOwnerIsDestroyed; // 0x320(0x01)
	Unknown AutoPost; // 0x321(0x01)
	Unknown CommonSettings; // 0x28(0x68)
	Unknown CommunicationSettings; // 0x90(0x28)
	Unknown AdvancedSettings; // 0xb8(0x40)
	uint32_t CachedHash; // 0x28(0x04)
	Unknown MediaList; // 0x60(0x10)
	Unknown CurrentAssetData; // 0x28(0x08)
	Unknown PlatformAssetData; // 0x40(0x08)
	Unknown AutoLoad; // 0x50(0x01)
	Unknown LocalizedPlatformAssetDataMap; // 0x58(0x50)
	Unknown LinkedAkEvents; // 0xa8(0x50)
	Unknown CurrentLocalizedPlatformAssetData; // 0xf8(0x08)
	Unknown GroupValue; // 0x28(0x28)
	Unknown DefaultGroupValue; // 0x50(0x08)
	Unknown MediaList; // 0x58(0x10)
	Unknown Children; // 0x68(0x10)
	Unknown SwitchContainers; // 0x70(0x10)
	Unknown DefaultGroupValue; // 0x80(0x08)
	float MaxAttenuationRadius; // 0x88(0x04)
	Unknown IsInfinite; // 0x8c(0x01)
	float MinimumDuration; // 0x90(0x04)
	float MaximumDuration; // 0x94(0x04)
	Unknown LocalizedMedia; // 0x98(0x50)
	Unknown PostedEvents; // 0xe8(0x50)
	Unknown UserDefinedSends; // 0x138(0x50)
	Unknown PostedTriggers; // 0x188(0x50)
	Unknown GroupValues; // 0x1d8(0x50)
	Unknown LocalizedPlatformAssetDataMap; // 0x50(0x50)
	Unknown RequiredBank; // 0xa0(0x08)
	Unknown CurrentLocalizedPlatformData; // 0xb0(0x08)
	float MaxAttenuationRadius; // 0xb8(0x04)
	Unknown IsInfinite; // 0xbc(0x01)
	float MinimumDuration; // 0xc0(0x04)
	float MaximumDuration; // 0xc4(0x04)
	Unknown AkAudioEvent; // 0x238(0x08)
	struct FString EventName; // 0x240(0x10)
	Unknown bAutoRegisterWithWwise; // 0x250(0x01)
	Unknown bUseSpatialAudio; // 0x258(0x01)
	Unknown OcclusionCollisionChannel; // 0x260(0x01)
	Unknown EnableSpotReflectors; // 0x264(0x01)
	Unknown EarlyReflectionAuxBus; // 0x268(0x08)
	struct FString EarlyReflectionAuxBusName; // 0x270(0x10)
	int32_t EarlyReflectionOrder; // 0x280(0x04)
	float EarlyReflectionBusSendGain; // 0x284(0x04)
	float EarlyReflectionMaxPathLength; // 0x288(0x04)
	float roomReverbAuxBusGain; // 0x28c(0x04)
	int32_t diffractionMaxEdges; // 0x290(0x04)
	int32_t diffractionMaxPaths; // 0x294(0x04)
	float diffractionMaxPathLength; // 0x298(0x04)
	Unknown DrawFirstOrderReflections; // 0x29c(0x01)
	Unknown DrawSecondOrderReflections; // 0x29c(0x01)
	Unknown DrawHigherOrderReflections; // 0x29c(0x01)
	Unknown DrawDiffraction; // 0x29c(0x01)
	Unknown StopWhenOwnerDestroyed; // 0x2a0(0x01)
	float RoomIterationInterv; // 0x2a4(0x04)
	float AttenuationScalingFactor; // 0x2a8(0x04)
	float OcclusionRefreshInterval; // 0x2ac(0x04)
	Unknown bUseReverbVolumes; // 0x2b0(0x01)
	Unknown Listeners; // 0x3a0(0x50)
	Unknown Emitters; // 0x3f0(0x50)
	Unknown RequiredBank; // 0x50(0x08)
	Unknown CheckedState; // 0x4d0(0x01)
	struct FDelegate CheckedStateDelegate; // 0x4d4(0x10)
	Unknown WidgetStyle; // 0x4e8(0x580)
	Unknown HorizontalAlignment; // 0xa68(0x01)
	Unknown IsFocusable; // 0xa69(0x01)
	Unknown ThePropertyToControl; // 0xa70(0x10)
	Unknown ItemToControl; // 0xa80(0x40)
	struct FMulticastInlineDelegate AkOnCheckStateChanged; // 0xac0(0x10)
	struct FMulticastInlineDelegate OnItemDropped; // 0xad0(0x10)
	struct FMulticastInlineDelegate OnPropertyDropped; // 0xae0(0x10)
	struct FString UnrealFolderPath; // 0x40(0x10)
	struct FString WwiseFolderPath; // 0x50(0x10)
	Unknown AkComponent; // 0x28(0x08)
	int32_t PlayingID; // 0x30(0x04)
	int32_t EventID; // 0x34(0x04)
	int32_t Identifier; // 0x38(0x04)
	int32_t Position; // 0x3c(0x04)
	struct FString Label; // 0x40(0x10)
	float Duration; // 0x38(0x04)
	float EstimatedDuration; // 0x3c(0x04)
	int32_t AudioNodeID; // 0x40(0x04)
	int32_t MediaID; // 0x44(0x04)
	Unknown bStreaming; // 0x48(0x01)
	int32_t PlayingID; // 0x30(0x04)
	Unknown SegmentInfo; // 0x34(0x24)
	Unknown MusicSyncType; // 0x58(0x01)
	struct FString UserCueName; // 0x60(0x10)
	Unknown MeshType; // 0x238(0x01)
	int32_t LOD; // 0x23c(0x04)
	float WeldingThreshold; // 0x240(0x04)
	Unknown StaticMeshSurfaceOv; // 0x248(0x50)
	Unknown CollisionMeshSurfaceOverride; // 0x298(0x10)
	Unknown bEnableDiffraction; // 0x2a8(0x01)
	Unknown bEnableDiffractionOnBoundaryEdges; // 0x2a8(0x01)
	Unknown AssociatedRoom; // 0x2b0(0x08)
	Unknown GeometryData; // 0x2c8(0x50)
	Unknown MediaDependencies; // 0x40(0x10)
	uint32_t GroupShortID; // 0x50(0x04)
	Unknown CommonSettings; // 0x28(0x68)
	Unknown CommunicationSettings; // 0x90(0x28)
	Unknown AdvancedSettings; // 0xb8(0x40)
	Unknown PluginInfos; // 0x70(0x10)
	Unknown AvailableAudioCultures; // 0x50(0x10)
	struct FString DefaultLanguage; // 0x60(0x10)
	Unknown CommonSettings; // 0x28(0x68)
	Unknown AudioSession; // 0x90(0x0c)
	Unknown CommunicationSettings; // 0xa0(0x28)
	Unknown AdvancedSettings; // 0xc8(0x34)
	struct FMulticastInlineDelegate OnSelectionChanged; // 0x108(0x10)
	struct FMulticastInlineDelegate OnPropertyDragged; // 0x118(0x10)
	struct FMulticastInlineDelegate OnSelectionChanged; // 0x108(0x10)
	struct FMulticastInlineDelegate OnPropertyDragged; // 0x118(0x10)
	Unknown bEnable; // 0x238(0x01)
	Unknown AuxBus; // 0x240(0x08)
	struct FString AuxBusName; // 0x248(0x10)
	float SendLevel; // 0x258(0x04)
	float FadeRate; // 0x25c(0x04)
	float Priority; // 0x260(0x04)
	Unknown NextLowerPriorityComponent; // 0x268(0x08)
	Unknown CommonSettings; // 0x28(0x68)
	Unknown CommunicationSettings; // 0x90(0x28)
	Unknown AdvancedSettings; // 0xb8(0x38)
	Unknown CommonSettings; // 0x28(0x68)
	Unknown CommunicationSettings; // 0x90(0x28)
	Unknown AdvancedSettings; // 0xb8(0x38)
	Unknown CommonSettings; // 0x28(0x68)
	Unknown CommunicationSettings; // 0x90(0x28)
	Unknown AdvancedSettings; // 0xb8(0x38)
	Unknown IsStreamed; // 0x28(0x01)
	Unknown UseDeviceMemory; // 0x29(0x01)
	uint32_t ID; // 0x28(0x04)
	Unknown AutoLoad; // 0x2c(0x01)
	Unknown UserData; // 0x30(0x10)
	Unknown CurrentMediaAssetData; // 0x40(0x08)
	Unknown CommonSettings; // 0x28(0x60)
	Unknown CommunicationSettings; // 0x88(0x28)
	Unknown AdvancedSettings; // 0xb0(0x40)
	Unknown bEnabled; // 0x348(0x01)
	Unknown AuxBus; // 0x350(0x08)
	struct FString AuxBusName; // 0x358(0x10)
	float SendLevel; // 0x368(0x04)
	float FadeRate; // 0x36c(0x04)
	float Priority; // 0x370(0x04)
	Unknown LateReverbComponent; // 0x378(0x08)
	Unknown bEnable; // 0x258(0x01)
	Unknown NextLowerPriorityComponent; // 0x260(0x08)
	float Priority; // 0x268(0x04)
	float WallOcclusion; // 0x26c(0x04)
	float AuxSendLevel; // 0x270(0x04)
	Unknown AutoPost; // 0x274(0x01)
	Unknown MaxSimultaneousReverbVolumes; // 0x28(0x01)
	Unknown WwiseProjectPath; // 0x30(0x10)
	Unknown WwiseSoundDataFolder; // 0x40(0x10)
	Unknown bAutoConnectToWAAPI; // 0x50(0x01)
	Unknown DefaultOcclusionCollisionChannel; // 0x51(0x01)
	Unknown AkGeometryMap; // 0x58(0x50)
	Unknown SplitSwitchContainerMedia; // 0xa8(0x01)
	Unknown SplitMediaPerFolder; // 0xa9(0x01)
	Unknown UseEventBasedPackaging; // 0xaa(0x01)
	Unknown EnableAutomaticAssetSynchronization; // 0xab(0x01)
	struct TSoftClassPtr<UObject> ComponentClass; // 0xb0(0x28)
	struct FString CommandletCommitMessage; // 0xd8(0x10)
	Unknown UnrealCultureToWwiseCulture; // 0xe8(0x50)
	Unknown AskedToUseNewAssetManagement; // 0x138(0x01)
	Unknown bEnableMultiCoreRendering; // 0x139(0x01)
	Unknown MigratedEnableMultiCoreRendering; // 0x13a(0x01)
	Unknown FixupRedirectorsDuringMigration; // 0x13b(0x01)
	Unknown WwiseWindowsInstallationPath; // 0x140(0x10)
	Unknown WwiseMacInstallationPath; // 0x150(0x10)
	Unknown WwiseProjectPath; // 0x28(0x10)
	Unknown WwiseWindowsInstallationPath; // 0x38(0x10)
	Unknown WwiseMacInstallationPath; // 0x48(0x10)
	Unknown EnableAutomaticAssetSynchronization; // 0x58(0x01)
	struct FString WaapiIPAddress; // 0x60(0x10)
	uint32_t WaapiPort; // 0x70(0x04)
	Unknown bAutoConnectToWAAPI; // 0x74(0x01)
	Unknown AutoSyncSelection; // 0x75(0x01)
	Unknown SuppressWwiseProjectPathWarnings; // 0x76(0x01)
	Unknown SoundDataGenerationSkipLanguage; // 0x77(0x01)
	float Value; // 0x108(0x04)
	struct FDelegate ValueDelegate; // 0x10c(0x10)
	Unknown WidgetStyle; // 0x120(0x340)
	Unknown Orientation; // 0x460(0x01)
	Unknown SliderBarColor; // 0x464(0x10)
	Unknown SliderHandleColor; // 0x474(0x10)
	Unknown IndentHandle; // 0x484(0x01)
	Unknown Locked; // 0x485(0x01)
	float StepSize; // 0x488(0x04)
	Unknown IsFocusable; // 0x48c(0x01)
	Unknown ThePropertyToControl; // 0x490(0x10)
	Unknown ItemToControl; // 0x4a0(0x40)
	struct FMulticastInlineDelegate OnValueChanged; // 0x4e0(0x10)
	struct FMulticastInlineDelegate OnItemDropped; // 0x4f0(0x10)
	struct FMulticastInlineDelegate OnPropertyDropped; // 0x500(0x10)
	Unknown SurfaceReflectorSet; // 0x348(0x08)
	Unknown LateReverb; // 0x350(0x08)
	Unknown Room; // 0x358(0x08)
	Unknown EarlyReflectionAuxBus; // 0x310(0x08)
	struct FString EarlyReflectionAuxBusName; // 0x318(0x10)
	Unknown AcousticTexture; // 0x328(0x08)
	float DistanceScalingFactor; // 0x330(0x04)
	float Level; // 0x334(0x04)
	Unknown bEnableSurfaceReflectors; // 0x238(0x01)
	Unknown AcousticPolys; // 0x240(0x10)
	Unknown bEnableDiffraction; // 0x250(0x01)
	Unknown bEnableDiffractionOnBoundaryEdges; // 0x250(0x01)
	Unknown AssociatedRoom; // 0x258(0x08)
	Unknown CommonSettings; // 0x28(0x68)
	Unknown CommunicationSettings; // 0x90(0x28)
	Unknown AdvancedSettings; // 0xb8(0x38)
	Unknown CommonSettings; // 0x28(0x68)
	Unknown AudioSession; // 0x90(0x0c)
	Unknown CommunicationSettings; // 0xa0(0x28)
	Unknown AdvancedSettings; // 0xc8(0x34)
	Unknown CommonSettings; // 0x28(0x68)
	Unknown CommunicationSettings; // 0x90(0x28)
	Unknown AdvancedSettings; // 0xb8(0x40)
	struct FMulticastInlineDelegate OnSelectionChanged; // 0x108(0x10)
	struct FMulticastInlineDelegate OnItemDragged; // 0x118(0x10)
	struct FMulticastInlineDelegate OnSelectionChanged; // 0x108(0x10)
	struct FMulticastInlineDelegate OnItemDragged; // 0x118(0x10)
	Unknown CommonSettings; // 0x28(0x60)
	Unknown ApuHeapSettings; // 0x88(0x08)
	Unknown CommunicationSettings; // 0x90(0x28)
	Unknown AdvancedSettings; // 0xb8(0x3c)
	Unknown Events; // 0x90(0x10)
	Unknown bContinueEventOnMatineeEnd; // 0xa0(0x01)
	struct FString Param; // 0x90(0x10)
	Unknown bPlayOnReverse; // 0xa0(0x01)
	Unknown bContinueRTPCOnMatineeEnd; // 0xa0(0x01)
	float LastUpdatePosition; // 0x28(0x04)
	float LastUpdatePosition; // 0x28(0x04)
	Unknown Event; // 0x120(0x08)
	Unknown RetriggerEvent; // 0x128(0x01)
	int32_t ScrubTailLengthMs; // 0x12c(0x04)
	Unknown StopAtSectionEnd; // 0x130(0x01)
	struct FString EventName; // 0x138(0x10)
	float MaxSourceDuration; // 0x168(0x04)
	struct FString MaxDurationSourceID; // 0x170(0x10)
	Unknown Sections; // 0x58(0x10)
	Unknown bIsAMasterTrack; // 0x68(0x01)
	Unknown RTPC; // 0xe0(0x08)
	struct FString Name; // 0xe8(0x10)
	Unknown FloatCurve; // 0xf8(0x80)
	Unknown FloatChannelSerializationHelper; // 0x178(0x30)
	Unknown RTPCChannel; // 0x1a8(0xa0)
	struct FMulticastInlineDelegate Completed; // 0x30(0x10)
	struct FMulticastInlineDelegate Completed; // 0x30(0x10)
	Unknown Settings; // 0x28(0x1b0)
	Unknown Settings; // 0x28(0x1c0)
	Unknown ColorCasterSettings; // 0x28(0x50)
	Unknown NormalCasterSettings; // 0x28(0x50)
	Unknown Settings; // 0x28(0x230)
	Unknown Settings; // 0x28(0x1c0)
	Unknown Settings; // 0x28(0x1b0)
	Unknown OpacityCasterSettings; // 0x28(0x48)
	Unknown DisplacementCasterSettings; // 0x28(0x58)
	Unknown AmbientOcclusionCasterSettings; // 0x28(0x58)
	Unknown GeometryDataCasterSettings; // 0x30(0x90)
	Unknown VertexColorCasterSettings; // 0x28(0x60)
	Unknown UberGraphFrame; // 0x1360(0x08)
	Unknown Ani_Tutorial_Glow; // 0x1368(0x08)
	Unknown C_Slot_Up_Arrow; // 0x1370(0x08)
	Unknown C_SlotHover_ItemState_Hide; // 0x1378(0x08)
	Unknown C_SlotHover_ItemState_Show; // 0x1380(0x08)
	Unknown C_SlotHover; // 0x1388(0x08)
	Unknown BGImage; // 0x1390(0x08)
	Unknown BGImage_2; // 0x1398(0x08)
	Unknown CanvasPanel_ITemState; // 0x13a0(0x08)
	Unknown Count120; // 0x13a8(0x08)
	Unknown Crate_Default; // 0x13b0(0x08)
	Unknown Crate_Hover; // 0x13b8(0x08)
	Unknown Effect_Booster; // 0x13c0(0x08)
	Unknown Effect_Capsule; // 0x13c8(0x08)
	Unknown HorizontalBox_Rarity; // 0x13d0(0x08)
	Unknown HoverImage; // 0x13d8(0x08)
	Unknown HoverImage_Round; // 0x13e0(0x08)
	Unknown Image_531; // 0x13e8(0x08)
	Unknown Image_539; // 0x13f0(0x08)
	Unknown Image_540; // 0x13f8(0x08)
	Unknown Image_541; // 0x1400(0x08)
	Unknown Image_542; // 0x1408(0x08)
	Unknown Image_543; // 0x1410(0x08)
	Unknown Image_544; // 0x1418(0x08)
	Unknown Image_Bindable; // 0x1420(0x08)
	Unknown Image_Supply; // 0x1428(0x08)
	Unknown ItemImage; // 0x1430(0x08)
	Unknown ItemState_Text; // 0x1438(0x08)
	Unknown KeepedItem_List; // 0x1440(0x08)
	Unknown KeepedItem_ListHover; // 0x1448(0x08)
	Unknown LvColor; // 0x1450(0x08)
	Unknown Motion; // 0x1458(0x08)
	Unknown ProgressBar_309; // 0x1460(0x08)
	Unknown SizeBox_1; // 0x1468(0x08)
	Unknown TextBlock_3; // 0x1470(0x08)
	Unknown Tutorial_Glow; // 0x1478(0x08)
	Unknown U; // 0x1480(0x08)
	Unknown U; // 0x1488(0x08)
	Unknown WeaponColor; // 0x1490(0x08)
	Unknown WeaponEquipItem_Default; // 0x1498(0x08)
	Unknown WeaponEquipItem_Hov; // 0x14a0(0x08)
	Unknown WeaponItemImage; // 0x14a8(0x08)
	int32_t InventoryItemInfoIndex; // 0x14b0(0x04)
	Unknown MedicalBGColor; // 0x14b4(0x10)
	int32_t CurCount; // 0x14c4(0x04)
	struct FMulticastInlineDelegate SetSlotInfo; // 0x14c8(0x10)
	Unknown CanUseCapsule; // 0x14d8(0x01)
	Unknown SelectedHoverImage; // 0x14e0(0x08)
	Unknown ShowRarityStar; // 0x14e8(0x10)
	Unknown ShowIconBG; // 0x14f8(0x10)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown Blink; // 0x250(0x08)
	Unknown FadeIn; // 0x258(0x08)
	Unknown Button_480; // 0x260(0x08)
	Unknown Button_482; // 0x268(0x08)
	Unknown Button_483; // 0x270(0x08)
	Unknown Button_484; // 0x278(0x08)
	Unknown Button_485; // 0x280(0x08)
	Unknown Button_486; // 0x288(0x08)
	Unknown Button_ExitGame; // 0x290(0x08)
	Unknown Button_Retry; // 0x298(0x08)
	Unknown CanvasPanel_10; // 0x2a0(0x08)
	Unknown CanvasPanel_143; // 0x2a8(0x08)
	Unknown CanvasPanel_Default; // 0x2b0(0x08)
	Unknown CanvasPanel_JuvenileRestricted; // 0x2b8(0x08)
	Unknown CanvasPanel_RestrictedUser; // 0x2c0(0x08)
	Unknown CanvasPanel_ServerInspection; // 0x2c8(0x08)
	Unknown CanvasPanel_UnableToConnectServer; // 0x2d0(0x08)
	Unknown CanvasPanel_WaitingServer; // 0x2d8(0x08)
	Unknown HorizontalBox_1; // 0x2e0(0x08)
	Unknown HorizontalBox_2; // 0x2e8(0x08)
	Unknown Image_122; // 0x2f0(0x08)
	Unknown Image_123; // 0x2f8(0x08)
	Unknown Image_309; // 0x300(0x08)
	Unknown Image_bg; // 0x308(0x08)
	Unknown SizeBox; // 0x310(0x08)
	Unknown SizeBox_2; // 0x318(0x08)
	Unknown SizeBox_85; // 0x320(0x08)
	Unknown TextBlock; // 0x328(0x08)
	Unknown TextBlock_2; // 0x330(0x08)
	Unknown TextBlock_3; // 0x338(0x08)
	Unknown TextBlock_4; // 0x340(0x08)
	Unknown TextBlock_544; // 0x348(0x08)
	Unknown TextBlock_546; // 0x350(0x08)
	Unknown TextBlock_Desc; // 0x358(0x08)
	Unknown TextBlock_EndTime; // 0x360(0x08)
	Unknown Throbber_1; // 0x368(0x08)
	Unknown Throbber_979; // 0x370(0x08)
	Unknown TX; // 0x378(0x08)
	Unknown WidgetSwitcher_1; // 0x380(0x08)
	Unknown TitleWidgetRef; // 0x388(0x08)
	struct FString ErrorID; // 0x390(0x10)
	int32_t ErrorIndex; // 0x3a0(0x04)
	struct FString ErrorParameters; // 0x3a8(0x10)
	Unknown MediaPlayer; // 0x3b8(0x08)
	Unknown Media; // 0x3c0(0x08)
	Unknown MediaTexture; // 0x3c8(0x08)
	Unknown MediaSoundComp; // 0x3d0(0x08)
	int32_t ApplyUserInfoCount; // 0x3d8(0x04)
	Unknown bServicePlatformFlow; // 0x3dc(0x01)
	Unknown StaticMeshComponent; // 0x310(0x08)
	Unknown Standins; // 0x28(0x10)
	Unknown EnableDLSSInEditorViewportsOver; // 0x28(0x01)
	Unknown EnableScreenpercentageManipulationIn; // 0x29(0x01)
	Unknown EnableDLSSInPlayInEditorViewpor; // 0x2a(0x01)
	Unknown bShowDLSSIncompatiblePluginsToolsWarnings; // 0x2b(0x01)
	Unknown ShowDLSSSDebugOnScreenMessages; // 0x2c(0x01)
	Unknown bEnableDLSSD3D12; // 0x28(0x01)
	Unknown bEnableDLSSD3D11; // 0x29(0x01)
	Unknown bEnableDLSSVulkan; // 0x2a(0x01)
	Unknown bEnableDLSSInEditorViewports; // 0x2b(0x01)
	Unknown bEnableScreenpercentageManipulationInDLSSEditor; // 0x2c(0x01)
	Unknown bEnableDLSSInPlayInEditorViewports; // 0x2d(0x01)
	Unknown bShowDLSSSDebugOnScreenMessages; // 0x2e(0x01)
	struct FString GenericDLSS; // 0x30(0x10)
	Unknown bGenericDLSSBinaryExists; // 0x40(0x01)
	uint32_t NVIDIANGXApplicationId; // 0x44(0x04)
	struct FString CustomDLSSBinaryPath; // 0x48(0x10)
	Unknown bCustomDLSS; // 0x58(0x01)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown perk_Icon_Scale; // 0x250(0x08)
	Unknown HorizontalBox_Rarity; // 0x258(0x08)
	Unknown Image; // 0x260(0x08)
	Unknown Image_2; // 0x268(0x08)
	Unknown Image_3; // 0x270(0x08)
	Unknown Image_4; // 0x278(0x08)
	Unknown Image_5; // 0x280(0x08)
	Unknown Image_6; // 0x288(0x08)
	Unknown Image_7; // 0x290(0x08)
	Unknown Image_328; // 0x298(0x08)
	Unknown Img_GradeBG; // 0x2a0(0x08)
	Unknown Img_Icon; // 0x2a8(0x08)
	Unknown ItemOptionInfo; // 0x2b0(0xb8)
	Unknown UberGraphFrame; // 0x3d8(0x08)
	Unknown BT; // 0x3e0(0x08)
	Unknown BT; // 0x3e8(0x08)
	Unknown C; // 0x3f0(0x08)
	Unknown IM; // 0x3f8(0x08)
	Unknown IM; // 0x400(0x08)
	Unknown IM; // 0x408(0x08)
	Unknown IM; // 0x410(0x08)
	Unknown IM; // 0x418(0x08)
	Unknown IM; // 0x420(0x08)
	Unknown Menu02; // 0x428(0x08)
	Unknown Menu03; // 0x430(0x08)
	Unknown Overlay_Mask; // 0x438(0x08)
	Unknown TX; // 0x440(0x08)
	Unknown TX; // 0x448(0x08)
	Unknown TX; // 0x450(0x08)
	Unknown TX; // 0x458(0x08)
	Unknown TX; // 0x460(0x08)
	Unknown DDGIVolumeComponent; // 0x310(0x08)
	Unknown RaysPerProbe; // 0x240(0x01)
	Unknown ProbeCounts; // 0x244(0x0c)
	int32_t LightingPriority; // 0x250(0x04)
	float UpdatePriority; // 0x254(0x04)
	float ProbeMaxRayDistance; // 0x258(0x04)
	float ProbeHysteresis; // 0x25c(0x04)
	float ViewBias; // 0x260(0x04)
	float NormalBias; // 0x264(0x04)
	Unknown LightingChannels; // 0x268(0x01)
	float VolumeBlendDistance; // 0x26c(0x04)
	float VolumeBlendDistanceBlack; // 0x270(0x04)
	Unknown EnableProbeRelocation; // 0x274(0x01)
	Unknown EnableProbeScrolling; // 0x275(0x01)
	Unknown EnableViewDependentVolumeScrolling; // 0x276(0x01)
	float ViewDependentVolumeScrollingOffset; // 0x278(0x04)
	Unknown EnableVolume; // 0x27c(0x01)
	Unknown RuntimeStatic; // 0x27d(0x01)
	float probeDistanceExponent; // 0x280(0x04)
	float probeIrradianceEncodingGamma; // 0x284(0x04)
	float probeChangeThreshold; // 0x288(0x04)
	float probeBrightnessThreshold; // 0x28c(0x04)
	float ProbeMinFrontfaceDistance; // 0x290(0x04)
	float ProbeBackfaceThreshold; // 0x294(0x04)
	float LightMultiplier; // 0x298(0x04)
	float EmissiveMultiplier; // 0x29c(0x04)
	float IrradianceScalar; // 0x2a0(0x04)
	Unknown SkyLight; // 0x2a4(0x01)
	Unknown LastOrigin; // 0x2a8(0x0c)
	Unknown ProbeScrollOffset; // 0x2b4(0x0c)
	Unknown IrradianceBits; // 0x38(0x01)
	Unknown DistanceBits; // 0x39(0x01)
	float DebugProbeRadius; // 0x3c(0x04)
	int32_t ProbeUpdateRayBudget; // 0x40(0x04)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown Anim_TextBg; // 0x250(0x08)
	Unknown HorizontalBox_Damage; // 0x258(0x08)
	Unknown Image_145; // 0x260(0x08)
	Unknown Image_155; // 0x268(0x08)
	Unknown T_StatName; // 0x270(0x08)
	Unknown T_Value; // 0x278(0x08)
	struct FText Text_StatName; // 0x280(0x18)
	Unknown BoundaryMeshComponent; // 0x310(0x08)
	Unknown BoundaryType; // 0x4e8(0x01)
	float BottomZ; // 0x4ec(0x04)
	float TopZ; // 0x4f0(0x04)
	Unknown WhiteMaterial; // 0x4f8(0x08)
	Unknown CastingCameraActor; // 0x500(0x08)
	Unknown VRNotificationComponent; // 0x328(0x08)
	Unknown CameraColorTexture; // 0x330(0x08)
	Unknown CameraDepthTexture; // 0x338(0x08)
	Unknown PlaneMeshComponent; // 0x340(0x08)
	Unknown ChromaKeyMaterial; // 0x348(0x08)
	Unknown ChromaKeyLitMaterial; // 0x350(0x08)
	Unknown OpaqueColoredMaterial; // 0x358(0x08)
	Unknown ChromaKeyMaterialInstance; // 0x360(0x08)
	Unknown ChromaKeyLitMaterialInstance; // 0x368(0x08)
	Unknown CameraFrameMaterialInstance; // 0x370(0x08)
	Unknown BackdropMaterialInstance; // 0x378(0x08)
	Unknown BoundaryActor; // 0x380(0x08)
	Unknown BoundarySceneCaptureActor; // 0x388(0x08)
	Unknown DefaultTexture_White; // 0x390(0x08)
	Unknown BackgroundRenderTargets; // 0x3e8(0x10)
	Unknown ForegroundCaptureActor; // 0x3f8(0x08)
	Unknown ForegroundRenderTargets; // 0x400(0x10)
	Unknown MRSettings; // 0x410(0x08)
	Unknown MRState; // 0x418(0x08)
	Unknown ClippingReference; // 0x28(0x01)
	Unknown bUseTrackedCameraResolution; // 0x29(0x01)
	int32_t WidthPerView; // 0x2c(0x04)
	int32_t HeightPerView; // 0x30(0x04)
	float CastingLatency; // 0x34(0x04)
	Unknown BackdropColor; // 0x38(0x04)
	float HandPoseStateLatency; // 0x3c(0x04)
	Unknown ChromaKeyColor; // 0x40(0x04)
	float ChromaKeySimilarity; // 0x44(0x04)
	float ChromaKeySmoothRange; // 0x48(0x04)
	float ChromaKeySpillRange; // 0x4c(0x04)
	Unknown VirtualGreenScreenType; // 0x50(0x01)
	float DynamicLightingDepthSmoothFactor; // 0x54(0x04)
	float DynamicLightingDepthVariationClampin; // 0x58(0x04)
	Unknown ExternalCompositionPostProcessEffects; // 0x5c(0x01)
	Unknown bIsCasting; // 0x5d(0x01)
	Unknown CompositionMethod; // 0x5e(0x01)
	Unknown CapturingCamera; // 0x5f(0x01)
	Unknown bUseDynamicLighting; // 0x60(0x01)
	Unknown DepthQuality; // 0x61(0x01)
	Unknown TrackedCamera; // 0x28(0x70)
	Unknown TrackingReferenceComponent; // 0x98(0x08)
	double ScalingFactor; // 0xa0(0x08)
	Unknown ChangeCameraStateRequested; // 0xac(0x01)
	Unknown BindToTrackedCameraIndexRequested; // 0xad(0x01)
	Unknown SphericalLimits; // 0x30(0x10)
	Unknown CapsuleLimits; // 0x40(0x10)
	Unknown PlanarLimits; // 0x50(0x10)
	Unknown UberGraphFrame; // 0x440(0x08)
	Unknown BgIcon; // 0x448(0x08)
	Unknown Icon; // 0x450(0x08)
	Unknown Image_175; // 0x458(0x08)
	Unknown Indicator; // 0x460(0x08)
	Unknown Overlay_1; // 0x468(0x08)
	Unknown TeamIndex; // 0x470(0x08)
	Unknown TextBlock; // 0x478(0x08)
	Unknown TextBlock_2; // 0x480(0x08)
	Unknown TextBlock_3; // 0x488(0x08)
	Unknown TextBlock_4; // 0x490(0x08)
	Unknown TextBlock_5; // 0x498(0x08)
	Unknown TextBlock_6; // 0x4a0(0x08)
	Unknown TextBlock_7; // 0x4a8(0x08)
	Unknown TextBlock_8; // 0x4b0(0x08)
	Unknown TextBlock_9; // 0x4b8(0x08)
	Unknown TextBlock_10; // 0x4c0(0x08)
	Unknown TextBlock_12; // 0x4c8(0x08)
	Unknown VerticalBox_301; // 0x4d0(0x08)
	Unknown PlayerCamera; // 0x4d8(0x08)
	Unknown ParentComponent; // 0x4e0(0x08)
	Unknown CanvasSlot; // 0x4e8(0x08)
	Unknown MaterialPingInfo; // 0x4f0(0x30)
	Unknown UberGraphFrame; // 0x278(0x08)
	Unknown btn_Cancel; // 0x280(0x08)
	Unknown btn_report; // 0x288(0x08)
	Unknown combobox_button_overlay; // 0x290(0x08)
	Unknown combobox_string; // 0x298(0x08)
	Unknown Image; // 0x2a0(0x08)
	Unknown Image_2; // 0x2a8(0x08)
	Unknown Image_545; // 0x2b0(0x08)
	Unknown NormalArrow; // 0x2b8(0x08)
	Unknown OpeningArrow; // 0x2c0(0x08)
	Unknown popup; // 0x2c8(0x08)
	Unknown txt_description; // 0x2d0(0x08)
	Unknown txt_nickname; // 0x2d8(0x08)
	Unknown uw; // 0x2e0(0x08)
	struct FText DescriptionText; // 0x2e8(0x18)
	Unknown ReportIndexText; // 0x300(0x10)
	struct FText DefaultComboString; // 0x310(0x18)
	int32_t CurrentSelectIndex; // 0x328(0x04)
	int32_t SelectIndexFromProgram; // 0x32c(0x04)
	Unknown CheckCloseComboArrow; // 0x330(0x01)
	Unknown UberGraphFrame; // 0x310(0x08)
	Unknown WorldViewCamera; // 0x318(0x08)
	Unknown FarCamera; // 0x320(0x08)
	Unknown NearCamera; // 0x328(0x08)
	Unknown DefaultSceneRoot; // 0x330(0x08)
	Unknown CharacterRef; // 0x338(0x08)
	Unknown TargetNearCameraTransform; // 0x340(0x30)
	float DeltaTime; // 0x370(0x04)
	Unknown TargetFarCameraTransform; // 0x380(0x30)
	Unknown PlayerControllerRef; // 0x3b0(0x08)
	Unknown bIsBackgroundScene; // 0x3b8(0x01)
	Unknown WinTeamCharacters; // 0x3c0(0x10)
	Unknown DuoLocation_Near; // 0x3d0(0x10)
	Unknown CharacterOriginLocation; // 0x3e0(0x0c)
	Unknown DuoRotation_Near; // 0x3f0(0x10)
	Unknown DuoLocation_Far; // 0x400(0x10)
	Unknown DuoRotation_Far; // 0x410(0x10)
	Unknown TrioLocation_Near; // 0x420(0x10)
	Unknown TrioRotation_Near; // 0x430(0x10)
	Unknown TrioLocation_Far; // 0x440(0x10)
	Unknown TrioRotation_Far; // 0x450(0x10)
	Unknown SquadLocation_Near; // 0x460(0x10)
	Unknown SquadRotation_Near; // 0x470(0x10)
	Unknown SquadLocation_Far; // 0x480(0x10)
	Unknown SquadRotation_Far; // 0x490(0x10)
	Unknown CharacterOriginRotation; // 0x4a0(0x0c)
	Unknown CompressionFormat; // 0x30(0x01)
	struct FString File; // 0x38(0x10)
	struct FString DestinationFolder; // 0x48(0x10)
	int32_t FileIndex; // 0x58(0x04)
	Unknown Callback; // 0x60(0x08)
	Unknown bSingleFile; // 0x68(0x01)
	Unknown bFileFound; // 0x69(0x01)
	Unknown bUnzipto; // 0x6a(0x01)
	Unknown bSampleAdditionalTextures; // 0xf0(0x01)
	int32_t AdditionalSlotIndex; // 0xf4(0x04)
	struct FText SlotDisplayName; // 0xf8(0x18)
	Unknown Sprite; // 0x5d8(0x08)
	float FramesPerSecond; // 0x28(0x04)
	Unknown KeyFrames; // 0x30(0x10)
	Unknown DefaultMaterial; // 0x40(0x08)
	Unknown CollisionSource; // 0x48(0x01)
	Unknown RenderComponent; // 0x310(0x08)
	Unknown SourceFlipbook; // 0x4e8(0x08)
	Unknown Material; // 0x4f0(0x08)
	float PlayRate; // 0x4f8(0x04)
	Unknown bLooping; // 0x4fc(0x01)
	Unknown bReversePlayback; // 0x4fc(0x01)
	Unknown bPlaying; // 0x4fc(0x01)
	float AccumulatedTime; // 0x500(0x04)
	int32_t CachedFrameIndex; // 0x504(0x04)
	Unknown SpriteColor; // 0x508(0x10)
	Unknown CachedBodySetup; // 0x518(0x08)
	struct FMulticastInlineDelegate OnFinishedPlaying; // 0x520(0x10)
	Unknown RenderComponent; // 0x310(0x08)
	Unknown InstanceMaterials; // 0x4e8(0x10)
	Unknown PerInstanceSpriteData; // 0x4f8(0x10)
	Unknown bEnableSpriteAtlasGroups; // 0x28(0x01)
	Unknown bEnableTerrainSplineEditing; // 0x29(0x01)
	Unknown bResizeSpriteDataToMatchTextures; // 0x2a(0x01)
	Unknown AdditionalSourceTextures; // 0x38(0x10)
	Unknown BakedSourceUV; // 0x48(0x08)
	Unknown BakedSourceDimension; // 0x50(0x08)
	Unknown BakedSourceTexture; // 0x58(0x08)
	Unknown DefaultMaterial; // 0x60(0x08)
	Unknown AlternateMaterial; // 0x68(0x08)
	Unknown Sockets; // 0x70(0x10)
	Unknown SpriteCollisionDomain; // 0x80(0x01)
	float PixelsPerUnrealUnit; // 0x84(0x04)
	Unknown BodySetup; // 0x88(0x08)
	int32_t AlternateMaterialSplitIndex; // 0x90(0x04)
	Unknown BakedRenderData; // 0x98(0x10)
	Unknown RenderComponent; // 0x310(0x08)
	Unknown SourceSprite; // 0x4e8(0x08)
	Unknown MaterialOverride; // 0x4f0(0x08)
	Unknown SpriteColor; // 0x4f8(0x10)
	Unknown DummyRoot; // 0x310(0x08)
	Unknown SplineComponent; // 0x318(0x08)
	Unknown RenderComponent; // 0x320(0x08)
	Unknown TerrainMaterial; // 0x4b8(0x08)
	Unknown bClosedSpline; // 0x4c0(0x01)
	Unknown bFilledSpline; // 0x4c1(0x01)
	Unknown AssociatedSpline; // 0x4c8(0x08)
	int32_t RandomSeed; // 0x4d0(0x04)
	float SegmentOverlapAmount; // 0x4d4(0x04)
	Unknown TerrainColor; // 0x4d8(0x10)
	int32_t ReparamStepsPerSegment; // 0x4e8(0x04)
	Unknown SpriteCollisionDomain; // 0x4ec(0x01)
	float CollisionThickness; // 0x4f0(0x04)
	Unknown CachedBodySetup; // 0x4f8(0x08)
	Unknown Rules; // 0x30(0x10)
	Unknown InteriorFill; // 0x40(0x08)
	struct FText LayerName; // 0x28(0x18)
	int32_t LayerWidth; // 0x40(0x04)
	int32_t LayerHeight; // 0x44(0x04)
	Unknown bHiddenInGame; // 0x48(0x01)
	Unknown bLayerCollides; // 0x48(0x01)
	Unknown bOverrideCollisionThickness; // 0x48(0x01)
	Unknown bOverrideCollisionOffset; // 0x48(0x01)
	float CollisionThicknessOverride; // 0x4c(0x04)
	float CollisionOffsetOverride; // 0x50(0x04)
	Unknown LayerColor; // 0x54(0x10)
	int32_t AllocatedWidth; // 0x64(0x04)
	int32_t AllocatedHeight; // 0x68(0x04)
	Unknown AllocatedCells; // 0x70(0x10)
	Unknown TileSet; // 0x80(0x08)
	Unknown AllocatedGrid; // 0x88(0x10)
	int32_t MapWidth; // 0x28(0x04)
	int32_t MapHeight; // 0x2c(0x04)
	int32_t TileWidth; // 0x30(0x04)
	int32_t TileHeight; // 0x34(0x04)
	float PixelsPerUnrealUnit; // 0x38(0x04)
	float SeparationPerTileX; // 0x3c(0x04)
	float SeparationPerTileY; // 0x40(0x04)
	float SeparationPerLayer; // 0x44(0x04)
	Unknown SelectedTileSet; // 0x48(0x28)
	Unknown Material; // 0x70(0x08)
	Unknown TileLayers; // 0x78(0x10)
	float CollisionThickness; // 0x88(0x04)
	Unknown SpriteCollisionDomain; // 0x8c(0x01)
	Unknown ProjectionMode; // 0x8d(0x01)
	int32_t HexSideLength; // 0x90(0x04)
	Unknown BodySetup; // 0x98(0x08)
	int32_t LayerNameIndex; // 0xa0(0x04)
	Unknown RenderComponent; // 0x310(0x08)
	int32_t MapWidth; // 0x4e8(0x04)
	int32_t MapHeight; // 0x4ec(0x04)
	int32_t TileWidth; // 0x4f0(0x04)
	int32_t TileHeight; // 0x4f4(0x04)
	Unknown DefaultLayerTileSet; // 0x4f8(0x08)
	Unknown Material; // 0x500(0x08)
	Unknown TileLayers; // 0x508(0x10)
	Unknown TileMapColor; // 0x518(0x10)
	int32_t UseSingleLayerIndex; // 0x528(0x04)
	Unknown bUseSingleLayer; // 0x52c(0x01)
	Unknown TileMap; // 0x530(0x08)
	Unknown TileSize; // 0x28(0x08)
	Unknown TileSheet; // 0x30(0x08)
	Unknown AdditionalSourceTextures; // 0x38(0x10)
	Unknown BorderMargin; // 0x48(0x10)
	Unknown PerTileSpacing; // 0x58(0x08)
	Unknown DrawingOffset; // 0x60(0x08)
	int32_t WidthInTiles; // 0x68(0x04)
	int32_t HeightInTiles; // 0x6c(0x04)
	int32_t AllocatedWidth; // 0x70(0x04)
	int32_t AllocatedHeight; // 0x74(0x04)
	Unknown PerTileData; // 0x78(0x10)
	Unknown Terrains; // 0x88(0x10)
	int32_t TileWidth; // 0x98(0x04)
	int32_t TileHeight; // 0x9c(0x04)
	int32_t Margin; // 0xa0(0x04)
	int32_t Spacing; // 0xa4(0x04)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown Button_Main; // 0x250(0x08)
	Unknown Image_ClassIcon; // 0x258(0x08)
	Unknown Image_ComingSoonBg; // 0x260(0x08)
	Unknown Image_Disabled; // 0x268(0x08)
	Unknown Image_Outline; // 0x270(0x08)
	Unknown Image_Push; // 0x278(0x08)
	Unknown Overlay_Main; // 0x280(0x08)
	Unknown T_ComingSoon; // 0x288(0x08)
	Unknown U; // 0x290(0x08)
	Unknown U_2; // 0x298(0x08)
	Unknown U_3; // 0x2a0(0x08)
	Unknown U; // 0x2a8(0x08)
	Unknown VerticalBox_Selected; // 0x2b0(0x08)
	Unknown PerkDeckClassInfo; // 0x2b8(0x28)
	int32_t SelectedNum; // 0x2e0(0x04)
	int32_t SelectedMinIndex; // 0x2e4(0x04)
	struct FMulticastInlineDelegate ChooseClass; // 0x2e8(0x10)
	int32_t ClassIndex; // 0x2f8(0x04)
	struct FMulticastInlineDelegate HoverClass; // 0x300(0x10)
	Unknown bIsLocalSelected; // 0x310(0x01)
	Unknown bIsSelected; // 0x311(0x01)
	Unknown CurrentPerkDeckData; // 0x318(0x4b0)
	Unknown bIsDuplicateSelectPossible; // 0x7c8(0x01)
	Unknown bButtonDisabled; // 0x7c9(0x01)
	Unknown bNoUpdatedDisabled; // 0x7ca(0x01)
	Unknown bIsBlocked; // 0x7cb(0x01)
	struct FString LookUpAxisName; // 0x5d8(0x10)
	struct FString LookUpAtRateAxisName; // 0x5e8(0x10)
	struct FString TurnAxisName; // 0x5f8(0x10)
	struct FString TurnAtRateAxisName; // 0x608(0x10)
	struct FString MoveForwardAxisName; // 0x618(0x10)
	struct FString MoveRightAxisName; // 0x628(0x10)
	float MouseSensitivityScale_Pitch; // 0x638(0x04)
	float MouseSensitivityScale_Yaw; // 0x63c(0x04)
	Unknown RotationalAcceleration; // 0x6e8(0x0c)
	Unknown RotationalDeceleration; // 0x6f4(0x0c)
	Unknown MaxRotationalVelocity; // 0x700(0x0c)
	float MinPitch; // 0x70c(0x04)
	float MaxPitch; // 0x710(0x04)
	float WalkingFriction; // 0x714(0x04)
	float WalkingSpeed; // 0x718(0x04)
	float WalkingAcceleration; // 0x71c(0x04)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown HorizontalBox_Rarity; // 0x250(0x08)
	Unknown Image_bg; // 0x258(0x08)
	Unknown Image_Icon; // 0x260(0x08)
	Unknown T_Name; // 0x268(0x08)
	Unknown T_WeaponType; // 0x270(0x08)
	Unknown TextBlock_186; // 0x278(0x08)
	Unknown Tooltip; // 0x280(0x08)
	Unknown ItemInfo; // 0x288(0x08)
	Unknown ItemDetailInfo; // 0x290(0x490)
	Unknown UberGraphFrame; // 0x330(0x08)
	Unknown AnimGraphNode_Root; // 0x338(0x30)
	Unknown AnimGraphNode_Slot_3; // 0x368(0x48)
	Unknown AnimGraphNode_TwoWayBlend; // 0x3b0(0xc8)
	Unknown AnimGraphNode_LocalRefPose_3; // 0x478(0x18)
	Unknown AnimGraphNode_Slot_2; // 0x490(0x48)
	Unknown AnimGraphNode_LocalRefPose_2; // 0x4d8(0x18)
	Unknown AnimGraphNode_BlendListByBool; // 0x4f0(0xa0)
	Unknown AnimGraphNode_Slot; // 0x590(0x48)
	Unknown AnimGraphNode_LocalRefPose; // 0x5d8(0x18)
	Unknown bCompressionTest; // 0x80(0x01)
	int32_t HashTableSize; // 0x84(0x04)
	int32_t DictionarySize; // 0x88(0x04)
	int32_t DictionaryTrials; // 0x8c(0x04)
	int32_t TrialRandomness; // 0x90(0x04)
	int32_t TrialGenerations; // 0x94(0x04)
	Unknown bNoTrials; // 0x98(0x01)
	Unknown AnimationToPlay; // 0x268(0x08)
	float PermutationTimeOffset; // 0x270(0x04)
	float PlayRate; // 0x274(0x04)
	Unknown bStateBool; // 0x278(0x01)
	Unknown Instance; // 0x280(0x08)
	Unknown FromComponent; // 0x268(0x08)
	Unknown ToComponent; // 0x270(0x08)
	float BlendTime; // 0x278(0x04)
	Unknown bBlendBool; // 0x27c(0x01)
	Unknown baseComponent; // 0x268(0x08)
	Unknown AdditiveAnimation; // 0x270(0x08)
	float ALPHA; // 0x278(0x04)
	Unknown bStateBool; // 0x27c(0x01)
	Unknown RegisteredActors; // 0x28(0x10)
	Unknown StateProcessor; // 0xa8(0x08)
	Unknown UsedAnimationSequences; // 0xe8(0x10)
	Unknown StateEnum; // 0x108(0x08)
	Unknown SharingActor; // 0x110(0x08)
	Unknown Skeletons; // 0x28(0x10)
	Unknown PerSkeletonData; // 0x38(0x10)
	Unknown SkeletonSetups; // 0x28(0x10)
	Unknown ScalabilitySettings; // 0x38(0x10)
	Unknown AnimationStateEnum; // 0x28(0x28)
	Unknown ShowAnim; // 0x248(0x08)
	Unknown U; // 0x250(0x08)
	Unknown WidgetSwitcher_53; // 0x258(0x08)
	int32_t Gold; // 0x260(0x04)
	Unknown WeaponList; // 0x268(0x10)
	Unknown MaterialList; // 0x278(0x10)
	Unknown ItemWeaponIDList; // 0x288(0x10)
	Unknown LastItemWeaponIDList; // 0x298(0x10)
	Unknown NewWeaponList; // 0x2a8(0x10)
	Unknown MaterialIDList; // 0x2b8(0x10)
	Unknown LastMaterialIDList; // 0x2c8(0x10)
	Unknown NewMaterialList; // 0x2d8(0x10)
	Unknown NewCraftIDList; // 0x2e8(0x10)
	Unknown CraftWeaponInfo; // 0x2f8(0xc0)
	struct FString MainTabName; // 0x3b8(0x10)
	struct FString ArmoryTabName; // 0x3c8(0x10)
	Unknown bNeedCheckWeaponList; // 0x3d8(0x01)
	Unknown bNeedCheckMaterialList; // 0x3d9(0x01)
	Unknown UberGraphFrame; // 0x7c0(0x08)
	Unknown StaticMesh; // 0x7c8(0x08)
	Unknown MagneticDecal; // 0x7d0(0x08)
	float Puls_PulsScale_0F5B0359412DDBACBDF407BB69788854; // 0x7d8(0x04)
	Unknown Puls__Direction_0F5B0359412DDBACBDF407BB69788854; // 0x7dc(0x01)
	Unknown Puls; // 0x7e0(0x08)
	float Height; // 0x7e8(0x04)
	float SeaLevelZ; // 0x7ec(0x04)
	Unknown bIsMatchEnded; // 0x7f0(0x01)
	float ModifyingOpacityTime; // 0x7f4(0x04)
	float CurrentOpacity; // 0x7f8(0x04)
	float ScaleModifier; // 0x7fc(0x04)
	Unknown ParametersCurve; // 0x800(0x08)
	float MaterialParameterRadius; // 0x808(0x04)
	Unknown bWasMpUpdated; // 0x80c(0x01)
	float PreRadius; // 0x810(0x04)
	Unknown UberGraphFrame; // 0x2a0(0x08)
	Unknown VisualBorder; // 0x2a8(0x08)
	struct FString ImportedFilePath; // 0x28(0x10)
	Unknown AssetGuid; // 0x38(0x10)
	Unknown Vertices; // 0x28(0x10)
	Unknown Normals; // 0x38(0x10)
	Unknown Indices; // 0x48(0x10)
	Unknown InverseMasses; // 0x58(0x10)
	Unknown BoneData; // 0x68(0x10)
	int32_t NumFixedVerts; // 0x78(0x04)
	int32_t MaxBoneWeights; // 0x7c(0x04)
	Unknown SelfCollisionIndices; // 0x80(0x10)
	Unknown Params; // 0xe0(0x30)
	Unknown AnimationSections; // 0x58(0x10)
	Unknown UberGraphFrame; // 0x330(0x08)
	Unknown AnimGraphNode_Root; // 0x338(0x30)
	Unknown AnimGraphNode_Slot_3; // 0x368(0x48)
	Unknown AnimGraphNode_TwoWayBlend; // 0x3b0(0xc8)
	Unknown AnimGraphNode_LocalRefPose_3; // 0x478(0x18)
	Unknown AnimGraphNode_LocalRefPose_2; // 0x490(0x18)
	Unknown AnimGraphNode_Slot_2; // 0x4a8(0x48)
	Unknown AnimGraphNode_Slot; // 0x4f0(0x48)
	Unknown AnimGraphNode_LocalRefPose; // 0x538(0x18)
	Unknown AnimGraphNode_BlendListByBool; // 0x550(0xa0)
	struct FString ObjectUID; // 0x238(0x10)
	int32_t UserIndex; // 0x248(0x04)
	Unknown AutoPinType; // 0x24c(0x01)
	Unknown bShouldPinActor; // 0x24d(0x01)
	Unknown PinDataClass; // 0x250(0x08)
	struct FMulticastInlineDelegate OnPersistentEntityPinned; // 0x258(0x10)
	struct FMulticastInlineDelegate OnPersistentEntityPinLost; // 0x268(0x10)
	Unknown PinnedCFUID; // 0x278(0x10)
	Unknown PinnedSceneComponent; // 0x288(0x08)
	Unknown PinData; // 0x290(0x08)
	float UpdateCheckFrequency; // 0x28(0x04)
	Unknown OnUpdatedEventTriggerDelta; // 0x2c(0x10)
	Unknown PinnedID; // 0x28(0x10)
	Unknown ComponentWorldTransform; // 0x40(0x30)
	Unknown PinTransform; // 0x70(0x30)
	struct FMulticastInlineDelegate HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate; // 0xb0(0x10)
	struct FMulticastInlineDelegate HMDTrackingInitializedDelegate; // 0xc0(0x10)
	struct FMulticastInlineDelegate HMDRecenteredDelegate; // 0xd0(0x10)
	struct FMulticastInlineDelegate HMDLostDelegate; // 0xe0(0x10)
	struct FMulticastInlineDelegate HMDReconnectedDelegate; // 0xf0(0x10)
	struct FMulticastInlineDelegate HMDConnectCanceledDelegate; // 0x100(0x10)
	struct FMulticastInlineDelegate HMDPutOnHeadDelegate; // 0x110(0x10)
	struct FMulticastInlineDelegate HMDRemovedFromHeadDelegate; // 0x120(0x10)
	struct FMulticastInlineDelegate VRControllerRecenteredDelegate; // 0x130(0x10)
	int32_t PlayerIndex; // 0x4b8(0x04)
	Unknown Hand; // 0x4bc(0x01)
	struct FName MotionSource; // 0x4c0(0x08)
	Unknown bDisableLowLatencyUpdate; // 0x4c8(0x01)
	Unknown CurrentTrackingStatus; // 0x4cc(0x01)
	Unknown bDisplayDeviceModel; // 0x4cd(0x01)
	struct FName DisplayModelSource; // 0x4d0(0x08)
	Unknown CustomDisplayMesh; // 0x4d8(0x08)
	Unknown DisplayMeshMaterialOverrides; // 0x4e0(0x10)
	Unknown DisplayComponent; // 0x550(0x08)
	struct FMulticastInlineDelegate OnModelLoaded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnLoadFailure; // 0x40(0x10)
	Unknown SpawnedComponent; // 0x58(0x08)
	Unknown PlanesQuery; // 0xb0(0x60)
	int32_t MaxPlaneQueryResults; // 0x110(0x04)
	int32_t MinPlaneArea; // 0x114(0x04)
	Unknown bArbitraryOrientationPlaneDetection; // 0x118(0x01)
	Unknown PlaneSearchExtents; // 0x11c(0x0c)
	Unknown PlaneQueryFlags; // 0x128(0x10)
	Unknown bDiscardZeroExtentPlanes; // 0x138(0x01)
	Unknown bDefaultUseUnreliablePose; // 0x139(0x01)
	Unknown AmbientIntensityNits; // 0x40(0x10)
	Unknown bUseUnreliablePose; // 0x58(0x01)
	Unknown bImageIsStationary; // 0x59(0x01)
	Unknown bGenerateMeshDataFromTrackedGeometry; // 0x30(0x01)
	Unknown bGenerateCollisionForMeshData; // 0x31(0x01)
	Unknown bGenerateNavMeshForMeshData; // 0x32(0x01)
	Unknown bUseMeshDataForOcclusion; // 0x33(0x01)
	Unknown bRenderMeshDataInWireframe; // 0x34(0x01)
	Unknown bTrackSceneObjects; // 0x35(0x01)
	Unknown bUsePersonSegmentationForOcclusion; // 0x36(0x01)
	Unknown WorldAlignment; // 0x37(0x01)
	Unknown SessionType; // 0x38(0x01)
	Unknown PlaneDetectionMode; // 0x39(0x01)
	Unknown bHorizontalPlaneDetection; // 0x3a(0x01)
	Unknown bVerticalPlaneDetection; // 0x3b(0x01)
	Unknown bEnableAutoFocus; // 0x3c(0x01)
	Unknown LightEstimationMode; // 0x3d(0x01)
	Unknown FrameSyncMode; // 0x3e(0x01)
	Unknown bEnableAutomaticCameraOverlay; // 0x3f(0x01)
	Unknown bEnableAutomaticCameraTracking; // 0x40(0x01)
	Unknown bResetCameraTracking; // 0x41(0x01)
	Unknown bResetTrackedObjects; // 0x42(0x01)
	Unknown CandidateImages; // 0x48(0x10)
	int32_t MaxNumSimultaneousImagesTracked; // 0x58(0x04)
	Unknown EnvironmentCaptureProbeType; // 0x5c(0x01)
	Unknown WorldMapData; // 0x60(0x10)
	Unknown CandidateObjects; // 0x70(0x10)
	Unknown DesiredVideoFormat; // 0x80(0x0c)
	Unknown FaceTrackingDirection; // 0x8c(0x01)
	Unknown FaceTrackingUpdate; // 0x8d(0x01)
	Unknown SerializedARCandidateImageDatabase; // 0x90(0x10)
	Unknown EnabledSessionTrackingFeature; // 0xa0(0x01)
	float AmbientIntensityLumens; // 0x28(0x04)
	float AmbientColorTemperatureKelvin; // 0x2c(0x04)
	Unknown AmbientColor; // 0x30(0x10)
	Unknown CandidateTexture; // 0x30(0x08)
	struct FString FriendlyName; // 0x38(0x10)
	float Width; // 0x48(0x04)
	float Height; // 0x4c(0x04)
	Unknown Orientation; // 0x50(0x01)
	struct FMulticastInlineDelegate OnSuccess; // 0x50(0x10)
	struct FMulticastInlineDelegate OnFailed; // 0x60(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x50(0x10)
	struct FMulticastInlineDelegate OnFailed; // 0x60(0x10)
	Unknown TrackedGeometry; // 0x28(0x08)
	Unknown PinnedComponent; // 0x30(0x08)
	Unknown LocalToTrackingTransform; // 0x40(0x30)
	Unknown LocalToAlignedTrackingTransform; // 0x70(0x30)
	Unknown TrackingState; // 0xa0(0x01)
	struct FMulticastInlineDelegate OnARTrackingStateChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnARTransformUpdated; // 0xd0(0x10)
	int32_t BufferSizePerChunk; // 0x3f8(0x04)
	Unknown PreviewImageData; // 0x380(0x10)
	Unknown ARWorldData; // 0x390(0x10)
	int32_t PreviewImageBytesTotal; // 0x3a0(0x04)
	int32_t ARWorldBytesTotal; // 0x3a4(0x04)
	int32_t PreviewImageBytesDelivered; // 0x3a8(0x04)
	int32_t ARWorldBytesDelivered; // 0x3ac(0x04)
	Unknown CaptureProbe; // 0x320(0x08)
	Unknown TextureType; // 0xb8(0x01)
	float Timestamp; // 0xbc(0x04)
	Unknown ExternalTextureGuid; // 0xc0(0x10)
	Unknown Size; // 0xd0(0x08)
	Unknown DepthQuality; // 0xd8(0x01)
	Unknown DepthAccuracy; // 0xd9(0x01)
	Unknown bIsTemporallySmoothed; // 0xda(0x01)
	Unknown TextureType; // 0x110(0x01)
	float Timestamp; // 0x114(0x04)
	Unknown ExternalTextureGuid; // 0x118(0x10)
	Unknown Size; // 0x128(0x08)
	Unknown UniqueID; // 0x28(0x10)
	Unknown LocalToTrackingTransform; // 0x40(0x30)
	Unknown LocalToAlignedTrackingTransform; // 0x70(0x30)
	Unknown TrackingState; // 0xa0(0x01)
	Unknown UnderlyingMesh; // 0xb0(0x08)
	Unknown ObjectClassification; // 0xb8(0x01)
	int32_t LastUpdateFrameNumber; // 0xd0(0x04)
	struct FName DebugName; // 0xe0(0x08)
	Unknown Orientation; // 0xe8(0x01)
	Unknown Center; // 0xec(0x0c)
	Unknown Extent; // 0xf8(0x0c)
	Unknown SubsumedBy; // 0x118(0x08)
	Unknown DetectedImage; // 0xe8(0x08)
	Unknown EstimatedSize; // 0xf0(0x08)
	struct FString QRCode; // 0xf8(0x10)
	int32_t Version; // 0x108(0x04)
	Unknown LookAtTarget; // 0xe8(0x0c)
	Unknown bIsTracked; // 0xf4(0x01)
	Unknown BlendShapes; // 0xf8(0x50)
	Unknown EnvironmentCaptureTexture; // 0xf8(0x08)
	Unknown DetectedObject; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnAddTrackedGeometry; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnUpdateTrackedGeometry; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnRemoveTrackedGeometry; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnAddTrackedPlane; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnUpdateTrackedPlane; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnRemoveTrackedPlane; // 0x100(0x10)
	struct FMulticastInlineDelegate OnAddTrackedPoint; // 0x110(0x10)
	struct FMulticastInlineDelegate OnUpdateTrackedPoint; // 0x120(0x10)
	struct FMulticastInlineDelegate OnRemoveTrackedPoint; // 0x130(0x10)
	struct FMulticastInlineDelegate OnAddTrackedImage; // 0x140(0x10)
	struct FMulticastInlineDelegate OnUpdateTrackedImage; // 0x150(0x10)
	struct FMulticastInlineDelegate OnRemoveTrackedImage; // 0x160(0x10)
	struct FMulticastInlineDelegate OnAddTrackedFace; // 0x170(0x10)
	struct FMulticastInlineDelegate OnUpdateTrackedFace; // 0x180(0x10)
	struct FMulticastInlineDelegate OnRemoveTrackedFace; // 0x190(0x10)
	struct FMulticastInlineDelegate OnAddTrackedEnvProbe; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnUpdateTrackedEnvProbe; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnRemoveTrackedEnvProbe; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnAddTrackedObject; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnUpdateTrackedObject; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnRemoveTrackedObject; // 0x1f0(0x10)
	Unknown CandidateObjectData; // 0x30(0x10)
	struct FString FriendlyName; // 0x40(0x10)
	Unknown BoundingBox; // 0x50(0x1c)
	Unknown Anim_OnShow; // 0x248(0x08)
	Unknown Line; // 0x250(0x08)
	struct FMulticastInlineDelegate OnMarkerClicked; // 0x258(0x10)
	Unknown IsLastPoint; // 0x268(0x01)
	Unknown Anim_OnShow; // 0x248(0x08)
	Unknown BackColor; // 0x250(0x08)
	Unknown T_Num; // 0x258(0x08)
	struct FMulticastInlineDelegate OnMarkerClicked; // 0x260(0x10)
	Unknown UberGraphFrame; // 0x330(0x08)
	Unknown AnimGraphNode_Root; // 0x338(0x30)
	Unknown AnimGraphNode_BlendListByEnum; // 0x368(0xb0)
	Unknown AnimGraphNode_SequencePlayer_3; // 0x418(0x78)
	Unknown AnimGraphNode_SequencePlayer_2; // 0x490(0x78)
	Unknown AnimGraphNode_SequencePlayer; // 0x508(0x78)
	Unknown AnimGraphNode_Slot_4; // 0x580(0x48)
	Unknown AnimGraphNode_TwoWayBlend; // 0x5c8(0xc8)
	Unknown AnimGraphNode_LayeredBoneBlend; // 0x690(0xc0)
	Unknown AnimGraphNode_LocalRefPose_3; // 0x750(0x18)
	Unknown AnimGraphNode_Slot_3; // 0x768(0x48)
	Unknown AnimGraphNode_LocalRefPose_2; // 0x7b0(0x18)
	Unknown AnimGraphNode_Slot_2; // 0x7c8(0x48)
	Unknown AnimGraphNode_Slot; // 0x810(0x48)
	Unknown AnimGraphNode_LocalRefPose; // 0x858(0x18)
	Unknown AnimGraphNode_BlendListByBool; // 0x870(0xa0)
	Unknown UberGraphFrame; // 0xa20(0x08)
	Unknown AnimGraphNode_ComponentToLocalSpace_3; // 0xa28(0x20)
	Unknown AnimGraphNode_CopyBone_14; // 0xa48(0xf0)
	Unknown AnimGraphNode_LookAt_6; // 0xb40(0x1b0)
	Unknown AnimGraphNode_CopyBone_13; // 0xcf0(0xf0)
	Unknown AnimGraphNode_MeshRefPose_2; // 0xde0(0x10)
	Unknown AnimGraphNode_CopyBone_12; // 0xdf0(0xf0)
	Unknown AnimGraphNode_LookAt_5; // 0xee0(0x1b0)
	Unknown AnimGraphNode_CopyBone_11; // 0x1090(0xf0)
	Unknown AnimGraphNode_BlendListByBool_2; // 0x1180(0xa0)
	Unknown AnimGraphNode_CopyBone_10; // 0x1220(0xf0)
	Unknown AnimGraphNode_LookAt_4; // 0x1310(0x1b0)
	Unknown AnimGraphNode_CopyBone_9; // 0x14c0(0xf0)
	Unknown AnimGraphNode_CopyBone_8; // 0x15b0(0xf0)
	Unknown AnimGraphNode_LookAt_3; // 0x16a0(0x1b0)
	Unknown AnimGraphNode_CopyBone_7; // 0x1850(0xf0)
	Unknown AnimGraphNode_CopyBone_6; // 0x1940(0xf0)
	Unknown AnimGraphNode_ComponentToLocalSpace_2; // 0x1a30(0x20)
	Unknown AnimGraphNode_CopyBone_5; // 0x1a50(0xf0)
	Unknown AnimGraphNode_Root; // 0x1b40(0x30)
	Unknown AnimGraphNode_CopyBone_4; // 0x1b70(0xf0)
	Unknown AnimGraphNode_CopyBone_3; // 0x1c60(0xf0)
	Unknown AnimGraphNode_CopyBone_2; // 0x1d50(0xf0)
	Unknown AnimGraphNode_CopyBone; // 0x1e40(0xf0)
	Unknown AnimGraphNode_RotationMultiplier_2; // 0x1f30(0xf0)
	Unknown AnimGraphNode_LookAt_2; // 0x2020(0x1b0)
	Unknown AnimGraphNode_RotationMultiplier; // 0x21d0(0xf0)
	Unknown AnimGraphNode_LookAt; // 0x22c0(0x1b0)
	Unknown AnimGraphNode_TransitionResult_12; // 0x2470(0x28)
	Unknown AnimGraphNode_TransitionResult_11; // 0x2498(0x28)
	Unknown AnimGraphNode_TransitionResult_10; // 0x24c0(0x28)
	Unknown AnimGraphNode_TransitionResult_9; // 0x24e8(0x28)
	Unknown AnimGraphNode_TransitionResult_8; // 0x2510(0x28)
	Unknown AnimGraphNode_TransitionResult_7; // 0x2538(0x28)
	Unknown AnimGraphNode_SequencePlayer_6; // 0x2560(0x78)
	Unknown AnimGraphNode_StateResult_6; // 0x25d8(0x30)
	Unknown AnimGraphNode_SequencePlayer_5; // 0x2608(0x78)
	Unknown AnimGraphNode_StateResult_5; // 0x2680(0x30)
	Unknown AnimGraphNode_SequencePlayer_4; // 0x26b0(0x78)
	Unknown AnimGraphNode_StateResult_4; // 0x2728(0x30)
	Unknown AnimGraphNode_StateMachine_2; // 0x2758(0xb0)
	Unknown AnimGraphNode_SaveCachedPose_2; // 0x2808(0xb8)
	Unknown AnimGraphNode_LocalToComponentSpace; // 0x28c0(0x20)
	Unknown AnimGraphNode_TransitionResult_6; // 0x28e0(0x28)
	Unknown AnimGraphNode_TransitionResult_5; // 0x2908(0x28)
	Unknown AnimGraphNode_TransitionResult_4; // 0x2930(0x28)
	Unknown AnimGraphNode_TransitionResult_3; // 0x2958(0x28)
	Unknown AnimGraphNode_TransitionResult_2; // 0x2980(0x28)
	Unknown AnimGraphNode_TransitionResult; // 0x29a8(0x28)
	Unknown AnimGraphNode_SequencePlayer_3; // 0x29d0(0x78)
	Unknown AnimGraphNode_StateResult_3; // 0x2a48(0x30)
	Unknown AnimGraphNode_SequencePlayer_2; // 0x2a78(0x78)
	Unknown AnimGraphNode_StateResult_2; // 0x2af0(0x30)
	Unknown AnimGraphNode_SequencePlayer; // 0x2b20(0x78)
	Unknown AnimGraphNode_StateResult; // 0x2b98(0x30)
	Unknown AnimGraphNode_StateMachine; // 0x2bc8(0xb0)
	Unknown AnimGraphNode_SaveCachedPose; // 0x2c78(0xb8)
	Unknown AnimGraphNode_LayeredBoneBlend_2; // 0x2d30(0xc0)
	Unknown AnimGraphNode_UseCachedPose_4; // 0x2df0(0x28)
	Unknown AnimGraphNode_BlendListByBool; // 0x2e18(0xa0)
	Unknown AnimGraphNode_TwoWayBlend; // 0x2eb8(0xc8)
	Unknown AnimGraphNode_UseCachedPose_3; // 0x2f80(0x28)
	Unknown AnimGraphNode_UseCachedPose_2; // 0x2fa8(0x28)
	Unknown AnimGraphNode_UseCachedPose; // 0x2fd0(0x28)
	Unknown AnimGraphNode_WheelHandler; // 0x2ff8(0xe0)
	Unknown AnimGraphNode_MeshRefPose; // 0x30d8(0x10)
	Unknown AnimGraphNode_ComponentToLocalSpace; // 0x30e8(0x20)
	Unknown AnimGraphNode_LayeredBoneBlend; // 0x3108(0xc0)
	Unknown UberGraphFrame; // 0x260(0x08)
	Unknown Button_Delete; // 0x268(0x08)
	Unknown Button_Keep; // 0x270(0x08)
	Unknown Button_OldFileDelete; // 0x278(0x08)
	Unknown Button_Play; // 0x280(0x08)
	Unknown Button_Refresh; // 0x288(0x08)
	Unknown DetailInfo; // 0x290(0x08)
	Unknown HorizontalBox_3; // 0x298(0x08)
	Unknown HorizontalBox_4; // 0x2a0(0x08)
	Unknown HorizontalBox_5; // 0x2a8(0x08)
	Unknown HorizontalBox_01; // 0x2b0(0x08)
	Unknown HorizontalBox_Version; // 0x2b8(0x08)
	Unknown Image_1; // 0x2c0(0x08)
	Unknown Image_483; // 0x2c8(0x08)
	Unknown Image_1010; // 0x2d0(0x08)
	Unknown Image_2531; // 0x2d8(0x08)
	Unknown Image_2533; // 0x2e0(0x08)
	Unknown Image_2535; // 0x2e8(0x08)
	Unknown Image_3059; // 0x2f0(0x08)
	Unknown Image_3229; // 0x2f8(0x08)
	Unknown Image_3231; // 0x300(0x08)
	Unknown Image_; // 0x308(0x08)
	Unknown Image_ClassImage; // 0x310(0x08)
	Unknown Image_Icon1; // 0x318(0x08)
	Unknown Image_Icon2; // 0x320(0x08)
	Unknown Image_Icon3; // 0x328(0x08)
	Unknown Image_Icon4; // 0x330(0x08)
	Unknown Image_MapImage; // 0x338(0x08)
	Unknown Overlay; // 0x340(0x08)
	Unknown ReplayListBox; // 0x348(0x08)
	Unknown TextBlock_2388; // 0x350(0x08)
	Unknown TextBlock_BattleMode; // 0x358(0x08)
	Unknown TextBlock_BlueZoneMaxPlayerCount; // 0x360(0x08)
	Unknown TextBlock_BlueZoneTitle; // 0x368(0x08)
	Unknown TextBlock_ClassLevel1; // 0x370(0x08)
	Unknown TextBlock_ClassLevel2; // 0x378(0x08)
	Unknown TextBlock_ClassLevel3; // 0x380(0x08)
	Unknown TextBlock_ClassLevel4; // 0x388(0x08)
	Unknown TextBlock_ClassName1; // 0x390(0x08)
	Unknown TextBlock_ClassName2; // 0x398(0x08)
	Unknown TextBlock_ClassName3; // 0x3a0(0x08)
	Unknown TextBlock_ClassName4; // 0x3a8(0x08)
	Unknown TextBlock_CurrentFileCount; // 0x3b0(0x08)
	Unknown TextBlock_Damage; // 0x3b8(0x08)
	Unknown TextBlock_FPP; // 0x3c0(0x08)
	Unknown TextBlock_Keep; // 0x3c8(0x08)
	Unknown TextBlock_Kill; // 0x3d0(0x08)
	Unknown TextBlock_LifeTime; // 0x3d8(0x08)
	Unknown TextBlock_MapName; // 0x3e0(0x08)
	Unknown TextBlock_Name1; // 0x3e8(0x08)
	Unknown TextBlock_Name2; // 0x3f0(0x08)
	Unknown TextBlock_Name3; // 0x3f8(0x08)
	Unknown TextBlock_Name4; // 0x400(0x08)
	Unknown TextBlock_Rank; // 0x408(0x08)
	Unknown TextBlock_Time; // 0x410(0x08)
	Unknown TextBlock_TotalPlayerCount; // 0x418(0x08)
	Unknown TextBlock_TotalSize; // 0x420(0x08)
	Unknown TextBlock_Weapon1; // 0x428(0x08)
	Unknown TextBlock_Weapon2; // 0x430(0x08)
	Unknown TextBlock_Weapon3; // 0x438(0x08)
	Unknown TextBlock_Weapon4; // 0x440(0x08)
	Unknown U; // 0x448(0x08)
	Unknown U_3; // 0x450(0x08)
	Unknown U_4; // 0x458(0x08)
	Unknown U_5; // 0x460(0x08)
	Unknown U_6; // 0x468(0x08)
	Unknown U_7; // 0x470(0x08)
	Unknown U_8; // 0x478(0x08)
	Unknown U_9; // 0x480(0x08)
	Unknown U_10; // 0x488(0x08)
	Unknown U_11; // 0x490(0x08)
	Unknown U_12; // 0x498(0x08)
	Unknown U_13; // 0x4a0(0x08)
	Unknown SelectedItemInfo; // 0x4a8(0x128)
	struct FMulticastInlineDelegate OnTouchpadGestureStart; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnTouchpadGestureContinue; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnTouchpadGestureEnd; // 0xd8(0x10)
	Unknown Mode; // 0x28(0x01)
	Unknown BufferSettings; // 0x30(0x50)
	struct FString ConnectionString; // 0x80(0x10)
	Unknown Factory; // 0x90(0x08)
	Unknown CurveConversionSettings; // 0x98(0x50)
	Unknown PreProcessors; // 0x28(0x10)
	Unknown InterpolationProcessor; // 0x38(0x08)
	Unknown Translators; // 0x40(0x10)
	Unknown Role; // 0x50(0x08)
	Unknown Role; // 0x30(0x08)
	Unknown Subjects; // 0x38(0x10)
	Unknown FrameTranslators; // 0x48(0x10)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown Chat; // 0x250(0x08)
	Unknown Chat; // 0x258(0x08)
	Unknown Tab; // 0x260(0x08)
	Unknown Whole; // 0x268(0x08)
	Unknown Chat; // 0x270(0x08)
	Unknown CurrentDialogBox; // 0x278(0x08)
	float Chat; // 0x280(0x04)
	Unknown Faded; // 0x284(0x01)
	Unknown Was; // 0x285(0x01)
	Unknown Use; // 0x286(0x01)
	int32_t Message; // 0x288(0x04)
	struct FString Text; // 0x290(0x10)
	struct FString Text; // 0x2a0(0x10)
	int32_t ; // 0x2b0(0x04)
	int32_t Clear; // 0x2b4(0x04)
	Unknown Show; // 0x2b8(0x01)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown Anim_Show; // 0x250(0x08)
	Unknown Border; // 0x258(0x08)
	Unknown Border_51; // 0x260(0x08)
	Unknown btn_All_OK; // 0x268(0x08)
	Unknown btn_Close; // 0x270(0x08)
	Unknown HorizontalBox_CloseButton; // 0x278(0x08)
	Unknown Image_2; // 0x280(0x08)
	Unknown U; // 0x288(0x08)
	Unknown U_2; // 0x290(0x08)
	Unknown U_3; // 0x298(0x08)
	Unknown U; // 0x2a0(0x08)
	Unknown U; // 0x2a8(0x08)
	Unknown WidgetSwitcher_90; // 0x2b0(0x08)
	Unknown OpenedOptionList; // 0x2b8(0x10)
	Unknown QueryFlags; // 0x238(0x10)
	Unknown SearchVolume; // 0x248(0x08)
	int32_t MaxResults; // 0x250(0x04)
	float MinHolePerimeter; // 0x254(0x04)
	float MinPlaneArea; // 0x258(0x04)
	Unknown QueryType; // 0x25c(0x01)
	float SimilarityThreshold; // 0x260(0x04)
	struct FMulticastInlineDelegate OnPlanesQueryResult; // 0x268(0x10)
	struct FMulticastInlineDelegate OnPersistentPlanesQueryResult; // 0x278(0x10)
	Unknown UberGraphFrame; // 0xcf8(0x08)
	Unknown Handle_IsAnyHit; // 0xd00(0x08)
	Unknown IsAnyHit; // 0xd08(0x01)
	Unknown LastHitActor; // 0xd10(0x08)
	Unknown UberGraphFrame; // 0x310(0x08)
	Unknown PointLight3; // 0x318(0x08)
	Unknown PointLight2; // 0x320(0x08)
	Unknown SpotLight; // 0x328(0x08)
	Unknown PointLight1; // 0x330(0x08)
	Unknown BravoHotelSceneCaptureComponent2D; // 0x338(0x08)
	Unknown PointLight; // 0x340(0x08)
	Unknown SpotLight2; // 0x348(0x08)
	Unknown Cube; // 0x350(0x08)
	Unknown CustomizableSkeletal; // 0x358(0x08)
	Unknown SkeletalMesh; // 0x360(0x08)
	Unknown Camera; // 0x368(0x08)
	Unknown Scene; // 0x370(0x08)
	Unknown CharacterRef; // 0x378(0x08)
	Unknown PreviewWeapons; // 0x380(0x10)
	Unknown EnableTick; // 0x390(0x01)
	Unknown TargetAccel; // 0x394(0x0c)
	Unknown CurrentAccel; // 0x3a0(0x0c)
	Unknown UberGraphFrame; // 0x2a0(0x08)
	Unknown EventInform; // 0x2a8(0x08)
	Unknown VisualBorder; // 0x2b0(0x08)
	Unknown Tire_RL; // 0x460(0x08)
	Unknown Tire_FL; // 0x468(0x08)
	Unknown Tire_RR; // 0x470(0x08)
	Unknown Tire_FR; // 0x478(0x08)
	Unknown SkeletalMesh; // 0x480(0x08)
	Unknown DefaultSceneRoot; // 0x488(0x08)
	Unknown UberGraphFrame; // 0xa20(0x08)
	Unknown AnimGraphNode_CopyBone_12; // 0xa28(0xf0)
	Unknown AnimGraphNode_LookAt_6; // 0xb20(0x1b0)
	Unknown AnimGraphNode_CopyBone_11; // 0xcd0(0xf0)
	Unknown AnimGraphNode_LookAt_5; // 0xdc0(0x1b0)
	Unknown AnimGraphNode_CopyBone_10; // 0xf70(0xf0)
	Unknown AnimGraphNode_LookAt_4; // 0x1060(0x1b0)
	Unknown AnimGraphNode_CopyBone_9; // 0x1210(0xf0)
	Unknown AnimGraphNode_LookAt_3; // 0x1300(0x1b0)
	Unknown AnimGraphNode_CopyBone_8; // 0x14b0(0xf0)
	Unknown AnimGraphNode_ComponentToLocalSpace_3; // 0x15a0(0x20)
	Unknown AnimGraphNode_CopyBone_7; // 0x15c0(0xf0)
	Unknown AnimGraphNode_MeshRefPose_2; // 0x16b0(0x10)
	Unknown AnimGraphNode_BlendListByBool_2; // 0x16c0(0xa0)
	Unknown AnimGraphNode_ComponentToLocalSpace_2; // 0x1760(0x20)
	Unknown AnimGraphNode_CopyBone_6; // 0x1780(0xf0)
	Unknown AnimGraphNode_WheelHandler; // 0x1870(0xe0)
	Unknown AnimGraphNode_CopyBone_5; // 0x1950(0xf0)
	Unknown AnimGraphNode_Root; // 0x1a40(0x30)
	Unknown AnimGraphNode_CopyBone_4; // 0x1a70(0xf0)
	Unknown AnimGraphNode_CopyBone_3; // 0x1b60(0xf0)
	Unknown AnimGraphNode_CopyBone_2; // 0x1c50(0xf0)
	Unknown AnimGraphNode_CopyBone; // 0x1d40(0xf0)
	Unknown AnimGraphNode_RotationMultiplier_2; // 0x1e30(0xf0)
	Unknown AnimGraphNode_LookAt_2; // 0x1f20(0x1b0)
	Unknown AnimGraphNode_RotationMultiplier; // 0x20d0(0xf0)
	Unknown AnimGraphNode_LookAt; // 0x21c0(0x1b0)
	Unknown AnimGraphNode_TransitionResult_12; // 0x2370(0x28)
	Unknown AnimGraphNode_TransitionResult_11; // 0x2398(0x28)
	Unknown AnimGraphNode_TransitionResult_10; // 0x23c0(0x28)
	Unknown AnimGraphNode_TransitionResult_9; // 0x23e8(0x28)
	Unknown AnimGraphNode_TransitionResult_8; // 0x2410(0x28)
	Unknown AnimGraphNode_TransitionResult_7; // 0x2438(0x28)
	Unknown AnimGraphNode_SequencePlayer_6; // 0x2460(0x78)
	Unknown AnimGraphNode_StateResult_6; // 0x24d8(0x30)
	Unknown AnimGraphNode_SequencePlayer_5; // 0x2508(0x78)
	Unknown AnimGraphNode_StateResult_5; // 0x2580(0x30)
	Unknown AnimGraphNode_SequencePlayer_4; // 0x25b0(0x78)
	Unknown AnimGraphNode_StateResult_4; // 0x2628(0x30)
	Unknown AnimGraphNode_StateMachine_2; // 0x2658(0xb0)
	Unknown AnimGraphNode_SaveCachedPose_2; // 0x2708(0xb8)
	Unknown AnimGraphNode_TransitionResult_6; // 0x27c0(0x28)
	Unknown AnimGraphNode_TransitionResult_5; // 0x27e8(0x28)
	Unknown AnimGraphNode_TransitionResult_4; // 0x2810(0x28)
	Unknown AnimGraphNode_TransitionResult_3; // 0x2838(0x28)
	Unknown AnimGraphNode_TransitionResult_2; // 0x2860(0x28)
	Unknown AnimGraphNode_TransitionResult; // 0x2888(0x28)
	Unknown AnimGraphNode_SequencePlayer_3; // 0x28b0(0x78)
	Unknown AnimGraphNode_StateResult_3; // 0x2928(0x30)
	Unknown AnimGraphNode_SequencePlayer_2; // 0x2958(0x78)
	Unknown AnimGraphNode_StateResult_2; // 0x29d0(0x30)
	Unknown AnimGraphNode_SequencePlayer; // 0x2a00(0x78)
	Unknown AnimGraphNode_StateResult; // 0x2a78(0x30)
	Unknown AnimGraphNode_StateMachine; // 0x2aa8(0xb0)
	Unknown AnimGraphNode_SaveCachedPose; // 0x2b58(0xb8)
	Unknown AnimGraphNode_LayeredBoneBlend_2; // 0x2c10(0xc0)
	Unknown AnimGraphNode_UseCachedPose_4; // 0x2cd0(0x28)
	Unknown AnimGraphNode_BlendListByBool; // 0x2cf8(0xa0)
	Unknown AnimGraphNode_TwoWayBlend; // 0x2d98(0xc8)
	Unknown AnimGraphNode_UseCachedPose_3; // 0x2e60(0x28)
	Unknown AnimGraphNode_UseCachedPose_2; // 0x2e88(0x28)
	Unknown AnimGraphNode_UseCachedPose; // 0x2eb0(0x28)
	Unknown AnimGraphNode_MeshRefPose; // 0x2ed8(0x10)
	Unknown AnimGraphNode_LayeredBoneBlend; // 0x2ee8(0xc0)
	Unknown AnimGraphNode_ComponentToLocalSpace; // 0x2fa8(0x20)
	Unknown AnimGraphNode_LocalToComponentSpace; // 0x2fc8(0x20)
	Unknown UseGlobalAmbience; // 0xb0(0x01)
	Unknown UseColorTemp; // 0xb1(0x01)
	Unknown NativeAudioOut; // 0x28(0x01)
	Unknown MediaSource; // 0xe0(0x08)
	Unknown bLoop; // 0xe8(0x01)
	Unknown MediaSource; // 0xe0(0x08)
	Unknown bLooping; // 0xe8(0x01)
	Unknown StartFrameOffset; // 0xec(0x04)
	Unknown MediaTexture; // 0xf0(0x08)
	Unknown MediaSoundComponent; // 0xf8(0x08)
	Unknown bUseExternalMediaPlayer; // 0x100(0x01)
	Unknown ExternalMediaPlayer; // 0x108(0x08)
	Unknown MediaSections; // 0x58(0x10)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown Anim_HideKillAssist; // 0x250(0x08)
	Unknown Anim_ShowAssist; // 0x258(0x08)
	Unknown Anim_ShowKill; // 0x260(0x08)
	Unknown T_AssistCount; // 0x268(0x08)
	Unknown T_KillCount; // 0x270(0x08)
	int32_t DefaultFontSize; // 0x278(0x04)
	int32_t MiniFontSize; // 0x27c(0x04)
	Unknown IsShowingKillCount; // 0x280(0x01)
	Unknown Timer_HideKillCountText; // 0x288(0x08)
	float RemainTime; // 0x290(0x04)
	Unknown SectionToKey; // 0x58(0x08)
	struct FName PropertyName; // 0x60(0x08)
	struct FString PropertyPath; // 0x68(0x10)
	Unknown Sections; // 0x78(0x10)
	Unknown ConstraintId; // 0xe0(0x10)
	Unknown ConstraintBindingID; // 0xf0(0x18)
	struct FName AttachSocketName; // 0x108(0x08)
	struct FName AttachComponentName; // 0x110(0x08)
	Unknown AttachmentLocationRule; // 0x118(0x01)
	Unknown AttachmentRotationRule; // 0x119(0x01)
	Unknown AttachmentScaleRule; // 0x11a(0x01)
	Unknown DetachmentLocationRule; // 0x11b(0x01)
	Unknown DetachmentRotationRule; // 0x11c(0x01)
	Unknown DetachmentScaleRule; // 0x11d(0x01)
	Unknown ConstraintSections; // 0x58(0x10)
	Unknown TimingCurve; // 0x108(0xa0)
	Unknown FrontAxisEnum; // 0x1a8(0x01)
	Unknown UpAxisEnum; // 0x1a9(0x01)
	Unknown bFollow; // 0x1ac(0x01)
	Unknown bReverse; // 0x1ac(0x01)
	Unknown bForceUpright; // 0x1ac(0x01)
	Unknown TransformMask; // 0xe0(0x04)
	Unknown Translation; // 0xe8(0x1e0)
	Unknown Rotation; // 0x2c8(0x1e0)
	Unknown Scale; // 0x4a8(0x1e0)
	Unknown ManualWeight; // 0x688(0xa0)
	Unknown bUseQuaternionInterpolation; // 0x72c(0x01)
	Unknown ActorReferenceData; // 0xe0(0xb0)
	Unknown ActorGuidIndexCurve; // 0x190(0x80)
	Unknown ActorGuidStrings; // 0x210(0x10)
	Unknown Sound; // 0xe0(0x08)
	Unknown StartFrameOffset; // 0xe8(0x04)
	float StartOffset; // 0xec(0x04)
	float AudioStartTime; // 0xf0(0x04)
	float AudioDilationFactor; // 0xf4(0x04)
	float AudioVolume; // 0xf8(0x04)
	Unknown SoundVolume; // 0x100(0xa0)
	Unknown PitchMultiplier; // 0x1a0(0xa0)
	Unknown AttachActorData; // 0x240(0xb0)
	Unknown bSuppressSubtitles; // 0x2f0(0x01)
	Unknown bOverrideAttenuation; // 0x2f1(0x01)
	Unknown AttenuationSettings; // 0x2f8(0x08)
	struct FDelegate OnQueueSubtitles; // 0x300(0x10)
	struct FMulticastInlineDelegate OnAudioFinished; // 0x310(0x10)
	struct FMulticastInlineDelegate OnAudioPlaybackPercent; // 0x320(0x10)
	Unknown AudioSections; // 0x58(0x10)
	Unknown DefaultValue; // 0xe0(0x01)
	Unknown BoolCurve; // 0xe8(0x90)
	Unknown ByteCurve; // 0xe0(0x98)
	Unknown Enum; // 0x88(0x08)
	Unknown AnimData; // 0xe0(0x20)
	Unknown CameraAnim; // 0x100(0x08)
	float PlayRate; // 0x108(0x04)
	float PlayScale; // 0x10c(0x04)
	float BlendInTime; // 0x110(0x04)
	float BlendOutTime; // 0x114(0x04)
	Unknown bLooping; // 0x118(0x01)
	Unknown CameraAnimSections; // 0x58(0x10)
	Unknown CameraGuid; // 0xe0(0x10)
	Unknown CameraBindingID; // 0xf0(0x18)
	Unknown bCanBlend; // 0x58(0x01)
	Unknown Sections; // 0x60(0x10)
	Unknown ShakeData; // 0xe0(0x20)
	Unknown ShakeClass; // 0x100(0x08)
	float PlayScale; // 0x108(0x04)
	Unknown PlaySpace; // 0x10c(0x01)
	Unknown UserDefinedPlaySpace; // 0x110(0x0c)
	Unknown CameraShakeSections; // 0x58(0x10)
	struct FString ShotDisplayName; // 0x158(0x10)
	struct FText DisplayName; // 0x168(0x18)
	Unknown RedCurve; // 0xe0(0xa0)
	Unknown GreenCurve; // 0x180(0xa0)
	Unknown BlueCurve; // 0x220(0xa0)
	Unknown AlphaCurve; // 0x2c0(0xa0)
	Unknown bIsSlateColor; // 0x88(0x01)
	Unknown EnumCurve; // 0xe0(0x98)
	Unknown Enum; // 0x88(0x08)
	Unknown Event; // 0xe0(0x28)
	Unknown Events; // 0xe0(0x78)
	Unknown eventData; // 0x158(0x88)
	Unknown bFireEventsWhenForwards; // 0x58(0x01)
	Unknown bFireEventsWhenBackwards; // 0x58(0x01)
	Unknown EventPosition; // 0x5c(0x01)
	Unknown EventReceivers; // 0x60(0x10)
	Unknown Sections; // 0x70(0x10)
	Unknown EventChannel; // 0xe0(0x88)
	Unknown FloatCurve; // 0xe0(0xa0)
	Unknown FadeColor; // 0x180(0x10)
	Unknown bFadeAudio; // 0x190(0x01)
	Unknown IntegerCurve; // 0xe0(0x90)
	Unknown Visibility; // 0xe0(0x01)
	Unknown LevelNames; // 0xe8(0x10)
	Unknown Sections; // 0x58(0x10)
	Unknown Sections; // 0x58(0x10)
	Unknown MPC; // 0x68(0x08)
	int32_t MaterialIndex; // 0x68(0x04)
	Unknown ObjectChannel; // 0xe0(0xc0)
	Unknown PropertyClass; // 0x88(0x08)
	Unknown BoolParameterNamesAndCurves; // 0xe0(0x10)
	Unknown ScalarParameterNamesAndCurves; // 0xf0(0x10)
	Unknown Vector2DParameterNamesAndCurves; // 0x100(0x10)
	Unknown VectorParameterNamesAndCurves; // 0x110(0x10)
	Unknown ColorParameterNamesAndCurves; // 0x120(0x10)
	Unknown TransformParameterNamesAndCurves; // 0x130(0x10)
	Unknown Sections; // 0x58(0x10)
	Unknown ParticleKeys; // 0xe0(0x98)
	Unknown ParticleSections; // 0x58(0x10)
	Unknown MaterialChannel; // 0xe0(0xc0)
	int32_t MaterialIndex; // 0x88(0x04)
	Unknown Params; // 0xe0(0xd8)
	Unknown AnimSequence; // 0x1b8(0x08)
	Unknown Animation; // 0x1c0(0x08)
	float StartOffset; // 0x1c8(0x04)
	float EndOffset; // 0x1cc(0x04)
	float PlayRate; // 0x1d0(0x04)
	Unknown bReverse; // 0x1d4(0x01)
	struct FName SlotName; // 0x1d8(0x08)
	Unknown AnimationSections; // 0x58(0x10)
	Unknown bUseLegacySectionIndexBlend; // 0x68(0x01)
	Unknown Sections; // 0x58(0x10)
	Unknown ObjectGuid; // 0x68(0x10)
	Unknown StringCurve; // 0xe0(0xa0)
	Unknown Curves; // 0xe0(0x280)
	int32_t ChannelsUsed; // 0x360(0x04)
	int32_t NumChannelsUsed; // 0x88(0x04)
	Unknown AllowNonStandardCodecs; // 0x28(0x01)
	Unknown LowLatency; // 0x29(0x01)
	Unknown NativeAudioOut; // 0x2a(0x01)
	Unknown HardwareAcceleratedVideoDecoding; // 0x2b(0x01)
	Unknown EnableTransport; // 0x28(0x01)
	struct FString ListenEndpoint; // 0x30(0x10)
	Unknown ConnectToEndpoints; // 0x40(0x10)
	int32_t ConnectionRetryDelay; // 0x50(0x04)
	Unknown bStopServiceWhenAppDeactivates; // 0x54(0x01)
	Unknown UberGraphFrame; // 0x2f8(0x08)
	Unknown Anim_Boost_Off; // 0x300(0x08)
	Unknown Anim_Boost_On; // 0x308(0x08)
	Unknown CanvasPanel_BoostInfo; // 0x310(0x08)
	Unknown Image_Active; // 0x318(0x08)
	Unknown IMG_CoolTime; // 0x320(0x08)
	Unknown T_CoolTime; // 0x328(0x08)
	Unknown MI_CoolTimeDynamicInstance; // 0x330(0x08)
	Unknown MI_BuffActive; // 0x338(0x08)
	float BoostOffAnimTime; // 0x340(0x04)
	Unknown IsActive; // 0x344(0x01)
	Unknown BoostBuffInfo; // 0x348(0x188)
	Unknown EnableTransport; // 0x28(0x01)
	Unknown bAutoRepair; // 0x29(0x01)
	Unknown bStopServiceWhenAppDeactivates; // 0x2a(0x01)
	struct FString UnicastEndpoint; // 0x30(0x10)
	struct FString MulticastEndpoint; // 0x40(0x10)
	Unknown MessageFormat; // 0x50(0x01)
	Unknown MulticastTimeToLive; // 0x51(0x01)
	Unknown StaticEndpoints; // 0x58(0x10)
	Unknown EnableTunnel; // 0x68(0x01)
	struct FString TunnelUnicastEndpoint; // 0x70(0x10)
	struct FString TunnelMulticastEndpoint; // 0x80(0x10)
	Unknown RemoteTunnelEndpoints; // 0x90(0x10)
	Unknown MovieScene; // 0x348(0x08)
	Unknown ObjectReferences; // 0x350(0x20)
	Unknown PlaybackSettings; // 0xb0(0x14)
	Unknown Sequence; // 0xc8(0x08)
	Unknown SequencePlayer; // 0xd0(0x08)
	Unknown UberGraphFrame; // 0x1360(0x08)
	Unknown P_Upgrade_Arrow; // 0x1368(0x08)
	Unknown C_SlotHover_ItemState_Hide; // 0x1370(0x08)
	Unknown C_SlotHover_ItemState_Show; // 0x1378(0x08)
	Unknown Hover_Gold; // 0x1380(0x08)
	Unknown P_SlotHover; // 0x1388(0x08)
	Unknown BGImage; // 0x1390(0x08)
	Unknown BGImage_2; // 0x1398(0x08)
	Unknown CanvasPanel_ITemState; // 0x13a0(0x08)
	Unknown CanvasPanel_Unnecessary; // 0x13a8(0x08)
	Unknown Count; // 0x13b0(0x08)
	Unknown Crate_Default; // 0x13b8(0x08)
	Unknown Crate_Hover; // 0x13c0(0x08)
	Unknown DurabilityBar; // 0x13c8(0x08)
	Unknown fill; // 0x13d0(0x08)
	Unknown HorizontalBox_Rarity; // 0x13d8(0x08)
	Unknown HoverImage; // 0x13e0(0x08)
	Unknown HoverImage_Gold; // 0x13e8(0x08)
	Unknown HoverImage_Round; // 0x13f0(0x08)
	Unknown Image_1; // 0x13f8(0x08)
	Unknown Image_2; // 0x1400(0x08)
	Unknown Image_531; // 0x1408(0x08)
	Unknown Image_539; // 0x1410(0x08)
	Unknown Image_540; // 0x1418(0x08)
	Unknown Image_541; // 0x1420(0x08)
	Unknown Image_542; // 0x1428(0x08)
	Unknown Image_543; // 0x1430(0x08)
	Unknown Image_544; // 0x1438(0x08)
	Unknown Image_Bindable; // 0x1440(0x08)
	Unknown Image_Supply; // 0x1448(0x08)
	Unknown ItemImage; // 0x1450(0x08)
	Unknown ItemNameName; // 0x1458(0x08)
	Unknown ItemState_Text; // 0x1460(0x08)
	Unknown KeepedItem_List; // 0x1468(0x08)
	Unknown KeepedItem_ListHover; // 0x1470(0x08)
	Unknown LvColor; // 0x1478(0x08)
	Unknown NeedMaterial; // 0x1480(0x08)
	Unknown SizeBox_1; // 0x1488(0x08)
	Unknown TextBlock_Range; // 0x1490(0x08)
	Unknown UpgradeItem; // 0x1498(0x08)
	Unknown UpgradeItem_Arrow01; // 0x14a0(0x08)
	Unknown UpgradeItem_Arrow02; // 0x14a8(0x08)
	Unknown UpgradeItem_default; // 0x14b0(0x08)
	Unknown UpgradeItem_Hover; // 0x14b8(0x08)
	Unknown weapon__; // 0x14c0(0x08)
	Unknown WeaponColor; // 0x14c8(0x08)
	Unknown WeaponEquipItem_Default; // 0x14d0(0x08)
	Unknown WeaponEquipItem_Hov; // 0x14d8(0x08)
	Unknown WeaponItemImage; // 0x14e0(0x08)
	Unknown WeaponType; // 0x14e8(0x08)
	Unknown PickupRef; // 0x14f0(0x08)
	Unknown DroppedItemInfo; // 0x14f8(0x98)
	Unknown DropBoxRef; // 0x1590(0x08)
	Unknown bGold; // 0x1598(0x01)
	Unknown SelectedHoverImage; // 0x15a0(0x08)
	Unknown WeaponData; // 0x15a8(0xb30)
	Unknown MedicalBGColor; // 0x20d8(0x10)
	int32_t CurCount; // 0x20e8(0x04)
	struct FMulticastInlineDelegate SetSlotInfo; // 0x20f0(0x10)
	Unknown TargetActor; // 0x2100(0x08)
	Unknown StealableCharacter; // 0x2108(0x08)
	Unknown ShowRarityStar; // 0x2110(0x10)
	Unknown ShowIconBG; // 0x2120(0x10)
	Unknown MovieScene; // 0x348(0x08)
	struct TSoftClassPtr<UObject> BoundActorClass; // 0x350(0x28)
	Unknown BoundPreviewActor; // 0x378(0x28)
	Unknown BoundActorComponents; // 0x3a0(0x50)
	Unknown PlaybackSettings; // 0x318(0x14)
	Unknown SequencePlayer; // 0x330(0x08)
	Unknown TemplateSequence; // 0x338(0x18)
	Unknown BindingOverride; // 0x350(0x0c)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown Image_66; // 0x250(0x08)
	Unknown Image_113; // 0x258(0x08)
	Unknown Image_181; // 0x260(0x08)
	Unknown Image_246; // 0x268(0x08)
	Unknown Image_312; // 0x270(0x08)
	Unknown Image_314; // 0x278(0x08)
	Unknown Image_315; // 0x280(0x08)
	Unknown Image_316; // 0x288(0x08)
	Unknown Image_317; // 0x290(0x08)
	Unknown Image_318; // 0x298(0x08)
	Unknown Image_319; // 0x2a0(0x08)
	Unknown UberGraphFrame; // 0xc60(0x08)
	Unknown AnimGraphNode_Root; // 0xc68(0x30)
	Unknown AnimGraphNode_TransitionResult_119; // 0xc98(0x28)
	Unknown AnimGraphNode_TransitionResult_118; // 0xcc0(0x28)
	Unknown AnimGraphNode_TransitionResult_117; // 0xce8(0x28)
	Unknown AnimGraphNode_TransitionResult_116; // 0xd10(0x28)
	Unknown AnimGraphNode_TransitionResult_115; // 0xd38(0x28)
	Unknown AnimGraphNode_TransitionResult_114; // 0xd60(0x28)
	Unknown AnimGraphNode_TransitionResult_113; // 0xd88(0x28)
	Unknown AnimGraphNode_TransitionResult_112; // 0xdb0(0x28)
	Unknown AnimGraphNode_TransitionResult_111; // 0xdd8(0x28)
	Unknown AnimGraphNode_TransitionResult_110; // 0xe00(0x28)
	Unknown AnimGraphNode_TransitionResult_109; // 0xe28(0x28)
	Unknown AnimGraphNode_TransitionResult_108; // 0xe50(0x28)
	Unknown AnimGraphNode_TransitionResult_107; // 0xe78(0x28)
	Unknown AnimGraphNode_TransitionResult_106; // 0xea0(0x28)
	Unknown AnimGraphNode_TransitionResult_105; // 0xec8(0x28)
	Unknown AnimGraphNode_TransitionResult_104; // 0xef0(0x28)
	Unknown AnimGraphNode_TransitionResult_103; // 0xf18(0x28)
	Unknown AnimGraphNode_TransitionResult_102; // 0xf40(0x28)
	Unknown AnimGraphNode_TransitionResult_101; // 0xf68(0x28)
	Unknown AnimGraphNode_TransitionResult_100; // 0xf90(0x28)
	Unknown AnimGraphNode_TransitionResult_99; // 0xfb8(0x28)
	Unknown AnimGraphNode_TransitionResult_98; // 0xfe0(0x28)
	Unknown AnimGraphNode_TransitionResult_97; // 0x1008(0x28)
	Unknown AnimGraphNode_TransitionResult_96; // 0x1030(0x28)
	Unknown AnimGraphNode_TransitionResult_95; // 0x1058(0x28)
	Unknown AnimGraphNode_TransitionResult_94; // 0x1080(0x28)
	Unknown AnimGraphNode_TransitionResult_93; // 0x10a8(0x28)
	Unknown AnimGraphNode_TransitionResult_92; // 0x10d0(0x28)
	Unknown AnimGraphNode_TransitionResult_91; // 0x10f8(0x28)
	Unknown AnimGraphNode_TransitionResult_90; // 0x1120(0x28)
	Unknown AnimGraphNode_TransitionResult_89; // 0x1148(0x28)
	Unknown AnimGraphNode_TransitionResult_88; // 0x1170(0x28)
	Unknown AnimGraphNode_TransitionResult_87; // 0x1198(0x28)
	Unknown AnimGraphNode_TransitionResult_86; // 0x11c0(0x28)
	Unknown AnimGraphNode_TransitionResult_85; // 0x11e8(0x28)
	Unknown AnimGraphNode_TransitionResult_84; // 0x1210(0x28)
	Unknown AnimGraphNode_TransitionResult_83; // 0x1238(0x28)
	Unknown AnimGraphNode_TransitionResult_82; // 0x1260(0x28)
	Unknown AnimGraphNode_SequencePlayer_345; // 0x1288(0x78)
	Unknown AnimGraphNode_StateResult_61; // 0x1300(0x30)
	Unknown AnimGraphNode_TransitionResult_81; // 0x1330(0x28)
	Unknown AnimGraphNode_SequencePlayer_344; // 0x1358(0x78)
	Unknown AnimGraphNode_StateResult_60; // 0x13d0(0x30)
	Unknown AnimGraphNode_SequencePlayer_343; // 0x1400(0x78)
	Unknown AnimGraphNode_StateResult_59; // 0x1478(0x30)
	Unknown AnimGraphNode_StateMachine_19; // 0x14a8(0xb0)
	Unknown AnimGraphNode_StateResult_58; // 0x1558(0x30)
	Unknown AnimGraphNode_TransitionResult_80; // 0x1588(0x28)
	Unknown AnimGraphNode_TransitionResult_79; // 0x15b0(0x28)
	Unknown AnimGraphNode_TransitionResult_78; // 0x15d8(0x28)
	Unknown AnimGraphNode_TransitionResult_77; // 0x1600(0x28)
	Unknown AnimGraphNode_SequencePlayer_342; // 0x1628(0x78)
	Unknown AnimGraphNode_StateResult_57; // 0x16a0(0x30)
	Unknown AnimGraphNode_BlendSpacePlayer_116; // 0x16d0(0xe0)
	Unknown AnimGraphNode_StateResult_56; // 0x17b0(0x30)
	Unknown AnimGraphNode_SequencePlayer_341; // 0x17e0(0x78)
	Unknown AnimGraphNode_StateResult_55; // 0x1858(0x30)
	Unknown AnimGraphNode_StateMachine_18; // 0x1888(0xb0)
	Unknown AnimGraphNode_StateResult_54; // 0x1938(0x30)
	Unknown AnimGraphNode_TransitionResult_76; // 0x1968(0x28)
	Unknown AnimGraphNode_TransitionResult_75; // 0x1990(0x28)
	Unknown AnimGraphNode_SequencePlayer_340; // 0x19b8(0x78)
	Unknown AnimGraphNode_BlendListByBool_83; // 0x1a30(0xa0)
	Unknown AnimGraphNode_BlendListByEnum_69; // 0x1ad0(0xb0)
	Unknown AnimGraphNode_BlendSpacePlayer_115; // 0x1b80(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_114; // 0x1c60(0xe0)
	Unknown AnimGraphNode_LayeredBoneBlend_97; // 0x1d40(0xc0)
	Unknown AnimGraphNode_SequencePlayer_339; // 0x1e00(0x78)
	Unknown AnimGraphNode_StateResult_53; // 0x1e78(0x30)
	Unknown AnimGraphNode_SequencePlayer_338; // 0x1ea8(0x78)
	Unknown AnimGraphNode_BlendListByBool_82; // 0x1f20(0xa0)
	Unknown AnimGraphNode_BlendListByEnum_68; // 0x1fc0(0xb0)
	Unknown AnimGraphNode_BlendSpacePlayer_113; // 0x2070(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_112; // 0x2150(0xe0)
	Unknown AnimGraphNode_LayeredBoneBlend_96; // 0x2230(0xc0)
	Unknown AnimGraphNode_SequencePlayer_337; // 0x22f0(0x78)
	Unknown AnimGraphNode_StateResult_52; // 0x2368(0x30)
	Unknown AnimGraphNode_SequencePlayer_336; // 0x2398(0x78)
	Unknown AnimGraphNode_BlendListByBool_81; // 0x2410(0xa0)
	Unknown AnimGraphNode_BlendListByEnum_67; // 0x24b0(0xb0)
	Unknown AnimGraphNode_BlendSpacePlayer_111; // 0x2560(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_110; // 0x2640(0xe0)
	Unknown AnimGraphNode_LayeredBoneBlend_95; // 0x2720(0xc0)
	Unknown AnimGraphNode_SequencePlayer_335; // 0x27e0(0x78)
	Unknown AnimGraphNode_StateResult_51; // 0x2858(0x30)
	Unknown AnimGraphNode_StateMachine_17; // 0x2888(0xb0)
	Unknown AnimGraphNode_StateResult_50; // 0x2938(0x30)
	Unknown AnimGraphNode_TransitionResult_74; // 0x2968(0x28)
	Unknown AnimGraphNode_TransitionResult_73; // 0x2990(0x28)
	Unknown AnimGraphNode_TransitionResult_72; // 0x29b8(0x28)
	Unknown AnimGraphNode_TransitionResult_71; // 0x29e0(0x28)
	Unknown AnimGraphNode_TransitionResult_70; // 0x2a08(0x28)
	Unknown AnimGraphNode_TransitionResult_69; // 0x2a30(0x28)
	Unknown AnimGraphNode_TransitionResult_68; // 0x2a58(0x28)
	Unknown AnimGraphNode_TransitionResult_67; // 0x2a80(0x28)
	Unknown AnimGraphNode_TransitionResult_66; // 0x2aa8(0x28)
	Unknown AnimGraphNode_BlendListByBool_80; // 0x2ad0(0xa0)
	Unknown AnimGraphNode_SequencePlayer_334; // 0x2b70(0x78)
	Unknown AnimGraphNode_BlendListByBool_79; // 0x2be8(0xa0)
	Unknown AnimGraphNode_SequencePlayer_333; // 0x2c88(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_94; // 0x2d00(0xc0)
	Unknown AnimGraphNode_SequencePlayer_332; // 0x2dc0(0x78)
	Unknown AnimGraphNode_BlendListByEnum_66; // 0x2e38(0xb0)
	Unknown AnimGraphNode_SequencePlayer_331; // 0x2ee8(0x78)
	Unknown AnimGraphNode_StateResult_49; // 0x2f60(0x30)
	Unknown AnimGraphNode_BlendListByBool_78; // 0x2f90(0xa0)
	Unknown AnimGraphNode_SequencePlayer_330; // 0x3030(0x78)
	Unknown AnimGraphNode_SequencePlayer_329; // 0x30a8(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_93; // 0x3120(0xc0)
	Unknown AnimGraphNode_BlendListByBool_77; // 0x31e0(0xa0)
	Unknown AnimGraphNode_BlendListByBool_76; // 0x3280(0xa0)
	Unknown AnimGraphNode_SequencePlayer_328; // 0x3320(0x78)
	Unknown AnimGraphNode_SequencePlayer_327; // 0x3398(0x78)
	Unknown AnimGraphNode_SequencePlayer_326; // 0x3410(0x78)
	Unknown AnimGraphNode_BlendListByEnum_65; // 0x3488(0xb0)
	Unknown AnimGraphNode_StateResult_48; // 0x3538(0x30)
	Unknown AnimGraphNode_BlendSpacePlayer_109; // 0x3568(0xe0)
	Unknown AnimGraphNode_TransitionResult_65; // 0x3648(0x28)
	Unknown AnimGraphNode_TransitionResult_64; // 0x3670(0x28)
	Unknown AnimGraphNode_TransitionResult_63; // 0x3698(0x28)
	Unknown AnimGraphNode_TransitionResult_62; // 0x36c0(0x28)
	Unknown AnimGraphNode_TransitionResult_61; // 0x36e8(0x28)
	Unknown AnimGraphNode_TransitionResult_60; // 0x3710(0x28)
	Unknown AnimGraphNode_SequencePlayer_325; // 0x3738(0x78)
	Unknown AnimGraphNode_TwoWayBlend_24; // 0x37b0(0xc8)
	Unknown AnimGraphNode_SequencePlayer_324; // 0x3878(0x78)
	Unknown AnimGraphNode_StateResult_47; // 0x38f0(0x30)
	Unknown AnimGraphNode_TwoWayBlend_23; // 0x3920(0xc8)
	Unknown AnimGraphNode_SequencePlayer_323; // 0x39e8(0x78)
	Unknown AnimGraphNode_SequencePlayer_322; // 0x3a60(0x78)
	Unknown AnimGraphNode_StateResult_46; // 0x3ad8(0x30)
	Unknown AnimGraphNode_SequencePlayer_321; // 0x3b08(0x78)
	Unknown AnimGraphNode_StateResult_45; // 0x3b80(0x30)
	Unknown AnimGraphNode_StateMachine_16; // 0x3bb0(0xb0)
	Unknown AnimGraphNode_BlendListByBool_75; // 0x3c60(0xa0)
	Unknown AnimGraphNode_StateResult_44; // 0x3d00(0x30)
	Unknown AnimGraphNode_SequencePlayer_320; // 0x3d30(0x78)
	Unknown AnimGraphNode_StateResult_43; // 0x3da8(0x30)
	Unknown AnimGraphNode_StateMachine_15; // 0x3dd8(0xb0)
	Unknown AnimGraphNode_StateResult_42; // 0x3e88(0x30)
	Unknown AnimGraphNode_SequencePlayer_319; // 0x3eb8(0x78)
	Unknown AnimGraphNode_StateResult_41; // 0x3f30(0x30)
	Unknown AnimGraphNode_SequencePlayer_318; // 0x3f60(0x78)
	Unknown AnimGraphNode_BlendListByBool_74; // 0x3fd8(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_108; // 0x4078(0xe0)
	Unknown AnimGraphNode_StateResult_40; // 0x4158(0x30)
	Unknown AnimGraphNode_TransitionResult_59; // 0x4188(0x28)
	Unknown AnimGraphNode_ApplyAdditive_17; // 0x41b0(0xc8)
	Unknown AnimGraphNode_BlendSpacePlayer_107; // 0x4278(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_106; // 0x4358(0xe0)
	Unknown AnimGraphNode_BlendListByBool_73; // 0x4438(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_105; // 0x44d8(0xe0)
	Unknown AnimGraphNode_StateResult_39; // 0x45b8(0x30)
	Unknown AnimGraphNode_TransitionResult_58; // 0x45e8(0x28)
	Unknown AnimGraphNode_TransitionResult_57; // 0x4610(0x28)
	Unknown AnimGraphNode_TransitionResult_56; // 0x4638(0x28)
	Unknown AnimGraphNode_TransitionResult_55; // 0x4660(0x28)
	Unknown AnimGraphNode_BlendSpacePlayer_104; // 0x4688(0xe0)
	Unknown AnimGraphNode_StateResult_38; // 0x4768(0x30)
	Unknown AnimGraphNode_BlendSpacePlayer_103; // 0x4798(0xe0)
	Unknown AnimGraphNode_StateResult_37; // 0x4878(0x30)
	Unknown AnimGraphNode_StateMachine_14; // 0x48a8(0xb0)
	Unknown AnimGraphNode_StateResult_36; // 0x4958(0x30)
	Unknown AnimGraphNode_TransitionResult_54; // 0x4988(0x28)
	Unknown AnimGraphNode_TransitionResult_53; // 0x49b0(0x28)
	Unknown AnimGraphNode_SequencePlayer_317; // 0x49d8(0x78)
	Unknown AnimGraphNode_StateResult_35; // 0x4a50(0x30)
	Unknown AnimGraphNode_SequencePlayer_316; // 0x4a80(0x78)
	Unknown AnimGraphNode_StateResult_34; // 0x4af8(0x30)
	Unknown AnimGraphNode_StateMachine_13; // 0x4b28(0xb0)
	Unknown AnimGraphNode_StateResult_33; // 0x4bd8(0x30)
	Unknown AnimGraphNode_StateMachine_12; // 0x4c08(0xb0)
	Unknown AnimGraphNode_StateResult_32; // 0x4cb8(0x30)
	Unknown AnimGraphNode_SequencePlayer_315; // 0x4ce8(0x78)
	Unknown AnimGraphNode_SequencePlayer_314; // 0x4d60(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_92; // 0x4dd8(0xc0)
	Unknown AnimGraphNode_SequencePlayer_313; // 0x4e98(0x78)
	Unknown AnimGraphNode_SequencePlayer_312; // 0x4f10(0x78)
	Unknown AnimGraphNode_SequencePlayer_311; // 0x4f88(0x78)
	Unknown AnimGraphNode_BlendListByEnum_64; // 0x5000(0xb0)
	Unknown AnimGraphNode_SequencePlayer_310; // 0x50b0(0x78)
	Unknown AnimGraphNode_StateResult_31; // 0x5128(0x30)
	Unknown AnimGraphNode_SequencePlayer_309; // 0x5158(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_91; // 0x51d0(0xc0)
	Unknown AnimGraphNode_SequencePlayer_308; // 0x5290(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_90; // 0x5308(0xc0)
	Unknown AnimGraphNode_SequencePlayer_307; // 0x53c8(0x78)
	Unknown AnimGraphNode_SequencePlayer_306; // 0x5440(0x78)
	Unknown AnimGraphNode_SequencePlayer_305; // 0x54b8(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_89; // 0x5530(0xc0)
	Unknown AnimGraphNode_SequenceEvaluator_6; // 0x55f0(0x48)
	Unknown AnimGraphNode_SequencePlayer_304; // 0x5638(0x78)
	Unknown AnimGraphNode_SequencePlayer_303; // 0x56b0(0x78)
	Unknown AnimGraphNode_SequencePlayer_302; // 0x5728(0x78)
	Unknown AnimGraphNode_SequencePlayer_301; // 0x57a0(0x78)
	Unknown AnimGraphNode_BlendListByEnum_63; // 0x5818(0xb0)
	Unknown AnimGraphNode_SequencePlayer_300; // 0x58c8(0x78)
	Unknown AnimGraphNode_SequencePlayer_299; // 0x5940(0x78)
	Unknown AnimGraphNode_SequencePlayer_298; // 0x59b8(0x78)
	Unknown AnimGraphNode_BlendListByBool_72; // 0x5a30(0xa0)
	Unknown AnimGraphNode_SequenceEvaluator_5; // 0x5ad0(0x48)
	Unknown AnimGraphNode_BlendListByBool_71; // 0x5b18(0xa0)
	Unknown AnimGraphNode_SequencePlayer_297; // 0x5bb8(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_88; // 0x5c30(0xc0)
	Unknown AnimGraphNode_SequencePlayer_296; // 0x5cf0(0x78)
	Unknown AnimGraphNode_SequencePlayer_295; // 0x5d68(0x78)
	Unknown AnimGraphNode_SequencePlayer_294; // 0x5de0(0x78)
	Unknown AnimGraphNode_SequencePlayer_293; // 0x5e58(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_87; // 0x5ed0(0xc0)
	Unknown AnimGraphNode_BlendListByBool_70; // 0x5f90(0xa0)
	Unknown AnimGraphNode_SequenceEvaluator_4; // 0x6030(0x48)
	Unknown AnimGraphNode_SequenceEvaluator_3; // 0x6078(0x48)
	Unknown AnimGraphNode_SequenceEvaluator_2; // 0x60c0(0x48)
	Unknown AnimGraphNode_BlendListByEnum_62; // 0x6108(0xb0)
	Unknown AnimGraphNode_SequencePlayer_292; // 0x61b8(0x78)
	Unknown AnimGraphNode_Slot_34; // 0x6230(0x48)
	Unknown AnimGraphNode_SequencePlayer_291; // 0x6278(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_86; // 0x62f0(0xc0)
	Unknown AnimGraphNode_BlendListByBool_69; // 0x63b0(0xa0)
	Unknown AnimGraphNode_BlendListByEnum_61; // 0x6450(0xb0)
	Unknown AnimGraphNode_SequencePlayer_290; // 0x6500(0x78)
	Unknown AnimGraphNode_BlendListByBool_68; // 0x6578(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_102; // 0x6618(0xe0)
	Unknown AnimGraphNode_ApplyAdditive_16; // 0x66f8(0xc8)
	Unknown AnimGraphNode_StateResult_30; // 0x67c0(0x30)
	Unknown AnimGraphNode_TransitionResult_52; // 0x67f0(0x28)
	Unknown AnimGraphNode_BlendListByEnum_60; // 0x6818(0xb0)
	Unknown AnimGraphNode_BlendListByEnum_59; // 0x68c8(0xb0)
	Unknown AnimGraphNode_UseCachedPose_60; // 0x6978(0x28)
	Unknown AnimGraphNode_LocalRefPose; // 0x69a0(0x18)
	Unknown AnimGraphNode_Slot_33; // 0x69b8(0x48)
	Unknown AnimGraphNode_LayeredBoneBlend_85; // 0x6a00(0xc0)
	Unknown AnimGraphNode_SequencePlayer_289; // 0x6ac0(0x78)
	Unknown AnimGraphNode_BlendListByBool_67; // 0x6b38(0xa0)
	Unknown AnimGraphNode_TwoWayBlend_22; // 0x6bd8(0xc8)
	Unknown AnimGraphNode_SequencePlayer_288; // 0x6ca0(0x78)
	Unknown AnimGraphNode_SequencePlayer_287; // 0x6d18(0x78)
	Unknown AnimGraphNode_SequencePlayer_286; // 0x6d90(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_84; // 0x6e08(0xc0)
	Unknown AnimGraphNode_SequencePlayer_285; // 0x6ec8(0x78)
	Unknown AnimGraphNode_StateResult_29; // 0x6f40(0x30)
	Unknown AnimGraphNode_StateMachine_11; // 0x6f70(0xb0)
	Unknown AnimGraphNode_SaveCachedPose_26; // 0x7020(0xb8)
	Unknown AnimGraphNode_LayeredBoneBlend_83; // 0x70d8(0xc0)
	Unknown AnimGraphNode_RotationOffsetBlendSpace_9; // 0x7198(0x188)
	Unknown AnimGraphNode_BlendListByBool_66; // 0x7320(0xa0)
	Unknown AnimGraphNode_RotationOffsetBlendSpace_8; // 0x73c0(0x188)
	Unknown AnimGraphNode_ComponentToLocalSpace_7; // 0x7548(0x20)
	Unknown AnimGraphNode_LocalToComponentSpace_7; // 0x7568(0x20)
	Unknown AnimGraphNode_ModifyBone_3; // 0x7588(0x108)
	Unknown AnimGraphNode_RotationOffsetBlendSpace_7; // 0x7690(0x188)
	Unknown AnimGraphNode_BlendListByEnum_58; // 0x7818(0xb0)
	Unknown AnimGraphNode_BlendListByBool_65; // 0x78c8(0xa0)
	Unknown AnimGraphNode_Slot_32; // 0x7968(0x48)
	Unknown AnimGraphNode_BlendListByBool_64; // 0x79b0(0xa0)
	Unknown AnimGraphNode_SaveCachedPose_25; // 0x7a50(0xb8)
	Unknown AnimGraphNode_Slot_31; // 0x7b08(0x48)
	Unknown AnimGraphNode_SaveCachedPose_24; // 0x7b50(0xb8)
	Unknown AnimGraphNode_SaveCachedPose_23; // 0x7c08(0xb8)
	Unknown AnimGraphNode_UseCachedPose_59; // 0x7cc0(0x28)
	Unknown AnimGraphNode_UseCachedPose_58; // 0x7ce8(0x28)
	Unknown AnimGraphNode_UseCachedPose_57; // 0x7d10(0x28)
	Unknown AnimGraphNode_UseCachedPose_56; // 0x7d38(0x28)
	Unknown AnimGraphNode_LayeredBoneBlend_82; // 0x7d60(0xc0)
	Unknown AnimGraphNode_UseCachedPose_55; // 0x7e20(0x28)
	Unknown AnimGraphNode_BlendListByBool_63; // 0x7e48(0xa0)
	Unknown AnimGraphNode_Slot_30; // 0x7ee8(0x48)
	Unknown AnimGraphNode_UseCachedPose_54; // 0x7f30(0x28)
	Unknown AnimGraphNode_UseCachedPose_53; // 0x7f58(0x28)
	Unknown AnimGraphNode_RotationOffsetBlendSpace_6; // 0x7f80(0x188)
	Unknown AnimGraphNode_UseCachedPose_52; // 0x8108(0x28)
	Unknown AnimGraphNode_BlendListByBool_62; // 0x8130(0xa0)
	Unknown AnimGraphNode_BlendListByBool_61; // 0x81d0(0xa0)
	Unknown AnimGraphNode_LayeredBoneBlend_81; // 0x8270(0xc0)
	Unknown AnimGraphNode_UseCachedPose_51; // 0x8330(0x28)
	Unknown AnimGraphNode_RotationOffsetBlendSpace_5; // 0x8358(0x188)
	Unknown AnimGraphNode_UseCachedPose_50; // 0x84e0(0x28)
	Unknown AnimGraphNode_RotationOffsetBlendSpace_4; // 0x8508(0x188)
	Unknown AnimGraphNode_BlendListByBool_60; // 0x8690(0xa0)
	Unknown AnimGraphNode_Slot_29; // 0x8730(0x48)
	Unknown AnimGraphNode_LayeredBoneBlend_80; // 0x8778(0xc0)
	Unknown AnimGraphNode_Slot_28; // 0x8838(0x48)
	Unknown AnimGraphNode_BlendListByBool_59; // 0x8880(0xa0)
	Unknown AnimGraphNode_Slot_27; // 0x8920(0x48)
	Unknown AnimGraphNode_LayeredBoneBlend_79; // 0x8968(0xc0)
	Unknown AnimGraphNode_Slot_26; // 0x8a28(0x48)
	Unknown AnimGraphNode_Slot_25; // 0x8a70(0x48)
	Unknown AnimGraphNode_UseCachedPose_49; // 0x8ab8(0x28)
	Unknown AnimGraphNode_ApplyAdditive_15; // 0x8ae0(0xc8)
	Unknown AnimGraphNode_SequencePlayer_284; // 0x8ba8(0x78)
	Unknown AnimGraphNode_Slot_24; // 0x8c20(0x48)
	Unknown AnimGraphNode_ApplyAdditive_14; // 0x8c68(0xc8)
	Unknown AnimGraphNode_RotationOffsetBlendSpace_3; // 0x8d30(0x188)
	Unknown AnimGraphNode_BlendListByBool_58; // 0x8eb8(0xa0)
	Unknown AnimGraphNode_RotationOffsetBlendSpace_2; // 0x8f58(0x188)
	Unknown AnimGraphNode_UseCachedPose_48; // 0x90e0(0x28)
	Unknown AnimGraphNode_LayeredBoneBlend_78; // 0x9108(0xc0)
	Unknown AnimGraphNode_LayeredBoneBlend_77; // 0x91c8(0xc0)
	Unknown AnimGraphNode_SaveCachedPose_22; // 0x9288(0xb8)
	Unknown AnimGraphNode_UseCachedPose_47; // 0x9340(0x28)
	Unknown AnimGraphNode_UseCachedPose_46; // 0x9368(0x28)
	Unknown AnimGraphNode_UseCachedPose_45; // 0x9390(0x28)
	Unknown AnimGraphNode_BlendListByBool_57; // 0x93b8(0xa0)
	Unknown AnimGraphNode_Slot_23; // 0x9458(0x48)
	Unknown AnimGraphNode_BlendSpacePlayer_101; // 0x94a0(0xe0)
	Unknown AnimGraphNode_SequenceEvaluator; // 0x9580(0x48)
	Unknown AnimGraphNode_LocalToComponentSpace_6; // 0x95c8(0x20)
	Unknown AnimGraphNode_ModifyBone_2; // 0x95e8(0x108)
	Unknown AnimGraphNode_ComponentToLocalSpace_6; // 0x96f0(0x20)
	Unknown AnimGraphNode_BlendListByBool_56; // 0x9710(0xa0)
	Unknown AnimGraphNode_IdentityPose_7; // 0x97b0(0x18)
	Unknown AnimGraphNode_LayeredBoneBlend_76; // 0x97c8(0xc0)
	Unknown AnimGraphNode_SequencePlayer_283; // 0x9888(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_75; // 0x9900(0xc0)
	Unknown AnimGraphNode_IdentityPose_6; // 0x99c0(0x18)
	Unknown AnimGraphNode_SequencePlayer_282; // 0x99d8(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_74; // 0x9a50(0xc0)
	Unknown AnimGraphNode_IdentityPose_5; // 0x9b10(0x18)
	Unknown AnimGraphNode_BlendListByEnum_57; // 0x9b28(0xb0)
	Unknown AnimGraphNode_SequencePlayer_281; // 0x9bd8(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_73; // 0x9c50(0xc0)
	Unknown AnimGraphNode_IdentityPose_4; // 0x9d10(0x18)
	Unknown AnimGraphNode_StateResult_28; // 0x9d28(0x30)
	Unknown AnimGraphNode_StateMachine_10; // 0x9d58(0xb0)
	Unknown AnimGraphNode_SaveCachedPose_21; // 0x9e08(0xb8)
	Unknown AnimGraphNode_ApplyAdditive_13; // 0x9ec0(0xc8)
	Unknown AnimGraphNode_UseCachedPose_44; // 0x9f88(0x28)
	Unknown AnimGraphNode_SaveCachedPose_20; // 0x9fb0(0xb8)
	Unknown AnimGraphNode_UseCachedPose_43; // 0xa068(0x28)
	Unknown AnimGraphNode_BlendListByBool_55; // 0xa090(0xa0)
	Unknown AnimGraphNode_Slot_22; // 0xa130(0x48)
	Unknown AnimGraphNode_SequencePlayer_280; // 0xa178(0x78)
	Unknown AnimGraphNode_BlendListByBool_54; // 0xa1f0(0xa0)
	Unknown AnimGraphNode_BlendListByBool_53; // 0xa290(0xa0)
	Unknown AnimGraphNode_SequencePlayer_279; // 0xa330(0x78)
	Unknown AnimGraphNode_LocalToComponentSpace_5; // 0xa3a8(0x20)
	Unknown AnimGraphNode_ModifyBone; // 0xa3c8(0x108)
	Unknown AnimGraphNode_ComponentToLocalSpace_5; // 0xa4d0(0x20)
	Unknown AnimGraphNode_BlendListByBool_52; // 0xa4f0(0xa0)
	Unknown AnimGraphNode_Slot_21; // 0xa590(0x48)
	Unknown AnimGraphNode_Slot_20; // 0xa5d8(0x48)
	Unknown AnimGraphNode_Slot_19; // 0xa620(0x48)
	Unknown AnimGraphNode_IdentityPose_3; // 0xa668(0x18)
	Unknown AnimGraphNode_SequencePlayer_278; // 0xa680(0x78)
	Unknown AnimGraphNode_BlendListByBool_51; // 0xa6f8(0xa0)
	Unknown AnimGraphNode_BlendListByBool_50; // 0xa798(0xa0)
	Unknown AnimGraphNode_SequencePlayer_277; // 0xa838(0x78)
	Unknown AnimGraphNode_StateResult_27; // 0xa8b0(0x30)
	Unknown AnimGraphNode_StateMachine_9; // 0xa8e0(0xb0)
	Unknown AnimGraphNode_SaveCachedPose_19; // 0xa990(0xb8)
	Unknown AnimGraphNode_UseCachedPose_42; // 0xaa48(0x28)
	Unknown AnimGraphNode_UseCachedPose_41; // 0xaa70(0x28)
	Unknown AnimGraphNode_BlendListByBool_49; // 0xaa98(0xa0)
	Unknown AnimGraphNode_TwoWayBlend_21; // 0xab38(0xc8)
	Unknown AnimGraphNode_Slot_18; // 0xac00(0x48)
	Unknown AnimGraphNode_BlendListByBool_48; // 0xac48(0xa0)
	Unknown AnimGraphNode_Slot_17; // 0xace8(0x48)
	Unknown AnimGraphNode_LayeredBoneBlend_72; // 0xad30(0xc0)
	Unknown AnimGraphNode_UseCachedPose_40; // 0xadf0(0x28)
	Unknown AnimGraphNode_UseCachedPose_39; // 0xae18(0x28)
	Unknown AnimGraphNode_SaveCachedPose_18; // 0xae40(0xb8)
	Unknown AnimGraphNode_UseCachedPose_38; // 0xaef8(0x28)
	Unknown AnimGraphNode_UseCachedPose_37; // 0xaf20(0x28)
	Unknown AnimGraphNode_Slot_16; // 0xaf48(0x48)
	Unknown AnimGraphNode_LayeredBoneBlend_71; // 0xaf90(0xc0)
	Unknown AnimGraphNode_Slot_15; // 0xb050(0x48)
	Unknown AnimGraphNode_UseCachedPose_36; // 0xb098(0x28)
	Unknown AnimGraphNode_SequencePlayer_276; // 0xb0c0(0x78)
	Unknown AnimGraphNode_SequencePlayer_275; // 0xb138(0x78)
	Unknown AnimGraphNode_BlendListByInt_20; // 0xb1b0(0xa0)
	Unknown AnimGraphNode_SequencePlayer_274; // 0xb250(0x78)
	Unknown AnimGraphNode_SequencePlayer_273; // 0xb2c8(0x78)
	Unknown AnimGraphNode_SequencePlayer_272; // 0xb340(0x78)
	Unknown AnimGraphNode_BlendListByInt_19; // 0xb3b8(0xa0)
	Unknown AnimGraphNode_SequencePlayer_271; // 0xb458(0x78)
	Unknown AnimGraphNode_SequencePlayer_270; // 0xb4d0(0x78)
	Unknown AnimGraphNode_SequencePlayer_269; // 0xb548(0x78)
	Unknown AnimGraphNode_BlendListByInt_18; // 0xb5c0(0xa0)
	Unknown AnimGraphNode_SequencePlayer_268; // 0xb660(0x78)
	Unknown AnimGraphNode_SequencePlayer_267; // 0xb6d8(0x78)
	Unknown AnimGraphNode_SequencePlayer_266; // 0xb750(0x78)
	Unknown AnimGraphNode_BlendListByInt_17; // 0xb7c8(0xa0)
	Unknown AnimGraphNode_SequencePlayer_265; // 0xb868(0x78)
	Unknown AnimGraphNode_BlendListByBool_47; // 0xb8e0(0xa0)
	Unknown AnimGraphNode_BlendListByBool_46; // 0xb980(0xa0)
	Unknown AnimGraphNode_BlendListByBool_45; // 0xba20(0xa0)
	Unknown AnimGraphNode_StateResult_26; // 0xbac0(0x30)
	Unknown AnimGraphNode_StateMachine_8; // 0xbaf0(0xb0)
	Unknown AnimGraphNode_SaveCachedPose_17; // 0xbba0(0xb8)
	Unknown AnimGraphNode_ApplyAdditive_12; // 0xbc58(0xc8)
	Unknown AnimGraphNode_UseCachedPose_35; // 0xbd20(0x28)
	Unknown AnimGraphNode_BlendListByBool_44; // 0xbd48(0xa0)
	Unknown AnimGraphNode_SequencePlayer_264; // 0xbde8(0x78)
	Unknown AnimGraphNode_SequencePlayer_263; // 0xbe60(0x78)
	Unknown AnimGraphNode_SequencePlayer_262; // 0xbed8(0x78)
	Unknown AnimGraphNode_SequencePlayer_261; // 0xbf50(0x78)
	Unknown AnimGraphNode_BlendListByEnum_56; // 0xbfc8(0xb0)
	Unknown AnimGraphNode_StateResult_25; // 0xc078(0x30)
	Unknown AnimGraphNode_StateMachine_7; // 0xc0a8(0xb0)
	Unknown AnimGraphNode_SaveCachedPose_16; // 0xc158(0xb8)
	Unknown AnimGraphNode_LayeredBoneBlend_70; // 0xc210(0xc0)
	Unknown AnimGraphNode_UseCachedPose_34; // 0xc2d0(0x28)
	Unknown AnimGraphNode_BlendListByBool_43; // 0xc2f8(0xa0)
	Unknown AnimGraphNode_BlendListByBool_42; // 0xc398(0xa0)
	Unknown AnimGraphNode_SequencePlayer_260; // 0xc438(0x78)
	Unknown AnimGraphNode_SequencePlayer_259; // 0xc4b0(0x78)
	Unknown AnimGraphNode_BlendListByBool_41; // 0xc528(0xa0)
	Unknown AnimGraphNode_SequencePlayer_258; // 0xc5c8(0x78)
	Unknown AnimGraphNode_SequencePlayer_257; // 0xc640(0x78)
	Unknown AnimGraphNode_StateResult_24; // 0xc6b8(0x30)
	Unknown AnimGraphNode_StateMachine_6; // 0xc6e8(0xb0)
	Unknown AnimGraphNode_SaveCachedPose_15; // 0xc798(0xb8)
	Unknown AnimGraphNode_BlendListByBool_40; // 0xc850(0xa0)
	Unknown AnimGraphNode_BlendListByBool_39; // 0xc8f0(0xa0)
	Unknown AnimGraphNode_UseCachedPose_33; // 0xc990(0x28)
	Unknown AnimGraphNode_SaveCachedPose_14; // 0xc9b8(0xb8)
	Unknown AnimGraphNode_UseCachedPose_32; // 0xca70(0x28)
	Unknown AnimGraphNode_Slot_14; // 0xca98(0x48)
	Unknown AnimGraphNode_LayeredBoneBlend_69; // 0xcae0(0xc0)
	Unknown AnimGraphNode_UseCachedPose_31; // 0xcba0(0x28)
	Unknown AnimGraphNode_TwoBoneIK_11; // 0xcbd0(0x1e0)
	Unknown AnimGraphNode_TwoBoneIK_10; // 0xcdb0(0x1e0)
	Unknown AnimGraphNode_LocalToComponentSpace_4; // 0xcf90(0x20)
	Unknown AnimGraphNode_ComponentToLocalSpace_4; // 0xcfb0(0x20)
	Unknown AnimGraphNode_SaveCachedPose_13; // 0xcfd0(0xb8)
	Unknown AnimGraphNode_UseCachedPose_30; // 0xd088(0x28)
	Unknown AnimGraphNode_UseCachedPose_29; // 0xd0b0(0x28)
	Unknown AnimGraphNode_TwoBoneIK_9; // 0xd0e0(0x1e0)
	Unknown AnimGraphNode_TwoBoneIK_8; // 0xd2c0(0x1e0)
	Unknown AnimGraphNode_TwoBoneIK_7; // 0xd4a0(0x1e0)
	Unknown AnimGraphNode_TwoBoneIK_6; // 0xd680(0x1e0)
	Unknown AnimGraphNode_LocalToComponentSpace_3; // 0xd860(0x20)
	Unknown AnimGraphNode_ComponentToLocalSpace_3; // 0xd880(0x20)
	Unknown AnimGraphNode_TwoBoneIK_5; // 0xd8a0(0x1e0)
	Unknown AnimGraphNode_TwoBoneIK_4; // 0xda80(0x1e0)
	Unknown AnimGraphNode_TwoBoneIK_3; // 0xdc60(0x1e0)
	Unknown AnimGraphNode_TwoBoneIK_2; // 0xde40(0x1e0)
	Unknown AnimGraphNode_LocalToComponentSpace_2; // 0xe020(0x20)
	Unknown AnimGraphNode_ComponentToLocalSpace_2; // 0xe040(0x20)
	Unknown AnimGraphNode_UseCachedPose_28; // 0xe060(0x28)
	Unknown AnimGraphNode_UseCachedPose_27; // 0xe088(0x28)
	Unknown AnimGraphNode_UseCachedPose_26; // 0xe0b0(0x28)
	Unknown AnimGraphNode_Slot_13; // 0xe0d8(0x48)
	Unknown AnimGraphNode_BlendListByEnum_55; // 0xe120(0xb0)
	Unknown AnimGraphNode_BlendListByBool_38; // 0xe1d0(0xa0)
	Unknown AnimGraphNode_RotationOffsetBlendSpace; // 0xe270(0x188)
	Unknown AnimGraphNode_UseCachedPose_25; // 0xe3f8(0x28)
	Unknown AnimGraphNode_SequencePlayer_256; // 0xe420(0x78)
	Unknown AnimGraphNode_BlendListByBool_37; // 0xe498(0xa0)
	Unknown AnimGraphNode_Slot_12; // 0xe538(0x48)
	Unknown AnimGraphNode_Slot_11; // 0xe580(0x48)
	Unknown AnimGraphNode_BlendListByBool_36; // 0xe5c8(0xa0)
	Unknown AnimGraphNode_SequencePlayer_255; // 0xe668(0x78)
	Unknown AnimGraphNode_SequencePlayer_254; // 0xe6e0(0x78)
	Unknown AnimGraphNode_BlendListByBool_35; // 0xe758(0xa0)
	Unknown AnimGraphNode_LayeredBoneBlend_68; // 0xe7f8(0xc0)
	Unknown AnimGraphNode_Slot_10; // 0xe8b8(0x48)
	Unknown AnimGraphNode_BlendListByBool_34; // 0xe900(0xa0)
	Unknown AnimGraphNode_LayeredBoneBlend_67; // 0xe9a0(0xc0)
	Unknown AnimGraphNode_Slot_9; // 0xea60(0x48)
	Unknown AnimGraphNode_BlendListByBool_33; // 0xeaa8(0xa0)
	Unknown AnimGraphNode_ApplyAdditive_11; // 0xeb48(0xc8)
	Unknown AnimGraphNode_UseCachedPose_24; // 0xec10(0x28)
	Unknown AnimGraphNode_TransitionResult_51; // 0xec38(0x28)
	Unknown AnimGraphNode_TransitionResult_50; // 0xec60(0x28)
	Unknown AnimGraphNode_TransitionResult_49; // 0xec88(0x28)
	Unknown AnimGraphNode_TransitionResult_48; // 0xecb0(0x28)
	Unknown AnimGraphNode_TransitionResult_47; // 0xecd8(0x28)
	Unknown AnimGraphNode_TransitionResult_46; // 0xed00(0x28)
	Unknown AnimGraphNode_TransitionResult_45; // 0xed28(0x28)
	Unknown AnimGraphNode_TransitionResult_44; // 0xed50(0x28)
	Unknown AnimGraphNode_TransitionResult_43; // 0xed78(0x28)
	Unknown AnimGraphNode_TransitionResult_42; // 0xeda0(0x28)
	Unknown AnimGraphNode_TransitionResult_41; // 0xedc8(0x28)
	Unknown AnimGraphNode_TransitionResult_40; // 0xedf0(0x28)
	Unknown AnimGraphNode_TransitionResult_39; // 0xee18(0x28)
	Unknown AnimGraphNode_TransitionResult_38; // 0xee40(0x28)
	Unknown AnimGraphNode_TransitionResult_37; // 0xee68(0x28)
	Unknown AnimGraphNode_TransitionResult_36; // 0xee90(0x28)
	Unknown AnimGraphNode_TransitionResult_35; // 0xeeb8(0x28)
	Unknown AnimGraphNode_TransitionResult_34; // 0xeee0(0x28)
	Unknown AnimGraphNode_TransitionResult_33; // 0xef08(0x28)
	Unknown AnimGraphNode_TransitionResult_32; // 0xef30(0x28)
	Unknown AnimGraphNode_TransitionResult_31; // 0xef58(0x28)
	Unknown AnimGraphNode_TransitionResult_30; // 0xef80(0x28)
	Unknown AnimGraphNode_TransitionResult_29; // 0xefa8(0x28)
	Unknown AnimGraphNode_TransitionResult_28; // 0xefd0(0x28)
	Unknown AnimGraphNode_TransitionResult_27; // 0xeff8(0x28)
	Unknown AnimGraphNode_TransitionResult_26; // 0xf020(0x28)
	Unknown AnimGraphNode_SequencePlayer_253; // 0xf048(0x78)
	Unknown AnimGraphNode_SequencePlayer_252; // 0xf0c0(0x78)
	Unknown AnimGraphNode_TwoWayBlend_20; // 0xf138(0xc8)
	Unknown AnimGraphNode_LayeredBoneBlend_66; // 0xf200(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_100; // 0xf2c0(0xe0)
	Unknown AnimGraphNode_SequencePlayer_251; // 0xf3a0(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_65; // 0xf418(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_99; // 0xf4d8(0xe0)
	Unknown AnimGraphNode_SequencePlayer_250; // 0xf5b8(0x78)
	Unknown AnimGraphNode_SequencePlayer_249; // 0xf630(0x78)
	Unknown AnimGraphNode_SequencePlayer_248; // 0xf6a8(0x78)
	Unknown AnimGraphNode_SequencePlayer_247; // 0xf720(0x78)
	Unknown AnimGraphNode_SequencePlayer_246; // 0xf798(0x78)
	Unknown AnimGraphNode_SequencePlayer_245; // 0xf810(0x78)
	Unknown AnimGraphNode_SequencePlayer_244; // 0xf888(0x78)
	Unknown AnimGraphNode_SequencePlayer_243; // 0xf900(0x78)
	Unknown AnimGraphNode_TwoWayBlend_19; // 0xf978(0xc8)
	Unknown AnimGraphNode_SequencePlayer_242; // 0xfa40(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_64; // 0xfab8(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_98; // 0xfb78(0xe0)
	Unknown AnimGraphNode_SequencePlayer_241; // 0xfc58(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_63; // 0xfcd0(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_97; // 0xfd90(0xe0)
	Unknown AnimGraphNode_BlendListByBool_32; // 0xfe70(0xa0)
	Unknown AnimGraphNode_SequencePlayer_240; // 0xff10(0x78)
	Unknown AnimGraphNode_TwoWayBlend_18; // 0xff88(0xc8)
	Unknown AnimGraphNode_BlendSpacePlayer_96; // 0x10050(0xe0)
	Unknown AnimGraphNode_SequencePlayer_239; // 0x10130(0x78)
	Unknown AnimGraphNode_TwoWayBlend_17; // 0x101a8(0xc8)
	Unknown AnimGraphNode_BlendSpacePlayer_95; // 0x10270(0xe0)
	Unknown AnimGraphNode_TwoWayBlend_16; // 0x10350(0xc8)
	Unknown AnimGraphNode_SequencePlayer_238; // 0x10418(0x78)
	Unknown AnimGraphNode_SequencePlayer_237; // 0x10490(0x78)
	Unknown AnimGraphNode_TwoWayBlend_15; // 0x10508(0xc8)
	Unknown AnimGraphNode_SequencePlayer_236; // 0x105d0(0x78)
	Unknown AnimGraphNode_TwoWayBlend_14; // 0x10648(0xc8)
	Unknown AnimGraphNode_SequencePlayer_235; // 0x10710(0x78)
	Unknown AnimGraphNode_TwoWayBlend_13; // 0x10788(0xc8)
	Unknown AnimGraphNode_SequencePlayer_234; // 0x10850(0x78)
	Unknown AnimGraphNode_TwoWayBlend_12; // 0x108c8(0xc8)
	Unknown AnimGraphNode_SequencePlayer_233; // 0x10990(0x78)
	Unknown AnimGraphNode_TwoWayBlend_11; // 0x10a08(0xc8)
	Unknown AnimGraphNode_BlendSpacePlayer_94; // 0x10ad0(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_93; // 0x10bb0(0xe0)
	Unknown AnimGraphNode_LayeredBoneBlend_62; // 0x10c90(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_92; // 0x10d50(0xe0)
	Unknown AnimGraphNode_BlendListByEnum_54; // 0x10e30(0xb0)
	Unknown AnimGraphNode_BlendSpacePlayer_91; // 0x10ee0(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_90; // 0x10fc0(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_89; // 0x110a0(0xe0)
	Unknown AnimGraphNode_BlendListByEnum_53; // 0x11180(0xb0)
	Unknown AnimGraphNode_IdentityPose_2; // 0x11230(0x18)
	Unknown AnimGraphNode_ApplyAdditive_10; // 0x11248(0xc8)
	Unknown AnimGraphNode_BlendListByEnum_52; // 0x11310(0xb0)
	Unknown AnimGraphNode_LayeredBoneBlend_61; // 0x113c0(0xc0)
	Unknown AnimGraphNode_BlendListByEnum_51; // 0x11480(0xb0)
	Unknown AnimGraphNode_LayeredBoneBlend_60; // 0x11530(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_88; // 0x115f0(0xe0)
	Unknown AnimGraphNode_BlendListByEnum_50; // 0x116d0(0xb0)
	Unknown AnimGraphNode_BlendSpacePlayer_87; // 0x11780(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_86; // 0x11860(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_85; // 0x11940(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_84; // 0x11a20(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_83; // 0x11b00(0xe0)
	Unknown AnimGraphNode_ApplyAdditive_9; // 0x11be0(0xc8)
	Unknown AnimGraphNode_ApplyAdditive_8; // 0x11ca8(0xc8)
	Unknown AnimGraphNode_BlendListByBool_31; // 0x11d70(0xa0)
	Unknown AnimGraphNode_StateResult_23; // 0x11e10(0x30)
	Unknown AnimGraphNode_SequencePlayer_232; // 0x11e40(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_59; // 0x11eb8(0xc0)
	Unknown AnimGraphNode_SequencePlayer_231; // 0x11f78(0x78)
	Unknown AnimGraphNode_SequencePlayer_230; // 0x11ff0(0x78)
	Unknown AnimGraphNode_SequencePlayer_229; // 0x12068(0x78)
	Unknown AnimGraphNode_SequencePlayer_228; // 0x120e0(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_58; // 0x12158(0xc0)
	Unknown AnimGraphNode_LayeredBoneBlend_57; // 0x12218(0xc0)
	Unknown AnimGraphNode_SequencePlayer_227; // 0x122d8(0x78)
	Unknown AnimGraphNode_SequencePlayer_226; // 0x12350(0x78)
	Unknown AnimGraphNode_SequencePlayer_225; // 0x123c8(0x78)
	Unknown AnimGraphNode_BlendListByEnum_49; // 0x12440(0xb0)
	Unknown AnimGraphNode_SequencePlayer_224; // 0x124f0(0x78)
	Unknown AnimGraphNode_StateResult_22; // 0x12568(0x30)
	Unknown AnimGraphNode_SequencePlayer_223; // 0x12598(0x78)
	Unknown AnimGraphNode_SequencePlayer_222; // 0x12610(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_56; // 0x12688(0xc0)
	Unknown AnimGraphNode_SequencePlayer_221; // 0x12748(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_55; // 0x127c0(0xc0)
	Unknown AnimGraphNode_SequencePlayer_220; // 0x12880(0x78)
	Unknown AnimGraphNode_SequencePlayer_219; // 0x128f8(0x78)
	Unknown AnimGraphNode_SequencePlayer_218; // 0x12970(0x78)
	Unknown AnimGraphNode_BlendListByEnum_48; // 0x129e8(0xb0)
	Unknown AnimGraphNode_SequencePlayer_217; // 0x12a98(0x78)
	Unknown AnimGraphNode_StateResult_21; // 0x12b10(0x30)
	Unknown AnimGraphNode_SequencePlayer_216; // 0x12b40(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_54; // 0x12bb8(0xc0)
	Unknown AnimGraphNode_SequencePlayer_215; // 0x12c78(0x78)
	Unknown AnimGraphNode_SequencePlayer_214; // 0x12cf0(0x78)
	Unknown AnimGraphNode_SequencePlayer_213; // 0x12d68(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_53; // 0x12de0(0xc0)
	Unknown AnimGraphNode_SequencePlayer_212; // 0x12ea0(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_52; // 0x12f18(0xc0)
	Unknown AnimGraphNode_SequencePlayer_211; // 0x12fd8(0x78)
	Unknown AnimGraphNode_SequencePlayer_210; // 0x13050(0x78)
	Unknown AnimGraphNode_SequencePlayer_209; // 0x130c8(0x78)
	Unknown AnimGraphNode_BlendListByEnum_47; // 0x13140(0xb0)
	Unknown AnimGraphNode_SequencePlayer_208; // 0x131f0(0x78)
	Unknown AnimGraphNode_StateResult_20; // 0x13268(0x30)
	Unknown AnimGraphNode_StateMachine_5; // 0x13298(0xb0)
	Unknown AnimGraphNode_StateResult_19; // 0x13348(0x30)
	Unknown AnimGraphNode_LayeredBoneBlend_51; // 0x13378(0xc0)
	Unknown AnimGraphNode_SequencePlayer_207; // 0x13438(0x78)
	Unknown AnimGraphNode_SequencePlayer_206; // 0x134b0(0x78)
	Unknown AnimGraphNode_SequencePlayer_205; // 0x13528(0x78)
	Unknown AnimGraphNode_SequencePlayer_204; // 0x135a0(0x78)
	Unknown AnimGraphNode_SequencePlayer_203; // 0x13618(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_50; // 0x13690(0xc0)
	Unknown AnimGraphNode_LayeredBoneBlend_49; // 0x13750(0xc0)
	Unknown AnimGraphNode_SequencePlayer_202; // 0x13810(0x78)
	Unknown AnimGraphNode_SequencePlayer_201; // 0x13888(0x78)
	Unknown AnimGraphNode_BlendListByEnum_46; // 0x13900(0xb0)
	Unknown AnimGraphNode_SequencePlayer_200; // 0x139b0(0x78)
	Unknown AnimGraphNode_SequencePlayer_199; // 0x13a28(0x78)
	Unknown AnimGraphNode_StateResult_18; // 0x13aa0(0x30)
	Unknown AnimGraphNode_LayeredBoneBlend_48; // 0x13ad0(0xc0)
	Unknown AnimGraphNode_SequencePlayer_198; // 0x13b90(0x78)
	Unknown AnimGraphNode_SequencePlayer_197; // 0x13c08(0x78)
	Unknown AnimGraphNode_SequencePlayer_196; // 0x13c80(0x78)
	Unknown AnimGraphNode_SequencePlayer_195; // 0x13cf8(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_47; // 0x13d70(0xc0)
	Unknown AnimGraphNode_SequencePlayer_194; // 0x13e30(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_46; // 0x13ea8(0xc0)
	Unknown AnimGraphNode_SequencePlayer_193; // 0x13f68(0x78)
	Unknown AnimGraphNode_SequencePlayer_192; // 0x13fe0(0x78)
	Unknown AnimGraphNode_BlendListByEnum_45; // 0x14058(0xb0)
	Unknown AnimGraphNode_SequencePlayer_191; // 0x14108(0x78)
	Unknown AnimGraphNode_SequencePlayer_190; // 0x14180(0x78)
	Unknown AnimGraphNode_StateResult_17; // 0x141f8(0x30)
	Unknown AnimGraphNode_SequencePlayer_189; // 0x14228(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_45; // 0x142a0(0xc0)
	Unknown AnimGraphNode_SequencePlayer_188; // 0x14360(0x78)
	Unknown AnimGraphNode_SequencePlayer_187; // 0x143d8(0x78)
	Unknown AnimGraphNode_SequencePlayer_186; // 0x14450(0x78)
	Unknown AnimGraphNode_SequencePlayer_185; // 0x144c8(0x78)
	Unknown AnimGraphNode_SequencePlayer_184; // 0x14540(0x78)
	Unknown AnimGraphNode_SequencePlayer_183; // 0x145b8(0x78)
	Unknown AnimGraphNode_SequencePlayer_182; // 0x14630(0x78)
	Unknown AnimGraphNode_SequencePlayer_181; // 0x146a8(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_44; // 0x14720(0xc0)
	Unknown AnimGraphNode_LayeredBoneBlend_43; // 0x147e0(0xc0)
	Unknown AnimGraphNode_BlendListByEnum_44; // 0x148a0(0xb0)
	Unknown AnimGraphNode_BlendListByEnum_43; // 0x14950(0xb0)
	Unknown AnimGraphNode_SequencePlayer_180; // 0x14a00(0x78)
	Unknown AnimGraphNode_SequencePlayer_179; // 0x14a78(0x78)
	Unknown AnimGraphNode_BlendListByEnum_42; // 0x14af0(0xb0)
	Unknown AnimGraphNode_SequencePlayer_178; // 0x14ba0(0x78)
	Unknown AnimGraphNode_SequencePlayer_177; // 0x14c18(0x78)
	Unknown AnimGraphNode_StateResult_16; // 0x14c90(0x30)
	Unknown AnimGraphNode_SequencePlayer_176; // 0x14cc0(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_42; // 0x14d38(0xc0)
	Unknown AnimGraphNode_SequencePlayer_175; // 0x14df8(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_41; // 0x14e70(0xc0)
	Unknown AnimGraphNode_SequencePlayer_174; // 0x14f30(0x78)
	Unknown AnimGraphNode_SequencePlayer_173; // 0x14fa8(0x78)
	Unknown AnimGraphNode_SequencePlayer_172; // 0x15020(0x78)
	Unknown AnimGraphNode_SequencePlayer_171; // 0x15098(0x78)
	Unknown AnimGraphNode_SequencePlayer_170; // 0x15110(0x78)
	Unknown AnimGraphNode_SequencePlayer_169; // 0x15188(0x78)
	Unknown AnimGraphNode_SequencePlayer_168; // 0x15200(0x78)
	Unknown AnimGraphNode_SequencePlayer_167; // 0x15278(0x78)
	Unknown AnimGraphNode_SequencePlayer_166; // 0x152f0(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_40; // 0x15368(0xc0)
	Unknown AnimGraphNode_SequencePlayer_165; // 0x15428(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_39; // 0x154a0(0xc0)
	Unknown AnimGraphNode_BlendListByEnum_41; // 0x15560(0xb0)
	Unknown AnimGraphNode_BlendListByEnum_40; // 0x15610(0xb0)
	Unknown AnimGraphNode_LayeredBoneBlend_38; // 0x156c0(0xc0)
	Unknown AnimGraphNode_SequencePlayer_164; // 0x15780(0x78)
	Unknown AnimGraphNode_SequencePlayer_163; // 0x157f8(0x78)
	Unknown AnimGraphNode_SequencePlayer_162; // 0x15870(0x78)
	Unknown AnimGraphNode_BlendListByEnum_39; // 0x158e8(0xb0)
	Unknown AnimGraphNode_SequencePlayer_161; // 0x15998(0x78)
	Unknown AnimGraphNode_StateResult_15; // 0x15a10(0x30)
	Unknown AnimGraphNode_TransitionResult_25; // 0x15a40(0x28)
	Unknown AnimGraphNode_TransitionResult_24; // 0x15a68(0x28)
	Unknown AnimGraphNode_TransitionResult_23; // 0x15a90(0x28)
	Unknown AnimGraphNode_TransitionResult_22; // 0x15ab8(0x28)
	Unknown AnimGraphNode_TransitionResult_21; // 0x15ae0(0x28)
	Unknown AnimGraphNode_BlendListByBool_30; // 0x15b08(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_82; // 0x15ba8(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_81; // 0x15c88(0xe0)
	Unknown AnimGraphNode_SequencePlayer_160; // 0x15d68(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_37; // 0x15de0(0xc0)
	Unknown AnimGraphNode_SequencePlayer_159; // 0x15ea0(0x78)
	Unknown AnimGraphNode_SequencePlayer_158; // 0x15f18(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_36; // 0x15f90(0xc0)
	Unknown AnimGraphNode_BlendListByBool_29; // 0x16050(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_80; // 0x160f0(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_79; // 0x161d0(0xe0)
	Unknown AnimGraphNode_LayeredBoneBlend_35; // 0x162b0(0xc0)
	Unknown AnimGraphNode_BlendListByBool_28; // 0x16370(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_78; // 0x16410(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_77; // 0x164f0(0xe0)
	Unknown AnimGraphNode_BlendListByEnum_38; // 0x165d0(0xb0)
	Unknown AnimGraphNode_BlendListByBool_27; // 0x16680(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_76; // 0x16720(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_75; // 0x16800(0xe0)
	Unknown AnimGraphNode_BlendListByBool_26; // 0x168e0(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_74; // 0x16980(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_73; // 0x16a60(0xe0)
	Unknown AnimGraphNode_StateResult_14; // 0x16b40(0x30)
	Unknown AnimGraphNode_BlendListByBool_25; // 0x16b70(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_72; // 0x16c10(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_71; // 0x16cf0(0xe0)
	Unknown AnimGraphNode_SequencePlayer_157; // 0x16dd0(0x78)
	Unknown AnimGraphNode_SequencePlayer_156; // 0x16e48(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_34; // 0x16ec0(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_70; // 0x16f80(0xe0)
	Unknown AnimGraphNode_LayeredBoneBlend_33; // 0x17060(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_69; // 0x17120(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_68; // 0x17200(0xe0)
	Unknown AnimGraphNode_BlendListByEnum_37; // 0x172e0(0xb0)
	Unknown AnimGraphNode_BlendSpacePlayer_67; // 0x17390(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_66; // 0x17470(0xe0)
	Unknown AnimGraphNode_StateResult_13; // 0x17550(0x30)
	Unknown AnimGraphNode_SequencePlayer_155; // 0x17580(0x78)
	Unknown AnimGraphNode_SequencePlayer_154; // 0x175f8(0x78)
	Unknown AnimGraphNode_SequencePlayer_153; // 0x17670(0x78)
	Unknown AnimGraphNode_ComponentToLocalSpace; // 0x176e8(0x20)
	Unknown AnimGraphNode_LocalToComponentSpace; // 0x17708(0x20)
	Unknown AnimGraphNode_TwoBoneIK; // 0x17730(0x1e0)
	Unknown AnimGraphNode_SequencePlayer_152; // 0x17910(0x78)
	Unknown AnimGraphNode_SequencePlayer_151; // 0x17988(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_32; // 0x17a00(0xc0)
	Unknown AnimGraphNode_SequencePlayer_150; // 0x17ac0(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_31; // 0x17b38(0xc0)
	Unknown AnimGraphNode_SequencePlayer_149; // 0x17bf8(0x78)
	Unknown AnimGraphNode_SequencePlayer_148; // 0x17c70(0x78)
	Unknown AnimGraphNode_BlendListByInt_16; // 0x17ce8(0xa0)
	Unknown AnimGraphNode_SequencePlayer_147; // 0x17d88(0x78)
	Unknown AnimGraphNode_SequencePlayer_146; // 0x17e00(0x78)
	Unknown AnimGraphNode_SequencePlayer_145; // 0x17e78(0x78)
	Unknown AnimGraphNode_BlendListByEnum_36; // 0x17ef0(0xb0)
	Unknown AnimGraphNode_SequencePlayer_144; // 0x17fa0(0x78)
	Unknown AnimGraphNode_BlendListByBool_24; // 0x18018(0xa0)
	Unknown AnimGraphNode_SequencePlayer_143; // 0x180b8(0x78)
	Unknown AnimGraphNode_BlendListByBool_23; // 0x18130(0xa0)
	Unknown AnimGraphNode_SequencePlayer_142; // 0x181d0(0x78)
	Unknown AnimGraphNode_BlendListByBool_22; // 0x18248(0xa0)
	Unknown AnimGraphNode_SequencePlayer_141; // 0x182e8(0x78)
	Unknown AnimGraphNode_BlendListByBool_21; // 0x18360(0xa0)
	Unknown AnimGraphNode_SequencePlayer_140; // 0x18400(0x78)
	Unknown AnimGraphNode_SequencePlayer_139; // 0x18478(0x78)
	Unknown AnimGraphNode_SequencePlayer_138; // 0x184f0(0x78)
	Unknown AnimGraphNode_SequencePlayer_137; // 0x18568(0x78)
	Unknown AnimGraphNode_BlendListByInt_15; // 0x185e0(0xa0)
	Unknown AnimGraphNode_SequencePlayer_136; // 0x18680(0x78)
	Unknown AnimGraphNode_SequencePlayer_135; // 0x186f8(0x78)
	Unknown AnimGraphNode_BlendListByInt_14; // 0x18770(0xa0)
	Unknown AnimGraphNode_SequencePlayer_134; // 0x18810(0x78)
	Unknown AnimGraphNode_SequencePlayer_133; // 0x18888(0x78)
	Unknown AnimGraphNode_BlendListByInt_13; // 0x18900(0xa0)
	Unknown AnimGraphNode_BlendListByEnum_35; // 0x189a0(0xb0)
	Unknown AnimGraphNode_SequencePlayer_132; // 0x18a50(0x78)
	Unknown AnimGraphNode_SequencePlayer_131; // 0x18ac8(0x78)
	Unknown AnimGraphNode_SequencePlayer_130; // 0x18b40(0x78)
	Unknown AnimGraphNode_BlendListByEnum_34; // 0x18bb8(0xb0)
	Unknown AnimGraphNode_SequencePlayer_129; // 0x18c68(0x78)
	Unknown AnimGraphNode_SequencePlayer_128; // 0x18ce0(0x78)
	Unknown AnimGraphNode_BlendListByBool_20; // 0x18d58(0xa0)
	Unknown AnimGraphNode_BlendListByEnum_33; // 0x18df8(0xb0)
	Unknown AnimGraphNode_Slot_8; // 0x18ea8(0x48)
	Unknown AnimGraphNode_SequencePlayer_127; // 0x18ef0(0x78)
	Unknown AnimGraphNode_StateResult_12; // 0x18f68(0x30)
	Unknown AnimGraphNode_StateMachine_4; // 0x18f98(0xb0)
	Unknown AnimGraphNode_StateResult_11; // 0x19048(0x30)
	Unknown AnimGraphNode_TransitionResult_20; // 0x19078(0x28)
	Unknown AnimGraphNode_TransitionResult_19; // 0x190a0(0x28)
	Unknown AnimGraphNode_TransitionResult_18; // 0x190c8(0x28)
	Unknown AnimGraphNode_TransitionResult_17; // 0x190f0(0x28)
	Unknown AnimGraphNode_TransitionResult_16; // 0x19118(0x28)
	Unknown AnimGraphNode_SequencePlayer_126; // 0x19140(0x78)
	Unknown AnimGraphNode_BlendSpacePlayer_65; // 0x191b8(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_64; // 0x19298(0xe0)
	Unknown AnimGraphNode_BlendListByBool_19; // 0x19378(0xa0)
	Unknown AnimGraphNode_LayeredBoneBlend_30; // 0x19418(0xc0)
	Unknown AnimGraphNode_SequencePlayer_125; // 0x194d8(0x78)
	Unknown AnimGraphNode_SequencePlayer_124; // 0x19550(0x78)
	Unknown AnimGraphNode_SequencePlayer_123; // 0x195c8(0x78)
	Unknown AnimGraphNode_SequencePlayer_122; // 0x19640(0x78)
	Unknown AnimGraphNode_SequencePlayer_121; // 0x196b8(0x78)
	Unknown AnimGraphNode_SequencePlayer_120; // 0x19730(0x78)
	Unknown AnimGraphNode_SequencePlayer_119; // 0x197a8(0x78)
	Unknown AnimGraphNode_SequencePlayer_118; // 0x19820(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_29; // 0x19898(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_63; // 0x19958(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_62; // 0x19a38(0xe0)
	Unknown AnimGraphNode_BlendListByBool_18; // 0x19b18(0xa0)
	Unknown AnimGraphNode_BlendListByEnum_32; // 0x19bb8(0xb0)
	Unknown AnimGraphNode_BlendListByEnum_31; // 0x19c68(0xb0)
	Unknown AnimGraphNode_LayeredBoneBlend_28; // 0x19d18(0xc0)
	Unknown AnimGraphNode_BlendListByEnum_30; // 0x19dd8(0xb0)
	Unknown AnimGraphNode_BlendSpacePlayer_61; // 0x19e88(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_60; // 0x19f68(0xe0)
	Unknown AnimGraphNode_BlendListByBool_17; // 0x1a048(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_59; // 0x1a0e8(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_58; // 0x1a1c8(0xe0)
	Unknown AnimGraphNode_BlendListByBool_16; // 0x1a2a8(0xa0)
	Unknown AnimGraphNode_BlendListByEnum_29; // 0x1a348(0xb0)
	Unknown AnimGraphNode_BlendSpacePlayer_57; // 0x1a3f8(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_56; // 0x1a4d8(0xe0)
	Unknown AnimGraphNode_BlendListByBool_15; // 0x1a5b8(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_55; // 0x1a658(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_54; // 0x1a738(0xe0)
	Unknown AnimGraphNode_BlendListByBool_14; // 0x1a818(0xa0)
	Unknown AnimGraphNode_StateResult_10; // 0x1a8b8(0x30)
	Unknown AnimGraphNode_BlendSpacePlayer_53; // 0x1a8e8(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_52; // 0x1a9c8(0xe0)
	Unknown AnimGraphNode_BlendListByBool_13; // 0x1aaa8(0xa0)
	Unknown AnimGraphNode_SequencePlayer_117; // 0x1ab48(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_27; // 0x1abc0(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_51; // 0x1ac80(0xe0)
	Unknown AnimGraphNode_SequencePlayer_116; // 0x1ad60(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_26; // 0x1add8(0xc0)
	Unknown AnimGraphNode_BlendListByEnum_28; // 0x1ae98(0xb0)
	Unknown AnimGraphNode_BlendSpacePlayer_50; // 0x1af48(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_49; // 0x1b028(0xe0)
	Unknown AnimGraphNode_SequencePlayer_115; // 0x1b108(0x78)
	Unknown AnimGraphNode_SequencePlayer_114; // 0x1b180(0x78)
	Unknown AnimGraphNode_SequencePlayer_113; // 0x1b1f8(0x78)
	Unknown AnimGraphNode_SequencePlayer_112; // 0x1b270(0x78)
	Unknown AnimGraphNode_SequencePlayer_111; // 0x1b2e8(0x78)
	Unknown AnimGraphNode_BlendSpacePlayer_48; // 0x1b360(0xe0)
	Unknown AnimGraphNode_BlendListByBool_12; // 0x1b440(0xa0)
	Unknown AnimGraphNode_SequencePlayer_110; // 0x1b4e0(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_25; // 0x1b558(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_47; // 0x1b618(0xe0)
	Unknown AnimGraphNode_SequencePlayer_109; // 0x1b6f8(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_24; // 0x1b770(0xc0)
	Unknown AnimGraphNode_BlendListByEnum_27; // 0x1b830(0xb0)
	Unknown AnimGraphNode_BlendSpacePlayer_46; // 0x1b8e0(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_45; // 0x1b9c0(0xe0)
	Unknown AnimGraphNode_LayeredBoneBlend_23; // 0x1baa0(0xc0)
	Unknown AnimGraphNode_LayeredBoneBlend_22; // 0x1bb60(0xc0)
	Unknown AnimGraphNode_BlendListByEnum_26; // 0x1bc20(0xb0)
	Unknown AnimGraphNode_BlendListByEnum_25; // 0x1bcd0(0xb0)
	Unknown AnimGraphNode_BlendListByEnum_24; // 0x1bd80(0xb0)
	Unknown AnimGraphNode_BlendListByEnum_23; // 0x1be30(0xb0)
	Unknown AnimGraphNode_LayeredBoneBlend_21; // 0x1bee0(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_44; // 0x1bfa0(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_43; // 0x1c080(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_42; // 0x1c160(0xe0)
	Unknown AnimGraphNode_BlendListByEnum_22; // 0x1c240(0xb0)
	Unknown AnimGraphNode_BlendSpacePlayer_41; // 0x1c2f0(0xe0)
	Unknown AnimGraphNode_BlendListByEnum_21; // 0x1c3d0(0xb0)
	Unknown AnimGraphNode_BlendSpacePlayer_40; // 0x1c480(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_39; // 0x1c560(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_38; // 0x1c640(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_37; // 0x1c720(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_36; // 0x1c800(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_35; // 0x1c8e0(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_34; // 0x1c9c0(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_33; // 0x1caa0(0xe0)
	Unknown AnimGraphNode_ApplyAdditive_7; // 0x1cb80(0xc8)
	Unknown AnimGraphNode_ApplyAdditive_6; // 0x1cc48(0xc8)
	Unknown AnimGraphNode_BlendListByBool_11; // 0x1cd10(0xa0)
	Unknown AnimGraphNode_StateResult_9; // 0x1cdb0(0x30)
	Unknown AnimGraphNode_SequencePlayer_108; // 0x1cde0(0x78)
	Unknown AnimGraphNode_SequencePlayer_107; // 0x1ce58(0x78)
	Unknown AnimGraphNode_SequencePlayer_106; // 0x1ced0(0x78)
	Unknown AnimGraphNode_BlendListByInt_12; // 0x1cf48(0xa0)
	Unknown AnimGraphNode_SequencePlayer_105; // 0x1cfe8(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_20; // 0x1d060(0xc0)
	Unknown AnimGraphNode_SequencePlayer_104; // 0x1d120(0x78)
	Unknown AnimGraphNode_SequencePlayer_103; // 0x1d198(0x78)
	Unknown AnimGraphNode_SequencePlayer_102; // 0x1d210(0x78)
	Unknown AnimGraphNode_BlendListByBool_10; // 0x1d288(0xa0)
	Unknown AnimGraphNode_SequencePlayer_101; // 0x1d328(0x78)
	Unknown AnimGraphNode_SequencePlayer_100; // 0x1d3a0(0x78)
	Unknown AnimGraphNode_BlendListByInt_11; // 0x1d418(0xa0)
	Unknown AnimGraphNode_SequencePlayer_99; // 0x1d4b8(0x78)
	Unknown AnimGraphNode_SequencePlayer_98; // 0x1d530(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_19; // 0x1d5a8(0xc0)
	Unknown AnimGraphNode_SequencePlayer_97; // 0x1d668(0x78)
	Unknown AnimGraphNode_SequencePlayer_96; // 0x1d6e0(0x78)
	Unknown AnimGraphNode_BlendListByInt_10; // 0x1d758(0xa0)
	Unknown AnimGraphNode_SequencePlayer_95; // 0x1d7f8(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_18; // 0x1d870(0xc0)
	Unknown AnimGraphNode_SequencePlayer_94; // 0x1d930(0x78)
	Unknown AnimGraphNode_SequencePlayer_93; // 0x1d9a8(0x78)
	Unknown AnimGraphNode_BlendListByEnum_20; // 0x1da20(0xb0)
	Unknown AnimGraphNode_SequencePlayer_92; // 0x1dad0(0x78)
	Unknown AnimGraphNode_SequencePlayer_91; // 0x1db48(0x78)
	Unknown AnimGraphNode_SequencePlayer_90; // 0x1dbc0(0x78)
	Unknown AnimGraphNode_SequencePlayer_89; // 0x1dc38(0x78)
	Unknown AnimGraphNode_SequencePlayer_88; // 0x1dcb0(0x78)
	Unknown AnimGraphNode_SequencePlayer_87; // 0x1dd28(0x78)
	Unknown AnimGraphNode_BlendListByInt_9; // 0x1dda0(0xa0)
	Unknown AnimGraphNode_SequencePlayer_86; // 0x1de40(0x78)
	Unknown AnimGraphNode_SequencePlayer_85; // 0x1deb8(0x78)
	Unknown AnimGraphNode_SequencePlayer_84; // 0x1df30(0x78)
	Unknown AnimGraphNode_BlendListByInt_8; // 0x1dfa8(0xa0)
	Unknown AnimGraphNode_BlendListByInt_7; // 0x1e048(0xa0)
	Unknown AnimGraphNode_BlendListByEnum_19; // 0x1e0e8(0xb0)
	Unknown AnimGraphNode_BlendListByEnum_18; // 0x1e198(0xb0)
	Unknown AnimGraphNode_SequencePlayer_83; // 0x1e248(0x78)
	Unknown AnimGraphNode_Slot_7; // 0x1e2c0(0x48)
	Unknown AnimGraphNode_StateResult_8; // 0x1e308(0x30)
	Unknown AnimGraphNode_StateMachine_3; // 0x1e338(0xb0)
	Unknown AnimGraphNode_StateResult_7; // 0x1e3e8(0x30)
	Unknown AnimGraphNode_Slot_6; // 0x1e418(0x48)
	Unknown AnimGraphNode_TransitionResult_15; // 0x1e460(0x28)
	Unknown AnimGraphNode_TransitionResult_14; // 0x1e488(0x28)
	Unknown AnimGraphNode_TransitionResult_13; // 0x1e4b0(0x28)
	Unknown AnimGraphNode_TransitionResult_12; // 0x1e4d8(0x28)
	Unknown AnimGraphNode_TransitionResult_11; // 0x1e500(0x28)
	Unknown AnimGraphNode_TransitionResult_10; // 0x1e528(0x28)
	Unknown AnimGraphNode_TransitionResult_9; // 0x1e550(0x28)
	Unknown AnimGraphNode_TransitionResult_8; // 0x1e578(0x28)
	Unknown AnimGraphNode_TransitionResult_7; // 0x1e5a0(0x28)
	Unknown AnimGraphNode_TransitionResult_6; // 0x1e5c8(0x28)
	Unknown AnimGraphNode_TransitionResult_5; // 0x1e5f0(0x28)
	Unknown AnimGraphNode_TransitionResult_4; // 0x1e618(0x28)
	Unknown AnimGraphNode_TransitionResult_3; // 0x1e640(0x28)
	Unknown AnimGraphNode_TransitionResult_2; // 0x1e668(0x28)
	Unknown AnimGraphNode_TransitionResult; // 0x1e690(0x28)
	Unknown AnimGraphNode_SequencePlayer_82; // 0x1e6b8(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_17; // 0x1e730(0xc0)
	Unknown AnimGraphNode_SequencePlayer_81; // 0x1e7f0(0x78)
	Unknown AnimGraphNode_SequencePlayer_80; // 0x1e868(0x78)
	Unknown AnimGraphNode_BlendListByBool_9; // 0x1e8e0(0xa0)
	Unknown AnimGraphNode_SequencePlayer_79; // 0x1e980(0x78)
	Unknown AnimGraphNode_SequencePlayer_78; // 0x1e9f8(0x78)
	Unknown AnimGraphNode_SequencePlayer_77; // 0x1ea70(0x78)
	Unknown AnimGraphNode_SequencePlayer_76; // 0x1eae8(0x78)
	Unknown AnimGraphNode_SequencePlayer_75; // 0x1eb60(0x78)
	Unknown AnimGraphNode_SequencePlayer_74; // 0x1ebd8(0x78)
	Unknown AnimGraphNode_BlendListByEnum_17; // 0x1ec50(0xb0)
	Unknown AnimGraphNode_StateResult_6; // 0x1ed00(0x30)
	Unknown AnimGraphNode_SequencePlayer_73; // 0x1ed30(0x78)
	Unknown AnimGraphNode_SequencePlayer_72; // 0x1eda8(0x78)
	Unknown AnimGraphNode_SequencePlayer_71; // 0x1ee20(0x78)
	Unknown AnimGraphNode_SequencePlayer_70; // 0x1ee98(0x78)
	Unknown AnimGraphNode_SequencePlayer_69; // 0x1ef10(0x78)
	Unknown AnimGraphNode_BlendListByEnum_16; // 0x1ef88(0xb0)
	Unknown AnimGraphNode_StateResult_5; // 0x1f038(0x30)
	Unknown AnimGraphNode_SequencePlayer_68; // 0x1f068(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_16; // 0x1f0e0(0xc0)
	Unknown AnimGraphNode_BlendListByBool_8; // 0x1f1a0(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_32; // 0x1f240(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_31; // 0x1f320(0xe0)
	Unknown AnimGraphNode_SequencePlayer_67; // 0x1f400(0x78)
	Unknown AnimGraphNode_SequencePlayer_66; // 0x1f478(0x78)
	Unknown AnimGraphNode_SequencePlayer_65; // 0x1f4f0(0x78)
	Unknown AnimGraphNode_SequencePlayer_64; // 0x1f568(0x78)
	Unknown AnimGraphNode_SequencePlayer_63; // 0x1f5e0(0x78)
	Unknown AnimGraphNode_SequencePlayer_62; // 0x1f658(0x78)
	Unknown AnimGraphNode_SequencePlayer_61; // 0x1f6d0(0x78)
	Unknown AnimGraphNode_SequencePlayer_60; // 0x1f748(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_15; // 0x1f7c0(0xc0)
	Unknown AnimGraphNode_BlendListByBool_7; // 0x1f880(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_30; // 0x1f920(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_29; // 0x1fa00(0xe0)
	Unknown AnimGraphNode_BlendListByEnum_15; // 0x1fae0(0xb0)
	Unknown AnimGraphNode_BlendListByEnum_14; // 0x1fb90(0xb0)
	Unknown AnimGraphNode_BlendListByEnum_13; // 0x1fc40(0xb0)
	Unknown AnimGraphNode_LayeredBoneBlend_14; // 0x1fcf0(0xc0)
	Unknown AnimGraphNode_BlendListByBool_6; // 0x1fdb0(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_28; // 0x1fe50(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_27; // 0x1ff30(0xe0)
	Unknown AnimGraphNode_BlendListByEnum_12; // 0x20010(0xb0)
	Unknown AnimGraphNode_BlendSpacePlayer_26; // 0x200c0(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_25; // 0x201a0(0xe0)
	Unknown AnimGraphNode_BlendListByBool_5; // 0x20280(0xa0)
	Unknown AnimGraphNode_BlendListByBool_4; // 0x20320(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_24; // 0x203c0(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_23; // 0x204a0(0xe0)
	Unknown AnimGraphNode_BlendListByBool_3; // 0x20580(0xa0)
	Unknown AnimGraphNode_BlendSpacePlayer_22; // 0x20620(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_21; // 0x20700(0xe0)
	Unknown AnimGraphNode_StateResult_4; // 0x207e0(0x30)
	Unknown AnimGraphNode_SequencePlayer_59; // 0x20810(0x78)
	Unknown AnimGraphNode_SequencePlayer_58; // 0x20888(0x78)
	Unknown AnimGraphNode_TwoWayBlend_10; // 0x20900(0xc8)
	Unknown AnimGraphNode_LayeredBoneBlend_13; // 0x209c8(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_20; // 0x20a88(0xe0)
	Unknown AnimGraphNode_SequencePlayer_57; // 0x20b68(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_12; // 0x20be0(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_19; // 0x20ca0(0xe0)
	Unknown AnimGraphNode_SequencePlayer_56; // 0x20d80(0x78)
	Unknown AnimGraphNode_SequencePlayer_55; // 0x20df8(0x78)
	Unknown AnimGraphNode_SequencePlayer_54; // 0x20e70(0x78)
	Unknown AnimGraphNode_SequencePlayer_53; // 0x20ee8(0x78)
	Unknown AnimGraphNode_SequencePlayer_52; // 0x20f60(0x78)
	Unknown AnimGraphNode_SequencePlayer_51; // 0x20fd8(0x78)
	Unknown AnimGraphNode_TwoWayBlend_9; // 0x21050(0xc8)
	Unknown AnimGraphNode_SequencePlayer_50; // 0x21118(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_11; // 0x21190(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_18; // 0x21250(0xe0)
	Unknown AnimGraphNode_SequencePlayer_49; // 0x21330(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_10; // 0x213a8(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_17; // 0x21468(0xe0)
	Unknown AnimGraphNode_BlendListByBool_2; // 0x21548(0xa0)
	Unknown AnimGraphNode_SequencePlayer_48; // 0x215e8(0x78)
	Unknown AnimGraphNode_TwoWayBlend_8; // 0x21660(0xc8)
	Unknown AnimGraphNode_BlendSpacePlayer_16; // 0x21728(0xe0)
	Unknown AnimGraphNode_SequencePlayer_47; // 0x21808(0x78)
	Unknown AnimGraphNode_TwoWayBlend_7; // 0x21880(0xc8)
	Unknown AnimGraphNode_BlendSpacePlayer_15; // 0x21948(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_14; // 0x21a28(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_13; // 0x21b08(0xe0)
	Unknown AnimGraphNode_ApplyAdditive_5; // 0x21be8(0xc8)
	Unknown AnimGraphNode_ApplyAdditive_4; // 0x21cb0(0xc8)
	Unknown AnimGraphNode_BlendListByEnum_11; // 0x21d78(0xb0)
	Unknown AnimGraphNode_IdentityPose; // 0x21e28(0x18)
	Unknown AnimGraphNode_ApplyAdditive_3; // 0x21e40(0xc8)
	Unknown AnimGraphNode_SequencePlayer_46; // 0x21f08(0x78)
	Unknown AnimGraphNode_TwoWayBlend_6; // 0x21f80(0xc8)
	Unknown AnimGraphNode_SequencePlayer_45; // 0x22048(0x78)
	Unknown AnimGraphNode_SequencePlayer_44; // 0x220c0(0x78)
	Unknown AnimGraphNode_TwoWayBlend_5; // 0x22138(0xc8)
	Unknown AnimGraphNode_SequencePlayer_43; // 0x22200(0x78)
	Unknown AnimGraphNode_TwoWayBlend_4; // 0x22278(0xc8)
	Unknown AnimGraphNode_SequencePlayer_42; // 0x22340(0x78)
	Unknown AnimGraphNode_TwoWayBlend_3; // 0x223b8(0xc8)
	Unknown AnimGraphNode_SequencePlayer_41; // 0x22480(0x78)
	Unknown AnimGraphNode_TwoWayBlend_2; // 0x224f8(0xc8)
	Unknown AnimGraphNode_SequencePlayer_40; // 0x225c0(0x78)
	Unknown AnimGraphNode_TwoWayBlend; // 0x22638(0xc8)
	Unknown AnimGraphNode_BlendListByEnum_10; // 0x22700(0xb0)
	Unknown AnimGraphNode_SequencePlayer_39; // 0x227b0(0x78)
	Unknown AnimGraphNode_BlendSpacePlayer_12; // 0x22828(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_11; // 0x22908(0xe0)
	Unknown AnimGraphNode_LayeredBoneBlend_9; // 0x229e8(0xc0)
	Unknown AnimGraphNode_BlendListByEnum_9; // 0x22aa8(0xb0)
	Unknown AnimGraphNode_LayeredBoneBlend_8; // 0x22b58(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_10; // 0x22c18(0xe0)
	Unknown AnimGraphNode_LayeredBoneBlend_7; // 0x22cf8(0xc0)
	Unknown AnimGraphNode_BlendSpacePlayer_9; // 0x22db8(0xe0)
	Unknown AnimGraphNode_BlendListByEnum_8; // 0x22e98(0xb0)
	Unknown AnimGraphNode_BlendListByEnum_7; // 0x22f48(0xb0)
	Unknown AnimGraphNode_BlendSpacePlayer_8; // 0x22ff8(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_7; // 0x230d8(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_6; // 0x231b8(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_5; // 0x23298(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_4; // 0x23378(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_3; // 0x23458(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer_2; // 0x23538(0xe0)
	Unknown AnimGraphNode_BlendSpacePlayer; // 0x23618(0xe0)
	Unknown AnimGraphNode_ApplyAdditive_2; // 0x236f8(0xc8)
	Unknown AnimGraphNode_ApplyAdditive; // 0x237c0(0xc8)
	Unknown AnimGraphNode_BlendListByBool; // 0x23888(0xa0)
	Unknown AnimGraphNode_StateResult_3; // 0x23928(0x30)
	Unknown AnimGraphNode_SequencePlayer_38; // 0x23958(0x78)
	Unknown AnimGraphNode_SequencePlayer_37; // 0x239d0(0x78)
	Unknown AnimGraphNode_SequencePlayer_36; // 0x23a48(0x78)
	Unknown AnimGraphNode_SequencePlayer_35; // 0x23ac0(0x78)
	Unknown AnimGraphNode_SequencePlayer_34; // 0x23b38(0x78)
	Unknown AnimGraphNode_BlendListByInt_6; // 0x23bb0(0xa0)
	Unknown AnimGraphNode_LayeredBoneBlend_6; // 0x23c50(0xc0)
	Unknown AnimGraphNode_SequencePlayer_33; // 0x23d10(0x78)
	Unknown AnimGraphNode_SequencePlayer_32; // 0x23d88(0x78)
	Unknown AnimGraphNode_SequencePlayer_31; // 0x23e00(0x78)
	Unknown AnimGraphNode_SequencePlayer_30; // 0x23e78(0x78)
	Unknown AnimGraphNode_SequencePlayer_29; // 0x23ef0(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_5; // 0x23f68(0xc0)
	Unknown AnimGraphNode_SequencePlayer_28; // 0x24028(0x78)
	Unknown AnimGraphNode_SequencePlayer_27; // 0x240a0(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_4; // 0x24118(0xc0)
	Unknown AnimGraphNode_SequencePlayer_26; // 0x241d8(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend_3; // 0x24250(0xc0)
	Unknown AnimGraphNode_SequencePlayer_25; // 0x24310(0x78)
	Unknown AnimGraphNode_SequencePlayer_24; // 0x24388(0x78)
	Unknown AnimGraphNode_SequencePlayer_23; // 0x24400(0x78)
	Unknown AnimGraphNode_SequencePlayer_22; // 0x24478(0x78)
	Unknown AnimGraphNode_SequencePlayer_21; // 0x244f0(0x78)
	Unknown AnimGraphNode_BlendListByInt_5; // 0x24568(0xa0)
	Unknown AnimGraphNode_LayeredBoneBlend_2; // 0x24608(0xc0)
	Unknown AnimGraphNode_SequencePlayer_20; // 0x246c8(0x78)
	Unknown AnimGraphNode_SequencePlayer_19; // 0x24740(0x78)
	Unknown AnimGraphNode_SequencePlayer_18; // 0x247b8(0x78)
	Unknown AnimGraphNode_SequencePlayer_17; // 0x24830(0x78)
	Unknown AnimGraphNode_BlendListByInt_4; // 0x248a8(0xa0)
	Unknown AnimGraphNode_SequencePlayer_16; // 0x24948(0x78)
	Unknown AnimGraphNode_SequencePlayer_15; // 0x249c0(0x78)
	Unknown AnimGraphNode_SequencePlayer_14; // 0x24a38(0x78)
	Unknown AnimGraphNode_LayeredBoneBlend; // 0x24ab0(0xc0)
	Unknown AnimGraphNode_SequencePlayer_13; // 0x24b70(0x78)
	Unknown AnimGraphNode_BlendListByEnum_6; // 0x24be8(0xb0)
	Unknown AnimGraphNode_SequencePlayer_12; // 0x24c98(0x78)
	Unknown AnimGraphNode_BlendListByEnum_5; // 0x24d10(0xb0)
	Unknown AnimGraphNode_BlendListByEnum_4; // 0x24dc0(0xb0)
	Unknown AnimGraphNode_SequencePlayer_11; // 0x24e70(0x78)
	Unknown AnimGraphNode_SequencePlayer_10; // 0x24ee8(0x78)
	Unknown AnimGraphNode_SequencePlayer_9; // 0x24f60(0x78)
	Unknown AnimGraphNode_SequencePlayer_8; // 0x24fd8(0x78)
	Unknown AnimGraphNode_SequencePlayer_7; // 0x25050(0x78)
	Unknown AnimGraphNode_BlendListByInt_3; // 0x250c8(0xa0)
	Unknown AnimGraphNode_SequencePlayer_6; // 0x25168(0x78)
	Unknown AnimGraphNode_SequencePlayer_5; // 0x251e0(0x78)
	Unknown AnimGraphNode_SequencePlayer_4; // 0x25258(0x78)
	Unknown AnimGraphNode_BlendListByInt_2; // 0x252d0(0xa0)
	Unknown AnimGraphNode_SequencePlayer_3; // 0x25370(0x78)
	Unknown AnimGraphNode_SequencePlayer_2; // 0x253e8(0x78)
	Unknown AnimGraphNode_SequencePlayer; // 0x25460(0x78)
	Unknown AnimGraphNode_BlendListByInt; // 0x254d8(0xa0)
	Unknown AnimGraphNode_BlendListByEnum_3; // 0x25578(0xb0)
	Unknown AnimGraphNode_BlendListByEnum_2; // 0x25628(0xb0)
	Unknown AnimGraphNode_Slot_5; // 0x256d8(0x48)
	Unknown AnimGraphNode_StateResult_2; // 0x25720(0x30)
	Unknown AnimGraphNode_StateMachine_2; // 0x25750(0xb0)
	Unknown AnimGraphNode_StateResult; // 0x25800(0x30)
	Unknown AnimGraphNode_StateMachine; // 0x25830(0xb0)
	Unknown AnimGraphNode_SaveCachedPose_12; // 0x258e0(0xb8)
	Unknown AnimGraphNode_SaveCachedPose_11; // 0x25998(0xb8)
	Unknown AnimGraphNode_UseCachedPose_23; // 0x25a50(0x28)
	Unknown AnimGraphNode_UseCachedPose_22; // 0x25a78(0x28)
	Unknown AnimGraphNode_SaveCachedPose_10; // 0x25aa0(0xb8)
	Unknown AnimGraphNode_UseCachedPose_21; // 0x25b58(0x28)
	Unknown AnimGraphNode_UseCachedPose_20; // 0x25b80(0x28)
	Unknown AnimGraphNode_SaveCachedPose_9; // 0x25ba8(0xb8)
	Unknown AnimGraphNode_UseCachedPose_19; // 0x25c60(0x28)
	Unknown AnimGraphNode_UseCachedPose_18; // 0x25c88(0x28)
	Unknown AnimGraphNode_SaveCachedPose_8; // 0x25cb0(0xb8)
	Unknown AnimGraphNode_UseCachedPose_17; // 0x25d68(0x28)
	Unknown AnimGraphNode_UseCachedPose_16; // 0x25d90(0x28)
	Unknown AnimGraphNode_UseCachedPose_15; // 0x25db8(0x28)
	Unknown AnimGraphNode_SaveCachedPose_7; // 0x25de0(0xb8)
	Unknown AnimGraphNode_SaveCachedPose_6; // 0x25e98(0xb8)
	Unknown AnimGraphNode_UseCachedPose_14; // 0x25f50(0x28)
	Unknown AnimGraphNode_SaveCachedPose_5; // 0x25f78(0xb8)
	Unknown AnimGraphNode_UseCachedPose_13; // 0x26030(0x28)
	Unknown AnimGraphNode_UseCachedPose_12; // 0x26058(0x28)
	Unknown AnimGraphNode_SaveCachedPose_4; // 0x26080(0xb8)
	Unknown AnimGraphNode_UseCachedPose_11; // 0x26138(0x28)
	Unknown AnimGraphNode_UseCachedPose_10; // 0x26160(0x28)
	Unknown AnimGraphNode_UseCachedPose_9; // 0x26188(0x28)
	Unknown AnimGraphNode_SaveCachedPose_3; // 0x261b0(0xb8)
	Unknown AnimGraphNode_UseCachedPose_8; // 0x26268(0x28)
	Unknown AnimGraphNode_UseCachedPose_7; // 0x26290(0x28)
	Unknown AnimGraphNode_SaveCachedPose_2; // 0x262b8(0xb8)
	Unknown AnimGraphNode_UseCachedPose_6; // 0x26370(0x28)
	Unknown AnimGraphNode_UseCachedPose_5; // 0x26398(0x28)
	Unknown AnimGraphNode_Slot_4; // 0x263c0(0x48)
	Unknown AnimGraphNode_SaveCachedPose; // 0x26408(0xb8)
	Unknown AnimGraphNode_UseCachedPose_4; // 0x264c0(0x28)
	Unknown AnimGraphNode_UseCachedPose_3; // 0x264e8(0x28)
	Unknown AnimGraphNode_Slot_3; // 0x26510(0x48)
	Unknown AnimGraphNode_Slot_2; // 0x26558(0x48)
	Unknown AnimGraphNode_BlendListByEnum; // 0x265a0(0xb0)
	Unknown AnimGraphNode_UseCachedPose_2; // 0x26650(0x28)
	Unknown AnimGraphNode_UseCachedPose; // 0x26678(0x28)
	Unknown AnimGraphNode_Slot; // 0x266a0(0x48)
	Unknown StoppingAnimation; // 0x266e8(0x08)
	struct FName AdditiveLandingSlot; // 0x266f0(0x08)
	float StoppingDirection; // 0x266f8(0x04)
	Unknown CameraLagTimer; // 0x26700(0x08)
	Unknown SavedCameraArmLocation; // 0x26708(0x0c)
	Unknown TestSprinting; // 0x26714(0x01)
	Unknown FollowCamGuide; // 0x248(0x08)
	Unknown FreeCamGuide; // 0x250(0x08)
	Unknown KeyImageWidget_C_1; // 0x258(0x08)
	Unknown KeyImageWidget_C_2; // 0x260(0x08)
	Unknown KeyImageWidget_C_3; // 0x268(0x08)
	Unknown KeyImageWidget_C_4; // 0x270(0x08)
	Unknown KeyImageWidget_C_5; // 0x278(0x08)
	Unknown KeyImageWidget_C_6; // 0x280(0x08)
	Unknown KeyImageWidget_C_7; // 0x288(0x08)
	Unknown KeyImageWidget_C_8; // 0x290(0x08)
	Unknown KeyImageWidget_C_10; // 0x298(0x08)
	Unknown KeyImageWidget_C_153; // 0x2a0(0x08)
	Unknown KeyImageWidget_C_154; // 0x2a8(0x08)
	Unknown KeyImageWidget_C_155; // 0x2b0(0x08)
	Unknown KeyImageWidget_C_157; // 0x2b8(0x08)
	Unknown KeyImageWidget_C_158; // 0x2c0(0x08)
	Unknown KeyImageWidget_C_159; // 0x2c8(0x08)
	Unknown KeyImageWidget_C_160; // 0x2d0(0x08)
	Unknown KillCamGuide; // 0x2d8(0x08)
	Unknown T_Guide; // 0x2e0(0x08)
	Unknown TextBlock_1; // 0x2e8(0x08)
	Unknown TextBlock_2; // 0x2f0(0x08)
	Unknown TextBlock_4; // 0x2f8(0x08)
	Unknown TextBlock_5; // 0x300(0x08)
	Unknown TextBlock_6; // 0x308(0x08)
	Unknown TextBlock_7; // 0x310(0x08)
	Unknown TextBlock_8; // 0x318(0x08)
	Unknown TextBlock_9; // 0x320(0x08)
	Unknown TextBlock_10; // 0x328(0x08)
	Unknown TextBlock_11; // 0x330(0x08)
	Unknown TextBlock_13; // 0x338(0x08)
	Unknown TextBlock_14; // 0x340(0x08)
	Unknown TextBlock_15; // 0x348(0x08)
	Unknown TextBlock_16; // 0x350(0x08)
	Unknown TextBlock_17; // 0x358(0x08)
	Unknown WidgetSwitcher_132; // 0x360(0x08)
	struct FMulticastInlineDelegate OnPermissionsGrantedDynamicDelegate; // 0x28(0x10)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown Button_Weapon; // 0x250(0x08)
	Unknown HorizontalBox_Rarity; // 0x258(0x08)
	Unknown Image_2; // 0x260(0x08)
	Unknown Image_3; // 0x268(0x08)
	Unknown Image_4; // 0x270(0x08)
	Unknown Image_5; // 0x278(0x08)
	Unknown Image_6; // 0x280(0x08)
	Unknown Image_7; // 0x288(0x08)
	Unknown Image_8; // 0x290(0x08)
	Unknown Image_310; // 0x298(0x08)
	Unknown Image_Item_Weapon; // 0x2a0(0x08)
	Unknown Image_New; // 0x2a8(0x08)
	Unknown T_Name; // 0x2b0(0x08)
	Unknown WidgetSwitcher_Own; // 0x2b8(0x08)
	Unknown ParentWidgetRef; // 0x2c0(0x08)
	Unknown CraftingInfo; // 0x2c8(0x128)
	Unknown CraftMaterialItemIDList; // 0x3f0(0x10)
	int32_t CraftMaterialWeaponID; // 0x400(0x04)
	Unknown IsOwn; // 0x404(0x01)
	Unknown IsOwnAny; // 0x405(0x01)
	Unknown DefaultImage; // 0x408(0x08)
	Unknown PressedDefaultImage; // 0x410(0x08)
	Unknown IsNew; // 0x418(0x01)
	struct FMulticastInlineDelegate OnSuccess; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x40(0x10)
	Unknown ConversionResult; // 0x60(0x20)
	Unknown UberGraphFrame; // 0x298(0x08)
	Unknown Effect; // 0x2a0(0x08)
	Unknown Master; // 0x2a8(0x08)
	Unknown MasterOnOff; // 0x2b0(0x08)
	Unknown Music; // 0x2b8(0x08)
	Unknown ScrollBox_55; // 0x2c0(0x08)
	Unknown UI; // 0x2c8(0x08)
	Unknown VoiceChanel; // 0x2d0(0x08)
	Unknown VoiceInput; // 0x2d8(0x08)
	Unknown VoiceInputMode; // 0x2e0(0x08)
	Unknown VoiceOutput; // 0x2e8(0x08)
	Unknown ; // 0x2f0(0x08)
	Unknown ; // 0x2f8(0x08)
	Unknown ScrollBarTimer; // 0x300(0x08)
	Unknown UberGraphFrame; // 0x358(0x08)
	Unknown UberGraphFrame; // 0x310(0x08)
	Unknown WorldViewCamera; // 0x318(0x08)
	Unknown DefaultSceneRoot; // 0x320(0x08)
	float DeltaTime; // 0x328(0x04)
	Unknown bIsBackgroundScene; // 0x32c(0x01)
	Unknown UberGraphFrame; // 0x268(0x08)
	Unknown ToolTipVerticalList; // 0x270(0x08)
	int32_t JitterLatencyFrames; // 0x710(0x04)
	Unknown CableComponent; // 0x310(0x08)
	Unknown bAttachStart; // 0x4e8(0x01)
	Unknown bAttachEnd; // 0x4e9(0x01)
	Unknown AttachEndTo; // 0x4f0(0x28)
	struct FName AttachEndToSocketName; // 0x518(0x08)
	Unknown EndLocation; // 0x520(0x0c)
	float CableLength; // 0x52c(0x04)
	int32_t NumSegments; // 0x530(0x04)
	float SubstepTime; // 0x534(0x04)
	int32_t SolverIterations; // 0x538(0x04)
	Unknown bEnableStiffness; // 0x53c(0x01)
	Unknown bEnableCollision; // 0x53d(0x01)
	float CollisionFriction; // 0x540(0x04)
	Unknown CableForce; // 0x544(0x0c)
	float CableGravityScale; // 0x550(0x04)
	float CableWidth; // 0x554(0x04)
	int32_t NumSides; // 0x558(0x04)
	float TileMaterial; // 0x55c(0x04)
	Unknown UberGraphFrame; // 0x2a0(0x08)
	Unknown LevelUp; // 0x2a8(0x08)
	Unknown Blank_Skill; // 0x2b0(0x08)
	Unknown Get_SkillBG; // 0x2b8(0x08)
	Unknown IMG_CoolTime; // 0x2c0(0x08)
	Unknown IMG_PerkIcon; // 0x2c8(0x08)
	Unknown KeyImageWidget; // 0x2d0(0x08)
	Unknown Lv1; // 0x2d8(0x08)
	Unknown Lv2; // 0x2e0(0x08)
	Unknown Lv3; // 0x2e8(0x08)
	Unknown Over_CoolTime; // 0x2f0(0x08)
	Unknown T_CoolTime; // 0x2f8(0x08)
	Unknown T_PerkName; // 0x300(0x08)
	Unknown WidgetSwitcher_Icon; // 0x308(0x08)
	Unknown bHover; // 0x310(0x01)
	float CurrentExpPercent; // 0x314(0x04)
	int32_t CurrentLevel; // 0x318(0x04)
	int32_t LastLevel; // 0x31c(0x04)
	float TargetExpPercent; // 0x320(0x04)
	float ExpSpeed; // 0x324(0x04)
	Unknown PerkData; // 0x328(0xe0)
	float CurrentLevelPercent; // 0x408(0x04)
	int32_t MaxLevel; // 0x40c(0x04)
	Unknown HoverWidget; // 0x410(0x08)
	Unknown LvArray; // 0x418(0x10)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown Image; // 0x250(0x08)
	Unknown ScrollBox_99; // 0x258(0x08)
	Unknown U; // 0x260(0x08)
	Unknown U_135; // 0x268(0x08)
	Unknown U_196; // 0x270(0x08)
	Unknown TempTeamPlayers; // 0x278(0x10)
	Unknown UberGraphFrame; // 0x248(0x08)
	Unknown Ani_TutorialComplete_FadeOut; // 0x250(0x08)
	Unknown Ani_TutorialComplete; // 0x258(0x08)
	Unknown Idle; // 0x260(0x08)
	Unknown CanvasPanel_1; // 0x268(0x08)
	Unknown U; // 0x270(0x08)
	struct FMulticastInlineDelegate OnLocationChanged; // 0x28(0x10)
	Unknown bAutoEnabled; // 0x28(0x01)
	Unknown SplashDescs; // 0x30(0x10)
	Unknown bSupportsDash; // 0x40(0x01)
	Unknown bCompositesDepth; // 0x41(0x01)
	Unknown bHQDistortion; // 0x42(0x01)
	float PixelDensityMin; // 0x44(0x04)
	float PixelDensityMax; // 0x48(0x04)
	int32_t CPULevel; // 0x4c(0x04)
	int32_t GPULevel; // 0x50(0x04)
	Unknown FFRLevel; // 0x54(0x01)
	Unknown bChromaCorrection; // 0x55(0x01)
	Unknown bRecenterHMDWithController; // 0x56(0x01)
	Unknown CaptureComponents; // 0x38(0x10)
	Unknown bDeprecatedSpringOffsetMode; // 0x140(0x01)
	Unknown bReverseAsBrake; // 0x140(0x01)
	Unknown bUseRVOAvoidance; // 0x140(0x01)
	Unknown bRawHandbrakeInput; // 0x140(0x01)
	Unknown bRawGearUpInput; // 0x140(0x01)
	Unknown bRawGearDownInput; // 0x140(0x01)
	Unknown bWasAvoidanceUpdated; // 0x144(0x01)
	float Mass; // 0x148(0x04)
	Unknown WheelSetups; // 0x150(0x10)
	float DragCoefficient; // 0x160(0x04)
	float ChassisWidth; // 0x164(0x04)
	float ChassisHeight; // 0x168(0x04)
	float DragArea; // 0x16c(0x04)
	float EstimatedMaxEngineSpeed; // 0x170(0x04)
	float MaxEngineRPM; // 0x174(0x04)
	float DebugDragMagnitude; // 0x178(0x04)
	Unknown InertiaTensorScale; // 0x17c(0x0c)
	float MinNormalizedTireLoad; // 0x188(0x04)
	float MinNormalizedTireLoadFiltered; // 0x18c(0x04)
	float MaxNormalizedTireLoad; // 0x190(0x04)
	float MaxNormalizedTireLoadFiltered; // 0x194(0x04)
	float ThresholdLongitudinalSpeed; // 0x198(0x04)
	int32_t LowForwardSpeedSubStepCount; // 0x19c(0x04)
	int32_t HighForwardSpeedSubStepCount; // 0x1a0(0x04)
	Unknown Wheels; // 0x1a8(0x10)
	Unknown WheelsCollisionChannel; // 0x1b8(0x01)
	float RVOAvoidanceRadius; // 0x1d0(0x04)
	float RVOAvoidanceHeight; // 0x1d4(0x04)
	float AvoidanceConsiderationRadius; // 0x1d8(0x04)
	float RVOSteeringStep; // 0x1dc(0x04)
	float RVOThrottleStep; // 0x1e0(0x04)
	int32_t AvoidanceUID; // 0x1e4(0x04)
	Unknown AvoidanceGroup; // 0x1e8(0x04)
	Unknown GroupsToAvoid; // 0x1ec(0x04)
	Unknown GroupsToIgnore; // 0x1f0(0x04)
	float AvoidanceWeight; // 0x1f4(0x04)
	Unknown PendingLaunchVelocity; // 0x1f8(0x0c)
	Unknown ReplicatedState; // 0x204(0x14)
	float RawSteeringInput; // 0x21c(0x04)
	float RawThrottleInput; // 0x220(0x04)
	float RawBrakeInput; // 0x224(0x04)
	float SteeringInput; // 0x228(0x04)
	float ThrottleInput; // 0x22c(0x04)
	float BrakeInput; // 0x230(0x04)
	float HandbrakeInput; // 0x234(0x04)
	float IdleBrakeInput; // 0x238(0x04)
	float StopThreshold; // 0x23c(0x04)
	float WrongDirectionThreshold; // 0x240(0x04)
	Unknown ThrottleInputRate; // 0x244(0x08)
	Unknown BrakeInputRate; // 0x24c(0x08)
	Unknown HandbrakeInputRate; // 0x254(0x08)
	Unknown SteeringInputRate; // 0x25c(0x08)
	Unknown OverrideController; // 0x288(0x08)
	float FrictionScale; // 0x30(0x04)
	Unknown TireFrictionScales; // 0x38(0x10)
	Unknown WheeledVehicleMovementComponent; // 0x970(0x08)
	Unknown CollisionMesh; // 0x28(0x08)
	Unknown bDontCreateShape; // 0x30(0x01)
	Unknown bAutoAdjustCollisionSize; // 0x31(0x01)
	Unknown Offset; // 0x34(0x0c)
	float ShapeRadius; // 0x40(0x04)
	float ShapeWidth; // 0x44(0x04)
	float Mass; // 0x48(0x04)
	float DampingRate; // 0x4c(0x04)
	float SteerAngle; // 0x50(0x04)
	Unknown bAffectedByHandbrake; // 0x54(0x01)
	Unknown TireType; // 0x58(0x08)
	Unknown TireConfig; // 0x60(0x08)
	float LatStiffMaxLoad; // 0x68(0x04)
	float LatStiffValue; // 0x6c(0x04)
	float LongStiffValue; // 0x70(0x04)
	float SuspensionForceOffset; // 0x74(0x04)
	float SuspensionMaxRaise; // 0x78(0x04)
	float SuspensionMaxDrop; // 0x7c(0x04)
	float SuspensionNaturalFrequency; // 0x80(0x04)
	float SuspensionDampingRatio; // 0x84(0x04)
	Unknown SweepType; // 0x88(0x01)
	float MaxBrakeTorque; // 0x8c(0x04)
	float MaxHandBrakeTorque; // 0x90(0x04)
	Unknown VehicleSim; // 0x98(0x08)
	int32_t WheelIndex; // 0xa0(0x04)
	float DebugLongSlip; // 0xa4(0x04)
	float DebugLatSlip; // 0xa8(0x04)
	float DebugNormalizedTireLoad; // 0xac(0x04)
	float DebugWheelTorque; // 0xb4(0x04)
	float DebugLongForce; // 0xb8(0x04)
	float DebugLatForce; // 0xbc(0x04)
	Unknown Location; // 0xc0(0x0c)
	Unknown OldLocation; // 0xcc(0x0c)
	Unknown Velocity; // 0xd8(0x0c)
	Unknown Mesh; // 0x380(0x08)
	Unknown VehicleMovement; // 0x388(0x08)
	Unknown EngineSetup; // 0x290(0xa0)
	Unknown DifferentialSetup; // 0x330(0x1c)
	float AckermannAccuracy; // 0x34c(0x04)
	Unknown TransmissionSetup; // 0x350(0x30)
	Unknown SteeringCurve; // 0x380(0x88)
	Unknown EngineSetup; // 0x290(0xa0)
	Unknown TransmissionSetup; // 0x330(0x30)
	Unknown SteeringCurve; // 0x360(0x88)
	Unknown Settings; // 0x28(0x08)
	Unknown UberGraphFrame; // 0x1360(0x08)
	Unknown Complete_ani; // 0x1368(0x08)
	Unknown Searching_ani; // 0x1370(0x08)
	Unknown Blank_Skill; // 0x1378(0x08)
	Unknown Border_507; // 0x1380(0x08)
	Unknown Button_332; // 0x1388(0x08)
	Unknown Get_SkillBG; // 0x1390(0x08)
	Unknown Get_SkillBG_lv5; // 0x1398(0x08)
	Unknown Get_SkillBG_lv6; // 0x13a0(0x08)
	Unknown Get_SkillBG_lv7; // 0x13a8(0x08)
	Unknown HorizontalBox_Rarity; // 0x13b0(0x08)
	Unknown Image; // 0x13b8(0x08)
	Unknown Image_2; // 0x13c0(0x08)
	Unknown Image_3; // 0x13c8(0x08)
	Unknown Image_4; // 0x13d0(0x08)
	Unknown Image_5; // 0x13d8(0x08)
	Unknown Image_6; // 0x13e0(0x08)
	Unknown Image_7; // 0x13e8(0x08)
	Unknown Image_8; // 0x13f0(0x08)
	Unknown Image_9; // 0x13f8(0x08)
	Unknown Image_10; // 0x1400(0x08)
	Unknown Image_12; // 0x1408(0x08)
	Unknown Image_16; // 0x1410(0x08)
	Unknown Image_332; // 0x1418(0x08)
	Unknown Image_689; // 0x1420(0x08)
	Unknown Image_690; // 0x1428(0x08)
	Unknown Image_Full; // 0x1430(0x08)
	Unknown Image_Have; // 0x1438(0x08)
	Unknown Img_Active; // 0x1440(0x08)
	Unknown IMG_Complete; // 0x1448(0x08)
	Unknown IMG_ItemIcon; // 0x1450(0x08)
	Unknown MouseHover_2; // 0x1458(0x08)
	Unknown MouseHover_; // 0x1460(0x08)
	Unknown MousePress_2; // 0x1468(0x08)
	Unknown MousePress_; // 0x1470(0x08)
	Unknown MyWeapon; // 0x1478(0x08)
	Unknown Searching; // 0x1480(0x08)
	Unknown Searching_; // 0x1488(0x08)
	Unknown SizeBox_1; // 0x1490(0x08)
	Unknown SizeBox_8; // 0x1498(0x08)
	Unknown T_PerkName; // 0x14a0(0x08)
	Unknown T_PerkName_2; // 0x14a8(0x08)
	Unknown T_PerkName_3; // 0x14b0(0x08)
	Unknown T_PerkName_4; // 0x14b8(0x08)
	Unknown VerticalBox_1; // 0x14c0(0x08)
	Unknown HoverWidget; // 0x14c8(0x08)
	Unknown Selected; // 0x14d0(0x01)
	Unknown SelectItem; // 0x14d4(0x10)
	Unknown NewVar_1; // 0x14e8(0x08)
	Unknown EnableSearch; // 0x14f0(0x01)
	Unknown TempData; // 0x14f4(0x10)
	Unknown IsComplete; // 0x1504(0x01)
	int32_t AmbisonicsOrder; // 0x28(0x04)
	Unknown Presets; // 0x28(0x10)
	int32_t VoiceCount; // 0x710(0x04)
	Unknown Settings; // 0x70(0x08)
	Unknown Settings; // 0x80(0x18)
	Unknown Settings; // 0x90(0x28)
	struct FMulticastInlineDelegate OnEnvelopeFollowerUpdate; // 0xb0(0x10)
	Unknown Settings; // 0x74(0x0c)
	Unknown Settings; // 0x78(0x10)
	Unknown Settings; // 0x74(0x0c)
	Unknown Settings; // 0x74(0x0c)
	Unknown Settings; // 0x74(0x0c)
	Unknown Settings; // 0x70(0x08)
	Unknown Settings; // 0x78(0x10)
	Unknown Settings; // 0x7c(0x14)
	Unknown Settings; // 0x80(0x18)
	Unknown Settings; // 0x7c(0x14)
	Unknown Settings; // 0x70(0x08)
	Unknown ImpulseResponse; // 0x28(0x10)
	int32_t NumChannels; // 0x38(0x04)
	int32_t SampleRate; // 0x3c(0x04)
	float NormalizationVolumeDb; // 0x40(0x04)
	Unknown IRData; // 0x48(0x10)
	Unknown Settings; // 0x40(0x20)
	Unknown ImpulseResponse; // 0x60(0x08)
	Unknown BlockSize; // 0x68(0x01)
	Unknown bEnableHardwareAcceleration; // 0x69(0x01)
	Unknown Settings; // 0x74(0x0c)
	Unknown DynamicSettings; // 0x80(0x0c)
	Unknown Settings; // 0x74(0x0c)
	Unknown Settings; // 0x78(0x10)
	Unknown Settings; // 0x80(0x18)
	float ValueX; // 0x108(0x04)
	float ValueY; // 0x10c(0x04)
	struct FDelegate ValueXDelegate; // 0x110(0x10)
	struct FDelegate ValueYDelegate; // 0x120(0x10)
	Unknown WidgetStyle; // 0x130(0x2b8)
	Unknown SliderHandleColor; // 0x3e8(0x10)
	Unknown IndentHandle; // 0x3f8(0x01)
	Unknown Locked; // 0x3f9(0x01)
	float StepSize; // 0x3fc(0x04)
	Unknown IsFocusable; // 0x400(0x01)
	struct FMulticastInlineDelegate OnMouseCaptureBegin; // 0x408(0x10)
	struct FMulticastInlineDelegate OnMouseCaptureEnd; // 0x418(0x10)
	struct FMulticastInlineDelegate OnControllerCaptureBegin; // 0x428(0x10)
	struct FMulticastInlineDelegate OnControllerCaptureEnd; // 0x438(0x10)
	struct FMulticastInlineDelegate OnValueChangedX; // 0x448(0x10)
	struct FMulticastInlineDelegate OnValueChangedY; // 0x458(0x10)
	Unknown GranulatedSoundWave; // 0x710(0x08)
	struct FString PresetName; // 0x28(0x10)
	Unknown bLockKeyframesToGridBool; // 0x38(0x01)
	int32_t LockKeyframesToGrid; // 0x3c(0x04)
	int32_t WaveTableResolution; // 0x40(0x04)
	Unknown WaveTable; // 0x48(0x10)
	Unknown bNormalizeWaveTables; // 0x58(0x01)
	struct FMulticastInlineDelegate OnTableAltered; // 0x710(0x10)
	struct FMulticastInlineDelegate OnNumTablesChanged; // 0x720(0x10)
	Unknown CurrentPreset; // 0x730(0x08)
	Unknown SoundWave; // 0x710(0x08)
	struct FMulticastInlineDelegate OnSampleLoaded; // 0x718(0x10)
	struct FMulticastInlineDelegate OnSamplePlaybackProgress; // 0x728(0x10)
	float Value; // 0x108(0x04)
	float StepSize; // 0x10c(0x04)
	float MouseSpeed; // 0x110(0x04)
	float MouseFineTuneSpeed; // 0x114(0x04)
	Unknown ShowTooltipInfo; // 0x118(0x01)
	struct FText ParameterName; // 0x120(0x18)
	struct FText ParameterUnits; // 0x138(0x18)
	struct FDelegate ValueDelegate; // 0x150(0x10)
	Unknown WidgetStyle; // 0x160(0x238)
	Unknown Locked; // 0x398(0x01)
	Unknown IsFocusable; // 0x399(0x01)
	struct FMulticastInlineDelegate OnMouseCaptureBegin; // 0x3a0(0x10)
	struct FMulticastInlineDelegate OnMouseCaptureEnd; // 0x3b0(0x10)
	struct FMulticastInlineDelegate OnControllerCaptureBegin; // 0x3c0(0x10)
	struct FMulticastInlineDelegate OnControllerCaptureEnd; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnValueChanged; // 0x3e0(0x10)
	struct FString Ambience; // 0x348(0x10)
	int32_t Priority; // 0x358(0x04)
	Unknown Sound; // 0x30(0x08)
	float VolumeMultiplier; // 0x38(0x04)
	float PitchMultiplier; // 0x3c(0x04)
	Unknown bFollow; // 0x40(0x01)
	struct FName AttachName; // 0x44(0x08)
	Unknown bFriendlyFire; // 0x3fc(0x01)
	Unknown PoolingActorComponent; // 0x400(0x08)
	Unknown MapDataTableHandle; // 0x408(0x10)
	Unknown PCReceivedPlayerInfos; // 0x418(0x50)
	Unknown TestAIControllerClass; // 0x468(0x08)
	Unknown UsingOuterBlueZone; // 0x4e1(0x01)
	struct FName SelectedPlayZoneName; // 0x4e4(0x08)
	Unknown BlueZoneClass; // 0x4f0(0x08)
	struct FString CQRType; // 0x4f8(0x10)
	Unknown BlueZone; // 0x570(0x08)
	Unknown RemovePendingPlayerArray; // 0x578(0x10)
	Unknown GameViewType; // 0x588(0x01)
	Unknown MatchingType; // 0x589(0x01)
	int32_t TeamSize; // 0x58c(0x04)
	struct FString Training; // 0x590(0x10)
	int32_t AIGrade; // 0x5a0(0x04)
	struct FMulticastInlineDelegate UpdateSurvivalCircleDelegate; // 0x5a8(0x10)
	Unknown TeamInfoMap; // 0x5f0(0x50)
	Unknown WinnerTeamIndex; // 0x640(0x01)
	Unknown SendPlayerEndedEvent; // 0x648(0x10)
	Unknown SendPlayerRankedEvent; // 0x658(0x10)
	Unknown AircraftViewPawnClass; // 0x680(0x08)
	Unknown AircraftFlightPawnClass; // 0x688(0x08)
	Unknown bAutoStart; // 0x690(0x01)
	float StartingPlayerCountRate; // 0x694(0x04)
	int32_t WaitingTime; // 0x698(0x04)
	int32_t ReadyTime; // 0x69c(0x04)
	int32_t DescentDelay; // 0x6a0(0x04)
	int32_t DescentableTime; // 0x6a4(0x04)
	Unknown AircraftFlight; // 0x6a8(0x08)
	Unknown bIsUseAircraft; // 0x6b0(0x01)
	Unknown bUseAircraftViewPawn; // 0x6c5(0x01)
	Unknown bEndlessGame; // 0x6c6(0x01)
	Unknown DamageInfoArray; // 0x6e0(0x10)
	Unknown RedZoneManagerClass; // 0x6f8(0x08)
	Unknown RedZoneManager; // 0x700(0x08)
	Unknown PersonalSupplyBoxManagerC; // 0x788(0x08)
	Unknown PersonalSupplyBoxManager; // 0x790(0x08)
	Unknown DivisionItemCountResult; // 0x798(0x10)
	Unknown DisivisonComplete; // 0x7a8(0x01)
	Unknown StandardGroupKeyCountInfo; // 0x990(0x58)
	Unknown AreaSpawnRateList; // 0x9e8(0x50)
	Unknown BlueZoneSpawnRateInfo; // 0xa38(0x88)
	struct FName BlueZoneSpawnRateKey; // 0xac0(0x08)
	Unknown NoneData; // 0xac8(0x88)
	Unknown VehicleAreaSpawnRateList; // 0xb50(0x50)
	Unknown VehicleBlueZoneSpawnRateInfo; // 0xba0(0x78)
	struct FName VehicleBlueZoneSpawnRateKey; // 0xc18(0x08)
	Unknown NoneVehicleData; // 0xc20(0x78)
	Unknown CustomBlueZoneSpawnRateInfo; // 0xc98(0x28)
	Unknown CustomAreaSpawnRateList; // 0xcc0(0x50)
	Unknown CustomVehicleBlueZoneSpawnRateInfo; // 0xd10(0x28)
	Unknown CustomVehicleAreaSpawnRateList; // 0xd38(0x50)
	float ItemDivisionDelay; // 0xd90(0x04)
	Unknown UsingWorldItemSpawnTalbeInBlueZone; // 0xd94(0x01)
	Unknown ItemSpawnIn; // 0xd95(0x01)
	Unknown UnlimitItemSpawnCnt; // 0xd96(0x01)
	int32_t MaxItemDivisionCountAtOnce; // 0xd98(0x04)
	Unknown ItemDivisionLevelLoadComplet; // 0xd9c(0x01)
	Unknown ItemDivisionGameReady; // 0xd9d(0x01)
	Unknown UsingMaxPickUpItemSpawnCount; // 0xd9e(0x01)
	int32_t MaxPickUpItemSpawnCount; // 0xda0(0x04)
	Unknown UsingMaxVehicleSpawnCount; // 0xda4(0x01)
	int32_t MaxVehicleSpawnCount; // 0xda8(0x04)
	int32_t MaxPickUpVehicleSpawnCount; // 0xdac(0x04)
	Unknown UsingDynamicMaxPickUpItemSpawnCount; // 0xdb0(0x01)
	Unknown ItemSpawnLimitInfo; // 0xdb4(0x14)
	Unknown GCRecordData; // 0xdc8(0x01)
	struct FString GCRecordDataTitle; // 0xdd0(0x10)
	Unknown RecordBuildingData; // 0xde0(0x01)
	Unknown RecordPersonalSupplyBoxData; // 0xde1(0x01)
	Unknown ItemSpawnRateCurve; // 0xde8(0x08)
	Unknown VehicleSpawnRateCurve; // 0xdf0(0x08)
	int32_t CurrentSpawnVehicleCount; // 0xdf8(0x04)
	int32_t CurrentDivisionItemCount; // 0xdfc(0x04)
	Unknown CheckCharacters; // 0xe18(0x10)
	Unknown LoadCompleteList; // 0xe38(0x10)
	Unknown AutoBotIds; // 0xe50(0x10)
	Unknown AutoBotInfoSendIDList; // 0xe60(0x10)
	float MatchingTimeout; // 0x3f8(0x04)
	Unknown PlayerPawnList; // 0x400(0x10)
	Unknown CustomizeCharacter; // 0x410(0x08)
	Unknown RankingCharacter; // 0x418(0x08)
	Unknown AppearingMotionCharacter; // 0x420(0x08)
	Unknown Loading_TimerHandle; // 0x538(0x08)
	Unknown PartyInfo_TimerHandle; // 0x540(0x08)
	Unknown Ping_TimerHandle; // 0x548(0x08)
	Unknown GeeGeeLoginToken_TimerHandle; // 0x550(0x08)
	Unknown SteamLoginToken_TimerHandle; // 0x558(0x08)
	Unknown AveragePingRequest_TimerHandle; // 0x560(0x08)
	Unknown DuplicatedReconnectTimeout_TimerHandle; // 0x568(0x08)
	struct FMulticastInlineDelegate OnLoginSucceeded; // 0x578(0x10)
	struct FMulticastInlineDelegate OnLoginNotify; // 0x588(0x10)
	struct FMulticastInlineDelegate OnLoginFailed; // 0x598(0x10)
	struct FMulticastInlineDelegate OnMatchingPending; // 0x5a8(0x10)
	struct FMulticastInlineDelegate OnMatchingStarted; // 0x5b8(0x10)
	struct FMulticastInlineDelegate OnMatchingSucceeded; // 0x5c8(0x10)
	struct FMulticastInlineDelegate OnMatchingFailed; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnPartyInvited; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnPartyInfoChanged; // 0x5f8(0x10)
	struct FMulticastInlineDelegate OnPartyMemberInfoChanged; // 0x608(0x10)
	struct FMulticastInlineDelegate OnMatchingSettingsChanged; // 0x618(0x10)
	struct FMulticastInlineDelegate OnCreateCharacter; // 0x628(0x10)
	Unknown MatchWinnerTeam; // 0x380(0x01)
	Unknown WinnerPlayerState; // 0x388(0x08)
	int32_t TimeRemaining; // 0x390(0x04)
	struct FName CurrentSeasonID; // 0x394(0x08)
	int32_t PerkMode; // 0x39c(0x04)
	int32_t RecipeMode; // 0x3a0(0x04)
	int32_t MaxPerkCount; // 0x3a4(0x04)
	int32_t OverrideUltimateLev; // 0x3a8(0x04)
	Unknown PerkClassNumCap; // 0x3b0(0x50)
	Unknown PerkClassWeightModifier; // 0x400(0x50)
	Unknown PerkClassBlock; // 0x450(0x10)
	Unknown bBlockSpawnVehicle; // 0x460(0x01)
	Unknown bBlockRedZone; // 0x461(0x01)
	Unknown PerkLevelUpAllUserSame; // 0x462(0x01)
	struct FString CQRKey; // 0x468(0x10)
	Unknown GameViewType; // 0x478(0x01)
	Unknown MatchingType; // 0x479(0x01)
	struct FName ExpertWeaponTableID; // 0x47c(0x08)
	int32_t PersonalSupplyBoxPositionType; // 0x484(0x04)
	Unknown NoDelaySpawnPersonalSupplyBox; // 0x488(0x01)
	Unknown MustSpawnPersonalSupplyBox; // 0x489(0x01)
	int32_t RetiredPlayerCount; // 0x48c(0x04)
	Unknown UniqueIDPlayerStates; // 0x490(0x50)
	Unknown MatchID; // 0x4e0(0x10)
	struct FString GameServerID; // 0x4f0(0x10)
	Unknown DefaultClassSelectInfo; // 0x510(0x28)
	Unknown DefaultClassChangeInfo; // 0x538(0x48)
	Unknown CurrentGameSettingInfo; // 0x580(0x88)
	Unknown IsUsingOuterAreaBlueZone; // 0x608(0x01)
	Unknown BlueZone; // 0x610(0x08)
	struct FMulticastInlineDelegate OnBlueZoneDelegate; // 0x618(0x10)
	struct FMulticastInlineDelegate OnChangePerkModeDelegate; // 0x628(0x10)
	float RecoilModifier_AR; // 0x654(0x04)
	float RecoilModifier_SMG; // 0x658(0x04)
	float RecoilModifier_SG; // 0x65c(0x04)
	float RecoilModifier_DMR; // 0x660(0x04)
	float RecoilModifier_SR; // 0x664(0x04)
	Unknown IsNewItemSpawnMode; // 0x668(0x01)
	int32_t TeamSize; // 0x66c(0x04)
	Unknown GameRule; // 0x670(0x01)
	Unknown BattleRoyaleState; // 0x671(0x01)
	int32_t TotalPlayerCount; // 0x674(0x04)
	int32_t TotalAIPlayerCount; // 0x678(0x04)
	int32_t CurrentPlayerCount; // 0x67c(0x04)
	int32_t CurrentTeamCount; // 0x680(0x04)
	int32_t TotalTeamCount; // 0x684(0x04)
	struct FMulticastInlineDelegate OnBattleRoyalStateChanged; // 0x688(0x10)
	struct FMulticastInlineDelegate OnRocketLaunch; // 0x698(0x10)
	struct FMulticastInlineDelegate OnItemSpawnModeChanged; // 0x6a8(0x10)
	struct FMulticastInlineDelegate OnChangeRemainTime; // 0x6b8(0x10)
	Unknown bCheckSeaLevelZ; // 0x6c8(0x01)
	float SeaLevelZ; // 0x6cc(0x04)
	int32_t GhostPlayerCountForTest; // 0x6d4(0x04)
	struct FMulticastInlineDelegate OnRepTeamSize; // 0x6d8(0x10)
	Unknown CharacterDiedInfos; // 0x6e8(0x10)
	Unknown TeamEndInfos; // 0x6f8(0x10)
	Unknown AirCraftBoardingInfos; // 0x708(0x10)
	Unknown redzone; // 0x718(0x08)
	Unknown RedZoneManager; // 0x720(0x08)
	struct FMulticastInlineDelegate AirCraftDescentPlayerInfoEvent; // 0x780(0x10)
	struct FMulticastInlineDelegate EndAirCraft; // 0x790(0x10)
	Unknown AircraftFlightRef; // 0x7a0(0x08)
	struct FMulticastInlineDelegate OnRepCurrentPlayerCount; // 0x7a8(0x10)
	struct FMulticastInlineDelegate OnRepCurrentTeamCount; // 0x7b8(0x10)
	struct FMulticastInlineDelegate OnUpdateClassCount; // 0x7c8(0x10)
	Unknown RestoreList; // 0x7d8(0x10)
	Unknown TimerHandle_MoveToLobbyLevel; // 0x7f0(0x08)
	Unknown CurrentClassCounts; // 0x7f8(0x50)
	int32_t AutoBotCount; // 0x848(0x04)
	Unknown NeedInit; // 0x310(0x01)
	Unknown RootBoxComponent; // 0x320(0x08)
	Unknown InteractiveSphereComponent; // 0x328(0x08)
	Unknown InteractiveCancleSphereComponent; // 0x330(0x08)
	struct FName BoxName; // 0x338(0x08)
	Unknown RelatedPlayerIds; // 0x340(0x10)
	Unknown CurrentStateType; // 0x359(0x01)
	Unknown CheckRePosition; // 0x35a(0x01)
	Unknown TimeHandle_CheckRePosition; // 0x360(0x08)
	int32_t CustomIndex; // 0x368(0x04)
	Unknown TraceLand; // 0x36c(0x01)
	Unknown TimerHandle_Destroy; // 0x370(0x08)
	Unknown RootType; // 0x310(0x01)
	Unknown RootBoxComponent; // 0x318(0x08)
	Unknown InventoryComponent; // 0x320(0x08)
	Unknown InteractiveSphereComponent; // 0x328(0x08)
	Unknown InteractiveCancleSphereComponent; // 0x330(0x08)
	struct FName DropperNickName; // 0x338(0x08)
	struct FName BoxName; // 0x340(0x08)
	int32_t RarityIndex; // 0x348(0x04)
	Unknown DetectedCharacter; // 0x350(0x08)
	int32_t playerGUID; // 0x390(0x04)
	Unknown SupplyBoxClass; // 0x310(0x08)
	Unknown ListPhaseInfo; // 0x318(0x10)
	int32_t CurrentPhaseNum; // 0x328(0x04)
	Unknown ListUsableSupplyBox; // 0x330(0x10)
	Unknown MapSupplyBox; // 0x340(0x50)
	struct FName TestRandomTableID; // 0x390(0x08)
	Unknown UseTestRandom; // 0x398(0x01)
	Unknown SpawnedSupplyBoxList; // 0x3b0(0x10)
	Unknown ForceSpawnedSupplyBoxList; // 0x3c0(0x10)
	Unknown AudioComponent; // 0x30e8(0x08)
	Unknown CameraBase; // 0x2e40(0x08)
	Unknown CameraAssistant3P; // 0x1390(0x08)
	Unknown Camera3P; // 0x908(0x08)
	Unknown CharacterBackLight; // 0x1e28(0x08)
	Unknown CharacterBackLightSecond; // 0x36a8(0x08)
	float BackLightIntensity_FPP; // 0x3768(0x04)
	float BackLightIntensity_ADS; // 0x36d8(0x04)
	Unknown BuffParticleComponents; // 0x24b8(0x10)
	Unknown MutableComponent; // 0x24f8(0x08)
	Unknown InteractiveSphereComponent; // 0x1a70(0x08)
	Unknown InteractiveCancleSphereComponent; // 0x29b0(0x08)
	Unknown Parachute; // 0x2718(0x08)
	Unknown WaterParticleSystem; // 0x3830(0x08)
	Unknown FlameDamageParticleComponent; // 0x3720(0x08)
	Unknown FlameDamageParticle; // 0x36c0(0x08)
	Unknown STMComponent; // 0x2d60(0x08)
	Unknown ActionComponent; // 0xb58(0x08)
	Unknown PerkComponent; // 0x1f80(0x08)
	Unknown TeamInfoUpdaterComponentRef; // 0x10e8(0x08)
	Unknown TimeHandle_MolotovDotDamage; // 0xb90(0x08)
	Unknown Stand_FlameDotDamageAnim; // 0xee8(0x10)
	Unknown Prone_FlameDotDamageAnim; // 0x850(0x10)
	Unknown FlameDamageInfos; // 0x2820(0x10)
	struct FString NPCNickName; // 0x1f60(0x10)
	Unknown bAllowToggleCamera; // 0x1730(0x01)
	Unknown bThirdPerson; // 0x1d18(0x01)
	float SprintingMoveRightModifier; // 0x11e0(0x04)
	float LeanValue; // 0x1168(0x04)
	float LeanDegreeMax; // 0x2ca4(0x04)
	float LeanUpdateSpeed; // 0x12bc(0x04)
	Unknown SaveLeanState; // 0x29c4(0x01)
	Unknown PrevLeanState; // 0x1684(0x01)
	Unknown bFixLeanDegreeMax; // 0x20e0(0x01)
	Unknown bFixFPPFoV; // 0x161c(0x01)
	float Health; // 0x10e0(0x04)
	float ShortTimeHealth; // 0x12f0(0x04)
	float TargetHealth; // 0x2d18(0x04)
	float BandageTargetHealth; // 0x11c8(0x04)
	float OverHealHealth; // 0xa80(0x04)
	Unknown PP_Preset_ShortHealth; // 0x9a8(0x08)
	Unknown PPInst_ShortHealth; // 0x2010(0x08)
	Unknown TargetHealthMap; // 0x2040(0x50)
	float Oxygen; // 0x3208(0x04)
	float SteadyPoint; // 0x14b0(0x04)
	int8_t BoostPercent; // 0xd50(0x01)
	float Default3PFOV; // 0x3708(0x04)
	float Default3PFOV_AOS; // 0x2784(0x04)
	float Default3PFOV_AMP; // 0xa94(0x04)
	float Default3PFOV_HeartBeatSensor; // 0xca8(0x04)
	float Default3PFOV_SkillMAP; // 0x16f8(0x04)
	float ForwardAxisValue; // 0x36b8(0x04)
	float RightAxisValue; // 0x2250(0x04)
	float InputMovementAttenuationTime; // 0x281c(0x04)
	float InputMovementAttenuationTimeIdleToCrouch; // 0x30d0(0x04)
	float InputMovementAttenuationTimeIdleToProne; // 0xc98(0x04)
	float InputMovementAttenuationTimeProneToIdle; // 0xe30(0x04)
	float InputMovementAttenuationValueIdleToCrouch; // 0x9b8(0x04)
	float InputMovementAttenuationValueIdleToProne; // 0x1524(0x04)
	float InputMovementAttenuationValuePr; // 0x20d0(0x04)
	float InputMovementAttenuationValue; // 0xf2c(0x04)
	Unknown bMovementKeyPushed; // 0x29a8(0x01)
	Unknown bLastMovementKeyPushed; // 0xb20(0x01)
	Unknown bMovementInputLock; // 0x27d9(0x01)
	Unknown InputAxisOnLockMovement; // 0x3358(0x08)
	Unknown bInputKeyJump; // 0x27ed(0x01)
	float DoubleTapDelay_ToggleLean; // 0x2b0c(0x04)
	Unknown bShouldSprint; // 0x1d08(0x01)
	Unknown FireTypeComplete; // 0x21b8(0x01)
	Unknown PerBoneDamageTable; // 0x3738(0x08)
	Unknown MeleeDamageTable; // 0x2cf0(0x08)
	Unknown PistolsDamageTable; // 0x1ae8(0x08)
	Unknown ShotgunsDamageTable; // 0x2848(0x08)
	Unknown SMGsDamageTable; // 0x1718(0x08)
	Unknown ARsDamageTable; // 0x1460(0x08)
	Unknown DMRsDamageTable; // 0xdc8(0x08)
	Unknown SRsDamageTable; // 0x3668(0x08)
	Unknown BrokenHelmetClass; // 0xbd0(0x08)
	Unknown bNeedToSpawnBrokenEquipment; // 0x1ac8(0x01)
	float BrokenEquipmentLevel; // 0x1064(0x04)
	Unknown BrokenEquipmentDamagedDirection; // 0x253c(0x0c)
	Unknown BrokenEquipmentType; // 0x21d8(0x01)
	Unknown InteractionType; // 0x3499(0x01)
	float InteractionTraceDistance; // 0x2fa4(0x04)
	Unknown DetectedInteractionActor; // 0xca0(0x08)
	Unknown DetectedInteractionComponet; // 0x26d8(0x08)
	Unknown DetectedVehicleSeatComponent; // 0x1fa0(0x08)
	Unknown DetectedInteractionCancleActors; // 0x2520(0x10)
	Unknown InteractionDistRatioMap; // 0x1318(0x50)
	float ResurrectionCameraBlendTime; // 0x31a0(0x04)
	Unknown PostProcessResurrectionClass; // 0x1458(0x08)
	Unknown ResurrectionEffectCurve; // 0x13a8(0x08)
	Unknown ResurrectionMaterialController; // 0x3368(0x10)
	Unknown DetectedPickableItem; // 0x11d0(0x08)
	Unknown DetectedItemList; // 0x2490(0x10)
	Unknown DetectedBoxList; // 0x1050(0x10)
	Unknown DetectedStealableList; // 0x26b0(0x10)
	Unknown DetectedItemHideList; // 0x8d8(0x10)
	Unknown TimerHandle_CheckDetectedItemList; // 0xf38(0x08)
	Unknown InventoryComponent; // 0x1dd8(0x08)
	Unknown AbilityComponent; // 0x1440(0x08)
	Unknown DoorComponent; // 0x13e0(0x08)
	Unknown ParkourComponent; // 0x1ba8(0x08)
	Unknown BlueZoneGameRule; // 0x2008(0x08)
	Unknown VoiceComponent; // 0x2440(0x08)
	Unknown LadderComponent; // 0xf78(0x08)
	Unknown StationaryCharInfo; // 0xb98(0x08)
	Unknown CharacterReplication; // 0x2278(0x08)
	Unknown CombineAnim_Stand; // 0x8b8(0x10)
	Unknown CombineAnim_Prone; // 0x3810(0x10)
	Unknown RepairAnim_Stand; // 0x2cf8(0x10)
	Unknown RepairAnim_Prone; // 0x21a0(0x10)
	Unknown CurrentPickupMontage; // 0x1188(0x08)
	Unknown PickUpAnim_Unarmed_Floor; // 0x25f8(0x10)
	Unknown PickUpAnim_Unarmed_Table; // 0x2ed8(0x10)
	Unknown PickUpAnim_Unarmed_Crouch; // 0x3240(0x10)
	Unknown PickUpAnim_Unarmed_Prone; // 0x2990(0x10)
	Unknown PickUpAnim_Rifle_Floor; // 0x1070(0x10)
	Unknown PickUpAnim_Rifle_Table; // 0x2b88(0x10)
	Unknown PickUpAnim_Rifle_Crouch; // 0x25d8(0x10)
	Unknown PickUpAnim_Rifle_Prone; // 0x31a8(0x10)
	Unknown PickUpAnim_Pistol_Floor; // 0x2c20(0x10)
	Unknown PickUpAnim_Pistol_Table; // 0x3110(0x10)
	Unknown PickUpAnim_Pistol_Crouch; // 0x2168(0x10)
	Unknown PickUpAnim_Pistol_Prone; // 0xe20(0x10)
	Unknown DoorAnim_Open; // 0x10f0(0x10)
	Unknown DoorAnim_Close; // 0x1590(0x10)
	Unknown DoorAnim_Kick; // 0x2a48(0x10)
	Unknown MovementAnim_GetUpFromBack; // 0x14f0(0x10)
	Unknown MovementAnim_GetUpFromFront; // 0x33c8(0x10)
	Unknown ConditionAnim_ShakeOut_Unarmed; // 0x2d78(0x10)
	Unknown ConditionAnim_ShakeOut_Rifle; // 0x19d0(0x10)
	Unknown MeleeAnim_Punch_Idle; // 0x2ef8(0x10)
	Unknown MeleeAnim_Punch_Crouch; // 0x3758(0x10)
	Unknown MeleeAnim_Punch_Jump; // 0x3560(0x10)
	Unknown MeleeAnim_Rifle_Idle; // 0x21c0(0x10)
	Unknown MeleeAnim_Rifle_Crouch; // 0x3268(0x10)
	Unknown MeleeAnim_Pistol_Idle; // 0x2d28(0x10)
	Unknown MeleeAnim_Pistol_Crouch; // 0x1408(0x10)
	Unknown DeathAnim_Crouch; // 0x2790(0x10)
	Unknown DeathAnim_FlameDamage; // 0x7c8(0x10)
	Unknown DeathAnim_Grenade; // 0xd58(0x10)
	Unknown DeathAnim_HeadShot; // 0x15d8(0x10)
	Unknown DeathAnim_Natural; // 0x1b90(0x10)
	Unknown DeathAnim_Rifle; // 0x1570(0x10)
	Unknown DeathAnim_Shotgun; // 0x2468(0x10)
	Unknown DeathAnim_Sprint; // 0x890(0x10)
	Unknown DeathAnim_Falling; // 0xc28(0x10)
	Unknown DeathAnim_ClosedEyes; // 0x1d00(0x08)
	Unknown PickUpStartEvent; // 0x2d68(0x08)
	Unknown PickUpBackpackEvent; // 0x10d8(0x08)
	Unknown EquipAnim_MainWeapon1; // 0x26c8(0x10)
	Unknown EquipAnim_MainWeapon1_Prone; // 0x2240(0x10)
	Unknown EquipAnim_MainWeapon2; // 0x2a80(0x10)
	Unknown EquipAnim_MainWeapon2_Prone; // 0x37b8(0x10)
	Unknown EquipAnim_SubWeapon; // 0x2e48(0x10)
	Unknown EquipAnim_SubWeapon_Prone; // 0x2680(0x10)
	Unknown EquipAnim_Melee; // 0x1f70(0x10)
	Unknown EquipAnim_Melee_Prone; // 0x1430(0x10)
	Unknown EquipAnim_Amplifier; // 0x1b58(0x10)
	Unknown EquipAnim_Amplifier_Prone; // 0x2310(0x10)
	Unknown EquipAnim_HeartBeatSensor; // 0x33e8(0x10)
	Unknown EquipAnim_HeartBeatSensor_Prone; // 0x1ad0(0x10)
	Unknown SlidingAnim; // 0x8c8(0x10)
	Unknown RollingAnim; // 0xb40(0x10)
	Unknown KnockbackRollingAnim; // 0xa18(0x10)
	Unknown EquipAnim_ThrowingWeapon; // 0x3740(0x10)
	Unknown EquipAnim_Prone_ThrowingWeapon; // 0x10c8(0x10)
	Unknown UnequipAnim_MainWeapon1; // 0x1398(0x10)
	Unknown UnequipAnim_MainWeapon1_Prone; // 0x1858(0x10)
	Unknown UnequipAnim_MainWeapon2; // 0x35b0(0x10)
	Unknown UnequipAnim_MainWeapon2_Prone; // 0xb00(0x10)
	Unknown UnequipAnim_SubWeapon; // 0x868(0x10)
	Unknown UnequipAnim_SubWeapon_Prone; // 0x2f18(0x10)
	Unknown UnequipAnim_Melee; // 0x2018(0x10)
	Unknown UnequipAnim_Melee_Prone; // 0x1380(0x10)
	Unknown UnequipAnim_Amplifier; // 0x2830(0x10)
	Unknown UnequipAnim_Amplifier_Prone; // 0x1c90(0x10)
	Unknown UnequipAnim_HeartBeatSensor; // 0x3190(0x10)
	Unknown UnequipAnim_HeartBeatSensor_Prone; // 0x1bd8(0x10)
	Unknown UnequipAnim_ThrowingWeapon; // 0x29e8(0x10)
	Unknown UnequipAnim_Prone_ThrowingWeapon; // 0x20e8(0x10)
	Unknown LandingAnim_LandStop; // 0x13b8(0x10)
	Unknown LandingAnim_Parachute; // 0x3778(0x10)
	Unknown LandingAnim_Unarmed; // 0x20a0(0x10)
	Unknown LandingAnim_Rifle; // 0x2ae8(0x10)
	Unknown LandingAnim_Pistol; // 0x11a8(0x10)
	Unknown ResuscitationAnimSets; // 0xc08(0x10)
	Unknown WeaponEquipEvents; // 0x2b58(0x10)
	Unknown AttachmentEquipEvents; // 0x32c0(0x10)
	Unknown WearableEquipEvents; // 0x37a0(0x10)
	Unknown ConsumablesEvents; // 0x1128(0x10)
	Unknown MedipackUseEvent; // 0x24d0(0x08)
	Unknown ItemDropEvent; // 0xe40(0x08)
	Unknown ADSEnterEvent; // 0x2090(0x08)
	Unknown ADSEnterEvent_Digital; // 0xb80(0x08)
	Unknown ADSExitEvent; // 0x2610(0x08)
	Unknown ADSExitEvent_Digital; // 0x32e0(0x08)
	Unknown AOSEnterEvent; // 0x3a38(0x08)
	Unknown AOSExitEvent; // 0x37d8(0x08)
	Unknown AMPEnterEvent; // 0x3730(0x08)
	Unknown AMPExitEvent; // 0x3920(0x08)
	Unknown AMPNoiseEvent; // 0xaa8(0x08)
	Unknown AMPNoiseStopEvent; // 0x1090(0x08)
	Unknown PlosiveSoundDetection3LvEvent; // 0x1a50(0x08)
	Unknown HeartBeatSensorEnterEvent; // 0x1138(0x08)
	Unknown HeartBeatSensorExitEvent; // 0x1f48(0x08)
	Unknown HeartBeatSensorNoiseEvent; // 0x3018(0x08)
	Unknown HeartBeatSensorNoiseStopEvent; // 0x22e0(0x08)
	Unknown DamagedEvent; // 0x36d0(0x08)
	Unknown HitEvent; // 0x31c8(0x08)
	Unknown SnowAreaEnteringEvent; // 0x1220(0x08)
	Unknown UltimateSprintEvent; // 0x33b0(0x08)
	Unknown bIsParachuteLanding; // 0x36f0(0x01)
	float ParachuteLandingHeight; // 0x81c(0x04)
	Unknown StartDescendingEvent; // 0x3a18(0x08)
	Unknown ParachuteFoldEvent; // 0x20c8(0x08)
	Unknown TimerHandle_Sequnce; // 0x3028(0x08)
	Unknown TeamPosition; // 0xef8(0x08)
	float AdditionalTeamPositionWidgetHeight; // 0x2648(0x04)
	float TeamPositionWidgetInterpSpeed; // 0x2780(0x04)
	float CurrentTeamPositionHeight; // 0x31ec(0x04)
	struct FMulticastInlineDelegate OnChangeDetectedItems; // 0x1880(0x10)
	Unknown bIsArmedBeforeAction; // 0x2ca0(0x01)
	struct FMulticastInlineDelegate Delegate_OnViewCameraInWater; // 0x23e8(0x10)
	struct FMulticastInlineDelegate Delegate_OnViewCameraOutWater; // 0x3178(0x10)
	Unknown bInSmoke; // 0x2a32(0x01)
	struct FMulticastInlineDelegate Delegate_OnInSmoke; // 0xc38(0x10)
	struct FMulticastInlineDelegate Delegate_OnOutSmoke; // 0x30f0(0x10)
	Unknown SmokeActors; // 0x1f88(0x10)
	Unknown SwimDiveEvent; // 0x1110(0x08)
	Unknown bIsEnterIndoorVolume; // 0x1af4(0x01)
	Unknown SkyLightRef; // 0x8a8(0x08)
	float PrevSkyLightIntensityCache; // 0x22d4(0x04)
	Unknown PrevSkyLightOcclusionTintCache; // 0x36b4(0x04)
	float SkyLightCurrentPriority; // 0x3168(0x04)
	Unknown OverlappedInDoorVolumes; // 0x2df8(0x10)
	Unknown LastSteppedSurface; // 0x1c80(0x08)
	Unknown SurfaceType; // 0x2428(0x01)
	Unknown SurfaceType_LastTick; // 0x344c(0x01)
	float MP_SnowInterpSpeed; // 0xd88(0x04)
	Unknown TimerHandle_BreathEffect; // 0x21d0(0x08)
	Unknown BreathParticleComponent; // 0x1d70(0x08)
	Unknown BreathParticle_Idle; // 0xd30(0x08)
	Unknown BreathParticle_Moving; // 0x37e0(0x08)
	Unknown InWaterParticle; // 0x2700(0x08)
	struct FMulticastInlineDelegate OnUpdateMutableDelegate; // 0x2d88(0x10)
	Unknown OverlapWaterVolume; // 0x3578(0x08)
	Unknown bIsMelee; // 0xd78(0x01)
	Unknown bIsMeleeJumpAttack; // 0x994(0x01)
	Unknown bCanJumpMeleeAttack; // 0xd10(0x01)
	Unknown bIsMeleeAttackBlocked; // 0x12b8(0x01)
	float LastMeleeAttackTime; // 0xd74(0x04)
	Unknown CurrentMeleeAnimSlot; // 0x2c90(0x10)
	Unknown ActorsToIgnore_Melee; // 0x2da8(0x10)
	Unknown MeshesToIgnore_Melee; // 0x1208(0x10)
	float UnarmedMeleeDamage_Ground; // 0x36bc(0x04)
	float UnarmedMeleeDamage_Jump; // 0x28f0(0x04)
	Unknown bIsFired; // 0x2290(0x01)
	Unknown bWantsToFire; // 0x839(0x01)
	Unknown bWantsToAOS; // 0x1069(0x01)
	Unknown bIsLanded; // 0xfc0(0x01)
	float FiredTimeCount; // 0x9c4(0x04)
	float StartFireTime; // 0x1628(0x04)
	Unknown bIsADSFireToCamera; // 0x3580(0x01)
	float FireToCameraLocationCorrection; // 0x2f80(0x04)
	Unknown ArmsLagRotation; // 0x810(0x0c)
	float ArmsLagDeltaMin; // 0x2b70(0x04)
	float ArmsLagDeltaMax; // 0x13b0(0x04)
	float DefaultsArmsLagRotationMax; // 0xb64(0x04)
	float DefaultsArmsLagRotationSpeed; // 0x28bc(0x04)
	Unknown ArmsLags; // 0x2a98(0x50)
	float ArmsLagBaseModify; // 0x1f50(0x04)
	float ArmsLagWeaponModify; // 0x11fc(0x04)
	Unknown ArmsLagWeaponRotation; // 0xbb8(0x0c)
	Unknown ADSDeltaRotation; // 0x1518(0x0c)
	Unknown ADSEndLocation; // 0x320c(0x0c)
	Unknown bSteadyAim; // 0x1dfc(0x01)
	Unknown LastSwayRotationOnSteadyAim; // 0x1aa8(0x0c)
	Unknown SteadyAimReadyEvent; // 0x1748(0x08)
	Unknown SteadyAimStartEvent; // 0x25e8(0x08)
	Unknown SteadyAimEndEvent; // 0x29e0(0x08)
	float HeadShotBloodEffectDistance; // 0x7f0(0x04)
	Unknown HeadShotHelmetFxEmitterTemplate; // 0x1510(0x08)
	float BoltActionDelayTime; // 0x1ab4(0x04)
	Unknown bWaitingADSReturn; // 0x2a31(0x01)
	float ADSReturnEnableTime; // 0x84c(0x04)
	float Delay_AOSToADS; // 0xb24(0x04)
	Unknown bNeedToBeADS; // 0x3410(0x01)
	Unknown TimerHandle_ADSProcess; // 0x2b80(0x08)
	Unknown PP_Preset_ADS; // 0x2f58(0x08)
	Unknown PPInst_ADS; // 0x28c0(0x08)
	float ReplayInputForwardAxisValue; // 0x12a0(0x04)
	float ReplayInputRightAxisValue; // 0x20c0(0x04)
	Unknown CurrentInputAxis; // 0x26a0(0x08)
	struct FMulticastInlineDelegate Delegate_OnCameraViewModeChanged; // 0x5e8(0x10)
	Unknown ZoomInAudioEvent_Digital; // 0x2450(0x08)
	Unknown ZoomOutAudioEvent_Digital; // 0x1dd0(0x08)
	float ZoomAudioEventRepeatDelay; // 0x25f4(0x04)
	float ZoomAudioEventLastPlayTime; // 0x3794(0x04)
	struct FMulticastInlineDelegate OnPickableItemDetected; // 0x628(0x10)
	float OverHeadTraceDistance; // 0xf30(0x04)
	Unknown bShouldAdjustOverHead; // 0x33d8(0x01)
	float UpdateAnimationDistance; // 0x1538(0x04)
	Unknown bIsDisarming; // 0x658(0x01)
	Unknown ResuscitationStopEv; // 0xa88(0x08)
	Unknown ResuscitatingCharacter; // 0x1fe8(0x08)
	float RequestResuscitationCoolTime; // 0xf20(0x04)
	Unknown CurrentResuscitationAnimSlot; // 0xf88(0x10)
	Unknown TimerHandle_SetIsFired; // 0x3a48(0x08)
	float KillAssistValidTime; // 0x3450(0x04)
	int32_t KillAssistMaxCount; // 0xf28(0x04)
	float KnockOutAssistValidTime; // 0x2904(0x04)
	int32_t KnockOutAssistMaxCount; // 0xc88(0x04)
	Unknown AssistInfo; // 0x1950(0x10)
	float ThrowingWeaponFireDelay; // 0x2a64(0x04)
	float PreShootDeltaSecond; // 0xfd0(0x04)
	Unknown bIsParachuteAvailable; // 0x1bd1(0x01)
	float ParachuteInputForward; // 0x2fe0(0x04)
	float ParachuteInputRight; // 0x7a8(0x04)
	float ParachuteForwardMomentum; // 0x13d4(0x04)
	Unknown ParachuteLastRotator; // 0x3428(0x0c)
	float CurrentParachuteMaxMomentum; // 0x910(0x04)
	float ParachuteMaxMomentum; // 0xe94(0x04)
	float ParachuteMomentumAcc; // 0x15d0(0x04)
	float ParachuteMomentumDeacc; // 0x15e8(0x04)
	float ParachuteMomentumZ; // 0x1ba4(0x04)
	float DescentInputVectorAcc; // 0x26f8(0x04)
	float ParachuteInputVectorAcc; // 0x1f54(0x04)
	float ParachuteVelocityChangeFinalRate; // 0x32ac(0x04)
	float ParachuteVelocityChangeZDecRate; // 0xb3c(0x04)
	float ParachuteLandingVelocityZ; // 0x1930(0x04)
	float ParachuteLandingVelocityXY; // 0xf60(0x04)
	float ForwardMomentumRangeMin; // 0x1734(0x04)
	float ForwardMomentumRangeMax; // 0xaec(0x04)
	float CurrentYawSpeed; // 0x1ce0(0x04)
	float CurrentRollSpeed; // 0x2908(0x04)
	float CurrentPitchSpeed; // 0x2e58(0x04)
	float MinPitchInParachute; // 0x3128(0x04)
	float MaxPitchInParachute; // 0x2408(0x04)
	float GlidePitchInParachute; // 0x9e8(0x04)
	float MinRollInParachute; // 0x2a90(0x04)
	float MaxRollInParachute; // 0x3424(0x04)
	float MaxRollInParachuteVelocity; // 0x1378(0x04)
	float ParachuteTurnSpeedYaw; // 0x2b74(0x04)
	float ParachuteTurnSpeedPitch; // 0x2818(0x04)
	float ParachuteTurnSpeedRoll; // 0x2a00(0x04)
	float ParachuteTurnChangeSpeedYaw; // 0x2098(0x04)
	float ParachuteTurnChangeSpeedPitch; // 0x2178(0x04)
	float ParachuteTurnChangeSpeedRoll; // 0x386c(0x04)
	float HeightToGetInParachuteFromLand; // 0x2fa0(0x04)
	float ForceHeightToGetInParachuteFromLand; // 0x2a34(0x04)
	Unknown ReplicatedParachuteVelocity; // 0x12d0(0x0c)
	Unknown ParachutePitchCurve; // 0x14b8(0x08)
	Unknown ParachuteSkinMaterials; // 0x1868(0x10)
	Unknown CurrentParachuteSkin; // 0x1760(0x08)
	Unknown bChangeNearClipPlane; // 0x2ca9(0x01)
	float DescentStartZPosition; // 0x2b78(0x04)
	float ParachuteAvailableFallingDistance; // 0xd28(0x04)
	float DescentZ; // 0xda0(0x04)
	float SeaLevelZ; // 0x800(0x04)
	float SaveMaxWalkSpeed; // 0x37d0(0x04)
	float SaveCameraBoomLocationZ; // 0x2d0c(0x04)
	float PosToGetInParachute; // 0x2c1c(0x04)
	Unknown AccelerationPPClass; // 0x3130(0x08)
	Unknown RadialOnDescentCurv; // 0x998(0x08)
	float RadialRate; // 0x3798(0x04)
	float DescentBlurWidth; // 0x15a0(0x04)
	Unknown AccelerationPPInst; // 0x27b8(0x08)
	float TargetSpringArmLengthDescent; // 0x1850(0x04)
	float SpeedSpringArmLengthDesecnt; // 0x1a5c(0x04)
	Unknown bDescentCameraShakeLoop; // 0x2a10(0x01)
	float DescentCameraShakeDelay; // 0x2590(0x04)
	Unknown DescentCameraShake; // 0x1300(0x08)
	Unknown CloudFxEmitterTemplate; // 0x1f58(0x08)
	Unknown CloudFxInDescent; // 0x3438(0x08)
	float VelocityZ_LandStop; // 0x1a3c(0x04)
	float VelocityZ_Falling; // 0x3138(0x04)
	float PrevMeshRelativeZ; // 0x349c(0x04)
	float PronedEyeHeight; // 0x2ee8(0x04)
	Unknown bIsProneWeaponIdle; // 0x316c(0x01)
	Unknown bIsAutoSprint; // 0x2f38(0x01)
	float PronedDeltaHeightCamera3P; // 0x256c(0x04)
	float CrouchedDeltaHeightCamera3P; // 0x1154(0x04)
	float CrouchMovedDeltaHeightCamera3P; // 0x1cf8(0x04)
	float StandDeltaHeightCamera3P; // 0x20f8(0x04)
	float StandSprintDeltaHeightCamera3P; // 0x2708(0x04)
	Unknown Camera1PInterpSrc; // 0x2154(0x0c)
	Unknown Camera3PInterpSrc; // 0x928(0x0c)
	Unknown Camera3PInterpDst; // 0x1678(0x0c)
	float TargetArmLength; // 0x3664(0x04)
	float TargetArmLengthInterpSpeed; // 0x2c30(0x04)
	float TargetArmLengthInterpSpeed_AMP; // 0x1084(0x04)
	float TargetArmLengthInterpSpeed_Hear; // 0x1acc(0x04)
	float TargetFieldOfView; // 0x3238(0x04)
	Unknown TargetSocketOffset; // 0x1644(0x0c)
	float DefaultCameraLag; // 0x1098(0x04)
	float ReturnCameraLag; // 0xe58(0x04)
	Unknown DefaultSocketOffset_VehicleAOS; // 0x289c(0x0c)
	Unknown DefaultSocketOffset_LeftHipshot; // 0x31d4(0x0c)
	Unknown DefaultSocketOffset_Hipshot; // 0xba0(0x0c)
	Unknown DefaultSocketOffset_RightHipshot; // 0x20b4(0x0c)
	Unknown DefaultSocketOffset_LeftLeanAOS; // 0x2f94(0x0c)
	Unknown DefaultSocketOffset_RightLeanAOS; // 0x7ac(0x0c)
	Unknown DefaultSocketOffset_LeftAOS_Idle; // 0x2554(0x0c)
	Unknown DefaultSocketOffset_RightAOS_Idle; // 0x31e0(0x0c)
	Unknown DefaultSocketOffset_LeftAOS_Crouch; // 0x9c8(0x0c)
	Unknown DefaultSocketOffset_RightAOS_Cr; // 0x2480(0x0c)
	Unknown DefaultSocketOffset_LeftAOS_Prone; // 0x36e0(0x0c)
	Unknown DefaultSocketOffset_RightAOS_Pr; // 0x2ba0(0x0c)
	Unknown DefaultTargetOffset_HipShot; // 0x2f0c(0x0c)
	Unknown DefaultTargetOffset_AOS_Stand_Idle; // 0x28c8(0x0c)
	Unknown DefaultTargetOffset_AOS_Stand_Lean; // 0x1cb8(0x0c)
	Unknown DefaultTargetOffset_AOS_C; // 0x83c(0x0c)
	Unknown DefaultTargetOffset_AOS_Ctand_Lean; // 0x1e08(0x0c)
	float DefaultTargetArmLength_Hipshot; // 0x2160(0x04)
	float DefaultTargetArmLength_AOS; // 0xa90(0x04)
	float Camera3P_FOV_InterpSpeed; // 0xa14(0x04)
	float Camera3P_AMP_FOV_InterpSpeed; // 0x1948(0x04)
	float Camera3P_HeartBeatSensor_FOV_InterpSpeed; // 0x2f8c(0x04)
	float Camera3P_Lean_InterpSpeed; // 0x2518(0x04)
	Unknown DeathCamClass; // 0xc70(0x08)
	float DeathBeginTime; // 0x3a54(0x04)
	Unknown BodyBaseSkeletalMesh; // 0x668(0x08)
	Unknown bNeedToUpdatePreviewPawn; // 0x3544(0x01)
	Unknown Mutable_MaleInstance; // 0x11c0(0x08)
	Unknown Mutable_FemaleInstance; // 0x2b98(0x08)
	Unknown InventoryCharacterClass; // 0x2300(0x08)
	Unknown InventoryCharacter; // 0xbc8(0x08)
	struct FMulticastInlineDelegate OnUpdateCastingDelegate; // 0x6b0(0x10)
	int32_t UsingBackpackItemIndex; // 0xa28(0x04)
	float ItemInterruptInputSeconds; // 0x31b8(0x04)
	Unknown CastingItemTimer; // 0x1298(0x08)
	Unknown CastingSupplyTimer; // 0x1780(0x08)
	Unknown CastingItemMontageTimer; // 0x23f8(0x08)
	Unknown LastCastingItemAnimSlot_Stand; // 0x1560(0x10)
	Unknown LastCastingItemAnimSlot_Prone; // 0x13e8(0x10)
	Unknown CastingStopEvents; // 0x2bf0(0x10)
	Unknown bIsCastingItem; // 0x1e14(0x01)
	Unknown CompletedCastingInfo; // 0x2e5c(0x08)
	int32_t BasicSetting_gender; // 0x2198(0x04)
	int32_t BasicSetting_face; // 0x15c8(0x04)
	int32_t BasicSetting_face_color; // 0x2028(0x04)
	int32_t BasicSetting_hair; // 0x24ac(0x04)
	int32_t BasicSetting_hair_color; // 0x142c(0x04)
	int32_t BasicSetting_makeup; // 0x36dc(0x04)
	Unknown BasicSettingItemInfos; // 0x1fd0(0x10)
	struct FName CombineTargetRecipe; // 0x1a88(0x08)
	Unknown CombineTargetMaterials; // 0x3550(0x10)
	Unknown CombineCompleteAudioEvent; // 0x14a8(0x08)
	Unknown bEnabledFur; // 0x1fa8(0x01)
	struct FName WearableNameHasFur; // 0x32d0(0x08)
	float CooldownTimeForEnterVehicle; // 0x25d4(0x04)
	float CoolDownTimeForUseLadder; // 0x3728(0x04)
	Unknown NearbyVehicles; // 0x2258(0x10)
	struct FMulticastInlineDelegate Delegate_OnEnteredVehicle; // 0x6c0(0x10)
	float MaxVehicleEscapeSpeed; // 0x9a0(0x04)
	Unknown PreviousVehicleSeat; // 0x2720(0x08)
	Unknown ProjectileGrenades; // 0x2268(0x10)
	struct FMulticastInlineDelegate OnChangeProjectilePredictPath; // 0x2d50(0x10)
	Unknown IsBlind; // 0x141c(0x01)
	struct FMulticastInlineDelegate OnAirCraftDelegate; // 0x21e0(0x10)
	struct FMulticastInlineDelegate OnCharacterGroundStateChangeDelegate; // 0x15f8(0x10)
	float FlashBangAngle; // 0x820(0x04)
	Unknown PostProcessFlashBangClass; // 0x2e70(0x08)
	Unknown GrenadeFlashBangStartEvent; // 0x1370(0x08)
	Unknown GrenadeFlashBangEndEvent; // 0x3710(0x08)
	Unknown GrenadeFragmentExplosionSineStopEvenj; // 0x9f0(0x08)
	Unknown PostProcess; // 0x31c0(0x08)
	Unknown DamagedDissolveAnimationC; // 0x1dc0(0x08)
	Unknown PostProcess; // 0x2420(0x08)
	float DamagedDissolveRateTime; // 0x1268(0x04)
	float DamagedTermTime; // 0x1540(0x04)
	float DamagedDissolveAnimaitionMaxTime; // 0x2a60(0x04)
	float HitBlinkTime; // 0x32a8(0x04)
	float InternalDamagedTermTime; // 0xde4(0x04)
	float InternalHit; // 0x1fe0(0x04)
	float DamagedDissolveAnimationValue; // 0x27f0(0x04)
	Unknown IsEndTermTime; // 0x1a38(0x01)
	Unknown IsPlayingDamage; // 0xa98(0x01)
	Unknown IsHit; // 0x12cc(0x01)
	Unknown IsDissolve; // 0xc90(0x01)
	Unknown DamageReset; // 0x26c0(0x01)
	int32_t HitBlinkState; // 0x2608(0x04)
	int32_t CurrentDamageCount; // 0x990(0x04)
	int32_t DissolveCount; // 0x2504(0x04)
	Unknown PostProcessOuterPlayZoneC; // 0x22e8(0x08)
	float ShowTimePostProcessOuterPlayZone; // 0x11e8(0x04)
	Unknown TimerHandle_OuterPlayZone; // 0x3100(0x08)
	Unknown PostProcess; // 0x14e8(0x08)
	Unknown TimerHandle_BlueZone; // 0x1df0(0x08)
	Unknown PostProcessMagneticHitClass; // 0x2d20(0x08)
	Unknown PostProcessMagneticHit; // 0xbd8(0x08)
	Unknown MagneticDamagedDissolveAnimationCurve; // 0x2778(0x08)
	float MagneticDamagedTermTime; // 0x2a6c(0x04)
	float MagneticDamagedDissolveAnimaitionMaxTime; // 0x2f84(0x04)
	float MagneticHit; // 0x3414(0x04)
	float InternalMagneticDamagedTermTime; // 0x2888(0x04)
	float InternalMagneticHitBlinkTime; // 0x1af0(0x04)
	float MagneticDamagedDissolveAnimationValue; // 0x2be8(0x04)
	float BluezoneMaterialOnTime; // 0x830(0x04)
	Unknown IsMagneticEndTermTime; // 0x1bd2(0x01)
	Unknown IsMagneticDamage; // 0x27da(0x01)
	Unknown IsMagneticHit; // 0x2840(0x01)
	Unknown IsMagneticDissolve; // 0x2808(0x01)
	Unknown MagneticDamageReset; // 0x3498(0x01)
	Unknown PostProcessDustClass; // 0x26e8(0x08)
	Unknown DustDissolveAnimationCurve; // 0x3980(0x08)
	Unknown PostProcessDust; // 0x15b0(0x08)
	float DustDissolveAnimaitionMaxTime; // 0x17ac(0x04)
	float DustDissolveDelayTime; // 0xb88(0x04)
	float InternalDustDissolv; // 0xb14(0x04)
	float DustDissolveAnimationValue; // 0x9d4(0x04)
	Unknown IsOnDust; // 0x2b7c(0x01)
	Unknown IsDustDissolve; // 0x23e0(0x01)
	Unknown DustReset; // 0x1898(0x01)
	Unknown PP_Preset_PickupOutline; // 0x1190(0x08)
	Unknown PP_PickupOutlineRef; // 0x2560(0x08)
	float CurrentOutlineThickness; // 0x24a8(0x04)
	float MaxOutlineThickness; // 0x2568(0x04)
	float OutlineThicknessInterpSpeed; // 0x1f98(0x04)
	float CurrentCameraModifyerX; // 0x1d50(0x04)
	float CurrentCameraModifyerY; // 0x228c(0x04)
	Unknown CurrentEMouseSensitivityState; // 0x33f8(0x01)
	Unknown bPendingOpenDoor; // 0x2ca8(0x01)
	Unknown KickTargetDoor; // 0x1160(0x08)
	Unknown DoorBreachingParticle; // 0x3228(0x08)
	Unknown WindowBreachingParticle; // 0x2a08(0x08)
	Unknown BreachingAudioEvent; // 0x1698(0x08)
	Unknown BreachingAudioEvent_Silence; // 0x3788(0x08)
	Unknown AnimInstance; // 0x26f0(0x08)
	Unknown PostprocessAnimInstance; // 0x16f0(0x08)
	Unknown AnimInstance_FPP; // 0x1cd8(0x08)
	Unknown BravoHotelGameState; // 0x2810(0x08)
	Unknown BravoHotelPlayerController; // 0x3800(0x08)
	int32_t IdleNum; // 0x34e0(0x04)
	float IdleWaitingTime; // 0x25d0(0x04)
	struct FName LevelUpEffectBuffName; // 0x12b0(0x08)
	Unknown DefaultBuffName; // 0x2430(0x10)
	Unknown DefaultPerkInfo; // 0x1ab8(0x10)
	Unknown UberUser; // 0x2458(0x10)
	Unknown CurrentPerkInfos; // 0x3348(0x10)
	Unknown UltimatePerkInfo; // 0x3278(0x28)
	Unknown PerkUIInfos; // 0x1668(0x10)
	Unknown UltimateUIInfo; // 0x3840(0x2c)
	Unknown CurrentPerkCards; // 0x1198(0x10)
	Unknown MutableBuffList; // 0x1750(0x10)
	Unknown CurrentSkillType; // 0x1c10(0x01)
	struct FMulticastInlineDelegate OnChangeFireType; // 0x1608(0x10)
	int32_t CurrentReadyToSnipeGrade; // 0x260c(0x04)
	struct FMulticastInlineDelegate Delegate_OnEndSearchInstinct; // 0x1d20(0x10)
	Unknown UsedTrapList; // 0x2670(0x10)
	Unknown PerkLevelUpType; // 0x3a40(0x01)
	int32_t ActiveSkillInitIndex; // 0xc6c(0x04)
	int32_t ActiveSkillCount; // 0x270c(0x04)
	Unknown CurrentDisplayAbility; // 0x2984(0x0c)
	Unknown LoadedClasses; // 0x1548(0x10)
	int32_t PerkDeckChangingCount; // 0x2d38(0x04)
	struct FMulticastInlineDelegate OnMovementInputPressedDelegate; // 0x708(0x10)
	Unknown bIsMoving; // 0xbe0(0x01)
	Unknown bForceMoving; // 0xc18(0x01)
	Unknown LastDamagedType; // 0x31f0(0x08)
	float LastDamagedAmount; // 0x22d8(0x04)
	Unknown LastHitType; // 0x3750(0x08)
	Unknown LastSimulatedTakeDamageInfo; // 0x948(0x48)
	Unknown DebuffHitResult; // 0x398c(0x88)
	Unknown DebuffHitDamageType; // 0x28f8(0x08)
	Unknown TakeDamageMontageList; // 0x10b8(0x10)
	Unknown BloodSplatterEffect; // 0x36f8(0x08)
	Unknown PunchEffect; // 0x1bf8(0x08)
	Unknown ThrowingWeaponDirectHitEffect; // 0x1200(0x08)
	float BloodEffectNearbyDist; // 0x122c(0x04)
	Unknown DefaultItemSetting; // 0x1000(0x38)
	Unknown DefaultWearableSetting; // 0x2c00(0x18)
	Unknown BlackMarketItemPresetList; // 0x37e8(0x10)
	struct FMulticastInlineDelegate OnCanProneFailedDelegate; // 0x720(0x10)
	float MinDamageableFallingSpeed; // 0x211c(0x04)
	float MaxDamageableFallingSpeed; // 0xfe0(0x04)
	float MinDamageableFallingSpeedFromVehicle; // 0x2b10(0x04)
	float MaxDamageableFallingSpeedFromVehicle; // 0xb10(0x04)
	Unknown LandingReason; // 0xd11(0x01)
	struct FMulticastInlineDelegate Delegate_OnExitFallingState; // 0x14d8(0x10)
	Unknown OverlappedPhysicMaterials; // 0x1248(0x10)
	float BushSoundSpawnDelay; // 0x17a8(0x04)
	float BushLandingDamageMultiplier; // 0x2e64(0x04)
	Unknown OverlappedCantProneComponent; // 0x1c30(0x50)
	Unknown bIsInsideBlueZone; // 0x178d(0x01)
	Unknown bIsSpectated; // 0x1a58(0x01)
	Unknown Camera3P_DeltaTargetOffsets; // 0x1980(0x50)
	Unknown bReplaceFreeLook; // 0x924(0x01)
	Unknown bUpdateDeathRotation; // 0x2a58(0x01)
	Unknown RagdollLocation; // 0xd68(0x0c)
	Unknown RagdollVelocity; // 0x8f0(0x0c)
	Unknown LastDamageType; // 0x8e8(0x08)
	float Ragdoll_ZOffset; // 0x1d34(0x04)
	Unknown bApplyRagdollForce; // 0x3014(0x01)
	Unknown BravoHotelCharacterMovement; // 0x750(0x08)
	Unknown PrevMovementMode; // 0x2b14(0x01)
	Unknown NewMovementMode; // 0x11dc(0x01)
	Unknown PrevCustomMovementMode; // 0x27d8(0x01)
	Unknown NewCustomMovementMode; // 0xf08(0x01)
	Unknown MovementInputVector; // 0x1f38(0x0c)
	Unknown TimerHandle_HideParachute; // 0x758(0x08)
	Unknown Timeline_TunnelEffect; // 0x35c0(0x98)
	Unknown Curve_TunnelEffect; // 0x3930(0x50)
	Unknown Timeline_CameraInterp; // 0x17b8(0x98)
	Unknown Curve_CameraInterp; // 0x2e78(0x08)
	Unknown Curve_AdsCameraInterp; // 0x918(0x08)
	Unknown TimerHandle_MinTimeJumpingBefor; // 0x3440(0x08)
	float MinTimeJumpingBeforeLand; // 0x2de4(0x04)
	float DescentXYAcc; // 0x2e18(0x04)
	float DescentAirControl; // 0x1a90(0x04)
	float DescentSpeed; // 0x1934(0x04)
	float DescentGravityScale; // 0x1d14(0x04)
	float DescentDeacceleration; // 0x8fc(0x04)
	float DescentMaxAcceleration; // 0x8a4(0x04)
	Unknown DescentCameraLocation; // 0x2280(0x0c)
	float ParachuteAirControl; // 0x37cc(0x04)
	float ParachuteSpeed; // 0x2e68(0x04)
	float ParachuteGravity; // 0x1558(0x04)
	float ParachuteDeacceleration; // 0xfbc(0x04)
	float ParachuteMaxAcceleration; // 0xc94(0x04)
	Unknown ParachuteCameraLocation; // 0x1448(0x0c)
	float ParachuteSocketOffsetY; // 0x1d0c(0x04)
	float ParachuteSocketDeltaOffsetZ; // 0x1c20(0x04)
	float ParachuteReadyToLandHeight; // 0x3548(0x04)
	float ParachuteQuickLandingStartHeight; // 0x2c48(0x04)
	float ParachuteQuickLandingStartRadius; // 0x392c(0x04)
	float ParachuteQuickLandingVelocityModifierXY; // 0x1978(0x04)
	float ParachuteQuickLandingVelocityModifierZ; // 0x11d8(0x04)
	float ParachuteQuickLandingDMGRate; // 0x1938(0x04)
	Unknown bCanQuickLanding; // 0x2108(0x01)
	Unknown LastQuickLandingAllowedLocation; // 0x3538(0x0c)
	Unknown ParachuteTargetCameraLocation; // 0x3670(0x0c)
	float ParachuteTargetCameraSpeed; // 0x26fc(0x04)
	float ParachuteTargetArmLengthSpeedStart; // 0x8a0(0x04)
	float ParachuteTargetArmLengthSpeedEnd; // 0xfa8(0x04)
	Unknown ParachuteUnfoldCameraShake; // 0x3418(0x08)
	Unknown BreathStartEvent; // 0x29a0(0x08)
	Unknown BreathEndEvent; // 0x1d38(0x08)
	Unknown BreathStopEvent; // 0xfc8(0x08)
	Unknown SprintingBeginRange; // 0x365c(0x08)
	Unknown SprintingRange; // 0xb28(0x08)
	float ReduceCharacterSpeedTime; // 0x2db8(0x04)
	float InternalReduceCharacterSpeedTime; // 0x13c8(0x04)
	Unknown IsInReduceSpeedExplosionRange; // 0x3188(0x01)
	Unknown PostProcessEffectsTable; // 0xad0(0x08)
	Unknown PostProcessAssignedList; // 0x16a0(0x50)
	Unknown PostProcess; // 0x28a8(0x10)
	Unknown RenderSettingsTable; // 0xfa0(0x08)
	Unknown bUpdateRenderSettings; // 0x1c11(0x01)
	int32_t CurrentTerrainType; // 0x15a8(0x04)
	Unknown AttachInAircraftOffset; // 0x2a38(0x0c)
	Unknown AttachInAircraftRotationOffset; // 0x33a4(0x0c)
	Unknown AttachInAircraftCameraLocaiton; // 0x1720(0x0c)
	float InitSpringArmLengthInAircraft; // 0x3824(0x04)
	float TargetSpringArmLengthInAircraft; // 0xda4(0x04)
	float SpeedSpringArmLengthInAirCraft; // 0x2f08(0x04)
	float PrevBloomIntensity; // 0x29f8(0x04)
	float PrevBloomThreshold; // 0x2a5c(0x04)
	float TargetBloomIntensityInAirCraft; // 0x26c4(0x04)
	float SpeedBloomIntensityInAirCm; // 0x1bb8(0x04)
	float BloomStartDelayTimeInAirCCraf; // 0x1ba0(0x04)
	float CineDurationTimeMax; // 0x2710(0x04)
	float CineTextAnimationAppearTime; // 0x9c0(0x04)
	float GetPerkOnStartTime; // 0x32a0(0x04)
	Unknown FPSK_Camera; // 0xd48(0x08)
	Unknown ADSCameraScene; // 0x1b78(0x08)
	Unknown FPSK_MutableArms; // 0x3108(0x08)
	Unknown FPSK_Arms; // 0xbe8(0x08)
	Unknown FPSK_CameraHeight; // 0x2e08(0x0c)
	float FPSK_CameraProbe; // 0x1cc4(0x04)
	float FPSK_CameraPitchDeltaX; // 0x3808(0x04)
	Unknown FPSK_CameraLocation_Idle; // 0x2548(0x0c)
	struct FName FPSK_Camera; // 0x11b8(0x08)
	Unknown FPSK_CameraLocation_ADS; // 0xf54(0x0c)
	Unknown FPSK_CameraLocation_Parkour; // 0x1420(0x0c)
	struct FName FPSK_Camera; // 0x2d70(0x08)
	float FPSK_CameraHeight_Stand; // 0x824(0x04)
	float FPSK_CameraHeight_Crouch; // 0x3390(0x04)
	float FPSK_CameraHeight_Prone; // 0x1ae0(0x04)
	Unknown FPSK_CameraLocation_Collide; // 0x103c(0x0c)
	Unknown FPSK_CameraLocation_LeftLeanDelta; // 0x263c(0x0c)
	Unknown FPSK_CameraLocation_RightLeanDelta; // 0xff4(0x0c)
	float FPSK_CameraLocation_CollideAlpha; // 0x2a68(0x04)
	Unknown FPSK_StartCameraHeight; // 0x2530(0x0c)
	Unknown FPSK_DestCameraHeight; // 0xaf0(0x0c)
	Unknown FPSK_WeaponShadow; // 0x37f8(0x08)
	Unknown FPSK_SightShadow; // 0x27e0(0x08)
	Unknown FPSK_GripShadow; // 0x1fc8(0x08)
	Unknown FPSK_MagazineShadow; // 0x12c0(0x08)
	Unknown FPSK_StockShadow; // 0x1d80(0x08)
	Unknown FPSK_TacticalAttachmentShadow; // 0x1ce8(0x08)
	Unknown FPSK_BarrelShadow; // 0x2ef0(0x08)
	Unknown FPSK_MuzzleShadow; // 0x1aa0(0x08)
	Unknown FPSK_WeaponAttachments; // 0x3900(0x10)
	Unknown bFPSK_UseCustomCurv; // 0x9b0(0x01)
	Unknown bFPSK_IsDefaultTransformUpdated; // 0x9bc(0x01)
	Unknown bFPSK_IsFPSMode; // 0x2639(0x01)
	Unknown FPSK_CurrentWeaponTransform; // 0x22a0(0x30)
	Unknown FPSK_IdleWeaponTransform; // 0x2850(0x30)
	Unknown FPSK_CollideWeaponTransform; // 0x2fb0(0x30)
	Unknown FPSK_ADS_DefaultWeaponTransform; // 0x34b0(0x30)
	Unknown FPSK_ADS_TargetWeaponTransform; // 0xdf0(0x30)
	Unknown FPSK_ADS_DefaultWeaponTransform_BasicSightCache; // 0x2b20(0x30)
	Unknown FPSK_ADS_DefaultWeaponTransform_CurrentSightCache; // 0x1d90(0x30)
	Unknown FPSK_ADS_WeaponTransform; // 0x2cc0(0x30)
	float FPSK_ADSFOV; // 0x2bd4(0x04)
	float FPSK_AOSFOV; // 0x3434(0x04)
	float FPSK_DefaultFOV; // 0x36c8(0x04)
	float FPSK_CurrentMagnificationFactor; // 0x1100(0x04)
	float FPSK_TargetMagnificationFactor; // 0x1d30(0x04)
	Unknown MPC_WeaponFov; // 0x28d8(0x08)
	Unknown FPSK_CurrentCameraRelativeLocation; // 0xdd4(0x0c)
	float FPSK_ADSAlpha; // 0x31d0(0x04)
	float FPSK_StartFOV_Delta; // 0x1e18(0x04)
	float CameraInterpPlayRate; // 0x3570(0x04)
	float AdsCameraInterpPlayRate; // 0x1dc8(0x04)
	float FPSK_TargetADSAlpha; // 0xfac(0x04)
	Unknown FPSK_Timeline_Sway_Idle; // 0x2338(0x98)
	Unknown FPSK_Timeline_Sway_Move; // 0x3038(0x98)
	Unknown FPSK_Curve_Sway_Idle_Default; // 0x1770(0x08)
	Unknown FPSK_Curve_Sway_Mov; // 0x11f0(0x08)
	Unknown FPSK_Curve_Sway_Scale_With_Fov; // 0x20d8(0x08)
	Unknown FPSK_Curve_Sway_Idle; // 0x2a28(0x08)
	Unknown FPSK_Curve_Sway_Mov; // 0xd40(0x08)
	Unknown bUseFPSK_Sway; // 0x1238(0x01)
	float FPSK_SwayAlpha; // 0x22d0(0x04)
	float FPSK_SwayAlphaMin; // 0x3820(0x04)
	float FPSK_SwayAlphaMax; // 0x1544(0x04)
	float FPSK_SwayScale; // 0xe90(0x04)
	Unknown FPSK_SwayRotationIdle; // 0x15ec(0x0c)
	Unknown FPSK_SwayRotationMove; // 0xed8(0x0c)
	Unknown FPSK_SwayRotationDeltaForSteadyAim; // 0x2d98(0x0c)
	float FPSK_SwayInterpSpeed; // 0x1fc4(0x04)
	Unknown FPSK_LeanRotation; // 0x123c(0x0c)
	Unknown FPSK_LeanLocation; // 0x3148(0x0c)
	Unknown FPSK_CurrentCollideWeaponTransform; // 0x2120(0x30)
	float FPSK_CollideAlpha; // 0x1878(0x04)
	float FPSK_CollideAngle; // 0x2bac(0x04)
	float FPSK_CollideAngle_LocalCache; // 0x2900(0x04)
	Unknown bFPSK_IsCollide; // 0xb8c(0x01)
	Unknown FPSK_Curves_TunnelEffect; // 0x19e8(0x50)
	float FPSK_TargetFOV; // 0x1088(0x04)
	Unknown TimerHandle_NoCarLandingDamageToTeam; // 0x27c0(0x08)
	float InAircraftNearClipPlane; // 0x36ec(0x04)
	Unknown AIBot_SearchedEnemyList; // 0x1b80(0x10)
	Unknown bEnableCustomDepth; // 0x2f50(0x01)
	Unknown TimerHandle_HurtCondition; // 0x3030(0x08)
	float ProneDamageScaleInRedZone; // 0x1e04(0x04)
	Unknown BlueZoneFreezeEvent; // 0x3170(0x08)
	Unknown BlueZoneFreezeStopEvent; // 0x1768(0x08)
	Unknown BlueZoneDroneEvent; // 0x7f8(0x08)
	Unknown BlueZoneDroneStopEv; // 0x2298(0x08)
	Unknown SupplyBoxNotifyAlertMe; // 0xb18(0x08)
	Unknown SupplyBoxNotifyAlertOther; // 0x30d8(0x08)
	float CheckFreezeDistance; // 0xbf4(0x04)
	float CheckDroneDistance; // 0x3704(0x04)
	Unknown DefaultSocketOffset_LeftLeanAMP; // 0x1ca0(0x0c)
	Unknown DefaultSocketOffset_RightLeanAMP; // 0x1a60(0x0c)
	Unknown DefaultSocketOffset_RightAMP; // 0xb30(0x0c)
	Unknown DefaultSocketOffset_LeftAMP; // 0xabc(0x0c)
	float DefaultTargetArmLength_AMP; // 0xff0(0x04)
	float AmplifierFocusDistance; // 0x3250(0x04)
	Unknown DefaultSocketOffset_LeftLeanHeartBeatSensor; // 0x1d60(0x0c)
	Unknown DefaultSocketOffset_RightLeanHeartBeatSensor; // 0x202c(0x0c)
	Unknown DefaultSocketOffset_RightHeartBeatSensor; // 0x27cc(0x0c)
	Unknown DefaultSocketOffset_LeftHeartBeatSen; // 0x2574(0x0c)
	float DefaultTargetArmLength_HeartBeatSensor; // 0x2f44(0x04)
	float HeartBeatSensorFocusDistance; // 0x1584(0x04)
	float CameraFocusDistanceAOS; // 0x8b0(0x04)
	float AirWalkStartTime; // 0xfd8(0x04)
	Unknown TimerHandle_StopAirWalk; // 0x1ff8(0x08)
	float AirWalkBestRecord; // 0x1e00(0x04)
	float AirWalkTotalRecord; // 0x2570(0x04)
	Unknown AirWalkAudioEvent; // 0x1cf0(0x08)
	float CurrentAirWalkVelocityZ; // 0x1400(0x04)
	float AirWalkDuration; // 0x2150(0x04)
	float AirWalkGravity; // 0x21bc(0x04)
	Unknown PersonalSupplySystemComponent; // 0x3838(0x08)
	Unknown PrevNetworkSmoothingMode; // 0xb60(0x01)
	Unknown TimeHandle_SkyDive; // 0x778(0x08)
	Unknown bActiveCriticalTime; // 0x3828(0x01)
	float CriticalTimeTickInterval; // 0x22f8(0x04)
	float CriticalTimeLimitTime; // 0x1790(0x04)
	Unknown CriticalTimeMeshLocaiton; // 0x2e30(0x0c)
	Unknown CriticalTimeComponentTickIntervals; // 0x32e8(0x50)
	float ParachuteEnableHieght; // 0x1290(0x04)
	Unknown ParachuteTriggerBox; // 0x2000(0x08)
	Unknown CurHit; // 0x3870(0x88)
	Unknown Curve_Sliding; // 0x9e0(0x08)
	Unknown ParticleSystem_Sliding; // 0x1308(0x08)
	Unknown ParticleSystemComponent_Sliding; // 0x1048(0x08)
	float SlidingStartTime; // 0xdd0(0x04)
	Unknown GroundState; // 0x29fc(0x01)
	Unknown ReplicateIndexPerkMap; // 0x21f0(0x50)
	int16_t SlidingBuffIndex; // 0x1bb4(0x02)
	Unknown bPendingStopSliding; // 0x1588(0x01)
	float RollingStartTime; // 0x376c(0x04)
	Unknown PostProcessWetFogClass; // 0x1960(0x08)
	Unknown ActiveWetFogAreas; // 0x2de8(0x10)
	Unknown WetFogInfo; // 0x3458(0x20)
	Unknown WetFogZoneInfo; // 0xf64(0x0c)
	Unknown TimerHandle_WetFog; // 0xd20(0x08)
	Unknown PostProcess; // 0x1108(0x08)
	Unknown ActivePowerInterruptions; // 0x2dc0(0x10)
	Unknown BlackOutInfo; // 0xe98(0x20)
	Unknown TimerHandle_BlackOut; // 0xfe8(0x08)
	Unknown StartBlackOutAudioEvent; // 0x1b00(0x08)
	Unknown StartBlackOutParticle; // 0x1620(0x08)
	Unknown StartBlackOutParticleComponent; // 0xe50(0x08)
	struct FMulticastInlineDelegate OnSpawnBlackOutDelegate; // 0x2c80(0x10)
	Unknown PostProcessForceFieldClass; // 0x9f8(0x08)
	Unknown ActiveForceFields; // 0x3400(0x10)
	Unknown ForceFieldInfo; // 0x2650(0x20)
	Unknown TimerHandle_ForceField; // 0x3480(0x08)
	Unknown SuperBarrierClass; // 0x12a8(0x08)
	Unknown UsingSimulationBox; // 0x344d(0x01)
	Unknown HiddenSimulationBox; // 0x27dc(0x01)
	float SimulationBoxHeight; // 0x2330(0x04)
	struct TSoftClassPtr<UObject> SimulationBoxClass; // 0x3588(0x28)
	struct FMulticastInlineDelegate OnCompleteActiveSkillDelegate; // 0x1a40(0x10)
	Unknown BombingTargetActor; // 0x1fb8(0x08)
	Unknown StartBomingEvent; // 0x22f0(0x08)
	Unknown IsBombing; // 0x20e1(0x01)
	Unknown BombingInfo; // 0x2ff0(0x24)
	float AutoAimRadius; // 0x3478(0x04)
	float AutoAimDistance; // 0xfe4(0x04)
	Unknown bShowAutoAimDebug; // 0xde0(0x01)
	Unknown TeleportFxTemplate; // 0x3770(0x08)
	Unknown TeleportTraceFxTemplate; // 0x24e8(0x08)
	float TeleportDisappearTime; // 0xd94(0x04)
	float TeleportAppearTime; // 0x3140(0x04)
	float RocketJumpGravity; // 0x21b4(0x04)
	Unknown RocketJumpAudioEvent; // 0xd80(0x08)
	Unknown RocketJumpLandedAudioEvent; // 0x1af8(0x08)
	Unknown ParticleSystem_RocketJump; // 0x17a0(0x08)
	Unknown ParticleSystem_RocketJumpTrail; // 0x808(0x08)
	Unknown ParticleSystem_RocketJumpLanded; // 0x2f60(0x08)
	Unknown RocketJumpTrailEffect; // 0xc20(0x08)
	Unknown bFinishMeteorJump; // 0xbc4(0x01)
	float MeteorJumpGravity; // 0x1fac(0x04)
	Unknown bMeteorStrikeBlockingHit; // 0x1bd0(0x01)
	Unknown MeteorGrenadeProjectileClass; // 0x2f28(0x10)
	Unknown MeteorJumpAudioEvent; // 0x3230(0x08)
	Unknown MeteorJumpLandedAudioEvent; // 0x7a0(0x08)
	Unknown ParticleSystem_MeteorJump; // 0x7c0(0x08)
	Unknown ParticleSystem_MeteorJumpTrail; // 0x2fe8(0x08)
	Unknown ParticleSystem_MeteorJumpLanded; // 0x2d48(0x08)
	Unknown MeteorJumpTrailEffect; // 0x2fa8(0x08)
	Unknown MeteorTarget; // 0x1230(0x08)
	Unknown ThrownFlashbangs; // 0x32b0(0x10)
	Unknown ThrownMolotovCocktails; // 0xc78(0x10)
	Unknown ThrownC4s; // 0x1528(0x10)
	Unknown bIsUltimateSprint; // 0xab8(0x01)
	Unknown IgnoreInteraction; // 0x1218(0x01)
	struct FMulticastInlineDelegate OnChangeCharacterStateDelegate; // 0x2a18(0x10)
	int32_t LogSize; // 0x1140(0x04)
	Unknown TimeHandle_RequestBuildingInfo; // 0x1890(0x08)
	float LogIntervalTime; // 0x1df8(0x04)
	int32_t LogRequestSize; // 0x3a58(0x04)
	Unknown LogList; // 0x2e20(0x10)
	Unknown LogJsonList; // 0x25b8(0x10)
	Unknown GodEffect1; // 0x2410(0x08)
	Unknown GodEffect2; // 0x940(0x08)
	Unknown ParticleSystem_Knockout; // 0x1970(0x08)
	Unknown RepSimulatedHittedDamage; // 0x31f8(0x10)
	float FirstTimeHittedDamage; // 0x25f0(0x04)
	float LastTimeHittedDamage; // 0x11e4(0x04)
	Unknown GodParticle; // 0x2448(0x08)
	Unknown NeedFindPersonalSupplyBoxLocation; // 0xa00(0x01)
	int32_t PersonalSupplyBoxRePositionCount; // 0x34a0(0x04)
	Unknown UsingPersonalSupplyBoxWeightMap; // 0x17b0(0x01)
	Unknown UsingPersonalSupplyBoxRePosition; // 0x1583(0x01)
	float PersonalSupplyBoxRePositionDistance; // 0xfb4(0x04)
	Unknown TimeHandle_Ultimate_Recon; // 0xc48(0x08)
	Unknown AnimSlot_Ultimate_Recon; // 0x2a70(0x10)
	Unknown bIsUltimate_Recon; // 0x1b70(0x01)
	Unknown AvoidHeadShotMontage; // 0x1650(0x08)
	Unknown SteelHelmetSound; // 0xf40(0x08)
	Unknown StuntmanRollingDir; // 0x10a8(0x0c)
	float StuntmanStartTime; // 0x162c(0x04)
	Unknown TimerHandle_Stuntman; // 0x3120(0x08)
	Unknown bNeedToUpdateNitroBoost; // 0x21b0(0x01)
	float NitroBoostTorqueScale; // 0xd98(0x04)
	Unknown NitroBoomTargetVehicle; // 0x13f8(0x08)
	Unknown bNeedToUpdateNitroBoom; // 0x3700(0x01)
	float NitroBoomDuration; // 0xa9c(0x04)
	Unknown bNeedToDrawNitroBoomTarget; // 0x1368(0x01)
	Unknown NitroBoomTargetLocation; // 0x2cac(0x0c)
	float NitroBoomLastVehicleSetTime; // 0x172c(0x04)
	Unknown bNeedToUpdateUltimate_Driver; // 0x22fc(0x01)
	Unknown bNeedToCheckPlosiveSoundDetection; // 0x79c(0x01)
	Unknown EnteredElevatorRef; // 0x37b0(0x08)
	float OuterDamage; // 0x780(0x04)
	Unknown TimerHandle_InOuterArea; // 0x788(0x08)
	Unknown TimerHandle_UpdateInOuterArea; // 0x790(0x08)
	struct FMulticastInlineDelegate DelegateCheckSupplyCost; // 0x3218(0x10)
	Unknown SecuredCache; // 0xfb0(0x04)
	Unknown DamageCorrectValueByPenetrationDepthCur; // 0x1d58(0x08)
	Unknown AircraftFlightRef; // 0x2be0(0x08)
	Unknown CurrentSupplyBox; // 0xc0(0x08)
	Unknown CurrentSupplyBoxDummy; // 0xc8(0x08)
	Unknown SupplyBoxClass; // 0xd0(0x08)
	Unknown SupplyBoxDummyClass; // 0xd8(0x08)
	Unknown CurrentAssignmentInfo; // 0xe0(0x30)
	int32_t CountOpenSupplyBox; // 0x110(0x04)
	int32_t SupplyBoxCost; // 0x114(0x04)
	Unknown CurrentPSBState; // 0x118(0x01)
	Unknown AssignReason; // 0x119(0x01)
	Unknown ShowPingByHUD; // 0x122(0x01)
	Unknown DefaultBalanceData; // 0x298(0x78)
	Unknown CharacterBuffDataKeys; // 0x3f8(0x50)
	Unknown DefaultFireCell; // 0x660(0x08)
	float SimulatedTickTime; // 0x460(0x04)
	Unknown AbilityStates; // 0x188(0x50)
	Unknown ConditionedAbilityStates; // 0x3a0(0x50)
	Unknown ConditionStates; // 0x518(0x50)
	uint64_t ConditionFlags; // 0x450(0x08)
	Unknown BuffUIInfos; // 0x568(0x50)
	Unknown CurrentBuffKeys; // 0x6c0(0x118)
	Unknown CurrentBuffInfos; // 0xe8(0x50)
	Unknown BuffControls; // 0x468(0x50)
	Unknown StackBuffInfos; // 0x1e8(0x10)
	float Loudness; // 0x45c(0x04)
	float LoudnessCrouchRatio; // 0x1f8(0x04)
	float LoudnessProneRatio; // 0x448(0x04)
	float LoudnessTime; // 0x668(0x04)
	Unknown DebugWidgetClass; // 0xd8(0x08)
	Unknown MaterialEffectInfos; // 0x350(0x50)
	Unknown MaterialEffectCurve; // 0x288(0x08)
	Unknown MaterialEffectStrCurve; // 0x290(0x08)
	Unknown DebugWidget; // 0x1d8(0x08)
	Unknown WeaponDebugTextWidget; // 0x1e0(0x08)
	Unknown BuffEventDelegates; // 0x238(0x50)
	Unknown BuffEndEventDelegates; // 0x670(0x50)
	Unknown WeaponBuffEventDelegates; // 0x4c8(0x50)
	Unknown ActiveBuffs; // 0x70(0x10)
	Unknown BravoHotelCharacter; // 0x80(0x08)
	Unknown BravoHotelAbilityComponent; // 0x88(0x08)
	Unknown bWalking; // 0xc8(0x01)
	Unknown bSprinting; // 0xc8(0x01)
	Unknown bIsProned; // 0xc8(0x01)
	Unknown bIsJumping; // 0xc8(0x01)
	Unknown bIsKicking; // 0xc8(0x01)
	Unknown bIsAirWalking; // 0xc8(0x01)
	Unknown bWantsToRocketJump; // 0xc8(0x01)
	Unknown bWantsToMeteorJump; // 0xc8(0x01)
	Unknown bWantsToMeteorStrike; // 0xc9(0x01)
	Unknown bWantsToJetpack; // 0xc9(0x01)
	Unknown bWantsToJetpackAim; // 0xc9(0x01)
	Unknown CustomBuoyancySwimMode; // 0xc9(0x01)
	Unknown LeanState; // 0xca(0x01)
	Unknown FireType; // 0xcb(0x01)
	Unknown ThrowingType; // 0xcc(0x01)
	Unknown ReplicatedAnimMontage; // 0xd0(0x08)
	Unknown ReplicatedAnimMontage_FPP; // 0xd8(0x08)
	Unknown bIsSliding; // 0xe0(0x01)
	Unknown bIsRolling; // 0xe1(0x01)
	Unknown BravoHotelCharacterMovement; // 0xe8(0x08)
	float AutoRotateSpeed; // 0x440(0x04)
	struct FName DefaultWeaponName; // 0x444(0x08)
	Unknown NearPlayerController; // 0x468(0x08)
	Unknown NearTargetPawn; // 0x470(0x08)
	Unknown AttackTargetPawn; // 0x478(0x08)
	Unknown MovementComponent; // 0x310(0x08)
	int32_t LoopCount; // 0x318(0x04)
	Unknown FixedStartingPoint; // 0x5d8(0x08)
	Unknown bScrambled; // 0x5e0(0x01)
	Unknown AudioEmitter; // 0x5e8(0x08)
	Unknown StartFlyingEvent; // 0x5f0(0x08)
	Unknown StopFlyingEvent; // 0x5f8(0x08)
	Unknown FlyingSoundHandle; // 0x600(0x04)
	Unknown Aircrafts; // 0x608(0x10)
	Unknown AircraftOrdersForEv; // 0x618(0x10)
	Unknown AircraftOrdersForOddFormation; // 0x628(0x10)
	Unknown MovementMethod; // 0x638(0x01)
	float ScramblingDuration; // 0x63c(0x04)
	float ScramblingSpeed; // 0x640(0x04)
	float DistanceFromBorder; // 0x644(0x04)
	float SpeedToChangeAltitude; // 0x648(0x04)
	float TargetAltitude; // 0x64c(0x04)
	float AltitudeFromTargetAtFirst; // 0x650(0x04)
	Unknown CineCamera; // 0x658(0x08)
	Unknown AircraftRoot; // 0x660(0x08)
	Unknown CineParticle; // 0x668(0x08)
	Unknown CineCameraSpline; // 0x670(0x08)
	Unknown CineDeltaLocation; // 0x678(0x0c)
	float CineInterpSpeed; // 0x684(0x04)
	float CineInterpSpeedZ; // 0x688(0x04)
	Unknown CinePawn; // 0x690(0x08)
	Unknown CineController; // 0x698(0x08)
	float CineCameraBlendTime; // 0x6a0(0x04)
	Unknown CineCameraBlendFunction; // 0x6a4(0x01)
	float CineCameraBlendExp; // 0x6a8(0x04)
	Unknown bUseSplineAnimation; // 0x6ac(0x01)
	float SplineAnimationDelayTime; // 0x6b0(0x04)
	float SplineAnimationTime; // 0x6b4(0x04)
	Unknown Timeline_SplineInterp; // 0x6c0(0x98)
	Unknown Curve_SplineInterp; // 0x758(0x08)
	struct FMulticastInlineDelegate OnStartCinematic; // 0x760(0x10)
	struct FMulticastInlineDelegate OnEndCinematic; // 0x770(0x10)
	Unknown CinematicSequenceList; // 0x780(0x10)
	Unknown LevelSequenceActor; // 0x790(0x08)
	Unknown OriginLocation; // 0x7a0(0x0c)
	Unknown TargetLocation; // 0x7ac(0x0c)
	Unknown SavedRotation; // 0x7b8(0x0c)
	Unknown DescentStartPos; // 0x7c4(0x08)
	Unknown DescentEndPos; // 0x7cc(0x08)
	Unknown WeightMapInfo; // 0x838(0x08)
	Unknown bUseUpdateBloom; // 0x868(0x01)
	float BloomSpeed; // 0x86c(0x04)
	float TargetBloomIntensity; // 0x870(0x04)
	Unknown IsVisibleStartPoint; // 0x874(0x01)
	Unknown IsVisibleEndPoint; // 0x875(0x01)
	Unknown IsVisibleAircraf; // 0x876(0x01)
	Unknown IsVisibleAircraftLine; // 0x877(0x01)
	Unknown bWantsToDestroy; // 0x878(0x01)
	Unknown State; // 0x879(0x01)
	Unknown NextPoint; // 0x310(0x08)
	Unknown AirCraftRef; // 0x2a8(0x08)
	Unknown SpringArm; // 0x380(0x08)
	Unknown Camera; // 0x388(0x08)
	float StartYaw; // 0x390(0x04)
	Unknown Canvas_Aircraft; // 0x250(0x08)
	Unknown T_BoardingCount; // 0x258(0x08)
	Unknown T_MaxBoardingCount; // 0x260(0x08)
	Unknown KillAliveInfo; // 0x270(0x14)
	Unknown bUseMultiplePositions; // 0x350(0x01)
	Unknown RelativeMultiplePositions; // 0x358(0x10)
	Unknown bUseSynchronization; // 0x368(0x01)
	float LoopInterval; // 0x36c(0x04)
	Unknown ReplicatedComponent; // 0x310(0x08)
	Unknown StaticMesh; // 0x318(0x08)
	Unknown SkelMesh; // 0x320(0x08)
	Unknown ItemDetailInfo; // 0x328(0x490)
	float EquipTime_L; // 0x7b8(0x04)
	float EquipTime_R; // 0x7bc(0x04)
	float UnEquipTime; // 0x7c0(0x04)
	float EquipAnimationPlayRate_L; // 0x7c4(0x04)
	float EquipAnimationPlayRate_R; // 0x7c8(0x04)
	float UnequipAnimationPlayRate; // 0x7cc(0x04)
	Unknown bPendingEquip; // 0x7d0(0x01)
	Unknown bPendingUnEquip; // 0x7d0(0x01)
	struct FName OverrideAttachSocketName; // 0x7f8(0x08)
	struct FName OverrideAttachSocketName_Backpack; // 0x800(0x08)
	Unknown OverrideEquipAnimMontage_StandSlot; // 0x808(0x10)
	Unknown OverrideEquipAnimMontage_ProneSlot; // 0x818(0x10)
	Unknown OverrideUnequipAnimMontage_StandSlot; // 0x828(0x10)
	Unknown OverrideUnequipAnimMontage_ProneSlot; // 0x838(0x10)
	Unknown bIsEquipped; // 0x850(0x01)
	Unknown WeaponReplicatedComponent; // 0x948(0x08)
	Unknown SkelMesh1P; // 0xab8(0x08)
	Unknown WeaponDataTable; // 0x8c8(0x10)
	Unknown AttachmentItems; // 0xf90(0x10)
	Unknown AttachmentItemEnums; // 0xac8(0x10)
	Unknown IdleHandAnim_3p; // 0x8c0(0x08)
	Unknown ProneHandAnim_3p; // 0xb80(0x08)
	Unknown IdleHandAnim_1p; // 0x950(0x08)
	Unknown IdleHandAnim_Crouch; // 0xe68(0x08)
	Unknown IdleHandAnim_InVehicle; // 0xfd8(0x08)
	Unknown AOSAnim; // 0xd10(0x08)
	Unknown ADSAnim; // 0xac0(0x08)
	Unknown CollideUpsideAnim; // 0x1038(0x08)
	Unknown CollideDownsideAnim; // 0x8b8(0x08)
	Unknown CollideProneAnim; // 0xe18(0x08)
	Unknown bAlwaysMaxCollideAlpha; // 0xfe8(0x01)
	Unknown bUseSpecialProneAnimation; // 0x900(0x01)
	Unknown bDisableHandAnimDuringCollide; // 0x1b78(0x01)
	Unknown bDisableHandAnimDuringProneCollide; // 0xa58(0x01)
	Unknown SpecialProneAnimation; // 0xb10(0x08)
	Unknown SpecialProneAnimation_1P; // 0xe58(0x08)
	Unknown bUseSpecialSprintAnimation; // 0xe60(0x01)
	Unknown SpecialSprintAnimation; // 0x958(0x08)
	Unknown SpecialSprintReadyAnimation; // 0x870(0x08)
	Unknown bUseSpecialCrouchSprintAnimation; // 0xcd9(0x01)
	Unknown SpecialCrouchSprintAnimation; // 0xf20(0x08)
	Unknown SprintAnim_1P; // 0xdb8(0x08)
	Unknown Anim_SecondaryWeapon_Stand_Idle; // 0xe70(0x08)
	Unknown Anim_SecondaryWeapon_Crouch_Idle; // 0xff0(0x08)
	Unknown bUseOneHandSprintAnimation; // 0x1040(0x01)
	Unknown bDisableHandAnimDuringSprint; // 0xf38(0x01)
	float AimOffsetMinY_TPP; // 0xb20(0x04)
	float AimOffsetMaxY_TPP; // 0x8f0(0x04)
	Unknown bHideMagazineWhenEmpty; // 0xed1(0x01)
	Unknown bIsTrueDamageWeapon; // 0x940(0x01)
	Unknown WeaponInfo; // 0x1048(0xb30)
	Unknown WeaponBaseData; // 0xb88(0x110)
	Unknown ShiningEffectComponent; // 0x8b0(0x08)
	Unknown ShiningEffect; // 0xe78(0x08)
	float LastFireTime; // 0x8e8(0x04)
	int32_t magazine; // 0x1030(0x04)
	int32_t BackPackInTotalAmmoCount; // 0xfe4(0x04)
	int32_t MagazineCapacity; // 0xad8(0x04)
	float UI_CurrentDamage; // 0xf28(0x04)
	int32_t UI_CurrentRPM; // 0xdc0(0x04)
	Unknown bIsPerkWeapon; // 0xe50(0x01)
	struct FName PerkIndex; // 0xf3c(0x08)
	Unknown bIsNoDamageWeapon; // 0xcd8(0x01)
	Unknown ProhibitedforUseInVehicle; // 0xf19(0x01)
	struct FMulticastInlineDelegate OnFireDelegate; // 0xd68(0x10)
	Unknown CurrentPlayerMontage_1P; // 0xd78(0x08)
	Unknown CurrentPlayerMontage_3P; // 0xf10(0x08)
	Unknown CurrentWeaponMontage_1P; // 0x878(0x08)
	Unknown CurrentWeaponMontage_3P; // 0x8f8(0x08)
	Unknown CurrentMontageState; // 0x8ec(0x01)
	float PausedMontagePosition; // 0xab0(0x04)
	Unknown AttachmentInfoModifier; // 0x968(0x48)
	Unknown TimerHandle_UpdateActorHiddenInGame_TPPOnly; // 0xfd0(0x08)
	Unknown IdlePositionDeltaArray_FPP; // 0xdc8(0x50)
	Unknown AOSPositionDeltaArray_FPP; // 0xb28(0x50)
	float AOSPositionInterpSpeed_FPP; // 0xb7c(0x04)
	Unknown bVisibleAbsolutely; // 0xf18(0x01)
	float AmplifierLength; // 0x1bd4(0x04)
	Unknown TimerHandle_OnStartEffectEvent; // 0x1bd8(0x08)
	Unknown DetectedCharacters; // 0x1be0(0x10)
	Unknown Character; // 0x2c0(0x08)
	Unknown CharacterMovementComponent; // 0x658(0x08)
	Unknown bIsAccelerating; // 0x784(0x01)
	float ParachuteInputForward; // 0x2f0(0x04)
	float ParachuteInputRight; // 0x77c(0x04)
	Unknown bIsParachuteLanding; // 0x740(0x01)
	float Direction; // 0x2ac(0x04)
	Unknown bIsLocallyPlaying; // 0x2a8(0x01)
	Unknown bIsFreeLook; // 0x311(0x01)
	Unknown bIsProne; // 0x5f0(0x01)
	Unknown bIsCrouch; // 0x458(0x01)
	Unknown bIsMelee; // 0x620(0x01)
	Unknown bIsJumpAttack; // 0x760(0x01)
	Unknown bMoving; // 0xc4e(0x01)
	Unknown bIsClimbing; // 0x4d9(0x01)
	Unknown bIsKnockbackRolling; // 0x63c(0x01)
	int32_t IdleNum; // 0x5a0(0x04)
	float CastingRemainTime; // 0x778(0x04)
	Unknown bMovedWhileMontage; // 0x488(0x01)
	Unknown bIsFallingOrLanding; // 0x6a2(0x01)
	Unknown bIsSprintStop; // 0x6fc(0x01)
	Unknown bUseSprintAnimation; // 0x290(0x01)
	Unknown bUseSpecialSprintAnimation; // 0x3b8(0x01)
	Unknown bUseSpecialCrouchSprintAnimation; // 0x2a9(0x01)
	Unknown bUseSpecialProneAnimation; // 0x560(0x01)
	Unknown bUseFallingAnimation; // 0x534(0x01)
	Unknown bUseVehicleStandAnimation; // 0x7d0(0x01)
	Unknown bIsAirWalking; // 0x7d8(0x01)
	Unknown bIsAmplifier; // 0x5e0(0x01)
	Unknown bIsCriticalTime; // 0x535(0x01)
	Unknown bIsResuscitating; // 0x3e9(0x01)
	Unknown bIsInVehicle; // 0x5ac(0x01)
	Unknown bIsVehicleDriver; // 0x7d1(0x01)
	Unknown bEnableDriverIK_HandL; // 0x622(0x01)
	Unknown bEnableDriverIK_HandR; // 0x680(0x01)
	float DriverAimOffsetAlpha; // 0x370(0x04)
	Unknown VehicleUnarmedAnimIdle; // 0x598(0x08)
	Unknown VehicleUnarmedAnimStand; // 0x708(0x08)
	Unknown VehicleAnimIdle; // 0x500(0x08)
	Unknown VehicleAnimAOS; // 0x378(0x08)
	Unknown VehicleAnimIdleForMontagePlay; // 0x5f8(0x08)
	Unknown VehicleAimingAimOffset; // 0xc30(0x08)
	Unknown VehicleIdleAimOffset; // 0x608(0x08)
	Unknown VehicleUnderThrowAimOffset; // 0x7c8(0x08)
	Unknown VehicleAimBlending; // 0x7b0(0x08)
	Unknown VehicleHandlingIdleAnim; // 0x628(0x08)
	Unknown VehicleHandlingLeftAnim; // 0x538(0x08)
	Unknown VehicleHandlingRightAnim; // 0x5b8(0x08)
	Unknown IsVehicleAimingMotion; // 0x6a1(0x01)
	float VehicleADSBlendTime; // 0x49c(0x04)
	float VehicleADSBlendDirectTime; // 0x41c(0x04)
	float VehicleAimingBlendTime; // 0x5c4(0x04)
	float VehicleAimingBlendDirectTime; // 0x42c(0x04)
	Unknown bUseVehicleAimingAimOffset; // 0x591(0x01)
	float VehicleAOSBlendingAngle; // 0x650(0x04)
	float VehicleAOSBlendingPlayRate; // 0x5a4(0x04)
	Unknown bIsHandlebar; // 0x754(0x01)
	Unknown BS_HandlebarVehicle; // 0x408(0x08)
	float HandlebarDirection; // 0x530(0x04)
	float HandlebarSpeed; // 0x73c(0x04)
	Unknown bIsLeftSteering; // 0x6ce(0x01)
	Unknown bIsRightSteering; // 0x6e8(0x01)
	float LeftSteeringPlayRate; // 0x32c(0x04)
	float RightSteeringPlayRate; // 0x58c(0x04)
	Unknown bIsIdleSteering; // 0x544(0x01)
	Unknown IsLadderAnim; // 0x76c(0x01)
	Unknown IsPawnOnLadder; // 0x39c(0x01)
	Unknown IsLadderSliding; // 0x6b4(0x01)
	Unknown LadderIdleMotion; // 0x728(0x01)
	Unknown LadderIdleIsLeft; // 0x2b4(0x01)
	float LadderBlendTime; // 0x7a4(0x04)
	float EvaluateAnimSequence; // 0x724(0x04)
	Unknown AS_Ladder_Up_Loop; // 0x5c8(0x08)
	Unknown LadderIKLocation_HandL; // 0x3c4(0x0c)
	Unknown LadderIKLocation_HandR; // 0x330(0x0c)
	Unknown LadderIKLocation_FootL; // 0x57c(0x0c)
	Unknown LadderIKLocation_FootR; // 0x48c(0x0c)
	Unknown bEnableLadderIK_HandL; // 0x6d8(0x01)
	Unknown bEnableLadderIK_HandR; // 0xc21(0x01)
	Unknown bEnableLadderIK_FootL; // 0x6cc(0x01)
	Unknown bEnableLadderIK_FootR; // 0x4e0(0x01)
	Unknown AimOffset; // 0x474(0x08)
	Unknown bEnableAimOffset; // 0x418(0x01)
	Unknown bEnableSprintAimOffset; // 0x698(0x01)
	Unknown bIsAimingDownside; // 0x428(0x01)
	float DownsideBlendTime; // 0xc40(0x04)
	float AimOffsetInterpSpeed; // 0xc00(0x04)
	Unknown bIsPlayingWeaponMontage; // 0x301(0x01)
	Unknown bIsPlayingCollideWeaponMontage; // 0x7a0(0x01)
	Unknown bIsADS; // 0x738(0x01)
	Unknown CollideUpsideAnim; // 0x748(0x08)
	Unknown CollideDownsideAnim; // 0x6c0(0x08)
	Unknown CollideProneAnim; // 0x4b8(0x08)
	Unknown bIsWeaponColliding; // 0x755(0x01)
	Unknown WeaponType; // 0x2b6(0x01)
	Unknown WeaponAnimType; // 0x75f(0x01)
	Unknown SimpleWeaponAnimType; // 0x621(0x01)
	Unknown bIsEquippingThrowWeapon; // 0x661(0x01)
	Unknown bIsProneColliding; // 0x663(0x01)
	Unknown WeaponHandAnim; // 0x798(0x08)
	Unknown WeaponHandAnim_Crouch; // 0x3f8(0x08)
	Unknown WeaponHandAnim_Prone; // 0x730(0x08)
	Unknown WeaponHandAnim_InVehicle; // 0x298(0x08)
	float WeaponHandAnimAlpha; // 0xc1c(0x04)
	float AOS_Weight; // 0x350(0x04)
	float AOS_Weight_InterpSpeed; // 0x2e4(0x04)
	Unknown CurrentAOSAnim; // 0xc10(0x08)
	Unknown CurrentADSAnim; // 0x568(0x08)
	Unknown SecondaryWeapon_Stand_Idle; // 0x2f8(0x08)
	Unknown SecondaryWeapon_Crouch_Idle; // 0x3b0(0x08)
	Unknown ThrowingWeaponState; // 0x644(0x01)
	Unknown GrenadeThrowingType; // 0x3e8(0x01)
	Unknown ThrowingWeapon_Stand_Idle; // 0x2b8(0x08)
	Unknown ThrowingWeapon_Stand_Idle_Under; // 0x3d8(0x08)
	Unknown ThrowingWeapon_Stand_PinOff_Idle; // 0xbe8(0x08)
	Unknown ThrowingWeapon_Stand_PinOff_Idle_Additive; // 0x340(0x08)
	Unknown ThrowingWeapon_Stand_ThrowUnder; // 0x3a0(0x08)
	Unknown ThrowingWeapon_Stand_ThrowUndere_Add; // 0x480(0x08)
	Unknown ThrowingWeapon_Crouch_Idle; // 0x548(0x08)
	Unknown ThrowingWeapon_Crouch_PinOff_Idle; // 0x4a8(0x08)
	Unknown ThrowingWeapon_Crouch_PinOff_Idle_Additive; // 0xc38(0x08)
	Unknown ThrowingWeapon_Crouch_ThrowUnder_Idle; // 0x2d8(0x08)
	Unknown ThrowingWeapon_Crouch_ThrowUnder_Idle_Additive; // 0x4e8(0x08)
	Unknown ThrowingWeapon_Prone_Idle; // 0x318(0x08)
	Unknown ThrowingWeapon_Prone_PinOff_Idle_ThrowOver; // 0x410(0x08)
	Unknown ThrowingWeapon_Prone_PinOff_Idle_ThrowUnder; // 0x3e0(0x08)
	Unknown MeleeWeapon_Stand_Idle; // 0x710(0x08)
	Unknown MeleeWeapon_Crouch_Idle; // 0x280(0x08)
	Unknown MeleeWeapon_Prone_Idle; // 0x448(0x08)
	float BS_SprintSpeed; // 0x684(0x04)
	float BS_IdleSpeed; // 0x43c(0x04)
	float BS_SprintSpeedLimit; // 0x420(0x04)
	float FallSpeed; // 0x700(0x04)
	float AimOffsetBlendTime; // 0x4b0(0x04)
	float UseSprintAnimBlendTime; // 0x594(0x04)
	float WeaponCollideAlpha; // 0x524(0x04)
	float WeaponMontageCollideAlpha; // 0x2d0(0x04)
	float AimOffsetAlpha; // 0x5a8(0x04)
	float DoorAnimAlpha; // 0x4dc(0x04)
	float FootPosition; // 0x5dc(0x04)
	float FootPositionDirection; // 0x308(0x04)
	Unknown bUseRightFootAnimation; // 0x76d(0x01)
	float LeanRotation; // 0x450(0x04)
	float LeanAcceleration; // 0x4a4(0x04)
	Unknown bLockRotation; // 0x2b5(0x01)
	Unknown MovementDirection; // 0x33c(0x01)
	Unknown SpecialSprintAnimation; // 0x358(0x08)
	Unknown SpecialCrouchSprintAnimation; // 0x348(0x08)
	Unknown SpecialSprintReadyAnimation; // 0x430(0x08)
	Unknown SpecialProneAnimation; // 0x268(0x08)
	Unknown FallingAnimParams; // 0x4c8(0x0c)
	float LeanInAir; // 0x2a0(0x04)
	Unknown JumpAnimSequence_Unarmed; // 0x648(0x08)
	Unknown JumpAnimSequence_Rifle; // 0x6e0(0x08)
	Unknown JumpAnimSequence_Pistol; // 0x6a8(0x08)
	Unknown JumpAnim_Unarmed_NotMoving; // 0xbf8(0x08)
	Unknown JumpAnim_Unarmed_Moving; // 0x3f0(0x08)
	Unknown JumpAnim_Rifle_NotMoving; // 0x668(0x08)
	Unknown JumpAnim_Rifle_Moving; // 0x320(0x08)
	Unknown JumpAnim_Pistol_NotMoving; // 0x528(0x08)
	Unknown JumpAnim_Pistol_Mov; // 0x6f0(0x08)
	Unknown ToCriticalTime; // 0x7b8(0x08)
	Unknown CriticalTimeIdle; // 0x5e8(0x08)
	Unknown Resuscitated; // 0x678(0x08)
	Unknown bUnderWaterSurface; // 0x5f1(0x01)
	float SwimDirection; // 0x6a4(0x04)
	Unknown FinalSwimRotation; // 0x570(0x0c)
	Unknown TurnInPlaceInfo; // 0x7e8(0x400)
	float TurnInPlaceRepeatTriggerTime; // 0x670(0x04)
	float TurnInPlaceRepeatTriggerAngle; // 0x3a8(0x04)
	float TurnInPlaceRepeatTime; // 0x2cc(0x04)
	float TurnInPlaceRepeatAngle; // 0x2d4(0x04)
	float TurnInPlaceRepeatTimeCrouch; // 0x2e8(0x04)
	float TurnInPlaceRepeatTimeProne; // 0x71c(0x04)
	float TurnInPlace; // 0x6b0(0x04)
	float TurnInPlaceBepeatTimePv; // 0x69c(0x04)
	Unknown bTurnInPlaceRepeatCheat; // 0x5e1(0x01)
	Unknown ParticleSystem_WaterDust; // 0x518(0x08)
	Unknown bUsePredictedAirTime; // 0x545(0x01)
	Unknown bHitPredictedInAirTime; // 0x537(0x01)
	float HitPredictedZ; // 0x454(0x04)
	float WaterSurfaceHeight; // 0xc08(0x04)
	float SwimTransformAlpha; // 0x470(0x04)
	float SprintReadyEnteredTime; // 0x30c(0x04)
	Unknown bCanEnterSprintReadyState; // 0x288(0x01)
	float DebuffAlpha_Burn_FullBody; // 0x7d4(0x04)
	float DebuffAlpha_Burn_UpperBody; // 0x328(0x04)
	float DebuffAlpha_Hurt_Additive; // 0x294(0x04)
	float DebuffAlpha_Hurt_Layered; // 0x2e0(0x04)
	float Hurt_Additive_RightHandAlpha; // 0x5c0(0x04)
	float ExplicitTime_FallingAnim; // 0x274(0x04)
	Unknown bIsUnarmedHeadBanging; // 0x5e3(0x01)
	float HeadBangingAlpha; // 0x424(0x04)
	int32_t HeadBangingAnimIndex; // 0x600(0x04)
	float HeadBangingCurrentPlayRate; // 0x718(0x04)
	float DescentForwardPicthMin; // 0x4d4(0x04)
	float DescentIdlePicthMin; // 0x638(0x04)
	Unknown DescentBackwardMontage; // 0x390(0x08)
	float BS_DescentRotationInput; // 0x2ec(0x04)
	float RightArmAnimAlpha; // 0x468(0x04)
	float ThrowWeaponCookingAnimAlpha; // 0x304(0x04)
	float EquipAnimAlpha; // 0x554(0x04)
	float UpperBodySlotAlpha; // 0x6c8(0x04)
	Unknown CharacterRotationCorrectionValueByLeanState; // 0x764(0x08)
	Unknown CharacterRef; // 0x268(0x08)
	Unknown CurrentWeaponRef; // 0x270(0x08)
	Unknown AnimInstanceRef; // 0x278(0x08)
	Unknown AnimInstancePostProsessRef; // 0x280(0x08)
	Unknown MeshComponent_3P; // 0x288(0x08)
	float DeltaTime; // 0x290(0x04)
	float CurrentScopeAngle; // 0x294(0x04)
	Unknown CurrentCameraTransform; // 0x2a0(0x30)
	Unknown BaseGripAnimation; // 0x2d0(0x08)
	Unknown WeaponHandAnim; // 0x2d8(0x08)
	Unknown WeaponSprintAnim; // 0x2e0(0x08)
	Unknown WeaponType; // 0x2e8(0x01)
	Unknown WeaponAnimType; // 0x2e9(0x01)
	Unknown FireType; // 0x2ea(0x01)
	int32_t IdleNum; // 0x2ec(0x04)
	float CharacterDirection; // 0x2f0(0x04)
	float CharacterSpeed; // 0x2f4(0x04)
	Unknown SpinePosition; // 0x2f8(0x0c)
	Unknown SpineJointPosition; // 0x304(0x0c)
	Unknown SpineRotation; // 0x310(0x0c)
	Unknown bUpdateProneSlope; // 0x31c(0x01)
	Unknown ProneSlopeRotation; // 0x320(0x0c)
	Unknown ProneRootOffset; // 0x32c(0x0c)
	float PrevSurfaceDegrees; // 0x338(0x04)
	Unknown RecoilVector; // 0x33c(0x0c)
	Unknown RecoilRotator; // 0x348(0x0c)
	Unknown bEnableModifySpine; // 0x354(0x01)
	Unknown bEnableGenderIK; // 0x355(0x01)
	Unknown bEnableWeaponMontageGenderIK; // 0x356(0x01)
	float ADSAlpha; // 0x358(0x04)
	Unknown bIsNoWeapon; // 0x35c(0x01)
	Unknown bIsNoRangedWeapon; // 0x35d(0x01)
	Unknown bUseFirstPersonSM; // 0x35e(0x01)
	Unknown bUseThirdPersonLowerBody; // 0x35f(0x01)
	float BlendTime_NoWeapon; // 0x360(0x04)
	float BlendTime_ADS; // 0x364(0x04)
	Unknown bIsFreeLook; // 0x368(0x01)
	Unknown bIsMoving; // 0x369(0x01)
	Unknown bIsProne; // 0x36a(0x01)
	Unknown bCrouching; // 0x36b(0x01)
	Unknown bIsSprint; // 0x36c(0x01)
	Unknown bIsJumping; // 0x36d(0x01)
	Unknown bIsSwimming; // 0x36e(0x01)
	Unknown bUnderWaterSurface; // 0x36f(0x01)
	Unknown bIsLandStop; // 0x370(0x01)
	Unknown bIsAirWalking; // 0x371(0x01)
	Unknown bIsClimbing; // 0x372(0x01)
	Unknown bIsADS; // 0x373(0x01)
	Unknown bIsAOS; // 0x374(0x01)
	Unknown bIsFiring; // 0x375(0x01)
	Unknown bUseSpecialProneAnimation; // 0x376(0x01)
	Unknown SpecialProneAnimation; // 0x378(0x08)
	Unknown bIsAmplifier; // 0x380(0x01)
	Unknown bIsReviving; // 0x381(0x01)
	Unknown bIsKnockedOut; // 0x382(0x01)
	float CastingRemainTime; // 0x384(0x04)
	Unknown bHoldWeaponPosition; // 0x388(0x01)
	Unknown bLastHoldWeaponPosition; // 0x389(0x01)
	Unknown bUseTPPUpper; // 0x38a(0x01)
	Unknown bEnableHandIK; // 0x38b(0x01)
	Unknown bUseLeftHandIK; // 0x38c(0x01)
	Unknown bIsWeaponAttachedToCamera; // 0x38d(0x01)
	Unknown bUseGrip; // 0x38e(0x01)
	Unknown bUseLeanRotation; // 0x38f(0x01)
	Unknown bAttachWeaponToLHand; // 0x390(0x01)
	float DisableHandIKTimer; // 0x394(0x04)
	float AttachWeaponToLHandTimer; // 0x398(0x04)
	Unknown bUseLeftArm; // 0x39c(0x01)
	float BlendTime_HandIK; // 0x3a0(0x04)
	struct FName AttachWeaponBoneToLHand; // 0x3a4(0x08)
	Unknown AttachWeaponToLHandTransform; // 0x3b0(0x30)
	Unknown AttachLHandIK_Location; // 0x3e0(0x0c)
	Unknown AttachLHandIK_Rotation; // 0x3ec(0x0c)
	Unknown bReloading; // 0x3f8(0x01)
	Unknown bBoltAction; // 0x3f9(0x01)
	Unknown MovementMode; // 0x3fa(0x01)
	Unknown bIsInVehicle; // 0x3fb(0x01)
	Unknown bIsVehiclePassenger; // 0x3fc(0x01)
	Unknown bIsVehicleDriver; // 0x3fd(0x01)
	Unknown VehicleRef; // 0x400(0x08)
	float VehicleAimOffsetYaw; // 0x408(0x04)
	float VehicleAimOffsetPitch; // 0x40c(0x04)
	Unknown bUseHandlebarAnim; // 0x410(0x01)
	Unknown bUseOnlyRightHandInADS; // 0x411(0x01)
	Unknown BS_DriverHandleBar; // 0x418(0x08)
	Unknown VehicleHandlingIdleAnim; // 0x420(0x08)
	Unknown VehicleHandlingLeftAnim; // 0x428(0x08)
	Unknown VehicleHandlingRightAnim; // 0x430(0x08)
	Unknown DriverAimOffsetBasePose; // 0x438(0x08)
	Unknown DriverAimOffset; // 0x440(0x08)
	Unknown VehicleLeftHandIK; // 0x450(0x30)
	Unknown VehicleLeftHandIK_Location; // 0x480(0x0c)
	Unknown VehicleLeftHandIK_Rotation; // 0x48c(0x0c)
	Unknown VehicleRightHandIK; // 0x4a0(0x30)
	Unknown VehicleRightHandIK_Location; // 0x4d0(0x0c)
	Unknown VehicleRightHandIK_Rotation; // 0x4dc(0x0c)
	Unknown VehicleLeftFootIK; // 0x4f0(0x30)
	Unknown VehicleRightFootIK; // 0x520(0x30)
	Unknown bHasFootIKSocket; // 0x550(0x01)
	Unknown bUseVehicleLeftHandIK; // 0x551(0x01)
	Unknown bUseVehicleRightHandIK; // 0x552(0x01)
	Unknown bIsLeftSteering; // 0x553(0x01)
	Unknown bIsRightSteering; // 0x554(0x01)
	float LeftSteeringPlayRate; // 0x558(0x04)
	float RightSteeringPlayRate; // 0x55c(0x04)
	Unknown bIsIdleSteering; // 0x560(0x01)
	float DriverIdlePoseBlendAlpha; // 0x564(0x04)
	float WeaponTransformTimer; // 0x568(0x04)
	float WeaponTransformMaxTime; // 0x56c(0x04)
	float AOSAlpha; // 0x570(0x04)
	float SprintSpeedModifier; // 0x574(0x04)
	Unknown CurrentWeaponWorldTransform; // 0x580(0x30)
	Unknown LeftHandComponentIK; // 0x5b0(0x30)
	Unknown RightHandComponentIK; // 0x5e0(0x30)
	Unknown LeftHandIK_Location; // 0x610(0x0c)
	Unknown LeftHandIK_Rotation; // 0x61c(0x0c)
	Unknown RightHandIK_Location; // 0x628(0x0c)
	Unknown RightHandIK_Rotation; // 0x634(0x0c)
	Unknown FemaleLeftHandIKModify; // 0x640(0x0c)
	Unknown IdleCameraPosition; // 0x64c(0x0c)
	Unknown LeanRotation; // 0x658(0x0c)
	Unknown ThrowingWeaponType; // 0x664(0x01)
	Unknown ThrowingWeaponState; // 0x665(0x01)
	Unknown GrenadeThrowingType; // 0x666(0x01)
	Unknown bIsUnderThrowType; // 0x667(0x01)
	Unknown ThrowingWeapon_Stand_Idle; // 0x668(0x08)
	Unknown ThrowingWeapon_Stand_Idle_Under; // 0x670(0x08)
	Unknown ThrowingWeapon_Stand_PinOff_Idle; // 0x678(0x08)
	Unknown ThrowingWeapon_Stand_PinOff_Idle_Additive; // 0x680(0x08)
	Unknown ThrowingWeapon_Stand_ThrowUnder; // 0x688(0x08)
	Unknown ThrowingWeapon_Stand_ThrowUndere_Add; // 0x690(0x08)
	Unknown ThrowingWeapon_Crouch_Idle; // 0x698(0x08)
	Unknown ThrowingWeapon_Crouch_PinOff_Idle; // 0x6a0(0x08)
	Unknown ThrowingWeapon_Crouch_PinOff_Idle_Additive; // 0x6a8(0x08)
	Unknown ThrowingWeapon_Crouch_ThrowUnder_Idle; // 0x6b0(0x08)
	Unknown ThrowingWeapon_Crouch_ThrowUnder_Idle_Additive; // 0x6b8(0x08)
	Unknown ThrowingWeapon_Prone_Idle; // 0x6c0(0x08)
	Unknown ThrowingWeapon_Prone_PinOff_Idle_ThrowOver; // 0x6c8(0x08)
	Unknown ThrowingWeapon_Prone_PinOff_Idle_ThrowUnder; // 0x6d0(0x08)
	Unknown MontageListWithoutHandIK; // 0x6d8(0x10)
	Unknown bIsCold; // 0x6e9(0x01)
	Unknown bIsBurning; // 0x6ea(0x01)
	float HurtAlpha; // 0x6ec(0x04)
	float HeadBangingAlpha; // 0x6f0(0x04)
	Unknown bUseFallingAnimation; // 0x6f4(0x01)
	Unknown CharacterRef; // 0x268(0x08)
	float DeltaTime; // 0x270(0x04)
	float InputForward; // 0x274(0x04)
	float InputRight; // 0x278(0x04)
	Unknown CharacterState; // 0x27c(0x01)
	Unknown bIsDescentFalling; // 0x27d(0x01)
	Unknown LeftHandleTransition; // 0x280(0x0c)
	Unknown RightHandleTransition; // 0x28c(0x0c)
	Unknown bNeedToSkipTransitionBlend; // 0x298(0x01)
	Unknown Transition_InDescentToStart; // 0x299(0x01)
	Unknown Transition_Stand_NotMovingToMoving; // 0x29a(0x01)
	Unknown Transition_StartToMovement_3; // 0x29b(0x01)
	Unknown Transition_MovementToEnd; // 0x29c(0x01)
	Unknown Transition_EndToInDescent; // 0x29d(0x01)
	Unknown ParachuteSeparationAnim_OnLand; // 0x2a0(0x08)
	Unknown ParachuteSeparationAnim_OnAir; // 0x2a8(0x08)
	Unknown SpawnedParachuteActor; // 0x2b0(0x08)
	float SpawnedParachuteDissolveValue; // 0x2b8(0x04)
	float SpawnedParachuteDissolveStartTime; // 0x2bc(0x04)
	float SpawnedParachuteDissolveDuration; // 0x2c0(0x04)
	float ParachuteSpawnTime; // 0x2c4(0x04)
	Unknown Character; // 0x268(0x08)
	Unknown CharacterMovementComponent; // 0x270(0x08)
	float DeltaTime; // 0x278(0x04)
	Unknown AM_CheckMontageIsPlaying; // 0x280(0x10)
	Unknown PelvisZOffset; // 0x290(0x0c)
	Unknown LeftFootZOffset; // 0x29c(0x0c)
	Unknown RightFootZOffset; // 0x2a8(0x0c)
	Unknown LeftFootRotationOffset; // 0x2b4(0x0c)
	Unknown RightFootRotationOffset; // 0x2c0(0x0c)
	Unknown RootRotationOffset; // 0x2cc(0x0c)
	Unknown RootZOffset; // 0x2d8(0x0c)
	Unknown bEnablePelvisZOffset; // 0x2e4(0x01)
	Unknown bEnableLeftFootIK; // 0x2e5(0x01)
	Unknown bEnableRightFootIK; // 0x2e6(0x01)
	float ZOffsetMaxLimit; // 0x2ec(0x04)
	float ZOffsetMinLimit; // 0x2f0(0x04)
	float RollOffsetMaxLimit; // 0x2f4(0x04)
	float RollOffsetMinLimit; // 0x2f8(0x04)
	float PitchOffsetMaxLimit; // 0x2fc(0x04)
	float PitchOffsetMinLimit; // 0x300(0x04)
	float ZOffsetFastInterpSpeed; // 0x304(0x04)
	float ZOffsetSlowinterpSpeed; // 0x308(0x04)
	float RotationOffsetInterpSpeed; // 0x30c(0x04)
	float RootRotationOffsetInterpSpeed; // 0x310(0x04)
	struct FName LeftFootName; // 0x314(0x08)
	struct FName RightFootName; // 0x31c(0x08)
	struct FName RootName; // 0x324(0x08)
	float TraceStartHeight; // 0x32c(0x04)
	float TraceLength; // 0x330(0x04)
	Unknown EnableHandIK; // 0x334(0x01)
	Unknown bDisableHandIK_ByAnimNotifyState; // 0x335(0x01)
	Unknown IsEquippingNormalGrip; // 0x336(0x01)
	Unknown IdleHandAnim; // 0x338(0x08)
	Unknown bIsPlayingWeaponMontage; // 0x340(0x01)
	Unknown bForceUseGripPose; // 0x341(0x01)
	Unknown HandL_Location; // 0x344(0x0c)
	Unknown HandL_Rotation; // 0x350(0x0c)
	Unknown Collide_HandR_Rotation; // 0x35c(0x0c)
	Unknown bEnableCollideHandR_Rotation; // 0x368(0x01)
	float HandR_Rotation_Alpha; // 0x36c(0x04)
	float HandIK_BlendTime; // 0x370(0x04)
	Unknown GripType; // 0x374(0x01)
	float LeanValue; // 0x378(0x04)
	Unknown Spine01_LeanRotation; // 0x37c(0x0c)
	Unknown Lowerarm_r_LeanRotation; // 0x388(0x0c)
	Unknown Pelvis_CrouchLeanTranslation; // 0x394(0x0c)
	Unknown UpperarmR_LeanRotation; // 0x3a0(0x0c)
	Unknown bUpdateLeanNodes; // 0x3ac(0x01)
	Unknown LeftHandActionPos; // 0x3b0(0x0c)
	Unknown RightHandActionPos; // 0x3bc(0x0c)
	Unknown bIsInVehicle; // 0x3c8(0x01)
	Unknown bUseDriverTwoHandIK; // 0x3c9(0x01)
	Unknown bEnableDriverIK_HandL; // 0x3ca(0x01)
	Unknown bEnableDriverIK_HandR; // 0x3cb(0x01)
	Unknown bUsePassengerTwoHandIK; // 0x3cc(0x01)
	float VehicleFootIKAlpha; // 0x3d0(0x04)
	Unknown VehicleLeftHandIK_Location; // 0x3d4(0x0c)
	Unknown VehicleLeftHandIK_Rotation; // 0x3e0(0x0c)
	Unknown VehicleRightHandIK_Location; // 0x3ec(0x0c)
	Unknown VehicleRightHandIK_Rotation; // 0x3f8(0x0c)
	Unknown VehicleLeftFootIK_Location; // 0x404(0x0c)
	Unknown VehicleLeftFootIK_Rotation; // 0x410(0x0c)
	Unknown VehicleRightFootIK_Location; // 0x41c(0x0c)
	Unknown VehicleRightFootIK_Rotation; // 0x428(0x0c)
	Unknown bIsParkourArmIK; // 0x434(0x01)
	Unknown bIsAimingDownside; // 0x435(0x01)
	Unknown bIsIdleWeaponColliding; // 0x436(0x01)
	Unknown bIsProneWeaponColliding; // 0x437(0x01)
	float CollideAlpha; // 0x438(0x04)
	Unknown EnableFootIK; // 0x43c(0x01)
	float LeftFootTarget; // 0x440(0x04)
	float RightFootTarget; // 0x444(0x04)
	Unknown LeftFootLocation; // 0x448(0x0c)
	Unknown RightFootLocation; // 0x454(0x0c)
	Unknown bUseTwoHandIK; // 0x47c(0x01)
	Unknown MovementMode; // 0x47d(0x01)
	Unknown CustomMovementMode; // 0x47e(0x01)
	Unknown JointTargetLocationR; // 0x480(0x0c)
	Unknown JointTargetLocationL; // 0x48c(0x0c)
	Unknown EffectorLocationR; // 0x498(0x0c)
	Unknown PakourIKLocationR; // 0x4a4(0x0c)
	Unknown PakourIKLocationL; // 0x4b0(0x0c)
	Unknown bIsProned; // 0x4bc(0x01)
	Unknown Pelvis_LeanTranslation; // 0x4c0(0x0c)
	Unknown bIsCrouch; // 0x4cc(0x01)
	Unknown bIsLocallyControlled; // 0x4cd(0x01)
	Unknown IsEquippingRangedWeapon; // 0x4ce(0x01)
	Unknown UpperarmL_LeanRotation; // 0x4d0(0x0c)
	Unknown LeanLeftSide; // 0x4dc(0x01)
	Unknown bIsOneHandSprint; // 0x4dd(0x01)
	float OneHandSprintLastTime; // 0x4e0(0x04)
	Unknown bEnableAnimDynamics; // 0x4e4(0x01)
	Unknown bUsePonytailDynamics; // 0x4e5(0x01)
	float PonytailDynamicsAlpha; // 0x4e8(0x04)
	Unknown bUseHairDynamics; // 0x4ec(0x01)
	float HairDynamicsAlpha; // 0x4f0(0x04)
	Unknown bUseSkirtDynamics; // 0x4f4(0x01)
	float SkirtDynamicsAlpha; // 0x4f8(0x04)
	Unknown bUseBackpackDynamics; // 0x4fc(0x01)
	float BackpackDynamicsAlpha; // 0x500(0x04)
	Unknown bUseBreastDynamics; // 0x504(0x01)
	Unknown bUseCoatDynamics; // 0x505(0x01)
	Unknown bUseGhillieDynamics; // 0x506(0x01)
	float KawaiiAlpha; // 0x508(0x04)
	float BoneDrivenAlpha; // 0x50c(0x04)
	float TargetKawaiiAlpha; // 0x510(0x04)
	float TargetBoneDrivenAlpha; // 0x514(0x04)
	Unknown OwningActorRef; // 0x268(0x08)
	Unknown CharacterRef; // 0x270(0x08)
	float DeltaTime; // 0x278(0x04)
	Unknown bIsCharacterProned; // 0x27c(0x01)
	Unknown bIsThirdPerson; // 0x27d(0x01)
	Unknown bIsOwnerPlayingAnimation; // 0x27e(0x01)
	float AnimStartPosition; // 0x280(0x04)
	float AnimPlayRate; // 0x284(0x04)
	float OwnerCastingRemainTime; // 0x288(0x04)
	Unknown CharacterRef; // 0x268(0x08)
	Unknown WeaponRef; // 0x270(0x08)
	Unknown CharacterAnimInstance1PRef; // 0x278(0x08)
	float DeltaTime; // 0x280(0x04)
	Unknown ArmsOffset; // 0x284(0x0c)
	Unknown RootJointScale; // 0x290(0x0c)
	float ItemRecoilPitchAngle; // 0x29c(0x04)
	float ItemRecoilYawAngle; // 0x2a0(0x04)
	Unknown CollideRotation; // 0x2a4(0x0c)
	float CollideAlpha; // 0x2b0(0x04)
	Unknown bIsDefaultTransformUpdated; // 0x2b4(0x01)
	Unknown SightSocketDeltaLocation; // 0x2b8(0x0c)
	Unknown SightSocketDeltaRotation; // 0x2c4(0x0c)
	Unknown bIsADS; // 0x2d0(0x01)
	Unknown WeaponLocation; // 0x2d4(0x0c)
	Unknown WeaponRotation; // 0x2e0(0x0c)
	Unknown WeaponTransform; // 0x2f0(0x30)
	Unknown FireMode; // 0x320(0x01)
	Unknown bIsAimingDownside; // 0x321(0x01)
	struct FName WeaponBone; // 0x30(0x08)
	float UpdateFrequency; // 0x30(0x04)
	struct FName CheckBoneName; // 0x34(0x08)
	float TraceRadius; // 0x3c(0x04)
	float UpdateFrequency; // 0x30(0x04)
	struct FName TraceStartSocketName; // 0x34(0x08)
	struct FName TraceEndSocketName; // 0x3c(0x08)
	float TraceRadius; // 0x44(0x04)
	float ApplyDamage_EndTime; // 0x48(0x04)
	Unknown PSTemplate; // 0x30(0x08)
	Unknown PSTemplate_OnlyOtherPlayerSee; // 0x38(0x08)
	struct FName SocketName; // 0x40(0x08)
	Unknown LocationOffset; // 0x48(0x0c)
	Unknown RotationOffset; // 0x54(0x0c)
	Unknown Scale3D; // 0x60(0x0c)
	Unknown bDestroyAtEnd; // 0x6c(0x01)
	Unknown StaticMesh; // 0x38(0x28)
	Unknown SkeletalMesh; // 0x60(0x28)
	Unknown bUsePhysics; // 0x88(0x01)
	struct FName AttachSocketName; // 0x8c(0x08)
	float AttachDuration; // 0x94(0x04)
	Unknown ScalarParamDatas; // 0x98(0x10)
	struct FName WeaponSlotNameForSpawn; // 0x38(0x08)
	Unknown MagazineClass; // 0x40(0x08)
	Unknown ConditionedSound; // 0x38(0x10)
	Unknown bFollow; // 0x48(0x01)
	Unknown bPlayOnServer; // 0x49(0x01)
	Unknown bPlayWhileFalling; // 0x4a(0x01)
	Unknown bPlayOnlyForPawnMesh; // 0x4b(0x01)
	Unknown bPlayOnlyLocalPlayer; // 0x4c(0x01)
	Unknown bForced2D; // 0x4d(0x01)
	Unknown bUseConditionProvider; // 0x4e(0x01)
	Unknown TargetMontage; // 0x38(0x08)
	float PlayRate; // 0x40(0x04)
	struct FName StartSectionName; // 0x44(0x08)
	struct FName EffectRowName; // 0x38(0x08)
	float Duration; // 0x40(0x04)
	Unknown bFPPOnly; // 0x44(0x01)
	struct FName SoundIdx; // 0x38(0x08)
	Unknown StateConditionMap; // 0x28(0x50)
	Unknown SphereCollision; // 0x310(0x08)
	Unknown AreaParticle; // 0x318(0x08)
	Unknown AreaParticleOwner; // 0x320(0x08)
	Unknown AreaSkillInfo; // 0x328(0x08)
	Unknown OverlappedCharacters; // 0x330(0x10)
	Unknown AreaSkillZoneInfo; // 0x340(0x20)
	Unknown WetFogZoneInfo; // 0x368(0x0c)
	Unknown EffectActiveCharacters; // 0x378(0x10)
	Unknown CoherentWidget; // 0x28(0x08)
	Unknown ArmoryMeshMap; // 0x30(0x50)
	struct FMulticastInlineDelegate ChangeSceneDelegate; // 0x80(0x10)
	struct FMulticastInlineDelegate MouseEventDelegate; // 0x90(0x10)
	Unknown ResultInfo; // 0xa0(0x38)
	int32_t CurrentMaterialCount; // 0xd8(0x04)
	struct FMulticastInlineDelegate SkipIdentifiedDelegate; // 0xe0(0x10)
	struct FMulticastInlineDelegate ArmoryTabDelegate; // 0xf0(0x10)
	Unknown ArmoryMesh; // 0x310(0x08)
	Unknown DefaultTransform; // 0x320(0x30)
	Unknown LocationOffset; // 0x350(0x0c)
	Unknown RotationOffset; // 0x35c(0x0c)
	Unknown ScaleOffset; // 0x368(0x0c)
	Unknown WorldStaticMesh; // 0x310(0x08)
	Unknown WorldSkelMesh; // 0x318(0x08)
	Unknown ShadowStaticMesh; // 0x320(0x08)
	Unknown ShadowSkelMesh; // 0x328(0x08)
	Unknown bTurnOnPhysicsWhenDetach; // 0x330(0x01)
	Unknown LoadedAssets; // 0x338(0x10)
	Unknown Enemy_DamageFadeIn; // 0x248(0x08)
	Unknown Enemy_DamageFadeOut; // 0x250(0x08)
	Unknown Enemy_DamageBroken; // 0x258(0x08)
	Unknown TimerHandle_EventRemoveWidget; // 0x260(0x08)
	Unknown PlayerControllerRef; // 0x268(0x08)
	Unknown WidgetSwitcher_1; // 0x270(0x08)
	Unknown TextBlock_1; // 0x278(0x08)
	Unknown TextBlock_3; // 0x280(0x08)
	Unknown TextBlock_457; // 0x288(0x08)
	Unknown Image_1; // 0x290(0x08)
	Unknown Image_2; // 0x298(0x08)
	Unknown Image_145; // 0x2a0(0x08)
	Unknown Image_147; // 0x2a8(0x08)
	Unknown Image_177; // 0x2b0(0x08)
	Unknown AttackDamageWidgetInfo; // 0x2b8(0x50)
	Unknown bIsTrueDamage; // 0x308(0x01)
	Unknown bIsDestructed; // 0x309(0x01)
	Unknown WidgetLocation; // 0x30c(0x0c)
	struct FDelegate Delegate_OnEnemy_DamageFadeIn_Finished; // 0x318(0x10)
	Unknown Texture_Helmet; // 0x368(0x08)
	Unknown Texture_HelmetBroken; // 0x370(0x08)
	Unknown Texture_Chest; // 0x378(0x08)
	Unknown Texture_ChestBroken; // 0x380(0x08)
	Unknown Texture_Tire; // 0x388(0x08)
	Unknown Font_Heavy; // 0x390(0x08)
	Unknown Font_Regular; // 0x398(0x08)
	Unknown Enemy_Lv_Motion_FadeIn; // 0x248(0x08)
	Unknown Enemy_Lv_Motion_FadeOut; // 0x250(0x08)
	Unknown TimerHandle_EventRemoveWidget; // 0x258(0x08)
	Unknown PawnRef; // 0x260(0x08)
	Unknown Enemy_Name; // 0x268(0x08)
	Unknown TextBlock_Level; // 0x270(0x08)
	Unknown TextBlock_Level2; // 0x278(0x08)
	Unknown TextBlock_Name; // 0x280(0x08)
	Unknown TextBlock_Name2; // 0x288(0x08)
	Unknown Image_Icon; // 0x290(0x08)
	Unknown Image_Icon2; // 0x298(0x08)
	Unknown StateColors; // 0x30(0x50)
	Unknown NewStateColors; // 0x80(0x50)
	Unknown WorldSize; // 0xd0(0x08)
	Unknown WorldCenter; // 0xd8(0x08)
	Unknown BaseMapSize; // 0xe0(0x08)
	Unknown BitDataArray; // 0xe8(0x10)
	Unknown bUseEventRadiusAsMinBounds; // 0x488(0x01)
	float MinBoundsRadius; // 0x48c(0x04)
	struct FMulticastInlineDelegate EmitterRegisteredEv; // 0x4a0(0x10)
	struct FMulticastInlineDelegate EmitterUnregisteredEvent; // 0x4b0(0x10)
	Unknown EventAssetDataMap; // 0x30(0x50)
	Unknown AmbientMapData; // 0x4c0(0x08)
	Unknown bEnable; // 0x4f0(0x01)
	Unknown InitialState; // 0x4f1(0x01)
	Unknown ParentMeshComponent; // 0x290(0x08)
	Unknown OcclusionMethod; // 0x298(0x04)
	struct FString AmbienceState; // 0x2a0(0x10)
	Unknown bIsOnRoof; // 0x2b0(0x01)
	int8_t OcclusionHeightLevel; // 0x2b1(0x01)
	Unknown OcclusionDepthLevel; // 0x2b2(0x01)
	Unknown IndoorConditionTargets; // 0x2b3(0x01)
	int8_t HighestLevelInGroup; // 0x2c8(0x01)
	Unknown MeshType; // 0x2e1(0x01)
	int32_t LOD; // 0x2e4(0x04)
	float WeldingThreshold; // 0x2e8(0x04)
	Unknown StaticMeshSurfaceOv; // 0x2f0(0x50)
	Unknown CollisionMeshSurfaceOverride; // 0x340(0x10)
	Unknown bEnableDiffraction; // 0x350(0x01)
	Unknown bEnableDiffractionOnBoundaryEdges; // 0x350(0x01)
	Unknown GeometryData; // 0x358(0x60)
	Unknown AuxBus; // 0x408(0x08)
	struct FString AuxBusName; // 0x410(0x10)
	float SendLevel; // 0x420(0x04)
	float FadeRate; // 0x424(0x04)
	Unknown StartPos; // 0x28(0x0c)
	Unknown RotationKeyTime; // 0x38(0x10)
	Unknown RotationData; // 0x48(0x10)
	Unknown MoveKeyTime; // 0x58(0x10)
	Unknown MoveData; // 0x68(0x10)
	Unknown RunKeyTime; // 0x78(0x10)
	Unknown RunData; // 0x88(0x10)
	Unknown ActionKeyTime; // 0x98(0x10)
	Unknown ActionData; // 0xa8(0x10)
	Unknown ActionLocationData; // 0xb8(0x10)
	Unknown MainWidgetClass; // 0x400(0x08)
	Unknown MainWidget; // 0x408(0x08)
	Unknown BlueZoneMesh; // 0x310(0x08)
	Unknown PainCausingComponent; // 0x318(0x08)
	Unknown TransportPawnClass; // 0x320(0x08)
	int32_t CurrentPhase; // 0x328(0x04)
	Unknown OriginSurvivalCirclePos; // 0x32c(0x0c)
	float OriginSurvivalCircleRadius; // 0x338(0x04)
	Unknown TargetSurvivalCirclePos; // 0x33c(0x0c)
	float TargetSurvivalCircleRadius; // 0x348(0x04)
	float TimeToStartShrinking; // 0x34c(0x04)
	float TimeToEndShrinking; // 0x350(0x04)
	Unknown eState; // 0x354(0x01)
	Unknown IsVisibleTargetCircle; // 0x355(0x01)
	Unknown IsVisibleBlueZone; // 0x356(0x01)
	Unknown CurrentSurvivalCirclePos; // 0x368(0x0c)
	float CurrentSurvivalCircleRadius; // 0x374(0x04)
	struct FMulticastInlineDelegate OnBlueZoneStateChanged; // 0x378(0x10)
	struct FMulticastInlineDelegate OnSurvivalCirclePhaseChanged; // 0x388(0x10)
	struct FMulticastInlineDelegate OnBlueZoneEnd; // 0x398(0x10)
	float DefaultRadiusRate; // 0x3a8(0x04)
	Unknown GameData; // 0x3b0(0x320)
	Unknown SetVisibleBlueZone; // 0x6d0(0x01)
	Unknown WeightMapInfo; // 0x6e8(0x08)
	Unknown InBlueZoneCharacters; // 0x728(0x10)
	Unknown OutBlueZoneCharacters; // 0x738(0x10)
	Unknown OuterCirclePos; // 0x798(0x08)
	struct FName SelectedPlayZoneName; // 0x7a0(0x08)
	int32_t SelectedPlayZoneInfoIndex; // 0x7a8(0x04)
	Unknown ClientPlayZonePhaseList; // 0x7b0(0x10)
	Unknown bIsFollowingRule; // 0xb0(0x01)
	Unknown BluezoneStartEvent; // 0xd0(0x08)
	Unknown BluezoneEndEvent; // 0xd8(0x08)
	Unknown RarityParticle; // 0x390(0x08)
	Unknown RarityParticleComponent; // 0x398(0x08)
	Unknown HighestRarityOfCurrentItems; // 0x3a0(0x01)
	Unknown TimerHandle_Deactiv; // 0x3b0(0x08)
	Unknown WorldStaticMesh; // 0x310(0x08)
	Unknown WorldSkelMesh; // 0x318(0x08)
	int32_t Equipmentlevel; // 0x320(0x04)
	Unknown DamageImpulseDir; // 0x324(0x0c)
	Unknown BlackboardComponent; // 0x70(0x08)
	Unknown BravoHotelCharacter; // 0x240(0x08)
	Unknown BravoHotelAbilityComponent; // 0x248(0x08)
	Unknown TimerHandles; // 0x280(0x10)
	Unknown CharacterParticles; // 0x290(0x10)
	Unknown AttackerPC; // 0x2a0(0x08)
	Unknown AttackerActor; // 0x2a8(0x08)
	float HeadBangingStartTime; // 0x2c8(0x04)
	float HeadBangingEndTime; // 0x2cc(0x04)
	Unknown TimerHandle_EndBuff; // 0x2b8(0x08)
	Unknown TimerHandle_EndBuff; // 0x2b8(0x08)
	Unknown AnimInstanceArray; // 0x2b8(0x10)
	float MaxReadyToSnipeTime; // 0x3a0(0x04)
	struct FString BuffMutableString; // 0x2b8(0x10)
	struct FString BuffMutableString; // 0x2b8(0x10)
	Unknown CameraPostProcessPreset; // 0x380(0x08)
	Unknown TargetMeshs; // 0x388(0x10)
	Unknown TargetWeapon; // 0x420(0x08)
	struct FName CrosshairTableRow; // 0x2b8(0x08)
	int32_t CurrentActiveCount; // 0x2c0(0x04)
	int32_t MaxActiveCount; // 0x2c4(0x04)
	float ExteriorMaxDrawDistance; // 0x310(0x04)
	float InteriorMaxDrawDistance; // 0x314(0x04)
	int32_t ItemWorldSpawnTableIndex; // 0x318(0x04)
	Unknown ItemWorldSpawnInfo; // 0x320(0x10)
	Unknown SpawnBoxList; // 0x330(0x10)
	struct FName SaveDetectingUserName; // 0x340(0x08)
	Unknown SpawnedItemList; // 0x348(0x10)
	Unknown LogItemData; // 0x358(0xa0)
	Unknown IgnorePersonalSpawnBox; // 0x3f8(0x01)
	Unknown EnableItemSpawn; // 0x3f9(0x01)
	struct FName AreaSpawnRateTableKey; // 0x3fc(0x08)
	Unknown AreaOverrideStandardGroupDatas; // 0x408(0x50)
	Unknown EnableUnImportantItemSpawn; // 0x45b(0x01)
	Unknown ActiveAnim; // 0x1bd0(0x10)
	Unknown ActiveSound; // 0x1be0(0x08)
	Unknown RemoteControlState; // 0x1be8(0x01)
	int32_t SwitchOnSimulation; // 0x1bec(0x04)
	Unknown ThrownC4; // 0x1bf0(0x08)
	float EnableDistance; // 0x1bf8(0x04)
	float UpdateCheckTime; // 0x1c08(0x04)
	Unknown bEnableRemoteController; // 0x1c0c(0x01)
	float ResetCameraMovementFOVThreshold; // 0x978(0x04)
	Unknown FindVehicles; // 0x1bf0(0x10)
	Unknown CarKeySound; // 0x1c00(0x08)
	Unknown TimerHandle_Deactiv; // 0x1c08(0x08)
	Unknown Timer_UpdateUltimateVehicleLocation; // 0x1c10(0x08)
	Unknown UltimateParticleComponent; // 0x1c18(0x08)
	Unknown UltimateDecalComponent; // 0x1c20(0x08)
	Unknown UltimateParticle; // 0x1c28(0x08)
	Unknown UltimateDecal; // 0x1c30(0x08)
	Unknown CanSpawnColor; // 0x1c38(0x50)
	Unknown CannotSpawnColor; // 0x1c88(0x50)
	float UltimateParticle_DeltaHeight; // 0x1cd8(0x04)
	Unknown ActiveBuffs; // 0x1ce0(0x10)
	Unknown UltimateActiveBuffs; // 0x1cf0(0x10)
	Unknown UltimateSpawnVehicle; // 0x1d00(0x08)
	Unknown UltimateSpawnVehicleLocation; // 0x1d08(0x0c)
	Unknown bLocalCharacterInReplay; // 0xc0(0x01)
	Unknown CurrentPerkDeckSelectInfo; // 0xc8(0x18)
	Unknown SavedPlayerState; // 0xe0(0x08)
	int32_t ParachuteSkinIndex; // 0xe8(0x04)
	Unknown bDisconnected; // 0xec(0x01)
	Unknown DisconnectedPlayerState; // 0xf0(0x08)
	Unknown IsClientTeam; // 0xf8(0x01)
	Unknown bIsFreeLook; // 0xc0(0x01)
	Unknown bFPSK_WantToFPSMode; // 0xc0(0x01)
	Unknown bIsFlameDamaged; // 0xc0(0x01)
	Unknown bIsChargingGauge; // 0xc0(0x01)
	Unknown bIsShowingLandingPosition; // 0xc0(0x01)
	int32_t KnockOutCount; // 0xc4(0x04)
	int32_t CriticalTimeCount; // 0xc8(0x04)
	Unknown ReplicatedStateID; // 0xcc(0x01)
	Unknown CastingItemInfo; // 0xd0(0x98)
	Unknown SearchInstinctLocation; // 0x168(0x0c)
	Unknown CastingInfo; // 0x178(0x18)
	Unknown RevivingActor; // 0x190(0x08)
	Unknown ResuscitatedTargetActor; // 0x198(0x08)
	Unknown InteractedTargetActor; // 0x1a0(0x08)
	Unknown Revivers; // 0x1a8(0x10)
	Unknown Resuscitaters; // 0x1b8(0x10)
	Unknown OccupyingVehicleSeat; // 0x1c8(0x08)
	float MoveRightSpeedModifier; // 0x7d0(0x04)
	float MoveBackSpeedModifier; // 0x724(0x04)
	float WalkInNoProneWaterSpeedModifier; // 0x80c(0x04)
	float WalkInWaterSpeedModifier; // 0x6e8(0x04)
	Unknown MoveSlopeSpeedModifierCurve; // 0x700(0x08)
	float ReduceCharacterSpeedInGrenadeExplosionRangeModifier; // 0x760(0x04)
	float LastMaxSpeed; // 0x798(0x04)
	float MaxWalkSpeedProned; // 0x744(0x04)
	float MaxRunSpeed; // 0x788(0x04)
	float MaxRunSpeedCrouched; // 0x748(0x04)
	float MaxRunSpeedProned; // 0x7f0(0x04)
	float MaxSprintSpeed; // 0x71c(0x04)
	float MaxSprintSpeedCrouched; // 0x7a0(0x04)
	float MaxSprintSpeedProned; // 0x790(0x04)
	float MaxWalkSpeedAMP; // 0x728(0x04)
	float MaxWalkSpeedHeartBeatSensor; // 0x7a8(0x04)
	float PronedHalfHeight; // 0x7dc(0x04)
	float SwimHalfHeight; // 0x804(0x04)
	Unknown bCanWalkOffLedgesWhenProning; // 0x708(0x01)
	Unknown bWantsToProne; // 0x7a4(0x01)
	Unknown bProneMaintainsBaseLocation; // 0x7cc(0x01)
	Unknown bSwimMaintainsBaseLocation; // 0x708(0x01)
	float FallingDecelerationDuration; // 0x770(0x04)
	Unknown SkydivingKValueRange; // 0x70c(0x10)
	Unknown SkydivingPitchRange; // 0x774(0x10)
	float MaxParachuteSpeed; // 0x7d4(0x04)
	float ParachuteKValue; // 0x78c(0x04)
	float MaxRocketJumpSpeed; // 0x740(0x04)
	float DepthWaterNoProne; // 0x73c(0x04)
	float DepthWaterNoCrouch; // 0x784(0x04)
	float DepthWaterSuface; // 0x800(0x04)
	float DepthUnderWater; // 0x7bc(0x04)
	float AngleUnderWater; // 0x7ac(0x04)
	float CurrentWaterDepth; // 0x74c(0x04)
	Unknown MoveParameter; // 0x7e4(0x08)
	float ServerControlRotationInveral; // 0x750(0x04)
	float ClientNetSendMoveDeltaTimeScaleBySpectator; // 0x7c8(0x04)
	float LastGroundStateChangedTime; // 0x7c4(0x04)
	Unknown BravoHotelCharacterOwner; // 0x768(0x08)
	float ClientServerSyncSpeed; // 0x6f8(0x04)
	Unknown OpenedWidget; // 0x78(0x08)
	Unknown CoherentWidget; // 0x248(0x08)
	Unknown AudioEvent; // 0x250(0x08)
	Unknown ObjectArray; // 0x258(0x10)
	struct FString WidgetName; // 0x270(0x10)
	Unknown bInvisibleAfterLoading; // 0x280(0x01)
	Unknown MyWidgetClass; // 0x418(0x08)
	struct FMulticastInlineDelegate ChangeCloseInvenDelegate; // 0x430(0x10)
	struct FMulticastInlineDelegate ChangeWeaponDelegate; // 0x440(0x10)
	struct FMulticastInlineDelegate SendTriggerDelegate; // 0x450(0x10)
	float Angle; // 0x248(0x04)
	float Length; // 0x250(0x04)
	float ArragnedAngle; // 0x254(0x04)
	float AngleBetweenUnits; // 0x258(0x04)
	float DefaultLengthRate; // 0x25c(0x04)
	float AdditionalLengthRate; // 0x260(0x04)
	Unknown PersonalSupplyBoxMarkerInfo; // 0x278(0x28)
	Unknown MarkerInfos; // 0x2a0(0x10)
	Unknown MaterialItemMarkerInfos; // 0x2b0(0x10)
	Unknown LocalPingMarkerInfos; // 0x2c0(0x10)
	Unknown ResuscitationMarkerInfos; // 0x2d0(0x10)
	Unknown ExpertWeaponItemMarkerInfo; // 0x2e0(0x40)
	Unknown UnitArray; // 0x320(0x10)
	Unknown UnitArray2; // 0x330(0x10)
	Unknown ScaleCurve; // 0x340(0x08)
	Unknown ParantWidget; // 0x248(0x08)
	Unknown ConversationWidgetClass; // 0xc8(0x08)
	Unknown CurrentConversationWidget; // 0xd0(0x08)
	struct FName CurrentConversationKey; // 0xd8(0x08)
	int32_t CurrentSentenceIndex; // 0xe0(0x04)
	Unknown VoiceChannelInfo; // 0x100(0x50)
	Unknown CustomizedCharacterComponent; // 0x298(0x08)
	Unknown CrosshairDataMap; // 0x40(0x50)
	Unknown CrosshairDataMap_ADS; // 0x90(0x50)
	Unknown Map; // 0x28(0x50)
	Unknown AdditiveMap; // 0x78(0x50)
	Unknown ActiveAdditiveCroshairList; // 0xc8(0x10)
	struct FMulticastInlineDelegate MoveLobbyCharacterWearableDelegate; // 0x30(0x10)
	struct FMulticastInlineDelegate MoveLobbyCharacterAppearanceDelegate; // 0x40(0x10)
	struct FMulticastInlineDelegate MouseEventDelegate; // 0x50(0x10)
	struct FString WearableMenu; // 0x60(0x10)
	Unknown WearableList; // 0x248(0x10)
	Unknown Data; // 0x248(0x1a8)
	Unknown PhaseInfo; // 0x3f0(0x10)
	struct FName Name; // 0x40(0x08)
	Unknown Names; // 0x48(0x10)
	Unknown bApplyHurtCondition; // 0x58(0x01)
	Unknown bShouldCalculatePerBoneDamage; // 0x58(0x01)
	Unknown bSpawnBlood; // 0x58(0x01)
	Unknown bSpawnDust; // 0x58(0x01)
	Unknown bPlayDamageEffect; // 0x58(0x01)
	Unknown bDrawBloodPostProcess; // 0x58(0x01)
	struct FString IconPath; // 0x60(0x10)
	Unknown Icon; // 0x70(0x28)
	struct FText CauserText; // 0x98(0x18)
	float MultiplyRatio; // 0xb0(0x04)
	Unknown BattleRoyalGameMode; // 0x3e0(0x08)
	Unknown ClientLogCharacter; // 0x5b8(0x08)
	struct FString DebugString; // 0x248(0x10)
	Unknown AllowedDamageType; // 0x570(0x10)
	Unknown bForceDestructionByVehicleDamage; // 0x580(0x01)
	float ImpulseStrength; // 0x584(0x04)
	float hp; // 0x588(0x04)
	int32_t CurrentHP; // 0x58c(0x04)
	Unknown DestructedSound; // 0x590(0x08)
	Unknown bIsWindowComponent; // 0x598(0x01)
	Unknown DestructibleActorClass; // 0x5a0(0x08)
	Unknown DestructibleMesh; // 0x5a8(0x28)
	Unknown bIsDestruct; // 0x60d(0x01)
	Unknown bHiddenInReplay; // 0x318(0x01)
	Unknown SpawnItemList; // 0x4e0(0x10)
	float CheckItemSpawnDistance; // 0x504(0x04)
	float CheckUnImportanttemSpawnDistance; // 0x508(0x04)
	Unknown WeaponList; // 0x248(0x10)
	Unknown AmmoList; // 0x258(0x10)
	Unknown AttachmentList; // 0x268(0x10)
	Unknown WearableList; // 0x278(0x10)
	Unknown ConsumableList; // 0x288(0x10)
	Unknown CustomList; // 0x298(0x10)
	Unknown VehicleList; // 0x2a8(0x10)
	Unknown GearList; // 0x2b8(0x10)
	Unknown PerkList; // 0x2c8(0x10)
	Unknown PresetList; // 0x2d8(0x10)
	Unknown RootNode; // 0x318(0x08)
	Unknown MoveNode; // 0x320(0x08)
	Unknown StaticMesh; // 0x328(0x08)
	Unknown PlayerInteractiveBox; // 0x330(0x08)
	Unknown PushBox; // 0x338(0x08)
	Unknown ForwardArrow; // 0x340(0x08)
	float InDoorNetCullDistanceSquared; // 0x348(0x04)
	float OutDoorNetCullDistanceSquared; // 0x34c(0x04)
	Unknown DestructibleMesh; // 0x350(0x08)
	Unknown DestructibleMeshTest; // 0x358(0x08)
	Unknown DestructibleMeshRef; // 0x360(0x28)
	Unknown bIsDestructible; // 0x388(0x01)
	float MaxHp; // 0x38c(0x04)
	float CurrentHP; // 0x390(0x04)
	Unknown bIsMeshCreated; // 0x394(0x01)
	Unknown ChunkCount; // 0x395(0x01)
	Unknown DestructPointStack; // 0x398(0x10)
	Unknown DestructedPoint; // 0x3a8(0x10)
	Unknown bOverrideMaterial; // 0x3b8(0x01)
	Unknown DestructibleMaterial; // 0x3c0(0x08)
	Unknown TimerHandle_DestroyComponents; // 0x3c8(0x08)
	Unknown FadeAlphaCurve; // 0x3d0(0x08)
	Unknown FadeTimeline; // 0x3d8(0x98)
	Unknown FadeMaterial; // 0x470(0x08)
	Unknown DoorState; // 0x478(0x01)
	Unknown bIsOpenedFromFront; // 0x479(0x01)
	Unknown OpenCurve; // 0x480(0x08)
	Unknown CloseCurve; // 0x488(0x08)
	Unknown DefaultDoorRotation; // 0x5c4(0x0c)
	Unknown AkSound_Open; // 0x648(0x08)
	Unknown AkSound_StartClose; // 0x650(0x08)
	Unknown AkSound_Melee; // 0x658(0x08)
	Unknown AKSound_Kicked; // 0x660(0x08)
	Unknown AKSound_Destructed; // 0x668(0x08)
	Unknown DoorSoundType; // 0x670(0x01)
	Unknown AudioPortalComponent; // 0x678(0x08)
	Unknown bKeepOpenAudioPortal; // 0x680(0x01)
	Unknown KickedParticle; // 0x688(0x08)
	Unknown KickedParticleSystem; // 0x690(0x08)
	float KickImpulseStrength; // 0x698(0x04)
	Unknown OverlappingPlayersInPushBox; // 0x6b0(0x10)
	Unknown DamageCorrectValues; // 0x6e8(0x50)
	Unknown StaticMeshComponent; // 0x310(0x08)
	Unknown ProjectileType; // 0x318(0x01)
	Unknown HitSurfaceEvent; // 0x320(0x08)
	int8_t CurrentSoundPlayCount; // 0x328(0x01)
	int8_t MaxSoundPlayCount; // 0x329(0x01)
	Unknown EjectingSound; // 0x330(0x08)
	Unknown ElevatorBody; // 0x310(0x08)
	Unknown DoorList; // 0x318(0x10)
	Unknown InnerDoorList; // 0x328(0x10)
	Unknown InnerDoorPivotList; // 0x338(0x10)
	Unknown TargetDoor; // 0x348(0x08)
	Unknown CurrentDoor; // 0x350(0x08)
	Unknown DoorQueue; // 0x358(0x10)
	Unknown CurrentStateType; // 0x368(0x01)
	int32_t DefaultDoorID; // 0x36c(0x04)
	float MoveSpeed; // 0x370(0x04)
	float DefaultDelayTime; // 0x374(0x04)
	float CurrentDelayTime; // 0x378(0x04)
	Unknown AkAudioComponent; // 0x380(0x08)
	Unknown SoundEventForMoving; // 0x388(0x08)
	Unknown SoundEventForMoved; // 0x390(0x08)
	Unknown bDoorUIEnable; // 0x358(0x01)
	Unknown BoxTrigger; // 0x360(0x08)
	Unknown PushBox; // 0x368(0x08)
	Unknown LeftDoorPivot; // 0x370(0x08)
	Unknown RightDoorPivot; // 0x378(0x08)
	Unknown ElevatorPivot; // 0x380(0x08)
	Unknown ElevatorUI; // 0x388(0x08)
	Unknown ButtonUI; // 0x390(0x08)
	Unknown CurrentStateType; // 0x398(0x01)
	int32_t DoorID; // 0x39c(0x04)
	int32_t MatchingDoorID; // 0x3a0(0x04)
	Unknown LeftOpenLocation; // 0x3a4(0x0c)
	Unknown RightOpenLocation; // 0x3b0(0x0c)
	float DoorSpeed; // 0x3bc(0x04)
	Unknown bCalled; // 0x3c0(0x01)
	Unknown AkAudioComponent; // 0x3c8(0x08)
	Unknown SoundEventForOpening; // 0x3d0(0x08)
	Unknown SoundEventForOpened; // 0x3d8(0x08)
	Unknown SoundEventForClosing; // 0x3e0(0x08)
	Unknown SoundEventForClosed; // 0x3e8(0x08)
	Unknown ParentGameInstance; // 0x28(0x08)
	Unknown DamageCorrectValues; // 0x328(0x50)
	Unknown Image_Buff; // 0x248(0x08)
	Unknown ProgressBar_Slot; // 0x250(0x08)
	Unknown BuffUIInfo; // 0x258(0x98)
	float LastTimer; // 0x2f0(0x04)
	Unknown CharacterTeleport; // 0x250(0x01)
	Unknown EnableChatting; // 0x251(0x01)
	Unknown AllowReconnect; // 0x252(0x01)
	Unknown bIsInHouseDevBuild; // 0x253(0x01)
	struct FString DefaultFontFamilyAsset; // 0x258(0x10)
	Unknown DefaultFontFamily; // 0x268(0x08)
	int32_t LoadingScreenIndex; // 0x270(0x04)
	Unknown LoadingScreenWidget; // 0x278(0x08)
	Unknown CurLoadingScreenInfo; // 0x280(0x40)
	Unknown bWinnerCam; // 0x2c0(0x01)
	Unknown ForceLoadingType; // 0x2c1(0x01)
	Unknown bIsPlayingKillCam; // 0x2c2(0x01)
	int32_t KillerUniquePlayerId; // 0x2c8(0x04)
	int32_t MyUniquePlayerId; // 0x2cc(0x04)
	struct FMulticastInlineDelegate ReplayListChangedCallBack; // 0x2d0(0x10)
	Unknown bCheatable; // 0x2e0(0x01)
	Unknown bEnableMakeAccount; // 0x2e1(0x01)
	Unknown GameSettingManager; // 0x2e8(0x08)
	struct FString LoadingScreenWidgetClass; // 0x300(0x10)
	Unknown CohWidgetList; // 0x368(0x10)
	struct FString PopupWidgetClass; // 0x458(0x10)
	struct FMulticastInlineDelegate OnChangedLanguageCallBack; // 0x468(0x10)
	Unknown LobbyMemberVoiceStateList; // 0x480(0x50)
	Unknown MemberVoiceStateList; // 0x4d0(0x50)
	Unknown ReconnectWidget; // 0x598(0x08)
	int32_t ZOrder; // 0x28(0x04)
	Unknown WidgetList; // 0x30(0x10)
	Unknown CurrentGameResultWidgetMode; // 0x250(0x01)
	Unknown bIsShowingSimpleResult; // 0x251(0x01)
	Unknown TimerHandle_ShowSimpleResult; // 0x258(0x08)
	Unknown SimpleResultData; // 0x270(0xa8)
	Unknown bIsShowingFinalResult; // 0x318(0x01)
	Unknown FinalResultData; // 0x319(0x04)
	Unknown TimerHandle_ShowFinalResult; // 0x320(0x08)
	Unknown bIsShowingMatchEndAnimation; // 0x338(0x01)
	Unknown TimerHandle_ShowMatchEndAnimation; // 0x340(0x08)
	Unknown MatchEndAnimationData; // 0x358(0x02)
	uint16_t HitScore; // 0x28(0x02)
	int32_t PickUpCoin; // 0x2c(0x04)
	Unknown ExpPoint; // 0x30(0x10)
	float TotalDistanceTraveled; // 0x40(0x04)
	struct FMulticastInlineDelegate OnChangedFinalRankDelegate; // 0x48(0x10)
	uint16_t FinalRank; // 0x5a(0x02)
	int32_t GainedRP; // 0x5c(0x04)
	Unknown GoldPoint; // 0x60(0x10)
	Unknown RewardItemList; // 0x70(0x10)
	Unknown DropedItemList; // 0x80(0x10)
	float TotalDamage; // 0x90(0x04)
	float LifeTime; // 0x94(0x04)
	Unknown BravoHotelNetworkManager; // 0x28(0x08)
	Unknown BravoHotelItemSpawnStatisticManager; // 0x30(0x08)
	Unknown BravoHotelDataManager; // 0x128(0x08)
	Unknown BravoHotelReportDataManager; // 0x130(0x08)
	Unknown BravoHotelOutGameDataManager; // 0x138(0x08)
	Unknown BravoHotelQuestManager; // 0x140(0x08)
	Unknown BravoHotelAchievementManager; // 0x148(0x08)
	Unknown BravoHotelAppAudioStateManager; // 0x158(0x08)
	Unknown CachedLocalSaves; // 0x178(0x50)
	Unknown GrenadeProjectileClass; // 0x1bd0(0x08)
	Unknown bNeedAssistantWeapon; // 0x1bd8(0x01)
	struct FName StartFireBoneName; // 0x1bdc(0x08)
	Unknown AssistantWeaponClass; // 0x1be8(0x08)
	struct FName HandSocketName; // 0x1bf0(0x08)
	float GrenadeDamage; // 0x1bf8(0x04)
	float GrenadeHitDamage; // 0x1bfc(0x04)
	float GrenadeHitDamageToCharacter; // 0x1c00(0x04)
	float GrenadeCookingTime; // 0x1c04(0x04)
	float OverThrowDegreeValue; // 0x1c08(0x04)
	float UnderThrowDegreeValue; // 0x1c0c(0x04)
	float OverThrowGrenadeVelocity; // 0x1c10(0x04)
	float UnderThrowGrenadeVelocity; // 0x1c14(0x04)
	float GrenadeThrowDirectionCorrectionValue; // 0x1c18(0x04)
	float ThrowVelocityModifierByCharacterMovement; // 0x1c1c(0x04)
	Unknown CookEvent; // 0x1c20(0x08)
	Unknown ThrowEvent; // 0x1c28(0x08)
	Unknown bEnableCooking; // 0x1c30(0x01)
	Unknown bIsCooked; // 0x1c31(0x01)
	Unknown GrenadeType; // 0x1c32(0x01)
	Unknown GrenadeState; // 0x1c33(0x01)
	Unknown ThrowingType; // 0x1c34(0x01)
	Unknown ProjectileGrenade; // 0x1c38(0x08)
	Unknown DrawPredictProjectileLine; // 0x1c40(0x01)
	Unknown FireLocation; // 0x1c44(0x0c)
	Unknown FireDirection; // 0x1c50(0x0c)
	Unknown FireRotation; // 0x1c5c(0x0c)
	float FireVelocity; // 0x1c68(0x04)
	Unknown FireLocationOffset; // 0x1c6c(0x0c)
	Unknown FireRotationOffset; // 0x1c78(0x0c)
	float ThrowStartedTime; // 0x1c84(0x04)
	float OverThrowLocationCompensationValue; // 0x1c88(0x04)
	float UnderThrowLocationCompensationValue; // 0x1c8c(0x04)
	float RightHandOffset; // 0x1c90(0x04)
	Unknown FireWeaponLocationOffset; // 0x1c94(0x0c)
	Unknown PredictPathThrowingType; // 0x1ca0(0x01)
	Unknown bEnableUnderThrow; // 0x1ca1(0x01)
	float AfterThrowAnimDelay; // 0x1ca4(0x04)
	Unknown OverThrowGrenade; // 0x1cb8(0x10)
	Unknown UnderThrowGrenade; // 0x1cc8(0x10)
	Unknown PinOffGrenade; // 0x1cd8(0x10)
	Unknown LeverOffGrenade; // 0x1ce8(0x10)
	Unknown UnderThrow_LeverOffGrenade; // 0x1cf8(0x10)
	Unknown Crouch_OverThrowGrenade; // 0x1d08(0x10)
	Unknown Crouch_UnderThrowGrenade; // 0x1d18(0x10)
	Unknown Crouch_PinOffGrenade; // 0x1d28(0x10)
	Unknown Crouch_UnderThrow_LeverOffGrenade; // 0x1d38(0x10)
	Unknown Prone_OverThrow_Lev; // 0x1d48(0x10)
	Unknown Prone_UnderThrow_LeverOffGrenade; // 0x1d58(0x10)
	Unknown Prone_OverThrow; // 0x1d68(0x10)
	Unknown Prone_UnderThrow; // 0x1d78(0x10)
	Unknown Locomotion_Stand_Idle; // 0x1d88(0x08)
	Unknown Locomotion_Stand_Idle_Under; // 0x1d90(0x08)
	Unknown Locomotion_Stand_PinOff_Idle; // 0x1d98(0x08)
	Unknown Locomotion_Stand_PinOff_Idle_Additive; // 0x1da0(0x08)
	Unknown Locomotion_Stand_ThrowUnder_Idle; // 0x1da8(0x08)
	Unknown Locomotion_Stand_ThrowUnder_Idle_Additive; // 0x1db0(0x08)
	Unknown Locomotion_Crouch_Idle; // 0x1db8(0x08)
	Unknown Locomotion_Crouch_PinOff_Idle; // 0x1dc0(0x08)
	Unknown Locomotion_Crouch_PinOff_Idle_Additive; // 0x1dc8(0x08)
	Unknown Locomotion_Crouch_ThrowUnder_Idle; // 0x1dd0(0x08)
	Unknown Locomotion_Crouch_ThrowUnder_Idle_Additive; // 0x1dd8(0x08)
	Unknown Locomotion_Prone_Idle; // 0x1de0(0x08)
	Unknown Locomotion_Prone_PinOff_Idle_ThrowOver; // 0x1de8(0x08)
	Unknown Locomotion_Prone_PinOff_Idle_ThrowUn; // 0x1df0(0x08)
	Unknown Locomotion_Stand_Idle_1P; // 0x1df8(0x08)
	Unknown Locomotion_Stand_Idle_Under_1P; // 0x1e00(0x08)
	Unknown Locomotion_Stand_PinOff_Idle_1P; // 0x1e08(0x08)
	Unknown Locomotion_Stand_PinOff_Idle_Additive_1P; // 0x1e10(0x08)
	Unknown Locomotion_Stand_ThrowUnder_Idle_1P; // 0x1e18(0x08)
	Unknown Locomotion_Stand_ThrowUnder_Idle_Additive_1P; // 0x1e20(0x08)
	Unknown Locomotion_Crouch_Idle_1P; // 0x1e28(0x08)
	Unknown Locomotion_Crouch_PinOff_Idle_1P; // 0x1e30(0x08)
	Unknown Locomotion_Crouch_PinOff_Idle_Additive_1P; // 0x1e38(0x08)
	Unknown Locomotion_Crouch_ThrowUnder_Idle_1P; // 0x1e40(0x08)
	Unknown Locomotion_Crouch_ThrowUnder_Idle_Additive_1P; // 0x1e48(0x08)
	Unknown Locomotion_Prone_Idle_1P; // 0x1e50(0x08)
	Unknown Locomotion_Prone_PinOff_Idle_ThrowOver_1P; // 0x1e58(0x08)
	Unknown Locomotion_Prone_PinOff_Idle_ThrowUn; // 0x1e60(0x08)
	struct FMulticastInlineDelegate OnChangeThrowingWeaponStateDelegate; // 0x1e68(0x10)
	struct FMulticastInlineDelegate OnChangeThrowingTypeDelegate; // 0x1e78(0x10)
	float ThrowingWeaponCameraShakeDelayTime; // 0x1e88(0x04)
	Unknown ThrowingWeaponCameraShake; // 0x1e90(0x08)
	float DestroyDelayTime; // 0x1e98(0x04)
	float ThrowingWeaponCameraShakeScale; // 0x1e9c(0x04)
	Unknown InterpProjectilePredictPathJumpCurve; // 0x1ea0(0x08)
	Unknown InterpProjectilePredictPathNormalCurve; // 0x1ea8(0x08)
	Unknown CalcProjectilePredictPathRot; // 0x1eb0(0x0c)
	float ProjectilePredictTime; // 0x1ebc(0x04)
	float FireWeaponDelayTime; // 0x1ec0(0x04)
	Unknown bOverrideSpawnGrenadeCount; // 0x1ec4(0x01)
	int32_t OverrideSpawnGrenadeCount; // 0x1ec8(0x04)
	Unknown PredictTimeHandle; // 0x1ee0(0x08)
	Unknown PinOffParticle; // 0x1ee8(0x08)
	int32_t SpawnGrenadeCount; // 0x1ef8(0x04)
	float SpawnPositionDelta; // 0x1efc(0x04)
	float SpawnRotationDelta; // 0x1f00(0x04)
	Unknown bEnableGuidedShot; // 0x1f04(0x01)
	float GuidedShotDistance; // 0x1f08(0x04)
	float GuidedShotRadius; // 0x1f0c(0x04)
	float FireCorrectLocationHitBlock; // 0x1f10(0x04)
	float HeartBeatSensorLength; // 0x1bd4(0x04)
	Unknown TimerHandle_OnStartEffectEvent; // 0x1bd8(0x08)
	Unknown DetectedCharacters; // 0x1be0(0x10)
	struct FName MeshClassType; // 0x730(0x08)
	Unknown AllowedDamageType; // 0x738(0x10)
	float ImpulseStrength; // 0x748(0x04)
	Unknown HpList; // 0x750(0x10)
	Unknown CurrentHpList; // 0x760(0x10)
	Unknown DestructedSound; // 0x770(0x08)
	Unknown DestructedEffect; // 0x778(0x08)
	Unknown EffectPositionDelta; // 0x780(0x0c)
	Unknown EffectRotationDelta; // 0x78c(0x0c)
	Unknown bOverrideMaterial; // 0x798(0x01)
	int32_t DestructibleMaterialIndex; // 0x79c(0x04)
	Unknown DestructibleMaterial; // 0x7a0(0x08)
	Unknown bIsWindowComponent; // 0x7a8(0x01)
	Unknown DestructibleActorClass; // 0x7b0(0x08)
	Unknown DestructibleMesh; // 0x7b8(0x28)
	Unknown DisableInstanceArray; // 0x848(0x10)
	Unknown RootNode; // 0x310(0x08)
	Unknown ActionLink; // 0x318(0x01)
	Unknown Image_133; // 0x248(0x08)
	Unknown Icon; // 0x250(0x08)
	Unknown Bg; // 0x258(0x08)
	Unknown Overlay_36; // 0x260(0x08)
	Unknown NewAnimation; // 0x268(0x08)
	Unknown MutableComponent; // 0x310(0x08)
	Unknown InventoryCharacterMesh; // 0x318(0x08)
	Unknown BackgroundWidgetComponent; // 0x320(0x08)
	Unknown PostProcessComponet; // 0x328(0x08)
	Unknown LightsRootComponent; // 0x330(0x08)
	Unknown SpotLight; // 0x338(0x08)
	Unknown OwnCharacter; // 0x340(0x08)
	Unknown BodyBaseSkeletalMesh; // 0x348(0x08)
	Unknown LocationOffset; // 0x360(0x0c)
	Unknown DefaultMeshScale; // 0x36c(0x0c)
	Unknown ScreenPosition; // 0x378(0x08)
	float CharacterFOV; // 0x380(0x04)
	float MoveScaleModify; // 0x384(0x04)
	float RotationInterpSpeed; // 0x388(0x04)
	Unknown DragWidgetClass; // 0x390(0x08)
	Unknown DragWidget; // 0x398(0x08)
	Unknown CanvasItemSlotHover; // 0x248(0x08)
	Unknown CanvasWeaponItemSlotHover; // 0x250(0x08)
	Unknown CanvasPerkSlotHover; // 0x258(0x08)
	Unknown CanvasStatSlotHover; // 0x260(0x08)
	Unknown CanvasMaterialSlotHover; // 0x268(0x08)
	Unknown CanvasTooltipSlotHover; // 0x270(0x08)
	Unknown bNeedUpdateHover; // 0x278(0x01)
	int32_t HoverType; // 0x27c(0x04)
	Unknown PlayerCharacter; // 0x248(0x08)
	Unknown PerkInfo; // 0x250(0x2c)
	Unknown bIsJustVisual; // 0x27c(0x01)
	Unknown OverlayCoolTime; // 0x280(0x08)
	Unknown TextCoolTime; // 0x288(0x08)
	Unknown ImgCoolTime; // 0x290(0x08)
	Unknown Img_Active; // 0x298(0x08)
	Unknown PlayerCharacter; // 0x248(0x08)
	Unknown UltimatePerkInfo; // 0x250(0x2c)
	Unknown LastHoverWidget; // 0x280(0x08)
	Unknown OverlayUltimate; // 0x288(0x08)
	Unknown VerticalBoxHealth; // 0x290(0x08)
	Unknown VerticalBoxPower; // 0x298(0x08)
	Unknown VerticalBoxSpeed; // 0x2a0(0x08)
	Unknown Over_CoolTime; // 0x2a8(0x08)
	Unknown T_CoolTime; // 0x2b0(0x08)
	Unknown IMG_CoolTime; // 0x2b8(0x08)
	Unknown Img_Active; // 0x2c0(0x08)
	Unknown IMG_CanActive; // 0x2c8(0x08)
	Unknown T_RemainCount; // 0x2d8(0x08)
	Unknown bCanChangePerkDeck; // 0x2e0(0x01)
	struct FMulticastInlineDelegate WeaponAmmoDelegate; // 0x250(0x10)
	Unknown BoxComponent; // 0x318(0x08)
	Unknown SphereComponent; // 0x320(0x08)
	Unknown WorldStaticMesh; // 0x328(0x08)
	Unknown WorldSkelMesh; // 0x330(0x08)
	Unknown AudioComponent; // 0x340(0x08)
	Unknown ItemInfo; // 0x348(0x98)
	Unknown DetailItemInfo; // 0x3e0(0x490)
	Unknown AttachmentItems; // 0x870(0x10)
	Unknown bDrawDebugInfo; // 0x880(0x01)
	Unknown LoadedAssets; // 0x888(0x10)
	Unknown bLoadMesh; // 0x8a1(0x01)
	Unknown bPlaceOnTheGround; // 0x8a2(0x01)
	struct FMulticastInlineDelegate OnChangeItemInfoDelegate; // 0x8a8(0x10)
	Unknown IsSpawnBook; // 0x8b8(0x01)
	Unknown BookSpawnEffectComponent; // 0x8c0(0x08)
	Unknown BookSpawnEffect; // 0x8c8(0x08)
	Unknown RootParticleComponent; // 0x8d0(0x08)
	Unknown MeshParticleComponent; // 0x8d8(0x08)
	Unknown PassiveChildParticleComponents; // 0x8e0(0x10)
	Unknown ActiveChildParticleComponents; // 0x8f0(0x10)
	Unknown RootParticle; // 0x908(0x08)
	Unknown ItemRecipeTreeInfo; // 0x248(0x10)
	int32_t BoxID; // 0x4e0(0x04)
	Unknown UsingRandomRotation; // 0x4e4(0x01)
	Unknown IsCompleteSpawn; // 0x4e5(0x01)
	Unknown NoneItem; // 0x588(0x18)
	Unknown ParentsStandardGroupBoxComponent; // 0x5d0(0x08)
	Unknown LoadedClasses; // 0x5d8(0x10)
	Unknown WorldCenter; // 0x248(0x0c)
	Unknown WorldSize; // 0x254(0x08)
	Unknown BaseMapSize; // 0x25c(0x08)
	Unknown RecordInfo; // 0x268(0x188)
	Unknown ItemDataInfoData; // 0x3f0(0xe8)
	Unknown SlotList; // 0x4d8(0x10)
	Unknown BuildingData; // 0x4e8(0x50)
	Unknown ItemDivisionCnt; // 0x538(0x50)
	Unknown ItemSpawnCnt; // 0x588(0x50)
	Unknown ItemRateAddCnt; // 0x5d8(0x50)
	Unknown ItemRateRemoveCnt; // 0x628(0x50)
	struct FString SelectedBuildingName; // 0x678(0x10)
	struct FString SelectedStandardGroupName; // 0x688(0x10)
	struct FName SelectAreaKey; // 0x248(0x08)
	Unknown IsBlueZoneSpawnRate; // 0x250(0x01)
	Unknown AreaSpawnRateList; // 0x258(0x50)
	Unknown BlueZoneSpawnRate; // 0x2a8(0x28)
	Unknown SpawnPerkData; // 0x310(0x60)
	struct FMulticastInlineDelegate OnEndSimulationDelegate; // 0x370(0x10)
	Unknown PreLocation; // 0x380(0x0c)
	int32_t CheckCount; // 0x38c(0x04)
	int32_t MaxCount; // 0x390(0x04)
	Unknown Box; // 0x398(0x08)
	Unknown ItemStandardGroupInfo; // 0x4e0(0x10)
	Unknown AllBoxInfos; // 0x4f0(0x10)
	Unknown GauageProgress; // 0x248(0x08)
	Unknown GauageText; // 0x250(0x08)
	Unknown KillcamWorld; // 0x28(0x08)
	Unknown KillcamWorldPackage; // 0x30(0x08)
	float HideTime; // 0x248(0x04)
	int32_t ArrayIndex; // 0x24c(0x04)
	Unknown ParentWidget; // 0x250(0x08)
	Unknown SlotWidgetClass; // 0x248(0x08)
	int32_t MaxSlotCount; // 0x250(0x04)
	int32_t MaxVisibleCount; // 0x254(0x04)
	Unknown SlotList; // 0x258(0x10)
	Unknown KillDataList; // 0x268(0x50)
	int32_t AddIndex; // 0x2b8(0x04)
	Unknown RootScene; // 0x310(0x08)
	Unknown InteractiveCheckBox; // 0x318(0x08)
	Unknown UpStart; // 0x320(0x08)
	Unknown UpEnd; // 0x328(0x08)
	Unknown DownStart; // 0x330(0x08)
	Unknown DownEnd; // 0x338(0x08)
	Unknown LadderPoint; // 0x340(0x08)
	int32_t StepMinCount; // 0x348(0x04)
	int32_t StepCount; // 0x34c(0x04)
	float StepHeight; // 0x350(0x04)
	float StepHalfWidth; // 0x354(0x04)
	float StepWidthScale; // 0x358(0x04)
	float StepWidthMargin; // 0x35c(0x04)
	Unknown StepMesh; // 0x360(0x08)
	Unknown OnlySnapToCenter; // 0x368(0x01)
	Unknown TestLadderHiddenInGame; // 0x369(0x01)
	Unknown DebugMode; // 0x36a(0x01)
	float AvailableDistanceAtTop; // 0x36c(0x04)
	float AvailableDistanceAtBottom; // 0x370(0x04)
	float AvailableDistanceInAir; // 0x374(0x04)
	float AvailableMinYawAtTop; // 0x378(0x04)
	float AvailableMaxYawAtTop; // 0x37c(0x04)
	float AvailableMinYawAtBottom; // 0x380(0x04)
	float AvailableMaxYawAtBottom; // 0x384(0x04)
	float BottomAdjustedHeight; // 0x388(0x04)
	float TopRelativeX; // 0x38c(0x04)
	float BottomRelativeX; // 0x390(0x04)
	Unknown IsTopOccupied; // 0x394(0x01)
	Unknown IsBottomOccupied; // 0x395(0x01)
	Unknown UsingPlayers; // 0x3b0(0x10)
	Unknown bLightOn; // 0x310(0x01)
	Unknown bLightFlicker; // 0x311(0x01)
	float LightOnIntensity; // 0x314(0x04)
	float LightOnTemperture; // 0x318(0x04)
	float LightOnAttenuationRadius; // 0x31c(0x04)
	Unknown LightOnMaterial; // 0x320(0x08)
	Unknown LightOffMaterial; // 0x328(0x08)
	Unknown LightFlickerFunctionMaterial; // 0x330(0x08)
	Unknown SceneRootComponent; // 0x338(0x08)
	int32_t LoadingScreenIndex; // 0x248(0x04)
	int32_t LoadingScreenCount; // 0x24c(0x04)
	struct FString FromLoading; // 0x250(0x10)
	Unknown MutableList; // 0x270(0x10)
	Unknown TargetPawn; // 0x288(0x08)
	int32_t CurrentLobbyPawnIndex; // 0x6f8(0x04)
	Unknown ParachuteActor; // 0x700(0x08)
	Unknown DefaultMapSetting; // 0x248(0x10)
	Unknown MousePos; // 0x364(0x08)
	Unknown CheckPreLoad; // 0x36c(0x01)
	Unknown bShowReconnectAlarm; // 0x36d(0x01)
	struct FMulticastInlineDelegate ExitDelegate; // 0x370(0x10)
	struct FMulticastInlineDelegate OptionDelegate; // 0x380(0x10)
	struct FMulticastInlineDelegate UIButtonOverSoundDelegate; // 0x390(0x10)
	struct FMulticastInlineDelegate UIButtonClickSoundDelegate; // 0x3a0(0x10)
	struct FMulticastInlineDelegate StoreDelegate; // 0x3b0(0x10)
	struct FMulticastInlineDelegate PartyInfoDelegate; // 0x3c0(0x10)
	Unknown DefaultMapSetting; // 0x3d0(0x10)
	Unknown DevMapSetting; // 0x3e0(0x10)
	Unknown MapSetting; // 0x3f0(0x10)
	Unknown CustomizedCharacterComponent; // 0x400(0x08)
	Unknown SupplyBoxComponent; // 0x408(0x08)
	Unknown ArmoryComponent; // 0x410(0x08)
	Unknown SeasonComponent; // 0x418(0x08)
	struct FMulticastInlineDelegate TabDelegate; // 0x420(0x10)
	struct FMulticastInlineDelegate OnPrefetchingProgress; // 0x430(0x10)
	Unknown SupplyBoxSpawnEffect; // 0x440(0x08)
	Unknown PP_Preset_PickupOutline; // 0x448(0x08)
	int32_t GamePlayTime_Hours; // 0x450(0x04)
	int32_t PrefetchingProgressPercentage; // 0x454(0x04)
	struct TSoftClassPtr<UObject> SoftReplayWidgetClass; // 0x460(0x28)
	Unknown ReMatchingByDS_TimerHandle; // 0x488(0x08)
	int32_t Gold; // 0x4a0(0x04)
	Unknown WeaponList; // 0x4a8(0x10)
	Unknown MaterialList; // 0x4b8(0x10)
	int32_t UniquePlayerId; // 0x258(0x04)
	Unknown KillcamPlayback; // 0x260(0x08)
	struct FName UserName; // 0x28(0x08)
	Unknown MouseSensitivityStates; // 0x30(0x50)
	Unknown bRememberMe; // 0x80(0x01)
	Unknown MatchingSettings; // 0x88(0x20)
	Unknown FireModeSettings; // 0xa8(0x50)
	Unknown bAutoReload; // 0xf8(0x01)
	struct FName OpeningMovieName; // 0xfc(0x08)
	Unknown bFirstRun; // 0x104(0x01)
	Unknown CoherentSettings; // 0x108(0x18)
	Unknown MagazineMeshComponent; // 0x310(0x08)
	Unknown SpawnedSocketTransform; // 0x320(0x30)
	Unknown OwnerWeaponRef; // 0x350(0x08)
	Unknown WorldCenter; // 0x260(0x0c)
	Unknown WorldSize; // 0x26c(0x08)
	Unknown BaseMapSize; // 0x274(0x08)
	Unknown ParentWidgetSize; // 0x27c(0x08)
	Unknown TargetCharacterRef; // 0x288(0x08)
	Unknown TargetPlayerStateRef; // 0x290(0x08)
	Unknown BattleRoyaleGameStateRef; // 0x298(0x08)
	Unknown PlayerHUDRef; // 0x2a0(0x08)
	Unknown PlayerControllerRef; // 0x2a8(0x08)
	Unknown TargetPawnTeamPlayers; // 0x2b0(0x10)
	Unknown ViewportSize; // 0x2cc(0x08)
	float ViewportScale; // 0x2d4(0x04)
	Unknown TopInfoWidgetClass; // 0x2d8(0x08)
	Unknown SightInfoWidgetClass; // 0x2e0(0x08)
	Unknown TeamPositionWidgetArray; // 0x2e8(0x10)
	Unknown TeamPositionWidgetClass; // 0x2f8(0x08)
	Unknown bWantShowTeamPositionWidget; // 0x300(0x01)
	Unknown MinViewportPosition; // 0x304(0x08)
	Unknown MaxViewportPosition; // 0x30c(0x08)
	Unknown RedCircleVisibility; // 0x31c(0x01)
	Unknown IsMouseCursorWidgetChanged; // 0x31d(0x01)
	Unknown SkillMapRadarPosition; // 0x320(0x08)
	float SkillMapRadarScaleRate; // 0x328(0x04)
	Unknown AudioEvent_FindLandingPositionStart; // 0x338(0x08)
	Unknown AudioEvent_FindLandingPositionEnd; // 0x340(0x08)
	Unknown AudioEvent_SearchInstinctStart; // 0x368(0x08)
	Unknown AudioEvent_SearchInstinctEnd; // 0x370(0x08)
	float SearchInstinctAlpha; // 0x378(0x04)
	Unknown bIsSetSearchInstinctWidget; // 0x37c(0x01)
	Unknown bIsSetVehicleSearchWidget; // 0x37d(0x01)
	Unknown SpatialSenseUIInfoMap; // 0x380(0x50)
	float CarScanCurrentTime; // 0x3d0(0x04)
	Unknown AttackDamageInfoList; // 0x3d8(0x10)
	Unknown AttackDamageWidgetClass; // 0x3f0(0x08)
	Unknown AttackUserWidgetClass; // 0x3f8(0x08)
	Unknown HitWidgetList; // 0x400(0x10)
	Unknown TopInfoWidget; // 0x410(0x08)
	Unknown SightInfoWidget; // 0x418(0x08)
	Unknown AliveInfoWidget; // 0x420(0x08)
	Unknown KillInfoWidget; // 0x428(0x08)
	Unknown CompassWidget; // 0x430(0x08)
	Unknown VehicleWidget; // 0x438(0x08)
	Unknown TeamInfoWidget; // 0x440(0x08)
	Unknown JetpackWidget; // 0x448(0x08)
	Unknown BattleRoyaleGameState; // 0x248(0x08)
	Unknown BravoHotelGameState; // 0x250(0x08)
	int32_t TeamSize; // 0x258(0x04)
	Unknown bForceUpdateAllWidgets; // 0x260(0x01)
	Unknown MapPlayerInfos; // 0x268(0x10)
	Unknown LocalMapPlayerInfo; // 0x278(0x58)
	Unknown PersonalSupplyBoxInfo; // 0x2d0(0x10)
	Unknown WorldCenter; // 0x2e0(0x0c)
	Unknown WorldSize; // 0x2ec(0x08)
	Unknown BaseMapSize; // 0x2f4(0x08)
	Unknown ParentWidgetSize; // 0x2fc(0x08)
	float ScaleFactor; // 0x304(0x04)
	float BaseScaleFactor; // 0x308(0x04)
	float TargetScaleFactor; // 0x30c(0x04)
	Unknown TargetMapPos; // 0x310(0x08)
	Unknown PivotPosOnViewport; // 0x318(0x08)
	Unknown bNeedToTranslateMapToPlayerPos; // 0x320(0x01)
	int32_t GridLevel; // 0x324(0x04)
	int32_t CurrentGridLevel; // 0x328(0x04)
	Unknown GridUnits; // 0x330(0x10)
	Unknown GridColors; // 0x340(0x10)
	float LineP2CAngle; // 0x350(0x04)
	float LineP2CHeight; // 0x354(0x04)
	Unknown LineP2CPosonMap; // 0x358(0x08)
	Unknown MapCompBlueZoneInfo; // 0x360(0x2c)
	Unknown IsUsingOuterAreaBlueZone; // 0x38c(0x01)
	Unknown UsingOuterAreaBlueZoneVisible; // 0x38d(0x01)
	Unknown AircraftWidget; // 0x390(0x08)
	Unknown ReplayCircleInfo; // 0x39c(0x10)
	Unknown bIsFreeCamVisible; // 0x3ac(0x01)
	Unknown FreeCamPosition; // 0x3b0(0x08)
	float FreeCamAngle; // 0x3b8(0x04)
	Unknown MaterialItemList; // 0x3c0(0x50)
	Unknown LocalPingList; // 0x410(0x50)
	Unknown ExpertWeaponItem; // 0x460(0x08)
	Unknown bShowWorldMap; // 0x468(0x01)
	Unknown ParentWidgetRef; // 0x470(0x08)
	Unknown AreaWidgetsRef; // 0x478(0x10)
	Unknown UW_MapDrawWidget_Circle; // 0x488(0x08)
	Unknown UW_MapDrawWidget_Grid; // 0x490(0x08)
	Unknown LinePlayerToCircle; // 0x498(0x08)
	Unknown LineRouteDefault; // 0x4a0(0x08)
	Unknown LineRouteDotline; // 0x4a8(0x08)
	Unknown DescentStartPoint; // 0x4b0(0x08)
	Unknown DescentEndPoint; // 0x4b8(0x08)
	Unknown CircleMask; // 0x4c0(0x08)
	Unknown ReplayCircleMask; // 0x4c8(0x08)
	int32_t MiniMapLevel; // 0x4d0(0x04)
	Unknown DefaultCircleTexture; // 0x4d8(0x08)
	Unknown CircleMaskMaterial; // 0x4e0(0x08)
	Unknown ReplayMaskMaterial; // 0x4e8(0x08)
	Unknown CircleMaterialInstance; // 0x4f0(0x08)
	Unknown ReplayMaterialInstance; // 0x4f8(0x08)
	Unknown MapCompRef; // 0x248(0x08)
	int32_t CircleClicedCount; // 0x250(0x04)
	Unknown CurrentCircleColor; // 0x254(0x10)
	Unknown TargetCircleColor; // 0x264(0x10)
	Unknown ReplayCircleColor; // 0x274(0x10)
	float DestructTime; // 0x310(0x04)
	Unknown ColorValues; // 0x318(0x50)
	Unknown FloatValues; // 0x368(0x50)
	Unknown ColorCurves; // 0x3b8(0x50)
	Unknown FloatCurves; // 0x408(0x50)
	struct FMulticastInlineDelegate DelegateMediaState; // 0x248(0x10)
	Unknown MeleeAttack_Stand; // 0x1bd0(0x10)
	Unknown MeleeAttack_Crouch; // 0x1be0(0x10)
	Unknown MeleeAttach_Jump; // 0x1bf0(0x10)
	Unknown Locomotion_Stand_Idle_3P; // 0x1c00(0x08)
	Unknown Locomotion_Crouch_Idle_3P; // 0x1c08(0x08)
	Unknown Locomotion_Prone_Idle_3P; // 0x1c10(0x08)
	Unknown Locomotion_Stand_Idle_1P; // 0x1c18(0x08)
	Unknown Locomotion_Crouch_Idle_1P; // 0x1c20(0x08)
	Unknown Locomotion_Prone_Idle_1P; // 0x1c28(0x08)
	Unknown RemaingTimeToActivate; // 0x250(0x08)
	Unknown MaxViewportSize; // 0x930(0x08)
	Unknown bIsShowingTimelineWidget; // 0x938(0x01)
	Unknown bIsShowingPlayerListWidget; // 0x939(0x01)
	Unknown bIsShowingItemListWidget; // 0x93a(0x01)
	Unknown DuplicatedReconnectTimeout_TimerHandle; // 0x940(0x08)
	Unknown MainWidgetRef; // 0x948(0x08)
	Unknown ReplayMainWidgetRef; // 0x950(0x08)
	float KillMessageAdditionalEffectiveTime; // 0x958(0x04)
	Unknown LastViewTarget; // 0x960(0x08)
	Unknown GameOverlayWidget; // 0x970(0x08)
	Unknown GameSettingWidget; // 0x978(0x08)
	Unknown DebugInfo; // 0x980(0x08)
	Unknown ReplayZone; // 0x988(0x08)
	Unknown CurrentRecordingPawn; // 0x990(0x08)
	Unknown TargetVehicle; // 0xa70(0x08)
	Unknown K2_AfterKillcamHUD; // 0xa80(0x08)
	Unknown RecordingPlayerState; // 0xa88(0x08)
	Unknown ReplayController; // 0x3a8(0x08)
	float DefaultSpeed; // 0x3b0(0x04)
	float CurrentSpeedLevel; // 0x3b4(0x04)
	float MinSpeedLevel; // 0x3b8(0x04)
	float MaxSpeedLevel; // 0x3bc(0x04)
	Unknown CurrentStateType; // 0x318(0x01)
	float CurrentMovingTime; // 0x31c(0x04)
	Unknown RootNode; // 0x310(0x08)
	Unknown SendController; // 0x318(0x08)
	Unknown BoxMesh; // 0x360(0x08)
	Unknown LoopAction; // 0x368(0x01)
	Unknown StartAction; // 0x369(0x01)
	Unknown RepMoveTransform; // 0x370(0x30)
	struct FName MuzzleAttachPoint; // 0xb0(0x08)
	Unknown ChancePool; // 0xb8(0x10)
	int32_t BulletCountToSpawnMultiFireEffect; // 0xc8(0x04)
	int32_t SpawnInterval; // 0xcc(0x04)
	struct FName MuzzleAttachPoint_1P; // 0xe0(0x08)
	struct FName MuzzleAttachPoint_ADS; // 0xe8(0x08)
	Unknown MuzzleEffects; // 0xf0(0x50)
	Unknown ReadyEffect; // 0x140(0x08)
	Unknown WarmupEffect; // 0x148(0x08)
	struct FName WarmupAlphaParameter; // 0x150(0x08)
	float WarmupAlphaTime; // 0x158(0x04)
	Unknown WarmupAlphaCurve; // 0x160(0x08)
	Unknown TimerHandle_WarmupOff; // 0x168(0x08)
	Unknown TimerHandle_WarmupUpdate; // 0x170(0x08)
	Unknown CurrentMuzzleType; // 0x178(0x01)
	Unknown MuzzleFlashComponent; // 0x180(0x08)
	Unknown MuzzleSmokeComponent; // 0x188(0x08)
	Unknown ReadyEffectComponent; // 0x190(0x08)
	Unknown WarmupEffectComponent; // 0x198(0x08)
	float PrevSpawnTime; // 0x1a0(0x04)
	Unknown bAttachSpawnedEffect; // 0x1a4(0x01)
	Unknown bUsePreShootRotationToFlash; // 0x1a5(0x01)
	Unknown IsParentsSync; // 0x238(0x01)
	Unknown IsSimulatePhysics; // 0x239(0x01)
	Unknown IsCollisionEnabled; // 0x23a(0x01)
	Unknown IsEverTick; // 0x23b(0x01)
	int32_t DefaultTableIndex; // 0x250(0x04)
	Unknown T_DelayMessage; // 0x258(0x08)
	Unknown NetworkSocket; // 0x28(0x10)
	Unknown NetworkWebSocket; // 0x38(0x20)
	Unknown HttpService; // 0x58(0x08)
	Unknown bHttpServiceEnable; // 0x60(0x01)
	Unknown UserInfo; // 0x220(0x90)
	Unknown FriendList; // 0x2b0(0x10)
	Unknown PartyInfo; // 0x2d8(0x28)
	Unknown PartyInvitaion; // 0x300(0x30)
	Unknown OnlineSubsystemFriends; // 0x330(0x30)
	Unknown ParentGameInstance; // 0x4f8(0x08)
	Unknown SyncInfo; // 0x310(0x04)
	Unknown MannagedPool; // 0x318(0x50)
	float DamagePerSec; // 0xb0(0x04)
	Unknown DamageType; // 0xb8(0x08)
	float PainInterval; // 0xc0(0x04)
	Unknown bEntryPain; // 0xc4(0x01)
	Unknown DamageInstigator; // 0xc8(0x08)
	Unknown DamagedActors; // 0xd8(0x10)
	Unknown BoxComponent; // 0x310(0x08)
	Unknown ArrowComponent; // 0x318(0x08)
	Unknown bLaunch; // 0x320(0x01)
	float LaunchForce; // 0x324(0x04)
	float ParachuteDelayTime; // 0x328(0x04)
	float ParachuteDelayTimeByFalling; // 0x32c(0x04)
	Unknown RepPerkInfos; // 0xc0(0x118)
	struct FMulticastInlineDelegate OnPerkInfoChanged; // 0x1d8(0x10)
	Unknown IsWeaponData; // 0x248(0x01)
	Unknown IsConsumableItemData; // 0x249(0x01)
	Unknown WeaponItemData; // 0x250(0x98)
	Unknown ConsumableItemData; // 0x2e8(0x100)
	Unknown HaveWeaponList; // 0x248(0x10)
	Unknown ConsumableItemList; // 0x258(0x10)
	Unknown CurSortType; // 0x268(0x01)
	Unknown CurConsumableItemDatas; // 0x270(0x50)
	Unknown CurWeapon; // 0x2c0(0x98)
	Unknown DefaultWeapon; // 0x358(0x98)
	Unknown IsFreeSupply; // 0x3f0(0x01)
	Unknown bIsDefaultWeapon; // 0x3f1(0x01)
	float Friction_OutBlueZone; // 0x80(0x04)
	Unknown AllowPenetration; // 0x84(0x01)
	Unknown bAllowPenetrationToThrowWeapon; // 0x85(0x01)
	float Toughness; // 0x88(0x04)
	float RefrationOnPenetration; // 0x8c(0x04)
	Unknown bUseDefaultNoImpactEffect; // 0x90(0x01)
	Unknown ImpactEffect; // 0x98(0x08)
	Unknown ImpactDecalMaterial; // 0xa0(0x10)
	Unknown ImpactEffect_OutBlueZone; // 0xb0(0x08)
	Unknown ImpactDecalMaterial_OutBlueZone; // 0xb8(0x10)
	float ImpactDecalSize; // 0xc8(0x04)
	Unknown ImpactDecalScale; // 0xcc(0x0c)
	Unknown PlayFootstepEffectWhenMovementInteractionTriggered; // 0xd8(0x01)
	Unknown OverrideFootstepEffects; // 0xe0(0x50)
	Unknown FootstepEffect; // 0x130(0x08)
	Unknown FootstepEffect_OutBlueZone; // 0x138(0x08)
	Unknown FootstepDecalMaterial; // 0x140(0x10)
	Unknown FootstepDecalMaterial_OutBlueZone; // 0x150(0x10)
	Unknown VehicleEffect; // 0x160(0x08)
	Unknown VehicleEffect_OutBlueZone; // 0x168(0x08)
	Unknown VehicleWreckEffect; // 0x170(0x08)
	Unknown VehicleWreckEffect_OutBlueZone; // 0x178(0x08)
	Unknown OverlapSound; // 0x180(0x08)
	Unknown bUseSurfaceAsSnowfield; // 0x188(0x01)
	Unknown bCanProne; // 0x189(0x01)
	float SlopeSpeedModifier; // 0x18c(0x04)
	int32_t TerrainType; // 0x190(0x04)
	Unknown ImpactAudioEvents; // 0x198(0x50)
	float ServerUpdateCameraInterval; // 0x2b28(0x04)
	Unknown TimedCameraPostProcessDatas; // 0x2b50(0x10)
	Unknown TimedCameraEffectDatas; // 0x2b60(0x10)
	Unknown ConversationComponent; // 0x6f8(0x08)
	Unknown QuestComponent; // 0x700(0x08)
	Unknown SavedCharacterPawn; // 0xbc8(0x08)
	Unknown OnDamagedCameraShake; // 0xe38(0x08)
	Unknown OnDamagedADSCameraShake; // 0x1298(0x08)
	Unknown ThrowingWeaponExplosionCameraShake; // 0xd98(0x08)
	Unknown RedZoneExplosionCameraShake; // 0xbf8(0x08)
	float FragmentCloseExplosionCameraShakeScale; // 0xbb8(0x04)
	float FragmentMidExplosionCameraShakeScale; // 0x12cc(0x04)
	float FragmentFarExplosionCameraShakeScale; // 0x1328(0x04)
	float FragmentCloseExplosionDistance; // 0xcb0(0x04)
	float FragmentMidExplosionDistance; // 0x1350(0x04)
	float FragmentFarExplosionDistance; // 0xef8(0x04)
	float FragmentChangeStateDelayTime; // 0xcf0(0x04)
	float FragmentCloseExplosionSoundDistance; // 0x12d8(0x04)
	float FragmentMidExplosionSoundDistance; // 0xfac(0x04)
	float FragmentFarExplosionSoundDistance; // 0x1160(0x04)
	float FragmentCloseExplosionSoundTime; // 0xf50(0x04)
	float FragmentMidExplosionSoundTime; // 0xbbc(0x04)
	float FragmentFarExplosionSoundTime; // 0x1304(0x04)
	Unknown bIsTeamSpectator; // 0xcc6(0x01)
	Unknown SpectatorHUDClass; // 0xba8(0x08)
	float LoseWidgetShowDelay; // 0xb9c(0x04)
	Unknown MatchEndSimpleResult; // 0x11e8(0xa8)
	Unknown CurrentSpectatingMode; // 0xd40(0x01)
	Unknown LastSpectatorTargetPawn; // 0x1388(0x08)
	Unknown WatchingPCs; // 0x1318(0x10)
	Unknown RadialDamageInfos; // 0xec0(0x10)
	Unknown ItemRecipeTreeWidgetClass; // 0xee0(0x08)
	struct FMulticastInlineDelegate Delegate_OnFinishMatchEndAnimation; // 0x708(0x10)
	Unknown SpectatingPlayerHUD; // 0x1358(0x08)
	Unknown TimerHandle_SetStateSpectator; // 0xe08(0x08)
	Unknown PerkDeckPopup; // 0xda0(0x08)
	struct FMulticastInlineDelegate OnResetTeamPlayersInfo; // 0x718(0x10)
	Unknown ResetTeamPlayersInfo; // 0xd41(0x01)
	Unknown ClientBlueZone; // 0xd00(0x08)
	Unknown PP_BlueZone; // 0x10e8(0x08)
	Unknown bInfiniteAmmo; // 0x12a4(0x01)
	Unknown PlayerStateList; // 0xbd0(0x10)
	Unknown DeathCamFocus; // 0x1290(0x08)
	float DeathCamTime; // 0x10e0(0x04)
	Unknown bEnableLevelStreamimngDistanceScaleByZ; // 0x1109(0x01)
	Unknown bUseLevelStreamimngPriorityByZ; // 0x10b0(0x01)
	Unknown LevelStreamingPrioritiesByZ; // 0xd58(0x10)
	Unknown MovePointList; // 0xee8(0x10)
	Unknown TeleportPointList; // 0xce0(0x10)
	Unknown bEnableHideGun; // 0x10c0(0x01)
	Unknown bEnableDestroyGun; // 0xccc(0x01)
	Unknown bHideActorMode; // 0x1378(0x01)
	Unknown PingComponent; // 0xff0(0x08)
	Unknown UseItemMenuList; // 0x1198(0x50)
	Unknown HideObjectStack; // 0x1180(0x10)
	Unknown AuthorizedRigidBodiesOnClient; // 0x10a0(0x10)
	Unknown DeathCamClass; // 0xfc8(0x08)
	Unknown SpawnedWinCam; // 0xd10(0x08)
	Unknown SpawnedDeathCam; // 0x12a8(0x08)
	Unknown SpawnedFieldViewCam; // 0x1100(0x08)
	Unknown SpawnedResusciatedCam; // 0xcd0(0x08)
	struct FMulticastInlineDelegate DelegatePayGoldOnChangeDeck; // 0xfd0(0x10)
	struct FMulticastInlineDelegate DelegatePayGoldOnSelectDeck; // 0xe90(0x10)
	struct FMulticastInlineDelegate DelegatePayGoldOnChangeDeckList; // 0xd88(0x10)
	struct FMulticastInlineDelegate DelegateChoosePerkDeck; // 0xca0(0x10)
	int32_t ChangeDeckBasePrice; // 0x1134(0x04)
	float ChangeDeckMultiflier; // 0xcfc(0x04)
	int32_t MaxChangeDeckCount; // 0xc88(0x04)
	int32_t SelectDeckPrice; // 0x1394(0x04)
	int32_t MaxChangeDeckListCount; // 0x12a0(0x04)
	struct FMulticastInlineDelegate DelegateAddLog; // 0x730(0x10)
	uint32_t AccountGold; // 0xe2c(0x04)
	uint32_t PaidAccountGold; // 0xd34(0x04)
	Unknown DebugInfo; // 0xe00(0x08)
	struct FMulticastInlineDelegate DelegateDataEventCharacte; // 0x8c8(0x10)
	struct FMulticastInlineDelegate DelegateDataEventCharacteUidList; // 0x8d8(0x10)
	struct FMulticastInlineDelegate DelegateOnKillOtherPlayer; // 0x8e8(0x10)
	struct FMulticastInlineDelegate DelegateOnKnockDownOtherPlayer; // 0x8f8(0x10)
	struct FMulticastInlineDelegate DelegateOnWhoKilledMe; // 0x908(0x10)
	struct TSoftClassPtr<UObject> SoftCheatWidgetClass; // 0x1078(0x28)
	Unknown CheatWidget; // 0xfc0(0x08)
	float SmartPingMenuDelayTime; // 0xd84(0x04)
	Unknown HasSpawnBook; // 0xcc5(0x01)
	Unknown SpawnBookLocation; // 0x1128(0x0c)
	Unknown NameTooltips; // 0x1308(0x10)
	float AutoNameTooltipDistance; // 0xd44(0x04)
	float AutoNameTooltipSecond; // 0xcd8(0x04)
	Unknown TimeHandle_ScreenCapture; // 0xdf8(0x08)
	Unknown DuplicatedReconnectTimeout_TimerHandle; // 0x918(0x08)
	float RequestResuscitationTimeStamp; // 0x924(0x04)
	Unknown bIsResuscitated; // 0x928(0x01)
	Unknown Resuscitater; // 0x12e0(0x08)
	Unknown TempResuscitater; // 0xff8(0x08)
	Unknown TempResuscitatedTarget; // 0xfe0(0x08)
	Unknown CurrentVictimPlayerState; // 0xd68(0x08)
	Unknown SuspectController; // 0x1168(0x08)
	Unknown SpawnedItemList; // 0xe40(0x50)
	float MinMaterialItemSearchDistance; // 0xe28(0x04)
	float MaxMaterialItemSearchDistance; // 0xba0(0x04)
	float RemoveMaterialItemDistance; // 0x12ec(0x04)
	float MaterialItemSearchShowCount; // 0x1074(0x04)
	float ReSearchWaitingTime; // 0xcc8(0x04)
	float MaterialItemPingLifeTime; // 0xcb4(0x04)
	Unknown ImmediatelyRemovePing; // 0xbf4(0x01)
	float EquipItemMaterialItemAutorSearchTime; // 0x1164(0x04)
	float LastEquipItemLifeTime; // 0x114c(0x04)
	Unknown IgnoreStartStateSearchMaterial; // 0xbb5(0x01)
	float SearchDelayTime; // 0x1390(0x04)
	Unknown TimeHandle_MaterialSearchDelay; // 0xfe8(0x08)
	Unknown TimeHandle_RemoveMaterialPing; // 0xed8(0x08)
	Unknown TimeHandle_SearchMaterialPing; // 0x1380(0x08)
	Unknown TimeHandle_CheckEquipItemMaterialItemAutorSearch; // 0xbe8(0x08)
	Unknown TimeHandle_CheckLastEquipItemInit; // 0x1110(0x08)
	struct FName LastEquipItem; // 0xcf4(0x08)
	Unknown SelectRecipeItem; // 0xc8c(0x10)
	Unknown bForceCheckSearchMaterialItems; // 0xefd(0x01)
	struct FMulticastInlineDelegate DelegateSelectSearchMaterialItem; // 0x1118(0x10)
	struct FMulticastInlineDelegate DelegateEnableMaterialSearch; // 0x10f0(0x10)
	struct FMulticastInlineDelegate DelegateEnableExpertWeaponMater; // 0xc68(0x10)
	struct FMulticastInlineDelegate DelegateMaterialSearchNoti; // 0x1360(0x10)
	struct FMulticastInlineDelegate DelegateShowWeightMap; // 0xb78(0x10)
	struct FMulticastInlineDelegate DelegateInventoryState; // 0xb88(0x10)
	Unknown PreSpectatorTargetPawn; // 0xe20(0x08)
	Unknown NoResponseNetworkClass; // 0x1060(0x08)
	Unknown SpawnedSupplyBoxList; // 0xda8(0x50)
	int32_t SelectedPersonalSupplyBoxOwnerID; // 0x106c(0x04)
	float ShowUseBoostItemMenuDelayTime; // 0xb98(0x04)
	Unknown bIgnoreInputCloseUI; // 0x1300(0x01)
	Unknown CrosshairMgr; // 0x418(0x08)
	Unknown LastTargetPawn; // 0x420(0x08)
	Unknown PlayerInfos; // 0x428(0x10)
	Unknown BattleRoyaleGameState; // 0x438(0x08)
	Unknown BravoHotelGameState; // 0x440(0x08)
	struct FMulticastInlineDelegate OnChangedPlayerInfosDelegate; // 0x450(0x10)
	float CurrentSkillRadius; // 0x46c(0x04)
	Unknown bReplayOptionFireDirection; // 0x470(0x01)
	Unknown bReplayOptionHitted; // 0x471(0x01)
	Unknown bReplayOptionDeathPosition; // 0x472(0x01)
	Unknown bReplayOptionPersonalSupplyBox; // 0x473(0x01)
	Unknown bReplayOptionTransportDropBox; // 0x474(0x01)
	struct FMulticastInlineDelegate OnToggleWidgetDelegate; // 0x478(0x10)
	Unknown FireModeSound; // 0x490(0x08)
	Unknown PlayerKillSound; // 0x498(0x08)
	Unknown PlayerDuoKillSound; // 0x4a0(0x08)
	Unknown LastPlayerInSquardKillSound; // 0x4a8(0x08)
	Unknown LastPlayerInDuoKillSound; // 0x4b0(0x08)
	Unknown PlayerAssistSound; // 0x4b8(0x08)
	Unknown PlayerDiedSound; // 0x4c0(0x08)
	Unknown RequestResuscitationEvent; // 0x4c8(0x08)
	Unknown InventoryWidgetClass; // 0x4d0(0x08)
	Unknown InventoryWidget; // 0x4d8(0x08)
	struct TSoftClassPtr<UObject> SoftInventoryInfoWidgetClass; // 0x4e0(0x28)
	Unknown InventoryWidget_Ori; // 0x508(0x08)
	Unknown InventoryWidget_Web; // 0x510(0x08)
	Unknown BravoHotelMainWidget; // 0x518(0x08)
	struct TSoftClassPtr<UObject> SoftMainWidgetClass; // 0x520(0x28)
	Unknown CustomMatchWidget; // 0x548(0x08)
	Unknown MainWidgetEx; // 0x550(0x08)
	Unknown MainWidgetExClass; // 0x558(0x08)
	struct TSoftClassPtr<UObject> SoftMainWidgetExClass; // 0x560(0x28)
	Unknown SpectatorWidget; // 0x588(0x08)
	Unknown SpectatorWidgetClass; // 0x590(0x08)
	struct TSoftClassPtr<UObject> SoftSpectatorWidgetClass; // 0x598(0x28)
	Unknown ReplayWidget; // 0x5c0(0x08)
	Unknown ReplayWidgetClass; // 0x5c8(0x08)
	struct TSoftClassPtr<UObject> SoftReplayWidgetClass; // 0x5d0(0x28)
	Unknown WorldMapWidget; // 0x5f8(0x08)
	Unknown WorldMapWidgetClass; // 0x600(0x08)
	struct TSoftClassPtr<UObject> SoftWorldMapWidgetClass; // 0x608(0x28)
	Unknown SkillMapWidget; // 0x630(0x08)
	Unknown SkillMapWidgetClass; // 0x638(0x08)
	struct TSoftClassPtr<UObject> SoftSkillMapWidgetClass; // 0x640(0x28)
	Unknown BlackMarketWidget; // 0x668(0x08)
	Unknown MatchEndWidget; // 0x670(0x08)
	Unknown MatchEndWidgetClass; // 0x678(0x08)
	struct TSoftClassPtr<UObject> SoftMatchEndWidgetClass; // 0x680(0x28)
	Unknown bEnableWorldmap; // 0x6f0(0x01)
	Unknown bEnableMinimap; // 0x6f1(0x01)
	struct TSoftClassPtr<UObject> SoftTestWidgetClass; // 0x6f8(0x28)
	struct TSoftClassPtr<UObject> SoftWorldTeleportWidgetClass; // 0x720(0x28)
	struct TSoftClassPtr<UObject> SoftReplayZoneClass; // 0x748(0x28)
	struct TSoftClassPtr<UObject> SoftItemSpawnDebugWidgetC; // 0x770(0x28)
	struct TSoftClassPtr<UObject> SoftItemSpawnRateWidgetClass; // 0x798(0x28)
	Unknown TestWidget; // 0x7c0(0x08)
	struct TSoftClassPtr<UObject> SoftCustomMatchWidgetClass; // 0x7c8(0x28)
	Unknown CinematicWidget; // 0x7f0(0x08)
	struct TSoftClassPtr<UObject> CinematicWidgetClass; // 0x7f8(0x28)
	Unknown MediaPlayerWidget; // 0x820(0x08)
	struct TSoftClassPtr<UObject> MediaPlayerWidgetClass; // 0x828(0x28)
	Unknown Canvas_Main; // 0x248(0x08)
	Unknown RotationGroup; // 0x250(0x08)
	Unknown Canvas_Replay; // 0x258(0x08)
	Unknown IconSwitcher; // 0x260(0x08)
	Unknown Text_PlayerNum; // 0x268(0x08)
	Unknown Text_PlayerName; // 0x270(0x08)
	Unknown Img_Disconnect; // 0x278(0x08)
	Unknown Img_KnockDown; // 0x280(0x08)
	Unknown Img_Alive; // 0x288(0x08)
	Unknown Img_Death; // 0x290(0x08)
	Unknown Img_Vehicle; // 0x298(0x08)
	Unknown Img_Parachute; // 0x2a0(0x08)
	Unknown Img_Critical; // 0x2a8(0x08)
	Unknown Img_Sight; // 0x2b0(0x08)
	Unknown Img_Arrow; // 0x2b8(0x08)
	Unknown Img_BackRound; // 0x2c0(0x08)
	Unknown Img_TargetCam; // 0x2c8(0x08)
	Unknown Img_TargetCamDummy; // 0x2d0(0x08)
	Unknown SizeBox_RequestResuscitation; // 0x2d8(0x08)
	Unknown BT_UserName; // 0x2e0(0x08)
	Unknown Anim_Bouncing; // 0x2e8(0x08)
	Unknown PlayerStateRef; // 0x2f0(0x08)
	Unknown TeamColorTableRef; // 0x2f8(0x08)
	Unknown bIsFreeCam; // 0x300(0x01)
	Unknown bIsReplaying; // 0x301(0x01)
	Unknown bIsKillCam; // 0x302(0x01)
	Unknown bIsInNetCullDistance; // 0x303(0x01)
	Unknown bIsRequestResuscitation; // 0x304(0x01)
	Unknown SizeBox_main; // 0x248(0x08)
	Unknown Image_bg; // 0x250(0x08)
	Unknown MainProgressBar; // 0x258(0x08)
	Unknown CureLimitProgressBar; // 0x260(0x08)
	Unknown TargetProgressBar; // 0x268(0x08)
	Unknown BeforeProgressBar; // 0x270(0x08)
	Unknown ShortTimeProgressBar; // 0x278(0x08)
	Unknown DangerHp; // 0x280(0x08)
	Unknown Anim_Increase; // 0x288(0x08)
	Unknown Anim_AdditionalHP; // 0x290(0x08)
	Unknown DefaultSlotSprite; // 0x298(0x08)
	Unknown FirstSlotSprite; // 0x2a0(0x08)
	Unknown LastSlotSprite; // 0x2a8(0x08)
	int32_t MaxHealth; // 0x2b0(0x04)
	Unknown bIsKnockOutMode; // 0x2b4(0x01)
	Unknown TargetPawn; // 0x248(0x08)
	float CurrentHealthIncreaseSpeed; // 0x250(0x04)
	float CurrentHealthDecreaseSpeed; // 0x254(0x04)
	float BeforeHealthInterpSpeedRate; // 0x258(0x04)
	float BeforeHealthTimerDelayRate; // 0x25c(0x04)
	Unknown HorizontalBox_Main; // 0x2a0(0x08)
	Unknown T_CurrentHealth; // 0x2a8(0x08)
	Unknown T_MaxHealth; // 0x2b0(0x08)
	int32_t LastMaxHealth; // 0x2b8(0x04)
	int32_t HealthPerSlot; // 0x2bc(0x04)
	float CureLimitPercent; // 0x2c0(0x04)
	int32_t AnimAdditionalHealth; // 0x2c4(0x04)
	Unknown bIsDangerHP; // 0x2c8(0x01)
	Unknown PlayerInfoProgressSlotWidgetClass; // 0x2d0(0x08)
	struct FMulticastInlineDelegate Delegate_OnPlayerInfoSlotSizeChanged; // 0x2d8(0x10)
	Unknown WidgetSwitcher_Lung; // 0x248(0x08)
	Unknown ProgressBar_Lung; // 0x250(0x08)
	Unknown BuffListPanel; // 0x2b0(0x08)
	Unknown GameBuffSlot_Boost; // 0x2b8(0x08)
	struct FName UID; // 0xc0(0x08)
	int32_t UniquePlayerId; // 0xc8(0x04)
	Unknown SeasonInfo; // 0xcc(0x18)
	int32_t CurrentPCTypeID; // 0xe4(0x04)
	Unknown TeamIndex; // 0xe8(0x01)
	Unknown TeamSize; // 0xe9(0x01)
	int32_t TeamPlayerIconIndex; // 0xec(0x04)
	Unknown CurrentPerkDeckInfo; // 0xf0(0x70)
	Unknown SupplyInfoFromServer; // 0x160(0x48)
	Unknown SupplyWeaponInfo; // 0x1a8(0x30)
	Unknown bIsSuspiciousUser; // 0x1d8(0x01)
	Unknown NewbieData; // 0x1e0(0x20)
	Unknown bAlive; // 0xc0(0x01)
	Unknown InOuterArea; // 0xc1(0x01)
	uint16_t kills; // 0xc2(0x02)
	uint16_t assists; // 0xc4(0x02)
	uint16_t Deaths; // 0xc6(0x02)
	uint16_t Revives; // 0xc8(0x02)
	uint16_t Resuscitates; // 0xca(0x02)
	int32_t CurrentPerkClassLev; // 0xcc(0x04)
	Unknown WatchedCount; // 0xd0(0x01)
	Unknown AppearanceInfo; // 0xc0(0x14)
	Unknown TimerHandle_ReplicatedAppearanceInfo; // 0xd8(0x08)
	Unknown bCriticalTime; // 0x418(0x01)
	struct FString MatchingTeamID; // 0x420(0x10)
	uint32_t MatchingTeamIdHash; // 0x430(0x04)
	Unknown MatchableCountByDS; // 0x434(0x01)
	struct FString PlayerSessionId; // 0x438(0x10)
	int32_t LoginMemberIndex; // 0x458(0x04)
	Unknown TeamPlayers; // 0x460(0x10)
	Unknown ReplicatedPlayerInfo; // 0x598(0x08)
	Unknown ReplicatedPlayStat; // 0x5a0(0x08)
	Unknown ReplicatedAppearanceInfo; // 0x5a8(0x08)
	struct FMulticastInlineDelegate OnChangePlayerState; // 0x5b0(0x10)
	Unknown OwnerCharacter; // 0x5c8(0x08)
	Unknown InNmPerkVechicleInfo; // 0x5d0(0x28)
	Unknown SubState; // 0x5f8(0x08)
	Unknown DummyInfo; // 0x600(0x58)
	Unknown GamePlayStatistics; // 0x658(0x08)
	Unknown CurrentState; // 0x661(0x01)
	Unknown bIsTalking; // 0x67a(0x01)
	Unknown PersonalSupplyBoxAdditionalItemList; // 0x680(0x10)
	int32_t MaterialItemPingIndex; // 0x74c(0x04)
	Unknown MaterialPingList; // 0x750(0x50)
	int32_t LocalPingIndex; // 0x7a0(0x04)
	Unknown LocalPingList; // 0x7a8(0x50)
	Unknown ExpertWeaponPing; // 0x7f8(0x28)
	Unknown PingInfo; // 0x310(0x38)
	Unknown PingLocalLocation; // 0x348(0x0c)
	Unknown RoutePingInfo; // 0x358(0x10)
	Unknown Location; // 0x380(0x0c)
	uint16_t RotationYaw; // 0x38c(0x02)
	int32_t Health; // 0x390(0x04)
	Unknown bIsDisconnect; // 0x394(0x01)
	Unknown bIsRetired; // 0x395(0x01)
	int32_t MaxHealth; // 0x398(0x04)
	Unknown CurrentState; // 0x39c(0x01)
	Unknown CharacterState; // 0x39d(0x01)
	int32_t FireCount; // 0x3a0(0x04)
	int32_t CurrentEquipWeaponID; // 0x3a4(0x04)
	Unknown bIsFireWeapon; // 0x3a8(0x01)
	int32_t RemainGoldentime; // 0x3ac(0x04)
	int32_t MaxGoldentime; // 0x3b0(0x04)
	Unknown bRequestResuscitation; // 0x3b4(0x01)
	Unknown VoiceTeamTalk; // 0x3b5(0x01)
	Unknown VoiceAreaTalk; // 0x3b6(0x01)
	Unknown DefaultPoolingActor; // 0xb0(0x50)
	Unknown ActorPoolInfos; // 0x100(0x50)
	Unknown WidgetLayer; // 0x30(0x10)
	Unknown NetworkDelayPopupWidgetRef; // 0x40(0x08)
	Unknown SphereCollision; // 0x310(0x08)
	Unknown Projectile; // 0x318(0x08)
	Unknown RealisticProjectile; // 0x320(0x08)
	Unknown BulletEffect; // 0x328(0x08)
	Unknown TrailEffectInWater; // 0x330(0x08)
	float Damage; // 0x338(0x04)
	Unknown StartLocation; // 0x33c(0x0c)
	Unknown bInWater; // 0x348(0x01)
	Unknown TrailEffectsList; // 0x350(0x50)
	Unknown BulletEffectsList; // 0x3a0(0x50)
	Unknown StopEffectsList; // 0x3f0(0x50)
	Unknown bSpawnTrailEffect; // 0x440(0x01)
	Unknown TrailNames; // 0x448(0x10)
	Unknown TrailLocation; // 0x458(0x0c)
	Unknown TrailRotation; // 0x464(0x0c)
	Unknown bChangeBulletEffect; // 0x470(0x01)
	struct FString BulletEffectName; // 0x478(0x10)
	Unknown StopEffectNames; // 0x488(0x10)
	Unknown AuthorityController; // 0x498(0x08)
	Unknown BeginOverlapHitResults; // 0x4a8(0x10)
	Unknown HitActors; // 0x4c0(0x10)
	float ImpulsePowerRate; // 0x4d0(0x04)
	Unknown ProjectileDamageType; // 0x4d8(0x08)
	Unknown FlybyAudioEvent; // 0x4e0(0x08)
	Unknown BulletSpawnLocation; // 0x4e8(0x0c)
	Unknown FlybyTargetActor; // 0x4f8(0x08)
	Unknown bStopUpdateFlyby; // 0x500(0x01)
	Unknown TimerHandle_UpdateFlyby; // 0x508(0x08)
	Unknown TargetPawn; // 0x518(0x08)
	Unknown bIgnoreOwner; // 0x310(0x01)
	float Damage; // 0x314(0x04)
	float MinimumDamage; // 0x318(0x04)
	float DamageFalloff; // 0x31c(0x04)
	float ImpulseStrength; // 0x320(0x04)
	Unknown bCanApplyImpulseByBounce; // 0x324(0x01)
	Unknown bOverrideDropSpeed; // 0x325(0x01)
	float DropSpeed; // 0x328(0x04)
	Unknown HitDamageTypeClass; // 0x330(0x08)
	Unknown DamageTypeClass; // 0x338(0x08)
	Unknown SphereCollision; // 0x340(0x08)
	Unknown Projectile; // 0x348(0x08)
	Unknown TrailParticleComponent; // 0x350(0x08)
	Unknown ProjectileMovement; // 0x358(0x08)
	Unknown TimerHandle_GrenadeExplosion; // 0x360(0x08)
	Unknown GrenadeExplosionEffectScale; // 0x368(0x0c)
	Unknown bUseActorRotationGrenadeExplosionEffect; // 0x374(0x01)
	Unknown GrenadeExplosionEffect; // 0x378(0x08)
	Unknown GrenadeExplosionEffectInWater; // 0x380(0x08)
	Unknown TrailEffectInWater; // 0x388(0x08)
	Unknown SuperTrailEffect; // 0x390(0x08)
	Unknown NormalTrailEffect; // 0x398(0x08)
	Unknown bNeedToDeactiveTrailParticle; // 0x3a0(0x01)
	float SuperTrailViewDistance; // 0x3a4(0x04)
	Unknown ShiningEffectComponent; // 0x3a8(0x08)
	Unknown ShiningEffect; // 0x3b0(0x08)
	float ShiningEffectViewDistance; // 0x3b8(0x04)
	Unknown GrenadeTrailEffectInWater; // 0x3c0(0x08)
	Unknown AkAudioComponent; // 0x3c8(0x08)
	Unknown ExplodeEvent; // 0x3d0(0x08)
	Unknown ExplodeEventInWater; // 0x3d8(0x08)
	Unknown BoundEvent; // 0x3e0(0x08)
	float RemainExplodeTime; // 0x3e8(0x04)
	float InsideEffectRange; // 0x3ec(0x04)
	float EffectRange; // 0x3f0(0x04)
	float TriggerRange; // 0x3f4(0x04)
	Unknown LoopSoundHandle; // 0x3f8(0x04)
	Unknown bEnableActiveGrenade; // 0x3fc(0x01)
	Unknown bLocalSameTeam; // 0x3fd(0x01)
	Unknown OverlapCharacters; // 0x400(0x10)
	Unknown DotDamagedActors; // 0x410(0x10)
	struct FName GrenadeWeaponName; // 0x420(0x08)
	float HitDamage; // 0x428(0x04)
	float HitDamageToCharacter; // 0x42c(0x04)
	float PenetrateDamage; // 0x430(0x04)
	Unknown bInWater; // 0x434(0x01)
	int32_t BounceCount; // 0x438(0x04)
	Unknown bUseCookingTime; // 0x43c(0x01)
	Unknown bUseBoobyTrap; // 0x43d(0x01)
	Unknown bActiveByHit; // 0x43e(0x01)
	Unknown bNeedServerDamage; // 0x43f(0x01)
	float BoobyTrapDelayTime; // 0x440(0x04)
	float InitialSpeed; // 0x444(0x04)
	Unknown InitialVelocity; // 0x448(0x0c)
	Unknown bUseRotaionProjectileMesh; // 0x454(0x01)
	Unknown RotationSpeed; // 0x458(0x0c)
	Unknown bIsStopSimulate; // 0x464(0x01)
	Unknown GuidedLocation; // 0x468(0x0c)
	Unknown TimerHandle_BoobyTrap; // 0x478(0x08)
	Unknown ProjectileGrenadeState; // 0x480(0x01)
	Unknown bUseActiveTriggerActorLocation; // 0x481(0x01)
	Unknown TriggerActor; // 0x488(0x08)
	Unknown bApplyShortRangeHitDamage; // 0x4a8(0x01)
	float ShortRangeHitDamageDistance; // 0x4ac(0x04)
	float ShortRangeHitDamageMultiply; // 0x4b0(0x04)
	struct FName WeaponId; // 0x4b8(0x08)
	struct FName ItemId; // 0x4c0(0x08)
	Unknown bMarkActiveGrenade; // 0x4c8(0x01)
	Unknown DamageAffectedByObstacle; // 0x578(0x01)
	float ExplosionEffectRange; // 0x57c(0x04)
	float ExplosionCameraShakeScaleMin; // 0x580(0x04)
	float ExplosionCameraShakeScaleMax; // 0x584(0x04)
	float ExplosionDeafenDurationMin; // 0x588(0x04)
	float ExplosionDeafenDutationMax; // 0x58c(0x04)
	float ExplosionDeafenDistanceLevelClose; // 0x590(0x04)
	float ExplosionDeafenDistanceLevelMid; // 0x594(0x04)
	Unknown ExplosionCameraShake; // 0x598(0x08)
	Unknown ConditionedWeaponInfo; // 0x5a0(0x20)
	Unknown DecalRotation; // 0x5c0(0x0c)
	Unknown AllowedDamageType; // 0x5e0(0x10)
	float Health; // 0x5f0(0x04)
	struct FMulticastInlineDelegate OnExplosion; // 0x5f8(0x10)
	struct FMulticastInlineDelegate OnActiveBoobyTrapDelegate; // 0x608(0x10)
	Unknown TimerHandle_CheckWarningVoiceEvent; // 0x618(0x08)
	Unknown ExplosionOriginDeltaLocation; // 0x620(0x0c)
	Unknown SimulationActorClass; // 0x638(0x08)
	Unknown bAttachAbsolutely; // 0x640(0x01)
	Unknown FlybyEvent; // 0x648(0x08)
	Unknown FlybySoundHandle; // 0x650(0x04)
	Unknown OverlappedVehicles; // 0x4a8(0x50)
	Unknown FlameParticle; // 0x4f8(0x08)
	Unknown FlameEndParticle; // 0x500(0x08)
	Unknown AkAudioComponent; // 0x508(0x08)
	Unknown FireCellClass; // 0x510(0x08)
	float LifeTime; // 0x518(0x04)
	float DamageTime; // 0x51c(0x04)
	float FireDamage; // 0x520(0x04)
	float FireShrinkTime; // 0x524(0x04)
	float FireCellSpawnTime; // 0x528(0x04)
	float FirePropagationRange; // 0x52c(0x04)
	int32_t FirePropagationLevelMax; // 0x530(0x04)
	float FirePropagationLevelWidth; // 0x534(0x04)
	Unknown FirePropagationDivideAnglePerLevel; // 0x538(0x10)
	Unknown FlybyEvent; // 0x548(0x08)
	Unknown FlybySoundHandle; // 0x550(0x04)
	struct FName WeaponName; // 0x554(0x08)
	struct FString NewWeaponName; // 0x560(0x10)
	float LandHeight; // 0x638(0x04)
	Unknown bUsingActiveGrenadeByTick; // 0x63c(0x01)
	Unknown DamageCollisionType; // 0x63d(0x01)
	Unknown bIgnoreCollision; // 0x63e(0x01)
	Unknown ExplosionGroundDecalMaterial; // 0x650(0x08)
	Unknown ExplosionGroundDecalSize; // 0x658(0x0c)
	Unknown ExplosionGroundDecalComponent; // 0x668(0x08)
	Unknown AuthorController; // 0x670(0x08)
	Unknown ExplosionGroundDecalMaterial; // 0x638(0x08)
	Unknown ExplosionGroundDecalSize; // 0x640(0x0c)
	Unknown ExplosionGroundDecalComponent; // 0x650(0x08)
	float ActiveDelayTime; // 0x660(0x04)
	Unknown TrapEffect; // 0x668(0x08)
	Unknown TrapTriggerEffect; // 0x670(0x08)
	Unknown TrapDestoryEffect; // 0x678(0x08)
	Unknown TrapLoopStartEvent; // 0x680(0x08)
	Unknown TrapLoopStopEvent; // 0x688(0x08)
	Unknown TrapTriggerEvent; // 0x690(0x08)
	Unknown AttachEvent; // 0x698(0x08)
	Unknown TrapLoopSoundHandle; // 0x6a0(0x04)
	Unknown AttachedComponent; // 0x6a8(0x08)
	Unknown TimerHandle_CheckAttachedComponent; // 0x6b0(0x08)
	int32_t HitItem; // 0x6b8(0x04)
	float ExplosionOriginDeltaLocationUp; // 0x6bc(0x04)
	Unknown ExplosionGroundDecalMaterial; // 0x638(0x08)
	Unknown ExplosionGroundDecalSize; // 0x640(0x0c)
	Unknown ExplosionGroundDecalComponent; // 0x650(0x08)
	Unknown AngleCurve; // 0x638(0x08)
	Unknown TimeCurve; // 0x640(0x08)
	Unknown PostProcessFlashBangClass; // 0x648(0x08)
	float PostProcessDurationTime; // 0x650(0x04)
	float PostProcessRateTime; // 0x654(0x04)
	Unknown BlindCharacters; // 0x658(0x10)
	Unknown TimeHandler_ActiveFlashBang; // 0x668(0x08)
	Unknown BoobyTrapEffect; // 0x680(0x08)
	Unknown BoobyTrapTriggerEffect; // 0x688(0x08)
	Unknown BoobyTrapDestoryEffect; // 0x690(0x08)
	Unknown BoobyTrapLoopStartEvent; // 0x698(0x08)
	Unknown BoobyTrapLoopStopEv; // 0x6a0(0x08)
	Unknown BoobyTrapTriggerEvent; // 0x6a8(0x08)
	Unknown BoobyTrapLoopSoundHandle; // 0x6b0(0x04)
	Unknown ExplosionGroundDecalMaterial; // 0x638(0x08)
	Unknown ExplosionGroundDecalSize; // 0x640(0x0c)
	Unknown ExplosionGroundDecalComponent; // 0x650(0x08)
	Unknown GroundDecalDynamicMaterial; // 0x658(0x08)
	Unknown FlybyEvent; // 0x668(0x08)
	Unknown FlybySoundHandle; // 0x670(0x04)
	Unknown FireStartSound; // 0x638(0x08)
	Unknown FireEndSound; // 0x640(0x08)
	Unknown FireLoopSoundHandle; // 0x648(0x04)
	Unknown TimeHandle_EndFirewallSound; // 0x650(0x08)
	Unknown MolotovFireTrailParticle; // 0x658(0x08)
	Unknown BoobyTrapEffect; // 0x660(0x08)
	Unknown BoobyTrapTriggerEffect; // 0x668(0x08)
	Unknown BoobyTrapDestoryEffect; // 0x670(0x08)
	Unknown BoobyTrapLoopStartEvent; // 0x678(0x08)
	Unknown BoobyTrapLoopStopEv; // 0x680(0x08)
	Unknown BoobyTrapTriggerEvent; // 0x688(0x08)
	Unknown BoobyTrapLoopSoundHandle; // 0x690(0x04)
	Unknown TimeHandler_ActiveMolotovCocktail; // 0x698(0x08)
	Unknown FireCellClass; // 0x6a8(0x08)
	Unknown MolotovFireCells; // 0x6b0(0x10)
	Unknown TimeHandle_SpreadingMolotov; // 0x6c8(0x08)
	Unknown TimeHandle_ShrinkingMolotov; // 0x6d0(0x08)
	Unknown FireLocations; // 0x6d8(0x10)
	Unknown FirePropagations; // 0x6e8(0x10)
	float FireSpreadFirstDelayTime; // 0x778(0x04)
	float FireSpreadTime; // 0x77c(0x04)
	float FireShrinkTime; // 0x780(0x04)
	Unknown bEnableFireWall; // 0x7c8(0x01)
	int32_t FireWallCellCount; // 0x7cc(0x04)
	float FireWallCellWidth; // 0x7d0(0x04)
	int32_t FirePropagationLevelMax; // 0x7d4(0x04)
	float FirePropagationLevelWidth; // 0x7d8(0x04)
	Unknown FirePropagationDivideAnglePerLevel; // 0x7e0(0x10)
	Unknown ExplosionGroundDecalMaterial; // 0x638(0x08)
	Unknown ExplosionGroundDecalSize; // 0x640(0x0c)
	Unknown FallingEvent; // 0x650(0x08)
	float FallingSoundDelayTime; // 0x658(0x04)
	Unknown ExplosionGroundDecalComponent; // 0x660(0x08)
	float LandHeight; // 0x680(0x04)
	Unknown AuthorController; // 0x688(0x08)
	Unknown SmokeTrailEffectComponent; // 0x638(0x08)
	Unknown SpawnedSmokeFxComponent; // 0x640(0x08)
	float SmokeLifeTime; // 0x648(0x04)
	int32_t SmokeTranslucencySortPriority; // 0x64c(0x04)
	Unknown SmokeStartEvent; // 0x650(0x08)
	Unknown SmokeEndEvent; // 0x658(0x08)
	float SeeThroughSmokeOpacity; // 0x660(0x04)
	float OpacityInSpeed; // 0x664(0x04)
	float OpacityOutSpeed; // 0x668(0x04)
	float SmokeCheckTime; // 0x66c(0x04)
	float PoisonCheckTime; // 0x670(0x04)
	float PoisonCheckRange; // 0x674(0x04)
	Unknown SmokeDebuffs; // 0x678(0x10)
	Unknown bActiveSmokeGrenade; // 0x688(0x01)
	Unknown bActiveSmokeEffect; // 0x689(0x01)
	Unknown SpawnLocations; // 0x690(0x10)
	Unknown AICharacters; // 0x7a8(0x10)
	Unknown FireRoot; // 0x310(0x08)
	Unknown FireEffect; // 0x318(0x08)
	float LifeTime; // 0x320(0x04)
	Unknown DamagedCharacters; // 0x328(0x10)
	Unknown Attacker; // 0x338(0x08)
	Unknown OwnerProjectileGrenade; // 0x340(0x08)
	int32_t DamageTime; // 0x348(0x04)
	float FireDamage; // 0x34c(0x04)
	float LimitRange; // 0x350(0x04)
	Unknown bIgnoreAttacker; // 0x354(0x01)
	Unknown HitComponent; // 0x358(0x08)
	Unknown TimerHandle_CheckHitComponent; // 0x360(0x08)
	Unknown TimeHandle_LifeTime; // 0x368(0x08)
	Unknown TimeHandle_CheckDistanceToPlayer; // 0x370(0x08)
	Unknown DamageTypeClass; // 0x378(0x08)
	Unknown LocalPlayingCharacter; // 0x384(0x08)
	Unknown SeasonQuestInfos; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnScenarioQuestStartDelegate; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnScenarioQuestUpdateDelegate; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnScenarioQuestStopDelegate; // 0xe0(0x10)
	Unknown ScenarioQuestInfo; // 0xf0(0x30)
	Unknown ScenarioWidgetClass; // 0x138(0x08)
	Unknown CurrentScenarioWidget; // 0x140(0x08)
	Unknown AddQuestEventDelegates; // 0xa8(0x50)
	Unknown AttachmentComponent; // 0x2130(0x08)
	Unknown MainWidgetRef; // 0x1fb8(0x08)
	Unknown bLoopedFireAnim; // 0x1d9c(0x01)
	Unknown FireAnim; // 0x2250(0x10)
	Unknown FireWeaponAnim; // 0x1f58(0x10)
	Unknown BoltActionPlayerAnim; // 0x22c0(0x10)
	Unknown BoltActionWeaponAnim; // 0x1ea8(0x10)
	Unknown BoltActionPronePlayerAnim; // 0x21d8(0x10)
	Unknown BoltActionProneWeaponAnim; // 0x1c18(0x10)
	Unknown bIsEquippingVerticalgrip; // 0x1c28(0x01)
	Unknown JointTargetLocationL; // 0x2280(0x0c)
	Unknown JointTargetLocationR; // 0x2100(0x0c)
	Unknown EffectorLocationR; // 0x2148(0x0c)
	float DeltaCollideHandIKDistance; // 0x2168(0x04)
	Unknown bAttachToCamera; // 0x2080(0x01)
	int32_t FiringCountToLoop; // 0x2268(0x04)
	Unknown FireSounds1P; // 0x1da8(0x20)
	Unknown FireSounds3P; // 0x2178(0x20)
	Unknown NoAmmoEvent; // 0x2170(0x08)
	Unknown bIsADS; // 0x1e70(0x01)
	Unknown bIsKeepingADS_WhileBoltAction; // 0x2070(0x01)
	Unknown bIsGatlingWeapon; // 0x2298(0x01)
	Unknown DamgeCorrectCurveByVelocity; // 0x2078(0x08)
	Unknown MuzzleEffectComponent; // 0x1c38(0x08)
	Unknown OverrideMuzzleFlashList; // 0x1ec8(0x50)
	Unknown OverrideMuzzleSmokeList; // 0x2088(0x50)
	Unknown CurrentOverrideMuzzleFlash_NoAttach; // 0x2118(0x08)
	Unknown CurrentOverrideMuzzleSmoke_NoAttach; // 0x1de8(0x08)
	Unknown ShellCasingArrows; // 0x1e60(0x10)
	Unknown FireLoopSoundHandle; // 0x1c14(0x04)
	Unknown WarmupPlayingHandle; // 0x2158(0x04)
	Unknown BulletParticleSpawnArrow; // 0x2160(0x08)
	Unknown bSpawnBulletParticleOnFire; // 0x1c68(0x01)
	Unknown RecoilComponent; // 0x22b0(0x08)
	Unknown ProjectileClass; // 0x1dd0(0x08)
	Unknown bServerShot; // 0x1da0(0x01)
	Unknown RecoilCurve; // 0x1f18(0x08)
	Unknown DamageDistanceCurve; // 0x1f40(0x08)
	Unknown SpreadScaleFactorsOnDefault; // 0x1c70(0x10)
	Unknown SpreadScaleFactorsOnFiring; // 0x1e90(0x10)
	struct FName FireSocketName; // 0x1f34(0x08)
	Unknown WeaponRecoilType; // 0x1e58(0x01)
	Unknown ZeroPointAngles; // 0x21c8(0x10)
	Unknown DefaultZeroingDistance; // 0x2138(0x10)
	int32_t ProjectileRandomSeed; // 0x21b4(0x04)
	Unknown IncendiaryInfo; // 0x2238(0x14)
	Unknown SpawnedFireCells; // 0x1cd8(0x10)
	Unknown ExplosionInfo; // 0x20dc(0x10)
	Unknown bCanSkipSpawnProjectile; // 0x1e5a(0x01)
	int32_t CurrentZeroPointIndex; // 0x21a0(0x04)
	Unknown bIsColliding; // 0x2154(0x01)
	Unknown bIsADSColliding; // 0x1c50(0x01)
	Unknown bIsAimingDownside; // 0x1c10(0x01)
	float CollideAlpha; // 0x229c(0x04)
	float CollideTraceLength; // 0x1f94(0x04)
	Unknown CollideTraceStartDelta; // 0x1fa0(0x0c)
	Unknown CrouchCollideTraceStartDelta; // 0x1f6c(0x0c)
	Unknown ProneCollideTraceStartDelta; // 0x2120(0x0c)
	Unknown bDrawCollideTraceSphereForDebug; // 0x1ec0(0x01)
	Unknown HorizontalRecoilGetter; // 0x2068(0x08)
	Unknown VerticalRecoilGetter; // 0x2198(0x08)
	Unknown SwayGetter; // 0x1c48(0x08)
	Unknown AccuracyGetter; // 0x21c0(0x08)
	Unknown FireModePlayerAnim; // 0x1df8(0x50)
	Unknown FireModeWeaponAnim; // 0x2010(0x50)
	Unknown bWantsToFire; // 0x1d89(0x01)
	Unknown bIsFiring; // 0x1ea0(0x01)
	Unknown bPendingReload; // 0x1dd8(0x01)
	Unknown bPendingBoltAction; // 0x1e59(0x01)
	Unknown bPendingBurstFire; // 0x1f48(0x01)
	Unknown CurrentState; // 0x1e89(0x01)
	Unknown FireMode; // 0x1d21(0x01)
	Unknown bSpawnTrailEffect; // 0x21b8(0x01)
	struct FString TrailEffectName; // 0x1cf0(0x10)
	Unknown bSpawnAutoAimTrailEffect; // 0x1d8a(0x01)
	Unknown bAutoAim; // 0x1ced(0x01)
	Unknown bIsNeedBoltAction; // 0x20d8(0x01)
	float BoltActionDelayTime; // 0x1f90(0x04)
	float AutoReloadTimeStamp; // 0x1f30(0x04)
	Unknown bIsOneByOneReloading; // 0x1dc8(0x01)
	Unknown FPSK_DeltaSocketLocation; // 0x1d78(0x0c)
	Unknown FPSK_DeltaSocketRotation; // 0x22d4(0x0c)
	struct FMulticastInlineDelegate OnAmmoReloadedDelegate; // 0x1f20(0x10)
	struct FMulticastInlineDelegate OnReloadDelegate; // 0x22a0(0x10)
	struct FMulticastInlineDelegate OnFinishSimulateReload; // 0x1c58(0x10)
	struct FMulticastInlineDelegate OnFinishSimulateBoltAction; // 0x20f0(0x10)
	struct FMulticastInlineDelegate OnStartSimulateFire; // 0x1d08(0x10)
	struct FMulticastInlineDelegate OnEndSimulateFire; // 0x1f78(0x10)
	Unknown bUseOverrideReloadMessage; // 0x1c29(0x01)
	int32_t OverrideReloadSuccessMessageTableIndex; // 0x1c40(0x04)
	int32_t OverrideReloadFailMessageTableIndex; // 0x1c2c(0x04)
	float WarmupTime; // 0x1f8c(0x04)
	Unknown bIsHeatScanActive; // 0x1d88(0x01)
	Unknown bWarmingUp; // 0x1d18(0x01)
	Unknown bReady; // 0x1e88(0x01)
	Unknown OwningWeaponRef; // 0xb0(0x08)
	Unknown CharacterRef; // 0xb8(0x08)
	Unknown GameStateRef; // 0xc0(0x08)
	float DeltaTime; // 0xc8(0x04)
	Unknown RecoilLocation; // 0xcc(0x0c)
	Unknown RecoilRotation; // 0xd8(0x0c)
	float BackRecoilLocation; // 0xe4(0x04)
	float VerticalRecoilLocation; // 0xe8(0x04)
	float HorizonRecoilLocation; // 0xec(0x04)
	float VerticalRecoilRotation; // 0xf0(0x04)
	float HorizonRecoilRotation; // 0xf4(0x04)
	Unknown bIsOnHold; // 0xf8(0x01)
	Unknown bNeedToInterp_BackRecoilLocation; // 0xf9(0x01)
	Unknown Timeline_BackRecoilLocation; // 0x100(0x98)
	Unknown bNeedToInterp_VerticalRecoilLocation; // 0x198(0x01)
	Unknown bNeedToInterp_VerticalRecoilRotation; // 0x199(0x01)
	Unknown Timeline_VerticalRecoilLocation; // 0x1a0(0x98)
	Unknown Timeline_VerticalRecoilRotation; // 0x238(0x98)
	Unknown bIsLeftSideRecoil; // 0x2d0(0x01)
	Unknown bNeedToInterp_HorizonRecoilLocation; // 0x2d1(0x01)
	Unknown bNeedToInterp_HorizonRecoilRotation; // 0x2d2(0x01)
	Unknown Timeline_HorizonRecoilLocation; // 0x2d8(0x98)
	Unknown Timeline_HorizonRecoilRotation; // 0x370(0x98)
	Unknown BombData; // 0x310(0x40)
	Unknown ResetAndStart; // 0x350(0x01)
	float RemainingWarningTime; // 0x354(0x04)
	float CurrentRange; // 0x358(0x04)
	int32_t RemainingBombing; // 0x35c(0x04)
	Unknown AkAudioComponent; // 0x370(0x08)
	Unknown StartAudioEvent; // 0x378(0x08)
	Unknown EndAudioEvent; // 0x380(0x08)
	Unknown pBottonInfoWidget; // 0x388(0x08)
	Unknown pTopInfoWidget; // 0x390(0x08)
	Unknown Usable; // 0x310(0x01)
	struct FName TableRedZoneID; // 0x314(0x08)
	Unknown DefaultRedZoneData; // 0x320(0x58)
	Unknown ArrayRedZoneData; // 0x378(0x10)
	int32_t BeginPhase; // 0x388(0x04)
	int32_t EndPhase; // 0x38c(0x04)
	Unknown CurrentRedZone; // 0x3f0(0x08)
	int32_t TotalPages; // 0x248(0x04)
	int32_t CurrentPage; // 0x24c(0x04)
	int32_t PageSize; // 0x250(0x04)
	int32_t TotalReplays; // 0x254(0x04)
	int32_t ReplaysToKeep; // 0x258(0x04)
	Unknown PlayerState; // 0x250(0x08)
	Unknown VBPlayerList; // 0x258(0x08)

	void CheckNumeric(struct FString CheckString, Unknown& CheckResult); // CheckNumeric U.U.CheckNumeric // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x23a73f0>
	void SetPosition(int32_t Position_); // SetPosition LowEntryExtendedStandar.LowEntryBitDataReader.SetPosition // (Final|Native|Public|BlueprintCallable) // <Game+0x1060c70>
	void AddStringUtf8Array(Unknown& Value); // AddStringUtf8Array LowEntryExtendedStandar.LowEntryBitDataWriter.AddStringUtf8Array // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x105fe00>
	void SetPosition(int32_t Position_); // SetPosition LowEntryExtendedStandar.LowEntryByteDataReader.SetPosition // (Final|Native|Public|BlueprintCallable) // <Game+0x10764e0>
	void AddStringUtf8Array(Unknown& Value); // AddStringUtf8Array LowEntryExtendedStandar.LowEntryByteDataWriter.AddStringUtf8Array // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1066820>
	void SetBytes(Unknown& ByteArray, int32_t Index, int32_t Length); // SetBytes LowEntryExtendedStandar.LowEntryDouble.SetBytes // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1076130>
	Unknown XboxOnePlatform(); // XboxOnePlatform LowEntryExtendedStandar.LowEntryExtendedStandardLibrary.XboxOnePlatform // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x10668f0>
	void WaitTillDone(Unknown WorldContextObject, Unknown LatentInfo, Unknown& Result_); // WaitTillDone LowEntryExtendedStandar.LowEntryLatentActionBoolean.WaitTillDone // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x107afb0>
	void WaitTillDone(Unknown WorldContextObject, Unknown LatentInfo, float& Result_); // WaitTillDone LowEntryExtendedStandar.LowEntryLatentActionFloat.WaitTillDone // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x107b0f0>
	void WaitTillDone(Unknown WorldContextObject, Unknown LatentInfo, int32_t& Result_); // WaitTillDone LowEntryExtendedStandar.LowEntryLatentActionInteger.WaitTillDone // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x107b230>
	void WaitTillDone(Unknown WorldContextObject, Unknown LatentInfo); // WaitTillDone LowEntryExtendedStandar.LowEntryLatentActionNone.WaitTillDone // (Final|Native|Public|BlueprintCallable) // <Game+0x107b370>
	void WaitTillDone(Unknown WorldContextObject, Unknown LatentInfo, Unknown& Result_); // WaitTillDone LowEntryExtendedStandar.LowEntryLatentActionObject.WaitTillDone // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x107b460>
	void WaitTillDone(Unknown WorldContextObject, Unknown LatentInfo, struct FString& Result_); // WaitTillDone LowEntryExtendedStandar.LowEntryLatentActionString.WaitTillDone // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x107b5a0>
	void SetBytes(Unknown& ByteArray, int32_t Index, int32_t Length); // SetBytes LowEntryExtendedStandar.LowEntryLong.SetBytes // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1076130>
	struct FString ToString(); // ToString LowEntryExtendedStandar.LowEntryParsedHashcash.ToString // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x107af30>
	void WeldVertices(Unknown& VertexIDs, Unknown& OutNewVertexID); // WeldVertices EditableMesh.EditableMesh.WeldVertices // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x176f9f0>
	Unknown MakeEditableMesh(Unknown PrimitiveComponent, int32_t LODIndex); // MakeEditableMesh EditableMesh.EditableMeshFactory.MakeEditableMesh // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x1775ee0>
	void SetScopeImageAngle(float NewAngle); // SetScopeImageAngle U.U.SetScopeImageAngle // (BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void Set(Unknown IsPingType); // Set SmartPingSystem.SmartPingSystem_C.Set // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void Get(struct FString& Group); // Get BP.Chat_System_C.Get // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x23a73f0>
	void ToggleActive(); // ToggleActive Engine.ActorComponent.ToggleActive // (Native|Public|BlueprintCallable) // <Game+0x337f170>
	void ToggleVisibility(Unknown bPropagateToChildren); // ToggleVisibility Engine.SceneComponent.ToggleVisibility // (Final|Native|Public|BlueprintCallable) // <Game+0x3ddb810>
	void OnTickReplaySampleRecord(Unknown DemoNetDriver, float MinRecordHz, float MaxRecordHz, Unknown bSaveCheckpoint); // OnTickReplaySampleRecord Engine.MKActorEx.OnTickReplaySampleRecord // (Final|Native|Private) // <Game+0x3d88db0>
	Unknown WasRecentlyRendered(float Tolerance); // WasRecentlyRendered Engine.Actor.WasRecentlyRendered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3c58a10>
	void OnRep_ReplicatedPhysAsset(); // OnRep_ReplicatedPhysAsset Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset // (Native|Public) // <Game+0x1236d40>
	Unknown WasRecentlyRendered(float Tolerance); // WasRecentlyRendered Engine.PrimitiveComponent.WasRecentlyRendered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3dc8c90>
	void SetVectorParameterValueOnMaterials(struct FName ParameterName, Unknown ParameterValue); // SetVectorParameterValueOnMaterials Engine.MeshComponent.SetVectorParameterValueOnMaterials // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3d80b90>
	void UnloadSkinWeightProfile(struct FName InProfileName); // UnloadSkinWeightProfile Engine.SkinnedMeshComponent.UnloadSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // <Game+0x3def250>
	void SetLODSettings(Unknown InLODSettings); // SetLODSettings Engine.SkeletalMesh.SetLODSettings // (Final|Native|Public|BlueprintCallable) // <Game+0x16b3b30>
	void SetMobility(Unknown InMobility); // SetMobility Engine.StaticMeshActor.SetMobility // (Final|Native|Public|BlueprintCallable) // <Game+0x124c9f0>
	void ShowHUD(); // ShowHUD Engine.HUD.ShowHUD // (Exec|Native|Public) // <Game+0x1e4be10>
	void Activate(); // Activate Engine.BlueprintAsyncActionBase.Activate // (Native|Public|BlueprintCallable) // <Game+0x2ed6e40>
	void UnlinkAnimClassLayers(Unknown InClass); // UnlinkAnimClassLayers Engine.SkeletalMeshComponent.UnlinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // <Game+0x3de6e40>
	void UnlockAIResources(Unknown bUnlockMovement, Unknown UnlockAILogic); // UnlockAIResources Engine.AnimInstance.UnlockAIResources // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game+0x1ed8b20>
	Unknown ScriptRunAssetExportTask(Unknown Task); // ScriptRunAssetExportTask Engine.Exporter.ScriptRunAssetExportTask // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	void WorldOriginLocationChanged(Unknown OldOriginLocation, Unknown NewOriginLocation); // WorldOriginLocationChanged Engine.LevelScriptActor.WorldOriginLocationChanged // (Event|Public|HasDefaults|BlueprintEvent) // <Game+0x23a73f0>
	void SetVectorParameter(struct FName ParameterName, Unknown Param); // SetVectorParameter Engine.FXSystemComponent.SetVectorParameter // (Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3da3370>
	Unknown Received_Notify(Unknown MeshComp, Unknown Animation); // Received_Notify Engine.AnimNotify.Received_Notify // (Event|Public|BlueprintEvent|Const) // <Game+0x23a73f0>
	Unknown Received_NotifyTick(Unknown MeshComp, Unknown Animation, float FrameDeltaTime); // Received_NotifyTick Engine.AnimNotifyState.Received_NotifyTick // (Event|Public|BlueprintEvent|Const) // <Game+0x23a73f0>
	Unknown K2_GetWorldSettings(); // K2_GetWorldSettings Engine.World.K2_GetWorldSettings // (Final|Native|Public|BlueprintCallable) // <Game+0x3e209f0>
	void OnChangedViewMode(); // OnChangedViewMode Engine.MKPawnEx.OnChangedViewMode // (Native|Event|Public|BlueprintEvent) // <Game+0x1e4be10>
	void SpawnDefaultController(); // SpawnDefaultController Engine.Pawn.SpawnDefaultController // (Native|Public|BlueprintCallable) // <Game+0x3da7a70>
	void UnCrouch(Unknown bClientSimulation); // UnCrouch Engine.Character.UnCrouch // (Native|Public|BlueprintCallable) // <Game+0x2024f20>
	void UpdateSpline(); // UpdateSpline Engine.SplineComponent.UpdateSpline // (Final|Native|Public|BlueprintCallable) // <Game+0x3e04590>
	void StopDelayed(float DelayTime); // StopDelayed Engine.AudioComponent.StopDelayed // (Final|Native|Public|BlueprintCallable) // <Game+0x3c85000>
	void StartPlay(); // StartPlay Engine.GameModeBase.StartPlay // (Native|Public|BlueprintCallable) // <Game+0x3cdadb0>
	void StartMatch(); // StartMatch Engine.GameMode.StartMatch // (Native|Public|BlueprintCallable) // <Game+0x3cdad90>
	void OnRep_SpectatorClass(); // OnRep_SpectatorClass Engine.GameStateBase.OnRep_SpectatorClass // (Native|Protected) // <Game+0x1f184e0>
	void OnRep_MatchState(); // OnRep_MatchState Engine.GameState.OnRep_MatchState // (Native|Public) // <Game+0x3cda6f0>
	void UnPossess(); // UnPossess Engine.Controller.UnPossess // (Final|Native|Public|BlueprintCallable) // <Game+0x3cb41f0>
	Unknown WasInputKeyJustReleased(Unknown Key); // WasInputKeyJustReleased Engine.PlayerController.WasInputKeyJustReleased // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3dba970>
	void StopMovementImmediately(); // StopMovementImmediately Engine.MovementComponent.StopMovementImmediately // (Native|Public|BlueprintCallable) // <Game+0x2049f00>
	void StopMovementKeepPathing(); // StopMovementKeepPathing Engine.NavMovementComponent.StopMovementKeepPathing // (Final|Native|Public|BlueprintCallable) // <Game+0x3d925a0>
	Unknown K2_GetInputVector(); // K2_GetInputVector Engine.PawnMovementComponent.K2_GetInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x3da7320>
	void SetWalkableFloorZ(float InWalkableFloorZ); // SetWalkableFloorZ Engine.CharacterMovementComponent.SetWalkableFloorZ // (Final|Native|Public|BlueprintCallable) // <Game+0x3cab4b0>
	void OnInterpToggle(Unknown bEnable); // OnInterpToggle Engine.SceneCapture2D.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // <Game+0x3daf520>
	void SetBoxExtent(Unknown InBoxExtent, Unknown bUpdateOverlaps); // SetBoxExtent Engine.BoxComponent.SetBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3c9d1a0>
	void SetUseFieldOfViewForLOD(Unknown bInUseFieldOfViewForLOD); // SetUseFieldOfViewForLOD Engine.CameraComponent.SetUseFieldOfViewForLOD // (Final|Native|Public|BlueprintCallable) // <Game+0x3c9d710>
	void Walk(); // Walk Engine.CheatManager.Walk // (Exec|Native|Public|BlueprintCallable) // <Game+0x2ed6cc0>
	void SetReplaySample(Unknown Target, Unknown ReplaySample, Unknown bSaveCheckpoint); // SetReplaySample Engine.MKDemoNetDriverEx.SetReplaySample // (Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game+0x3d890e0>
	Unknown SetStaticMesh(Unknown NewMesh); // SetStaticMesh Engine.StaticMeshComponent.SetStaticMesh // (Native|Public|BlueprintCallable) // <Game+0x168d070>
	void PlayReplayCommand(struct FString DemoName); // PlayReplayCommand Engine.MKGameInstanceEx.PlayReplayCommand // (Final|Exec|Native|Public) // <Game+0x3d88ff0>
	void ReceiveShutdown(); // ReceiveShutdown Engine.GameInstance.ReceiveShutdown // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	Unknown UpdateInstanceTransform(int32_t InstanceIndex, Unknown& NewInstanceTransform, Unknown bWorldSpace, Unknown bMarkRenderStateDirty, Unknown bTeleport); // UpdateInstanceTransform Engine.InstancedStaticMeshComponent.UpdateInstanceTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3cfbb20>
	Unknown RemoveInstances(Unknown& InstancesToRemove); // RemoveInstances Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x3cefb40>
	void ToggleReplayPauseAndResume(); // ToggleReplayPauseAndResume Engine.MK3DReplayController.ToggleReplayPauseAndResume // (Final|Native|Protected|BlueprintCallable) // <Game+0x3d849c0>
	void TurnAtRate(float Rate); // TurnAtRate Engine.DefaultPawn.TurnAtRate // (Native|Public|BlueprintCallable) // <Game+0x3cbd230>
	void MK3DSpectatorPawn_SetMaxSpeed(float fSpeed); // MK3DSpectatorPawn_SetMaxSpeed Engine.MK3DSpectatorPawn.MK3DSpectatorPawn_SetMaxSpeed // (Final|Exec|Native|Public) // <Game+0x3d88b40>
	void StopCameraShake(Unknown ShakeInstance, Unknown bImmediately); // StopCameraShake Engine.PlayerCameraManager.StopCameraShake // (Native|Public|BlueprintCallable) // <Game+0x3db0460>
	void ReceiveOverrideWith(Unknown OldPlayerState); // ReceiveOverrideWith Engine.PlayerState.ReceiveOverrideWith // (Event|Protected|BlueprintEvent) // <Game+0x23a73f0>
	Unknown UpdateKillcamInfo(Unknown WorldContextObject, Unknown Recorder, Unknown Target, Unknown Killer, Unknown Victim, Unknown bUpdateTime); // UpdateKillcamInfo Engine.MK3DEventFunction.UpdateKillcamInfo // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3d849e0>
	void ShowOnlyComponent(Unknown InComponent); // ShowOnlyComponent Engine.SceneCaptureComponent.ShowOnlyComponent // (Final|Native|Public|BlueprintCallable) // <Game+0x3ddb6d0>
	void CaptureScene(); // CaptureScene Engine.SceneCaptureComponent2D.CaptureScene // (Final|Native|Public|BlueprintCallable) // <Game+0x3dd80d0>
	void SetArrowColor(Unknown NewColor); // SetArrowColor Engine.ArrowComponent.SetArrowColor // (Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3c7c9e0>
	void StopSimulating(Unknown& HitResult); // StopSimulating Engine.ProjectileMovementComponent.StopSimulating // (Native|Public|HasOutParms|BlueprintCallable) // <Game+0x3dcb620>
	void ValidateSettings(); // ValidateSettings Engine.GameUserSettings.ValidateSettings // (Native|Public|BlueprintCallable) // <Game+0x2ed6cc0>
	void SetCapsuleSize(float InRadius, float InHalfHeight, Unknown bUpdateOverlaps); // SetCapsuleSize Engine.CapsuleComponent.SetCapsuleSize // (Final|Native|Public|BlueprintCallable) // <Game+0x3ca8d00>
	void SSSwapControllers(); // SSSwapControllers Engine.GameViewportClient.SSSwapControllers // (Exec|Native|Public) // <Game+0x2ed6e40>
	void OnRep_WorldGravityZ(); // OnRep_WorldGravityZ Engine.WorldSettings.OnRep_WorldGravityZ // (Native|Public) // <Game+0x1e4be10>
	Unknown IsDisabled(); // IsDisabled Engine.CameraModifier.IsDisabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2ed6dc0>
	void OnRep_bEnabled(); // OnRep_bEnabled Engine.SkyLight.OnRep_bEnabled // (Native|Public) // <Game+0x1e4be10>
	void SetForceMipLevelsToBeResident(Unknown OverrideForceMiplev, Unknown bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, Unknown bFastResponse); // SetForceMipLevelsToBeResident Engine.MaterialInterface.SetForceMipLevelsToBeResident // (RequiredAPI|Native|Public|BlueprintCallable) // <Game+0x3d7c630>
	Unknown K2_GetVectorParameterValue(struct FName ParameterName); // K2_GetVectorParameterValue Engine.MaterialInstanceConstant.K2_GetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3d7c330>
	int32_t GetAutoActivatePlayerIndex(); // GetAutoActivatePlayerIndex Engine.CameraActor.GetAutoActivatePlayerIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3c9cd90>
	void Stop(); // Stop Engine.AmbientSound.Stop // (Final|Native|Public|BlueprintCallable) // <Game+0x3c5d570>
	float GetPlayLength(); // GetPlayLength Engine.AnimSequenceBase.GetPlayLength // (Native|Public|BlueprintCallable) // <Game+0x3c76cb0>
	float GetDefaultBlendOutTime(); // GetDefaultBlendOutTime Engine.AnimMontage.GetDefaultBlendOutTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3284800>
	Unknown OverridePSTemplate(Unknown MeshComp, Unknown Animation); // OverridePSTemplate Engine.AnimNotifyState_Trail.OverridePSTemplate // (Event|Public|BlueprintEvent|Const) // <Game+0x23a73f0>
	void StopAnim(); // StopAnim Engine.AnimSingleNodeInstance.StopAnim // (Final|Native|Public|BlueprintCallable) // <Game+0x3c774c0>
	Unknown AsyncSaveGameToSlot(Unknown WorldContextObject, Unknown SaveGameObject, struct FString SlotName, int32_t UserIndex); // AsyncSaveGameToSlot Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3c80b30>
	Unknown AsyncLoadPrimaryAsset(Unknown WorldContextObject, Unknown PrimaryAsset, Unknown& LoadBundles); // AsyncLoadPrimaryAsset Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3c805f0>
	Unknown AsyncLoadPrimaryAssetClass(Unknown WorldContextObject, Unknown PrimaryAsset, Unknown& LoadBundles); // AsyncLoadPrimaryAssetClass Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3c80730>
	Unknown AsyncLoadPrimaryAssetList(Unknown WorldContextObject, Unknown& PrimaryAssetList, Unknown& LoadBundles); // AsyncLoadPrimaryAssetList Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3c809d0>
	Unknown AsyncLoadPrimaryAssetClassList(Unknown WorldContextObject, Unknown& PrimaryAssetList, Unknown& LoadBundles); // AsyncLoadPrimaryAssetClassList Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3c80870>
	Unknown AsyncChangeBu(Unknown WorldContextObject, Unknown& PrimaryAssetList, Unknown& AddBundles, Unknown& RemoveBundles); // AsyncChangeBne Engine.AsyncActionChangePrimaryAssetBundles.AsyncChange // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3c80310>
	void StartPrecompute(); // StartPrecompute Engine.AtmosphericFogComponent.StartPrecompute // (Final|Native|Public|BlueprintCallable) // <Game+0x151a800>
	void SetReverbSettings(Unknown& NewReverbSettings); // SetReverbSettings Engine.AudioVolume.SetReverbSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x3c84a70>
	void OnActorEndPlay(Unknown Actor, Unknown EndPlayReason); // OnActorEndPlay Engine.AutoDestroySubsystem.OnActorEndPlay // (Final|Native|Private) // <Game+0x3c8b230>
	Unknown RegisterMovementComponent(Unknown MovementComp, float AvoidanceWeight); // RegisterMovementComponent Engine.AvoidanceManager.RegisterMovementComponent // (Final|Native|Public|BlueprintCallable) // <Game+0x3c8b2f0>
	void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // SetUV Engine.BillboardComponent.SetUV // (Native|Public|BlueprintCallable) // <Game+0x3c8b5d0>
	void SetMapPropertyByName(Unknown Object, struct FName PropertyName, Unknown& Value); // SetMapPropertyByName Engine.BlueprintMapLibrary.SetMapPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3c90e50>
	struct FString VideoCaptureDir(); // VideoCaptureDir Engine.BlueprintPathsLibrary.VideoCaptureDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x3c95540>
	int32_t ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // ScheduleLocalNotificationFromNow Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3c974a0>
	void SetSetPropertyByName(Unknown Object, struct FName PropertyName, Unknown& Value); // SetSetPropertyByName Engine.BlueprintSetLibrary.SetSetPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3c97740>
	void Stop(Unknown bImmediate); // Stop Engine.CameraAnimInst.Stop // (Final|Native|Public|BlueprintCallable) // <Game+0x3c9d7a0>
	void ReceiveStopShake(Unknown bImmediately); // ReceiveStopShake Engine.CameraShake.ReceiveStopShake // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	void StopAllCameraShakes(Unknown bImmediately); // StopAllCameraShakes Engine.CameraShakeSourceComponent.StopAllCameraShakes // (Final|Native|Public|BlueprintCallable) // <Game+0x3ca1cb0>
	Unknown K2_TextSize(Unknown RenderFont, struct FString RenderText, Unknown Scale); // K2_TextSize Engine.Canvas.K2_TextSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3ca1ae0>
	void UpdateResource(); // UpdateResource Engine.CanvasRenderTarget2D.UpdateResource // (Native|Public|BlueprintCallable) // <Game+0x3ca8ea0>
	void SetChildActorClass(Unknown InClass); // SetChildActorClass Engine.ChildActorComponent.SetChildActorClass // (Final|Native|Public|BlueprintCallable) // <Game+0x3cb04c0>
	void GetValueRange(float& MinValue, float& MaxValue); // GetValueRange Engine.CurveBase.GetValueRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game+0x3cb8ba0>
	float GetFloatValue(float InTime); // GetFloatValue Engine.CurveFloat.GetFloatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3cb8960>
	Unknown GetLinearColorValue(float InTime); // GetLinearColorValue Engine.CurveLinearColor.GetLinearColorValue // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x3cb89f0>
	int32_t Blueprint_GetSizeY(); // Blueprint_GetSizeY Engine.Texture2D.Blueprint_GetSizeY // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3e15b40>
	Unknown GetCurvePosition(Unknown InCurve, float& Position); // GetCurvePosition Engine.CurveLinearColorAtlas.GetCurvePosition // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x3cb8090>
	float GetCurveValue(struct FName CurveName); // GetCurveValue Engine.CurveSourceInterface.GetCurveValue // (Native|Event|Public|BlueprintEvent|Const) // <Game+0x3cb8170>
	Unknown GetVectorValue(float InTime); // GetVectorValue Engine.CurveVector.GetVectorValue // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x3cb8c80>
	void GetDataTableRowNames(Unknown Table, Unknown& OutRowNames); // GetDataTableRowNames Engine.DataTableFunctionLibrary.GetDataTableRowNames // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3cb8880>
	void ToggleDisplay(); // ToggleDisplay Engine.DebugCameraController.ToggleDisplay // (Final|Native|Public|BlueprintCallable) // <Game+0x3cb8dc0>
	void SetDecalMaterial(Unknown NewDecalMaterial); // SetDecalMaterial Engine.DecalActor.SetDecalMaterial // (Final|Native|Public|BlueprintCallable) // <Game+0x3cbca40>
	void SetSortOrder(int32_t Value); // SetSortOrder Engine.DecalComponent.SetSortOrder // (Final|Native|Public|BlueprintCallable) // <Game+0x3cbd1b0>
	void ToggleEnabled(); // ToggleEnabled Engine.Light.ToggleEnabled // (Final|Native|Public|BlueprintCallable) // <Game+0x3d62050>
	void SetSamplesPerPixel(int32_t NewValue); // SetSamplesPerPixel Engine.LightComponentBase.SetSamplesPerPixel // (Final|Native|Public|BlueprintCallable) // <Game+0x3d64ca0>
	void SetVolumetricScatteringIntensity(float NewIntensity); // SetVolumetricScatteringIntensity Engine.LightComponent.SetVolumetricScatteringIntensity // (Final|Native|Public|BlueprintCallable) // <Game+0x3d61fd0>
	void SetShadowDistanceFadeoutFraction(float NewValue); // SetShadowDistanceFadeoutFraction Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction // (Final|Native|Public|BlueprintCallable) // <Game+0x3cbd130>
	void SetSphereRadius(float InSphereRadius, Unknown bUpdateOverlaps); // SetSphereRadius Engine.SphereComponent.SetSphereRadius // (Final|Native|Public|BlueprintCallable) // <Game+0x3e03bd0>
	void ToggleActive(); // ToggleActive Engine.Emitter.ToggleActive // (Final|Native|Public|BlueprintCallable) // <Game+0x3cc5720>
	void OnRep_bEnabled(); // OnRep_bEnabled Engine.ExponentialHeightFog.OnRep_bEnabled // (Native|Public) // <Game+0x1e4be10>
	void SetVolumetricFogScatteringDistr(float NewValue); // SetVolumetricFogScatteringDistr Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistr // (Final|Native|Public|BlueprintCallable) // <Game+0x3cd77f0>
	void Stop(); // Stop Engine.ForceFeedbackComponent.Stop // (Native|Public|BlueprintCallable) // <Game+0x3cd7870>
	void UnloadStreamLevel(Unknown WorldContextObject, struct FName LevelName, Unknown LatentInfo, Unknown bShouldBlockOnUnload); // UnloadStreamLevel Engine.GameplayStatics.UnloadStreamLevel // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3ce6f40>
	void SetOuterConeAngle(float NewOuterConeAngle); // SetOuterConeAngle Engine.SpotLight.SetOuterConeAngle // (Final|Native|Public|BlueprintCallable) // <Game+0x3e08920>
	void StopPerformanceSnapshots(); // StopPerformanceSnapshots Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots // (Final|Exec|Native|Static|Public|BlueprintCallable) // <Game+0x3cefdb0>
	float RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed); // RandomSobolFloat Engine.ImportanceSamplingLibrary.RandomSobolFloat // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x3cf6660>
	Unknown WasControllerKeyJustReleased(Unknown Key); // WasControllerKeyJustReleased Engine.InputComponent.WasControllerKeyJustReleased // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // <Game+0x3cf5db0>
	void SaveKeyMappings(); // SaveKeyMappings Engine.InputSettings.SaveKeyMappings // (Final|Native|Public|BlueprintCallable) // <Game+0x3cf6aa0>
	void StopSimulating(Unknown& HitResult); // StopSimulating Engine.InterpToMovementComponent.StopSimulating // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x3cffa40>
	void SetArrayPropertyByName(Unknown Object, struct FName PropertyName, Unknown& Value); // SetArrayPropertyByName Engine.KismetArrayLibrary.SetArrayPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3d048e0>
	void Parse_StringToGuid(struct FString GuidString, Unknown& OutGuid, Unknown& SUCCESS); // Parse_StringToGuid Engine.KismetGuidLibrary.Parse_StringToGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // <Game+0x3d082a0>
	Unknown PointerEvent_IsTouchEvent(Unknown& Input); // PointerEvent_IsTouchEvent Engine.KismetInputLibrary.PointerEvent_IsTouchEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x3d09210>
	Unknown SetCurrentLocale(struct FString Culture, Unknown SaveToConfig); // SetCurrentLocale Engine.KismetInternationalizationLibrary.SetCurrentLocale // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3d09700>
	void SetVectorParameterValue(Unknown WorldContextObject, Unknown Collection, struct FName ParameterName, Unknown& ParameterValue); // SetVectorParameterValue Engine.KismetMaterialLibrary.SetVectorParameterValue // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3d316a0>
	int32_t Xor_IntInt(int32_t A, int32_t B); // Xor_IntInt Engine.KismetMathLibrary.Xor_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x3d38f10>
	void MarkBit(int32_t& Data, int32_t Index); // MarkBit Engine.KismetNodeHelperLibrary.MarkBit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3d3f9a0>
	void SetCastInsetShadowForAllAttachments(Unknown PrimitiveComponent, Unknown bCastInsetShadow, Unknown bLightAttachmentsAsGroup); // SetCastInsetShadowForAllAttachments Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // <Game+0x3d40e10>
	struct FString TrimTrailing(struct FString SourceString); // TrimTrailing Engine.KismetStringLibrary.TrimTrailing // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x3d41620>
	Unknown IsRegisteredTableId(struct FName TableID); // IsRegisteredTableId Engine.KismetStringTableLibrary.IsRegisteredTableId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x3d4f100>
	void UnregisterForRemoteNotifications(); // UnregisterForRemoteNotifications Engine.KismetSystemLibrary.UnregisterForRemoteNotifications // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3d53fd0>
	struct FText TextTrimTrailing(struct FText& InText); // TextTrimTrailing Engine.KismetTextLibrary.TextTrimTrailing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x3d5e170>
	Unknown ShouldBeLoaded(); // ShouldBeLoaded Engine.LevelStreaming.ShouldBeLoaded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x34e8900>
	Unknown LoadLevelInstanceBySoftObjectPtr(Unknown WorldContextObject, Unknown Level, Unknown Location, Unknown Rotation, Unknown& bOutSuccess); // LoadLevelInstanceBySoftObjectPtr Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3d607a0>
	void SetIntensityUnits(Unknown NewIntensityUnits); // SetIntensityUnits Engine.LocalLightComponent.SetIntensityUnits // (Final|Native|Public|BlueprintCallable) // <Game+0x3d64c20>
	void SetElements(Unknown& NewElements); // SetElements Engine.MaterialBillboardComponent.SetElements // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x3d69620>
	void SetVectorParameterValueByInfo(Unknown& ParameterInfo, Unknown Value); // SetVectorParameterValueByInfo Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3d7cc10>
	void Stop(); // Stop Engine.MatineeActor.Stop // (Native|Public|BlueprintCallable) // <Game+0x1f16020>
	void RemovePaintedVertices(Unknown StaticMeshComponent); // RemovePaintedVertices Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3d84520>
	void OnJumpCompleteForKillcam(Unknown bSuccess); // OnJumpCompleteForKillcam Engine.MK3DKillcamComponent.OnJumpCompleteForKillcam // (Final|Native|Public) // <Game+0x3d840e0>
	void EnumerateMK3DTargetEvents(Unknown World); // EnumerateMK3DTargetEvents Engine.MK3DTargetcamComponent.EnumerateMK3DTargetEvents // (Final|Native|Public) // <Game+0x3d87a40>
	Unknown MakeReplaySample(Unknown Actor); // MakeReplaySample Engine.ReplaySampleBase.MakeReplaySample // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x3d88bc0>
	Unknown IsViewTargetPawn(Unknown InPawn, Unknown InPC); // IsViewTargetPawn Engine.MKUtils.IsViewTargetPawn // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3d88940>
	void MarkPropertyDirtyFromRepIndex(Unknown Object, int32_t RepIndex, struct FName PropertyName); // MarkPropertyDirtyFromRepIndex Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3d92490>
	Unknown ContainsEmitterType(Unknown TypeData); // ContainsEmitterType Engine.ParticleSystem.ContainsEmitterType // (Final|Native|Public|BlueprintCallable) // <Game+0x3da16e0>
	void SetTrailSourceData(struct FName InFirstSocketName, struct FName InSecondSocketName, Unknown InWidthMode, float InWidth); // SetTrailSourceData Engine.ParticleSystemComponent.SetTrailSourceData // (Final|Native|Public|BlueprintCallable) // <Game+0x3da3190>
	void MakeNoise(Unknown NoiseMaker, float Loudness, Unknown& NoiseLocation); // MakeNoise Engine.PawnNoiseEmitterComponent.MakeNoise // (BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3da7610>
	void SetStrengthMultiplyer(float InStrengthMultiplyer); // SetStrengthMultiplyer Engine.PhysicalAnimationComponent.SetStrengthMultiplyer // (Final|Native|Public|BlueprintCallable) // <Game+0x3da79f0>
	void SetOrientationDriveTwistAndSwing(Unknown bEnableTwistDrive, Unknown bEnableSwingDrive); // SetOrientationDriveTwistAndSwing Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing // (Final|Native|Public|BlueprintCallable) // <Game+0x3dab410>
	void SetTargetRotation(Unknown NewRotation); // SetTargetRotation Engine.PhysicsHandleComponent.SetTargetRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3dab650>
	Unknown GetSpringRestingPoint(); // GetSpringRestingPoint Engine.PhysicsSpringComponent.GetSpringRestingPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x3daf480>
	void OnInterpToggle(Unknown bEnable); // OnInterpToggle Engine.PlanarReflection.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // <Game+0x3daf520>
	Unknown SupportsConvertibleLaptops(); // SupportsConvertibleLaptops Engine.PlatformEventsComponent.SupportsConvertibleLaptops // (Final|Native|Public|BlueprintCallable) // <Game+0x3db0530>
	int32_t GetNumHeaders(); // GetNumHeaders Engine.PlatformInterfaceWebResponse.GetNumHeaders // (Native|Public) // <Game+0x151a7d0>
	void SetMouseSensitivity(float Sensitivity); // SetMouseSensitivity Engine.PlayerInput.SetMouseSensitivity // (Final|Exec|Native|Public) // <Game+0x3dbfd40>
	void SetRadius(float NewRadius); // SetRadius Engine.PointLight.SetRadius // (Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game+0x3dbfdc0>
	void SetSourceRadius(float bNewValue); // SetSourceRadius Engine.PointLightComponent.SetSourceRadius // (Final|Native|Public|BlueprintCallable) // <Game+0x3dbff40>
	void SetBoneTransformByName(struct FName BoneName, Unknown& InTransform, Unknown BoneSpace); // SetBoneTransformByName Engine.PoseableMeshComponent.SetBoneTransformByName // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3dbfae0>
	void AddOrUpdateBu(Unknown InBlendableObject, float InWeight); // AddOrUpdateBne Engine.PostProcessComponent.AddOrUpdate // (Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game+0x3dbef10>
	void AddOrUpdateBu(Unknown InBlendableObject, float InWeight); // AddOrUpdateBne Engine.PostProcessVolume.AddOrUpdate // (Final|Native|Public|BlueprintCallable) // <Game+0x3dbedc0>
	void ToggleForce(); // ToggleForce Engine.RadialForceActor.ToggleForce // (Native|Public|BlueprintCallable) // <Game+0x1f14780>
	void RemoveObjectTypeToAffect(Unknown ObjectType); // RemoveObjectTypeToAffect Engine.RadialForceComponent.RemoveObjectTypeToAffect // (Native|Public|BlueprintCallable) // <Game+0x3dcb260>
	void SetSourceWidth(float bNewValue); // SetSourceWidth Engine.RectLightComponent.SetSourceWidth // (Final|Native|Public|BlueprintCallable) // <Game+0x3dcb510>
	int32_t GetTileSize(); // GetTileSize Engine.RuntimeVirtualTexture.GetTileSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3dd13e0>
	Unknown GetVirtualTextureTransform(); // GetVirtualTextureTransform Engine.RuntimeVirtualTextureComponent.GetVirtualTextureTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x3dd1430>
	void CaptureScene(); // CaptureScene Engine.SceneCaptureComponentCube.CaptureScene // (Final|Native|Public|BlueprintCallable) // <Game+0x3dd80d0>
	void OnInterpToggle(Unknown bEnable); // OnInterpToggle Engine.SceneCaptureCube.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // <Game+0x3daf520>
	void InitializeSocketFromLocation(Unknown SkelComp, Unknown WorldLocation, Unknown WorldNormal); // InitializeSocketFromLocation Engine.SkeletalMeshSocket.InitializeSocketFromLocation // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3dee1e0>
	void SetSkyLuminanceFactor(Unknown NewValue); // SetSkyLuminanceFactor Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3df4210>
	void SetVolumetricScatteringIntensity(float NewIntensity); // SetVolumetricScatteringIntensity Engine.SkyLightComponent.SetVolumetricScatteringIntensity // (Final|Native|Public|BlueprintCallable) // <Game+0x3df4290>
	void StopRecordingOutput(Unknown WorldContextObject, Unknown ExportType, struct FString Name, struct FString Path, Unknown ExistingSoundWaveToOverwrite); // StopRecordingOutput Engine.SoundSubmix.StopRecordingOutput // (Final|Native|Public|BlueprintCallable) // <Game+0x3dfc130>
	void UpdateMesh(); // UpdateMesh Engine.SplineMeshComponent.UpdateMesh // (Final|Native|Public|BlueprintCallable) // <Game+0x3e090d0>
	void SetOuterConeAngle(float NewOuterConeAngle); // SetOuterConeAngle Engine.SpotLightComponent.SetOuterConeAngle // (Final|Native|Public|BlueprintCallable) // <Game+0x3e089a0>
	Unknown IsCollisionFixApplied(); // IsCollisionFixApplied Engine.SpringArmComponent.IsCollisionFixApplied // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3e08170>
	void RemoveSocket(Unknown Socket); // RemoveSocket Engine.StaticMesh.RemoveSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game+0x1f7b670>
	void SetUVRect(Unknown InUVRect); // SetUVRect Engine.StereoLayerComponent.SetUVRect // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3e0dc70>
	void SetRadius(float InRadius); // SetRadius Engine.StereoLayerShapeCylinder.SetRadius // (Final|Native|Public|BlueprintCallable) // <Game+0x3e0d940>
	void SetEquirectProps(Unknown InScaleBiases); // SetEquirectProps Engine.StereoLayerShapeEquirect.SetEquirectProps // (Final|Native|Public|BlueprintCallable) // <Game+0x3e0d540>
	void ShowSplashScreen(); // ShowSplashScreen Engine.StereoLayerFunctionLibrary.ShowSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x2f0a3a0>
	Unknown GetWorldSubsystem(Unknown ContextObject, Unknown Class); // GetWorldSubsystem Engine.SubsystemBlueprintLibrary.GetWorldSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x3e11b30>
	Unknown GetTimecode(); // GetTimecode Engine.TimecodeProvider.GetTimecode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3e15d30>
	void SetYScale(float Value); // SetYScale Engine.TextRenderComponent.SetYScale // (Final|Native|Public|BlueprintCallable) // <Game+0x3e121d0>
	void Stop(); // Stop Engine.TimelineComponent.Stop // (Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game+0x3e16540>
	Unknown TwitterRequest(struct FString URL, Unknown& ParamKeysAndValues, Unknown RequestMethod, int32_t AccountIndex); // TwitterRequest Engine.TwitterIntegrationBase.TwitterRequest // (Native|Public|HasOutParms) // <Game+0x3e1a9b0>
	void SetIntensity(float NewIntensity); // SetIntensity Engine.VectorFieldComponent.SetIntensity // (Native|Public|BlueprintCallable) // <Game+0x3e1a7c0>
	void RedirectVislog(Unknown SourceOwner, Unknown DestinationOwner); // RedirectVislog Engine.VisualLoggerKismetLibrary.RedirectVislog // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3d923e0>
	void RegisterWithPlayerState(Unknown OwningState); // RegisterWithPlayerState Engine.VOIPTalker.RegisterWithPlayerState // (Final|Native|Public|BlueprintCallable) // <Game+0x3e21350>
	void SetMicThreshold(float InThreshold); // SetMicThreshold Engine.VOIPStatics.SetMicThreshold // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3e21450>
	void SetWindType(Unknown InNewType); // SetWindType Engine.WindDirectionalSourceComponent.SetWindType // (Final|Native|Public|BlueprintCallable) // <Game+0x3e216c0>
	void SetLine(Unknown Show, int32_t IconIndex); // SetLine Line_WidgetActor.Line_WidgetActor_C.SetLine // (BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void ExecuteUbergraph(int32_t EntryPoint); // ExecuteUbergraph CoreUObject.Object.ExecuteUbergraph // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	Unknown SendSharedWorldDataToClients(); // SendSharedWorldDataToClients MagicLeapSharedWorld.MagicLeapSharedWorldGameMode.SendSharedWorldDataToClients // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game+0x17be000>
	void OnReplicate_SharedWorldData(); // OnReplicate_SharedWorldData MagicLeapSharedWorld.MagicLeapSharedWorldGameState.OnReplicate_SharedWorldData // (Final|Native|Private) // <Game+0x17bdfc0>
	void ServerSetLocalWorldData(Unknown LocalWorldReplicationData); // ServerSetLocalWorldData MagicLeapSharedWorld.MagicLeapSharedWorldPlayerContr.ServerSetLocalWorldData // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // <Game+0x17be0d0>
	void UnloadMaskOutCache(); // UnloadMaskOutCache CustomizableObject.CustomizableObject.UnloadMaskOutCache // (Final|Native|Public|BlueprintCallable) // <Game+0x1037d50>
	void UpdateSkeletalMeshAsync(Unknown bIgnoreCloseDist, Unknown bForceHighPriority); // UpdateSkeletalMeshAsync CustomizableObject.CustomizableObjectInstance.UpdateSkeletalMeshAsync // (Final|Native|Public|BlueprintCallable) // <Game+0x1037d70>
	void SetReleaseMutableTexturesImmediately(Unknown bReleaseTextures); // SetReleaseMutableTexturesImmediately CustomizableObject.CustomizableObjectSystem.SetReleaseMutableTexturesImmediately // (Final|Native|Public|BlueprintCallable) // <Game+0x103c3d0>
	void UpdateSkeletalMeshAsync(Unknown bNeverSkipUpdate); // UpdateSkeletalMeshAsync CustomizableObject.CustomizableSkeletalComponent.UpdateSkeletalMeshAsync // (Final|Native|Public|BlueprintCallable) // <Game+0x103c460>
	void DelegatedCallback(Unknown Instance); // DelegatedCallback CustomizableObject.InstanceUpdatedHelper.DelegatedCallback // (Final|Native|Public) // <Game+0x103c1b0>
	void AnimGraph(Unknown& AnimGraph); // AnimGraph AB.AB.AnimGraph // (HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SequenceEvent__ENTRYPOINTU_2(); // SequenceEvent__ENTRYPOINTU_2 U.U.SequenceEvent__ENTRYPOINTU_2 // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SendUnreliableMessage(Unknown& Bytes); // SendUnreliableMessage LowEntrySocketConnection.LowEntryRawSocketConnection.SendUnreliableMessage // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1086090>
	void SetPeriodicConnectionValidationEnabled(Unknown Enabled); // SetPeriodicConnectionValidationEnabled LowEntrySocketConnection.LowEntrySocketConnection.SetPeriodicConnectionValidationEnabled // (Final|Native|Public|BlueprintCallable) // <Game+0x10861f0>
	void Relisten(Unknown SocketConnection, Unknown WorldContextObject, Unknown LatentInfo); // Relisten LowEntrySocketConnection.LowEntrySocketConnectionLibrary.Relisten // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x1085860>
	Unknown SetTargetAsync(Unknown ImageTarget); // SetTargetAsync MagicLeapImageTracker.MagicLeapImageTrackerComponent.SetTargetAsync // (Final|Native|Public|BlueprintCallable) // <Game+0x17ead50>
	void SetMaxSimultaneousTargets(int32_t MaxSimultaneousTargets); // SetMaxSimultaneousTargets MagicLeapImageTracker.MagicLeapImageTrackerFunctionLibrary.SetMaxSimultaneousTargets // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x17eace0>
	Unknown Validate(); // Validate MediaAssets.MediaSource.Validate // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x34e8900>
	void SetFilePath(struct FString Path); // SetFilePath MediaAssets.FileMediaSource.SetFilePath // (Final|Native|Public|BlueprintCallable) // <Game+0x34e7b00>
	void EnumerateWebcamCaptureDevices(Unknown& OutDevices, int32_t Filter); // EnumerateWebcamCaptureDevices MediaAssets.MediaBlueprintFunctionLibrary.EnumerateWebcamCaptureDevices // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x34e5470>
	Unknown GetMediaTexture(); // GetMediaTexture MediaAssets.MediaComponent.GetMediaTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2eeb140>
	Unknown SupportsSeeking(); // SupportsSeeking MediaAssets.MediaPlayer.SupportsSeeking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x34e88d0>
	Unknown Replace(int32_t Index, Unknown Replacement); // Replace MediaAssets.MediaPlaylist.Replace // (Final|Native|Public|BlueprintCallable) // <Game+0x34e75c0>
	void SetSpectralAnalysisSettings(Unknown InFrequenciesToAnalyze, Unknown InFFTSize); // SetSpectralAnalysisSettings MediaAssets.MediaSoundComponent.SetSpectralAnalysisSettings // (Final|Native|Public|BlueprintCallable) // <Game+0x34e8240>
	void SetMediaPlayer(Unknown NewMediaPlayer); // SetMediaPlayer MediaAssets.MediaTexture.SetMediaPlayer // (Final|Native|Public|BlueprintCallable) // <Game+0x34e80a0>
	void SetDestructibleMesh(Unknown NewMesh); // SetDestructibleMesh ApexDestruction.DestructibleComponent.SetDestructibleMesh // (Final|Native|Public|BlueprintCallable) // <Game+0x10927a0>
	void SequenceEvent__ENTRYPOINTU_2(); // SequenceEvent__ENTRYPOINTU_2 U.U.SequenceEvent__ENTRYPOINTU_2 // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void UpdateSideMesh(Unknown InPrototype, Unknown MeshRelativeLocation, Unknown MeshRelativeRotation, Unknown MeshRelativeScale, int32_t SocketIndex, Unknown IsEnable, Unknown IsNormalized); // UpdateSideMesh RoadRuntime.CrossActor.UpdateSideMesh // (Final|Native|Public|HasDefaults) // <Game+0x109bec0>
	void UpdateSplineMesh(int32_t MeshIndex); // UpdateSplineMesh RoadRuntime.RoadActor.UpdateSplineMesh // (Final|Native|Public) // <Game+0x109c3a0>
	Unknown TryPurchaseItemAsync(Unknown& ItemDetails); // TryPurchaseItemAsync MagicLeap.InAppPurchaseComponent.TryPurchaseItemAsync // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x17c9b00>
	void SetStabilizationDepthActor(Unknown InStabilizationDepthActor, Unknown bSetFocusActor); // SetStabilizationDepthActor MagicLeap.MagicLeapHMDFunctionLibrary.SetStabilizationDepthActor // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x17c98d0>
	void SelectMeshBlocks(Unknown& NewMeshInfo, Unknown& RequestedMesh); // SelectMeshBlocks MagicLeap.MagicLeapMeshTrackerComponent.SelectMeshBlocks // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x17c9670>
	void SelectMeshBlocks(Unknown& NewMeshInfo, Unknown& RequestedMesh); // SelectMeshBlocks MagicLeap.MagicLeapMeshBlockSelectorInter.SelectMeshBlocks // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x17c9550>
	Unknown RequestRaycast(Unknown& RequestParams, struct FDelegate& ResultDelegate); // RequestRaycast MagicLeap.MagicLeapRaycastComponent.RequestRaycast // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x17c9400>
	Unknown MakeRaycastQueryParams(Unknown Position, Unknown Direction, Unknown UpVector, int32_t Width, int32_t Height, float HorizontalFovDegrees, Unknown CollideWithUnobserv, int32_t UserData); // MakeRaycastQueryParams MagicLeap.MagicLeapRaycastFunctionLibrary.MakeRaycastQueryParams // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // <Game+0x17c9180>
	void SetSequencePath(struct FString Path); // SetSequencePath ImgMedia.ImgMediaSource.SetSequencePath // (Final|Native|Public|BlueprintCallable) // <Game+0x10a8b20>
	void PreConstruct(Unknown IsDesignTime); // PreConstruct U.U.PreConstruct // (BlueprintCosmetic|Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	void Init(); // Init U.U.Init // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SetInputString(struct FString Identifier, struct FString Value); // SetInputString SubstanceCore.SubstanceGraphInstance.SetInputString // (Final|Native|Public|BlueprintCallable) // <Game+0x10c2fd0>
	void SyncRendering(Unknown InstancesToRender); // SyncRendering SubstanceCore.SubstanceUtility.SyncRendering // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // <Game+0x10c3110>
	void SetStaticGestureConfidenceThreshold(Unknown Gesture, float Confidence); // SetStaticGestureConfidenceThreshold MagicLeapHandTracking.MagicLeapHandTrackingFunctionLibrary.SetStaticGestureConfidenceThreshold // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x17e6b10>
	void SetVisibility(Unknown InVisibility); // SetVisibility UMG.Widget.SetVisibility // (Native|Public|BlueprintCallable) // <Game+0x3380180>
	void UnregisterInputComponent(); // UnregisterInputComponent UMG.UserWidget.UnregisterInputComponent // (Final|Native|Protected|BlueprintCallable) // <Game+0x337cea0>
	Unknown RemoveChildAt(int32_t Index); // RemoveChildAt UMG.PanelWidget.RemoveChildAt // (Final|Native|Public|BlueprintCallable) // <Game+0x336a8d0>
	Unknown SetContent(Unknown Content); // SetContent UMG.ContentWidget.SetContent // (Final|Native|Public|BlueprintCallable) // <Game+0x3360e30>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.Border.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x335dd80>
	Unknown DownloadImage(struct FString URL); // DownloadImage UMG.AsyncTaskDownloadImage.DownloadImage // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x335c230>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.BackgroundBlur.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x335dc80>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.BackgroundBlurSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x335dd00>
	Unknown GetValue(); // GetValue UMG.BoolBinding.GetValue // (Final|Native|Public|Const) // <Game+0x335c540>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.BorderSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x335de00>
	Unknown GetValue(); // GetValue UMG.BrushBinding.GetValue // (Final|Native|Public|Const) // <Game+0x335c570>
	void SetTouchMethod(Unknown InTouchMethod); // SetTouchMethod UMG.Button.SetTouchMethod // (Final|Native|Public|BlueprintCallable) // <Game+0x335dc00>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.ButtonSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x335de80>
	Unknown AddChildToCanvas(Unknown Content); // AddChildToCanvas UMG.CanvasPanel.AddChildToCanvas // (Final|Native|Public|BlueprintCallable) // <Game+0x335c1a0>
	void SetZOrder(int32_t InZOrder); // SetZOrder UMG.CanvasPanelSlot.SetZOrder // (Final|Native|Public|BlueprintCallable) // <Game+0x335df00>
	void SetIsChecked(Unknown InIsChecked); // SetIsChecked UMG.CheckBox.SetIsChecked // (Final|Native|Public|BlueprintCallable) // <Game+0x335d290>
	Unknown GetValue(); // GetValue UMG.CheckedStateBinding.GetValue // (Final|Native|Public|Const) // <Game+0x3360ba0>
	void SetRadius(float InRadius); // SetRadius UMG.CircularThrobber.SetRadius // (Final|Native|Public|BlueprintCallable) // <Game+0x3361630>
	Unknown GetSlateValue(); // GetSlateValue UMG.ColorBinding.GetSlateValue // (Final|Native|Public|Const) // <Game+0x33609f0>
	void SetSelectedOption(struct FString Option); // SetSelectedOption UMG.ComboBoxString.SetSelectedOption // (Final|Native|Public|BlueprintCallable) // <Game+0x3361730>
	void Drop(Unknown& PointerEvent); // Drop UMG.DragDropOperation.Drop // (Native|Event|Public|HasOutParms|BlueprintEvent) // <Game+0x33604f0>
	void SetEntrySpacing(Unknown& InEntrySpacing); // SetEntrySpacing UMG.DynamicEntryBoxBase.SetEntrySpacing // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3360ec0>
	void Reset(Unknown bDeleteWidgets); // Reset UMG.DynamicEntryBox.Reset // (Final|Native|Public|BlueprintCallable) // <Game+0x3360d80>
	void SetText(struct FText InText); // SetText UMG.EditableText.SetText // (Final|Native|Public|BlueprintCallable) // <Game+0x3361820>
	void SetText(struct FText InText); // SetText UMG.EditableTextBox.SetText // (Final|Native|Public|BlueprintCallable) // <Game+0x3361900>
	void SetIsExpanded_Animated(Unknown IsExpanded); // SetIsExpanded_Animated UMG.ExpandableArea.SetIsExpanded_Animated // (Final|Native|Public|BlueprintCallable) // <Game+0x3365c70>
	float GetValue(); // GetValue UMG.FloatBinding.GetValue // (Final|Native|Public|Const) // <Game+0x33648e0>
	void SetRowFill(int32_t columnIndex, float Coefficient); // SetRowFill UMG.GridPanel.SetRowFill // (Final|Native|Public|BlueprintCallable) // <Game+0x33661e0>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.GridSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x3366630>
	Unknown AddChildToHorizontalBox(Unknown Content); // AddChildToHorizontalBox UMG.HorizontalBox.AddChildToHorizontalBox // (Final|Native|Public|BlueprintCallable) // <Game+0x3363f40>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.HorizontalBoxSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x33666b0>
	void SetOpacity(float InOpacity); // SetOpacity UMG.Image.SetOpacity // (Final|Native|Public|BlueprintCallable) // <Game+0x3365fc0>
	void SetTextBlockVisibility(Unknown InVisibility); // SetTextBlockVisibility UMG.InputKeySelector.SetTextBlockVisibility // (Final|Native|Public|BlueprintCallable) // <Game+0x33665b0>
	int32_t GetValue(); // GetValue UMG.Int32Binding.GetValue // (Final|Native|Public|Const) // <Game+0x3364910>
	void SetCanCache(Unknown CanCache); // SetCanCache UMG.InvalidationBox.SetCanCache // (Final|Native|Public|BlueprintCallable) // <Game+0x33656f0>
	void BP_OnItemSelectionChanged(Unknown bIsSelected); // BP_OnItemSelectionChanged UMG.UserListEntry.BP_OnItemSelectionChanged // (Event|Protected|BlueprintEvent) // <Game+0x23a73f0>
	Unknown IsListItemSelected(Unknown UserListEntry); // IsListItemSelected UMG.UserListEntryLibrary.IsListItemSelected // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x33649e0>
	void OnListItemObjectSet(Unknown ListItemObject); // OnListItemObjectSet UMG.UserObjectListEntry.OnListItemObjectSet // (Event|Protected|BlueprintEvent) // <Game+0x23a73f0>
	Unknown GetListItemObject(Unknown UserObjectListEntry); // GetListItemObject UMG.UserObjectListEntryLibrary.GetListItemObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x3364740>
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier); // SetWheelScrollMultiplier UMG.ListViewBase.SetWheelScrollMultiplier // (Final|Native|Public|BlueprintCallable) // <Game+0x336b300>
	void SetSelectionMode(Unknown SelectionMode); // SetSelectionMode UMG.ListView.SetSelectionMode // (Final|Native|Public|BlueprintCallable) // <Game+0x33664a0>
	void ToggleOpen(Unknown bFocusOnOpen); // ToggleOpen UMG.MenuAnchor.ToggleOpen // (Final|Native|Public|BlueprintCallable) // <Game+0x336b460>
	Unknown GetValue(); // GetValue UMG.MouseCursor.GetValue // (Final|Native|Public|Const) // <Game+0x336a640>
	void SetJustification(Unknown InJustification); // SetJustification UMG.TextLayoutWidget.SetJustification // (Native|Public|BlueprintCallable) // <Game+0x337bd30>
	void SetWidgetStyle(Unknown& InWidgetStyle); // SetWidgetStyle UMG.MultiLineEditableText.SetWidgetStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x336b380>
	void SetTextStyle(Unknown& InTextStyle); // SetTextStyle UMG.MultiLineEditableTextBox.SetTextStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x336b1d0>
	Unknown AddChildToOverlay(Unknown Content); // AddChildToOverlay UMG.Overlay.AddChildToOverlay // (Final|Native|Public|BlueprintCallable) // <Game+0x3369fe0>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.OverlaySlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x336b280>
	void SetPercent(float InPercent); // SetPercent UMG.ProgressBar.SetPercent // (Final|Native|Public|BlueprintCallable) // <Game+0x336f100>
	void SetTextureParameter(struct FName TextureParameter); // SetTextureParameter UMG.RetainerBox.SetTextureParameter // (Final|Native|Public|BlueprintCallable) // <Game+0x336f900>
	void SetTextStyleSet(Unknown NewTextStyleSet); // SetTextStyleSet UMG.RichTextBlock.SetTextStyleSet // (Final|Native|Public|BlueprintCallable) // <Game+0x336f880>
	void SetSidesToPad(Unknown InPadLeft, Unknown InPadRight, Unknown InPadTop, Unknown InPadBottom); // SetSidesToPad UMG.SafeZone.SetSidesToPad // (Final|Native|Public|BlueprintCallable) // <Game+0x336f470>
	void SetUserSpecifiedScale(float InUserSpecifiedScale); // SetUserSpecifiedScale UMG.ScaleBox.SetUserSpecifiedScale // (Final|Native|Public|BlueprintCallable) // <Game+0x336f980>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.ScaleBoxSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x335de80>
	void SetState(float InOffsetFraction, float InThumbSizeFraction); // SetState UMG.ScrollBar.SetState // (Final|Native|Public|BlueprintCallable) // <Game+0x336f5e0>
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier); // SetWheelScrollMultiplier UMG.ScrollBox.SetWheelScrollMultiplier // (Final|Native|Public|BlueprintCallable) // <Game+0x336fa80>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.ScrollBoxSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x336fa00>
	void SetWidthOverride(float InWidthOverride); // SetWidthOverride UMG.SizeBox.SetWidthOverride // (Final|Native|Public|BlueprintCallable) // <Game+0x336fb00>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.SizeBoxSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x3373ae0>
	Unknown TransformVectorLocalToAbsolute(Unknown& Geometry, Unknown LocalVector); // TransformVectorLocalToAbsolute UMG.SlateBlueprintLibrary.TransformVectorLocalToAbsolute // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // <Game+0x3373e60>
	void SetValue(float InValue); // SetValue UMG.Slider.SetValue // (Final|Native|Public|BlueprintCallable) // <Game+0x33739e0>
	void SetSize(Unknown InSize); // SetSize UMG.Spacer.SetSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x33737e0>
	void SetValue(float NewValue); // SetValue UMG.SpinBox.SetValue // (Final|Native|Public|BlueprintCallable) // <Game+0x3373a60>
	struct FText GetTextValue(); // GetTextValue UMG.TextBinding.GetTextValue // (Final|Native|Public|Const) // <Game+0x337a510>
	void SetText(struct FText InText); // SetText UMG.TextBlock.SetText // (Native|Public|BlueprintCallable) // <Game+0x337c860>
	void SetNumberOfPieces(int32_t InNumberOfPieces); // SetNumberOfPieces UMG.Throbber.SetNumberOfPieces // (Final|Native|Public|BlueprintCallable) // <Game+0x337c080>
	void SetEntryWidth(float NewWidth); // SetEntryWidth UMG.TileView.SetEntryWidth // (Final|Native|Public|BlueprintCallable) // <Game+0x337b850>
	void SetItemExpansion(Unknown Item, Unknown bExpandItem); // SetItemExpansion UMG.TreeView.SetItemExpansion // (Final|Native|Public|BlueprintCallable) // <Game+0x337bc60>
	void SetUserTag(struct FName InUserTag); // SetUserTag UMG.UMGSequencePlayer.SetUserTag // (Final|Native|Public|BlueprintCallable) // <Game+0x337c940>
	void SetSlotPadding(Unknown InSlotPadding); // SetSlotPadding UMG.UniformGridPanel.SetSlotPadding // (Final|Native|Public|BlueprintCallable) // <Game+0x337c5a0>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.UniformGridSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x337c9c0>
	Unknown AddChildToVerticalBox(Unknown Content); // AddChildToVerticalBox UMG.VerticalBox.AddChildToVerticalBox // (Final|Native|Public|BlueprintCallable) // <Game+0x337e9b0>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.VerticalBoxSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x337ffe0>
	Unknown Spawn(Unknown ActorClass); // Spawn UMG.Viewport.Spawn // (Final|Native|Public|BlueprintCallable) // <Game+0x3380200>
	Unknown GetValue(); // GetValue UMG.VisibilityBinding.GetValue // (Final|Native|Public|Const) // <Game+0x337ed70>
	void UnbindFromAnimationStarted(Unknown Widget, struct FDelegate Delegate); // UnbindFromAnimationStarted UMG.WidgetAnimation.UnbindFromAnimationStarted // (Final|Native|Public|BlueprintCallable) // <Game+0x3386770>
	Unknown CreatePlayAnimationTimeRangeProxyObject(Unknown& Result, Unknown Widget, Unknown InAnimation, float StartAtTime, float EndAtTime, int32_t NumLoopsToPlay, Unknown PlayMode, float PlaybackSpeed); // CreatePlayAnimationTimeRangeProxyObject UMG.WidgetAnimationPlayCallbackProxy.CreatePlayAnimationTimeRangeProxyObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3382e00>
	Unknown GetValue(); // GetValue UMG.WidgetBinding.GetValue // (Final|Native|Public|Const) // <Game+0x3385080>
	Unknown UnlockMouse(Unknown& Reply); // UnlockMouse UMG.WidgetBlueprintLibrary.UnlockMouse // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x33868c0>
	void SetWindowVisibility(Unknown InVisibility); // SetWindowVisibility UMG.WidgetComponent.SetWindowVisibility // (Final|Native|Public|BlueprintCallable) // <Game+0x338a420>
	void SetFocus(Unknown FocusWidget); // SetFocus UMG.WidgetInteractionComponent.SetFocus // (Final|Native|Public|BlueprintCallable) // <Game+0x3389dd0>
	Unknown SlotAsWrapBoxSlot(Unknown Widget); // SlotAsWrapBoxSlot UMG.WidgetLayoutLibrary.SlotAsWrapBoxSlot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x338aaa0>
	void SetActiveWidgetIndex(int32_t Index); // SetActiveWidgetIndex UMG.WidgetSwitcher.SetActiveWidgetIndex // (Native|Public|BlueprintCallable) // <Game+0x338c130>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.WidgetSwitcherSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x338c780>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.WindowTitle.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x338c800>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.WindowTitle.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x338c880>
	void SetInnerSlotPadding(Unknown InPadding); // SetInnerSlotPadding UMG.WrapBox.SetInnerSlotPadding // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x338c550>
	void SetVerticalAlignment(Unknown InVerticalAlignment); // SetVerticalAlignment UMG.WrapBoxSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x338c900>
	void UpdateWholeDataModelFromStruct(Unknown Arg); // UpdateWholeDataModelFromStruct CoherentUIGTPlugin.CoherentUIGTBaseComponent.UpdateWholeDataModelFromStruct // (Final|Native|Public|BlueprintCallable|Const) // <Game+0x1100940>
	void TriggerJSEvent_Widget(Unknown Widget, struct FString EventName, Unknown JSEvent); // TriggerJSEvent_Widget CoherentUIGTPlugin.CoherentUIGTBlueprintFunctionLibrary.TriggerJSEvent_Widget // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x1103ba0>
	void SetupUIGTView(struct FString PageUrl, Unknown bIsTransparent, float ClickThroughAlphaThreshold, float AnimationFrameDefer, Unknown bDelayedUpdate); // SetupUIGTView CoherentUIGTPlugin.CoherentUIGTGameHUD.SetupUIGTView // (Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game+0x1103730>
	void ToggleCoherentUIGTInputFocus(); // ToggleCoherentUIGTInputFocus CoherentUIGTPlugin.CoherentUIGTInputActor.ToggleCoherentUIGTInputFocus // (Final|Native|Public|BlueprintCallable) // <Game+0x1103990>
	void AddText(struct FText& Text); // AddText CoherentUIGTPlugin.CoherentUIGTJSEvent.AddText // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1106630>
	void ReadObject(int32_t Index, Unknown Object); // ReadObject CoherentUIGTPlugin.CoherentUIGTJSPayload.ReadObject // (Final|Native|Public|BlueprintCallable) // <Game+0x1106f80>
	void OnLiveViewSizeRequest(Unknown baseComponent, struct FString Name, int32_t& Width, int32_t& Height); // OnLiveViewSizeRequest CoherentUIGTPlugin.CoherentUIGTLiveView.OnLiveViewSizeRequest // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1106df0>
	void UpdateWholeDataModelFromStruct(Unknown Arg); // UpdateWholeDataModelFromStruct CoherentUIGTPlugin.CoherentUIGTWidget.UpdateWholeDataModelFromStruct // (Final|Native|Public|BlueprintCallable|Const) // <Game+0x1100a10>
	void GetBravoHotelPlayerHUD(Unknown& NewParam); // GetBravoHotelPlayerHUD Inven.U.GetBravoHotelPlayerHUD // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x23a73f0>
	Unknown IsVisibleMatchEndWidget(); // IsVisibleMatchEndWidget U.U.IsVisibleMatchEndWidget // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void GetCachedAchievementProgress(Unknown WorldContextObject, Unknown PlayerController, struct FName AchievementID, Unknown& bFoundID, float& progress); // GetCachedAchievementProgress OnlineSubsystemUtils.Achievement.GetCachedAchievementProgress // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x11c8400>
	Unknown CacheAchievements(Unknown WorldContextObject, Unknown PlayerController); // CacheAchievements OnlineSubsystemUtils.AchievementQueryCallbackProxy.CacheAchievements // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11c7130>
	Unknown WriteAchievementProgress(Unknown WorldContextObject, Unknown PlayerController, struct FName AchievementName, float progress, int32_t UserTag); // WriteAchievementProgress OnlineSubsystemUtils.AchievementWriteCallbackProxy.WriteAchievementProgress // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11c8d60>
	Unknown ConnectToService(Unknown WorldContextObject, Unknown PlayerController); // ConnectToService OnlineSubsystemUtils.ConnectionCallbackProxy.ConnectToService // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11c71f0>
	Unknown CreateSession(Unknown WorldContextObject, Unknown PlayerController, int32_t PublicConnections, Unknown bUseLAN); // CreateSession OnlineSubsystemUtils.CreateSessionCallbackProxy.CreateSession // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11c77b0>
	Unknown DestroySession(Unknown WorldContextObject, Unknown PlayerController); // DestroySession OnlineSubsystemUtils.DestroySessionCallbackProxy.DestroySession // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11c78e0>
	Unknown EndMatch(Unknown WorldContextObject, Unknown PlayerController, Unknown MatchActor, struct FString MatchID, Unknown LocalPlayerOutcome, Unknown OtherPlayersOutcome); // EndMatch OnlineSubsystemUtils.EndMatchCallbackProxy.EndMatch // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11c79a0>
	Unknown EndTurn(Unknown WorldContextObject, Unknown PlayerController, struct FString MatchID, Unknown TurnBasedMatchInterface); // EndTurn OnlineSubsystemUtils.EndTurnCallbackProxy.EndTurn // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11c7bd0>
	struct FString GetServerName(Unknown& Result); // GetServerName OnlineSubsystemUtils.FindSessionsCallbackProxy.GetServerName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x11c8b40>
	Unknown FindTurnBasedMatch(Unknown WorldContextObject, Unknown PlayerController, Unknown MatchActor, int32_t MinPlayers, int32_t MaxPlayers, int32_t PlayerGroup, Unknown ShowExistingMatches); // FindTurnBasedMatch OnlineSubsystemUtils.FindTurnBasedMatchCallbackProxy.FindTurnBasedMatch // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11c7ea0>
	Unknown CreateProxyObjectForInAppPurchase(Unknown PlayerController, Unknown& ProductRequest); // CreateProxyObjectForInAppPurchase OnlineSubsystemUtils.InAppPurchaseCallbackProxy.CreateProxyObjectForInAppPurchase // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x11c73a0>
	Unknown CreateProxyObjectForInAppPurchaseUnprocessedPur(Unknown PlayerController); // CreateProxyObjectForInAppPurchaseUnprocessedPur OnlineSubsystemUtils.InAppPurchaseCallbackProxy2.CreateProxyObjectForInAppPurchaseUnprocessedPur // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11c7730>
	Unknown CreateProxyObjectForInAppPurchaseQuery(Unknown PlayerController, Unknown& ProductIdentifiers); // CreateProxyObjectForInAppPurchaseQuery OnlineSubsystemUtils.InAppPurchaseQueryCallbackProxy.CreateProxyObjectForInAppPurchaseQuery // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x11c75a0>
	Unknown CreateProxyObjectForInAppPurchaseQuery(Unknown PlayerController, Unknown& ProductIdentifiers); // CreateProxyObjectForInAppPurchaseQuery OnlineSubsystemUtils.InAppPurchaseQueryCallbackProxy2.CreateProxyObjectForInAppPurchaseQuery // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x11c7490>
	Unknown CreateProxyObjectForInAppPurchaseRestor(Unknown& ConsumableProductFlags, Unknown PlayerController); // CreateProxyObjectForInAppPurchaseRestor OnlineSubsystemUtils.InAppPurchaseRestoreCallbackProxy.CreateProxyObjectForInAppPurchaseRestor // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x11cca40>
	Unknown CreateProxyObjectForInAppPurchaseRestor(Unknown& ConsumableProductFlags, Unknown PlayerController); // CreateProxyObjectForInAppPurchaseRestor OnlineSubsystemUtils.InAppPurchaseRestoreCallbackProxy2.CreateProxyObjectForInAppPurchaseRestor // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x11cc920>
	Unknown JoinSession(Unknown WorldContextObject, Unknown PlayerController, Unknown& SearchResult); // JoinSession OnlineSubsystemUtils.JoinSessionCallbackProxy.JoinSession // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x11ccc20>
	Unknown WriteLeaderboardInteger(Unknown PlayerController, struct FName StatName, int32_t StatValue); // WriteLeaderboardInteger OnlineSubsystemUtils.Leaderboard.WriteLeaderboardInteger // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11cda00>
	Unknown CreateProxyObjectForFlush(Unknown PlayerController, struct FName SessionName); // CreateProxyObjectForFlush OnlineSubsystemUtils.LeaderboardFlushCallbackProxy.CreateProxyObjectForFlush // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11cc860>
	Unknown CreateProxyObjectForIntQuery(Unknown PlayerController, struct FName StatName); // CreateProxyObjectForIntQuery OnlineSubsystemUtils.LeaderboardQueryCallbackProxy.CreateProxyObjectForIntQuery // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11ccb60>
	Unknown Logout(Unknown WorldContextObject, Unknown PlayerController); // Logout OnlineSubsystemUtils.LogoutCallbackProxy.Logout // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11cce80>
	void ClientOnConnected(); // ClientOnConnected OnlineSubsystemUtils.OnlineBeaconClient.ClientOnConnected // (Final|Net|NetReliableNative|Event|Private|NetClient) // <Game+0x11cc710>
	void ServerUpdateReservationRequest(struct FString SessionID, Unknown ReservationUpdate); // ServerUpdateReservationRequest OnlineSubsystemUtils.PartyBeaconClient.ServerUpdateReservationRequest // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // <Game+0x11cd760>
	Unknown QuitMatch(Unknown WorldContextObject, Unknown PlayerController, struct FString MatchID, Unknown Outcome, int32_t TurnTimeoutInSeconds); // QuitMatch OnlineSubsystemUtils.QuitMatchCallbackProxy.QuitMatch // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11ccf40>
	Unknown ShowExternalLoginUI(Unknown WorldContextObject, Unknown InPlayerController); // ShowExternalLoginUI OnlineSubsystemUtils.ShowLoginUICallbackProxy.ShowExternalLoginUI // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11cfcc0>
	void ServerReservationRequest(struct FString SessionID, Unknown Reservation); // ServerReservationRequest OnlineSubsystemUtils.SpectatorBeaconClient.ServerReservationRequest // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // <Game+0x11cfac0>
	void ServerPong(); // ServerPong OnlineSubsystemUtils.TestBeaconClient.ServerPong // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game+0x11cfa70>
	void RegisterTurnBasedMatchInterfaceObject(Unknown WorldContextObject, Unknown PlayerController, Unknown Object); // RegisterTurnBasedMatchInterfaceObject OnlineSubsystemUtils.TurnBasedBlueprintLibrary.RegisterTurnBasedMatchInterfaceObject // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11cf980>
	Unknown IsIdling(); // IsIdling OnlineSubsystemUtils.VoipListenerSynthComponent.IsIdling // (Final|Native|Public|BlueprintCallable) // <Game+0x11cf950>
	void OnMatchReceivedTurn(struct FString Match, Unknown bDidBecomeActive); // OnMatchReceivedTurn OnlineSubsystem.TurnBasedMatchInterface.OnMatchReceivedTurn // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	Unknown GetVariantSetByName(struct FString VariantSetName); // GetVariantSetByName VariantManagerContent.LevelVariantSets.GetVariantSetByName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x16bd840>
	Unknown SwitchOnVariantByName(struct FString VariantSetName, struct FString VariantName); // SwitchOnVariantByName VariantManagerContent.LevelVariantSetsActor.SwitchOnVariantByName // (Final|Native|Public|BlueprintCallable) // <Game+0x16bdc50>
	Unknown HasRecordedData(); // HasRecordedData VariantManagerContent.PropertyValue.HasRecordedData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x16bd940>
	void SelectOption(int32_t OptionIndex); // SelectOption VariantManagerContent.SwitchActor.SelectOption // (Final|Native|Public|BlueprintCallable) // <Game+0x16bd9a0>
	void SwitchOn(); // SwitchOn VariantManagerContent.Variant.SwitchOn // (Final|Native|Public|BlueprintCallable) // <Game+0x16bdb70>
	void SetDisplayText(struct FText& NewDisplayText); // SetDisplayText VariantManagerContent.VariantSet.SetDisplayText // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x16bda20>
	void Stop(); // Stop AudioMixer.SynthComponent.Stop // (Final|Native|Public|BlueprintCallable) // <Game+0x33f3020>
	float TrimAudioCache(float InMegabytesToFree); // TrimAudioCache AudioMixer.AudioMixerBlueprintLibrary.TrimAudioCache // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x33f3320>
	void SetSettings(Unknown& Settings); // SetSettings AudioMixer.SubmixEffectDynamicsProcessorPr.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x33f2760>
	void SetSettings(Unknown& InSettings); // SetSettings AudioMixer.SubmixEffectSubmixEQPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18df450>
	void SetSettingsWithReverbEffect(Unknown InReverbEffect, float WetLevel, float DryLevel); // SetSettingsWithReverbEffect AudioMixer.SubmixEffectReverbPreset.SetSettingsWithReverbEffect // (Final|Native|Public|BlueprintCallable) // <Game+0x33f2af0>
	void SetSettingsWithReverbEffect(Unknown InReverbEffect, float WetLevel, float DryLevel); // SetSettingsWithReverbEffect AudioMixer.SubmixEffectReverbFastPreset.SetSettingsWithReverbEffect // (Final|Native|Public|BlueprintCallable) // <Game+0x33f29f0>
	Unknown GetGeometryCacheComponent(); // GetGeometryCacheComponent GeometryCache.GeometryCacheActor.GetGeometryCacheComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x16d1240>
	void TickAtThisTime(float Time, Unknown bInIsRunning, Unknown bInBackwards, Unknown bInIsLooping); // TickAtThisTime GeometryCache.GeometryCacheComponent.TickAtThisTime // (Final|Native|Public|BlueprintCallable) // <Game+0x16d18b0>
	void AddMeshSample(Unknown& MeshData, float SampleTime); // AddMeshSample GeometryCache.GeometryCacheTrack_FlipbookAnimation.AddMeshSample // (Final|Native|Public|HasOutParms) // <Game+0x16d0f80>
	void SetMesh(Unknown& NewMeshData); // SetMesh GeometryCache.GeometryCacheTrack_TransformAnimation.SetMesh // (Final|Native|Public|HasOutParms) // <Game+0x16d1580>
	void SetMesh(Unknown& NewMeshData); // SetMesh GeometryCache.GeometryCacheTrack_TransformGroupAnimation.SetMesh // (Final|Native|Public|HasOutParms) // <Game+0x16d1580>
	void OnInitializedFSM(Unknown Context); // OnInitializedFSM UFSM.FSMInterface.OnInitializedFSM // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x11eeaa0>
	Unknown FSM_SetState_Async(Unknown FSM, float WaitForSeconds, struct FName Name, Unknown Loop); // FSM_SetState_Async UFSM.FSM_SetState_Async.FSM_SetState_Async // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11ee010>
	Unknown FSM_SetStateID_Async(Unknown FSM, float WaitForSeconds, Unknown ID, Unknown Loop); // FSM_SetStateID_Async UFSM.FSM_SetStateID_Async.FSM_SetStateID_Async // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11ed8e0>
	Unknown FSM_SetState_ConditionalAsync(Unknown FSM, float WaitForSeconds, struct FName Name, Unknown Condition, Unknown Loop); // FSM_SetState_ConditionalAsync UFSM.FSM_SetState_ConditionalAsync.FSM_SetState_ConditionalAsync // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11ee360>
	Unknown FSM_SetStateID_ConditionalAsync(Unknown FSM, float WaitForSeconds, Unknown ID, Unknown Condition, Unknown Loop); // FSM_SetStateID_ConditionalAsync UFSM.FSM_SetStateID_ConditionalAsync.FSM_SetStateID_ConditionalAsync // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11edc40>
	Unknown FSM_SetState_AsyncWithCallbacks(Unknown FSM, float WaitForSeconds, struct FName Name, Unknown Loop, struct FDelegate& ExitPreviousStateCallback, struct FDelegate& BeginNextStateCallback); // FSM_SetState_AsyncWithCallbacks UFSM.FSM_SetState_AsyncWithCallbacks.FSM_SetState_AsyncWithCallbacks // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x11ee150>
	Unknown FSM_SetStateID_AsyncWith(Unknown FSM, float WaitForSeconds, Unknown ID, Unknown Loop, struct FDelegate& ExitPreviousStateCallback, struct FDelegate& BeginNextStateCallback); // FSM_SetStateID_AsyncWith UFSM.FSM_SetStateID_AsyncWith.FSM_SetStateID_AsyncWith // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x11eda20>
	Unknown FSM_SetState_ConditionalAsyncWithCallbacks(Unknown FSM, float WaitForSeconds, struct FName Name, Unknown Condition, Unknown Loop, struct FDelegate& ExitPreviousStateCallback, struct FDelegate& BeginNextStateCallback); // FSM_SetState_ConditionalAsyncWithCallbacks UFSM.FSM_SetState_ConditionalAsyncWithCallbacks.FSM_SetState_ConditionalAsyncWithCallbacks // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x11ee4e0>
	Unknown FSM_SetStateID_ConditionalAsyncWithCallbacks(Unknown FSM, float WaitForSeconds, Unknown ID, Unknown Condition, Unknown Loop, struct FDelegate& ExitPreviousStateCallback, struct FDelegate& BeginNextStateCallback); // FSM_SetStateID_ConditionalAsyncWithCallbacks UFSM.FSM_SetStateID_ConditionalAsyncWithCallbacks.FSM_SetStateID_ConditionalAsyncWithCallbacks // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x11eddc0>
	Unknown FSM_FinishState_Async(Unknown FSM, float WaitForSeconds); // FSM_FinishState_Async UFSM.FSM_FinishState_Async.FSM_FinishState_Async // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11ed2c0>
	Unknown FSM_FinishState_ConditionalAsync(Unknown FSM, Unknown Condition, float WaitForSeconds, struct FName Fallback); // FSM_FinishState_ConditionalAsync UFSM.FSM_FinishState_ConditionalAsync.FSM_FinishState_ConditionalAsync // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11ed520>
	Unknown FSM_FinishState_AsyncWithCallbacks(Unknown FSM, float WaitForSeconds, struct FDelegate& ExitPreviousStateCallback, struct FDelegate& BeginNextStateCallback); // FSM_FinishState_AsyncWithCallbacks UFSM.FSM_FinishState_AsyncWithCallbacks.FSM_FinishState_AsyncWithCallbacks // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x11ed390>
	Unknown FSM_FinishState_ConditionalAsyncWithCallbacks(Unknown FSM, Unknown Condition, float WaitForSeconds, struct FName Fallback, struct FDelegate& ExitPreviousStateCallback, struct FDelegate& BeginNextStateCallback, struct FDelegate& BeginFallbackStateCallback); // FSM_FinishState_ConditionalAsyncWithCallbacks UFSM.FSM_FinishState_ConditionalAsyncWithCallbacks.FSM_FinishState_ConditionalAsyncWithCallbacks // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x11ed660>
	Unknown FSM_EvaluateTwoBools(Unknown& BoolA, Unknown& AndB); // FSM_EvaluateTwoBools UFSM.FSMHelper.FSM_EvaluateTwoBools // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x11f2030>
	void Update(float DeltaTime); // Update UFSM.ReactiveStateMachine.Update // (Final|Native|Private) // <Game+0x11f2da0>
	Unknown WasInputKeyJustReleased(Unknown Key); // WasInputKeyJustReleased UFSM.StateAction.WasInputKeyJustReleased // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // <Game+0x11f2f10>
	Unknown SpawnMachine(Unknown Context, Unknown MachineClass, struct FString MachineID); // SpawnMachine UFSM.ReactiveStateMachineFactory.SpawnMachine // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x11f9c30>
	Unknown GetFSMComponentByName(struct FName Name); // GetFSMComponentByName UFSM.StateMachineABP.GetFSMComponentByName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x11f7010>
	void Update(Unknown UpState, struct FDelegate& Callback); // Update UFSM.StateMachineComponent.Update // (Native|Protected|HasOutParms) // <Game+0x11f9d80>
	void UpdatePersonalSupplyBox(); // UpdatePersonalSupplyBox U.U.UpdatePersonalSupplyBox // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SliceProceduralMesh(Unknown InProcMesh, Unknown PlanePosition, Unknown PlaneNormal, Unknown bCreateOtherHalf, Unknown& OutOtherHalfProcMesh, Unknown CapOption, Unknown CapMaterial); // SliceProceduralMesh ProceduralMeshComponent.KismetProceduralMeshLibrary.SliceProceduralMesh // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x178d6a0>
	void UpdateMeshSection_Linear(int32_t SectionIndex, Unknown& Vertices, Unknown& Normals, Unknown& UV0, Unknown& UV1, Unknown& UV2, Unknown& UV3, Unknown& VertexColors, Unknown& Tangents); // UpdateMeshSection_LinearCpone ProceduralMeshComponent.ProceduralMeshComponent.UpdateMeshSection_Linear // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x178dba0>
	void SequenceEvent__ENTRYPOINTU_16(); // SequenceEvent__ENTRYPOINTU_16 U.U.SequenceEvent__ENTRYPOINTU_16 // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void ParseString(struct FString InputString); // ParseString U.U.ParseString // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	Unknown UseBlackboard(Unknown BlackboardAsset, Unknown& BlackboardComponent); // UseBlackboard AIModule.AIController.UseBlackboard // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x3f9eea0>
	void OnMoveCompleted(Unknown RequestID, Unknown MovementResult); // OnMoveCompleted AIModule.AIAsyncTask.OnMoveCompleted // (Final|Native|Public) // <Game+0x3f9e440>
	void UnlockAIResourcesWithAnimation(Unknown AnimInstance, Unknown bUnlockMovement, Unknown UnlockAILogic); // UnlockAIResourcesWithAnimation AIModule.AIBlueprintHelperLibrary.UnlockAIResourcesWithAnimation // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // <Game+0x3f9ed90>
	void SetSenseEnabled(Unknown SenseClass, Unknown bEnable); // SetSenseEnabled AIModule.AIPerceptionComponent.SetSenseEnabled // (Final|Native|Public|BlueprintCallable) // <Game+0x3f9e8c0>
	void UnregisterFromSense(Unknown SenseClass); // UnregisterFromSense AIModule.AIPerceptionStimuliSourceComponent.UnregisterFromSense // (Final|Native|Public|BlueprintCallable) // <Game+0x3fa3810>
	void ReportPerceptionEvent(Unknown WorldContextObject, Unknown PerceptionEvent); // ReportPerceptionEvent AIModule.AIPerceptionSystem.ReportPerceptionEvent // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3fa3540>
	float OnUpdate(Unknown& EventsToProcess); // OnUpdate AIModule.AISense_Blueprint.OnUpdate // (Event|Public|HasOutParms|BlueprintEvent) // <Game+0x23a73f0>
	void ReportDamageEvent(Unknown WorldContextObject, Unknown DamagedActor, Unknown Instigator, float DamageAmount, Unknown EventLocation, Unknown HitLocation); // ReportDamageEvent AIModule.AISense_Damage.ReportDamageEvent // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0x3fa3130>
	void ReportNoiseEvent(Unknown WorldContextObject, Unknown NoiseLocation, float Loudness, Unknown Instigator, float MaxRange, struct FName Tag); // ReportNoiseEvent AIModule.AISense_Hearing.ReportNoiseEvent // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0x3fa3380>
	void RequestPawnPredictionEvent(Unknown Requestor, Unknown PredictedActor, float PredictionTime); // RequestPawnPredictionEvent AIModule.AISense_Prediction.RequestPawnPredictionEvent // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3fa36f0>
	void AILoggingVerbose(); // AILoggingVerbose AIModule.AISystem.AILoggingVerbose // (Exec|Native|Public) // <Game+0x2ed6cc0>
	Unknown AIMoveTo(Unknown Controller, Unknown GoalLocation, Unknown GoalActor, float AcceptanceRadius, Unknown StopOnOverlap, Unknown AcceptPartialPath, Unknown bUsePathfinding, Unknown bLockAILogic, Unknown bUseContinuosGoalTracking, Unknown ProjectGoalOnNavigation); // AIMoveTo AIModule.AITask_MoveTo.AIMoveTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0x3fa7660>
	Unknown RunEQS(Unknown Controller, Unknown QueryTemplate); // RunEQS AIModule.AITask_RunEQS.RunEQS // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3fa84a0>
	void StopLogic(struct FString reason); // StopLogic AIModule.BrainComponent.StopLogic // (Native|Public|BlueprintCallable) // <Game+0x3fae3c0>
	void SetDynamicSubtree(Unknown InjectTag, Unknown BehaviorAsset); // SetDynamicSubtree AIModule.BehaviorTreeComponent.SetDynamicSubtree // (Native|Public|BlueprintCallable) // <Game+0x3fa8560>
	Unknown GetBlackboardAsset(); // GetBlackboardAsset AIModule.BlackboardAssetProv.GetBlackboardAsset // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1f94100>
	void SetValueAsVector(struct FName& KeyName, Unknown VectorValue); // SetValueAsVector AIModule.BlackboardComponent.SetValueAsVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3fa8e20>
	void ReceiveTickAI(Unknown OwnerController, Unknown ControlledPawn, float DeltaSeconds); // ReceiveTickAI AIModule.BTDecorator_BlueprintBase.ReceiveTickAI // (Event|Protected|BlueprintEvent) // <Game+0x23a73f0>
	void StopUsingExternalEv(Unknown NodeOwner); // StopUsingExternalEvx AIModule.BTFunctionLibrary.StopUsingExternalEv // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3d4a420>
	void ReceiveTickAI(Unknown OwnerController, Unknown ControlledPawn, float DeltaSeconds); // ReceiveTickAI AIModule.BTService_BlueprintBase.ReceiveTickAI // (Event|Protected|BlueprintEvent) // <Game+0x23a73f0>
	void SetFinishOnMessageWithId(struct FName MessageName, int32_t RequestID); // SetFinishOnMessageWithId AIModule.BTTask_BlueprintBase.SetFinishOnMessageWithId // (Final|Native|Protected|BlueprintCallable) // <Game+0x3fb12c0>
	void OnNavDataRegistered(Unknown NavData); // OnNavDataRegistered AIModule.PathFollowingComponent.OnNavDataRegistered // (Final|Native|Protected) // <Game+0x3fbc6f0>
	void SuspendCrowdSteering(Unknown bSuspend); // SuspendCrowdSteering AIModule.CrowdFollowingComponent.SuspendCrowdSteering // (Native|Public|BlueprintCallable) // <Game+0x3fb1380>
	void ProvideSingleLocation(Unknown QuerierObject, Unknown QuerierActor, Unknown& ResultingLocation); // ProvideSingleLocation AIModule.EnvQueryContext_BlueprintBase.ProvideSingleLocation // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent|Const) // <Game+0x23a73f0>
	Unknown GetQuerier(); // GetQuerier AIModule.EnvQueryGenerator_BlueprintBase.GetQuerier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3fb4a10>
	void SetNamedParam(struct FName ParamName, float Value); // SetNamedParam AIModule.EnvQueryInstanceBlueprintWrapper.SetNamedParam // (Final|Native|Public|BlueprintCallable) // <Game+0x3fb4e40>
	Unknown RunEQSQuery(Unknown WorldContextObject, Unknown QueryTemplate, Unknown Querier, Unknown RunMode, Unknown WrapperClass); // RunEQSQuery AIModule.EnvQueryManager.RunEQSQuery // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3fb4cc0>
	void SetSmartLinkEnabled(Unknown bEnabled); // SetSmartLinkEnabled AIModule.NavLinkProxy.SetSmartLinkEnabled // (Final|Native|Public|BlueprintCallable) // <Game+0x3fba120>
	Unknown SetLocalNavigationGridDensity(Unknown WorldContextObject, float CellSize); // SetLocalNavigationGridDensity AIModule.NavLocalGridManager.SetLocalNavigationGridDensity // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3fba050>
	Unknown GetActionPriority(); // GetActionPriority AIModule.PawnAction.GetActionPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x1894d80>
	void ActionTick(Unknown ControlledPawn, float DeltaSeconds); // ActionTick AIModule.PawnAction_.ActionTick // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	Unknown K2_PushAction(Unknown NewAction, Unknown Priority, Unknown Instigator); // K2_PushAction AIModule.PawnActionsComponent.K2_PushAction // (Final|Native|Public|BlueprintCallable) // <Game+0x3fbc460>
	void SetSensingUpdatesEnabled(Unknown bEnabled); // SetSensingUpdatesEnabled AIModule.PawnSensingComponent.SetSensingUpdatesEnabled // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game+0x3fbc870>
	Unknown GetInteractiveWidget(); // GetInteractiveWidget B.B.GetInteractiveWidget // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void ServerRPVPing(); // ServerRPVPing ReplicationOptimizer.ReplicationPingComponet.ServerRPVPing // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // <Game+0x120cce0>
	void ServerStopDebugging(); // ServerStopDebugging ReplicationGraph.ReplicationGraphDebugActor.ServerStopDebugging // (Net|NetReliableNative|Event|Public|NetServer) // <Game+0x1236fb0>
	struct FString GetDatasmithUserDataValueForKey(Unknown Object, struct FName Key); // GetDatasmithUserDataValueForKey DatasmithContent.DatasmithContentBlueprintLibrarH.GetDatasmithUserDataValueForKey // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x16b3a20>
	void PlayLevelSequence(Unknown SequenceToPlay); // PlayLevelSequence DatasmithContent.DatasmithImportedSequencesActor.PlayLevelSequence // (Final|Native|Public|BlueprintCallable) // <Game+0x16b3b30>
	struct FString GetProjectlFullVersion(struct FString Prefix); // GetProjectlFullVersion ProjectVersion.ProjectVersionStatics.GetProjectlFullVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x1238300>
	void SetPrefab(Unknown NewPrefab, Unknown bForceRevertEvenDisconnected); // SetPrefab PrefabAsset.PrefabToolActor.SetPrefab // (Final|Native|Public|BlueprintCallable) // <Game+0x124ca70>
	void SetSimplifiedMeshAssetReference(Unknown& InAssetReference); // SetSimplifiedMeshAssetReference PrefabAsset.PrefabAsset.SetSimplifiedMeshAssetReference // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x124cb40>
	Unknown SpawnPrefab(Unknown WorldContextObject, Unknown PrefabAsset, Unknown& SpawnTransform, Unknown& OutSpawnPrefabInstances, Unknown bSpawnInstancesOnly, Unknown CollisionHandlingOv, Unknown Owner); // SpawnPrefab PrefabAsset.PrefabFunctionLibrary.SpawnPrefab // (Final|Native|Static|Private|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x124cbf0>
	void UnitTest(); // UnitTest PrefabAsset.BravoHotelWorldTagFunctionLibrary.UnitTest // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x124ce80>
	void HideMouse(); // HideMouse Inven.U.HideMouse // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	struct FString ToAbsolutePath(struct FString projectReleativePath, Unknown isSave); // ToAbsolutePath XlntLib.DirectExcelLibrary.ToAbsolutePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x1340940>
	Unknown Type(); // Type XlntLib.ExcelCell.Type // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1341020>
	int32_t Width(Unknown rangeReference); // Width XlntLib.ExcelCellRangeReferenceLibrary.Width // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x1341050>
	struct FString ToString(Unknown cellRef); // ToString XlntLib.ExcelCellReferenceLibrary.ToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x1340f20>
	void SetProtection(Unknown protection); // SetProtection XlntLib.ExcelFormat.SetProtection // (Final|Native|Public|BlueprintCallable) // <Game+0x13476a0>
	Unknown MakeNumberFormat_Text(); // MakeNumberFormat_Text XlntLib.ExcelNumberFormatLibrary.MakeNumberFormat_Text // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x1345be0>
	struct FString ToString(Unknown Value); // ToString XlntLib.ExcelVariantLibrary.ToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x1348130>
	struct FString Title(); // Title XlntLib.ExcelWorkbook.Title // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1351370>
	void UnmergeCells(Unknown rangeReference); // UnmergeCells XlntLib.ExcelWorksheet.UnmergeCells // (Final|Native|Public|BlueprintCallable) // <Game+0x1351cf0>
	Unknown IsEnableSpawnSupplyBox(Unknown TargetActor, struct FString& OutResult); // IsEnableSpawnSupplyBox Character.B.IsEnableSpawnSupplyBox // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void CheckSelectProgramIndex(); // CheckSelectProgramIndex U.U.CheckSelectProgramIndex // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	struct FName GetVersion(); // GetVersion RMAFoliageTools.RMAFoliageToolsFunctionLibrary.GetVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x1357740>
	Unknown Get(); // Get MK3DReplayBasic.MK3DUserInterfaceManager.Get // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x1366da0>
	void OnClickPlayerNameButton(); // OnClickPlayerNameButton MK3DReplayBasic.NativePlayerListItem.OnClickPlayerNameButton // (Final|Native|Public) // <Game+0x1367240>
	void ShowPlayerList(); // ShowPlayerList MK3DReplayBasic.NativePlayerListWidget.ShowPlayerList // (Final|Native|Public|BlueprintCallable) // <Game+0x1368fc0>
	Unknown OnMouseMoveEventBorder(Unknown MyGeometry, Unknown& MouseEvent); // OnMouseMoveEventBorder MK3DReplayBasic.NativeReplayEventMarkerBasic.OnMouseMoveEventBorder // (Native|Public|HasOutParms) // <Game+0x1368120>
	void SetKillEvent(Unknown& InKillEvent); // SetKillEvent MK3DReplayBasic.NativeReplayKillEventMarker.SetKillEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1368ce0>
	void SetReplayListItemText(struct FString Name, Unknown IsLive, Unknown Time); // SetReplayListItemText MK3DReplayBasic.NativeReplayListItem.SetReplayListItemText // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x1368dc0>
	void ShowMouseCursor(); // ShowMouseCursor MK3DReplayBasic.NativeReplayListLev.ShowMouseCursor // (Final|Native|Protected) // <Game+0x1368fa0>
	void UpdateTotalReplaysTB(); // UpdateTotalReplaysTB MK3DReplayBasic.NativeReplayListWidget.UpdateTotalReplaysTB // (Final|Native|Public|BlueprintCallable) // <Game+0x1369350>
	void UpdateTimelineScale(); // UpdateTimelineScale MK3DReplayBasic.NativeReplayTimelineBasicWidget.UpdateTimelineScale // (Final|Native|Public|BlueprintCallable) // <Game+0x1369310>
	Unknown GetVelocityValue(int32_t& rowIndex, Unknown& Value); // GetVelocityValue HoudiniNiagara.HoudiniCSV.GetVelocityValue // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x1383590>
	void OnLoaded_27D2D12149E3EA31998D6D88C1D08B2F(Unknown Loaded); // OnLoaded_27D2D12149E3EA31998D6D88C1D08B2F U.U.OnLoaded_27D2D12149E3EA31998D6D88C1D08B2F // (BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SetDestroyOnSystemFinish(Unknown bShouldDestroyOnSystemFinish); // SetDestroyOnSystemFinish Niagara.NiagaraActor.SetDestroyOnSystemFinish // (Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game+0x1507850>
	void SetVariableVec4(struct FName InVariableName, Unknown& InValue); // SetVariableVec4 Niagara.NiagaraComponent.SetVariableVec4 // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x1508c80>
	void ReceiveParticleData(Unknown& Data, Unknown NiagaraSystem); // ReceiveParticleData Niagara.NiagaraParticleCallbackHandler.ReceiveParticleData // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x15102e0>
	void GetTextureSize(Unknown Component, int32_t& SizeX, int32_t& SizeY); // GetTextureSize Niagara.NiagaraDataInterfaceGrid2DCollection.GetTextureSize // (Native|Public|HasOutParms|BlueprintCallable) // <Game+0x15101c0>
	Unknown SpawnSystemAttached(Unknown SystemTemplate, Unknown AttachToComponent, struct FName AttachPointName, Unknown Location, Unknown Rotation, Unknown LocationType, Unknown bAutoDestroy, Unknown bAutoActivate, Unknown PoolingMethod, Unknown bPreCullCheck); // SpawnSystemAttached Niagara.NiagaraFunctionLibrary.SpawnSystemAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0x1514b90>
	void SetVectorParameter(struct FString InVariableName, Unknown InValue); // SetVectorParameter Niagara.NiagaraParameterCollectionInstance.SetVectorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x15146e0>
	void SetSystem(Unknown InSystem); // SetSystem Niagara.NiagaraPreviewBase.SetSystem // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	int32_t Num(); // Num Niagara.NiagaraPreviewAxis.Num // (Native|Event|Public|BlueprintEvent) // <Game+0x151a7d0>
	void SetPaused(Unknown bPaused); // SetPaused Niagara.NiagaraPreviewGrid.SetPaused // (Final|Native|Public|BlueprintCallable) // <Game+0x151a820>
	void RaiseOnGPUCompilationComplete(); // RaiseOnGPUCompilationComplete Niagara.NiagaraScript.RaiseOnGPUCompilationComplete // (Final|Native|Public) // <Game+0x151a800>
	void SetCompareFloatArrow(Unknown UpImgae, Unknown DownImgae, Unknown Text, Unknown CompareInfo); // SetCompareFloatArrow U.U.SetCompareFloatArrow // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SetRowIndex(int32_t NewRowIndex); // SetRowIndex MovieScene.MovieSceneSection.SetRowIndex // (Final|Native|Public|BlueprintCallable) // <Game+0x31b2860>
	Unknown FindBindingsByTag(struct FName InBindingName); // FindBindingsByTag MovieScene.MovieSceneSequence.FindBindingsByTag // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x31b6840>
	void StopAtCurrentTime(); // StopAtCurrentTime MovieScene.MovieSceneSequencePlayer.StopAtCurrentTime // (Final|Native|Public|BlueprintCallable) // <Game+0x31b7d20>
	void SetSequence(Unknown Sequence); // SetSequence MovieScene.MovieSceneSubSection.SetSequence // (Final|Native|Public|BlueprintCallable) // <Game+0x31ba9f0>
	void OnTick(float DeltaSeconds, float InPlayRate); // OnTick MovieScene.MovieSceneCustomClockSource.OnTick // (Native|Public) // <Game+0x31aafe0>
	float OnEvaluate(float Interp); // OnEvaluate MovieScene.MovieSceneEasingFunction.OnEvaluate // (Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x23a73f0>
	void SetObserver(); // SetObserver Character.B.SetObserver // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	Unknown GetSpawnedEffect(); // GetSpawnedEffect NiagaraAnimNotifies.AnimNotify_PlayNiagaraEffect.GetSpawnedEffect // (Final|Native|Public|BlueprintCallable|Const) // <Game+0x1523770>
	Unknown CreateSlot(); // CreateSlot U.U.CreateSlot // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void OpenPortal(); // OpenPortal AkAudio.AkAcousticPortal.OpenPortal // (Final|Native|Public|BlueprintCallable) // <Game+0x15fa3e0>
	void StopAmbientSound(); // StopAmbientSound AkAudio.AkAmbientSound.StopAmbientSound // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0x15fb620>
	void MigrateMultiCoreRendering(Unknown NewValue); // MigrateMultiCoreRendering AkAudio.AkAndroidInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0x15fa360>
	float GetMinimumDuration(); // GetMinimumDuration AkAudio.AkAudioEvent.GetMinimumDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x15fa070>
	void Stop(); // Stop AkAudio.AkGameObject.Stop // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0x1600640>
	void UseReverbVolumes(Unknown inUseReverbVolumes); // UseReverbVolumes AkAudio.AkComponent.UseReverbVolumes // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0x15fb820>
	int32_t PostAssociatedAudioInputEvent(); // PostAssociatedAudioInputEvent AkAudio.AkAudioInputComponent.PostAssociatedAudioInputEvent // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0x15fab70>
	void SetIsChecked(Unknown InIsChecked); // SetIsChecked AkAudio.AkCheckBox.SetIsChecked // (Final|Native|Public|BlueprintCallable) // <Game+0x15fb030>
	void UseReverbVolumes(Unknown inUseReverbVolumes, Unknown Actor); // UseReverbVolumes AkAudio.AkGameplayStatics.UseReverbVolumes // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // <Game+0x1600c90>
	Unknown GetType(); // GetType AkAudio.AkMIDIEventCallbackInfo.GetType // (Final|Native|Public|BlueprintCallable) // <Game+0x1605e30>
	void UpdateGeometry(); // UpdateGeometry AkAudio.AkGeometryComponent.UpdateGeometry // (Final|Native|Public|BlueprintCallable) // <Game+0x1605e80>
	void MigrateMultiCoreRendering(Unknown NewValue); // MigrateMultiCoreRendering AkAudio.AkHololensInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0x15fa360>
	struct FText Conv_FAkBoolPropertyToControlToText(Unknown& INAkBoolPropertyToControl); // Conv_FAkBoolPropertyToControlToText AkAudio.AkItemBoolPropertiesConv.Conv_FAkBoolPropertyToControlToText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x160c760>
	void SetSearchText(struct FString newText); // SetSearchText AkAudio.AkItemBoolProperties.SetSearchText // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0x160ca70>
	struct FText Conv_FAkPropertyToControlToText(Unknown& INAkPropertyToControl); // Conv_FAkPropertyToControlToText AkAudio.AkItemPropertiesConv.Conv_FAkPropertyToControlToText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x160c760>
	void SetSearchText(struct FString newText); // SetSearchText AkAudio.AkItemProperties.SetSearchText // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0x160ca70>
	void MigrateMultiCoreRendering(Unknown NewValue); // MigrateMultiCoreRendering AkAudio.AkLinuxInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0x15fa360>
	void MigrateMultiCoreRendering(Unknown NewValue); // MigrateMultiCoreRendering AkAudio.AkLuminInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0x15fa360>
	void MigrateMultiCoreRendering(Unknown NewValue); // MigrateMultiCoreRendering AkAudio.AkMacInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0x15fa360>
	void MigrateMultiCoreRendering(Unknown NewValue); // MigrateMultiCoreRendering AkAudio.AkPS4InitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0x160c9f0>
	void SetValue(float InValue); // SetValue AkAudio.AkSlider.SetValue // (Final|Native|Public|BlueprintCallable) // <Game+0x1610c40>
	void UpdateSurfaceReflectorSet(); // UpdateSurfaceReflectorSet AkAudio.AkSurfaceReflectorSetComponent.UpdateSurfaceReflectorSet // (Final|Native|Public|BlueprintCallable) // <Game+0x1611060>
	void MigrateMultiCoreRendering(Unknown NewValue); // MigrateMultiCoreRendering AkAudio.AkSwitchInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0x15fa360>
	Unknown Unsubscribe(Unknown& SubscriptionId, Unknown& UnsubscriptionDone); // Unsubscribe AkAudio.AkWaapiCalls.Unsubscribe // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x1610f40>
	struct FText Conv_FAkWaapiFieldNamesToText(Unknown& INAkWaapiFieldNames); // Conv_FAkWaapiFieldNamesToText AkAudio.SAkWaapiFieldNamesConv.Conv_FAkWaapiFieldNamesToText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x160c760>
	Unknown SetStringField(Unknown& FieldName, struct FString FieldValue, Unknown Target); // SetStringField AkAudio.AkWaapiJsonManager.SetStringField // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x1618230>
	struct FText Conv_FAkWaapiUriToText(Unknown& INAkWaapiUri); // Conv_FAkWaapiUriToText AkAudio.AkWaapiUriConv.Conv_FAkWaapiUriToText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x160c760>
	void MigrateMultiCoreRendering(Unknown NewValue); // MigrateMultiCoreRendering AkAudio.AkWindowsInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0x15fa360>
	void SetSearchText(struct FString newText); // SetSearchText AkAudio.AkWwiseTree.SetSearchText // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0x160ca70>
	void MigrateMultiCoreRendering(Unknown NewValue); // MigrateMultiCoreRendering AkAudio.AkXboxOneInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0x15fa360>
	Unknown PostEventAsync(Unknown WorldContextObject, Unknown AkEvent, Unknown Actor, int32_t CallbackMask, struct FDelegate& PostEventCallback, Unknown& ExternalSources, Unknown bStopWhenAttachedToDestroyed); // PostEventAsync AkAudio.PostEventAsync.PostEventAsync // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x16175e0>
	Unknown PostEventAtLocationAsync(Unknown WorldContextObject, Unknown AkEvent, Unknown Location, Unknown Orientation); // PostEventAtLocationAsync AkAudio.PostEventAtLocationAsync.PostEventAtLocationAsync // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0x16186d0>
	void CheckBoosterItem(Unknown& IsBoost, Unknown& OutColor, Unknown& OutTexture); // CheckBoosterItem Inven.U.CheckBoosterItem // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void DefaultMessage(); // DefaultMessage U.U.DefaultMessage // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SetDLSSSharpness(float Sharpness); // SetDLSSSharpness DLSSBlueprint.DLSSLibrary.SetDLSSSharpness // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // <Game+0x162f020>
	void SequenceEvent__ENTRYPOINTU_1(); // SequenceEvent__ENTRYPOINTU_1 Cr.U.SequenceEvent__ENTRYPOINTU_1 // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SetIconTexture(Unknown IconTexture); // SetIconTexture U.U.SetIconTexture // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void EnableVolume(Unknown DDGIVolumeComponent); // EnableVolume RTXGI.DDGIBlueprintLibrary.EnableVolume // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x164d890>
	void DDGIClearVolumes(); // DDGIClearVolumes RTXGI.DDGIVolumeComponent.DDGIClearVolumes // (Final|Exec|Native|Public) // <Game+0x164d800>
	void ServerMessage(Unknown Message); // ServerMessage BattlEyeCommon.BattlEyeNetComponent.ServerMessage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game+0x16580c0>
	void SetStatValue(int32_t Type, float Value); // SetStatValue U.U.SetStatValue // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	Unknown SetCustomMeshTriangles(Unknown& Triangles); // SetCustomMeshTriangles OculusMR.OculusMR_PlaneMeshComponent.SetCustomMeshTriangles // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1894f40>
	void SetUseDynamicLighting(Unknown Val); // SetUseDynamicLighting OculusMR.OculusMR_Settings.SetUseDynamicLighting // (Final|Native|Public|BlueprintCallable) // <Game+0x1895210>
	Unknown SetTrackingReferenceComponent(Unknown Component); // SetTrackingReferenceComponent OculusMR.OculusMRFunctionLibrary.SetTrackingReferenceComponent // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x1895190>
	Unknown SetExpertWeaponPing(Unknown& PingInfo); // SetExpertWeaponPing WBP_SPS_Icon.WBP_SPS_Icon_C.SetExpertWeaponPing // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SetOpeningArrow(Unknown InOpening); // SetOpeningArrow U.U.SetOpeningArrow // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void GetFloorLocation(Unknown InLocation, Unknown& OutLocation); // GetFloorLocation B.B.GetFloorLocation // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x23a73f0>
	void StopOperation(); // StopOperation ZipUtility.ZipOperation.StopOperation // (Final|Native|Public|BlueprintCallable) // <Game+0x166d790>
	void OnStartProcess(struct FString archive, int32_t Bytes); // OnStartProcess ZipUtility.ZipUtilityInterface.OnStartProcess // (Native|Event|Public|BlueprintEvent) // <Game+0x166d6b0>
	Unknown IsValidKeyFrameIndex(int32_t Index); // IsValidKeyFrameIndex Paper2D.PaperFlipbook.IsValidKeyFrameIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x168ce30>
	void Stop(); // Stop Paper2D.PaperFlipbookComponent.Stop // (Final|Native|Public|BlueprintCallable) // <Game+0x168d540>
	Unknown UpdateInstanceTransform(int32_t InstanceIndex, Unknown& NewInstanceTransform, Unknown bWorldSpace, Unknown bMarkRenderStateDirty, Unknown bTeleport); // UpdateInstanceTransform Paper2D.PaperGroupedSpriteComponent.UpdateInstanceTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x168d670>
	Unknown MakeBrushFromSprite(Unknown Sprite, int32_t Width, int32_t Height); // MakeBrushFromSprite Paper2D.PaperSprite.MakeBrushFromSprite // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x1690370>
	void SetSpriteColor(Unknown NewColor); // SetSpriteColor Paper2D.PaperSpriteComponent.SetSpriteColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x1690a00>
	void SetTerrainColor(Unknown NewColor); // SetTerrainColor Paper2D.PaperTerrainComponent.SetTerrainColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x1690a80>
	void SetTileMapColor(Unknown NewColor); // SetTileMapColor Paper2D.PaperTileMapComponent.SetTileMapColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x1690c60>
	Unknown MakeTile(int32_t TileIndex, Unknown TileSet, Unknown bFlipH, Unknown bFlipV, Unknown bFlipD); // MakeTile Paper2D.TileMapBlueprintLibrary.MakeTile // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x1692700>
	void SetBlocked(Unknown IsBlocked, Unknown ComingSoon); // SetBlocked Inven.U.SetBlocked // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SetRarity(); // SetRarity U.U.SetRarity // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void AnimGraph(Unknown& AnimGraph); // AnimGraph AB.AB.AnimGraph // (HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void GetInstancedActors(Unknown& Actors); // GetInstancedActors AnimationSharing.AnimSharingStateInstance.GetInstancedActors // (Final|Native|Protected|HasOutParms|BlueprintCallable) // <Game+0x16a54d0>
	void RegisterActorWithSkeletonBP(Unknown InActor, Unknown SharingSkeleton); // RegisterActorWithSkeletonBP AnimationSharing.AnimationSharingManager.RegisterActorWithSkeletonBP // (Final|Native|Public|BlueprintCallable) // <Game+0x16a5730>
	void ProcessActorState(int32_t& OutState, Unknown InActor, Unknown CurrentState, Unknown OnDemandState, Unknown& bShouldProcess); // ProcessActorState AnimationSharing.AnimationSharingStateProcessor.ProcessActorState // (Native|Event|Public|HasOutParms|BlueprintEvent) // <Game+0x16a5580>
	void NotifyNewItemToCoh(); // NotifyNewItemToCoh U.U.NotifyNewItemToCoh // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void TakeGameplayAutomationScreenshot(struct FString ScreenshotName, float MaxGlobalError, float MaxLocalError, struct FString MapNameOverride); // TakeGameplayAutomationScreenshot AutomationUtils.AutomationUtilsBlueprintLibrary.TakeGameplayAutomationScreenshot // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x16d8670>
	void ShouldUpdateParameter(Unknown& Result); // ShouldUpdateParameter BP_BlueZone.BP_BlueZone_C.ShouldUpdateParameter // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x23a73f0>
	void Construct(); // Construct U.U.Construct // (BlueprintCosmetic|Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	void SetAnimDriveSpringStiffness(float InStiffness); // SetAnimDriveSpringStiffness ClothingSystemRuntimeInterface.ClothingSimulationInteractor.SetAnimDriveSpringStiffness // (Native|Public|BlueprintCallable) // <Game+0x34cb070>
	void AnimGraph(Unknown& AnimGraph); // AnimGraph AB.AB.AnimGraph // (HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void UnPin(); // UnPin MagicLeapARPin.MagicLeapARPinComponent.UnPin // (Final|Native|Public|BlueprintCallable) // <Game+0x17b8d50>
	void UnBindToOnMagicLeapARPinUpdatedDelegate(struct FDelegate& Delegate); // UnBindToOnMagicLeapARPinUpdatedDelegate MagicLeapARPin.MagicLeapARPinFunctionLibrary.UnBindToOnMagicLeapARPinUpdatedDelegate // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x17b8cb0>
	void UpdateExternalTrackingHMDPosition(Unknown& ExternalTrackingTransform); // UpdateExternalTrackingHMDPosition HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.UpdateExternalTrackingHMDPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x2f0a3c0>
	void SetTrackingSource(Unknown NewSource); // SetTrackingSource HeadMountedDisplay.MotionControllerComponent.SetTrackingSource // (Final|Native|Public|BlueprintCallable) // <Game+0x2f0a260>
	void SetIsControllerMotionTrackingEnabledByDefault(Unknown Enable); // SetIsControllerMotionTrackingEnabledByDefault HeadMountedDisplay.MotionTrackedDeviceFunctionLibr.SetIsControllerMotionTrackingEnabledByDefault // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x2f09bf0>
	Unknown AddNamedDeviceVisualizationComponentBlocking(Unknown Target, struct FName SystemName, struct FName DeviceName, Unknown bManualAttachment, Unknown& RelativeTransform, Unknown& XRDeviceId); // AddNamedDeviceVisualizationComponentBlocking HeadMountedDisplay.XRAssetFunctionLibrary.AddNamedDeviceVisualizationComponentBlocking // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x2f07980>
	Unknown AddNamedDeviceVisualizationComponentAsync(Unknown Target, struct FName SystemName, struct FName DeviceName, Unknown bManualAttachment, Unknown& RelativeTransform, Unknown& XRDeviceId, Unknown& NewComponent); // AddNamedDeviceVisualizationComponentAsync HeadMountedDisplay.AsyncTask_LoadXRDev.AddNamedDeviceVisualizationComponentAsync // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x2f076f0>
	void ShowLoadingScreen(); // ShowLoadingScreen HeadMountedDisplay.XRLoadingScreenFunctionLibrary.ShowLoadingScreen // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x2f0a3a0>
	void StartLuminARSession(Unknown WorldContextObject, Unknown LatentInfo, Unknown Configuration); // StartLuminARSession MagicLeapAR.LuminARSessionFunctionLibrary.StartLuminARSession // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x17cdc80>
	Unknown LuminARLineTrace(Unknown WorldContextObject, Unknown& ScreenPosition, Unknown TraceChannels, Unknown& OutHitResults); // LuminARLineTrace MagicLeapAR.LuminARFrameFunctionLibrary.LuminARLineTrace // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x17cd950>
	Unknown AddLuminRuntimeCandidateImage(Unknown SessionConfig, Unknown CandidateTexture, struct FString FriendlyName, float PhysicalWidth, Unknown bUseUnreliablePose, Unknown bImageIsStationary); // AddLuminRuntimeCandidateImage MagicLeapAR.LuminARImageTrackingFunctionLibrary.AddLuminRuntimeCandidateImage // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x17cd600>
	Unknown GetAmbientIntensityNits(); // GetAmbientIntensityNits MagicLeapAR.LuminARLightEstimate.GetAmbientIntensityNits // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x17cd820>
	Unknown GetUseUnreliablePose(); // GetUseUnreliablePose MagicLeapAR.LuminARCandidateImage.GetUseUnreliablePose // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x17cd930>
	Unknown ShouldResetTrackedObjects(); // ShouldResetTrackedObjects AugmentedReality.ARSessionConfig.ShouldResetTrackedObjects // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2ee70a0>
	float GetAmbientIntensityLumens(); // GetAmbientIntensityLumens AugmentedReality.ARBasicLightEstimate.GetAmbientIntensityLumens // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2ee5330>
	float GetPhysicalWidth(); // GetPhysicalWidth AugmentedReality.ARCandidateImage.GetPhysicalWidth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2eed940>
	void UnpinComponent(Unknown ComponentToUnpin); // UnpinComponent AugmentedReality.ARBlueprintLibrary.UnpinComponent // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x2ee7160>
	Unknown GetTrackedGeometry(Unknown& TraceResult); // GetTrackedGeometry AugmentedReality.ARTraceResultLibrary.GetTrackedGeometry // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x2ee5e40>
	Unknown ARSaveWorld(Unknown WorldContextObject); // ARSaveWorld AugmentedReality.ARSaveWorldAsyncTaskBlueprintPr.ARSaveWorld // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x2ee4510>
	Unknown ARGetCandidateObject(Unknown WorldContextObject, Unknown Location, Unknown Extent); // ARGetCandidateObject AugmentedReality.ARGetCandidateObjectAsyncTaskBlueprintProxy.ARGetCandidateObject // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0x2ee43f0>
	Unknown GetTrackingState(); // GetTrackingState AugmentedReality.ARPin.GetTrackingState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2ee5690>
	void SetPreviewImageData(Unknown ImageData); // SetPreviewImageData AugmentedReality.ARSharedWorldGameMode.SetPreviewImageData // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game+0x2eeb430>
	void K2_OnARWorldMapIsReady(); // K2_OnARWorldMapIsReady AugmentedReality.ARSharedWorldGameState.K2_OnARWorldMapIsReady // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	void ServerMarkReadyForReceiving(); // ServerMarkReadyForReceiving AugmentedReality.ARSharedWorldPlayerController.ServerMarkReadyForReceiving // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game+0x2eeb250>
	void SetEnvironmentCaptureProbe(Unknown InCaptureProbe); // SetEnvironmentCaptureProbe AugmentedReality.ARSkyLight.SetEnvironmentCaptureProbe // (Final|Native|Public|BlueprintCallable) // <Game+0x2eeb3b0>
	Unknown IsTracked(); // IsTracked AugmentedReality.ARTrackedGeometry.IsTracked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2eeb220>
	Unknown GetSubsumedBF(); // GetSubsumedBe AugmentedReality.ARPlaneGeometry.GetSubsumed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2eeb0f0>
	Unknown GetEstimateSize(); // GetEstimateSize AugmentedReality.ARTrackedImage.GetEstimateSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // <Game+0x2eeaea0>
	Unknown GetWorldSpaceEyeTransform(Unknown Eye); // GetWorldSpaceEyeTransform AugmentedReality.ARFaceGeometry.GetWorldSpaceEyeTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x2eeb170>
	Unknown GetExtent(); // GetExtent AugmentedReality.AREnvironmentCaptureProbe.GetExtent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x2eeaee0>
	Unknown GetDetectedObject(); // GetDetectedObject AugmentedReality.ARTrackedObject.GetDetectedObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2eeae50>
	Unknown GetTrackedPoseData(); // GetTrackedPoseData AugmentedReality.ARTrackedPose.GetTrackedPoseData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2eeb110>
	void SetFriendlyName(struct FString NewName); // SetFriendlyName AugmentedReality.ARCandidateObject.SetFriendlyName // (Final|Native|Public|BlueprintCallable) // <Game+0x2eedab0>
	void SetGuideLine(); // SetGuideLine U.U.SetGuideLine // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SetPointAngle(float Angle); // SetPointAngle U.U.SetPointAngle // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void AnimGraph(Unknown& AnimGraph); // AnimGraph AB.AB.AnimGraph // (HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	Unknown SetOnAudioJackUnpluggedDelegate(struct FDelegate& ResultDelegate); // SetOnAudioJackUnpluggedDelegate MagicLeapAudio.MagicLeapAudioFunctionLibrary.SetOnAudioJackUnpluggedDelegate // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x17d1350>
	void AnimGraph(Unknown& AnimGraph); // AnimGraph AB.AB.AnimGraph // (HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void GetBattleModeString(int32_t Idx, struct FText& Str); // GetBattleModeString U.U.GetBattleModeString // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	Unknown SetMotionSourceForHand(Unknown Hand, struct FName MotionSource); // SetMotionSourceForHand MagicLeapController.MagicLeapControllerFunctionLibr.SetMotionSourceForHand // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x17d7d70>
	Unknown GetEyeBlinkState(Unknown& BlinkState); // GetEyeBlinkState MagicLeapEyeTracker.MagicLeapEyeTrackerFunctionLibr.GetEyeBlinkState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x17d9620>
	struct FText Get(); // Get BP.Chat_MainWidget_C.Get // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x23a73f0>
	void RequestIdentityAttributeValueDelegate__DelegateSignature(Unknown ResultCode, Unknown& AttributeValue); // RequestIdentityAttributeValueDelegate__DelegateSignature MagicLeapIdentity.MagicLeapIdentity.RequestIdentityAttributeValueDelegate__DelegateSignature // (Public|Delegate|HasOutParms) // <Game+0x23a73f0>
	void OnClosePerkPopup(); // OnClosePerkPopup Cr.U.OnClosePerkPopup // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	Unknown RequestPlanesAsync(); // RequestPlanesAsync MagicLeapPlanes.MagicLeapPlanesComponent.RequestPlanesAsync // (Final|Native|Public|BlueprintCallable) // <Game+0x17ee730>
	void ReorderPlaneFlags(Unknown& InPriority, Unknown& InFlagsToReorder, Unknown& OutReorderedFlags); // ReorderPlaneFlags MagicLeapPlanes.MagicLeapPlanesFunctionLibrary.ReorderPlaneFlags // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x17ee5b0>
	void CheckLastHitActor(); // CheckLastHitActor B.B.CheckLastHitActor // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void Resize(int32_t SizeX, int32_t SizeY); // Resize Inven.B.Resize // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void Construct(); // Construct U.U.Construct // (BlueprintCosmetic|Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	Unknown RequestPrivilegeAsync(Unknown Privilege, struct FDelegate& ResultDelegate); // RequestPrivilegeAsync MagicLeapPrivileges.MagicLeapPrivilegesFunctionLibr.RequestPrivilegeAsync // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x17eeea0>
	void UserConstructionScript(); // UserConstructionScript B.B.UserConstructionScript // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	Unknown PutSecureVector(struct FString Key, Unknown& DataToStore); // PutSecureVector MagicLeapSecureStorage.MagicLeapSecureStorage.PutSecureVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x17efc10>
	void AnimGraph(Unknown& AnimGraph); // AnimGraph ABP_Camaro.ABP_Camaro_C.AnimGraph // (HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SetUseWeightedNormals(Unknown bInUseWeightedNormals); // SetUseWeightedNormals MagicLeapHandMeshing.MagicLeapHandMeshingComponent.SetUseWeightedNormals // (Final|Native|Public|BlueprintCallable) // <Game+0x17f28a0>
	Unknown DisconnectMRMesh(Unknown InMRMeshPtr); // DisconnectMRMesh MagicLeapHandMeshing.MagicLeapHandMeshingFunctionLibrary.DisconnectMRMesh // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x17f2820>
	Unknown IsTrackerValid(); // IsTrackerValid MagicLeapLightEstimation.MagicLeapLightEstimationFunctionLibrary.IsTrackerValid // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x17f4650>
	void SetHideTimer(); // SetHideTimer U.U.SetHideTimer // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	Unknown BP_GetTransformOrigin(); // BP_GetTransformOrigin MovieSceneTracks.MovieSceneTransformOrigin.BP_GetTransformOrigin // (Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x23a73f0>
	void SetConstraintBindingID(Unknown& InConstraintBindingID); // SetConstraintBindingID MovieSceneTracks.MovieScene3DConstraintSection.SetConstraintBindingID // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x3284820>
	void SetStartOffset(Unknown InStartOffset); // SetStartOffset MovieSceneTracks.MovieSceneAudioSection.SetStartOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3284960>
	void SetCameraBindingID(Unknown& InCameraBindingID); // SetCameraBindingID MovieSceneTracks.MovieSceneCameraCutSection.SetCameraBindingID // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x328c090>
	void SetShotDisplayName(struct FString InShotDisplayName); // SetShotDisplayName MovieSceneTracks.MovieSceneCinematicShotSection.SetShotDisplayName // (Final|Native|Public|BlueprintCallable) // <Game+0x328c200>
	void SetVisibility(Unknown InVisibility); // SetVisibility MovieSceneTracks.MovieSceneLevelVisibilitySection.SetVisibility // (Final|Native|Public|BlueprintCallable) // <Game+0x328c300>
	void SetIsActive(Unknown bActive); // SetIsActive U.U.SetIsActive // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void IsEquipped(Unknown& Return); // IsEquipped Inven.BP.IsEquipped // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // <Game+0x23a73f0>
	void CheckHoverMaterial(); // CheckHoverMaterial Inven.U.CheckHoverMaterial // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SetSequence(Unknown InSequence); // SetSequence TemplateSequence.TemplateSequenceActor.SetSequence // (Final|Native|Public|BlueprintCallable) // <Game+0x1839c00>
	Unknown CreateTemplateSequencePlayer(Unknown WorldContextObject, Unknown TemplateSequence, Unknown Settings, Unknown& OutActor); // CreateTemplateSequencePlayer TemplateSequence.TemplateSequencePlayer.CreateTemplateSequencePlayer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x1839980>
	void GetImage(int32_t Index, Unknown& Image); // GetImage Temp.Temp_C.GetImage // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void AnimGraph(Unknown& AnimGraph); // AnimGraph Character.AB.AnimGraph // (HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SetKillCamGuide(); // SetKillCamGuide U.U.SetKillCamGuide // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	Unknown CheckPermission(struct FString permission); // CheckPermission AndroidPermission.AndroidPermissionFunctionLibrarH.CheckPermission // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x17ef6b0>
	void SetNew(Unknown IsNew); // SetNew Cr.U.SetNew // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	Unknown CreateProxyObjectForConvertToTIFF(Unknown SourceImage, Unknown bWantColor, Unknown bUseGpu, float Scale, Unknown Rotate); // CreateProxyObjectForConvertToTIFF AppleImageUtils.AppleImageUtilsBaseAsyncTaskBlueprin.CreateProxyObjectForConvertToTIFF // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x184e740>
	void Construct(); // Construct AudioWidget.AudioWidget_C.Construct // (BlueprintCosmetic|Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	void UpdateTargetSize(); // UpdateTargetSize B.B.UpdateTargetSize // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	Unknown GetCollectionsContainingAssetPtr(Unknown AssetPtr); // GetCollectionsContainingAssetPtr AssetTags.AssetTagsSubsystem.GetCollectionsContainingAssetPtr // (Final|Native|Public|BlueprintCallable) // <Game+0x1853020>
	void CheckWorldViewCameraLocationRange(); // CheckWorldViewCameraLocationRange B.B.CheckWorldViewCameraLocationRange // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void Set(struct FText Tool, Unknown& ); // Set WB_ClassicToolTipDesign.WB_ClassicToolTipDesign_C.Set // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void StopCapturingAudio(); // StopCapturingAudio AudioCapture.AudioCapture.StopCapturingAudio // (Final|Native|Public|BlueprintCallable) // <Game+0x1854460>
	Unknown CreateAudioCapture(); // CreateAudioCapture AudioCapture.AudioCaptureFunctionLibrary.CreateAudioCapture // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x1854340>
	void SetAttachEndToComponent(Unknown Component, struct FName SocketName); // SetAttachEndToComponent CableComponent.CableComponent.SetAttachEndToComponent // (Final|Native|Public|BlueprintCallable) // <Game+0x1858cc0>
	void OnPaint(Unknown& Context); // OnPaint U.U.OnPaint // (BlueprintCosmetic|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // <Game+0x23a73f0>
	void SetForVisual(); // SetForVisual Inven.U.SetForVisual // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	Unknown SetCustomMeshTriangles(Unknown& Triangles); // SetCustomMeshTriangles CustomMeshComponent.CustomMeshComponent.SetCustomMeshTriangles // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x185ac90>
	void CheckCreateSlot(Unknown& bRet); // CheckCreateSlot U.U.CheckCreateSlot // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	Unknown ShowCellularDataConfirmation(); // ShowCellularDataConfirmation GooglePAD.GooglePADFunctionLibrary.ShowCellularDataConfirmation // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x185bfd0>
	Unknown GetVisibility_1(); // GetVisibility_1 U.U.GetVisibility_1 // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x23a73f0>
	Unknown StopLocationServices(); // StopLocationServices LocationServicesBPLibrary.LocationServices.StopLocationServices // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x185cb10>
	Unknown Mount(int32_t PakOrder, struct FString MountPoint); // Mount MobilePatchingUtils.MobileInstalledContent.Mount // (Final|Native|Public|BlueprintCallable) // <Game+0x1860e30>
	void StartInstall(struct FDelegate OnSucceeded, struct FDelegate OnFailed); // StartInstall MobilePatchingUtils.MobilePendingContent.StartInstall // (Final|Native|Public|BlueprintCallable) // <Game+0x1861110>
	void RequestContent(struct FString RemoteManifestURL, struct FString CloudURL, struct FString InstallDirectory, struct FDelegate OnSucceeded, struct FDelegate OnFailed); // RequestContent MobilePatchingUtils.MobilePatchingLibrary.RequestContent // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x1860f20>
	void ShowLoadingSplashScreen(); // ShowLoadingSplashScreen OculusHMD.OculusFunctionLibrary.ShowLoadingSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x1883f40>
	void SetUseAutoGears(Unknown bUseAuto); // SetUseAutoGears PhysXVehicles.WheeledVehicleMovementComponent.SetUseAutoGears // (Final|Native|Public|BlueprintCallable) // <Game+0x18ab530>
	void SetSteerAngle(float SteerAngle, int32_t WheelIndex); // SetSteerAngle PhysXVehicles.SimpleWheeledVehicleMovementComponen.SetSteerAngle // (Final|Native|Public|BlueprintCallable) // <Game+0x18ab2a0>
	Unknown GetVehicle(); // GetVehicle PhysXVehicles.VehicleAnimInstance.GetVehicle // (Final|Native|Public|BlueprintCallable) // <Game+0x18aa8b0>
	Unknown IsInAir(); // IsInAir PhysXVehicles.VehicleWheel.IsInAir // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x18aa910>
	Unknown OnMouseButtonDown(Unknown MyGeometry, Unknown& MouseEvent); // OnMouseButtonDown Inven.U.OnMouseButtonDown // (BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void AddModularSynthPresetToBankAsset(Unknown InBank, Unknown& Preset, struct FString PresetName); // AddModularSynthPresetToBankAsset Synthesis.ModularSynthLibrary.AddModularSynthPresetToBankAsset // (Final|Native|Static|Private|HasOutParms|BlueprintCallable) // <Game+0x18d50d0>
	void SetSynthPreset(Unknown& SynthPreset); // SetSynthPreset Synthesis.ModularSynthComponent.SetSynthPreset // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18d7690>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SourceEffectBitCrusherPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18df240>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SourceEffectChorusPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18df2f0>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SourceEffectDynamicsProcessorPr.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18df3a0>
	void UnregisterEnvelopeFollowerListener(Unknown EnvelopeFollowerListener); // UnregisterEnvelopeFollowerListener Synthesis.SourceEffectEnvelopeFollowerPreset.UnregisterEnvelopeFollowerListener // (Final|Native|Public|BlueprintCallable) // <Game+0x18dfb20>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SourceEffectEQPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18df450>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SourceEffectFilterPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18df5b0>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SourceEffectFoldbackDistortionPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18df660>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SourceEffectMidSideSpreaderPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18df710>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SourceEffectPannerPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18df7c0>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SourceEffectPhaserPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18df870>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SourceEffectRingModulationPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18df930>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SourceEffectSimpleDelayPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18df9d0>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SourceEffectStereoDelayPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18dfa80>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SourceEffectWaveShaperPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18df7c0>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SubmixEffectConvolutionReverbPr.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18e4c50>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SubmixEffectDelayPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18e4cf0>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SubmixEffectFilterPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18e4db0>
	void SetSettings(Unknown& InSettings); // SetSettings Synthesis.SubmixEffectFlexiverbPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18e4e60>
	void SetTap(int32_t TapId, Unknown& TapInfo); // SetTap Synthesis.SubmixEffectTapDelayPreset.SetTap // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x18e51e0>
	void SetValue(Unknown InValue); // SetValue Synthesis.Synth2DSlider.SetValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x18e52c0>
	void SetSustainGain(float SustainGain); // SetSustainGain Synthesis.GranularSynth.SetSustainGain // (Final|Native|Public|BlueprintCallable) // <Game+0x18e5160>
	void SetWaveTablePosition(float InPosition); // SetWaveTablePosition Synthesis.SynthComponentMonoWaveTable.SetWaveTablePosition // (Final|Native|Public|BlueprintCallable) // <Game+0x18e8940>
	void SetSoundWave(Unknown InSoundWave); // SetSoundWave Synthesis.SynthSamplePlayer.SetSoundWave // (Final|Native|Public|BlueprintCallable) // <Game+0x18e8730>
	void SetValue(float InValue); // SetValue Synthesis.SynthKnob.SetValue // (Final|Native|Public|BlueprintCallable) // <Game+0x18e88c0>
	void OnOverlapEnd(Unknown OverlappedComponent, Unknown OtherActor, Unknown OtherComp, int32_t OtherBodyIndex); // OnOverlapEnd BravoHotelGame.AmbientSoundVolume.OnOverlapEnd // (Final|Native|Protected) // <Game+0x1e46cf0>
	void SetTestAIChangeLocation(Unknown AIController); // SetTestAIChangeLocation BravoHotelGame.BravoHotelGameMode.SetTestAIChangeLocation // (Final|Native|Public) // <Game+0x1f1f6f0>
	void UpdateSurvivalCircleDelegate__DelegateSignature(); // UpdateSurvivalCircleDelegate__DelegateSignature BravoHotelGame.BattleRoyaleGameMode.UpdateSurvivalCircleDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // <Game+0x23a73f0>
	void UpdatePCInfo(); // UpdatePCInfo BravoHotelGame.BattleRoyaleGameMode_Login.UpdatePCInfo // (Final|Native|Public|BlueprintCallable) // <Game+0x1e497c0>
	void ChangeLevel(struct FString NextLevelName); // ChangeLevel BravoHotelGame.BattleRoyaleGameMode_StoreWeb.ChangeLevel // (Final|Native|Public|BlueprintCallable) // <Game+0x1e49960>
	void ShowTimeHUDMessage(); // ShowTimeHUDMessage BravoHotelGame.BravoHotelGameState.ShowTimeHUDMessage // (Native|Public) // <Game+0x1f24550>
	void SetDescentPlayerInfo(int32_t PlayerId); // SetDescentPlayerInfo BravoHotelGame.BattleRoyaleGameState.SetDescentPlayerInfo // (Final|Native|Public) // <Game+0x1e4b020>
	void UpdateCheckRePosition(); // UpdateCheckRePosition BravoHotelGame.BHPersonalSupplyBox.UpdateCheckRePosition // (Final|Native|Public) // <Game+0x1e4bf80>
	void SetItemInBlueprint(struct FName& ItemKey); // SetItemInBlueprint BravoHotelGame.BravoHotelDropBoxActor.SetItemInBlueprint // (Event|Public|HasOutParms|BlueprintEvent) // <Game+0x23a73f0>
	void SetCurrentPhaseNum(int32_t PhaseNum); // SetCurrentPhaseNum BravoHotelGame.BHPersonalSupplyBoxManager.SetCurrentPhaseNum // (Final|Native|Public|BlueprintCallable) // <Game+0x1e4c450>
	void WearItem(Unknown Slot, struct FString UniqueKey, Unknown bUpdateSkeletalMesh); // WearItem BravoHotelGame.BravoHotelCharacter.WearItem // (Final|Native|Public|BlueprintCallable) // <Game+0x1ed2e20>
	void StartSpawnFromSpawnInfo(Unknown& Data, Unknown CheckRePosition); // StartSpawnFromSpawnInfo BravoHotelGame.BHPersonalSupplySystemComponent.StartSpawnFromSpawnInfo // (Final|Native|Public|HasOutParms) // <Game+0x1e4d990>
	void WeaponBuffEventDelegate__DelegateSignature(Unknown& EventType, Unknown& WeaponInfo); // WeaponBuffEventDelegate__DelegateSignature BravoHotelGame.BravoHotelAbilityComponent.WeaponBuffEventDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // <Game+0x23a73f0>
	void WeaponEventEndCallBack(Unknown& BuffEventType, Unknown& WeaponInfo); // WeaponEventEndCallBack BravoHotelGame.BuffControlState.WeaponEventEndCallBack // (Final|Native|Public|HasOutParms) // <Game+0x1e61a60>
	void OnRep_ThrowingType(); // OnRep_ThrowingType BravoHotelGame.BravoHotelActionComponent.OnRep_ThrowingType // (Final|Native|Protected) // <Game+0x1e62f40>
	void StartDescenting(); // StartDescenting BravoHotelGame.BravoHotelAIPlayerController.StartDescenting // (Final|Native|Public|BlueprintCallable) // <Game+0x1e656d0>
	void OnReset(Unknown& ImpactResult, float Time); // OnReset BravoHotelGame.BravoHotelAircraftBomber.OnReset // (Final|Native|Protected|HasOutParms|BlueprintCallable) // <Game+0x1e65970>
	void UpdateSplineTimeline(float Value); // UpdateSplineTimeline BravoHotelGame.BravoHotelAircraftFlight.UpdateSplineTimeline // (Final|Native|Protected) // <Game+0x1e66dd0>
	void StartFromHere(Unknown AircraftFlight, int32_t AircraftCount); // StartFromHere BravoHotelGame.BravoHotelAircraftPoint.StartFromHere // (Final|Native|Public|BlueprintCallable) // <Game+0x1e66ff0>
	void UpdateAircraftPosition(Unknown MapCompWidget); // UpdateAircraftPosition BravoHotelGame.BravoHotelAircraftRouteWidget.UpdateAircraftPosition // (Final|Native|Public) // <Game+0x1e679a0>
	void StartDescent(); // StartDescent BravoHotelGame.BravoHotelAircraftViewer.StartDescent // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void OnEndAirCraftBoardingPlayer(); // OnEndAirCraftBoardingPlayer BravoHotelGame.BravoHotelAircraftWidget.OnEndAirCraftBoardingPlayer // (Final|Native|Private) // <Game+0x1e684f0>
	void UpdateTeamCount(); // UpdateTeamCount BravoHotelGame.BravoHotelAliveInfoWidget.UpdateTeamCount // (Final|Native|Public) // <Game+0x1e68e80>
	void OnEmitterUnregistered(); // OnEmitterUnregistered BravoHotelGame.BravoHotelAmbientSound.OnEmitterUnregistered // (Final|Native|Protected) // <Game+0x1e69090>
	float OnUnEquip(Unknown bPlayUnequipAnimation); // OnUnEquip BravoHotelGame.BravoHotelEquippableActor.OnUnEquip // (Native|Public) // <Game+0x1f18520>
	void UpdateActorHiddenInGame_TPPOnly(); // UpdateActorHiddenInGame_TPPOnly BravoHotelGame.BravoHotelWeaponBase.UpdateActorHiddenInGame_TPPOnly // (Final|Native|Public) // <Game+0x2026670>
	void ServerValidateAmplifierEffect(Unknown TargetCharacter); // ServerValidateAmplifierEffect BravoHotelGame.BravoHotelAmplifier.ServerValidateAmplifierEffect // (Net|Native|Event|Public|NetServer|NetValidate) // <Game+0x1e69520>
	Unknown Transition_Swim_ToMovementModeConduit(); // Transition_Swim_ToMovementModeConduit BravoHotelGame.BravoHotelAnimInstance.Transition_Swim_ToMovementModeConduit // (Final|Native|Public) // <Game+0x1e6cce0>
	void UpdateWeaponVariables(); // UpdateWeaponVariables BravoHotelGame.BravoHotelAnimInstanceFPP.UpdateWeaponVariables // (Final|Native|Protected) // <Game+0x1e6db70>
	void UpdateSpawnedParachute(); // UpdateSpawnedParachute BravoHotelGame.BravoHotelAnimInstanceParachute.UpdateSpawnedParachute // (Final|Native|Protected) // <Game+0x1e6df40>
	void UpdateAnimDynamicsAlpha(); // UpdateAnimDynamicsAlpha BravoHotelGame.BravoHotelAnimInstancePostprocess.UpdateAnimDynamicsAlpha // (Final|Native|Public) // <Game+0x1e6e9c0>
	void StartDestroy(); // StartDestroy BravoHotelGame.BravoHotelAreaSkillZone.StartDestroy // (Native|Event|Public|BlueprintEvent) // <Game+0x1e4be10>
	Unknown GetWetFogZoneInfo(); // GetWetFogZoneInfo BravoHotelGame.BravoHotelAreaSkillZoneWetFog.GetWetFogZoneInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1e71740>
	void SetHiddenAllArmoryMesh(); // SetHiddenAllArmoryMesh BravoHotelGame.BravoHotelArmory.SetHiddenAllArmoryMesh // (Final|Native|Public|BlueprintCallable) // <Game+0x1e72a70>
	void OnCompleteAysnLoadItems(Unknown StaticMeshPtr, Unknown SkeletalMeshPtr); // OnCompleteAysnLoadItems BravoHotelGame.BravoHotelAttachedUsableItem.OnCompleteAysnLoadItems // (Final|Native|Protected) // <Game+0x1e73dc0>
	void SetImage(struct FString InHitType); // SetImage BravoHotelGame.BravoHotelAttackDamageWidget.SetImage // (Final|Native|Public) // <Game+0x1e741a0>
	void EventRemoveWidget(); // EventRemoveWidget BravoHotelGame.BravoHotelAttackUserWidget.EventRemoveWidget // (Final|Native|Public) // <Game+0x1e74480>
	void OpenPortal(); // OpenPortal BravoHotelGame.BravoHotelAudioPortalComponent.OpenPortal // (Final|Native|Public|BlueprintCallable) // <Game+0x1e75cc0>
	void UpdateGeometry(); // UpdateGeometry BravoHotelGame.BravoHotelAudioRoomComponent.UpdateGeometry // (Final|Native|Public|BlueprintCallable) // <Game+0x1e76600>
	void StopPlayingSound(Unknown& InPlayingHandle); // StopPlayingSound BravoHotelGame.BravoHotelAudioStatics.StopPlayingSound // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x1e77f80>
	Unknown GetMainWidget(Unknown bWantsToCreateIfNull); // GetMainWidget BravoHotelGame.BravoHotelBaseHUD.GetMainWidget // (Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x1e78700>
	void Zip(struct FString archivePath, Unknown ZipUtilityInterfaceDelegate, Unknown Format); // Zip BravoHotelGame.BravoHotelBlueprintExtension.Zip // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x1e860b0>
	Unknown TryGetCustomCircle(Unknown& OutCenter, float& OutRadius); // TryGetCustomCircle BravoHotelGame.BravoHotelBlueZone.TryGetCustomCircle // (Final|BlueprintCosmetic|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x1e877a0>
	void OnFollowingChanged(Unknown Checker, Unknown bIsFollowing); // OnFollowingChanged BravoHotelGame.BravoHotelBlueZoneGameRule.OnFollowingChanged // (Final|Native|Public) // <Game+0x1e87a70>
	void RefreshHighestRarityOfCurrentItems(); // RefreshHighestRarityOfCurrentItems BravoHotelGame.BravoHotelBootyBoxActor.RefreshHighestRarityOfCurrentItems // (Final|Native|Protected) // <Game+0x1e87ea0>
	void UpdateLineOfFire(Unknown& Pos, Unknown LastUpdate, float delataTime); // UpdateLineOfFire BravoHotelGame.BravoHotelBottomInfoInterface.UpdateLineOfFire // (Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void OnWaitingMessage(Unknown IsMessage); // OnWaitingMessage BravoHotelGame.BravoHotelBroadcastingWidget.OnWaitingMessage // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	void SetToEnd(); // SetToEnd BravoHotelGame.BravoHotelBuffBase.SetToEnd // (Final|Native|Public) // <Game+0x1ea14e0>
	void RemoveAvoidHeadShotCondition(); // RemoveAvoidHeadShotCondition BravoHotelGame.BHBHackBallistic.RemoveAvoidHeadShotCondition // (Final|Native|Protected) // <Game+0x1ea14a0>
	void SpawnBlackOut(); // SpawnBlackOut BravoHotelGame.BHBPowerInterruption.SpawnBlackOut // (Final|Native|Public) // <Game+0x1ea1510>
	void OnExitForceField(); // OnExitForceField BravoHotelGame.BHBForceField.OnExitForceField // (Final|Native|Public) // <Game+0x1ea10d0>
	void UnbindAllBuffDelegates(); // UnbindAllBuffDelegates BravoHotelGame.BHBCancelableActiveSkill.UnbindAllBuffDelegates // (Native|Public) // <Game+0x1ea15c0>
	void PlayJumpSound(Unknown& BuffEventType); // PlayJumpSound BravoHotelGame.BHBUltimate_Sprint.PlayJumpSound // (Final|Native|Public|HasOutParms) // <Game+0x1ea1410>
	void MarkRenderStateDirty(Unknown UpdatedCharacter); // MarkRenderStateDirty BravoHotelGame.BHBMaterialEffectBase.MarkRenderStateDirty // (Final|Native|Protected) // <Game+0x1ea0f10>
	Unknown IsNeedToDrawAdditiv(); // IsNeedToDrawAdditivame BravoHotelGame.BHBAdditiveCrosshairBase.IsNeedToDrawAdditiv // (Native|Protected) // <Game+0x1ea0da0>
	void OnItemUsed(Unknown& ItemInfo); // OnItemUsed BravoHotelGame.BHBTeamBuffWhenItemUsed.OnItemUsed // (Final|Native|Public|HasOutParms) // <Game+0x1ea1270>
	void OnItemUsed(Unknown& ItemInfo); // OnItemUsed BravoHotelGame.BHBBuffWhenItemUsed.OnItemUsed // (Final|Native|Public|HasOutParms) // <Game+0x1ea1180>
	void OnStartBuffFailed(); // OnStartBuffFailed BravoHotelGame.BHBActiveBuffBase.OnStartBuffFailed // (Native|Protected) // <Game+0x1ea13f0>
	void MeteorStrike(Unknown& InBuffEventType); // MeteorStrike BravoHotelGame.BHBActiveMeteorJump.MeteorStrike // (Final|Native|Public|HasOutParms) // <Game+0x1ea0f90>
	void PropagateDrawDistanceByTag(); // PropagateDrawDistanceByTag BravoHotelGame.BravoHotelBuilding.PropagateDrawDistanceByTag // (Final|Native|Public|BlueprintCallable) // <Game+0x151a800>
	void SetRemoteControllerState(Unknown NewState); // SetRemoteControllerState BravoHotelGame.BravoHotelRemoteController.SetRemoteControllerState // (Final|Native|Protected) // <Game+0x1fb0720>
	void UpdateCheckDistance(); // UpdateCheckDistance BravoHotelGame.BravoHotelC4RemoteController.UpdateCheckDistance // (Final|Native|Private) // <Game+0x1ea1cd0>
	void UpdateUltimateVehicleLocation(); // UpdateUltimateVehicleLocation BravoHotelGame.BravoHotelCarKey.UpdateUltimateVehicleLocation // (Final|Native|Protected) // <Game+0x1ea2670>
	void OnRep_ParachuteSkinIndex(); // OnRep_ParachuteSkinIndex BravoHotelGame.BHStationaryCharInfo.OnRep_ParachuteSkinIndex // (Final|Native|Protected) // <Game+0x1ec6470>
	void OnRep_ResuscitatedTargetActor(); // OnRep_ResuscitatedTargetActor BravoHotelGame.BHCharacterReplication.OnRep_ResuscitatedTargetActor // (Final|Native|Protected) // <Game+0x1ec64b0>
	void ServerSetLocationImmediatly(Unknown TargetLocation, Unknown TargetVelocity, float ClientTimeStamp, Unknown ClientMovementMode); // ServerSetLocationImmediatly BravoHotelGame.BravoHotelCharacterMovementComponent.ServerSetLocationImmediatly // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|NetValidate) // <Game+0x1ed3bf0>
	void WeaponDebugText(); // WeaponDebugText BravoHotelGame.BravoHotelCheatManager.WeaponDebugText // (Final|Exec|Native|Public|Const) // <Game+0x151a800>
	void Toggle(); // Toggle BravoHotelGame.BravoHotelCheatWidget.Toggle // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	void OpenMenu(Unknown OpenLobby); // OpenMenu BravoHotelGame.BravoHotelClassicSettingPopupInterface.OpenMenu // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void OnSetLocalSavedSettings(struct FString Settings); // OnSetLocalSavedSettings BravoHotelGame.BravoHotelCoherentBaseWidget.OnSetLocalSavedSettings // (Final|Native|Public) // <Game+0x1edbf20>
	void SendTriggerEvent(struct FString Str, int32_t Value); // SendTriggerEvent BravoHotelGame.BravoHotelCoherentTestHUD.SendTriggerEvent // (Final|Native|Public|BlueprintCallable) // <Game+0x1edc430>
	Unknown UpdateUnit(float& CurrentAngle, float& CurrentPos, float& WidgetAngle, Unknown& Reset, Unknown IsTest); // UpdateUnit BravoHotelGame.BravoHotelCompassWidget.UpdateUnit // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1edf400>
	void StopConversation(); // StopConversation BravoHotelGame.BravoHotelConversationComponent.StopConversation // (Final|Native|Public|BlueprintCallable) // <Game+0x1ee0010>
	void ShowSentense(Unknown& SentenceData); // ShowSentense BravoHotelGame.BravoHotelConversationWidget.ShowSentense // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void OnReceiveCharacterTab(struct FString ReceiveTab); // OnReceiveCharacterTab BravoHotelGame.BravoHotelCreateCharacterWidget.OnReceiveCharacterTab // (Final|Native|Private) // <Game+0x1ee0ab0>
	void OnChangeOption(Unknown& ChangeTypeList); // OnChangeOption BravoHotelGame.BravoHotelCrosshair.OnChangeOption // (Final|Native|Public|HasOutParms) // <Game+0x1ee14e0>
	void RemoveAdditiveCrosshair(struct FName& CrosshairRowName); // RemoveAdditiveCrosshair BravoHotelGame.BravoHotelCrosshairManager.RemoveAdditiveCrosshair // (Final|Native|Public|HasOutParms) // <Game+0x1ee19d0>
	struct FString OpensslEncryptAES256CBC(struct FString InContent); // OpensslEncryptAES256CBC BravoHotelGame.BravoHotelCryptoFunction.OpensslEncryptAES256CBC // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x1ee1f70>
	void OnPreViewEquipAppearance(struct FString PCLooks); // OnPreViewEquipAppearance BravoHotelGame.BravoHotelCustomizedCharacter.OnPreViewEquipAppearance // (Final|Native|Public) // <Game+0x1ee24c0>
	void Ok(); // Ok BravoHotelGame.BravoHotelCustomMatchWidget.Ok // (Final|Native|Public|BlueprintCallable) // <Game+0x151a800>
	Unknown IsDamageTypeName(struct FName& InName); // IsDamageTypeName BravoHotelGame.BravoHotelDamageType.IsDamageTypeName // (Final|Native|Public|HasOutParms|Const) // <Game+0x1ee7110>
	void SimulatedDestructibleMesh(Unknown HitLocation, Unknown ImpactDirection); // SimulatedDestructibleMesh BravoHotelGame.BravoHotelDestructibleComponent.SimulatedDestructibleMesh // (Final|Native|Protected|HasDefaults|BlueprintCallable) // <Game+0x1f11220>
	void HandleInReplay(Unknown bState); // HandleInReplay BravoHotelGame.BravoHotelDestructibleEx.HandleInReplay // (Final|Native|Public|BlueprintCallable) // <Game+0x1f11470>
	void SpawnItems(Unknown Box, Unknown& ItemsToSpawn); // SpawnItems BravoHotelGame.BravoHotelDetectItemSpawnBoxComponen.SpawnItems // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1f11ec0>
	void SortListForDevelopment(Unknown TabType); // SortListForDevelopment BravoHotelGame.BravoHotelDevelopmentBlackMarket.SortListForDevelopment // (Final|Native|Public|BlueprintCallable) // <Game+0x1f13770>
	void Show(struct FText& Name); // Show BravoHotelGame.BravoHotelDiedWidget.Show // (Event|Public|HasOutParms|BlueprintEvent) // <Game+0x23a73f0>
	void UpdateOpenDoor(float Value); // UpdateOpenDoor BravoHotelGame.BravoHotelDoor.UpdateOpenDoor // (Native|Event|Protected|BlueprintEvent) // <Game+0x1f15430>
	void ServerActivateDoor(Unknown Door); // ServerActivateDoor BravoHotelGame.BravoHotelDoorComponent.ServerActivateDoor // (Final|Net|NetReliableNative|Event|Private|NetServer|NetValidate) // <Game+0x1f15710>
	void OpenDoor(); // OpenDoor BravoHotelGame.BravoHotelDoorInterface.OpenDoor // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x1e89f10>
	void OnHitSurface(Unknown Surface, Unknown& Location); // OnHitSurface BravoHotelGame.BravoHotelShellCasing.OnHitSurface // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x1fbd3f0>
	void OnRep_SetStateType(); // OnRep_SetStateType BravoHotelGame.BravoHotelElevator.OnRep_SetStateType // (Native|Protected) // <Game+0x1e4be10>
	void OnRep_SetStateType(); // OnRep_SetStateType BravoHotelGame.BravoHotelElevatorDoor.OnRep_SetStateType // (Native|Protected) // <Game+0x1e4be10>
	void SetParachuteInfo(Unknown SetParachuteInfo); // SetParachuteInfo BravoHotelGame.BravoHotelFallingWidget.SetParachuteInfo // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	Unknown ShouldReplicate(); // ShouldReplicate BravoHotelGame.BravoHotelFence.ShouldReplicate // (Event|Protected|BlueprintEvent|Const) // <Game+0x23a73f0>
	Unknown SpawnPoolingEffectAttached(Unknown EmitterTemplate, Unknown AttachToComponent, struct FName AttachPointName, Unknown Location, Unknown Rotation, Unknown LocationType, Unknown bWantsReleaseManually); // SpawnPoolingEffectAttached BravoHotelGame.BravoHotelFXFunctionLibrary.SpawnPoolingEffectAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0x1f191d0>
	Unknown SpawnProjectile(Unknown WorldContextObject, Unknown ProjectileClass, Unknown& SpawnLocation, Unknown& ShootDirection, int32_t ImpactDamage, float LifeSpan, Unknown InOwner); // SpawnProjectile BravoHotelGame.BravoHotelGameBlueprintLibrary.SpawnProjectile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x1f19900>
	void UpdateBuff(int32_t KeyIndex, float Timer, float MaxTime); // UpdateBuff BravoHotelGame.BravoHotelGameBuffSlot.UpdateBuff // (Final|Native|Public) // <Game+0x1f19f90>
	void UpdateVoiceTalkMember(Unknown bIsLobby); // UpdateVoiceTalkMember BravoHotelGame.BravoHotelGameInstance.UpdateVoiceTalkMember // (Final|Native|Public|BlueprintCallable) // <Game+0x1f1dbb0>
	Unknown GetSteamFriendAvatar(Unknown& FriendUniqueNetId, Unknown InAvatarSize); // GetSteamFriendAvatar BravoHotelGame.BravoHotelGameInstanceSteam.GetSteamFriendAvatar // (Final|Native|Protected|HasOutParms|BlueprintCallable) // <Game+0x1f1de10>
	void ShowSimpleResult(Unknown& SimpleResult, float ShowDelayTime); // ShowSimpleResult BravoHotelGame.BravoHotelGameMatchEndWidget.ShowSimpleResult // (Final|Native|Public|HasOutParms) // <Game+0x1f1f360>
	float GetTotalDistanceTraveled(); // GetTotalDistanceTraveled BravoHotelGame.BravoHotelGamePlayStatistics.GetTotalDistanceTraveled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1f20ae0>
	void ShowQuitPopup(); // ShowQuitPopup BravoHotelGame.BravoHotelGamePopupInterface.ShowQuitPopup // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void ReceiveInit(); // ReceiveInit BravoHotelGame.BravoHotelGameSettingManager.ReceiveInit // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	void RestoreAfterGameStart(); // RestoreAfterGameStart BravoHotelGame.BravoHotelGameStartRestoreInter.RestoreAfterGameStart // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x1e8a420>
	void DrawGrassCollision(Unknown TargetCharacter); // DrawGrassCollision BravoHotelGame.BravoHotelGrassCollision.DrawGrassCollision // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	void SpawnPinOffParticle(Unknown& SpawnTransform); // SpawnPinOffParticle BravoHotelGame.BravoHotelGrenadeWeapon.SpawnPinOffParticle // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x1f25bb0>
	void ServerValidateHeartBeatSensorEffect(Unknown TargetCharacter); // ServerValidateHeartBeatSensorEffect BravoHotelGame.BravoHotelHeartBeatSensor.ServerValidateHeartBeatSensorEffect // (Net|Native|Event|Public|NetServer|NetValidate) // <Game+0x1f26030>
	void SimulatedDestructibleMesh(Unknown HitLocation, Unknown ImpactDirection, int32_t InstanceIndex); // SimulatedDestructibleMesh BravoHotelGame.BravoHotelHIDestructible.SimulatedDestructibleMesh // (Final|Native|Protected|HasDefaults|BlueprintCallable) // <Game+0x1f26a50>
	void SetIcon(Unknown ResourceImage, Unknown ItemRarity, Unknown bEffectReinforce); // SetIcon BravoHotelGame.BravoHotelIconImageWidget.SetIcon // (Final|Native|Public|BlueprintCallable) // <Game+0x1f415d0>
	void ShowPickupItem(Unknown InteractionInfo, Unknown& ItemInfo); // ShowPickupItem BravoHotelGame.BravoHotelInteractionWidget.ShowPickupItem // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1f44540>
	void UpdateWeapons(); // UpdateWeapons BravoHotelGame.BravoHotelInventoryCharacter.UpdateWeapons // (Final|Native|Public) // <Game+0x1f45020>
	void HideHoverBP(); // HideHoverBP BravoHotelGame.BravoHotelInventoryHoverWidget.HideHoverBP // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	void ShowStatupAnim(Unknown& StatupParameters, Unknown StatupType); // ShowStatupAnim BravoHotelGame.BravoHotelInventoryInterface.ShowStatupAnim // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x1f45950>
	void UpdateUnlockLevel(int32_t NewLevel); // UpdateUnlockLevel BravoHotelGame.BravoHotelInventoryPerkWidget.UpdateUnlockLevel // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	float WeightGauge(struct FString ItemName, int32_t Quantity, Unknown Ground); // WeightGauge BravoHotelGame.BravoHotelInventoryWidget.WeightGauge // (Final|Native|Public|BlueprintCallable) // <Game+0x1f46220>
	Unknown SpawnItemActorByName(Unknown WorldContextObject, struct FName& NewItemName, Unknown& SpawnTransform, float Quantity, Unknown bLoadMesh); // SpawnItemActorByName BravoHotelGame.BravoHotelItemFunctionLibrary.SpawnItemActorByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x1f480f0>
	void UpdateSkelMeshTickEnable(); // UpdateSkelMeshTickEnable BravoHotelGame.BravoHotelPickup.UpdateSkelMeshTickEnable // (Final|Native|Protected) // <Game+0x1f808d0>
	void SetTreeInfo(struct FName TopRecipe); // SetTreeInfo BravoHotelGame.BravoHotelItemRecipeTreeWidget.SetTreeInfo // (Final|Native|Public|BlueprintCallable) // <Game+0x16b3b30>
	void SetBoxComponentID(int32_t ID); // SetBoxComponentID BravoHotelGame.BravoHotelItemSpawnBoxComponent.SetBoxComponentID // (Final|Native|Public|BlueprintCallable) // <Game+0x1f49e90>
	void SetSpawnData(int32_t TotalSpawnCnt, int32_t TotalPickUpCount, int32_t TotalPickUpLimitCount); // SetSpawnData BravoHotelGame.BravoHotelItemSpawnDebugWidget.SetSpawnData // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	void SetSetting(Unknown& Data); // SetSetting BravoHotelGame.BravoHotelItemSpawnRateWidget.SetSetting // (Event|Public|HasOutParms|BlueprintEvent) // <Game+0x23a73f0>
	void EndSimulation(Unknown& Location, struct FString Msg); // EndSimulation BravoHotelGame.BravoHotelItemSpawnSimulationBox.EndSimulation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x1f4cda0>
	void SetUseItemVisibility(Unknown Visible, Unknown bUpdateRecovery, Unknown& DataTableRow); // SetUseItemVisibility BravoHotelGame.BravoHotelItemUseWidget.SetUseItemVisibility // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1f526d0>
	void SetInfo_BP(int32_t NewArrayIndex, Unknown& Info); // SetInfo_BP BravoHotelGame.BravoHotelKillInfoSlotWidget.SetInfo_BP // (Event|Public|HasOutParms|BlueprintEvent) // <Game+0x23a73f0>
	void TimeOverSlot(int32_t ArrayIndex, Unknown TargetSlotWidget); // TimeOverSlot BravoHotelGame.BravoHotelKillInfoWidget.TimeOverSlot // (Final|Native|Public|BlueprintCallable) // <Game+0x1f53080>
	void SetOccupyLadder(Unknown IsTop); // SetOccupyLadder BravoHotelGame.BravoHotelLadder.SetOccupyLadder // (Final|Native|Public|BlueprintCallable) // <Game+0x1f53f30>
	void Update(Unknown& Data); // Update BravoHotelGame.BravoHotelLoadingWidget.Update // (Event|Public|HasOutParms|BlueprintEvent) // <Game+0x23a73f0>
	void OnUpdatedMutable_Lobby(); // OnUpdatedMutable_Lobby BravoHotelGame.BravoHotelLobbyCharacter.OnUpdatedMutable_Lobby // (Final|Native|Protected) // <Game+0x1f54f70>
	void VoiceTalkState(Unknown bVoiceChat); // VoiceTalkState BravoHotelGame.BravoHotelLobbyPlayerController.VoiceTalkState // (Final|Native|Public) // <Game+0x1f55490>
	void Logout(); // Logout BravoHotelGame.BravoHotelLobbyWidget.Logout // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x1edb970>
	void UIButtonOverSoundDelegate__DelegateSignature(); // UIButtonOverSoundDelegate__DelegateSignature BravoHotelGame.BravoHotelLobbyWidget_Web.UIButtonOverSoundDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // <Game+0x23a73f0>
	void StopPatrol(); // StopPatrol BravoHotelGame.BravoHotelLocalAIController.StopPatrol // (Final|Native|Public|BlueprintCallable) // <Game+0x1f5a090>
	Unknown Save(); // Save BravoHotelGame.BravoHotelLocalSaveBase.Save // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0x1f5a530>
	Unknown Get(); // Get BravoHotelGame.BravoHotelLocalSavedSettings.Get // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x1f5aa50>
	void TryPlayerInfoHttpService(); // TryPlayerInfoHttpService BravoHotelGame.BravoHotelLoginWidget.TryPlayerInfoHttpService // (Final|Native|Public|BlueprintCallable) // <Game+0x1f5ac70>
	void OnCompleteAysnLoadItems(Unknown StaticMeshPtr); // OnCompleteAysnLoadItems BravoHotelGame.BravoHotelMagazineForDrop.OnCompleteAysnLoadItems // (Final|Native|Protected) // <Game+0x1f61010>
	void UpdateNitroBu(Unknown TargetPosition); // UpdateNitroBoHotelGam BravoHotelGame.BravoHotelMainWidget.UpdateNitro // (Event|Public|HasDefaults|BlueprintEvent) // <Game+0x23a73f0>
	void UpdateSupplyBoxInfo(); // UpdateSupplyBoxInfo BravoHotelGame.BravoHotelMapCompWidget.UpdateSupplyBoxInfo // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	void UpdateReplayCircleInfos(); // UpdateReplayCircleInfos BravoHotelGame.BravoHotelMapDrawWidget.UpdateReplayCircleInfos // (Final|Native|Public|BlueprintCallable) // <Game+0x1f66690>
	void ShowMovie(); // ShowMovie BravoHotelGame.BravoHotelMediaPlayerWidget.ShowMovie // (Event|Public|BlueprintEvent) // <Game+0x23a73f0>
	Unknown UpdatePlayerIcon_Impl(float DeltaSeconds, float MapWidth, Unknown PlayerIconGroup); // UpdatePlayerIcon_Impl BravoHotelGame.BravoHotelMiniMapWidget.UpdatePlayerIcon_Impl // (Final|Native|Public|BlueprintCallable) // <Game+0x1f67280>
	void ShowLevelName(); // ShowLevelName BravoHotelGame.BravoHotelMK3DReplayController.ShowLevelName // (Final|Exec|Native|Public) // <Game+0x1f68330>
	void SetCameraMaxSpeed(float SpeedLevel); // SetCameraMaxSpeed BravoHotelGame.BravoHotelMK3DSpectatorPawn.SetCameraMaxSpeed // (Final|Native|Public|BlueprintCallable) // <Game+0x1f686c0>
	void OnRep_ChangeElevatorState(); // OnRep_ChangeElevatorState BravoHotelGame.BravoHotelMoveElevator.OnRep_ChangeElevatorState // (Final|Native|Public) // <Game+0x1f68d50>
	void OpRep_StartAction(); // OpRep_StartAction BravoHotelGame.BravoHotelMutiplayerPhysicsActor.OpRep_StartAction // (Final|Native|Private) // <Game+0x1f692d0>
	void TimerFunction_WarmupUpdate(); // TimerFunction_WarmupUpdate BravoHotelGame.BravoHotelMuzzleEffectComponent.TimerFunction_WarmupUpdate // (Final|Native|Protected) // <Game+0x1f697f0>
	Unknown IsSocketAlive(); // IsSocketAlive BravoHotelGame.BravoHotelNetClient.IsSocketAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x1f69aa0>
	Unknown IsSocketAlive(); // IsSocketAlive BravoHotelGame.BravoHotelNetworkManager.IsSocketAlive // (Final|Native|Public) // <Game+0x1f734c0>
	void SetSkinMaterial(Unknown Material); // SetSkinMaterial BravoHotelGame.BravoHotelOutGameParachuteActor.SetSkinMaterial // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void UnregisterActorOutOfCircle(Unknown Actor); // UnregisterActorOutOfCircle BravoHotelGame.BravoHotelPainCausingComponent.UnregisterActorOutOfCircle // (Final|Native|Public) // <Game+0x1f7b670>
	Unknown GetLanuchForce(); // GetLanuchForce BravoHotelGame.BravoHotelParachuteTriggerBox.GetLanuchForce // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x1f7b860>
	void PerkInfoChanged__DelegateSignature(); // PerkInfoChanged__DelegateSignature BravoHotelGame.BravoHotelPerkComponent.PerkInfoChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // <Game+0x23a73f0>
	void SetPerkInfoImpl(Unknown bUseLocalPlayerInfo, Unknown& PerkDeckClassInfo); // SetPerkInfoImpl BravoHotelGame.BravoHotelPerkDeckWidget.SetPerkInfoImpl // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SetWeaponInfo(Unknown& NewWeaponItemData); // SetWeaponInfo BravoHotelGame.BravoHotelPersonalSupplyBoxSlotItemWidget.SetWeaponInfo // (Event|Public|HasOutParms|BlueprintEvent) // <Game+0x23a73f0>
	void UpdateWeaponItemEquipState(Unknown& WeaponItem, Unknown IsUnEquip); // UpdateWeaponItemEquipState BravoHotelGame.BravoHotelPersonalSupplyBoxWidget.UpdateWeaponItemEquipState // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1f7f560>
	struct FName GetSurfaceName(); // GetSurfaceName BravoHotelGame.BravoHotelPhysicalMaterial.GetSurfaceName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1f7f900>
	void UpdateTimedCameraPostProcess(Unknown& TargetData); // UpdateTimedCameraPostProcess BravoHotelGame.BravoHotelPlayerCameraManager.UpdateTimedCameraPostProcess // (Final|Native|Public|HasOutParms) // <Game+0x1f81a70>
	void UnEquipItem(struct FName& ItemKey); // UnEquipItem BravoHotelGame.BravoHotelPlayerController.UnEquipItem // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1f93690>
	void OnChangedReplayViewMode(Unknown IsPlayer); // OnChangedReplayViewMode BravoHotelGame.BravoHotelPlayerControllerInter.OnChangedReplayViewMode // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x1f943c0>
	Unknown GetViewPoint(Unknown InWorldContextObject); // GetViewPoint BravoHotelGame.BravoHotelPlayerControllerStatics.GetViewPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // <Game+0x1f94330>
	void UpdateKillCount(); // UpdateKillCount BravoHotelGame.BravoHotelPlayerHUD.UpdateKillCount // (Final|Native|Public) // <Game+0x1f98410>
	void UpdateInfo(); // UpdateInfo BravoHotelGame.BravoHotelPlayerIconWidget.UpdateInfo // (Final|Native|Protected) // <Game+0x1f989a0>
	void SetProgressPercent(Unknown InProgressBar, int32_t InHealth); // SetProgressPercent BravoHotelGame.BravoHotelPlayerInfoProgressSlotWidget.SetProgressPercent // (Final|Native|Public) // <Game+0x1f98f50>
	void UpdateOverHealing(int32_t InNewHealth, Unknown bFlag); // UpdateOverHealing BravoHotelGame.BravoHotelPlayerInfoProgressWidget.UpdateOverHealing // (Event|Protected|BlueprintEvent) // <Game+0x23a73f0>
	void UpdateWidgetBuff(int32_t KeyIndex, float Timer, float MaxTime); // UpdateWidgetBuff BravoHotelGame.BravoHotelPlayerInfoWidget.UpdateWidgetBuff // (Final|Native|Public|BlueprintCallable) // <Game+0x1f9b370>
	void ResetMarkerInfo(Unknown IsUpdate); // ResetMarkerInfo BravoHotelGame.BravoHotelPlayerMarkerWidget.ResetMarkerInfo // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void OnRep_TeamIndex(); // OnRep_TeamIndex BravoHotelGame.BHReplicatedPlayerInfo.OnRep_TeamIndex // (Final|Native|Protected) // <Game+0x1f9ef10>
	void OnRep_Kills(); // OnRep_Kills BravoHotelGame.BHReplicatedPlayStat.OnRep_Kills // (Final|Native|Protected) // <Game+0x1f9ee70>
	void OnRep_ReplicatedAppearanceInfo(); // OnRep_ReplicatedAppearanceInfo BravoHotelGame.BHReplicatedAppearanceInfo.OnRep_ReplicatedAppearanceInfo // (Final|Native|Protected) // <Game+0x1f9eeb0>
	Unknown TryGetMarker(Unknown& OutMarkerPosition); // TryGetMarker BravoHotelGame.BravoHotelPlayerState.TryGetMarker // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // <Game+0x1f9f6b0>
	void OnRep_RequestResuscitation(); // OnRep_RequestResuscitation BravoHotelGame.BravoHotelPlayerSubState.OnRep_RequestResuscitation // (Final|Native|Protected) // <Game+0x1fa0540>
	void SetMessageEx(int32_t ErrorIdx, struct FString ErrorID, struct FString Parameter, Unknown bConfirm, Unknown bCancel, Unknown bWaiting, Unknown& evt); // SetMessageEx BravoHotelGame.BravoHotelPopupWidget.SetMessageEx // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x23a73f0>
	void SpawnTrailEffect(); // SpawnTrailEffect BravoHotelGame.BravoHotelProjectile.SpawnTrailEffect // (Final|Native|Protected) // <Game+0x1fa24f0>
	void UpdateFlyby(); // UpdateFlyby BravoHotelGame.BravoHotelProjectileBullet.UpdateFlyby // (Final|Native|Protected) // <Game+0x1fa2940>
	void UpdateTrailParticle(); // UpdateTrailParticle BravoHotelGame.BravoHotelProjectileGrenade.UpdateTrailParticle // (Final|Native|Protected) // <Game+0x1fa4760>
	void OnAudioEmitterUnregistered(); // OnAudioEmitterUnregistered BravoHotelGame.BravoHotelProjectileFireAx.OnAudioEmitterUnregistered // (Final|Native|Private) // <Game+0x1fa2b40>
	void AddExplosionDecalEffect(); // AddExplosionDecalEffect BravoHotelGame.BravoHotelProjectileGrenadeBomb.AddExplosionDecalEffect // (Final|Native|Protected) // <Game+0x1fa4ac0>
	void OnAudioEmitterUnregistered(); // OnAudioEmitterUnregistered BravoHotelGame.BravoHotelProjectileGrenadeC4.OnAudioEmitterUnregistered // (Final|Native|Protected) // <Game+0x1fa4d40>
	void AddExplosionDecalEffect(); // AddExplosionDecalEffect BravoHotelGame.BravoHotelProjectileGrenadeDynamite.AddExplosionDecalEffect // (Final|Native|Protected) // <Game+0x1fa4ed0>
	void PlayFlashbangGrenade(); // PlayFlashbangGrenade BravoHotelGame.BravoHotelProjectileGrenadeFlashbang.PlayFlashbangGrenade // (Final|Native|Protected) // <Game+0x1fa5380>
	void AddExplosionDecalEffect(); // AddExplosionDecalEffect BravoHotelGame.BravoHotelProjectileGrenadeFragment.AddExplosionDecalEffect // (Final|Native|Protected) // <Game+0x1fa5510>
	void SpreadingFirePropagation(); // SpreadingFirePropagation BravoHotelGame.BravoHotelProjectileGrenadeMolotovCocktail.SpreadingFirePropagation // (Final|Native|Protected) // <Game+0x1fa5c60>
	void SmokeEffectFinished(Unknown PSystem); // SmokeEffectFinished BravoHotelGame.BravoHotelProjectileGrenadeSmoke.SmokeEffectFinished // (Final|Native|Public) // <Game+0x1fa6660>
	void OnOverlapEnd(Unknown OverlappedComponent, Unknown OtherActor, Unknown OtherComp, int32_t OtherBodyIndex); // OnOverlapEnd BravoHotelGame.BravoHotelProjectileMolotovFireCell.OnOverlapEnd // (Final|Native|Protected) // <Game+0x1fa6bd0>
	void StopScenarioQuest(); // StopScenarioQuest BravoHotelGame.BravoHotelQuestComponent.StopScenarioQuest // (Final|Native|Public|BlueprintCallable) // <Game+0x1fa7e00>
	void UpdateOneByOneReload(float Delay); // UpdateOneByOneReload BravoHotelGame.BravoHotelRangedWeapon.UpdateOneByOneReload // (Final|Native|Protected) // <Game+0x1faef90>
	void UpdateVerticalRecoilRotation(float Value); // UpdateVerticalRecoilRotation BravoHotelGame.BravoHotelRecoilComponent.UpdateVerticalRecoilRotation // (Final|Native|Protected) // <Game+0x1faf8f0>
	void OnRep_RemainingBombingCount(); // OnRep_RemainingBombingCount BravoHotelGame.BravoHotelRedZone.OnRep_RemainingBombingCount // (Final|Native|Protected) // <Game+0x1fafe30>
	void Run(int32_t CheckPhase); // Run BravoHotelGame.BravoHotelRedZoneManager.Run // (Final|Native|Public|BlueprintCallable) // <Game+0x1faffc0>
	Unknown UpdateShouldKeep(struct FString ReplayName, Unknown bShouldKeep); // UpdateShouldKeep BravoHotelGame.BravoHotelReplayListWidget.UpdateShouldKeep // (Final|Native|Public|BlueprintCallable) // <Game+0x1fb1340>
	void UpdatePlayerInfo(Unknown PlayerListSortType); // UpdatePlayerInfo BravoHotelGame.BravoHotelReplayPlayerListInter.UpdatePlayerInfo // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x1fb1c90>
};

