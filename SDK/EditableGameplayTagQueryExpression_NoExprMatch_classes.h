// EditableGameplayTagQueryExpression_NoExprMatch GameplayTags.EditableGameplayTagQueryExpression_NoExprMatch
// Size: 0x00 (Inherited: 0x28)
struct UEditableGameplayTagQueryExpression_NoExprMatch : UEditableGameplayTagQueryExpression {
	None AnimGraphNode_Root; // 0x10f8(0x40)
	None AnimGraphNode_TransitionResult_37; // 0x1138(0x38)
	None AnimGraphNode_TransitionResult_36; // 0x1170(0x38)
	None AnimGraphNode_TransitionResult_35; // 0x11a8(0x38)
	None AnimGraphNode_TransitionResult_34; // 0x11e0(0x38)
	None AnimGraphNode_TransitionResult_33; // 0x1218(0x38)
	None AnimGraphNode_TransitionResult_32; // 0x1250(0x38)
	None AnimGraphNode_TransitionResult_31; // 0x1288(0x38)
	None AnimGraphNode_TransitionResult_30; // 0x12c0(0x38)
	None AnimGraphNode_TransitionResult_29; // 0x12f8(0x38)
	None AnimGraphNode_TransitionResult_28; // 0x1330(0x38)
	None AnimGraphNode_TransitionResult_27; // 0x1368(0x38)
	None AnimGraphNode_TransitionResult_26; // 0x13a0(0x38)
	None AnimGraphNode_TransitionResult_25; // 0x13d8(0x38)
	None AnimGraphNode_TransitionResult_24; // 0x1410(0x38)
	None AnimGraphNode_TransitionResult_23; // 0x1448(0x38)
	None AnimGraphNode_TransitionResult_22; // 0x1480(0x38)
	None AnimGraphNode_TransitionResult_21; // 0x14b8(0x38)
	None AnimGraphNode_TransitionResult_20; // 0x14f0(0x38)
	None AnimGraphNode_TransitionResult_19; // 0x1528(0x38)
	None AnimGraphNode_TransitionResult_18; // 0x1560(0x38)
	None AnimGraphNode_TransitionResult_17; // 0x1598(0x38)
	None AnimGraphNode_TransitionResult_16; // 0x15d0(0x38)
	None AnimGraphNode_TransitionResult_15; // 0x1608(0x38)
	None AnimGraphNode_TransitionResult_14; // 0x1640(0x38)
	None AnimGraphNode_TransitionResult_13; // 0x1678(0x38)
	None AnimGraphNode_TransitionResult_12; // 0x16b0(0x38)
	None AnimGraphNode_TransitionResult_11; // 0x16e8(0x38)
	None AnimGraphNode_TransitionResult_10; // 0x1720(0x38)
	None AnimGraphNode_TransitionResult_9; // 0x1758(0x38)
	None AnimGraphNode_TransitionResult_8; // 0x1790(0x38)
	None AnimGraphNode_TransitionResult_7; // 0x17c8(0x38)
	None AnimGraphNode_TransitionResult_6; // 0x1800(0x38)
	None AnimGraphNode_TransitionResult_5; // 0x1838(0x38)
	None AnimGraphNode_TransitionResult_4; // 0x1870(0x38)
	None AnimGraphNode_TransitionResult_3; // 0x18a8(0x38)
	None AnimGraphNode_TransitionResult_2; // 0x18e0(0x38)
	None AnimGraphNode_TransitionResult; // 0x1918(0x38)
	None AnimGraphNode_SequenceSkinned_13; // 0x1950(0x160)
	None AnimGraphNode_SequencePlayer_13; // 0x1ab0(0x88)
	None AnimGraphNode_StateResult_9; // 0x1b38(0x40)
	None AnimGraphNode_SequenceSkinned_12; // 0x1b78(0x160)
	None AnimGraphNode_SequenceSkinned_11; // 0x1cd8(0x160)
	None AnimGraphNode_SequenceSkinned_10; // 0x1e38(0x160)
	None AnimGraphNode_SequenceSkinned_9; // 0x1f98(0x160)
	None AnimGraphNode_SequencePlayer_12; // 0x20f8(0x88)
	None AnimGraphNode_BlendListByInt_2; // 0x2180(0xb0)
	None AnimGraphNode_SequencePlayer_11; // 0x2230(0x88)
	None AnimGraphNode_SequencePlayer_10; // 0x22b8(0x88)
	None AnimGraphNode_BlendListByInt; // 0x2340(0xb0)
	None AnimGraphNode_SequencePlayer_9; // 0x23f0(0x88)
	None AnimGraphNode_BlendListByBool_11; // 0x2478(0xb0)
	None AnimGraphNode_StateResult_8; // 0x2528(0x40)
	None AnimGraphNode_SequenceSkinned_8; // 0x2568(0x160)
	None AnimGraphNode_SequenceSkinned_7; // 0x26c8(0x160)
	None AnimGraphNode_BlendSpaceSkinned_6; // 0x2828(0x200)
	None AnimGraphNode_BlendSpacePlayer_6; // 0x2a28(0xf0)
	None AnimGraphNode_SequencePlayer_8; // 0x2b18(0x88)
	None AnimGraphNode_BlendListByBool_10; // 0x2ba0(0xb0)
	None AnimGraphNode_BlendListByBool_9; // 0x2c50(0xb0)
	None AnimGraphNode_SequencePlayer_7; // 0x2d00(0x88)
	None AnimGraphNode_StateResult_7; // 0x2d88(0x40)
	None AnimGraphNode_SequenceEvaluator_2; // 0x2dc8(0x58)
	None AnimGraphNode_SequenceEvaluator; // 0x2e20(0x58)
	None AnimGraphNode_BlendListByBool_8; // 0x2e78(0xb0)
	None AnimGraphNode_StateResult_6; // 0x2f28(0x40)
	None AnimGraphNode_BlendSpaceSkinned_5; // 0x2f68(0x200)
	None AnimGraphNode_BlendSpaceSkinned_4; // 0x3168(0x200)
	None AnimGraphNode_BlendSpacePlayer_5; // 0x3368(0xf0)
	None AnimGraphNode_BlendListByBool_7; // 0x3458(0xb0)
	None AnimGraphNode_BlendSpacePlayer_4; // 0x3508(0xf0)
	None AnimGraphNode_StateResult_5; // 0x35f8(0x40)
	None AnimGraphNode_SequenceSkinned_6; // 0x3638(0x160)
	None AnimGraphNode_SequenceSkinned_5; // 0x3798(0x160)
	None AnimGraphNode_SequenceSkinned_4; // 0x38f8(0x160)
	None AnimGraphNode_SequenceSkinned_3; // 0x3a58(0x160)
	None AnimGraphNode_BlendSpaceSkinned_3; // 0x3bb8(0x200)
	None AnimGraphNode_SequencePlayer_6; // 0x3db8(0x88)
	None AnimGraphNode_SequencePlayer_5; // 0x3e40(0x88)
	None AnimGraphNode_SequencePlayer_4; // 0x3ec8(0x88)
	None AnimGraphNode_SequencePlayer_3; // 0x3f50(0x88)
	None AnimGraphNode_BlendListByEnum; // 0x3fd8(0xc0)
	None AnimGraphNode_BlendListByBool_6; // 0x4098(0xb0)
	None AnimGraphNode_BlendSpacePlayer_3; // 0x4148(0xf0)
	None AnimGraphNode_StateResult_4; // 0x4238(0x40)
	None AnimGraphNode_BlendSpaceSkinned_2; // 0x4278(0x200)
	None AnimGraphNode_BlendSpaceSkinned; // 0x4478(0x200)
	None AnimGraphNode_BlendSpacePlayer_2; // 0x4678(0xf0)
	None AnimGraphNode_BlendListByBool_5; // 0x4768(0xb0)
	None AnimGraphNode_BlendSpacePlayer; // 0x4818(0xf0)
	None AnimGraphNode_StateResult_3; // 0x4908(0x40)
	None AnimGraphNode_SequenceSkinned_2; // 0x4948(0x160)
	None AnimGraphNode_SequenceSkinned; // 0x4aa8(0x160)
	None AnimGraphNode_SequencePlayer_2; // 0x4c08(0x88)
	None AnimGraphNode_RandomPlayer; // 0x4c90(0x88)
	None AnimGraphNode_BlendListByBool_4; // 0x4d18(0xb0)
	None AnimGraphNode_StateResult_2; // 0x4dc8(0x40)
	None AnimGraphNode_StateMachine_2; // 0x4e08(0xc0)
	None AnimGraphNode_SequencePlayer; // 0x4ec8(0x88)
	None AnimGraphNode_StateResult; // 0x4f50(0x40)
	None AnimGraphNode_StateMachine; // 0x4f90(0xc0)
	None AnimGraphNode_BlendListByBool_3; // 0x5050(0xb0)
	None AnimGraphNode_BlendListByBool_2; // 0x5100(0xb0)
	None AnimGraphNode_LocalToComponentSpace; // 0x51b0(0x30)
	None AnimGraphNode_ComponentToLocalSpace; // 0x51e0(0x30)
	None AnimGraphNode_ModifyBone; // 0x5210(0x118)
	None AnimGraphNode_BlendListByBool; // 0x5328(0xb0)
	None AnimGraphNode_AimOffsetSkinned; // 0x53d8(0x1c0)
	None AnimGraphNode_SaveCachedPose; // 0x5598(0xc8)
	None AnimGraphNode_UseCachedPose_3; // 0x5660(0x38)
	None AnimGraphNode_UseCachedPose_2; // 0x5698(0x38)
	None AnimGraphNode_UseCachedPose; // 0x56d0(0x38)
	None MaxMantleHt; // 0x5708(0x04)
	None Max2StoryMantleHt; // 0x570c(0x04)
	None StringMantlesTogether; // 0x5710(0x01)
	None Start Swim Moving; // 0x5718(0x08)
	None Start Swim Moving B; // 0x5720(0x08)
	None Start Swim Moving A; // 0x5728(0x08)
	None Cached Angle; // 0x5730(0x04)
	None Stop Swim Moving A; // 0x5738(0x08)
	None Stop Swim Moving B; // 0x5740(0x08)
	None Stop Swim Moving; // 0x5748(0x08)
	None Cached Stop Angle; // 0x5750(0x04)
	None locoStartDir; // 0x5754(0x01)
	None locoStopDir; // 0x5755(0x01)
	None TurnVal; // 0x5758(0x04)
	None Transition_Downed; // 0x575c(0x01)
	None Transition_Pivot; // 0x575d(0x01)
	None IsFallingToWater; // 0x575e(0x01)
	None Replace with code; // 0x5760(0x0c)
	None Character; // 0x5770(0x08)
	None Transition State Lock; // 0x5778(0x01)
	None CallFunc_BreakRotator_Roll; // 0x577c(0x04)
	None CallFunc_BreakRotator_Pitch; // 0x5780(0x04)
	None CallFunc_BreakRotator_Yaw; // 0x5784(0x04)
	None CallFunc_BreakRotator_Roll_2; // 0x5788(0x04)
	None CallFunc_BreakRotator_Pitch_2; // 0x578c(0x04)
	None CallFunc_BreakRotator_Yaw_2; // 0x5790(0x04)
	None CallFunc_BreakRotator_Roll_3; // 0x5794(0x04)
	None CallFunc_BreakRotator_Pitch_3; // 0x5798(0x04)
	None CallFunc_BreakRotator_Yaw_3; // 0x579c(0x04)
	None CallFunc_BreakRotator_Roll_4; // 0x57a0(0x04)
	None CallFunc_BreakRotator_Pitch_4; // 0x57a4(0x04)
	None CallFunc_BreakRotator_Yaw_4; // 0x57a8(0x04)
	None CallFunc_BreakRotator_Roll_5; // 0x57ac(0x04)
	None CallFunc_BreakRotator_Pitch_5; // 0x57b0(0x04)
	None CallFunc_BreakRotator_Yaw_5; // 0x57b4(0x04)
	None CallFunc_BreakVector_X; // 0x57b8(0x04)
	None CallFunc_BreakVector_Y; // 0x57bc(0x04)
	None CallFunc_BreakVector_Z; // 0x57c0(0x04)
	None CallFunc_BreakRotator_Roll_6; // 0x57c4(0x04)
	None CallFunc_BreakRotator_Pitch_6; // 0x57c8(0x04)
	None CallFunc_BreakRotator_Yaw_6; // 0x57cc(0x04)
	None Temp_bool_Variable; // 0x57d0(0x01)
	None K2Node_Select_Default; // 0x57d4(0x0c)
	None CallFunc_BreakVector_X_2; // 0x57e0(0x04)
	None CallFunc_BreakVector_Y_2; // 0x57e4(0x04)
	None CallFunc_BreakVector_Z_2; // 0x57e8(0x04)
	None Temp_bool_Variable_2; // 0x57ec(0x01)
	None K2Node_Select_Default_2; // 0x57f0(0x0c)
	None Temp_bool_Variable_3; // 0x57fc(0x01)
	None Temp_bool_Variable_4; // 0x57fd(0x01)
	None K2Node_Select_Default_3; // 0x5800(0x0c)
	None K2Node_Event_DeltaTimeX; // 0x580c(0x04)
	None K2Node_Select_Default_4; // 0x5810(0x0c)
	None K2Node_Event_StartLocation; // 0x581c(0x0c)
	None CallFunc_BreakVector_X_3; // 0x5828(0x04)
	None CallFunc_BreakVector_Y_3; // 0x582c(0x04)
	None CallFunc_BreakVector_Z_3; // 0x5830(0x04)
	None K2Node_Event_StopLocation; // 0x5834(0x0c)
	None K2Node_Event_AnimationVariant; // 0x5840(0x01)
	None K2Node_Event_DelayTime; // 0x5844(0x04)
	None K2Node_SwitchEnum_CmpSuccess; // 0x5848(0x01)
	None K2Node_DynamicCast_AsKSCharacter; // 0x5850(0x08)
	None K2Node_DynamicCast_bSuccess; // 0x5858(0x01)
	None K2Node_Event_PivotLocation; // 0x585c(0x0c)
	None K2Node_Event_bShouldLock; // 0x5868(0x01)
	None BaseBar; // 0x238(0x08)
	None ProgressBarFill; // 0x240(0x08)
	None UberGraphFrame; // 0x238(0x08)
	None FadeOut; // 0x240(0x08)
	None Show; // 0x248(0x08)
	None NameButton; // 0x250(0x08)
	None NameText; // 0x258(0x08)
	None Panel; // 0x260(0x08)
	None Text; // 0x268(0x08)
	None ChatDataCopy; // 0x270(0x40)
	None IsWindowCollapsed; // 0x2b0(0x01)
	None IsInitialShowFinished; // 0x2b1(0x01)
	None ChatMessageDisplayDuration; // 0x2b4(0x04)
	None LobbyState; // 0x2b0(0x08)
	None PlayerState; // 0x2b8(0x08)
	None LobbyJoinServerState; // 0x2c1(0x01)
	None LobbyStateClass; // 0x250(0x28)
	None LobbyState; // 0x278(0x08)
	None DisplayName; // 0x220(0x18)
	None UniqueId; // 0x238(0x28)
	None PartyOwnerUniqueId; // 0x260(0x28)
	None bInLobby; // 0x288(0x01)
	None ClientActor; // 0x290(0x08)
	None MaxPlayers; // 0x220(0x04)
	None LobbyBeaconPlayerStateClass; // 0x228(0x08)
	None bLobbyStarted; // 0x238(0x01)
	None WaitForPlayersTimeRemaining; // 0x23c(0x04)
	None Players; // 0x240(0x120)
	None LastKnownStatus; // 0x28(0x01)
	None bRejoinAfterCheck; // 0x29(0x01)
	None bAttemptingRejoin; // 0x2a(0x01)
	None DestructibleComponent; // 0x220(0x08)
	None OnActorFracture; // 0x228(0x10)
	None bFractureEffectOverride; // 0x670(0x01)
	None FractureEffects; // 0x678(0x10)
	None bEnableHardSleeping; // 0x688(0x01)
	None LargeChunkThreshold; // 0x68c(0x04)
	None OnComponentFracture; // 0x6a0(0x10)
	None CellSiteCount; // 0x28(0x04)
	None FractureMaterialDesc; // 0x2c(0x24)
	None RandomSeed; // 0x50(0x04)
	None VoronoiSites; // 0x58(0x10)
	None OriginalSubmeshCount; // 0x68(0x04)
	None Materials; // 0x70(0x10)
	None ChunkParameters; // 0x80(0x10)
	None DefaultDestructibleParameters; // 0x388(0x88)
	None FractureEffects; // 0x410(0x10)
	None OSSName; // 0x1e0(0x10)
	None HotfixManagerClassName; // 0x1f0(0x10)
	None DebugPrefix; // 0x200(0x10)
	None AssetsHotfixedFromIniFiles; // 0x210(0x10)
	None HotfixCheckCompleteDelay; // 0x88(0x04)
	None UpdateCheckCompleteDelay; // 0x8c(0x04)
	None HotfixAvailabilityCheckCompleteDelay; // 0x90(0x04)
	None UpdateCheckAvailabilityCompleteDelay; // 0x94(0x04)
	None bCheckPlatformOSSForUpdate; // 0x98(0x01)
	None bCheckOSSForUpdate; // 0x99(0x01)
	None AppSuspendedUpdateCheckTimeSeconds; // 0x9c(0x04)
	None bPlatformEnvironmentDetected; // 0xa8(0x01)
	None bInitialUpdateFinished; // 0xa9(0x01)
	None bCheckHotfixAvailabilityOnly; // 0xaa(0x01)
	None CurrentUpdateState; // 0xab(0x01)
	None WorstNumFilesPendingLoadViewed; // 0xac(0x04)
	None LastPatchCheckResult; // 0xb0(0x01)
	None LastHotfixResult; // 0xb1(0x01)
	None LastUpdateCheck; // 0xe0(0x10)
	None LastCompletionResult; // 0xf0(0x02)
	None UpdateStateEnum; // 0x108(0x08)
	None UpdateCompletionEnum; // 0x110(0x08)
	None PrimaryActorTick; // 0x28(0x30)
	None bNetTemporary; // 0x58(0x01)
	None bNetStartup; // 0x58(0x01)
	None bOnlyRelevantToOwner; // 0x58(0x01)
	None bAlwaysRelevant; // 0x58(0x01)
	None bReplicateMovement; // 0x58(0x01)
	None bHidden; // 0x58(0x01)
	None bTearOff; // 0x58(0x01)
	None bExchangedRoles; // 0x58(0x01)
	None bNetLoadOnClient; // 0x59(0x01)
	None bNetUseOwnerRelevancy; // 0x59(0x01)
	None bRelevantForNetworkReplays; // 0x59(0x01)
	None bRelevantForLevelBounds; // 0x59(0x01)
	None bReplayRewindable; // 0x59(0x01)
	None bAllowTickBeforeBeginPlay; // 0x59(0x01)
	None bAutoDestroyWhenFinished; // 0x59(0x01)
	None bCanBeDamaged; // 0x59(0x01)
	None bBlockInput; // 0x5a(0x01)
	None bCollideWhenPlacing; // 0x5a(0x01)
	None bFindCameraComponentWhenViewTarget; // 0x5a(0x01)
	None bGenerateOverlapEventsDuringLevelStreaming; // 0x5a(0x01)
	None bIgnoresOriginShifting; // 0x5a(0x01)
	None bEnableAutoLODGeneration; // 0x5a(0x01)
	None bIsEditorOnlyActor; // 0x5a(0x01)
	None bActorSeamlessTraveled; // 0x5a(0x01)
	None bReplicates; // 0x5b(0x01)
	None bCanBeInCluster; // 0x5b(0x01)
	None bAllowReceiveTickEventOnDedicatedServer; // 0x5b(0x01)
	None bActorEnableCollision; // 0x5c(0x01)
	None bActorIsBeingDestroyed; // 0x5c(0x01)
	None UpdateOverlapsMethodDuringLevelStreaming; // 0x5d(0x01)
	None DefaultUpdateOverlapsMethodDuringLevelStreaming; // 0x5e(0x01)
	None RemoteRole; // 0x5f(0x01)
	None ReplicatedMovement; // 0x60(0x34)
	None InitialLifeSpan; // 0x94(0x04)
	None CustomTimeDilation; // 0x98(0x04)
	None AttachmentReplication; // 0xa0(0x40)
	None Owner; // 0xe0(0x08)
	None NetDriverName; // 0xe8(0x08)
	None Role; // 0xf0(0x01)
	None NetDormancy; // 0xf1(0x01)
	None SpawnCollisionHandlingMethod; // 0xf2(0x01)
	None AutoReceiveInput; // 0xf3(0x01)
	None InputPriority; // 0xf4(0x04)
	None InputComponent; // 0xf8(0x08)
	None NetCullDistanceSquared; // 0x100(0x04)
	None NetTag; // 0x104(0x04)
	None NetUpdateFrequency; // 0x108(0x04)
	None MinNetUpdateFrequency; // 0x10c(0x04)
	None NetPriority; // 0x110(0x04)
	None Instigator; // 0x118(0x08)
	None Children; // 0x120(0x10)
	None RootComponent; // 0x130(0x08)
	None ControllingMatineeActors; // 0x138(0x10)
	None Layers; // 0x150(0x10)
	None ParentComponent; // 0x160(0x08)
	None Tags; // 0x170(0x10)
	None OnTakeAnyDamage; // 0x180(0x01)
	None OnTakePointDamage; // 0x181(0x01)
	None OnTakeRadialDamage; // 0x182(0x01)
	None OnActorBeginOverlap; // 0x183(0x01)
	None OnActorEndOverlap; // 0x184(0x01)
	None OnBeginCursorOver; // 0x185(0x01)
	None OnEndCursorOver; // 0x186(0x01)
	None OnClicked; // 0x187(0x01)
	None OnReleased; // 0x188(0x01)
	None OnInputTouchBegin; // 0x189(0x01)
	None OnInputTouchEnd; // 0x18a(0x01)
	None OnInputTouchEnter; // 0x18b(0x01)
	None OnInputTouchLeave; // 0x18c(0x01)
	None OnActorHit; // 0x18d(0x01)
	None OnDestroyed; // 0x18e(0x01)
	None OnEndPlay; // 0x18f(0x01)
	None InstanceComponents; // 0x1f0(0x10)
	None BlueprintCreatedComponents; // 0x200(0x10)
	None PrimaryComponentTick; // 0x30(0x30)
	None ComponentTags; // 0x60(0x10)
	None AssetUserData; // 0x70(0x10)
	None UCSSerializationIndex; // 0x84(0x04)
	None bNetAddressable; // 0x88(0x01)
	None bReplicates; // 0x88(0x01)
	None bAutoActivate; // 0x89(0x01)
	None bIsActive; // 0x8a(0x01)
	None bEditableWhenInherited; // 0x8a(0x01)
	None bCanEverAffectNavigation; // 0x8a(0x01)
	None bIsEditorOnly; // 0x8a(0x01)
	None CreationMethod; // 0x8c(0x01)
	None OnComponentActivated; // 0x8d(0x01)
	None OnComponentDeactivated; // 0x8e(0x01)
	None UCSModifiedProperties; // 0x90(0x10)
	None PhysicsVolume; // 0xb8(0x08)
	None AttachParent; // 0xc0(0x08)
	None AttachSocketName; // 0xc8(0x08)
	None AttachChildren; // 0xd0(0x10)
	None ClientAttachedChildren; // 0xe0(0x10)
	None RelativeLocation; // 0x11c(0x0c)
	None RelativeRotation; // 0x128(0x0c)
	None RelativeScale3D; // 0x134(0x0c)
	None ComponentVelocity; // 0x140(0x0c)
	None bComponentToWorldUpdated; // 0x14c(0x01)
	None bAbsoluteLocation; // 0x14c(0x01)
	None bAbsoluteRotation; // 0x14c(0x01)
	None bAbsoluteScale; // 0x14c(0x01)
	None bVisible; // 0x14c(0x01)
	None bShouldBeAttached; // 0x14c(0x01)
	None bShouldSnapLocationWhenAttached; // 0x14c(0x01)
	None bShouldSnapRotationWhenAttached; // 0x14d(0x01)
	None bShouldUpdatePhysicsVolume; // 0x14d(0x01)
	None bHiddenInGame; // 0x14d(0x01)
	None bBoundsChangeTriggersStreamingDataRebuild; // 0x14d(0x01)
	None bUseAttachParentBound; // 0x14d(0x01)
	None Mobility; // 0x14f(0x01)
	None DetailMode; // 0x150(0x01)
	None PhysicsVolumeChangedDelegate; // 0x151(0x01)
	None MinDrawDistance; // 0x210(0x04)
	None LDMaxDrawDistance; // 0x214(0x04)
	None CachedMaxDrawDistance; // 0x218(0x04)
	None DepthPriorityGroup; // 0x21c(0x01)
	None ViewOwnerDepthPriorityGroup; // 0x21d(0x01)
	None IndirectLightingCacheQuality; // 0x21e(0x01)
	None LightmapType; // 0x21f(0x01)
	None bUseMaxLODAsImposter; // 0x220(0x01)
	None bBatchImpostersAsInstances; // 0x220(0x01)
	None bNeverDistanceCull; // 0x220(0x01)
	None bForceLocalLighting; // 0x220(0x01)
	None bAlwaysCreatePhysicsState; // 0x221(0x01)
	None bGenerateOverlapEvents; // 0x221(0x01)
	None bMultiBodyOverlap; // 0x221(0x01)
	None bTraceComplexOnMove; // 0x221(0x01)
	None bReturnMaterialOnMove; // 0x221(0x01)
	None bUseViewOwnerDepthPriorityGroup; // 0x221(0x01)
	None bAllowCullDistanceVolume; // 0x221(0x01)
	None bHasMotionBlurVelocityMeshes; // 0x221(0x01)
	None bVisibleInReflectionCaptures; // 0x222(0x01)
	None bVisibleInRayTracing; // 0x222(0x01)
	None bRenderInMainPass; // 0x222(0x01)
	None bRenderInDepthPass; // 0x222(0x01)
	None bReceivesDecals; // 0x222(0x01)
	None bOwnerNoSee; // 0x222(0x01)
	None bOnlyOwnerSee; // 0x222(0x01)
	None bTreatAsBackgroundForOcclusion; // 0x222(0x01)
	None bUseAsOccluder; // 0x223(0x01)
	None bSelectable; // 0x223(0x01)
	None bForceMipStreaming; // 0x223(0x01)
	None bHasPerInstanceHitProxies; // 0x223(0x01)
	None CastShadow; // 0x223(0x01)
	None bAffectDynamicIndirectLighting; // 0x223(0x01)
	None bAffectDistanceFieldLighting; // 0x223(0x01)
	None bCastDynamicShadow; // 0x223(0x01)
	None bCastStaticShadow; // 0x224(0x01)
	None bCastVolumetricTranslucentShadow; // 0x224(0x01)
	None bSelfShadowOnly; // 0x224(0x01)
	None bCastFarShadow; // 0x224(0x01)
	None bCastInsetShadow; // 0x224(0x01)
	None bCastCinematicShadow; // 0x224(0x01)
	None bCastHiddenShadow; // 0x224(0x01)
	None bCastShadowAsTwoSided; // 0x224(0x01)
	None bShouldNotReceiveCapsuleShadows; // 0x225(0x01)
	None bLightAsIfStatic; // 0x225(0x01)
	None bLightAttachmentsAsGroup; // 0x225(0x01)
	None bExcludeFromLightAttachmentGroup; // 0x225(0x01)
	None bReceiveMobileCSMShadows; // 0x225(0x01)
	None bSingleSampleShadowFromStationaryLights; // 0x225(0x01)
	None bIgnoreRadialImpulse; // 0x225(0x01)
	None bIgnoreRadialForce; // 0x225(0x01)
	None bApplyImpulseOnDamage; // 0x226(0x01)
	None bReplicatePhysicsToAutonomousProxy; // 0x226(0x01)
	None bFillCollisionUnderneathForNavmesh; // 0x226(0x01)
	None AlwaysLoadOnClient; // 0x226(0x01)
	None AlwaysLoadOnServer; // 0x226(0x01)
	None bUseEditorCompositing; // 0x226(0x01)
	None bRenderCustomDepth; // 0x226(0x01)
	None bExcludeFromContributionCulling; // 0x226(0x01)
	None bHasCustomNavigableGeometry; // 0x228(0x01)
	None OutlineDepthMode; // 0x229(0x01)
	None CanCharacterStepUpOn; // 0x22b(0x01)
	None LightingChannels; // 0x22c(0x01)
	None CustomDepthStencilWriteMask; // 0x22d(0x01)
	None CustomDepthStencilValue; // 0x230(0x04)
	None CustomPrimitiveData; // 0x238(0x10)
	None CustomPrimitiveDataInternal; // 0x248(0x10)
	None TranslucencySortPriority; // 0x260(0x04)
	None VisibilityId; // 0x264(0x04)
	None RuntimeVirtualTextures; // 0x268(0x10)
	None VirtualTextureLodBias; // 0x278(0x01)
	None VirtualTextureCullMips; // 0x279(0x01)
	None VirtualTextureMinCoverage; // 0x27a(0x01)
	None VirtualTextureRenderPassType; // 0x27b(0x01)
	None LpvBiasMultiplier; // 0x280(0x04)
	None OutlineThicknessMultiplier; // 0x284(0x04)
	None OutlineColor; // 0x288(0x10)
	None OutlineZFadeMin; // 0x298(0x04)
	None OutlineZFadeMax; // 0x29c(0x04)
	None BoundsScale; // 0x2a8(0x04)
	None MoveIgnoreActors; // 0x2b8(0x10)
	None MoveIgnoreComponents; // 0x2c8(0x10)
	None BodyInstance; // 0x2e8(0x110)
	None OnComponentHit; // 0x3f8(0x01)
	None OnComponentBeginOverlap; // 0x3f9(0x01)
	None OnComponentEndOverlap; // 0x3fa(0x01)
	None OnComponentWake; // 0x3fb(0x01)
	None OnComponentSleep; // 0x3fc(0x01)
	None OnBeginCursorOver; // 0x3fe(0x01)
	None OnEndCursorOver; // 0x3ff(0x01)
	None OnClicked; // 0x400(0x01)
	None OnReleased; // 0x401(0x01)
	None OnInputTouchBegin; // 0x402(0x01)
	None OnInputTouchEnd; // 0x403(0x01)
	None OnInputTouchEnter; // 0x404(0x01)
	None OnInputTouchLeave; // 0x405(0x01)
	None LODParentPrimitive; // 0x420(0x08)
	None CustomFOV; // 0x428(0x04)
	None OverrideMaterials; // 0x430(0x10)
	None bEnableMaterialParameterCaching; // 0x450(0x01)
	None SkeletalMesh; // 0x458(0x08)
	None MasterPoseComponent; // 0x460(0x08)
	None SkinCacheUsage; // 0x468(0x10)
	None bSuppressSocketByNameWarnings; // 0x548(0x01)
	None PhysicsAssetOverride; // 0x578(0x08)
	None ForcedLodModel; // 0x580(0x04)
	None MinLodModel; // 0x584(0x04)
	None StreamingDistanceMultiplier; // 0x590(0x04)
	None LODInfo; // 0x5a0(0x10)
	None VisibilityBasedAnimTickOption; // 0x5d4(0x01)
	None bOverrideMinLod; // 0x5d6(0x01)
	None bUseBoundsFromMasterPoseComponent; // 0x5d6(0x01)
	None bForceWireframe; // 0x5d6(0x01)
	None bDisplayBones; // 0x5d6(0x01)
	None bDisableMorphTarget; // 0x5d6(0x01)
	None bHideSkin; // 0x5d6(0x01)
	None bPerBoneMotionBlur; // 0x5d7(0x01)
	None bComponentUseFixedSkelBounds; // 0x5d7(0x01)
	None bConsiderAllBodiesForBounds; // 0x5d7(0x01)
	None bSyncAttachParentLOD; // 0x5d7(0x01)
	None bCanHighlightSelectedSections; // 0x5d7(0x01)
	None bRecentlyRendered; // 0x5d7(0x01)
	None bCastCapsuleDirectShadow; // 0x5d7(0x01)
	None bCastCapsuleIndirectShadow; // 0x5d7(0x01)
	None bCPUSkinning; // 0x5d8(0x01)
	None bEnableUpdateRateOptimizations; // 0x5d8(0x01)
	None bDisplayDebugUpdateRateOptimizations; // 0x5d8(0x01)
	None bRenderStatic; // 0x5d8(0x01)
	None bIgnoreMasterPoseComponentLOD; // 0x5d8(0x01)
	None bCachedLocalBoundsUpToDate; // 0x5d8(0x01)
	None bForceMeshObjectUpdate; // 0x5d9(0x01)
	None CapsuleIndirectShadowMinVisibility; // 0x5dc(0x04)
	None CachedWorldSpaceBounds; // 0x5f0(0x1c)
	None CachedWorldToLocalTransform; // 0x610(0x40)
	None ForceMipLevelsToBeResidentTimestamp; // 0x28(0x08)
	None NumCinematicMipLevels; // 0x30(0x04)
	None StreamingIndex; // 0x34(0x04)
	None CachedCombinedLODBias; // 0x38(0x04)
	None CachedNumResidentLODs; // 0x3c(0x01)
	None bCachedReadyForStreaming; // 0x3d(0x01)
	None NeverStream; // 0x3d(0x01)
	None bGlobalForceMipLevelsToBeResident; // 0x3d(0x01)
	None bIsStreamable; // 0x3d(0x01)
	None bHasStreamingUpdatePending; // 0x3d(0x01)
	None bForceMiplevelsToBeResident; // 0x3d(0x01)
	None bIgnoreStreamingMipBias; // 0x3d(0x01)
	None bUseCinematicMipLevels; // 0x3d(0x01)
	None Skeleton; // 0x60(0x08)
	None ImportedBounds; // 0x68(0x1c)
	None ExtendedBounds; // 0x84(0x1c)
	None PositiveBoundsExtension; // 0xa0(0x0c)
	None NegativeBoundsExtension; // 0xac(0x0c)
	None Materials; // 0xb8(0x10)
	None SkelMirrorTable; // 0xc8(0x10)
	None LODInfo; // 0xd8(0x10)
	None MinLOD; // 0x138(0x04)
	None MaxLod; // 0x13c(0x04)
	None DisableBelowMinLodStripping; // 0x140(0x01)
	None SkelMirrorAxis; // 0x141(0x01)
	None SkelMirrorFlipAxis; // 0x142(0x01)
	None bWillNeverMergeMesh; // 0x143(0x01)
	None bUseFullPrecisionUVs; // 0x143(0x01)
	None bUseHighPrecisionTangentBasis; // 0x143(0x01)
	None bSmoothNormalsInVertexColor; // 0x143(0x01)
	None bVertexCurvature; // 0x143(0x01)
	None bHasBeenSimplified; // 0x143(0x01)
	None bHasVertexColors; // 0x143(0x01)
	None bEnablePerPolyCollision; // 0x144(0x01)
	None BodySetup; // 0x148(0x08)
	None PhysicsAsset; // 0x150(0x08)
	None ShadowPhysicsAsset; // 0x158(0x08)
	None NodeMappingData; // 0x160(0x10)
	None MorphTargets; // 0x170(0x10)
	None PostProcessAnimBlueprint; // 0x2f8(0x08)
	None MeshClothingAssets; // 0x300(0x10)
	None SamplingInfo; // 0x310(0x30)
	None AssetUserData; // 0x340(0x10)
	None Sockets; // 0x358(0x10)
	None SkinWeightProfiles; // 0x378(0x10)
	None TinyFont; // 0x30(0x08)
	None TinyFontName; // 0x38(0x18)
	None SmallFont; // 0x50(0x08)
	None SmallFontName; // 0x58(0x18)
	None MediumFont; // 0x70(0x08)
	None MediumFontName; // 0x78(0x18)
	None LargeFont; // 0x90(0x08)
	None LargeFontName; // 0x98(0x18)
	None SubtitleFont; // 0xb0(0x08)
	None SubtitleFontName; // 0xb8(0x18)
	None AdditionalFonts; // 0xd0(0x10)
	None AdditionalFontNames; // 0xe8(0x10)
	None ConsoleClass; // 0xf8(0x08)
	None ShippingConsoleClass; // 0x100(0x08)
	None ConsoleClassName; // 0x108(0x18)
	None ShippingConsoleClassName; // 0x120(0x18)
	None GameViewportClientClass; // 0x138(0x08)
	None GameViewportClientClassName; // 0x140(0x18)
	None LocalPlayerClass; // 0x158(0x08)
	None LocalPlayerClassName; // 0x160(0x18)
	None WorldSettingsClass; // 0x178(0x08)
	None WorldSettingsClassName; // 0x180(0x18)
	None NavigationSystemClassName; // 0x198(0x18)
	None NavigationSystemClass; // 0x1b0(0x08)
	None NavigationSystemConfigClassName; // 0x1b8(0x18)
	None NavigationSystemConfigClass; // 0x1d0(0x08)
	None AvoidanceManagerClassName; // 0x1d8(0x18)
	None AvoidanceManagerClass; // 0x1f0(0x08)
	None PhysicsCollisionHandlerClass; // 0x1f8(0x08)
	None PhysicsCollisionHandlerClassName; // 0x200(0x18)
	None GameUserSettingsClassName; // 0x218(0x18)
	None GameUserSettingsClass; // 0x230(0x08)
	None AIControllerClassName; // 0x238(0x18)
	None GameUserSettings; // 0x250(0x08)
	None LevelScriptActorClass; // 0x258(0x08)
	None LevelScriptActorClassName; // 0x260(0x18)
	None DefaultBlueprintBaseClassName; // 0x278(0x18)
	None GameSingletonClassName; // 0x290(0x18)
	None GameSingleton; // 0x2a8(0x08)
	None AssetManagerClassName; // 0x2b0(0x18)
	None AssetManager; // 0x2c8(0x08)
	None DefaultTexture; // 0x2d0(0x08)
	None DefaultTextureName; // 0x2d8(0x18)
	None DefaultDiffuseTexture; // 0x2f0(0x08)
	None DefaultDiffuseTextureName; // 0x2f8(0x18)
	None DefaultBSPVertexTexture; // 0x310(0x08)
	None DefaultBSPVertexTextureName; // 0x318(0x18)
	None HighFrequencyNoiseTexture; // 0x330(0x08)
	None HighFrequencyNoiseTextureName; // 0x338(0x18)
	None DefaultBokehTexture; // 0x350(0x08)
	None DefaultBokehTextureName; // 0x358(0x18)
	None DefaultBloomKernelTexture; // 0x370(0x08)
	None DefaultBloomKernelTextureName; // 0x378(0x18)
	None WireframeMaterial; // 0x390(0x08)
	None WireframeMaterialName; // 0x398(0x10)
	None DebugMeshMaterial; // 0x3a8(0x08)
	None DebugMeshMaterialName; // 0x3b0(0x18)
	None EmissiveMeshMaterial; // 0x3c8(0x08)
	None EmissiveMeshMaterialName; // 0x3d0(0x18)
	None LevelColorationLitMaterial; // 0x3e8(0x08)
	None LevelColorationLitMaterialName; // 0x3f0(0x10)
	None LevelColorationUnlitMaterial; // 0x400(0x08)
	None LevelColorationUnlitMaterialName; // 0x408(0x10)
	None LightingTexelDensityMaterial; // 0x418(0x08)
	None WorldNormalsMaterialName; // 0x420(0x10)
	None WorldNormalsMaterial; // 0x430(0x08)
	None LightingTexelDensityName; // 0x438(0x10)
	None ShadedLevelColorationLitMaterial; // 0x448(0x08)
	None ShadedLevelColorationLitMaterialName; // 0x450(0x10)
	None ShadedLevelColorationUnlitMaterial; // 0x460(0x08)
	None ShadedLevelColorationUnlitMaterialName; // 0x468(0x10)
	None RemoveSurfaceMaterial; // 0x478(0x08)
	None RemoveSurfaceMaterialName; // 0x480(0x18)
	None VertexColorMaterial; // 0x498(0x08)
	None VertexColorMaterialName; // 0x4a0(0x10)
	None VertexColorViewModeMaterial_ColorOnly; // 0x4b0(0x08)
	None VertexColorViewModeMaterialName_ColorOnly; // 0x4b8(0x10)
	None VertexColorViewModeMaterial_AlphaAsColor; // 0x4c8(0x08)
	None VertexColorViewModeMaterialName_AlphaAsColor; // 0x4d0(0x10)
	None VertexColorViewModeMaterial_RedOnly; // 0x4e0(0x08)
	None VertexColorViewModeMaterialName_RedOnly; // 0x4e8(0x10)
	None VertexColorViewModeMaterial_GreenOnly; // 0x4f8(0x08)
	None VertexColorViewModeMaterialName_GreenOnly; // 0x500(0x10)
	None VertexColorViewModeMaterial_BlueOnly; // 0x510(0x08)
	None VertexColorViewModeMaterialName_BlueOnly; // 0x518(0x10)
	None DebugEditorMaterialName; // 0x528(0x18)
	None ConstraintLimitMaterial; // 0x540(0x08)
	None ConstraintLimitMaterialX; // 0x548(0x08)
	None ConstraintLimitMaterialXAxis; // 0x550(0x08)
	None ConstraintLimitMaterialY; // 0x558(0x08)
	None ConstraintLimitMaterialYAxis; // 0x560(0x08)
	None ConstraintLimitMaterialZ; // 0x568(0x08)
	None ConstraintLimitMaterialZAxis; // 0x570(0x08)
	None ConstraintLimitMaterialPrismatic; // 0x578(0x08)
	None InvalidLightmapSettingsMaterial; // 0x580(0x08)
	None InvalidLightmapSettingsMaterialName; // 0x588(0x18)
	None PreviewShadowsIndicatorMaterial; // 0x5a0(0x08)
	None PreviewShadowsIndicatorMaterialName; // 0x5a8(0x18)
	None ArrowMaterial; // 0x5c0(0x08)
	None ArrowMaterialYellow; // 0x5c8(0x08)
	None ArrowMaterialName; // 0x5d0(0x18)
	None LightingOnlyBrightness; // 0x5e8(0x10)
	None ShaderComplexityColors; // 0x5f8(0x10)
	None QuadComplexityColors; // 0x608(0x10)
	None LightComplexityColors; // 0x618(0x10)
	None StationaryLightOverlapColors; // 0x628(0x10)
	None LODColorationColors; // 0x638(0x10)
	None HLODColorationColors; // 0x648(0x10)
	None StreamingAccuracyColors; // 0x658(0x10)
	None MaxPixelShaderAdditiveComplexityCount; // 0x668(0x04)
	None MaxES3PixelShaderAdditiveComplexityCount; // 0x66c(0x04)
	None MinLightMapDensity; // 0x670(0x04)
	None IdealLightMapDensity; // 0x674(0x04)
	None MaxLightMapDensity; // 0x678(0x04)
	None bRenderLightMapDensityGrayscale; // 0x67c(0x01)
	None RenderLightMapDensityGrayscaleScale; // 0x680(0x04)
	None RenderLightMapDensityColorScale; // 0x684(0x04)
	None LightMapDensityVertexMappedColor; // 0x688(0x10)
	None LightMapDensitySelectedColor; // 0x698(0x10)
	None StatColorMappings; // 0x6a8(0x10)
	None DefaultPhysMaterial; // 0x6b8(0x08)
	None DefaultPhysMaterialName; // 0x6c0(0x18)
	None ActiveGameNameRedirects; // 0x6d8(0x10)
	None ActiveClassRedirects; // 0x6e8(0x10)
	None ActivePluginRedirects; // 0x6f8(0x10)
	None ActiveStructRedirects; // 0x708(0x10)
	None PreIntegratedSkinBRDFTexture; // 0x718(0x08)
	None PreIntegratedSkinBRDFTextureName; // 0x720(0x18)
	None HirezPreIntegratedSkinBRDFTexture; // 0x738(0x08)
	None HirezPreIntegratedSkinBRDFTextureName; // 0x740(0x18)
	None HirezPreIntegratedShadowTexture; // 0x758(0x08)
	None HirezPreIntegratedShadowTextureName; // 0x760(0x18)
	None BlueNoiseTexture; // 0x778(0x08)
	None BlueNoiseTextureName; // 0x780(0x18)
	None MiniFontTexture; // 0x798(0x08)
	None MiniFontTextureName; // 0x7a0(0x18)
	None WeightMapPlaceholderTexture; // 0x7b8(0x08)
	None WeightMapPlaceholderTextureName; // 0x7c0(0x18)
	None LightMapDensityTexture; // 0x7d8(0x08)
	None LightMapDensityTextureName; // 0x7e0(0x18)
	None GameViewport; // 0x800(0x08)
	None DeferredCommands; // 0x808(0x10)
	None TickCycles; // 0x818(0x04)
	None GameCycles; // 0x81c(0x04)
	None ClientCycles; // 0x820(0x04)
	None NearClipPlane; // 0x824(0x04)
	None bStreamTexturesDuringLoadScreen; // 0x828(0x01)
	None bHardwareSurveyEnabled; // 0x828(0x01)
	None bSubtitlesEnabled; // 0x828(0x01)
	None bSubtitlesForcedOff; // 0x828(0x01)
	None MaximumLoopIterationCount; // 0x82c(0x04)
	None bCanBlueprintsTickByDefault; // 0x830(0x01)
	None bOptimizeAnimBlueprintMemberVariableAccess; // 0x830(0x01)
	None bAllowMultiThreadedAnimationUpdate; // 0x830(0x01)
	None bEnableEditorPSysRealtimeLOD; // 0x830(0x01)
	None bSmoothFrameRate; // 0x830(0x01)
	None bUseFixedFrameRate; // 0x830(0x01)
	None FixedFrameRate; // 0x834(0x04)
	None SmoothedFrameRateRange; // 0x838(0x10)
	None CustomTimeStep; // 0x848(0x08)
	None CustomTimeStepClassName; // 0x870(0x18)
	None TimecodeProvider; // 0x888(0x08)
	None TimecodeProviderClassName; // 0x8b0(0x18)
	None bGenerateDefaultTimecode; // 0x8c8(0x01)
	None GenerateDefaultTimecodeFrameRate; // 0x8cc(0x08)
	None GenerateDefaultTimecodeFrameDelay; // 0x8d4(0x04)
	None bCheckForMultiplePawnsSpawnedInAFrame; // 0x8d8(0x01)
	None NumPawnsAllowedToBeSpawnedInAFrame; // 0x8dc(0x04)
	None bShouldGenerateLowQualityLightmaps; // 0x8e0(0x01)
	None C_WorldBox; // 0x8e4(0x04)
	None C_BrushWire; // 0x8e8(0x04)
	None C_AddWire; // 0x8ec(0x04)
	None C_SubtractWire; // 0x8f0(0x04)
	None C_SemiSolidWire; // 0x8f4(0x04)
	None C_NonSolidWire; // 0x8f8(0x04)
	None C_WireBackground; // 0x8fc(0x04)
	None C_ScaleBoxHi; // 0x900(0x04)
	None C_VolumeCollision; // 0x904(0x04)
	None C_BSPCollision; // 0x908(0x04)
	None C_OrthoBackground; // 0x90c(0x04)
	None C_Volume; // 0x910(0x04)
	None C_BrushShape; // 0x914(0x04)
	None StreamingDistanceFactor; // 0x918(0x04)
	None GameScreenshotSaveDirectory; // 0x920(0x10)
	None TransitionType; // 0x930(0x01)
	None TransitionDescription; // 0x938(0x10)
	None TransitionGameMode; // 0x948(0x10)
	None MeshLODRange; // 0x958(0x04)
	None bAllowMatureLanguage; // 0x95c(0x01)
	None CameraRotationThreshold; // 0x960(0x04)
	None CameraTranslationThreshold; // 0x964(0x04)
	None PrimitiveProbablyVisibleTime; // 0x968(0x04)
	None MaxOcclusionPixelsFraction; // 0x96c(0x04)
	None bPauseOnLossOfFocus; // 0x970(0x01)
	None MaxParticleResize; // 0x974(0x04)
	None MaxParticleResizeWarn; // 0x978(0x04)
	None PendingDroppedNotes; // 0x980(0x10)
	None NetClientTicksPerSecond; // 0x990(0x04)
	None DisplayGamma; // 0x994(0x04)
	None MinDesiredFrameRate; // 0x998(0x04)
	None DefaultSelectedMaterialColor; // 0x99c(0x10)
	None SelectedMaterialColor; // 0x9ac(0x10)
	None SelectionOutlineColor; // 0x9bc(0x10)
	None SubduedSelectionOutlineColor; // 0x9cc(0x10)
	None SelectedMaterialColorOverride; // 0x9dc(0x10)
	None bIsOverridingSelectedColor; // 0x9ec(0x01)
	None bEnableOnScreenDebugMessages; // 0x9f0(0x01)
	None bEnableOnScreenDebugMessagesDisplay; // 0x9f0(0x01)
	None bSuppressMapWarnings; // 0x9f0(0x01)
	None bDisableAILogging; // 0x9f0(0x01)
	None bEnableVisualLogRecordingOnStart; // 0x9f4(0x04)
	None ScreenSaverInhibitorSemaphore; // 0x9fc(0x04)
	None bLockReadOnlyLevels; // 0xa00(0x01)
	None ParticleEventManagerClassPath; // 0xa08(0x10)
	None SelectionHighlightIntensity; // 0xa18(0x04)
	None BSPSelectionHighlightIntensity; // 0xa1c(0x04)
	None SelectionHighlightIntensityBillboards; // 0xa20(0x04)
	None NetDriverDefinitions; // 0xc70(0x10)
	None ServerActors; // 0xc80(0x10)
	None RuntimeServerActors; // 0xc90(0x10)
	None NetErrorLogInterval; // 0xca0(0x04)
	None bStartedLoadMapMovie; // 0xca4(0x01)
	None NextWorldContextHandle; // 0xcc0(0x04)
	None MaxDeltaTime; // 0xe58(0x04)
	None ServerFlushLogInterval; // 0xe5c(0x04)
	None GameInstance; // 0xe60(0x08)
	None PlayerController; // 0x30(0x08)
	None CurrentNetSpeed; // 0x38(0x04)
	None ConfiguredInternetSpeed; // 0x3c(0x04)
	None ConfiguredLanSpeed; // 0x40(0x04)
	None Children; // 0x48(0x10)
	None Driver; // 0x58(0x08)
	None PackageMapClass; // 0x60(0x08)
	None PackageMap; // 0x68(0x08)
	None OpenChannels; // 0x70(0x10)
	None SentTemporaries; // 0x80(0x10)
	None ViewTarget; // 0x90(0x08)
	None OwningActor; // 0x98(0x08)
	None MaxPacket; // 0xa0(0x04)
	None InternalAck; // 0xa4(0x01)
	None PlayerId; // 0x160(0x28)
	None LastReceiveTime; // 0x1d0(0x08)
	None ChannelsToTick; // 0x1510(0x10)
	None ViewportClient; // 0x70(0x08)
	None AspectRatioAxisConstraint; // 0x94(0x01)
	None PendingLevelPlayerControllerClass; // 0x98(0x08)
	None bSentSplitJoin; // 0xa0(0x01)
	None ControllerId; // 0xb8(0x04)
	None FrameDelay; // 0x28(0x04)
	None NetConnectionClassName; // 0x30(0x10)
	None ReplicationDriverClassName; // 0x40(0x10)
	None MaxDownloadSize; // 0x50(0x04)
	None bClampListenServerTickRate; // 0x54(0x01)
	None NetServerMaxTickRate; // 0x58(0x04)
	None MaxNetTickRate; // 0x5c(0x04)
	None MaxInternetClientRate; // 0x60(0x04)
	None MaxClientRate; // 0x64(0x04)
	None ServerTravelPause; // 0x68(0x04)
	None SpawnPrioritySeconds; // 0x6c(0x04)
	None RelevantTimeout; // 0x70(0x04)
	None KeepAliveTime; // 0x74(0x04)
	None HandshakeTimeout; // 0x78(0x04)
	None InitialConnectTimeout; // 0x7c(0x04)
	None ConnectionTimeout; // 0x80(0x04)
	None TimeoutMultiplierForUnoptimizedBuilds; // 0x84(0x04)
	None bNoTimeouts; // 0x88(0x01)
	None bNeverApplyNetworkEmulationSettings; // 0x89(0x01)
	None ServerConnection; // 0x90(0x08)
	None ClientConnections; // 0x98(0x10)
	None RecentlyDisconnectedTrackingTime; // 0x108(0x04)
	None World; // 0x148(0x08)
	None WorldPackage; // 0x150(0x08)
	None NetConnectionClass; // 0x178(0x08)
	None ReplicationDriverClass; // 0x180(0x08)
	None NetDriverName; // 0x198(0x08)
	None ChannelDefinitions; // 0x1a0(0x10)
	None ChannelDefinitionMap; // 0x1b0(0x50)
	None ThrottleSpawnDefinitions; // 0x200(0x10)
	None ThrottleSpawnsRemaining; // 0x210(0x10)
	None ThrottleSpawnPausedFrameNumber; // 0x220(0x04)
	None ActorChannelPool; // 0x228(0x10)
	None Time; // 0x240(0x04)
	None ReplicationDriver; // 0x718(0x08)
	None bCanBeBaked; // 0x30(0x01)
	None bIsDirty; // 0x30(0x01)
	None bBakedDataSuccesfully; // 0x30(0x01)
	None bUseControllerRotationPitch; // 0x228(0x01)
	None bUseControllerRotationYaw; // 0x228(0x01)
	None bUseControllerRotationRoll; // 0x228(0x01)
	None bCanAffectNavigationGeneration; // 0x228(0x01)
	None BaseEyeHeight; // 0x22c(0x04)
	None AutoPossessPlayer; // 0x230(0x01)
	None AutoPossessAI; // 0x231(0x01)
	None RemoteViewPitch; // 0x232(0x01)
	None AIControllerClass; // 0x238(0x08)
	None PlayerState; // 0x240(0x08)
	None LastHitBy; // 0x250(0x08)
	None Controller; // 0x258(0x08)
	None ControlInputVector; // 0x264(0x0c)
	None LastControlInputVector; // 0x270(0x0c)
	None Mesh; // 0x280(0x08)
	None CharacterMovement; // 0x288(0x08)
	None CapsuleComponent; // 0x290(0x08)
	None BasedMovement; // 0x298(0x30)
	None ReplicatedBasedMovement; // 0x2c8(0x30)
	None AnimRootMotionTranslationScale; // 0x2f8(0x04)
	None BaseTranslationOffset; // 0x2fc(0x0c)
	None BaseRotationOffset; // 0x310(0x10)
	None ReplicatedServerLastTransformUpdateTimeStamp; // 0x320(0x04)
	None ReplayLastTransformUpdateTimeStamp; // 0x324(0x04)
	None ReplicatedMovementMode; // 0x328(0x01)
	None bInBaseReplication; // 0x329(0x01)
	None CrouchedEyeHeight; // 0x32c(0x04)
	None bIsCrouched; // 0x330(0x01)
	None bProxyIsJumpForceApplied; // 0x330(0x01)
	None bPressedJump; // 0x330(0x01)
	None bClientUpdating; // 0x330(0x01)
	None bClientWasFalling; // 0x330(0x01)
	None bClientResimulateRootMotion; // 0x330(0x01)
	None bClientResimulateRootMotionSources; // 0x330(0x01)
	None bSimGravityDisabled; // 0x330(0x01)
	None bClientCheckEncroachmentOnNetUpdate; // 0x331(0x01)
	None bServerMoveIgnoreRootMotion; // 0x331(0x01)
	None bWasJumping; // 0x331(0x01)
	None JumpKeyHoldTime; // 0x334(0x04)
	None JumpForceTimeRemaining; // 0x338(0x04)
	None ProxyJumpForceStartedTime; // 0x33c(0x04)
	None JumpMaxHoldTime; // 0x340(0x04)
	None JumpMaxCount; // 0x344(0x04)
	None JumpCurrentCount; // 0x348(0x04)
	None JumpCurrentCountPreJump; // 0x34c(0x04)
	None OnReachedJumpApex; // 0x358(0x10)
	None MovementModeChangedDelegate; // 0x378(0x10)
	None OnCharacterMovementUpdated; // 0x388(0x10)
	None SavedRootMotion; // 0x398(0x38)
	None ClientRootMotionParams; // 0x3d0(0x40)
	None RootMotionRepMoves; // 0x410(0x10)
	None RepRootMotion; // 0x420(0x98)
	None UpdatedComponent; // 0xb0(0x08)
	None UpdatedPrimitive; // 0xb8(0x08)
	None Velocity; // 0xc4(0x0c)
	None PlaneConstraintNormal; // 0xd0(0x0c)
	None PlaneConstraintOrigin; // 0xdc(0x0c)
	None bUpdateOnlyIfRendered; // 0xe8(0x01)
	None bAutoUpdateTickRegistration; // 0xe8(0x01)
	None bTickBeforeOwner; // 0xe8(0x01)
	None bAutoRegisterUpdatedComponent; // 0xe8(0x01)
	None bConstrainToPlane; // 0xe8(0x01)
	None bSnapToPlaneAtStart; // 0xe8(0x01)
	None bAutoRegisterPhysicsVolumeUpdates; // 0xe8(0x01)
	None bComponentShouldUpdatePhysicsVolume; // 0xe8(0x01)
	None PlaneConstraintAxisSetting; // 0xeb(0x01)
	None NavAgentProps; // 0xf0(0x30)
	None FixedPathBrakingDistance; // 0x120(0x04)
	None bUpdateNavAgentWithOwnersCollision; // 0x124(0x01)
	None bUseAccelerationForPaths; // 0x124(0x01)
	None bUseFixedBrakingDistanceForPaths; // 0x124(0x01)
	None MovementState; // 0x125(0x01)
	None PathFollowingComp; // 0x128(0x08)
	None PawnOwner; // 0x130(0x08)
	None CharacterOwner; // 0x148(0x08)
	None GravityScale; // 0x150(0x04)
	None MaxStepHeight; // 0x154(0x04)
	None JumpZVelocity; // 0x158(0x04)
	None JumpOffJumpZFactor; // 0x15c(0x04)
	None WalkableFloorAngle; // 0x160(0x04)
	None WalkableFloorZ; // 0x164(0x04)
	None MovementMode; // 0x168(0x01)
	None CustomMovementMode; // 0x169(0x01)
	None NetworkSmoothingMode; // 0x16a(0x01)
	None GroundFriction; // 0x16c(0x04)
	None MaxWalkSpeed; // 0x18c(0x04)
	None MaxWalkSpeedCrouched; // 0x190(0x04)
	None MaxSwimSpeed; // 0x194(0x04)
	None MaxFlySpeed; // 0x198(0x04)
	None MaxCustomMovementSpeed; // 0x19c(0x04)
	None MaxAcceleration; // 0x1a0(0x04)
	None MinAnalogWalkSpeed; // 0x1a4(0x04)
	None BrakingFrictionFactor; // 0x1a8(0x04)
	None BrakingFriction; // 0x1ac(0x04)
	None BrakingSubStepTime; // 0x1b0(0x04)
	None BrakingDecelerationWalking; // 0x1b4(0x04)
	None BrakingDecelerationFalling; // 0x1b8(0x04)
	None BrakingDecelerationSwimming; // 0x1bc(0x04)
	None BrakingDecelerationFlying; // 0x1c0(0x04)
	None AirControl; // 0x1c4(0x04)
	None AirControlBoostMultiplier; // 0x1c8(0x04)
	None AirControlBoostVelocityThreshold; // 0x1cc(0x04)
	None FallingLateralFriction; // 0x1d0(0x04)
	None CrouchedHalfHeight; // 0x1d4(0x04)
	None Buoyancy; // 0x1d8(0x04)
	None PerchRadiusThreshold; // 0x1dc(0x04)
	None PerchAdditionalHeight; // 0x1e0(0x04)
	None RotationRate; // 0x1e4(0x0c)
	None bUseSeparateBrakingFriction; // 0x1f0(0x01)
	None bApplyGravityWhileJumping; // 0x1f0(0x01)
	None bUseControllerDesiredRotation; // 0x1f0(0x01)
	None bOrientRotationToMovement; // 0x1f0(0x01)
	None bSweepWhileNavWalking; // 0x1f0(0x01)
	None bMovementInProgress; // 0x1f0(0x01)
	None bEnableScopedMovementUpdates; // 0x1f0(0x01)
	None bEnableServerDualMoveScopedMovementUpdates; // 0x1f1(0x01)
	None bForceMaxAccel; // 0x1f1(0x01)
	None bRunPhysicsWithNoController; // 0x1f1(0x01)
	None bForceNextFloorCheck; // 0x1f1(0x01)
	None bShrinkProxyCapsule; // 0x1f1(0x01)
	None bCanWalkOffLedges; // 0x1f1(0x01)
	None bCanWalkOffLedgesWhenCrouching; // 0x1f1(0x01)
	None bNetworkSkipProxyPredictionOnNetUpdate; // 0x1f2(0x01)
	None bNetworkAlwaysReplicateTransformUpdateTimestamp; // 0x1f2(0x01)
	None bDeferUpdateMoveComponent; // 0x1f2(0x01)
	None bPreventMeshDoubleMode; // 0x1f2(0x01)
	None bEnablePhysicsInteraction; // 0x1f2(0x01)
	None bTouchForceScaledToMass; // 0x1f2(0x01)
	None bPushForceScaledToMass; // 0x1f2(0x01)
	None bPushForceUsingZOffset; // 0x1f3(0x01)
	None bScalePushForceToVelocity; // 0x1f3(0x01)
	None DeferredUpdatedMoveComponent; // 0x1f8(0x08)
	None MaxOutOfWaterStepHeight; // 0x200(0x04)
	None OutofWaterZ; // 0x204(0x04)
	None Mass; // 0x208(0x04)
	None StandingDownwardForceScale; // 0x20c(0x04)
	None InitialPushForceFactor; // 0x210(0x04)
	None PushForceFactor; // 0x214(0x04)
	None PushForcePointZOffsetFactor; // 0x218(0x04)
	None TouchForceFactor; // 0x21c(0x04)
	None MinTouchForce; // 0x220(0x04)
	None MaxTouchForce; // 0x224(0x04)
	None RepulsionForce; // 0x228(0x04)
	None Acceleration; // 0x22c(0x0c)
	None LastUpdateRotation; // 0x240(0x10)
	None LastUpdateLocation; // 0x250(0x0c)
	None LastUpdateVelocity; // 0x25c(0x0c)
	None bHasQueuedServerMove; // 0x268(0x01)
	None QueuedServerLocation; // 0x26c(0x0c)
	None QueuedServerRotation; // 0x280(0x10)
	None ParallelUpdateMoveMode; // 0x298(0x01)
	None ParallelUpdateTransform; // 0x2a0(0x30)
	None ServerLastTransformUpdateTimeStamp; // 0x2d0(0x04)
	None ServerLastClientGoodMoveAckTime; // 0x2d4(0x04)
	None ServerLastClientAdjustmentTime; // 0x2d8(0x04)
	None PendingImpulseToApply; // 0x2dc(0x0c)
	None PendingForceToApply; // 0x2e8(0x0c)
	None AnalogInputModifier; // 0x2f4(0x04)
	None MaxSimulationTimeStep; // 0x304(0x04)
	None MaxSimulationIterations; // 0x308(0x04)
	None MaxJumpApexAttemptsPerSimulation; // 0x30c(0x04)
	None MaxDepenetrationWithGeometry; // 0x310(0x04)
	None MaxDepenetrationWithGeometryAsProxy; // 0x314(0x04)
	None MaxDepenetrationWithPawn; // 0x318(0x04)
	None MaxDepenetrationWithPawnAsProxy; // 0x31c(0x04)
	None NetworkSimulatedSmoothLocationTime; // 0x320(0x04)
	None NetworkSimulatedSmoothRotationTime; // 0x324(0x04)
	None ListenServerNetworkSimulatedSmoothLocationTime; // 0x328(0x04)
	None ListenServerNetworkSimulatedSmoothRotationTime; // 0x32c(0x04)
	None NetProxyShrinkRadius; // 0x330(0x04)
	None NetProxyShrinkHalfHeight; // 0x334(0x04)
	None NetworkMaxSmoothUpdateDistance; // 0x338(0x04)
	None NetworkNoSmoothUpdateDistance; // 0x33c(0x04)
	None NetworkMinTimeBetweenClientAckGoodMoves; // 0x340(0x04)
	None NetworkMinTimeBetweenClientAdjustments; // 0x344(0x04)
	None NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x348(0x04)
	None NetworkLargeClientCorrectionDistance; // 0x34c(0x04)
	None LedgeCheckThreshold; // 0x350(0x04)
	None JumpOutOfWaterPitch; // 0x354(0x04)
	None CurrentFloor; // 0x358(0x94)
	None DefaultLandMovementMode; // 0x3ec(0x01)
	None DefaultWaterMovementMode; // 0x3ed(0x01)
	None GroundMovementMode; // 0x3ee(0x01)
	None bMaintainHorizontalGroundVelocity; // 0x3ef(0x01)
	None bImpartBaseVelocityX; // 0x3ef(0x01)
	None bImpartBaseVelocityY; // 0x3ef(0x01)
	None bImpartBaseVelocityZ; // 0x3ef(0x01)
	None bImpartBaseAngularVelocity; // 0x3ef(0x01)
	None bJustTeleported; // 0x3ef(0x01)
	None bNetworkUpdateReceived; // 0x3ef(0x01)
	None bNetworkMovementModeChanged; // 0x3ef(0x01)
	None bIgnoreClientMovementErrorChecksAndCorrection; // 0x3f0(0x01)
	None bServerAcceptClientAuthoritativePosition; // 0x3f0(0x01)
	None bNotifyApex; // 0x3f0(0x01)
	None bCheatFlying; // 0x3f0(0x01)
	None bWantsToCrouch; // 0x3f0(0x01)
	None bCrouchMaintainsBaseLocation; // 0x3f0(0x01)
	None bIgnoreBaseRotation; // 0x3f0(0x01)
	None bFastAttachedMove; // 0x3f0(0x01)
	None bAlwaysCheckFloor; // 0x3f1(0x01)
	None bUseFlatBaseForFloorChecks; // 0x3f1(0x01)
	None bPerformingJumpOff; // 0x3f1(0x01)
	None bWantsToLeaveNavWalking; // 0x3f1(0x01)
	None bUseRVOAvoidance; // 0x3f1(0x01)
	None bRequestedMoveUseAcceleration; // 0x3f1(0x01)
	None bWasSimulatingRootMotion; // 0x3f1(0x01)
	None bAllowPhysicsRotationDuringAnimRootMotion; // 0x3f2(0x01)
	None bHasRequestedVelocity; // 0x3f2(0x01)
	None bRequestedMoveWithMaxSpeed; // 0x3f2(0x01)
	None bWasAvoidanceUpdated; // 0x3f2(0x01)
	None bProjectNavMeshWalking; // 0x3f2(0x01)
	None bProjectNavMeshOnBothWorldChannels; // 0x3f2(0x01)
	None AvoidanceConsiderationRadius; // 0x408(0x04)
	None RequestedVelocity; // 0x40c(0x0c)
	None AvoidanceUID; // 0x418(0x04)
	None AvoidanceGroup; // 0x41c(0x04)
	None GroupsToAvoid; // 0x420(0x04)
	None GroupsToIgnore; // 0x424(0x04)
	None AvoidanceWeight; // 0x428(0x04)
	None PendingLaunchVelocity; // 0x42c(0x0c)
	None NavMeshProjectionInterval; // 0x4d8(0x04)
	None NavMeshProjectionTimer; // 0x4dc(0x04)
	None NavMeshProjectionInterpSpeed; // 0x4e0(0x04)
	None NavMeshProjectionHeightScaleUp; // 0x4e4(0x04)
	None NavMeshProjectionHeightScaleDown; // 0x4e8(0x04)
	None NavWalkingFloorDistTolerance; // 0x4ec(0x04)
	None PostPhysicsTickFunction; // 0x4f0(0x30)
	None MinTimeBetweenTimeStampResets; // 0x538(0x04)
	None CurrentRootMotion; // 0x540(0x38)
	None RootMotionParams; // 0x610(0x40)
	None AnimRootMotionVelocity; // 0x650(0x0c)
	None LocalPlayers; // 0x38(0x10)
	None OnlineSession; // 0x48(0x08)
	None ReferencedObjects; // 0x50(0x10)
	None OptionsString; // 0x220(0x10)
	None GameSessionClass; // 0x230(0x08)
	None GameStateClass; // 0x238(0x08)
	None PlayerControllerClass; // 0x240(0x08)
	None PlayerStateClass; // 0x248(0x08)
	None HUDClass; // 0x250(0x08)
	None DefaultPawnClass; // 0x258(0x08)
	None SpectatorClass; // 0x260(0x08)
	None ReplaySpectatorPlayerControllerClass; // 0x268(0x08)
	None ServerStatReplicatorClass; // 0x270(0x08)
	None GameSession; // 0x278(0x08)
	None GameState; // 0x280(0x08)
	None ServerStatReplicator; // 0x288(0x08)
	None DefaultPlayerName; // 0x290(0x18)
	None bUseSeamlessTravel; // 0x2a8(0x01)
	None bStartPlayersAsSpectators; // 0x2a8(0x01)
	None bPauseable; // 0x2a8(0x01)
	None MatchState; // 0x2c0(0x08)
	None bDelayedStart; // 0x2c8(0x01)
	None NumSpectators; // 0x2cc(0x04)
	None NumPlayers; // 0x2d0(0x04)
	None NumBots; // 0x2d4(0x04)
	None MinRespawnDelay; // 0x2d8(0x04)
	None NumTravellingPlayers; // 0x2dc(0x04)
	None EngineMessageClass; // 0x2e0(0x08)
	None InactivePlayerArray; // 0x2e8(0x10)
	None InactivePlayerStateLifeSpan; // 0x2f8(0x04)
	None MaxInactivePlayers; // 0x2fc(0x04)
	None bHandleDedicatedServerReplays; // 0x300(0x01)
	None GameModeClass; // 0x220(0x08)
	None AuthorityGameMode; // 0x228(0x08)
	None SpectatorClass; // 0x230(0x08)
	None PlayerArray; // 0x238(0x10)
	None bReplicatedHasBegunPlay; // 0x248(0x01)
	None ReplicatedWorldTimeSeconds; // 0x24c(0x04)
	None ServerWorldTimeSecondsDelta; // 0x250(0x04)
	None ServerWorldTimeSecondsUpdateFrequency; // 0x254(0x04)
	None MatchState; // 0x270(0x08)
	None PreviousMatchState; // 0x278(0x08)
	None ElapsedTime; // 0x280(0x04)
	None PlayerState; // 0x228(0x08)
	None OnInstigatedAnyDamage; // 0x238(0x10)
	None StateName; // 0x248(0x08)
	None Pawn; // 0x250(0x08)
	None Character; // 0x260(0x08)
	None TransformComponent; // 0x268(0x08)
	None ControlRotation; // 0x288(0x0c)
	None bAttachToPawn; // 0x294(0x01)
	None Player; // 0x298(0x08)
	None AcknowledgedPawn; // 0x2a0(0x08)
	None ControllingDirTrackInst; // 0x2a8(0x08)
	None MyHud; // 0x2b0(0x08)
	None PlayerCameraManager; // 0x2b8(0x08)
	None PlayerCameraManagerClass; // 0x2c0(0x08)
	None bAutoManageActiveCameraTarget; // 0x2c8(0x01)
	None TargetViewRotation; // 0x2cc(0x0c)
	None SmoothTargetViewRotationSpeed; // 0x2e4(0x04)
	None HiddenActors; // 0x2f0(0x10)
	None HiddenPrimitiveComponents; // 0x300(0x10)
	None LastSpectatorStateSynchTime; // 0x314(0x04)
	None LastSpectatorSyncLocation; // 0x318(0x0c)
	None LastSpectatorSyncRotation; // 0x324(0x0c)
	None ClientCap; // 0x330(0x04)
	None CheatManager; // 0x338(0x08)
	None CheatClass; // 0x340(0x08)
	None PlayerInputClass; // 0x348(0x08)
	None PlayerInput; // 0x350(0x08)
	None ActiveForceFeedbackEffects; // 0x358(0x10)
	None bPlayerIsWaiting; // 0x3d8(0x01)
	None NetPlayerIndex; // 0x3dc(0x01)
	None PendingSwapConnection; // 0x418(0x08)
	None NetConnection; // 0x420(0x08)
	None InputYawScale; // 0x440(0x04)
	None InputPitchScale; // 0x444(0x04)
	None InputRollScale; // 0x448(0x04)
	None bShowMouseCursor; // 0x44c(0x01)
	None bEnableClickEvents; // 0x44c(0x01)
	None bEnableTouchEvents; // 0x44c(0x01)
	None bEnableMouseOverEvents; // 0x44c(0x01)
	None bEnableTouchOverEvents; // 0x44c(0x01)
	None bForceFeedbackEnabled; // 0x44c(0x01)
	None ForceFeedbackScale; // 0x450(0x04)
	None ClickEventKeys; // 0x458(0x10)
	None DefaultMouseCursor; // 0x468(0x01)
	None CurrentMouseCursor; // 0x469(0x01)
	None DefaultClickTraceChannel; // 0x46a(0x01)
	None CurrentClickTraceChannel; // 0x46b(0x01)
	None HitResultTraceDistance; // 0x46c(0x04)
	None SeamlessTravelCount; // 0x470(0x02)
	None LastCompletedSeamlessTravelCount; // 0x472(0x02)
	None InactiveStateInputComponent; // 0x4e8(0x08)
	None bShouldPerformFullTickWhenPaused; // 0x4f0(0x01)
	None CurrentTouchInterface; // 0x508(0x08)
	None SpectatorPawn; // 0x560(0x08)
	None bIsLocalPlayerController; // 0x56c(0x01)
	None SpawnLocation; // 0x570(0x0c)
	None DebugExecBindings; // 0x120(0x10)
	None InvertedAxis; // 0x160(0x10)
	None TouchRegionStates; // 0x12a0(0x10)
	None CachedKeyToActionInfo; // 0x120(0x10)
	None Score; // 0x220(0x04)
	None PlayerId; // 0x224(0x04)
	None Ping; // 0x228(0x01)
	None bShouldUpdateReplicatedPing; // 0x22a(0x01)
	None bIsSpectator; // 0x22a(0x01)
	None bOnlySpectator; // 0x22a(0x01)
	None bIsABot; // 0x22a(0x01)
	None bIsInactive; // 0x22a(0x01)
	None bFromPreviousLevel; // 0x22a(0x01)
	None StartTime; // 0x22c(0x04)
	None EngineMessageClass; // 0x230(0x08)
	None SavedNetworkAddress; // 0x240(0x10)
	None UniqueId; // 0x250(0x28)
	None PawnPrivate; // 0x280(0x08)
	None PlayerNamePrivate; // 0x300(0x10)
	None ViewportConsole; // 0x40(0x08)
	None DebugProperties; // 0x48(0x10)
	None MaxSplitscreenPlayers; // 0x68(0x04)
	None World; // 0x78(0x08)
	None GameInstance; // 0x80(0x08)
	None ConsoleTargetPlayer; // 0x38(0x08)
	None DefaultTexture_Black; // 0x40(0x08)
	None DefaultTexture_White; // 0x48(0x08)
	None HistoryBuffer; // 0x68(0x10)
	None DefaultHeight; // 0x130(0x04)
	None VisibilityCellSize; // 0x228(0x04)
	None VisibilityAggressiveness; // 0x22c(0x01)
	None bPrecomputeVisibility; // 0x22d(0x01)
	None bPlaceCellsOnlyAlongCameraTracks; // 0x22d(0x01)
	None bEnableWorldBoundsChecks; // 0x22d(0x01)
	None bEnableNavigationSystem; // 0x22d(0x01)
	None bEnableAISystem; // 0x22d(0x01)
	None bEnableWorldComposition; // 0x22d(0x01)
	None bUseClientSideLevelStreamingVolumes; // 0x22d(0x01)
	None bEnableWorldOriginRebasing; // 0x22d(0x01)
	None bWorldGravitySet; // 0x22e(0x01)
	None bGlobalGravitySet; // 0x22e(0x01)
	None bMinimizeBSPSections; // 0x22e(0x01)
	None bForceNoPrecomputedLighting; // 0x22e(0x01)
	None bHighPriorityLoading; // 0x22e(0x01)
	None bHighPriorityLoadingLocal; // 0x22e(0x01)
	None bOverrideDefaultBroadphaseSettings; // 0x22e(0x01)
	None NavigationSystemConfig; // 0x230(0x08)
	None NavigationSystemConfigOverride; // 0x238(0x08)
	None WorldToMeters; // 0x240(0x04)
	None KillZ; // 0x244(0x04)
	None KillZDamageType; // 0x248(0x08)
	None WorldGravityZ; // 0x250(0x04)
	None GlobalGravityZ; // 0x254(0x04)
	None DefaultPhysicsVolumeClass; // 0x258(0x08)
	None PhysicsCollisionHandlerClass; // 0x260(0x08)
	None DefaultGameMode; // 0x268(0x08)
	None GameNetworkManagerClass; // 0x270(0x08)
	None PackedLightAndShadowMapTextureSize; // 0x278(0x04)
	None DefaultColorScale; // 0x27c(0x0c)
	None DefaultMaxDistanceFieldOcclusionDistance; // 0x288(0x04)
	None GlobalDistanceFieldViewDistance; // 0x28c(0x04)
	None DynamicIndirectShadowsSelfShadowingIntensity; // 0x290(0x04)
	None DefaultReverbSettings; // 0x298(0x20)
	None DefaultAmbientZoneSettings; // 0x2b8(0x24)
	None MonoCullingDistance; // 0x2dc(0x04)
	None DefaultBaseSoundMix; // 0x2e0(0x08)
	None TimeDilation; // 0x2e8(0x04)
	None MatineeTimeDilation; // 0x2ec(0x04)
	None DemoPlayTimeDilation; // 0x2f0(0x04)
	None MinGlobalTimeDilation; // 0x2f4(0x04)
	None MaxGlobalTimeDilation; // 0x2f8(0x04)
	None MinUndilatedFrameTime; // 0x2fc(0x04)
	None MaxUndilatedFrameTime; // 0x300(0x04)
	None BroadphaseSettings; // 0x304(0x40)
	None Pauser; // 0x348(0x08)
	None ReplicationViewers; // 0x350(0x10)
	None AssetUserData; // 0x360(0x10)
	None PauserPlayerState; // 0x370(0x08)
	None MaxNumberOfBookmarks; // 0x378(0x04)
	None DefaultBookmarkClass; // 0x380(0x08)
	None BookmarkArray; // 0x388(0x10)
	None LastBookmarkClass; // 0x398(0x08)
	None NativeClass; // 0x28(0x08)
	None ObjectReferenceList; // 0x2c0(0x10)
	None bIsGlobalAsyncScanEnvironment; // 0x2d0(0x01)
	None bShouldGuessTypeAndName; // 0x2d1(0x01)
	None bShouldUseSynchronousLoad; // 0x2d2(0x01)
	None bIsLoadingFromPakFiles; // 0x2d3(0x01)
	None bShouldAcquireMissingChunksOnLoad; // 0x2d4(0x01)
	None bOnlyCookProductionAssets; // 0x2d5(0x01)
	None bIsBulkScanning; // 0x2d6(0x01)
	None bIsPrimaryAssetDirectoryCurrent; // 0x2d7(0x01)
	None bIsManagementDatabaseCurrent; // 0x2d8(0x01)
	None bUpdateManagementDatabaseAfterScan; // 0x2d9(0x01)
	None bIncludeOnlyOnDiskAssets; // 0x2da(0x01)
	None NumberOfSpawnedNotifications; // 0x2dc(0x04)
	None bForceUseAllBundlesDuringLoadRecursive; // 0x3d0(0x01)
	None PlayerOwner; // 0x220(0x08)
	None bLostFocusPaused; // 0x228(0x01)
	None bShowHUD; // 0x228(0x01)
	None bShowDebugInfo; // 0x228(0x01)
	None CurrentTargetIndex; // 0x22c(0x04)
	None bShowHitBoxDebugInfo; // 0x230(0x01)
	None bShowOverlays; // 0x230(0x01)
	None bEnableDebugTextShadow; // 0x230(0x01)
	None PostRenderedActors; // 0x238(0x10)
	None DebugDisplay; // 0x250(0x10)
	None ToggledDebugCategories; // 0x260(0x10)
	None Canvas; // 0x270(0x08)
	None DebugCanvas; // 0x278(0x08)
	None DebugTextList; // 0x280(0x10)
	None ShowDebugTargetDesiredClass; // 0x290(0x08)
	None ShowDebugTargetActor; // 0x298(0x08)
	None BrushType; // 0x220(0x01)
	None BrushColor; // 0x224(0x04)
	None PolyFlags; // 0x228(0x04)
	None bColored; // 0x22c(0x01)
	None bSolidWhenSelected; // 0x22c(0x01)
	None bPlaceableFromClassBrowser; // 0x22c(0x01)
	None bNotForClientOrServer; // 0x22c(0x01)
	None Brush; // 0x230(0x08)
	None BrushComponent; // 0x238(0x08)
	None bInManipulation; // 0x240(0x01)
	None SavedSelections; // 0x248(0x10)
	None PersistentLevel; // 0x30(0x08)
	None NetDriver; // 0x38(0x08)
	None LineBatcher; // 0x40(0x08)
	None PersistentLineBatcher; // 0x48(0x08)
	None ForegroundLineBatcher; // 0x50(0x08)
	None NetworkManager; // 0x58(0x08)
	None PhysicsCollisionHandler; // 0x60(0x08)
	None ExtraReferencedObjects; // 0x68(0x10)
	None PerModuleDataObjects; // 0x78(0x10)
	None LevelSequenceActors; // 0x88(0x10)
	None StreamingLevels; // 0x98(0x10)
	None StreamingLevelsToConsider; // 0xa8(0x28)
	None StreamingLevelsPrefix; // 0xd0(0x10)
	None CurrentLevelPendingVisibility; // 0xe0(0x08)
	None CurrentLevelPendingInvisibility; // 0xe8(0x08)
	None DemoNetDriver; // 0xf0(0x08)
	None MyParticleEventManager; // 0xf8(0x08)
	None DefaultPhysicsVolume; // 0x100(0x08)
	None bAreConstraintsDirty; // 0x11e(0x01)
	None NavigationSystem; // 0x120(0x08)
	None AuthorityGameMode; // 0x128(0x08)
	None GameState; // 0x130(0x08)
	None AISystem; // 0x138(0x08)
	None AvoidanceManager; // 0x140(0x08)
	None Levels; // 0x148(0x10)
	None LevelCollections; // 0x158(0x10)
	None OwningGameInstance; // 0x188(0x08)
	None ParameterCollectionInstances; // 0x190(0x10)
	None CanvasForRenderingToTarget; // 0x1a0(0x08)
	None CanvasForDrawMaterialToRenderTarget; // 0x1a8(0x08)
	None ComponentsThatNeedEndOfFrameUpdate; // 0x200(0x10)
	None ComponentsThatNeedEndOfFrameUpdate_OnGameThread; // 0x210(0x10)
	None WorldComposition; // 0x560(0x08)
	None PSCPool; // 0x5f0(0x58)
	None HirezObjectPool; // 0x710(0x68)
	None SubTracks; // 0x38(0x10)
	None TrackInstClass; // 0x48(0x08)
	None ActiveCondition; // 0x50(0x01)
	None TrackTitle; // 0x58(0x10)
	None bOnePerGroup; // 0x68(0x01)
	None bDirGroupOnly; // 0x68(0x01)
	None bDisableTrack; // 0x68(0x01)
	None bIsSelected; // 0x68(0x01)
	None bIsAnimControlTrack; // 0x68(0x01)
	None bSubTrackOnly; // 0x68(0x01)
	None bVisible; // 0x68(0x01)
	None bIsRecording; // 0x68(0x01)
	None VectorTrack; // 0x70(0x18)
	None CurveTension; // 0x88(0x04)
	None FloatTrack; // 0x70(0x18)
	None CurveTension; // 0x88(0x04)
	None AnimBlueprintGeneratedClass; // 0x670(0x08)
	None AnimClass; // 0x678(0x08)
	None AnimScriptInstance; // 0x680(0x08)
	None PostProcessAnimInstance; // 0x688(0x08)
	None AnimationData; // 0x690(0x18)
	None RootBoneTranslation; // 0x6b8(0x0c)
	None LineCheckBoundsScale; // 0x6c4(0x0c)
	None LinkedInstances; // 0x710(0x10)
	None CachedBoneSpaceTransforms; // 0x720(0x10)
	None CachedComponentSpaceTransforms; // 0x730(0x10)
	None GlobalAnimRateScale; // 0x760(0x04)
	None KinematicBonesUpdateType; // 0x764(0x01)
	None PhysicsTransformUpdateMode; // 0x765(0x01)
	None AnimationMode; // 0x767(0x01)
	None bDisablePostProcessBlueprint; // 0x769(0x01)
	None bUpdateOverlapsOnAnimationFinalize; // 0x769(0x01)
	None bHasValidBodies; // 0x769(0x01)
	None bBlendPhysics; // 0x769(0x01)
	None bEnablePhysicsOnDedicatedServer; // 0x769(0x01)
	None bUpdateJointsFromAnimation; // 0x76a(0x01)
	None bDisableClothSimulation; // 0x76a(0x01)
	None bDisableRigidBodyAnimNode; // 0x76a(0x01)
	None bAllowAnimCurveEvaluation; // 0x76a(0x01)
	None bDisableAnimCurves; // 0x76a(0x01)
	None bCollideWithEnvironment; // 0x76b(0x01)
	None bCollideWithAttachedChildren; // 0x76b(0x01)
	None bLocalSpaceSimulation; // 0x76b(0x01)
	None bResetAfterTeleport; // 0x76b(0x01)
	None bDeferKinematicBoneUpdate; // 0x76b(0x01)
	None bNoSkeletonUpdate; // 0x76b(0x01)
	None bPauseAnims; // 0x76b(0x01)
	None bUseRefPoseOnInitAnim; // 0x76c(0x01)
	None bEnablePerPolyCollision; // 0x76c(0x01)
	None bForceRefpose; // 0x76c(0x01)
	None bOnlyAllowAutonomousTickPose; // 0x76c(0x01)
	None bIsAutonomousTickPose; // 0x76c(0x01)
	None bOldForceRefPose; // 0x76c(0x01)
	None bShowPrePhysBones; // 0x76c(0x01)
	None bRequiredBonesUpToDate; // 0x76c(0x01)
	None bAnimTreeInitialised; // 0x76d(0x01)
	None bIncludeComponentLocationIntoBounds; // 0x76d(0x01)
	None bEnableLineCheckWithBounds; // 0x76d(0x01)
	None bUseBendingElements; // 0x76d(0x01)
	None bUseTetrahedralConstraints; // 0x76d(0x01)
	None bUseThinShellVolumeConstraints; // 0x76d(0x01)
	None bUseSelfCollisions; // 0x76d(0x01)
	None bUseContinuousCollisionDetection; // 0x76d(0x01)
	None bPropagateCurvesToSlaves; // 0x76e(0x01)
	None bSkipKinematicUpdateWhenInterpolating; // 0x76e(0x01)
	None bSkipBoundsUpdateWhenInterpolating; // 0x76e(0x01)
	None bNeedsQueuedAnimEventsDispatched; // 0x76e(0x01)
	None CachedAnimCurveUidVersion; // 0x770(0x02)
	None MassMode; // 0x772(0x01)
	None UniformMass; // 0x774(0x04)
	None TotalMass; // 0x778(0x04)
	None Density; // 0x77c(0x04)
	None MinPerParticleMass; // 0x780(0x04)
	None ClothBlendWeight; // 0x784(0x04)
	None EdgeStiffness; // 0x788(0x04)
	None BendingStiffness; // 0x78c(0x04)
	None AreaStiffness; // 0x790(0x04)
	None VolumeStiffness; // 0x794(0x04)
	None StrainLimitingStiffness; // 0x798(0x04)
	None ShapeTargetStiffness; // 0x79c(0x04)
	None DisallowedAnimCurves; // 0x7a0(0x10)
	None BodySetup; // 0x7b0(0x08)
	None OnConstraintBroken; // 0x7c0(0x10)
	None ClothingSimulationFactory; // 0x7d0(0x08)
	None TeleportDistanceThreshold; // 0x8a8(0x04)
	None TeleportRotationThreshold; // 0x8ac(0x04)
	None LastPoseTickFrame; // 0x8b8(0x04)
	None bDelayedAnimTaskValid; // 0x8c8(0x01)
	None bDisableDelayedAnimTask; // 0x8c9(0x01)
	None ClothingInteractor; // 0x920(0x08)
	None OnAnimInitialized; // 0xa50(0x10)
	None StaticMeshGuid; // 0x458(0x10)
	None ForcedLodModel; // 0x468(0x04)
	None PreviousLODLevel; // 0x46c(0x04)
	None MinLOD; // 0x470(0x04)
	None SubDivisionStepSize; // 0x474(0x04)
	None StaticMesh; // 0x478(0x08)
	None WireframeColorOverride; // 0x480(0x04)
	None bEvaluateWorldPositionOffset; // 0x484(0x01)
	None bOverrideWireframeColor; // 0x484(0x01)
	None bOverrideMinLod; // 0x484(0x01)
	None bOverrideNavigationExport; // 0x484(0x01)
	None bForceNavigationObstacle; // 0x484(0x01)
	None bDisallowMeshPaintPerInstance; // 0x484(0x01)
	None bIgnoreInstanceForTextureStreaming; // 0x484(0x01)
	None bOverrideLightMapRes; // 0x484(0x01)
	None bCastDistanceFieldIndirectShadow; // 0x485(0x01)
	None bOverrideDistanceFieldSelfShadowBias; // 0x485(0x01)
	None bUseSubDivisions; // 0x485(0x01)
	None bUseDefaultCollision; // 0x485(0x01)
	None bReverseCulling; // 0x485(0x01)
	None bHasReflectionCaptureOverrideLocation; // 0x485(0x01)
	None ReflectionCaptureOverrideLocation; // 0x488(0x0c)
	None OverriddenLightMapRes; // 0x494(0x04)
	None DistanceFieldIndirectShadowMinVisibility; // 0x498(0x04)
	None DistanceFieldSelfShadowBias; // 0x49c(0x04)
	None StreamingDistanceMultiplier; // 0x4a0(0x04)
	None LODData; // 0x4a8(0x10)
	None StreamingTextureData; // 0x4b8(0x10)
	None LightmassSettings; // 0x4c8(0x1c)
	None PSTemplate; // 0x38(0x08)
	None LocationOffset; // 0x40(0x0c)
	None RotationOffset; // 0x4c(0x0c)
	None Scale; // 0x58(0x0c)
	None Attached; // 0x80(0x01)
	None SocketName; // 0x84(0x08)
	None CurrentSkeleton; // 0x28(0x08)
	None RootMotionMode; // 0x30(0x01)
	None bUseMultiThreadedAnimationUpdate; // 0x31(0x01)
	None bUsingCopyPoseFromMesh; // 0x31(0x01)
	None bReceiveNotifiesFromLinkedInstances; // 0x31(0x01)
	None bPropagateNotifiesToLinkedInstances; // 0x31(0x01)
	None bQueueMontageEvents; // 0x31(0x01)
	None OnMontageBlendingOut; // 0x38(0x10)
	None OnMontageStarted; // 0x48(0x10)
	None OnMontageEnded; // 0x58(0x10)
	None OnAllMontageInstancesEnded; // 0x68(0x10)
	None NotifyQueue; // 0x100(0x70)
	None ActiveAnimNotifyState; // 0x170(0x10)
	None SubAnimInstanceWeight; // 0x180(0x04)
	None DecalMaterial; // 0x208(0x08)
	None SortOrder; // 0x210(0x04)
	None FadeScreenSize; // 0x214(0x04)
	None FadeStartDelay; // 0x218(0x04)
	None FadeDuration; // 0x21c(0x04)
	None FadeInDuration; // 0x220(0x04)
	None FadeInStartDelay; // 0x224(0x04)
	None bDestroyOwnerAfterFade; // 0x228(0x01)
	None DecalSize; // 0x22c(0x0c)
	None MaxPoolSize; // 0x28(0x04)
	None HelpDescription; // 0x28(0x10)
	None HelpUsage; // 0x38(0x10)
	None HelpWebLink; // 0x48(0x10)
	None HelpParamNames; // 0x58(0x10)
	None HelpParamDescriptions; // 0x68(0x10)
	None IsServer; // 0x78(0x01)
	None IsClient; // 0x78(0x01)
	None IsEditor; // 0x78(0x01)
	None LogToConsole; // 0x78(0x01)
	None ShowErrorCount; // 0x78(0x01)
	None ShowProgress; // 0x78(0x01)
	None Description; // 0x28(0x10)
	None Sound; // 0x208(0x08)
	None InstanceParameters; // 0x210(0x10)
	None SoundClassOverride; // 0x220(0x08)
	None bAutoDestroy; // 0x228(0x01)
	None bStopWhenOwnerDestroyed; // 0x228(0x01)
	None bShouldRemainActiveIfDropped; // 0x228(0x01)
	None bAllowSpatialization; // 0x228(0x01)
	None bOverrideAttenuation; // 0x228(0x01)
	None bOverrideSubtitlePriority; // 0x228(0x01)
	None bIsUISound; // 0x228(0x01)
	None bEnableLowPassFilter; // 0x228(0x01)
	None bOverridePriority; // 0x229(0x01)
	None bSuppressSubtitles; // 0x229(0x01)
	None bAutoManageAttachment; // 0x22a(0x01)
	None AudioComponentUserID; // 0x230(0x08)
	None PitchModulationMin; // 0x238(0x04)
	None PitchModulationMax; // 0x23c(0x04)
	None VolumeModulationMin; // 0x240(0x04)
	None VolumeModulationMax; // 0x244(0x04)
	None VolumeMultiplier; // 0x248(0x04)
	None EnvelopeFollowerAttackTime; // 0x24c(0x04)
	None EnvelopeFollowerReleaseTime; // 0x250(0x04)
	None Priority; // 0x254(0x04)
	None SubtitlePriority; // 0x258(0x04)
	None SourceEffectChain; // 0x260(0x08)
	None PitchMultiplier; // 0x268(0x04)
	None LowPassFilterFrequency; // 0x26c(0x04)
	None AttenuationSettings; // 0x278(0x08)
	None AttenuationOverrides; // 0x280(0x3a0)
	None ConcurrencySettings; // 0x620(0x08)
	None ConcurrencySet; // 0x628(0x50)
	None AutoAttachLocationRule; // 0x684(0x01)
	None AutoAttachRotationRule; // 0x685(0x01)
	None AutoAttachScaleRule; // 0x686(0x01)
	None OnAudioFinished; // 0x688(0x10)
	None OnAudioPlaybackPercent; // 0x6b0(0x10)
	None OnAudioSingleEnvelopeValue; // 0x6d8(0x10)
	None OnAudioMultiEnvelopeValue; // 0x700(0x10)
	None Modulation; // 0x728(0x10)
	None OnQueueSubtitles; // 0x738(0x10)
	None AutoAttachParent; // 0x748(0x08)
	None AutoAttachSocketName; // 0x750(0x08)
	None ShapeBodySetup; // 0x430(0x08)
	None AreaClass; // 0x438(0x08)
	None ShapeColor; // 0x440(0x04)
	None bDrawOnlyIfSelected; // 0x444(0x01)
	None bShouldCollideWhenPlacing; // 0x444(0x01)
	None bDynamicObstacle; // 0x444(0x01)
	None SphereRadius; // 0x448(0x04)
	None PSTemplate; // 0x30(0x08)
	None FirstSocketName; // 0x38(0x08)
	None SecondSocketName; // 0x40(0x08)
	None WidthScaleMode; // 0x48(0x01)
	None WidthScaleCurve; // 0x4c(0x08)
	None bRecycleSpawnedSystems; // 0x54(0x01)
	None bDebug; // 0x28(0x01)
	None bExclusive; // 0x28(0x01)
	None Priority; // 0x2c(0x01)
	None CameraOwner; // 0x30(0x08)
	None AlphaInTime; // 0x38(0x04)
	None AlphaOutTime; // 0x3c(0x04)
	None Alpha; // 0x40(0x04)
	None bSingleInstance; // 0x28(0x01)
	None OscillationDuration; // 0x2c(0x04)
	None OscillationBlendInTime; // 0x30(0x04)
	None OscillationBlendOutTime; // 0x34(0x04)
	None RotOscillation; // 0x38(0x24)
	None LocOscillation; // 0x5c(0x24)
	None FOVOscillation; // 0x80(0x0c)
	None AnimPlayRate; // 0x8c(0x04)
	None AnimScale; // 0x90(0x04)
	None AnimBlendInTime; // 0x94(0x04)
	None AnimBlendOutTime; // 0x98(0x04)
	None RandomAnimSegmentDuration; // 0x9c(0x04)
	None Anim; // 0xa0(0x08)
	None bRandomAnimSegment; // 0xa8(0x01)
	None CameraOwner; // 0xc0(0x08)
	None ShakeScale; // 0x148(0x04)
	None OscillatorTimeRemaining; // 0x14c(0x04)
	None AnimInst; // 0x150(0x08)
	None CapsuleHalfHeight; // 0x448(0x04)
	None CapsuleRadius; // 0x44c(0x04)
	None bCausedByWorld; // 0x28(0x01)
	None bScaleMomentumByMass; // 0x28(0x01)
	None bRadialDamageVelChange; // 0x28(0x01)
	None DamageImpulse; // 0x2c(0x04)
	None DestructibleImpulse; // 0x30(0x04)
	None DestructibleDamageSpreadScale; // 0x34(0x04)
	None DamageFalloff; // 0x38(0x04)
	None TerminalVelocity; // 0x258(0x04)
	None Priority; // 0x25c(0x04)
	None FluidFriction; // 0x260(0x04)
	None bWaterVolume; // 0x264(0x01)
	None bPhysicsOnContact; // 0x264(0x01)
	None bUseVSync; // 0x28(0x01)
	None bUseDynamicResolution; // 0x29(0x01)
	None ResolutionSizeX; // 0x80(0x04)
	None ResolutionSizeY; // 0x84(0x04)
	None LastUserConfirmedResolutionSizeX; // 0x88(0x04)
	None LastUserConfirmedResolutionSizeY; // 0x8c(0x04)
	None WindowPosX; // 0x90(0x04)
	None WindowPosY; // 0x94(0x04)
	None FullscreenMode; // 0x98(0x04)
	None LastConfirmedFullscreenMode; // 0x9c(0x04)
	None PreferredFullscreenMode; // 0xa0(0x04)
	None Version; // 0xa4(0x04)
	None AudioQualityLevel; // 0xa8(0x04)
	None LastConfirmedAudioQualityLevel; // 0xac(0x04)
	None FrameRateLimit; // 0xb0(0x04)
	None DesiredScreenWidth; // 0xb8(0x04)
	None bUseDesiredScreenHeight; // 0xbc(0x01)
	None DesiredScreenHeight; // 0xc0(0x04)
	None LastUserConfirmedDesiredScreenWidth; // 0xc4(0x04)
	None LastUserConfirmedDesiredScreenHeight; // 0xc8(0x04)
	None LastRecommendedScreenWidth; // 0xcc(0x04)
	None LastRecommendedScreenHeight; // 0xd0(0x04)
	None LastCPUBenchmarkResult; // 0xd4(0x04)
	None LastGPUBenchmarkResult; // 0xd8(0x04)
	None LastCPUBenchmarkSteps; // 0xe0(0x10)
	None LastGPUBenchmarkSteps; // 0xf0(0x10)
	None LastGPUBenchmarkMultiplier; // 0x100(0x04)
	None bUseHDRDisplayOutput; // 0x104(0x01)
	None HDRDisplayOutputNits; // 0x108(0x04)
	None OnGameUserSettingsUINeedsUpdate; // 0x110(0x10)
	None RowStruct; // 0x28(0x08)
	None bStripFromClientBuilds; // 0x80(0x01)
	None bIgnoreExtraFields; // 0x80(0x01)
	None bIgnoreMissingFields; // 0x80(0x01)
	None ImportKeyField; // 0x88(0x10)
	None AutoActivateForPlayer; // 0x220(0x01)
	None CameraComponent; // 0x228(0x08)
	None SceneComponent; // 0x230(0x08)
	None bConstrainAspectRatio; // 0x240(0x01)
	None AspectRatio; // 0x244(0x04)
	None FOVAngle; // 0x248(0x04)
	None PostProcessBlendWeight; // 0x24c(0x04)
	None PostProcessSettings; // 0x250(0x550)
	None Rules; // 0x30(0x0c)
	None bLabelAssetsInMyDirectory; // 0x3c(0x01)
	None bIsRuntimeLabel; // 0x3c(0x01)
	None ExplicitAssets; // 0x40(0x10)
	None ExplicitBlueprints; // 0x50(0x10)
	None AssetCollection; // 0x60(0x08)
	None CapsuleComponent; // 0x228(0x08)
	None GoodSprite; // 0x230(0x08)
	None BadSprite; // 0x238(0x08)
	None bIsPIEPlayerStart; // 0x240(0x01)
	None bSpawnModule; // 0x28(0x01)
	None bUpdateModule; // 0x28(0x01)
	None bFinalUpdateModule; // 0x28(0x01)
	None bUpdateForGPUEmitter; // 0x28(0x01)
	None bCurvesAsColor; // 0x28(0x01)
	None b3DDrawMode; // 0x28(0x01)
	None bSupported3DDrawMode; // 0x28(0x01)
	None bEnabled; // 0x28(0x01)
	None bEditable; // 0x29(0x01)
	None LODDuplicate; // 0x29(0x01)
	None bSupportsRandomSeed; // 0x29(0x01)
	None bRequiresLoopingNotification; // 0x29(0x01)
	None LODValidity; // 0x2a(0x01)
	None SourceType; // 0x30(0x01)
	None UniversalOffset; // 0x34(0x0c)
	None bUpdatePositionEachFrame; // 0x40(0x01)
	None bOrientMeshEmitters; // 0x40(0x01)
	None bInheritBoneVelocity; // 0x40(0x01)
	None InheritVelocityScale; // 0x44(0x04)
	None SkelMeshActorParamName; // 0x48(0x08)
	None ValidAssociatedBones; // 0x50(0x10)
	None bEnforceNormalCheck; // 0x60(0x01)
	None NormalToCompare; // 0x64(0x0c)
	None NormalCheckToleranceDegrees; // 0x70(0x04)
	None NormalCheckTolerance; // 0x74(0x04)
	None ValidMaterialIndices; // 0x78(0x10)
	None bInheritVertexColor; // 0x88(0x01)
	None bInheritUV; // 0x88(0x01)
	None InheritUVChannel; // 0x8c(0x04)
	None PCOwner; // 0x220(0x08)
	None TransformComponent; // 0x228(0x08)
	None DefaultFOV; // 0x238(0x04)
	None DefaultOrthoWidth; // 0x240(0x04)
	None DefaultAspectRatio; // 0x248(0x04)
	None CameraCache; // 0x290(0x5f0)
	None LastFrameCameraCache; // 0x880(0x5f0)
	None ViewTarget; // 0xe70(0x600)
	None PendingViewTarget; // 0x1470(0x600)
	None CameraCachePrivate; // 0x1aa0(0x5f0)
	None LastFrameCameraCachePrivate; // 0x2090(0x5f0)
	None ModifierList; // 0x2680(0x10)
	None DefaultModifiers; // 0x2690(0x10)
	None FreeCamDistance; // 0x26a0(0x04)
	None FreeCamOffset; // 0x26a4(0x0c)
	None ViewTargetOffset; // 0x26b0(0x0c)
	None CameraLensEffects; // 0x26d0(0x10)
	None CachedCameraShakeMod; // 0x26e0(0x08)
	None AnimInstPool; // 0x26e8(0x40)
	None PostProcessBlendCache; // 0x2728(0x10)
	None ActiveAnims; // 0x2748(0x10)
	None FreeAnims; // 0x2758(0x10)
	None AnimCameraActor; // 0x2768(0x08)
	None bIsOrthographic; // 0x2770(0x01)
	None bDefaultConstrainAspectRatio; // 0x2770(0x01)
	None bClientSimulatingViewTarget; // 0x2770(0x01)
	None bUseClientSideCameraUpdates; // 0x2770(0x01)
	None bGameCameraCutThisFrame; // 0x2771(0x01)
	None bForceLocalSpaceForInterpolatedRendering; // 0x2771(0x01)
	None ViewPitchMin; // 0x2774(0x04)
	None ViewPitchMax; // 0x2778(0x04)
	None ViewYawMin; // 0x277c(0x04)
	None ViewYawMax; // 0x2780(0x04)
	None ViewRollMin; // 0x2784(0x04)
	None ViewRollMax; // 0x2788(0x04)
	None ServerUpdateCameraTimeout; // 0x2790(0x04)
	None PlayerStartTag; // 0x248(0x08)
	None InitialSpeed; // 0xf0(0x04)
	None MaxSpeed; // 0xf4(0x04)
	None bRotationFollowsVelocity; // 0xf8(0x01)
	None bRotationRemainsVertical; // 0xf8(0x01)
	None bShouldBounce; // 0xf8(0x01)
	None bInitialVelocityInLocalSpace; // 0xf8(0x01)
	None bForceSubStepping; // 0xf8(0x01)
	None bSimulationEnabled; // 0xf8(0x01)
	None bSweepCollision; // 0xf8(0x01)
	None bIsHomingProjectile; // 0xf8(0x01)
	None bBounceAngleAffectsFriction; // 0xf9(0x01)
	None bIsSliding; // 0xf9(0x01)
	None bInterpMovement; // 0xf9(0x01)
	None bInterpRotation; // 0xf9(0x01)
	None PreviousHitTime; // 0xfc(0x04)
	None PreviousHitNormal; // 0x100(0x0c)
	None ProjectileGravityScale; // 0x10c(0x04)
	None Buoyancy; // 0x110(0x04)
	None Bounciness; // 0x114(0x04)
	None Friction; // 0x118(0x04)
	None BounceVelocityStopSimulatingThreshold; // 0x11c(0x04)
	None MinFrictionFraction; // 0x120(0x04)
	None OnProjectileBounce; // 0x128(0x10)
	None OnProjectileStop; // 0x138(0x10)
	None HomingAccelerationMagnitude; // 0x148(0x04)
	None HomingTargetComponent; // 0x14c(0x08)
	None MaxSimulationTimeStep; // 0x154(0x04)
	None MaxSimulationIterations; // 0x158(0x04)
	None BounceAdditionalIterations; // 0x15c(0x04)
	None InterpLocationTime; // 0x160(0x04)
	None InterpRotationTime; // 0x164(0x04)
	None InterpLocationMaxLagDistance; // 0x168(0x04)
	None InterpLocationSnapToTargetDistance; // 0x16c(0x04)
	None BaseTurnRate; // 0x280(0x04)
	None BaseLookUpRate; // 0x284(0x04)
	None MovementComponent; // 0x288(0x08)
	None CollisionComponent; // 0x290(0x08)
	None MeshComponent; // 0x298(0x08)
	None bAddDefaultMovementBindings; // 0x2a0(0x01)
	None Text; // 0x430(0x18)
	None TextMaterial; // 0x448(0x08)
	None Font; // 0x450(0x08)
	None HorizontalAlignment; // 0x458(0x01)
	None VerticalAlignment; // 0x459(0x01)
	None TextRenderColor; // 0x45c(0x04)
	None XScale; // 0x460(0x04)
	None YScale; // 0x464(0x04)
	None WorldSize; // 0x468(0x04)
	None InvDefaultSize; // 0x46c(0x04)
	None HorizSpacingAdjust; // 0x470(0x04)
	None VertSpacingAdjust; // 0x474(0x04)
	None bAlwaysRenderAsText; // 0x478(0x01)
	None TargetArmLength; // 0x208(0x04)
	None SocketOffset; // 0x20c(0x0c)
	None TargetOffset; // 0x218(0x0c)
	None ProbeSize; // 0x224(0x04)
	None ProbeChannel; // 0x228(0x01)
	None bDoCollisionTest; // 0x22c(0x01)
	None bUsePawnControlRotation; // 0x22c(0x01)
	None bInheritPitch; // 0x22c(0x01)
	None bInheritYaw; // 0x22c(0x01)
	None bInheritRoll; // 0x22c(0x01)
	None bEnableCameraLag; // 0x22c(0x01)
	None bEnableCameraRotationLag; // 0x22c(0x01)
	None bUseCameraLagSubstepping; // 0x22c(0x01)
	None bDrawDebugLagMarkers; // 0x22d(0x01)
	None CameraLagSpeed; // 0x230(0x04)
	None CameraRotationLagSpeed; // 0x234(0x04)
	None CameraLagMaxTimeStep; // 0x238(0x04)
	None CameraLagMaxDistance; // 0x23c(0x04)
	None Template; // 0x430(0x08)
	None EmitterMaterials; // 0x438(0x10)
	None SkelMeshComponents; // 0x448(0x10)
	None bRenderAfterDLSS; // 0x459(0x01)
	None bResetOnDetach; // 0x459(0x01)
	None bUpdateOnDedicatedServer; // 0x459(0x01)
	None bAllowRecycling; // 0x459(0x01)
	None bAutoManageAttachment; // 0x459(0x01)
	None bAutoAttachWeldSimulatedBodies; // 0x459(0x01)
	None bWarmingUp; // 0x45a(0x01)
	None bOverrideLODMethod; // 0x45a(0x01)
	None bSkipUpdateDynamicDataDuringTick; // 0x45a(0x01)
	None LODMethod; // 0x465(0x01)
	None RequiredSignificance; // 0x466(0x01)
	None InstanceParameters; // 0x468(0x10)
	None OnParticleSpawn; // 0x478(0x10)
	None OnParticleBurst; // 0x488(0x10)
	None OnParticleDeath; // 0x498(0x10)
	None OnParticleCollide; // 0x4a8(0x10)
	None OnParticleCollidePacked; // 0x4b8(0x10)
	None m_ParticleChannels; // 0x4c8(0x04)
	None bOldPositionValid; // 0x4cc(0x01)
	None OldPosition; // 0x4d0(0x0c)
	None PartSysVelocity; // 0x4dc(0x0c)
	None WarmupTime; // 0x4e8(0x04)
	None WarmupTickRate; // 0x4ec(0x04)
	None SecondsBeforeInactive; // 0x4f4(0x04)
	None MaxTimeBeforeForceUpdateTransform; // 0x4fc(0x04)
	None ReplayClips; // 0x520(0x10)
	None CustomTimeDilation; // 0x538(0x04)
	None AutoAttachParent; // 0x590(0x08)
	None AutoAttachSocketName; // 0x598(0x08)
	None AutoAttachLocationRule; // 0x5a0(0x01)
	None AutoAttachRotationRule; // 0x5a1(0x01)
	None AutoAttachScaleRule; // 0x5a2(0x01)
	None OnSystemFinished; // 0x5d0(0x10)
	None LightComponent; // 0x220(0x08)
	None bEnabled; // 0x228(0x01)
	None LightingGuid; // 0x48(0x10)
	None LODBias; // 0x58(0x04)
	None CompressionSettings; // 0x5c(0x01)
	None Filter; // 0x5d(0x01)
	None MipLoadOptions; // 0x5e(0x01)
	None LODGroup; // 0x5f(0x01)
	None SRGB; // 0x60(0x01)
	None bNoTiling; // 0x60(0x01)
	None VirtualTextureStreaming; // 0x60(0x01)
	None CompressionYCoCg; // 0x60(0x01)
	None bAsyncResourceReleaseHasBeenStarted; // 0x60(0x01)
	None AssetUserData; // 0x68(0x10)
	None PerInstanceSMData; // 0x4e8(0x10)
	None NumCustomDataFloats; // 0x4f8(0x04)
	None PerInstanceSMCustomData; // 0x500(0x10)
	None InstancingRandomSeed; // 0x510(0x04)
	None InstanceStartCullDistance; // 0x514(0x04)
	None InstanceEndCullDistance; // 0x518(0x04)
	None InstanceReorderTable; // 0x520(0x10)
	None NumPendingLightmaps; // 0x578(0x04)
	None CachedMappings; // 0x580(0x10)
	None SortedInstances; // 0x5a0(0x10)
	None NumBuiltInstances; // 0x5b0(0x04)
	None BuiltInstanceBounds; // 0x5b8(0x1c)
	None UnbuiltInstanceBounds; // 0x5d4(0x1c)
	None UnbuiltInstanceBoundsList; // 0x5f0(0x10)
	None bEnableDensityScaling; // 0x600(0x01)
	None OcclusionLayerNumNodes; // 0x608(0x04)
	None CacheMeshExtendedBounds; // 0x60c(0x1c)
	None bDisableCollision; // 0x628(0x01)
	None InstanceCountToRender; // 0x62c(0x04)
	None StaticMeshComponent; // 0x220(0x08)
	None bStaticMeshReplicateMovement; // 0x228(0x01)
	None NavigationGeometryGatheringMode; // 0x229(0x01)
	None SubsurfaceProfile; // 0x38(0x08)
	None LightmassSettings; // 0x50(0x10)
	None TextureStreamingData; // 0x60(0x10)
	None AssetUserData; // 0x70(0x10)
	None PhysMaterial; // 0x88(0x08)
	None PhysicalMaterialMap; // 0x90(0x40)
	None Parent; // 0xd0(0x08)
	None bHasStaticPermutationResource; // 0xd8(0x01)
	None bOverrideSubsurfaceProfile; // 0xd8(0x01)
	None ScalarParameterValues; // 0xe0(0x10)
	None VectorParameterValues; // 0xf0(0x10)
	None TextureParameterValues; // 0x100(0x10)
	None RuntimeVirtualTextureParameterValues; // 0x110(0x10)
	None FontParameterValues; // 0x120(0x10)
	None BasePropertyOverrides; // 0x130(0x08)
	None StaticParameters; // 0x148(0x40)
	None CachedLayerParameters; // 0x188(0x1a0)
	None CachedReferencedTextures; // 0x328(0x10)
	None PhysMaterialMask; // 0x408(0x08)
	None Material; // 0x28(0x08)
	None Function; // 0x30(0x08)
	None bIsParameterExpression; // 0x38(0x01)
	None NumReplicatedProperties; // 0x230(0x04)
	None bHasNativizedParent; // 0x234(0x01)
	None bHasCookedComponentInstancingData; // 0x234(0x01)
	None DynamicBindingObjects; // 0x238(0x10)
	None ComponentTemplates; // 0x248(0x10)
	None Timelines; // 0x258(0x10)
	None ComponentClassOverrides; // 0x268(0x10)
	None SimpleConstructionScript; // 0x278(0x08)
	None InheritableComponentHandler; // 0x280(0x08)
	None UberGraphFramePointerProperty; // 0x288(0x08)
	None UberGraphFunction; // 0x298(0x08)
	None CookedComponentInstancingData; // 0x2a0(0x50)
	None FieldOfView; // 0x208(0x04)
	None OrthoWidth; // 0x20c(0x04)
	None OrthoNearClipPlane; // 0x210(0x04)
	None OrthoFarClipPlane; // 0x214(0x04)
	None AspectRatio; // 0x218(0x04)
	None MaxAspectRatio; // 0x21c(0x04)
	None bConstrainAspectRatio; // 0x220(0x01)
	None bUseFieldOfViewForLOD; // 0x220(0x01)
	None bLockToHmd; // 0x220(0x01)
	None bUsePawnControlRotation; // 0x220(0x01)
	None ProjectionMode; // 0x221(0x01)
	None PostProcessBlendWeight; // 0x260(0x04)
	None PostProcessSettings; // 0x290(0x550)
	None SoundClassObject; // 0x28(0x08)
	None bDebug; // 0x30(0x01)
	None bOverrideConcurrency; // 0x30(0x01)
	None bOutputToBusOnly; // 0x30(0x01)
	None bHasDelayNode; // 0x30(0x01)
	None bHasConcatenatorNode; // 0x30(0x01)
	None bBypassVolumeScaleForPriority; // 0x30(0x01)
	None VirtualizationMode; // 0x31(0x01)
	None ConcurrencySet; // 0x88(0x50)
	None ConcurrencyOverrides; // 0xd8(0x20)
	None Duration; // 0xf8(0x04)
	None MaxDistance; // 0xfc(0x04)
	None TotalSamples; // 0x100(0x04)
	None Priority; // 0x104(0x04)
	None AttenuationSettings; // 0x108(0x08)
	None Modulation; // 0x110(0x10)
	None SoundSubmixObject; // 0x120(0x08)
	None SoundSubmixSends; // 0x128(0x10)
	None SourceEffectChain; // 0x138(0x08)
	None BusSends; // 0x140(0x10)
	None PreEffectBusSends; // 0x150(0x10)
	None CompressionQuality; // 0x160(0x04)
	None StreamingPriority; // 0x164(0x04)
	None SampleRateQuality; // 0x168(0x01)
	None SoundGroup; // 0x16a(0x01)
	None bLooping; // 0x16b(0x01)
	None bStreaming; // 0x16b(0x01)
	None bSeekableStreaming; // 0x16b(0x01)
	None LoadingBehavior; // 0x16c(0x01)
	None bMature; // 0x16d(0x01)
	None bManualWordWrap; // 0x16d(0x01)
	None bSingleLine; // 0x16d(0x01)
	None bIsAmbisonics; // 0x16e(0x01)
	None FrequenciesToAnalyze; // 0x170(0x10)
	None CookedSpectralTimeData; // 0x180(0x10)
	None CookedEnvelopeTimeData; // 0x190(0x10)
	None InitialChunkSize; // 0x1a0(0x04)
	None SpokenText; // 0x1e8(0x10)
	None SubtitlePriority; // 0x1f8(0x04)
	None Volume; // 0x1fc(0x04)
	None Pitch; // 0x200(0x04)
	None NumChannels; // 0x204(0x04)
	None SampleRate; // 0x208(0x04)
	None Subtitles; // 0x218(0x10)
	None Curves; // 0x228(0x08)
	None InternalCurves; // 0x230(0x08)
	None SkeletonGeneratedClass; // 0x28(0x08)
	None GeneratedClass; // 0x30(0x08)
	None bLegacyNeedToPurgeSkelRefs; // 0x38(0x01)
	None BlueprintGuid; // 0x3c(0x10)
	None ParentClass; // 0x50(0x08)
	None BlueprintType; // 0x58(0x01)
	None bRecompileOnLoad; // 0x59(0x01)
	None bHasBeenRegenerated; // 0x59(0x01)
	None bIsRegeneratingOnLoad; // 0x59(0x01)
	None BlueprintSystemVersion; // 0x5c(0x04)
	None SimpleConstructionScript; // 0x60(0x08)
	None ComponentTemplates; // 0x68(0x10)
	None Timelines; // 0x78(0x10)
	None ComponentClassOverrides; // 0x88(0x10)
	None InheritableComponentHandler; // 0x98(0x08)
	None Connection; // 0x28(0x08)
	None Actor; // 0x70(0x08)
	None CreateSubObjects; // 0x168(0x10)
	None Skeleton; // 0x38(0x08)
	None MetaData; // 0x60(0x10)
	None AssetUserData; // 0x70(0x10)
	None bRotationBlendInMeshSpace; // 0x88(0x01)
	None AnimLength; // 0x8c(0x04)
	None InterpolationParam; // 0x90(0x18)
	None TargetWeightInterpolationSpeedPerSec; // 0xa8(0x04)
	None NotifyTriggerMode; // 0xac(0x01)
	None PerBoneBlend; // 0xb0(0x10)
	None SampleIndexWithMarkers; // 0xc0(0x04)
	None SampleData; // 0xc8(0x10)
	None GridSamples; // 0xd8(0x10)
	None BlendParameters; // 0xe8(0x60)
	None AxisToScaleAnimation; // 0x148(0x01)
	None bScaleAnimation; // 0x148(0x01)
	None AISystemClassName; // 0x28(0x18)
	None AISystemModuleName; // 0x40(0x08)
	None bInstantiateAISystemOnClient; // 0x50(0x01)
	None AudioComponent; // 0x220(0x08)
	None CompressCommandletVersion; // 0x38(0x04)
	None KeyEndEffectorsMatchNameArray; // 0x40(0x10)
	None ForceRecompression; // 0x50(0x01)
	None bOnlyCheckForMissingSkeletalMeshes; // 0x51(0x01)
	None bForceBelowThreshold; // 0x52(0x01)
	None bFirstRecompressUsingCurrentOrDefault; // 0x53(0x01)
	None bRaiseMaxErrorToExisting; // 0x54(0x01)
	None bEnablePerformanceLog; // 0x55(0x01)
	None bStripAnimationDataOnDedicatedServer; // 0x56(0x01)
	None bTickAnimationOnSkeletalMeshInit; // 0x57(0x01)
	None TargetSkeleton; // 0xa8(0x08)
	None Groups; // 0xb0(0x10)
	None bUseMultiThreadedAnimationUpdate; // 0xc0(0x01)
	None bWarnAboutBlueprintUsage; // 0xc1(0x01)
	None BakedStateMachines; // 0x330(0x10)
	None TargetSkeleton; // 0x340(0x08)
	None AnimNotifies; // 0x348(0x10)
	None OrderedSavedPoseIndicesMap; // 0x358(0x50)
	None SyncGroupNames; // 0x428(0x10)
	None EvaluateGraphExposedInputs; // 0x438(0x10)
	None GraphAssetPlayerInformation; // 0x448(0x50)
	None GraphBlendOptions; // 0x498(0x50)
	None Codecs; // 0x28(0x10)
	None BakedStateMachines; // 0x30(0x10)
	None TargetSkeleton; // 0x40(0x08)
	None AnimNotifies; // 0x48(0x10)
	None OrderedSavedPoseIndicesMap; // 0x58(0x50)
	None AnimBlueprintFunctions; // 0xa8(0x10)
	None AnimBlueprintFunctionData; // 0xb8(0x10)
	None AnimNodeProperties; // 0xc8(0x10)
	None LinkedAnimGraphNodeProperties; // 0xe8(0x10)
	None LinkedAnimLayerNodeProperties; // 0x108(0x10)
	None PreUpdateNodeProperties; // 0x128(0x10)
	None DynamicResetNodeProperties; // 0x148(0x10)
	None StateMachineNodeProperties; // 0x168(0x10)
	None InitializationNodeProperties; // 0x188(0x10)
	None GraphNameAssetPlayers; // 0x1a8(0x50)
	None SyncGroupNames; // 0x1f8(0x10)
	None EvaluateGraphExposedInputs; // 0x208(0x10)
	None GraphBlendOptions; // 0x218(0x50)
	None Notifies; // 0x80(0x10)
	None SequenceLength; // 0x90(0x04)
	None RateScale; // 0x94(0x04)
	None RawCurveData; // 0x98(0x10)
	None AnimationTrack; // 0xa8(0x10)
	None bNeedsSkeleton; // 0x38(0x01)
	None TranslationCompressionFormat; // 0x3c(0x01)
	None RotationCompressionFormat; // 0x3d(0x01)
	None ScaleCompressionFormat; // 0x3e(0x01)
	None MaxPosDiff; // 0x40(0x04)
	None MaxAngleDiff; // 0x44(0x04)
	None MaxScaleDiff; // 0x48(0x04)
	None MaxEffectorDiff; // 0x4c(0x04)
	None MinEffectorDiff; // 0x50(0x04)
	None EffectorDiffSocket; // 0x54(0x04)
	None ParentKeyScale; // 0x58(0x04)
	None bRetarget; // 0x5c(0x01)
	None bActuallyFilterLinearKeys; // 0x5c(0x01)
	None MaxZeroingThreshold; // 0x60(0x04)
	None MaxPosDiffBitwise; // 0x64(0x04)
	None MaxAngleDiffBitwise; // 0x68(0x04)
	None MaxScaleDiffBitwise; // 0x6c(0x04)
	None AllowedRotationFormats; // 0x70(0x10)
	None AllowedTranslationFormats; // 0x80(0x10)
	None AllowedScaleFormats; // 0x90(0x10)
	None bResampleAnimation; // 0xa0(0x01)
	None ResampledFramerate; // 0xa4(0x04)
	None MinKeysForResampling; // 0xa8(0x04)
	None bUseAdaptiveError; // 0xac(0x01)
	None bUseOverrideForEndEffectors; // 0xac(0x01)
	None TrackHeightBias; // 0xb0(0x04)
	None ParentingDivisor; // 0xb4(0x04)
	None ParentingDivisorExponent; // 0xb8(0x04)
	None bUseAdaptiveError2; // 0xbc(0x01)
	None RotationErrorSourceRatio; // 0xc0(0x04)
	None TranslationErrorSourceRatio; // 0xc4(0x04)
	None ScaleErrorSourceRatio; // 0xc8(0x04)
	None MaxErrorPerTrackRatio; // 0xcc(0x04)
	None PerturbationProbeSize; // 0xd0(0x04)
	None MinKeys; // 0x40(0x04)
	None bStartAtSecondKey; // 0x44(0x01)
	None MaxPosDiff; // 0x40(0x04)
	None MaxAngleDiff; // 0x44(0x04)
	None MaxScaleDiff; // 0x48(0x04)
	None Codec; // 0x28(0x08)
	None BlendIn; // 0xa8(0x30)
	None BlendInTime; // 0xd8(0x04)
	None BlendOut; // 0xe0(0x30)
	None BlendOutTime; // 0x110(0x04)
	None BlendOutTriggerTime; // 0x114(0x04)
	None SyncGroup; // 0x118(0x08)
	None SyncSlotIndex; // 0x120(0x04)
	None MarkerData; // 0x128(0x20)
	None CompositeSections; // 0x148(0x10)
	None SlotAnimTracks; // 0x158(0x10)
	None BranchingPoints; // 0x168(0x10)
	None bEnableRootMotionTranslation; // 0x178(0x01)
	None bEnableRootMotionRotation; // 0x179(0x01)
	None bEnableAutoBlendOut; // 0x17a(0x01)
	None RootMotionRootLock; // 0x17b(0x01)
	None BranchingPointMarkers; // 0x180(0x10)
	None BranchingPointStateNotifyIndices; // 0x190(0x10)
	None TimeStretchCurve; // 0x1a0(0x28)
	None TimeStretchCurveName; // 0x1c8(0x08)
	None Sound; // 0x38(0x08)
	None VolumeMultiplier; // 0x40(0x04)
	None PitchMultiplier; // 0x44(0x04)
	None bFollow; // 0x48(0x01)
	None AttachName; // 0x4c(0x08)
	None PSTemplate; // 0x30(0x08)
	None SocketName; // 0x38(0x08)
	None LocationOffset; // 0x40(0x0c)
	None RotationOffset; // 0x4c(0x0c)
	None bDestroyAtEnd; // 0x58(0x01)
	None NumFrames; // 0xa8(0x04)
	None TrackToSkeletonMapTable; // 0xb0(0x10)
	None BoneCompressionSettings; // 0xd0(0x08)
	None CurveCompressionSettings; // 0xd8(0x08)
	None AdditiveAnimType; // 0x150(0x01)
	None RefPoseType; // 0x151(0x01)
	None RefPoseSeq; // 0x158(0x08)
	None RefFrameIndex; // 0x160(0x04)
	None RetargetSource; // 0x164(0x08)
	None Interpolation; // 0x16c(0x01)
	None bEnableRootMotion; // 0x16d(0x01)
	None RootMotionRootLock; // 0x16e(0x01)
	None bForceRootLock; // 0x16f(0x01)
	None bUseNormalizedRootMotionScale; // 0x170(0x01)
	None bRootMotionSettingsCopiedFromMontage; // 0x171(0x01)
	None AuthoredSyncMarkers; // 0x178(0x10)
	None bAnimRotationOnly; // 0x28(0x01)
	None TrackBoneNames; // 0x30(0x10)
	None LinkupCache; // 0x40(0x10)
	None BoneUseAnimTranslation; // 0x50(0x10)
	None ForceUseMeshTranslation; // 0x60(0x10)
	None UseTranslationBoneNames; // 0x70(0x10)
	None ForceMeshTranslationBoneNames; // 0x80(0x10)
	None PreviewSkelMeshName; // 0x90(0x08)
	None BestRatioSkelMeshName; // 0x98(0x08)
	None CurrentAsset; // 0x268(0x08)
	None PostEvaluateAnimEvent; // 0x270(0x10)
	None NumFrames; // 0xa8(0x04)
	None Interpolation; // 0xac(0x01)
	None RetargetSource; // 0xb0(0x08)
	None BoneCompressionSettings; // 0xc8(0x08)
	None CurveCompressionSettings; // 0xd0(0x08)
	None bEnableRootMotion; // 0xd8(0x01)
	None RootMotionRootLock; // 0xd9(0x01)
	None bForceRootLock; // 0xda(0x01)
	None bUseNormalizedRootMotionScale; // 0xdb(0x01)
	None ApplicationWillDeactivateDelegate; // 0xb0(0x10)
	None ApplicationHasReactivatedDelegate; // 0xc0(0x10)
	None ApplicationWillEnterBackgroundDelegate; // 0xd0(0x10)
	None ApplicationHasEnteredForegroundDelegate; // 0xe0(0x10)
	None ApplicationWillTerminateDelegate; // 0xf0(0x10)
	None ApplicationShouldUnloadResourcesDelegate; // 0x100(0x10)
	None ApplicationReceivedStartupArgumentsDelegate; // 0x110(0x10)
	None OnTemperatureChangeDelegate; // 0x120(0x10)
	None OnLowPowerModeDelegate; // 0x130(0x10)
	None ArrowColor; // 0x430(0x04)
	None ArrowSize; // 0x434(0x04)
	None ScreenSize; // 0x438(0x04)
	None bIsScreenSizeScaled; // 0x43c(0x01)
	None bTreatAsASprite; // 0x43c(0x01)
	None Object; // 0x28(0x08)
	None Exporter; // 0x30(0x08)
	None Filename; // 0x38(0x10)
	None bSelected; // 0x48(0x01)
	None bReplaceIdentical; // 0x49(0x01)
	None bPrompt; // 0x4a(0x01)
	None bAutomated; // 0x4b(0x01)
	None bUseFileArchive; // 0x4c(0x01)
	None bWriteEmptyFiles; // 0x4d(0x01)
	None IgnoreObjectList; // 0x50(0x10)
	None Options; // 0x60(0x08)
	None Errors; // 0x68(0x10)
	None PrimaryAssetTypesToScan; // 0x38(0x10)
	None DirectoriesToExclude; // 0x48(0x10)
	None PrimaryAssetRules; // 0x58(0x10)
	None CustomPrimaryAssetRules; // 0x68(0x10)
	None bOnlyCookProductionAssets; // 0x78(0x01)
	None bShouldManagerDetermineTypeAndName; // 0x79(0x01)
	None bShouldGuessTypeAndNameInEditor; // 0x7a(0x01)
	None bShouldAcquireMissingChunksOnLoad; // 0x7b(0x01)
	None PrimaryAssetIdRedirects; // 0x80(0x10)
	None PrimaryAssetTypeRedirects; // 0x90(0x10)
	None AssetPathRedirects; // 0xa0(0x10)
	None MetaDataTagsForAssetRegistry; // 0xb0(0x50)
	None PrimaryAssetTypeWrangleWhitelist; // 0x100(0x10)
	None bForceUseAllBundlesDuringLoadRecursive; // 0x110(0x01)
	None MappedAssets; // 0x28(0x10)
	None Completed; // 0x30(0x10)
	None SaveGameObject; // 0x60(0x08)
	None Completed; // 0x78(0x10)
	None Completed; // 0x78(0x10)
	None Completed; // 0x78(0x10)
	None Completed; // 0x78(0x10)
	None Completed; // 0x78(0x10)
	None AtmosphericFogComponent; // 0x220(0x08)
	None SunMultiplier; // 0x208(0x04)
	None FogMultiplier; // 0x20c(0x04)
	None DensityMultiplier; // 0x210(0x04)
	None DensityOffset; // 0x214(0x04)
	None DistanceScale; // 0x218(0x04)
	None AltitudeScale; // 0x21c(0x04)
	None DistanceOffset; // 0x220(0x04)
	None GroundOffset; // 0x224(0x04)
	None StartDistance; // 0x228(0x04)
	None SunDiscScale; // 0x22c(0x04)
	None DefaultBrightness; // 0x230(0x04)
	None DefaultLightColor; // 0x234(0x04)
	None bDisableSunDisk; // 0x238(0x01)
	None bAtmosphereAffectsSunIlluminance; // 0x238(0x01)
	None bDisableGroundScattering; // 0x238(0x01)
	None PrecomputeParams; // 0x23c(0x2c)
	None TransmittanceTexture; // 0x268(0x08)
	None IrradianceTexture; // 0x270(0x08)
	None DefaultSoundClassName; // 0x38(0x18)
	None DefaultMediaSoundClassName; // 0x50(0x18)
	None DefaultSoundConcurrencyName; // 0x68(0x18)
	None DefaultBaseSoundMix; // 0x80(0x18)
	None VoiPSoundClass; // 0x98(0x18)
	None MasterSubmix; // 0xb0(0x18)
	None ReverbSubmix; // 0xc8(0x18)
	None EQSubmix; // 0xe0(0x18)
	None VoiPSampleRate; // 0xf8(0x04)
	None DefaultReverbSendLevel; // 0xfc(0x04)
	None MaximumConcurrentStreams; // 0x100(0x04)
	None GlobalMinPitchScale; // 0x104(0x04)
	None GlobalMaxPitchScale; // 0x108(0x04)
	None QualityLevels; // 0x110(0x10)
	None bAllowPlayWhenSilent; // 0x120(0x01)
	None bDisableMasterEQ; // 0x120(0x01)
	None bAllowCenterChannel3DPanning; // 0x120(0x01)
	None NumStoppingSources; // 0x124(0x04)
	None PanningMethod; // 0x128(0x01)
	None MonoChannelUpmixMethod; // 0x129(0x01)
	None DialogueFilenameFormat; // 0x130(0x10)
	None Priority; // 0x258(0x04)
	None bEnabled; // 0x25c(0x01)
	None Settings; // 0x260(0x20)
	None AmbientZoneSettings; // 0x280(0x24)
	None ActorsToPoll; // 0x38(0x10)
	None EngineTestModules; // 0x28(0x10)
	None EditorTestModules; // 0x38(0x10)
	None AutomationTestmap; // 0x48(0x18)
	None EditorPerformanceTestMaps; // 0x60(0x10)
	None AssetsToOpen; // 0x70(0x10)
	None BuildPromotionTest; // 0x80(0x1f0)
	None MaterialEditorPromotionTest; // 0x270(0x30)
	None ParticleEditorPromotionTest; // 0x2a0(0x10)
	None BlueprintEditorPromotionTest; // 0x2b0(0x30)
	None TestLevelFolders; // 0x2e0(0x10)
	None ExternalTools; // 0x2f0(0x10)
	None ImportExportTestDefinitions; // 0x300(0x10)
	None LaunchOnSettings; // 0x310(0x10)
	None DefaultScreenshotResolution; // 0x320(0x08)
	None DefaultTimeToLive; // 0x30(0x04)
	None LockTimeAfterAvoid; // 0x34(0x04)
	None LockTimeAfterClean; // 0x38(0x04)
	None DeltaTimeToPredict; // 0x3c(0x04)
	None ArtificialRadiusExpansion; // 0x40(0x04)
	None TestHeightDifference; // 0x44(0x04)
	None HeightCheckMargin; // 0x48(0x04)
	None BandwidthGenerator; // 0x220(0x20)
	None Sprite; // 0x430(0x08)
	None bIsScreenSizeScaled; // 0x438(0x01)
	None ScreenSize; // 0x43c(0x04)
	None U; // 0x440(0x04)
	None UL; // 0x444(0x04)
	None V; // 0x448(0x04)
	None VL; // 0x44c(0x04)
	None BoneTree; // 0x38(0x10)
	None RefLocalPoses; // 0x48(0x10)
	None VirtualBoneGuid; // 0x170(0x10)
	None VirtualBones; // 0x180(0x10)
	None Sockets; // 0x190(0x10)
	None SmartNames; // 0x1f0(0x50)
	None BlendProfiles; // 0x270(0x10)
	None SlotGroups; // 0x280(0x10)
	None AssetUserData; // 0x358(0x10)
	None OwningSkeleton; // 0x30(0x08)
	None ProfileEntries; // 0x38(0x10)
	None ApplicationWillDeactivateDelegate; // 0x198(0x10)
	None ApplicationHasReactivatedDelegate; // 0x1a8(0x10)
	None ApplicationWillEnterBackgroundDelegate; // 0x1b8(0x10)
	None ApplicationHasEnteredForegroundDelegate; // 0x1c8(0x10)
	None ApplicationWillTerminateDelegate; // 0x1d8(0x10)
	None ApplicationShouldUnloadResourcesDelegate; // 0x1e8(0x10)
	None ApplicationReceivedStartupArgumentsDelegate; // 0x1f8(0x10)
	None ApplicationRegisteredForRemoteNotificationsDelegate; // 0x208(0x10)
	None ApplicationRegisteredForUserNotificationsDelegate; // 0x218(0x10)
	None ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x228(0x10)
	None ApplicationReceivedRemoteNotificationDelegate; // 0x238(0x10)
	None ApplicationReceivedLocalNotificationDelegate; // 0x248(0x10)
	None ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x258(0x10)
	None AggGeom; // 0x28(0x58)
	None BoneName; // 0x80(0x08)
	None PhysicsType; // 0x88(0x01)
	None bAlwaysFullAnimWeight; // 0x89(0x01)
	None bConsiderForBounds; // 0x89(0x01)
	None bMeshCollideAll; // 0x89(0x01)
	None bDoubleSidedGeometry; // 0x89(0x01)
	None bGenerateNonMirroredCollision; // 0x89(0x01)
	None bSharedCookedData; // 0x89(0x01)
	None bGenerateMirroredCollision; // 0x89(0x01)
	None bSupportUVsAndFaceRemap; // 0x89(0x01)
	None CollisionReponse; // 0x8b(0x01)
	None CollisionTraceFlag; // 0x8c(0x01)
	None PhysMaterial; // 0x90(0x08)
	None WalkableSlopeOverride; // 0x98(0x10)
	None DefaultInstance; // 0x120(0x110)
	None BuildScale3D; // 0x238(0x0c)
	None BlendPoses; // 0x28(0x10)
	None Location; // 0x28(0x0c)
	None Rotation; // 0x34(0x0c)
	None HiddenLevels; // 0x40(0x10)
	None Zoom2D; // 0x28(0x04)
	None Location; // 0x2c(0x08)
	None BoxExtent; // 0x448(0x0c)
	None LineThickness; // 0x454(0x04)
	None CaptureComponent; // 0x220(0x08)
	None CaptureOffsetComponent; // 0x208(0x08)
	None ReflectionSourceType; // 0x210(0x01)
	None Cubemap; // 0x218(0x08)
	None SourceCubemapAngle; // 0x220(0x04)
	None Brightness; // 0x224(0x04)
	None CaptureOffset; // 0x228(0x0c)
	None MapBuildDataId; // 0x234(0x10)
	None BoxTransitionDistance; // 0x280(0x04)
	None PreviewInfluenceBox; // 0x288(0x08)
	None PreviewCaptureBox; // 0x290(0x08)
	None bEnabled; // 0x28(0x01)
	None Node; // 0x30(0x08)
	None bStepOnce; // 0x38(0x01)
	None bStepOnce_WasPreviouslyDisabled; // 0x38(0x01)
	None bStepOnce_RemoveAfterHit; // 0x38(0x01)
	None BitmapFilename; // 0x28(0x10)
	None Tooltip; // 0x38(0x10)
	None NotifyBadParams; // 0x48(0x01)
	None Vertices; // 0x50(0x10)
	None Polys; // 0x60(0x10)
	None Layer; // 0x70(0x08)
	None MergeCoplanars; // 0x78(0x01)
	None Brush; // 0x430(0x08)
	None BrushBodySetup; // 0x438(0x08)
	None ButtonStyle; // 0x28(0x278)
	None CameraInterpGroup; // 0x28(0x08)
	None AnimLength; // 0x30(0x04)
	None BoundingBox; // 0x34(0x1c)
	None bRelativeToInitialTransform; // 0x50(0x01)
	None bRelativeToInitialFOV; // 0x50(0x01)
	None BaseFOV; // 0x54(0x04)
	None BasePostProcessSettings; // 0x60(0x550)
	None BasePostProcessBlendWeight; // 0x5b0(0x04)
	None CamAnim; // 0x28(0x08)
	None InterpGroupInst; // 0x30(0x08)
	None PlayRate; // 0x50(0x04)
	None MoveTrack; // 0x68(0x08)
	None MoveInst; // 0x70(0x08)
	None PlaySpace; // 0x78(0x01)
	None ActiveShakes; // 0x48(0x10)
	None ExpiredPooledShakesMap; // 0x58(0x50)
	None SplitScreenShakeScale; // 0xa8(0x04)
	None CameraShakeSourceComponent; // 0x220(0x08)
	None Attenuation; // 0x208(0x01)
	None InnerAttenuationRadius; // 0x20c(0x04)
	None OuterAttenuationRadius; // 0x210(0x04)
	None CameraShake; // 0x218(0x08)
	None bAutoPlay; // 0x220(0x01)
	None OrgX; // 0x28(0x04)
	None OrgY; // 0x2c(0x04)
	None ClipX; // 0x30(0x04)
	None ClipY; // 0x34(0x04)
	None DrawColor; // 0x38(0x04)
	None bCenterX; // 0x3c(0x01)
	None bCenterY; // 0x3c(0x01)
	None bNoSmooth; // 0x3c(0x01)
	None SizeX; // 0x40(0x04)
	None SizeY; // 0x44(0x04)
	None ColorModulate; // 0x50(0x10)
	None DefaultTexture; // 0x60(0x08)
	None GradientTexture0; // 0x68(0x08)
	None ReporterGraph; // 0x70(0x08)
	None TargetGamma; // 0xb8(0x04)
	None SizeX; // 0xc0(0x04)
	None SizeY; // 0xc4(0x04)
	None ClearColor; // 0xc8(0x10)
	None AddressX; // 0xd8(0x01)
	None AddressY; // 0xd9(0x01)
	None bForceLinearGamma; // 0xda(0x01)
	None bHDR; // 0xda(0x01)
	None bGPUSharedFlag; // 0xda(0x01)
	None RenderTargetFormat; // 0xdb(0x01)
	None bAutoGenerateMips; // 0xdc(0x01)
	None MipsSamplerFilter; // 0xdd(0x01)
	None MipsAddressU; // 0xde(0x01)
	None MipsAddressV; // 0xdf(0x01)
	None OverrideFormat; // 0xe0(0x01)
	None OnCanvasRenderTargetUpdate; // 0xe8(0x10)
	None World; // 0xf8(0x08)
	None bShouldClearRenderTargetOnReceiveUpdate; // 0x100(0x01)
	None Friction; // 0x28(0x04)
	None StaticFriction; // 0x2c(0x04)
	None Restitution; // 0x30(0x04)
	None LinearEtherDrag; // 0x34(0x04)
	None AngularEtherDrag; // 0x38(0x04)
	None SleepingLinearVelocityThreshold; // 0x3c(0x04)
	None SleepingAngularVelocityThreshold; // 0x40(0x04)
	None DebugCameraControllerRef; // 0x28(0x08)
	None DebugCameraControllerClass; // 0x30(0x08)
	None CheckBoxStyle; // 0x28(0x580)
	None ChildActorClass; // 0x208(0x08)
	None ChildActor; // 0x210(0x08)
	None ChildActorTemplate; // 0x218(0x08)
	None Parent; // 0x1a80(0x08)
	None AllDelegates; // 0x28(0x10)
	None LocalCloudFiles; // 0x38(0x10)
	None bSuppressDelegateCalls; // 0x48(0x01)
	None Profiles; // 0x38(0x10)
	None DefaultChannelResponses; // 0x48(0x10)
	None EditProfiles; // 0x58(0x10)
	None ProfileRedirects; // 0x68(0x10)
	None CollisionChannelRedirects; // 0x78(0x10)
	None ComponentDelegateBindings; // 0x28(0x10)
	None ParentTables; // 0xa0(0x10)
	None OldParentTables; // 0xb0(0x10)
	None ParentTables; // 0xc8(0x10)
	None OldParentTables; // 0xd8(0x10)
	None AsyncLoadingThreadEnabled; // 0x38(0x01)
	None WarnIfTimeLimitExceeded; // 0x38(0x01)
	None TimeLimitExceededMultiplier; // 0x3c(0x04)
	None TimeLimitExceededMinTime; // 0x40(0x04)
	None MinBulkDataSizeForAsyncLoading; // 0x44(0x04)
	None UseBackgroundLevelStreaming; // 0x48(0x01)
	None AsyncLoadingUseFullTimeLimit; // 0x48(0x01)
	None AsyncLoadingTimeLimit; // 0x4c(0x04)
	None PriorityAsyncLoadingExtraTime; // 0x50(0x04)
	None LevelStreamingActorsUpdateTimeLimit; // 0x54(0x04)
	None PriorityLevelStreamingActorsUpdateExtraTime; // 0x58(0x04)
	None LevelStreamingComponentsRegistrationGranularity; // 0x5c(0x04)
	None LevelStreamingUnregisterComponentsTimeLimit; // 0x60(0x04)
	None LevelStreamingComponentsUnregistrationGranularity; // 0x64(0x04)
	None FlushStreamingOnExit; // 0x68(0x01)
	None EventDrivenLoaderEnabled; // 0x68(0x01)
	None TimeBetweenPurgingPendingKillObjects; // 0x38(0x04)
	None FlushStreamingOnGC; // 0x3c(0x01)
	None AllowParallelGC; // 0x3c(0x01)
	None IncrementalBeginDestroyEnabled; // 0x3c(0x01)
	None MultithreadedDestructionEnabled; // 0x3c(0x01)
	None CreateGCClusters; // 0x3c(0x01)
	None AssetClusteringEnabled; // 0x3c(0x01)
	None ActorClusteringEnabled; // 0x3c(0x01)
	None BlueprintClusteringEnabled; // 0x3c(0x01)
	None UseDisregardForGCOnDedicatedServers; // 0x3d(0x01)
	None MinGCClusterSize; // 0x40(0x04)
	None NumRetriesBeforeForcingGC; // 0x44(0x04)
	None MaxObjectsNotConsideredByGC; // 0x48(0x04)
	None SizeOfPermanentObjectPool; // 0x4c(0x04)
	None MaxObjectsInGame; // 0x50(0x04)
	None MaxObjectsInEditor; // 0x54(0x04)
	None CullDistances; // 0x258(0x10)
	None bEnabled; // 0x268(0x01)
	None FloatCurve; // 0x30(0x80)
	None bIsEventCurve; // 0xb0(0x01)
	None FloatCurves; // 0x30(0x200)
	None AdjustHue; // 0x230(0x04)
	None AdjustSaturation; // 0x234(0x04)
	None AdjustBrightness; // 0x238(0x04)
	None AdjustBrightnessCurve; // 0x23c(0x04)
	None AdjustVibrance; // 0x240(0x04)
	None AdjustMinAlpha; // 0x244(0x04)
	None AdjustMaxAlpha; // 0x248(0x04)
	None LevelIndex; // 0xb8(0x04)
	None FirstResourceMemMip; // 0xbc(0x04)
	None bTemporarilyDisableStreaming; // 0xc0(0x01)
	None AddressX; // 0xc1(0x01)
	None AddressY; // 0xc2(0x01)
	None ImportedSize; // 0xc4(0x08)
	None TextureSize; // 0xe8(0x04)
	None GradientCurves; // 0xf0(0x10)
	None FloatCurves; // 0x30(0x180)
	None bShowSelectedInfo; // 0x588(0x01)
	None bIsFrozenRendering; // 0x588(0x01)
	None bIsOrbitingSelectedActor; // 0x588(0x01)
	None bOrbitPivotUseCenter; // 0x588(0x01)
	None bEnableBufferVisualization; // 0x588(0x01)
	None bEnableBufferVisualizationFullMode; // 0x588(0x01)
	None bIsBufferVisualizationInputSetup; // 0x588(0x01)
	None bLastDisplayEnabled; // 0x588(0x01)
	None DrawFrustum; // 0x590(0x08)
	None SelectedActor; // 0x598(0x08)
	None SelectedComponent; // 0x5a0(0x08)
	None SelectedHitPoint; // 0x5a8(0x88)
	None OriginalControllerRef; // 0x630(0x08)
	None OriginalPlayer; // 0x638(0x08)
	None SpeedScale; // 0x640(0x04)
	None InitialMaxSpeed; // 0x644(0x04)
	None InitialAccel; // 0x648(0x04)
	None InitialDecel; // 0x64c(0x04)
	None CycleViewModes; // 0x38(0x10)
	None Decal; // 0x220(0x08)
	None RollbackNetStartupActors; // 0x870(0x50)
	None CheckpointSaveMaxMSPerFrame; // 0xc84(0x04)
	None MulticastRecordOptions; // 0xcb8(0x10)
	None bIsLocalReplay; // 0xd18(0x01)
	None SpectatorControllers; // 0xd20(0x10)
	None NetDriver; // 0x30(0x08)
	None DemoNetDriver; // 0x38(0x08)
	None TextureLODGroups; // 0x28(0x10)
	None DeviceType; // 0x38(0x10)
	None BaseProfileName; // 0x48(0x10)
	None Parent; // 0x58(0x08)
	None CVars; // 0x78(0x10)
	None Profiles; // 0x28(0x10)
	None Gender; // 0x28(0x01)
	None Plurality; // 0x29(0x01)
	None LocalizationGUID; // 0x2c(0x10)
	None bMature; // 0x28(0x01)
	None bOverride_SubtitleOverride; // 0x28(0x01)
	None SpokenText; // 0x30(0x10)
	None SubtitleOverride; // 0x40(0x10)
	None ContextMappings; // 0x50(0x10)
	None LocalizationGUID; // 0x60(0x10)
	None LightComponent; // 0x220(0x08)
	None bEnabled; // 0x228(0x01)
	None LightGuid; // 0x208(0x10)
	None Brightness; // 0x218(0x04)
	None Intensity; // 0x21c(0x04)
	None LightColor; // 0x220(0x04)
	None bAffectsWorld; // 0x224(0x01)
	None CastShadows; // 0x224(0x01)
	None CastStaticShadows; // 0x224(0x01)
	None CastDynamicShadows; // 0x224(0x01)
	None bAffectTranslucentLighting; // 0x224(0x01)
	None bTransmission; // 0x224(0x01)
	None bCastVolumetricShadow; // 0x224(0x01)
	None bCastDeepShadow; // 0x224(0x01)
	None bCastRaytracedShadow; // 0x225(0x01)
	None bAffectReflection; // 0x225(0x01)
	None bAffectGlobalIllumination; // 0x225(0x01)
	None IndirectLightingIntensity; // 0x228(0x04)
	None VolumetricScatteringIntensity; // 0x22c(0x04)
	None SamplesPerPixel; // 0x230(0x04)
	None Temperature; // 0x238(0x04)
	None MaxDrawDistance; // 0x23c(0x04)
	None MaxDistanceFadeRange; // 0x240(0x04)
	None bUseTemperature; // 0x244(0x01)
	None ShadowMapChannel; // 0x248(0x04)
	None MinRoughness; // 0x250(0x04)
	None SpecularScale; // 0x254(0x04)
	None ShadowResolutionScale; // 0x258(0x04)
	None ShadowBias; // 0x25c(0x04)
	None ShadowSlopeBias; // 0x260(0x04)
	None ShadowSharpen; // 0x264(0x04)
	None ContactShadowLength; // 0x268(0x04)
	None ContactShadowLengthInWS; // 0x26c(0x01)
	None InverseSquaredFalloff; // 0x26c(0x01)
	None CastTranslucentShadows; // 0x26c(0x01)
	None bCastShadowsFromCinematicObjectsOnly; // 0x26c(0x01)
	None bAffectDynamicIndirectLighting; // 0x26c(0x01)
	None bForceCachedShadowsForMovablePrimitives; // 0x26c(0x01)
	None LightingChannels; // 0x270(0x01)
	None LightFunctionMaterial; // 0x278(0x08)
	None LightFunctionScale; // 0x280(0x0c)
	None IESTexture; // 0x290(0x08)
	None bUseIESBrightness; // 0x298(0x01)
	None IESBrightnessScale; // 0x29c(0x04)
	None LightFunctionFadeDistance; // 0x2a0(0x04)
	None DisabledBrightness; // 0x2a4(0x04)
	None bEnableLightShaftBloom; // 0x2a8(0x01)
	None BloomScale; // 0x2ac(0x04)
	None BloomThreshold; // 0x2b0(0x04)
	None BloomMaxBrightness; // 0x2b4(0x04)
	None BloomTint; // 0x2b8(0x04)
	None bUseRayTracedDistanceFieldShadows; // 0x2bc(0x01)
	None RayStartOffsetDepthScale; // 0x2c0(0x04)
	None ShadowCascadeBiasDistribution; // 0x338(0x04)
	None bEnableLightShaftOcclusion; // 0x33c(0x01)
	None OcclusionMaskDarkness; // 0x340(0x04)
	None OcclusionDepthRange; // 0x344(0x04)
	None LightShaftOverrideDirection; // 0x348(0x0c)
	None WholeSceneDynamicShadowRadius; // 0x354(0x04)
	None DynamicShadowDistanceMovableLight; // 0x358(0x04)
	None DynamicShadowDistanceStationaryLight; // 0x35c(0x04)
	None DynamicShadowCascades; // 0x360(0x04)
	None CascadeDistributionExponent; // 0x364(0x04)
	None CascadeTransitionFraction; // 0x368(0x04)
	None ShadowDistanceFadeoutFraction; // 0x36c(0x04)
	None bOnlyMovableObjectsInCascades; // 0x370(0x01)
	None bUseInsetShadowsForMovableObjects; // 0x370(0x01)
	None FarShadowCascadeCount; // 0x374(0x04)
	None FarShadowDistance; // 0x378(0x04)
	None DistanceFieldShadowDistance; // 0x37c(0x04)
	None LightSourceAngle; // 0x380(0x04)
	None LightSourceSoftAngle; // 0x384(0x04)
	None TraceDistance; // 0x388(0x04)
	None LightmassSettings; // 0x38c(0x10)
	None bCastModulatedShadows; // 0x39c(0x01)
	None ModulatedShadowColor; // 0x3a0(0x04)
	None ShadowAmount; // 0x3a4(0x04)
	None bUsedAsAtmosphereSunLight; // 0x3a8(0x01)
	None AtmosphereSunLightIndex; // 0x3ac(0x04)
	None bCanBeBaked; // 0x30(0x01)
	None bBakedDataSuccesfully; // 0x30(0x01)
	None Constant; // 0x38(0x04)
	None ConstantCurve; // 0x38(0x18)
	None ParameterName; // 0x40(0x08)
	None MinInput; // 0x48(0x04)
	None MaxInput; // 0x4c(0x04)
	None MinOutput; // 0x50(0x04)
	None MaxOutput; // 0x54(0x04)
	None ParamMode; // 0x58(0x01)
	None Min; // 0x38(0x04)
	None Max; // 0x3c(0x04)
	None ConstantCurve; // 0x38(0x18)
	None Constant; // 0x38(0x0c)
	None bLockAxes; // 0x44(0x01)
	None LockedAxes; // 0x48(0x01)
	None ConstantCurve; // 0x38(0x18)
	None bLockAxes; // 0x50(0x01)
	None LockedAxes; // 0x54(0x01)
	None ParameterName; // 0x50(0x08)
	None MinInput; // 0x58(0x0c)
	None MaxInput; // 0x64(0x0c)
	None MinOutput; // 0x70(0x0c)
	None MaxOutput; // 0x7c(0x0c)
	None ParamModes; // 0x88(0x03)
	None Max; // 0x38(0x0c)
	None Min; // 0x44(0x0c)
	None bLockAxes; // 0x50(0x01)
	None LockedAxes; // 0x54(0x01)
	None MirrorFlags; // 0x55(0x03)
	None bUseExtremes; // 0x58(0x01)
	None ConstantCurve; // 0x38(0x18)
	None bLockAxes1; // 0x50(0x01)
	None bLockAxes2; // 0x50(0x01)
	None LockedAxes; // 0x54(0x02)
	None MirrorFlags; // 0x56(0x03)
	None bUseExtremes; // 0x5c(0x01)
	None FrustumColor; // 0x430(0x04)
	None FrustumAngle; // 0x434(0x04)
	None FrustumAspectRatio; // 0x438(0x04)
	None FrustumStartDist; // 0x43c(0x04)
	None FrustumEndDist; // 0x440(0x04)
	None Texture; // 0x448(0x08)
	None Schema; // 0x28(0x08)
	None Nodes; // 0x30(0x10)
	None bEditable; // 0x40(0x01)
	None bAllowDeletion; // 0x40(0x01)
	None bAllowRenaming; // 0x40(0x01)
	None Blueprint; // 0x28(0x08)
	None Graph; // 0x30(0x08)
	None Node; // 0x38(0x08)
	None bIsDebugging; // 0x48(0x01)
	None DeprecatedPins; // 0x38(0x10)
	None NodePosX; // 0x48(0x04)
	None NodePosY; // 0x4c(0x04)
	None NodeWidth; // 0x50(0x04)
	None NodeHeight; // 0x54(0x04)
	None AdvancedPinDisplay; // 0x58(0x01)
	None EnabledState; // 0x59(0x01)
	None bDisplayAsDisabled; // 0x5b(0x01)
	None bUserSetEnabledState; // 0x5b(0x01)
	None bIsNodeEnabled; // 0x5b(0x01)
	None bHasCompilerMessage; // 0x5b(0x01)
	None NodeComment; // 0x60(0x10)
	None ErrorType; // 0x70(0x04)
	None ErrorMsg; // 0x78(0x10)
	None NodeGuid; // 0x88(0x10)
	None Link; // 0x98(0x10)
	None Excerpt; // 0xa8(0x10)
	None PinName; // 0x28(0x10)
	None PinToolTip; // 0x38(0x10)
	None Direction; // 0x48(0x01)
	None PinType; // 0x50(0x58)
	None DefaultValue; // 0xa8(0x10)
	None AutogeneratedDefaultValue; // 0xb8(0x10)
	None DefaultObject; // 0xc8(0x08)
	None DefaultTextValue; // 0xd0(0x18)
	None LinkedTo; // 0xe8(0x10)
	None SubPins; // 0xf8(0x10)
	None ParentPin; // 0x108(0x08)
	None ReferencePassThroughConnection; // 0x110(0x08)
	None ParticleSystemComponent; // 0x220(0x08)
	None bDestroyOnSystemFinish; // 0x228(0x01)
	None bPostUpdateTickGroup; // 0x228(0x01)
	None bCurrentlyActive; // 0x228(0x01)
	None OnParticleSpawn; // 0x230(0x10)
	None OnParticleBurst; // 0x240(0x10)
	None OnParticleDeath; // 0x250(0x10)
	None OnParticleCollide; // 0x260(0x10)
	None PS_CameraEffect; // 0x270(0x08)
	None PS_CameraEffectNonExtremeContent; // 0x278(0x08)
	None BaseCamera; // 0x280(0x08)
	None RelativeTransform; // 0x290(0x30)
	None BaseFOV; // 0x2c0(0x04)
	None bAllowMultipleInstances; // 0x2c4(0x01)
	None bResetWhenRetriggered; // 0x2c4(0x01)
	None EmittersToTreatAsSame; // 0x2c8(0x10)
	None DistFromCamera; // 0x2d8(0x04)
	None FailedPlaceMessage; // 0x28(0x10)
	None MaxedOutMessage; // 0x38(0x10)
	None EnteredMessage; // 0x48(0x10)
	None LeftMessage; // 0x58(0x10)
	None GlobalNameChange; // 0x68(0x10)
	None SpecEnteredMessage; // 0x78(0x10)
	None NewPlayerMessage; // 0x88(0x10)
	None NewSpecMessage; // 0x98(0x10)
	None Component; // 0x220(0x08)
	None bEnabled; // 0x228(0x01)
	None FogDensity; // 0x208(0x04)
	None FogHeightFalloff; // 0x20c(0x04)
	None SecondFogData; // 0x210(0x0c)
	None FogInscatteringColor; // 0x21c(0x10)
	None InscatteringColorCubemap; // 0x230(0x08)
	None InscatteringColorCubemapAngle; // 0x238(0x04)
	None InscatteringTextureTint; // 0x23c(0x10)
	None FullyDirectionalInscatteringColorDistance; // 0x24c(0x04)
	None NonDirectionalInscatteringColorDistance; // 0x250(0x04)
	None DirectionalInscatteringExponent; // 0x254(0x04)
	None DirectionalInscatteringStartDistance; // 0x258(0x04)
	None DirectionalInscatteringColor; // 0x25c(0x10)
	None FogMaxOpacity; // 0x26c(0x04)
	None StartDistance; // 0x270(0x04)
	None StartDistancePerPlatformScale; // 0x274(0x04)
	None FogCutoffDistance; // 0x278(0x04)
	None bEnableVolumetricFog; // 0x27c(0x01)
	None VolumetricFogScatteringDistribution; // 0x280(0x04)
	None VolumetricFogAlbedo; // 0x284(0x04)
	None VolumetricFogEmissive; // 0x288(0x10)
	None VolumetricFogExtinctionScale; // 0x298(0x04)
	None VolumetricFogDistance; // 0x29c(0x04)
	None VolumetricFogStaticLightingScatteringIntensity; // 0x2a0(0x04)
	None bOverrideLightColorsWithFogInscatteringColors; // 0x2a4(0x01)
	None SupportedClass; // 0x28(0x08)
	None ExportRootScope; // 0x30(0x08)
	None FormatExtension; // 0x38(0x10)
	None FormatDescription; // 0x48(0x10)
	None PreferredFormatIndex; // 0x58(0x04)
	None TextIndent; // 0x5c(0x04)
	None bText; // 0x60(0x01)
	None bSelectedOnly; // 0x60(0x01)
	None bForceFileOperations; // 0x60(0x01)
	None ExportTask; // 0x68(0x08)
	None MaxSpeed; // 0x138(0x04)
	None Acceleration; // 0x13c(0x04)
	None Deceleration; // 0x140(0x04)
	None TurningBoost; // 0x144(0x04)
	None bPositionCorrected; // 0x148(0x01)
	None FontCacheType; // 0x30(0x01)
	None Characters; // 0x38(0x10)
	None Textures; // 0x48(0x10)
	None IsRemapped; // 0x58(0x04)
	None EmScale; // 0x5c(0x04)
	None Ascent; // 0x60(0x04)
	None Descent; // 0x64(0x04)
	None Leading; // 0x68(0x04)
	None Kerning; // 0x6c(0x04)
	None ImportOptions; // 0x70(0xb0)
	None NumCharacters; // 0x120(0x04)
	None MaxCharHeight; // 0x128(0x10)
	None ScalingFactor; // 0x138(0x04)
	None LegacyFontSize; // 0x13c(0x04)
	None LegacyFontName; // 0x140(0x08)
	None CompositeFont; // 0x148(0x38)
	None SourceFilename; // 0x30(0x10)
	None Hinting; // 0x40(0x01)
	None LoadingPolicy; // 0x41(0x01)
	None LayoutMethod; // 0x42(0x01)
	None Data; // 0x28(0xb0)
	None Attenuation; // 0x28(0xb0)
	None ForceFeedbackEffect; // 0x208(0x08)
	None bAutoDestroy; // 0x210(0x01)
	None bStopWhenOwnerDestroyed; // 0x210(0x01)
	None bLooping; // 0x210(0x01)
	None bIgnoreTimeDilation; // 0x210(0x01)
	None bOverrideAttenuation; // 0x210(0x01)
	None IntensityMultiplier; // 0x214(0x04)
	None AttenuationSettings; // 0x218(0x08)
	None AttenuationOverrides; // 0x220(0xb0)
	None OnForceFeedbackFinished; // 0x2d0(0x10)
	None ChannelDetails; // 0x28(0x10)
	None Duration; // 0x38(0x04)
	None BadPacketLossThreshold; // 0x220(0x04)
	None SeverePacketLossThreshold; // 0x224(0x04)
	None BadPingThreshold; // 0x228(0x04)
	None SeverePingThreshold; // 0x22c(0x04)
	None AdjustedNetSpeed; // 0x230(0x04)
	None LastNetSpeedUpdateTime; // 0x234(0x04)
	None TotalNetBandwidth; // 0x238(0x04)
	None MinDynamicBandwidth; // 0x23c(0x04)
	None MaxDynamicBandwidth; // 0x240(0x04)
	None bIsStandbyCheckingEnabled; // 0x244(0x01)
	None bHasStandbyCheatTriggered; // 0x244(0x01)
	None StandbyRxCheatTime; // 0x248(0x04)
	None StandbyTxCheatTime; // 0x24c(0x04)
	None PercentMissingForRxStandby; // 0x250(0x04)
	None PercentMissingForTxStandby; // 0x254(0x04)
	None PercentForBadPing; // 0x258(0x04)
	None JoinInProgressStandbyWaitTime; // 0x25c(0x04)
	None MoveRepSize; // 0x260(0x04)
	None MAXPOSITIONERRORSQUARED; // 0x264(0x04)
	None MAXNEARZEROVELOCITYSQUARED; // 0x268(0x04)
	None CLIENTADJUSTUPDATECOST; // 0x26c(0x04)
	None MAXCLIENTUPDATEINTERVAL; // 0x270(0x04)
	None MaxClientForcedUpdateDuration; // 0x274(0x04)
	None ServerForcedUpdateHitchThreshold; // 0x278(0x04)
	None ServerForcedUpdateHitchCooldown; // 0x27c(0x04)
	None MaxMoveDeltaTime; // 0x280(0x04)
	None MaxClientSmoothingDeltaTime; // 0x284(0x04)
	None ClientNetSendMoveDeltaTime; // 0x288(0x04)
	None ClientNetSendMoveDeltaTimeThrottled; // 0x28c(0x04)
	None ClientNetSendMoveDeltaTimeStationary; // 0x290(0x04)
	None ClientNetSendMoveThrottleAtNetSpeed; // 0x294(0x04)
	None ClientNetSendMoveThrottleOverPlayerCount; // 0x298(0x04)
	None ClientAuthorativePosition; // 0x29c(0x01)
	None ClientErrorUpdateRateLimit; // 0x2a0(0x04)
	None ClientNetCamUpdateDeltaTime; // 0x2a4(0x04)
	None ClientNetCamUpdatePositionLimit; // 0x2a8(0x04)
	None bMovementTimeDiscrepancyDetection; // 0x2ac(0x01)
	None bMovementTimeDiscrepancyResolution; // 0x2ad(0x01)
	None MovementTimeDiscrepancyMaxTimeMargin; // 0x2b0(0x04)
	None MovementTimeDiscrepancyMinTimeMargin; // 0x2b4(0x04)
	None MovementTimeDiscrepancyResolutionRate; // 0x2b8(0x04)
	None MovementTimeDiscrepancyDriftAllowance; // 0x2bc(0x04)
	None bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x2c0(0x01)
	None bUseDistanceBasedRelevancy; // 0x2c1(0x01)
	None MaxSpectators; // 0x220(0x04)
	None MaxPlayers; // 0x224(0x04)
	None MaxPartySize; // 0x228(0x04)
	None MaxSplitscreensPerConnection; // 0x22c(0x01)
	None bRequiresPushToTalk; // 0x22d(0x01)
	None SessionName; // 0x230(0x08)
	None SpotLightComponent; // 0x230(0x08)
	None Amplitudes; // 0x28(0x10)
	None SampleRate; // 0x38(0x04)
	None HapticDetails; // 0x28(0x110)
	None SoundWave; // 0x28(0x08)
	None ProxyMeshes; // 0x28(0x10)
	None bShouldPauseWhileAdOpen; // 0x38(0x01)
	None ClickedBannerDelegates; // 0x40(0x10)
	None ClosedAdDelegates; // 0x50(0x10)
	None Records; // 0x28(0x10)
	None UnnecessaryComponents; // 0x38(0x10)
	None InputActionDelegateBindings; // 0x28(0x10)
	None InputAxisDelegateBindings; // 0x28(0x10)
	None InputAxisKeyDelegateBindings; // 0x28(0x10)
	None InputKeyDelegateBindings; // 0x28(0x10)
	None AxisConfig; // 0x28(0x10)
	None bAltEnterTogglesFullscreen; // 0x38(0x01)
	None bF11TogglesFullscreen; // 0x38(0x01)
	None bUseMouseForTouch; // 0x38(0x01)
	None bEnableMouseSmoothing; // 0x38(0x01)
	None bEnableFOVScaling; // 0x38(0x01)
	None bCaptureMouseOnLaunch; // 0x38(0x01)
	None bDefaultViewportMouseLock; // 0x38(0x01)
	None bAlwaysShowTouchInterface; // 0x38(0x01)
	None bShowConsoleOnFourFingerTap; // 0x39(0x01)
	None bEnableGestureRecognizer; // 0x39(0x01)
	None bUseAutocorrect; // 0x3a(0x01)
	None ExcludedAutocorrectOS; // 0x40(0x10)
	None ExcludedAutocorrectCultures; // 0x50(0x10)
	None ExcludedAutocorrectDeviceModels; // 0x60(0x10)
	None DefaultViewportMouseCaptureMode; // 0x70(0x01)
	None DefaultViewportMouseLockMode; // 0x71(0x01)
	None FOVScale; // 0x74(0x04)
	None DoubleClickTime; // 0x78(0x04)
	None ActionMappings; // 0x80(0x10)
	None AxisMappings; // 0x90(0x10)
	None SpeechMappings; // 0xa0(0x10)
	None DefaultTouchInterface; // 0xb0(0x18)
	None ConsoleKey; // 0xc8(0x18)
	None ConsoleKeys; // 0xe0(0x10)
	None InputTouchDelegateBindings; // 0x28(0x10)
	None Tabs; // 0x28(0x10)
	None ActiveTab; // 0x38(0x04)
	None InterpLength; // 0x28(0x04)
	None PathBuildTime; // 0x2c(0x04)
	None InterpGroups; // 0x30(0x10)
	None CurveEdSetup; // 0x40(0x08)
	None EdSectionStart; // 0x48(0x04)
	None EdSectionEnd; // 0x4c(0x04)
	None bShouldBakeAndPrune; // 0x50(0x01)
	None CachedDirectorGroup; // 0x58(0x08)
	None AllEventNames; // 0x60(0x10)
	None Caption; // 0x28(0x10)
	None InterpTracks; // 0x30(0x10)
	None GroupName; // 0x40(0x08)
	None GroupColor; // 0x48(0x04)
	None bCollapsed; // 0x4c(0x01)
	None bVisible; // 0x4c(0x01)
	None bIsFolder; // 0x4c(0x01)
	None bIsParented; // 0x4c(0x01)
	None bIsSelected; // 0x4c(0x01)
	None CameraAnimInst; // 0x50(0x08)
	None CompressTolerance; // 0x58(0x04)
	None Group; // 0x28(0x08)
	None GroupActor; // 0x30(0x08)
	None TrackInst; // 0x38(0x10)
	None Duration; // 0xf0(0x04)
	None bPauseOnImpact; // 0xf4(0x01)
	None bSweep; // 0xf8(0x01)
	None TeleportType; // 0xf9(0x01)
	None BehaviourType; // 0xfa(0x01)
	None bCheckIfStillInWorld; // 0xfb(0x01)
	None bForceSubStepping; // 0xfc(0x01)
	None OnInterpToReverse; // 0x100(0x10)
	None OnInterpToStop; // 0x110(0x10)
	None OnWaitBeginDelegate; // 0x120(0x10)
	None OnWaitEndDelegate; // 0x130(0x10)
	None OnResetDelegate; // 0x140(0x10)
	None MaxSimulationTimeStep; // 0x150(0x04)
	None MaxSimulationIterations; // 0x154(0x04)
	None ControlPoints; // 0x158(0x10)
	None SlotName; // 0x90(0x08)
	None AnimSeqs; // 0x98(0x10)
	None bSkipAnimNotifiers; // 0xa8(0x01)
	None BoolTrack; // 0x70(0x10)
	None PropertyName; // 0x80(0x08)
	None PropertyName; // 0x90(0x08)
	None CutTrack; // 0x70(0x10)
	None bSimulateCameraCutsOnClients; // 0x80(0x01)
	None EventTrack; // 0x70(0x10)
	None bFireEventsWhenForwards; // 0x80(0x01)
	None bFireEventsWhenBackwards; // 0x80(0x01)
	None bFireEventsWhenJumpingForwards; // 0x80(0x01)
	None bUseCustomEventName; // 0x80(0x01)
	None bPersistFade; // 0x90(0x01)
	None bFadeAudio; // 0x90(0x01)
	None FadeColor; // 0x94(0x10)
	None AnimBlueprintClass; // 0x90(0x08)
	None AnimClass; // 0x98(0x08)
	None ParamName; // 0xa0(0x08)
	None TargetMaterials; // 0x90(0x10)
	None ParamName; // 0xa0(0x08)
	None ParamName; // 0x90(0x08)
	None PropertyName; // 0x90(0x08)
	None LastUpdatePosition; // 0x28(0x04)
	None InterpProperty; // 0x28(0x28)
	None PropertyOuterObjectInst; // 0x50(0x08)
	None ResetBool; // 0x68(0x01)
	None ResetColor; // 0x60(0x04)
	None OldViewTarget; // 0x28(0x08)
	None LastUpdatePosition; // 0x28(0x04)
	None AnimScriptInstance; // 0x28(0x08)
	None ResetFloat; // 0x30(0x04)
	None MaterialInstances; // 0x28(0x10)
	None ResetFloats; // 0x38(0x10)
	None PrimitiveMaterialRefs; // 0x48(0x10)
	None InstancedTrack; // 0x58(0x08)
	None ResetFloat; // 0x28(0x04)
	None ResetFloat; // 0x60(0x04)
	None ResetColor; // 0x60(0x10)
	None ResetLocation; // 0x28(0x0c)
	None ResetRotation; // 0x34(0x0c)
	None LastUpdatePosition; // 0x28(0x04)
	None OldTimeDilation; // 0x28(0x04)
	None LastUpdatePosition; // 0x28(0x04)
	None PlayAudioComp; // 0x30(0x08)
	None Action; // 0x28(0x01)
	None LastUpdatePosition; // 0x2c(0x04)
	None bSavedActiveState; // 0x30(0x01)
	None MaterialInstances; // 0x28(0x10)
	None ResetVectors; // 0x38(0x10)
	None PrimitiveMaterialRefs; // 0x48(0x10)
	None InstancedTrack; // 0x58(0x08)
	None ResetVector; // 0x60(0x0c)
	None Action; // 0x28(0x01)
	None LastUpdatePosition; // 0x2c(0x04)
	None LinearColorTrack; // 0x70(0x18)
	None CurveTension; // 0x88(0x04)
	None PropertyName; // 0x90(0x08)
	None PosTrack; // 0x70(0x18)
	None EulerTrack; // 0x88(0x18)
	None LookupTrack; // 0xa0(0x10)
	None LookAtGroupName; // 0xb0(0x08)
	None LinCurveTension; // 0xb8(0x04)
	None AngCurveTension; // 0xbc(0x04)
	None bUseQuatInterpolation; // 0xc0(0x01)
	None bShowArrowAtKeys; // 0xc0(0x01)
	None bDisableMovement; // 0xc0(0x01)
	None bShowTranslationOnCurveEd; // 0xc0(0x01)
	None bShowRotationOnCurveEd; // 0xc0(0x01)
	None bHide3DTrack; // 0xc0(0x01)
	None RotMode; // 0xc4(0x01)
	None MoveAxis; // 0x90(0x01)
	None LookupTrack; // 0x98(0x10)
	None TrackKeys; // 0x70(0x10)
	None Sounds; // 0x90(0x10)
	None bPlayOnReverse; // 0xa0(0x01)
	None bContinueSoundOnMatineeEnd; // 0xa0(0x01)
	None bSuppressSubtitles; // 0xa0(0x01)
	None bTreatAsDialogue; // 0xa0(0x01)
	None bAttach; // 0xa0(0x01)
	None ToggleTrack; // 0x70(0x10)
	None bActivateSystemEachUpdate; // 0x80(0x01)
	None bActivateWithJustAttachedFlag; // 0x80(0x01)
	None bFireEventsWhenForwards; // 0x80(0x01)
	None bFireEventsWhenBackwards; // 0x80(0x01)
	None bFireEventsWhenJumpingForwards; // 0x80(0x01)
	None TargetMaterials; // 0x90(0x10)
	None ParamName; // 0xa0(0x08)
	None PropertyName; // 0x90(0x08)
	None VisibilityTrack; // 0x70(0x10)
	None bFireEventsWhenForwards; // 0x80(0x01)
	None bFireEventsWhenBackwards; // 0x80(0x01)
	None bFireEventsWhenJumpingForwards; // 0x80(0x01)
	None UnsignedInt16Variable; // 0x28(0x02)
	None UnsignedInt32Variable; // 0x2c(0x04)
	None UnsignedInt64Variable; // 0x30(0x08)
	None SignedInt8Variable; // 0x38(0x01)
	None SignedInt16Variable; // 0x3a(0x02)
	None SignedInt64Variable; // 0x40(0x08)
	None UnsignedInt8Variable; // 0x48(0x01)
	None SignedInt32Variable; // 0x4c(0x04)
	None LayerName; // 0x28(0x08)
	None bIsVisible; // 0x30(0x01)
	None ActorStats; // 0x38(0x10)
	None OwningWorld; // 0xb8(0x08)
	None Model; // 0xc0(0x08)
	None ModelComponents; // 0xc8(0x10)
	None ActorCluster; // 0xd8(0x08)
	None NumTextureStreamingUnbuiltComponents; // 0xe0(0x04)
	None NumTextureStreamingDirtyResources; // 0xe4(0x04)
	None LevelScriptActor; // 0xe8(0x08)
	None NavListStart; // 0xf0(0x08)
	None NavListEnd; // 0xf8(0x08)
	None NavDataChunks; // 0x100(0x10)
	None LightmapTotalSize; // 0x110(0x04)
	None ShadowmapTotalSize; // 0x114(0x04)
	None StaticNavigableGeometry; // 0x118(0x10)
	None StreamingTextureGuids; // 0x128(0x10)
	None LevelBuildDataId; // 0x1d0(0x10)
	None MapBuildData; // 0x1e0(0x08)
	None LightBuildLevelOffset; // 0x1e8(0x0c)
	None LightingScenarioQuality; // 0x1f4(0x01)
	None bIsLightingScenario; // 0x1f5(0x01)
	None bTextureStreamingRotationChanged; // 0x1f5(0x01)
	None bStaticComponentsRegisteredInStreamingManager; // 0x1f5(0x01)
	None bIsVisible; // 0x1f5(0x01)
	None WorldSettings; // 0x248(0x08)
	None AssetUserData; // 0x258(0x10)
	None DestroyedReplicatedStaticActors; // 0x278(0x10)
	None Actors; // 0x28(0x10)
	None BoxComponent; // 0x220(0x08)
	None bAutoUpdateBounds; // 0x228(0x01)
	None bInputEnabled; // 0x220(0x01)
	None WorldAsset; // 0x28(0x28)
	None PackageNameToLoad; // 0x50(0x08)
	None LODPackageNames; // 0x58(0x10)
	None LevelTransform; // 0x80(0x30)
	None LevelLODIndex; // 0xb4(0x04)
	None StreamingPriority; // 0xb8(0x04)
	None bShouldBeVisible; // 0xbe(0x01)
	None bShouldBeLoaded; // 0xbe(0x01)
	None bLocked; // 0xbe(0x01)
	None bIsStatic; // 0xbe(0x01)
	None bShouldBlockOnLoad; // 0xbe(0x01)
	None bShouldBlockOnUnload; // 0xbf(0x01)
	None bDisableDistanceStreaming; // 0xbf(0x01)
	None bDrawOnLevelStatusMap; // 0xbf(0x01)
	None LevelColor; // 0xc0(0x10)
	None EditorStreamingVolumes; // 0xd0(0x10)
	None MinTimeBetweenVolumeUnloadRequests; // 0xe0(0x04)
	None bExcludeFromAutomatedLightBake; // 0xe8(0x01)
	None OnLevelLoaded; // 0xf0(0x10)
	None OnLevelUnloaded; // 0x100(0x10)
	None OnLevelShown; // 0x110(0x10)
	None OnLevelHidden; // 0x120(0x10)
	None LoadedLevel; // 0x130(0x08)
	None PendingUnloadLevel; // 0x138(0x08)
	None bInitiallyLoaded; // 0x150(0x01)
	None bInitiallyVisible; // 0x150(0x01)
	None LightingScenarioQuality; // 0x150(0x01)
	None bDataIsStripped; // 0x151(0x01)
	None StreamingLevelNames; // 0x258(0x10)
	None bEditorPreVisOnly; // 0x268(0x01)
	None bDisabled; // 0x268(0x01)
	None StreamingUsage; // 0x26c(0x01)
	None SourceModel; // 0x28(0x08)
	None Surfaces; // 0x30(0x10)
	None PortalComponent; // 0x220(0x08)
	None PreviewBox; // 0x208(0x08)
	None LightmassSettings; // 0x28(0x1c)
	None IntensityUnits; // 0x338(0x01)
	None Radius; // 0x33c(0x04)
	None AttenuationRadius; // 0x340(0x04)
	None LightmassSettings; // 0x344(0x0c)
	None StaticMeshComponent; // 0x220(0x08)
	None ImpostersStaticMeshComponents; // 0x228(0x50)
	None Proxy; // 0x278(0x08)
	None Key; // 0x280(0x08)
	None LODDrawDistance; // 0x288(0x04)
	None LODLevel; // 0x28c(0x04)
	None SubActors; // 0x290(0x10)
	None CachedNumHLODLevels; // 0x2a0(0x01)
	None LevelLightingQuality; // 0x28(0x01)
	None LightingScenarioQuality; // 0x29(0x01)
	None bIsDataStripped; // 0x2a(0x01)
	None PhysMaterial; // 0x88(0x08)
	None PhysMaterialMask; // 0x90(0x08)
	None PhysicalMaterialMap; // 0x98(0x40)
	None Metallic; // 0xd8(0x0c)
	None Specular; // 0xec(0x0c)
	None Anisotropy; // 0x100(0x0c)
	None Normal; // 0x114(0x0c)
	None Tangent; // 0x128(0x0c)
	None EmissiveColor; // 0x13c(0x0c)
	None MaterialDomain; // 0x150(0x01)
	None BlendMode; // 0x151(0x01)
	None DecalBlendMode; // 0x152(0x01)
	None MaterialDecalResponse; // 0x153(0x01)
	None ShadingModel; // 0x154(0x01)
	None bCastDynamicShadowAsMasked; // 0x155(0x01)
	None ShadingModels; // 0x156(0x02)
	None OpacityMaskClipValue; // 0x158(0x04)
	None WorldPositionOffset; // 0x15c(0x0c)
	None Refraction; // 0x170(0x0c)
	None MaterialAttributes; // 0x184(0x10)
	None PixelDepthOffset; // 0x19c(0x0c)
	None ShadingModelFromMaterialExpression; // 0x1b0(0x0c)
	None bEnableTranslucencyAfterRefraction; // 0x1c4(0x01)
	None bEnableSeparateTranslucency; // 0x1c8(0x01)
	None bEnableResponsiveAA; // 0x1c8(0x01)
	None bScreenSpaceReflections; // 0x1c8(0x01)
	None bContactShadows; // 0x1c8(0x01)
	None TwoSided; // 0x1c8(0x01)
	None DitheredLODTransition; // 0x1c8(0x01)
	None DitherOpacityMask; // 0x1c8(0x01)
	None bAllowNegativeEmissiveColor; // 0x1c8(0x01)
	None TranslucencyLightingMode; // 0x1c9(0x01)
	None bEnableMobileSeparateTranslucency; // 0x1ca(0x01)
	None NumCustomizedUVs; // 0x1cc(0x04)
	None TranslucencyDirectionalLightingIntensity; // 0x1d0(0x04)
	None TranslucentShadowDensityScale; // 0x1d4(0x04)
	None TranslucentSelfShadowDensityScale; // 0x1d8(0x04)
	None TranslucentSelfShadowSecondDensityScale; // 0x1dc(0x04)
	None TranslucentSelfShadowSecondOpacity; // 0x1e0(0x04)
	None TranslucentBackscatteringExponent; // 0x1e4(0x04)
	None TranslucentMultipleScatteringExtinction; // 0x1e8(0x10)
	None TranslucentShadowStartOffset; // 0x1f8(0x04)
	None bDisableDepthTest; // 0x1fc(0x01)
	None bShouldRenderTranslucentOutline; // 0x1fc(0x01)
	None bWriteOnlyAlpha; // 0x1fc(0x01)
	None bGenerateSphericalParticleNormals; // 0x1fc(0x01)
	None bTangentSpaceNormal; // 0x1fc(0x01)
	None bUseEmissiveForDynamicAreaLighting; // 0x1fc(0x01)
	None bBlockGI; // 0x1fc(0x01)
	None bUsedAsSpecialEngineMaterial; // 0x1fc(0x01)
	None bUsedWithSkeletalMesh; // 0x1fd(0x01)
	None bUsedWithVertexCurvature; // 0x1fd(0x01)
	None bUsedWithBlurredNormals; // 0x1fd(0x01)
	None bUsedWithEditorCompositing; // 0x1fd(0x01)
	None bUsedWithParticleSprites; // 0x1fd(0x01)
	None bUsedWithBeamTrails; // 0x1fd(0x01)
	None bUsedWithMeshParticles; // 0x1fd(0x01)
	None bUsedWithNiagaraSprites; // 0x1fd(0x01)
	None bUsedWithNiagaraRibbons; // 0x1fe(0x01)
	None bUsedWithNiagaraMeshParticles; // 0x1fe(0x01)
	None bUsedWithGeometryCache; // 0x1fe(0x01)
	None bUsedWithStaticLighting; // 0x1fe(0x01)
	None bUsedWithMorphTargets; // 0x1fe(0x01)
	None bUsedWithSplineMeshes; // 0x1fe(0x01)
	None bUsedWithInstancedStaticMeshes; // 0x1fe(0x01)
	None bUsedWithGeometryCollections; // 0x1fe(0x01)
	None bUsesDistortion; // 0x1ff(0x01)
	None bUsedWithClothing; // 0x1ff(0x01)
	None bUsedWithWater; // 0x200(0x01)
	None bUsedWithHairStrands; // 0x200(0x01)
	None bUsedWithLidarPointCloud; // 0x200(0x01)
	None bUsedWithUI; // 0x204(0x01)
	None bAutomaticallySetUsageInEditor; // 0x204(0x01)
	None bFullyRough; // 0x204(0x01)
	None bUseFullPrecision; // 0x204(0x01)
	None bUseLightmapDirectionality; // 0x204(0x01)
	None bForwardRenderUsePreintegratedGFForSimpleIBL; // 0x208(0x01)
	None bUseHalfRateCheckerboardRendering; // 0x208(0x01)
	None bOnlyDirectionalLighting; // 0x208(0x01)
	None bUseHQForwardReflections; // 0x20c(0x01)
	None bUseHQForwardReflectionsOnLowEnd; // 0x210(0x01)
	None bUsePlanarForwardReflections; // 0x214(0x01)
	None bNormalCurvatureToRoughness; // 0x214(0x01)
	None D3D11TessellationMode; // 0x215(0x01)
	None bEnableCrackFreeDisplacement; // 0x216(0x01)
	None bEnableAdaptiveTessellation; // 0x216(0x01)
	None AllowTranslucentCustomDepthWrites; // 0x216(0x01)
	None Wireframe; // 0x216(0x01)
	None ShadingRate; // 0x217(0x01)
	None bCanMaskedBeAssumedOpaque; // 0x218(0x01)
	None bIsMasked; // 0x218(0x01)
	None bIsPreviewMaterial; // 0x218(0x01)
	None bIsFunctionPreviewMaterial; // 0x218(0x01)
	None bUseMaterialAttributes; // 0x218(0x01)
	None bCastRayTracedShadows; // 0x218(0x01)
	None bUseTranslucencyVertexFog; // 0x218(0x01)
	None bIsSky; // 0x218(0x01)
	None bComputeFogPerPixel; // 0x219(0x01)
	None bOutputTranslucentVelocity; // 0x219(0x01)
	None bAllowDevelopmentShaderCompile; // 0x219(0x01)
	None bIsMaterialEditorStatsMaterial; // 0x219(0x01)
	None BlendableLocation; // 0x21a(0x01)
	None BlendableOutputAlpha; // 0x21b(0x01)
	None bEnableStencilTest; // 0x21b(0x01)
	None StencilCompare; // 0x21c(0x01)
	None StencilRefValue; // 0x21d(0x01)
	None RefractionMode; // 0x21e(0x01)
	None BlendablePriority; // 0x220(0x04)
	None bIsBlendable; // 0x224(0x01)
	None UsageFlagWarnings; // 0x228(0x04)
	None RefractionDepthBias; // 0x22c(0x04)
	None StateId; // 0x230(0x10)
	None MaxDisplacement; // 0x240(0x04)
	None CachedExpressionData; // 0x2d0(0x228)
	None Elements; // 0x430(0x10)
	None Input; // 0x40(0x0c)
	None A; // 0x40(0x0c)
	None B; // 0x54(0x0c)
	None ConstA; // 0x68(0x04)
	None ConstB; // 0x6c(0x04)
	None Texture; // 0x40(0x08)
	None SamplerType; // 0x48(0x01)
	None IsDefaultMeshpaintTexture; // 0x49(0x01)
	None Coordinates; // 0x50(0x0c)
	None TextureObject; // 0x64(0x0c)
	None MipValue; // 0x78(0x0c)
	None CoordinatesDX; // 0x8c(0x0c)
	None CoordinatesDY; // 0xa0(0x0c)
	None AutomaticViewMipBiasValue; // 0xb4(0x0c)
	None MipValueMode; // 0xc8(0x01)
	None SamplerSource; // 0xc9(0x01)
	None AutomaticViewMipBias; // 0xca(0x01)
	None ConstCoordinate; // 0xcb(0x01)
	None ConstMipValue; // 0xcc(0x04)
	None ParameterName; // 0xd0(0x08)
	None ExpressionGUID; // 0xd8(0x10)
	None Group; // 0xe8(0x08)
	None Threshold; // 0xf0(0x04)
	None Channel; // 0xf4(0x01)
	None A; // 0x40(0x0c)
	None B; // 0x54(0x0c)
	None Input; // 0x40(0x0c)
	None Input; // 0x40(0x0c)
	None Input; // 0x40(0x0c)
	None Input; // 0x40(0x0c)
	None Input; // 0x40(0x0c)
	None Y; // 0x40(0x0c)
	None X; // 0x54(0x0c)
	None Y; // 0x40(0x0c)
	None X; // 0x54(0x0c)
	None Input; // 0x40(0x0c)
	None WorldPosition; // 0x40(0x0c)
	None Input; // 0x40(0x0c)
	None Temp; // 0x40(0x0c)
	None A; // 0x40(0x10)
	None B; // 0x58(0x10)
	None Alpha; // 0x70(0x0c)
	None PixelAttributeBlendType; // 0x84(0x01)
	None VertexAttributeBlendType; // 0x85(0x01)
	None Input; // 0x40(0x0c)
	None MaterialAttributes; // 0x40(0x10)
	None Coordinate; // 0x40(0x0c)
	None Height; // 0x54(0x0c)
	None HeightRatioInput; // 0x68(0x0c)
	None HeightRatio; // 0x7c(0x04)
	None ReferencePlane; // 0x80(0x04)
	None ConstCoordinate; // 0x84(0x04)
	None Input; // 0x40(0x0c)
	None ParameterName; // 0x40(0x08)
	None ExpressionGUID; // 0x48(0x10)
	None DefaultValue; // 0x58(0x10)
	None bUseCustomPrimitiveData; // 0x68(0x01)
	None PrimitiveDataIndex; // 0x69(0x01)
	None MaskChannel; // 0x70(0x01)
	None Input; // 0x74(0x0c)
	None Input; // 0x40(0x0c)
	None Min; // 0x54(0x0c)
	None Max; // 0x68(0x0c)
	None ClampMode; // 0x7c(0x01)
	None MinDefault; // 0x80(0x04)
	None MaxDefault; // 0x84(0x04)
	None Input; // 0x40(0x0c)
	None Collection; // 0x40(0x08)
	None ParameterName; // 0x48(0x08)
	None ParameterId; // 0x50(0x10)
	None SizeX; // 0x40(0x04)
	None SizeY; // 0x44(0x04)
	None Text; // 0x48(0x10)
	None CommentColor; // 0x58(0x10)
	None FontSize; // 0x68(0x04)
	None Input; // 0x40(0x0c)
	None R; // 0x54(0x01)
	None G; // 0x54(0x01)
	None B; // 0x54(0x01)
	None A; // 0x54(0x01)
	None R; // 0x40(0x04)
	None R; // 0x40(0x04)
	None G; // 0x44(0x04)
	None Constant; // 0x40(0x10)
	None Constant; // 0x40(0x10)
	None Input; // 0x40(0x0c)
	None Bias; // 0x54(0x04)
	None Scale; // 0x58(0x04)
	None Input; // 0x40(0x0c)
	None Period; // 0x54(0x04)
	None A; // 0x40(0x0c)
	None B; // 0x54(0x0c)
	None DefaultValue; // 0x58(0x04)
	None bUseCustomPrimitiveData; // 0x5c(0x01)
	None PrimitiveDataIndex; // 0x5d(0x01)
	None Curve; // 0x60(0x08)
	None Atlas; // 0x68(0x08)
	None InputTime; // 0x70(0x0c)
	None Code; // 0x40(0x10)
	None OutputType; // 0x50(0x01)
	None Description; // 0x58(0x10)
	None Inputs; // 0x68(0x10)
	None AdditionalDefines; // 0x78(0x10)
	None IncludeFilePaths; // 0x88(0x10)
	None Value; // 0x40(0x0c)
	None Value; // 0x40(0x0c)
	None TextureSize; // 0x40(0x0c)
	None ConstWidth; // 0x54(0x04)
	None ConstHeight; // 0x58(0x04)
	None InOpacity; // 0x40(0x0c)
	None FadeDistance; // 0x54(0x0c)
	None OpacityDefault; // 0x68(0x04)
	None FadeDistanceDefault; // 0x6c(0x04)
	None FunctionValue; // 0x40(0x01)
	None Depth; // 0x44(0x0c)
	None InXY; // 0x40(0x0c)
	None Input; // 0x40(0x0c)
	None Fraction; // 0x54(0x0c)
	None LuminanceFactors; // 0x68(0x10)
	None A; // 0x40(0x0c)
	None B; // 0x54(0x0c)
	None Position; // 0x40(0x0c)
	None Position; // 0x40(0x0c)
	None A; // 0x40(0x0c)
	None B; // 0x54(0x0c)
	None ConstA; // 0x68(0x04)
	None ConstB; // 0x6c(0x04)
	None A; // 0x40(0x0c)
	None B; // 0x54(0x0c)
	None ParamNames; // 0x40(0x10)
	None DefaultValue; // 0x50(0x10)
	None ParameterIndex; // 0x60(0x04)
	None Default; // 0x40(0x0c)
	None Inputs; // 0x54(0x30)
	None Input; // 0x40(0x0c)
	None A; // 0x40(0x0c)
	None B; // 0x54(0x0c)
	None Font; // 0x40(0x08)
	None FontTexturePage; // 0x48(0x04)
	None ParameterName; // 0x50(0x08)
	None ExpressionGUID; // 0x58(0x10)
	None Group; // 0x68(0x08)
	None Input; // 0x40(0x0c)
	None ExponentIn; // 0x40(0x0c)
	None Exponent; // 0x54(0x04)
	None BaseReflectFractionIn; // 0x58(0x0c)
	None BaseReflectFraction; // 0x6c(0x04)
	None Normal; // 0x70(0x0c)
	None Preview; // 0x40(0x0c)
	None InputName; // 0x54(0x08)
	None Description; // 0x60(0x10)
	None ID; // 0x70(0x10)
	None InputType; // 0x80(0x01)
	None PreviewValue; // 0x90(0x10)
	None bUsePreviewValueAsDefault; // 0xa0(0x01)
	None SortPriority; // 0xa4(0x04)
	None bCompilingFunctionPreview; // 0xa8(0x01)
	None OutputName; // 0x40(0x08)
	None Description; // 0x48(0x10)
	None SortPriority; // 0x58(0x04)
	None A; // 0x5c(0x0c)
	None bLastPreviewed; // 0x70(0x01)
	None ID; // 0x74(0x10)
	None MaterialAttributes; // 0x40(0x10)
	None AttributeGetTypes; // 0x58(0x10)
	None Default; // 0x40(0x0c)
	None StaticIndirect; // 0x54(0x0c)
	None DynamicIndirect; // 0x68(0x0c)
	None A; // 0x40(0x0c)
	None B; // 0x54(0x0c)
	None AGreaterThanB; // 0x68(0x0c)
	None AEqualsB; // 0x7c(0x0c)
	None ALessThanB; // 0x90(0x0c)
	None EqualsThreshold; // 0xa4(0x04)
	None ConstB; // 0xa8(0x04)
	None ConstAEqualsB; // 0xac(0x04)
	None Realtime; // 0x40(0x0c)
	None Lightmass; // 0x54(0x0c)
	None A; // 0x40(0x0c)
	None B; // 0x54(0x0c)
	None Alpha; // 0x68(0x0c)
	None ConstA; // 0x7c(0x04)
	None ConstB; // 0x80(0x04)
	None ConstAlpha; // 0x84(0x04)
	None X; // 0x40(0x0c)
	None X; // 0x40(0x0c)
	None BaseColor; // 0x40(0x0c)
	None Metallic; // 0x54(0x0c)
	None Specular; // 0x68(0x0c)
	None Roughness; // 0x7c(0x0c)
	None Anisotropy; // 0x90(0x0c)
	None EmissiveColor; // 0xa4(0x0c)
	None Opacity; // 0xb8(0x0c)
	None OpacityMask; // 0xcc(0x0c)
	None Normal; // 0xe0(0x0c)
	None Tangent; // 0xf4(0x0c)
	None WorldPositionOffset; // 0x108(0x0c)
	None WorldDisplacement; // 0x11c(0x0c)
	None TessellationMultiplier; // 0x130(0x0c)
	None SubsurfaceColor; // 0x144(0x0c)
	None ClearCoat; // 0x158(0x0c)
	None ClearCoatRoughness; // 0x16c(0x0c)
	None AmbientOcclusion; // 0x180(0x0c)
	None Refraction; // 0x194(0x0c)
	None CustomizedUVs; // 0x1a8(0x60)
	None PixelDepthOffset; // 0x248(0x0c)
	None ShadingModel; // 0x25c(0x0c)
	None Coordinates; // 0x40(0x0c)
	None ParameterName; // 0x40(0x08)
	None ExpressionGUID; // 0x48(0x10)
	None Input; // 0x58(0x10)
	None DefaultLayers; // 0x70(0x40)
	None LayerCallers; // 0xb0(0x10)
	None NumActiveLayerCallers; // 0xc0(0x04)
	None BlendCallers; // 0xc8(0x10)
	None NumActiveBlendCallers; // 0xd8(0x04)
	None bIsLayerGraphBuilt; // 0xdc(0x01)
	None MaterialFunction; // 0x40(0x08)
	None FunctionParameterInfo; // 0x48(0x10)
	None Realtime; // 0x40(0x0c)
	None MaterialProxy; // 0x54(0x0c)
	None A; // 0x40(0x0c)
	None B; // 0x54(0x0c)
	None ConstA; // 0x68(0x04)
	None ConstB; // 0x6c(0x04)
	None Input; // 0x40(0x0c)
	None A; // 0x40(0x0c)
	None B; // 0x54(0x0c)
	None ConstA; // 0x68(0x04)
	None ConstB; // 0x6c(0x04)
	None Input; // 0x40(0x0c)
	None A; // 0x40(0x0c)
	None B; // 0x54(0x0c)
	None ConstA; // 0x68(0x04)
	None ConstB; // 0x6c(0x04)
	None Position; // 0x40(0x0c)
	None FilterWidth; // 0x54(0x0c)
	None Scale; // 0x68(0x04)
	None Quality; // 0x6c(0x04)
	None NoiseFunction; // 0x70(0x01)
	None bTurbulence; // 0x74(0x01)
	None Levels; // 0x78(0x04)
	None OutputMin; // 0x7c(0x04)
	None OutputMax; // 0x80(0x04)
	None LevelScale; // 0x84(0x04)
	None bTiling; // 0x88(0x01)
	None RepeatSize; // 0x8c(0x04)
	None VectorInput; // 0x40(0x0c)
	None Input; // 0x40(0x0c)
	None Coordinate; // 0x40(0x0c)
	None Time; // 0x54(0x0c)
	None Speed; // 0x68(0x0c)
	None SpeedX; // 0x7c(0x04)
	None SpeedY; // 0x80(0x04)
	None ConstCoordinate; // 0x84(0x04)
	None bFractionalPart; // 0x88(0x01)
	None bBlend; // 0xd0(0x01)
	None DefaultValue; // 0x40(0x0c)
	None ConstDefaultValue; // 0x54(0x04)
	None DataIndex; // 0x58(0x04)
	None Base; // 0x40(0x0c)
	None Exponent; // 0x54(0x0c)
	None ConstExponent; // 0x68(0x04)
	None CurrentFrame; // 0x40(0x0c)
	None PreviousFrame; // 0x54(0x0c)
	None Default; // 0x40(0x0c)
	None Inputs; // 0x54(0x24)
	None BlurDist; // 0x40(0x0c)
	None ScreenUV; // 0x54(0x0c)
	None SceneTextureId; // 0x68(0x01)
	None Normal; // 0x40(0x0c)
	None RayTraced; // 0x54(0x0c)
	None CustomWorldNormal; // 0x40(0x0c)
	None bNormalizeCustomWorldNormal; // 0x54(0x01)
	None Input; // 0x40(0x0c)
	None NormalizedRotationAxis; // 0x40(0x0c)
	None RotationAngle; // 0x54(0x0c)
	None PivotPoint; // 0x68(0x0c)
	None Position; // 0x7c(0x0c)
	None Period; // 0x90(0x04)
	None Coordinate; // 0x40(0x0c)
	None Time; // 0x54(0x0c)
	None CenterX; // 0x68(0x04)
	None CenterY; // 0x6c(0x04)
	None Speed; // 0x70(0x04)
	None ConstCoordinate; // 0x74(0x04)
	None Input; // 0x40(0x0c)
	None BaseColor; // 0x40(0x0c)
	None Specular; // 0x54(0x0c)
	None Roughness; // 0x68(0x0c)
	None Normal; // 0x7c(0x0c)
	None WorldHeight; // 0x90(0x0c)
	None Opacity; // 0xa4(0x0c)
	None Mask; // 0xb8(0x0c)
	None Default; // 0x40(0x0c)
	None VirtualTextureOutput; // 0x54(0x0c)
	None Coordinates; // 0x40(0x0c)
	None WorldPosition; // 0x54(0x0c)
	None MipValue; // 0x68(0x0c)
	None VirtualTexture; // 0x80(0x08)
	None MaterialType; // 0x88(0x01)
	None bSinglePhysicalSpace; // 0x89(0x01)
	None MipValueMode; // 0x8a(0x01)
	None ParameterName; // 0x90(0x08)
	None ExpressionGUID; // 0x98(0x10)
	None Group; // 0xa8(0x08)
	None Input; // 0x40(0x0c)
	None InputMode; // 0x40(0x01)
	None Input; // 0x44(0x0c)
	None OffsetFraction; // 0x58(0x0c)
	None ConstInput; // 0x6c(0x08)
	None InputMode; // 0x40(0x01)
	None Input; // 0x44(0x0c)
	None Coordinates; // 0x58(0x0c)
	None ConstInput; // 0x6c(0x08)
	None Coordinates; // 0x40(0x0c)
	None SceneTextureId; // 0x54(0x01)
	None bFiltered; // 0x55(0x01)
	None Inputs; // 0x40(0x10)
	None AttributeSetTypes; // 0x50(0x10)
	None PixelShader; // 0x40(0x0c)
	None VertexShader; // 0x54(0x0c)
	None ShadingModel; // 0x40(0x01)
	None Default; // 0x40(0x0c)
	None Inputs; // 0x54(0x24)
	None Default; // 0x40(0x0c)
	None Shadow; // 0x54(0x0c)
	None Input; // 0x40(0x0c)
	None Input; // 0x40(0x0c)
	None Period; // 0x54(0x04)
	None ScatteringCoefficients; // 0x40(0x0c)
	None AbsorptionCoefficients; // 0x54(0x0c)
	None PhaseG; // 0x68(0x0c)
	None LightIndex; // 0x40(0x04)
	None LightIndex; // 0x40(0x04)
	None WorldPosition; // 0x44(0x0c)
	None LightIndex; // 0x40(0x04)
	None WorldPosition; // 0x40(0x0c)
	None Cell; // 0x40(0x0c)
	None Index; // 0x54(0x0c)
	None Seed; // 0x68(0x0c)
	None ConstIndex; // 0x7c(0x04)
	None ConstSeed; // 0x80(0x08)
	None GeometryInput; // 0x40(0x0c)
	None WindInput; // 0x54(0x0c)
	None LODInput; // 0x68(0x0c)
	None ExtraBendWS; // 0x7c(0x0c)
	None GeometryType; // 0x90(0x01)
	None WindType; // 0x91(0x01)
	None LODType; // 0x92(0x01)
	None BillboardThreshold; // 0x94(0x04)
	None bAccurateWindVelocities; // 0x98(0x01)
	None A; // 0x40(0x0c)
	None B; // 0x54(0x0c)
	None Radius; // 0x68(0x0c)
	None Hardness; // 0x7c(0x0c)
	None AttenuationRadius; // 0x90(0x04)
	None HardnessPercent; // 0x94(0x04)
	None Density; // 0x40(0x0c)
	None ConstantDensity; // 0x54(0x04)
	None Input; // 0x40(0x0c)
	None Value; // 0x40(0x01)
	None DefaultValue; // 0x58(0x01)
	None Input; // 0x58(0x0c)
	None DefaultR; // 0x6c(0x01)
	None DefaultG; // 0x6c(0x01)
	None DefaultB; // 0x6c(0x01)
	None DefaultA; // 0x6c(0x01)
	None DefaultValue; // 0x40(0x01)
	None A; // 0x44(0x0c)
	None B; // 0x58(0x0c)
	None Value; // 0x6c(0x0c)
	None A; // 0x60(0x0c)
	None B; // 0x74(0x0c)
	None Input; // 0x40(0x0c)
	None Input; // 0x40(0x0c)
	None A; // 0x40(0x0c)
	None B; // 0x54(0x0c)
	None ConstA; // 0x68(0x04)
	None ConstB; // 0x6c(0x04)
	None Input; // 0x40(0x0c)
	None Period; // 0x54(0x04)
	None Input; // 0x40(0x0c)
	None Index; // 0x40(0x0c)
	None Seed; // 0x54(0x0c)
	None ConstIndex; // 0x68(0x04)
	None ConstSeed; // 0x6c(0x08)
	None CoordinateIndex; // 0x40(0x04)
	None UTiling; // 0x44(0x04)
	None VTiling; // 0x48(0x04)
	None UnMirrorU; // 0x4c(0x01)
	None UnMirrorV; // 0x4c(0x01)
	None Coordinates; // 0x50(0x0c)
	None TextureObject; // 0x64(0x0c)
	None SamplerSource; // 0x78(0x01)
	None ConstCoordinate; // 0x79(0x01)
	None TextureObject; // 0x50(0x0c)
	None TextureObject; // 0x40(0x0c)
	None Property; // 0x54(0x01)
	None bBlend; // 0xf0(0x01)
	None TransmittanceColor; // 0x40(0x0c)
	None bIgnorePause; // 0x40(0x01)
	None bOverride_Period; // 0x40(0x01)
	None Period; // 0x44(0x04)
	None Input; // 0x40(0x0c)
	None TransformSourceType; // 0x54(0x01)
	None TransformType; // 0x55(0x01)
	None Input; // 0x40(0x0c)
	None TransformSourceType; // 0x54(0x01)
	None TransformType; // 0x55(0x01)
	None Input; // 0x40(0x0c)
	None Position; // 0x40(0x0c)
	None NoiseFunction; // 0x54(0x01)
	None Quality; // 0x58(0x04)
	None bTiling; // 0x5c(0x01)
	None TileSize; // 0x60(0x04)
	None Input; // 0x40(0x0c)
	None Property; // 0x40(0x01)
	None No; // 0x40(0x0c)
	None Yes; // 0x54(0x0c)
	None WorldPositionShaderOffset; // 0x40(0x01)
	None StateId; // 0x28(0x10)
	None MaterialFunctionUsage; // 0x38(0x01)
	None Description; // 0x40(0x10)
	None bExposeToLibrary; // 0x50(0x01)
	None bPrefixParameterNames; // 0x50(0x01)
	None bReentrantFlag; // 0x50(0x01)
	None Parent; // 0x40(0x08)
	None Base; // 0x48(0x08)
	None ScalarParameterValues; // 0x50(0x10)
	None VectorParameterValues; // 0x60(0x10)
	None TextureParameterValues; // 0x70(0x10)
	None FontParameterValues; // 0x80(0x10)
	None StaticSwitchParameterValues; // 0x90(0x10)
	None StaticComponentMaskParameterValues; // 0xa0(0x10)
	None RuntimeVirtualTextureParameterValues; // 0xb0(0x10)
	None TargetActors; // 0x220(0x10)
	None StateId; // 0x28(0x10)
	None ScalarParameters; // 0x38(0x10)
	None VectorParameters; // 0x48(0x10)
	None Collection; // 0x30(0x08)
	None MatineeData; // 0x220(0x08)
	None MatineeControllerName; // 0x228(0x08)
	None PlayRate; // 0x230(0x04)
	None bPlayOnLevelLoad; // 0x234(0x01)
	None bForceStartPos; // 0x234(0x01)
	None ForceStartPosition; // 0x238(0x04)
	None bLooping; // 0x23c(0x01)
	None bRewindOnPlay; // 0x23c(0x01)
	None bNoResetOnRewind; // 0x23c(0x01)
	None bRewindIfAlreadyPlaying; // 0x23c(0x01)
	None bDisableRadioFilter; // 0x23c(0x01)
	None bClientSideOnly; // 0x23c(0x01)
	None bSkipUpdateIfNotVisible; // 0x23c(0x01)
	None bIsSkippable; // 0x23c(0x01)
	None PreferredSplitScreenNum; // 0x240(0x04)
	None bDisableMovementInput; // 0x244(0x01)
	None bDisableLookAtInput; // 0x244(0x01)
	None bHidePlayer; // 0x244(0x01)
	None bHideHud; // 0x244(0x01)
	None GroupActorInfos; // 0x248(0x10)
	None bShouldShowGore; // 0x258(0x01)
	None GroupInst; // 0x260(0x10)
	None CameraCuts; // 0x270(0x10)
	None bIsPlaying; // 0x280(0x01)
	None bReversePlayback; // 0x280(0x01)
	None bPaused; // 0x280(0x01)
	None bPendingStop; // 0x280(0x01)
	None InterpPosition; // 0x284(0x04)
	None ReplicationForceIsPlaying; // 0x28c(0x01)
	None OnPlay; // 0x290(0x10)
	None OnStop; // 0x2a0(0x10)
	None OnPause; // 0x2b0(0x10)
	None CameraAnim; // 0x2c8(0x08)
	None MeshReductionModuleName; // 0x38(0x08)
	None AvailableProducts; // 0x38(0x10)
	None LastError; // 0x48(0x10)
	None LastErrorSolution; // 0x58(0x10)
	None ModelBodySetup; // 0x448(0x08)
	None BaseSkelMesh; // 0x28(0x08)
	None bIsDynamicObstacle; // 0x28(0x01)
	None NavigationDataName; // 0x28(0x08)
	None NavigationSystemClass; // 0x28(0x18)
	None SupportedAgentsMask; // 0x40(0x04)
	None DefaultAgentName; // 0x44(0x08)
	None bIsOverriden; // 0x4c(0x01)
	None Links; // 0x28(0x10)
	None SegmentLinks; // 0x38(0x10)
	None bVerifyPeer; // 0x38(0x01)
	None bEnableMultiplayerWorldOriginRebasing; // 0x38(0x01)
	None MaxRepArraySize; // 0x3c(0x04)
	None MaxRepArrayMemory; // 0x40(0x04)
	None NetworkEmulationProfiles; // 0x48(0x10)
	None SourceItems; // 0x28(0x50)
	None TargetItems; // 0x78(0x50)
	None SourceToTarget; // 0xc8(0x50)
	None SourceAsset; // 0x118(0x28)
	None TargetAsset; // 0x140(0x28)
	None ObjectBaseClass; // 0x28(0x08)
	None bHasBlueprintClasses; // 0x30(0x01)
	None Objects; // 0x38(0x10)
	None WeakObjects; // 0x48(0x10)
	None bUseWeakReferences; // 0x58(0x01)
	None bIsFullyLoaded; // 0x59(0x01)
	None ReferencedObjects; // 0x28(0x10)
	None bPainCausing; // 0x268(0x01)
	None DamagePerSec; // 0x26c(0x04)
	None DamageType; // 0x270(0x08)
	None PainInterval; // 0x278(0x04)
	None bEntryPain; // 0x27c(0x01)
	None BACKUP_bPainCausing; // 0x27c(0x01)
	None DamageInstigator; // 0x280(0x08)
	None Channels; // 0x28(0x04)
	None EmitterName; // 0x28(0x08)
	None SubUVDataOffset; // 0x30(0x04)
	None EmitterRenderMode; // 0x34(0x01)
	None SignificanceLevel; // 0x35(0x01)
	None bUseLegacySpawningBehavior; // 0x37(0x01)
	None ConvertedModules; // 0x37(0x01)
	None bIsSoloing; // 0x37(0x01)
	None bCookedOut; // 0x37(0x01)
	None bDisabledLODsKeepEmitterAlive; // 0x37(0x01)
	None bDisableWhenInsignficant; // 0x38(0x01)
	None LODLevels; // 0x40(0x10)
	None PeakActiveParticles; // 0x50(0x04)
	None InitialAllocationCount; // 0x54(0x04)
	None QualityLevelSpawnRateScale; // 0x58(0x04)
	None DetailModeBitmask; // 0x5c(0x04)
	None m_ParticleChannels; // 0x1b8(0x04)
	None Level; // 0x28(0x04)
	None bEnabled; // 0x2c(0x01)
	None RequiredModule; // 0x30(0x08)
	None Modules; // 0x38(0x10)
	None TypeDataModule; // 0x48(0x08)
	None SpawnModule; // 0x50(0x08)
	None EventGenerator; // 0x58(0x08)
	None SpawningModules; // 0x60(0x10)
	None SpawnModules; // 0x70(0x10)
	None UpdateModules; // 0x80(0x10)
	None OrbitModules; // 0x90(0x10)
	None EventReceiverModules; // 0xa0(0x10)
	None ConvertedModules; // 0xb0(0x01)
	None PeakActiveParticles; // 0xb4(0x04)
	None bAlwaysInWorldSpace; // 0x30(0x01)
	None Acceleration; // 0x38(0x48)
	None bApplyOwnerScale; // 0x80(0x01)
	None Acceleration; // 0x38(0x0c)
	None DragCoefficient; // 0x38(0x08)
	None DragCoefficientRaw; // 0x40(0x30)
	None DragScale; // 0x38(0x08)
	None DragScaleRaw; // 0x40(0x30)
	None AccelOverLife; // 0x38(0x48)
	None EndPoint0; // 0x30(0x0c)
	None EndPoint1; // 0x3c(0x0c)
	None Range; // 0x48(0x30)
	None Strength; // 0x78(0x30)
	None EmitterName; // 0x30(0x08)
	None Range; // 0x38(0x30)
	None bStrengthByDistance; // 0x68(0x01)
	None Strength; // 0x70(0x30)
	None bAffectBaseVelocity; // 0xa0(0x01)
	None SelectionMethod; // 0xa4(0x01)
	None bRenewSource; // 0xa8(0x01)
	None bInheritSourceVel; // 0xa8(0x01)
	None LastSelIndex; // 0xac(0x04)
	None Position; // 0x30(0x48)
	None Range; // 0x78(0x30)
	None Strength; // 0xa8(0x30)
	None StrengthByDistance; // 0xd8(0x01)
	None bAffectBaseVelocity; // 0xd8(0x01)
	None bOverrideVelocity; // 0xd8(0x01)
	None bUseWorldSpacePosition; // 0xd8(0x01)
	None Positive_X; // 0xd8(0x01)
	None Positive_Y; // 0xd8(0x01)
	None Positive_Z; // 0xd8(0x01)
	None Negative_X; // 0xd8(0x01)
	None Negative_Y; // 0xd9(0x01)
	None Negative_Z; // 0xd9(0x01)
	None Position; // 0x30(0x0c)
	None Radius; // 0x3c(0x04)
	None Strength; // 0x40(0x08)
	None StrengthRaw; // 0x48(0x30)
	None ModifierType; // 0x30(0x01)
	None PositionOptions; // 0x34(0x04)
	None Position; // 0x38(0x48)
	None TangentOptions; // 0x80(0x04)
	None Tangent; // 0x88(0x48)
	None bAbsoluteTangent; // 0xd0(0x01)
	None StrengthOptions; // 0xd4(0x04)
	None Strength; // 0xd8(0x30)
	None bLowFreq_Enabled; // 0x30(0x01)
	None Frequency; // 0x34(0x04)
	None Frequency_LowRange; // 0x38(0x04)
	None NoiseRange; // 0x40(0x48)
	None NoiseRangeScale; // 0x88(0x30)
	None bNRScaleEmitterTime; // 0xb8(0x01)
	None NoiseSpeed; // 0xc0(0x48)
	None bSmooth; // 0x108(0x01)
	None NoiseLockRadius; // 0x10c(0x04)
	None bNoiseLock; // 0x110(0x01)
	None bOscillate; // 0x110(0x01)
	None NoiseLockTime; // 0x114(0x04)
	None NoiseTension; // 0x118(0x04)
	None bUseNoiseTangents; // 0x11c(0x01)
	None NoiseTangentStrength; // 0x120(0x30)
	None NoiseTessellation; // 0x150(0x04)
	None bTargetNoise; // 0x154(0x01)
	None FrequencyDistance; // 0x158(0x04)
	None bApplyNoiseScale; // 0x15c(0x01)
	None NoiseScale; // 0x160(0x30)
	None SourceMethod; // 0x30(0x01)
	None SourceName; // 0x34(0x08)
	None bSourceAbsolute; // 0x3c(0x01)
	None Source; // 0x40(0x48)
	None bLockSource; // 0x88(0x01)
	None SourceTangentMethod; // 0x8c(0x01)
	None SourceTangent; // 0x90(0x48)
	None bLockSourceTangent; // 0xd8(0x01)
	None SourceStrength; // 0xe0(0x30)
	None bLockSourceStength; // 0x110(0x01)
	None TargetMethod; // 0x30(0x01)
	None TargetName; // 0x34(0x08)
	None Target; // 0x40(0x48)
	None bTargetAbsolute; // 0x88(0x01)
	None bLockTarget; // 0x88(0x01)
	None TargetTangentMethod; // 0x8c(0x01)
	None TargetTangent; // 0x90(0x48)
	None bLockTargetTangent; // 0xd8(0x01)
	None TargetStrength; // 0xe0(0x30)
	None bLockTargetStength; // 0x110(0x01)
	None LockRadius; // 0x114(0x04)
	None CameraOffset; // 0x30(0x30)
	None bSpawnTimeOnly; // 0x60(0x01)
	None UpdateMethod; // 0x64(0x01)
	None DampingFactor; // 0x30(0x48)
	None DampingFactorRotation; // 0x78(0x48)
	None MaxCollisions; // 0xc0(0x30)
	None CollisionCompletionOption; // 0xf0(0x01)
	None CollisionTypes; // 0xf8(0x10)
	None bApplyPhysics; // 0x110(0x01)
	None bIgnoreTriggerVolumes; // 0x110(0x01)
	None ParticleMass; // 0x118(0x30)
	None DirScalar; // 0x148(0x04)
	None bPawnsDoNotDecrementCount; // 0x14c(0x01)
	None bOnlyVerticalNormalsDecrementCount; // 0x14c(0x01)
	None VerticalFudgeFactor; // 0x150(0x04)
	None DelayAmount; // 0x158(0x30)
	None bDropDetail; // 0x188(0x01)
	None bCollideOnlyIfVisible; // 0x188(0x01)
	None bIgnoreSourceActor; // 0x188(0x01)
	None MaxCollisionDistance; // 0x18c(0x04)
	None Resilience; // 0x30(0x30)
	None ResilienceScaleOverLife; // 0x60(0x30)
	None Friction; // 0x90(0x04)
	None RandomSpread; // 0x94(0x04)
	None RandomDistribution; // 0x98(0x04)
	None RadiusScale; // 0x9c(0x04)
	None RadiusBias; // 0xa0(0x04)
	None Response; // 0xa4(0x01)
	None CollisionMode; // 0xa5(0x01)
	None StartColor; // 0x30(0x48)
	None StartAlpha; // 0x78(0x30)
	None bClampAlpha; // 0xa8(0x01)
	None RandomSeedInfo; // 0xb0(0x20)
	None ColorOverLife; // 0x30(0x48)
	None AlphaOverLife; // 0x78(0x30)
	None bClampAlpha; // 0xa8(0x01)
	None ColorScaleOverLife; // 0x30(0x48)
	None AlphaScaleOverLife; // 0x78(0x30)
	None bEmitterTime; // 0xa8(0x01)
	None Events; // 0x30(0x10)
	None EventGeneratorType; // 0x30(0x01)
	None EventName; // 0x34(0x08)
	None bStopSpawning; // 0x40(0x01)
	None SpawnCount; // 0x40(0x30)
	None bUseParticleTime; // 0x70(0x01)
	None bUsePSysLocation; // 0x70(0x01)
	None bInheritVelocity; // 0x70(0x01)
	None InheritVelocityScale; // 0x78(0x48)
	None PhysicalMaterials; // 0xc0(0x10)
	None bBanPhysicalMaterials; // 0xd0(0x01)
	None LowerLeftCorner; // 0x30(0x48)
	None UpperRightCorner; // 0x78(0x48)
	None bAbsolute; // 0xc0(0x01)
	None bKillInside; // 0xc0(0x01)
	None bAxisAlignedAndFixedSize; // 0xc0(0x01)
	None Height; // 0x30(0x30)
	None bAbsolute; // 0x60(0x01)
	None bFloor; // 0x60(0x01)
	None bApplyPSysScale; // 0x60(0x01)
	None Lifetime; // 0x30(0x30)
	None RandomSeedInfo; // 0x60(0x20)
	None bUseInverseSquaredFalloff; // 0x30(0x01)
	None bAffectsTranslucency; // 0x31(0x01)
	None bPreviewLightRadius; // 0x32(0x01)
	None SpawnFraction; // 0x34(0x04)
	None ColorScaleOverLife; // 0x38(0x48)
	None BrightnessOverLife; // 0x80(0x30)
	None RadiusScale; // 0xb0(0x30)
	None LightExponent; // 0xe0(0x30)
	None LightingChannels; // 0x110(0x01)
	None VolumetricScatteringIntensity; // 0x114(0x04)
	None bHighQualityLights; // 0x118(0x01)
	None bShadowCastingLights; // 0x119(0x01)
	None RandomSeedInfo; // 0x120(0x20)
	None StartLocation; // 0x30(0x48)
	None DistributeOverNPoints; // 0x78(0x04)
	None DistributeThreshold; // 0x7c(0x04)
	None RandomSeedInfo; // 0x80(0x20)
	None SourceType; // 0x30(0x01)
	None UniversalOffset; // 0x34(0x0c)
	None SourceLocations; // 0x40(0x10)
	None SelectionMethod; // 0x50(0x01)
	None bUpdatePositionEachFrame; // 0x54(0x01)
	None bOrientMeshEmitters; // 0x54(0x01)
	None bInheritBoneVelocity; // 0x54(0x01)
	None InheritVelocityScale; // 0x58(0x04)
	None SkelMeshActorParamName; // 0x5c(0x08)
	None NumPreSelectedIndices; // 0x64(0x04)
	None Location; // 0x30(0x48)
	None LocationOffset; // 0x78(0x48)
	None ScaleFactor; // 0xc0(0x48)
	None Direction; // 0x108(0x48)
	None EmitterName; // 0x30(0x08)
	None SelectionMethod; // 0x38(0x01)
	None InheritSourceVelocity; // 0x3c(0x01)
	None InheritSourceVelocityScale; // 0x40(0x04)
	None bInheritSourceRotation; // 0x44(0x01)
	None InheritSourceRotationScale; // 0x48(0x04)
	None EmitterName; // 0x30(0x08)
	None Positive_X; // 0x30(0x01)
	None Positive_Y; // 0x30(0x01)
	None Positive_Z; // 0x30(0x01)
	None Negative_X; // 0x30(0x01)
	None Negative_Y; // 0x30(0x01)
	None Negative_Z; // 0x30(0x01)
	None SurfaceOnly; // 0x30(0x01)
	None Velocity; // 0x30(0x01)
	None VelocityScale; // 0x38(0x30)
	None StartLocation; // 0x68(0x48)
	None RadialVelocity; // 0xb0(0x01)
	None StartRadius; // 0xb8(0x30)
	None StartHeight; // 0xe8(0x30)
	None HeightAxis; // 0x118(0x01)
	None RandomSeedInfo; // 0x120(0x20)
	None StartRadius; // 0xb0(0x30)
	None RandomSeedInfo; // 0xe0(0x20)
	None StartOffset; // 0x30(0x48)
	None Height; // 0x78(0x30)
	None Angle; // 0xa8(0x30)
	None Thickness; // 0xd8(0x30)
	None RandomSeedInfo; // 0x80(0x20)
	None MeshMaterials; // 0x30(0x10)
	None StartRotation; // 0x30(0x48)
	None bInheritParent; // 0x78(0x01)
	None RandomSeedInfo; // 0x80(0x20)
	None StartRotationRate; // 0x30(0x48)
	None RandomSeedInfo; // 0x78(0x20)
	None LifeMultiplier; // 0x30(0x48)
	None RotRate; // 0x30(0x48)
	None bScaleRotRate; // 0x78(0x01)
	None bUseEmitterTime; // 0x30(0x01)
	None ChainMode; // 0x38(0x01)
	None OffsetAmount; // 0x40(0x48)
	None OffsetOptions; // 0x88(0x04)
	None RotationAmount; // 0x90(0x48)
	None RotationOptions; // 0xd8(0x04)
	None RotationRateAmount; // 0xe0(0x48)
	None RotationRateOptions; // 0x128(0x04)
	None LockAxisFlags; // 0x30(0x01)
	None DynamicParams; // 0x30(0x10)
	None UpdateFlags; // 0x40(0x04)
	None bUsesVelocity; // 0x44(0x01)
	None RandomSeedInfo; // 0x48(0x20)
	None PivotOffset; // 0x30(0x08)
	None Material; // 0x30(0x08)
	None MinFacingCameraBlendDistance; // 0x38(0x04)
	None MaxFacingCameraBlendDistance; // 0x3c(0x04)
	None EmitterOrigin; // 0x40(0x0c)
	None EmitterRotation; // 0x4c(0x0c)
	None ScreenAlignment; // 0x58(0x01)
	None bUseLocalSpace; // 0x59(0x01)
	None bKillOnDeactivate; // 0x59(0x01)
	None bKillOnCompleted; // 0x59(0x01)
	None SortMode; // 0x5a(0x01)
	None bUseLegacyEmitterTime; // 0x5b(0x01)
	None bRemoveHMDRoll; // 0x5b(0x01)
	None bEmitterDurationUseRange; // 0x5b(0x01)
	None EmitterDuration; // 0x5c(0x04)
	None SpawnRate; // 0x60(0x30)
	None BurstList; // 0x90(0x10)
	None EmitterDelay; // 0xa0(0x04)
	None EmitterDelayLow; // 0xa4(0x04)
	None bDelayFirstLoopOnly; // 0xa8(0x01)
	None InterpolationMethod; // 0xa9(0x01)
	None bScaleUV; // 0xaa(0x01)
	None bEmitterDelayUseRange; // 0xaa(0x01)
	None ParticleBurstMethod; // 0xab(0x01)
	None bOverrideSystemMacroUV; // 0xac(0x01)
	None bUseMaxDrawCount; // 0xac(0x01)
	None OpacitySourceMode; // 0xad(0x01)
	None EmitterNormalsMode; // 0xae(0x01)
	None bOrbitModuleAffectsVelocityAlignment; // 0xaf(0x01)
	None SubImages_Horizontal; // 0xb0(0x04)
	None SubImages_Vertical; // 0xb4(0x04)
	None RandomImageTime; // 0xb8(0x04)
	None RandomImageChanges; // 0xbc(0x04)
	None MacroUVPosition; // 0xc0(0x0c)
	None MacroUVRadius; // 0xcc(0x04)
	None UVFlippingMode; // 0xd0(0x01)
	None BoundingMode; // 0xd1(0x01)
	None bDurationRecalcEachLoop; // 0xd2(0x01)
	None NormalsSphereCenter; // 0xd4(0x0c)
	None AlphaThreshold; // 0xe0(0x04)
	None EmitterLoops; // 0xe4(0x04)
	None CutoutTexture; // 0xe8(0x08)
	None MaxDrawCount; // 0xf0(0x04)
	None EmitterDurationLow; // 0xf4(0x04)
	None NormalsCylinderDirection; // 0xf8(0x0c)
	None NamedMaterialOverrides; // 0x108(0x10)
	None StartRotation; // 0x30(0x30)
	None RandomSeedInfo; // 0x60(0x20)
	None RotationOverLife; // 0x30(0x30)
	None Scale; // 0x60(0x01)
	None StartRotationRate; // 0x30(0x30)
	None RandomSeedInfo; // 0x60(0x20)
	None LifeMultiplier; // 0x30(0x30)
	None StartSize; // 0x30(0x48)
	None RandomSeedInfo; // 0x78(0x20)
	None SizeScaleByTime; // 0x30(0x48)
	None bEnableX; // 0x78(0x01)
	None bEnableY; // 0x78(0x01)
	None bEnableZ; // 0x78(0x01)
	None LifeMultiplier; // 0x30(0x48)
	None MultiplyX; // 0x78(0x01)
	None MultiplyY; // 0x78(0x01)
	None MultiplyZ; // 0x78(0x01)
	None SizeScale; // 0x30(0x48)
	None EnableX; // 0x78(0x01)
	None EnableY; // 0x78(0x01)
	None EnableZ; // 0x78(0x01)
	None SpeedScale; // 0x30(0x08)
	None MaxScale; // 0x38(0x08)
	None SourceMovementScale; // 0x30(0x48)
	None bProcessSpawnRate; // 0x30(0x01)
	None bProcessBurstList; // 0x30(0x01)
	None Rate; // 0x38(0x30)
	None RateScale; // 0x68(0x30)
	None ParticleBurstMethod; // 0x98(0x01)
	None BurstList; // 0xa0(0x10)
	None BurstScale; // 0xb0(0x30)
	None bApplyGlobalSpawnRateScale; // 0xe0(0x01)
	None UnitScalar; // 0x38(0x04)
	None MovementTolerance; // 0x3c(0x04)
	None SpawnPerUnit; // 0x40(0x30)
	None MaxFrameDistance; // 0x70(0x04)
	None bIgnoreSpawnRateWhenMoving; // 0x74(0x01)
	None bIgnoreMovementAlongX; // 0x74(0x01)
	None bIgnoreMovementAlongY; // 0x74(0x01)
	None bIgnoreMovementAlongZ; // 0x74(0x01)
	None Animation; // 0x30(0x08)
	None SubImageIndex; // 0x38(0x30)
	None bUseRealTime; // 0x68(0x01)
	None bUseEmitterTime; // 0x70(0x01)
	None FrameRate; // 0x78(0x30)
	None StartingFrame; // 0xa8(0x04)
	None SourceMethod; // 0x30(0x01)
	None SourceName; // 0x34(0x08)
	None SourceStrength; // 0x40(0x30)
	None bLockSourceStength; // 0x70(0x01)
	None SourceOffsetCount; // 0x74(0x04)
	None SourceOffsetDefaults; // 0x78(0x10)
	None SelectionMethod; // 0x88(0x01)
	None bInheritRotation; // 0x8c(0x01)
	None bDeadTrailsOnDeactivate; // 0x30(0x01)
	None bEnablePreviousTangentRecalculation; // 0x30(0x01)
	None bTangentRecalculationEveryFrame; // 0x30(0x01)
	None TilingDistance; // 0x34(0x04)
	None DistanceTessellationStepSize; // 0x38(0x04)
	None TangentTessellationStepSize; // 0x3c(0x04)
	None WidthTessellationStepSize; // 0x40(0x04)
	None BeamMethod; // 0x30(0x01)
	None TextureTile; // 0x34(0x04)
	None TextureTileDistance; // 0x38(0x04)
	None Sheets; // 0x3c(0x04)
	None MaxBeamCount; // 0x40(0x04)
	None Speed; // 0x44(0x04)
	None InterpolationPoints; // 0x48(0x04)
	None bAlwaysOn; // 0x4c(0x01)
	None UpVectorStepSize; // 0x50(0x04)
	None BranchParentName; // 0x54(0x08)
	None Distance; // 0x60(0x30)
	None TaperMethod; // 0x90(0x01)
	None TaperFactor; // 0x98(0x30)
	None TaperScale; // 0xc8(0x30)
	None RenderGeometry; // 0xf8(0x01)
	None RenderDirectLine; // 0xf8(0x01)
	None RenderLines; // 0xf8(0x01)
	None RenderTessellation; // 0xf8(0x01)
	None EmitterInfo; // 0x30(0x280)
	None ResourceData; // 0x2b0(0x160)
	None CameraMotionBlurAmount; // 0x410(0x04)
	None bClearExistingParticlesOnInit; // 0x414(0x01)
	None Mesh; // 0x30(0x08)
	None LODSizeScale; // 0x40(0x04)
	None bUseStaticMeshLODs; // 0x44(0x01)
	None CastShadows; // 0x44(0x01)
	None DoCollisions; // 0x44(0x01)
	None MeshAlignment; // 0x45(0x01)
	None bOverrideMaterial; // 0x46(0x01)
	None bOverrideDefaultMotionBlurSettings; // 0x46(0x01)
	None bEnableMotionBlur; // 0x46(0x01)
	None RollPitchYawRange; // 0x48(0x48)
	None AxisLockOption; // 0x90(0x01)
	None bCameraFacing; // 0x91(0x01)
	None CameraFacingUpAxisOption; // 0x92(0x01)
	None CameraFacingOption; // 0x93(0x01)
	None bApplyParticleRotationAsSpin; // 0x94(0x01)
	None bFaceCameraDirectionRatherThanPosition; // 0x94(0x01)
	None bCollisionsConsiderPartilceSize; // 0x94(0x01)
	None MaxTessellationBetweenParticles; // 0x30(0x04)
	None SheetsPerTrail; // 0x34(0x04)
	None MaxTrailCount; // 0x38(0x04)
	None MaxParticleInTrailCount; // 0x3c(0x04)
	None bDeadTrailsOnDeactivate; // 0x40(0x01)
	None bDeadTrailsOnSourceLoss; // 0x40(0x01)
	None bClipSourceSegement; // 0x40(0x01)
	None bEnablePreviousTangentRecalculation; // 0x40(0x01)
	None bTangentRecalculationEveryFrame; // 0x40(0x01)
	None bSpawnInitialParticle; // 0x40(0x01)
	None RenderAxis; // 0x44(0x01)
	None TangentSpawningScalar; // 0x48(0x04)
	None bRenderGeometry; // 0x4c(0x01)
	None bRenderSpawnPoints; // 0x4c(0x01)
	None bRenderTangents; // 0x4c(0x01)
	None bRenderTessellation; // 0x4c(0x01)
	None TilingDistance; // 0x50(0x04)
	None DistanceTessellationStepSize; // 0x54(0x04)
	None bEnableTangentDiffInterpScale; // 0x58(0x01)
	None TangentTessellationScalar; // 0x5c(0x04)
	None bOverrideGlobalVectorFieldTightness; // 0x30(0x01)
	None GlobalVectorFieldScale; // 0x34(0x04)
	None GlobalVectorFieldTightness; // 0x38(0x04)
	None VectorField; // 0x30(0x08)
	None RelativeTranslation; // 0x38(0x0c)
	None RelativeRotation; // 0x44(0x0c)
	None RelativeScale3D; // 0x50(0x0c)
	None Intensity; // 0x5c(0x04)
	None Tightness; // 0x60(0x04)
	None bIgnoreComponentTransform; // 0x64(0x01)
	None bTileX; // 0x64(0x01)
	None bTileY; // 0x64(0x01)
	None bTileZ; // 0x64(0x01)
	None bUseFixDT; // 0x64(0x01)
	None MinInitialRotation; // 0x30(0x0c)
	None MaxInitialRotation; // 0x3c(0x0c)
	None RotationRate; // 0x30(0x0c)
	None VectorFieldScale; // 0x30(0x08)
	None VectorFieldScaleRaw; // 0x38(0x30)
	None VectorFieldScaleOverLife; // 0x30(0x08)
	None VectorFieldScaleOverLifeRaw; // 0x38(0x30)
	None bInWorldSpace; // 0x30(0x01)
	None bApplyOwnerScale; // 0x30(0x01)
	None StartVelocity; // 0x38(0x48)
	None StartVelocityRadial; // 0x80(0x30)
	None RandomSeedInfo; // 0xb0(0x20)
	None Angle; // 0x38(0x30)
	None Velocity; // 0x68(0x30)
	None Direction; // 0x98(0x0c)
	None Scale; // 0x38(0x48)
	None VelOverLife; // 0x38(0x48)
	None Absolute; // 0x80(0x01)
	None UpdateTime_FPS; // 0x30(0x04)
	None UpdateTime_Delta; // 0x34(0x04)
	None WarmupTime; // 0x38(0x04)
	None WarmupTickRate; // 0x3c(0x04)
	None Emitters; // 0x40(0x10)
	None PreviewComponent; // 0x50(0x08)
	None CurveEdSetup; // 0x58(0x08)
	None LODDistanceCheckTime; // 0x60(0x04)
	None MacroUVRadius; // 0x64(0x04)
	None LODDistances; // 0x68(0x10)
	None LODSettings; // 0x78(0x10)
	None FixedRelativeBoundingBox; // 0x88(0x1c)
	None SecondsBeforeInactive; // 0xa4(0x04)
	None Delay; // 0xa8(0x04)
	None DelayLow; // 0xac(0x04)
	None bOrientZAxisTowardCamera; // 0xb0(0x01)
	None bUseFixedRelativeBoundingBox; // 0xb0(0x01)
	None bShouldResetPeakCounts; // 0xb0(0x01)
	None bHasPhysics; // 0xb0(0x01)
	None bUseRealtimeThumbnail; // 0xb0(0x01)
	None ThumbnailImageOutOfDate; // 0xb0(0x01)
	None bUseDelayRange; // 0xb1(0x01)
	None bAllowManagedTicking; // 0xb1(0x01)
	None bAutoDeactivate; // 0xb1(0x01)
	None bRegenerateLODDuplicate; // 0xb1(0x01)
	None SystemUpdateMode; // 0xb2(0x01)
	None LODMethod; // 0xb3(0x01)
	None InsignificantReaction; // 0xb4(0x01)
	None OcclusionBoundsMethod; // 0xb5(0x01)
	None MaxSignificanceLevel; // 0xb7(0x01)
	None MinTimeBetweenTicks; // 0xb8(0x04)
	None InsignificanceDelay; // 0xbc(0x04)
	None MacroUVPosition; // 0xc0(0x0c)
	None CustomOcclusionBounds; // 0xcc(0x1c)
	None SoloTracking; // 0xe8(0x10)
	None NamedMaterialSlots; // 0xf8(0x10)
	None ClipIDNumber; // 0x28(0x04)
	None bAIPerceptionSystemCompatibilityMode; // 0xb0(0x01)
	None LastRemoteNoisePosition; // 0xb4(0x0c)
	None NoiseLifetime; // 0xc0(0x04)
	None LastRemoteNoiseVolume; // 0xc4(0x04)
	None LastRemoteNoiseTime; // 0xc8(0x04)
	None LastLocalNoiseVolume; // 0xcc(0x04)
	None LastLocalNoiseTime; // 0xd0(0x04)
	None StrengthMultiplyer; // 0xb0(0x04)
	None SkeletalMeshComponent; // 0xb8(0x08)
	None Friction; // 0x28(0x04)
	None FrictionCombineMode; // 0x2c(0x01)
	None bOverrideFrictionCombineMode; // 0x2d(0x01)
	None Restitution; // 0x30(0x04)
	None RestitutionCombineMode; // 0x34(0x01)
	None bOverrideRestitutionCombineMode; // 0x35(0x01)
	None Density; // 0x38(0x04)
	None RaiseMassToPower; // 0x3c(0x04)
	None DestructibleDamageThresholdScale; // 0x40(0x04)
	None PhysicalMaterialProperty; // 0x48(0x08)
	None SurfaceType; // 0x50(0x01)
	None TireFrictionScale; // 0x54(0x04)
	None TireFrictionScales; // 0x58(0x10)
	None UVChannelIndex; // 0x28(0x04)
	None AddressX; // 0x2c(0x01)
	None AddressY; // 0x2d(0x01)
	None BoundsBodies; // 0x30(0x10)
	None SkeletalBodySetups; // 0x40(0x10)
	None ConstraintSetup; // 0x50(0x10)
	None SolverIterations; // 0x60(0x18)
	None bNotForDedicatedServer; // 0x78(0x01)
	None ThumbnailInfo; // 0x120(0x08)
	None BodySetup; // 0x128(0x10)
	None bSkipScaleFromAnimation; // 0x250(0x01)
	None PhysicalAnimationData; // 0x258(0x10)
	None ImpactThreshold; // 0x28(0x04)
	None ImpactReFireDelay; // 0x2c(0x04)
	None DefaultImpactSound; // 0x30(0x08)
	None LastImpactSoundTime; // 0x38(0x04)
	None ConstraintComp; // 0x220(0x08)
	None ConstraintActor1; // 0x228(0x08)
	None ConstraintActor2; // 0x230(0x08)
	None bDisableCollision; // 0x238(0x01)
	None ConstraintActor1; // 0x208(0x08)
	None ComponentName1; // 0x210(0x08)
	None ConstraintActor2; // 0x218(0x08)
	None ComponentName2; // 0x220(0x08)
	None ConstraintSetup; // 0x238(0x08)
	None OnConstraintBroken; // 0x240(0x10)
	None ConstraintInstance; // 0x250(0x1b8)
	None DefaultInstance; // 0x28(0x1b8)
	None ProfileHandles; // 0x1e0(0x10)
	None DefaultProfile; // 0x1f0(0x104)
	None GrabbedComponent; // 0xb0(0x08)
	None bSoftAngularConstraint; // 0xc0(0x01)
	None bSoftLinearConstraint; // 0xc0(0x01)
	None bInterpolateTarget; // 0xc0(0x01)
	None LinearDamping; // 0xc4(0x04)
	None LinearStiffness; // 0xc8(0x04)
	None AngularDamping; // 0xcc(0x04)
	None AngularStiffness; // 0xd0(0x04)
	None InterpolationSpeed; // 0x140(0x04)
	None DefaultGravityZ; // 0x38(0x04)
	None DefaultTerminalVelocity; // 0x3c(0x04)
	None DefaultFluidFriction; // 0x40(0x04)
	None SimulateScratchMemorySize; // 0x44(0x04)
	None RagdollAggregateThreshold; // 0x48(0x04)
	None TriangleMeshTriangleMinAreaThreshold; // 0x4c(0x04)
	None bEnableShapeSharing; // 0x50(0x01)
	None bEnablePCM; // 0x51(0x01)
	None bEnableStabilization; // 0x52(0x01)
	None bWarnMissingLocks; // 0x53(0x01)
	None bEnable2DPhysics; // 0x54(0x01)
	None PhysicErrorCorrection; // 0x58(0x34)
	None LockedAxis; // 0x8c(0x01)
	None DefaultDegreesOfFreedom; // 0x8d(0x01)
	None BounceThresholdVelocity; // 0x90(0x04)
	None FrictionCombineMode; // 0x94(0x01)
	None RestitutionCombineMode; // 0x95(0x01)
	None MaxAngularVelocity; // 0x98(0x04)
	None MaxDepenetrationVelocity; // 0x9c(0x04)
	None ContactOffsetMultiplier; // 0xa0(0x04)
	None MinContactOffset; // 0xa4(0x04)
	None MaxContactOffset; // 0xa8(0x04)
	None bSimulateSkeletalMeshOnDedicatedServer; // 0xac(0x01)
	None DefaultShapeComplexity; // 0xad(0x01)
	None bDefaultHasComplexCollision; // 0xae(0x01)
	None bSuppressFaceRemapTable; // 0xaf(0x01)
	None bSupportUVFromHitResults; // 0xb0(0x01)
	None bDisableActiveActors; // 0xb1(0x01)
	None bDisableKinematicStaticPairs; // 0xb2(0x01)
	None bDisableKinematicKinematicPairs; // 0xb3(0x01)
	None bDisableCCD; // 0xb4(0x01)
	None bEnableEnhancedDeterminism; // 0xb5(0x01)
	None AnimPhysicsMinDeltaTime; // 0xb8(0x04)
	None bSimulateAnimPhysicsAfterReset; // 0xbc(0x01)
	None MaxPhysicsDeltaTime; // 0xc0(0x04)
	None bSubstepping; // 0xc4(0x01)
	None bSubsteppingAsync; // 0xc5(0x01)
	None MaxSubstepDeltaTime; // 0xc8(0x04)
	None MaxSubsteps; // 0xcc(0x04)
	None SyncSceneSmoothingFactor; // 0xd0(0x04)
	None InitialAverageFrameRate; // 0xd4(0x04)
	None PhysXTreeRebuildRate; // 0xd8(0x04)
	None PhysicalSurfaces; // 0xe0(0x10)
	None DefaultBroadphaseSettings; // 0xf0(0x40)
	None ChaosSettings; // 0x130(0x03)
	None SpringStiffness; // 0x208(0x04)
	None SpringDamping; // 0x20c(0x04)
	None SpringLengthAtRest; // 0x210(0x04)
	None SpringRadius; // 0x214(0x04)
	None SpringChannel; // 0x218(0x01)
	None bIgnoreSelf; // 0x219(0x01)
	None SpringCompression; // 0x21c(0x04)
	None ThrusterComponent; // 0x220(0x08)
	None ThrustStrength; // 0x208(0x04)
	None MeshComp; // 0x220(0x08)
	None SceneComponent; // 0x228(0x08)
	None PlanarReflectionComponent; // 0x230(0x08)
	None bShowPreviewPlane; // 0x238(0x01)
	None PrimitiveRenderMode; // 0x208(0x01)
	None CaptureSource; // 0x209(0x01)
	None bCaptureEveryFrame; // 0x20a(0x01)
	None bCaptureOnMovement; // 0x20a(0x01)
	None bAlwaysPersistRenderingState; // 0x20b(0x01)
	None HiddenComponents; // 0x210(0x10)
	None HiddenActors; // 0x220(0x10)
	None ShowOnlyComponents; // 0x230(0x10)
	None ShowOnlyActors; // 0x240(0x10)
	None LODDistanceFactor; // 0x250(0x04)
	None MaxViewDistanceOverride; // 0x254(0x04)
	None CaptureSortPriority; // 0x258(0x04)
	None bUseRayTracingIfEnabled; // 0x25c(0x01)
	None ShowFlagSettings; // 0x260(0x10)
	None ProfilingEventName; // 0x280(0x10)
	None PreviewBox; // 0x2a0(0x08)
	None NormalDistortionStrength; // 0x2a8(0x04)
	None PrefilterRoughness; // 0x2ac(0x04)
	None PrefilterRoughnessDistance; // 0x2b0(0x04)
	None ScreenPercentage; // 0x2b4(0x04)
	None ExtraFOV; // 0x2b8(0x04)
	None DistanceFromPlaneFadeStart; // 0x2bc(0x04)
	None DistanceFromPlaneFadeEnd; // 0x2c0(0x04)
	None DistanceFromPlaneFadeoutStart; // 0x2c4(0x04)
	None DistanceFromPlaneFadeoutEnd; // 0x2c8(0x04)
	None AngleFromPlaneFadeStart; // 0x2cc(0x04)
	None AngleFromPlaneFadeEnd; // 0x2d0(0x04)
	None bShowPreviewPlane; // 0x2d4(0x01)
	None bRenderSceneTwoSided; // 0x2d5(0x01)
	None InfluenceRadiusScale; // 0x280(0x04)
	None PreviewInfluenceRadius; // 0x288(0x08)
	None PreviewCaptureBox; // 0x290(0x08)
	None PlatformChangedToLaptopModeDelegate; // 0xb0(0x10)
	None PlatformChangedToTabletModeDelegate; // 0xc0(0x10)
	None OriginalURL; // 0x28(0x10)
	None ResponseCode; // 0x38(0x04)
	None Tag; // 0x3c(0x04)
	None StringResponse; // 0x40(0x10)
	None BinaryResponse; // 0x50(0x10)
	None MaxFullAxisLength; // 0x28(0x04)
	None MaxFullAxisDeadZoneLength; // 0x2c(0x04)
	None MaxDeltaAxisLength; // 0x30(0x04)
	None SwipeMaxDuration; // 0x34(0x04)
	None SwipeMinLength; // 0x38(0x04)
	None SwipeDirectionAngleThreshold; // 0x3c(0x04)
	None TapMaxDuration; // 0x40(0x04)
	None TapMaxLength; // 0x44(0x04)
	None DoubleTapMaxLength; // 0x48(0x04)
	None DoubleTapMaxDuration; // 0x4c(0x04)
	None TouchRegions; // 0x50(0x10)
	None PointLightComponent; // 0x230(0x08)
	None bUseInverseSquaredFalloff; // 0x350(0x01)
	None LightFalloffExponent; // 0x354(0x04)
	None SourceRadius; // 0x358(0x04)
	None SoftSourceRadius; // 0x35c(0x04)
	None SourceLength; // 0x360(0x04)
	None PoseContainer; // 0x80(0x90)
	None bAdditivePose; // 0x110(0x01)
	None BasePoseIndex; // 0x114(0x04)
	None RetargetSource; // 0x118(0x08)
	None Node; // 0x28(0x08)
	None PoseWatchColour; // 0x30(0x04)
	None Settings; // 0x210(0x550)
	None Priority; // 0x760(0x04)
	None BlendRadius; // 0x764(0x04)
	None BlendWeight; // 0x768(0x04)
	None bEnabled; // 0x76c(0x01)
	None bUnbound; // 0x76c(0x01)
	None Settings; // 0x260(0x550)
	None Priority; // 0x7b0(0x04)
	None BlendRadius; // 0x7b4(0x04)
	None BlendWeight; // 0x7b8(0x04)
	None bEnabled; // 0x7bc(0x01)
	None bUnbound; // 0x7bc(0x01)
	None OverrideVisibleActors; // 0x258(0x10)
	None OverrideInvisibleActors; // 0x268(0x10)
	None OverrideInvisibleLevels; // 0x278(0x10)
	None Skeleton; // 0x38(0x08)
	None SkeletalMeshes; // 0x40(0x10)
	None ProxyLODMeshReductionModuleName; // 0x38(0x08)
	None ForceComponent; // 0x220(0x08)
	None Radius; // 0x208(0x04)
	None Falloff; // 0x20c(0x01)
	None ImpulseStrength; // 0x210(0x04)
	None bImpulseVelChange; // 0x214(0x01)
	None bIgnoreOwningActor; // 0x214(0x01)
	None ForceStrength; // 0x218(0x04)
	None DestructibleDamage; // 0x21c(0x04)
	None ObjectTypesToAffect; // 0x220(0x10)
	None RectLightComponent; // 0x230(0x08)
	None SourceWidth; // 0x350(0x04)
	None SourceHeight; // 0x354(0x04)
	None BarnDoorAngle; // 0x358(0x04)
	None BarnDoorLength; // 0x35c(0x04)
	None SourceTexture; // 0x360(0x08)
	None bMobileDisableVertexFog; // 0x38(0x01)
	None MaxMobileCascades; // 0x3c(0x04)
	None MobileMSAASampleCount; // 0x40(0x01)
	None bMobileUseLegacyShadingModel; // 0x44(0x01)
	None bMobileAllowDitheredLODTransition; // 0x44(0x01)
	None bMobileAllowSoftwareOcclusionCulling; // 0x44(0x01)
	None bMobileVirtualTextures; // 0x44(0x01)
	None bDiscardUnusedQualityLevels; // 0x44(0x01)
	None bOcclusionCulling; // 0x44(0x01)
	None MinScreenRadiusForLights; // 0x48(0x04)
	None MinScreenRadiusForEarlyZPass; // 0x4c(0x04)
	None MinScreenRadiusForCSMdepth; // 0x50(0x04)
	None bPrecomputedVisibilityWarning; // 0x54(0x01)
	None bTextureStreaming; // 0x54(0x01)
	None bUseDXT5NormalMaps; // 0x54(0x01)
	None bVirtualTextures; // 0x54(0x01)
	None bVirtualTexturedLightmaps; // 0x54(0x01)
	None VirtualTextureTileSize; // 0x58(0x04)
	None VirtualTextureTileBorderSize; // 0x5c(0x04)
	None VirtualTextureFeedbackFactor; // 0x60(0x04)
	None bVirtualTextureEnableCompressZlib; // 0x64(0x01)
	None bVirtualTextureEnableCompressCrunch; // 0x64(0x01)
	None bClearCoatEnableSecondNormal; // 0x64(0x01)
	None bAnisotropicBRDF; // 0x64(0x01)
	None ReflectionCaptureResolution; // 0x68(0x04)
	None ReflectionEnvironmentLightmapMixBasedOnRoughness; // 0x6c(0x01)
	None bForwardShading; // 0x6c(0x01)
	None bVertexFoggingForOpaque; // 0x6c(0x01)
	None bAllowStaticLighting; // 0x6c(0x01)
	None bUseNormalMapsForStaticLighting; // 0x6c(0x01)
	None bGenerateMeshDistanceFields; // 0x6c(0x01)
	None bEightBitMeshDistanceFields; // 0x6c(0x01)
	None bGenerateLandscapeGIData; // 0x6c(0x01)
	None bCompressMeshDistanceFields; // 0x6d(0x01)
	None TessellationAdaptivePixelsPerTriangle; // 0x70(0x04)
	None bSeparateTranslucency; // 0x74(0x01)
	None TranslucentSortPolicy; // 0x78(0x01)
	None TranslucentSortAxis; // 0x7c(0x0c)
	None CustomDepthStencil; // 0x88(0x01)
	None bCustomDepthTaaJitter; // 0x8c(0x01)
	None bEnableAlphaChannelInPostProcessing; // 0x90(0x01)
	None NGXAppId; // 0x98(0x10)
	None bDefaultFeatureBloom; // 0xa8(0x01)
	None bDefaultFeatureAmbientOcclusion; // 0xa8(0x01)
	None bDefaultFeatureAmbientOcclusionStaticFraction; // 0xa8(0x01)
	None bDefaultFeatureAutoExposure; // 0xa8(0x01)
	None DefaultFeatureAutoExposure; // 0xac(0x01)
	None DefaultFeatureAutoExposureBias; // 0xb0(0x04)
	None bExtendDefaultLuminanceRangeInAutoExposureSettings; // 0xb4(0x01)
	None bUsePreExposure; // 0xb4(0x01)
	None bEnablePreExposureOnlyInTheEditor; // 0xb4(0x01)
	None bDefaultFeatureMotionBlur; // 0xb4(0x01)
	None bDefaultFeatureLensFlare; // 0xb4(0x01)
	None bTemporalUpsampling; // 0xb4(0x01)
	None bSSGI; // 0xb4(0x01)
	None DefaultFeatureAntiAliasing; // 0xb8(0x01)
	None DefaultLightUnits; // 0xb9(0x01)
	None DefaultBackBufferPixelFormat; // 0xba(0x01)
	None bRenderUnbuiltPreviewShadowsInGame; // 0xbc(0x01)
	None bStencilForLODDither; // 0xbc(0x01)
	None EarlyZPass; // 0xc0(0x01)
	None bEarlyZPassOnlyMaterialMasking; // 0xc4(0x01)
	None bDBuffer; // 0xc4(0x01)
	None ClearSceneMethod; // 0xc8(0x01)
	None bBasePassOutputsVelocity; // 0xcc(0x01)
	None bVertexDeformationOutputsVelocity; // 0xcc(0x01)
	None bSelectiveBasePassOutputs; // 0xcc(0x01)
	None bDefaultParticleCutouts; // 0xcc(0x01)
	None GPUSimulationTextureSizeX; // 0xd0(0x04)
	None GPUSimulationTextureSizeY; // 0xd4(0x04)
	None bGlobalClipPlane; // 0xd8(0x01)
	None GBufferFormat; // 0xdc(0x01)
	None bUseGPUMorphTargets; // 0xe0(0x01)
	None bNvidiaAftermathEnabled; // 0xe0(0x01)
	None bMultiView; // 0xe0(0x01)
	None bMobilePostProcessing; // 0xe0(0x01)
	None bMobileMultiView; // 0xe0(0x01)
	None bMobileUseHWsRGBEncoding; // 0xe0(0x01)
	None bRoundRobinOcclusion; // 0xe0(0x01)
	None bODSCapture; // 0xe0(0x01)
	None bMeshStreaming; // 0xe1(0x01)
	None WireframeCullThreshold; // 0xe4(0x04)
	None bEnableRayTracing; // 0xe8(0x01)
	None bEnableRayTracingTextureLOD; // 0xe8(0x01)
	None bSupportStationarySkylight; // 0xe8(0x01)
	None bSupportLowQualityLightmaps; // 0xe8(0x01)
	None bSupportPointLightWholeSceneShadows; // 0xe8(0x01)
	None bSupportAtmosphericFog; // 0xe8(0x01)
	None bSupportSkyAtmosphere; // 0xe8(0x01)
	None bSupportSkyAtmosphereAffectsHeightFog; // 0xe8(0x01)
	None bSupportSkinCacheShaders; // 0xe9(0x01)
	None DefaultSkinCacheBehavior; // 0xec(0x01)
	None SkinCacheSceneMemoryLimitInMB; // 0xf0(0x04)
	None bMobileEnableStaticAndCSMShadowReceivers; // 0xf4(0x01)
	None bMobileEnableMovableLightCSMShaderCulling; // 0xf4(0x01)
	None bMobileAllowDistanceFieldShadows; // 0xf4(0x01)
	None bMobileAllowMovableDirectionalLights; // 0xf4(0x01)
	None MobileNumDynamicPointLights; // 0xf8(0x04)
	None bMobileDynamicPointLightsUseStaticBranch; // 0xfc(0x01)
	None bMobileAllowMovableSpotlights; // 0xfc(0x01)
	None bSupport16BitBoneIndex; // 0xfc(0x01)
	None bGPUSkinLimit2BoneInfluences; // 0xfc(0x01)
	None bSupportDepthOnlyIndexBuffers; // 0xfc(0x01)
	None bSupportReversedIndexBuffers; // 0xfc(0x01)
	None bSupportMaterialLayers; // 0xfc(0x01)
	None bLPV; // 0xfc(0x01)
	None bSupportAllShaderPermutations; // 0x38(0x01)
	None bForceRecomputeTangents; // 0x38(0x01)
	None Density; // 0x28(0x04)
	None Diffusion; // 0x2c(0x04)
	None Gain; // 0x30(0x04)
	None GainHF; // 0x34(0x04)
	None DecayTime; // 0x38(0x04)
	None DecayHFRatio; // 0x3c(0x04)
	None ReflectionsGain; // 0x40(0x04)
	None ReflectionsDelay; // 0x44(0x04)
	None LateGain; // 0x48(0x04)
	None LateDelay; // 0x4c(0x04)
	None AirAbsorptionGainHF; // 0x50(0x04)
	None RoomRolloffFactor; // 0x54(0x04)
	None TransformBases; // 0x30(0x10)
	None Nodes; // 0x40(0x10)
	None RotationRate; // 0xf0(0x0c)
	None PivotTranslation; // 0xfc(0x0c)
	None bRotationInLocalSpace; // 0x108(0x01)
	None MaterialType; // 0x28(0x01)
	None bCompressTextures; // 0x29(0x01)
	None bEnable; // 0x2a(0x01)
	None bClearTextures; // 0x2b(0x01)
	None bSinglePhysicalSpace; // 0x2c(0x01)
	None bPrivateSpace; // 0x2d(0x01)
	None bEnableScalability; // 0x2e(0x01)
	None Size; // 0x30(0x04)
	None TileCount; // 0x34(0x04)
	None TileSize; // 0x38(0x04)
	None TileBorderSize; // 0x3c(0x04)
	None StreamLowMips; // 0x40(0x04)
	None StreamingTexture; // 0x48(0x08)
	None bEnableCompressCrunch; // 0x50(0x01)
	None RemoveLowMips; // 0x54(0x04)
	None VirtualTexture; // 0x208(0x08)
	None bUseStreamingLowMipsInEditor; // 0x210(0x01)
	None BoundsSourceActor; // 0x218(0x08)
	None Settings; // 0xe8(0x0c)
	None bSinglePhysicalSpace; // 0xf4(0x01)
	None BuildHash; // 0xf8(0x04)
	None VirtualTextureComponent; // 0x220(0x08)
	None CaptureComponent2D; // 0x230(0x08)
	None ProjectionType; // 0x2a0(0x01)
	None FOVAngle; // 0x2a4(0x04)
	None OrthoWidth; // 0x2a8(0x04)
	None TextureTarget; // 0x2b0(0x08)
	None CompositeMode; // 0x2b8(0x01)
	None PostProcessSettings; // 0x2c0(0x550)
	None PostProcessBlendWeight; // 0x810(0x04)
	None bOverride_CustomNearClippingPlane; // 0x814(0x01)
	None CustomNearClippingPlane; // 0x818(0x04)
	None bUseCustomProjectionMatrix; // 0x81c(0x01)
	None CustomProjectionMatrix; // 0x820(0x40)
	None bEnableClipPlane; // 0x860(0x01)
	None ClipPlaneBase; // 0x864(0x0c)
	None ClipPlaneNormal; // 0x870(0x0c)
	None bCameraCutThisFrame; // 0x87c(0x01)
	None bConsiderUnrenderedOpaquePixelAsFullyTranslucent; // 0x87c(0x01)
	None bDisableFlipCopyGLES; // 0x880(0x01)
	None TextureTarget; // 0x2a0(0x08)
	None bCaptureRotation; // 0x2a8(0x01)
	None TextureTargetLeft; // 0x2b0(0x08)
	None TextureTargetRight; // 0x2b8(0x08)
	None TextureTargetODS; // 0x2c0(0x08)
	None IPD; // 0x2c8(0x04)
	None CaptureComponentCube; // 0x230(0x08)
	None ComponentClass; // 0x28(0x08)
	None ComponentTemplate; // 0x30(0x08)
	None CookedComponentInstancingData; // 0x38(0x48)
	None AttachToName; // 0x80(0x08)
	None ParentComponentOrVariableName; // 0x88(0x08)
	None ParentComponentOwnerClassName; // 0x90(0x08)
	None bIsParentComponentNative; // 0x98(0x01)
	None ChildNodes; // 0xa0(0x10)
	None MetaDataArray; // 0xb0(0x10)
	None VariableGuid; // 0xc0(0x10)
	None InternalVariableName; // 0xd0(0x08)
	None bUpdateStatNet; // 0x220(0x01)
	None bOverwriteClientStats; // 0x221(0x01)
	None Channels; // 0x224(0x04)
	None InRate; // 0x228(0x04)
	None OutRate; // 0x22c(0x04)
	None MaxPacketOverhead; // 0x234(0x04)
	None InRateClientMax; // 0x238(0x04)
	None InRateClientMin; // 0x23c(0x04)
	None InRateClientAvg; // 0x240(0x04)
	None InPacketsClientMax; // 0x244(0x04)
	None InPacketsClientMin; // 0x248(0x04)
	None InPacketsClientAvg; // 0x24c(0x04)
	None OutRateClientMax; // 0x250(0x04)
	None OutRateClientMin; // 0x254(0x04)
	None OutRateClientAvg; // 0x258(0x04)
	None OutPacketsClientMax; // 0x25c(0x04)
	None OutPacketsClientMin; // 0x260(0x04)
	None OutPacketsClientAvg; // 0x264(0x04)
	None NetNumClients; // 0x268(0x04)
	None InPackets; // 0x26c(0x04)
	None OutPackets; // 0x270(0x04)
	None InBunches; // 0x274(0x04)
	None OutBunches; // 0x278(0x04)
	None OutLoss; // 0x27c(0x04)
	None InLoss; // 0x280(0x04)
	None VoiceBytesSent; // 0x284(0x04)
	None VoiceBytesRecv; // 0x288(0x04)
	None VoicePacketsSent; // 0x28c(0x04)
	None VoicePacketsRecv; // 0x290(0x04)
	None PercentInVoice; // 0x294(0x04)
	None PercentOutVoice; // 0x298(0x04)
	None NumActorChannels; // 0x29c(0x04)
	None NumConsideredActors; // 0x2a0(0x04)
	None PrioritizedActors; // 0x2a4(0x04)
	None NumRelevantActors; // 0x2a8(0x04)
	None NumRelevantDeletedActors; // 0x2ac(0x04)
	None NumReplicatedActorAttempts; // 0x2b0(0x04)
	None NumReplicatedActors; // 0x2b4(0x04)
	None NumActors; // 0x2b8(0x04)
	None NumNetActors; // 0x2bc(0x04)
	None NumDormantActors; // 0x2c0(0x04)
	None NumInitiallyDormantActors; // 0x2c4(0x04)
	None NumNetGUIDsAckd; // 0x2c8(0x04)
	None NumNetGUIDsPending; // 0x2cc(0x04)
	None NumNetGUIDsUnAckd; // 0x2d0(0x04)
	None ObjPathBytes; // 0x2d4(0x04)
	None NetGUIDOutRate; // 0x2d8(0x04)
	None NetGUIDInRate; // 0x2dc(0x04)
	None NetSaturated; // 0x2e0(0x04)
	None ShadowmapFlags; // 0xe8(0x01)
	None RootNodes; // 0x28(0x10)
	None AllNodes; // 0x38(0x10)
	None DefaultSceneRootNode; // 0x48(0x08)
	None bShouldDoAnimNotifies; // 0x228(0x01)
	None bWakeOnLevelStart; // 0x228(0x01)
	None SkeletalMeshComponent; // 0x230(0x08)
	None ReplicatedMesh; // 0x238(0x08)
	None ReplicatedPhysAsset; // 0x240(0x08)
	None ReplicatedMaterial0; // 0x248(0x08)
	None ReplicatedMaterial1; // 0x250(0x08)
	None MinLOD; // 0x30(0x04)
	None MaxLod; // 0x34(0x04)
	None DisableBelowMinLodStripping; // 0x38(0x01)
	None bSupportLODStreaming; // 0x39(0x01)
	None MaxNumStreamedLODs; // 0x3c(0x04)
	None MaxNumOptionalLODs; // 0x40(0x04)
	None LODGroups; // 0x48(0x10)
	None bOverrideWillNeverMergeMesh; // 0x58(0x01)
	None bWillNeverMergeMesh; // 0x58(0x01)
	None SkeletalMeshReductionModuleName; // 0x38(0x08)
	None SocketName; // 0x28(0x08)
	None BoneName; // 0x30(0x08)
	None RelativeLocation; // 0x38(0x0c)
	None RelativeRotation; // 0x44(0x0c)
	None RelativeScale; // 0x50(0x0c)
	None bForceAlwaysAnimated; // 0x5c(0x01)
	None TransformMode; // 0x208(0x01)
	None BottomRadius; // 0x20c(0x04)
	None GroundAlbedo; // 0x210(0x04)
	None AtmosphereHeight; // 0x214(0x04)
	None MultiScatteringFactor; // 0x218(0x04)
	None RayleighScatteringScale; // 0x21c(0x04)
	None RayleighScattering; // 0x220(0x10)
	None RayleighExponentialDistribution; // 0x230(0x04)
	None MieScatteringScale; // 0x234(0x04)
	None MieScattering; // 0x238(0x10)
	None MieAbsorptionScale; // 0x248(0x04)
	None MieAbsorption; // 0x24c(0x10)
	None MieAnisotropy; // 0x25c(0x04)
	None MieExponentialDistribution; // 0x260(0x04)
	None OtherAbsorptionScale; // 0x264(0x04)
	None OtherAbsorption; // 0x268(0x10)
	None OtherTentDistribution; // 0x278(0x0c)
	None SkyLuminanceFactor; // 0x284(0x10)
	None AerialPespectiveViewDistanceScale; // 0x294(0x04)
	None HeightFogContribution; // 0x298(0x04)
	None TransmittanceMinLightElevationAngle; // 0x29c(0x04)
	None bStaticLightingBuiltGUID; // 0x2c4(0x10)
	None SkyAtmosphereComponent; // 0x220(0x08)
	None SourceType; // 0x238(0x01)
	None Cubemap; // 0x240(0x08)
	None SourceCubemapAngle; // 0x248(0x04)
	None CubemapResolution; // 0x24c(0x04)
	None SkyDistanceThreshold; // 0x250(0x04)
	None bCaptureEmissiveOnly; // 0x254(0x01)
	None bLowerHemisphereIsBlack; // 0x255(0x01)
	None LowerHemisphereColor; // 0x258(0x10)
	None OcclusionMaxDistance; // 0x268(0x04)
	None Contrast; // 0x26c(0x04)
	None OcclusionExponent; // 0x270(0x04)
	None MinOcclusion; // 0x274(0x04)
	None OcclusionTint; // 0x278(0x04)
	None OcclusionCombineMode; // 0x27c(0x01)
	None BlendDestinationCubemap; // 0x328(0x08)
	None Brush; // 0x28(0x88)
	None Attenuation; // 0x28(0x3a0)
	None Properties; // 0x28(0x60)
	None ChildClasses; // 0x88(0x10)
	None PassiveSoundMixModifiers; // 0x98(0x10)
	None Modulation; // 0xa8(0x10)
	None ParentClass; // 0xb8(0x08)
	None Concurrency; // 0x28(0x20)
	None bPrimeOnLoad; // 0x160(0x01)
	None FirstNode; // 0x168(0x08)
	None VolumeMultiplier; // 0x170(0x04)
	None PitchMultiplier; // 0x174(0x04)
	None AttenuationOverrides; // 0x178(0x3a0)
	None SubtitlePriority; // 0x518(0x04)
	None bOverrideAttenuation; // 0x520(0x01)
	None bExcludeFromRandomNodeBranchCulling; // 0x520(0x01)
	None CookedQualityIndex; // 0x524(0x04)
	None bHasPlayWhenSilent; // 0x528(0x01)
	None Chain; // 0x28(0x10)
	None bPlayEffectChainTails; // 0x38(0x01)
	None SoundGroupProfiles; // 0x28(0x10)
	None bApplyEQ; // 0x28(0x01)
	None EQPriority; // 0x2c(0x04)
	None EQSettings; // 0x30(0x40)
	None SoundClassEffects; // 0x70(0x10)
	None InitialDelay; // 0x80(0x04)
	None FadeInTime; // 0x84(0x04)
	None Duration; // 0x88(0x04)
	None FadeOutTime; // 0x8c(0x04)
	None ChildNodes; // 0x28(0x10)
	None AttenuationSettings; // 0x48(0x08)
	None AttenuationOverrides; // 0x50(0x3a0)
	None bOverrideAttenuation; // 0x3f0(0x01)
	None BoolParameterName; // 0x48(0x08)
	None InputVolume; // 0x48(0x10)
	None DelayMin; // 0x48(0x04)
	None DelayMax; // 0x4c(0x04)
	None DialogueWaveParameter; // 0x48(0x20)
	None bLooping; // 0x68(0x01)
	None CrossFadeInput; // 0x48(0x10)
	None DopplerIntensity; // 0x48(0x04)
	None bUseSmoothing; // 0x4c(0x01)
	None SmoothingInterpSpeed; // 0x50(0x04)
	None LoopStart; // 0x48(0x04)
	None LoopEnd; // 0x4c(0x04)
	None DurationAfterLoop; // 0x50(0x04)
	None LoopCount; // 0x54(0x04)
	None bLoopIndefinitely; // 0x58(0x01)
	None bLoop; // 0x58(0x01)
	None VolumeInterpCurve; // 0x60(0x08)
	None PitchInterpCurve; // 0x68(0x08)
	None VolumeCurve; // 0x70(0x88)
	None PitchCurve; // 0xf8(0x88)
	None PitchMin; // 0x180(0x04)
	None PitchMax; // 0x184(0x04)
	None VolumeMin; // 0x188(0x04)
	None VolumeMax; // 0x18c(0x04)
	None GroupSizes; // 0x48(0x10)
	None LoopCount; // 0x48(0x04)
	None bLoopIndefinitely; // 0x4c(0x01)
	None InputVolume; // 0x48(0x10)
	None PitchMin; // 0x48(0x04)
	None PitchMax; // 0x4c(0x04)
	None VolumeMin; // 0x50(0x04)
	None VolumeMax; // 0x54(0x04)
	None PitchModulationParams; // 0x48(0x20)
	None VolumeModulationParams; // 0x68(0x20)
	None bModulateVolume; // 0x48(0x01)
	None bModulatePitch; // 0x48(0x01)
	None AmplitudeMin; // 0x4c(0x04)
	None AmplitudeMax; // 0x50(0x04)
	None FrequencyMin; // 0x54(0x04)
	None FrequencyMax; // 0x58(0x04)
	None OffsetMin; // 0x5c(0x04)
	None OffsetMax; // 0x60(0x04)
	None CenterMin; // 0x64(0x04)
	None CenterMax; // 0x68(0x04)
	None ParamName; // 0x58(0x08)
	None Weights; // 0x48(0x10)
	None HasBeenUsed; // 0x58(0x10)
	None NumRandomUsed; // 0x68(0x04)
	None PreselectAtLevelLoad; // 0x6c(0x04)
	None bShouldExcludeFromBranchCulling; // 0x70(0x01)
	None bSoundCueExcludedFromBranchCulling; // 0x70(0x01)
	None bRandomizeWithoutReplacement; // 0x70(0x01)
	None SoundClassOverride; // 0x48(0x08)
	None IntParameterName; // 0x48(0x08)
	None WaveParameterName; // 0x48(0x08)
	None SoundWaveAssetPtr; // 0x48(0x28)
	None SoundWave; // 0x70(0x08)
	None bLooping; // 0x78(0x01)
	None SourceBusChannels; // 0x310(0x01)
	None SourceBusDuration; // 0x314(0x04)
	None bAutoDeactivateWhenSilent; // 0x318(0x01)
	None ChildSubmixes; // 0x28(0x10)
	None ParentSubmix; // 0x38(0x08)
	None bMuteWhenBackgrounded; // 0x40(0x01)
	None SubmixEffectChain; // 0x48(0x10)
	None AmbisonicsPluginSettings; // 0x58(0x08)
	None EnvelopeFollowerAttackTime; // 0x60(0x04)
	None EnvelopeFollowerReleaseTime; // 0x64(0x04)
	None OutputVolume; // 0x68(0x04)
	None OnSubmixRecordedFileDone; // 0x70(0x10)
	None SoundfieldEncodingFormat; // 0x40(0x08)
	None EncodingSettings; // 0x48(0x08)
	None SoundfieldEffectChain; // 0x50(0x10)
	None EncodingSettingsClass; // 0x60(0x08)
	None EndpointType; // 0x38(0x08)
	None EndpointSettingsClass; // 0x40(0x08)
	None EndpointSettings; // 0x48(0x08)
	None SoundfieldEndpointType; // 0x38(0x08)
	None EndpointSettingsClass; // 0x40(0x08)
	None EndpointSettings; // 0x48(0x08)
	None EncodingSettingsClass; // 0x50(0x08)
	None EncodingSettings; // 0x58(0x08)
	None SoundfieldEffectChain; // 0x60(0x10)
	None bIgnoreTimeDilation; // 0x150(0x01)
	None DrawCaptureRadius; // 0x228(0x08)
	None InfluenceRadius; // 0x280(0x04)
	None CaptureDistanceScale; // 0x284(0x04)
	None PreviewInfluenceRadius; // 0x288(0x08)
	None SplineCurves; // 0x430(0x68)
	None SplineInfo; // 0x498(0x18)
	None SplineRotInfo; // 0x4b0(0x18)
	None SplineScaleInfo; // 0x4c8(0x18)
	None SplineReparamTable; // 0x4e0(0x18)
	None bAllowSplineEditingPerInstance; // 0x4f8(0x01)
	None ReparamStepsPerSegment; // 0x4fc(0x04)
	None Duration; // 0x500(0x04)
	None bStationaryEndpoints; // 0x504(0x01)
	None bSplineHasBeenEdited; // 0x505(0x01)
	None bModifiedByConstructionScript; // 0x506(0x01)
	None bInputSplinePointsToConstructionScript; // 0x507(0x01)
	None bDrawDebug; // 0x508(0x01)
	None bClosedLoop; // 0x509(0x01)
	None bLoopPositionOverride; // 0x50a(0x01)
	None LoopPosition; // 0x50c(0x04)
	None DefaultUpVector; // 0x510(0x0c)
	None SplineMeshComponent; // 0x220(0x08)
	None SplineParams; // 0x4f0(0x58)
	None SplineUpDir; // 0x548(0x0c)
	None SplineBoundaryMin; // 0x554(0x04)
	None CachedMeshBodySetupGuid; // 0x558(0x10)
	None BodySetup; // 0x568(0x08)
	None SplineBoundaryMax; // 0x570(0x04)
	None bAllowSplineEditingPerInstance; // 0x574(0x01)
	None bSmoothInterpRollScale; // 0x574(0x01)
	None bMeshDirty; // 0x574(0x01)
	None ForwardAxis; // 0x575(0x01)
	None VirtualTextureMainPassMaxDrawDistance; // 0x578(0x04)
	None InnerConeAngle; // 0x368(0x04)
	None OuterConeAngle; // 0x36c(0x04)
	None LightShaftConeAngle; // 0x370(0x04)
	None bCastShadowsOnLowEnd; // 0x374(0x01)
	None MinLOD; // 0x60(0x04)
	None LpvBiasMultiplier; // 0x64(0x04)
	None StaticMaterials; // 0x68(0x10)
	None LightmapUVDensity; // 0x78(0x04)
	None LightMapResolution; // 0x7c(0x04)
	None LightMapCoordinateIndex; // 0x80(0x04)
	None DistanceFieldSelfShadowBias; // 0x84(0x04)
	None BodySetup; // 0x88(0x08)
	None DefaultCreationCollisionProfileName; // 0x90(0x08)
	None LODForCollision; // 0x98(0x04)
	None bGenerateMeshDistanceField; // 0x9c(0x01)
	None bStripComplexCollisionForConsole; // 0x9c(0x01)
	None bHasNavigationData; // 0x9c(0x01)
	None bSupportUniformlyDistributedSampling; // 0x9c(0x01)
	None bSupportPhysicalMaterialMasks; // 0x9c(0x01)
	None bIsBuiltAtRuntime; // 0x9c(0x01)
	None bAllowCPUAccess; // 0x9c(0x01)
	None bSupportGpuUniformlyDistributedSampling; // 0x9d(0x01)
	None Sockets; // 0xc0(0x10)
	None PositiveBoundsExtension; // 0xe0(0x0c)
	None NegativeBoundsExtension; // 0xec(0x0c)
	None ExtendedBounds; // 0xf8(0x1c)
	None ElementToIgnoreForTexFactor; // 0x114(0x04)
	None AssetUserData; // 0x118(0x10)
	None EditableMesh; // 0x130(0x08)
	None NavCollision; // 0x138(0x08)
	None SocketName; // 0x28(0x08)
	None RelativeLocation; // 0x30(0x0c)
	None RelativeRotation; // 0x3c(0x0c)
	None RelativeScale; // 0x48(0x0c)
	None Tag; // 0x58(0x10)
	None bLiveTexture; // 0x208(0x01)
	None bSupportsDepth; // 0x208(0x01)
	None bNoAlphaChannel; // 0x208(0x01)
	None Texture; // 0x210(0x08)
	None LeftTexture; // 0x218(0x08)
	None bQuadPreserveTextureRatio; // 0x220(0x01)
	None QuadSize; // 0x224(0x08)
	None UVRect; // 0x22c(0x14)
	None CylinderRadius; // 0x240(0x04)
	None CylinderOverlayArc; // 0x244(0x04)
	None CylinderHeight; // 0x248(0x04)
	None EquirectProps; // 0x24c(0x48)
	None StereoLayerType; // 0x294(0x01)
	None StereoLayerShape; // 0x295(0x01)
	None Shape; // 0x298(0x08)
	None Priority; // 0x2a0(0x04)
	None Radius; // 0x28(0x04)
	None OverlayArc; // 0x2c(0x04)
	None Height; // 0x30(0x04)
	None LeftUVRect; // 0x28(0x14)
	None RightUVRect; // 0x3c(0x14)
	None LeftScale; // 0x50(0x08)
	None RightScale; // 0x58(0x08)
	None LeftBias; // 0x60(0x08)
	None RightBias; // 0x68(0x08)
	None Settings; // 0x28(0x8c)
	None SubUVTexture; // 0x28(0x08)
	None SubImages_Horizontal; // 0x30(0x04)
	None SubImages_Vertical; // 0x34(0x04)
	None BoundingMode; // 0x38(0x01)
	None OpacitySourceMode; // 0x39(0x01)
	None AlphaThreshold; // 0x3c(0x04)
	None FrameRate; // 0x30(0x08)
	None bGenerateFullFrame; // 0x38(0x01)
	None bUseHighPerformanceClock; // 0x39(0x01)
	None DefaultedText; // 0x28(0x18)
	None UndefaultedText; // 0x40(0x18)
	None TransientText; // 0x58(0x18)
	None TextRender; // 0x220(0x08)
	None Format; // 0xc0(0x01)
	None Brightness; // 0xe8(0x04)
	None TextureMultiplier; // 0xec(0x04)
	None SizeX; // 0xc0(0x04)
	None ClearColor; // 0xc4(0x10)
	None OverrideFormat; // 0xd4(0x01)
	None bHDR; // 0xd5(0x01)
	None bForceLinearGamma; // 0xd5(0x01)
	None TheTimeline; // 0xb0(0x98)
	None bIgnoreTimeDilation; // 0x148(0x01)
	None TimelineLength; // 0x28(0x04)
	None LengthMode; // 0x2c(0x01)
	None bAutoPlay; // 0x2d(0x01)
	None bLoop; // 0x2d(0x01)
	None bReplicated; // 0x2d(0x01)
	None bIgnoreTimeDilation; // 0x2d(0x01)
	None EventTracks; // 0x30(0x10)
	None FloatTracks; // 0x40(0x10)
	None VectorTracks; // 0x50(0x10)
	None LinearColorTracks; // 0x60(0x10)
	None MetaDataArray; // 0x70(0x10)
	None TimelineGuid; // 0x80(0x10)
	None VariableName; // 0x90(0x08)
	None DirectionPropertyName; // 0x98(0x08)
	None UpdateFunctionName; // 0xa0(0x08)
	None FinishedFunctionName; // 0xa8(0x08)
	None FrictionScale; // 0x30(0x04)
	None Controls; // 0x28(0x10)
	None ActiveOpacity; // 0x38(0x04)
	None InactiveOpacity; // 0x3c(0x04)
	None TimeUntilDeactive; // 0x40(0x04)
	None TimeUntilReset; // 0x44(0x04)
	None ActivationDelay; // 0x48(0x04)
	None bPreventRecenter; // 0x4c(0x01)
	None StartupDelay; // 0x50(0x04)
	None CollisionComponent; // 0x220(0x08)
	None DisplayNameMap; // 0x60(0x50)
	None Status; // 0xc0(0x01)
	None Guid; // 0xc4(0x10)
	None RenderFocusRule; // 0x38(0x01)
	None HardwareCursors; // 0x40(0x50)
	None SoftwareCursors; // 0x90(0x50)
	None DefaultCursor; // 0xe0(0x18)
	None TextEditBeamCursor; // 0xf8(0x18)
	None CrosshairsCursor; // 0x110(0x18)
	None HandCursor; // 0x128(0x18)
	None GrabHandCursor; // 0x140(0x18)
	None GrabHandClosedCursor; // 0x158(0x18)
	None SlashedCircleCursor; // 0x170(0x18)
	None ApplicationScale; // 0x188(0x04)
	None UIScaleRule; // 0x18c(0x01)
	None CustomScalingRuleClass; // 0x190(0x18)
	None UIScaleCurve; // 0x1a8(0x88)
	None bAllowHighDPIInGameMode; // 0x230(0x01)
	None bLoadWidgetsOnDedicatedServer; // 0x231(0x01)
	None CursorClasses; // 0x238(0x10)
	None CustomScalingRuleClassInstance; // 0x248(0x08)
	None CustomScalingRule; // 0x250(0x08)
	None Bounds; // 0x28(0x1c)
	None Intensity; // 0x44(0x04)
	None Texture; // 0x48(0x08)
	None ConstructionOp; // 0x50(0x01)
	None VolumeSizeX; // 0x54(0x04)
	None VolumeSizeY; // 0x58(0x04)
	None VolumeSizeZ; // 0x5c(0x04)
	None SubImagesX; // 0x60(0x04)
	None SubImagesY; // 0x64(0x04)
	None FrameCount; // 0x68(0x04)
	None FramesPerSecond; // 0x6c(0x04)
	None bLoop; // 0x70(0x01)
	None NoiseField; // 0x78(0x08)
	None NoiseScale; // 0x80(0x04)
	None NoiseMax; // 0x84(0x04)
	None VectorField; // 0x430(0x08)
	None Intensity; // 0x438(0x04)
	None Tightness; // 0x43c(0x04)
	None bPreviewVectorField; // 0x440(0x01)
	None SizeX; // 0x48(0x04)
	None SizeY; // 0x4c(0x04)
	None SizeZ; // 0x50(0x04)
	None bAllowCPUAccess; // 0x54(0x01)
	None CPUData; // 0x88(0x10)
	None VectorFieldComponent; // 0x220(0x08)
	None TypeToLayer; // 0xe8(0x10)
	None DefaultSizeInMegabyte; // 0x28(0x04)
	None Pools; // 0x30(0x10)
	None Settings; // 0xb0(0x18)
	None AllowedMipLevelRange; // 0x258(0x08)
	None Component; // 0x220(0x08)
	None Strength; // 0x208(0x04)
	None Speed; // 0x20c(0x04)
	None MinGustAmount; // 0x210(0x04)
	None MaxGustAmount; // 0x214(0x04)
	None Radius; // 0x218(0x04)
	None bPointWind; // 0x21c(0x01)
	None TilesStreaming; // 0x48(0x10)
	None TilesStreamingTimeThreshold; // 0x58(0x08)
	None bLoadAllTilesDuringCinematic; // 0x60(0x01)
	None bRebaseOriginIn3DSpace; // 0x61(0x01)
	None RebaseOriginDistance; // 0x64(0x04)
	None HierarchicalLODSetup; // 0x28(0x10)
	None OverrideBaseMaterial; // 0x38(0x28)
	None UberGraphFrame; // 0x630(0x08)
	None PopulateMaps; // 0x638(0x08)
	None Image_112; // 0x640(0x08)
	None MapScrollBox; // 0x648(0x08)
	None MapSelectionPanel; // 0x650(0x08)
	None WBP_CustomGameConfirmation; // 0x658(0x08)
	None WBP_GameModeInfoPanel; // 0x660(0x08)
	None WBP_Header1; // 0x668(0x08)
	None WBP_NavBar; // 0x670(0x08)
	None CustomQueues; // 0x678(0x10)
	None CurrentTabIndex; // 0x688(0x04)
	None MapButtons; // 0x690(0x10)
	None TabCount; // 0x6a0(0x04)
	None QueueDataFactory; // 0x6a8(0x08)
	None DTCustomQueues; // 0x6b0(0x08)
	None Slot; // 0x28(0x08)
	None bIsEnabledDelegate; // 0x30(0x10)
	None ToolTipText; // 0x40(0x18)
	None ToolTipTextDelegate; // 0x58(0x10)
	None ToolTipWidget; // 0x68(0x08)
	None ToolTipWidgetDelegate; // 0x70(0x10)
	None VisibilityDelegate; // 0x80(0x10)
	None RenderTransform; // 0x90(0x1c)
	None RenderTransformPivot; // 0xac(0x08)
	None bIsVariable; // 0xb4(0x01)
	None bCreatedByConstructionScript; // 0xb4(0x01)
	None bIsEnabled; // 0xb4(0x01)
	None bOverride_Cursor; // 0xb4(0x01)
	None AccessibleWidgetData; // 0xb8(0x08)
	None bIsVolatile; // 0xc0(0x01)
	None bAllowRenderInterpolation; // 0xc0(0x01)
	None bIssueGlobalInvalidateOnVisible; // 0xc0(0x01)
	None DebugWidgetIndex; // 0xc1(0x01)
	None Cursor; // 0xc2(0x01)
	None Clipping; // 0xc3(0x01)
	None Visibility; // 0xc4(0x01)
	None RenderOpacity; // 0xc8(0x04)
	None Navigation; // 0xd0(0x08)
	None FlowDirectionPreference; // 0xd8(0x01)
	None NativeBindings; // 0x100(0x10)
	None Brush; // 0x110(0x88)
	None BrushDelegate; // 0x198(0x10)
	None ColorAndOpacity; // 0x1a8(0x10)
	None ColorAndOpacityDelegate; // 0x1b8(0x10)
	None bFlipForRightToLeftFlowDirection; // 0x1c8(0x01)
	None OnMouseButtonDownEvent; // 0x1cc(0x10)
	None Slots; // 0x110(0x10)
	None ColorAndOpacity; // 0x118(0x10)
	None ColorAndOpacityDelegate; // 0x128(0x10)
	None ForegroundColor; // 0x138(0x28)
	None ForegroundColorDelegate; // 0x160(0x10)
	None Padding; // 0x170(0x10)
	None ActiveSequencePlayers; // 0x180(0x10)
	None StoppedSequencePlayers; // 0x190(0x10)
	None NamedSlotBindings; // 0x1a0(0x10)
	None WidgetTree; // 0x1b0(0x08)
	None Priority; // 0x1b8(0x04)
	None bSupportsKeyboardFocus; // 0x1bc(0x01)
	None bIsFocusable; // 0x1bc(0x01)
	None bStopAction; // 0x1bc(0x01)
	None bHasScriptImplementedTick; // 0x1bc(0x01)
	None bHasScriptImplementedPaint; // 0x1bc(0x01)
	None bCookedWidgetTree; // 0x1bc(0x01)
	None TickFrequency; // 0x1c8(0x01)
	None InputComponent; // 0x1d0(0x08)
	None AnimationCallbacks; // 0x1d8(0x10)
	None Animation; // 0x408(0x08)
	None PadLeft; // 0x128(0x01)
	None PadRight; // 0x129(0x01)
	None PadTop; // 0x12a(0x01)
	None PadBottom; // 0x12b(0x01)
	None Text; // 0x110(0x18)
	None TextDelegate; // 0x128(0x10)
	None WidgetStyle; // 0x138(0x7f0)
	None Style; // 0x928(0x08)
	None HintText; // 0x930(0x18)
	None HintTextDelegate; // 0x948(0x10)
	None Font; // 0x958(0x50)
	None ForegroundColor; // 0x9a8(0x10)
	None BackgroundColor; // 0x9b8(0x10)
	None ReadOnlyForegroundColor; // 0x9c8(0x10)
	None IsReadOnly; // 0x9d8(0x01)
	None IsPassword; // 0x9d9(0x01)
	None MinimumDesiredWidth; // 0x9dc(0x04)
	None Padding; // 0x9e0(0x10)
	None IsCaretMovedWhenGainFocus; // 0x9f0(0x01)
	None SelectAllTextWhenFocused; // 0x9f1(0x01)
	None RevertTextOnEscape; // 0x9f2(0x01)
	None ClearKeyboardFocusOnCommit; // 0x9f3(0x01)
	None SelectAllTextOnCommit; // 0x9f4(0x01)
	None AllowContextMenu; // 0x9f5(0x01)
	None KeyboardType; // 0x9f6(0x01)
	None VirtualKeyboardOptions; // 0x9f7(0x01)
	None VirtualKeyboardTrigger; // 0x9f8(0x01)
	None VirtualKeyboardDismissAction; // 0x9f9(0x01)
	None Justification; // 0x9fa(0x01)
	None ShapedTextOptions; // 0x9fb(0x03)
	None OnTextChanged; // 0xa00(0x10)
	None OnTextCommitted; // 0xa10(0x10)
	None HorizontalAlignment; // 0x128(0x01)
	None VerticalAlignment; // 0x129(0x01)
	None bShowEffectWhenDisabled; // 0x12a(0x01)
	None ContentColorAndOpacity; // 0x12c(0x10)
	None ContentColorAndOpacityDelegate; // 0x13c(0x10)
	None Padding; // 0x14c(0x10)
	None background; // 0x160(0x88)
	None BackgroundDelegate; // 0x1e8(0x10)
	None BrushColor; // 0x1f8(0x10)
	None BrushColorDelegate; // 0x208(0x10)
	None DesiredSizeScale; // 0x218(0x08)
	None bFlipForRightToLeftFlowDirection; // 0x220(0x01)
	None OnMouseButtonDownEvent; // 0x224(0x10)
	None OnMouseButtonUpEvent; // 0x234(0x10)
	None OnMouseMoveEvent; // 0x244(0x10)
	None OnMouseDoubleClickEvent; // 0x254(0x10)
	None WidgetStyle; // 0x128(0x228)
	None WidgetBarStyle; // 0x350(0x4d0)
	None Style; // 0x820(0x08)
	None BarStyle; // 0x828(0x08)
	None Orientation; // 0x830(0x01)
	None ScrollBarVisibility; // 0x831(0x01)
	None ConsumeMouseWheel; // 0x832(0x01)
	None ScrollbarThickness; // 0x834(0x08)
	None ScrollbarPadding; // 0x83c(0x10)
	None AlwaysShowScrollbar; // 0x84c(0x01)
	None AlwaysShowScrollbarTrack; // 0x84d(0x01)
	None AllowOverscroll; // 0x84e(0x01)
	None bAnimateWheelScrolling; // 0x84f(0x01)
	None NavigationDestination; // 0x850(0x01)
	None NavigationScrollPadding; // 0x854(0x04)
	None ScrollWhenFocusChanges; // 0x858(0x01)
	None bAllowRightClickDragScrolling; // 0x859(0x01)
	None WheelScrollMultiplier; // 0x85c(0x04)
	None OnUserScrolled; // 0x860(0x10)
	None ColumnFill; // 0x128(0x10)
	None RowFill; // 0x138(0x10)
	None EntryWidgetClass; // 0x110(0x08)
	None WheelScrollMultiplier; // 0x118(0x04)
	None bEnableScrollAnimation; // 0x11c(0x01)
	None bEnableFixedLineOffset; // 0x11d(0x01)
	None FixedLineScrollOffset; // 0x120(0x04)
	None BP_OnEntryGenerated; // 0x128(0x10)
	None BP_OnEntryReleased; // 0x138(0x10)
	None EntryWidgetPool; // 0x148(0x80)
	None Orientation; // 0x2e0(0x01)
	None SelectionMode; // 0x2e1(0x01)
	None ConsumeMouseWheel; // 0x2e2(0x01)
	None bClearSelectionOnClick; // 0x2e3(0x01)
	None bIsFocusable; // 0x2e4(0x01)
	None EntrySpacing; // 0x2e8(0x04)
	None bReturnFocusToSelection; // 0x2ec(0x01)
	None ListItems; // 0x2f0(0x10)
	None BP_OnEntryInitialized; // 0x310(0x10)
	None BP_OnItemClicked; // 0x320(0x10)
	None BP_OnItemDoubleClicked; // 0x330(0x10)
	None BP_OnItemIsHoveredChanged; // 0x340(0x10)
	None BP_OnItemSelectionChanged; // 0x350(0x10)
	None BP_OnItemScrolledIntoView; // 0x360(0x10)
	None BP_OnListViewScrolled; // 0x370(0x10)
	None BP_OnGetItemChildren; // 0x390(0x10)
	None BP_OnItemExpansionChanged; // 0x3a0(0x10)
	None OnSuccess; // 0x30(0x10)
	None OnFail; // 0x40(0x10)
	None Padding; // 0x128(0x10)
	None HorizontalAlignment; // 0x138(0x01)
	None VerticalAlignment; // 0x139(0x01)
	None bApplyAlphaToBlur; // 0x13a(0x01)
	None BlurStrength; // 0x13c(0x04)
	None bOverrideAutoRadiusCalculation; // 0x140(0x01)
	None BlurRadius; // 0x144(0x04)
	None LowQualityFallbackBrush; // 0x148(0x88)
	None Parent; // 0x28(0x08)
	None Content; // 0x30(0x08)
	None Padding; // 0x38(0x10)
	None HorizontalAlignment; // 0x48(0x01)
	None VerticalAlignment; // 0x49(0x01)
	None SourceObject; // 0x28(0x08)
	None SourcePath; // 0x30(0x28)
	None DestinationProperty; // 0x58(0x08)
	None Padding; // 0x38(0x10)
	None HorizontalAlignment; // 0x48(0x01)
	None VerticalAlignment; // 0x49(0x01)
	None Style; // 0x128(0x08)
	None WidgetStyle; // 0x130(0x278)
	None ColorAndOpacity; // 0x3a8(0x10)
	None BackgroundColor; // 0x3b8(0x10)
	None ClickMethod; // 0x3c8(0x01)
	None TouchMethod; // 0x3c9(0x01)
	None PressMethod; // 0x3ca(0x01)
	None IsFocusable; // 0x3cb(0x01)
	None bAllowTouchFallthrough; // 0x3cc(0x01)
	None OnClicked; // 0x3d0(0x10)
	None OnPressed; // 0x3e0(0x10)
	None OnReleased; // 0x3f0(0x10)
	None OnHovered; // 0x400(0x10)
	None OnUnhovered; // 0x410(0x10)
	None Padding; // 0x38(0x10)
	None HorizontalAlignment; // 0x48(0x01)
	None VerticalAlignment; // 0x49(0x01)
	None LayoutData; // 0x38(0x28)
	None bAutoSize; // 0x60(0x01)
	None ZOrder; // 0x64(0x04)
	None CheckedState; // 0x128(0x01)
	None CheckedStateDelegate; // 0x12c(0x10)
	None WidgetStyle; // 0x140(0x580)
	None Style; // 0x6c0(0x08)
	None UncheckedImage; // 0x6c8(0x08)
	None UncheckedHoveredImage; // 0x6d0(0x08)
	None UncheckedPressedImage; // 0x6d8(0x08)
	None CheckedImage; // 0x6e0(0x08)
	None CheckedHoveredImage; // 0x6e8(0x08)
	None CheckedPressedImage; // 0x6f0(0x08)
	None UndeterminedImage; // 0x6f8(0x08)
	None UndeterminedHoveredImage; // 0x700(0x08)
	None UndeterminedPressedImage; // 0x708(0x08)
	None HorizontalAlignment; // 0x710(0x01)
	None Padding; // 0x714(0x10)
	None BorderBackgroundColor; // 0x728(0x28)
	None IsFocusable; // 0x750(0x01)
	None OnCheckStateChanged; // 0x758(0x10)
	None NumberOfPieces; // 0x110(0x04)
	None Period; // 0x114(0x04)
	None Radius; // 0x118(0x04)
	None PieceImage; // 0x120(0x08)
	None Image; // 0x128(0x88)
	None bEnableRadius; // 0x1b0(0x01)
	None Items; // 0x110(0x10)
	None OnGenerateWidgetEvent; // 0x120(0x10)
	None bIsFocusable; // 0x130(0x01)
	None DefaultOptions; // 0x110(0x10)
	None SelectedOption; // 0x120(0x10)
	None WidgetStyle; // 0x130(0x3f0)
	None ItemStyle; // 0x520(0x7c8)
	None ContentPadding; // 0xce8(0x10)
	None MaxListHeight; // 0xcf8(0x04)
	None HasDownArrow; // 0xcfc(0x01)
	None EnableGamepadNavigationMode; // 0xcfd(0x01)
	None Font; // 0xd00(0x50)
	None ForegroundColor; // 0xd50(0x28)
	None bIsFocusable; // 0xd78(0x01)
	None OnGenerateWidgetEvent; // 0xd7c(0x10)
	None OnSelectionChanged; // 0xd90(0x10)
	None OnOpening; // 0xda0(0x10)
	None OnClosing; // 0xdb0(0x10)
	None Tag; // 0x28(0x10)
	None Payload; // 0x38(0x08)
	None DefaultDragVisual; // 0x40(0x08)
	None Pivot; // 0x48(0x01)
	None Offset; // 0x4c(0x08)
	None OnDrop; // 0x58(0x10)
	None OnDragCancelled; // 0x68(0x10)
	None OnDragged; // 0x78(0x10)
	None EntryBoxType; // 0x110(0x01)
	None EntrySpacing; // 0x114(0x08)
	None SpacingPattern; // 0x120(0x10)
	None EntrySizeRule; // 0x130(0x08)
	None EntryHorizontalAlignment; // 0x138(0x01)
	None EntryVerticalAlignment; // 0x139(0x01)
	None MaxElementSize; // 0x13c(0x04)
	None EntryWidgetPool; // 0x150(0x80)
	None EntryWidgetClass; // 0x1d0(0x08)
	None Text; // 0x110(0x18)
	None TextDelegate; // 0x128(0x10)
	None HintText; // 0x138(0x18)
	None HintTextDelegate; // 0x150(0x10)
	None WidgetStyle; // 0x160(0x218)
	None Style; // 0x378(0x08)
	None BackgroundImageSelected; // 0x380(0x08)
	None BackgroundImageComposing; // 0x388(0x08)
	None CaretImage; // 0x390(0x08)
	None Font; // 0x398(0x50)
	None ColorAndOpacity; // 0x3e8(0x28)
	None IsReadOnly; // 0x410(0x01)
	None IsPassword; // 0x411(0x01)
	None MinimumDesiredWidth; // 0x414(0x04)
	None IsCaretMovedWhenGainFocus; // 0x418(0x01)
	None SelectAllTextWhenFocused; // 0x419(0x01)
	None RevertTextOnEscape; // 0x41a(0x01)
	None ClearKeyboardFocusOnCommit; // 0x41b(0x01)
	None SelectAllTextOnCommit; // 0x41c(0x01)
	None AllowContextMenu; // 0x41d(0x01)
	None KeyboardType; // 0x41e(0x01)
	None VirtualKeyboardOptions; // 0x41f(0x01)
	None VirtualKeyboardTrigger; // 0x420(0x01)
	None VirtualKeyboardDismissAction; // 0x421(0x01)
	None Justification; // 0x422(0x01)
	None ShapedTextOptions; // 0x423(0x03)
	None OnTextChanged; // 0x428(0x10)
	None OnTextCommitted; // 0x438(0x10)
	None Style; // 0x118(0x120)
	None BorderBrush; // 0x238(0x88)
	None BorderColor; // 0x2c0(0x28)
	None bIsExpanded; // 0x2e8(0x01)
	None MaxHeight; // 0x2ec(0x04)
	None HeaderPadding; // 0x2f0(0x10)
	None AreaPadding; // 0x300(0x10)
	None OnExpansionChanged; // 0x310(0x10)
	None HeaderContent; // 0x320(0x08)
	None BodyContent; // 0x328(0x08)
	None Padding; // 0x38(0x10)
	None HorizontalAlignment; // 0x48(0x01)
	None VerticalAlignment; // 0x49(0x01)
	None Row; // 0x4c(0x04)
	None RowSpan; // 0x50(0x04)
	None column; // 0x54(0x04)
	None ColumnSpan; // 0x58(0x04)
	None Layer; // 0x5c(0x04)
	None Nudge; // 0x60(0x08)
	None Padding; // 0x40(0x10)
	None Size; // 0x50(0x08)
	None HorizontalAlignment; // 0x58(0x01)
	None VerticalAlignment; // 0x59(0x01)
	None WidgetStyle; // 0x110(0x278)
	None TextStyle; // 0x388(0x268)
	None SelectedKey; // 0x5f0(0x20)
	None Font; // 0x610(0x50)
	None Margin; // 0x660(0x10)
	None ColorAndOpacity; // 0x670(0x10)
	None KeySelectionText; // 0x680(0x18)
	None NoKeySpecifiedText; // 0x698(0x18)
	None bAllowModifierKeys; // 0x6b0(0x01)
	None bAllowGamepadKeys; // 0x6b1(0x01)
	None EscapeKeys; // 0x6b8(0x10)
	None OnKeySelected; // 0x6c8(0x10)
	None OnIsSelectingKeyChanged; // 0x6d8(0x10)
	None bCanCache; // 0x128(0x01)
	None CacheRelativeTransforms; // 0x129(0x01)
	None MenuClass; // 0x128(0x08)
	None OnGetMenuContentEvent; // 0x130(0x10)
	None Placement; // 0x140(0x01)
	None bFitInWindow; // 0x141(0x01)
	None ShouldDeferPaintingAfterWindowContent; // 0x142(0x01)
	None UseApplicationMenuStack; // 0x143(0x01)
	None OnMenuOpenChanged; // 0x148(0x10)
	None TransformMask; // 0xe0(0x04)
	None Translation; // 0xe8(0x140)
	None Rotation; // 0x228(0xa0)
	None Scale; // 0x2c8(0x140)
	None Shear; // 0x408(0x140)
	None TopCurve; // 0xe0(0xa0)
	None LeftCurve; // 0x180(0xa0)
	None RightCurve; // 0x220(0xa0)
	None BottomCurve; // 0x2c0(0xa0)
	None BrushPropertyNamePath; // 0x68(0x10)
	None TrackName; // 0x78(0x08)
	None ShapedTextOptions; // 0x110(0x03)
	None Justification; // 0x113(0x01)
	None WrappingPolicy; // 0x114(0x01)
	None AutoWrapText; // 0x115(0x01)
	None WrapTextAt; // 0x118(0x04)
	None Margin; // 0x11c(0x10)
	None LineHeightPercentage; // 0x12c(0x04)
	None Text; // 0x130(0x18)
	None HintText; // 0x148(0x18)
	None HintTextDelegate; // 0x160(0x10)
	None WidgetStyle; // 0x170(0x268)
	None bIsReadOnly; // 0x3d8(0x01)
	None Font; // 0x3e0(0x50)
	None SelectAllTextWhenFocused; // 0x430(0x01)
	None ClearTextSelectionOnFocusLoss; // 0x431(0x01)
	None RevertTextOnEscape; // 0x432(0x01)
	None ClearKeyboardFocusOnCommit; // 0x433(0x01)
	None AllowContextMenu; // 0x434(0x01)
	None VirtualKeyboardOptions; // 0x435(0x01)
	None VirtualKeyboardDismissAction; // 0x436(0x01)
	None OnTextChanged; // 0x438(0x10)
	None OnTextCommitted; // 0x448(0x10)
	None Text; // 0x130(0x18)
	None HintText; // 0x148(0x18)
	None HintTextDelegate; // 0x160(0x10)
	None WidgetStyle; // 0x170(0x7f0)
	None TextStyle; // 0x960(0x268)
	None bIsReadOnly; // 0xbc8(0x01)
	None AllowContextMenu; // 0xbc9(0x01)
	None VirtualKeyboardOptions; // 0xbca(0x01)
	None VirtualKeyboardDismissAction; // 0xbcb(0x01)
	None Style; // 0xbd0(0x08)
	None Font; // 0xbd8(0x50)
	None ForegroundColor; // 0xc28(0x10)
	None BackgroundColor; // 0xc38(0x10)
	None ReadOnlyForegroundColor; // 0xc48(0x10)
	None OnTextChanged; // 0xc58(0x10)
	None OnTextCommitted; // 0xc68(0x10)
	None Padding; // 0x40(0x10)
	None HorizontalAlignment; // 0x50(0x01)
	None VerticalAlignment; // 0x51(0x01)
	None WidgetStyle; // 0x110(0x1a0)
	None Style; // 0x2b0(0x08)
	None BackgroundImage; // 0x2b8(0x08)
	None FillImage; // 0x2c0(0x08)
	None MarqueeImage; // 0x2c8(0x08)
	None Percent; // 0x2d0(0x04)
	None BarFillType; // 0x2d4(0x01)
	None bIsMarquee; // 0x2d5(0x01)
	None BorderPadding; // 0x2d8(0x08)
	None PercentDelegate; // 0x2e0(0x10)
	None FillColorAndOpacity; // 0x2f0(0x10)
	None FillColorAndOpacityDelegate; // 0x300(0x10)
	None RenderOnInvalidation; // 0x128(0x01)
	None RenderOnPhase; // 0x129(0x01)
	None Phase; // 0x12c(0x04)
	None PhaseCount; // 0x130(0x04)
	None bEnableRetainedRendering; // 0x134(0x01)
	None EffectMaterial; // 0x138(0x08)
	None TextureParameter; // 0x140(0x08)
	None Text; // 0x130(0x18)
	None TextStyleSet; // 0x148(0x08)
	None DecoratorClasses; // 0x150(0x10)
	None bOverrideDefaultStyle; // 0x160(0x01)
	None DefaultTextStyleOverride; // 0x168(0x268)
	None MinDesiredWidth; // 0x3d0(0x04)
	None InstanceDecorators; // 0x640(0x10)
	None ImageSet; // 0x28(0x08)
	None bIsTitleSafe; // 0x38(0x01)
	None SafeAreaScale; // 0x3c(0x10)
	None HAlign; // 0x4c(0x01)
	None VAlign; // 0x4d(0x01)
	None Padding; // 0x50(0x10)
	None Stretch; // 0x128(0x01)
	None StretchDirection; // 0x129(0x01)
	None UserSpecifiedScale; // 0x12c(0x04)
	None IgnoreInheritedScale; // 0x130(0x01)
	None Padding; // 0x38(0x10)
	None HorizontalAlignment; // 0x48(0x01)
	None VerticalAlignment; // 0x49(0x01)
	None WidgetStyle; // 0x110(0x4d0)
	None Style; // 0x5e0(0x08)
	None bAlwaysShowScrollbar; // 0x5e8(0x01)
	None bAlwaysShowScrollbarTrack; // 0x5e9(0x01)
	None Orientation; // 0x5ea(0x01)
	None Thickness; // 0x5ec(0x08)
	None Padding; // 0x5f4(0x10)
	None Padding; // 0x38(0x10)
	None HorizontalAlignment; // 0x48(0x01)
	None VerticalAlignment; // 0x49(0x01)
	None WidthOverride; // 0x138(0x04)
	None HeightOverride; // 0x13c(0x04)
	None MinDesiredWidth; // 0x140(0x04)
	None MinDesiredHeight; // 0x144(0x04)
	None MaxDesiredWidth; // 0x148(0x04)
	None MaxDesiredHeight; // 0x14c(0x04)
	None MinAspectRatio; // 0x150(0x04)
	None MaxAspectRatio; // 0x154(0x04)
	None bOverride_WidthOverride; // 0x158(0x01)
	None bOverride_HeightOverride; // 0x158(0x01)
	None bOverride_MinDesiredWidth; // 0x158(0x01)
	None bOverride_MinDesiredHeight; // 0x158(0x01)
	None bOverride_MaxDesiredWidth; // 0x158(0x01)
	None bOverride_MaxDesiredHeight; // 0x158(0x01)
	None bOverride_MinAspectRatio; // 0x158(0x01)
	None bOverride_MaxAspectRatio; // 0x158(0x01)
	None Padding; // 0x38(0x10)
	None HorizontalAlignment; // 0x58(0x01)
	None VerticalAlignment; // 0x59(0x01)
	None VertexData; // 0x28(0x10)
	None IndexData; // 0x38(0x10)
	None Material; // 0x48(0x08)
	None ExtentMin; // 0x50(0x08)
	None ExtentMax; // 0x58(0x08)
	None bCanChildrenBeAccessible; // 0x28(0x01)
	None AccessibleBehavior; // 0x29(0x01)
	None AccessibleSummaryBehavior; // 0x2a(0x01)
	None AccessibleText; // 0x30(0x18)
	None AccessibleTextDelegate; // 0x48(0x10)
	None AccessibleSummaryText; // 0x58(0x18)
	None AccessibleSummaryTextDelegate; // 0x70(0x10)
	None Value; // 0x110(0x04)
	None ValueDelegate; // 0x114(0x10)
	None MinValue; // 0x124(0x04)
	None MaxValue; // 0x128(0x04)
	None WidgetStyle; // 0x130(0x340)
	None Orientation; // 0x470(0x01)
	None SliderBarColor; // 0x474(0x10)
	None SliderHandleColor; // 0x484(0x10)
	None IndentHandle; // 0x494(0x01)
	None Locked; // 0x495(0x01)
	None MouseUsesStep; // 0x496(0x01)
	None RequiresControllerLock; // 0x497(0x01)
	None StepSize; // 0x498(0x04)
	None IsFocusable; // 0x49c(0x01)
	None OnMouseCaptureBegin; // 0x4a0(0x10)
	None OnMouseCaptureEnd; // 0x4b0(0x10)
	None OnControllerCaptureBegin; // 0x4c0(0x10)
	None OnControllerCaptureEnd; // 0x4d0(0x10)
	None OnValueChanged; // 0x4e0(0x10)
	None Size; // 0x110(0x08)
	None Value; // 0x110(0x04)
	None ValueDelegate; // 0x114(0x10)
	None WidgetStyle; // 0x128(0x2e8)
	None Style; // 0x410(0x08)
	None MinFractionalDigits; // 0x418(0x04)
	None MaxFractionalDigits; // 0x41c(0x04)
	None bAlwaysUsesDeltaSnap; // 0x420(0x01)
	None Delta; // 0x424(0x04)
	None SliderExponent; // 0x428(0x04)
	None Font; // 0x430(0x50)
	None Justification; // 0x480(0x01)
	None MinDesiredWidth; // 0x484(0x04)
	None ClearKeyboardFocusOnCommit; // 0x488(0x01)
	None SelectAllTextOnCommit; // 0x489(0x01)
	None ForegroundColor; // 0x490(0x28)
	None OnValueChanged; // 0x4b8(0x10)
	None OnValueCommitted; // 0x4c8(0x10)
	None OnBeginSliderMovement; // 0x4d8(0x10)
	None OnEndSliderMovement; // 0x4e8(0x10)
	None bOverride_MinValue; // 0x4f8(0x01)
	None bOverride_MaxValue; // 0x4f8(0x01)
	None bOverride_MinSliderValue; // 0x4f8(0x01)
	None bOverride_MaxSliderValue; // 0x4f8(0x01)
	None MinValue; // 0x4fc(0x04)
	None MaxValue; // 0x500(0x04)
	None MinSliderValue; // 0x504(0x04)
	None MaxSliderValue; // 0x508(0x04)
	None Text; // 0x130(0x18)
	None TextDelegate; // 0x148(0x10)
	None ColorAndOpacity; // 0x158(0x28)
	None ColorAndOpacityDelegate; // 0x180(0x10)
	None Font; // 0x190(0x50)
	None StrikeBrush; // 0x1e0(0x88)
	None ShadowOffset; // 0x268(0x08)
	None ShadowColorAndOpacity; // 0x270(0x10)
	None ShadowColorAndOpacityDelegate; // 0x280(0x10)
	None MinDesiredWidth; // 0x290(0x04)
	None bWrapWithInvalidationPanel; // 0x294(0x01)
	None bAutoWrapText; // 0x295(0x01)
	None bSimpleTextMode; // 0x296(0x01)
	None NumberOfPieces; // 0x110(0x04)
	None bAnimateHorizontally; // 0x114(0x01)
	None bAnimateVertically; // 0x115(0x01)
	None bAnimateOpacity; // 0x116(0x01)
	None PieceImage; // 0x118(0x08)
	None Image; // 0x120(0x88)
	None EntryHeight; // 0x380(0x04)
	None EntryWidth; // 0x384(0x04)
	None TileAlignment; // 0x388(0x01)
	None bWrapHorizontalNavigation; // 0x389(0x01)
	None SlotPadding; // 0x128(0x10)
	None MinDesiredSlotWidth; // 0x138(0x04)
	None MinDesiredSlotHeight; // 0x13c(0x04)
	None HorizontalAlignment; // 0x38(0x01)
	None VerticalAlignment; // 0x39(0x01)
	None Row; // 0x3c(0x04)
	None column; // 0x40(0x04)
	None Size; // 0x38(0x08)
	None Padding; // 0x40(0x10)
	None HorizontalAlignment; // 0x58(0x01)
	None VerticalAlignment; // 0x59(0x01)
	None BackgroundColor; // 0x128(0x10)
	None MovieScene; // 0x348(0x08)
	None AnimationBindings; // 0x350(0x10)
	None bLegacyFinishOnStop; // 0x360(0x01)
	None DisplayLabel; // 0x368(0x10)
	None WidgetAnimationDelegateBindings; // 0x28(0x10)
	None Finished; // 0x28(0x10)
	None WidgetTree; // 0x328(0x08)
	None bAllowTemplate; // 0x330(0x01)
	None bAllowDynamicCreation; // 0x330(0x01)
	None bValidTemplate; // 0x330(0x01)
	None bTemplateInitialized; // 0x330(0x01)
	None bCookedTemplate; // 0x330(0x01)
	None bClassRequiresNativeTick; // 0x330(0x01)
	None Bindings; // 0x338(0x10)
	None Animations; // 0x348(0x10)
	None NamedSlots; // 0x358(0x10)
	None TemplateAsset; // 0x368(0x28)
	None Template; // 0x390(0x08)
	None bUseWidgetPool; // 0x458(0x01)
	None bPrimePoolOnFirstUse; // 0x459(0x01)
	None MaxPoolSize; // 0x45c(0x04)
	None Space; // 0x460(0x01)
	None TimingPolicy; // 0x461(0x01)
	None WidgetClass; // 0x468(0x08)
	None DrawSize; // 0x470(0x08)
	None bManuallyRedraw; // 0x478(0x01)
	None bRedrawRequested; // 0x479(0x01)
	None RedrawTime; // 0x47c(0x04)
	None CurrentDrawSize; // 0x488(0x08)
	None bDrawAtDesiredSize; // 0x490(0x01)
	None Pivot; // 0x494(0x08)
	None bReceiveHardwareInput; // 0x49c(0x01)
	None bWindowFocusable; // 0x49d(0x01)
	None WindowVisibility; // 0x49e(0x01)
	None bApplyGammaCorrection; // 0x49f(0x01)
	None bApplyColorDeficiencyCorrection; // 0x4a0(0x01)
	None OwnerPlayer; // 0x4a8(0x08)
	None BackgroundColor; // 0x4b0(0x10)
	None TintColorAndOpacity; // 0x4c0(0x10)
	None OpacityFromTexture; // 0x4d0(0x04)
	None BlendMode; // 0x4d4(0x01)
	None bIsTwoSided; // 0x4d5(0x01)
	None TickWhenOffscreen; // 0x4d6(0x01)
	None Widget; // 0x4d8(0x08)
	None BodySetup; // 0x500(0x08)
	None TranslucentMaterial; // 0x508(0x08)
	None TranslucentMaterial_OneSided; // 0x510(0x08)
	None OpaqueMaterial; // 0x518(0x08)
	None OpaqueMaterial_OneSided; // 0x520(0x08)
	None MaskedMaterial; // 0x528(0x08)
	None MaskedMaterial_OneSided; // 0x530(0x08)
	None RenderTarget; // 0x538(0x08)
	None MaterialInstance; // 0x540(0x08)
	None bAddedToScreen; // 0x548(0x01)
	None bEditTimeUsable; // 0x549(0x01)
	None SharedLayerName; // 0x54c(0x08)
	None LayerZOrder; // 0x554(0x04)
	None GeometryMode; // 0x558(0x01)
	None CylinderArcAngle; // 0x55c(0x04)
	None OnHoveredWidgetChanged; // 0x208(0x10)
	None VirtualUserIndex; // 0x228(0x04)
	None PointerIndex; // 0x22c(0x04)
	None TraceChannel; // 0x230(0x01)
	None InteractionDistance; // 0x234(0x04)
	None InteractionSource; // 0x238(0x01)
	None bEnableHitTesting; // 0x239(0x01)
	None bShowDebug; // 0x23a(0x01)
	None DebugColor; // 0x23c(0x10)
	None CustomHitResult; // 0x2c8(0x88)
	None LocalHitLocation; // 0x350(0x08)
	None LastLocalHitLocation; // 0x358(0x08)
	None HoveredWidgetComponent; // 0x360(0x08)
	None LastHitResult; // 0x368(0x88)
	None bIsHoveredWidgetInteractable; // 0x3f0(0x01)
	None bIsHoveredWidgetFocusable; // 0x3f1(0x01)
	None bIsHoveredWidgetHitTestVisible; // 0x3f2(0x01)
	None Up; // 0x28(0x24)
	None Down; // 0x4c(0x24)
	None Left; // 0x70(0x24)
	None Right; // 0x94(0x24)
	None Next; // 0xb8(0x24)
	None Previous; // 0xdc(0x24)
	None ActiveWidgetIndex; // 0x128(0x04)
	None Padding; // 0x40(0x10)
	None HorizontalAlignment; // 0x50(0x01)
	None VerticalAlignment; // 0x51(0x01)
	None RootWidget; // 0x28(0x08)
	None bWindowButtonsEnabled; // 0x128(0x01)
	None bDoubleClickTogglesFullscreen; // 0x129(0x01)
	None Padding; // 0x38(0x10)
	None HorizontalAlignment; // 0x48(0x01)
	None VerticalAlignment; // 0x49(0x01)
	None InnerSlotPadding; // 0x128(0x08)
	None WrapWidth; // 0x130(0x04)
	None bExplicitWrapWidth; // 0x134(0x01)
	None Padding; // 0x38(0x10)
	None bFillEmptySpace; // 0x48(0x01)
	None FillSpanWhenLessThan; // 0x4c(0x04)
	None HorizontalAlignment; // 0x50(0x01)
	None VerticalAlignment; // 0x51(0x01)
	None UberGraphFrame; // 0x560(0x08)
	None BattlepassGradientPulse; // 0x568(0x08)
	None Unhover; // 0x570(0x08)
	None Selected; // 0x578(0x08)
	None Hovered; // 0x580(0x08)
	None BackFill; // 0x588(0x08)
	None BackFill_Free; // 0x590(0x08)
	None BackFill_Premium; // 0x598(0x08)
	None BottomEdge; // 0x5a0(0x08)
	None BottomEdge_Free; // 0x5a8(0x08)
	None BottomEdge_Premium; // 0x5b0(0x08)
	None Container; // 0x5b8(0x08)
	None LockIcon; // 0x5c0(0x08)
	None LockIcon_2; // 0x5c8(0x08)
	None LockIcon_3; // 0x5d0(0x08)
	None SelectedGradient; // 0x5d8(0x08)
	None SelectedGradient_Free; // 0x5e0(0x08)
	None SelectedGradient_Premium; // 0x5e8(0x08)
	None TabButton; // 0x5f0(0x08)
	None TabColorSwitcher; // 0x5f8(0x08)
	None text_TabFree; // 0x600(0x08)
	None text_TabPremium; // 0x608(0x08)
	None text_TabStandard; // 0x610(0x08)
	None CalloutClass; // 0x618(0x28)
	None CalloutWidget; // 0x640(0x08)
	None CalloutWidget_HorizontalAlignment; // 0x648(0x01)
	None CalloutWidget_VerticalAlignment; // 0x649(0x01)
	None CalloutWidget_Padding; // 0x64c(0x10)
	None HoverSubscreenNavTabSFX; // 0x660(0x08)
	None ClickSubscreenNavTabSFX; // 0x668(0x08)
	None UsesBattlePassColoring; // 0x670(0x01)
	None NamedInterfaces; // 0x28(0x10)
	None NamedInterfaceDefs; // 0x38(0x10)
	None OnAcquisitionSuccess; // 0x28(0x10)
	None OnAcquisitionFailed; // 0x38(0x10)
	None StoreItemHelper; // 0x48(0x08)
	None WaitingWidget; // 0x218(0x08)
	None OnAsyncImageLoadStarted; // 0x220(0x10)
	None OnAsyncImageLoadComplete; // 0x230(0x10)
	None OnAsyncImageLoadCanceled; // 0x240(0x10)
	None OnAsyncImageBrushChanged; // 0x250(0x10)
	None MyHud; // 0x28(0x08)
	None OnChatMessageReceived; // 0x38(0x10)
	None OnChatMessageRead; // 0x48(0x10)
	None OnChatChannelJoined; // 0x58(0x10)
	None OnChatChannelLeft; // 0x68(0x10)
	None ChatMessageIds; // 0x78(0x10)
	None PendingChatMessageIds; // 0x88(0x10)
	None ChatMessagesById; // 0x98(0x50)
	None LastCreatedMessageId; // 0xe8(0x04)
	None m_FilteredPlayerIds; // 0xf0(0x10)
	None ChatCommands; // 0x100(0x10)
	None OnCollectionAvatarsUpdated; // 0x38(0x10)
	None OnCollectionAvatarAcquisition; // 0x48(0x10)
	None CollectionAvatars; // 0x58(0x10)
	None OnGamepadHovered; // 0x238(0x10)
	None OnMouseEntered; // 0x248(0x10)
	None OnNavigateBack; // 0x258(0x10)
	None OnTextureLoadComplete; // 0x268(0x10)
	None OnNavigateUpFailed; // 0x278(0x10)
	None OnNavigateDownFailed; // 0x288(0x10)
	None OnNavigateLeftFailed; // 0x298(0x10)
	None OnNavigateRightFailed; // 0x2a8(0x10)
	None OnFocusGroupNavigateUpFailed; // 0x2b8(0x10)
	None OnFocusGroupNavigateDownFailed; // 0x2c8(0x10)
	None OnFocusGroupNavigateLeftFailed; // 0x2d8(0x10)
	None OnFocusGroupNavigateRightFailed; // 0x2e8(0x10)
	None OnHideSequenceFinished; // 0x2f8(0x10)
	None OnShowSequenceFinished; // 0x308(0x10)
	None MyHud; // 0x318(0x08)
	None MyRouteName; // 0x320(0x08)
	None CloseOnLogout; // 0x328(0x01)
	None IsComponent; // 0x329(0x01)
	None StartsHidden; // 0x32a(0x01)
	None UsesBlocker; // 0x32b(0x01)
	None BlockerClickToClose; // 0x32c(0x01)
	None EnableGameStateSetNotify; // 0x32d(0x01)
	None LoadedTexture; // 0x330(0x28)
	None MobileLayoutSequencePlayer; // 0x4a8(0x08)
	None MobileLayoutAnim; // 0x4b0(0x08)
	None bMobileLayoutActive; // 0x4b8(0x01)
	None PromptWidgetClass; // 0x4c0(0x08)
	None LeftPromptMargin; // 0x4c8(0x10)
	None CenterPromptMargin; // 0x4d8(0x10)
	None RightPromptMargin; // 0x4e8(0x10)
	None LeftContainer; // 0x4f8(0x08)
	None CenterContainer; // 0x500(0x08)
	None RightContainer; // 0x508(0x08)
	None PromptPool; // 0x510(0x10)
	None ContextActionData; // 0x4c0(0x08)
	None IsPoolable; // 0x4c8(0x01)
	None OnFriendDataUpdated; // 0x38(0x10)
	None OnFriendAddSuccess; // 0x48(0x10)
	None OnFriendAddError; // 0x58(0x10)
	None FriendInviteReceived; // 0x68(0x10)
	None OnFriendAdded; // 0x78(0x10)
	None OnFriendRejected; // 0x88(0x10)
	None OnlineFriends; // 0x98(0x04)
	None TotalFriends; // 0x9c(0x04)
	None CachedFriends; // 0xa0(0x10)
	None CachedPendingFriends; // 0xb0(0x10)
	None CachedFriendRequests; // 0xc0(0x10)
	None FriendsListUpdatePollInterval; // 0x100(0x04)
	None FriendsListUpdatePollingTimerHandle; // 0x108(0x08)
	None IsFriendsListUpdatePollingEnabled; // 0x110(0x01)
	None OnInputStateChanged; // 0x310(0x10)
	None PlayerDataUpdated; // 0x320(0x50)
	None InputManager; // 0x370(0x08)
	None ViewManager; // 0x378(0x08)
	None InputManagerClass; // 0x380(0x08)
	None SoundTheme; // 0x388(0x08)
	None RowName; // 0x30(0x08)
	None FormatAdditive; // 0x38(0x18)
	None RowData; // 0x50(0x50)
	None OnContextAction; // 0xa0(0x10)
	None OnCycleAction; // 0xb0(0x10)
	None OnHoldActionUpdate; // 0xc0(0x10)
	None OnHoldReleaseAction; // 0xd0(0x10)
	None InputFocusData; // 0x28(0x50)
	None InputComponent; // 0xa0(0x08)
	None GlobalRouteName; // 0xe4(0x08)
	None ContextActionInputComponent; // 0xf0(0x08)
	None ContextActionDataTableClassName; // 0xf8(0x18)
	None ContextActionDT; // 0x110(0x08)
	None RouteContextInfoMap; // 0x118(0x50)
	None ActiveRoute; // 0x168(0x08)
	None OverrideRouteStack; // 0x170(0x10)
	None OnRenamed; // 0x28(0x10)
	None OnNumberChanged; // 0x38(0x10)
	None OnTypeChanged; // 0x48(0x10)
	None OnServerUpdate; // 0x58(0x10)
	None OnLocalUpdate; // 0x68(0x10)
	None OnLoadoutsInitialized; // 0x30(0x10)
	None OnLoadoutsUpdatedFromServer; // 0x40(0x10)
	None OnLoadoutFactoryReadyNoLoadouts; // 0x50(0x10)
	None OnLoadoutChanged; // 0x60(0x10)
	None OnLoadoutAdded; // 0x70(0x10)
	None OnLoadoutDeleted; // 0x80(0x10)
	None Loadouts; // 0x98(0x10)
	None OnLoginUserChanged; // 0x38(0x10)
	None OnLoginStateChanged; // 0x48(0x10)
	None OnLoginError; // 0x58(0x10)
	None OnControllerDisconnected; // 0x70(0x10)
	None bAllowLoginDuringPartialInstall; // 0x80(0x01)
	None ErrorMsgsDT; // 0x88(0x08)
	None bAttemptedDeferredInviteAutoLogin; // 0x90(0x01)
	None OnLoginWaitQueueMessage; // 0x108(0x10)
	None OnPartyDataUpdated; // 0x38(0x10)
	None OnPartyLocalPlayerLeft; // 0x48(0x10)
	None OnPartyLocalPlayerPromoted; // 0x58(0x10)
	None OnPartyMemberPromoted; // 0x68(0x10)
	None OnPartyMemberDataUpdated; // 0x78(0x10)
	None OnPendingPartyMemberDataAdded; // 0x88(0x10)
	None OnPendingPartyMemberAccepted; // 0x98(0x10)
	None OnPartyMemberRemoved; // 0xa8(0x10)
	None OnPartyMemberLeft; // 0xb8(0x10)
	None OnPartyDisbanded; // 0xc8(0x10)
	None OnPartyInvitationError; // 0xd8(0x10)
	None OnPartyInvitationSent; // 0xe8(0x10)
	None OnPartyInvitationReceived; // 0xf8(0x10)
	None OnPartyMessageReceived; // 0x108(0x10)
	None OnPartyInvitationAccepted; // 0x118(0x10)
	None OnPartyInvitationRejected; // 0x128(0x10)
	None OnPartyInvitationExpired; // 0x138(0x10)
	None OnPartyInfoUpdated; // 0x148(0x10)
	None PartyMembers; // 0x158(0x10)
	None PartyInviter; // 0x168(0x08)
	None LastInviteSentErrorMessage; // 0x170(0x10)
	None OnPlayerDataChanged; // 0x38(0x10)
	None OnPlayerRankChanged; // 0x48(0x10)
	None OnCrossplayChanged; // 0x58(0x10)
	None PlayerId; // 0x68(0x08)
	None PlayerName; // 0x70(0x10)
	None Level; // 0x80(0x04)
	None AvatarId; // 0x84(0x04)
	None LastMMR; // 0x88(0x04)
	None CurrentMMR; // 0x8c(0x04)
	None BestMMR; // 0x90(0x04)
	None CurrentWinRank; // 0x94(0x04)
	None PreviousWinRank; // 0x98(0x04)
	None CurrentWinPeak; // 0x9c(0x04)
	None PreviousWinPeak; // 0xa0(0x04)
	None CurrentWinStreak; // 0xa4(0x04)
	None PreviousWinStreak; // 0xa8(0x04)
	None OnFilteredNameSetDel; // 0x28(0x10)
	None OnSearchByNameResultsUpdated; // 0x38(0x10)
	None CachedSearchByNameResults; // 0x48(0x10)
	None PopupQueue; // 0x4d0(0x10)
	None m_nPopupId; // 0x4e0(0x04)
	None CommittedText; // 0x5c8(0x18)
	None OnQueueJoined; // 0x38(0x10)
	None OnQueueLeft; // 0x48(0x10)
	None OnQueueStatusChange; // 0x58(0x10)
	None OnQueueDataUpdated; // 0x68(0x10)
	None OnMatchStatusUpdatedError; // 0x78(0x10)
	None OnCustomMatchJoined; // 0x88(0x10)
	None OnCustomQueueMemberAdded; // 0x98(0x10)
	None OnCustomQueueMemberRemoved; // 0xa8(0x10)
	None OnCustomQueueMemberUpdated; // 0xb8(0x10)
	None OnCustomQueueChanged; // 0xc8(0x10)
	None OnCustomInviteErrorRecieved; // 0xd8(0x10)
	None PendingCustomMatchMapId; // 0xe8(0x04)
	None ActivityQueuePairs; // 0xf0(0x10)
	None ActivityToJoin; // 0x100(0x10)
	None bActivityToJoinIsMultiplayer; // 0x110(0x01)
	None QueueIds; // 0x118(0x10)
	None QueueUpdatePollInterval; // 0x188(0x04)
	None QueueUpdateTimerHandle; // 0x190(0x08)
	None CustomMatchMembers; // 0x198(0x10)
	None CustomMatchSpectateTeamId; // 0x218(0x04)
	None RepeatMapGameIds; // 0x220(0x10)
	None RepeatMapOdds; // 0x230(0x04)
	None bBorderLeft; // 0x140(0x01)
	None bBorderRight; // 0x141(0x01)
	None bBorderTop; // 0x142(0x01)
	None bBorderBottom; // 0x143(0x01)
	None bForceDrawBorders; // 0x144(0x01)
	None OnPopulateUserSettings; // 0x38(0x10)
	None OnPopulateUserBindings; // 0x48(0x10)
	None OnPopulateUserGPBindings; // 0x58(0x10)
	None OnPostLogin; // 0x68(0x10)
	None OnPostLogoff; // 0x78(0x10)
	None OnSettingValueChanged; // 0x88(0x10)
	None LootTableItemId; // 0x28(0x04)
	None VendorId; // 0x2c(0x04)
	None PriceInUI; // 0x30(0x04)
	None CurrencyType; // 0x38(0x08)
	None Quantity; // 0x40(0x04)
	None LocationId; // 0x44(0x04)
	None ExternalTransactionId; // 0x48(0x10)
	None CouponId; // 0x58(0x04)
	None GiftPlayerId; // 0x5c(0x04)
	None GiftMsgIndex; // 0x60(0x04)
	None AnonymousGift; // 0x64(0x01)
	None SkipCurrencyAmountValidation; // 0x65(0x01)
	None pItemHelper; // 0x68(0x08)
	None SKU; // 0x28(0x10)
	None PreSaleCost; // 0x38(0x04)
	None DisplayPreSaleCost; // 0x40(0x18)
	None cost; // 0x58(0x04)
	None DisplayCost; // 0x60(0x18)
	None CurrencyCode; // 0x78(0x18)
	None Name; // 0x90(0x18)
	None Desc; // 0xa8(0x18)
	None ShortDesc; // 0xc0(0x18)
	None TaxMessage; // 0xd8(0x18)
	None PreSalePrice; // 0x28(0x04)
	None Price; // 0x2c(0x04)
	None CurrencyType; // 0x30(0x28)
	None pItemHelper; // 0x58(0x08)
	None OnPriceSetDirty; // 0x28(0x10)
	None pItemHelper; // 0x48(0x08)
	None InventoryItem; // 0x50(0x28)
	None PortalOffer; // 0x78(0x08)
	None OnPurchaseItem; // 0x28(0x10)
	None OnPurchasePortalItem; // 0x38(0x10)
	None OnNotEnoughCurrency; // 0x48(0x10)
	None OnReceiveVendor; // 0x58(0x10)
	None OnReceiveXpTables; // 0x68(0x10)
	None OnReceivePricePoints; // 0x78(0x10)
	None OnPortalOffersReceived; // 0x88(0x10)
	None OnPendingPurchaseReceived; // 0x98(0x10)
	None OnPurchaseSubmitted; // 0xa8(0x10)
	None SkuToStoreItem; // 0xe0(0x50)
	None StoreItems; // 0x130(0x50)
	None XpTables; // 0x1e0(0x50)
	None XpTablesLoaded; // 0x280(0x01)
	None PricePointsLoaded; // 0x281(0x01)
	None PortalOffersLoaded; // 0x282(0x01)
	None GameInstance; // 0x288(0x08)
	None SoundEventBindings; // 0x28(0x50)
	None StringValue; // 0x28(0x10)
	None IntValue; // 0x38(0x04)
	None NameValue; // 0x3c(0x08)
	None DisplayTarget; // 0x28(0x08)
	None MyManager; // 0x30(0x08)
	None CurrentTransitionState; // 0x38(0x01)
	None CurrentRouteStack; // 0x40(0x10)
	None CurrentTransitionRouteStack; // 0x50(0x10)
	None RouteWidgetMap; // 0x60(0x50)
	None DefaultRoute; // 0xb0(0x08)
	None PendingRouteData; // 0xc0(0x50)
	None Routes; // 0x110(0x08)
	None ViewLayers; // 0x28(0x10)
	None StickyWidgetMap; // 0x38(0x50)
	None OnViewStateChanged; // 0x88(0x10)
	None OnViewStateChangeStarted; // 0x98(0x10)
	None HudRef; // 0xa8(0x08)
	None CanvasPanels; // 0xb0(0x10)
	None StickyWidgets; // 0xc0(0x10)
	None Routes; // 0xd0(0x08)
	None AlwaysCheckRouteData; // 0xd8(0x10)
	None bPendingPartyVoipJoin; // 0x28(0x01)
	None bPendingMatchVoipJoin; // 0x29(0x01)
	None CurrentPartyVoiceChatChannel; // 0x30(0x10)
	None CurrentPartyId; // 0x40(0x04)
	None CurrentMatchVoiceChatChannel; // 0x48(0x10)
	None CurrentMatchStatus; // 0x58(0x01)
	None CurrentMatchId; // 0x60(0x10)
	None bCurrentIsTokenForTaskForce; // 0x70(0x01)
	None PartyDataFactory; // 0x78(0x08)
	None QueueDataFactory; // 0x80(0x08)
	None bRedirectLogsToConsole; // 0xeb8(0x01)
	None bAllowReloadingDefaultLevel; // 0xeb9(0x01)
	None FrameRate; // 0x30(0x08)
	None UberGraphFrame; // 0x520(0x08)
	None hoveranim; // 0x528(0x08)
	None Button; // 0x530(0x08)
	None HoverImage; // 0x538(0x08)
	None Image_1; // 0x540(0x08)
	None PreferredSiteIcon; // 0x548(0x08)
	None RegionName; // 0x550(0x08)
	None SiteId; // 0x558(0x04)
	None SiteName; // 0x560(0x18)
	None OnRegionSelected; // 0x578(0x10)
	None HoverRegionSelectEntrySFX; // 0x588(0x08)
	None ClickRegionSelectEntrySFX; // 0x590(0x08)
	None OnInstanceTakePointDamage; // 0x680(0x10)
	None OnInstanceTakeRadialDamage; // 0x690(0x10)
	None GenerationGuid; // 0x6a0(0x10)
	None UpdateGuid; // 0x28(0x10)
	None Density; // 0x38(0x04)
	None DensityAdjustmentFactor; // 0x3c(0x04)
	None Radius; // 0x40(0x04)
	None bSingleInstanceModeOverrideRadius; // 0x44(0x01)
	None SingleInstanceModeRadius; // 0x48(0x04)
	None Scaling; // 0x4c(0x01)
	None ScaleX; // 0x50(0x08)
	None ScaleY; // 0x58(0x08)
	None ScaleZ; // 0x60(0x08)
	None VertexColorMaskByChannel; // 0x68(0x30)
	None VertexColorMask; // 0x98(0x01)
	None VertexColorMaskThreshold; // 0x9c(0x04)
	None VertexColorMaskInvert; // 0xa0(0x01)
	None ZOffset; // 0xa4(0x08)
	None AlignToNormal; // 0xac(0x01)
	None AlignMaxAngle; // 0xb0(0x04)
	None RandomYaw; // 0xb4(0x01)
	None RandomPitchAngle; // 0xb8(0x04)
	None GroundSlopeAngle; // 0xbc(0x08)
	None Height; // 0xc4(0x08)
	None LandscapeLayers; // 0xd0(0x10)
	None MinimumLayerWeight; // 0xe0(0x04)
	None ExclusionLandscapeLayers; // 0xe8(0x10)
	None MinimumExclusionLayerWeight; // 0xf8(0x04)
	None LandscapeLayer; // 0xfc(0x08)
	None CollisionWithWorld; // 0x104(0x01)
	None CollisionScale; // 0x108(0x0c)
	None MeshBounds; // 0x114(0x1c)
	None LowBoundOriginRadius; // 0x130(0x0c)
	None Mobility; // 0x13c(0x01)
	None CullDistance; // 0x140(0x08)
	None bEnableStaticLighting; // 0x148(0x01)
	None CastShadow; // 0x148(0x01)
	None bAffectDynamicIndirectLighting; // 0x148(0x01)
	None bAffectDistanceFieldLighting; // 0x148(0x01)
	None bCastDynamicShadow; // 0x148(0x01)
	None bCastStaticShadow; // 0x148(0x01)
	None bCastShadowAsTwoSided; // 0x148(0x01)
	None bReceivesDecals; // 0x148(0x01)
	None bOverrideLightMapRes; // 0x149(0x01)
	None OverriddenLightMapRes; // 0x14c(0x04)
	None LightmapType; // 0x150(0x01)
	None bUseAsOccluder; // 0x154(0x01)
	None BodyInstance; // 0x158(0x110)
	None CustomNavigableGeometry; // 0x268(0x01)
	None LightingChannels; // 0x269(0x01)
	None bRenderCustomDepth; // 0x26c(0x01)
	None CustomDepthStencilValue; // 0x270(0x04)
	None TranslucencySortPriority; // 0x274(0x04)
	None CollisionRadius; // 0x278(0x04)
	None ShadeRadius; // 0x27c(0x04)
	None NumSteps; // 0x280(0x04)
	None InitialSeedDensity; // 0x284(0x04)
	None AverageSpreadDistance; // 0x288(0x04)
	None SpreadVariance; // 0x28c(0x04)
	None SeedsPerStep; // 0x290(0x04)
	None DistributionSeed; // 0x294(0x04)
	None MaxInitialSeedOffset; // 0x298(0x04)
	None bCanGrowInShade; // 0x29c(0x01)
	None bSpawnsInShade; // 0x29d(0x01)
	None MaxInitialAge; // 0x2a0(0x04)
	None MaxAge; // 0x2a4(0x04)
	None OverlapPriority; // 0x2a8(0x04)
	None ProceduralScale; // 0x2ac(0x08)
	None ScaleCurve; // 0x2b8(0x88)
	None ChangeCount; // 0x340(0x04)
	None ReapplyDensity; // 0x344(0x01)
	None ReapplyRadius; // 0x344(0x01)
	None ReapplyAlignToNormal; // 0x344(0x01)
	None ReapplyRandomYaw; // 0x344(0x01)
	None ReapplyScaling; // 0x344(0x01)
	None ReapplyScaleX; // 0x344(0x01)
	None ReapplyScaleY; // 0x344(0x01)
	None ReapplyScaleZ; // 0x344(0x01)
	None ReapplyRandomPitchAngle; // 0x345(0x01)
	None ReapplyGroundSlope; // 0x345(0x01)
	None ReapplyHeight; // 0x345(0x01)
	None ReapplyLandscapeLayers; // 0x345(0x01)
	None ReapplyZOffset; // 0x345(0x01)
	None ReapplyCollisionWithWorld; // 0x345(0x01)
	None ReapplyVertexColorMask; // 0x345(0x01)
	None bEnableDensityScaling; // 0x345(0x01)
	None RuntimeVirtualTextures; // 0x348(0x10)
	None VirtualTextureCullMips; // 0x358(0x04)
	None VirtualTextureRenderPassType; // 0x35c(0x01)
	None ActorClass; // 0x360(0x08)
	None bShouldAttachToBaseComponent; // 0x368(0x01)
	None Mesh; // 0x360(0x08)
	None OverrideMaterials; // 0x368(0x10)
	None ComponentClass; // 0x378(0x08)
	None CapsuleComponent; // 0x230(0x08)
	None TouchingActorEntryPosition; // 0x238(0x0c)
	None FoliageVelocity; // 0x244(0x0c)
	None FoliageForce; // 0x250(0x0c)
	None FoliagePosition; // 0x25c(0x0c)
	None FoliageDamageImpulseScale; // 0x268(0x04)
	None FoliageTouchImpulseScale; // 0x26c(0x04)
	None FoliageStiffness; // 0x270(0x04)
	None FoliageStiffnessQuadratic; // 0x274(0x04)
	None FoliageDamping; // 0x278(0x04)
	None MaxDamageImpulse; // 0x27c(0x04)
	None MaxTouchImpulse; // 0x280(0x04)
	None MaxForce; // 0x284(0x04)
	None Mass; // 0x288(0x04)
	None ProceduralFoliageVolume; // 0x258(0x08)
	None FoliageSpawner; // 0xb0(0x08)
	None TileOverlap; // 0xb8(0x04)
	None SpawningVolume; // 0xc0(0x08)
	None ProceduralGuid; // 0xc8(0x10)
	None RandomSeed; // 0x28(0x04)
	None TileSize; // 0x2c(0x04)
	None NumUniqueTiles; // 0x30(0x04)
	None MinimumQuadTreeSize; // 0x34(0x04)
	None FoliageTypes; // 0x40(0x10)
	None FoliageSpawner; // 0x28(0x08)
	None InstancesArray; // 0xd0(0x10)
	None ProceduralComponent; // 0x258(0x08)
	None Rules; // 0x30(0x0c)
	None CollectionQuery; // 0x40(0x48)
	None PrimaryAssetType; // 0x88(0x08)
	None bHasCompletedInitialAssetScan; // 0x4e0(0x01)
	None ItemId; // 0x30(0x04)
	None ItemDisplayName; // 0x38(0x18)
	None ItemDescription; // 0x50(0x18)
	None FriendlySearchName; // 0x68(0x10)
	None IsOwnableInventoryItem; // 0x78(0x01)
	None DisplayableLootIds; // 0x80(0x10)
	None ItemIcon; // 0x90(0x28)
	None ItemIconPath; // 0xb8(0x18)
	None LegacyItemIconTexture; // 0xd0(0x28)
	None Icons; // 0xf8(0x10)
	None CollectionContainer; // 0x108(0x20)
	None ExternalProductSkus; // 0x128(0x50)
	None OnlyDisplayAcqusitionIfWhitelisted; // 0x178(0x01)
	None BlackListedLootIds; // 0x180(0x10)
	None LootId; // 0x1b8(0x04)
	None Rules; // 0x1bc(0x0c)
	None SocketErrorDisconnectDelay; // 0x1ad0(0x04)
	None OnSuccess; // 0x30(0x10)
	None OnFailure; // 0x40(0x10)
	None OnSuccess; // 0x30(0x10)
	None OnFailure; // 0x40(0x10)
	None OnSuccess; // 0x30(0x10)
	None OnFailure; // 0x40(0x10)
	None OnSuccess; // 0x30(0x10)
	None OnFailure; // 0x40(0x10)
	None OnSuccess; // 0x30(0x10)
	None OnFailure; // 0x40(0x10)
	None OnSuccess; // 0x30(0x10)
	None OnFailure; // 0x40(0x10)
	None OnSuccess; // 0x30(0x10)
	None OnFailure; // 0x40(0x10)
	None OnSuccess; // 0x30(0x10)
	None OnFailure; // 0x40(0x10)
	None OnSuccess; // 0x30(0x10)
	None OnFailure; // 0x40(0x10)
	None OnSuccess; // 0x28(0x10)
	None OnFailure; // 0x38(0x10)
	None OnSuccess; // 0x28(0x10)
	None OnFailure; // 0x38(0x10)
	None OnSuccess; // 0x28(0x10)
	None OnFailure; // 0x38(0x10)
	None OnSuccess; // 0x28(0x10)
	None OnFailure; // 0x38(0x10)
	None OnSuccess; // 0x28(0x10)
	None OnFailure; // 0x38(0x10)
	None OnSuccess; // 0x28(0x10)
	None OnFailure; // 0x38(0x10)
	None LogPortUnreach; // 0x778(0x01)
	None AllowPlayerPortUnreach; // 0x778(0x01)
	None MaxPortCountToTry; // 0x77c(0x04)
	None ServerDesiredSocketReceiveBufferBytes; // 0x78c(0x04)
	None ServerDesiredSocketSendBufferBytes; // 0x790(0x04)
	None ClientDesiredSocketReceiveBufferBytes; // 0x794(0x04)
	None ClientDesiredSocketSendBufferBytes; // 0x798(0x04)
	None MaxSecondsInReceive; // 0x7a0(0x08)
	None NbPacketsBetweenReceiveTimeTest; // 0x7a8(0x04)
	None ResolutionConnectionTimeout; // 0x7ac(0x04)
	None OnSuccess; // 0x30(0x10)
	None OnFailure; // 0x40(0x10)
	None OnSuccess; // 0x28(0x10)
	None OnFailure; // 0x38(0x10)
	None OnSuccess; // 0x28(0x10)
	None OnFailure; // 0x38(0x10)
	None OnSuccess; // 0x30(0x10)
	None OnFailure; // 0x40(0x10)
	None BeaconConnectionInitialTimeout; // 0x228(0x04)
	None BeaconConnectionTimeout; // 0x22c(0x04)
	None NetDriver; // 0x230(0x08)
	None BeaconOwner; // 0x250(0x08)
	None BeaconConnection; // 0x258(0x08)
	None ConnectionState; // 0x260(0x01)
	None ListenPort; // 0x250(0x04)
	None ClientActors; // 0x258(0x10)
	None BeaconTypeName; // 0x220(0x10)
	None ClientBeaconActorClass; // 0x230(0x08)
	None ClientActors; // 0x238(0x10)
	None VoiceSubsystemNameOverride; // 0x28(0x08)
	None bOnlinePIEEnabled; // 0x38(0x01)
	None Logins; // 0x40(0x10)
	None bIsFromInvite; // 0x1d8(0x01)
	None bHandlingDisconnect; // 0x1d9(0x01)
	None DestSessionId; // 0x2e0(0x10)
	None PendingReservation; // 0x2f0(0x50)
	None RequestType; // 0x340(0x01)
	None bPendingReservationSent; // 0x341(0x01)
	None bCancelReservation; // 0x342(0x01)
	None State; // 0x248(0x08)
	None bLogoutOnSessionTimeout; // 0x2b0(0x01)
	None SessionTimeoutSecs; // 0x2b4(0x04)
	None TravelSessionTimeoutSecs; // 0x2b8(0x04)
	None SessionName; // 0x28(0x08)
	None NumConsumedReservations; // 0x30(0x04)
	None MaxReservations; // 0x34(0x04)
	None NumTeams; // 0x38(0x04)
	None NumPlayersPerTeam; // 0x3c(0x04)
	None TeamAssignmentMethod; // 0x40(0x08)
	None ReservedHostTeamNum; // 0x48(0x04)
	None ForceTeamNum; // 0x4c(0x04)
	None bRestrictCrossConsole; // 0x50(0x01)
	None bEnableRemovalRequests; // 0x51(0x01)
	None Reservations; // 0x58(0x10)
	None OnSuccess; // 0x30(0x10)
	None OnFailure; // 0x40(0x10)
	None OnSuccess; // 0x30(0x10)
	None OnFailure; // 0x40(0x10)
	None DestSessionId; // 0x2e0(0x10)
	None PendingReservation; // 0x2f0(0x78)
	None RequestType; // 0x368(0x01)
	None bPendingReservationSent; // 0x369(0x01)
	None bCancelReservation; // 0x36a(0x01)
	None State; // 0x248(0x08)
	None bLogoutOnSessionTimeout; // 0x2b0(0x01)
	None SessionTimeoutSecs; // 0x2b4(0x04)
	None TravelSessionTimeoutSecs; // 0x2b8(0x04)
	None SessionName; // 0x28(0x08)
	None NumConsumedReservations; // 0x30(0x04)
	None MaxReservations; // 0x34(0x04)
	None bRestrictCrossConsole; // 0x38(0x01)
	None Reservations; // 0x40(0x10)
	None bAutoDestroy; // 0x208(0x01)
	None bStopWhenOwnerDestroyed; // 0x208(0x01)
	None bAllowSpatialization; // 0x208(0x01)
	None bOverrideAttenuation; // 0x208(0x01)
	None bOutputToBusOnly; // 0x20c(0x01)
	None AttenuationSettings; // 0x210(0x08)
	None AttenuationOverrides; // 0x218(0x3a0)
	None ConcurrencySettings; // 0x5b8(0x08)
	None ConcurrencySet; // 0x5c0(0x50)
	None SoundClass; // 0x610(0x08)
	None SourceEffectChain; // 0x618(0x08)
	None SoundSubmix; // 0x620(0x08)
	None SoundSubmixSends; // 0x628(0x10)
	None BusSends; // 0x638(0x10)
	None Modulation; // 0x648(0x10)
	None PreEffectBusSends; // 0x658(0x10)
	None bIsUISound; // 0x668(0x01)
	None bIsPreviewSound; // 0x668(0x01)
	None EnvelopeFollowerAttackTime; // 0x66c(0x04)
	None EnvelopeFollowerReleaseTime; // 0x670(0x04)
	None OnAudioEnvelopeValue; // 0x678(0x10)
	None Synth; // 0x6a8(0x08)
	None AudioComponent; // 0x6b0(0x08)
	None Settings; // 0xb8(0x50)
	None Settings; // 0x78(0x10)
	None Settings; // 0x9c(0x34)
	None Settings; // 0xa0(0x38)
	None OwningSynthComponent; // 0x360(0x08)
	None UberGraphFrame; // 0x130(0x08)
	None UberGraphFrame; // 0x238(0x08)
	None LevelText; // 0x240(0x08)
	None Mastered; // 0x248(0x08)
	None MasteryMax; // 0x250(0x08)
	None Unmastered; // 0x258(0x08)
	None WidgetSwitcher_88; // 0x260(0x08)
	None Components; // 0x28(0x10)
	None Signature; // 0x28(0x10)
	None EvalOptions; // 0x50(0x02)
	None Easing; // 0x58(0x38)
	None SectionRange; // 0x90(0x10)
	None PreRollFrames; // 0xa0(0x04)
	None PostRollFrames; // 0xa4(0x04)
	None RowIndex; // 0xa8(0x04)
	None OverlapPriority; // 0xac(0x04)
	None bIsActive; // 0xb0(0x01)
	None bIsLocked; // 0xb0(0x01)
	None StartTime; // 0xb4(0x04)
	None EndTime; // 0xb8(0x04)
	None PrerollTime; // 0xbc(0x04)
	None PostrollTime; // 0xc0(0x04)
	None bIsInfinite; // 0xc4(0x01)
	None bSupportsInfiniteRange; // 0xc8(0x01)
	None BlendType; // 0xc9(0x02)
	None EvalOptions; // 0x50(0x04)
	None bIsEvalDisabled; // 0x55(0x01)
	None PrecompiledEvaluationTemplate; // 0x50(0x2f0)
	None DefaultCompletionMode; // 0x340(0x01)
	None bParentContextsAreSignificant; // 0x341(0x01)
	None bPlayableDirectly; // 0x342(0x01)
	None OnPlay; // 0x408(0x10)
	None OnPlayReverse; // 0x418(0x10)
	None OnStop; // 0x428(0x10)
	None OnPause; // 0x438(0x10)
	None OnFinished; // 0x448(0x10)
	None Status; // 0x458(0x01)
	None bReversePlayback; // 0x45c(0x01)
	None Sequence; // 0x460(0x08)
	None StartTime; // 0x468(0x04)
	None DurationFrames; // 0x46c(0x04)
	None CurrentNumLoops; // 0x470(0x04)
	None PlaybackSettings; // 0x488(0x14)
	None RootTemplateInstance; // 0x4a0(0x320)
	None NetSyncProps; // 0x828(0x10)
	None PlaybackClient; // 0x838(0x10)
	None Parameters; // 0xe0(0x24)
	None StartOffset; // 0x104(0x04)
	None TimeScale; // 0x108(0x04)
	None PrerollTime; // 0x10c(0x04)
	None SubSequence; // 0x110(0x08)
	None ActorToRecord; // 0x118(0x1c)
	None TargetSequenceName; // 0x138(0x10)
	None TargetPathToRecordTo; // 0x148(0x10)
	None Sections; // 0x58(0x10)
	None Spawnables; // 0x50(0x10)
	None Possessables; // 0x60(0x10)
	None ObjectBindings; // 0x70(0x10)
	None BindingGroups; // 0x80(0x50)
	None MasterTracks; // 0xd0(0x10)
	None CameraCutTrack; // 0xe0(0x08)
	None SelectionRange; // 0xe8(0x10)
	None PlaybackRange; // 0xf8(0x10)
	None TickResolution; // 0x108(0x08)
	None DisplayRate; // 0x110(0x08)
	None EvaluationType; // 0x118(0x01)
	None ClockSource; // 0x119(0x01)
	None CustomClockSourcePath; // 0x120(0x18)
	None MarkedFrames; // 0x138(0x10)
	None BindingData; // 0x28(0x10)
	None Type; // 0x30(0x01)
	None Curve; // 0x30(0x08)
	None FolderName; // 0x28(0x08)
	None ChildFolders; // 0x30(0x10)
	None ChildMasterTracks; // 0x40(0x10)
	None ChildObjectBindingStrings; // 0x50(0x10)
	None bHighPassFilter; // 0x58(0x01)
	None SectionArray; // 0x60(0x10)
	None MovieScene; // 0x348(0x08)
	None SectionArray; // 0x68(0x10)
	None MaxParamName; // 0x38(0x08)
	None MinParamName; // 0x40(0x08)
	None DefaultMaxValue; // 0x48(0x0c)
	None DefaultMinValue; // 0x54(0x0c)
	None m_EffectManager; // 0x4c8(0x08)
	None r_TweenInfo; // 0x4d0(0x14)
	None r_ChargeInfo; // 0x4e4(0x1c)
	None bUseTweenWalkingPhysics; // 0x6a0(0x01)
	None r_ChargeInfo; // 0x6a8(0x1c)
	None r_TweenInfo; // 0x6c4(0x14)
	None LogFileName; // 0x220(0x10)
	None r_ReplicatedEffectData; // 0xd8(0x120)
	None r_ReplicatedProperties; // 0x1f8(0x170)
	None m_EffectGroupTypes; // 0x28(0x20)
	None m_BehaviorCategories; // 0x48(0x20)
	None m_Effects; // 0x68(0x10)
	None m_AttachmentClass; // 0x78(0x08)
	None m_StackingCategory; // 0x80(0x08)
	None m_ApplicationRule; // 0x88(0x04)
	None m_nMaxStackCount; // 0x8c(0x01)
	None m_bApplyInstantOnInterval; // 0x8d(0x01)
	None m_bApplyStackOnInterval; // 0x8e(0x01)
	None m_fStartDuration; // 0x90(0x04)
	None m_fDuration; // 0x94(0x04)
	None m_fIntervalDuration; // 0x98(0x04)
	None m_fApplicationStrength; // 0x9c(0x04)
	None m_Property; // 0x28(0x24)
	None m_bApplyOnInternal; // 0x4c(0x01)
	None bLogoffOnAppSuspend; // 0x1e8(0x01)
	None bLogoffOnAppResume; // 0x1e9(0x01)
	None LastSonyMatchId; // 0x1f0(0x10)
	None bStartHotfixProcessingOnUpdateAppSettings; // 0x240(0x01)
	None PersistentMapSuffix; // 0x388(0x10)
	None SublevelSuffixes; // 0x398(0x10)
	None HighMemorySublevelSuffixes; // 0x3a8(0x10)
	None LowMemorySublevelSuffixes; // 0x3b8(0x10)
	None bAutoEnableCombatLog; // 0x3e8(0x01)
	None bUploadCombatLogOverride; // 0x3e9(0x01)
	None bFubarForCPUFramerate; // 0x438(0x01)
	None bFubarForPacketLoss; // 0x439(0x01)
	None FubarShutdownWaitTimeoutTime; // 0x43c(0x04)
	None bDeferWelcomeUntilAllPlayersConnect; // 0x440(0x01)
	None bReadyForWelcome; // 0x441(0x01)
	None SonyActivityId; // 0x4a0(0x10)
	None SonyMatchOwnerNetTimeout; // 0x4b0(0x04)
	None SonyMatchData; // 0x4b8(0x18)
	None SonyIneligibleMatchOwners; // 0x4d0(0x10)
	None PGame_InactivePlayerArray; // 0x4f0(0x10)
	None r_SonyMatchIdForPlayerFeedback; // 0x290(0x10)
	None OnHandlerObjectReady; // 0x28(0x10)
	None OnJsonDownloaded; // 0x38(0x10)
	None OnJsonReady; // 0x48(0x10)
	None OnImagesDownloaded; // 0x58(0x10)
	None mapFilePathToTexture; // 0x120(0x50)
	None SonyMatchId; // 0x658(0x10)
	None SonyActivityId; // 0x668(0x10)
	None SonyMatchState; // 0x678(0x01)
	None QueuedSonyMatchState; // 0x679(0x01)
	None bIsSonyMatchOwner; // 0x67a(0x01)
	None bIsEligibleSonyMatchOwner; // 0x67b(0x01)
	None bIsExclusiveSonyMatchOwner; // 0x67c(0x01)
	None m_CheatComponentClass; // 0x690(0x08)
	None r_CheatComponent; // 0x698(0x08)
	None r_ReplicatedNetId; // 0x6a0(0x08)
	None InputComponentClass; // 0x6a8(0x08)
	None bRestrictInvalidInputType; // 0x28(0x01)
	None KeyMouseSwitchDelta; // 0x12d0(0x04)
	None GamepadSwitchDelta; // 0x12d8(0x04)
	None PositionRecordMode; // 0xb0(0x01)
	None ExtrapolateFromLastEntry; // 0xb1(0x01)
	None bAutoPopulateOnBeginPlay; // 0xb2(0x01)
	None TrackedPrimitives; // 0xc8(0x10)
	None ActorsToAlwaysSpawn; // 0x3a0(0x10)
	None HighMemorySublevelSuffixes; // 0x3b0(0x10)
	None LowMemorySublevelSuffixes; // 0x3c0(0x10)
	None Probabilities; // 0x90(0x10)
	None AlwaysReturn; // 0x70(0x01)
	None ObjectUID; // 0x208(0x10)
	None UserIndex; // 0x218(0x04)
	None AutoPinType; // 0x21c(0x01)
	None bShouldPinActor; // 0x21d(0x01)
	None PinDataClass; // 0x220(0x08)
	None OnPersistentEntityPinned; // 0x228(0x10)
	None OnPersistentEntityPinLost; // 0x238(0x10)
	None PinnedCFUID; // 0x248(0x10)
	None PinnedSceneComponent; // 0x258(0x08)
	None PinData; // 0x260(0x08)
	None UpdateCheckFrequency; // 0x28(0x04)
	None OnUpdatedEventTriggerDelta; // 0x2c(0x10)
	None PinnedID; // 0x28(0x10)
	None ComponentWorldTransform; // 0x40(0x30)
	None PinTransform; // 0x70(0x30)
	None UberGraphFrame; // 0x520(0x08)
	None Addbutton_Fill; // 0x528(0x08)
	None AddButton_Hover; // 0x530(0x08)
	None Addbutton_HoverGradient; // 0x538(0x08)
	None Addbutton_Stroke; // 0x540(0x08)
	None AddButton_Up; // 0x548(0x08)
	None AddButtonHover; // 0x550(0x08)
	None AddButtonPlus; // 0x558(0x08)
	None EmptySlotGroup; // 0x560(0x08)
	None Image_355; // 0x568(0x08)
	None PlayBtn_HoverStroke; // 0x570(0x08)
	None PlayerCard; // 0x578(0x08)
	None SuggestionGroup; // 0x580(0x08)
	None Switcher; // 0x588(0x08)
	None HoverPartyModuleCardSlotSFX; // 0x590(0x08)
	None ClickPartyModuleCardSlotSFX; // 0x598(0x08)
	None UberGraphFrame; // 0x538(0x08)
	None LoadingSearch; // 0x540(0x08)
	None Intro; // 0x548(0x08)
	None Loading; // 0x550(0x08)
	None AutoListContent; // 0x558(0x08)
	None AutoListError; // 0x560(0x08)
	None AutoListSwitcher; // 0x568(0x08)
	None AutoLoadThrobber; // 0x570(0x08)
	None AutoLoadThrobber2; // 0x578(0x08)
	None AutoTab; // 0x580(0x08)
	None Blocker; // 0x588(0x08)
	None BlockerButton; // 0x590(0x08)
	None ContentSwitcher; // 0x598(0x08)
	None PlayerList; // 0x5a0(0x08)
	None SearchBar; // 0x5a8(0x08)
	None SearchList; // 0x5b0(0x08)
	None SearchListContent; // 0x5b8(0x08)
	None SearchListError; // 0x5c0(0x08)
	None SearchLoadThrobber; // 0x5c8(0x08)
	None SearchLoadThrobber2; // 0x5d0(0x08)
	None SearchSwitcher; // 0x5d8(0x08)
	None SearchTab; // 0x5e0(0x08)
	None SubmitBtn; // 0x5e8(0x08)
	None TitleLabel; // 0x5f0(0x08)
	None WBP_ModalPopupContainer; // 0x5f8(0x08)
	None RouteName; // 0x600(0x08)
	None OnSelect; // 0x608(0x10)
	None AutoListFocusGroup; // 0x618(0x04)
	None NoFocusGroup; // 0x61c(0x04)
	None SearchListFocusGroup; // 0x620(0x04)
	None SearchHandle; // 0x628(0x10)
	None UberGraphFrame; // 0x238(0x08)
	None ItemDesc; // 0x240(0x08)
	None ItemIcon; // 0x248(0x08)
	None ItemIconWrapper; // 0x250(0x08)
	None ItemName; // 0x258(0x08)
	None ItemTypeText; // 0x260(0x18)
	None Materials; // 0x30(0x10)
	None Tracks; // 0x40(0x10)
	None StartFrame; // 0x60(0x04)
	None EndFrame; // 0x64(0x04)
	None GeometryCacheComponent; // 0x220(0x08)
	None TopologyRanges; // 0x28(0x10)
	None DummyProperty; // 0x38(0x04)
	None GeometryCache; // 0x458(0x08)
	None bRunning; // 0x460(0x01)
	None bLooping; // 0x461(0x01)
	None StartTimeOffset; // 0x464(0x04)
	None PlaybackSpeed; // 0x468(0x04)
	None NumTracks; // 0x46c(0x04)
	None ElapsedTime; // 0x470(0x04)
	None Duration; // 0x4a4(0x04)
	None bManualTick; // 0x4a8(0x01)
	None Duration; // 0x28(0x04)
	None NumMeshSamples; // 0x58(0x04)
	None Codec; // 0x58(0x08)
	None StartSampleTime; // 0xc8(0x04)
	None UberGraphFrame; // 0x520(0x08)
	None OnHover; // 0x528(0x08)
	None ClickFill; // 0x530(0x08)
	None HighlightBorderWrapper; // 0x538(0x08)
	None HitTarget; // 0x540(0x08)
	None Image_215; // 0x548(0x08)
	None NamedSlot_151; // 0x550(0x08)
	None PanelBG; // 0x558(0x08)
	None OnBtnClicked; // 0x560(0x10)
	None OnBtnHovered; // 0x570(0x10)
	None OnBtnUnhovered; // 0x580(0x10)
	None bIsDisable; // 0x590(0x01)
	None bIsActive; // 0x591(0x01)
	None TintColor; // 0x594(0x10)
	None bColorOverride; // 0x5a4(0x01)
	None HoverStorePanelBtnSFX; // 0x5a8(0x08)
	None ClickStorePanelBtnSFX; // 0x5b0(0x08)
	None NodeName; // 0x30(0x10)
	None TreeAsset; // 0x40(0x08)
	None ParentNode; // 0x48(0x08)
	None Children; // 0x58(0x10)
	None Services; // 0x68(0x10)
	None bApplyDecoratorScope; // 0x88(0x01)
	None Services; // 0x58(0x10)
	None bIgnoreRestartSelf; // 0x68(0x01)
	None BlackboardKey; // 0x70(0x28)
	None bStartAILogicOnPossess; // 0x2d0(0x01)
	None bStopAILogicOnUnposses; // 0x2d0(0x01)
	None bLOSflag; // 0x2d0(0x01)
	None bSkipExtraLOSChecks; // 0x2d0(0x01)
	None bAllowStrafe; // 0x2d0(0x01)
	None bWantsPlayerState; // 0x2d0(0x01)
	None bSetControlRotationFromPawnOrientation; // 0x2d0(0x01)
	None PathFollowingComponent; // 0x2d8(0x08)
	None BrainComponent; // 0x2e0(0x08)
	None PerceptionComponent; // 0x2e8(0x08)
	None ActionsComp; // 0x2f0(0x08)
	None Blackboard; // 0x2f8(0x08)
	None CachedGameplayTasksComponent; // 0x300(0x08)
	None DefaultNavigationFilterClass; // 0x308(0x08)
	None ReceiveMoveCompleted; // 0x310(0x10)
	None SensesConfig; // 0xb0(0x10)
	None DominantSense; // 0xc0(0x08)
	None AIOwner; // 0xd8(0x08)
	None OnPerceptionUpdated; // 0x160(0x10)
	None OnTargetPerceptionUpdated; // 0x170(0x10)
	None DefaultExpirationAge; // 0x28(0x04)
	None NotifyType; // 0x2c(0x01)
	None bWantsNewPawnNotification; // 0x30(0x01)
	None bAutoRegisterAllPawnsAsSources; // 0x30(0x01)
	None PerceptionSystemInstance; // 0x38(0x08)
	None NoiseEvents; // 0x80(0x10)
	None SpeedOfSoundSq; // 0x90(0x04)
	None MaxTracesPerTick; // 0x148(0x04)
	None MinQueriesPerTimeSliceCheck; // 0x14c(0x04)
	None MaxTimeSlicePerTick; // 0x150(0x08)
	None HighImportanceQueryDistanceThreshold; // 0x158(0x04)
	None MaxQueryImportance; // 0x160(0x04)
	None SightLimitQueryImportance; // 0x164(0x04)
	None DebugColor; // 0x28(0x04)
	None MaxAge; // 0x2c(0x04)
	None bStartsEnabled; // 0x30(0x01)
	None bInverseCondition; // 0x60(0x01)
	None FlowAbortMode; // 0x64(0x01)
	None BlackboardKey; // 0x68(0x28)
	None Precision; // 0x98(0x04)
	None AcceptableRadius; // 0x98(0x04)
	None FilterClass; // 0xa0(0x08)
	None ObservedBlackboardValueTolerance; // 0xa8(0x04)
	None bObserveBlackboardValue; // 0xac(0x01)
	None bAllowStrafe; // 0xac(0x01)
	None bAllowPartialPath; // 0xac(0x01)
	None bTrackMovingGoal; // 0xac(0x01)
	None bProjectGoalLocation; // 0xac(0x01)
	None bReachTestIncludesAgentRadius; // 0xac(0x01)
	None bReachTestIncludesGoalRadius; // 0xac(0x01)
	None bStopOnOverlap; // 0xac(0x01)
	None bStopOnOverlapNeedsUpdate; // 0xad(0x01)
	None bDisablePathUpdateOnGoalLocationChange; // 0xb0(0x01)
	None bProjectVectorGoalToNavigation; // 0xb0(0x01)
	None bUpdatedDeprecatedProperties; // 0xb0(0x01)
	None Action; // 0x70(0x08)
	None BehaviorAsset; // 0x70(0x08)
	None VerNum; // 0x28(0x04)
	None TestOrder; // 0x30(0x04)
	None TestPurpose; // 0x34(0x01)
	None TestComment; // 0x38(0x10)
	None MultipleContextFilterOp; // 0x48(0x01)
	None MultipleContextScoreOp; // 0x49(0x01)
	None FilterType; // 0x4a(0x01)
	None BoolValue; // 0x50(0x38)
	None FloatValueMin; // 0x88(0x38)
	None FloatValueMax; // 0xc0(0x38)
	None ScoringEquation; // 0xf9(0x01)
	None ClampMinType; // 0xfa(0x01)
	None ClampMaxType; // 0xfb(0x01)
	None NormalizationType; // 0xfc(0x01)
	None ScoreClampMin; // 0x100(0x38)
	None ScoreClampMax; // 0x138(0x38)
	None ScoringFactor; // 0x170(0x38)
	None ReferenceValue; // 0x1a8(0x38)
	None bDefineReferenceValue; // 0x1e0(0x01)
	None bWorkOnFloatValues; // 0x1f0(0x01)
	None bAutoRegisterAsSource; // 0xb0(0x01)
	None RegisterAsSourceForSenses; // 0xb8(0x10)
	None PointLinks; // 0x230(0x10)
	None SegmentLinks; // 0x240(0x10)
	None SmartLinkComp; // 0x250(0x08)
	None bSmartLinkIsRelevant; // 0x258(0x01)
	None OnSmartLinkReached; // 0x260(0x10)
	None MovementComp; // 0xe8(0x08)
	None MyNavData; // 0xf8(0x08)
	None CharacterMovement; // 0x260(0x08)
	None CrowdAgentMoveDirection; // 0x268(0x0c)
	None ChildAction; // 0x28(0x08)
	None ParentAction; // 0x30(0x08)
	None OwnerComponent; // 0x38(0x08)
	None Instigator; // 0x40(0x08)
	None BrainComp; // 0x48(0x08)
	None bAllowNewSameClassInstance; // 0x80(0x01)
	None bReplaceActiveSameClassInstance; // 0x80(0x01)
	None bShouldPauseMovement; // 0x80(0x01)
	None bAlwaysNotifyOnFinished; // 0x80(0x01)
	None OnSuccess; // 0x28(0x10)
	None OnFail; // 0x38(0x10)
	None ParamName; // 0x28(0x08)
	None FloatValue; // 0x30(0x04)
	None IntValue; // 0x34(0x04)
	None BoolValue; // 0x38(0x01)
	None Min; // 0x40(0x04)
	None Max; // 0x44(0x04)
	None bInteger; // 0x48(0x01)
	None AISystem; // 0x30(0x08)
	None Senses; // 0x88(0x10)
	None PerceptionAgingRate; // 0x98(0x04)
	None ListenerDataType; // 0x80(0x08)
	None ListenerContainer; // 0x88(0x10)
	None UnprocessedEvents; // 0x98(0x10)
	None RegisteredEvents; // 0x80(0x10)
	None RegisteredEvents; // 0x80(0x10)
	None RegisteredEvents; // 0x80(0x10)
	None RegisteredEvents; // 0x80(0x10)
	None Implementation; // 0x48(0x08)
	None Implementation; // 0x48(0x08)
	None Implementation; // 0x48(0x08)
	None HearingRange; // 0x50(0x04)
	None LoSHearingRange; // 0x54(0x04)
	None bUseLoSHearing; // 0x58(0x01)
	None DetectionByAffiliation; // 0x5c(0x04)
	None Implementation; // 0x48(0x08)
	None SightRadius; // 0x50(0x04)
	None LoseSightRadius; // 0x54(0x04)
	None PeripheralVisionAngleDegrees; // 0x58(0x04)
	None DetectionByAffiliation; // 0x5c(0x04)
	None AutoSuccessRangeFromLastSeenLocation; // 0x60(0x04)
	None Event; // 0x28(0x30)
	None Event; // 0x28(0x30)
	None PerceptionSystemClassName; // 0x58(0x18)
	None HotSpotManagerClassName; // 0x70(0x18)
	None AcceptanceRadius; // 0x88(0x04)
	None PathfollowingRegularPathPointAcceptanceRadius; // 0x8c(0x04)
	None PathfollowingNavLinkAcceptanceRadius; // 0x90(0x04)
	None bFinishMoveOnGoalOverlap; // 0x94(0x01)
	None bAcceptPartialPaths; // 0x95(0x01)
	None bAllowStrafing; // 0x96(0x01)
	None bEnableBTAITasks; // 0x97(0x01)
	None bAllowControllersAsEQSQuerier; // 0x98(0x01)
	None bEnableDebuggerPlugin; // 0x99(0x01)
	None bForgetStaleActors; // 0x9a(0x01)
	None DefaultSightCollisionChannel; // 0x9b(0x01)
	None BehaviorTreeManager; // 0xa0(0x08)
	None EnvironmentQueryManager; // 0xa8(0x08)
	None PerceptionSystem; // 0xb0(0x08)
	None AllProxyObjects; // 0xb8(0x10)
	None HotSpotManager; // 0xc8(0x08)
	None NavLocalGrids; // 0xd0(0x08)
	None OwnerController; // 0x68(0x08)
	None OnRequestFailed; // 0x70(0x10)
	None OnMoveFinished; // 0x80(0x10)
	None MoveRequest; // 0x90(0x40)
	None RootNode; // 0x30(0x08)
	None BlackboardAsset; // 0x38(0x08)
	None RootDecorators; // 0x40(0x10)
	None RootDecoratorOps; // 0x50(0x10)
	None BlackboardComp; // 0xb8(0x08)
	None AIOwner; // 0xc0(0x08)
	None NodeInstances; // 0x130(0x10)
	None DefaultBehaviorTreeAsset; // 0x268(0x08)
	None MaxDebuggerSteps; // 0x28(0x04)
	None LoadedTemplates; // 0x30(0x10)
	None ActiveComponents; // 0x40(0x10)
	None BrainComp; // 0xb0(0x08)
	None DefaultBlackboardAsset; // 0xb8(0x08)
	None BlackboardAsset; // 0xc0(0x08)
	None KeyInstances; // 0xe8(0x10)
	None Parent; // 0x30(0x08)
	None Keys; // 0x38(0x10)
	None bHasSynchronizedKeys; // 0x48(0x01)
	None BaseClass; // 0x30(0x08)
	None EnumType; // 0x30(0x08)
	None EnumName; // 0x38(0x10)
	None bIsEnumNameValid; // 0x48(0x01)
	None EnumName; // 0x30(0x10)
	None EnumType; // 0x40(0x08)
	None BaseClass; // 0x30(0x08)
	None StringValue; // 0x30(0x10)
	None FinishMode; // 0x90(0x01)
	None IntValue; // 0x90(0x04)
	None FloatValue; // 0x94(0x04)
	None StringValue; // 0x98(0x10)
	None CachedDescription; // 0xa8(0x10)
	None OperationType; // 0xb8(0x01)
	None NotifyObserver; // 0xb9(0x01)
	None AIOwner; // 0x68(0x08)
	None ActorOwner; // 0x70(0x08)
	None ObservedKeyNames; // 0x78(0x10)
	None bShowPropertyDetails; // 0x98(0x01)
	None bCheckConditionOnlyBlackBoardChanges; // 0x98(0x01)
	None bIsObservingBB; // 0x98(0x01)
	None ActorToCheck; // 0x68(0x28)
	None TagsToMatch; // 0x90(0x01)
	None GameplayTags; // 0x98(0x20)
	None CachedDescription; // 0xb8(0x10)
	None Operator; // 0x68(0x01)
	None BlackboardKeyA; // 0x70(0x28)
	None BlackboardKeyB; // 0x98(0x28)
	None ConeHalfAngle; // 0x68(0x04)
	None ConeOrigin; // 0x70(0x28)
	None ConeDirection; // 0x98(0x28)
	None Observed; // 0xc0(0x28)
	None CooldownTime; // 0x68(0x04)
	None BlackboardKeyA; // 0x68(0x28)
	None BlackboardKeyB; // 0x90(0x28)
	None bUseSelf; // 0xb8(0x01)
	None PathQueryType; // 0xbc(0x01)
	None FilterClass; // 0xc0(0x08)
	None AcceptableRadius; // 0x90(0x04)
	None ParametrizedAcceptableRadius; // 0x98(0x38)
	None GeometricDistanceType; // 0xd0(0x01)
	None bUseParametrizedRadius; // 0xd4(0x01)
	None bUseNavAgentGoalLocation; // 0xd4(0x01)
	None bPathFindingBasedTest; // 0xd4(0x01)
	None TestClass; // 0x90(0x08)
	None ConeHalfAngle; // 0x68(0x04)
	None ConeOrigin; // 0x70(0x28)
	None Observed; // 0x98(0x28)
	None bUseSelfAsOrigin; // 0xc0(0x01)
	None bUseSelfAsObserved; // 0xc0(0x01)
	None NumLoops; // 0x68(0x04)
	None bInfiniteLoop; // 0x6c(0x01)
	None InfiniteLoopTimeoutTime; // 0x70(0x04)
	None CooldownTag; // 0x68(0x08)
	None CooldownDuration; // 0x70(0x04)
	None bAddToExistingDuration; // 0x74(0x01)
	None CooldownTag; // 0x68(0x08)
	None CooldownDuration; // 0x70(0x04)
	None bAddToExistingDuration; // 0x74(0x01)
	None bActivatesCooldown; // 0x75(0x01)
	None TimeLimit; // 0x68(0x04)
	None Interval; // 0x60(0x04)
	None RandomDeviation; // 0x64(0x04)
	None bCallTickOnSearchStart; // 0x68(0x01)
	None bRestartTimerOnEachActivation; // 0x68(0x01)
	None BlackboardKey; // 0x70(0x28)
	None AIOwner; // 0x70(0x08)
	None ActorOwner; // 0x78(0x08)
	None bShowPropertyDetails; // 0x90(0x01)
	None bShowEventDetails; // 0x90(0x01)
	None FocusPriority; // 0x98(0x01)
	None EQSRequest; // 0x98(0x48)
	None AIOwner; // 0x70(0x08)
	None ActorOwner; // 0x78(0x08)
	None TickInterval; // 0x80(0x08)
	None bShowPropertyDetails; // 0xa0(0x01)
	None Result; // 0x70(0x01)
	None bWaitForGameplayTask; // 0x70(0x01)
	None Loudnes; // 0x70(0x04)
	None AnimationToPlay; // 0x70(0x08)
	None bLooping; // 0x78(0x01)
	None bNonBlocking; // 0x78(0x01)
	None MyOwnerComp; // 0x80(0x08)
	None CachedSkelMesh; // 0x88(0x08)
	None SoundToPlay; // 0x70(0x08)
	None InjectionTag; // 0x70(0x08)
	None DefaultBehaviorAsset; // 0x78(0x08)
	None BehaviorAsset; // 0x80(0x08)
	None QueryTemplate; // 0x98(0x08)
	None QueryParams; // 0xa0(0x10)
	None QueryConfig; // 0xb0(0x10)
	None RunMode; // 0xc0(0x01)
	None EQSQueryBlackboardKey; // 0xc8(0x28)
	None bUseBBKey; // 0xf0(0x01)
	None EQSRequest; // 0xf8(0x48)
	None CooldownTag; // 0x70(0x08)
	None bAddToExistingDuration; // 0x78(0x01)
	None CooldownDuration; // 0x7c(0x04)
	None WaitTime; // 0x70(0x04)
	None RandomDeviation; // 0x74(0x04)
	None BlackboardKey; // 0x78(0x28)
	None MyNavData; // 0x28(0x08)
	None AvoidanceConfig; // 0x30(0x10)
	None SamplingPatterns; // 0x40(0x10)
	None MaxAgents; // 0x50(0x04)
	None MaxAgentRadius; // 0x54(0x04)
	None MaxAvoidedAgents; // 0x58(0x04)
	None MaxAvoidedWalls; // 0x5c(0x04)
	None NavmeshCheckInterval; // 0x60(0x04)
	None PathOptimizationInterval; // 0x64(0x04)
	None SeparationDirClamp; // 0x68(0x04)
	None PathOffsetRadiusMultiplier; // 0x6c(0x04)
	None bResolveCollisions; // 0x70(0x01)
	None QueryName; // 0x30(0x08)
	None Options; // 0x38(0x10)
	None OptionName; // 0x30(0x10)
	None ItemType; // 0x40(0x08)
	None bAutoSortTests; // 0x48(0x01)
	None SearchedActorClass; // 0x50(0x08)
	None GenerateOnlyActorsInRadius; // 0x58(0x38)
	None SearchRadius; // 0x90(0x38)
	None SearchCenter; // 0xc8(0x08)
	None GeneratorsActionDescription; // 0x50(0x18)
	None Context; // 0x68(0x08)
	None GeneratedItemType; // 0x70(0x08)
	None Generators; // 0x50(0x10)
	None bAllowDifferentItemTypes; // 0x60(0x01)
	None bHasMatchingItemType; // 0x60(0x01)
	None ForcedItemType; // 0x68(0x08)
	None ProjectionData; // 0x50(0x30)
	None AlignedPointsDistance; // 0x80(0x38)
	None ConeDegrees; // 0xb8(0x38)
	None AngleStep; // 0xf0(0x38)
	None Range; // 0x128(0x38)
	None CenterActor; // 0x160(0x08)
	None bIncludeContextLocation; // 0x168(0x01)
	None QueryContext; // 0x50(0x08)
	None InnerRadius; // 0x80(0x38)
	None OuterRadius; // 0xb8(0x38)
	None NumberOfRings; // 0xf0(0x38)
	None PointsPerRing; // 0x128(0x38)
	None ArcDirection; // 0x160(0x20)
	None ArcAngle; // 0x180(0x38)
	None bUseSpiralPattern; // 0x1b8(0x01)
	None Center; // 0x1c0(0x08)
	None bDefineArc; // 0x1c8(0x01)
	None CircleRadius; // 0x80(0x38)
	None SpaceBetween; // 0xb8(0x38)
	None NumberOfPoints; // 0xf0(0x38)
	None PointOnCircleSpacingMethod; // 0x128(0x01)
	None ArcDirection; // 0x130(0x20)
	None ArcAngle; // 0x150(0x38)
	None AngleRadians; // 0x188(0x04)
	None CircleCenter; // 0x190(0x08)
	None bIgnoreAnyContextActorsWhenGeneratingCircle; // 0x198(0x01)
	None CircleCenterZOffset; // 0x1a0(0x38)
	None TraceData; // 0x1d8(0x30)
	None bDefineArc; // 0x208(0x01)
	None GridSize; // 0x80(0x38)
	None SpaceBetween; // 0xb8(0x38)
	None GenerateAround; // 0xf0(0x08)
	None PathToItem; // 0xf8(0x38)
	None NavigationFilter; // 0x130(0x08)
	None ScanRangeMultiplier; // 0x138(0x38)
	None QueryID; // 0x30(0x04)
	None ItemType; // 0x58(0x08)
	None OptionIndex; // 0x60(0x04)
	None OnQueryFinishedEvent; // 0x68(0x10)
	None InstanceCache; // 0xa8(0x10)
	None LocalContexts; // 0xb8(0x10)
	None GCShieldedWrappers; // 0xc8(0x10)
	None MaxAllowedTestingTime; // 0x12c(0x04)
	None bTestQueriesUsingBreadth; // 0x130(0x01)
	None QueryCountWarningThreshold; // 0x134(0x04)
	None QueryCountWarningInterval; // 0x138(0x08)
	None Generator; // 0x28(0x08)
	None Tests; // 0x30(0x10)
	None TestMode; // 0x1f8(0x01)
	None DistanceTo; // 0x200(0x08)
	None LineA; // 0x1f8(0x20)
	None LineB; // 0x218(0x20)
	None TestMode; // 0x238(0x01)
	None bAbsoluteValue; // 0x239(0x01)
	None TagQueryToMatch; // 0x1f8(0x48)
	None bUpdatedToUseQuery; // 0x240(0x01)
	None TagsToMatch; // 0x241(0x01)
	None GameplayTags; // 0x248(0x20)
	None OverlapData; // 0x1f8(0x20)
	None TestMode; // 0x1f8(0x01)
	None Context; // 0x200(0x08)
	None PathFromContext; // 0x208(0x38)
	None SkipUnreachable; // 0x240(0x38)
	None FilterClass; // 0x278(0x08)
	None ScanRangeMultiplier; // 0x280(0x38)
	None ProjectionData; // 0x1f8(0x30)
	None TraceData; // 0x1f8(0x30)
	None TraceFromContext; // 0x228(0x38)
	None ItemHeightOffset; // 0x260(0x38)
	None ContextHeightOffset; // 0x298(0x38)
	None Context; // 0x2d0(0x08)
	None VolumeContext; // 0x1f8(0x08)
	None VolumeClass; // 0x200(0x08)
	None bDoComplexVolumeTest; // 0x208(0x01)
	None QueryTemplate; // 0x4c0(0x08)
	None QueryParams; // 0x4c8(0x10)
	None QueryConfig; // 0x4d8(0x10)
	None TimeLimitPerStep; // 0x4e8(0x04)
	None StepToDebugDraw; // 0x4ec(0x04)
	None HighlightMode; // 0x4f0(0x01)
	None bDrawLabels; // 0x4f4(0x01)
	None bDrawFailedItems; // 0x4f4(0x01)
	None bReRunQueryOnlyOnFinishedMove; // 0x4f4(0x01)
	None bShouldBeVisibleInGame; // 0x4f4(0x01)
	None bTickDuringGame; // 0x4f4(0x01)
	None QueryingMode; // 0x4f8(0x01)
	None NavAgentProperties; // 0x500(0x30)
	None GridManager; // 0x258(0x08)
	None GoalActor; // 0x98(0x08)
	None GoalLocation; // 0xa0(0x0c)
	None AcceptableRadius; // 0xac(0x04)
	None FilterClass; // 0xb0(0x08)
	None bAllowStrafe; // 0xb8(0x01)
	None bFinishOnOverlap; // 0xb8(0x01)
	None bUsePathfinding; // 0xb8(0x01)
	None bAllowPartialPath; // 0xb8(0x01)
	None bProjectGoalToNavigation; // 0xb8(0x01)
	None bUpdatePathToGoal; // 0xb8(0x01)
	None bAbortChildActionOnPathChange; // 0xb8(0x01)
	None ActionToRepeat; // 0x98(0x08)
	None RecentActionCopy; // 0xa0(0x08)
	None ChildFailureHandlingMode; // 0xa8(0x01)
	None ActionSequence; // 0x98(0x10)
	None ChildFailureHandlingMode; // 0xa8(0x01)
	None RecentActionCopy; // 0xb0(0x08)
	None TimeToWait; // 0x98(0x04)
	None ControlledPawn; // 0xb0(0x08)
	None ActionStacks; // 0xb8(0x10)
	None ActionEvents; // 0xc8(0x10)
	None CurrentAction; // 0xd8(0x08)
	None HearingThreshold; // 0xb0(0x04)
	None LOSHearingThreshold; // 0xb4(0x04)
	None SightRadius; // 0xb8(0x04)
	None SensingInterval; // 0xbc(0x04)
	None HearingMaxSoundAge; // 0xc0(0x04)
	None bEnableSensingUpdates; // 0xc4(0x01)
	None bOnlySensePlayers; // 0xc4(0x01)
	None bSeePawns; // 0xc4(0x01)
	None bHearNoises; // 0xc4(0x01)
	None OnSeePawn; // 0xd0(0x10)
	None OnHearNoise; // 0xe0(0x10)
	None PeripheralVisionAngle; // 0xf0(0x04)
	None PeripheralVisionCosine; // 0xf4(0x04)
	None EnableTransport; // 0x28(0x01)
	None ListenEndpoint; // 0x30(0x10)
	None ConnectToEndpoints; // 0x40(0x10)
	None ConnectionRetryDelay; // 0x50(0x04)
	None bStopServiceWhenAppDeactivates; // 0x54(0x01)
	None JobIcon; // 0x238(0x08)
	None MasteryBorder_1to4; // 0x240(0x08)
	None MasteryBorder_5to9; // 0x248(0x08)
	None MasteryBorder_Max; // 0x250(0x08)
	None MasteryFrameSwitcher; // 0x258(0x08)
	None MasteryIcon; // 0x260(0x08)
	None PlayerOwner; // 0x268(0x08)
	None JobItem; // 0x270(0x08)
	None PersistentPlayerOwner; // 0x278(0x08)
	None UberGraphFrame; // 0x4c0(0x08)
	None Show; // 0x4c8(0x08)
	None Blocker; // 0x4d0(0x08)
	None Decro; // 0x4d8(0x08)
	None Image_134; // 0x4e0(0x08)
	None TextBlock_295; // 0x4e8(0x08)
	None WBP_ModalPopupContainer; // 0x4f0(0x08)
	None WBP_StandardButtonLarge; // 0x4f8(0x08)
	None WBP_StandardButtonMedium; // 0x500(0x08)
	None ShowTutorialWidgetSFX; // 0x508(0x08)
	None ActiveDataTables; // 0x28(0x10)
	None InactiveDataTables; // 0x38(0x10)
	None OnFinishedAllPendingLoadsDel; // 0x48(0x10)
	None bWantsToBeRecycled; // 0x278(0x01)
	None SkinTagAsset; // 0x280(0x10)
	None ParentSkinnedObjects; // 0x28(0x10)
	None ChildSkinnedObjects; // 0x38(0x10)
	None SubscribedKeywords; // 0x48(0x50)
	None SubscribedMaterialPrefixes; // 0x98(0x50)
	None bSubscribeToAllKeywords; // 0xe8(0x01)
	None bWantsToBeRecycled; // 0xe8(0x01)
	None OnFinishedAllPendingLoadsDel; // 0x108(0x10)
	None DynamicSkinTables; // 0x130(0x50)
	None CachedRows; // 0x180(0x50)
	None bDelaySkinUpdatesUntilTick; // 0xbb0(0x01)
	None bSkinUpdateIsQueued; // 0xbb1(0x01)
	None SkeletalMeshKeyword; // 0xbb4(0x08)
	None FailSafeSkeletalMesh; // 0xbc0(0x08)
	None PhysicsAssetKeyword; // 0xbc8(0x08)
	None FailSafePhysicsAsset; // 0xbd0(0x08)
	None AnimInstanceClassKeyword; // 0xbd8(0x08)
	None FailSafeAnimClass; // 0xbe0(0x08)
	None LastSkinnedAnimClass; // 0xbe8(0x08)
	None bForceAnimationUpdateOnSkinUpdate; // 0xbf0(0x01)
	None SkinObject; // 0xbf8(0x08)
	None OnAnimInitializedOnSkinnableMeshDel; // 0xc00(0x10)
	None bAllowMaterialSkinning; // 0xc40(0x01)
	None MaterialSkinningPrefixes; // 0xc48(0x10)
	None MaterialSkinningPrefixes_New; // 0xc58(0x50)
	None ForcedLodModel_Skinned; // 0xcf0(0x04)
	None OnMeshMergeComplete; // 0xcf8(0x10)
	None CompositeSkeletalMeshKeywords; // 0xd08(0x10)
	None bAlwaysUseTheFailsafeMeshWhileMerging; // 0xd18(0x01)
	None MeshNeedsCPUAccessKeyword; // 0xd1c(0x08)
	None bDelayFullSkinUpdateUntilMeshMergingIsComplete; // 0xd24(0x01)
	None BestPlaceHolderMesh; // 0xd28(0x08)
	None bMergeMarkedComplete; // 0xd30(0x01)
	None CachedMergeResult; // 0xd38(0x08)
	None bDelaySkinUpdatesUntilTick; // 0x4e8(0x01)
	None bSkinUpdateIsQueued; // 0x4e9(0x01)
	None StaticMeshKeyword; // 0x4ec(0x08)
	None FailSafeStaticMesh; // 0x4f8(0x08)
	None SkinObject; // 0x500(0x08)
	None bAllowMaterialSkinning; // 0x508(0x01)
	None MaterialSkinningPrefixes; // 0x510(0x50)
	None SkinObjects; // 0xb0(0x50)
	None SkinObjectsSet; // 0x100(0x50)
	None bInProgress; // 0x48(0x01)
	None bCancelOperation; // 0x49(0x01)
	None Datacenters; // 0x50(0x10)
	None NumTestsPerRegion; // 0x28(0x04)
	None PingTimeout; // 0x2c(0x04)
	None RegionDefinitions; // 0x30(0x10)
	None DatacenterDefinitions; // 0x40(0x10)
	None LastCheckTimestamp; // 0x50(0x08)
	None Evaluator; // 0x58(0x08)
	None QosEvalResult; // 0x60(0x01)
	None RegionOptions; // 0x68(0x10)
	None ForceRegionId; // 0x78(0x10)
	None bRegionForcedViaCommandline; // 0x88(0x01)
	None SelectedRegionId; // 0x90(0x10)
	None ItemDescription; // 0x520(0x08)
	None PreviewImage; // 0x528(0x08)
	None PreviewImageBox; // 0x530(0x08)
	None PreviewSizeBox; // 0x538(0x08)
	None WBP_ItemInfoContainer; // 0x540(0x08)
	None WBP_PanelDefault; // 0x548(0x08)
	None UberGraphFrame; // 0x118(0x08)
	None UberGraphFrame; // 0x520(0x08)
	None OnRerollHoverAnim; // 0x528(0x08)
	None OnHoverAnim_COMPLETE; // 0x530(0x08)
	None OnRerollAnim; // 0x538(0x08)
	None OnHoverAnim; // 0x540(0x08)
	None CardContentGroup; // 0x548(0x08)
	None ChallengeBkg_Switcher; // 0x550(0x08)
	None ChallengeDescription; // 0x558(0x08)
	None ChallengeProgressText; // 0x560(0x08)
	None CompletedText; // 0x568(0x08)
	None GamepadPrompt_Bright; // 0x570(0x08)
	None HoverButton; // 0x578(0x08)
	None Image; // 0x580(0x08)
	None Image_390; // 0x588(0x08)
	None Image_1045; // 0x590(0x08)
	None ProgressBar; // 0x598(0x08)
	None PromptSwitcher; // 0x5a0(0x08)
	None RerollButton; // 0x5a8(0x08)
	None RerollButtonWrapper; // 0x5b0(0x08)
	None RewardsContainer; // 0x5b8(0x08)
	None RewardSwitcher; // 0x5c0(0x08)
	None SelectionFrame; // 0x5c8(0x08)
	None SimpleEmptyText; // 0x5d0(0x08)
	None WBP_Challenge_Rewards_Badge_EXAMPLE; // 0x5d8(0x08)
	None WBP_Challenge_Rewards_Badge_EXAMPLE_01; // 0x5e0(0x08)
	None Current Visual State; // 0x5e8(0x01)
	None Challenge Activity Instance; // 0x5f0(0x08)
	None AttachName; // 0x38(0x08)
	None Event; // 0x40(0x08)
	None bFollow; // 0x48(0x01)
	None Rules; // 0x28(0x08)
	None FirstPersonAkEventPlay; // 0x30(0x08)
	None ThirdPersonAkEventPlay; // 0x38(0x08)
	None FirstPersonAkEventStop; // 0x40(0x08)
	None ThirdPersonAkEventStop; // 0x48(0x08)
	None CurrentChatRoomId; // 0x28(0x10)
	None MaxChatRoomRetries; // 0x38(0x04)
	None NumChatRoomRetries; // 0x3c(0x04)
	None SocialToolkits; // 0x48(0x10)
	None SocialDebugTools; // 0x58(0x08)
	None ReservationBeaconClientClass; // 0x58(0x08)
	None SpectatorBeaconClientClass; // 0x60(0x08)
	None OwningLocalUserId; // 0x78(0x28)
	None CurrentLeaderId; // 0xa0(0x28)
	None PartyMembersById; // 0xc8(0x50)
	None bEnableAutomaticPartyRejoin; // 0x118(0x01)
	None ReservationBeaconClient; // 0x190(0x08)
	None SpectatorBeaconClient; // 0x1a0(0x08)
	None SocialUser; // 0x68(0x08)
	None LocalUser; // 0x60(0x08)
	None AllUsers; // 0x68(0x10)
	None LocalPlayerOwner; // 0xc8(0x08)
	None SocialChatManager; // 0xd0(0x08)
	None DirectChannelsByTargetUser; // 0x78(0x50)
	None ChatRoomsById; // 0xc8(0x50)
	None ReadOnlyChannelsByDisplayName; // 0x118(0x50)
	None bEnableChatSlashCommands; // 0x168(0x01)
	None GroupChannels; // 0x170(0x50)
	None SocialUser; // 0x28(0x08)
	None GroupId; // 0x30(0x28)
	None DisplayName; // 0x58(0x18)
	None Members; // 0x70(0x10)
	None TargetUser; // 0xe8(0x08)
	None OssNamesWithEnvironmentIdPrefix; // 0x28(0x10)
	None DefaultMaxPartySize; // 0x38(0x04)
	None bPreferPlatformInvites; // 0x3c(0x01)
	None bMustSendPrimaryInvites; // 0x3d(0x01)
	None bLeavePartyOnDisconnect; // 0x3e(0x01)
	None UserListAutoUpdateRate; // 0x40(0x04)
	None MinNicknameLength; // 0x44(0x04)
	None MaxNicknameLength; // 0x48(0x04)
	None Is DodgeRollReload Montage; // 0x30(0x01)
	None Reverse; // 0x31(0x01)
	None Only Unhide; // 0x32(0x01)
	None Only Hide; // 0x33(0x01)
	None InitialState; // 0x258(0x01)
	None ObstructionRefreshInterval; // 0x25c(0x04)
	None ObstructionCollisionChannel; // 0x260(0x01)
	None ShortID; // 0x28(0x04)
	None UserData; // 0x30(0x10)
	None AkAudioEvent; // 0x220(0x08)
	None AkComponent; // 0x228(0x08)
	None StopWhenOwnerIsDestroyed; // 0x230(0x01)
	None AutoPost; // 0x231(0x01)
	None ForceNoTickingOnAkComponent; // 0x232(0x01)
	None CommonSettings; // 0x28(0x68)
	None CommunicationSettings; // 0x90(0x28)
	None AdvancedSettings; // 0xb8(0x40)
	None MediaList; // 0x68(0x10)
	None CurrentAssetData; // 0x28(0x08)
	None PlatformAssetData; // 0x40(0x08)
	None AutoLoad; // 0x58(0x01)
	None LocalizedPlatformAssetDataMap; // 0x60(0x50)
	None CurrentLocalizedPlatformAssetData; // 0xb0(0x08)
	None GroupValue; // 0x28(0x28)
	None MediaList; // 0x50(0x10)
	None Children; // 0x60(0x10)
	None SwitchContainers; // 0x88(0x10)
	None MaxAttenuationRadius; // 0xa8(0x04)
	None IsInfinite; // 0xac(0x01)
	None MinimumDuration; // 0xb0(0x04)
	None MaximumDuration; // 0xb4(0x04)
	None LocalizedMedia; // 0xb8(0x50)
	None AutomaticMaxAttenuationRadius; // 0x58(0x04)
	None LocalizedPlatformAssetDataMap; // 0x60(0x50)
	None RequiredBank; // 0xb0(0x08)
	None CurrentLocalizedPlatformData; // 0xb8(0x08)
	None AkAudioEvent; // 0x208(0x08)
	None EventName; // 0x210(0x10)
	None bUseSpatialAudio; // 0x228(0x01)
	None OcclusionCollisionChannel; // 0x230(0x01)
	None EnableSpotReflectors; // 0x234(0x01)
	None EarlyReflectionAuxBus; // 0x238(0x08)
	None EarlyReflectionAuxBusName; // 0x240(0x10)
	None EarlyReflectionOrder; // 0x250(0x04)
	None EarlyReflectionBusSendGain; // 0x254(0x04)
	None EarlyReflectionMaxPathLength; // 0x258(0x04)
	None roomReverbAuxBusGain; // 0x25c(0x04)
	None diffractionMaxEdges; // 0x260(0x04)
	None diffractionMaxPaths; // 0x264(0x04)
	None diffractionMaxPathLength; // 0x268(0x04)
	None DrawFirstOrderReflections; // 0x26c(0x01)
	None DrawSecondOrderReflections; // 0x26c(0x01)
	None DrawHigherOrderReflections; // 0x26c(0x01)
	None DrawDiffraction; // 0x26c(0x01)
	None StopWhenOwnerDestroyed; // 0x270(0x01)
	None CurrentMaxAttenuation; // 0x274(0x04)
	None AttenuationScalingFactor; // 0x278(0x04)
	None OcclusionRefreshInterval; // 0x27c(0x04)
	None bUseReverbVolumes; // 0x280(0x01)
	None RequiredBank; // 0x58(0x08)
	None CheckedState; // 0x548(0x01)
	None CheckedStateDelegate; // 0x54c(0x10)
	None WidgetStyle; // 0x560(0x580)
	None HorizontalAlignment; // 0xae0(0x01)
	None IsFocusable; // 0xae1(0x01)
	None ThePropertyToControl; // 0xae8(0x10)
	None ItemToControl; // 0xaf8(0x40)
	None AkOnCheckStateChanged; // 0xb38(0x10)
	None OnItemDropped; // 0xb48(0x10)
	None OnPropertyDropped; // 0xb58(0x10)
	None AkComponent; // 0x28(0x08)
	None PlayingID; // 0x30(0x04)
	None EventID; // 0x34(0x04)
	None Identifier; // 0x38(0x04)
	None Position; // 0x3c(0x04)
	None Label; // 0x40(0x10)
	None Duration; // 0x38(0x04)
	None EstimatedDuration; // 0x3c(0x04)
	None AudioNodeID; // 0x40(0x04)
	None MediaID; // 0x44(0x04)
	None bStreaming; // 0x48(0x01)
	None PlayingID; // 0x30(0x04)
	None SegmentInfo; // 0x34(0x24)
	None MusicSyncType; // 0x58(0x01)
	None UserCueName; // 0x60(0x10)
	None MeshType; // 0x208(0x01)
	None LOD; // 0x20c(0x04)
	None StaticMeshSurfaceOverride; // 0x210(0x50)
	None CollisionMeshSurfaceOverride; // 0x260(0x10)
	None bEnableDiffraction; // 0x270(0x01)
	None bEnableDiffractionOnBoundaryEdges; // 0x270(0x01)
	None AssociatedRoom; // 0x278(0x08)
	None GeometryData; // 0x288(0x50)
	None GroupShortID; // 0x40(0x04)
	None CommonSettings; // 0x28(0x68)
	None CommunicationSettings; // 0x90(0x28)
	None AdvancedSettings; // 0xb8(0x40)
	None PluginInfos; // 0x88(0x10)
	None AvailableAudioCultures; // 0x58(0x10)
	None DefaultLanguage; // 0x68(0x10)
	None CommonSettings; // 0x28(0x68)
	None AudioSession; // 0x90(0x0c)
	None CommunicationSettings; // 0xa0(0x28)
	None AdvancedSettings; // 0xc8(0x34)
	None OnSelectionChanged; // 0x110(0x10)
	None OnPropertyDragged; // 0x120(0x10)
	None OnSelectionChanged; // 0x110(0x10)
	None OnPropertyDragged; // 0x120(0x10)
	None bEnable; // 0x208(0x01)
	None AuxBus; // 0x210(0x08)
	None AuxBusName; // 0x218(0x10)
	None SendLevel; // 0x228(0x04)
	None FadeRate; // 0x22c(0x04)
	None Priority; // 0x230(0x04)
	None NextLowerPriorityComponent; // 0x238(0x08)
	None CommonSettings; // 0x28(0x68)
	None CommunicationSettings; // 0x90(0x28)
	None AdvancedSettings; // 0xb8(0x38)
	None CommonSettings; // 0x28(0x68)
	None CommunicationSettings; // 0x90(0x28)
	None AdvancedSettings; // 0xb8(0x38)
	None CommonSettings; // 0x28(0x68)
	None CommunicationSettings; // 0x90(0x28)
	None AdvancedSettings; // 0xb8(0x38)
	None IsStreamed; // 0x28(0x01)
	None UseDeviceMemory; // 0x29(0x01)
	None ID; // 0x28(0x04)
	None UserData; // 0x30(0x10)
	None CurrentMediaAssetData; // 0x40(0x08)
	None CommonSettings; // 0x28(0x60)
	None CommunicationSettings; // 0x88(0x28)
	None AdvancedSettings; // 0xb0(0x40)
	None CommonSettings; // 0x28(0x60)
	None CommunicationSettings; // 0x88(0x28)
	None AdvancedSettings; // 0xb0(0x44)
	None bEnabled; // 0x258(0x01)
	None AuxBus; // 0x260(0x08)
	None AuxBusName; // 0x268(0x10)
	None SendLevel; // 0x278(0x04)
	None FadeRate; // 0x27c(0x04)
	None Priority; // 0x280(0x04)
	None LateReverbComponent; // 0x288(0x08)
	None bEnable; // 0x228(0x01)
	None NextLowerPriorityComponent; // 0x230(0x08)
	None Priority; // 0x238(0x04)
	None WallOcclusion; // 0x23c(0x04)
	None AuxSendLevel; // 0x240(0x04)
	None AutoPost; // 0x244(0x01)
	None MaxSimultaneousReverbVolumes; // 0x28(0x01)
	None WwiseProjectPath; // 0x30(0x10)
	None WwiseSoundDataFolder; // 0x40(0x10)
	None bAutoConnectToWAAPI; // 0x50(0x01)
	None DefaultOcclusionCollisionChannel; // 0x51(0x01)
	None AkGeometryMap; // 0x58(0x50)
	None SplitSwitchContainerMedia; // 0xa8(0x01)
	None UseEventBasedPackaging; // 0xa9(0x01)
	None EnableAutomaticAssetSynchronization; // 0xaa(0x01)
	None CommandletCommitMessage; // 0xb0(0x10)
	None UnrealCultureToWwiseCulture; // 0xc0(0x50)
	None AskedToUseNewAssetManagement; // 0x110(0x01)
	None bEnableMultiCoreRendering; // 0x111(0x01)
	None MigratedEnableMultiCoreRendering; // 0x112(0x01)
	None WwiseWindowsInstallationPath; // 0x118(0x10)
	None WwiseMacInstallationPath; // 0x128(0x10)
	None WwiseWindowsInstallationPath; // 0x28(0x10)
	None WwiseMacInstallationPath; // 0x38(0x10)
	None WaapiIPAddress; // 0x48(0x10)
	None WaapiPort; // 0x58(0x04)
	None AutoSyncSelection; // 0x5c(0x01)
	None SuppressWwiseProjectPathWarnings; // 0x5d(0x01)
	None SoundDataGenerationSkipLanguage; // 0x5e(0x01)
	None Value; // 0x110(0x04)
	None ValueDelegate; // 0x114(0x10)
	None WidgetStyle; // 0x128(0x340)
	None Orientation; // 0x468(0x01)
	None SliderBarColor; // 0x46c(0x10)
	None SliderHandleColor; // 0x47c(0x10)
	None IndentHandle; // 0x48c(0x01)
	None Locked; // 0x48d(0x01)
	None StepSize; // 0x490(0x04)
	None IsFocusable; // 0x494(0x01)
	None ThePropertyToControl; // 0x498(0x10)
	None ItemToControl; // 0x4a8(0x40)
	None OnValueChanged; // 0x4e8(0x10)
	None OnItemDropped; // 0x4f8(0x10)
	None OnPropertyDropped; // 0x508(0x10)
	None SurfaceReflectorSet; // 0x258(0x08)
	None LateReverb; // 0x260(0x08)
	None Room; // 0x268(0x08)
	None EarlyReflectionAuxBus; // 0x220(0x08)
	None EarlyReflectionAuxBusName; // 0x228(0x10)
	None AcousticTexture; // 0x238(0x08)
	None DistanceScalingFactor; // 0x240(0x04)
	None Level; // 0x244(0x04)
	None bEnableSurfaceReflectors; // 0x208(0x01)
	None AcousticPolys; // 0x210(0x10)
	None bEnableDiffraction; // 0x220(0x01)
	None bEnableDiffractionOnBoundaryEdges; // 0x220(0x01)
	None AssociatedRoom; // 0x228(0x08)
	None CommonSettings; // 0x28(0x68)
	None CommunicationSettings; // 0x90(0x28)
	None AdvancedSettings; // 0xb8(0x38)
	None CommonSettings; // 0x28(0x68)
	None AudioSession; // 0x90(0x0c)
	None CommunicationSettings; // 0xa0(0x28)
	None AdvancedSettings; // 0xc8(0x34)
	None CommonSettings; // 0x28(0x68)
	None CommunicationSettings; // 0x90(0x28)
	None AdvancedSettings; // 0xb8(0x40)
	None CommonSettings; // 0x28(0x68)
	None CommunicationSettings; // 0x90(0x28)
	None AdvancedSettings; // 0xb8(0x40)
	None OnSelectionChanged; // 0x110(0x10)
	None OnItemDragged; // 0x120(0x10)
	None OnSelectionChanged; // 0x110(0x10)
	None OnItemDragged; // 0x120(0x10)
	None CommonSettings; // 0x28(0x60)
	None ApuHeapSettings; // 0x88(0x08)
	None CommunicationSettings; // 0x90(0x28)
	None AdvancedSettings; // 0xb8(0x3c)
	None CommonSettings; // 0x28(0x60)
	None ApuHeapSettings; // 0x88(0x08)
	None CommunicationSettings; // 0x90(0x28)
	None AdvancedSettings; // 0xb8(0x3c)
	None CommonSettings; // 0x28(0x60)
	None ApuHeapSettings; // 0x88(0x08)
	None CommunicationSettings; // 0x90(0x28)
	None AdvancedSettings; // 0xb8(0x3c)
	None Events; // 0x90(0x10)
	None bContinueEventOnMatineeEnd; // 0xa0(0x01)
	None Param; // 0x90(0x10)
	None bPlayOnReverse; // 0xa0(0x01)
	None bContinueRTPCOnMatineeEnd; // 0xa0(0x01)
	None LastUpdatePosition; // 0x28(0x04)
	None LastUpdatePosition; // 0x28(0x04)
	None Event; // 0x120(0x08)
	None RetriggerEvent; // 0x128(0x01)
	None ScrubTailLengthMs; // 0x12c(0x04)
	None StopAtSectionEnd; // 0x130(0x01)
	None EventName; // 0x138(0x10)
	None MaxSourceDuration; // 0x168(0x04)
	None MaxDurationSourceID; // 0x170(0x10)
	None Sections; // 0x58(0x10)
	None bIsAMasterTrack; // 0x68(0x01)
	None RTPC; // 0xe0(0x08)
	None Name; // 0xe8(0x10)
	None FloatCurve; // 0xf8(0x80)
	None FloatChannelSerializationHelper; // 0x178(0x30)
	None RTPCChannel; // 0x1a8(0xa0)
	None Completed; // 0x30(0x10)
	None Completed; // 0x30(0x10)
	None CensorTablePath; // 0x28(0x18)
	None DividerLeft; // 0x238(0x08)
	None DividerRight; // 0x240(0x08)
	None Highlight; // 0x248(0x08)
	None bAutoRegisterWithBudgetAllocator; // 0xba8(0x01)
	None bAutoCalculateSignificance; // 0xba8(0x01)
	None bShouldUseActorRenderedFlag; // 0xba8(0x01)
	None UberGraphFrame; // 0x538(0x08)
	None Anim_OnHover; // 0x540(0x08)
	None Anim_ChangeNewsImage; // 0x548(0x08)
	None ActionButton; // 0x550(0x08)
	None LeftNavPrompt; // 0x558(0x08)
	None NewsImage; // 0x560(0x08)
	None NewsImageAnimateOut; // 0x568(0x08)
	None RightNavPrompt; // 0x570(0x08)
	None RotatorButtons; // 0x578(0x08)
	None SlideTitle; // 0x580(0x08)
	None SlideTitle_AnimOut; // 0x588(0x08)
	None SpacerText; // 0x590(0x08)
	None SpacerText_AnimOut; // 0x598(0x08)
	None SpacerTextWrapper; // 0x5a0(0x08)
	None SpacerTextWrapper_AnimOut; // 0x5a8(0x08)
	None TextField_2; // 0x5b0(0x08)
	None TextField_AnimOut; // 0x5b8(0x08)
	None TextGroupAnimateOut; // 0x5c0(0x08)
	None TextGroupWrapper; // 0x5c8(0x08)
	None WBP_Header3_C_1; // 0x5d0(0x08)
	None WBP_NewsRotatorButton; // 0x5d8(0x08)
	None TickTimer; // 0x5e0(0x04)
	None CurrentPanelIndex; // 0x5e4(0x04)
	None IsAnimating; // 0x5e8(0x01)
	None NewsRotatorObjects; // 0x5f0(0x10)
	None NewsVisibilityUpdated; // 0x600(0x10)
	None InputRouteName; // 0x610(0x08)
	None UberGraphFrame; // 0x520(0x08)
	None CheatingButton; // 0x528(0x08)
	None CommentField; // 0x530(0x08)
	None DarkBanner; // 0x538(0x08)
	None HarassmentButton; // 0x540(0x08)
	None IntentionalFeedingButton; // 0x548(0x08)
	None LeavingButton; // 0x550(0x08)
	None MuteText; // 0x558(0x08)
	None MuteText_2; // 0x560(0x08)
	None MuteText_3; // 0x568(0x08)
	None MuteText_4; // 0x570(0x08)
	None MuteText_5; // 0x578(0x08)
	None MuteText_6; // 0x580(0x08)
	None OtherButton; // 0x588(0x08)
	None ReasonLabelSelected; // 0x590(0x08)
	None ReasonLabelSwitcher; // 0x598(0x08)
	None StreamSnipingButton; // 0x5a0(0x08)
	None SubmitNew; // 0x5a8(0x08)
	None WBP_Header1; // 0x5b0(0x08)
	None WBP_ModalPopupContainer; // 0x5b8(0x08)
	None OnCloseTabScreen; // 0x5c0(0x10)
	None OnPlayerReported; // 0x5d0(0x10)
	None CachedReport; // 0x5e0(0x50)
	None OnTabPressed; // 0x630(0x10)
	None LastSelectedReason; // 0x640(0x01)
	None SkinKeyword; // 0x90(0x08)
	None AttachName; // 0x38(0x08)
	None Event; // 0x40(0x08)
	None bFollow; // 0x48(0x01)
	None EventName; // 0x50(0x10)
	None SkinKeyword; // 0x60(0x08)
	None SkinKeyword; // 0x50(0x08)
	None SkinObject; // 0x2b8(0x08)
	None SkinObjectName; // 0x30(0x08)
	None MeshSkinKeyword; // 0x38(0x08)
	None ComponentClassSkinKeyword; // 0x40(0x08)
	None PropIdentifier; // 0x48(0x08)
	None ExtendedLifetime; // 0x50(0x04)
	None bSkipExtendedLifetime; // 0x54(0x01)
	None PropAttachmentInfo; // 0x58(0x30)
	None AnimClassSkinKeyword; // 0x88(0x08)
	None ActivationMontage; // 0x90(0x08)
	None ActiveNamelessProps; // 0x188(0x10)
	None ActiveProps; // 0x198(0x50)
	None bAllowSpawnerPooling; // 0x1e8(0x01)
	None SpawnerPoolingLifespan; // 0x1ec(0x04)
	None ActiveNamelessProps; // 0x188(0x10)
	None ActiveProps; // 0x198(0x50)
	None bAllowSpawnerPooling; // 0x1e8(0x01)
	None SpawnerPoolingLifespan; // 0x1ec(0x04)
	None CameraShake; // 0x38(0x08)
	None Scale; // 0x40(0x04)
	None Space; // 0x44(0x01)
	None CustomPlaySpace; // 0x48(0x0c)
	None UberGraphFrame; // 0x520(0x08)
	None ContractTimer; // 0x528(0x08)
	None NextChallengeSwitcher; // 0x530(0x08)
	None CachedSecondsRemaining; // 0x538(0x04)
	None CachedRealTimeSeconds; // 0x53c(0x04)
	None UberGraphFrame; // 0x520(0x08)
	None Image_229; // 0x528(0x08)
	None PromptImage; // 0x530(0x08)
	None PromptImageWrapper; // 0x538(0x08)
	None SelectedRegion; // 0x540(0x08)
	None WBP_StandardButtonMedium; // 0x548(0x08)
	None RegionSelectRequested; // 0x550(0x10)
	None ActiveAsButton; // 0x560(0x01)
	None CachedInputState; // 0x561(0x01)
	None ClickInputChangeRegionSelBtnSFX; // 0x568(0x08)
	None MaxPoolSize; // 0xb0(0x04)
	None StartingPoolSize; // 0xb4(0x04)
	None ComponentClassName; // 0xb8(0x10)
	None OverflowType; // 0xc8(0x01)
	None PooledDecalComponentClass; // 0xd8(0x08)
	None UnusedComponentsArray; // 0xe0(0x10)
	None UsedComponentsSet; // 0xf0(0x50)
	None PeekedDecalComponent; // 0x140(0x08)
	None PooledParticleSystemComponentClass; // 0xd8(0x08)
	None UnusedComponentsArray; // 0xe0(0x10)
	None UsedComponentsSet; // 0xf0(0x50)
	None PeekedParticleSystemComponent; // 0x140(0x08)
	None bClearTemplateWhenReturnedToPool; // 0x148(0x01)
	None OnDecalReturnedToPoolDelegate; // 0x260(0x10)
	None bInUse; // 0x270(0x01)
	None UnusedComponentsArray; // 0xd8(0x10)
	None UsedComponentsSet; // 0xe8(0x50)
	None PeekedSkeletalMeshComponent; // 0x138(0x08)
	None PooledSkeletalMeshComponentClass; // 0x140(0x08)
	None UnusedComponentsArray; // 0xd8(0x10)
	None UsedComponentsSet; // 0xe8(0x50)
	None PeekedStaticMeshComponent; // 0x138(0x08)
	None PooledStaticMeshComponentClass; // 0x140(0x08)
	None PendingPlayerName; // 0x3eb8(0x10)
	None PendingAvatar; // 0x3ec8(0x08)
	None PendingIsLeader; // 0x3ed0(0x01)
	None NeedsToSetNameplate; // 0x3ed1(0x01)
	None UberGraphFrame; // 0x520(0x08)
	None WBP_RegionSelect; // 0x528(0x08)
	None ShowSFX; // 0x530(0x08)
	None bIsPassthrough; // 0x1b20(0x01)
	None UberGraphFrame; // 0x520(0x08)
	None OnShow; // 0x528(0x08)
	None Decro; // 0x530(0x08)
	None RegionScrollBox; // 0x538(0x08)
	None Title; // 0x540(0x08)
	None Title_3; // 0x548(0x08)
	None WBP_ModalPopupContainer; // 0x550(0x08)
	None OnRegionSelected; // 0x558(0x10)
	None OnRegionSelectEntriesCreated; // 0x568(0x10)
	None Region Select Array; // 0x578(0x10)
	None bForceSelection; // 0x588(0x01)
	None ShowSFX; // 0x590(0x08)
	None NewVar_1; // 0x598(0x04)
	None Role; // 0x30(0x08)
	None Subjects; // 0x38(0x10)
	None FrameTranslators; // 0x48(0x10)
	None Mode; // 0x28(0x01)
	None BufferSettings; // 0x30(0x50)
	None ConnectionString; // 0x80(0x10)
	None Factory; // 0x90(0x08)
	None CurveConversionSettings; // 0x98(0x50)
	None PreProcessors; // 0x28(0x10)
	None InterpolationProcessor; // 0x38(0x08)
	None Translators; // 0x40(0x10)
	None Role; // 0x50(0x08)
	None background; // 0x238(0x08)
	None DiamondProgress; // 0x240(0x08)
	None Image_498; // 0x248(0x08)
	None TextBlock_92; // 0x250(0x08)
	None TxtCurrentXP; // 0x258(0x08)
	None TxtNoRecentProgress; // 0x260(0x08)
	None TxtPlayerLevel; // 0x268(0x08)
	None TxtTargetXp; // 0x270(0x08)
	None WidgetSwitcher_1; // 0x278(0x08)
	None OnActivityInstanceChanged; // 0x280(0x10)
	None bInterpolatePropertyValues; // 0x28(0x01)
	None BoneName; // 0x28(0x08)
	None bAppendSubjectNameToBones; // 0xd9(0x01)
	None OrientationAxisX; // 0x28(0x01)
	None OrientationAxisY; // 0x29(0x01)
	None OrientationAxisZ; // 0x2a(0x01)
	None TranslationAxisX; // 0x2b(0x01)
	None TranslationAxisY; // 0x2c(0x01)
	None TranslationAxisZ; // 0x2d(0x01)
	None OnLiveLinkUpdated; // 0xb0(0x10)
	None SubjectName; // 0xb0(0x08)
	None ActorTransformBone; // 0xb8(0x08)
	None bModifyActorTransform; // 0xc0(0x01)
	None bSetRelativeLocation; // 0xc1(0x01)
	None CurrentRetargetAsset; // 0x268(0x08)
	None Sources; // 0x28(0x10)
	None Subjects; // 0x38(0x10)
	None DefaultRoleSettings; // 0x28(0x10)
	None FrameInterpolationProcessor; // 0x38(0x08)
	None DefaultLiveLinkPreset; // 0x40(0x28)
	None PresetSaveDir; // 0x68(0x10)
	None ClockOffsetCorrectionStep; // 0x78(0x04)
	None DefaultMessageBusSourceMode; // 0x7c(0x01)
	None MessageBusPingRequestFrequency; // 0x80(0x08)
	None MessageBusHeartbeatFrequency; // 0x88(0x08)
	None MessageBusHeartbeatTimeout; // 0x90(0x08)
	None MessageBusTimeBeforeRemovingInactiveSource; // 0x98(0x08)
	None TimeWithoutFrameToBeConsiderAsInvalid; // 0xa0(0x08)
	None ValidColor; // 0xa8(0x10)
	None InvalidColor; // 0xb8(0x10)
	None TextSizeSource; // 0xc8(0x01)
	None TextSizeSubject; // 0xc9(0x01)
	None SubjectKey; // 0x30(0x18)
	None Evaluation; // 0x48(0x04)
	None bOverrideFrameRate; // 0x4c(0x01)
	None OverrideFrameRate; // 0x50(0x08)
	None BufferSize; // 0x58(0x04)
	None SubjectName; // 0x30(0x08)
	None SourceName; // 0x98(0x08)
	None bUseForSynchronization; // 0x28(0x01)
	None FrameOffset; // 0x2c(0x04)
	None FixedFrameRate; // 0x28(0x08)
	None UberGraphFrame; // 0x528(0x08)
	None animHover; // 0x530(0x08)
	None CardContent; // 0x538(0x08)
	None CardContentStateSwitcher; // 0x540(0x08)
	None ChallengeBkg_2; // 0x548(0x08)
	None ChallengeBkg_3; // 0x550(0x08)
	None ChallengeBkg_Switcher; // 0x558(0x08)
	None ChallengeDescription; // 0x560(0x08)
	None ChallengeProgressBar; // 0x568(0x08)
	None ChallengeProgressText; // 0x570(0x08)
	None Content_active; // 0x578(0x08)
	None HitTarget; // 0x580(0x08)
	None Image_181; // 0x588(0x08)
	None Image_370; // 0x590(0x08)
	None Locked; // 0x598(0x08)
	None LockedBkg; // 0x5a0(0x08)
	None LockedDescription; // 0x5a8(0x08)
	None LockedTierText; // 0x5b0(0x08)
	None ProgressGroup; // 0x5b8(0x08)
	None RewardImage; // 0x5c0(0x08)
	None RewardQtyText; // 0x5c8(0x08)
	None RewardSwitcher; // 0x5d0(0x08)
	None Root; // 0x5d8(0x08)
	None SelectionFrame; // 0x5e0(0x08)
	None TopLineRule; // 0x5e8(0x08)
	None UnlockedBkg; // 0x5f0(0x08)
	None CurrentVisualState; // 0x5f8(0x01)
	None WeekTableRowName; // 0x5fc(0x08)
	None CurrentActivitySequence; // 0x608(0x30)
	None OnMilestoneSelected; // 0x638(0x10)
	None ButtonClickSound; // 0x648(0x08)
	None ButtonHoverSound; // 0x650(0x08)
	None MilestoneIndex; // 0x658(0x04)
	None SubjectRepresentation; // 0xb0(0x10)
	None ControllerMap; // 0xc0(0x50)
	None bUpdateInEditor; // 0x110(0x01)
	None OnLiveLinkUpdated; // 0x118(0x10)
	None ComponentToControl; // 0x128(0x28)
	None DefaultControllerForRole; // 0x28(0x50)
	None TransformData; // 0x30(0x04)
	None ButtonStyle; // 0x30(0x278)
	None CheckBoxStyle; // 0x30(0x580)
	None ComboBoxStyle; // 0x30(0x3f0)
	None ComboButtonStyle; // 0x30(0x3b8)
	None EditableTextBoxStyle; // 0x30(0x7f0)
	None EditableTextStyle; // 0x30(0x218)
	None ProgressBarStyle; // 0x30(0x1a0)
	None ScrollBarStyle; // 0x30(0x4d0)
	None ScrollBoxStyle; // 0x30(0x228)
	None bExplicitCanvasChildZOrder; // 0x28(0x01)
	None SpinBoxStyle; // 0x30(0x2e8)
	None TextBlockStyle; // 0x30(0x268)
	None UberGraphFrame; // 0x220(0x08)
	None Reticle; // 0x228(0x08)
	None DefaultSceneRoot; // 0x230(0x08)
	None ReticleWidget; // 0x238(0x08)
	None ReticleComponentWidget; // 0x240(0x08)
	None MountedAimOrigin; // 0x3c60(0x08)
	None UnderslungAimOrigin; // 0x3c68(0x08)
	None FX_Blinded; // 0x3c70(0x08)
	None CharacterHeatSourceComponent; // 0x3c78(0x08)
	None PerformanceAimOrigin; // 0x3c80(0x08)
	None CharacterEmotionComponent; // 0x3c88(0x08)
	None SkyDiveCameraBoom; // 0x3c90(0x08)
	None Nameplate; // 0x3c98(0x08)
	None MainCharacterThreatComponent; // 0x3ca0(0x08)
	None NewTablet; // 0x3ca8(0x08)
	None MainEnvironmentTracker; // 0x3cb0(0x08)
	None BodyAimAssistAnchor; // 0x3cb8(0x08)
	None HeadAimAssistAnchor; // 0x3cc0(0x08)
	None Free Fall Particle Component; // 0x3cc8(0x08)
	None SkyDiveCamera; // 0x3cd0(0x08)
	None EnterFreeFallFOVTimeline_FOV_214483C64B8EF94ABEE010ACC0C82B47; // 0x3cd8(0x04)
	None EnterFreeFallFOVTimeline__Direction_214483C64B8EF94ABEE010ACC0C82B47; // 0x3cdc(0x01)
	None EnterFreeFallFOVTimeline; // 0x3ce0(0x08)
	None NoseDiveFOVTimeline_FOV_B4B28FE84FD9F70D4702AD94CD02429F; // 0x3ce8(0x04)
	None NoseDiveFOVTimeline__Direction_B4B28FE84FD9F70D4702AD94CD02429F; // 0x3cec(0x01)
	None NoseDiveFOVTimeline; // 0x3cf0(0x08)
	None Martial_Artist_Target_Front_Camera_Offset_2353812C44E84070E58EA28AC0C39A7A; // 0x3cf8(0x0c)
	None Martial_Artist_Target_Front_Camera_Rotation_2353812C44E84070E58EA28AC0C39A7A; // 0x3d04(0x0c)
	None Martial_Artist_Target_Front__Direction_2353812C44E84070E58EA28AC0C39A7A; // 0x3d10(0x01)
	None Martial Artist Target Front; // 0x3d18(0x08)
	None Martial_Artist_Target_Back_Camera_Offset_1BFA9A6E4FC29401CE8D43B8AAD4581C; // 0x3d20(0x0c)
	None Martial_Artist_Target_Back_Camera_Rotation_1BFA9A6E4FC29401CE8D43B8AAD4581C; // 0x3d2c(0x0c)
	None Martial_Artist_Target_Back__Direction_1BFA9A6E4FC29401CE8D43B8AAD4581C; // 0x3d38(0x01)
	None Martial Artist Target Back; // 0x3d40(0x08)
	None Martial_Artist_Instigator_Front_Camera_Offset_F70AEBFB4CDEF611144DE3BBA0C06E0C; // 0x3d48(0x0c)
	None Martial_Artist_Instigator_Front_Camera_Rotation_F70AEBFB4CDEF611144DE3BBA0C06E0C; // 0x3d54(0x0c)
	None Martial_Artist_Instigator_Front__Direction_F70AEBFB4CDEF611144DE3BBA0C06E0C; // 0x3d60(0x01)
	None Martial Artist Instigator Front; // 0x3d68(0x08)
	None Martial_Artist_Instigator_Back_Camera_Offset_28F092594C0CD50C0A3EA1BF17E2C5E1; // 0x3d70(0x0c)
	None Martial_Artist_Instigator_Back_Camera_Rotation_28F092594C0CD50C0A3EA1BF17E2C5E1; // 0x3d7c(0x0c)
	None Martial_Artist_Instigator_Back__Direction_28F092594C0CD50C0A3EA1BF17E2C5E1; // 0x3d88(0x01)
	None Martial Artist Instigator Back; // 0x3d90(0x08)
	None CameraDodgeRoll_Relative_Position_4B7EB20A461034BB0B80418AE71BD9F4; // 0x3d98(0x0c)
	None CameraDodgeRoll_Camera_Boom_Length_4B7EB20A461034BB0B80418AE71BD9F4; // 0x3da4(0x04)
	None CameraDodgeRoll__Direction_4B7EB20A461034BB0B80418AE71BD9F4; // 0x3da8(0x01)
	None CameraDodgeRoll; // 0x3db0(0x08)
	None SprintFOVTimeline_FOVAlpha_F9A879E74FD1B4D844684CBEE4230863; // 0x3db8(0x04)
	None SprintFOVTimeline__Direction_F9A879E74FD1B4D844684CBEE4230863; // 0x3dbc(0x01)
	None SprintFOVTimeline; // 0x3dc0(0x08)
	None EndImmunity_Invulnerable_4A69979040C00E80AB6D5687355E98EA; // 0x3dc8(0x04)
	None EndImmunity__Direction_4A69979040C00E80AB6D5687355E98EA; // 0x3dcc(0x01)
	None EndImmunity; // 0x3dd0(0x08)
	None StartImmunity_Invulnerable_F2F49BA44D30D2903638919AFE6C1704; // 0x3dd8(0x04)
	None StartImmunity__Direction_F2F49BA44D30D2903638919AFE6C1704; // 0x3ddc(0x01)
	None StartImmunity; // 0x3de0(0x08)
	None Camera_Boom_Timeline_Player_Mesh_ADS_Weight_Reverse_7F7960E24E458B7FB9796A9428D9E3C5; // 0x3de8(0x04)
	None Camera_Boom_Timeline_Player_Mesh_ADS_Weight_Forward_7F7960E24E458B7FB9796A9428D9E3C5; // 0x3dec(0x04)
	None Camera_Boom_Timeline_FOV_Weight_7F7960E24E458B7FB9796A9428D9E3C5; // 0x3df0(0x04)
	None Camera_Boom_Timeline_Camera_Boom_Length_7F7960E24E458B7FB9796A9428D9E3C5; // 0x3df4(0x04)
	None Camera_Boom_Timeline__Direction_7F7960E24E458B7FB9796A9428D9E3C5; // 0x3df8(0x01)
	None Camera Boom Timeline; // 0x3e00(0x08)
	None Elapsed; // 0x3e08(0x04)
	None StopwatchOn; // 0x3e0c(0x01)
	None PlayerLocation; // 0x3e10(0x0c)
	None Successful Hit AkEvent; // 0x3e20(0x08)
	None ADS Test; // 0x3e28(0x01)
	None Camera Boom Arm Max; // 0x3e2c(0x04)
	None Cached 1p Field of View; // 0x3e30(0x04)
	None Test Alpha; // 0x3e34(0x04)
	None InFreeFall; // 0x3e38(0x01)
	None Turn Right; // 0x3e39(0x01)
	None Turn Left; // 0x3e3a(0x01)
	None Pitch; // 0x3e3c(0x04)
	None Friendly Free Fall; // 0x3e40(0x08)
	None Enemy Free Fall; // 0x3e48(0x08)
	None Yaw; // 0x3e50(0x04)
	None Main Camera Cached FOV; // 0x3e54(0x04)
	None HitDirs; // 0x3e58(0x04)
	None HitEnum; // 0x3e5c(0x01)
	None DownedPPEffect; // 0x3e60(0x50)
	None Downed PP Transition Duration; // 0x3eb0(0x04)
	None IsTrailActive; // 0x3eb4(0x01)
	None FlashBang PP Material; // 0x3eb8(0x08)
	None FlashBang PP Material Instance; // 0x3ec0(0x08)
	None SFX Grenade Damage Type; // 0x3ec8(0x10)
	None SFX Blade Damage Type; // 0x3ed8(0x10)
	None SFX Damage Target; // 0x3ee8(0x08)
	None LeftTempLoc; // 0x3ef0(0x0c)
	None AffectRange; // 0x3efc(0x04)
	None RightTempLoc; // 0x3f00(0x0c)
	None Out Of Bounds PP Material; // 0x3f10(0x08)
	None Out Of Bounds PP Material Instance; // 0x3f18(0x08)
	None CachedFOV; // 0x3f20(0x04)
	None LastHitInfo; // 0x3f28(0x40)
	None KnockbackRotation; // 0x3f68(0x0c)
	None DeltaTime; // 0x3f74(0x04)
	None bIsRagdoll; // 0x3f78(0x01)
	None bIsLaunchedOnDown; // 0x3f79(0x01)
	None bSnapshotPoseFacingUp; // 0x3f7a(0x01)
	None GetUpMontage; // 0x3f80(0x08)
	None bIsRagdollOnGround; // 0x3f88(0x01)
	None RagdollPelvisLocation; // 0x3f8c(0x0c)
	None RagdollCapsuleLocation; // 0x3f98(0x0c)
	None TimeInRagdoll; // 0x3fa4(0x04)
	None MaxTimeInRagdoll; // 0x3fa8(0x04)
	None FireParticle; // 0x3fb0(0x08)
	None GrenadeImpactPointMID; // 0x3fb8(0x08)
	None ZiplineActive1; // 0x3fc0(0x01)
	None SprintFov; // 0x3fc4(0x04)
	None SprintFOVChangeDuration; // 0x3fc8(0x04)
	None ZiplineFov; // 0x3fcc(0x04)
	None PreviousFov; // 0x3fd0(0x04)
	None InterpLengthHist; // 0x3fd8(0x20)
	None AppliedDownedCurveComponent; // 0x3ff8(0x08)
	None Effect; // 0x4000(0x50)
	None BloodPPEffect; // 0x4050(0x50)
	None HealthPostProcess; // 0x40a0(0x08)
	None Health PP MID; // 0x40a8(0x08)
	None HealthPPInterpSpeed; // 0x40b0(0x04)
	None SonarPPEffect; // 0x40b8(0x50)
	None EMPPPEffect; // 0x4108(0x50)
	None bEnableDirectionalDowns; // 0x4158(0x01)
	None bEnableComplexDirectionalDowns; // 0x4159(0x01)
	None FreeFallParticleDetachTime; // 0x415c(0x04)
	None OutOfBoundsPPEffect; // 0x4160(0x50)
	None OutOfBoundsEffectCurve; // 0x41b0(0x08)
	None ConfirmHitPPEffect; // 0x41b8(0x50)
	None Active Index; // 0x4208(0x04)
	None FirePostProcess; // 0x4210(0x50)
	None QueuedDamageEffects; // 0x4260(0x10)
	None InLowTreshold; // 0x4270(0x01)
	None LowHealthTreshold; // 0x4274(0x04)
	None PP_SkyDive; // 0x4278(0x50)
	None GadgetSwapSound; // 0x42c8(0x08)
	None ConfirmHitPPEffectEnabled; // 0x42d0(0x01)
	None ConfirmPickupPPEffect; // 0x42d8(0x50)
	None StopLoopingReviveSFX; // 0x4328(0x04)
	None StopLoopingArmorSFX; // 0x432c(0x04)
	None OnPrimaryOneWeaponHolstered; // 0x4330(0x10)
	None OnPrimaryTwoWeaponHolstered; // 0x4340(0x10)
	None ShowFootprintStepTypes; // 0x4350(0x10)
	None Temp_delegate_Variable; // 0x4360(0x10)
	None Temp_struct_Variable; // 0x4370(0x10)
	None Temp_delegate_Variable_2; // 0x4380(0x10)
	None Temp_struct_Variable_2; // 0x4390(0x10)
	None Temp_delegate_Variable_3; // 0x43a0(0x10)
	None Temp_struct_Variable_3; // 0x43b0(0x10)
	None Temp_delegate_Variable_4; // 0x43c0(0x10)
	None Temp_name_Variable; // 0x43d0(0x08)
	None K2Node_Event_EndReason; // 0x43d8(0x01)
	None Temp_bool_IsClosed_Variable; // 0x43d9(0x01)
	None Temp_struct_Variable_4; // 0x43e0(0x10)
	None K2Node_CustomEvent_Effect_3; // 0x43f0(0x50)
	None Temp_name_Variable_2; // 0x4440(0x08)
	None K2Node_ClassDynamicCast_AsKSDamage_Type_Base; // 0x4448(0x08)
	None K2Node_ClassDynamicCast_bSuccess; // 0x4450(0x01)
	None Temp_name_Variable_3; // 0x4454(0x08)
	None Temp_name_Variable_4; // 0x445c(0x08)
	None Temp_name_Variable_5; // 0x4464(0x08)
	None Temp_name_Variable_6; // 0x446c(0x08)
	None K2Node_Event_Damage; // 0x4474(0x04)
	None K2Node_Event_DamageTypeClass_2; // 0x4478(0x08)
	None K2Node_Event_DamageImpulse; // 0x4480(0x04)
	None K2Node_Event_RelativeImpactLocation; // 0x4484(0x0c)
	None K2Node_Event_BoneName; // 0x4490(0x08)
	None K2Node_Event_DamageCauser_2; // 0x4498(0x08)
	None Temp_name_Variable_7; // 0x44a0(0x08)
	None Temp_bool_Has_Been_Initd_Variable; // 0x44a8(0x01)
	None CallFunc_GetRagdollFacingDirection_IsUp; // 0x44a9(0x01)
	None Temp_name_Variable_8; // 0x44ac(0x08)
	None K2Node_CustomEvent_IsGrounded; // 0x44b4(0x01)
	None Temp_name_Variable_9; // 0x44b8(0x08)
	None CallFunc_K2_SetWorldLocation_SweepHitResult; // 0x44c0(0x88)
	None Temp_name_Variable_10; // 0x4548(0x08)
	None CallFunc_GetPhysicsLinearVelocity_ReturnValue; // 0x4550(0x0c)
	None Temp_delegate_Variable_5; // 0x455c(0x10)
	None Temp_struct_Variable_5; // 0x4570(0x10)
	None Temp_delegate_Variable_6; // 0x4580(0x10)
	None Temp_struct_Variable_6; // 0x4590(0x10)
	None K2Node_CreateDelegate_OutputDelegate; // 0x45a0(0x10)
	None Temp_delegate_Variable_7; // 0x45b0(0x10)
	None K2Node_CreateDelegate_OutputDelegate_2; // 0x45c0(0x10)
	None Temp_struct_Variable_7; // 0x45d0(0x10)
	None Temp_delegate_Variable_8; // 0x45e0(0x10)
	None Temp_struct_Variable_8; // 0x45f0(0x10)
	None CallFunc_ShouldLastHitLaunchIntoRagdoll_bShouldRagdoll; // 0x4600(0x01)
	None Temp_delegate_Variable_9; // 0x4604(0x10)
	None Temp_struct_Variable_9; // 0x4618(0x10)
	None Temp_delegate_Variable_10; // 0x4628(0x10)
	None Temp_bool_Has_Been_Initd_Variable_2; // 0x4638(0x01)
	None K2Node_CustomEvent_DeltaSeconds; // 0x463c(0x04)
	None Temp_struct_Variable_10; // 0x4640(0x10)
	None CallFunc_ProcessTakePointHitDamage_WorldHitLocation; // 0x4650(0x0c)
	None CallFunc_ProcessTakePointHitDamage_WorldHitNormal; // 0x465c(0x0c)
	None CallFunc_ProcessTakePointHitDamage_VectorToHitSource; // 0x4668(0x0c)
	None CallFunc_ProcessTakePointHitDamage_HitDirection; // 0x4674(0x01)
	None Temp_delegate_Variable_11; // 0x4678(0x10)
	None Temp_struct_Variable_11; // 0x4688(0x10)
	None K2Node_Event_SequenceName; // 0x4698(0x08)
	None K2Node_SwitchName_CmpSuccess; // 0x46a0(0x01)
	None K2Node_CustomEvent_Camera_Rotation; // 0x46a4(0x0c)
	None K2Node_CustomEvent_Uses_Rotation; // 0x46b0(0x01)
	None K2Node_CustomEvent_Camera_Offset; // 0x46b4(0x0c)
	None CallFunc_BreakVector_X; // 0x46c0(0x04)
	None CallFunc_BreakVector_Y; // 0x46c4(0x04)
	None CallFunc_BreakVector_Z; // 0x46c8(0x04)
	None CallFunc_BreakVector_X_2; // 0x46cc(0x04)
	None CallFunc_BreakVector_Y_2; // 0x46d0(0x04)
	None CallFunc_BreakVector_Z_2; // 0x46d4(0x04)
	None Temp_delegate_Variable_12; // 0x46d8(0x10)
	None CallFunc_K2_SetRelativeRotation_SweepHitResult; // 0x46e8(0x88)
	None CallFunc_K2_SetRelativeLocation_SweepHitResult; // 0x4770(0x88)
	None Temp_struct_Variable_12; // 0x47f8(0x10)
	None K2Node_CreateDelegate_OutputDelegate_3; // 0x4808(0x10)
	None Temp_name_Variable_11; // 0x4818(0x08)
	None K2Node_DynamicCast_AsSkinnable_Skeletal_Mesh_Component; // 0x4820(0x08)
	None K2Node_DynamicCast_bSuccess; // 0x4828(0x01)
	None K2Node_DynamicCast_AsSkinnable_Skeletal_Mesh_Component_2; // 0x4830(0x08)
	None K2Node_DynamicCast_bSuccess_2; // 0x4838(0x01)
	None Temp_bool_IsClosed_Variable_2; // 0x4839(0x01)
	None K2Node_Event_bVisible; // 0x483a(0x01)
	None Temp_name_Variable_12; // 0x483c(0x08)
	None Temp_bool_Has_Been_Initd_Variable_3; // 0x4844(0x01)
	None Temp_bool_IsClosed_Variable_3; // 0x4845(0x01)
	None Temp_delegate_Variable_13; // 0x4848(0x10)
	None K2Node_CustomEvent_Effect_2; // 0x4858(0x50)
	None Temp_struct_Variable_13; // 0x48a8(0x10)
	None K2Node_ClassDynamicCast_AsKSDamage_Type_Base_2; // 0x48b8(0x08)
	None K2Node_ClassDynamicCast_bSuccess_2; // 0x48c0(0x01)
	None K2Node_DynamicCast_AsKSBlood_Splatter_Component; // 0x48c8(0x08)
	None K2Node_DynamicCast_bSuccess_3; // 0x48d0(0x01)
	None Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x48d1(0x01)
	None CallFunc_GetLocalSettingAsBool_OutBool; // 0x48d2(0x01)
	None K2Node_CustomEvent_Effect; // 0x48d8(0x50)
	None K2Node_ClassDynamicCast_AsKSDamage_Type_Base_3; // 0x4928(0x08)
	None K2Node_ClassDynamicCast_bSuccess_3; // 0x4930(0x01)
	None K2Node_Event_DamageInfo_2; // 0x4938(0x68)
	None K2Node_Event_DamageAmount; // 0x49a0(0x04)
	None K2Node_Event_DamageTypeClass; // 0x49a8(0x08)
	None K2Node_Event_DamageCauser; // 0x49b0(0x08)
	None K2Node_Event_DamageOrigin; // 0x49b8(0x0c)
	None K2Node_Event_DamageInfo; // 0x49c8(0x68)
	None Temp_delegate_Variable_14; // 0x4a30(0x10)
	None Temp_struct_Variable_14; // 0x4a40(0x10)
	None Temp_delegate_Variable_15; // 0x4a50(0x10)
	None Temp_struct_Variable_15; // 0x4a60(0x10)
	None Temp_delegate_Variable_16; // 0x4a70(0x10)
	None Temp_struct_Variable_16; // 0x4a80(0x10)
	None CallFunc_GetHitPawnEffectOverride_ParticleSystem; // 0x4a90(0x08)
	None Temp_delegate_Variable_17; // 0x4a98(0x10)
	None Temp_struct_Variable_17; // 0x4aa8(0x10)
	None K2Node_Event_Effect_2; // 0x4ab8(0x50)
	None K2Node_Event_Effect; // 0x4b08(0x50)
	None CallFunc_ProcessTakePointHitDamage_WorldHitLocation_2; // 0x4b58(0x0c)
	None CallFunc_ProcessTakePointHitDamage_WorldHitNormal_2; // 0x4b64(0x0c)
	None CallFunc_ProcessTakePointHitDamage_VectorToHitSource_2; // 0x4b70(0x0c)
	None CallFunc_ProcessTakePointHitDamage_HitDirection_2; // 0x4b7c(0x01)
	None K2Node_ClassDynamicCast_AsKSDamage_Type_Base_4; // 0x4b80(0x08)
	None K2Node_ClassDynamicCast_bSuccess_4; // 0x4b88(0x01)
	None Temp_delegate_Variable_18; // 0x4b8c(0x10)
	None K2Node_CustomEvent_Character_2; // 0x4ba0(0x08)
	None Temp_struct_Variable_18; // 0x4ba8(0x10)
	None Temp_delegate_Variable_19; // 0x4bb8(0x10)
	None Temp_struct_Variable_19; // 0x4bc8(0x10)
	None Temp_delegate_Variable_20; // 0x4bd8(0x10)
	None Temp_struct_Variable_20; // 0x4be8(0x10)
	None Temp_delegate_Variable_21; // 0x4bf8(0x10)
	None Temp_struct_Variable_21; // 0x4c08(0x10)
	None Temp_delegate_Variable_22; // 0x4c18(0x10)
	None Temp_struct_Variable_22; // 0x4c28(0x10)
	None Temp_delegate_Variable_23; // 0x4c38(0x10)
	None Temp_struct_Variable_23; // 0x4c48(0x10)
	None Temp_delegate_Variable_24; // 0x4c58(0x10)
	None Temp_struct_Variable_24; // 0x4c68(0x10)
	None K2Node_CustomEvent_Player; // 0x4c78(0x08)
	None K2Node_DynamicCast_AsINameplate_Widget; // 0x4c80(0x10)
	None K2Node_DynamicCast_bSuccess_4; // 0x4c90(0x01)
	None K2Node_CreateDelegate_OutputDelegate_4; // 0x4c94(0x10)
	None K2Node_DynamicCast_AsINameplate_Widget_2; // 0x4ca8(0x10)
	None K2Node_DynamicCast_bSuccess_5; // 0x4cb8(0x01)
	None K2Node_Event_ExtraTime; // 0x4cbc(0x04)
	None K2Node_DynamicCast_AsINameplate_Widget_3; // 0x4cc0(0x10)
	None K2Node_DynamicCast_bSuccess_6; // 0x4cd0(0x01)
	None Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_2; // 0x4cd1(0x01)
	None K2Node_Event_PrevMovementMode; // 0x4cd2(0x01)
	None K2Node_Event_NewMovementMode; // 0x4cd3(0x01)
	None K2Node_Event_PrevCustomMode; // 0x4cd4(0x01)
	None K2Node_Event_NewCustomMode; // 0x4cd5(0x01)
	None K2Node_DynamicCast_AsKSCharacter_Movement_Component; // 0x4cd8(0x08)
	None K2Node_DynamicCast_bSuccess_7; // 0x4ce0(0x01)
	None K2Node_CustomEvent_EventInfo_2; // 0x4ce8(0x68)
	None K2Node_CustomEvent_ExpBonus_2; // 0x4d50(0x04)
	None K2Node_CustomEvent_Revivee; // 0x4d58(0x08)
	None K2Node_CustomEvent_Reviver; // 0x4d60(0x08)
	None K2Node_CustomEvent_ExpBonus; // 0x4d68(0x04)
	None K2Node_DynamicCast_AsKSPlayer_State; // 0x4d70(0x08)
	None K2Node_DynamicCast_bSuccess_8; // 0x4d78(0x01)
	None K2Node_DynamicCast_AsKSPlayer_State_2; // 0x4d80(0x08)
	None K2Node_DynamicCast_bSuccess_9; // 0x4d88(0x01)
	None K2Node_CustomEvent_EventInfo; // 0x4d90(0x68)
	None K2Node_CreateDelegate_OutputDelegate_5; // 0x4df8(0x10)
	None K2Node_DynamicCast_AsKSPlayer_State_3; // 0x4e08(0x08)
	None K2Node_DynamicCast_bSuccess_10; // 0x4e10(0x01)
	None K2Node_DynamicCast_AsKSPlayer_State_4; // 0x4e18(0x08)
	None K2Node_DynamicCast_bSuccess_11; // 0x4e20(0x01)
	None Temp_bool_Has_Been_Initd_Variable_4; // 0x4e21(0x01)
	None Temp_bool_IsClosed_Variable_4; // 0x4e22(0x01)
	None Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_3; // 0x4e23(0x01)
	None K2Node_Event_Enabled; // 0x4e24(0x01)
	None Temp_bool_Has_Been_Initd_Variable_5; // 0x4e25(0x01)
	None K2Node_Event_Reviver_3; // 0x4e28(0x08)
	None K2Node_Event_ReviveTime; // 0x4e30(0x04)
	None K2Node_Event_Remote; // 0x4e34(0x01)
	None K2Node_CreateDelegate_OutputDelegate_6; // 0x4e38(0x10)
	None K2Node_Event_Reviver_2; // 0x4e48(0x08)
	None K2Node_Event_Reviver; // 0x4e50(0x08)
	None K2Node_CustomEvent_IsSprinting; // 0x4e58(0x01)
	None K2Node_CustomEvent_IsDodgeRolling_2; // 0x4e59(0x01)
	None Temp_bool_Has_Been_Initd_Variable_6; // 0x4e5a(0x01)
	None CallFunc_KeepActionCameraAboveWater_OutBoomPosition; // 0x4e5c(0x0c)
	None Temp_bool_IsClosed_Variable_5; // 0x4e68(0x01)
	None Temp_delegate_Variable_25; // 0x4e6c(0x10)
	None Temp_struct_Variable_25; // 0x4e80(0x10)
	None K2Node_CreateDelegate_OutputDelegate_7; // 0x4e90(0x10)
	None CallFunc_K2_SetRelativeLocation_SweepHitResult_2; // 0x4ea0(0x88)
	None K2Node_CreateDelegate_OutputDelegate_8; // 0x4f28(0x10)
	None K2Node_Event_DeltaSeconds; // 0x4f38(0x04)
	None K2Node_CreateDelegate_OutputDelegate_9; // 0x4f3c(0x10)
	None Temp_bool_IsClosed_Variable_6; // 0x4f4c(0x01)
	None K2Node_InputKeyEvent_Key; // 0x4f50(0x18)
	None K2Node_Event_BreakingLocation; // 0x4f68(0x0c)
	None K2Node_Event_BreakingDirection; // 0x4f74(0x0c)
	None K2Node_Event_BreakingNormal; // 0x4f80(0x0c)
	None K2Node_CustomEvent_IsPowerSliding; // 0x4f8c(0x01)
	None CallFunc_GetTargetFov_TargetFov; // 0x4f90(0x04)
	None K2Node_CustomEvent_IsZiplining; // 0x4f94(0x01)
	None K2Node_CreateDelegate_OutputDelegate_10; // 0x4f98(0x10)
	None K2Node_CreateDelegate_OutputDelegate_11; // 0x4fa8(0x10)
	None K2Node_Event_bEnterNoseDive; // 0x4fb8(0x01)
	None K2Node_Event_AnimLength; // 0x4fbc(0x04)
	None K2Node_Event_SwingMontageSectionName; // 0x4fc0(0x10)
	None K2Node_DynamicCast_AsMaster_Weapon_Component; // 0x4fd0(0x08)
	None K2Node_DynamicCast_bSuccess_12; // 0x4fd8(0x01)
	None K2Node_CreateDelegate_OutputDelegate_12; // 0x4fdc(0x10)
	None K2Node_Event_PC_2; // 0x4ff0(0x08)
	None K2Node_Event_PC; // 0x4ff8(0x08)
	None K2Node_Event_UpdateTargetRotation; // 0x5000(0x01)
	None K2Node_Event_AffectCapsule; // 0x5001(0x01)
	None CallFunc_DetermineKnockbackFacing_ActorRotation; // 0x5004(0x0c)
	None Temp_object_Variable; // 0x5010(0x08)
	None Temp_bool_Variable; // 0x5018(0x01)
	None Temp_delegate_Variable_26; // 0x501c(0x10)
	None Temp_struct_Variable_26; // 0x5030(0x10)
	None Temp_delegate_Variable_27; // 0x5040(0x10)
	None Temp_struct_Variable_27; // 0x5050(0x10)
	None K2Node_CreateDelegate_OutputDelegate_13; // 0x5060(0x10)
	None Temp_bool_Has_Been_Initd_Variable_7; // 0x5070(0x01)
	None Temp_byte_Variable; // 0x5071(0x01)
	None K2Node_Event_Hit; // 0x5074(0x88)
	None Temp_byte_Variable_2; // 0x50fc(0x01)
	None Temp_byte_Variable_3; // 0x50fd(0x01)
	None Temp_byte_Variable_4; // 0x50fe(0x01)
	None Temp_byte_Variable_5; // 0x50ff(0x01)
	None Temp_struct_Variable_28; // 0x5100(0x0c)
	None K2Node_Select_Default; // 0x510c(0x01)
	None Temp_bool_Variable_2; // 0x510d(0x01)
	None K2Node_Select_Default_2; // 0x5110(0x0c)
	None Temp_bool_Variable_3; // 0x511c(0x01)
	None K2Node_Select_Default_3; // 0x5120(0x08)
	None K2Node_Select_Default_4; // 0x5128(0x08)
	None K2Node_CustomEvent_IsDodgeRolling; // 0x5130(0x01)
	None K2Node_CreateDelegate_OutputDelegate_14; // 0x5134(0x10)
	None K2Node_MakeStruct_SettingDelegateStruct; // 0x5144(0x20)
	None Temp_delegate_Variable_28; // 0x5164(0x10)
	None K2Node_CreateDelegate_OutputDelegate_15; // 0x5174(0x10)
	None Temp_struct_Variable_29; // 0x5188(0x10)
	None Temp_delegate_Variable_29; // 0x5198(0x10)
	None Temp_struct_Variable_30; // 0x51a8(0x10)
	None Temp_bool_IsClosed_Variable_7; // 0x51b8(0x01)
	None Temp_delegate_Variable_30; // 0x51bc(0x10)
	None Temp_struct_Variable_31; // 0x51d0(0x10)
	None Temp_bool_Variable_4; // 0x51e0(0x01)
	None Temp_delegate_Variable_31; // 0x51e4(0x10)
	None Temp_struct_Variable_32; // 0x51f8(0x10)
	None Temp_delegate_Variable_32; // 0x5208(0x10)
	None K2Node_Event_bFullyHealed; // 0x5218(0x01)
	None Temp_struct_Variable_33; // 0x5220(0x10)
	None Temp_delegate_Variable_33; // 0x5230(0x10)
	None Temp_struct_Variable_34; // 0x5240(0x10)
	None Temp_delegate_Variable_34; // 0x5250(0x10)
	None Temp_struct_Variable_35; // 0x5260(0x10)
	None Temp_delegate_Variable_35; // 0x5270(0x10)
	None K2Node_DynamicCast_AsKSZipline_Mesh_Component; // 0x5280(0x08)
	None K2Node_DynamicCast_bSuccess_13; // 0x5288(0x01)
	None K2Node_DynamicCast_AsKSZipline_Mesh_Component_2; // 0x5290(0x08)
	None K2Node_DynamicCast_bSuccess_14; // 0x5298(0x01)
	None K2Node_InputAxisKeyEvent_AxisValue_2; // 0x529c(0x04)
	None K2Node_InputAxisKeyEvent_AxisValue; // 0x52a0(0x04)
	None Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable_4; // 0x52a4(0x01)
	None Temp_struct_Variable_36; // 0x52a8(0x10)
	None Temp_delegate_Variable_36; // 0x52b8(0x10)
	None K2Node_CreateDelegate_OutputDelegate_16; // 0x52c8(0x10)
	None Temp_struct_Variable_37; // 0x52d8(0x10)
	None Temp_delegate_Variable_37; // 0x52e8(0x10)
	None Temp_struct_Variable_38; // 0x52f8(0x10)
	None K2Node_DynamicCast_AsKSZipline_Mesh_Component_3; // 0x5308(0x08)
	None K2Node_DynamicCast_bSuccess_15; // 0x5310(0x01)
	None K2Node_DynamicCast_AsKSZipline_Mesh_Component_4; // 0x5318(0x08)
	None K2Node_DynamicCast_bSuccess_16; // 0x5320(0x01)
	None K2Node_CustomEvent_Character; // 0x5328(0x08)
	None K2Node_CustomEvent_ItemDrop; // 0x5330(0x08)
	None K2Node_CustomEvent_Item; // 0x5338(0x08)
	None K2Node_Event_InteractTime; // 0x5340(0x04)
	None CallFunc_BreakVector_X_3; // 0x5344(0x04)
	None CallFunc_BreakVector_Y_3; // 0x5348(0x04)
	None CallFunc_BreakVector_Z_3; // 0x534c(0x04)
	None K2Node_DynamicCast_AsKSPlayer_Controller; // 0x5350(0x08)
	None K2Node_DynamicCast_bSuccess_17; // 0x5358(0x01)
	None CallFunc_K2_SetRelativeLocation_SweepHitResult_3; // 0x535c(0x88)
	None K2Node_SwitchEnum_CmpSuccess; // 0x53e4(0x01)
	None K2Node_DynamicCast_AsKSPlayer_Controller_2; // 0x53e8(0x08)
	None K2Node_DynamicCast_bSuccess_18; // 0x53f0(0x01)
	None K2Node_DynamicCast_AsKSPlayer_Controller_3; // 0x53f8(0x08)
	None K2Node_DynamicCast_bSuccess_19; // 0x5400(0x01)
	None K2Node_SwitchEnum_CmpSuccess_2; // 0x5401(0x01)
	None K2Node_SwitchEnum_CmpSuccess_3; // 0x5402(0x01)
	None K2Node_Event_Intensity; // 0x5403(0x01)
	None K2Node_SwitchEnum_CmpSuccess_4; // 0x5404(0x01)
	None Temp_bool_Has_Been_Initd_Variable_8; // 0x5405(0x01)
	None CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput; // 0x5408(0x10)
	None CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_2; // 0x5418(0x10)
	None Temp_byte_Variable_6; // 0x5428(0x01)
	None Temp_byte_Variable_7; // 0x5429(0x01)
	None Temp_byte_Variable_8; // 0x542a(0x01)
	None Temp_byte_Variable_9; // 0x542b(0x01)
	None Temp_byte_Variable_10; // 0x542c(0x01)
	None K2Node_Select_Default_5; // 0x542d(0x01)
	None Temp_bool_IsClosed_Variable_8; // 0x542e(0x01)
	None Temp_object_Variable_2; // 0x5430(0x08)
	None Temp_object_Variable_3; // 0x5438(0x08)
	None Temp_bool_Variable_5; // 0x5440(0x01)
	None K2Node_MakeStruct_LastHitImpulse; // 0x5448(0x40)
	None K2Node_Select_Default_6; // 0x5488(0x08)
	None K2Node_CustomEvent_New_Blind_FX_State; // 0x5490(0x01)
	None SubjectPreset; // 0xe0(0x38)
	None ChannelMask; // 0x118(0x10)
	None SubSections; // 0x128(0x10)
	None SubjectName; // 0x148(0x08)
	None TemplateToPush; // 0x150(0x90)
	None RefSkeleton; // 0x1e0(0x20)
	None CurveNames; // 0x200(0x10)
	None PropertyFloatChannels; // 0x210(0x10)
	None SubSectionData; // 0x28(0x10)
	None SubjectRole; // 0x38(0x08)
	None TrackRole; // 0x88(0x08)
	None SectionToKey; // 0x58(0x08)
	None PropertyName; // 0x60(0x08)
	None PropertyPath; // 0x68(0x10)
	None Sections; // 0x78(0x10)
	None ConstraintId; // 0xe0(0x10)
	None ConstraintBindingID; // 0xf0(0x18)
	None AttachSocketName; // 0x108(0x08)
	None AttachComponentName; // 0x110(0x08)
	None AttachmentLocationRule; // 0x118(0x01)
	None AttachmentRotationRule; // 0x119(0x01)
	None AttachmentScaleRule; // 0x11a(0x01)
	None DetachmentLocationRule; // 0x11b(0x01)
	None DetachmentRotationRule; // 0x11c(0x01)
	None DetachmentScaleRule; // 0x11d(0x01)
	None ConstraintSections; // 0x58(0x10)
	None TimingCurve; // 0x108(0xa0)
	None FrontAxisEnum; // 0x1a8(0x01)
	None UpAxisEnum; // 0x1a9(0x01)
	None bFollow; // 0x1ac(0x01)
	None bReverse; // 0x1ac(0x01)
	None bForceUpright; // 0x1ac(0x01)
	None TransformMask; // 0xe0(0x04)
	None Translation; // 0xe8(0x1e0)
	None Rotation; // 0x2c8(0x1e0)
	None Scale; // 0x4a8(0x1e0)
	None ManualWeight; // 0x688(0xa0)
	None bUseQuaternionInterpolation; // 0x72c(0x01)
	None ActorReferenceData; // 0xe0(0xb0)
	None ActorGuidIndexCurve; // 0x190(0x80)
	None ActorGuidStrings; // 0x210(0x10)
	None Sound; // 0xe0(0x08)
	None StartFrameOffset; // 0xe8(0x04)
	None StartOffset; // 0xec(0x04)
	None AudioStartTime; // 0xf0(0x04)
	None AudioDilationFactor; // 0xf4(0x04)
	None AudioVolume; // 0xf8(0x04)
	None SoundVolume; // 0x100(0xa0)
	None PitchMultiplier; // 0x1a0(0xa0)
	None AttachActorData; // 0x240(0xb0)
	None bSuppressSubtitles; // 0x2f0(0x01)
	None bOverrideAttenuation; // 0x2f1(0x01)
	None AttenuationSettings; // 0x2f8(0x08)
	None OnQueueSubtitles; // 0x300(0x10)
	None OnAudioFinished; // 0x310(0x10)
	None OnAudioPlaybackPercent; // 0x320(0x10)
	None AudioSections; // 0x58(0x10)
	None DefaultValue; // 0xe0(0x01)
	None BoolCurve; // 0xe8(0x90)
	None ByteCurve; // 0xe0(0x98)
	None Enum; // 0x88(0x08)
	None AnimData; // 0xe0(0x20)
	None CameraAnim; // 0x100(0x08)
	None PlayRate; // 0x108(0x04)
	None PlayScale; // 0x10c(0x04)
	None BlendInTime; // 0x110(0x04)
	None BlendOutTime; // 0x114(0x04)
	None bLooping; // 0x118(0x01)
	None CameraAnimSections; // 0x58(0x10)
	None CameraGuid; // 0xe0(0x10)
	None CameraBindingID; // 0xf0(0x18)
	None bCanBlend; // 0x58(0x01)
	None Sections; // 0x60(0x10)
	None ShakeData; // 0xe0(0x20)
	None ShakeClass; // 0x100(0x08)
	None PlayScale; // 0x108(0x04)
	None PlaySpace; // 0x10c(0x01)
	None UserDefinedPlaySpace; // 0x110(0x0c)
	None CameraShakeSections; // 0x58(0x10)
	None ShotDisplayName; // 0x158(0x10)
	None DisplayName; // 0x168(0x18)
	None RedCurve; // 0xe0(0xa0)
	None GreenCurve; // 0x180(0xa0)
	None BlueCurve; // 0x220(0xa0)
	None AlphaCurve; // 0x2c0(0xa0)
	None bIsSlateColor; // 0x88(0x01)
	None EnumCurve; // 0xe0(0x98)
	None Enum; // 0x88(0x08)
	None Event; // 0xe0(0x30)
	None Events; // 0xe0(0x78)
	None EventData; // 0x158(0x88)
	None bFireEventsWhenForwards; // 0x58(0x01)
	None bFireEventsWhenBackwards; // 0x58(0x01)
	None EventPosition; // 0x5c(0x01)
	None EventReceivers; // 0x60(0x10)
	None Sections; // 0x70(0x10)
	None EventChannel; // 0xe0(0x88)
	None FloatCurve; // 0xe0(0xa0)
	None FadeColor; // 0x180(0x10)
	None bFadeAudio; // 0x190(0x01)
	None IntegerCurve; // 0xe0(0x90)
	None Visibility; // 0xe0(0x01)
	None LevelNames; // 0xe8(0x10)
	None Sections; // 0x58(0x10)
	None Sections; // 0x58(0x10)
	None MPC; // 0x68(0x08)
	None MaterialIndex; // 0x68(0x04)
	None ObjectChannel; // 0xe0(0xc0)
	None PropertyClass; // 0x88(0x08)
	None BoolParameterNamesAndCurves; // 0xe0(0x10)
	None ScalarParameterNamesAndCurves; // 0xf0(0x10)
	None Vector2DParameterNamesAndCurves; // 0x100(0x10)
	None VectorParameterNamesAndCurves; // 0x110(0x10)
	None ColorParameterNamesAndCurves; // 0x120(0x10)
	None TransformParameterNamesAndCurves; // 0x130(0x10)
	None Sections; // 0x58(0x10)
	None ParticleKeys; // 0xe0(0x98)
	None ParticleSections; // 0x58(0x10)
	None MaterialChannel; // 0xe0(0xc0)
	None MaterialIndex; // 0x88(0x04)
	None Params; // 0xe0(0xd8)
	None AnimSequence; // 0x1b8(0x08)
	None Animation; // 0x1c0(0x08)
	None StartOffset; // 0x1c8(0x04)
	None EndOffset; // 0x1cc(0x04)
	None PlayRate; // 0x1d0(0x04)
	None bReverse; // 0x1d4(0x01)
	None SlotName; // 0x1d8(0x08)
	None AnimationSections; // 0x58(0x10)
	None bUseLegacySectionIndexBlend; // 0x68(0x01)
	None Sections; // 0x58(0x10)
	None ObjectGuid; // 0x68(0x10)
	None StringCurve; // 0xe0(0xa0)
	None Curves; // 0xe0(0x280)
	None ChannelsUsed; // 0x360(0x04)
	None NumChannelsUsed; // 0x88(0x04)
	None Sections; // 0x58(0x10)
	None Parameter; // 0x68(0x28)
	None SectionStartBehavior; // 0xe0(0x04)
	None SectionEvaluateBehavior; // 0xe4(0x04)
	None SectionEndBehavior; // 0xe8(0x04)
	None AgeUpdateMode; // 0xec(0x01)
	None ChannelsUsed; // 0x90(0x04)
	None NiagaraComponent; // 0x220(0x08)
	None bDestroyOnSystemFinish; // 0x228(0x01)
	None Asset; // 0x430(0x08)
	None TickBehavior; // 0x438(0x01)
	None OverrideParameters; // 0x440(0x108)
	None bForceSolo; // 0x548(0x01)
	None bAutoDestroy; // 0x574(0x01)
	None bRenderingEnabled; // 0x574(0x01)
	None bAutoManageAttachment; // 0x574(0x01)
	None bAutoAttachWeldSimulatedBodies; // 0x574(0x01)
	None MaxTimeBeforeForceUpdateTransform; // 0x578(0x04)
	None OnSystemFinished; // 0x580(0x10)
	None AutoAttachParent; // 0x590(0x08)
	None AutoAttachSocketName; // 0x598(0x08)
	None AutoAttachLocationRule; // 0x5a0(0x01)
	None AutoAttachRotationRule; // 0x5a1(0x01)
	None AutoAttachScaleRule; // 0x5a2(0x01)
	None bRenderAfterDLSS; // 0x5a3(0x01)
	None WorldParticleSystemPools; // 0x28(0x50)
	None Submix; // 0x30(0x08)
	None Submix; // 0x30(0x08)
	None Resolution; // 0x38(0x04)
	None ScopeInMilliseconds; // 0x3c(0x04)
	None Resolution; // 0x38(0x04)
	None MinimumFrequency; // 0x3c(0x04)
	None MaximumFrequency; // 0x40(0x04)
	None NoiseFloorDb; // 0x44(0x04)
	None PlayerControllerIndex; // 0x30(0x04)
	None ShaderLUT; // 0x30(0x10)
	None LUTMinTime; // 0x40(0x04)
	None LUTMaxTime; // 0x44(0x04)
	None LUTInvTimeRange; // 0x48(0x04)
	None LUTNumSamplesMinusOne; // 0x4c(0x04)
	None bUseLUT; // 0x50(0x01)
	None RedCurve; // 0x58(0x80)
	None GreenCurve; // 0xd8(0x80)
	None BlueCurve; // 0x158(0x80)
	None AlphaCurve; // 0x1d8(0x80)
	None Seed; // 0x30(0x04)
	None Curve; // 0x58(0x80)
	None CallbackHandlerParameter; // 0x30(0x28)
	None OutputShaderStages; // 0x30(0x50)
	None IterationShaderStages; // 0x80(0x50)
	None NumCellsX; // 0xd0(0x04)
	None NumCellsY; // 0xd4(0x04)
	None NumCellsMaxAxis; // 0xd8(0x04)
	None NumAttributes; // 0xdc(0x04)
	None SetGridFromMaxAxis; // 0xe0(0x01)
	None WorldBBoxSize; // 0xe4(0x08)
	None NumVoxels; // 0xd0(0x0c)
	None VoxelSize; // 0xdc(0x04)
	None SetGridFromVoxelSize; // 0xe0(0x01)
	None WorldBBoxSize; // 0xe4(0x0c)
	None MaxNeighborsPerVoxel; // 0xf0(0x04)
	None EmitterName; // 0x30(0x10)
	None Source; // 0x30(0x08)
	None MeshUserParameter; // 0x38(0x28)
	None SourceComponent; // 0x60(0x08)
	None SkinningMode; // 0x68(0x01)
	None SamplingRegions; // 0x70(0x10)
	None WholeMeshLOD; // 0x80(0x04)
	None FilteredBones; // 0x88(0x10)
	None FilteredSockets; // 0x98(0x10)
	None ExcludeBoneName; // 0xa8(0x08)
	None bExcludeBone; // 0xb0(0x01)
	None Source; // 0x30(0x08)
	None DefaultMesh; // 0x30(0x08)
	None Source; // 0x38(0x08)
	None SourceComponent; // 0x40(0x08)
	None SectionFilter; // 0x48(0x10)
	None Texture; // 0x30(0x08)
	None XCurve; // 0x58(0x80)
	None YCurve; // 0xd8(0x80)
	None XCurve; // 0x58(0x80)
	None YCurve; // 0xd8(0x80)
	None ZCurve; // 0x158(0x80)
	None WCurve; // 0x1d8(0x80)
	None XCurve; // 0x58(0x80)
	None YCurve; // 0xd8(0x80)
	None ZCurve; // 0x158(0x80)
	None Field; // 0x30(0x08)
	None bTileX; // 0x38(0x01)
	None bTileY; // 0x39(0x01)
	None bTileZ; // 0x3a(0x01)
	None Texture; // 0x30(0x08)
	None UpdateFrequency; // 0x28(0x04)
	None CullReaction; // 0x2c(0x04)
	None DetailLevelScalabilitySettings; // 0x30(0x10)
	None SystemScalabilitySettings; // 0x40(0x10)
	None EmitterScalabilitySettings; // 0x50(0x10)
	None bLocalSpace; // 0x28(0x01)
	None bDeterminism; // 0x29(0x01)
	None RandomSeed; // 0x2c(0x04)
	None AllocationMode; // 0x30(0x01)
	None PreAllocationCount; // 0x34(0x04)
	None UpdateScriptProps; // 0x38(0x28)
	None SpawnScriptProps; // 0x60(0x28)
	None EmitterSpawnScriptProps; // 0x88(0x28)
	None EmitterUpdateScriptProps; // 0xb0(0x28)
	None SimTarget; // 0xd8(0x01)
	None FixedBounds; // 0xdc(0x1c)
	None MinDetailLevel; // 0xf8(0x04)
	None MaxDetailLevel; // 0xfc(0x04)
	None GlobalSpawnCountScaleOverrides; // 0x100(0x14)
	None Platforms; // 0x118(0x20)
	None ScalabilityOverrides; // 0x138(0x10)
	None bInterpolatedSpawning; // 0x148(0x01)
	None bFixedBounds; // 0x148(0x01)
	None bUseMinDetailLevel; // 0x148(0x01)
	None bUseMaxDetailLevel; // 0x148(0x01)
	None bOverrideGlobalSpawnCountScale; // 0x148(0x01)
	None bRequiresPersistentIDs; // 0x148(0x01)
	None MaxDeltaTimePerTick; // 0x14c(0x04)
	None DefaultShaderStageIndex; // 0x150(0x04)
	None MaxUpdateIterations; // 0x154(0x04)
	None SpawnStages; // 0x158(0x50)
	None bSimulationStagesEnabled; // 0x1a8(0x01)
	None bDeprecatedShaderStagesEnabled; // 0x1a8(0x01)
	None bLimitDeltaTime; // 0x1a8(0x01)
	None UniqueEmitterName; // 0x1b0(0x10)
	None RendererProperties; // 0x1c0(0x10)
	None EventHandlerScriptProps; // 0x1d0(0x10)
	None SimulationStages; // 0x1e0(0x10)
	None GPUComputeScript; // 0x1f0(0x08)
	None SharedEventGeneratorIds; // 0x1f8(0x10)
	None NumParticles; // 0x28(0x04)
	None SortOrderHint; // 0x28(0x04)
	None bIsEnabled; // 0x2c(0x01)
	None bMotionBlurEnabled; // 0x2d(0x01)
	None bUseInverseSquaredFalloff; // 0x50(0x01)
	None bAffectsTranslucency; // 0x50(0x01)
	None bOverrideRenderingEnabled; // 0x50(0x01)
	None RadiusScale; // 0x54(0x04)
	None ColorAdd; // 0x58(0x0c)
	None LightRenderingEnabledBinding; // 0x68(0x78)
	None LightExponentBinding; // 0xe0(0x78)
	None PositionBinding; // 0x158(0x78)
	None ColorBinding; // 0x1d0(0x78)
	None RadiusBinding; // 0x248(0x78)
	None VolumetricScatteringBinding; // 0x2c0(0x78)
	None ParticleMesh; // 0x50(0x08)
	None SortMode; // 0x58(0x01)
	None bOverrideMaterials; // 0x5c(0x01)
	None bSortOnlyWhenTranslucent; // 0x5c(0x01)
	None OverrideMaterials; // 0x60(0x10)
	None SubImageSize; // 0x70(0x08)
	None bSubImageBlend; // 0x78(0x01)
	None FacingMode; // 0x7c(0x01)
	None bLockedAxisEnable; // 0x80(0x01)
	None LockedAxis; // 0x84(0x0c)
	None LockedAxisSpace; // 0x90(0x01)
	None PositionBinding; // 0x98(0x78)
	None ColorBinding; // 0x110(0x78)
	None VelocityBinding; // 0x188(0x78)
	None MeshOrientationBinding; // 0x200(0x78)
	None ScaleBinding; // 0x278(0x78)
	None SubImageIndexBinding; // 0x2f0(0x78)
	None DynamicMaterialBinding; // 0x368(0x78)
	None DynamicMaterial1Binding; // 0x3e0(0x78)
	None DynamicMaterial2Binding; // 0x458(0x78)
	None DynamicMaterial3Binding; // 0x4d0(0x78)
	None MaterialRandomBinding; // 0x548(0x78)
	None CustomSortingBinding; // 0x5c0(0x78)
	None NormalizedAgeBinding; // 0x638(0x78)
	None CameraOffsetBinding; // 0x6b0(0x78)
	None Collection; // 0x28(0x08)
	None OverridenParameters; // 0x30(0x10)
	None ParameterStorage; // 0x40(0xb8)
	None Namespace; // 0x28(0x08)
	None Parameters; // 0x30(0x10)
	None DefaultInstance; // 0x40(0x08)
	None CompileId; // 0x48(0x10)
	None Scripts; // 0x28(0x10)
	None System; // 0x38(0x08)
	None Param; // 0x28(0x08)
	None Count; // 0x30(0x04)
	None Min; // 0x38(0x04)
	None Max; // 0x3c(0x04)
	None Min; // 0x38(0x04)
	None Max; // 0x3c(0x04)
	None Min; // 0x38(0x08)
	None Max; // 0x40(0x08)
	None Min; // 0x38(0x0c)
	None Max; // 0x44(0x0c)
	None Min; // 0x40(0x10)
	None Max; // 0x50(0x10)
	None Min; // 0x38(0x10)
	None Max; // 0x48(0x10)
	None System; // 0x220(0x08)
	None ResetMode; // 0x228(0x01)
	None PreviewAxisX; // 0x230(0x08)
	None PreviewAxisY; // 0x238(0x08)
	None PreviewClass; // 0x240(0x08)
	None SpacingX; // 0x248(0x04)
	None SpacingY; // 0x24c(0x04)
	None NumX; // 0x250(0x04)
	None NumY; // 0x254(0x04)
	None PreviewComponents; // 0x258(0x10)
	None Material; // 0x50(0x08)
	None MaterialUserParamBinding; // 0x58(0x28)
	None FacingMode; // 0x80(0x01)
	None UV0TilingDistance; // 0x84(0x04)
	None UV0Scale; // 0x88(0x08)
	None UV0Offset; // 0x90(0x08)
	None UV0AgeOffsetMode; // 0x98(0x01)
	None UV1TilingDistance; // 0x9c(0x04)
	None UV1Scale; // 0xa0(0x08)
	None UV1Offset; // 0xa8(0x08)
	None UV1AgeOffsetMode; // 0xb0(0x01)
	None DrawDirection; // 0xb1(0x01)
	None CurveTension; // 0xb4(0x04)
	None TessellationMode; // 0xb8(0x01)
	None TessellationFactor; // 0xbc(0x04)
	None bUseConstantFactor; // 0xc0(0x01)
	None TessellationAngle; // 0xc4(0x04)
	None bScreenSpaceTessellation; // 0xc8(0x01)
	None PositionBinding; // 0xd0(0x78)
	None ColorBinding; // 0x148(0x78)
	None VelocityBinding; // 0x1c0(0x78)
	None NormalizedAgeBinding; // 0x238(0x78)
	None RibbonTwistBinding; // 0x2b0(0x78)
	None RibbonWidthBinding; // 0x328(0x78)
	None RibbonFacingBinding; // 0x3a0(0x78)
	None RibbonIdBinding; // 0x418(0x78)
	None RibbonLinkOrderBinding; // 0x490(0x78)
	None MaterialRandomBinding; // 0x508(0x78)
	None DynamicMaterialBinding; // 0x580(0x78)
	None DynamicMaterial1Binding; // 0x5f8(0x78)
	None DynamicMaterial2Binding; // 0x670(0x78)
	None DynamicMaterial3Binding; // 0x6e8(0x78)
	None Usage; // 0x28(0x01)
	None UsageIndex; // 0x2c(0x04)
	None UsageId; // 0x30(0x10)
	None RapidIterationParameters; // 0x40(0xb8)
	None ScriptExecutionParamStore; // 0xf8(0xd8)
	None ScriptExecutionBoundParameters; // 0x1d0(0x10)
	None CachedScriptVMId; // 0x1e0(0x48)
	None CachedScriptVM; // 0x3d8(0x128)
	None CachedParameterCollectionReferences; // 0x500(0x10)
	None CachedDefaultDataInterfaces; // 0x510(0x10)
	None AdditionalParameterTypes; // 0x38(0x10)
	None AdditionalPayloadTypes; // 0x48(0x10)
	None AdditionalParameterEnums; // 0x58(0x10)
	None DefaultEffectType; // 0x68(0x18)
	None QualityLevels; // 0x80(0x10)
	None DefaultEffectTypePtr; // 0x90(0x08)
	None Script; // 0x28(0x08)
	None SimulationStageName; // 0x30(0x08)
	None IterationSource; // 0x38(0x01)
	None Iterations; // 0x3c(0x04)
	None bSpawnOnly; // 0x40(0x01)
	None DataInterface; // 0x48(0x28)
	None Material; // 0x50(0x08)
	None MaterialUserParamBinding; // 0x58(0x28)
	None Alignment; // 0x80(0x01)
	None FacingMode; // 0x81(0x01)
	None PivotInUVSpace; // 0x84(0x08)
	None SortMode; // 0x8c(0x01)
	None SubImageSize; // 0x90(0x08)
	None bSubImageBlend; // 0x98(0x01)
	None bRemoveHMDRollInVR; // 0x98(0x01)
	None bSortOnlyWhenTranslucent; // 0x98(0x01)
	None MinFacingCameraBlendDistance; // 0x9c(0x04)
	None MaxFacingCameraBlendDistance; // 0xa0(0x04)
	None PositionBinding; // 0xa8(0x78)
	None ColorBinding; // 0x120(0x78)
	None VelocityBinding; // 0x198(0x78)
	None SpriteRotationBinding; // 0x210(0x78)
	None SpriteSizeBinding; // 0x288(0x78)
	None SpriteFacingBinding; // 0x300(0x78)
	None SpriteAlignmentBinding; // 0x378(0x78)
	None SubImageIndexBinding; // 0x3f0(0x78)
	None DynamicMaterialBinding; // 0x468(0x78)
	None DynamicMaterial1Binding; // 0x4e0(0x78)
	None DynamicMaterial2Binding; // 0x558(0x78)
	None DynamicMaterial3Binding; // 0x5d0(0x78)
	None CameraOffsetBinding; // 0x648(0x78)
	None UVScaleBinding; // 0x6c0(0x78)
	None MaterialRandomBinding; // 0x738(0x78)
	None CustomSortingBinding; // 0x7b0(0x78)
	None NormalizedAgeBinding; // 0x828(0x78)
	None bDumpDebugSystemInfo; // 0x31(0x01)
	None bDumpDebugEmitterInfo; // 0x32(0x01)
	None bFixedBounds; // 0x34(0x01)
	None EffectType; // 0x38(0x08)
	None bOverrideScalabilitySettings; // 0x40(0x01)
	None ScalabilityOverrides; // 0x48(0x10)
	None SystemScalabilityOverrides; // 0x58(0x10)
	None EmitterHandles; // 0x68(0x10)
	None ParameterCollectionOverrides; // 0x78(0x10)
	None SystemSpawnScript; // 0x88(0x08)
	None SystemUpdateScript; // 0x90(0x08)
	None SystemCompiledData; // 0xa8(0x258)
	None ExposedParameters; // 0x300(0x108)
	None FixedBounds; // 0x408(0x1c)
	None bAutoDeactivate; // 0x424(0x01)
	None WarmupTime; // 0x428(0x04)
	None WarmupTickCount; // 0x42c(0x04)
	None WarmupTickDelta; // 0x430(0x04)
	None bHasSystemScriptDIsWithPerInstanceData; // 0x434(0x01)
	None UserDINamesReadInSystemScripts; // 0x438(0x10)
	None UberGraphFrame; // 0x520(0x08)
	None animHover; // 0x528(0x08)
	None CardContent; // 0x530(0x08)
	None ChallengeBkg_2; // 0x538(0x08)
	None ChallengeBkg_Complete; // 0x540(0x08)
	None ChallengeBkg_Switcher; // 0x548(0x08)
	None ChallengeContentSwitcher; // 0x550(0x08)
	None ChallengeDescription; // 0x558(0x08)
	None ChallengeDescription_2; // 0x560(0x08)
	None ChallengeDescription_4; // 0x568(0x08)
	None ChallengeDescription_5; // 0x570(0x08)
	None ChallengeProgressBar; // 0x578(0x08)
	None ChallengeProgressText; // 0x580(0x08)
	None CompletedIcons; // 0x588(0x08)
	None Content_active; // 0x590(0x08)
	None Content_AllComplete; // 0x598(0x08)
	None Content_WeekComplete; // 0x5a0(0x08)
	None HitTarget; // 0x5a8(0x08)
	None Image; // 0x5b0(0x08)
	None Image_390; // 0x5b8(0x08)
	None RewardBadge_EXAMPLE; // 0x5c0(0x08)
	None RewardBadge_EXAMPLE_01; // 0x5c8(0x08)
	None RewardsActive; // 0x5d0(0x08)
	None RewardSwitcher; // 0x5d8(0x08)
	None SelectionFrame; // 0x5e0(0x08)
	None TimeRemainingWrapper; // 0x5e8(0x08)
	None CurrentVisualState; // 0x5f0(0x01)
	None WeekTableRowName; // 0x5f4(0x08)
	None CurrentActivitySequence; // 0x600(0x30)
	None OnClicked; // 0x630(0x10)
	None ButtonClickSound; // 0x640(0x08)
	None ButtonHoverSound; // 0x648(0x08)
	None bUseComplexAsSimpleCollision; // 0x460(0x01)
	None bUseAsyncCooking; // 0x461(0x01)
	None ProcMeshBodySetup; // 0x468(0x08)
	None ProcMeshSections; // 0x470(0x10)
	None CollisionConvexElems; // 0x480(0x10)
	None LocalBounds; // 0x490(0x1c)
	None AsyncBodySetupQueue; // 0x4b0(0x10)
	None UberGraphFrame; // 0x520(0x08)
	None MasteryRewardEntries; // 0x528(0x08)
	None WBP_ProgressEarnedBar; // 0x530(0x08)
	None WBP_RogueMasteryTrackEntry; // 0x538(0x08)
	None WBP_RogueMasteryTrackEntry_2; // 0x540(0x08)
	None WBP_RogueMasteryTrackEntry_3; // 0x548(0x08)
	None WBP_RogueMasteryTrackEntry_4; // 0x550(0x08)
	None WBP_RogueMasteryTrackEntry_5; // 0x558(0x08)
	None WBP_RogueMasteryTrackEntry_6; // 0x560(0x08)
	None WBP_RogueMasteryTrackEntry_7; // 0x568(0x08)
	None WBP_RogueMasteryTrackEntry_8; // 0x570(0x08)
	None WBP_RogueMasteryTrackEntry_9; // 0x578(0x08)
	None WBP_RogueMasteryTrackEntry_10; // 0x580(0x08)
	None OnTrackEntrySelected; // 0x588(0x10)
	None LastSelectedActivity; // 0x598(0x40)
	None Template; // 0x38(0x08)
	None LocationOffset; // 0x40(0x0c)
	None RotationOffset; // 0x4c(0x0c)
	None Scale; // 0x58(0x0c)
	None Attached; // 0x80(0x01)
	None SocketName; // 0x84(0x08)
	None Template; // 0x30(0x08)
	None SocketName; // 0x38(0x08)
	None LocationOffset; // 0x40(0x0c)
	None RotationOffset; // 0x4c(0x0c)
	None bDestroyAtEnd; // 0x58(0x01)
	None Params; // 0xe0(0x30)
	None AnimationSections; // 0x58(0x10)
	None bDeprecatedSpringOffsetMode; // 0x140(0x01)
	None bReverseAsBrake; // 0x140(0x01)
	None bUseRVOAvoidance; // 0x140(0x01)
	None bRawHandbrakeInput; // 0x140(0x01)
	None bRawGearUpInput; // 0x140(0x01)
	None bRawGearDownInput; // 0x140(0x01)
	None bWasAvoidanceUpdated; // 0x144(0x01)
	None Mass; // 0x148(0x04)
	None WheelSetups; // 0x150(0x10)
	None DragCoefficient; // 0x160(0x04)
	None ChassisWidth; // 0x164(0x04)
	None ChassisHeight; // 0x168(0x04)
	None DragArea; // 0x16c(0x04)
	None EstimatedMaxEngineSpeed; // 0x170(0x04)
	None MaxEngineRPM; // 0x174(0x04)
	None DebugDragMagnitude; // 0x178(0x04)
	None InertiaTensorScale; // 0x17c(0x0c)
	None MinNormalizedTireLoad; // 0x188(0x04)
	None MinNormalizedTireLoadFiltered; // 0x18c(0x04)
	None MaxNormalizedTireLoad; // 0x190(0x04)
	None MaxNormalizedTireLoadFiltered; // 0x194(0x04)
	None ThresholdLongitudinalSpeed; // 0x198(0x04)
	None LowForwardSpeedSubStepCount; // 0x19c(0x04)
	None HighForwardSpeedSubStepCount; // 0x1a0(0x04)
	None Wheels; // 0x1a8(0x10)
	None RVOAvoidanceRadius; // 0x1d0(0x04)
	None RVOAvoidanceHeight; // 0x1d4(0x04)
	None AvoidanceConsiderationRadius; // 0x1d8(0x04)
	None RVOSteeringStep; // 0x1dc(0x04)
	None RVOThrottleStep; // 0x1e0(0x04)
	None AvoidanceUID; // 0x1e4(0x04)
	None AvoidanceGroup; // 0x1e8(0x04)
	None GroupsToAvoid; // 0x1ec(0x04)
	None GroupsToIgnore; // 0x1f0(0x04)
	None AvoidanceWeight; // 0x1f4(0x04)
	None PendingLaunchVelocity; // 0x1f8(0x0c)
	None ReplicatedState; // 0x204(0x14)
	None RawSteeringInput; // 0x21c(0x04)
	None RawThrottleInput; // 0x220(0x04)
	None RawBrakeInput; // 0x224(0x04)
	None SteeringInput; // 0x228(0x04)
	None ThrottleInput; // 0x22c(0x04)
	None BrakeInput; // 0x230(0x04)
	None HandbrakeInput; // 0x234(0x04)
	None IdleBrakeInput; // 0x238(0x04)
	None StopThreshold; // 0x23c(0x04)
	None WrongDirectionThreshold; // 0x240(0x04)
	None ThrottleInputRate; // 0x244(0x08)
	None BrakeInputRate; // 0x24c(0x08)
	None HandbrakeInputRate; // 0x254(0x08)
	None SteeringInputRate; // 0x25c(0x08)
	None OverrideController; // 0x288(0x08)
	None FrictionScale; // 0x30(0x04)
	None TireFrictionScales; // 0x38(0x10)
	None WheeledVehicleMovementComponent; // 0x970(0x08)
	None CollisionMesh; // 0x28(0x08)
	None bDontCreateShape; // 0x30(0x01)
	None bAutoAdjustCollisionSize; // 0x31(0x01)
	None Offset; // 0x34(0x0c)
	None ShapeRadius; // 0x40(0x04)
	None ShapeWidth; // 0x44(0x04)
	None Mass; // 0x48(0x04)
	None DampingRate; // 0x4c(0x04)
	None SteerAngle; // 0x50(0x04)
	None bAffectedByHandbrake; // 0x54(0x01)
	None TireType; // 0x58(0x08)
	None TireConfig; // 0x60(0x08)
	None LatStiffMaxLoad; // 0x68(0x04)
	None LatStiffValue; // 0x6c(0x04)
	None LongStiffValue; // 0x70(0x04)
	None SuspensionForceOffset; // 0x74(0x04)
	None SuspensionMaxRaise; // 0x78(0x04)
	None SuspensionMaxDrop; // 0x7c(0x04)
	None SuspensionNaturalFrequency; // 0x80(0x04)
	None SuspensionDampingRatio; // 0x84(0x04)
	None SweepType; // 0x88(0x01)
	None MaxBrakeTorque; // 0x8c(0x04)
	None MaxHandBrakeTorque; // 0x90(0x04)
	None VehicleSim; // 0x98(0x08)
	None WheelIndex; // 0xa0(0x04)
	None DebugLongSlip; // 0xa4(0x04)
	None DebugLatSlip; // 0xa8(0x04)
	None DebugNormalizedTireLoad; // 0xac(0x04)
	None DebugWheelTorque; // 0xb4(0x04)
	None DebugLongForce; // 0xb8(0x04)
	None DebugLatForce; // 0xbc(0x04)
	None Location; // 0xc0(0x0c)
	None OldLocation; // 0xcc(0x0c)
	None Velocity; // 0xd8(0x0c)
	None Mesh; // 0x280(0x08)
	None VehicleMovement; // 0x288(0x08)
	None EngineSetup; // 0x290(0xa0)
	None DifferentialSetup; // 0x330(0x1c)
	None AckermannAccuracy; // 0x34c(0x04)
	None TransmissionSetup; // 0x350(0x30)
	None SteeringCurve; // 0x380(0x88)
	None UberGraphFrame; // 0x520(0x08)
	None MobileLayout; // 0x528(0x08)
	None ActionText; // 0x530(0x08)
	None AnonLoginButton; // 0x538(0x08)
	None AnonLoginPromptGamepad; // 0x540(0x08)
	None AnonLoginPromptMouse; // 0x548(0x08)
	None AnonLoginPromptSwitcher; // 0x550(0x08)
	None bkg; // 0x558(0x08)
	None change_user_prompt; // 0x560(0x08)
	None ConsoleLoginPrompt; // 0x568(0x08)
	None ErrorCode; // 0x570(0x08)
	None ErrorWrapper; // 0x578(0x08)
	None Gradient; // 0x580(0x08)
	None highlightborder; // 0x588(0x08)
	None hirez_logo; // 0x590(0x08)
	None Image_47; // 0x598(0x08)
	None Image_531; // 0x5a0(0x08)
	None Image_607; // 0x5a8(0x08)
	None Image_610; // 0x5b0(0x08)
	None login_prompt_wrapper; // 0x5b8(0x08)
	None LoginAsGamertagText; // 0x5c0(0x08)
	None LoginDownloadProgressBar; // 0x5c8(0x08)
	None LoginInterfaceAnonymous; // 0x5d0(0x08)
	None LoginInterfaceApple; // 0x5d8(0x08)
	None LoginInterfaceConsole; // 0x5e0(0x08)
	None LoginInterfacePC; // 0x5e8(0x08)
	None LoginInterfaceSwitcher; // 0x5f0(0x08)
	None LoginPrompt; // 0x5f8(0x08)
	None Password_Required_Msg; // 0x600(0x08)
	None PasswordError; // 0x608(0x08)
	None PasswordField; // 0x610(0x08)
	None PCCreateButton; // 0x618(0x08)
	None PCLoginButton; // 0x620(0x08)
	None PCPassword; // 0x628(0x08)
	None PCUsername; // 0x630(0x08)
	None roco_logo; // 0x638(0x08)
	None SignInWithAppleButton; // 0x640(0x08)
	None SIWA_Icon; // 0x648(0x08)
	None Username_Required_Msg; // 0x650(0x08)
	None UsernameError; // 0x658(0x08)
	None UsernameField; // 0x660(0x08)
	None VersionDisplay; // 0x668(0x08)
	None WarningIcon; // 0x670(0x08)
	None WarningText; // 0x678(0x08)
	None WBP_EpilepsyWarning; // 0x680(0x08)
	None WBP_GameNotification; // 0x688(0x08)
	None WBP_text_button_C_1; // 0x690(0x08)
	None WBP_text_button_C_2; // 0x698(0x08)
	None XboxCalloutWrapper; // 0x6a0(0x08)
	None XboxChangeUserPrompt; // 0x6a8(0x08)
	None LoginDataFac; // 0x6b0(0x08)
	None FirstLogin; // 0x6b8(0x01)
	None ProfileChangeAction; // 0x6bc(0x08)
	None HolsterLock; // 0x30(0x01)
	None Left Holster Lock; // 0x31(0x01)
	None No Prop Lock While Moving; // 0x32(0x01)
	None UberGraphFrame; // 0x238(0x08)
	None OnLevelUp_Enhanced_2; // 0x240(0x08)
	None OnLevelUp_Enhanced; // 0x248(0x08)
	None OnLevelUp_2; // 0x250(0x08)
	None OnLevelUp; // 0x258(0x08)
	None Block01; // 0x260(0x08)
	None Block02; // 0x268(0x08)
	None Block03; // 0x270(0x08)
	None Block04; // 0x278(0x08)
	None Block05; // 0x280(0x08)
	None Block06; // 0x288(0x08)
	None Block07; // 0x290(0x08)
	None Block08; // 0x298(0x08)
	None Category; // 0x2a0(0x08)
	None Flare01; // 0x2a8(0x08)
	None Flare02; // 0x2b0(0x08)
	None Flare03; // 0x2b8(0x08)
	None Flare04; // 0x2c0(0x08)
	None Flare05; // 0x2c8(0x08)
	None Flare06; // 0x2d0(0x08)
	None Glow01; // 0x2d8(0x08)
	None Glow02; // 0x2e0(0x08)
	None Glow02_2; // 0x2e8(0x08)
	None Particles01; // 0x2f0(0x08)
	None PointsEarned; // 0x2f8(0x08)
	None RankChangeText; // 0x300(0x08)
	None RogueMasteryFrame; // 0x308(0x08)
	None Scanlines01; // 0x310(0x08)
	None TextGlow01; // 0x318(0x08)
	None WBP_ProgressionTally_C_1; // 0x320(0x08)
	None XPProgressEarnedBar; // 0x328(0x08)
	None OnMercLevelUp; // 0x330(0x10)
	None PlayerProgress; // 0x340(0x170)
	None SafetyFallbackCodec; // 0x38(0x08)
	None Settings; // 0x30(0x40)
	None BlendWeight; // 0x70(0x04)
	None UberGraphFrame; // 0x520(0x08)
	None CategoryOneCount_SinglePrimary; // 0x528(0x08)
	None CategoryOneIcon_SinglePrimary; // 0x530(0x08)
	None CategoryOneName_SinglePrimary; // 0x538(0x08)
	None CategoryTwoCount_SinglePrimary; // 0x540(0x08)
	None CategoryTwoIcon_SinglePrimary; // 0x548(0x08)
	None CategoryTwoName_SinglePrimary; // 0x550(0x08)
	None GadgetSlot1; // 0x558(0x08)
	None GadgetSlot2; // 0x560(0x08)
	None MeleeSlot; // 0x568(0x08)
	None PrimarySlot; // 0x570(0x08)
	None PrimaryWeaponSwapButton; // 0x578(0x08)
	None SecondarySlot; // 0x580(0x08)
	None WBP_CallToAction; // 0x588(0x08)
	None WBP_RoguePanelHeader; // 0x590(0x08)
	None RogueDetailsWidget; // 0x598(0x08)
	None OnSelectPrimaryWeaponSwap; // 0x5a0(0x10)
	None LocalJobItem; // 0x5b0(0x08)
	None AnimationToPlay; // 0x268(0x08)
	None PermutationTimeOffset; // 0x270(0x04)
	None PlayRate; // 0x274(0x04)
	None bStateBool; // 0x278(0x01)
	None Instance; // 0x280(0x08)
	None FromComponent; // 0x268(0x08)
	None ToComponent; // 0x270(0x08)
	None BlendTime; // 0x278(0x04)
	None bBlendBool; // 0x27c(0x01)
	None BaseComponent; // 0x268(0x08)
	None AdditiveAnimation; // 0x270(0x08)
	None Alpha; // 0x278(0x04)
	None bStateBool; // 0x27c(0x01)
	None RegisteredActors; // 0x28(0x10)
	None StateProcessor; // 0xa8(0x08)
	None UsedAnimationSequences; // 0xe8(0x10)
	None StateEnum; // 0x108(0x08)
	None SharingActor; // 0x110(0x08)
	None Skeletons; // 0x28(0x10)
	None PerSkeletonData; // 0x38(0x10)
	None SkeletonSetups; // 0x28(0x10)
	None ScalabilitySettings; // 0x38(0x10)
	None AnimationStateEnum; // 0x28(0x28)
	None UberGraphFrame; // 0x578(0x08)
	None RefreshRewardList; // 0x580(0x08)
	None RefreshPreview; // 0x588(0x08)
	None diamondbg; // 0x590(0x08)
	None EnemyPlayerName; // 0x598(0x08)
	None ItemPreviewStack; // 0x5a0(0x08)
	None KillFeedImage; // 0x5a8(0x08)
	None KillFeedWrapper; // 0x5b0(0x08)
	None MasteryBadgeSwitcher; // 0x5b8(0x08)
	None MasteryIconContainer; // 0x5c0(0x08)
	None MasteryRewardsHeader; // 0x5c8(0x08)
	None PreviewPlayerName; // 0x5d0(0x08)
	None RelatedRoguesGroup; // 0x5d8(0x08)
	None RewardItemList; // 0x5e0(0x08)
	None RewardPreviewImage; // 0x5e8(0x08)
	None RewardPreviewSpecialDetails; // 0x5f0(0x08)
	None RewardPreviewSwitcher; // 0x5f8(0x08)
	None Unlock; // 0x600(0x08)
	None WBP_AsyncIcon; // 0x608(0x08)
	None WBP_Header1; // 0x610(0x08)
	None WBP_ReactiveWrapStepPreview; // 0x618(0x08)
	None WBP_WeaponCategoryMasteryBadge; // 0x620(0x08)
	None WBP_WeaponMasteryBadgeLarge; // 0x628(0x08)
	None WBP_WeaponMasteryTrack; // 0x630(0x08)
	None WeaponName; // 0x638(0x08)
	None WeaponPreviewImage; // 0x640(0x08)
	None WeaponRogueUnlockText; // 0x648(0x08)
	None WeaponTitleBox; // 0x650(0x08)
	None RewardItems; // 0x658(0x10)
	None SelectedRewardIndex; // 0x668(0x04)
	None Last Selected Reward Entry; // 0x670(0x08)
	None SignificanceManagerClassName; // 0x108(0x18)
	None MyStruct; // 0x28(0x10)
	None CurveSourceBindingName; // 0x7f0(0x08)
	None CurveSyncOffset; // 0x7f8(0x04)
	None UberGraphFrame; // 0x238(0x08)
	None Image; // 0x240(0x08)
	None Image_215; // 0x248(0x08)
	None TextBlock_116; // 0x250(0x08)
	None PerkTier; // 0x258(0x04)
	None PlayerName; // 0x80(0x08)
	None FilePath; // 0x88(0x10)
	None PrecacheFile; // 0x98(0x01)
	None MediaTexture; // 0xb0(0x08)
	None MediaPlayer; // 0xb8(0x08)
	None OnEndReached; // 0x28(0x10)
	None OnMediaClosed; // 0x38(0x10)
	None OnMediaOpened; // 0x48(0x10)
	None OnMediaOpenFailed; // 0x58(0x10)
	None OnPlaybackResumed; // 0x68(0x10)
	None OnPlaybackSuspended; // 0x78(0x10)
	None OnSeekCompleted; // 0x88(0x10)
	None OnTracksChanged; // 0x98(0x10)
	None CacheAhead; // 0xa8(0x08)
	None CacheBehind; // 0xb0(0x08)
	None CacheBehindGame; // 0xb8(0x08)
	None NativeAudioOut; // 0xc0(0x01)
	None PlayOnOpen; // 0xc1(0x01)
	None Shuffle; // 0xc4(0x01)
	None Loop; // 0xc4(0x01)
	None Playlist; // 0xc8(0x08)
	None PlaylistIndex; // 0xd0(0x04)
	None TimeDelay; // 0xd8(0x08)
	None HorizontalFieldOfView; // 0xe0(0x04)
	None VerticalFieldOfView; // 0xe4(0x04)
	None ViewRotation; // 0xe8(0x0c)
	None PlayerGuid; // 0x120(0x10)
	None Items; // 0x28(0x10)
	None Channels; // 0x6e0(0x04)
	None DynamicRateAdjustment; // 0x6e4(0x01)
	None RateAdjustmentFactor; // 0x6e8(0x04)
	None RateAdjustmentRange; // 0x6ec(0x10)
	None MediaPlayer; // 0x700(0x08)
	None AddressX; // 0xb8(0x01)
	None AddressY; // 0xb9(0x01)
	None AutoClear; // 0xba(0x01)
	None ClearColor; // 0xbc(0x10)
	None EnableGenMips; // 0xcc(0x01)
	None NumMips; // 0xcd(0x01)
	None MediaPlayer; // 0xd0(0x08)
	None MediaSource; // 0x80(0x08)
	None StreamUrl; // 0x88(0x10)
	None bUseTimeSynchronization; // 0x88(0x01)
	None FrameDelay; // 0x8c(0x04)
	None TimeDelay; // 0x90(0x08)
	None UberGraphFrame; // 0x520(0x08)
	None PlayerTitleText; // 0x528(0x08)
	None RarityBackground; // 0x530(0x08)
	None UberGraphFrame; // 0x220(0x08)
	None StaticMesh; // 0x228(0x08)
	None SkeletalMesh; // 0x230(0x08)
	None Collision; // 0x238(0x08)
	None Layers; // 0x30(0x50)
	None Tags; // 0x80(0x50)
	None LightType; // 0x220(0x01)
	None LightShape; // 0x221(0x01)
	None Dimensions; // 0x224(0x08)
	None Intensity; // 0x22c(0x04)
	None IntensityUnits; // 0x230(0x01)
	None Color; // 0x234(0x10)
	None Temperature; // 0x244(0x04)
	None IESTexture; // 0x248(0x08)
	None bUseIESBrightness; // 0x250(0x01)
	None IESBrightnessScale; // 0x254(0x04)
	None Rotation; // 0x258(0x0c)
	None SourceRadius; // 0x264(0x04)
	None SourceLength; // 0x268(0x04)
	None AttenuationRadius; // 0x26c(0x04)
	None SpotlightInnerAngle; // 0x270(0x04)
	None SpotlightOuterAngle; // 0x274(0x04)
	None LightType; // 0x30(0x01)
	None LightShape; // 0x31(0x01)
	None Dimensions; // 0x34(0x08)
	None Color; // 0x3c(0x10)
	None Intensity; // 0x4c(0x04)
	None IntensityUnits; // 0x50(0x01)
	None Temperature; // 0x54(0x04)
	None IESTexture; // 0x58(0x28)
	None bUseIESBrightness; // 0x80(0x01)
	None IESBrightnessScale; // 0x84(0x04)
	None Rotation; // 0x88(0x0c)
	None SourceRadius; // 0x94(0x04)
	None SourceLength; // 0x98(0x04)
	None AttenuationRadius; // 0x9c(0x04)
	None Generator; // 0x28(0x10)
	None Version; // 0x38(0x04)
	None Author; // 0x40(0x10)
	None License; // 0x50(0x10)
	None Source; // 0x60(0x10)
	None SourceMeshName; // 0x28(0x10)
	None bGenerateLightmapUVs; // 0x28(0x01)
	None TexturesDir; // 0x30(0x10)
	None IntermediateSerialization; // 0x40(0x01)
	None bColorizeMaterials; // 0x41(0x01)
	None bMergeNodes; // 0x48(0x01)
	None bOptimizeDuplicatedNodes; // 0x49(0x01)
	None bRemoveInvisibleNodes; // 0x4a(0x01)
	None bSimplifyNodeHierarchy; // 0x4b(0x01)
	None bImportVar; // 0x4c(0x01)
	None VarPath; // 0x50(0x10)
	None bImportPos; // 0x60(0x01)
	None PosPath; // 0x68(0x10)
	None bImportTml; // 0x78(0x01)
	None TmlPath; // 0x80(0x10)
	None bMergeNodes; // 0x48(0x01)
	None bOptimizeDuplicatedNodes; // 0x49(0x01)
	None bImportMats; // 0x4a(0x01)
	None MatsPath; // 0x50(0x10)
	None bImportVar; // 0x60(0x01)
	None bCleanVar; // 0x61(0x01)
	None VarPath; // 0x68(0x10)
	None bImportLightInfo; // 0x78(0x01)
	None LightInfoPath; // 0x80(0x10)
	None bImportClipInfo; // 0x90(0x01)
	None ClipInfoPath; // 0x98(0x10)
	None SourceGlobalId; // 0x28(0x10)
	None MetaData; // 0x28(0x50)
	None LookatTrackingSettings; // 0x30(0x30)
	None FilmbackSettings; // 0x30(0x08)
	None LensSettings; // 0x38(0x04)
	None FocusSettings; // 0x3c(0x08)
	None CurrentFocalLength; // 0x44(0x04)
	None CurrentAperture; // 0x48(0x04)
	None PostProcessSettings; // 0x50(0x40)
	None ImportedSequences; // 0x220(0x10)
	None Options; // 0x28(0x10)
	None SearchPackagePolicy; // 0x28(0x01)
	None MaterialConflictPolicy; // 0x29(0x01)
	None TextureConflictPolicy; // 0x2a(0x01)
	None StaticMeshActorImportPolicy; // 0x2b(0x01)
	None LightImportPolicy; // 0x2c(0x01)
	None CameraImportPolicy; // 0x2d(0x01)
	None OtherActorImportPolicy; // 0x2e(0x01)
	None MaterialQuality; // 0x2f(0x01)
	None BaseOptions; // 0x34(0x14)
	None ReimportOptions; // 0x48(0x02)
	None Filename; // 0x50(0x10)
	None FilePath; // 0x60(0x10)
	None LandscapeMaterial; // 0x30(0x08)
	None StaticLightingLOD; // 0x38(0x04)
	None bVisible; // 0x30(0x01)
	None CastShadows; // 0x34(0x01)
	None bUseTemperature; // 0x34(0x01)
	None bUseIESBrightness; // 0x34(0x01)
	None Intensity; // 0x38(0x04)
	None Temperature; // 0x3c(0x04)
	None IESBrightnessScale; // 0x40(0x04)
	None LightColor; // 0x44(0x10)
	None LightFunctionMaterial; // 0x58(0x08)
	None IESTexture; // 0x60(0x08)
	None ParentMaterial; // 0x30(0x28)
	None ScalarParameterValues; // 0x58(0x50)
	None VectorParameterValues; // 0xa8(0x50)
	None TextureParameterValues; // 0xf8(0x50)
	None StaticParameters; // 0x148(0x50)
	None IntensityUnits; // 0x30(0x01)
	None SourceRadius; // 0x34(0x04)
	None SourceLength; // 0x38(0x04)
	None AttenuationRadius; // 0x3c(0x04)
	None Settings; // 0x30(0x40)
	None bEnabled; // 0x70(0x01)
	None bUnbound; // 0x70(0x01)
	None Scene; // 0x220(0x08)
	None RelatedActors; // 0x228(0x50)
	None RelativeTransform; // 0x30(0x30)
	None Mobility; // 0x60(0x01)
	None AttachParent; // 0x68(0x28)
	None Tags; // 0x90(0x50)
	None SourceType; // 0x30(0x01)
	None CubemapResolution; // 0x34(0x04)
	None Cubemap; // 0x38(0x08)
	None InnerConeAngle; // 0x30(0x04)
	None OuterConeAngle; // 0x34(0x04)
	None StaticMesh; // 0x30(0x08)
	None OverrideMaterials; // 0x38(0x10)
	None SectionInfoMap; // 0x30(0x50)
	None LightMapCoordinateIndex; // 0x80(0x04)
	None LightMapResolution; // 0x84(0x04)
	None BuildSettings; // 0x88(0x10)
	None StaticMaterials; // 0x98(0x10)
	None SharedWorldData; // 0x308(0x10)
	None OnNewLocalDataFromClients; // 0x318(0x10)
	None PinSelectionConfidenceThreshold; // 0x328(0x04)
	None ChosenOne; // 0x3d0(0x08)
	None SharedWorldData; // 0x290(0x10)
	None AlignmentTransforms; // 0x2a0(0x10)
	None OnSharedWorldDataUpdated; // 0x2b0(0x10)
	None OnAlignmentTransformsUpdated; // 0x2c0(0x10)
	None UberGraphFrame; // 0x1b8(0x08)
	None DirectorClass; // 0x28(0x08)
	None VariantSets; // 0x30(0x10)
	None LevelVariantSets; // 0x220(0x18)
	None Properties; // 0x88(0x10)
	None PropertyIndices; // 0x98(0x10)
	None CapturedPropSegments; // 0xa8(0x10)
	None FullDisplayString; // 0xb8(0x10)
	None PropertySetterName; // 0xc8(0x08)
	None PropertySetterParameterDefaults; // 0xd0(0x50)
	None bHasRecordedData; // 0x120(0x01)
	None LeafPropertyClass; // 0x128(0x08)
	None ValueBytes; // 0x138(0x10)
	None PropCategory; // 0x148(0x01)
	None SceneComponent; // 0x238(0x08)
	None LastSelectedOption; // 0x240(0x04)
	None DisplayText; // 0x28(0x18)
	None ObjectBindings; // 0x58(0x10)
	None Thumbnail; // 0x68(0x08)
	None CachedActorLabel; // 0x28(0x10)
	None ObjectPtr; // 0x38(0x18)
	None LazyObjectPtr; // 0x50(0x1c)
	None CapturedProperties; // 0x70(0x10)
	None FunctionCallers; // 0x80(0x10)
	None DisplayText; // 0x28(0x18)
	None bExpanded; // 0x58(0x01)
	None Variants; // 0x60(0x10)
	None Params; // 0xe0(0x40)
	None AnimationSections; // 0x58(0x10)
	None UberGraphFrame; // 0x520(0x08)
	None OnShow; // 0x528(0x08)
	None ConfirmButton; // 0x530(0x08)
	None Image; // 0x538(0x08)
	None Image_2; // 0x540(0x08)
	None Image_3; // 0x548(0x08)
	None Image_4; // 0x550(0x08)
	None Image_156; // 0x558(0x08)
	None Image_525; // 0x560(0x08)
	None Image_947; // 0x568(0x08)
	None Image_1104; // 0x570(0x08)
	None PopupContainer; // 0x578(0x08)
	None RBIcon_2; // 0x580(0x08)
	None UberGraphFrame; // 0x520(0x08)
	None Hover; // 0x528(0x08)
	None background; // 0x530(0x08)
	None BackgroundDecro; // 0x538(0x08)
	None FavoriteHitBox; // 0x540(0x08)
	None FreeRotationIcon; // 0x548(0x08)
	None HighlightFrame; // 0x550(0x08)
	None HitTarget; // 0x558(0x08)
	None ItemIcon; // 0x560(0x08)
	None JobIcon; // 0x568(0x08)
	None LockIcon; // 0x570(0x08)
	None NameplateBG; // 0x578(0x08)
	None NameplateDecroBar; // 0x580(0x08)
	None NewRogueCalloutSwitcher; // 0x588(0x08)
	None NewTagWrapper; // 0x590(0x08)
	None RogueMasteryBadgeWrapper; // 0x598(0x08)
	None RogueName; // 0x5a0(0x08)
	None Starred; // 0x5a8(0x08)
	None Unstarred; // 0x5b0(0x08)
	None WBP_MercMasteryIcon; // 0x5b8(0x08)
	None WBP_NewTag; // 0x5c0(0x08)
	None OnClicked; // 0x5c8(0x10)
	None OnHovered; // 0x5d8(0x10)
	None OnUnhovered; // 0x5e8(0x10)
	None JobItem; // 0x5f8(0x08)
	None MainButtonHovered; // 0x600(0x01)
	None SubButtonHovered; // 0x601(0x01)
	None NeedsUnhovering; // 0x602(0x01)
	None LockedPortraitTint; // 0x608(0x28)
	None OnFavorited; // 0x630(0x10)
	None ClickJobGenButton; // 0x640(0x08)
	None HoverJobGenButton; // 0x648(0x08)
	None ClickJobGenFavoriteButton; // 0x650(0x08)
	None HoverJobGenFavoriteButton; // 0x658(0x08)
	None SubButtonHovered_1; // 0x660(0x01)
	None ImportedFilePath; // 0x28(0x10)
	None AssetGuid; // 0x38(0x10)
	None Vertices; // 0x28(0x10)
	None Normals; // 0x38(0x10)
	None Indices; // 0x48(0x10)
	None InverseMasses; // 0x58(0x10)
	None BoneData; // 0x68(0x10)
	None NumFixedVerts; // 0x78(0x04)
	None MaxBoneWeights; // 0x7c(0x04)
	None SelfCollisionIndices; // 0x80(0x10)
	None UberGraphFrame; // 0x520(0x08)
	None Hover; // 0x528(0x08)
	None ActiveIconOverlay; // 0x530(0x08)
	None BtnSelect; // 0x538(0x08)
	None Highlight; // 0x540(0x08)
	None KSAsyncImage_1; // 0x548(0x08)
	None Selected; // 0x550(0x08)
	None StatIcon; // 0x558(0x08)
	None StatName; // 0x560(0x08)
	None StatValue; // 0x568(0x08)
	None TopDivider; // 0x570(0x08)
	None OnSelected; // 0x578(0x10)
	None IsSelected; // 0x588(0x01)
	None ClickRogueStatsScreenTabEntrySFX; // 0x590(0x08)
	None HoverRogueStatsScreenTabEntrySFX_1; // 0x598(0x08)
	None PlayerStat; // 0x5a0(0x08)
	None PlayerStatObject; // 0x5a8(0x08)
	None RogueStat; // 0x5b0(0x08)
	None PhysicsAsset; // 0x48(0x08)
	None ClothConfigs; // 0x50(0x50)
	None ClothSharedSimConfig; // 0xa0(0x08)
	None ClothSimConfig; // 0xa8(0x08)
	None ChaosClothSimConfig; // 0xb0(0x08)
	None ClothLODData; // 0xb8(0x10)
	None LODData; // 0xc8(0x10)
	None LodMap; // 0xd8(0x10)
	None UsedBoneNames; // 0xe8(0x10)
	None UsedBoneIndices; // 0xf8(0x10)
	None ReferenceBoneIndex; // 0x108(0x04)
	None CustomData; // 0x110(0x08)
	None ClothConfig; // 0x118(0xd4)
	None PhysicalMeshData; // 0x28(0x08)
	None ClothPhysicalMeshData; // 0x30(0xf8)
	None CollisionData; // 0x128(0x40)
	None StepType; // 0x38(0x01)
	None BoneName; // 0x3c(0x08)
	None UberGraphFrame; // 0x520(0x08)
	None OnClick; // 0x528(0x08)
	None Highlight; // 0x530(0x08)
	None BtnBkg; // 0x538(0x08)
	None BtnBkgHover; // 0x540(0x08)
	None BtnBkgRedButton; // 0x548(0x08)
	None BtnClickImage; // 0x550(0x08)
	None BtnEdge; // 0x558(0x08)
	None BtnEdgeHover; // 0x560(0x08)
	None BtnFrame; // 0x568(0x08)
	None BtnFrameHover; // 0x570(0x08)
	None BtnStandardWrapper; // 0x578(0x08)
	None ButtonText; // 0x580(0x08)
	None HitTarget; // 0x588(0x08)
	None HoverWrapper; // 0x590(0x08)
	None KeyPrompt; // 0x598(0x08)
	None KeyPromptContainer; // 0x5a0(0x08)
	None NamedSlot_66; // 0x5a8(0x08)
	None SizeWrapper; // 0x5b0(0x08)
	None OnClicked; // 0x5b8(0x10)
	None OnHovered; // 0x5c8(0x10)
	None OnUnhovered; // 0x5d8(0x10)
	None ClickLrgBtnSFX; // 0x5e8(0x08)
	None DefaultButtonText; // 0x5f0(0x18)
	None DefaultWidth; // 0x608(0x04)
	None ShowPromptOnFocus; // 0x60c(0x01)
	None PromptKey; // 0x610(0x18)
	None IsRedButton; // 0x628(0x01)
	None IsConfirm; // 0x629(0x01)
	None IsCancel; // 0x62a(0x01)
	None DefaultHeight; // 0x62c(0x04)
	None HoverLrgBtnSFX; // 0x630(0x08)
	None EFontStyle; // 0x638(0x01)
	None IsDisabled; // 0x639(0x01)
	None MassMode; // 0x28(0x01)
	None UniformMass; // 0x2c(0x04)
	None TotalMass; // 0x30(0x04)
	None Density; // 0x34(0x04)
	None MinPerParticleMass; // 0x38(0x04)
	None EdgeStiffness; // 0x3c(0x04)
	None BendingStiffness; // 0x40(0x04)
	None AreaStiffness; // 0x44(0x04)
	None VolumeStiffness; // 0x48(0x04)
	None StrainLimitingStiffness; // 0x4c(0x04)
	None LimitScale; // 0x50(0x04)
	None bUseGeodesicDistance; // 0x54(0x01)
	None ShapeTargetStiffness; // 0x58(0x04)
	None CollisionThickness; // 0x5c(0x04)
	None FrictionCoefficient; // 0x60(0x04)
	None DampingCoefficient; // 0x64(0x04)
	None DragCoefficient; // 0x68(0x04)
	None AnimDriveSpringStiffness; // 0x6c(0x04)
	None bUseBendingElements; // 0x70(0x01)
	None bUseTetrahedralConstraints; // 0x71(0x01)
	None bUseThinShellVolumeConstraints; // 0x72(0x01)
	None bUseSelfCollisions; // 0x73(0x01)
	None bUseContinuousCollisionDetection; // 0x74(0x01)
	None LinearVelocityScale; // 0x78(0x0c)
	None AngularVelocityScale; // 0x84(0x04)
	None IterationCount; // 0x28(0x04)
	None SubdivisionCount; // 0x2c(0x04)
	None SelfCollisionThickness; // 0x30(0x04)
	None CollisionThickness; // 0x34(0x04)
	None bUseDampingOverride; // 0x38(0x01)
	None Damping; // 0x3c(0x04)
	None bUseGravityOverride; // 0x40(0x01)
	None GravityScale; // 0x44(0x04)
	None Gravity; // 0x48(0x0c)
	None bUseLocalSpaceSimulation; // 0x54(0x01)
	None bUseXPBDConstraints; // 0x55(0x01)
	None UberGraphFrame; // 0x238(0x08)
	None background; // 0x240(0x08)
	None ChallengeDescription; // 0x248(0x08)
	None ChallengeProgressText; // 0x250(0x08)
	None CompletedText; // 0x258(0x08)
	None HeaderBG; // 0x260(0x08)
	None ProgressBar; // 0x268(0x08)
	None ProgressTextSwitcher; // 0x270(0x08)
	None RewardBadge_EXAMPLE; // 0x278(0x08)
	None RewardBadge_EXAMPLE_01; // 0x280(0x08)
	None RewardsContainer; // 0x288(0x08)
	None TimeRemainingWrapper; // 0x290(0x08)
	None IsComplete; // 0x298(0x01)
	None GeometryCollection; // 0x28(0x08)
	None OriginalGeometryCollection; // 0x30(0x08)
	None GeometryCollectionLODIndex; // 0x38(0x04)
	None Adapters; // 0x3b8(0x10)
	None TextureCoordinateCount; // 0x3d0(0x04)
	None PendingCompactCounter; // 0x51c(0x04)
	None SubdivisionCount; // 0x520(0x04)
	None StaticMesh; // 0x28(0x08)
	None OriginalStaticMesh; // 0x30(0x08)
	None StaticMeshLODIndex; // 0x38(0x04)
	None ChaosSolverActorSet; // 0x30(0x50)
	None DataSourceType; // 0x80(0x01)
	None DataProcessFrequency; // 0x84(0x04)
	None MaxNumberOfDataEntriesToSpawn; // 0x88(0x04)
	None DoSpawn; // 0x8c(0x01)
	None SpawnMultiplierMinMax; // 0x90(0x08)
	None SpawnChance; // 0x98(0x04)
	None ImpulseToSpawnMinMax; // 0x9c(0x08)
	None SpeedToSpawnMinMax; // 0xa4(0x08)
	None MassToSpawnMinMax; // 0xac(0x08)
	None ExtentMinToSpawnMinMax; // 0xb4(0x08)
	None ExtentMaxToSpawnMinMax; // 0xbc(0x08)
	None VolumeToSpawnMinMax; // 0xc4(0x08)
	None SolverTimeToSpawnMinMax; // 0xcc(0x08)
	None SurfaceTypeToSpawn; // 0xd4(0x04)
	None LocationFilteringMode; // 0xd8(0x01)
	None LocationXToSpawn; // 0xd9(0x01)
	None LocationXToSpawnMinMax; // 0xdc(0x08)
	None LocationYToSpawn; // 0xe4(0x01)
	None LocationYToSpawnMinMax; // 0xe8(0x08)
	None LocationZToSpawn; // 0xf0(0x01)
	None LocationZToSpawnMinMax; // 0xf4(0x08)
	None DataSortingType; // 0xfc(0x01)
	None bGetExternalCollisionData; // 0xfd(0x01)
	None DoSpatialHash; // 0xfe(0x01)
	None SpatialHashVolumeMin; // 0x100(0x0c)
	None SpatialHashVolumeMax; // 0x10c(0x0c)
	None SpatialHashVolumeCellSize; // 0x118(0x0c)
	None MaxDataPerCell; // 0x124(0x04)
	None bApplyMaterialsFilter; // 0x128(0x01)
	None ChaosBreakingMaterialSet; // 0x130(0x50)
	None bGetExternalBreakingData; // 0x180(0x01)
	None bGetExternalTrailingData; // 0x181(0x01)
	None RandomPositionMagnitudeMinMax; // 0x184(0x08)
	None InheritedVelocityMultiplier; // 0x18c(0x04)
	None RandomVelocityGenerationType; // 0x190(0x01)
	None RandomVelocityMagnitudeMinMax; // 0x194(0x08)
	None SpreadAngleMax; // 0x19c(0x04)
	None VelocityOffsetMin; // 0x1a0(0x0c)
	None VelocityOffsetMax; // 0x1ac(0x0c)
	None FinalVelocityMagnitudeMinMax; // 0x1b8(0x08)
	None MaxLatency; // 0x1c0(0x04)
	None DebugType; // 0x1c4(0x01)
	None LastSpawnedPointID; // 0x1c8(0x04)
	None LastSpawnTime; // 0x1cc(0x04)
	None SolverTime; // 0x1e0(0x04)
	None TimeStampOfLastProcessedData; // 0x1e4(0x04)
	None MobileLayout; // 0x520(0x08)
	None FooterBG; // 0x528(0x08)
	None FooterBG_2; // 0x530(0x08)
	None FrameRateOverride; // 0x88(0x08)
	None ProxyOverride; // 0x90(0x10)
	None SequencePath; // 0xa0(0x10)
	None UberGraphFrame; // 0x260(0x08)
	None BarImage; // 0x268(0x08)
	None BarColor; // 0x270(0x10)
	None DefaultFrameRate; // 0x28(0x08)
	None CacheBehindPercentage; // 0x30(0x04)
	None CacheSizeGB; // 0x34(0x04)
	None CacheThreads; // 0x38(0x04)
	None CacheThreadStackSizeKB; // 0x3c(0x04)
	None GlobalCacheSizeGB; // 0x40(0x04)
	None UseGlobalCache; // 0x44(0x01)
	None ExrDecoderThreads; // 0x48(0x04)
	None DefaultProxy; // 0x50(0x10)
	None UseDefaultProxy; // 0x60(0x01)
	None UberGraphFrame; // 0x238(0x08)
	None BatteryImage; // 0x240(0x08)
	None BottomReticle_B; // 0x248(0x08)
	None BottomReticle_M; // 0x250(0x08)
	None BottomReticle_T; // 0x258(0x08)
	None HR_LeftReticle_L; // 0x260(0x08)
	None HR_RightReticle_R; // 0x268(0x08)
	None Image_74; // 0x270(0x08)
	None InvalidationBox_1; // 0x278(0x08)
	None LeftReticle_L; // 0x280(0x08)
	None MiddleReticle; // 0x288(0x08)
	None Reticle_Brackets; // 0x290(0x08)
	None ReticleBorder_Bottom; // 0x298(0x08)
	None ReticleBorder_Left; // 0x2a0(0x08)
	None ReticleBorder_Right; // 0x2a8(0x08)
	None ReticleBorder_Top; // 0x2b0(0x08)
	None RightReticle_R; // 0x2b8(0x08)
	None TopReticle; // 0x2c0(0x08)
	None VR_BottomReticle_B; // 0x2c8(0x08)
	None VR_BottomReticle_M; // 0x2d0(0x08)
	None VR_BottomReticle_T; // 0x2d8(0x08)
	None VR_TopReticle; // 0x2e0(0x08)
	None WBP_InWorld_ReticleComponents; // 0x2e8(0x08)
	None ZoomImage; // 0x2f0(0x08)
	None ReticleImages; // 0x2f8(0x10)
	None ModInstances; // 0x308(0x10)
	None MediaSource; // 0xe0(0x08)
	None bLoop; // 0xe8(0x01)
	None MediaSource; // 0xe0(0x08)
	None bLooping; // 0xe8(0x01)
	None StartFrameOffset; // 0xec(0x04)
	None MediaTexture; // 0xf0(0x08)
	None MediaSoundComponent; // 0xf8(0x08)
	None bUseExternalMediaPlayer; // 0x100(0x01)
	None ExternalMediaPlayer; // 0x108(0x08)
	None MediaSections; // 0x58(0x10)
	None UberGraphFrame; // 0x238(0x08)
	None GlowPulse; // 0x240(0x08)
	None BGGradient; // 0x248(0x08)
	None BonusIcon; // 0x250(0x08)
	None BoostDescriptionContainer; // 0x258(0x08)
	None BoosterIconSize; // 0x260(0x08)
	None BoosterShine; // 0x268(0x08)
	None DescRichText; // 0x270(0x08)
	None EventName; // 0x278(0x08)
	None EventTimeRemaining; // 0x280(0x08)
	None TimeRemainingIcon; // 0x288(0x08)
	None TimeRemainingIconWrapper; // 0x290(0x08)
	None isCompactView; // 0x298(0x01)
	None UberGraphFrame; // 0x520(0x08)
	None RewardGrid; // 0x528(0x08)
	None WBP_LoginRewardItem_C_1; // 0x530(0x08)
	None WBP_LoginRewardItem_C_2; // 0x538(0x08)
	None WBP_LoginRewardItem_C_3; // 0x540(0x08)
	None WBP_LoginRewardItem_C_4; // 0x548(0x08)
	None WBP_LoginRewardItem_C_5; // 0x550(0x08)
	None WBP_LoginRewardItem_C_6; // 0x558(0x08)
	None WBP_LoginRewardItem_C_7; // 0x560(0x08)
	None WBP_LoginRewardItem_C_8; // 0x568(0x08)
	None WBP_LoginRewardItem_C_9; // 0x570(0x08)
	None WBP_LoginRewardItem_C_10; // 0x578(0x08)
	None WBP_LoginRewardItem_C_11; // 0x580(0x08)
	None WBP_LoginRewardItem_C_12; // 0x588(0x08)
	None WBP_LoginRewardItem_C_13; // 0x590(0x08)
	None WBP_LoginRewardItem_C_14; // 0x598(0x08)
	None MaxPerRow; // 0x5a0(0x04)
	None OnClaimRewardAnimComplete; // 0x5a8(0x10)
	None LoginRewardItems; // 0x5b8(0x10)
	None OnRewardItemsPopulated; // 0x5c8(0x10)
	None OnRewardHovered; // 0x5d8(0x10)
	None OnRewardUnhovered; // 0x5e8(0x10)
	None OnRewardClicked; // 0x5f8(0x10)
	None AllowNonStandardCodecs; // 0x28(0x01)
	None LowLatency; // 0x29(0x01)
	None NativeAudioOut; // 0x2a(0x01)
	None HardwareAcceleratedVideoDecoding; // 0x2b(0x01)
	None UberGraphFrame; // 0x520(0x08)
	None ClaimAnim; // 0x528(0x08)
	None BorderGlow; // 0x530(0x08)
	None ClaimedBottomDecro; // 0x538(0x08)
	None ClaimedBottomDecro_2; // 0x540(0x08)
	None ClaimedCheckmarkEpic; // 0x548(0x08)
	None ClaimedCheckmarkLegendary; // 0x550(0x08)
	None ClaimedCheckmarkRare; // 0x558(0x08)
	None ClaimedCheckmarkSwitcher; // 0x560(0x08)
	None ClaimedCheckmarkUncommon; // 0x568(0x08)
	None ClaimedDimmer; // 0x570(0x08)
	None ClaimedOverlay; // 0x578(0x08)
	None CurrentReward; // 0x580(0x08)
	None EdgeFlareLeft; // 0x588(0x08)
	None EdgeFlareRight; // 0x590(0x08)
	None EffectContainer; // 0x598(0x08)
	None Gradient; // 0x5a0(0x08)
	None HitTarget; // 0x5a8(0x08)
	None IconOverlayGlow; // 0x5b0(0x08)
	None RewardLabel; // 0x5b8(0x08)
	None RewardLabelText; // 0x5c0(0x08)
	None RewardStroke; // 0x5c8(0x08)
	None SelectedGlow; // 0x5d0(0x08)
	None UnclaimedDimmer; // 0x5d8(0x08)
	None UnclaimedOverlay; // 0x5e0(0x08)
	None WBP_KSCosmeticItemDisplay; // 0x5e8(0x08)
	None ClaimAnimationComplete; // 0x5f0(0x10)
	None RewardItem; // 0x600(0x10)
	None AnimationCompleteDelay; // 0x610(0x04)
	None CustomRarity; // 0x618(0x50)
	None AllowToClaim; // 0x668(0x01)
	None OnRewardHovered; // 0x670(0x10)
	None OnRewardUnhovered; // 0x680(0x10)
	None AKHoverRewardListEntry; // 0x690(0x08)
	None OnRewardClicked; // 0x698(0x10)
	None CustomRarityTag; // 0x6a8(0x20)
	None EnableTransport; // 0x28(0x01)
	None bAutoRepair; // 0x29(0x01)
	None bStopServiceWhenAppDeactivates; // 0x2a(0x01)
	None UnicastEndpoint; // 0x30(0x10)
	None MulticastEndpoint; // 0x40(0x10)
	None MessageFormat; // 0x50(0x01)
	None MulticastTimeToLive; // 0x51(0x01)
	None StaticEndpoints; // 0x58(0x10)
	None EnableTunnel; // 0x68(0x01)
	None TunnelUnicastEndpoint; // 0x70(0x10)
	None TunnelMulticastEndpoint; // 0x80(0x10)
	None RemoteTunnelEndpoints; // 0x90(0x10)
	None MovieScene; // 0x348(0x08)
	None ObjectReferences; // 0x350(0x20)
	None PlaybackSettings; // 0xb0(0x14)
	None Sequence; // 0xc8(0x08)
	None SequencePlayer; // 0xd0(0x08)
	None LeftHand Disable; // 0x30(0x01)
	None RightHand Disable; // 0x31(0x01)
	None Left Hand IK Blend Speed; // 0x32(0x01)
	None Right Hand IK Blend Speed; // 0x33(0x01)
	None UberGraphFrame; // 0x520(0x08)
	None ActionLog; // 0x528(0x08)
	None Blocker; // 0x530(0x08)
	None ContextMenu; // 0x538(0x08)
	None GameName; // 0x540(0x08)
	None Image; // 0x548(0x08)
	None Image_2; // 0x550(0x08)
	None Image_112; // 0x558(0x08)
	None Image_379; // 0x560(0x08)
	None Image_498; // 0x568(0x08)
	None JoiningButton; // 0x570(0x08)
	None Loading; // 0x578(0x08)
	None LoadingState; // 0x580(0x08)
	None LoadingWrapper; // 0x588(0x08)
	None LobbyState; // 0x590(0x08)
	None LobbySwitcher; // 0x598(0x08)
	None SpectateButton; // 0x5a0(0x08)
	None Spectator; // 0x5a8(0x08)
	None SpectatorContainer; // 0x5b0(0x08)
	None StartButton; // 0x5b8(0x08)
	None StartGameSwitcher; // 0x5c0(0x08)
	None TeamA; // 0x5c8(0x08)
	None TeamB; // 0x5d0(0x08)
	None Title; // 0x5d8(0x08)
	None VoiceActivity; // 0x5e0(0x08)
	None WarningIcon; // 0x5e8(0x08)
	None WarningMessage; // 0x5f0(0x08)
	None WarningWrapper; // 0x5f8(0x08)
	None WBP_GameModeInfoPanel_Lobby; // 0x600(0x08)
	None TeamDataMap; // 0x608(0x50)
	None DataChangeTimer; // 0x658(0x08)
	None FmtAdded; // 0x660(0x18)
	None FmtRemoved; // 0x678(0x18)
	None FmtPromoted; // 0x690(0x18)
	None FmtDemoted; // 0x6a8(0x18)
	None FmtInvited; // 0x6c0(0x18)
	None FmtMovedTeam; // 0x6d8(0x18)
	None PendingLogs; // 0x6f0(0x50)
	None FmtLobbyCreated; // 0x740(0x18)
	None TEMP_Invites; // 0x758(0x10)
	None FmtGameName; // 0x768(0x18)
	None ShowCustomGameLobbySFX; // 0x780(0x08)
	None FocusGroup_TeamsAndButtons; // 0x788(0x04)
	None FocusGroup_ContextMenu; // 0x78c(0x04)
	None MembersPopulated; // 0x790(0x01)
	None MaxSpectators; // 0x794(0x04)
	None UberGraphFrame; // 0x238(0x08)
	None Decro; // 0x240(0x08)
	None Text; // 0x248(0x08)
	None TextValue; // 0x250(0x18)
	None MovieScene; // 0x348(0x08)
	None BoundActorClass; // 0x350(0x28)
	None BoundPreviewActor; // 0x378(0x28)
	None BoundActorComponents; // 0x3a0(0x50)
	None PlaybackSettings; // 0x228(0x14)
	None SequencePlayer; // 0x240(0x08)
	None TemplateSequence; // 0x248(0x18)
	None BindingOverride; // 0x260(0x0c)
	None OnSuccess; // 0x30(0x10)
	None OnFailure; // 0x40(0x10)
	None ConversionResult; // 0x60(0x20)
	None UberGraphFrame; // 0x238(0x08)
	None ActionText; // 0x240(0x08)
	None ButtonIcon; // 0x248(0x08)
	None Data; // 0x250(0x30)
	None IsSet; // 0x280(0x01)
	None JitterLatencyFrames; // 0x6e0(0x04)
	None CableComponent; // 0x220(0x08)
	None bUpdateOnlyIfRendered; // 0x458(0x01)
	None bAttachStart; // 0x459(0x01)
	None bAttachEnd; // 0x45a(0x01)
	None AttachEndTo; // 0x460(0x28)
	None AttachEndToSocketName; // 0x488(0x08)
	None EndLocation; // 0x490(0x0c)
	None CableLength; // 0x49c(0x04)
	None NumSegments; // 0x4a0(0x04)
	None SubstepTime; // 0x4a4(0x04)
	None SolverIterations; // 0x4a8(0x04)
	None bEnableStiffness; // 0x4ac(0x01)
	None bEnableCollision; // 0x4ad(0x01)
	None CollisionFriction; // 0x4b0(0x04)
	None CableForce; // 0x4b4(0x0c)
	None CableGravityScale; // 0x4c0(0x04)
	None CableWidth; // 0x4c4(0x04)
	None NumSides; // 0x4c8(0x04)
	None TileMaterial; // 0x4cc(0x04)
	None UberGraphFrame; // 0x1c0(0x08)
	None Previous ammo in clip; // 0x1c8(0x04)
	None Settings; // 0x28(0x08)
	None AmbisonicsOrder; // 0x28(0x04)
	None Presets; // 0x28(0x10)
	None VoiceCount; // 0x6e0(0x04)
	None Settings; // 0x70(0x08)
	None Settings; // 0x80(0x18)
	None Settings; // 0x90(0x28)
	None OnEnvelopeFollowerUpdate; // 0xb0(0x10)
	None Settings; // 0x74(0x0c)
	None Settings; // 0x78(0x10)
	None Settings; // 0x74(0x0c)
	None Settings; // 0x74(0x0c)
	None Settings; // 0x74(0x0c)
	None Settings; // 0x70(0x08)
	None Settings; // 0x78(0x10)
	None Settings; // 0x7c(0x14)
	None Settings; // 0x80(0x18)
	None Settings; // 0x7c(0x14)
	None Settings; // 0x70(0x08)
	None ImpulseResponse; // 0x28(0x10)
	None NumChannels; // 0x38(0x04)
	None SampleRate; // 0x3c(0x04)
	None NormalizationVolumeDb; // 0x40(0x04)
	None IRData; // 0x48(0x10)
	None Settings; // 0x40(0x20)
	None ImpulseResponse; // 0x60(0x08)
	None BlockSize; // 0x68(0x01)
	None bEnableHardwareAcceleration; // 0x69(0x01)
	None Settings; // 0x74(0x0c)
	None DynamicSettings; // 0x80(0x0c)
	None Settings; // 0x74(0x0c)
	None Settings; // 0x78(0x10)
	None Settings; // 0x80(0x18)
	None ValueX; // 0x110(0x04)
	None ValueY; // 0x114(0x04)
	None ValueXDelegate; // 0x118(0x10)
	None ValueYDelegate; // 0x128(0x10)
	None WidgetStyle; // 0x138(0x2b8)
	None SliderHandleColor; // 0x3f0(0x10)
	None IndentHandle; // 0x400(0x01)
	None Locked; // 0x401(0x01)
	None StepSize; // 0x404(0x04)
	None IsFocusable; // 0x408(0x01)
	None OnMouseCaptureBegin; // 0x410(0x10)
	None OnMouseCaptureEnd; // 0x420(0x10)
	None OnControllerCaptureBegin; // 0x430(0x10)
	None OnControllerCaptureEnd; // 0x440(0x10)
	None OnValueChangedX; // 0x450(0x10)
	None OnValueChangedY; // 0x460(0x10)
	None GranulatedSoundWave; // 0x6e0(0x08)
	None PresetName; // 0x28(0x10)
	None bLockKeyframesToGridBool; // 0x38(0x01)
	None LockKeyframesToGrid; // 0x3c(0x04)
	None WaveTableResolution; // 0x40(0x04)
	None WaveTable; // 0x48(0x10)
	None bNormalizeWaveTables; // 0x58(0x01)
	None OnTableAltered; // 0x6e0(0x10)
	None OnNumTablesChanged; // 0x6f0(0x10)
	None CurrentPreset; // 0x700(0x08)
	None SoundWave; // 0x6e0(0x08)
	None OnSampleLoaded; // 0x6e8(0x10)
	None OnSamplePlaybackProgress; // 0x6f8(0x10)
	None Value; // 0x110(0x04)
	None StepSize; // 0x114(0x04)
	None MouseSpeed; // 0x118(0x04)
	None MouseFineTuneSpeed; // 0x11c(0x04)
	None ShowTooltipInfo; // 0x120(0x01)
	None ParameterName; // 0x128(0x18)
	None ParameterUnits; // 0x140(0x18)
	None ValueDelegate; // 0x158(0x10)
	None WidgetStyle; // 0x168(0x238)
	None Locked; // 0x3a0(0x01)
	None IsFocusable; // 0x3a1(0x01)
	None OnMouseCaptureBegin; // 0x3a8(0x10)
	None OnMouseCaptureEnd; // 0x3b8(0x10)
	None OnControllerCaptureBegin; // 0x3c8(0x10)
	None OnControllerCaptureEnd; // 0x3d8(0x10)
	None OnValueChanged; // 0x3e8(0x10)
	None UberGraphFrame; // 0x270(0x08)
	None AnimGraphNode_Root; // 0x278(0x40)
	None AnimGraphNode_Slot; // 0x2b8(0x58)
	None AnimGraphNode_TransitionResult_4; // 0x310(0x38)
	None AnimGraphNode_TransitionResult_3; // 0x348(0x38)
	None AnimGraphNode_TransitionResult_2; // 0x380(0x38)
	None AnimGraphNode_TransitionResult; // 0x3b8(0x38)
	None AnimGraphNode_SequencePlayer_4; // 0x3f0(0x88)
	None AnimGraphNode_StateResult_4; // 0x478(0x40)
	None AnimGraphNode_SequencePlayer_3; // 0x4b8(0x88)
	None AnimGraphNode_StateResult_3; // 0x540(0x40)
	None AnimGraphNode_SequencePlayer_2; // 0x580(0x88)
	None AnimGraphNode_StateResult_2; // 0x608(0x40)
	None AnimGraphNode_SequencePlayer; // 0x648(0x88)
	None AnimGraphNode_StateResult; // 0x6d0(0x40)
	None AnimGraphNode_StateMachine; // 0x710(0xc0)
	None BombDisarming; // 0x7d0(0x01)
	None BombPlanted; // 0x7d1(0x01)
	None NewVar_1; // 0x7d2(0x01)
	None UberGraphFrame; // 0x520(0x08)
	None BackGradient; // 0x528(0x08)
	None BattlePassSeasonName; // 0x530(0x08)
	None Fill; // 0x538(0x08)
	None FillStandard; // 0x540(0x08)
	None Glow; // 0x548(0x08)
	None Glow_2; // 0x550(0x08)
	None TimeRemainingGroup; // 0x558(0x08)
	None TimeRemainingText; // 0x560(0x08)
	None TypeSwitcher; // 0x568(0x08)
	None WBP_BattlePassEmblem; // 0x570(0x08)
	None XPGainLabel; // 0x578(0x08)
	None HasPremium; // 0x580(0x01)
	None PooledAkComponentClass; // 0xd8(0x08)
	None UnusedComponentsArray; // 0xe0(0x10)
	None UsedComponentsSet; // 0xf0(0x50)
	None PeekedAkComponent; // 0x140(0x08)
	None ApparelCollectionName; // 0x98(0x18)
	None ApparelCollectionDescription; // 0xb0(0x18)
	None AttachmentCollectionName; // 0x98(0x18)
	None AttachmentCollectionDescription; // 0xb0(0x18)
	None LUT; // 0x28(0x50)
	None OctreeSampleMap; // 0x78(0x10)
	None OctreeLocations; // 0x88(0x10)
	None LUT; // 0xb0(0x08)
	None CurrentEnvironmentTag; // 0xb0(0x08)
	None StartingEnvironment; // 0xb8(0x08)
	None LastTrackerComponent; // 0xc0(0x08)
	None EnvironmentVolumes; // 0xb0(0x10)
	None CachedEnvironmentCounts; // 0xc0(0x50)
	None CachedCurrentEnvironment; // 0x110(0x08)
	None LastEnvironment; // 0x118(0x08)
	None DefaultEnvironment; // 0x120(0x08)
	None OnEnvironmentChanged; // 0x128(0x10)
	None EnvironmentTag; // 0x260(0x08)
	None PreviewActorOwner; // 0xb0(0x08)
	None CurrentJob; // 0xb8(0x08)
	None OverrideSkin; // 0xc0(0x08)
	None SkinMap; // 0xc8(0x50)
	None bBoundToLoadoutFactory; // 0x118(0x01)
	None LastLoadoutId; // 0x11c(0x04)
	None FailSafeFavoriteJob; // 0x120(0x28)
	None IconImage; // 0x28(0x18)
	None LegacyIconTexture; // 0x40(0x28)
	None CollectionName; // 0x98(0x18)
	None CollectionDescription; // 0xb0(0x18)
	None JobRoleDisplayName; // 0x30(0x18)
	None JobRoleName; // 0x48(0x08)
	None JobRoleDescription; // 0x50(0x18)
	None JobRoleSortOrder; // 0x68(0x04)
	None JobRoleIcon; // 0x70(0x08)
	None MinAmplitude; // 0x28(0x04)
	None MaxAmplitude; // 0x2c(0x04)
	None MinDuration; // 0x30(0x04)
	None MaxDuration; // 0x34(0x04)
	None MaxOffsetFromVertical; // 0x38(0x04)
	None AccoladeDisplayInfo; // 0x38(0x68)
	None StoreItem; // 0x28(0x08)
	None Quantity; // 0x30(0x04)
	None AssociatedWeapon; // 0x38(0x08)
	None LoadoutTypeId; // 0x28(0x04)
	None LoadoutSlotTypeId; // 0x2c(0x04)
	None LoadoutSlotPosition; // 0x30(0x04)
	None JobToEquipTo; // 0x38(0x08)
	None WeaponToEquipTo; // 0x40(0x08)
	None ItemToEquip; // 0x48(0x08)
	None AcquisitionType; // 0x28(0x01)
	None AcquisitionItems; // 0x30(0x10)
	None DisplayedJob; // 0x40(0x08)
	None OnAcquisitionReady; // 0x58(0x10)
	None QueuedAcquisitions; // 0x78(0x10)
	None PendingAcquisition; // 0x88(0x08)
	None PendingEquipables; // 0x90(0x10)
	None ItemDescriptionSingular; // 0x1b8(0x18)
	None ProgressLootId; // 0x1d0(0x08)
	None RemoveProgressLootId; // 0x1d8(0x08)
	None SetProgressLootId; // 0x1e0(0x08)
	None ResetProgressLootId; // 0x1e8(0x08)
	None SpecialLootId; // 0x1f0(0x08)
	None RewardVendorId; // 0x1f8(0x08)
	None RewardXpTableId; // 0x200(0x08)
	None SortOrder; // 0x208(0x08)
	None EntitlementItemIds; // 0x210(0x10)
	None TrackerClass; // 0x220(0x28)
	None ProgressInterval; // 0x248(0x04)
	None MaxProgressPerMatch; // 0x24c(0x04)
	None bAllowMultipleProgressFromTriggerEvent; // 0x250(0x01)
	None bResetAccumulationAfterTriggerEvent; // 0x251(0x01)
	None bResetAccumulationAfterProgressIncrease; // 0x252(0x01)
	None bIsClientAuthority; // 0x253(0x01)
	None bCreateTrackerIfFinished; // 0x254(0x01)
	None bCreateInstanceIfInvalid; // 0x255(0x01)
	None bAlwaysPackageActivityIfCreated; // 0x256(0x01)
	None bCanPackageActivityWithoutTracker; // 0x257(0x01)
	None bAllowLastTierToRepeat; // 0x258(0x01)
	None ProgressDisplayPreference; // 0x259(0x01)
	None ClientNotifyFrequency; // 0x25a(0x01)
	None ActivityTierData; // 0x260(0x10)
	None bShowInPostMatchLobby; // 0x270(0x01)
	None bDisableAfterJobChange; // 0x271(0x01)
	None bIsOwnableItem; // 0x272(0x01)
	None bShouldDisplay; // 0x273(0x01)
	None bDuplicateProgressToSpecialLootId; // 0x274(0x01)
	None ActivityComponents; // 0x278(0x10)
	None ActivityRequirements; // 0x288(0x10)
	None ActivityRewardConditions; // 0x298(0x10)
	None ActivityBehaviors; // 0x2a8(0x10)
	None ActivityTypes; // 0x2b8(0x10)
	None bDevCookOnly; // 0x2c8(0x01)
	None PlayerController; // 0x28(0x08)
	None WeakActivityInstance; // 0x30(0x08)
	None AchievementIdByOSSName; // 0x30(0x50)
	None SeasonTag; // 0x30(0x08)
	None SeasonalChallengesDescription; // 0x38(0x18)
	None PremiumPassItemId; // 0x50(0x08)
	None PremiumRewardVendorId; // 0x58(0x08)
	None LevelPurchaseLootTableId; // 0x60(0x08)
	None LevelPurchaseLootId; // 0x68(0x08)
	None InstantUnlockRewardVendorId; // 0x70(0x08)
	None FreeIcon; // 0x78(0x28)
	None PremiumIcon; // 0xa0(0x28)
	None DailyChallenge; // 0x30(0x01)
	None JobItem; // 0x30(0x28)
	None MercMasteryStatTag; // 0x30(0x08)
	None Icon; // 0x38(0x28)
	None DisplayName; // 0x60(0x18)
	None MilestoneTier; // 0x30(0x04)
	None OnProgressIncremented; // 0x28(0x10)
	None OnProgressTierReached; // 0x38(0x10)
	None OnProgressCompleted; // 0x48(0x10)
	None OnProgressInitialized; // 0x58(0x10)
	None TrackerInstance; // 0x68(0x08)
	None BehaviorInstances; // 0x70(0x10)
	None ProgressCount; // 0x80(0x04)
	None HasProgressBeenInitialized; // 0x84(0x01)
	None ActivityTiers; // 0x88(0x10)
	None PlayerController; // 0xb8(0x08)
	None Activity; // 0xc0(0x08)
	None ActivityManager; // 0xc8(0x08)
	None bIsInitialized; // 0xd0(0x01)
	None InitialProgress; // 0xd4(0x04)
	None InitialUnlocked; // 0xd8(0x01)
	None CurrentProgressEarned; // 0xdc(0x04)
	None TotalProgressEarned; // 0xe0(0x04)
	None ShouldSetProgress; // 0xe4(0x01)
	None PlatformProgressPerAchievement; // 0xe8(0x50)
	None TotalProgressEarnedBySource; // 0x138(0x50)
	None TotalProgressEarnedByEvent; // 0x188(0x50)
	None TotalProgressEarnedByBooster; // 0x1d8(0x50)
	None ExtraData; // 0x228(0x50)
	None GameInstance; // 0x28(0x08)
	None GameMode; // 0x30(0x08)
	None ActivityInstancesPerPlayer; // 0xd8(0x50)
	None VendorsLoadGroupId; // 0x178(0x04)
	None Activities; // 0x180(0x10)
	None PlayerControllers; // 0x190(0x10)
	None SetupPhase; // 0x1f0(0x01)
	None RequireEnabled; // 0x30(0x01)
	None SelectedStatusItemIds; // 0x30(0x10)
	None RequireEnabled; // 0x30(0x01)
	None bRequireEnabled; // 0x30(0x01)
	None RequiredActiveBoosterId; // 0x30(0x04)
	None RequireEnabled; // 0x30(0x01)
	None RequiredEventName; // 0x30(0x10)
	None ExperimentName; // 0x30(0x10)
	None RequireEnabled; // 0x40(0x01)
	None RequiredGameMode; // 0x30(0x10)
	None RequiredGameModeTag; // 0x30(0x08)
	None TrueIfMatches; // 0x38(0x01)
	None RequiredOwnedItemId; // 0x30(0x04)
	None RequiredItemQuantity; // 0x34(0x04)
	None RequiredJob; // 0x30(0x28)
	None RequiredJobTag; // 0x30(0x08)
	None RequiredMap; // 0x30(0x10)
	None RequiredMapTag; // 0x30(0x08)
	None RequiredGameModes; // 0x30(0x10)
	None RequiredEntries; // 0x30(0x04)
	None RequiredOwnedItems; // 0x38(0x50)
	None RequiredActiveQueueId; // 0x30(0x04)
	None RequireEnabled; // 0x30(0x01)
	None RequiredRankedSeason; // 0x30(0x10)
	None RequireEnabled; // 0x30(0x01)
	None ActivitySequenceName; // 0x30(0x08)
	None MatchingGameplayTags; // 0x30(0x10)
	None RequireAffected; // 0x30(0x01)
	None ModsToIgnore; // 0x38(0x10)
	None AffiliationFilter; // 0x30(0x04)
	None MatchingAimModes; // 0x30(0x10)
	None bCheckIsBackfilling; // 0x30(0x01)
	None MinValue; // 0x30(0x04)
	None MaxValue; // 0x34(0x04)
	None Key; // 0x38(0x10)
	None CheckPlayerCache; // 0x48(0x01)
	None MatchingReasons; // 0x30(0x10)
	None MatchingDamageTypes; // 0x30(0x10)
	None MinDamageHistoryEntries; // 0x30(0x04)
	None MaxDamageHistoryEntries; // 0x34(0x04)
	None MatchingDamageTypes; // 0x30(0x10)
	None bAllowProgressionIfDeserter; // 0x30(0x01)
	None bAllowRegressionIfDeserter; // 0x31(0x01)
	None MaxDistance; // 0x30(0x04)
	None MinDistance; // 0x34(0x04)
	None MinDistanceSprinted; // 0x30(0x04)
	None MaxDistanceSprinted; // 0x34(0x04)
	None IsDown; // 0x30(0x01)
	None MinDownsAchieved; // 0x30(0x04)
	None MaxDownsAchieved; // 0x34(0x04)
	None IsElimination; // 0x30(0x01)
	None MaxAngle; // 0x30(0x04)
	None MinAngle; // 0x34(0x04)
	None bCheckInstigator; // 0x38(0x01)
	None bCheckTarget; // 0x39(0x01)
	None bCheckGameWon; // 0x30(0x01)
	None IsHeadshot; // 0x30(0x01)
	None MinHealthPercent; // 0x30(0x04)
	None MaxHealthPercent; // 0x34(0x04)
	None CheckInstigator; // 0x38(0x01)
	None CheckTarget; // 0x39(0x01)
	None MatchingItemTypes; // 0x30(0x10)
	None MatchingItems; // 0x30(0x10)
	None MatchingItemTags; // 0x30(0x10)
	None SubConditions; // 0x30(0x10)
	None SubConditions; // 0x30(0x10)
	None MinPartySize; // 0x30(0x04)
	None MaxPartySize; // 0x34(0x04)
	None MatchingRevealClasses; // 0x30(0x10)
	None IsBeingRevived; // 0x30(0x01)
	None ActivitySequenceName; // 0x30(0x08)
	None MinSecondsSinceLastDamage; // 0x30(0x04)
	None MaxSecondsSinceLastDamage; // 0x34(0x04)
	None SucceedIfNeverDamaged; // 0x38(0x01)
	None MinSecondsSinceFireStarted; // 0x30(0x04)
	None MaxSecondsSinceFireStarted; // 0x34(0x04)
	None MinSecondsSinceLastHeadshot; // 0x30(0x04)
	None MaxSecondsSinceLastHeadshot; // 0x34(0x04)
	None SucceedIfNeverHeadshot; // 0x38(0x01)
	None MinSecondsSinceLastReload; // 0x30(0x04)
	None MaxSecondsSinceLastReload; // 0x34(0x04)
	None SucceedIfNeverReloaded; // 0x38(0x01)
	None MinCashEarned; // 0x30(0x04)
	None MaxCashEarned; // 0x34(0x04)
	None MatchingWeapons; // 0x30(0x10)
	None MatchingWeaponTags; // 0x30(0x10)
	None MatchingWeaponTags; // 0x30(0x10)
	None MatchingWeapons; // 0x30(0x10)
	None AffiliationFilter; // 0x30(0x04)
	None IsZipLining; // 0x30(0x01)
	None CheckInstigator; // 0x31(0x01)
	None CheckTarget; // 0x32(0x01)
	None Activities; // 0x220(0x10)
	None bInitializeOnBeginPlay; // 0x230(0x01)
	None ActivityInstances; // 0x238(0x10)
	None RealActor; // 0x220(0x08)
	None FakeActor; // 0x228(0x08)
	None PredictedSpawnTimeoutTime; // 0x230(0x04)
	None bDestroyFakeOnYieldToReal; // 0x234(0x01)
	None DefaultTeamNum; // 0x238(0x04)
	None InstigatorId; // 0x240(0x08)
	None LagCompActorID; // 0x248(0x08)
	None OnAgentRefund; // 0x270(0x10)
	None BeginMissionOnPlay; // 0x280(0x01)
	None MovementComponent; // 0x288(0x08)
	None CollisionBox; // 0x290(0x08)
	None OwningPlayer; // 0x298(0x08)
	None MeshComponent; // 0x2a0(0x08)
	None SkinObject; // 0x2a8(0x08)
	None ApparelObjectsToListenTo; // 0x2b0(0x10)
	None FullKeywordList; // 0x2c0(0x10)
	None MaxHealth; // 0x2d0(0x04)
	None RefundMethod; // 0x2d4(0x01)
	None AssociatedWeaponAsset; // 0x2d8(0x08)
	None CurrentHealth; // 0x2e0(0x04)
	None OnHealthUpdate; // 0x2e8(0x10)
	None OnAgentMissionBegin; // 0x2f8(0x10)
	None OriginalOwnerId; // 0x308(0x04)
	None ItemTags; // 0x310(0x10)
	None OnAgentStartFire; // 0x320(0x10)
	None bDisplayAimTargeter; // 0x330(0x01)
	None AimTargeterWidget; // 0x338(0x28)
	None CachedAim; // 0x360(0x50)
	None WeaponAsset; // 0x3b0(0x08)
	None CachedProjectileAsset; // 0x3b8(0x08)
	None StateTransitionHandle; // 0x3c0(0x08)
	None ExpectedTransitionEndTime; // 0x3c8(0x04)
	None CurrentAmmo; // 0x3cc(0x04)
	None CurrentBurstCount; // 0x3d0(0x04)
	None FiringState; // 0x3d4(0x01)
	None ReplicatedStateChanges; // 0x3d8(0x88)
	None NextShotId; // 0x460(0x04)
	None TargeterLocation; // 0x464(0x0c)
	None ProjectileSimFrequency; // 0x470(0x04)
	None MaxSimTime; // 0x474(0x04)
	None CollisionProfileName; // 0x478(0x08)
	None MaxFlightSpeed; // 0x320(0x04)
	None DistanceToFly; // 0x324(0x04)
	None TimeBetweenPings; // 0x328(0x04)
	None RevealPeriodDuration; // 0x32c(0x04)
	None ReplicatedRevealTimer; // 0x330(0x38)
	None UpdateReplicatedTimerPeriod; // 0x368(0x04)
	None bAppliesScrambleEffectToEnemies; // 0x36c(0x01)
	None CurrentSweepFoundChars; // 0x3b0(0x10)
	None OnArrive; // 0x388(0x10)
	None MaxFlightSpeed; // 0x398(0x04)
	None InvisibleMovementTime; // 0x39c(0x04)
	None ReviveTime; // 0x3a0(0x04)
	None ReviveHealth; // 0x3a4(0x04)
	None bDroneVisibility; // 0x3a8(0x01)
	None bDroneVulnerability; // 0x3a9(0x01)
	None bOngoingReviveEffectsActive; // 0x3aa(0x01)
	None TargetCharacter; // 0x3ac(0x08)
	None MovementStage; // 0x3b4(0x01)
	None FlightPath; // 0x3b5(0x01)
	None PreferredHoverHeight; // 0x3b8(0x04)
	None TransitHeight; // 0x3bc(0x04)
	None HoverCorrectionTime; // 0x3c0(0x04)
	None DepartureHeight; // 0x3c4(0x04)
	None bUseCustomReviveTime; // 0x3c8(0x01)
	None CustomReviveTime; // 0x3cc(0x04)
	None bInheritReviveTimeMods; // 0x3d0(0x01)
	None DrawOutline; // 0x3d1(0x01)
	None OutlineStencilColor; // 0x3d2(0x01)
	None ApplyOnReleaseMod; // 0x3d8(0x08)
	None bDrawEnemyDroneOutline; // 0x3e8(0x01)
	None StimuliSourceComponent; // 0x3f0(0x08)
	None DropLocations; // 0xb0(0x10)
	None BotNameTable; // 0xc0(0x08)
	None DefensePoints; // 0xe0(0x10)
	None KSCharacter; // 0x378(0x08)
	None CachedKSCharacter; // 0x380(0x08)
	None bAutoManageWayPointSet; // 0x398(0x01)
	None WayPointSet; // 0x3a8(0x08)
	None bShouldReverseWayPointSetDirection; // 0x3b0(0x01)
	None Shop; // 0x3c8(0x08)
	None StartPointToSpawnAt; // 0x400(0x08)
	None CharacterToSpawn; // 0x408(0x08)
	None TreeToRun; // 0x410(0x08)
	None InitialDifficulty; // 0x418(0x08)
	None DifficultyTable; // 0x428(0x08)
	None SpawnDifficultyConfig; // 0x430(0x78)
	None ObjectivePriorityTable; // 0x4a8(0x08)
	None ItemPriorityTable; // 0x4b0(0x08)
	None AbilityTable; // 0x4b8(0x08)
	None InitialLoadout; // 0x4c0(0x10)
	None KSAIPerception; // 0x4f8(0x08)
	None ActorForFocalOffset; // 0x528(0x08)
	None CrowdCollisionQueryRange; // 0x540(0x04)
	None CrowdPathOptimizationRange; // 0x544(0x04)
	None CrowdAvoidanceRangeMultiplier; // 0x548(0x04)
	None CrowdSeparationWeight; // 0x54c(0x04)
	None bStartWithCrowdFollowing; // 0x550(0x01)
	None TeamNumber; // 0x554(0x04)
	None AllowedJobQuery; // 0x588(0x48)
	None ItemPriorityComponent; // 0x5d0(0x08)
	None TempItemPriorityComponent; // 0x5d8(0x08)
	None ObjectivePriorityComponent; // 0x5e0(0x08)
	None DifficultyComponent; // 0x5e8(0x08)
	None Difficulty; // 0xb0(0x08)
	None DifficultyTable; // 0xb8(0x08)
	None AllowDynamicDifficulty; // 0xc0(0x01)
	None DifficultySpawnConfig; // 0xc8(0x78)
	None AccuracyMultiplierStandard; // 0x140(0x04)
	None AccuracyMultiplierThrownMelee; // 0x144(0x04)
	None AccuracyMultiplierThrownGrenade; // 0x148(0x04)
	None AccuracyMultiplierWhenBlinded; // 0x14c(0x04)
	None AccuracyMultiplierWhenCrosshairHidden; // 0x150(0x04)
	None NewTargetAccuracyMultiplier; // 0x154(0x04)
	None NewTargetTime; // 0x158(0x04)
	None AttackDelayClipPercentMin; // 0x15c(0x04)
	None AttackDelayClipPercentMax; // 0x160(0x04)
	None AttackDelay; // 0x164(0x04)
	None DamageDealtMultiplier; // 0x168(0x04)
	None HeadshotDamageDealtMultiplier; // 0x16c(0x04)
	None DamageTakenMultiplier; // 0x170(0x04)
	None HeadshotDamageTakenMultiplier; // 0x174(0x04)
	None AimForHeadshotProbability; // 0x178(0x04)
	None DodgeRollProbability; // 0x17c(0x04)
	None StrafeProbability; // 0x180(0x04)
	None ThrowGrenadeProbability; // 0x184(0x04)
	None ThrowMeleeProbability; // 0x188(0x04)
	None PerceptionStrengthMin; // 0x18c(0x04)
	None PerceptionStrengthMax; // 0x190(0x04)
	None PerceptionStrength; // 0x194(0x04)
	None AllowedActions; // 0x198(0x10)
	None DisallowedActions; // 0x1a8(0x10)
	None SpeedMultiplier; // 0x1b8(0x04)
	None LastFiredWeapon; // 0x1bc(0x08)
	None AttacksSinceLastAttackDelay; // 0x1c4(0x04)
	None AttacksNeededToTriggerAttackDelay; // 0x1c8(0x04)
	None ItemPriorities; // 0xb0(0x10)
	None TeamNumOverride; // 0x230(0x04)
	None AimAssistAnchor; // 0x238(0x08)
	None BoneToHitLocationTypeMap; // 0x248(0x50)
	None bCanBeKilled; // 0x298(0x01)
	None MaxHealth; // 0x29c(0x04)
	None bLocallyKilled; // 0x2a0(0x01)
	None HealthInfo; // 0x2a4(0x08)
	None AimAssistPriority; // 0x450(0x04)
	None PlayerOwner; // 0xb0(0x08)
	None AssistTargetStack; // 0xb8(0x10)
	None CurrentTargetWeightStickiness; // 0xc8(0x04)
	None ProjectionSpaceStackBoundary; // 0xcc(0x04)
	None bUseStackBoundaryFovScaling; // 0xd0(0x01)
	None FovBaseline; // 0xd4(0x04)
	None AimAssistEffectivenessCurve; // 0xd8(0x08)
	None ActivationType; // 0xe0(0x01)
	None FrictionAllowedInputMode; // 0xe1(0x01)
	None LockAllowedInputMode; // 0xe2(0x01)
	None SnapAllowedInputMode; // 0xe3(0x01)
	None CorrectionAllowedInputMode; // 0xe4(0x01)
	None bAssistGadgets; // 0xec(0x01)
	None bAimLockUsesTargetVelocity; // 0xed(0x01)
	None bAimLockMeshSmoothCompensation; // 0xee(0x01)
	None bAimLockUsesOwnVelocity; // 0xef(0x01)
	None bComplexAimLockDeltaRotCalculation; // 0xf0(0x01)
	None bComplexLookLocationCalculation; // 0xf1(0x01)
	None MaxAimLockEvaluationInterval; // 0xf4(0x04)
	None KickbackIgnoreFactor; // 0xf8(0x04)
	None CrossAxisWeaknessPoint; // 0xfc(0x04)
	None bOldLockValid; // 0x100(0x01)
	None OldLockRelativeLocation; // 0x104(0x0c)
	None OldInputRot; // 0x110(0x0c)
	None LastAimAssistTarget; // 0x120(0x08)
	None bLastTargetCrouching; // 0x128(0x01)
	None bLastSelfCrouching; // 0x129(0x01)
	None LastLockAssistPosition; // 0x12c(0x08)
	None LastAnchorScreenLocation; // 0x134(0x08)
	None AimAssistVisibilityUpdatePeriod; // 0x13c(0x04)
	None CrouchAnimTimeLength; // 0x140(0x04)
	None CrouchAnimTimeLengthRemaining; // 0x144(0x04)
	None ScaledScreenSpaceJukeDistanceThreshold; // 0x148(0x08)
	None JoyConFallback; // 0x30(0x01)
	None JoyConADSFallback; // 0x31(0x01)
	None TouchFallback; // 0x32(0x01)
	None TouchADSFallback; // 0x33(0x01)
	None PCGamepadADSFallback; // 0x34(0x01)
	None AllowAimCorrection; // 0x38(0x50)
	None AimCorrectionOffset; // 0x88(0x50)
	None AimCorrectionRange; // 0xd8(0x50)
	None AllowOverride; // 0x128(0x10)
	None OffsetOverride; // 0x138(0x10)
	None RangeOverride; // 0x148(0x10)
	None FullAllowAimCorrection; // 0x158(0x50)
	None FullAimCorrectionOffset; // 0x1a8(0x50)
	None FullAimCorrectionRange; // 0x1f8(0x50)
	None RequireInputForAimLock; // 0x38(0x50)
	None AimLockCurve; // 0x88(0x50)
	None AimLockDistanceCurve; // 0xd8(0x50)
	None RequireInputOverride; // 0x128(0x10)
	None LockCurveOverride; // 0x138(0x10)
	None DistanceCurveOverride; // 0x148(0x10)
	None FullRequireInputForAimLock; // 0x158(0x50)
	None FullAimLockCurve; // 0x1a8(0x50)
	None FullAimLockDistanceCurve; // 0x1f8(0x50)
	None MaxAimSnapRotation; // 0x38(0x50)
	None AimSnapDistanceCurve; // 0x88(0x50)
	None AimSnapCurve; // 0xd8(0x50)
	None ObjectivePriorityTable; // 0xb0(0x08)
	None ObjectivePriorities; // 0xb8(0x50)
	None SortedPriorities; // 0x108(0x10)
	None RegisteredEvents; // 0x80(0x10)
	None ObjectiveEvents; // 0xe8(0x10)
	None RegisteredEvents; // 0x80(0x10)
	None RegisteredEvents; // 0x80(0x10)
	None Event; // 0x28(0x30)
	None OcclusionType; // 0x3f0(0x01)
	None MinTimeBetweenOcclusionUpdates; // 0x3f4(0x04)
	None OcclusionDistanceMultiplier; // 0x3f8(0x04)
	None OcclusionInterpolationMilliseconds; // 0x3fc(0x04)
	None CurrentObstruction; // 0x400(0x04)
	None CurrentOcclusion; // 0x404(0x04)
	None RequiresListenerDistance; // 0x40c(0x01)
	None MinTimeBetweenDistanceUpdates; // 0x410(0x04)
	None RequiresListenerDirection; // 0x418(0x01)
	None MinTimeBetweenDirectionUpdates; // 0x41c(0x04)
	None LUT; // 0x428(0x08)
	None PendingStopEvents; // 0x430(0x10)
	None LoopIdToStopEventMap; // 0x440(0x50)
	None AkAudioEvent; // 0x220(0x08)
	None AkComponent; // 0x228(0x08)
	None StopWhenOwnerIsDestroyed; // 0x230(0x01)
	None AutoPost; // 0x231(0x01)
	None ForceNoTickingOnAkComponent; // 0x232(0x01)
	None InteractionBlockerManager; // 0x240(0x08)
	None InteractableComponent; // 0x258(0x08)
	None AllowedCharacters; // 0x260(0x10)
	None ItemDropInteractDuration; // 0x270(0x04)
	None Price; // 0x274(0x04)
	None bIsInstantPickup; // 0x278(0x01)
	None bAllowManualInstantPickup; // 0x27a(0x01)
	None bCanPickupWithModifiedRange; // 0x27b(0x01)
	None StimuliSourceComponent; // 0x280(0x08)
	None SightOffset; // 0x288(0x0c)
	None ActorsSeenBy; // 0x298(0x10)
	None bCanPing; // 0x2a8(0x01)
	None AssociatedPingID; // 0x2ac(0x04)
	None AssociatedPingPlayerState; // 0x2b0(0x08)
	None ItemAsset; // 0x2b8(0x08)
	None InteractionType; // 0x2c0(0x08)
	None bDestroyOnPickUp; // 0x2c8(0x01)
	None OnItemPickup; // 0x2d0(0x10)
	None PendingPickupCharacter; // 0x300(0x08)
	None CurrentInteractionManager; // 0x308(0x08)
	None CollisionMesh; // 0x310(0x08)
	None InactiveStencilValue; // 0x31b(0x01)
	None ActiveStencilValue; // 0x31c(0x01)
	None LootSiteSpawnRotation; // 0x320(0x0c)
	None SkinTagContainer; // 0x330(0x20)
	None DropHidePlayer; // 0x368(0x08)
	None bClientDropUnhide; // 0x370(0x01)
	None OriginalOwnerId; // 0x374(0x04)
	None OriginalOwnerTeamNum; // 0x378(0x04)
	None ItemTags; // 0x380(0x10)
	None bIsPlayerDrop; // 0x390(0x01)
	None Rarity; // 0x391(0x01)
	None DropPickupConfig; // 0x392(0x01)
	None ObjectiveId; // 0x394(0x04)
	None PickupSound; // 0x398(0x08)
	None NudgeComponent; // 0x3a0(0x08)
	None bCanBeNudged; // 0x3a8(0x01)
	None bOnlyVisibleIfCanPickup; // 0x3a9(0x01)
	None Amount; // 0x3b0(0x04)
	None ItemDropClass; // 0x1b8(0x28)
	None ItemPrice; // 0x1e0(0x04)
	None ItemType; // 0x1e4(0x08)
	None bUsePreviewIconInfo; // 0x1ec(0x01)
	None PreviewIconInfo; // 0x1f0(0x08)
	None DefaultItemIcon; // 0x1f8(0x08)
	None SpecialItemWidgetClass; // 0x200(0x28)
	None ColorCode; // 0x228(0x04)
	None Rules; // 0x22c(0x0c)
	None ItemTags; // 0x238(0x10)
	None AlsoInBundleLootId; // 0x248(0x04)
	None Amount; // 0x250(0x04)
	None bShareWithTeam; // 0x254(0x01)
	None AmmoType; // 0x270(0x01)
	None StickType; // 0x28(0x01)
	None PlayerInput; // 0x30(0x08)
	None CurrentAnimInst; // 0xb0(0x08)
	None bIsInLobbyViewer; // 0x2c8(0x01)
	None bRecordAnimStats; // 0x2c9(0x01)
	None AuditingComponent; // 0x2d0(0x08)
	None bPlayingMirrorTransition; // 0x2e8(0x01)
	None bAnimMirrorDelay; // 0x2e9(0x01)
	None bDisableMirrorPose; // 0x2ea(0x01)
	None bWantsMirroredPoseCosmetic; // 0x2eb(0x01)
	None PoseMirrorAlphaCosmetic; // 0x2ec(0x04)
	None MirrorInterpSpeed; // 0x2f0(0x04)
	None MirrorInterpSpeedEngaged; // 0x2f4(0x04)
	None ShoulderSwapProgress; // 0x2f8(0x04)
	None CurrentShoulderCosmetic; // 0x2fc(0x01)
	None BoneMirrorConfig; // 0x300(0x20)
	None CurrentShoulder; // 0x320(0x01)
	None bWantsMirroredPose; // 0x321(0x01)
	None PoseMirrorAlpha; // 0x324(0x04)
	None bIsShieldActive; // 0x328(0x01)
	None Emotion; // 0x38(0x01)
	None Duration; // 0x3c(0x04)
	None FootprintTraceObjectTypes; // 0x38(0x10)
	None SkinTableRowName; // 0x90(0x08)
	None PropMesh; // 0x30(0x08)
	None AnimClass; // 0x38(0x08)
	None AnimMontage; // 0x40(0x08)
	None bAddPropToSilhouette; // 0x48(0x01)
	None ForceLOD; // 0x4c(0x04)
	None PropAttachmentInfo; // 0x50(0x30)
	None bUseLightingChannel0; // 0x80(0x01)
	None bUseLightingChannel1; // 0x81(0x01)
	None bUseLightingChannel2; // 0x82(0x01)
	None EmotePropGuid; // 0x84(0x10)
	None Emotion; // 0x30(0x01)
	None SkeletalMesh; // 0x30(0x08)
	None AnimClass; // 0x38(0x08)
	None StaticMesh; // 0x40(0x08)
	None PropAttachmentInfo; // 0x48(0x30)
	None SkinTableRowName; // 0x58(0x08)
	None WeaponAsset; // 0x30(0x18)
	None AnimClassRowNameOverride; // 0x48(0x08)
	None ActivationMontage; // 0x50(0x08)
	None PropIdentifier; // 0x58(0x08)
	None ExtendedLifetime; // 0x60(0x04)
	None bSkipExtendedLifetime; // 0x64(0x01)
	None PropAttachmentInfo; // 0x68(0x30)
	None OnAllyLivingPlayersChanged; // 0x238(0x10)
	None OnEnemyLivingPlayersChanged; // 0x248(0x10)
	None PriorityManager; // 0x258(0x08)
	None AnnouncerAkComponent; // 0x270(0x08)
	None PhaseTimeAnnouncements; // 0x278(0x50)
	None SuddenDeathAnnouncement; // 0x2c8(0x08)
	None FallbackEliminationAnnouncement; // 0x2d8(0x08)
	None FallbackEliminationAnnouncementAlly; // 0x2e0(0x08)
	None MaxAnnouncementDuration; // 0x328(0x04)
	None OnVOLineFinished; // 0x32c(0x10)
	None VODuckingAmount; // 0x33c(0x04)
	None Priority; // 0x250(0x04)
	None ApparelSlot; // 0x254(0x08)
	None SlotsToOverride; // 0x260(0x20)
	None AsyncLoadPriority; // 0x2a8(0x04)
	None LocalPlayerAsyncLoadPriority; // 0x2ac(0x04)
	None AssetDataTables; // 0x2c0(0x10)
	None ApparelObjectsToInfluence; // 0x2d0(0x10)
	None CustomComponentClass; // 0x2e0(0x28)
	None MeshClass; // 0x2e0(0x28)
	None AttachPointName; // 0x308(0x08)
	None CollisionProfile; // 0x310(0x08)
	None bSlaveToCharacterMesh; // 0x318(0x01)
	None bSimulatePhysics; // 0x319(0x01)
	None ApparelObjectsToListenTo; // 0x320(0x10)
	None bInitialized; // 0x220(0x01)
	None EquipInfo; // 0x224(0x14)
	None EquipmentManagerOwner; // 0x250(0x10)
	None EquipmentManagerComponent; // 0x260(0x08)
	None GiveParameters; // 0x280(0x30)
	None EquipmentId; // 0x2b0(0x02)
	None EquipmentCosmeticComponent; // 0x2b8(0x08)
	None OnCosmeticComponentCreated; // 0x2c8(0x10)
	None bCanSwapOnFire; // 0x2d8(0x01)
	None bCanSwapOnDown; // 0x2d9(0x01)
	None bCanSwapOutOnInteraction; // 0x2da(0x01)
	None bCanSwapOutWhileAimingDownSights; // 0x2db(0x01)
	None LoadedDropClass; // 0x2f0(0x08)
	None bNoWeaponAsset; // 0x300(0x01)
	None WeaponAssetPtr; // 0x308(0x28)
	None WeaponAsset; // 0x330(0x08)
	None AutoSwapOutWeaponId; // 0x348(0x04)
	None AuxiliaryWeaponInfo; // 0x350(0x10)
	None AuxiliaryWeapons; // 0x360(0x50)
	None OnCreatedDeployable; // 0x3b0(0x10)
	None DestroyReason; // 0x3c0(0x01)
	None CharacterOwner; // 0x3c8(0x08)
	None PlayerStateInstigator; // 0x3d0(0x08)
	None bUseCompressStateTransmission; // 0x3d8(0x01)
	None WeaponState; // 0x3f0(0x01)
	None LocalWeaponState; // 0x3f1(0x01)
	None LastStateChangeTimeStamp; // 0x3f4(0x04)
	None PendingStateChangeRequests; // 0x3f8(0x10)
	None NextStateRequestId; // 0x40a(0x02)
	None OnWeaponStateChangedDel; // 0x410(0x10)
	None bPendingFire; // 0x451(0x01)
	None bBotPendingFire; // 0x452(0x01)
	None bFireOnce; // 0x453(0x01)
	None KickbackShotIndex; // 0x454(0x04)
	None KickbackResetTimeLeft; // 0x458(0x04)
	None BurstShotIndex; // 0x45c(0x04)
	None MinCookTimeStamp; // 0x460(0x04)
	None bUsingPostFireForgiveness; // 0x464(0x01)
	None PrefireStartTime; // 0x468(0x04)
	None FireLockout; // 0x46c(0x08)
	None OnFire; // 0x478(0x10)
	None OnReloadFailed; // 0x488(0x10)
	None DeathShotForgivenessTime; // 0x498(0x04)
	None bTryToReloadEveryTickOnEmpty; // 0x49c(0x01)
	None CachedReloadSize; // 0x4a0(0x04)
	None AmmoInClip; // 0x4a4(0x04)
	None ClipSize; // 0x4a8(0x04)
	None AmmoConsumedSinceLastReload; // 0x4ac(0x04)
	None LastReloadRequest; // 0x4b0(0x10)
	None bWeaponStartsLoaded; // 0x4c0(0x01)
	None ReloadReplicationFlags; // 0x4c1(0x01)
	None OnExhaustedDel; // 0x4c8(0x10)
	None bShouldResumeReload; // 0x4d8(0x01)
	None bFirstReload; // 0x4d9(0x01)
	None OnAmmoChangedDel; // 0x4e0(0x10)
	None OnAmmoInClipConsumed; // 0x508(0x10)
	None LoadedDamageTypeClass; // 0x520(0x08)
	None OnHiddenInteractableUpdate; // 0x528(0x10)
	None CachedHiddenInteractable; // 0x538(0x08)
	None NextExpectedTimerEndTime; // 0x558(0x04)
	None ActiveTimer; // 0x560(0x08)
	None bCanEverInterruptSprinting; // 0x568(0x01)
	None SprintRecoveryRemaining; // 0x56c(0x04)
	None bReleasedFireInSprintRecovery; // 0x570(0x01)
	None bDodgeRollInterruptedReload; // 0x571(0x01)
	None bSprintCanInterruptReload; // 0x572(0x01)
	None bDodgeRollCanInterruptReload; // 0x573(0x01)
	None DodgeRollRecoveryRemaining; // 0x574(0x04)
	None bInLockon; // 0x590(0x01)
	None LockonProgress; // 0x594(0x04)
	None LockonDuration; // 0x598(0x04)
	None LockonStartRotation; // 0x59c(0x0c)
	None LockonEndRotation; // 0x5a8(0x0c)
	None WeaponRandomStream; // 0x60c(0x08)
	None AimAssistLockData; // 0x668(0x08)
	None AimAssistSnapData; // 0x670(0x08)
	None bRequireInputForAimAssistLock; // 0x678(0x01)
	None AimAssistLockCurve; // 0x680(0x08)
	None AimAssistLockDistanceCurve; // 0x688(0x08)
	None bRequireInputForHipAimAssistLock; // 0x690(0x01)
	None HipAimAssistLockCurve; // 0x698(0x08)
	None HipAimAssistLockDistanceCurve; // 0x6a0(0x08)
	None AimAssistSnapCurve; // 0x6a8(0x08)
	None Durability; // 0x6d8(0x04)
	None bArmorIsBroken; // 0x6dc(0x01)
	None ItemDisplayStatParamsTable; // 0x250(0x08)
	None WeaponDisplayName; // 0x258(0x18)
	None WeaponDescription; // 0x270(0x18)
	None WeaponEquipType; // 0x288(0x01)
	None WeaponClass; // 0x290(0x28)
	None WeaponComponentClass; // 0x2b8(0x28)
	None WeaponAmmoWidgetClass; // 0x2e0(0x28)
	None WeaponDropClass; // 0x308(0x28)
	None bUnique; // 0x330(0x01)
	None bShouldBeRemovedWhenExhausted; // 0x331(0x01)
	None bCanBeDropped; // 0x332(0x01)
	None bWillDropWhenDowned; // 0x333(0x01)
	None bForceUprightDrops; // 0x334(0x01)
	None bDoesRestoreAmmo; // 0x335(0x01)
	None bModsCanReplenishAmmo; // 0x336(0x01)
	None bDoLocalReveals; // 0x337(0x01)
	None bCanEverFire; // 0x338(0x01)
	None bLagCompensatedFire; // 0x339(0x01)
	None bIgnoreNoFire; // 0x33a(0x01)
	None bLimitNumInPlay; // 0x33b(0x01)
	None MaxNumInPlay; // 0x33c(0x04)
	None bLimitDeployablesByPlayer; // 0x340(0x01)
	None PlayerDeployableThreshold; // 0x344(0x04)
	None bUsesEquipPoint; // 0x348(0x01)
	None bUsesEquipSlot; // 0x349(0x01)
	None ValidEquipPoints; // 0x350(0x20)
	None FireModeType; // 0x370(0x01)
	None CastType; // 0x371(0x01)
	None RoundsPerBurst; // 0x374(0x04)
	None bUseAltFire; // 0x378(0x01)
	None bUseBuildupForCooking; // 0x379(0x01)
	None BuildupTime; // 0x37c(0x04)
	None PreFireTime; // 0x380(0x04)
	None PreFireInterruptThreshold; // 0x384(0x04)
	None AltPreFireTime; // 0x388(0x04)
	None PostFireTime; // 0x38c(0x04)
	None AltPostFireTime; // 0x390(0x04)
	None PostFireForgivenessTime; // 0x394(0x04)
	None bSwapAfterFire; // 0x398(0x01)
	None CooldownTime; // 0x39c(0x04)
	None bUseChargingFireRate; // 0x3a0(0x01)
	None InitialPostFireTime; // 0x3a4(0x04)
	None FinalPostFireTime; // 0x3a8(0x04)
	None PostFireChargeTime; // 0x3ac(0x04)
	None PostFireDecayTime; // 0x3b0(0x04)
	None PostFireDecayDelay; // 0x3b4(0x04)
	None bCanEverReload; // 0x3b8(0x01)
	None bConsumeAmmoDirectlyFromInventory; // 0x3b9(0x01)
	None ClipSize; // 0x3bc(0x04)
	None ReloadType; // 0x3c0(0x01)
	None PreReloadTime; // 0x3c4(0x04)
	None PostReloadTime; // 0x3c8(0x04)
	None ReloadCooldownTime; // 0x3cc(0x04)
	None bReloadOnEmptyWhileScoped; // 0x3d0(0x01)
	None FirstShotPreReloadTime; // 0x3d4(0x04)
	None bCanInterruptPreReload; // 0x3d8(0x01)
	None AmmoType; // 0x3d9(0x01)
	None DefaultAmmo; // 0x3dc(0x04)
	None bUnlimitedAmmo; // 0x3e0(0x01)
	None bMuteEmptyClipWarnings; // 0x3e1(0x01)
	None HolsterTime; // 0x3e4(0x04)
	None bShouldRestrictHolsterInPostFire; // 0x3e8(0x01)
	None RetriveTime; // 0x3ec(0x04)
	None bCanFireFromRetrieve; // 0x3f0(0x01)
	None ReticleType; // 0x3f1(0x01)
	None bFadeUIOnAim; // 0x3f2(0x01)
	None WeaponStateGraph; // 0x3f8(0x140)
	None bDoRadialDamage; // 0x538(0x01)
	None bIsRadialDamageConical; // 0x539(0x01)
	None HeadDamageAmount; // 0x53c(0x04)
	None DamageAmount; // 0x540(0x04)
	None LimbDamageAmount; // 0x544(0x04)
	None DamageFalloffCurve; // 0x548(0x18)
	None RadialDamageParams; // 0x560(0x14)
	None bIgnoreFriendlies; // 0x574(0x01)
	None bIgnoreSelf; // 0x575(0x01)
	None bIgnoreWalls; // 0x576(0x01)
	None RadialConicalHalfAngle; // 0x578(0x04)
	None DamageTypeClass; // 0x580(0x28)
	None CautionRadius; // 0x5a8(0x04)
	None ShotPenetrationCount; // 0x5ac(0x04)
	None DefaultAimTransitionTime; // 0x5b0(0x04)
	None bCanEverAimOverShoulder; // 0x5b4(0x01)
	None AimOverShoulderTransitionTime; // 0x5b8(0x04)
	None bCanEverAimDownSights; // 0x5bc(0x01)
	None AimDownSightsTransitionTime; // 0x5c0(0x04)
	None bLockoutAimStateInCooldown; // 0x5c4(0x01)
	None AimDownSightsFov; // 0x5c8(0x04)
	None bCanEverAimAlternate; // 0x5cc(0x01)
	None AimAlternateTransitionTime; // 0x5d0(0x04)
	None bPrefireLockon; // 0x5d4(0x01)
	None PrefireLockonAngle; // 0x5d8(0x04)
	None PrefireLockonDistance; // 0x5dc(0x04)
	None bLimitCameraRotation; // 0x5e0(0x01)
	None MinCameraPitch; // 0x5e4(0x04)
	None MaxCameraPitch; // 0x5e8(0x04)
	None MinCameraYaw; // 0x5ec(0x04)
	None MaxCameraYaw; // 0x5f0(0x04)
	None bOverrideShoulderCameraProperties; // 0x5f4(0x01)
	None ShoulderCameraBoomLength; // 0x5f8(0x04)
	None ShoulderCameraSocketOffset; // 0x5fc(0x0c)
	None ShoulderCameraTargetOffset; // 0x608(0x0c)
	None ShoulderCameraTransform; // 0x620(0x30)
	None bIsMountedWeapon; // 0x650(0x01)
	None bAllowsManualShoulderSwap; // 0x651(0x01)
	None ForcedShoulder; // 0x652(0x01)
	None bUseCrouchAOSCamVertOffset; // 0x653(0x01)
	None GamepadTurnSpeedMultiplier; // 0x654(0x04)
	None GamepadAimedTurnSpeedMultiplier; // 0x658(0x04)
	None bPrefireOverlapSkipsToFire; // 0x65c(0x01)
	None PrefireSkipWindows; // 0x660(0x10)
	None PrefireOverlapGracePeriod; // 0x670(0x04)
	None ThirdPersonAimOriginType; // 0x674(0x01)
	None ThirdPersonFixedRelativeOffset; // 0x678(0x0c)
	None ThirdPersonAimOriginSocketName; // 0x684(0x08)
	None BaseAccuracy; // 0x68c(0x04)
	None CrouchAccuracyModifier; // 0x690(0x04)
	None AimOverShoulderAccuracyModifier; // 0x694(0x04)
	None InAirAccuracyModifier; // 0x698(0x04)
	None MovementAccuracyPenalty; // 0x69c(0x04)
	None bUseAccuracyLoss; // 0x6a0(0x01)
	None AccuracyLossPerShot; // 0x6a4(0x04)
	None MaxFiringAccuracyLoss; // 0x6a8(0x04)
	None AccuracyReturnRate; // 0x6ac(0x04)
	None AccuracyGainPerShot; // 0x6b0(0x04)
	None MaxFiringAccuracyGain; // 0x6b4(0x04)
	None MaxAimedFiringAccuracyGain; // 0x6b8(0x04)
	None AccuracyDecayRate; // 0x6bc(0x04)
	None AccuracyReturnDelay; // 0x6c0(0x04)
	None MaxHipFireAccuracy; // 0x6c4(0x04)
	None MaxAimedAccuracy; // 0x6c8(0x04)
	None KickbackModule; // 0x6d0(0x08)
	None KickbackApplicationTimeOverride; // 0x6d8(0x04)
	None bCanResetKickback; // 0x6dc(0x01)
	None KickbackResetTime; // 0x6e0(0x04)
	None bUseKickbackRecovery; // 0x6e4(0x01)
	None KickbackRecoveryDelay; // 0x6e8(0x04)
	None KickbackRecoveryRate; // 0x6ec(0x04)
	None KickbackRecoveryAcceleration; // 0x6f0(0x04)
	None MaxCumulativeKickbackVerticalAngle; // 0x6f4(0x04)
	None GamepadKickbackScaling; // 0x6f8(0x04)
	None SprintRecoveryTime; // 0x6fc(0x04)
	None bStartFireInterruptsSprinting; // 0x700(0x01)
	None bStartReloadInterruptsSprinting; // 0x701(0x01)
	None bStartHolsterInterruptsSprinting; // 0x702(0x01)
	None DodgeRollRecoveryTime; // 0x704(0x04)
	None bShouldPreventDodgeRollDuringFire; // 0x708(0x01)
	None bCanFireWhileInPowerSlide; // 0x709(0x01)
	None bCanUseWhileOnZipline; // 0x70a(0x01)
	None bIsAudible; // 0x70b(0x01)
	None AudibleRange; // 0x70c(0x04)
	None WalkSpeedModifier; // 0x710(0x04)
	None ADSSpeedModifier; // 0x714(0x04)
	None FiringSpeedModifier; // 0x718(0x04)
	None bCanUseOffGround; // 0x71c(0x01)
	None ValidWeaponAttachmentPoints; // 0x720(0x20)
	None ValidAttachments; // 0x740(0x50)
	None AttachmentSlotCount; // 0x790(0x04)
	None AuxiliaryWeapons; // 0x798(0x50)
	None VibrationEffect; // 0x7e8(0x28)
	None AlternativeVibrationEffect; // 0x810(0x28)
	None AlternativeVibrationAttenuation; // 0x838(0x28)
	None RumbleEvent; // 0x860(0x08)
	None WeaponUpgrade; // 0x868(0x28)
	None ItemRenderImage; // 0x890(0x28)
	None ADSRollMultiplier; // 0x8b8(0x04)
	None ADSBumpStartStopMultiplier; // 0x8bc(0x04)
	None ADSBumpLoopingMultiplier; // 0x8c0(0x04)
	None ADSBlurValuesInfo; // 0x8c4(0x30)
	None EnableCustomMask; // 0x8f4(0x01)
	None CustomMaskTexture; // 0x8f8(0x08)
	None Durability; // 0x900(0x04)
	None StartingDurability; // 0x904(0x04)
	None DamageAbsorbPercent; // 0x908(0x04)
	None DisplayLevel; // 0x90c(0x04)
	None bAbsorbsHeadDamage; // 0x910(0x01)
	None bAbsorbsBreakingHit; // 0x911(0x01)
	None bArmorIsRepairable; // 0x912(0x01)
	None bDestroyOnBreak; // 0x913(0x01)
	None bRepairableByInteract; // 0x914(0x01)
	None OnProjectileSpawned; // 0x3b8(0x10)
	None ReturnProjectile; // 0x3e0(0x08)
	None WeaponComponent; // 0x3f0(0x08)
	None WeaponAsset; // 0x3f8(0x08)
	None WeaponComponentEquipmentId; // 0x400(0x04)
	None CachedWeaponAsset; // 0x408(0x08)
	None BundledAmmo; // 0x4f8(0x0c)
	None AttachmentContainer; // 0x518(0x128)
	None bAttachWeaponComponentOnDrop; // 0x640(0x01)
	None EquipmentContainer; // 0x648(0x228)
	None ReleasedCachedTimeSeconds; // 0x870(0x04)
	None CosmeticZOffset; // 0x874(0x04)
	None RemainingDurability; // 0x878(0x04)
	None bCanReplaceBetterArmor; // 0x87c(0x01)
	None bCookAndPackageActivities; // 0x7b8(0x01)
	None bCookAndPackageJobActivities; // 0x7b9(0x01)
	None bCookAndPackageWeaponActivities; // 0x7ba(0x01)
	None bIsQuickCook; // 0x7bb(0x01)
	None AdditionalQuickCookPrimaryAssets; // 0x7c0(0x10)
	None bCookAndPackageActivities; // 0x38(0x01)
	None bCookAndPackageJobActivities; // 0x39(0x01)
	None bCookAndPackageWeaponActivities; // 0x3a(0x01)
	None bQuickCook; // 0x3b(0x01)
	None PrimaryTypesToIgnoreQuickCook; // 0x40(0x10)
	None QuickCookTypeIgnoreSet; // 0x50(0x50)
	None PrimaryAssetsToIgnoreQuickCook; // 0xa0(0x10)
	None QuickCookAssetIgnoreSet; // 0xb0(0x50)
	None QuickCookAssetIngoreSetTypes; // 0x100(0x50)
	None PrimaryAssetsToIncludeQuickCook; // 0x150(0x10)
	None ActiveContentProductionChunkId; // 0x160(0x04)
	None ActiveMapProductionChunkId; // 0x164(0x04)
	None PrimaryAssetQuery; // 0xb0(0x48)
	None AssetIds; // 0xf8(0x10)
	None LastResolvedIndex; // 0x108(0x04)
	None bHasInitalizedAssetIdList; // 0x10c(0x01)
	None MaterialToUse; // 0x260(0x08)
	None MaterialParameter; // 0x268(0x08)
	None CompatibleWeapons; // 0x28(0x10)
	None CompatibleWeaponTypes; // 0x28(0x20)
	None bHasBeenUnequipped; // 0xb0(0x01)
	None EquipmentContainerOwner; // 0xb8(0x10)
	None EquipmentId; // 0xc8(0x04)
	None AuthorityEquipmentId; // 0xcc(0x04)
	None EquipPoint; // 0xd0(0x08)
	None bNoEquipPoint; // 0xd8(0x01)
	None Rarity; // 0xd9(0x01)
	None SkinTagAssetOwner; // 0xe0(0x10)
	None CharacterOwner; // 0xf8(0x08)
	None bPropSpawner; // 0x118(0x01)
	None DefaultAssetDataTable; // 0x138(0x08)
	None DefaulAssetDataTablePriority; // 0x140(0x04)
	None SkinDetailsPtr; // 0x148(0x28)
	None AttachmentAsset; // 0x180(0x08)
	None AttachPoint; // 0x188(0x08)
	None ParentComponent; // 0x190(0x08)
	None ParentEquipmentId; // 0x198(0x04)
	None ParentWeaponAsset; // 0x1a0(0x08)
	None bInitialized; // 0x1a8(0x01)
	None bWasInitializedOnNewWeapon; // 0x1b0(0x01)
	None DemoModePreviewStateIndex; // 0x1b4(0x04)
	None WeaponMesh; // 0x1c8(0x08)
	None bEnableDemoPreviewMode; // 0x1e0(0x01)
	None bCosmeticUpdatesHidden; // 0x1e1(0x01)
	None CurrentWeaponState; // 0x1e2(0x01)
	None bOwningPawnInstigatedMostRecentDown; // 0x1e3(0x01)
	None bOwningWeaponInstigatedMostRecentDown; // 0x1e4(0x01)
	None DamageWithinTimePeriod; // 0x1e8(0x04)
	None IdleCooldownTimer; // 0x1f0(0x08)
	None DamageWithinTimePeriodTimer; // 0x1f8(0x08)
	None WepAttachReactive; // 0x200(0x08)
	None ProgressionIntA; // 0x208(0x04)
	None ProgressionIntB; // 0x20c(0x04)
	None ProgressionIntC; // 0x210(0x04)
	None ProgressionFloatA; // 0x214(0x04)
	None ProgressionFloatB; // 0x218(0x04)
	None ProgressionFloatC; // 0x21c(0x04)
	None bTrackAIsResetting; // 0x220(0x01)
	None bTrackBIsResetting; // 0x221(0x01)
	None bTrackCIsResetting; // 0x222(0x01)
	None bTrackAShouldResetOnNewWeapons; // 0x223(0x01)
	None bTrackBShouldResetOnNewWeapons; // 0x224(0x01)
	None bTrackCShouldResetOnNewWeapons; // 0x225(0x01)
	None PersistentCacheA; // 0x226(0x01)
	None PersistentCacheB; // 0x227(0x01)
	None PersistentCacheC; // 0x228(0x01)
	None PersistentFlags; // 0x229(0x01)
	None ObjectiveInfo; // 0x880(0x68)
	None ObjectiveTimerInfo; // 0x8e8(0x38)
	None ObjectiveCaptureInfo; // 0x920(0x14)
	None PointOfInterest; // 0x938(0x08)
	None CurrentInteractionProgress; // 0x940(0x04)
	None CurrentInteractor; // 0x948(0x08)
	None NeutralPickupTime; // 0x950(0x04)
	None NeutralPickupPrompt; // 0x958(0x18)
	None NeutralPickupProgressText; // 0x970(0x18)
	None DisarmTime; // 0x988(0x04)
	None DisarmPrompt; // 0x990(0x18)
	None DisarmProgressText; // 0x9a8(0x18)
	None DisarmInteractionType; // 0x9c0(0x08)
	None MaxDisarmInteractionDistance; // 0x9c8(0x04)
	None MinimapDisplayWidget; // 0x9d0(0x28)
	None FullmapDisplayWidget; // 0x9f8(0x28)
	None OverlayDisplayWidget; // 0xa20(0x28)
	None DisarmCameraName; // 0xa48(0x08)
	None DisarmCameraTransitionInTime; // 0xa50(0x04)
	None DisarmCameraTransitionOutTime; // 0xa54(0x04)
	None bDisarmForceCameraShoulder; // 0xa58(0x01)
	None DisarmCameraShoulder; // 0xa59(0x01)
	None DisarmCameraMaxRotation; // 0xa5c(0x04)
	None DisarmCameraRotationLockout; // 0xa60(0x01)
	None bLockPitch; // 0xa61(0x01)
	None bLockYaw; // 0xa62(0x01)
	None bDisarmCameraShake; // 0xa63(0x01)
	None DisarmCameraShake; // 0xa68(0x08)
	None TeamSpottingBitmask; // 0xa74(0x04)
	None bShouldAutomaticallyBeSpotted; // 0xa78(0x01)
	None MaxSpottingRange; // 0xa7c(0x04)
	None SpottingSweepRadius; // 0xa80(0x04)
	None GroundCheckDistance; // 0xa84(0x04)
	None SoundEventName; // 0xa90(0x08)
	None SoundEventLoudness; // 0xa98(0x04)
	None RepeatTimeToNotifyBots; // 0xa9c(0x04)
	None AudioPlayerStateParameters; // 0x28(0x08)
	None LoadedAudioDataTables; // 0x50(0x50)
	None WeakGameInstance; // 0x120(0x08)
	None GameplayEventActionMap; // 0x220(0x50)
	None MapLevelStartEventActionMap; // 0x270(0x50)
	None MapLevelEndEventActionMap; // 0x2c0(0x50)
	None GameModeStartEventActionMap; // 0x310(0x50)
	None GameModeEndEventActionMap; // 0x360(0x50)
	None PlayerCharacterStartEventActionMap; // 0x3b0(0x50)
	None PlayerCharacterEndEventActionMap; // 0x400(0x50)
	None MusicPackStartEventActionMap; // 0x450(0x50)
	None MusicPackEndEventActionMap; // 0x4a0(0x50)
	None AudioPlayerBeginPlayEventActionData; // 0x4f0(0x08)
	None AudioPlayerEndPlayEventActionData; // 0x4f8(0x08)
	None BanksToLoad; // 0x30(0x10)
	None BanksToUnload; // 0x40(0x10)
	None ContainersToPlay; // 0x50(0x10)
	None ContainersToStop; // 0x60(0x10)
	None TablesToLoad; // 0x70(0x10)
	None TablesToUnload; // 0x80(0x10)
	None EventsToPost; // 0x90(0x10)
	None ActiveGameMode; // 0x28(0x10)
	None ActiveMapLevel; // 0x38(0x10)
	None ActiveMusicPack; // 0x48(0x10)
	None ActivePlayerCharacter; // 0x58(0x10)
	None IsSpectating; // 0x68(0x01)
	None PreviousGameMode; // 0x70(0x10)
	None PreviousMapLevel; // 0x80(0x10)
	None PreviousMusicPack; // 0x90(0x10)
	None PreviousPlayerCharacter; // 0xa0(0x10)
	None PreviousIsSpectating; // 0xb0(0x01)
	None AutoPickupMinPickupTimeSinceCreation; // 0xb0(0x04)
	None AutoPickupDistance; // 0xb4(0x04)
	None AutoPickupQueryInterval; // 0xb8(0x04)
	None bActivateAutoPickups; // 0xbc(0x01)
	None ItemPriorityMap; // 0xc0(0x50)
	None bAutoPickupClusivityEnabled; // 0x110(0x01)
	None ClusivityQuery; // 0x118(0x48)
	None LargeAvatarIcon; // 0x250(0x28)
	None LargeAvatarIconInfo; // 0x278(0x08)
	None PlayerTrackers; // 0xa8(0x10)
	None MaxTrackerTimer; // 0xb8(0x04)
	None BackfillRequestTimeToLive; // 0xe8(0x04)
	None BackfillRequestBatchDelay; // 0xec(0x04)
	None BackfillRankingType; // 0xf8(0x01)
	None bStartSealed; // 0xf9(0x01)
	None bDynamicSeal; // 0xfa(0x01)
	None DynamicSealInfo; // 0xfc(0x18)
	None SmallBannerIcon; // 0x250(0x28)
	None SmallBannerIconInfo; // 0x278(0x08)
	None LargeBannerIcon; // 0x280(0x28)
	None LargeBannerIconInfo; // 0x2a8(0x08)
	None UpsellScreenData; // 0x250(0x140)
	None OnBattlePassProgressionActivitiesReady; // 0x210(0x10)
	None BattlePassReady; // 0x220(0x01)
	None FilteredPlayer; // 0xb0(0x08)
	None FilteredTeam; // 0xb8(0x08)
	None PlayerSetChangeReaction; // 0xc0(0x01)
	None PostProcessMID; // 0x100(0x08)
	None PostProcessMIDParent; // 0x108(0x08)
	None ParticleSystem; // 0x110(0x08)
	None ParticleSystemParent; // 0x118(0x08)
	None bPlaying; // 0x120(0x01)
	None bReversing; // 0x121(0x01)
	None bLooping; // 0x122(0x01)
	None CurrentTime; // 0x124(0x04)
	None Damage; // 0x130(0x04)
	None InteractionBlockerManager; // 0x228(0x08)
	None InteractableComponent; // 0x230(0x08)
	None Duration; // 0x238(0x04)
	None bUseCollisionForInteractionDistance; // 0x23c(0x01)
	None bCanInteractFromBehind; // 0x23d(0x01)
	None bCanInteractWhileDowned; // 0x23e(0x01)
	None bShouldDisplayInteractionProgress; // 0x23f(0x01)
	None InteractionName; // 0x240(0x08)
	None MaxNumberOfInteractors; // 0x248(0x04)
	None InteractionPriority; // 0x24c(0x04)
	None bInteractionAllowed; // 0x250(0x01)
	None InteractionType; // 0x258(0x08)
	None OutlinedComponents; // 0x260(0x10)
	None ActiveInteractions; // 0x280(0x10)
	None NumActiveInteractions; // 0x290(0x04)
	None ProgressText; // 0x298(0x18)
	None PromptText; // 0x2b0(0x18)
	None OnInteractionStarted; // 0x2c8(0x10)
	None OnInteractionEnded; // 0x2d8(0x10)
	None OnInteractionComplete; // 0x2e8(0x10)
	None Result; // 0x28(0x01)
	None IsDLCVoucher; // 0x250(0x01)
	None SortOrder; // 0x254(0x04)
	None CurrencyDataByQtyTable; // 0x258(0x28)
	None FullSplash; // 0x280(0x28)
	None CurrencySmallIcon; // 0x2a8(0x28)
	None BoostCategory; // 0x2d0(0x01)
	None BoostDurationCategory; // 0x2d1(0x01)
	None IsActiveBooster; // 0x2d2(0x01)
	None BonusProgressionKeys; // 0x2d8(0x10)
	None SmallBorderIcon; // 0x250(0x28)
	None SmallBorderIconInfo; // 0x278(0x08)
	None LargeBorderIcon; // 0x280(0x28)
	None LargeBorderIconInfo; // 0x2a8(0x08)
	None FriendlySearchName; // 0x30(0x10)
	None Info; // 0x40(0x198)
	None BotDefinitions; // 0x30(0x10)
	None BotSideNumber; // 0x30(0x04)
	None bUseTeamInsteadOfSide; // 0x34(0x01)
	None BotTeamNumber; // 0x38(0x04)
	None BotWaves; // 0x40(0x10)
	None nmEncounterName; // 0x50(0x08)
	None CachedTeamState; // 0x60(0x08)
	None bFinishPrecacheOnBeginPlay; // 0x220(0x01)
	None bUseTeamInsteadOfSide; // 0x221(0x01)
	None SideNum; // 0x224(0x04)
	None TeamNum; // 0x228(0x04)
	None InitialBehaviorState; // 0x22c(0x01)
	None bUseInlineSpawnCollection; // 0x22d(0x01)
	None SpawnCollectionAsset; // 0x230(0x08)
	None SpawnCollectionInline; // 0x238(0x08)
	None bSpawnHidden; // 0x240(0x01)
	None bRandomBot; // 0x241(0x01)
	None bWithoutReplacement; // 0x242(0x01)
	None bRandomLoadout; // 0x243(0x01)
	None bPreserveAIControllers; // 0x244(0x01)
	None OverrideTeamSizeFromQueue; // 0x245(0x01)
	None FillTeamTo; // 0x248(0x04)
	None bUseAutoWayPointSets; // 0x24c(0x01)
	None WayPointSet; // 0x250(0x08)
	None ShouldReverseWayPointSetDirection; // 0x258(0x01)
	None SpawnPoints; // 0x260(0x10)
	None SpawnOnBeginPlay; // 0x270(0x04)
	None SpawnOnRoundStart; // 0x274(0x04)
	None SpawnOnRoundSetup; // 0x278(0x04)
	None SpawnOnCollectionTimeout; // 0x27c(0x04)
	None SpawnOnHackTimeout; // 0x280(0x04)
	None SpawnOnEscapeTimeout; // 0x284(0x04)
	None SpawnOnDownloadStart; // 0x288(0x04)
	None SpawnOnAlarm; // 0x28c(0x04)
	None MinSpawnCount; // 0x290(0x04)
	None MaxSpawnCount; // 0x294(0x04)
	None bMaintainCountOnBotDeath; // 0x298(0x01)
	None ActiveBots; // 0x2a0(0x10)
	None TeamState; // 0x2b0(0x08)
	None NextSequentialSpawnStart; // 0x2b8(0x04)
	None CurrentLoadoutSeed; // 0x2bc(0x04)
	None RelevantObjectiveStates; // 0x2c0(0x10)
	None RelevantGameStatesForObjectiveSpawning; // 0x2d0(0x10)
	None NumberOfTimesToSpawnForObjectiveRelevancy; // 0x2e0(0x04)
	None RelevancyVolume; // 0x2e8(0x08)
	None ContainedPlayers; // 0x2f0(0x10)
	None ContainedObjectives; // 0x300(0x10)
	None JobConfigs; // 0x30(0x50)
	None InnerDeadZone; // 0x38(0x08)
	None OuterDeadZone; // 0x40(0x08)
	None bAddToLoadout; // 0xc8(0x01)
	None ItemsToGive; // 0xd0(0x10)
	None SlotsToRemove; // 0xe0(0x10)
	None bShouldUsePerceptionFilter; // 0x30(0x01)
	None SensesToUse; // 0x38(0x10)
	None PerceptionFilter; // 0x48(0x170)
	None MinPerceivedStimuliCount; // 0x1b8(0x04)
	None bCheckCombatTarget; // 0x1bc(0x01)
	None bCheckTargetVisible; // 0x1bd(0x01)
	None bCheckTargetHidden; // 0x1be(0x01)
	None bCheckDistance; // 0x1bf(0x01)
	None MinDistanceMeters; // 0x1c0(0x04)
	None MaxDistanceMeters; // 0x1c4(0x04)
	None ActionName; // 0x30(0x10)
	None bCheckAbilityReady; // 0x90(0x01)
	None AbilityReady; // 0x91(0x01)
	None bCheckActive; // 0x92(0x01)
	None AbilityActive; // 0x93(0x01)
	None SensesToUse; // 0x68(0x10)
	None PerceptionFilter; // 0x78(0x170)
	None SensesToUse; // 0x90(0x10)
	None PerceptionEvent; // 0xa0(0x08)
	None Ability; // 0x68(0x28)
	None AbilityValidatorTable; // 0x68(0x08)
	None CharacterStateFilter; // 0x90(0x98)
	None RequiredRoles; // 0x68(0x10)
	None RequireAll; // 0x78(0x01)
	None AbilityValidatorTable; // 0x68(0x08)
	None AbilityExecutionType; // 0x70(0x01)
	None SourceBlackboardActor; // 0x68(0x28)
	None SourceKey; // 0x90(0x28)
	None TargetBlackboardActor; // 0xb8(0x28)
	None TargetKey; // 0xe0(0x28)
	None TargetValue; // 0x90(0x04)
	None Time; // 0x68(0x04)
	None ArithmeticOperation; // 0x6c(0x01)
	None Objective; // 0x90(0x08)
	None Time; // 0x68(0x04)
	None ArithmeticOperation; // 0x6c(0x01)
	None RoundNumber; // 0x68(0x04)
	None ArithmeticOperation; // 0x6c(0x01)
	None DestroyableHazardStateFilter; // 0x90(0x07)
	None DestructibleStateFilter; // 0x90(0x02)
	None ArithmeticOperation; // 0x90(0x01)
	None DistanceThreshold; // 0x94(0x04)
	None EquipPoint; // 0x68(0x08)
	None bCheckIsEquipped; // 0x70(0x01)
	None IsEquipped; // 0x71(0x01)
	None bCheckIsActiveWeapon; // 0x72(0x01)
	None IsActiveWeapon; // 0x73(0x01)
	None bCheckIsReloading; // 0x74(0x01)
	None IsReloading; // 0x75(0x01)
	None bCheckEquipmentType; // 0x76(0x01)
	None EquipmentType; // 0x77(0x01)
	None ComparedEquipmentTypes; // 0x78(0x20)
	None bCheckEquipmentClass; // 0x98(0x01)
	None EquipmentClassComparison; // 0x99(0x01)
	None ComparedEquipmentClass; // 0xa0(0x28)
	None bCheckComponentClass; // 0xc8(0x01)
	None ComponentClassComparison; // 0xc9(0x01)
	None ComparedComponentClass; // 0xd0(0x28)
	None bCheckMatchInProgress; // 0x68(0x01)
	None MatchInProgress; // 0x69(0x01)
	None bCheckInSetup; // 0x6a(0x01)
	None InSetup; // 0x6b(0x01)
	None bCheckMatchPhase; // 0x6c(0x01)
	None MatchPhase; // 0x6d(0x01)
	None MatchPhaseName; // 0x70(0x08)
	None EquipPoint; // 0x68(0x08)
	None ClipOperation; // 0x70(0x01)
	None ClipPercentage; // 0x74(0x04)
	None bOrCheck; // 0x78(0x01)
	None InventoryOperation; // 0x79(0x01)
	None InventoryPercentage; // 0x7c(0x04)
	None MaxTimeSinceHit; // 0x68(0x04)
	None CachedWeaponClassKey; // 0x68(0x28)
	None InteractableStateFilter; // 0x90(0x18)
	None Action; // 0x68(0x08)
	None DropLocationKey; // 0x68(0x28)
	None DropLocationVectorKey; // 0x90(0x28)
	None LookAheadDistance; // 0x68(0x04)
	None FallDistance; // 0x6c(0x04)
	None GameModeClass; // 0x68(0x08)
	None EquipPoint; // 0x68(0x08)
	None EquipPoint; // 0x68(0x08)
	None ItemDropStateFilter; // 0x90(0x10)
	None SensesToUse; // 0x68(0x10)
	None ArithmeticOperation; // 0x78(0x01)
	None EnemyCount; // 0x7c(0x04)
	None DistanceThreshold; // 0x80(0x04)
	None bCheckLOS; // 0x84(0x01)
	None MinCoolDownTime; // 0x68(0x04)
	None MaxCoolDownTime; // 0x6c(0x04)
	None PointKey; // 0x68(0x28)
	None WeightedEntries; // 0x68(0x10)
	None CriticalWeightDifference; // 0x78(0x04)
	None OverrideMinRadius; // 0x90(0x04)
	None DifficultyName; // 0x30(0x10)
	None ObjectiveName; // 0x30(0x10)
	None ObjectiveTargetKeyName; // 0x40(0x10)
	None RequiredActions; // 0x50(0x10)
	None RequiredAbilities; // 0x60(0x10)
	None SensesToUse; // 0x30(0x10)
	None PerceptionFilter; // 0x40(0x170)
	None SelectCombatTargetOfResult; // 0x1b0(0x01)
	None SelectClosestTarget; // 0x1b1(0x01)
	None SelectFurthestTarget; // 0x1b2(0x01)
	None SelectRandomTarget; // 0x1b3(0x01)
	None ActivatedAbility; // 0x70(0x28)
	None LookRotationRate; // 0xa4(0x04)
	None bLockUntilComplete; // 0xa8(0x01)
	None HorizonAngle; // 0xac(0x0c)
	None CorridorSmoothingCount; // 0xb8(0x04)
	None AimRadius; // 0xc0(0x04)
	None AimOffset; // 0xc4(0x0c)
	None AimAheadSeconds; // 0xd0(0x04)
	None ActorKey; // 0x70(0x28)
	None LocationKey; // 0x98(0x28)
	None CopyTarget; // 0x70(0x28)
	None FacingVector; // 0x98(0x28)
	None TargetKey; // 0x70(0x28)
	None WeaponOverrideKey; // 0x98(0x28)
	None OutTargetLocationKey; // 0xc0(0x28)
	None OutIntendedTargetLocationKey; // 0xe8(0x28)
	None bDrawDebug; // 0x110(0x01)
	None FloorHeightFudgeFactor; // 0x118(0x04)
	None FullCoverOffsetDistance; // 0x11c(0x04)
	None MediumCoverHeightOffset; // 0x120(0x04)
	None MediumCoverHeightOffsetCrouched; // 0x124(0x04)
	None InteractTarget; // 0x70(0x28)
	None MapPointActorKey; // 0x70(0x28)
	None MapPointRotationKey; // 0x98(0x28)
	None ShouldHold; // 0x98(0x01)
	None DefensePoint; // 0x70(0x28)
	None DirectionKey; // 0x70(0x28)
	None LookRotationRate; // 0x98(0x04)
	None Loudness; // 0x70(0x04)
	None EventTag; // 0x74(0x08)
	None SpeedMultiplier; // 0xb0(0x04)
	None bSprint; // 0xb4(0x01)
	None MoveAction; // 0xb8(0x08)
	None SprintAction; // 0xc0(0x08)
	None AcceptableRadiusOverrideKey; // 0xc8(0x28)
	None SpeedMultiplier; // 0xb8(0x04)
	None bSprint; // 0xbc(0x01)
	None MoveAction; // 0xc0(0x08)
	None SprintAction; // 0xc8(0x08)
	None PreferredAngles; // 0x70(0x10)
	None SecondaryAngles; // 0x80(0x10)
	None MinDodgeRollMovementPercent; // 0x90(0x04)
	None DodgeRollCheckDistance; // 0x94(0x04)
	None MaximumHeightChangePerCheckDistance; // 0x98(0x04)
	None VOEvent; // 0x70(0x08)
	None ChanceToPlay; // 0x78(0x04)
	None WayPoint; // 0x70(0x28)
	None DefensePoint; // 0x98(0x28)
	None SourceKeyVector; // 0x78(0x10)
	None TargetKeyVector; // 0x88(0x10)
	None SourceFloatVector; // 0x98(0x10)
	None TargetFloatKeyVector; // 0xa8(0x10)
	None TempBools; // 0xb8(0x10)
	None TempClasses; // 0xc8(0x10)
	None TempEnums; // 0xd8(0x10)
	None TempFloats; // 0xe8(0x10)
	None TempInts; // 0xf8(0x10)
	None TempNames; // 0x108(0x10)
	None TempNativeEnums; // 0x118(0x10)
	None TempObjects; // 0x128(0x10)
	None TempRotators; // 0x138(0x10)
	None TempStrings; // 0x148(0x10)
	None TempVectors; // 0x158(0x10)
	None BlackboardKey; // 0x70(0x28)
	None SensesToUse; // 0x98(0x10)
	None PerceptionFilter; // 0xa8(0x170)
	None SelectClosestTarget; // 0x218(0x01)
	None SelectFurthestTarget; // 0x219(0x01)
	None SelectRandomTarget; // 0x21a(0x01)
	None DefensePointActorKey; // 0x70(0x28)
	None InitializeDropLocation; // 0x70(0x01)
	None UseObjectiveProximity; // 0x71(0x01)
	None MaxBotsAtDropLocation; // 0x74(0x04)
	None InitializeWayPointSet; // 0x78(0x01)
	None DropLocationKey; // 0x80(0x28)
	None DropLocationVectorKey; // 0xa8(0x28)
	None FlightLocationVectorKey; // 0xd0(0x28)
	None EvadePointKey; // 0x70(0x28)
	None SensesToUse; // 0x98(0x10)
	None PerceptionFilter; // 0xa8(0x170)
	None Distance; // 0x218(0x04)
	None IngressPointActorKey; // 0x70(0x28)
	None bShouldLeave; // 0x98(0x01)
	None ObjectiveTargetKey; // 0x70(0x28)
	None ObjectiveTypeKey; // 0x98(0x28)
	None BlackboardKeyObjectives; // 0xc0(0x10)
	None CurrentHighestPriorityObjective; // 0xd8(0x08)
	None CurrentHighestPriorityActor; // 0xe0(0x08)
	None CopyTarget; // 0x70(0x28)
	None KeyToCopy; // 0x98(0x28)
	None BehaviorState; // 0x70(0x01)
	None SourceBlackboardActor; // 0x70(0x28)
	None SourceKey; // 0x98(0x28)
	None TargetBlackboardActor; // 0xc0(0x28)
	None TargetKey; // 0xe8(0x28)
	None BoolValue; // 0x98(0x01)
	None FloatValue; // 0x98(0x04)
	None Objective; // 0x98(0x08)
	None Duration; // 0x98(0x04)
	None RandomDeviation; // 0x9c(0x04)
	None WayPoint; // 0x70(0x28)
	None DefenseTimer; // 0x98(0x28)
	None WeaponRangeConfigTable; // 0x70(0x08)
	None EquipPoint; // 0x78(0x08)
	None IdealAttackRangeKey; // 0x80(0x28)
	None StartAttackRangeKey; // 0xa8(0x28)
	None TargetSkydiveLocation; // 0xd0(0x28)
	None BlendStartDistance; // 0xf8(0x04)
	None BlendEndDistance; // 0xfc(0x04)
	None DirectionAngleMax; // 0xf0(0x04)
	None DirectionAngleMin; // 0xf4(0x04)
	None bInvertAngle; // 0xf8(0x01)
	None MinDistance; // 0xfc(0x04)
	None MaxDistance; // 0x100(0x04)
	None CachedWeaponClassKey; // 0x70(0x28)
	None IntervalCheckRangeMeters; // 0x70(0x04)
	None CombatTargetKey; // 0x78(0x28)
	None IdealAttackRangeKey; // 0xa0(0x28)
	None StartAttackRangeKey; // 0xc8(0x28)
	None InIdealRangeKey; // 0xf0(0x28)
	None InAttackRangeKey; // 0x118(0x28)
	None TooCloseKey; // 0x140(0x28)
	None bEnable; // 0x70(0x01)
	None PointDamageMultiplier; // 0x290(0x04)
	None RadialDamageMultiplier; // 0x294(0x04)
	None MaxHealth; // 0x298(0x04)
	None Health; // 0x29c(0x04)
	None SelfDestructDelay; // 0x2a0(0x04)
	None KillDestructionDelay; // 0x2a4(0x04)
	None Box; // 0x2b8(0x08)
	None MeshComponent; // 0x2c0(0x08)
	None SkinObject; // 0x2c8(0x08)
	None ApparelObjectsToListenTo; // 0x2d0(0x10)
	None FullKeywordList; // 0x2e0(0x10)
	None KSNavModifierComponent; // 0x2f0(0x08)
	None OnBuildComponentDestroyedDel; // 0x2f8(0x10)
	None InteractionBlockerManager; // 0x308(0x08)
	None InteractableComponent; // 0x310(0x08)
	None Interactors; // 0x318(0x10)
	None OnBuildReclaim; // 0x328(0x10)
	None bCanReclaim; // 0x338(0x01)
	None RelativeInteractionPoint; // 0x33c(0x0c)
	None ReclaimTime; // 0x348(0x04)
	None bRestoreWeaponOnReclaim; // 0x34c(0x01)
	None WeaponToRestore; // 0x350(0x08)
	None ReclaimItemName; // 0x358(0x18)
	None ReclaimInteractionType; // 0x370(0x08)
	None StimuliSourceComponent; // 0x378(0x08)
	None OriginalOwnerId; // 0x388(0x04)
	None ItemTags; // 0x390(0x10)
	None DetectionSphere; // 0x3a8(0x08)
	None DetectionSphereRadius; // 0x3b0(0x04)
	None MaxProjectilesDestroyed; // 0x3b4(0x04)
	None TimeToActivate; // 0x3b8(0x04)
	None MarkedProjectiles; // 0x3c0(0x10)
	None bIsActive; // 0x3d4(0x01)
	None ShopperManagers; // 0x3a0(0x10)
	None ValidBuildMaterial; // 0x220(0x08)
	None InvalidBuildMaterial; // 0x228(0x08)
	None Box; // 0x230(0x08)
	None MeshComponent; // 0x238(0x08)
	None SkinObject; // 0x240(0x08)
	None ApparelObjectsToListenTo; // 0x248(0x10)
	None FullKeywordList; // 0x258(0x10)
	None CachedAimAssistVisibility; // 0x4d4(0x01)
	None NextValidAimAssistVisibilityTime; // 0x4d8(0x04)
	None bCanEverBeConsideredForAimAssist; // 0x4dc(0x01)
	None bIgnoreCollisionWithTeammates; // 0x4dd(0x01)
	None ReleasedCachedTimeSeconds; // 0x4e0(0x04)
	None OnPlayerStateChangedDel; // 0x4f0(0x10)
	None PlayerModManagerOverride; // 0x518(0x08)
	None Health; // 0x520(0x04)
	None OnHealthChangedDel; // 0x528(0x10)
	None OnKilled; // 0x538(0x10)
	None OnPlayHitFromPointDamageDel; // 0x548(0x10)
	None OnPlayHitFromRadialDamageDel; // 0x558(0x10)
	None ActiveFXCurveComponents; // 0x5d0(0x50)
	None BlendableSettings; // 0x620(0x550)
	None CharacterAkComponent; // 0xba0(0x08)
	None HitByShieldedAkEvent; // 0xba8(0x08)
	None HitByArmorBreakAkEvent; // 0xbb0(0x08)
	None bIsHovered; // 0xbb8(0x01)
	None bUseScreenSizeCutoff; // 0xbb9(0x01)
	None PlayerHoverRange; // 0xbbc(0x04)
	None HoverMinScreenHeightPct; // 0xbc0(0x04)
	None HoverMinScreenHeightPctADS; // 0xbc4(0x04)
	None bUseConeHover; // 0xbc8(0x01)
	None HoverConeAngle; // 0xbcc(0x04)
	None ADSHoverConeScreenRadius; // 0xbd0(0x04)
	None AlwaysHoverDistance; // 0xbd4(0x04)
	None bUnhoverWhenOccludedByHoveredCharacter; // 0xbd8(0x01)
	None CachedCameraFOV; // 0xbdc(0x04)
	None CachedViewPortSize; // 0xbe0(0x08)
	None CachedHalfTanFOV; // 0xbe8(0x04)
	None MinimapDisplayWidget; // 0xc40(0x28)
	None FullmapDisplayWidget; // 0xc68(0x28)
	None OverlayDisplayWidget; // 0xc90(0x28)
	None PawnId; // 0xcd0(0x01)
	None OnTakeArmorDamage; // 0xcd8(0x10)
	None HealthRegenerationPerSecond; // 0xd18(0x04)
	None HealthRegenerationPeriod; // 0xd1c(0x04)
	None HealthRegenerationDelay; // 0xd20(0x04)
	None OnHealthRegenDelayTimerActive; // 0xd28(0x10)
	None OnHealthRegenDelayTimerTick; // 0xd38(0x10)
	None OnHealthRegenDelayTimerComplete; // 0xd48(0x10)
	None HealthRegenDelayTimer; // 0xd58(0x08)
	None CurrentOverheal; // 0xd68(0x04)
	None OverhealDecayPerSecond; // 0xd6c(0x04)
	None OverhealDecayPeriod; // 0xd70(0x04)
	None OnOverhealChanged; // 0xd98(0x10)
	None QueuedMovementForgivenessPeriod; // 0xda8(0x04)
	None QueuedMovementForgivenessEndTime; // 0xdac(0x04)
	None CurrentQueuedMovement; // 0xdb0(0x01)
	None FreeFallCollisionProfileName; // 0xdb4(0x08)
	None CurrentFreeFallCameraShake; // 0xdcc(0x08)
	None FreeFallCameraShake; // 0xde0(0x08)
	None OnEndFreeFallDel; // 0xde8(0x10)
	None bRealWantsCrouch; // 0xdf8(0x01)
	None OnSprintChanged; // 0xe00(0x10)
	None bReplicatedSprinting; // 0xe10(0x01)
	None ReplicatedAccelDirection; // 0xe14(0x0c)
	None OnPowerSlideChanged; // 0xe20(0x10)
	None bReplicatedPowerSlide; // 0xe30(0x02)
	None DodgeRollDuration; // 0xe34(0x04)
	None bReplicatedDodgeRoll; // 0xe38(0x01)
	None OnDOdgeRollChanged; // 0xe40(0x10)
	None OnNearMiss; // 0xe80(0x10)
	None NearMissRange; // 0xe98(0x04)
	None NearMissCooldownTime; // 0xe9c(0x04)
	None NearMissADSCameraShakeScaleOverride; // 0xea0(0x04)
	None NearMissSpecialEffect; // 0xea8(0x50)
	None NearMissFrontCameraShake; // 0xef8(0x08)
	None NearMissBackCameraShake; // 0xf00(0x08)
	None NearMissRightCameraShake; // 0xf08(0x08)
	None NearMissLeftCameraShake; // 0xf10(0x08)
	None LungeInfo; // 0xf18(0x10)
	None OnLungeChanged; // 0xf28(0x10)
	None bReplicatedAbilityMovement; // 0xf38(0x01)
	None bReplicatedZipLineBracing; // 0xf39(0x01)
	None bReplicatedZipLineEnding; // 0xf3a(0x01)
	None bReplicatedUpline; // 0xf3b(0x01)
	None SecondsAwayToBraceOnZipLine; // 0xf3c(0x04)
	None SecondsAwayToEndOnZipLine; // 0xf40(0x04)
	None ReplicatedZipLineInfo; // 0xf48(0x10)
	None bPrevPressedJump; // 0xf58(0x01)
	None OnJumpedDel; // 0xf60(0x10)
	None OnLandedDel; // 0xf70(0x10)
	None OnStartFallingDel; // 0xf80(0x10)
	None bReplicatedStun; // 0xfa6(0x01)
	None bReplicatedHardLand; // 0xfc8(0x01)
	None CurrentSprintCameraShake; // 0x1000(0x08)
	None SprintCameraShake; // 0x1010(0x08)
	None CurrentLandedCameraShake; // 0x1018(0x08)
	None LandedCameraShake; // 0x1028(0x08)
	None OnAimStateChanged; // 0x1030(0x10)
	None ProjectileThrowComponent; // 0x1040(0x08)
	None GrenadeThrowComponent; // 0x1048(0x08)
	None MeleeThrowComponent; // 0x1050(0x08)
	None ReplicatedAimState; // 0x1058(0x01)
	None LastReplicatedAimState; // 0x1059(0x01)
	None bEnableSmoothedAimRotation; // 0x105a(0x01)
	None ViewInfo; // 0x105c(0x08)
	None bUseCameraLagSubstepping; // 0x1064(0x01)
	None CameraLagMaxTimeStep; // 0x1068(0x04)
	None CameraRotationLagSpeed; // 0x106c(0x04)
	None PreviousDesiredRot; // 0x1070(0x0c)
	None SmoothedViewRotation; // 0x107c(0x0c)
	None bIsSmoothingAimRotation; // 0x1088(0x01)
	None DeathInfo; // 0x1090(0x28)
	None InstantDeathDamageType; // 0x10b8(0x08)
	None bRadialMiss; // 0x10c0(0x01)
	None LastCharacterToDamageMe; // 0x10c8(0x08)
	None OnDeathStateChangedDel; // 0x10e8(0x10)
	None HeadCollisionComponent; // 0x1130(0x08)
	None ZiplineMeshComponent; // 0x1138(0x08)
	None UplineMeshComponent; // 0x1140(0x08)
	None BackupPlayerState; // 0x1148(0x08)
	None HeadBones; // 0x1158(0x10)
	None LimbBones; // 0x1168(0x10)
	None CachedBoneToHitLocationType; // 0x1178(0x50)
	None HeadshotPassthroughBones; // 0x11c8(0x10)
	None FriendlyVisibilityRevealParameters; // 0x11e0(0x48)
	None AimedAtRevealParameters; // 0x1228(0x48)
	None KilledByRevealParameters; // 0x1270(0x48)
	None KilledByRevealTimeSeconds; // 0x12b8(0x04)
	None bRevealed; // 0x12bc(0x01)
	None CurrentRevealColor; // 0x12c0(0x10)
	None OutlineZFadeMin; // 0x12d0(0x04)
	None OutlineZFadeMax; // 0x12d4(0x04)
	None SpawnImmuneOutlineColorEnemy; // 0x12d8(0x10)
	None FriendlyOutlineFadeDistanceMin; // 0x12e8(0x04)
	None FriendlyOutlineFadeDistanceMax; // 0x12ec(0x04)
	None bReevaluateSilhouetteNextTick; // 0x12f0(0x01)
	None bForceSilhouette; // 0x12f1(0x01)
	None ForcedSilhouetteType; // 0x12f2(0x01)
	None bForcedFillSilhouette; // 0x12f3(0x01)
	None bForcedMarkSilhouette; // 0x12f4(0x01)
	None SilhouetteType; // 0x12f5(0x01)
	None bFillSilhouette; // 0x12f6(0x01)
	None bMarkSilhouette; // 0x12f7(0x01)
	None SilhouetteQualifier; // 0x12f8(0x01)
	None bSilhouetteComponentsDirty; // 0x1310(0x01)
	None CachedSilhouetteComponents; // 0x1318(0x10)
	None OnRootChanged; // 0x1328(0x10)
	None ReplicatedMantleInfo; // 0x1338(0x44)
	None OnMantleChanged; // 0x1380(0x10)
	None InteractionState; // 0x13a8(0x08)
	None InteractionHeight; // 0x13b0(0x04)
	None InteractionTime; // 0x13b4(0x04)
	None OnCharacterStartedMovingDel; // 0x13d0(0x10)
	None OnCharacterStoppedMovingDel; // 0x13e0(0x10)
	None OnSwimmingChangedDel; // 0x1408(0x10)
	None OnSubmergedChangedDel; // 0x1418(0x10)
	None OnBreathUpdate; // 0x1428(0x10)
	None bIsSubmerged; // 0x1438(0x01)
	None MaximumLungCapacity; // 0x143c(0x04)
	None CurrentLungCapacity; // 0x1440(0x04)
	None LungCapacityRecoveryTime; // 0x1444(0x04)
	None bDestroyOnRoundSetup; // 0x1448(0x01)
	None RoundCreated; // 0x1449(0x01)
	None CharacterSockets; // 0x1468(0x50)
	None OnEmoteStartedPlaying; // 0x14b8(0x10)
	None OnEmoteStoppedPlaying; // 0x14c8(0x10)
	None bIsSpawnImmune; // 0x14d8(0x01)
	None bTapRadialButtonToUseLastSelectedItem; // 0x151a(0x01)
	None ReleasedInputsOnOpenUI; // 0x15f0(0x10)
	None ExcludedReleasedInputsOnOpenRadialMenu; // 0x1600(0x10)
	None ExcludedReleasedInputsOnOpenEscapeMenu; // 0x1610(0x10)
	None ExcludedReleasedInputsOnOpenScoreboard; // 0x1620(0x10)
	None ExcludedReleasedInputsOnOpenMap; // 0x1630(0x10)
	None ReleasedInputsOnCloseRadialMenu; // 0x1640(0x10)
	None OnPossessedBy; // 0x1650(0x10)
	None OnUnpossessed; // 0x1660(0x10)
	None CachedKSPlayerController; // 0x1670(0x08)
	None InteractionBlockerManager; // 0x1678(0x08)
	None InteractionType; // 0x1680(0x08)
	None InteractableComponent; // 0x1688(0x08)
	None ObjectiveInfo; // 0x1690(0x68)
	None ObjectiveTimerInfo; // 0x16f8(0x38)
	None ObjectiveCaptureInfo; // 0x1730(0x14)
	None AutoPickupComponent; // 0x1748(0x08)
	None bProcessingReverseFriendlyFireDamageEvent; // 0x1750(0x01)
	None OutOfBoundsManager; // 0x1770(0x08)
	None RumbleDamageAudioEvent; // 0x1778(0x08)
	None RumbleJumpAudioEvent; // 0x1780(0x08)
	None RumbleReviveAudioEvent; // 0x1788(0x08)
	None RumbleReviveAudioEventEnd; // 0x1790(0x08)
	None RumbleDownedAudioEvent; // 0x1798(0x08)
	None RumbleDownedAudioEventEnd; // 0x17a0(0x08)
	None MinimumFlinchHeight; // 0x17b0(0x04)
	None MinimumFlinchDamage; // 0x17b4(0x04)
	None MaximumFlinchHeight; // 0x17b8(0x04)
	None MaximumFlinchDamage; // 0x17bc(0x04)
	None FlinchDuration; // 0x17c0(0x04)
	None FlinchRecoveryRate; // 0x17c4(0x04)
	None bFlinchSnipersOnly; // 0x17c8(0x01)
	None DamageRecord; // 0x17d0(0x50)
	None DamageRecordResetTime; // 0x1820(0x04)
	None DamageRecordResetTimer; // 0x1828(0x08)
	None ReplicatedShotgunHits; // 0x1830(0x88)
	None OnNewShotgunHit; // 0x18b8(0x10)
	None KillCamHitRecordTime; // 0x1918(0x04)
	None OnLocalViewChanged; // 0x1938(0x10)
	None LocalViewers; // 0x1948(0x10)
	None RepossessState; // 0x1958(0x18)
	None OnCanRemoveBackPackChanged; // 0x1970(0x10)
	None OnCharacterFreeFallStartedDel; // 0x1980(0x10)
	None OnCharacterFreeFallCompletedDel; // 0x1990(0x10)
	None RemoveBackpackInteractionPromptText; // 0x19a8(0x18)
	None SkyDiveMaxPitch; // 0x19c0(0x04)
	None SkyDiveMinPitch; // 0x19c4(0x04)
	None SkyDiveExitDistance; // 0x19c8(0x04)
	None SkyDiveExitThreshold; // 0x19cc(0x04)
	None SkyDiveForceExitDistance; // 0x19d0(0x04)
	None bLeftHandMantleIK; // 0x19d4(0x01)
	None bRightHandMantleIK; // 0x19d5(0x01)
	None LeftHandMantleIKLocation; // 0x19d8(0x0c)
	None RightHandMantleIKLocation; // 0x19e4(0x0c)
	None LeftHandMantleIKAlpha; // 0x19f0(0x04)
	None RightHandMantleIKAlpha; // 0x19f4(0x04)
	None bFadeOutLeftHandMantleIK; // 0x19f8(0x01)
	None bFadeOutRightHandMantleIK; // 0x19f9(0x01)
	None SmoothedComponents; // 0x1a00(0x10)
	None RegisteredSmoothingComponents; // 0x1a10(0x10)
	None SprintImpulseCurve; // 0x1ab8(0x08)
	None SprintPressLeeway; // 0x1ac4(0x04)
	None SprintLeewayExpire; // 0x1ac8(0x04)
	None bFacingVaultWall; // 0x1acc(0x01)
	None bWantsToAutoSprint; // 0x1acd(0x01)
	None bAutoSprintTimerComplete; // 0x1ace(0x01)
	None AutoSprintDelay; // 0x1ad0(0x04)
	None LeftHandMantleIKOffset; // 0x1ae0(0x04)
	None RightHandMantleIKOffset; // 0x1ae4(0x04)
	None HandMantleIKFadeTime; // 0x1ae8(0x04)
	None MantleIKHandsToWallForwardOffset; // 0x1aec(0x04)
	None RiseFromCrouchDelayTime; // 0x1af0(0x04)
	None bUsingEmoteCamera; // 0x1af8(0x01)
	None EmoteFinishedDisableFireTimeSeconds; // 0x1afc(0x04)
	None ActiveEmoteActionRestrictorID; // 0x1b00(0x04)
	None RemoveEmoteActionRestrictorTimerHandle; // 0x1b08(0x08)
	None OnCrouchStartedDel; // 0x1b58(0x10)
	None OnCrouchEndedDel; // 0x1b68(0x10)
	None GamepadInput; // 0x1b78(0x04)
	None HasGamepadInput; // 0x1b7c(0x01)
	None bZiplineActive; // 0x1b7d(0x01)
	None AbilityMovementMod; // 0x1b80(0x08)
	None ZiplineMeshHeightAdjust; // 0x1b88(0x04)
	None DrownDamagePeriod; // 0x1b8c(0x04)
	None DrownPerTickDamage; // 0x1b90(0x04)
	None DrownDamageType; // 0x1b98(0x08)
	None PositionHistoryComponent; // 0x1ba8(0x08)
	None OnOutOfBoundsBeginDel; // 0x1bb8(0x10)
	None OnOutOfBoundsWarningEndDel; // 0x1bc8(0x10)
	None OnOutOfBoundsEndDel; // 0x1bd8(0x10)
	None OutOfBoundsInfo; // 0x1be8(0x08)
	None bLocalOutOfBounds; // 0x1bf0(0x01)
	None ReplicatedEMPLockoutTimer; // 0x1bf8(0x38)
	None bIsEMPLocked; // 0x1c48(0x01)
	None OnEMPLocked; // 0x1c50(0x10)
	None OnEMPLockoutTick; // 0x1c60(0x10)
	None bIsOnFire; // 0x1c88(0x01)
	None CameraHandler; // 0x1c90(0x08)
	None CameraRootComponent; // 0x1c98(0x08)
	None MainCameraBoom; // 0x1ca0(0x08)
	None MainCameraComponent; // 0x1ca8(0x08)
	None SprintCameraBoom; // 0x1cb0(0x08)
	None SprintCameraComponent; // 0x1cb8(0x08)
	None TransitionCameraBoom; // 0x1cc0(0x08)
	None TransitionCameraComponent; // 0x1cc8(0x08)
	None ShoulderCameraBoom; // 0x1cd0(0x08)
	None ShoulderCameraComponent; // 0x1cd8(0x08)
	None FirstPersonCameraComponent; // 0x1ce0(0x08)
	None TabletCameraBoom; // 0x1ce8(0x08)
	None TabletCameraComponent; // 0x1cf0(0x08)
	None ActionCameraBoom1; // 0x1cf8(0x08)
	None ActionCameraComponent; // 0x1d00(0x08)
	None SwimCameraBoom; // 0x1d08(0x08)
	None SwimCameraComponent; // 0x1d10(0x08)
	None MountedCameraBoom; // 0x1d18(0x08)
	None MountedCameraComponent; // 0x1d20(0x08)
	None ActiveCameraComponent; // 0x1d28(0x08)
	None PendingCameraComponent; // 0x1d30(0x08)
	None CrouchAOSAimVertOffset; // 0x1d3c(0x04)
	None CrouchAOSCamVertOffsetBlendTime; // 0x1d40(0x04)
	None CrouchAimingCapsuleHeightAdjustment; // 0x1d44(0x04)
	None AimSnapThrottleTime; // 0x1d60(0x04)
	None LockoutCameraCooldownSpeed; // 0x1d68(0x04)
	None AutoShoulderSwapExtent; // 0x1d88(0x0c)
	None AutoShoulderSwapForwardCheckDist; // 0x1d94(0x04)
	None AutoShoulderSwapRightCheckDist; // 0x1d98(0x04)
	None AutoShoulderSwapRightForwardCheckDist; // 0x1d9c(0x04)
	None LockedAutoShoulderSwapTimeThreshold; // 0x1da0(0x04)
	None LockedAutoShoulderSwapWeaponFireTime; // 0x1da4(0x04)
	None LockedAutoShoulderSwapDistance; // 0x1da8(0x04)
	None AimState; // 0x1dc0(0x01)
	None DesiredAimState; // 0x1dc1(0x01)
	None bAimPressed; // 0x1dc2(0x01)
	None bWasAimDownSightsWhenAimPressed; // 0x1dc3(0x01)
	None bWasAimAlternateWhenAimPressed; // 0x1dc4(0x01)
	None AimHoldTime; // 0x1dc8(0x04)
	None AimOverShoulderHoldTime; // 0x1dcc(0x04)
	None MaterialHideTypeMap; // 0x1dd0(0x50)
	None MaterialIndexesToHide; // 0x1e20(0x50)
	None HiddenMaterials; // 0x1e70(0x50)
	None bIsAimLocked; // 0x1ec0(0x01)
	None OnAimLockedChangedDel; // 0x1ec8(0x10)
	None bIsCrosshairHidden; // 0x1ed8(0x01)
	None OnCrosshairHiddenChangedDel; // 0x1ee0(0x10)
	None OnCannonBonusAmmoRecieved; // 0x1ef0(0x10)
	None AvailableEquipPoints_New; // 0x1f60(0x20)
	None InitialInventory; // 0x1f80(0x10)
	None InitialAmmo; // 0x1f90(0x10)
	None EquipmentManagerComponent; // 0x1fa0(0x08)
	None bDropAmmoOnDeath; // 0x1fa8(0x01)
	None WeaponSlotsToDropOnDeath; // 0x1fb0(0x20)
	None WeaponSlotsToDropOnDowned; // 0x1fd0(0x20)
	None ActiveWeaponSlotTiers; // 0x1ff0(0x10)
	None GrenadeSlotTiers; // 0x2000(0x10)
	None LootLockerInventory; // 0x2010(0x10)
	None StartingActiveWeaponEquipPoint; // 0x2020(0x08)
	None MainSwapHandlerProfile; // 0x2028(0x08)
	None GadgetSwapHandlerProfile; // 0x2030(0x08)
	None MedpackSwapHandlerProfile; // 0x2038(0x08)
	None PassiveSwapHandlerProfile; // 0x2040(0x08)
	None QuickMeleeSwapHandlerProfile; // 0x2048(0x08)
	None EmergencyWeaponAsset; // 0x2050(0x08)
	None ObjectiveWeaponDropPrompt; // 0x2060(0x18)
	None ObjectiveWeaponDropProgressText; // 0x2078(0x18)
	None DropObjectiveWeaponInteractTime; // 0x2090(0x04)
	None OnCharacterStartedWeaponFireNativeDel; // 0x2098(0x10)
	None bSelfDestruct; // 0x20a8(0x01)
	None SubTypeComponentIndexMap; // 0x2120(0x50)
	None MeleeHoldTime; // 0x2170(0x04)
	None PrimaryTier; // 0x2174(0x04)
	None SecondaryTier; // 0x2178(0x04)
	None MeleeTier; // 0x217c(0x04)
	None WeaponDropHoldTime; // 0x2180(0x04)
	None WeaponDoubleTapTime; // 0x2184(0x04)
	None LastActiveWeaponFireTimestamp; // 0x2188(0x04)
	None OnActiveWeaponChangedDel; // 0x2190(0x10)
	None OnActiveGrenadeChangedDel; // 0x21b8(0x10)
	None OnActiveMedPackChangedDel; // 0x21e0(0x10)
	None MeleeHoldTimer; // 0x2208(0x08)
	None DoubleTapTimer; // 0x2210(0x08)
	None DropHoldTimer; // 0x2218(0x08)
	None WeaponSwapThrottleExpire; // 0x2220(0x04)
	None WeaponSwapThrottlePeriod; // 0x2224(0x04)
	None QuickMeleeHoldTime; // 0x2228(0x04)
	None CurrentQuickMeleeWeapon; // 0x2230(0x08)
	None bQuickMeleeHoldCompleted; // 0x2238(0x01)
	None bSwapOffQuickMeleeAfterFire; // 0x2239(0x01)
	None OnStartFireFailed; // 0x2258(0x10)
	None bNoFire; // 0x2268(0x01)
	None IsFireWeaponHeld; // 0x2288(0x01)
	None bStartFireAfterAnimFinish; // 0x2289(0x01)
	None bIsThrowGrenadeHeld; // 0x228a(0x01)
	None IsAimDownSightsHeld; // 0x228b(0x01)
	None SwingMontageSection; // 0x2290(0x10)
	None OnWeaponInventoryChanged; // 0x22b0(0x10)
	None OnGadgetResupplied; // 0x22c0(0x10)
	None OnMeleeHoldStart; // 0x22d0(0x10)
	None OnMeleeHoldEnd; // 0x22e0(0x10)
	None ActiveWeaponComponent; // 0x22f0(0x58)
	None ActiveEquipmentId; // 0x2348(0x16)
	None EquipmentContainer; // 0x2370(0x228)
	None PendingWeaponStateUpdates; // 0x2598(0x50)
	None OnEquipmentAddedDel; // 0x25e8(0x10)
	None OnEquipmentRemovedDel; // 0x2610(0x10)
	None OnEquipmentBecomeActiveDel; // 0x2638(0x10)
	None OnEquipmentEndActiveDel; // 0x2660(0x10)
	None OnSpecialAmmoEvent; // 0x2688(0x10)
	None AmmoDropAssets; // 0x2698(0x50)
	None AmmoManager; // 0x26e8(0x130)
	None OutOfSightWeaponPickupRange; // 0x2830(0x04)
	None WeaponPickupRange; // 0x2834(0x04)
	None PickUpSphereComponent; // 0x2838(0x08)
	None LabelPickupRange; // 0x2840(0x04)
	None OnItemPickedUp; // 0x2848(0x10)
	None OutOfRangePickups; // 0x2858(0x50)
	None ReloadTapThreshold; // 0x28a8(0x04)
	None ContextualPressTime; // 0x28ac(0x04)
	None bWantsToInteract; // 0x28b0(0x01)
	None CachedMaxHealth; // 0x28b4(0x04)
	None DownedHealth; // 0x28b8(0x04)
	None RevivedHealth; // 0x28bc(0x04)
	None ArmorHelmetLevel; // 0x28c0(0x04)
	None ArmorVestLevel; // 0x28c4(0x04)
	None ArmorDurabilityPercent; // 0x28c8(0x04)
	None CurrentArmorDurability; // 0x28cc(0x04)
	None MaxHealthBonus; // 0x28d0(0x04)
	None MaxMaxHealthBonus; // 0x28d4(0x04)
	None LocalMaxHealthBonus; // 0x28d8(0x04)
	None OnMaxHealthBonusChanged; // 0x28e0(0x10)
	None bDowned; // 0x28f1(0x01)
	None GiveUpTimer; // 0x28f8(0x08)
	None GiveUpHoldTime; // 0x2900(0x04)
	None OnGiveUpTimerActive; // 0x2908(0x10)
	None OnGiveUpTimerTick; // 0x2918(0x10)
	None OnGiveUpAllowed; // 0x2928(0x10)
	None DownedImmuneTime; // 0x2938(0x04)
	None DownedImmuneTimeStamp; // 0x293c(0x04)
	None bAllowGiveUp; // 0x2944(0x01)
	None BleedPeriod; // 0x2948(0x04)
	None BleedDamage; // 0x294c(0x04)
	None BleedDamageType; // 0x2950(0x08)
	None DownInstigator; // 0x2960(0x08)
	None DownDamageType; // 0x2968(0x08)
	None DownDamageCauser; // 0x2970(0x08)
	None OnCharacterDownedChangedDel; // 0x2990(0x10)
	None DownSpree; // 0x29a0(0x04)
	None DownSpreeSounds; // 0x29a8(0x10)
	None DefaultAssistDuration; // 0x29b8(0x04)
	None DownAssistTagQueue; // 0x29c0(0x10)
	None DownAssists; // 0x29d0(0x10)
	None KillInstigator; // 0x29e0(0x08)
	None EliminationAssists; // 0x29e8(0x10)
	None PlayersWithEliminationCredit; // 0x29f8(0x10)
	None ReviveInteractionProgressText; // 0x2a10(0x18)
	None ReviveInteractionPromptText; // 0x2a28(0x18)
	None InteractionCameraShake; // 0x2a40(0x08)
	None TimeToRevive; // 0x2a48(0x04)
	None bForceCrouchOnRevive; // 0x2a4c(0x04)
	None ReviveInfo; // 0x2a50(0x30)
	None bCanMoveWhileRevivingOther; // 0x2a80(0x01)
	None ReviveRangeSphereComponent; // 0x2a90(0x08)
	None ActorTargetingMeForRevive; // 0x2af0(0x08)
	None OnStartReviveDel; // 0x2af8(0x10)
	None OnStartReviveOtherDel; // 0x2b20(0x10)
	None OnReviveInterruptedDel; // 0x2b48(0x10)
	None OnReviveOtherInterruptedDel; // 0x2b70(0x10)
	None OnReviveCompletedDel; // 0x2b98(0x10)
	None OnReviveOtherCompletedDel; // 0x2bc0(0x10)
	None NumOngoingRemoteRevives; // 0x2be8(0x04)
	None OnShoulderSwapChanged; // 0x2c50(0x10)
	None InteractionManager; // 0x2c60(0x08)
	None ReceivedInteractionManager; // 0x2c68(0x08)
	None InteractionHoverTarget; // 0x2c70(0x08)
	None bHoverTargetPress; // 0x2c78(0x01)
	None bHoverTargetHold; // 0x2c79(0x01)
	None InteractionTarget; // 0x2c80(0x08)
	None IsInInteraction; // 0x2c88(0x01)
	None MostRecentInteractionType; // 0x2c90(0x08)
	None MostRecentInteractionResult; // 0x2c98(0x01)
	None MostRecentInteractionStartLocation; // 0x2c9c(0x0c)
	None InteractionFacesRotation; // 0x2ca8(0x01)
	None InteractionCameraTransition; // 0x2cb0(0x30)
	None DefaultInteractionType; // 0x2ce0(0x08)
	None InteractionDistance; // 0x2ce8(0x04)
	None MaxInteractionAngle; // 0x2cec(0x04)
	None InteractionHoldTime; // 0x2cf0(0x04)
	None InteractionPriorityBaseModifier; // 0x2cf4(0x04)
	None bUncrouchAfterInteraction; // 0x2cf8(0x01)
	None bInteractionCrouchLock; // 0x2cf9(0x01)
	None InstantInteractHandle; // 0x2d18(0x08)
	None InstantInteractCooldownTime; // 0x2d20(0x04)
	None OnHoveredInteractableChanged; // 0x2d28(0x10)
	None OnInteractStart; // 0x2d38(0x10)
	None OnRemotePlayerInteractStart; // 0x2d48(0x10)
	None OnInteractEnd; // 0x2d58(0x10)
	None OnRemotePlayerInteractEnd; // 0x2d68(0x10)
	None OnInteractSuccess; // 0x2d78(0x10)
	None OnInteractFailed; // 0x2d88(0x10)
	None OnInteractInterrupted; // 0x2d98(0x10)
	None OnChargingActionStart; // 0x2da8(0x10)
	None OnChargingActionEnd; // 0x2db8(0x10)
	None BaseLocalDropLocation; // 0x2dc8(0x0c)
	None TierToDropYawMap; // 0x2dd8(0x50)
	None EquipPointToDropYawMap; // 0x2e28(0x50)
	None AmmoDropYaw; // 0x2e78(0x04)
	None DropLateralSpeed; // 0x2e7c(0x04)
	None DropLateralSpeedVariance; // 0x2e80(0x04)
	None CompanionAmmoHeightShift; // 0x2e84(0x04)
	None DropAngleVariance; // 0x2e88(0x04)
	None bInRagdoll; // 0x2ea0(0x01)
	None bInPreRagdoll; // 0x2ea1(0x01)
	None TryToStopRagdollInterval; // 0x2ebc(0x04)
	None RagdollFreezeSpeed; // 0x2ec0(0x04)
	None DeathDisplayLifespan; // 0x2edc(0x04)
	None DeathWidgetPoolName; // 0x2ee0(0x10)
	None bGodMode; // 0x2fd8(0x01)
	None FlashBangRecords; // 0x2fe0(0x10)
	None FlashBangEffectMod; // 0x2ff8(0x08)
	None FlashBangEffectModInstance; // 0x3000(0x08)
	None OnLightBombHitCount; // 0x3008(0x10)
	None OnAbleToMountChanged; // 0x3018(0x10)
	None OnCamouflageChangedDel; // 0x3028(0x10)
	None OnCamouflageLevelChangedDel; // 0x3038(0x10)
	None bCachedCamouflaged; // 0x3048(0x01)
	None CurrentCamouflageLevel; // 0x3049(0x01)
	None bScrambled; // 0x3058(0x01)
	None bMedPackPressed; // 0x3059(0x01)
	None OnStickDel; // 0x3060(0x10)
	None OnMedPackFailed; // 0x3070(0x10)
	None OnGrenadeFailed; // 0x3080(0x10)
	None OnWeaponPickupInventoryFull; // 0x3090(0x10)
	None OnItemPickupSuccess; // 0x30a0(0x10)
	None bReplicatedActivatingMod; // 0x30b0(0x01)
	None OnModsUpdated; // 0x30b8(0x10)
	None OnActivatableModsUpdated; // 0x30c8(0x10)
	None bRotationInputAllowsAimAssist; // 0x30d8(0x01)
	None MinimumRotationInputForAimAssist; // 0x30dc(0x04)
	None OnGamepadAbilityCycle; // 0x30e0(0x10)
	None OnAbilityActivatedEvent; // 0x30f0(0x10)
	None OnAbilityUsedEvent; // 0x3100(0x10)
	None ChordDelay; // 0x3114(0x04)
	None HoldDelay; // 0x3118(0x04)
	None DamageForMaxForceFeedback; // 0x311c(0x04)
	None DamageForceFeedbackScale; // 0x3120(0x04)
	None DamageForceFeedbackDuration; // 0x3124(0x04)
	None bDamageForceFeedbackUsesSmallMotors; // 0x3128(0x01)
	None ForceFeedbackOnErrorMagnitude; // 0x312c(0x04)
	None ForceFeedbackOnErrorDuration; // 0x3130(0x04)
	None LandingSpeedForMaxForceFeedback; // 0x3134(0x04)
	None LandForceFeedbackComponent; // 0x3138(0x08)
	None JumpForceFeedbackEffect; // 0x3140(0x08)
	None DownedForceFeedbackEffect; // 0x3148(0x08)
	None BeingRevivedForceFeedbackEffect; // 0x3150(0x08)
	None ReplicatedFootstepOverrides; // 0x3158(0x10)
	None AutonomousProxyFootstepOverrides; // 0x3168(0x10)
	None FootprintLifetimeSeconds; // 0x3178(0x04)
	None FootprintStartFadeOutTimeSeconds; // 0x317c(0x04)
	None FootprintDecalSize; // 0x3180(0x0c)
	None LeftFootprintDecalMaterial; // 0x3190(0x08)
	None RightFootprintDecalMaterial; // 0x3198(0x08)
	None FootprintMeshSize; // 0x31a0(0x0c)
	None FootprintMesh; // 0x31b0(0x08)
	None Footprints; // 0x31b8(0x10)
	None FootprintInstancedMeshComponent; // 0x31c8(0x08)
	None MovingNavAreaClass; // 0x31d8(0x08)
	None StillNavAreaClass; // 0x31e0(0x08)
	None KSNavModifierComponent; // 0x31e8(0x08)
	None NavModificationUpdateTimerPeriod; // 0x31f0(0x04)
	None DamagedHearingEventTag; // 0x3200(0x08)
	None DamageForDefaultLoudness; // 0x3208(0x04)
	None FireHearingEventTag; // 0x320c(0x08)
	None FireRangeForDefaultLoudness; // 0x3214(0x04)
	None FootstepHearingEventTag; // 0x3218(0x08)
	None MovementSpeedForDefaultLoudness; // 0x3220(0x04)
	None TeamEventRange; // 0x3224(0x04)
	None BotName; // 0x3234(0x08)
	None BotADSAccuracy; // 0x323c(0x04)
	None bRandomBotName; // 0x3240(0x01)
	None bBot; // 0x3241(0x01)
	None CurrentBehaviorState; // 0x3242(0x01)
	None OnBehaviorStateChanged; // 0x3248(0x10)
	None VOComponentClass; // 0x3258(0x08)
	None VOComponent; // 0x3260(0x08)
	None PossibleVOTables; // 0x3268(0x10)
	None DownOtherVOEvent; // 0x327c(0x08)
	None NameplateZOffset; // 0x3284(0x04)
	None CurrentNameplateZOffset; // 0x3288(0x04)
	None CurrentNameplateAimZOffset; // 0x328c(0x04)
	None NameplateAimZOffset; // 0x3290(0x04)
	None NameplateAimZOffsetBlendTime; // 0x3294(0x04)
	None TargetNameplateAimZOffset; // 0x3298(0x04)
	None CurrentNameplateCrouchZOffset; // 0x329c(0x04)
	None NameplateCrouchZOffset; // 0x32a0(0x04)
	None NameplateCrouchZOffsetBlendTime; // 0x32a4(0x04)
	None TargetNameplateCrouchZOffset; // 0x32a8(0x04)
	None VehicleState; // 0x32ac(0x01)
	None CurrentVehicle; // 0x32b0(0x08)
	None OnVehicleStateChanged; // 0x32c8(0x10)
	None OnDestructibleSpeedOverlap; // 0x32d8(0x10)
	None bDoDrawDebugLines; // 0x32e8(0x01)
	None BaseVisibilityBone; // 0x32ec(0x08)
	None LeftElbowBone; // 0x32f4(0x08)
	None LeftWristBone; // 0x32fc(0x08)
	None RightElbowBone; // 0x3304(0x08)
	None RightWristBone; // 0x330c(0x08)
	None HiddenArmScale; // 0x3314(0x04)
	None LeftArmScaleAlpha; // 0x3318(0x04)
	None RightArmScaleAlpha; // 0x331c(0x04)
	None bShowWeaponWhenArmVisible; // 0x3320(0x01)
	None MaxDistancePenetrationCheck; // 0x3324(0x04)
	None LeftArmVisibility; // 0x3828(0x01)
	None RightArmVisibility; // 0x3829(0x01)
	None PelvisBone; // 0x382c(0x08)
	None DefaultApparelSetup; // 0x3838(0x10)
	None AppliedApparelMap; // 0x3848(0x50)
	None SlotToApparelKeyMap; // 0x3898(0x50)
	None ApparelAssets; // 0x38e8(0x10)
	None bNoApparel; // 0x38f8(0x01)
	None LocalApparelAssets; // 0x3900(0x10)
	None bApparelAssetMapDirty; // 0x3910(0x01)
	None ApparelTimeoutHandle; // 0x3918(0x08)
	None ApparelTimeoutTime; // 0x3920(0x04)
	None bFirstApparelApplicationSuccess; // 0x3924(0x01)
	None OnNewApparelApplicationFinishedDel; // 0x3988(0x10)
	None bApparelInstancesAreLoaded; // 0x3998(0x01)
	None ApparelLockCount; // 0x39a8(0x04)
	None bApparelDirtiedAndLocked; // 0x39ac(0x01)
	None TranslucencyMaterialInfos; // 0x3a00(0x10)
	None Gender; // 0x3a10(0x02)
	None LocalGender; // 0x3a12(0x02)
	None OnGenderChangedDel; // 0x3a18(0x10)
	None SkinsManager; // 0x3a40(0x08)
	None DefaultBodyApparelSkinObject; // 0x3a48(0x08)
	None SkinTagContainer; // 0x3a50(0x20)
	None DefaultApparelSkinTables; // 0x3a70(0x10)
	None bUseCameraProximityFading; // 0x3a98(0x01)
	None CameraFadeStartDistance; // 0x3a9c(0x04)
	None CameraFadeEndDistance; // 0x3aa0(0x04)
	None FadeAlphaParamName; // 0x3aa4(0x08)
	None LastCameraProximityAlpha; // 0x3aac(0x04)
	None Emotion; // 0x3ab0(0x01)
	None LocalEmotion; // 0x3ab1(0x01)
	None LastEmotion; // 0x3ab2(0x01)
	None EmotionFloat; // 0x3ab4(0x04)
	None OnEmotionChangedDel; // 0x3ab8(0x10)
	None ActiveEmotePropInfos; // 0x3ac8(0x10)
	None CurrentEmotePhysicsProp; // 0x3ad8(0x08)
	None CurrentEmoteDecalComponent; // 0x3ae0(0x08)
	None AnimationAuditComponent; // 0x3ae8(0x08)
	None ADSBlurMID; // 0x3af0(0x08)
	None TimeToRepairArmor; // 0x3af8(0x04)
	None DurabilityASecond; // 0x3afc(0x04)
	None bRepairAllArmorAtOnce; // 0x3b00(0x01)
	None ArmorRepairProgressText; // 0x3b08(0x18)
	None ArmorRepairPromptText; // 0x3b20(0x18)
	None bCanRepairArmor; // 0x3b38(0x01)
	None bRepairableArmorEquipped; // 0x3b39(0x01)
	None bIsRepairingArmor; // 0x3b3a(0x01)
	None OnRepairableArmorEquippedDel; // 0x3b40(0x10)
	None OnArmorInteractAvailableDel; // 0x3b50(0x10)
	None NudgingActors; // 0x3b60(0x10)
	None NudgeComponent; // 0x3b70(0x08)
	None NudgeComponentClass; // 0x3b78(0x08)
	None WeaponPropManagerComponent; // 0x3b80(0x08)
	None SkinnableSkelPropManagerComponent; // 0x3b88(0x08)
	None SkinnableStaticPropManagerComponent; // 0x3b90(0x08)
	None SkinMap; // 0x3b98(0x50)
	None bTouchModeAutoSprintActive; // 0x3c58(0x01)
	None bPreventingAutoSprint; // 0x3c59(0x01)
	None MovementDirection; // 0x330(0x01)
	None AccelDirection; // 0x334(0x0c)
	None LocalAccelDirection; // 0x340(0x0c)
	None FloorNormal; // 0x34c(0x0c)
	None AccelRightDirection; // 0x358(0x0c)
	None AccelNormDirection; // 0x364(0x0c)
	None SlopeAngle; // 0x370(0x04)
	None SlopeAngleTarget; // 0x374(0x04)
	None SlopeAngleDirectional; // 0x378(0x08)
	None SlopeAngleDirectionalRotation; // 0x380(0x0c)
	None SlopeFeetAlpha; // 0x38c(0x04)
	None SlopeFeetAlphaTarget; // 0x390(0x04)
	None RootAdjustmentOnSlope; // 0x394(0x0c)
	None bDisableFeetTilting; // 0x3a0(0x01)
	None fSlopeInterpSpeed; // 0x3a4(0x04)
	None bUpdateMovement; // 0x3a8(0x01)
	None bFalling; // 0x3a8(0x01)
	None GadgetAdditiveRetrieveBlendTime; // 0x3b0(0x04)
	None GadgetAdditiveThrowBlendTime; // 0x3b4(0x04)
	None bMountedWeaponActive; // 0x3b8(0x01)
	None bMountedOnCoverActive; // 0x3b9(0x01)
	None MountedWeaponTargetHeight; // 0x3bc(0x04)
	None MountedWeaponModifiedAimPitch; // 0x3c0(0x04)
	None MountedWeaponMountLocation; // 0x3c4(0x0c)
	None MountedWeaponMountRotation; // 0x3d0(0x0c)
	None bEmoteMontagePlayingGlobal; // 0x3dc(0x01)
	None bEmoteMontagePlayingLocal; // 0x3dd(0x01)
	None EmoteMontageGlobalWeight; // 0x3e0(0x04)
	None EmoteMontageLocalWeight; // 0x3e4(0x04)
	None EmoteSlotName; // 0x3e8(0x08)
	None EmotePropRandomizerStoredInt; // 0x3f0(0x04)
	None bEmotePropRandomizerStaticSpawned; // 0x3f4(0x01)
	None bEmotePropRandomizerSkeletalSpawned; // 0x3f5(0x01)
	None EmoteFastBlendMultiplier; // 0x3f8(0x04)
	None EmoteSlowBlendMultiplier; // 0x3fc(0x04)
	None bSprayIsPlaying; // 0x400(0x01)
	None CurrentMeshLOD; // 0x404(0x04)
	None Speed; // 0x408(0x04)
	None SpeedXY; // 0x40c(0x04)
	None SpeedZ; // 0x410(0x04)
	None Forward; // 0x414(0x04)
	None Right; // 0x418(0x04)
	None BodyLean; // 0x41c(0x04)
	None BodyLeanRotator; // 0x420(0x0c)
	None HeadLeanRotator; // 0x42c(0x0c)
	None bEnableAnimMirroring; // 0x438(0x01)
	None bCanTransitionDirections; // 0x43c(0x01)
	None bEnableMovementImprovements; // 0x440(0x01)
	None bEnableDynamicLobbyPose; // 0x441(0x01)
	None SprintImpulseAmount; // 0x444(0x04)
	None SprintLeftRightBodyLeanRange; // 0x448(0x08)
	None ForwardRotate; // 0x450(0x04)
	None RightRotate; // 0x454(0x04)
	None BackRotate; // 0x458(0x04)
	None LeftRotate; // 0x45c(0x04)
	None ForwardRotatePostMirror; // 0x460(0x04)
	None RightRotatePostMirror; // 0x464(0x04)
	None BackRotatePostMirror; // 0x468(0x04)
	None LeftRotatePostMirror; // 0x46c(0x04)
	None ForwardCrouchPelvicVector; // 0x470(0x0c)
	None ForwardCrouchFeetIKVector; // 0x47c(0x0c)
	None BackCrouchPelvicVector; // 0x488(0x0c)
	None BackCrouchFeetIKVector; // 0x494(0x0c)
	None LeftCrouchPelvicVector; // 0x4a0(0x0c)
	None LeftCrouchFeetIKVector; // 0x4ac(0x0c)
	None RightCrouchPelvicVector; // 0x4b8(0x0c)
	None RightCrouchFeetIKVector; // 0x4c4(0x0c)
	None ForwardCrouchPelvicOffset; // 0x4d0(0x04)
	None ForwardCrouchFeetIKOffset; // 0x4d4(0x04)
	None BackCrouchPelvicOffset; // 0x4d8(0x04)
	None BackCrouchFeetIKOffset; // 0x4dc(0x04)
	None LeftCrouchPelvicOffset; // 0x4e0(0x04)
	None LeftCrouchFeetIKOffset; // 0x4e4(0x04)
	None RightCrouchPelvicOffset; // 0x4e8(0x04)
	None RightCrouchFeetIKOffset; // 0x4ec(0x04)
	None CurrentAccelVectorLength; // 0x4f0(0x04)
	None MaxSlowWalkSpeed; // 0x4f4(0x04)
	None MaxWalkSpeed; // 0x4f8(0x04)
	None MaxADSWalkSpeed; // 0x4fc(0x04)
	None MaxSprintSpeed; // 0x500(0x04)
	None MaxCrouchSpeed; // 0x504(0x04)
	None MaxADSCrouchSpeed; // 0x508(0x04)
	None bShouldTransitionADSCrouch; // 0x50c(0x01)
	None CurSpeedFraction; // 0x510(0x04)
	None CurMaxSpeed; // 0x514(0x04)
	None CurSpeedScaling; // 0x518(0x04)
	None bDoCheckFirstStepCurve; // 0x51c(0x01)
	None FirstStepTransitionAlpha; // 0x520(0x04)
	None SpeedWarpingAlpha; // 0x524(0x04)
	None ParachuteMovementPitch; // 0x528(0x04)
	None ParachuteMovementYaw; // 0x52c(0x04)
	None ParachuteMovementForward; // 0x530(0x04)
	None ParachuteMovementLateral; // 0x534(0x04)
	None bSkydiveTurnOverridesStrafe; // 0x538(0x01)
	None bIsNoseDiving; // 0x539(0x01)
	None ParachuteYawInterpSpeed; // 0x53c(0x04)
	None ParachutePitchInterpSpeed; // 0x540(0x04)
	None ParachuteForwardInterpSpeed; // 0x544(0x04)
	None ParachuteLateralInterpSpeed; // 0x548(0x04)
	None ParachuteForwardThreshold; // 0x54c(0x04)
	None bParachuteReady; // 0x550(0x01)
	None ParachuteYawRotationFactor; // 0x554(0x04)
	None LastFreeFallMovementVector; // 0x558(0x0c)
	None HitSpringRollState; // 0x564(0x08)
	None HitSpringPitchState; // 0x56c(0x08)
	None HitSpringYawState; // 0x574(0x08)
	None HitRotationAmountRoll; // 0x57c(0x04)
	None HitRotationAmountPitch; // 0x580(0x04)
	None HitRotationAmountYaw; // 0x584(0x04)
	None HitRotationPitchMax; // 0x588(0x04)
	None HitRotationRollMax; // 0x58c(0x04)
	None HitRotationYawMax; // 0x590(0x04)
	None PelvisHitOffset; // 0x594(0x0c)
	None SpineHitOffset; // 0x5a0(0x0c)
	None NeckHitOffset; // 0x5ac(0x0c)
	None ArmHitOffset; // 0x5b8(0x0c)
	None QueuedHits; // 0x5c8(0x10)
	None HitReactionTimeScale; // 0x5d8(0x08)
	None HitReactionDamageScale; // 0x5e0(0x08)
	None ADSHitReactionBlend; // 0x5e8(0x04)
	None AOSHitReactionBlend; // 0x5ec(0x04)
	None HipfireHitReactionBlend; // 0x5f0(0x04)
	None SimClientHitReactionBlend; // 0x5f4(0x04)
	None CurrentHitReactionBlend; // 0x5f8(0x04)
	None SpineFireRotationLimit; // 0x5fc(0x04)
	None NeckFireRotationLimit; // 0x600(0x04)
	None ClavicleFireRotationLimit; // 0x604(0x04)
	None UpperArmFireRotationPitchLimit; // 0x608(0x04)
	None UpperArmFireRotationYawLimit; // 0x60c(0x04)
	None ForearmFireRotationLimit; // 0x610(0x04)
	None SpineFireSpringState; // 0x614(0x08)
	None NeckFireSpringState; // 0x61c(0x08)
	None ClavicleFireSpringState; // 0x624(0x08)
	None UpperArmFireSpringState; // 0x62c(0x08)
	None UpperArmFireYawSpringState; // 0x634(0x08)
	None ForearmFireSpringState; // 0x63c(0x08)
	None SpineFireRotationAmountPitch; // 0x644(0x04)
	None NeckFireRotationAmountPitch; // 0x648(0x04)
	None ClavicleFireRotationAmountYaw; // 0x64c(0x04)
	None UpperArmFireRotationAmountPitch; // 0x650(0x04)
	None UpperArmFireRotationAmountYaw; // 0x654(0x04)
	None ForarmFireRotationAmountPitch; // 0x658(0x04)
	None SpineFireOffset; // 0x65c(0x0c)
	None NeckFireOffset; // 0x668(0x0c)
	None ClavicleFireOffset; // 0x674(0x0c)
	None UpperArmFireOffset; // 0x680(0x0c)
	None ForearmFireOffset; // 0x68c(0x0c)
	None WeaponFireAlpha; // 0x698(0x04)
	None WeaponAdditiveAlpha; // 0x69c(0x04)
	None CurrentRecoilProfile; // 0x6a0(0x1ec)
	None FireImpulseCounter; // 0x88c(0x04)
	None bIsRecoiling; // 0x890(0x01)
	None bBypassRecoiling; // 0x891(0x01)
	None SubAnimInstances; // 0x898(0x50)
	None bCanSwitchStartAnim; // 0x8e8(0x01)
	None bTriggerCustomPivot; // 0x8e9(0x01)
	None bActionDisablesLeftHandIKAlpha; // 0x8ea(0x01)
	None bActionDisablesRightHandIKAlpha; // 0x8eb(0x01)
	None bActionDisablesLeftHandGripOnly; // 0x8ec(0x01)
	None bActionDisablesRightHandGripOnly; // 0x8ed(0x01)
	None bForceDisableLHIK; // 0x8ee(0x01)
	None bForceDisableRHIK; // 0x8ef(0x01)
	None bUseRightHandGadgetOverride; // 0x8f0(0x01)
	None bShouldUseFootIKDuringFreefall; // 0x8f1(0x01)
	None ADSRollValue; // 0x8f4(0x04)
	None ADSBumpValue; // 0x8f8(0x0c)
	None bWantsNonComOffset; // 0x904(0x01)
	None bIsWeaponNonComOffset; // 0x905(0x01)
	None bSkinUseNonComOffset; // 0x906(0x01)
	None EngHeadAdditiveAlpha; // 0x908(0x04)
	None bTestGadgetAdditive; // 0x90c(0x01)
	None GadgetStartedRetrieve; // 0x90d(0x01)
	None GadgetFinishedRetrieve; // 0x90e(0x01)
	None GadgetStartedThrow; // 0x90f(0x01)
	None GadgetFinishedThrow; // 0x910(0x01)
	None HandIKAdditiveAlpha; // 0x914(0x04)
	None LeftHandIKAlpha; // 0x918(0x04)
	None LeftHandIKAlphaTarget; // 0x91c(0x04)
	None LeftHandIKBlendSpeed; // 0x920(0x04)
	None RightHandIKAlpha; // 0x924(0x04)
	None RightHandIKAlphaTarget; // 0x928(0x04)
	None RightHandIKBlendSpeed; // 0x92c(0x04)
	None SlowIKBlendSpeed; // 0x930(0x04)
	None MediumIKBlendSpeed; // 0x934(0x04)
	None FastIKBlendSpeed; // 0x938(0x04)
	None UplineIKAlpha; // 0x93c(0x04)
	None UplineIKAlphaTarget; // 0x940(0x04)
	None NextLeftHandIKForceRequestId; // 0x944(0x04)
	None bLeftHandIKForceOffFromRequests; // 0x948(0x01)
	None LeftHandIkForceOffRequests; // 0x950(0x50)
	None bLeftHandIKOffFromMainInstNotifyStates; // 0x9a0(0x01)
	None FootIKAlpha; // 0x9f8(0x04)
	None FootIKAlphaTarget; // 0x9fc(0x04)
	None OnBeginZipline; // 0xa00(0x10)
	None OnEndZipline; // 0xa10(0x10)
	None ZiplineRootOffset; // 0xa20(0x0c)
	None AppliedADSRootTranslation; // 0xa2c(0x0c)
	None DefaultADSRootTranslation; // 0xa38(0x0c)
	None ForceZiplineMontage; // 0xa44(0x01)
	None ApplyAimstoZiplineMontage; // 0xa45(0x01)
	None ZiplineMontageLHIKOverride; // 0xa46(0x01)
	None ZiplineMontageLHIKAlpha; // 0xa48(0x04)
	None ActionPreventsZiplineIntro; // 0xa4c(0x01)
	None ForceZiplineLoop; // 0xa4d(0x01)
	None ForwardRotateInputRange; // 0xa50(0x08)
	None ForwardRotateOutputRange; // 0xa58(0x08)
	None RightRotateInputRange; // 0xa60(0x08)
	None RightRotateOutputRange; // 0xa68(0x08)
	None LocomotionStartDirection; // 0xa70(0x01)
	None LocomotionStopDirection; // 0xa71(0x01)
	None LocomotionPivotDirection; // 0xa72(0x01)
	None MovementDirectionRotate; // 0xa74(0x04)
	None MovementDirectionRotateOnStartOrStop; // 0xa78(0x04)
	None DirectionBlendSpeed; // 0xa7c(0x04)
	None DirectionChangedBlendSpeed; // 0xa84(0x04)
	None bUseLimitedMovement; // 0xa88(0x01)
	None bEngUseLimitedMovement; // 0xa89(0x01)
	None bComUseLimitedMovement; // 0xa8a(0x01)
	None bNonComUseLimitedMovement; // 0xa8b(0x01)
	None bZeroVelocity; // 0xa8c(0x01)
	None bZeroAcceleration; // 0xa8c(0x01)
	None bJumping; // 0xa8c(0x01)
	None bWasJumping; // 0xa8c(0x01)
	None bDisableUpperBodyLands; // 0xa8c(0x01)
	None bInFreeFall; // 0xa8c(0x01)
	None bReadyForFreeFall; // 0xa8c(0x01)
	None bVaulting; // 0xa8c(0x01)
	None bIsMantling; // 0xa8d(0x01)
	None bMantleIsVault; // 0xa8d(0x01)
	None bCanInterruptMantle; // 0xa8d(0x01)
	None TotalVaultDuration; // 0xa90(0x04)
	None CurrentMantleSequence; // 0xa98(0x08)
	None CurrentMantleConfig; // 0xaa0(0xa8)
	None VaultStartTime; // 0xb48(0x04)
	None PreVaultWorldHeight; // 0xb4c(0x04)
	None CurrentVaultTime; // 0xb50(0x04)
	None VaultTimeScaleCurve; // 0xb58(0x18)
	None VaultScaledVertCurve; // 0xb70(0x18)
	None MantleGrabLocation; // 0xb88(0x0c)
	None MantleDistanceToTop; // 0xb94(0x04)
	None MantleTowardsWallDir; // 0xb98(0x0c)
	None bMantleIKLeftHand; // 0xba4(0x01)
	None bMantleIKRightHand; // 0xba5(0x01)
	None MantleIKLeftHandAlpha; // 0xba8(0x04)
	None MantleIKRightHandAlpha; // 0xbac(0x04)
	None MantleIKLeftHandLocation; // 0xbb0(0x0c)
	None MantleIKRightHandLocation; // 0xbbc(0x0c)
	None bDodgeRolling; // 0xbc8(0x01)
	None DodgeRollDuration; // 0xbcc(0x04)
	None DodgeRollDirection; // 0xbd0(0x08)
	None bIsInPowerSlide; // 0xbd8(0x01)
	None bAbilityMovement; // 0xbd8(0x01)
	None bZipLining; // 0xbd8(0x01)
	None bZipLineBracing; // 0xbd8(0x01)
	None bZipLineEnding; // 0xbd8(0x01)
	None ZiplineEndBlendtime; // 0xbdc(0x04)
	None ZiplineEndOffsetBlendtime; // 0xbe0(0x04)
	None bZipLineIsUpline; // 0xbe4(0x01)
	None bZipLineIntro; // 0xbe4(0x01)
	None bStunned; // 0xbe4(0x01)
	None bIsBlinded; // 0xbe4(0x01)
	None bHardLand; // 0xbe4(0x01)
	None bCrouching; // 0xbe4(0x01)
	None bWantsToCrouch; // 0xbe4(0x01)
	None bWasCrouchedBeforeRoll; // 0xbe4(0x01)
	None bSprinting; // 0xbe5(0x01)
	None bIsInVehicle; // 0xbe5(0x01)
	None VehicleIdle; // 0xbe8(0x08)
	None bIsSwimming; // 0xbf0(0x01)
	None bIsSubmerged; // 0xbf0(0x01)
	None SwimSpineRotation; // 0xbf4(0x0c)
	None AdditiveLandsAlphaMin; // 0xc00(0x04)
	None AdditiveLandsAlphaMax; // 0xc04(0x04)
	None bCombat; // 0xc08(0x01)
	None bDead; // 0xc08(0x01)
	None bDowned; // 0xc08(0x01)
	None bKnockedBack; // 0xc08(0x01)
	None bIsStopped; // 0xc08(0x01)
	None DownedRootFacing; // 0xc0c(0x0c)
	None OnGoDown; // 0xc18(0x10)
	None bActivatingMod; // 0xc28(0x01)
	None bAnyModsActive; // 0xc28(0x01)
	None bEnableSprintAdditiveForAbilities; // 0xc2c(0x01)
	None InteractionState; // 0xc30(0x08)
	None bIsReviving; // 0xc38(0x01)
	None IsInVehicleAlpha; // 0xc3c(0x04)
	None IsInVehicleInverseAlpha; // 0xc40(0x04)
	None MinZSpeedforJumpLand; // 0xc44(0x04)
	None bCachedCameraLockout; // 0xc48(0x01)
	None bCachedCameraLockoutCooldown; // 0xc48(0x01)
	None CachedCameraLockoutAlpha; // 0xc50(0x04)
	None FallDown; // 0xc58(0x08)
	None AdditiveLandsAlpha; // 0xc60(0x04)
	None bDownedCosmetic; // 0xc64(0x01)
	None bWasRecentlyRevived; // 0xc65(0x01)
	None bHasManuallyCanceledDownedCosmetic; // 0xc66(0x01)
	None PreviousLocalAccelDirection; // 0xc68(0x0c)
	None Velocity; // 0xc74(0x0c)
	None LocalVelocity; // 0xc80(0x0c)
	None LocalRelativeVelocity; // 0xc8c(0x0c)
	None FwdBackIntroLean; // 0xc98(0x04)
	None LeftRightIntroLean; // 0xc9c(0x04)
	None IntroLeanMultiplier; // 0xca0(0x04)
	None IntroLeanSpeed; // 0xca4(0x04)
	None VelocityVsAccelDotProduct; // 0xca8(0x04)
	None FacingDirection; // 0xcac(0x0c)
	None PowerSlideSlopeAngleRotation; // 0xcb8(0x0c)
	None FootHeightAdjustmentOnSlope; // 0xcc4(0x0c)
	None PelvisAdjustmentOnSlope; // 0xcd0(0x0c)
	None LocomotionState; // 0xcdc(0x01)
	None HasLocomotionStartLocation; // 0xcdd(0x01)
	None LocomotionStartLocation; // 0xce0(0x0c)
	None DistFromLocomotionStart; // 0xcec(0x04)
	None DistFromLocomotionStartMax; // 0xcf0(0x04)
	None HasLocomotionStopLocation; // 0xcf4(0x01)
	None LocomotionStopLocation; // 0xcf8(0x0c)
	None DistFromLocomotionStop; // 0xd04(0x04)
	None LocomotionStopBufferTime; // 0xd08(0x04)
	None LocomotionStopBufferExpireTime; // 0xd0c(0x04)
	None bSuccessPivotCompleteThisFrame; // 0xd10(0x01)
	None HasLocomotionPivotLocation; // 0xd11(0x01)
	None HasLocomotionPrePivotLocation; // 0xd12(0x01)
	None HasLocomotionPostPivotLocation; // 0xd13(0x01)
	None LocomotionPivotThreshold; // 0xd14(0x04)
	None LocomotionPivotLocation; // 0xd18(0x0c)
	None CachedLocomotionPivotLocation; // 0xd24(0x0c)
	None DistFromLocomotionPivot; // 0xd30(0x04)
	None DistFromLocomotionPivotMax; // 0xd34(0x04)
	None LocomotionPrePivotLocation; // 0xd38(0x0c)
	None DistFromLocomotionPrePivot; // 0xd44(0x04)
	None LocomotionPostPivotLocation; // 0xd48(0x0c)
	None DistFromLocomotionPostPivot; // 0xd54(0x04)
	None bLocomotionStartUsesPivotDistance; // 0xd58(0x01)
	None HasJumpStartLocation; // 0xd59(0x01)
	None JumpStartLocation; // 0xd5c(0x0c)
	None IsSprintJumping; // 0xd68(0x01)
	None IsShortJumping; // 0xd69(0x01)
	None DistFromJumpStart; // 0xd6c(0x04)
	None DistFromJumpStartMax; // 0xd70(0x04)
	None ShortJumpThreshold; // 0xd74(0x04)
	None HasJumpLandLocation; // 0xd78(0x01)
	None JumpLandLocationOnGround; // 0xd79(0x01)
	None JumpLandLocation; // 0xd7c(0x0c)
	None JumpLandLocationTarget; // 0xd88(0x0c)
	None JumpLandLocationInterpSpeed; // 0xd94(0x04)
	None DistFromJumpLand; // 0xdb0(0x04)
	None InitialDistFromJumpLand; // 0xdb4(0x04)
	None DistFromJumpLandTarget; // 0xdb8(0x04)
	None DistFromJumpLandInterpSpeed; // 0xdbc(0x04)
	None SmoothedVelocity; // 0xdc0(0x0c)
	None SmoothedVelocityInterp; // 0xdcc(0x04)
	None SmoothedVelocitySpeedThreshold; // 0xdd0(0x04)
	None SmoothedVelocityInterpRate; // 0xdd4(0x04)
	None SmoothedVelocityInterpRateBelowThreshold; // 0xdd8(0x04)
	None PowerSlideProgress; // 0xddc(0x04)
	None PowerSlideAngle; // 0xde0(0x04)
	None PowerSlideRotation; // 0xde4(0x0c)
	None PowerSlideEndReason; // 0xdf0(0x01)
	None bIsPowerSlidingOnSlope; // 0xdf1(0x01)
	None bIsLocallyViewed; // 0xdf2(0x01)
	None JumpLandLocationInWater; // 0xdf3(0x01)
	None DesiredComponentYaw; // 0xdf4(0x04)
	None bTurnInPlaceInProgress; // 0xdf8(0x01)
	None TurnInPlaceTurnValue; // 0xdfc(0x04)
	None CurrentTurnInPlaceThreshold; // 0xe00(0x04)
	None LastTurnInPlaceAnimationVariant; // 0xe04(0x01)
	None TurnInPlaceMinThreshold; // 0xe08(0x04)
	None TurnInPlaceMaxOffset; // 0xe0c(0x04)
	None TurnInPlaceRetriggerMinThreshold; // 0xe10(0x04)
	None TurnInPlaceRecoverySpeedWithAcceleration; // 0xe14(0x04)
	None TurnInPlaceRecoverySpeed90; // 0xe18(0x04)
	None TurnInPlaceRecoverySpeed180; // 0xe1c(0x04)
	None AppliedTurnInPlaceRotator; // 0xe20(0x0c)
	None WorldTurnInPlaceRotator; // 0xe2c(0x0c)
	None bDisableTurnInPlaceCounterRotate; // 0xe48(0x01)
	None bEnableTurnInPlaceForAOS; // 0xe49(0x01)
	None EnableCounterRotateBlendTime; // 0xe4c(0x04)
	None DisableCounterRotateBlendTime; // 0xe50(0x04)
	None bShouldSplitUpperBody; // 0xe54(0x01)
	None bForceDisableSplitUpperBody; // 0xe55(0x01)
	None bEnableSplitUpperBodyForAbilities; // 0xe56(0x01)
	None bDisableUpperBodyTurnInPlace; // 0xe57(0x01)
	None bIsLockedToWorldRotation; // 0xe58(0x01)
	None IsLockedToWorldRotationAlpha; // 0xe59(0x01)
	None LockedWorldRotation; // 0xe5c(0x0c)
	None WorldRotationLockIds; // 0xe68(0x50)
	None NextWorldRotationLockId; // 0xeb8(0x01)
	None bIsAimOverShoulder; // 0xed8(0x01)
	None bIsLeavingAOS; // 0xed9(0x01)
	None bIsAimDownSights; // 0xeda(0x01)
	None IsAimDownSightsAlpha; // 0xedc(0x04)
	None bIsAimDownSightsFirstPerson; // 0xee0(0x01)
	None IsAimDownSightsFirstPersonAlpha; // 0xee4(0x04)
	None bIs3PAimDownSights; // 0xee8(0x01)
	None PreviousCachedAimRotation; // 0xeec(0x0c)
	None CachedAimRotation; // 0xef8(0x0c)
	None DeltaAimRotation; // 0xf04(0x0c)
	None ThirdPersonAppliedAimRotator; // 0xf10(0x0c)
	None ThirdPersonAimYaw; // 0xf1c(0x04)
	None ThirdPersonAimYawInverted; // 0xf20(0x04)
	None ThirdPersonAimYawCosmetic; // 0xf24(0x04)
	None ThirdPersonEngagedAimYawCosmetic; // 0xf28(0x04)
	None ThirdPersonAimPitch; // 0xf2c(0x04)
	None ThirdPersonAimPitchInverted; // 0xf30(0x04)
	None ThirdPersonAimPitchUpline; // 0xf34(0x04)
	None ThirdPersonLean; // 0xf38(0x04)
	None ThirdPersonFwdLean; // 0xf3c(0x04)
	None ThirdPersonLeanAlpha; // 0xf40(0x04)
	None ThirdPersonLeanMultiplier; // 0xf44(0x04)
	None ComLeanMultiplier; // 0xf48(0x04)
	None NonComLeanMultiplier; // 0xf4c(0x04)
	None EngagedLeanMultiplier; // 0xf50(0x04)
	None ThirdPersonLeanSpeed; // 0xf54(0x04)
	None YawDeltaMinimum; // 0xf58(0x04)
	None MinPitchAngle; // 0xf5c(0x04)
	None MaxPitchAngle; // 0xf60(0x04)
	None MinYawAngle; // 0xf64(0x04)
	None MaxYawAngle; // 0xf68(0x04)
	None NormalYawInterpSpeed; // 0xf6c(0x04)
	None ZipLineYawInterpSpeed; // 0xf70(0x04)
	None ZipLineYawInterpSpeedOver180; // 0xf74(0x04)
	None CurrentYawInterpSpeed; // 0xf78(0x04)
	None TargetYawInterpSpeed; // 0xf7c(0x04)
	None NormalYawInterpAcceleration; // 0xf80(0x04)
	None ADSBlendToCrouchSlotTime; // 0xf84(0x04)
	None ADSBlendToStandingSlotTime; // 0xf88(0x04)
	None bIsReloading; // 0xf8c(0x01)
	None bIsSwitchingWeapon; // 0xf8c(0x01)
	None bIsUsingItem; // 0xf8c(0x01)
	None bIsUsingAbility; // 0xf8c(0x01)
	None bIsRetrievingWeapon; // 0xf8c(0x01)
	None bIsHacking; // 0xf8c(0x01)
	None bAttachHandWhileCrouching; // 0xf8c(0x01)
	None bAttachHandMelee; // 0xf8c(0x01)
	None bAttachHandWhileIdle; // 0xf8d(0x01)
	None bAttachHandWhileSprinting; // 0xf8d(0x01)
	None bAttachHandWhileMoving; // 0xf8d(0x01)
	None bAttachHandWhileZiplining; // 0xf8d(0x01)
	None bAttachRightHandWhileZiplining; // 0xf8d(0x01)
	None bForceAttachHandIfNotNonCom; // 0xf8d(0x01)
	None bAttachRightHand; // 0xf8d(0x01)
	None bWeaponScale; // 0xf8d(0x01)
	None bRightPropBScale; // 0xf8e(0x01)
	None bLeftPropBScale; // 0xf8e(0x01)
	None bAimsDisabled; // 0xf8e(0x01)
	None bMantlePlaying; // 0xf8e(0x01)
	None bIsPreRagdoll; // 0xf8e(0x01)
	None bIsRagdoll; // 0xf8e(0x01)
	None LeftPropBScaleAlpha; // 0xf90(0x04)
	None RightPropBScaleAlpha; // 0xf94(0x04)
	None FreeFallAlpha; // 0xf98(0x04)
	None BlindedAlpha; // 0xf9c(0x04)
	None TabletScaleAlpha; // 0xfa0(0x04)
	None HolsterLockAlpha; // 0xfa4(0x04)
	None PropLockAlpha; // 0xfa8(0x04)
	None LeftHolsterLockAlpha; // 0xfac(0x04)
	None HeadAccessoryScaleAlpha; // 0xfb0(0x04)
	None DebugDesiredAimDifference; // 0xfb4(0x0c)
	None bUsingZipLineOver180InterpSpeed; // 0xfc0(0x01)
	None FirstPersonAppliedAimRotator; // 0xfc4(0x0c)
	None FirstPersonAppliedBreathStepTranslation; // 0xfd0(0x0c)
	None FirstPersonBreathSpeed; // 0xfdc(0x04)
	None FirstPersonBreathHeight; // 0xfe0(0x04)
	None FirstPersonStepSpeedStanding; // 0xfe4(0x04)
	None FirstPersonStepSpeedCrouching; // 0xfe8(0x04)
	None FirstPersonStepHeight; // 0xfec(0x04)
	None FirstPersonStepMinSpeed; // 0xff0(0x04)
	None FirstPersonLaggingAimRotator; // 0xff4(0x0c)
	None Normal1PAimInterpSpeed; // 0x1000(0x04)
	None CurrentAimPitchSway; // 0x1004(0x04)
	None CurrentAimPitchSwayOffset; // 0x1008(0x04)
	None CurrentAimYawSway; // 0x100c(0x04)
	None CurrentAimYawSwayOffset; // 0x1010(0x04)
	None NormalLeanAndSwayInterpSpeed; // 0x1014(0x04)
	None ADSBreathingTime; // 0x1024(0x04)
	None ADSSteppingTime; // 0x1028(0x04)
	None bScaleOutWeapon; // 0x102c(0x01)
	None WeaponScaleAlpha; // 0x1030(0x04)
	None WeaponScaleLeftPropOnly; // 0x1034(0x01)
	None WeaponScaleRightPropOnly; // 0x1035(0x01)
	None bUnarmed; // 0x1036(0x01)
	None bMelee; // 0x1037(0x01)
	None bQuickMelee; // 0x1038(0x01)
	None bIsUsingMedPen; // 0x1039(0x01)
	None bEnableMeleeLowerBody; // 0x103a(0x01)
	None bMeleeAim; // 0x103b(0x01)
	None bMeleeNoAim; // 0x103c(0x01)
	None MeleeLowerBodyDuration; // 0x1040(0x04)
	None MeleeLowerBodyDirection; // 0x1044(0x01)
	None bIsUsingTestLocomotion; // 0x1045(0x01)
	None TestCombatState; // 0x1046(0x01)
	None CombatState; // 0x1047(0x01)
	None InitialCombatState; // 0x1048(0x01)
	None DefaultCombatState; // 0x1049(0x01)
	None CombatStateCooldownTime; // 0x104c(0x04)
	None TestCombatStateCooldownTime; // 0x1050(0x04)
	None WeaponCombatStateCooldownTime; // 0x1054(0x04)
	None OnCombatStateChanged; // 0x1058(0x10)
	None CombatStateCooldownTimer; // 0x1068(0x08)
	None TestCombatStateCooldownTimer; // 0x1070(0x08)
	None EngHeadAdditiveAlphaTimer; // 0x1078(0x08)
	None bCooldownBlocked; // 0x1080(0x01)
	None EngagedBlendTime; // 0x1084(0x04)
	None ComBlendTime; // 0x1088(0x04)
	None NonComBlendTime; // 0x108c(0x04)
	None LeftHandAdditiveReloadOverrideDisableBlendTime; // 0x1090(0x04)
	None bDownedIdleToCrawlLoop; // 0x1094(0x01)
	None bDownedCrawlLoopToIdle; // 0x1095(0x01)
	None bCanBlink; // 0x1096(0x01)
	None bIsBlinking; // 0x1097(0x01)
	None bBlinkIsClosingEyes; // 0x1098(0x01)
	None bIsSlowBlinking; // 0x1099(0x01)
	None bIsDoubleBlinking; // 0x109a(0x01)
	None EyeBlinkAlpha; // 0x109c(0x04)
	None TimeToNextBlink; // 0x10a0(0x04)
	None MinimumTimeBetweenBlinks; // 0x10a4(0x04)
	None MaximumTimeBetweenBlinks; // 0x10a8(0x04)
	None EyeBlinkSpeed; // 0x10ac(0x04)
	None EyeBlinkSpeedSlow; // 0x10b0(0x04)
	None SlowBlinkPercentageChance; // 0x10b4(0x04)
	None DoubleBlinkPercentageChance; // 0x10b8(0x04)
	None BlinkTimer; // 0x10c0(0x08)
	None Emotion; // 0x10c8(0x01)
	None EmotionAnimTime; // 0x10cc(0x04)
	None OnAnimationEvent; // 0x10d0(0x10)
	None bIsNonComIdle; // 0x10f0(0x01)
	None OnShoulderSwapChanged; // 0x208(0x10)
	None CameraRootComponent; // 0x218(0x08)
	None MainCameraBoom; // 0x220(0x08)
	None MainCameraComponent; // 0x228(0x08)
	None SprintCameraBoom; // 0x230(0x08)
	None SprintCameraComponent; // 0x238(0x08)
	None TransitionCameraBoom; // 0x240(0x08)
	None TransitionCameraComponent; // 0x248(0x08)
	None ShoulderCameraBoom; // 0x250(0x08)
	None ShoulderCameraComponent; // 0x258(0x08)
	None FirstPersonCameraComponent; // 0x260(0x08)
	None TabletCameraBoom; // 0x268(0x08)
	None TabletCameraComponent; // 0x270(0x08)
	None ActionCameraBoom1; // 0x278(0x08)
	None ActionCameraComponent; // 0x280(0x08)
	None SwimCameraBoom; // 0x288(0x08)
	None SwimCameraComponent; // 0x290(0x08)
	None MountedCameraBoom; // 0x298(0x08)
	None MountedCameraComponent; // 0x2a0(0x08)
	None ActiveCameraComponent; // 0x2a8(0x08)
	None PendingCameraComponent; // 0x2b8(0x08)
	None CameraShoulder; // 0x2c8(0x01)
	None DesiredCameraShoulder; // 0x2c9(0x01)
	None NextShoulderSwapTime; // 0x2cc(0x04)
	None ShoulderSwapCooldownTime; // 0x2d0(0x04)
	None AutoShoulderSwapTime; // 0x2d4(0x04)
	None MeshADSPitchPivotBoneName; // 0x2d8(0x08)
	None CameraFocualThreshold; // 0x2e0(0x04)
	None MinimumFocalPointMaintenanceDistance; // 0x2e4(0x04)
	None AimSnapThrottleTime; // 0x2e8(0x04)
	None ShoulderSwapTime; // 0x2ec(0x04)
	None ZipLineShoulderCameraBoomLength; // 0x2f0(0x04)
	None ZipLineShoulderBoomLengthChangeTime; // 0x2f4(0x04)
	None CrouchCameraShiftInterpSpeed; // 0x2f8(0x04)
	None CrouchCameraBoomLengthScale; // 0x2fc(0x04)
	None SprintCameraChangeDuration; // 0x300(0x04)
	None SprintOutCameraChangeDuration; // 0x304(0x04)
	None AimDownSightsScopeInterpSpeed; // 0x308(0x04)
	None bMantainFocualPointOnCameraTransition; // 0x30c(0x01)
	None bUseAdvancedFocalPointTracking; // 0x30d(0x01)
	None ShoulderSwapProgress; // 0x310(0x04)
	None ZiplineAOSCamVertOffset; // 0x314(0x04)
	None CrouchAOSCamVertOffset; // 0x318(0x04)
	None SwimCameraBoomFloatHeight; // 0x31c(0x04)
	None ShoulderSwapBlendExponent; // 0x320(0x04)
	None bUseFocalPointDoubleCheck; // 0x324(0x01)
	None FocalPointDoubleCheckAllowedBlockDistance; // 0x328(0x04)
	None bFocalPointMaintenanceEnabled; // 0x32c(0x01)
	None LastManualShoulderSwapLocation; // 0x330(0x0c)
	None LastShoulderSwapTimestamp; // 0x33c(0x04)
	None CurrentShoulderSwapTime; // 0x340(0x04)
	None CameraTransitionRotationDelta; // 0x344(0x0c)
	None CameraTransitionRotationDeltaRemaining; // 0x350(0x0c)
	None NextValidAimSnapTime; // 0x35c(0x04)
	None CameraPivotTargetActor; // 0x360(0x08)
	None bPivotCameraToActorNotLocation; // 0x36a(0x01)
	None bTrackTargetAfterPivotingToIt; // 0x36b(0x01)
	None CachedSnapAnchor; // 0x370(0x08)
	None AppliedFocalPointCorrection; // 0x378(0x0c)
	None CameraPivotCurve; // 0x3a8(0x08)
	None StandEmoteCameraVertOffset; // 0x3b0(0x04)
	None CrouchEmoteCameraVertOffset; // 0x3b4(0x04)
	None ProneEmoteCameraVertOffset; // 0x3b8(0x04)
	None StandEmoteCameraInterpSpeed; // 0x3bc(0x04)
	None CrouchEmoteCameraInterpSpeed; // 0x3c0(0x04)
	None ProneEmoteCameraInterpSpeed; // 0x3c4(0x04)
	None RelativeFocalPoint; // 0x3e4(0x0c)
	None NonFocalPointRotation; // 0x3f0(0x0c)
	None AppliedFocalPointYawRotation; // 0x3fc(0x0c)
	None CachedPrimaryWeaponFieldOfView; // 0x418(0x04)
	None CameraInterpSpeed; // 0x438(0x04)
	None CurrentEmoteCameraVertOffset; // 0x43c(0x04)
	None CurrentEmoteCameraInterpSpeed; // 0x440(0x04)
	None bUsingEmoteCamera; // 0x444(0x01)
	None CachedCameraFOV; // 0x448(0x04)
	None CachedViewPortSize; // 0x44c(0x08)
	None CachedHalfTanFOV; // 0x454(0x04)
	None ADSShakeScale; // 0x158(0x04)
	None AttachedCharacterFoundation; // 0x160(0x08)
	None OnMoveModeChangedDynamic; // 0x698(0x10)
	None LastNetUpdateTime; // 0x6a8(0x04)
	None MaxProxyForwardPredictionTime; // 0x6ac(0x04)
	None bCanEverSkipProxyPrediction; // 0x6b2(0x01)
	None SkipProxyPredictionLOD; // 0x6b4(0x04)
	None SkipProxySkydivePredictionDist; // 0x6b8(0x04)
	None bSkipProxyPredictionAfterSkydive; // 0x6bc(0x01)
	None LastFloor; // 0x6c0(0x94)
	None SlowToCrouchTime; // 0x760(0x04)
	None PostCrouchSlowTime; // 0x76c(0x04)
	None CrouchCooldownTime; // 0x778(0x04)
	None TeaBagPreventionCrouchCooldownTime; // 0x77c(0x04)
	None SimulatedProxyVelocity; // 0x784(0x0c)
	None bCanEverPowerSlide; // 0x790(0x01)
	None PowerSlideTurnFrictionMinAngle; // 0x794(0x04)
	None PowerSlideTurnFrictionMaxAngle; // 0x798(0x04)
	None MinimumStartPowerSlideSpeed; // 0x79c(0x04)
	None MinimumPowerSlideSpeed; // 0x7a0(0x04)
	None PowerSlideInitialSpeedBoost; // 0x7a4(0x04)
	None PowerSlideLockoutTime; // 0x7a8(0x04)
	None MinimumPowerSlideTime; // 0x7ac(0x04)
	None PowerSlideMaxStepHeight; // 0x7b0(0x04)
	None PowerSlideTurnDecelerationCurve; // 0x7c0(0x18)
	None PowerSlideDecelerationCurve; // 0x7d8(0x18)
	None PowerSlideResistDeceleration; // 0x7f0(0x04)
	None FallAimForgivenessPeriod; // 0x808(0x04)
	None FallAimForgivenessEndTime; // 0x80c(0x04)
	None MinWalkingAcceleration; // 0x810(0x04)
	None MaxSprintingSpeed; // 0x814(0x04)
	None MaxWalkSpeedProne; // 0x818(0x04)
	None AimOverShoulderSpeedModifier; // 0x81c(0x04)
	None AimDownSightsSpeedModifier; // 0x820(0x04)
	None StrafingSpeedFactor; // 0x824(0x04)
	None ReverseSpeedFactor; // 0x828(0x04)
	None bWantsToSprint; // 0x82c(0x01)
	None bSprintIsHeld; // 0x82c(0x01)
	None bSprintIsToggledOn; // 0x82c(0x01)
	None bSprintInterrupted; // 0x82c(0x01)
	None bIsJumping; // 0x82c(0x01)
	None bCachedCharacterAllowSprintingRightNow; // 0x82c(0x01)
	None bCachedCharacterAllowPowerSlideRightNow; // 0x82c(0x01)
	None CachedWeaponWalkSpeedModifier; // 0x830(0x04)
	None ReducedJumpZVelocity; // 0x834(0x04)
	None ReducedJumpHeightWindow; // 0x838(0x04)
	None bSprinting; // 0x83c(0x01)
	None MinHardLandingHeight; // 0x848(0x04)
	None HardLandingLockoutTime; // 0x84c(0x04)
	None FreefallLandingLockoutTime; // 0x850(0x04)
	None AimState; // 0x854(0x01)
	None KSCharacterOwner; // 0x858(0x08)
	None MaxSprintingSwimSpeed; // 0x860(0x04)
	None MaxSubmergedSwimSpeed; // 0x864(0x04)
	None SwimSurfaceAcceleration; // 0x868(0x04)
	None SwimSubmergedAcceleration; // 0x86c(0x04)
	None MaxDownedSwimSpeed; // 0x870(0x04)
	None SwimStrafingSpeedFactor; // 0x874(0x04)
	None SwimReverseSpeedFactor; // 0x878(0x04)
	None MaxSwimZSpeed; // 0x87c(0x04)
	None SwimZAcceleration; // 0x880(0x04)
	None SurfaceSwimDepth; // 0x884(0x04)
	None SubmergedSwimDepth; // 0x888(0x04)
	None HardMaxSwimDepth; // 0x88c(0x04)
	None FallSpeedWaterDeflectionFactor; // 0x890(0x04)
	None CrouchToSwimDepth; // 0x894(0x04)
	None MantleConfigs; // 0x898(0x10)
	None m_fLedgeGrabDistance; // 0x8b8(0x04)
	None m_fSprintLedgeGrabDistance; // 0x8bc(0x04)
	None m_fLedgeGrabbableWallZ; // 0x8c0(0x04)
	None m_fMaxLedgeCheckHeight; // 0x8c4(0x04)
	None m_fMinLedgeCheckHeight; // 0x8c8(0x04)
	None m_fSwimHeightBoost; // 0x8cc(0x04)
	None m_fLedgeGrabbableZ; // 0x8d0(0x04)
	None m_fVaultZSpeed; // 0x8d4(0x04)
	None m_fEnhancedZSpeed; // 0x8d8(0x04)
	None m_fVaultLateralSpeed; // 0x8dc(0x04)
	None m_fVaultFacingThreshold; // 0x8e0(0x04)
	None m_fVaultVerticalCheckInterval; // 0x8e4(0x04)
	None m_fVaultHeadClearance; // 0x8e8(0x04)
	None m_fMantleDownDistance; // 0x8ec(0x04)
	None m_fVaultForwardDistance; // 0x8f0(0x04)
	None m_fMantleMaxDistance; // 0x8f4(0x04)
	None m_vMantleLaunchVelocity; // 0x8f8(0x0c)
	None m_fVaultErrorForgiveness; // 0x904(0x04)
	None m_fVaultStepFactor; // 0x908(0x04)
	None MantleStepHeightProxy; // 0x90c(0x04)
	None bRequireJumpForVault; // 0x910(0x01)
	None MaximumVelocityPreserveHeight; // 0x914(0x04)
	None MinimumSpeedForFromJumpMantles; // 0x918(0x04)
	None bAllowMantleEarlyOutOnFire; // 0x91c(0x01)
	None bRestrictVaultingIntoCrouch; // 0x91d(0x01)
	None VaultFromGroundTraceHeightAdjust; // 0x920(0x04)
	None bVaultDebugPrinting; // 0x95c(0x01)
	None CurrentMantleConfig; // 0x960(0xa8)
	None MantleClothSimCurve; // 0xa50(0x18)
	None m_fPostSprintLockoutTime; // 0xa78(0x04)
	None m_fRemainingPostSprintLockoutTime; // 0xa7c(0x04)
	None FreeFallClearanceHeight; // 0xa80(0x04)
	None MinFreeFallSpeedZ; // 0xa84(0x04)
	None DefaultFreeFallSpeedZ; // 0xa88(0x04)
	None MaxFreeFallSpeedZ; // 0xa8c(0x04)
	None MinFreeFallForwardSpeed; // 0xa90(0x04)
	None DefaultFreeFallForwardSpeed; // 0xa94(0x04)
	None MaxFreeFallForwardSpeed; // 0xa98(0x04)
	None MaxDiveForwardSpeed; // 0xa9c(0x04)
	None MaxFreeFallLateralSpeed; // 0xaa0(0x04)
	None MaxFreeFallLateralAcceleration; // 0xaa4(0x04)
	None MaxFreeFallReverseAcceleration; // 0xaa8(0x04)
	None FreeFallAirControl; // 0xaac(0x04)
	None FreeFallDelay; // 0xab0(0x04)
	None bInFreeFall; // 0xab4(0x01)
	None bWingsuitHasBeenDisabled; // 0xab5(0x01)
	None FreeFallBrakingAcceleration; // 0xab8(0x04)
	None FreeFallDiveThresholdAngle; // 0xabc(0x04)
	None FreeFallDiveForwardInputThreshold; // 0xac0(0x04)
	None bWantsToEndFreeFallEarly; // 0xac4(0x01)
	None bIsFreeFallDiving; // 0xad8(0x01)
	None LastYawRotation; // 0xadc(0x0c)
	None FreeFallYawAccumDeltaTime; // 0xae8(0x04)
	None FreeFallYawTotalDeltaTime; // 0xaec(0x04)
	None FreeFallDelayProgress; // 0xaf0(0x04)
	None FreeFallHeightActor; // 0xaf4(0x08)
	None bUseFreeFallStartHeight; // 0xafc(0x01)
	None FreeFallNetSmoothTime; // 0xb00(0x04)
	None PostFreeFallNetSmoothTimeRecoveryRate; // 0xb04(0x04)
	None bWingsuitControls; // 0xb09(0x01)
	None WingsuitGlideDragCoefficient; // 0xb0c(0x04)
	None WingsuitDiveDragCoefficient; // 0xb10(0x04)
	None WingsuitGlideSurfaceArea; // 0xb14(0x04)
	None WingsuitDiveSurfaceArea; // 0xb18(0x04)
	None bCachedCharacterAllowDodgeRollRightNow; // 0xb1c(0x01)
	None bStartDodgeRoll; // 0xb1c(0x01)
	None bWantsToDodgeRollOnLanding; // 0xb20(0x01)
	None bShouldDodgeRollOnLanding; // 0xb21(0x01)
	None MidairDodgeRollCountSinceLastGrounded; // 0xb24(0x04)
	None MaxDodgeRollSpeed; // 0xb28(0x04)
	None DodgeRollDistance; // 0xb2c(0x04)
	None bCanDodgeRollFromAimDownSights; // 0xb30(0x01)
	None DodgeRollCooldownTime; // 0xb34(0x04)
	None DodgeRollForgivenessPeriod; // 0xb3c(0x04)
	None DodgeRollForgivenessEndTime; // 0xb40(0x04)
	None DodgeRollAcceleration; // 0xb58(0x04)
	None BrakingDecelerationPostDodgeRoll; // 0xb5c(0x04)
	None bEnableBrakingDecelerationPostDodgeRoll; // 0xb60(0x01)
	None DodgeRollVelocityCurve; // 0xb68(0x18)
	None DodgeRollClothSimCurve; // 0xb80(0x18)
	None bCachedCharacterAllowLungeRightNow; // 0xb98(0x01)
	None CurrentLungeDistance; // 0xb9c(0x04)
	None MaxLungeDistance; // 0xba0(0x04)
	None LungeTarget; // 0xba8(0x08)
	None CurrentLungeDuration; // 0xbb0(0x04)
	None MaxLungeDuration; // 0xbb4(0x04)
	None LungeAcceleration; // 0xbb8(0x04)
	None MaxLungeSpeed; // 0xbbc(0x04)
	None LungeStopLateralDistance; // 0xbc0(0x04)
	None LungeStopVerticalDistance; // 0xbc4(0x04)
	None LungeAirControl; // 0xbc8(0x04)
	None FlightRecoverySplineComponent; // 0xbe8(0x08)
	None FlightRecoverySpeed; // 0xbf4(0x04)
	None bCachedCharacterAllowAbilityMoveRightNow; // 0xbf8(0x01)
	None bStartAbilityMovement; // 0xbf8(0x01)
	None bCachedCharacterAllowZipLineRightNow; // 0xc00(0x01)
	None bZiplineEndsEnforceDirection; // 0xc08(0x01)
	None bAllowDodgeRollIntoZipline; // 0xc09(0x01)
	None bRequireJumpForZipline; // 0xc0a(0x01)
	None bRequireDownwardMovementToZipline; // 0xc0b(0x01)
	None bAllowZiplineReverseViaDodgeRoll; // 0xc0c(0x01)
	None ZiplineAcceleration; // 0xc10(0x04)
	None bEnableFriendlyNudging; // 0xc15(0x01)
	None MaxEmoteInterruptDistance; // 0xc1c(0x04)
	None MaxEmoteMovingInterruptDistance; // 0xc20(0x04)
	None CachedMaxEmoteInteruptDistance; // 0xc24(0x04)
	None bClientManuallyShoulderSwappedNearby; // 0xc28(0x01)
	None bForceTextureResidentFlagOnAllTextures; // 0xd50(0x01)
	None TeleportDistanceDeltaThreshold; // 0xd68(0x04)
	None bEnableDedicatedServerRequiredBones; // 0xd88(0x01)
	None RequiredDedicatedServerBoneNames; // 0xd90(0x10)
	None ChildPhysicsAssetMap; // 0xda8(0x50)
	None ChildPhysicsAssetKeywords; // 0xdf8(0x10)
	None bBasePhysicsAssetChanged; // 0xe08(0x01)
	None LastBasePhysAssetFromMesh; // 0xe0c(0x08)
	None bApplySkeletalLengthParameterToMaterials; // 0xe14(0x01)
	None SkeletalMeshLengthParameterName; // 0xe18(0x08)
	None bApplySkeletalWidthParameterToMaterials; // 0xe20(0x01)
	None SkeletalMeshWidthParameterName; // 0xe24(0x08)
	None bApplySkeletalHeightParameterToMaterials; // 0xe2c(0x01)
	None SkeletalMeshHeightParameterName; // 0xe30(0x08)
	None PreRegistrationChildCollisionCache; // 0xe38(0x10)
	None SocketLookupName; // 0x208(0x08)
	None OffsetType; // 0x210(0x01)
	None CrouchingHandlingType; // 0x211(0x01)
	None AdditiveCrouchOffset; // 0x214(0x0c)
	None bDefaultChargeOnRoundStarted; // 0xc8(0x01)
	None ChargePerRound; // 0xcc(0x04)
	None bDefaultChargePerSecond; // 0xd0(0x01)
	None ChargePerSecond; // 0xd4(0x04)
	None ChargePerDown; // 0xd8(0x04)
	None ChargePerElimination; // 0xdc(0x04)
	None ChargePerAssist; // 0xe0(0x04)
	None ChargePerRevive; // 0xe4(0x04)
	None WeaponStatDisplayTime; // 0xb0(0x04)
	None DifficultyLevelsDisplayTime; // 0xb4(0x04)
	None r_bNoCooldown; // 0xb8(0x01)
	None r_bNoEnergyUsage; // 0xb8(0x01)
	None r_bNoDamageTaken; // 0xb8(0x01)
	None r_CanViewHealth; // 0xb8(0x01)
	None r_CanViewLocation; // 0xb8(0x01)
	None r_HudVisible; // 0xb8(0x01)
	None CachedWeaponStats; // 0xc0(0x10)
	None WeaponDisplayStartTime; // 0xd0(0x04)
	None CachedDifficultyLevels; // 0xd8(0x10)
	None DifficultyLevelsDisplayStartTime; // 0xe8(0x04)
	None BaseDrawPosition; // 0xec(0x08)
	None OwningPersistantPlayerData; // 0x220(0x08)
	None LobbyCharacterClass; // 0x228(0x08)
	None ChildLobbyCharacter; // 0x230(0x08)
	None ModelViewerDelay; // 0x238(0x04)
	None JobSelectionState; // 0x23c(0x01)
	None SkinPreloadBundles; // 0x268(0x10)
	None PositionIndex; // 0x278(0x04)
	None bOffsetCharacterByCapsuleHeight; // 0x27c(0x01)
	None bKeepActiveJobVisibleWhileLoading; // 0x27d(0x01)
	None BaseComponent; // 0x280(0x08)
	None JobModelViewerTimer; // 0x288(0x08)
	None ActiveJobItem; // 0x290(0x08)
	None ActiveSkinBundle; // 0x298(0x08)
	None ActiveFullSkinMap; // 0x2a0(0x50)
	None QueuedJob; // 0x2f0(0x28)
	None CachedState; // 0x318(0x01)
	None bHideChildCharacter; // 0x319(0x01)
	None OnJobPreviewStateChangedDel; // 0x338(0x10)
	None OnPersistentPlayerDataSetDel; // 0x348(0x10)
	None JobFromLoadout; // 0x370(0x08)
	None PendingFullSkinMap; // 0x378(0x50)
	None PropsAndSkins; // 0x3c8(0x50)
	None bHasTriggeredVO; // 0x420(0x01)
	None CinematicSequenceManager; // 0x428(0x08)
	None CinematicCharacterType; // 0x430(0x01)
	None bRequireCharacterToBeVisibleToCountAsLoaded; // 0x431(0x01)
	None CinematicDatas; // 0x30(0x50)
	None SequenceActor; // 0x220(0x08)
	None Sequence; // 0x228(0x08)
	None CinematicCharacterHandles; // 0x230(0x10)
	None CinematicCharacterClass; // 0x240(0x08)
	None SequenceList; // 0x248(0x50)
	None DefaultLevelSequence; // 0x298(0x08)
	None DeadZoneRadius; // 0x38(0x04)
	None CardinalDeadZoneHalfWidth; // 0x3c(0x04)
	None TargetingTick; // 0x28(0x30)
	None bAimedAtEnemy; // 0x58(0x01)
	None bAimedAtFriendly; // 0x59(0x01)
	None TargetingIndex; // 0x5c(0x04)
	None ModeKey; // 0x60(0x08)
	None OverriddenOriginTransform; // 0x70(0x30)
	None OverriddenOriginTransformOffset; // 0xa0(0x30)
	None bOverrideOriginTransform; // 0xd0(0x01)
	None bCookTimeAffectsVisuals; // 0xd1(0x01)
	None AimPostProcessCookTimeParameterName; // 0xd4(0x08)
	None AimPostProcessMaterial; // 0xe0(0x08)
	None AimPostProcessMaterialInstance; // 0xe8(0x08)
	None OverriddenWeaponAsset; // 0xf0(0x08)
	None ChildTargetingModules; // 0xf8(0x10)
	None HitScanRange; // 0x108(0x04)
	None OwningWeaponComponent; // 0x118(0x08)
	None OwningCharacter; // 0x120(0x08)
	None StateValidators; // 0x128(0x10)
	None ProjectileSimFrequency; // 0x138(0x04)
	None MaxSimTime; // 0x13c(0x04)
	None InitialStrideTime; // 0x140(0x04)
	None ArcTemplate; // 0x148(0x08)
	None ArcSegmentMaterials; // 0x150(0x10)
	None FirstSegmentScalarParameterName; // 0x160(0x08)
	None ArcColorParameterName; // 0x168(0x08)
	None ArcCookParameterName; // 0x170(0x08)
	None PostProcessStopLocationParameterName; // 0x178(0x08)
	None PostProcessRadiusParameterName; // 0x180(0x08)
	None bPostProcessParameterIndexed; // 0x188(0x01)
	None ImpactComponentType; // 0x189(0x01)
	None BounceComponentType; // 0x18a(0x01)
	None ImpactComponentSize; // 0x18c(0x0c)
	None BounceComponentSize; // 0x198(0x0c)
	None ImpactComponentMaterial; // 0x1a8(0x08)
	None BounceComponentMaterial; // 0x1b0(0x08)
	None ImpactColorParameterName; // 0x1b8(0x08)
	None ImpactCookParameterName; // 0x1c0(0x08)
	None BounceColorParameterName; // 0x1c8(0x08)
	None BounceCookParameterName; // 0x1d0(0x08)
	None ImpactMesh; // 0x1d8(0x08)
	None BounceMesh; // 0x1e0(0x08)
	None SplineMeshAxisType; // 0x1e8(0x01)
	None ArcSegmentScale; // 0x1ec(0x08)
	None BounceCount; // 0x1f4(0x04)
	None MaxSegmentsPerBounceArc; // 0x1f8(0x04)
	None TargetingDetailsWidgetClass; // 0x200(0x08)
	None ArcComponent; // 0x208(0x10)
	None ImpactMaterialInstance; // 0x218(0x08)
	None BounceMaterialInstance; // 0x220(0x08)
	None ArcSegmentMaterialInstances; // 0x228(0x10)
	None ImpactComponent; // 0x238(0x08)
	None BounceComponents; // 0x240(0x10)
	None TargetingDetailsWidgetComponent; // 0x250(0x08)
	None TargetingDetailsWidget; // 0x258(0x08)
	None bTargetingVisualsInitialized; // 0x260(0x01)
	None ProjectileAsset; // 0x268(0x08)
	None ProjectileCDO; // 0x270(0x08)
	None CachedPredictedPathResults; // 0x288(0xb8)
	None PredictedGrenadePathArcLength; // 0x340(0x04)
	None FuseWarningColor; // 0x3a8(0x10)
	None FuseSafeColor; // 0x3b8(0x10)
	None FuseWarningStartTime; // 0x3c8(0x04)
	None GrenadeAsset; // 0x3d0(0x08)
	None Characters; // 0x230(0x50)
	None RadialMenuItemInstanceClass; // 0x258(0x28)
	None AssetDataTables; // 0x280(0x10)
	None JobAllowList; // 0x290(0x10)
	None GlobalRadialMenuItemCooldownTime; // 0x2a0(0x04)
	None InterruptNotifyBehavior; // 0x2a4(0x01)
	None RadialMenuItemIsPlayingTimeout; // 0x2a8(0x04)
	None InterruptRules; // 0x2ac(0x04)
	None bLockPawnRotationWhilePlaying; // 0x2b0(0x01)
	None Emotion; // 0x2b1(0x01)
	None PingType; // 0x2b8(0x01)
	None PingMessage; // 0x2b9(0x01)
	None RadialMenuItemAsset; // 0x2d8(0x08)
	None OnObjectiveUpdate; // 0x230(0x10)
	None MapIconType; // 0x240(0x01)
	None DisplayId; // 0x244(0x04)
	None ActiveObjectiveIndex; // 0x248(0x04)
	None bUsed; // 0x24c(0x01)
	None ObjectiveState; // 0x250(0x14)
	None ObjectiveId; // 0x264(0x04)
	None ObjectiveType; // 0x268(0x01)
	None DefaultState; // 0x26c(0x08)
	None InitialActivateState; // 0x274(0x08)
	None DisplayName; // 0x280(0x18)
	None ObjectiveDisplayLabel; // 0x298(0x10)
	None bAppendActiveIndexToLabel; // 0x2a8(0x01)
	None ObjectiveLootGroup; // 0x2c8(0x04)
	None NavigationLocation; // 0x2cc(0x0c)
	None UseNavLocationForDistance; // 0x2e4(0x01)
	None MinimapDisplayWidget; // 0x2e8(0x28)
	None FullmapDisplayWidget; // 0x310(0x28)
	None OverlayDisplayWidget; // 0x338(0x28)
	None StimuliSourceComponent; // 0x360(0x08)
	None SoundEventName; // 0x370(0x08)
	None SoundEventLoudness; // 0x378(0x04)
	None RepeatTimeToNotifyBots; // 0x37c(0x04)
	None POIState; // 0x390(0x01)
	None ObjectiveInfo; // 0x398(0x68)
	None ObjectiveTimerInfo; // 0x400(0x38)
	None ObjectiveCaptureInfo; // 0x438(0x14)
	None OnCapturedDelegate; // 0x450(0x10)
	None OnUncapturedDelegate; // 0x460(0x10)
	None OnContestedDelegate; // 0x470(0x10)
	None OnUncontestedDelegate; // 0x480(0x10)
	None OnOwningTeamChangedDelegate; // 0x490(0x10)
	None OnCapturingTeamChangedDelegate; // 0x4a0(0x10)
	None OnScorePeriodElapsedDelegate; // 0x4b0(0x10)
	None ControlPointSettings; // 0x4c0(0x30)
	None OwningTeam; // 0x4f0(0x08)
	None CapturingTeam; // 0x4f8(0x08)
	None CaptureProgress; // 0x500(0x04)
	None ScoreUpdatePeriod; // 0x504(0x04)
	None NumTeamMembersCapturing; // 0x508(0x01)
	None SimulatedProgressRate; // 0x50c(0x04)
	None SimulatedTimeUntilScore; // 0x510(0x04)
	None FavoredSide; // 0x514(0x04)
	None bHideLocked; // 0x518(0x01)
	None RegisteredPawnOverlapComponents; // 0x520(0x10)
	None OverlappingPawns; // 0x530(0x10)
	None bLinkLocalSkinObjectToBodyApparel; // 0xb0(0x01)
	None CharacterOwner; // 0xb8(0x08)
	None ApparelAsset; // 0xc0(0x08)
	None SkinObject; // 0xc8(0x08)
	None DamageCategory; // 0x40(0x01)
	None HitPawnEffect; // 0x48(0x08)
	None HitBodyAudioEvent; // 0x50(0x08)
	None HitHeadAudioEvent; // 0x58(0x08)
	None HitResistedAudioEvent; // 0x60(0x08)
	None HitReducedAudioEvent; // 0x68(0x08)
	None HitByAudioEvent; // 0x70(0x08)
	None HitByResistedAudioEvent; // 0x78(0x08)
	None HitByReducedAudioEvent; // 0x80(0x08)
	None HitSpecialEffect; // 0x88(0x50)
	None EffectAttachPointName; // 0xd8(0x08)
	None bPreProcessResistable; // 0xe0(0x01)
	None bRequiresDamageForDebuffs; // 0xe1(0x01)
	None bUIDisplayable; // 0xe2(0x01)
	None bClientPredictable; // 0xe3(0x01)
	None bHideDamageDirection; // 0xe4(0x01)
	None bCountTowardsTrackedFriendlyFireDamage; // 0xe5(0x01)
	None bDoFriendlyDamageWithReverseFriendlyFire; // 0xe6(0x01)
	None DebuffsAppliedOnDamage; // 0xe8(0x10)
	None FlinchDuration; // 0xf8(0x04)
	None FlinchRecoveryRate; // 0xfc(0x04)
	None FlinchMinHeightBody; // 0x100(0x04)
	None FlinchMaxHeightBody; // 0x104(0x04)
	None FlinchMinHeightHead; // 0x108(0x04)
	None FlinchMaxHeightHead; // 0x10c(0x04)
	None DamageTags; // 0x110(0x20)
	None ImpulseMagnitudePerDamage; // 0x130(0x04)
	None EMPDuration; // 0x138(0x04)
	None FireDuration; // 0x138(0x04)
	None EffectiveAngle; // 0x138(0x04)
	None bRevealOnly; // 0x138(0x01)
	None RevealDuration; // 0x13c(0x04)
	None StunDuration; // 0x138(0x04)
	None WallMarkerMaxDistance; // 0x128(0x04)
	None bBlockedByWall; // 0x12c(0x01)
	None bWallMarkerActive; // 0x12d(0x01)
	None WallMarkerWorldLocation; // 0x130(0x0c)
	None ProjWeaponAsset; // 0x140(0x08)
	None MapPointTypes; // 0x220(0x20)
	None ValidSides; // 0x240(0x10)
	None bShouldCrouch; // 0x250(0x01)
	None RelevantObjective; // 0x258(0x08)
	None AssignedDefenders; // 0x260(0x10)
	None MinPerceptionValue; // 0xb0(0x04)
	None MaxPerceptionValue; // 0xb4(0x04)
	None RandomizedPerceptionValue; // 0xb8(0x04)
	None ShouldReactWithEMP; // 0xbc(0x01)
	None ShouldReactWithGunshot; // 0xbd(0x01)
	None ActorsSeenBy; // 0xc0(0x10)
	None bRenderTrueCollisionUntilDestruction; // 0x228(0x01)
	None SceneRoot; // 0x230(0x08)
	None VisualMesh; // 0x238(0x08)
	None TrueCollision; // 0x240(0x08)
	None SpeedOverlap; // 0x248(0x08)
	None bAllowDestructibleMeshSimulation; // 0x250(0x01)
	None bAllowPlayerToWalkOnSurface; // 0x251(0x01)
	None bAllowDestructionAudio; // 0x252(0x01)
	None DefaultDestructionEvent; // 0x258(0x08)
	None bSpawnBreakParticleAtActorLocation; // 0x260(0x01)
	None BreakParticles; // 0x268(0x08)
	None ImpactParticles; // 0x270(0x08)
	None FakeHitDecalParticle; // 0x278(0x08)
	None CharacterSpeedOverlapCameraShake; // 0x280(0x08)
	None OnDestructibleDestroyed; // 0x288(0x10)
	None MaxHealth; // 0x298(0x04)
	None Health; // 0x29c(0x04)
	None LocalHealth; // 0x2a0(0x04)
	None bResetOnRoundChange; // 0x2a4(0x01)
	None bAllowsWeaponPenetration; // 0x2a5(0x01)
	None bCanBreakWithSpeed; // 0x2a6(0x01)
	None bAllProjectilesInstantBreak; // 0x2a7(0x01)
	None SpeedBreakThreshold; // 0x2a8(0x04)
	None bTransparentDestructible; // 0x2ac(0x01)
	None DamageTypeMultipliers; // 0x2b0(0x50)
	None BreakingDamage; // 0x300(0x04)
	None BreakingImpulse; // 0x304(0x04)
	None bUseRadialDestruction; // 0x308(0x01)
	None BreakingRadius; // 0x30c(0x04)
	None ImpactImpulseOffset; // 0x310(0x04)
	None bIgnoreCharacterVerticalSpeed; // 0x314(0x01)
	None BadDestroyCheckTime; // 0x318(0x04)
	None EventlessDestroyWaitTime; // 0x31c(0x04)
	None MeshDestroyed; // 0x320(0x01)
	None PhysicalMaterialOverride; // 0x328(0x08)
	None MeshAsset; // 0x330(0x08)
	None LastHitLocation; // 0x338(0x0c)
	None LastHitDirection; // 0x344(0x0c)
	None LastHitNormal; // 0x350(0x0c)
	None FakeHitDecals; // 0x360(0x10)
	None StimuliSourceComponent; // 0x380(0x08)
	None DistanceOptimizationChangedDelegate; // 0xb0(0x10)
	None bAlwaysDisableOnServer; // 0xc0(0x01)
	None ActiveDistance; // 0xc4(0x04)
	None CurrentDistance; // 0xc8(0x04)
	None ComponentsToControl; // 0xd0(0x10)
	None ActorsToControl; // 0xe0(0x10)
	None WayPointSet; // 0x258(0x08)
	None ReverseWayPointSetDirection; // 0x260(0x01)
	None FlightDistanceModifier; // 0x264(0x04)
	None FreefallXYDistance; // 0x268(0x04)
	None FreefallHeight; // 0x26c(0x04)
	None POIState; // 0x390(0x01)
	None Team; // 0x394(0x04)
	None FlipTeam; // 0x398(0x04)
	None bActivated; // 0x39c(0x01)
	None PointAreaComponentTag; // 0x3a0(0x08)
	None PointAreaComponents; // 0x3a8(0x10)
	None CurrentInteractionManager; // 0x3b8(0x08)
	None CurrentInteractor; // 0x3c0(0x08)
	None CurrentInteractionProgress; // 0x3c8(0x04)
	None MacGuffinEquipPoint; // 0x3cc(0x08)
	None DropOffDuration; // 0x3d4(0x04)
	None DropOffProgressText; // 0x3d8(0x18)
	None DropOffPrompt; // 0x3f0(0x18)
	None DropOffInteractionMode; // 0x408(0x08)
	None InteractionBlockerManager; // 0x410(0x08)
	None InteractableComponent; // 0x428(0x08)
	None WeaponSlotsToDropOnDeath; // 0xb0(0x20)
	None RandomDeathDropList; // 0xd0(0x10)
	None WeaponSlotsToDropOnDowned; // 0xe0(0x20)
	None RandomDownDropList; // 0x100(0x10)
	None PlayerDropLifetime; // 0x110(0x04)
	None RequiredAmmoPercent; // 0x114(0x04)
	None DefaultSceneRoot; // 0x220(0x08)
	None SharedRoot; // 0x228(0x08)
	None PlaneBase; // 0x230(0x08)
	None EnvironmentStaticMesh; // 0x238(0x08)
	None NoFireZone; // 0x240(0x08)
	None OutOfBoundsVolume; // 0x248(0x08)
	None DoorCollider; // 0x250(0x08)
	None DropshipInteriorRoot; // 0x258(0x08)
	None DropshipInteriorGeometry; // 0x260(0x08)
	None DropshipInteriorLights; // 0x268(0x08)
	None DropshipExteriorRoot; // 0x270(0x08)
	None DropshipExteriorGeometry; // 0x278(0x08)
	None FreeFallHeightMarker; // 0x280(0x08)
	None PlayerShopZone; // 0x288(0x08)
	None DropshipExitZone; // 0x290(0x08)
	None DropshipModZone; // 0x298(0x08)
	None KSPlayerStart_01; // 0x2a0(0x08)
	None KSPlayerStart_02; // 0x2a8(0x08)
	None KSPlayerStart_03; // 0x2b0(0x08)
	None KSPlayerStart_04; // 0x2b8(0x08)
	None KSPlayerStart_05; // 0x2c0(0x08)
	None KSPlayerStart_06; // 0x2c8(0x08)
	None KSPlayerStart_07; // 0x2d0(0x08)
	None KSPlayerStart_08; // 0x2d8(0x08)
	None BotFactory; // 0x2e0(0x08)
	None PlayerDetectionVolume; // 0x2e8(0x08)
	None KSDistanceOptimization; // 0x2f0(0x08)
	None DropshipSideNumber; // 0x2f8(0x04)
	None bOutOfBoundsEnabled; // 0x2fc(0x01)
	None OutOfBoundsMaxScale; // 0x300(0x04)
	None OutOfBoundsInitialScale; // 0x304(0x04)
	None OutOfBoundsStartSeconds; // 0x308(0x04)
	None bDoorOpen; // 0x30c(0x01)
	None bCloaked; // 0x30d(0x01)
	None InitialPlayerStarts; // 0x310(0x10)
	None DropshipInteriorVar; // 0x320(0x08)
	None DropshipInteriorLightsVar; // 0x328(0x08)
	None DropshipExteriorVar; // 0x330(0x08)
	None bShouldReverseWayPointSetDirection; // 0x358(0x01)
	None WayPointSet; // 0x360(0x08)
	None BotSpawnCollection; // 0x368(0x08)
	None YawDirection; // 0x268(0x04)
	None YawDirection; // 0x220(0x04)
	None DefaultSceneRoot; // 0x220(0x08)
	None SharedRoot; // 0x228(0x08)
	None StartingDoorLocation; // 0x230(0x0c)
	None StartingMeshLocation1; // 0x23c(0x0c)
	None StartingMeshLocation2; // 0x248(0x0c)
	None StartingDoorRotator; // 0x254(0x0c)
	None StartingMeshRotator1; // 0x260(0x0c)
	None StartingMeshRotator2; // 0x26c(0x0c)
	None DefaultSceneRoot; // 0x220(0x08)
	None SharedRoot; // 0x228(0x08)
	None StartingDoorLocation; // 0x230(0x0c)
	None StartingMeshLocation1; // 0x23c(0x0c)
	None StartingMeshLocation2; // 0x248(0x0c)
	None StartingDoorRotator; // 0x254(0x0c)
	None StartingMeshRotator1; // 0x260(0x0c)
	None StartingMeshRotator2; // 0x26c(0x0c)
	None DefaultSceneRoot; // 0x220(0x08)
	None SharedRoot; // 0x228(0x08)
	None DynamicMaskRenderTarget; // 0xb0(0x08)
	None TargetDimPixels; // 0xb8(0x04)
	None EmptyColor; // 0xbc(0x10)
	None FillColor; // 0xcc(0x10)
	None ConversionBasisComponent; // 0xe0(0x08)
	None WorldToTargetScaleX; // 0xe8(0x04)
	None WorldToTargetScaleY; // 0xec(0x04)
	None AbilityEACWeaponTypeId; // 0x38(0x02)
	None WeaponTypeToAntiCheatId; // 0x40(0x10)
	None WeaponTypeToAntiCheatIdMap; // 0x50(0x50)
	None bFlushKeysOnPlay; // 0x2b8(0x01)
	None EmoteCosmeticComponentClass; // 0x2c0(0x28)
	None EmoteCameraPosition; // 0x2e8(0x01)
	None EmotePreviewLocationOffset; // 0x2ec(0x0c)
	None EmotePreviewScaleOverride; // 0x2f8(0x04)
	None bMovingEmote; // 0x2fc(0x01)
	None ApparelObjectsToInfluence; // 0x300(0x10)
	None WeaponPropsToPreload; // 0x310(0x10)
	None PawnRotationLockId; // 0x120(0x01)
	None EmotionInstanceId; // 0x124(0x04)
	None EmoteAsset; // 0x158(0x08)
	None PlayTicker; // 0x160(0x02)
	None SkinObject; // 0x168(0x08)
	None SkinTable; // 0x170(0x08)
	None bIsInitialized; // 0x218(0x01)
	None bIsPlaying; // 0x219(0x01)
	None bShouldLoop; // 0x21a(0x01)
	None LastEmotePlayedLocation; // 0x21c(0x0c)
	None InterruptTick; // 0x230(0x30)
	None SubInstances; // 0x288(0x10)
	None StatTrackingNumber; // 0x298(0x04)
	None MinimumEmoteLoopDuration; // 0x28(0x04)
	None MaxAudibleEmoteDistance; // 0x248(0x04)
	None SkinAssetQueryComponent; // 0x220(0x08)
	None EmoteAssetQueryComponent; // 0x228(0x08)
	None bStartOnBeginPlay; // 0x230(0x01)
	None bAutoDisableTick; // 0x231(0x01)
	None DefaultEmote; // 0x238(0x08)
	None RequestedSkinBundles; // 0x240(0x10)
	None bRequestedSkinsOnly; // 0x250(0x01)
	None BotFactories; // 0x258(0x10)
	None SkinArrayIdx; // 0x268(0x04)
	None EmoteArrayIdx; // 0x26c(0x04)
	None EmoteInstances; // 0x270(0x10)
	None bEmotesNeedPlay; // 0x280(0x01)
	None OnEmotionChanged; // 0xb0(0x10)
	None EmotionComponentOwner; // 0xc0(0x10)
	None EmotionInstances; // 0xd0(0x50)
	None TopInstanceId; // 0x120(0x04)
	None TopEmotionEnum; // 0x124(0x01)
	None NextEmotionId; // 0x128(0x04)
	None ConversionEntries; // 0x180(0x10)
	None EmotionNameToEnumMap; // 0x190(0x50)
	None EmotionEnumToNameMap; // 0x1e0(0x50)
	None BotEncounters; // 0x220(0x10)
	None OnBotDeath; // 0x230(0x10)
	None OnWaveFinished; // 0x240(0x10)
	None OnBotSpawned; // 0x250(0x10)
	None bPermaRevealFill; // 0x260(0x01)
	None bPermaRevealMark; // 0x261(0x01)
	None bPreferHiddenPlayerStarts; // 0x262(0x01)
	None fAutoSpawnScoreRate; // 0x2f8(0x04)
	None fAutoSpawnScore; // 0x304(0x04)
	None SpawnTable; // 0x30(0x08)
	None nMaxSpawnsPerPlayer; // 0x38(0x50)
	None WaveRevealParameters; // 0x88(0x48)
	None ItemTables; // 0xb0(0x50)
	None ChosenEquipment; // 0x100(0x50)
	None EnforcedEquipmentState; // 0x1a0(0x08)
	None EnforcedItems; // 0x220(0x10)
	None OnEnforcedItemsUpdated; // 0x230(0x10)
	None EnvironmentTag; // 0x228(0x08)
	None ContainedEnvironmentTrackers; // 0x230(0x10)
	None BlackboardKeyName; // 0x28(0x08)
	None TraceData; // 0x1f8(0x30)
	None TraceFromContext; // 0x228(0x38)
	None ItemHeightOffset; // 0x260(0x38)
	None ContextHeightOffset; // 0x298(0x38)
	None Context; // 0x2d0(0x08)
	None EquippedInventory; // 0xb0(0x50)
	None SlotlessInventory; // 0x150(0x10)
	None MultiUseEquipPoints; // 0x160(0x20)
	None EquipmentManagerOwner; // 0x180(0x10)
	None OnEquipmentAddedDel; // 0x190(0x10)
	None OnEquipmentRemovedDel; // 0x1b8(0x10)
	None EmoteCooldownExpireTime; // 0x208(0x04)
	None QuipCooldownExpireTime; // 0x20c(0x04)
	None CommunicationCooldownExpireTime; // 0x210(0x04)
	None RadialMenuItemCooldownExpireTime; // 0x214(0x04)
	None OnEventChallengeActivitiesReady; // 0x210(0x10)
	None OnSelectedChallengeChanged; // 0x220(0x10)
	None EventChallengesReady; // 0x230(0x01)
	None OnTriggered; // 0x30(0x10)
	None bDoesTick; // 0x40(0x01)
	None PlayerController; // 0x44(0x08)
	None WeakActivityInstance; // 0x4c(0x08)
	None ProgressEarnedBySource; // 0x58(0x50)
	None ProgressEarnedByEvent; // 0xa8(0x50)
	None ProgressEarnedByBooster; // 0xf8(0x50)
	None ExtraData; // 0x148(0x50)
	None PlayerData; // 0x198(0x08)
	None ExperimentConfigRow; // 0x28(0x10)
	None bAllowManualSetVisibility; // 0x220(0x01)
	None ActivatedCinematicSubLevelNames; // 0x228(0x10)
	None Component; // 0x238(0x08)
	None ObjectiveInfo; // 0x398(0x68)
	None ObjectiveTimerInfo; // 0x400(0x38)
	None ObjectiveCaptureInfo; // 0x438(0x14)
	None POIState; // 0x44c(0x01)
	None InteractionBlockerManager; // 0x450(0x08)
	None InteractableComponent; // 0x468(0x08)
	None FavoredSide; // 0x470(0x04)
	None TimeToHack; // 0x474(0x04)
	None TimeToDehack; // 0x478(0x04)
	None CurrentInteractionProgress; // 0x47c(0x04)
	None CurrentInteractionManager; // 0x480(0x08)
	None ComputerUser; // 0x488(0x08)
	None HackingInteractionProgressText; // 0x490(0x18)
	None DehackingInteractionProgressText; // 0x4a8(0x18)
	None HackingInteractionPromptText; // 0x4c0(0x18)
	None DehackingInteractionPromptText; // 0x4d8(0x18)
	None InteractionRangeSphereComponent; // 0x4f0(0x08)
	None RelativeInteractionPoint; // 0x4f8(0x0c)
	None CameraName; // 0x504(0x08)
	None CameraTransitionInTime; // 0x50c(0x04)
	None CameraTransitionOutTime; // 0x510(0x04)
	None bForceCameraShoulder; // 0x514(0x01)
	None CameraShoulder; // 0x515(0x01)
	None CameraMaxRotation; // 0x518(0x04)
	None CameraRotationLockout; // 0x51c(0x01)
	None bLockPitch; // 0x51d(0x01)
	None bLockYaw; // 0x51e(0x01)
	None FacesInteract; // 0x51f(0x01)
	None bCameraShake; // 0x520(0x01)
	None CameraShake; // 0x528(0x08)
	None RoundsWithFirstBloodEarned; // 0xa0(0x50)
	None SplineComponent; // 0x220(0x08)
	None SplinePointType; // 0x228(0x01)
	None bIsEndPoint; // 0x229(0x01)
	None OverrideMaterialName; // 0x260(0x08)
	None OverridePriority; // 0x268(0x04)
	None VelocityForMinShaking; // 0x178(0x04)
	None VelocityForMaxShaking; // 0x17c(0x04)
	None PawnMeshComponent; // 0x280(0x08)
	None PawnMesh; // 0x3d0(0x08)
	None PawnSkinTable; // 0x3d8(0x08)
	None PawnAnimation; // 0x3e0(0x08)
	None FacialAnimationSet; // 0x3e8(0x08)
	None FacialAnimationPose; // 0x3f0(0x01)
	None AnimationMode; // 0x3f1(0x01)
	None AnimationClass; // 0x3f8(0x08)
	None AnimationPlayRate; // 0x400(0x04)
	None AnimationStartTime; // 0x404(0x04)
	None Props; // 0x408(0x10)
	None WeaponProps; // 0x418(0x10)
	None VFXEntries; // 0x428(0x10)
	None PawnAnimation; // 0x330(0x08)
	None FacialAnimationSet; // 0x338(0x08)
	None FacialAnimationPose; // 0x340(0x01)
	None AnimationPlayRate; // 0x344(0x04)
	None AnimationStartTime; // 0x348(0x04)
	None OnGoPlayMapReady; // 0xee0(0x10)
	None LoadingScreenBeganDel; // 0x258(0x10)
	None LoadingScreenEndedDel; // 0x268(0x10)
	None AlwaysNeededPrimaryAssetQuery; // 0x278(0x48)
	None AlwaysNeededPrimaryAssetBundles; // 0x2c0(0x10)
	None LoadingScreenTipsTable; // 0x328(0x08)
	None LoadingScreenImageManager; // 0x330(0x08)
	None ActivityManagers; // 0x348(0x10)
	None AcquisitionManager; // 0x358(0x08)
	None StoreItemHelper; // 0x360(0x08)
	None JsonDataFactory; // 0x368(0x08)
	None LoadoutDataFactory; // 0x370(0x08)
	None UISessionManager; // 0x378(0x08)
	None ActivityInstanceManager; // 0x380(0x08)
	None PlayerInventoryHelper; // 0x388(0x08)
	None PlayerStatsManager; // 0x390(0x08)
	None PlayerChallengesManager; // 0x398(0x08)
	None NPETrackManager; // 0x3a0(0x08)
	None MercMasteryManager; // 0x3a8(0x08)
	None MercManager; // 0x3b0(0x08)
	None WeaponManager; // 0x3b8(0x08)
	None AwardsManager; // 0x3c0(0x08)
	None GeneralProgressionManager; // 0x3c8(0x08)
	None RankedManager; // 0x3d0(0x08)
	None BattlePassProgressionManager; // 0x3d8(0x08)
	None EventChallengesManager; // 0x3e0(0x08)
	None SeasonalEventChallengesManager; // 0x3e8(0x08)
	None ActivitySequenceManager; // 0x3f0(0x08)
	None AudioManager; // 0x3f8(0x08)
	None PunishmentManager; // 0x400(0x08)
	None BoosterManager; // 0x408(0x08)
	None WeaponMasteryManager; // 0x410(0x08)
	None VoiceChatManager; // 0x418(0x08)
	None WingsuitWeaponAsset; // 0x4a0(0x08)
	None ShouldUseZombiePrevention; // 0x4a8(0x01)
	None ZombiePreventionSeconds; // 0x4ac(0x04)
	None PlayerReadyTimeoutTime; // 0x538(0x04)
	None KSPlayerJoinRuleComponentClass; // 0x540(0x08)
	None KSPlayerJoinRuleComponent; // 0x548(0x08)
	None ChargeRuleComponent; // 0x550(0x08)
	None BackfillRuleComponent; // 0x558(0x08)
	None bCachedShouldPlayersStartSpectatingDefaultCamera; // 0x568(0x01)
	None RespawnConfiguration; // 0x570(0x18)
	None OnPhaseChangeDel; // 0x588(0x10)
	None OnPhaseTimerExpired; // 0x598(0x10)
	None MatchPhase; // 0x5b8(0x14)
	None bUseMatchTimer; // 0x5cc(0x01)
	None MatchSetupTime; // 0x5d0(0x04)
	None bUseSelectionPhase; // 0x5d4(0x01)
	None PreSelectionPhaseTime; // 0x5d8(0x04)
	None SelectionPhaseTime; // 0x5dc(0x04)
	None PostSelectionPhaseTime; // 0x5e0(0x04)
	None PostSelectionPhaseMinTime; // 0x5e4(0x04)
	None bSkipPostSelectionCinematic; // 0x5e8(0x01)
	None PostSelectionCinematicPhaseTime; // 0x5ec(0x04)
	None bUsePostMatchMVPLineup; // 0x5f0(0x01)
	None TimeBeforeMVPLineupCinematicBegins; // 0x5f4(0x04)
	None PostMatchMVPLineupPhaseTime; // 0x5f8(0x04)
	None MatchDefaultPhaseTime; // 0x5fc(0x04)
	None MatchTimerUpdatePeriod; // 0x630(0x04)
	None KSSpawnSelectorComponentClass; // 0x648(0x08)
	None KSSpawnSelectorComponentSoftClass; // 0x650(0x28)
	None KSSpawnSelectorComponent; // 0x678(0x08)
	None bAllowFindInactivePlayer; // 0x680(0x01)
	None bUseLoginStartSpotForPawn; // 0x681(0x01)
	None bAIPlayersUseLoginStartSpotForPawn; // 0x682(0x01)
	None DefaultTeamCount; // 0x6b8(0x04)
	None TeamAssignmentType; // 0x6bc(0x01)
	None bFirstDebugPlayerIsOnlySpectator; // 0x6bd(0x01)
	None RevealManager; // 0x730(0x08)
	None RevealManagerClass; // 0x738(0x08)
	None MatchStatsFinalizedDelegate; // 0x750(0x10)
	None MatchStartTime; // 0x778(0x04)
	None MatchEndTime; // 0x77c(0x04)
	None bIsTutorial; // 0x780(0x01)
	None bIsPractice; // 0x781(0x01)
	None bIsAiPvpMode; // 0x782(0x01)
	None bIsPlayerSpectateOnlyMode; // 0x783(0x01)
	None DefaultMinimapWidth; // 0x784(0x04)
	None DefaultTeamState; // 0x788(0x08)
	None ReverseFriendlyFireStartThreshold; // 0x790(0x04)
	None FriendlyFireModiferBase; // 0x794(0x04)
	None ReverseFriendlyFireModiferBase; // 0x798(0x04)
	None bCanDownPlayers; // 0x79c(0x01)
	None bCanDownBots; // 0x79d(0x01)
	None bCreditInstantKillWithDown; // 0x79e(0x01)
	None bCreditSuicideWithDown; // 0x79f(0x01)
	None bImmediateDeathForLastManStanding; // 0x7a0(0x01)
	None bEliminatePlayerOnDeath; // 0x7a1(0x01)
	None bPivotToKillerOnDeath; // 0x7a2(0x01)
	None bTrackKillerOnDeath; // 0x7a3(0x01)
	None bRevealKillerOnDeath; // 0x7a4(0x01)
	None bShouldRandomizeSides; // 0x7a5(0x01)
	None bStartJobSelectionOnSideSwap; // 0x7a6(0x01)
	None ShotListener; // 0x7a8(0x08)
	None OnTeamSidesFlipped; // 0x7b8(0x10)
	None bClearObjectivesMarkedUsedOnSidesFlipped; // 0x7c8(0x01)
	None Winner; // 0x7d0(0x08)
	None CheatWinner; // 0x7d8(0x08)
	None DefaultRewardsCalculatorClass; // 0x7e0(0x08)
	None bIncludeInitialInventoryFromDefaultPawnInStartingInventory; // 0x7e8(0x01)
	None StartingInventory; // 0x7f0(0x10)
	None bGiveStartingInventoryToBots; // 0x800(0x01)
	None PlayerSpawnInventory; // 0x808(0x10)
	None PlayerInitialSpawnInventory; // 0x818(0x10)
	None PlayerRespawnInventory; // 0x828(0x10)
	None PlayerSpawnMods; // 0x838(0x10)
	None PlayerInitialSpawnMods; // 0x848(0x10)
	None PlayerRespawnMods; // 0x858(0x10)
	None FreefallMod; // 0x868(0x08)
	None bIsBotMatch; // 0x8a0(0x01)
	None StartingCash; // 0x8a4(0x04)
	None OnSpecialtyItemVendorLoaded; // 0x8a8(0x10)
	None bUsePlayerLoadouts; // 0x8bc(0x01)
	None bDisableLoadoutValidation; // 0x8bd(0x01)
	None WaitForPlayersTimeout; // 0xb08(0x04)
	None LoadingLoot; // 0xb20(0x50)
	None bPopulateLootSites; // 0xb70(0x01)
	None LootGroupGuarantees; // 0xb78(0x50)
	None bSpawnLootOnMatchStart; // 0xbc8(0x01)
	None LootRaritySwaps; // 0xc20(0x10)
	None LootRespawnMode; // 0xc30(0x01)
	None LootSiteRespawnPeriods; // 0xc38(0x50)
	None AIActorCollection; // 0xcd8(0x08)
	None bRecordKillCam; // 0xce0(0x01)
	None AFKIdleTime; // 0xce4(0x04)
	None AccoladeTrackerDataTable; // 0xd20(0x08)
	None AccoladeTrackerInstances; // 0xd28(0x10)
	None AccoladeTrackerClasses; // 0xd38(0x10)
	None GameModeHUDSettings; // 0xd48(0x18)
	None InteractiveObjectCache; // 0xd60(0x10)
	None OutOfBoundsManagerClass; // 0xd70(0x08)
	None MatchDataRecorder; // 0xd78(0x08)
	None ShouldForceCompetitiveLogic; // 0xd88(0x01)
	None PerSecondChargeMode; // 0xd89(0x01)
	None PerSecondChargePercent; // 0xd8c(0x04)
	None GameRules; // 0xd90(0x10)
	None EditorPropertyMap; // 0xda0(0x50)
	None FriendlyAudioName; // 0xe40(0x10)
	None KSAnnouncerClass; // 0xe50(0x08)
	None FriendlyAchievementNames; // 0xe58(0x10)
	None BurnTestNumberOfRoundToWin; // 0xe68(0x04)
	None OnCharacterControlTransferred; // 0xe80(0x10)
	None bUseLegacyJobSelectionTech; // 0xe90(0x01)
	None bAllowPlayersToUseUnownedJobs; // 0xe91(0x01)
	None AllowedUnownedJobIds; // 0xe98(0x10)
	None EnforcedJobUniqueness; // 0xea8(0x01)
	None bUseJobSelectionByDraft; // 0xea9(0x01)
	None bSkipDraftMidMatch; // 0xeaa(0x01)
	None bDraftAlternateTeams; // 0xeab(0x01)
	None DraftNumPlayersSelecting; // 0xeac(0x04)
	None DraftFirstSelectionNumOverride; // 0xeb0(0x04)
	None DraftPostSelectionPhaseTime; // 0xeb4(0x04)
	None bDraftIncludesBans; // 0xeb8(0x01)
	None bDraftBanAlternateTeams; // 0xeb9(0x01)
	None DraftBanNumPlayersBanning; // 0xebc(0x04)
	None DraftBanTurns; // 0xec0(0x10)
	None JobSelectionRules; // 0xed0(0x08)
	None JobSelectionAuthority; // 0xed8(0x08)
	None CurrentDraftTurnNum; // 0xee0(0x04)
	None CurrentTeamNumSelecting; // 0xee4(0x04)
	None bCurrentlyBanning; // 0xee8(0x01)
	None bWasBanning; // 0xee9(0x01)
	None LastTeamNumToBan; // 0xeec(0x04)
	None bHasEverCompletedJobSelection; // 0xef0(0x01)
	None bFubarIfNoVendorsByMatchStart; // 0xef1(0x01)
	None bOnlyFubarIfNoJobVendor; // 0xef2(0x01)
	None bFubarIfAbsentPlayers; // 0xef3(0x01)
	None BotNamingMethod; // 0xef6(0x01)
	None bUseIntraScoring; // 0xf00(0x01)
	None GameModeDisplayName; // 0xf08(0x18)
	None EmoteMusicManagerClass; // 0xf20(0x08)
	None bRequireJobToEnterPlay; // 0xf28(0x01)
	None CinematicDataContainer; // 0xf30(0x08)
	None MVPDeterminant; // 0xf38(0x08)
	None SeamlessTravelInfo; // 0xf40(0x08)
	None SeamlessTravelSettings; // 0xf48(0x10)
	None GameModeTags; // 0xf60(0x10)
	None NumericId; // 0xf70(0x04)
	None bAbandonPlayersOnLogOut; // 0xf74(0x01)
	None bGlobalDisableAIBackfill; // 0xf75(0x01)
	None bAllowAIBackfill; // 0xf76(0x01)
	None BackfillBotDefinition; // 0xf78(0x08)
	None NextPawnId; // 0xf90(0x01)
	None bRunRespawnAndEliminationLogicBetweenRounds; // 0xf98(0x01)
	None PostRoundDuration; // 0xf9c(0x04)
	None FinalPostRoundDuration; // 0xfa0(0x04)
	None bSkipSelectionCinematicAfterFirstRound; // 0xfa4(0x01)
	None RoundStateSetupComplete; // 0xfa8(0x08)
	None RoundNumber; // 0xfb0(0x04)
	None RoundsNeededToWin; // 0xfb4(0x04)
	None TotalNumberOfRounds; // 0xfb8(0x04)
	None bPlayersCanRestartDuringRoundInProgress; // 0xfbc(0x01)
	None bHoldPlayerRestartUntilFirstRoundSetup; // 0xfbd(0x01)
	None bWinRoundByElimination; // 0xfbe(0x01)
	None bAwardPointOnDraw; // 0xfbf(0x01)
	None RoundSetupTime; // 0xfc0(0x04)
	None RoundDuration; // 0xfc4(0x04)
	None RoundStartPhase; // 0xfc8(0x08)
	None bNewPawnOnRoundStart; // 0xfd0(0x01)
	None WinByEliminationTeam; // 0xfe0(0x08)
	None NumberOfConsecutiveLossesToEnableEpicGroupSiteGuarantees; // 0x1004(0x04)
	None bKillDownedPlayersAtEndOfRound; // 0x1008(0x01)
	None bSpareWinningDownedPlayers; // 0x1009(0x01)
	None InventoryRestore; // 0x100b(0x01)
	None bAllowPlayersToKeepInventoryBetweenRounds; // 0x100c(0x01)
	None bRequirePlayerToBeAlive; // 0x100d(0x01)
	None bRequirePlayerToBeStanding; // 0x100e(0x01)
	None bRequirePlayerToBeOnWinningTeam; // 0x100f(0x01)
	None bSideSwapWipesEquipment; // 0x1010(0x01)
	None bRestoreEquipment; // 0x1011(0x01)
	None InventoryRestoreEquipPointRequirements; // 0x1018(0x48)
	None bRestoreSlotlessEquipment; // 0x1060(0x01)
	None bRestoreNonEquipment; // 0x1061(0x01)
	None GuaranteedInventory; // 0x1068(0x10)
	None FlipTeamSideFrequency; // 0x1078(0x04)
	None MaxTeamSideFlipsPerMatch; // 0x107c(0x04)
	None bSideSwapClearsConsecutiveLosses; // 0x1080(0x01)
	None TeamSideFlipsThisMatch; // 0x1084(0x04)
	None LatestTeamSideFlipRoundNumber; // 0x1088(0x04)
	None bBlockWeaponsPostRound; // 0x108c(0x01)
	None OnTeamWiped; // 0x1098(0x10)
	None OnTimerModifiedMidPhase; // 0x10a8(0x10)
	None bMarkedInProgress; // 0x10b8(0x01)
	None bUseInitialSpawnPoints; // 0x10b9(0x01)
	None bAutoRestoreRespawnConfigOnNewRound; // 0x10ba(0x01)
	None bAutoRevertTeamSwapsOnNewRound; // 0x10bb(0x01)
	None OnTeamChanged; // 0x10c0(0x10)
	None bAwardBonusPointToRoundWinner; // 0x10d0(0x01)
	None OriginalPlayersToTeams; // 0x10d8(0x50)
	None ScoreAtRoundStart; // 0x1128(0x50)
	None ActivePhaseRule; // 0x1178(0x08)
	None OnTutorialComplete; // 0xf98(0x10)
	None TutorialEnding; // 0xfa8(0x10)
	None PlayerController; // 0x28(0x08)
	None bUseBaseVelocity; // 0x30(0x01)
	None LookBaseVelocityCurve; // 0x38(0x08)
	None BoostThreshold; // 0x40(0x08)
	None BoostMultiplier; // 0x48(0x08)
	None BoostAcceleration; // 0x50(0x04)
	None MouseLookMaxVelocityCurve; // 0x58(0x08)
	None MouseLookMaxVelocityADSCurve; // 0x60(0x08)
	None TurnRateMultiplier; // 0x68(0x04)
	None LookUpRateMultiplier; // 0x6c(0x04)
	None MouseLookAccelerationCurve; // 0x70(0x08)
	None MouseLookAccelerationADSCurve; // 0x78(0x08)
	None TestBaseVelocityCurves; // 0x80(0x50)
	None LastRotationVelocityScale; // 0xd0(0x08)
	None PrevInput; // 0xd8(0x08)
	None CurrentTurnSpeed; // 0xe0(0x08)
	None RandomSessionSeed; // 0x2a8(0x04)
	None OnTeamCinematicSequenceSkippedDel; // 0x2d0(0x10)
	None PlayerIdentitiesContainer; // 0x2f0(0x120)
	None PredictedActors; // 0x410(0x50)
	None KillCamStatus; // 0x470(0x01)
	None KillCamRecordingSecondsToKeep; // 0x474(0x04)
	None KillCamFocusPawn; // 0x478(0x08)
	None KillCamSecondaryFocusPawn; // 0x488(0x08)
	None KillCamFocusSpecial; // 0x498(0x08)
	None KillCamTime; // 0x4a4(0x04)
	None OnGameDisplayInfo; // 0x4c0(0x10)
	None OnRemoveGameDisplayInfo; // 0x4d0(0x10)
	None OnPhaseChangeDel; // 0x548(0x10)
	None OnSetupStartDel; // 0x558(0x10)
	None OnSetupEndDel; // 0x568(0x10)
	None OnExpectedPhaseCountChanged; // 0x578(0x10)
	None OnTimerSecondTick; // 0x588(0x10)
	None MatchPhase; // 0x598(0x14)
	None ExpectedPhaseCount; // 0x5ac(0x04)
	None ExpectedTimeForRemainingPhases; // 0x5b0(0x04)
	None PreviousPhase; // 0x5b4(0x14)
	None bHasProcessedMatchStarted; // 0x5c8(0x01)
	None ReplicatedMatchTimer; // 0x618(0x38)
	None bCharacterBodiesPersistAfterDeath; // 0x65c(0x01)
	None SecondsForCharacterBodiesToPersistAfterDeath; // 0x660(0x04)
	None SecondsToViewBodyAfterDeath; // 0x664(0x04)
	None OnPlayerDeath; // 0x668(0x10)
	None OnPlayerDown; // 0x678(0x10)
	None OnRadialMenuItemUse; // 0x688(0x10)
	None OnPlayerSpawn; // 0x698(0x10)
	None OnPlayerRevive; // 0x6a8(0x10)
	None OnWinnerSet; // 0x6b8(0x10)
	None OnPlayerAssist; // 0x6c8(0x10)
	None OnLastManStanding; // 0x6d8(0x10)
	None OnUIRelevantPlayerStateChangedDel; // 0x6e8(0x10)
	None DefaultMinimapWidth; // 0x6f8(0x04)
	None OnTeamAdded; // 0x700(0x10)
	None OnTeamRemoved; // 0x710(0x10)
	None OnTeamCelebrateDel; // 0x720(0x10)
	None AccoladeTrackerClasses; // 0x730(0x10)
	None MiniMapAssistant; // 0x758(0x08)
	None teams; // 0x760(0x50)
	None CombatEventList; // 0x7b8(0x88)
	None RadialMenuItemEventList; // 0x840(0x88)
	None AssistEventList; // 0x8c8(0x88)
	None ReviveEventList; // 0x950(0x88)
	None OnTeamEliminatedDel; // 0x9d8(0x10)
	None OnTeamEliminatedOrDownedDel; // 0x9e8(0x10)
	None OnPlayerEliminatedDel; // 0x9f8(0x10)
	None OnPlayerDownedChangedDel; // 0xa08(0x10)
	None OnAttackingTeamUpdated; // 0xa18(0x10)
	None OnDisplayCashChanged; // 0xa28(0x10)
	None bDisplayCash; // 0xa38(0x01)
	None CashPerDown; // 0xa3c(0x04)
	None DownDescription; // 0xa40(0x18)
	None CashPerAssist; // 0xa58(0x04)
	None AssistDescription; // 0xa60(0x18)
	None CashPerRevive; // 0xa78(0x04)
	None ReviveDescription; // 0xa80(0x18)
	None CashPerElim; // 0xa98(0x04)
	None EliminationDescription; // 0xaa0(0x18)
	None CashPerSuicide; // 0xab8(0x04)
	None SuicideDescription; // 0xac0(0x18)
	None CashPerDeployableDestroyed; // 0xad8(0x50)
	None MercSelectSubLevel; // 0xb28(0x10)
	None ActiveCinematicSubLevelNames; // 0xb38(0x10)
	None ActiveCinematicSequenceManager; // 0xb48(0x08)
	None OnTeamSidesFlipped; // 0xb50(0x10)
	None TierUnlockThresholds; // 0xb60(0x10)
	None MaxMarkerDistanceForCommonLoot; // 0xb70(0x04)
	None ObjectiveTicketDisplayType; // 0xb74(0x01)
	None WorldLootSites; // 0xe18(0x10)
	None WorldObjectives; // 0xe28(0x10)
	None WorldFlightPoints; // 0xe38(0x10)
	None WorldDestructibles; // 0xe48(0x10)
	None WorldDrops; // 0xe58(0x10)
	None WorldProjectiles; // 0xe68(0x10)
	None WorldCharacters; // 0xe78(0x10)
	None WorldHeatSources; // 0xe88(0x10)
	None WorldHazards; // 0xe98(0x10)
	None WorldWayPointSets; // 0xea8(0x10)
	None WorldRecoveryPoints; // 0xeb8(0x10)
	None WorldAnnouncers; // 0xec8(0x10)
	None WorldPlayerShops; // 0xed8(0x10)
	None WorldRoyaleZones; // 0xee8(0x10)
	None InitialGameObjectiveInfos; // 0xef8(0x10)
	None OnHUDTimerPrioritiesChangedDel; // 0xf08(0x10)
	None OnMarkerTimerPrioritiesChangedDel; // 0xf18(0x10)
	None HUDTimerPriorityConfig; // 0xf28(0x03)
	None HUDTimerPriorityMap; // 0xf30(0x50)
	None MarkerTimerPriorityConfig; // 0xf80(0x03)
	None MarkerTimerPriorityMap; // 0xf88(0x50)
	None OnGameObjectiveRegistered; // 0xfd8(0x10)
	None OnGameObjectiveTransfered; // 0xfe8(0x10)
	None OnGameObjectiveUnregistered; // 0xff8(0x10)
	None OnGameObjectiveStateChanged; // 0x1008(0x10)
	None OnGameObjectiveTimerActive; // 0x1018(0x10)
	None OnGameObjectiveTimerComplete; // 0x1028(0x10)
	None OnGameObjectiveTimerTick; // 0x1038(0x10)
	None GameObjectives; // 0x1058(0x50)
	None OnHeatSourceAdded; // 0x10a8(0x10)
	None OnHeatSourceRemoved; // 0x10b8(0x10)
	None WorldDeployables; // 0x10c8(0x10)
	None bDestroyDeployableOnInstigatorDeath; // 0x10d8(0x01)
	None OnItemDropAdded; // 0x10e0(0x10)
	None ItemDropLifeSpan; // 0x10f0(0x04)
	None bShouldOffsetWeaponDrops; // 0x10f4(0x01)
	None ProjectileLifeSpan; // 0x10f8(0x04)
	None SkyDiveListeners; // 0x1100(0x10)
	None SkyDivers; // 0x1110(0x10)
	None PresenceDisplayText; // 0x11a8(0x18)
	None PresenceKey; // 0x11c0(0x10)
	None WaveRespawnTimer; // 0x11d8(0x08)
	None LootRarityTimerPairs; // 0x11e0(0x10)
	None LootRarityTimerMap; // 0x11f0(0x50)
	None OnLootRespawnTimerTick; // 0x1240(0x10)
	None OnLootRespawnTimerActive; // 0x1250(0x10)
	None OnAccoladeDisplay; // 0x1260(0x10)
	None AccoladeEventList; // 0x1270(0x88)
	None bBlockWeaponFiring; // 0x12f8(0x01)
	None HealthGate; // 0x12fc(0x04)
	None bPreserveReserveAmmo; // 0x1300(0x01)
	None bInfiniteAmmo; // 0x1301(0x01)
	None bShowHUDObjectiveRoles; // 0x1302(0x01)
	None bShowHUDObjectiveRoleBeforeJobSelect; // 0x1303(0x01)
	None bInvertHUDObjectiveRoles; // 0x1304(0x01)
	None GameModeHUDSettings; // 0x1308(0x18)
	None bPlayersShouldSpectateDefaultCamera; // 0x1320(0x01)
	None bShowingPreviewActorSubLevel; // 0x1321(0x01)
	None bPreviewActorsEnabled; // 0x1322(0x01)
	None OnDynamicDestroyPreviewActorsDel; // 0x1370(0x10)
	None OnDynamicDisablePreviewActorsDel; // 0x1380(0x10)
	None OnDynamicEnablePreviewActorsDel; // 0x1390(0x10)
	None OnCinematicSubLevelEnabled; // 0x13a0(0x10)
	None OnCinematicSubLevelDisabled; // 0x13b0(0x10)
	None OnSetNumDebugCinematicRogues; // 0x13c0(0x10)
	None NumDebugCinematicRogues; // 0x13d4(0x04)
	None AlwaysIncludedClientBundles; // 0x13d8(0x10)
	None AlwaysIncludedServerBundles; // 0x13e8(0x10)
	None Preloader; // 0x13f8(0x1e0)
	None bPostSelectionCinematicDisabled; // 0x15d8(0x01)
	None bForceAllowLeaveMatchButton; // 0x15d9(0x01)
	None PersistentPlayerDataContainer; // 0x15e0(0x210)
	None OnPersistentPlayerDataCreatedDel; // 0x17f0(0x10)
	None PersistentDataReplicator; // 0x1868(0x08)
	None FriendlyFireKillPenalty; // 0x1870(0x04)
	None FriendlyFireDownPenalty; // 0x1874(0x04)
	None bCanToggleScoreboard; // 0x1890(0x01)
	None bMatchEndedInSurrender; // 0x18a8(0x01)
	None SurrenderWinningTeam; // 0x18b0(0x08)
	None StimulusSourceObjects; // 0x18b8(0x10)
	None HUDComponentPropMap; // 0x18c8(0x50)
	None HUDAnnouncementComponentClass; // 0x1918(0x08)
	None EmoteMusicManagerClass; // 0x1920(0x08)
	None EmoteMusicManager; // 0x1928(0x08)
	None ActiveCinematicState; // 0x1930(0x10)
	None CinematicDataContainer; // 0x1968(0x08)
	None MVPDeterminant; // 0x1970(0x08)
	None WayPointSetCollection; // 0x1978(0x08)
	None OnJobSelectionTypeChanged; // 0x1980(0x10)
	None bAllowPlayersToReselectJob; // 0x1990(0x01)
	None JobSelectionType; // 0x1991(0x01)
	None ActivityBehaviorCache; // 0x1998(0x50)
	None RoundInfo; // 0x19e8(0x18)
	None PreviousRoundInfo; // 0x1a00(0x18)
	None RoundEndFadeOutAtMatchTime; // 0x1a18(0x04)
	None RoundEndFadeOutDelayTime; // 0x1a1c(0x04)
	None RoundEndFadeOutTime; // 0x1a20(0x04)
	None bUsingRoundDelayedGarbageCollection; // 0x1a24(0x01)
	None OnRoundInfoChangedDel; // 0x1a28(0x10)
	None RoundResult; // 0x1a50(0x20)
	None AllRoundResults; // 0x1a70(0x10)
	None TotalRounds; // 0x1a80(0x04)
	None RoundsToWin; // 0x1a84(0x04)
	None OnTotalRoundsSet; // 0x1a88(0x10)
	None OnRoundsToWinSet; // 0x1a98(0x10)
	None RoundInitState; // 0x1aa8(0x10)
	None OnRoundSetupDel; // 0x1ab8(0x10)
	None OnRoundStartDel; // 0x1ae0(0x10)
	None OnRoundOverDel; // 0x1b08(0x10)
	None CashPerWinningPlayer; // 0x1b30(0x04)
	None ConsecutiveCashPerLosingPlayer; // 0x1b38(0x10)
	None RoundEndCamPreDeathDuration; // 0x1b50(0x04)
	None RoundEndCamPostDeathDuration; // 0x1b54(0x04)
	None RoundEndCamPreDeathDilation; // 0x1b58(0x04)
	None RoundEndCamTimeDilation; // 0x1b5c(0x04)
	None EndOfMatchKillCamDelay; // 0x1b60(0x04)
	None SavedSettingsConfig; // 0x28(0x50)
	None SavedDisplayLanguage; // 0x78(0x10)
	None LastJoinedQueuePrimaryId; // 0x88(0x04)
	None SavedLocalActions; // 0x90(0x50)
	None SavedSelectedRegion; // 0xe0(0x04)
	None LastWhatsNewVersion; // 0xe4(0x04)
	None SavedTransientAcquisitionIds; // 0xe8(0x10)
	None SavedViewedNewsPanelIds; // 0xf8(0x50)
	None SavedChallengeVersionId; // 0x148(0x04)
	None SavedViewedChallengeIds; // 0x150(0x50)
	None SavedRecentlySeenStoreItemLootIds; // 0x1a0(0x50)
	None SettingsConfig; // 0x28(0x10)
	None SettingsVersionMajor; // 0x158(0x04)
	None SettingsVersionMinor; // 0x15c(0x04)
	None GamepadIconSet; // 0x160(0x01)
	None DefaultScreenResolution; // 0x164(0x08)
	None SavedScreenResolution; // 0x16c(0x08)
	None SavedDisplayLanguage; // 0x1d8(0x10)
	None LastJoinedQueuePrimaryId; // 0x1e8(0x04)
	None SavedSelectedRegion; // 0x1ec(0x04)
	None LastWhatsNewVersion; // 0x1f0(0x04)
	None SavedTransientAcquisitionIds; // 0x1f8(0x10)
	None SavedViewedNewsPanelIds; // 0x208(0x50)
	None SavedChallengeVersionId; // 0x258(0x04)
	None SavedViewedChallengeIds; // 0x260(0x50)
	None SavedRecentlySeenStoreItemLootIds; // 0x2b0(0x50)
	None SavedSettingsConfig; // 0x300(0x50)
	None SavedLocalActions; // 0x350(0x50)
	None OnGamepadIconSetSettingsApplied; // 0x490(0x10)
	None OnLocalSettingSaved; // 0x4a0(0x10)
	None OnSettingApplied; // 0x4b0(0x10)
	None FadeTexture; // 0x378(0x08)
	None ShotNotifyDelegate; // 0x220(0x10)
	None SimulationRootBoneName; // 0xe58(0x08)
	None OnTemperatureChanged; // 0xb0(0x10)
	None bSkipCosmeticIfOwnerIsLocallyViewed; // 0xc0(0x01)
	None bOnlySkipCosmeticForOnAndViewedState; // 0xc1(0x01)
	None Temperature; // 0xc4(0x04)
	None TemperatureScalarModifier; // 0xc8(0x04)
	None bDisableTickWhenTemperatureTransitionCompletes; // 0xcc(0x01)
	None TransitionTargetTemp; // 0xd0(0x04)
	None TransitionRate; // 0xd4(0x04)
	None LastKnownViewModeState; // 0xd8(0x01)
	None WithoutHeatVisibilityBlockers; // 0xe0(0x10)
	None HeatOnlyVisibilityBlockers; // 0xf0(0x10)
	None OnEndOfMatch; // 0xb0(0x10)
	None OwningPlayer; // 0xc0(0x08)
	None OnAnnouncement; // 0xc8(0x10)
	None OnResultAnnouncement; // 0xd8(0x10)
	None Header; // 0xb0(0x18)
	None bShowTopHUDBar; // 0xc8(0x01)
	None TopBarObjectiveIcon; // 0xb0(0x28)
	None NameplateObjectiveIcon; // 0xd8(0x28)
	None ScoreIcon; // 0x100(0x28)
	None TicketIcon; // 0x128(0x28)
	None ShowNameplateObjectiveForEnemy; // 0x150(0x01)
	None ForceAlwaysShowNameplateObjective; // 0x151(0x01)
	None ShowTopBarObjectiveMarker; // 0x152(0x01)
	None ShowBombIconInTopBar; // 0x153(0x01)
	None ConnectTopBarMarkerToTimer; // 0x154(0x01)
	None ShowInWorldMarkerTimer; // 0x155(0x01)
	None ObjectiveMarkerProgressFills; // 0x156(0x01)
	None ScoreboardDisplayIntraScoring; // 0x157(0x01)
	None UseIntraScoring; // 0x158(0x01)
	None UseTicketSystem; // 0x159(0x01)
	None PointsBarType; // 0x15a(0x01)
	None TicketDisplaySide; // 0x15b(0x01)
	None MarkerTimerType; // 0x15c(0x01)
	None m_DefaultFX; // 0x220(0x08)
	None m_SurfaceHit; // 0x228(0x88)
	None m_pScene; // 0x2b0(0x08)
	None RelevantObjective; // 0x258(0x08)
	None AssignedBot; // 0x260(0x08)
	None AkEvent; // 0x220(0x08)
	None NamesForRtpcQueries; // 0x228(0x10)
	None NamesForSwitchQueries; // 0x238(0x10)
	None bQueryResultsReady; // 0x2f0(0x01)
	None StaleCounter; // 0x2f4(0x04)
	None InteractionPriority; // 0xb0(0x04)
	None bIsInteractionBlocked; // 0xc0(0x01)
	None OnLootSiteSpawned; // 0x230(0x10)
	None OnLootSiteStateChanged; // 0x240(0x10)
	None RarityTag; // 0x250(0x01)
	None OnLootSiteRarityChanged; // 0x258(0x10)
	None SiteGroupNumber; // 0x268(0x01)
	None RarityLootSiteTableMap; // 0x270(0x50)
	None SpawnedDrop; // 0x2d0(0x08)
	None ObjectsToKeepAround; // 0x2d8(0x10)
	None SpawnRate; // 0x2e8(0x04)
	None SpawnDelay; // 0x2ec(0x04)
	None RespawnDelay; // 0x2f0(0x04)
	None bAutoRespawn; // 0x2f4(0x01)
	None bDestroySiteOnLooted; // 0x2f5(0x01)
	None bDisableWeaponCosmeticZOffset; // 0x2f6(0x01)
	None ChildSpawners; // 0x2f8(0x10)
	None SurfaceCheckHeight; // 0x308(0x04)
	None bUsePrecisePlacement; // 0x30c(0x01)
	None LootSiteState; // 0x30d(0x02)
	None CosmeticVisible; // 0x30f(0x01)
	None SpawnDelayTimer; // 0x310(0x08)
	None NavigationLocation; // 0x318(0x0c)
	None StimuliSourceComponent; // 0x330(0x08)
	None ActorsSeenBy; // 0x338(0x10)
	None InteractionBlockerManager; // 0x350(0x08)
	None LootBoxName; // 0x358(0x18)
	None bChoosesBeforeInteraction; // 0x370(0x01)
	None bPressAndHoldPrompt; // 0x371(0x01)
	None InteractableComponent; // 0x378(0x08)
	None bLooted; // 0x380(0x01)
	None ChosenLoot; // 0x388(0x30)
	None Looters; // 0x3b8(0x10)
	None LooterManagers; // 0x3c8(0x10)
	None PossibleLoot; // 0x3d8(0x10)
	None CachedInteractionTimeStamp; // 0xe8(0x04)
	None InteractRequestId; // 0xf0(0x01)
	None State; // 0xf8(0x08)
	None PreviousState; // 0x100(0x08)
	None User; // 0x108(0x08)
	None Interactable; // 0x110(0x10)
	None CameraTransition; // 0x120(0x30)
	None InteractionMode; // 0x28(0x08)
	None bInteractionStartsCameraLockout; // 0x30(0x01)
	None CharacterStartSound; // 0x38(0x10)
	None InteractableStartSound; // 0x48(0x10)
	None LocalStartSound; // 0x58(0x10)
	None CharacterEndSound; // 0x68(0x50)
	None InteractableEndSound; // 0xb8(0x50)
	None LocalEndSound; // 0x108(0x50)
	None bAutomaticallyPlayAudio; // 0x158(0x01)
	None bAttachCharacterAutoAudioToSource; // 0x159(0x01)
	None bAttachInteractableAutoAudioToSource; // 0x15a(0x01)
	None CharacterStartEffect; // 0x160(0x38)
	None InteractableStartEffect; // 0x198(0x38)
	None CharacterEndEffect; // 0x1d0(0x50)
	None InteractableEndEffect; // 0x220(0x50)
	None CurrentCharacterEffect; // 0x270(0x08)
	None CurrentInteractableEffect; // 0x278(0x08)
	None StartInteractionMontageRow; // 0x280(0x08)
	None EndInteractionMontageSection; // 0x288(0x50)
	None EndInteractionMontageRow; // 0x2d8(0x50)
	None Gender; // 0x250(0x02)
	None BundledItems; // 0x250(0x10)
	None DirectoriesToScan; // 0xc8(0x10)
	None ItemClassesToFilter; // 0xd8(0x10)
	None KSJobEquipmentTypesToGive; // 0xb0(0x0d)
	None IsStarterJob; // 0x250(0x01)
	None JobDefaultSkin; // 0x258(0x28)
	None JobSkinBundleLootTableId; // 0x280(0x04)
	None JobRoleItem; // 0x288(0x28)
	None UniqueItem; // 0x2b0(0x28)
	None PrimaryWeaponOptionOne; // 0x2d8(0x28)
	None PrimaryWeaponCategoryOptionOne; // 0x300(0x28)
	None PrimaryWeaponOptionOneIsDefault; // 0x328(0x01)
	None PrimaryWeaponOptionTwo; // 0x330(0x28)
	None PrimaryWeaponCategoryOptionTwo; // 0x358(0x28)
	None PrimaryWeaponOptionTwoIsDefault; // 0x380(0x01)
	None SecondaryWeaponOptionOne; // 0x388(0x28)
	None SecondaryWeaponOptionOneIsDefault; // 0x3b0(0x01)
	None SecondaryWeaponOptionTwo; // 0x3b8(0x28)
	None SecondaryWeaponOptionTwoIsDefault; // 0x3e0(0x01)
	None MeleeWeapon; // 0x3e8(0x28)
	None QuickMeleeWeapon; // 0x410(0x28)
	None Passives; // 0x438(0x10)
	None GadgetOptionOne; // 0x448(0x28)
	None GadgetOptionOneIsDefault; // 0x470(0x01)
	None GadgetOptionTwo; // 0x478(0x28)
	None GadgetOptionTwoIsDefault; // 0x4a0(0x01)
	None PerkOptionOne; // 0x4a8(0x28)
	None PerkOptionOneIsDefault; // 0x4d0(0x01)
	None PerkOptionTwo; // 0x4d8(0x28)
	None PerkOptionTwoIsDefault; // 0x500(0x01)
	None PerkOptionThree; // 0x508(0x28)
	None PerkOptionThreeIsDefault; // 0x530(0x01)
	None PerkOptionFour; // 0x538(0x28)
	None PerkOptionFourIsDefault; // 0x560(0x01)
	None PerkOptionFive; // 0x568(0x28)
	None PerkOptionFiveIsDefault; // 0x590(0x01)
	None PerkOptionSix; // 0x598(0x28)
	None PerkOptionSixIsDefault; // 0x5c0(0x01)
	None GambitOptionOne; // 0x5c8(0x28)
	None GambitOptionOneIsDefault; // 0x5f0(0x01)
	None GambitOptionTwo; // 0x5f8(0x28)
	None GambitOptionTwoIsDefault; // 0x620(0x01)
	None GambitOptionThree; // 0x628(0x28)
	None GambitOptionThreeIsDefault; // 0x650(0x01)
	None GambitOptionFour; // 0x658(0x28)
	None GambitOptionFourIsDefault; // 0x680(0x01)
	None GambitOptionFive; // 0x688(0x28)
	None GambitOptionFiveIsDefault; // 0x6b0(0x01)
	None GambitOptionSix; // 0x6b8(0x28)
	None GambitOptionSixIsDefault; // 0x6e0(0x01)
	None DefaultEmotes; // 0x6e8(0x10)
	None DefaultQuips; // 0x6f8(0x10)
	None DefaultCommunications; // 0x708(0x10)
	None DefaultSprays; // 0x718(0x10)
	None DefaultWingsuit; // 0x728(0x28)
	None LobbyPropsToPreload; // 0x750(0x10)
	None SmallJobIcon; // 0x760(0x28)
	None JobPortrait; // 0x788(0x28)
	None JobDiamondPortrait; // 0x7b0(0x28)
	None JobSquarePortrait; // 0x7d8(0x28)
	None JobItem; // 0x28(0x08)
	None SlotItems; // 0x30(0x50)
	None bAllowUnownedJobs; // 0x230(0x01)
	None AllowUnownedSpecificJobs; // 0x238(0x50)
	None SelectionRules; // 0x288(0x08)
	None Choices; // 0x290(0x10)
	None CompletedJobSelectionTasks; // 0x2a0(0x130)
	None ActiveJobSelectionTasks; // 0x3d0(0x130)
	None PendingJobSelectionTasks; // 0x500(0x130)
	None DelayedJobSelectionTasks; // 0x630(0x130)
	None ParticipatingPlayers; // 0x760(0x50)
	None RemainingPlayers; // 0x7b0(0x50)
	None ActiveJobSelectors; // 0x800(0x50)
	None KnownDisconnectPlayers; // 0x850(0x50)
	None AvailableProxies; // 0x8a0(0x10)
	None AIPlayers; // 0x8b0(0x50)
	None bHasStarted; // 0x900(0x01)
	None bHasCompletedInitialSelection; // 0x901(0x01)
	None TimesStarted; // 0x904(0x04)
	None TimerManager; // 0x908(0x128)
	None GameModeOwner; // 0xa30(0x08)
	None JobSelectionList; // 0xb0(0x120)
	None SelectionActivityStatus; // 0x1d0(0x50)
	None AllowUnownedJobsStruct; // 0x220(0x20)
	None EnforcedJobUniqueness; // 0x240(0x01)
	None JobTableVendorId; // 0x244(0x04)
	None JobCollection; // 0x248(0x08)
	None OnJobSelectionEntryAdded; // 0x250(0x10)
	None OnJobSelectionEntryChanged; // 0x260(0x10)
	None OnJobSelectionInitialized; // 0x270(0x10)
	None OnAllPlayersLockedIn; // 0x280(0x10)
	None OnSelectionActivityStatusChanged; // 0x290(0x10)
	None BannedJobIds; // 0x300(0x10)
	None ExpectedBanCount; // 0x310(0x04)
	None CachedOwner; // 0x318(0x08)
	None bSelectionEnabled; // 0x320(0x01)
	None EntryCount; // 0x324(0x04)
	None pAudioManager; // 0x330(0x08)
	None bJobManagerReady; // 0xb0(0x01)
	None OnJobSelectionManagerReady; // 0xb8(0x10)
	None OnJobSelectionAcknowledge; // 0xc8(0x10)
	None CachedOwner; // 0xd8(0x08)
	None CachedSelectionComponent; // 0xe0(0x08)
	None PickExclusivity; // 0x28(0x01)
	None PickProxyRules; // 0x29(0x01)
	None bProxyAlwaysCompletesPicks; // 0x2a(0x01)
	None bCanAbstainFromBan; // 0x2b(0x01)
	None BanEffects; // 0x2c(0x01)
	None BanProxyRules; // 0x2d(0x01)
	None bProxyAlwaysCompletesBans; // 0x2e(0x01)
	None LockProxyRules; // 0x2f(0x01)
	None bProxyAlwaysCompletesLocks; // 0x30(0x01)
	None BlacklistOrWhitelist; // 0x31(0x01)
	None FilteredJobs; // 0x38(0x10)
	None ReserveTime; // 0x48(0x04)
	None ReselectTime; // 0x4c(0x04)
	None bRequireJobOwnership; // 0x50(0x01)
	None bShowOnUnavailableJobsOnUI; // 0x51(0x01)
	None AIJobSelectionQuery; // 0x58(0x48)
	None JobCollection; // 0xa0(0x08)
	None TimeToPick; // 0xa8(0x04)
	None InitialDraftList; // 0xa8(0x10)
	None RepeatingDraftList; // 0xb8(0x10)
	None FailSafeTimeToPick; // 0xc8(0x04)
	None bImmediatelyLock; // 0xcc(0x01)
	None TimeToTrade; // 0xd0(0x04)
	None bTeamNumRepresentSideNum; // 0xd4(0x01)
	None AlternateSecondaryRules; // 0xd8(0x08)
	None SelectionRules; // 0x220(0x08)
	None PersonalActiveTask; // 0x228(0x48)
	None LocalPersonalActiveTask; // 0x270(0x48)
	None bLocalPersonalTaskPendingComplete; // 0x2b8(0x01)
	None Choices; // 0x2c0(0x10)
	None CompletedTasks; // 0x2d0(0x130)
	None ActiveTasks; // 0x400(0x130)
	None PendingTasks; // 0x530(0x130)
	None bAllPersonalTasksAreComplete; // 0x660(0x01)
	None bLocalAllPersonalTasksAreComplete; // 0x661(0x01)
	None bSelectionHasEnded; // 0x662(0x01)
	None OnRequestSelectSuccessful; // 0x668(0x10)
	None OnRequestSelectFailed; // 0x678(0x10)
	None OnRequestCompleteSuccessful; // 0x688(0x10)
	None OnRequestCompleteFailed; // 0x698(0x10)
	None OnJobSelectionChoicesChanged; // 0x6a8(0x10)
	None OnTasksChanged; // 0x6b8(0x10)
	None OnPendingTasksChanged; // 0x6c8(0x10)
	None OnTaskCompleted; // 0x6d8(0x10)
	None OnPersonalActiveTaskChanged; // 0x6e8(0x10)
	None OnAllPersonalTasksCompleted; // 0x6f8(0x10)
	None OnEndJobSelection; // 0x708(0x10)
	None SelectionAuthority; // 0x718(0x08)
	None JobSelectorId; // 0x720(0x04)
	None CachedPersistentPlayerId; // 0x728(0x10)
	None TimerManager; // 0x738(0x170)
	None bChoicesAreDirty; // 0x8b8(0x01)
	None bTasksAreDirty; // 0x8b9(0x01)
	None bPendingTasksAreDirty; // 0x8ba(0x01)
	None bPersonalTaskIsDirty; // 0x8bb(0x01)
	None bAllPersonTasksCompleteIsDirty; // 0x8bc(0x01)
	None bOwnerIsDirty; // 0x8bd(0x01)
	None BroadcastedTasks; // 0x8c0(0x50)
	None JobToChoiceIndexMap; // 0x910(0x50)
	None OwningPlayerController; // 0x9b0(0x08)
	None PrevLocalSelectedJob; // 0x9b8(0x08)
	None PrevLockedJobForLocalPlayer; // 0x9c0(0x08)
	None CharacterIndex; // 0x428(0x01)
	None bControlChildCharacterNameplate; // 0x429(0x01)
	None ChildCharacterDefaultScaleOverride; // 0x42c(0x04)
	None WeakPlayerInfo; // 0x430(0x08)
	None bPlayerPendingPartyAccept; // 0x438(0x01)
	None bAllowJobChangeOnPlayEmote; // 0x439(0x01)
	None bStopPlayingEmoteWhileLoadingNewEmote; // 0x43a(0x01)
	None EmoteCameraPositionLocationOffsets; // 0x440(0x50)
	None EmoteCameraPositionScaleOverrides; // 0x490(0x50)
	None FailSafeEmoteJob; // 0x4e0(0x28)
	None PendingEmote; // 0x508(0x08)
	None PendingEmoteComponentId; // 0x520(0x04)
	None PendingEmoteComponent; // 0x528(0x08)
	None PendingEmoteExpectedJob; // 0x530(0x28)
	None ActiveEmoteExpectedJob; // 0x558(0x28)
	None ActiveEmoteComponent; // 0x580(0x08)
	None ChildCharacterDefaultLocation; // 0x588(0x0c)
	None RogueScreenLoadoutComponent; // 0x5c8(0x08)
	None InteractTime; // 0x228(0x04)
	None InteractionType; // 0x230(0x08)
	None InteractionMode; // 0x238(0x08)
	None bCanInteractFromBehind; // 0x240(0x01)
	None bForceLOS; // 0x241(0x01)
	None InteractPromptText; // 0x248(0x18)
	None CurrentZoneUsers; // 0x260(0x50)
	None InteractionBlockerManager; // 0x2b0(0x08)
	None InteractableComponent; // 0x2b8(0x08)
	None UniqueId; // 0x28(0x08)
	None AssociatedLootId; // 0x30(0x04)
	None HideIfItemOwned; // 0x38(0x10)
	None ShowIfItemOwned; // 0x48(0x10)
	None HideIfOwned; // 0x58(0x01)
	None MinLevel; // 0x5c(0x04)
	None MaxLevel; // 0x60(0x04)
	None showSteam; // 0x78(0x01)
	None showEpic; // 0x79(0x01)
	None showPS4; // 0x7a(0x01)
	None showPS5; // 0x7b(0x01)
	None showXB1; // 0x7c(0x01)
	None showXSX; // 0x7d(0x01)
	None showNX; // 0x7e(0x01)
	None mapFilePathToTexture; // 0x48(0x50)
	None KillCamControllerClass; // 0x28(0x08)
	None KillCamWorld; // 0x30(0x08)
	None KillCamWorldPackage; // 0x38(0x08)
	None KillCamSpectatorController; // 0x40(0x08)
	None OriginalWorldMutedAudio; // 0x48(0x50)
	None OnKillCamEnabled; // 0xd8(0x10)
	None OnKillCamViewPawn; // 0x100(0x10)
	None OnKillCamViewProjectile; // 0x128(0x10)
	None OnPrepareKillCamPlayback; // 0x150(0x10)
	None OnFinishKillCamPlayback; // 0x178(0x10)
	None ProjectileDebugLifetime; // 0x6b8(0x04)
	None OnKSPlayerStateReplicatedDel; // 0x6c0(0x10)
	None DeferredViewTargetChangedUpdate; // 0x708(0x10)
	None CurrentSpectateTarget; // 0x720(0x08)
	None CurrentSpectateController; // 0x728(0x08)
	None CurrentSpectateViewTarget; // 0x730(0x08)
	None OnBeginPlayingState; // 0x778(0x10)
	None ClientContext; // 0x788(0xc8)
	None ClientInputTypeUse; // 0x850(0x08)
	None bRecordingFrameRateInfo; // 0x858(0x01)
	None Render; // 0x85c(0x18)
	None Game; // 0x874(0x18)
	None GPU; // 0x88c(0x18)
	None RHIT; // 0x8a4(0x18)
	None Frame; // 0x8bc(0x18)
	None ResolutionFractionApproximation; // 0x8d4(0x18)
	None FrameRateDataSmoothingFactor; // 0x8ec(0x04)
	None FrameRateDataPushCountdown; // 0x8f0(0x04)
	None DefaultCameraName; // 0x8f4(0x08)
	None bWaitingToViewPawn; // 0x8fc(0x01)
	None LastPingCalcTime; // 0x900(0x04)
	None HUDClass; // 0x908(0x28)
	None ShotListener; // 0x930(0x08)
	None OnHUDSetup; // 0x938(0x10)
	None bCachedIsUIRelevant; // 0x988(0x01)
	None bCachedIsOnlyASpector; // 0x989(0x01)
	None OnPlayerControllerIsUIRelevantDel; // 0x990(0x10)
	None OnViewedPawnChangedDel; // 0x9c0(0x10)
	None OnControllerChangedDel; // 0x9e8(0x10)
	None OnSpectateStateChanged; // 0x9f8(0x10)
	None KSCharacter; // 0xa10(0x08)
	None IsInTouchMode; // 0xa18(0x01)
	None StartInTouchMode; // 0xa19(0x01)
	None TouchModeAutoFireRadius; // 0xa1c(0x04)
	None TouchModeAutoFireTickRate; // 0xa20(0x04)
	None TouchModeClearAdsDelay; // 0xa24(0x04)
	None bTouchAutoFireNeededAds; // 0xa28(0x01)
	None LastTouchAutoFireWeaponID; // 0xa40(0x04)
	None RenderThreadInputHandler; // 0xa48(0x08)
	None OnTouchModeChanged; // 0xa58(0x10)
	None MouseLookSensitivityCurve; // 0xa68(0x08)
	None LookSensitivityToMaxLookSpeed; // 0xa70(0x18)
	None BaseGamepadTurnRateScale; // 0xa88(0x04)
	None BaseGamepadLookUpRateScale; // 0xa8c(0x04)
	None GamepadRightStickVelocity; // 0xa90(0x08)
	None AccumulatedRotationInput; // 0xa98(0x0c)
	None GamepadLook; // 0xaa8(0x08)
	None GamepadLookSpeedManagerClass; // 0xab0(0x08)
	None JoyConLookSpeedManagerClass; // 0xab8(0x08)
	None GamepadLookSpeedManager; // 0xac0(0x08)
	None JoyConLookSpeedManager; // 0xac8(0x08)
	None InputYawScaleADS; // 0xad0(0x04)
	None InputPitchScaleADS; // 0xad4(0x04)
	None InputRollScaleADS; // 0xad8(0x04)
	None ThisFrameKickbackRotationCache; // 0xadc(0x0c)
	None bKickbackEnabled; // 0xae8(0x01)
	None ActiveKickback; // 0xaf0(0x10)
	None bKickbackRecoveryActive; // 0xb00(0x01)
	None KickbackRecoveryDelayRemaining; // 0xb04(0x04)
	None KickbackRecoveryAcceleration; // 0xb08(0x04)
	None KickbackRecoveryTargetRate; // 0xb0c(0x04)
	None KickbackRecoveryRate; // 0xb10(0x04)
	None MaxCumulativeKickbackVerticalAngle; // 0xb14(0x04)
	None KickbackRecoveryRotation; // 0xb18(0x0c)
	None KickbackCancelRotation; // 0xb24(0x0c)
	None KickbackCancelThreshold; // 0xb30(0x04)
	None bAllowKickbackRecoveryCancel; // 0xb38(0x01)
	None bUseSmartKickbackRecovery; // 0xb39(0x01)
	None KickbackRecoveryEndThreshold; // 0xb3c(0x04)
	None KickbackScalingFactorMouse; // 0xb40(0x04)
	None AimAssistComponent; // 0xb48(0x08)
	None ViewedPawnTakeDamageDel; // 0xb50(0x10)
	None ViewedPawnTakeArmorDamageDel; // 0xb60(0x10)
	None ViewedPawnInstigateDamageDel; // 0xb70(0x10)
	None ViewedPawnInstigateDamageNotifyDel; // 0xb80(0x10)
	None OwnedPawnInstigateDamageNotifyDel; // 0xb90(0x10)
	None OwnedPawnInstigateWeaponFireNotifyDel; // 0xba0(0x10)
	None OwnedPawnTakesDamageNotifyDel; // 0xbb0(0x10)
	None OnOwnedPawnTakeDamageFromInstigatorDel; // 0xbc0(0x10)
	None OnHUDAnnouncementComponentCreated; // 0xbd0(0x10)
	None bCreateHUDAnnouncementComponent; // 0xbe0(0x01)
	None HUDAnnouncementComponent; // 0xbe8(0x08)
	None bFirstPawnAcknowledged; // 0xc38(0x01)
	None bFirstCharacterApparelFinished; // 0xc39(0x01)
	None bFirstCharacterWeaponsEquipped; // 0xc3a(0x01)
	None bKillcamWorldReady; // 0xc3b(0x01)
	None LastTimePlayedTime; // 0xc78(0x04)
	None PingManager; // 0xc80(0x08)
	None RadialMenuManager; // 0xc88(0x08)
	None JobSelectionManager; // 0xc90(0x08)
	None GyroTargetSpeedCurve; // 0xcc8(0x08)
	None GyroSensitivityConversionCurve; // 0xcd0(0x08)
	None EquipmentManagerComponent; // 0xcd8(0x08)
	None TeamCinematicSequenceActor; // 0xce0(0x08)
	None bIsTeamLoadedInLobby; // 0xce8(0x01)
	None OnGameFubarDel; // 0xcf0(0x10)
	None OnRadialMenuPressed; // 0xd00(0x10)
	None OnRadialMenuReleased; // 0xd10(0x10)
	None OnRadialMenuUsedLastSelection; // 0xd20(0x10)
	None OnRadialMenuForceClosed; // 0xd30(0x10)
	None bRadialMenuOpen; // 0xd40(0x01)
	None OnAutoPickupChanged; // 0xd48(0x10)
	None OnNewPollCalled; // 0xd68(0x10)
	None OnLocalPlayerHasVoted; // 0xd78(0x10)
	None OnPollCompleted; // 0xd88(0x10)
	None OnVoteCountUpdated; // 0xd98(0x10)
	None OnPollStateChanged; // 0xda8(0x10)
	None bLeftChoiceHeldDown; // 0xdb8(0x01)
	None bRightChoiceHeldDown; // 0xdb9(0x01)
	None bTelemetryFeatureActive; // 0xdbd(0x01)
	None OnTelemetrySettingsChanged; // 0xdc0(0x10)
	None bUseFallackTeamNum; // 0xe3c(0x01)
	None FallbackTeamNum; // 0xe40(0x04)
	None CachedMinimapRenderer; // 0xe48(0x08)
	None OnUpdatePlayerRevealedUI; // 0xe50(0x10)
	None OnUpdateEnemyDetectedUI; // 0xe60(0x10)
	None QueueDivertType; // 0xe71(0x01)
	None OnJobSelectorAddedDel; // 0xe78(0x10)
	None KillCamObjectCamera; // 0xef8(0x08)
	None MainCameraBoom; // 0x220(0x08)
	None MainCameraComponent; // 0x228(0x08)
	None EmptyComponent; // 0x230(0x08)
	None CurrentLeader; // 0xa0(0x18)
	None TempNewLeader; // 0xb8(0x18)
	None HighestKillCount; // 0xd0(0x04)
	None TrackedPlayers; // 0xd8(0x10)
	None LimitThreshold; // 0xb0(0x04)
	None bLimitPerAsset; // 0xb4(0x01)
	None LoadoutClass; // 0x260(0x28)
	None Gadget; // 0x288(0x28)
	None BundledAbilities; // 0x2b0(0x10)
	None DynamicPoseImage; // 0x250(0x28)
	None ThemeColorLight; // 0x278(0x10)
	None ThemeColorDark; // 0x288(0x10)
	None PerkCategories; // 0x298(0x10)
	None AvailablePerks; // 0x2a8(0x10)
	None AvailableAbilities; // 0x2b8(0x10)
	None AvailableGadgets; // 0x2c8(0x10)
	None CanUseGlobalGadgets; // 0x2d8(0x01)
	None AvailablePistols; // 0x2e0(0x10)
	None CanUseGlobalPistols; // 0x2f0(0x01)
	None AutoEquippedMods; // 0x2f8(0x10)
	None ViewModelName; // 0x3cb0(0x08)
	None ActiveLobbyMontage; // 0x3cb8(0x08)
	None bEnableRogueSelectWeaponPose; // 0x3cc0(0x01)
	None bEnableWalkinCinematicWeaponPose; // 0x3cc1(0x01)
	None CharacterIndex; // 0x3cc2(0x01)
	None LobbyWeapon01Component; // 0x3cc8(0x08)
	None LobbyWeapon02Component; // 0x3cd0(0x08)
	None LobbyProp01Component; // 0x3cd8(0x08)
	None LobbyProp02Component; // 0x3ce0(0x08)
	None LobbyPropStatic01Component; // 0x3ce8(0x08)
	None LobbyPropStatic02Component; // 0x3cf0(0x08)
	None SkeletalPropMapping; // 0x3cf8(0x50)
	None StaticPropMapping; // 0x3d48(0x50)
	None ShouldHideInGame; // 0x3d98(0x01)
	None bWereTexturesStreamedIn; // 0x3d99(0x01)
	None bIsSet; // 0x3d9a(0x01)
	None bHideUntilTexturesStream; // 0x3d9b(0x01)
	None bForceEnableClothSim; // 0x3d9c(0x01)
	None bPrestreamTextures; // 0x3d9d(0x01)
	None ForcedLodModel; // 0x3da0(0x04)
	None bCustomForcedLodForSwitch; // 0x3da4(0x01)
	None ForcedLodModelSwitch; // 0x3da8(0x04)
	None CurrentAnimState; // 0x3db4(0x01)
	None OnVisibilityChangedDel; // 0x3db8(0x10)
	None bIsRotatable; // 0x3dc8(0x01)
	None MaxAxisRotation; // 0x3dcc(0x0c)
	None IdleSecondsToResetRotation; // 0x3dd8(0x04)
	None ResetRotationSpeedRadians; // 0x3ddc(0x04)
	None RotationRatePerAxis; // 0x3de0(0x0c)
	None CameraTag; // 0x800(0x08)
	None SequenceTag; // 0x2b0(0x08)
	None OnLocalViewedPawnChangedDel; // 0x260(0x10)
	None KillCam; // 0x288(0x08)
	None KillCamControllerClass; // 0x290(0x08)
	None DistanceRequirement; // 0xa0(0x04)
	None SideAlignment; // 0x300(0x04)
	None bRequiresSideAlignmentToLoot; // 0x304(0x01)
	None bIsEnabled; // 0x328(0x01)
	None bIsActive; // 0x329(0x01)
	None bIsOpen; // 0x32a(0x01)
	None OnLootcrateInfoChangedDel; // 0x330(0x10)
	None LootCrateInfo; // 0x340(0x28)
	None LootItemInfos; // 0x368(0x10)
	None PossibleLoot; // 0x348(0x10)
	None AppliesToNPEMatches; // 0x220(0x01)
	None Difficulties; // 0x228(0x10)
	None InitialTeamDifficulties; // 0x238(0x50)
	None MinDifficultyWhenDefeated; // 0x288(0x04)
	None ApplicableGameModes; // 0x290(0x10)
	None WinLossRatioAdjustEasier; // 0x2a0(0x10)
	None WinLossRatioAdjustHarder; // 0x2b0(0x10)
	None AllowAdjustmentAtStartOfRound; // 0x2c0(0x01)
	None AllowAdjustmentForDeaths; // 0x2c1(0x01)
	None DeathsPerAdjustmentCalculation; // 0x2c4(0x04)
	None AllowAdjustmentForTeamDeaths; // 0x2c8(0x01)
	None TeamDeathsPerAdjustmentCalculation; // 0x2cc(0x04)
	None AllowAdjustmentForObjectivesClaimed; // 0x2d0(0x01)
	None ObjectivesPerAdjustmentCalculation; // 0x2d4(0x04)
	None AllowAdjustmentForTimeElapsed; // 0x2d8(0x01)
	None SecondsPerAdjustmentCalculation; // 0x2dc(0x04)
	None KillDeathRatioAdjustEasier; // 0x2e0(0x10)
	None KillDeathRatioAdjustHarder; // 0x2f0(0x10)
	None RoundWinPercentAdjustEasier; // 0x300(0x10)
	None RoundWinPercentAdjustHarder; // 0x310(0x10)
	None Map; // 0x68(0x28)
	None MiniMapTexture; // 0x90(0x28)
	None LoadingScreenImage; // 0xb8(0x28)
	None MapDisplayName; // 0xe0(0x18)
	None MapRegion; // 0xf8(0x18)
	None MapDescription; // 0x110(0x18)
	None Name; // 0x30(0x18)
	None Description; // 0x48(0x18)
	None SoftIcon; // 0x60(0x28)
	None RarityTag; // 0x88(0x08)
	None ItemTypeText; // 0x90(0x18)
	None RewardPreviewType; // 0xa8(0x01)
	None MatchRecord; // 0x28(0x1e8)
	None InProgressWeaponSummaries; // 0x2b0(0x50)
	None bUseWhileMovingOverride; // 0x6d8(0x01)
	None bCanStopFire; // 0x6d9(0x01)
	None bHasLungeTarget; // 0x3a8(0x01)
	None bHasThrowTarget; // 0x3a9(0x01)
	None MeleeAsset; // 0x3b0(0x08)
	None ImpactOnCharacterComponentSize; // 0x3b8(0x0c)
	None ImpactOnCharacterComponentMaterial; // 0x3c8(0x08)
	None ImpactOnCharacterColorParameterName; // 0x3d0(0x08)
	None ImpactOnCharacterCookParameterName; // 0x3d8(0x08)
	None ImpactOnCharacterMesh; // 0x3e0(0x08)
	None ImpactOnCharacterMaterialInstance; // 0x3e8(0x08)
	None ImpactOnCharacterComponent; // 0x3f0(0x08)
	None OnModInstRemoved; // 0xb0(0x10)
	None OnModTriggered; // 0xe0(0x10)
	None bPreventModInitialization; // 0xf0(0x01)
	None bInitialized; // 0xf1(0x01)
	None OwningPlayerModManager; // 0xf8(0x08)
	None OwnerCharacter; // 0x100(0x08)
	None OwnerCharacterFoundation; // 0x110(0x08)
	None ModAsset; // 0x118(0x08)
	None ModInstigator; // 0x120(0x08)
	None ModSource; // 0x128(0x01)
	None ActorInstigator; // 0x12c(0x08)
	None InstanceCount; // 0x134(0x04)
	None LocalInstanceCount; // 0x138(0x04)
	None bUsesDuration; // 0x13c(0x01)
	None bDisplaysDuration; // 0x13d(0x01)
	None bUseAssetDataTableManager; // 0x150(0x01)
	None AssetDataTableManager; // 0x158(0x08)
	None PersistentSkinDataTables; // 0x160(0x10)
	None UISkinDataTables; // 0x170(0x10)
	None bLatencyElapsed; // 0x198(0x01)
	None InputActions; // 0x1a8(0x10)
	None bCanBecomeFullyChargedOnEndActivation; // 0x1b8(0x01)
	None bUsesAbilityMovement; // 0x1b9(0x01)
	None MovementMode; // 0x1ba(0x01)
	None CustomMovementMode; // 0x1bb(0x01)
	None LockoutTimer; // 0x1c0(0x08)
	None bIsLocked; // 0x1d8(0x01)
	None OnModLocked; // 0x1e0(0x10)
	None OnModLockoutTick; // 0x1f0(0x10)
	None SetupTimer; // 0x210(0x08)
	None OnBonusAbilityDurationReceived; // 0x218(0x10)
	None BonusAbilityDuration; // 0x228(0x04)
	None LocalBonusAbilityDuration; // 0x22c(0x04)
	None SetupActionRestrictor; // 0x230(0x08)
	None CurrentSetupRestrictor; // 0x238(0x04)
	None RecoveryActionRestrictor; // 0x23c(0x08)
	None bUseDownedActionRestrictors; // 0x244(0x01)
	None DownedSetupActionRestrictor; // 0x245(0x08)
	None DownedRecoveryActionRestrictor; // 0x24d(0x08)
	None OnModActivated; // 0x270(0x10)
	None ActivateMod; // 0x280(0x08)
	None OnChargeChanged; // 0x288(0x10)
	None bEndActivationOnNullCharacter; // 0x298(0x01)
	None bDelayChargeConsumption; // 0x299(0x01)
	None bConsumeChargeOnEndActivation; // 0x29a(0x01)
	None OnModSetup; // 0x2a0(0x10)
	None ActivationSoundEvent; // 0x2b0(0x08)
	None SpacialActivationSoundEvent; // 0x2b8(0x08)
	None SetupSoundEvent; // 0x2c0(0x08)
	None SpacialSetupSoundEvent; // 0x2c8(0x08)
	None DeactivationSoundEvent; // 0x2d0(0x08)
	None bUnCrouchOnActivation; // 0x2d8(0x01)
	None bCanActivateWithoutRequiredCharge; // 0x2d9(0x01)
	None bCanAddPerSecondChargeWhileActive; // 0x2da(0x01)
	None OnModFailedToActivate; // 0x2e0(0x10)
	None CurrentCharge; // 0x320(0x04)
	None bDeactivateWhenWeaponFired; // 0x420(0x01)
	None WeaponsToIgnore; // 0x428(0x10)
	None bDeactivateWhenMacGuffinFired; // 0x438(0x01)
	None DamageTypesThatCancel; // 0x440(0x10)
	None OnModHoldChanged; // 0x450(0x10)
	None CurrentlyHeldId; // 0x460(0x04)
	None LocalHeldId; // 0x464(0x04)
	None bCurrentlyHeld; // 0x468(0x01)
	None ActivatedStateMachine; // 0x470(0x08)
	None ManagedModAssets; // 0x478(0x50)
	None ManagedMods; // 0x4c8(0x10)
	None CurrentActiveMod; // 0x4d8(0x08)
	None LocalActiveMod; // 0x4e0(0x08)
	None bChargeAll; // 0x4e8(0x01)
	None bSharedDuration; // 0x4e9(0x01)
	None bDelayActivation; // 0x4ea(0x01)
	None StateStorage; // 0x4f0(0x10)
	None OnStateStorageChangedDel; // 0x500(0x10)
	None ActivateTargetMod; // 0x478(0x08)
	None Target; // 0x480(0x08)
	None TargetAssetDataTableManager; // 0x490(0x08)
	None OnViewStateChange; // 0x478(0x10)
	None CurrentState; // 0x488(0x01)
	None MinimumDamage; // 0x1b8(0x04)
	None bUseActualDamageDone; // 0x1bc(0x01)
	None ValidDamageCategories; // 0x1c0(0x10)
	None DebuffsToApply; // 0x1d0(0x10)
	None bGiveDebuffsUniquely; // 0x1e0(0x01)
	None DebuffDuration; // 0x1e4(0x04)
	None bListenToDowns; // 0x1b8(0x01)
	None bListenToEliminations; // 0x1b9(0x01)
	None bListenToAssists; // 0x1ba(0x01)
	None bAffectFriendlies; // 0x1bb(0x01)
	None DebuffsToApply; // 0x1c0(0x10)
	None bGiveDebuffsUniquely; // 0x1d0(0x01)
	None DebuffDuration; // 0x1d4(0x04)
	None bRemoveDebuffOnRevive; // 0x1d8(0x01)
	None bGiveItemOnNewCharacter; // 0x478(0x01)
	None AsyncItemGiveDelegate; // 0x47c(0x10)
	None GivenItem; // 0x490(0x08)
	None bActivatesOnIdle; // 0x498(0x01)
	None bActivatesOnFire; // 0x499(0x01)
	None bRestrictSwapping; // 0x4a8(0x01)
	None bSwapToMain; // 0x4a9(0x01)
	None bConsiderAsSwapToPrevious; // 0x4aa(0x01)
	None bEndActivationOnHolster; // 0x4d0(0x01)
	None bEndActivationOnEmptyClip; // 0x4d1(0x01)
	None bEndActivationOnExhausted; // 0x4d2(0x01)
	None bConsumeChargeWhenItemRemoved; // 0x4d3(0x01)
	None bConsumeChargeWhenFired; // 0x4d4(0x01)
	None bConsumeChargeWhenAmmoConsumed; // 0x4d5(0x01)
	None bReplenishesAmmoOnFullyCharged; // 0x4d6(0x01)
	None bReplenishesAmmoOnDurationIncreased; // 0x4d7(0x01)
	None bShouldBroadcastWeaponHits; // 0x4d8(0x01)
	None SwapFromRetryTimer; // 0x4e0(0x08)
	None SwapFromRetryTime; // 0x4e8(0x04)
	None bSwappingOff; // 0x4ec(0x01)
	None DeployableActors; // 0x4f0(0x10)
	None AssetsToBuff; // 0x500(0x10)
	None EquipPointToBuff; // 0x510(0x08)
	None EquipPointOfBuff; // 0x518(0x08)
	None bRequireBaseToActivate; // 0x520(0x01)
	None bSyncAmmo; // 0x521(0x01)
	None BaseWeapon; // 0x524(0x08)
	None BaseWeaponComponent; // 0x52c(0x08)
	None BuffWeaponComponent; // 0x534(0x08)
	None CachedAim; // 0x478(0x50)
	None AimReferenceAsset; // 0x4c8(0x08)
	None AimRange; // 0x4d0(0x04)
	None bCacheAimOnSetup; // 0x4d4(0x01)
	None EffectTimer; // 0x1b8(0x08)
	None EffectTickPeriod; // 0x1c0(0x04)
	None EffectTickCount; // 0x1c4(0x04)
	None bShouldImmediatelyEffect; // 0x1c8(0x01)
	None bResetTickCountOnStackIncrease; // 0x1c9(0x01)
	None TickCount; // 0x1cc(0x04)
	None DamagePerTick; // 0x1d0(0x04)
	None DamageType; // 0x1d8(0x08)
	None RadialDamageWeapon; // 0x1e0(0x08)
	None OnDetectEnemy; // 0x1b8(0x10)
	None WidgetClass; // 0x1c8(0x28)
	None bIsDetectingEnemy; // 0x1f0(0x01)
	None TargetedWeapon; // 0x510(0x08)
	None OnTargetAcquired; // 0x518(0x10)
	None OnBuildSucceededDel; // 0x518(0x10)
	None OnBuildFailedDel; // 0x540(0x10)
	None bStartFireOnActivation; // 0x550(0x01)
	None bRefundOnReclaim; // 0x552(0x01)
	None TargeterConfig; // 0x480(0x0c)
	None OnTargetAcquired; // 0x490(0x10)
	None CurrentTarget; // 0x4a0(0x08)
	None TargetThrowDirection; // 0x588(0x01)
	None ChargeTime; // 0x58c(0x04)
	None Distance; // 0x478(0x04)
	None OnReloadStart; // 0x1b8(0x10)
	None OnReloadEnd; // 0x1c8(0x10)
	None bUseWeaponAssetReloadTime; // 0x1d8(0x01)
	None ReloadTime; // 0x1dc(0x04)
	None ValidWeaponTypes; // 0x1b8(0x10)
	None bTrackEnemyProjectile; // 0x1b8(0x01)
	None bTrackFriendlyProjectile; // 0x1b9(0x01)
	None bTrackSelfProjectile; // 0x1ba(0x01)
	None bListenToBounce; // 0x1bb(0x01)
	None bListenToStop; // 0x1bc(0x01)
	None MinimumDamage; // 0x1b8(0x04)
	None ValidDamageCategories; // 0x1c0(0x10)
	None WillToSurviveModState; // 0x1d8(0x01)
	None TakeDamageTimer; // 0x1b8(0x08)
	None MinimumDamage; // 0x1c0(0x04)
	None ValidDamageCategories; // 0x1c8(0x10)
	None RepossessionDelay; // 0x478(0x04)
	None VehicleDestroyDelay; // 0x47c(0x04)
	None bDisplayTransitionPPE; // 0x480(0x01)
	None TransitionPPE; // 0x488(0x50)
	None bDisplayFadeOnUnpossessCharacter; // 0x4d8(0x01)
	None FadeOnUnpossessDuration; // 0x4dc(0x04)
	None bRestrictCharacterRotation; // 0x4e0(0x01)
	None bShouldCrouchOnActivation; // 0x4e1(0x01)
	None ModsToGive; // 0x4e8(0x10)
	None SpawnedVehicle; // 0x508(0x08)
	None bIsVehiclePossessed; // 0x510(0x01)
	None DeployableActors; // 0x518(0x10)
	None PingHandles; // 0x1b8(0x10)
	None DownedRevealParameters; // 0x1c8(0x48)
	None CastOwningMod; // 0x210(0x08)
	None OwningController; // 0x218(0x08)
	None OnProximityActorAddedDel; // 0x1b8(0x10)
	None OnProximityActorRemovedDel; // 0x1c8(0x10)
	None SphereRadius; // 0x1d8(0x04)
	None ProximityFilter; // 0x1e0(0x28)
	None bDebugShowSphere; // 0x208(0x01)
	None ManagedSphereComponent; // 0x210(0x08)
	None ManagedProximityComponent; // 0x218(0x08)
	None RepOverlappedActors; // 0x230(0x10)
	None bAppliesScrambleEffectToEnemies; // 0x508(0x01)
	None RevealAreaRevealParameters; // 0x510(0x48)
	None MinimapDisplayWidget; // 0x1b8(0x28)
	None bRevealOnFullMap; // 0x1e0(0x01)
	None OnReviveDroneAbilityStateChanged; // 0x528(0x10)
	None KSReviveDroneAbilityState; // 0x538(0x01)
	None ResetToAvailabilityTimerHandle; // 0x540(0x08)
	None TimeToResetAvailability; // 0x548(0x04)
	None CurrentDrone; // 0x54c(0x08)
	None OnReviveDroneSetTarget; // 0x558(0x10)
	None DroneTargetCharacter; // 0x568(0x08)
	None bUsesCustomDuration; // 0x478(0x01)
	None CustomReviveTime; // 0x47c(0x04)
	None bCanUseWhileUp; // 0x480(0x01)
	None bReviveDuringSetup; // 0x481(0x01)
	None UpAbilitySetupDuration; // 0x484(0x04)
	None UpAbilityDuration; // 0x488(0x04)
	None UpAbilityRecoveryDuration; // 0x48c(0x04)
	None UpAbilityRecoveryActionRestrictor; // 0x490(0x08)
	None UpBuffsGivenOnActivation; // 0x498(0x10)
	None MaxDistance; // 0x478(0x04)
	None OverrideReviveeMontageRowName; // 0x47c(0x08)
	None WeaponTypeSkinTables; // 0x1b8(0x50)
	None DefaultWeaponSkinTable; // 0x208(0x58)
	None WeaponTypeSkinObjects; // 0x280(0x50)
	None DefaultWeaponSkinObject; // 0x2d0(0x08)
	None AppliedWeaponComponents; // 0x2d8(0x10)
	None EnterModZoneInfos; // 0x240(0x10)
	None ExitModZoneInfos; // 0x250(0x10)
	None MultiDownAccolades; // 0xa8(0x10)
	None TrackPlayers; // 0xb8(0x10)
	None MaxTrackerTimer; // 0xc8(0x04)
	None MultiElimAccolades; // 0xa0(0x10)
	None TrackPlayers; // 0xb0(0x10)
	None TargetingModuleInfos; // 0x128(0x10)
	None TopStats; // 0x30(0x10)
	None StatToWeightMap; // 0x40(0x50)
	None NavAreaType; // 0x48(0x01)
	None DefaultFilter; // 0x48(0x08)
	None NoJumpFilter; // 0x50(0x08)
	None NoZiplineFilter; // 0x58(0x08)
	None NoJumpNoZiplineFilter; // 0x60(0x08)
	None MaxSearchNodes; // 0x68(0x04)
	None ComponentBoundsOffset; // 0x140(0x0c)
	None BombInfo; // 0x348(0x30)
	None bInitialSpawn; // 0x378(0x01)
	None bRespawn; // 0x379(0x01)
	None BombZoneGroup; // 0x430(0x04)
	None OnBombZoneActive; // 0x438(0x10)
	None BombZone; // 0x448(0x08)
	None CameraName; // 0x450(0x08)
	None CameraTransitionInTime; // 0x458(0x04)
	None CameraTransitionOutTime; // 0x45c(0x04)
	None bForceCameraShoulder; // 0x460(0x01)
	None CameraShoulder; // 0x461(0x01)
	None CameraMaxRotation; // 0x464(0x04)
	None CameraRotationLockout; // 0x468(0x01)
	None bLockPitch; // 0x469(0x01)
	None bLockYaw; // 0x46a(0x01)
	None bCameraShake; // 0x46b(0x01)
	None CameraShake; // 0x470(0x08)
	None QuantityDowns; // 0xa0(0x04)
	None PlayerDowns; // 0xa8(0x50)
	None NudgeClassFilters; // 0xb0(0x10)
	None NudgeSpeed; // 0xc0(0x04)
	None MaxNudgeDistance; // 0xc4(0x04)
	None CachedNudgingActors; // 0xc8(0x10)
	None OutOfBoundsWarningTime; // 0xc4(0x04)
	None OutOfBoundsTickDamageTime; // 0xc8(0x04)
	None OutOfBoundsTickDamage; // 0xcc(0x04)
	None TimeSpentGroundedAllowedBeforeSave; // 0xd0(0x04)
	None OutOfBoundsDamageType; // 0xd8(0x08)
	None bAllowSaving; // 0xe0(0x01)
	None AnnouncerLineOnSaved; // 0xe8(0x08)
	None AnnouncerLineOnEntered; // 0xf0(0x08)
	None CharacterOverlaps; // 0xf8(0x04)
	None CharacterWarningTimer; // 0x100(0x08)
	None CharacterDamageTickTimer; // 0x108(0x08)
	None VehicleOverlaps; // 0x110(0x04)
	None VehicleWarningTimer; // 0x118(0x08)
	None VehicleDamageTickTimer; // 0x120(0x08)
	None OverlapCheckComponent; // 0x128(0x08)
	None TimeSpentGroundedTimerHandle; // 0x130(0x08)
	None DefaultRecoveryUseTime; // 0x138(0x04)
	None SecondsIntoRoundToFreeze; // 0x140(0x04)
	None FrozenCharacterModAsset; // 0x158(0x08)
	None SideNum; // 0x248(0x04)
	None TickDamage; // 0x228(0x04)
	None WarningDuration; // 0x22c(0x04)
	None ShouldDisableCollisionAtRoundEnd; // 0x230(0x01)
	None TickDamage; // 0x258(0x04)
	None WarningDuration; // 0x25c(0x04)
	None KSChar; // 0x98(0x08)
	None EquipPoint; // 0xa0(0x08)
	None bInfiniteAmmo; // 0xa8(0x01)
	None PersistentAmmoCount; // 0xac(0x04)
	None EquipPoint; // 0xa0(0x08)
	None EquipPoint; // 0xa0(0x08)
	None PlayerElimTracker; // 0xa0(0x10)
	None StatsReplicator; // 0x220(0x230)
	None bIsBoundToMinPlayerData; // 0x28(0x01)
	None PlayerState; // 0x30(0x08)
	None ID; // 0x48(0x10)
	None TeamNum; // 0x58(0x04)
	None PlayerName; // 0x60(0x10)
	None OnMinimumPlayerDataUpdatedDel; // 0x70(0x10)
	None OnPlayerDataTeamChangedDel; // 0x98(0x10)
	None bAbandoned; // 0xc0(0x01)
	None OnPersistentPlayerDataAbandonedDel; // 0xc8(0x10)
	None CachedEliminations; // 0xf0(0x04)
	None CachedDowns; // 0xf4(0x04)
	None CachedAssists; // 0xf8(0x04)
	None CachedDeaths; // 0xfc(0x04)
	None CachedRevives; // 0x100(0x04)
	None CachedMoney; // 0x104(0x04)
	None CachedTotalCashEarned; // 0x108(0x04)
	None CachedBounty; // 0x10c(0x04)
	None SkinMap; // 0x110(0x50)
	None ActiveJob; // 0x160(0x08)
	None OnActiveJobMasteryXpChanged; // 0x180(0x10)
	None ActiveJobMasteryXp; // 0x190(0x04)
	None ActiveJobMasteryLevel; // 0x194(0x04)
	None PhaseCompletedDel; // 0xb0(0x10)
	None ScoringScalar; // 0xd0(0x04)
	None LastInitiatedPhaseTime; // 0xd4(0x04)
	None bRejectPhaseTimerExpiredForPostRound; // 0xd8(0x01)
	None bUseInitialSpawnPoints; // 0xd9(0x01)
	None LastPhaseName; // 0xdc(0x08)
	None bPhaseActive; // 0xe4(0x01)
	None ContextualPingTypesDT; // 0x220(0x08)
	None PlayerOwner; // 0x228(0x08)
	None BeaconPingInfo; // 0x230(0xb0)
	None OnPingFailureDel; // 0xb0(0x10)
	None OnPingAdded; // 0xc0(0x10)
	None OnPingRemoved; // 0xd0(0x10)
	None OnPingChanged; // 0xe0(0x10)
	None OnSentVoiceLineOnly; // 0xf0(0x10)
	None OnSelfPingAdded; // 0x100(0x10)
	None OnSelfPingRemoved; // 0x110(0x10)
	None OnSelfPingChanged; // 0x120(0x10)
	None OnHoveredActorChanged; // 0x130(0x10)
	None ReplicatedPings; // 0x140(0x120)
	None LocallyPredictedPings; // 0x260(0x10)
	None PingLifetimes; // 0x270(0x50)
	None PingBeaconTypes; // 0x2c0(0x50)
	None MaxPingsForType; // 0x310(0x50)
	None PingIconOffsets; // 0x360(0x50)
	None ObjectPingMessage; // 0x3b0(0x01)
	None ContextualPingTypesDT; // 0x3b8(0x08)
	None ContextualPingMessagesDT; // 0x3c0(0x08)
	None bDisplaySelfPingsOnNameplate; // 0x3c8(0x01)
	None bWorldSelfPingsFollowPlayer; // 0x3c9(0x01)
	None MaxPingDistance; // 0x418(0x04)
	None ActiveBeacons; // 0x420(0x10)
	None bAllowPingRemoval; // 0x430(0x01)
	None PingAudioCues; // 0x438(0x50)
	None CachedRoundState; // 0x490(0x08)
	None CachedOwner; // 0x498(0x08)
	None CachedTeam; // 0x4a0(0x08)
	None CachedHoveredActor; // 0x4d0(0x08)
	None MinimapDisplayWidget; // 0x4e0(0x28)
	None FullmapDisplayWidget; // 0x508(0x28)
	None OverlayDisplayWidget; // 0x530(0x28)
	None ActivityInstances; // 0x30(0x50)
	None ThermalScopePPCount; // 0x27c8(0x04)
	None OnPlayerChallengesReady; // 0x218(0x10)
	None OnPlayerChallengesChanged; // 0x228(0x10)
	None OnPlayerDailyChallengeTimerChanged; // 0x238(0x10)
	None ChallengesReady; // 0x248(0x01)
	None TestPlayerChallengeComplete; // 0x250(0x10)
	None OnLoginRewardClaimed; // 0x270(0x10)
	None OnPlayerStatusChanged; // 0x80(0x10)
	None SettingsConfig; // 0x28(0x10)
	None KSInputActionNameTypePairs; // 0x38(0x10)
	None KSInputActionTiedNames; // 0x48(0x10)
	None CustomInputActionKeys; // 0x58(0x10)
	None CustomInputAxisKeys; // 0x68(0x10)
	None SavedSettingsConfig; // 0x12f0(0x50)
	None GamepadLookAcceleration; // 0x1434(0x08)
	None MinMouseSenseScaling; // 0x143c(0x04)
	None MaxMouseSenseScaling; // 0x1440(0x04)
	None TouchLookSensitivityADS; // 0x1444(0x04)
	None OnKeyMappingsUpdated; // 0x1450(0x10)
	None KSCustomActionKeyMappings; // 0x1460(0x50)
	None KSCustomAxisKeyMappings; // 0x1500(0x50)
	None KSLeftAnalogStickFilterClass; // 0x15a0(0x08)
	None KSRightAnalogStickFilterClass; // 0x15a8(0x08)
	None LeftAnalogStickFilter; // 0x15b0(0x08)
	None RightAnalogStickFilter; // 0x15c8(0x08)
	None DynamicCallbacksPerInventoryId; // 0x118(0x50)
	None DynamicCallbacksPerInventoryTypeId; // 0x168(0x50)
	None OnPlayerJoinTaskComplete; // 0x28(0x10)
	None bIsPerk; // 0x250(0x01)
	None bCanBePickup; // 0x251(0x01)
	None FunctionalClass; // 0x258(0x28)
	None bIsInstanceReplicated; // 0x280(0x01)
	None ModUnlockTier; // 0x284(0x04)
	None AttachmentInteraction; // 0x288(0x01)
	None bSingleInstanceStack; // 0x289(0x01)
	None bStacksPerInstigator; // 0x28a(0x01)
	None bRemoveAllInstances; // 0x28b(0x01)
	None MaxStackCount; // 0x28c(0x04)
	None bCapInstanceCount; // 0x290(0x01)
	None ModType; // 0x291(0x01)
	None bShouldAssist; // 0x292(0x01)
	None EffectCategories; // 0x298(0x20)
	None TriggerEvents; // 0x2b8(0x10)
	None AnimEventPriorityMap; // 0x2c8(0x50)
	None RemovesFromLoadout; // 0x318(0x10)
	None bLerpModifiers; // 0x328(0x01)
	None bShouldLagCompensateEffects; // 0x329(0x01)
	None bGiveModToAllControlledPawns; // 0x32a(0x01)
	None bCanActivateOnZipline; // 0x32b(0x01)
	None AbilityRechargeSpeedMultiplier; // 0x330(0x04)
	None BaseAccuracyMultiplier; // 0x330(0x04)
	None bRestrictSprint; // 0x330(0x01)
	None bRestrictDodgeRoll; // 0x331(0x01)
	None bRestrictMantleAndVault; // 0x332(0x01)
	None bRestrictQuickMelee; // 0x333(0x01)
	None bRestrictGadgetUse; // 0x334(0x01)
	None bRestrictInteracting; // 0x335(0x01)
	None bRestrictJumping; // 0x336(0x01)
	None bRestrictCrouching; // 0x337(0x01)
	None bRestrictEmotesAndSprays; // 0x338(0x01)
	None bIsCharacterAbility; // 0x330(0x01)
	None RequiredCharge; // 0x334(0x04)
	None MaximumCharge; // 0x338(0x04)
	None DefaultCharge; // 0x33c(0x04)
	None bRemoveIfExhausted; // 0x340(0x01)
	None RefundFactor; // 0x344(0x04)
	None bHasLockout; // 0x348(0x01)
	None LockoutTime; // 0x34c(0x04)
	None bCanActivateBeforeRoundStart; // 0x350(0x01)
	None bIgnoreNoFireZone; // 0x351(0x01)
	None bIgnoreWeaponFireCheck; // 0x352(0x01)
	None bEndOnDown; // 0x353(0x01)
	None bEndOnDeath; // 0x354(0x01)
	None BuffsGivenOnActivation; // 0x358(0x10)
	None bKeepsTeamAliveIfUsable; // 0x368(0x01)
	None bKeepsTeamAliveIfActive; // 0x369(0x01)
	None AbilitySetupDuration; // 0x36c(0x04)
	None bSetupLagCompensation; // 0x370(0x01)
	None AbilityDuration; // 0x374(0x04)
	None MaximumBonusDuration; // 0x378(0x04)
	None bCapBonusDuration; // 0x37c(0x01)
	None AbilityEndWarningTime; // 0x380(0x04)
	None AbilityRecoveryDuration; // 0x384(0x04)
	None bSelectableNormally; // 0x388(0x01)
	None bSelectableWhileDowned; // 0x389(0x01)
	None ChargePerSecond; // 0x38c(0x04)
	None ChargePerHundredPoints; // 0x390(0x04)
	None CameraShake; // 0x398(0x08)
	None ActivateWhileDownedPromptText; // 0x3a0(0x18)
	None TargetBuffsGivenOnActivation; // 0x3b8(0x10)
	None BonusCashPerDown; // 0x330(0x04)
	None AdsMoveSpeedMultiplier; // 0x330(0x04)
	None AimLocked; // 0x330(0x01)
	None CrosshairHidden; // 0x331(0x01)
	None SensitivityMultiplier; // 0x334(0x04)
	None AngleThreshold; // 0x330(0x04)
	None bUseDistance; // 0x334(0x01)
	None DistanceThreshold; // 0x338(0x04)
	None ModDuration; // 0x330(0x04)
	None ModsToGiveOnEvent; // 0x338(0x10)
	None IsBlind; // 0x330(0x01)
	None bIsMultiplier; // 0x330(0x01)
	None ChargeMultiplier; // 0x334(0x04)
	None bIsDiscount; // 0x338(0x01)
	None ChargeDiscount; // 0x33c(0x04)
	None DamageDealtMultiplier; // 0x330(0x04)
	None SlowedDamageDealtMultiplier; // 0x334(0x04)
	None DeployableDamageDealtMultiplier; // 0x338(0x04)
	None bRequireHeadshot; // 0x33c(0x01)
	None ValidDamageTypes; // 0x340(0x10)
	None ValidDamageTypes; // 0x330(0x10)
	None ValidHitLocations; // 0x340(0x10)
	None DamageTakenMultiplier; // 0x350(0x04)
	None DamageTakenParticle; // 0x358(0x28)
	None ImmuneToNonDamageEffects; // 0x380(0x01)
	None NotifyDamageReduction; // 0x381(0x01)
	None HitBodyAudioEvent; // 0x388(0x28)
	None HitHeadAudioEvent; // 0x3b0(0x28)
	None HitByAudioEvent; // 0x3d8(0x28)
	None DisableGrenadeFailurePrompt; // 0x330(0x0c)
	None LockoutTimeMultiplier; // 0x330(0x04)
	None CooldownMultiplier; // 0x330(0x04)
	None DistanceMultiplier; // 0x334(0x04)
	None SpeedMultiplier; // 0x338(0x04)
	None AdditionalDownedHealth; // 0x33c(0x04)
	None FullSpeedAlpha; // 0x330(0x04)
	None GadgetThrowSpeedMutliplier; // 0x330(0x04)
	None GadgetInnerRadiusMultiplier; // 0x334(0x04)
	None GadgetOuterRadiusMutliplier; // 0x338(0x04)
	None GadgetFXSizeMultiplier; // 0x33c(0x04)
	None EquipPointsToGive; // 0x330(0x20)
	None GivenItem; // 0x3b8(0x28)
	None GivenItems; // 0x3e0(0x10)
	None ItemToGive; // 0x330(0x28)
	None Radius; // 0x3f0(0x04)
	None bCanActivateInAir; // 0x3f4(0x01)
	None ReclaimCharge; // 0x3f8(0x04)
	None AllowedActiveDeployableCount; // 0x3fc(0x04)
	None GlobalMoveSpeedMultiplier; // 0x330(0x04)
	None bSprintOverride; // 0x334(0x01)
	None GlobalSprintSpeedMultiplier; // 0x338(0x04)
	None bDodgeRollOverride; // 0x33c(0x01)
	None GlobalDodgeRollSpeedMultiplier; // 0x340(0x04)
	None bCrouchOverride; // 0x344(0x01)
	None GlobalCrouchSpeedMultiplier; // 0x348(0x04)
	None CanSprintWhenAffected; // 0x34c(0x01)
	None CanDodgeRollWhenAffected; // 0x34d(0x01)
	None LerpGoal; // 0x350(0x04)
	None HackSpeedMultiplier; // 0x330(0x04)
	None DehackSpeedMultiplier; // 0x334(0x04)
	None AllowBunnyHopping; // 0x330(0x01)
	None bHealUpTo; // 0x330(0x01)
	None bHealAsPercentage; // 0x331(0x01)
	None HealthPercentage; // 0x334(0x04)
	None HealthAmount; // 0x338(0x04)
	None HealDelay; // 0x33c(0x04)
	None HealPeriod; // 0x340(0x04)
	None HealTickCount; // 0x344(0x04)
	None bFirstTickImmediately; // 0x348(0x01)
	None HealthRegenerationPerSecondAdded; // 0x330(0x04)
	None Priority_HealthRegenerationPerSecondAdded; // 0x334(0x04)
	None HealthRegenerationDelayAdded; // 0x338(0x04)
	None Priority_HealthRegenerationDelayAdded; // 0x33c(0x04)
	None ShouldAllowHealthRegen; // 0x340(0x01)
	None Priority_ShouldAllowHealthRegen; // 0x344(0x04)
	None bHideFriendlyStencil; // 0x330(0x01)
	None bNoFriendlyDrone; // 0x331(0x01)
	None bCanHipfireSprint; // 0x330(0x01)
	None bCanReloadSprint; // 0x331(0x01)
	None FieldOfViewOverride; // 0x330(0x04)
	None SprintFovOverride; // 0x334(0x04)
	None CameraBoomLengthBonus; // 0x338(0x04)
	None SprintCameraBoomLengthBonus; // 0x33c(0x04)
	None SprintCameraShakeOverride; // 0x340(0x28)
	None MedPackSpeedMultiplier; // 0x330(0x04)
	None MeleeAttackSpeedMultiplier; // 0x330(0x04)
	None MeleeMoveSpeedMultiplier; // 0x330(0x04)
	None MinimapZoomModifier; // 0x330(0x04)
	None MeleeChargeBonusModePairs; // 0x330(0x50)
	None MeleeChargeBonusDefault; // 0x380(0x04)
	None HeadshotChargeBonusModePairs; // 0x388(0x50)
	None HeadshotChargeBonusDefault; // 0x3d8(0x04)
	None PickupRadius; // 0x330(0x04)
	None PickupCylinderRadius; // 0x334(0x04)
	None CompleteRadiusOverride; // 0x338(0x01)
	None Vehicle; // 0x3b8(0x08)
	None MaxHealth; // 0x3c0(0x04)
	None SpawnPositionOffset; // 0x3c4(0x0c)
	None bCanActivateInAir; // 0x3d0(0x01)
	None NumberOfPings; // 0x330(0x04)
	None NumberOfEnemiesToPing; // 0x334(0x04)
	None ShouldPingDownedPlayer; // 0x338(0x01)
	None SecondsToRevealPingedEnemies; // 0x33c(0x04)
	None PingPeriod; // 0x340(0x04)
	None PingRadius; // 0x344(0x04)
	None PingAllEnemyTeams; // 0x348(0x01)
	None BroadcastPingToAllies; // 0x349(0x01)
	None DelayPingPastDownImmune; // 0x34a(0x01)
	None EmitterTemplate; // 0x350(0x28)
	None ShowPlayerIconToEnemies; // 0x330(0x0c)
	None PlayerIconRange; // 0x33c(0x0c)
	None BounceDamageMultiplier; // 0x330(0x04)
	None RetrieveTimeMultiplier; // 0x330(0x04)
	None ReloadTimeMultiplier; // 0x334(0x04)
	None ReloadTimeMultiplier; // 0x330(0x04)
	None RetrieveTimeMultiplier; // 0x330(0x04)
	None RevealParameters; // 0x330(0x48)
	None ReviveTimeMultiplier; // 0x330(0x04)
	None bHasTextOverride; // 0x334(0x01)
	None ReviveText; // 0x338(0x18)
	None ReviveInteractionMode; // 0x350(0x08)
	None HealChargeMultiplier; // 0x358(0x04)
	None Priority; // 0x330(0x04)
	None DodgeRollCooldownMultiplier; // 0x334(0x04)
	None DodgeRollDistanceMultiplier; // 0x338(0x04)
	None DodgeRollSpeedMultiplier; // 0x33c(0x04)
	None DodgeRollLockoutMultiplier; // 0x340(0x04)
	None MidairDodgeRollLimit; // 0x344(0x04)
	None ShowTeamHovers; // 0x330(0x01)
	None Priority_ShowTeamHovers; // 0x334(0x04)
	None HoverCharacterLingerExtraTime; // 0x338(0x04)
	None Priority_HoverCharacterLingerExtraTime; // 0x33c(0x04)
	None SeeFootprints; // 0x330(0x01)
	None SprintSpeedMultiplier; // 0x330(0x04)
	None EquipmentAsset; // 0x330(0x28)
	None HiddenFromReveals; // 0x330(0x0c)
	None HiddenOnRadar; // 0x33c(0x0c)
	None HiddenFromRemoteExplosives; // 0x348(0x0c)
	None HiddenFromThermal; // 0x354(0x0c)
	None HiddenFromShotDetection; // 0x360(0x0c)
	None HideFootprints; // 0x36c(0x0c)
	None Camouflaged; // 0x378(0x0c)
	None RevealTimeMultiplier; // 0x384(0x0c)
	None VaultHeight; // 0x330(0x04)
	None VaultName; // 0x334(0x08)
	None bHandleEnemiesOnly; // 0x1b8(0x01)
	None AttachmentsToGive; // 0x1b8(0x10)
	None ItemSourcesThatAllowAttachmentGiving; // 0x1c8(0x10)
	None ItemSourcesThatForbidAttachmentGiving; // 0x1d8(0x10)
	None bAttachmentsPersistOnDrop; // 0x1e8(0x01)
	None GivenAttachmentInstances; // 0x1f0(0x10)
	None bOnlyChargeModsWhenAlive; // 0x220(0x01)
	None PlayerStateOwner; // 0x228(0x08)
	None ActiveMods; // 0x248(0x10)
	None WidgetParamsToCreate; // 0x220(0x10)
	None PlayerForWidget; // 0x230(0x08)
	None PlayerState; // 0x258(0x08)
	None OnPurchaseAcknowledged; // 0x260(0x10)
	None OnRefundAcknowledged; // 0x270(0x10)
	None OnShopManifestChanged; // 0x280(0x10)
	None OnShopOfferingsChanged; // 0x290(0x10)
	None OnShopItemChanged; // 0x2a0(0x10)
	None OnShopItemPurchased; // 0x2b0(0x10)
	None OnShopItemRefunded; // 0x2c0(0x10)
	None OnShopItemActive; // 0x2d0(0x10)
	None OnShopItemInactive; // 0x2e0(0x10)
	None OnShopOpened; // 0x2f0(0x10)
	None OnShopClosed; // 0x300(0x10)
	None bWeaponMasterySwapEnabled; // 0x310(0x01)
	None CashPerKSPoint; // 0x314(0x04)
	None bDelayApplyPurchases; // 0x318(0x01)
	None ShopManifestMap; // 0x330(0x120)
	None ConfiguratorObject; // 0x450(0x08)
	None NextTransactionId; // 0x848(0x04)
	None bShopOpen; // 0x858(0x01)
	None bShopInitialized; // 0x85a(0x01)
	None bPlayersCanAccessShopWhileDead; // 0x85b(0x01)
	None MinimumUndoableTransactionId; // 0x85c(0x04)
	None PlayerShopHistoryComponent; // 0x860(0x08)
	None bAvailable; // 0x868(0x01)
	None OnShopAvailabilityChanged; // 0x870(0x10)
	None OnShopOptionsChanged; // 0x880(0x10)
	None ShopOptions; // 0x890(0x07)
	None PrimaryOneOfferings; // 0x898(0x10)
	None PrimaryTwoOfferings; // 0x8a8(0x10)
	None PistolWeaponCategory; // 0x8b8(0x08)
	None PistolOfferings; // 0x8c0(0x10)
	None MeleeWeaponCategory; // 0x8d0(0x08)
	None MeleeOfferings; // 0x8d8(0x10)
	None GadgetWeaponCategory; // 0x8e8(0x08)
	None GadgetOneOfferings; // 0x8f0(0x10)
	None GadgetTwoOfferings; // 0x900(0x10)
	None bDisableShopOnClose; // 0x911(0x01)
	None OnZoneEntered; // 0x220(0x10)
	None OnZoneLeft; // 0x230(0x10)
	None MinimapShotNofify; // 0xb0(0x10)
	None EnemyShotPingWidgetPools; // 0x118(0x10)
	None OverlayDisplayWidget; // 0x128(0x28)
	None bInitialSpawnPoint; // 0x260(0x01)
	None bRespawnPoint; // 0x261(0x01)
	None SideNum; // 0x264(0x04)
	None bBotOnly; // 0x268(0x01)
	None bPlayerOnly; // 0x269(0x01)
	None InitialBehaviorState; // 0x26a(0x01)
	None bUseInitialBehaviorOverride; // 0x26b(0x01)
	None InitialBehaviorStateOverride; // 0x26c(0x01)
	None InventoryToGive; // 0x270(0x10)
	None InitialSpawnInventoryToGive; // 0x280(0x10)
	None RespawnInventoryToGive; // 0x290(0x10)
	None ModsToGive; // 0x2a0(0x10)
	None InitialSpawnModsToGive; // 0x2b0(0x10)
	None RespawnModsToGive; // 0x2c0(0x10)
	None bIsDemoRecording; // 0x328(0x01)
	None OnCharacterOwnerChangedDel; // 0x330(0x10)
	None OnBackupCharacterOwnerChangedDel; // 0x340(0x10)
	None OnFriendlyFireInflicted; // 0x350(0x10)
	None TrackedFriendlyFireDamage; // 0x360(0x04)
	None bReverseFriendlyFireEnabled; // 0x364(0x01)
	None PredictionFudge; // 0x368(0x04)
	None MaxPredictionPing; // 0x36c(0x04)
	None OnTrackedActorBegin; // 0x370(0x10)
	None OnTrackedActorEnd; // 0x380(0x10)
	None PlayerType; // 0x390(0x01)
	None r_Team; // 0x398(0x08)
	None BackupTeamNum; // 0x3a8(0x04)
	None bHasServerTravelled; // 0x3ac(0x01)
	None OnKSPlayerStateTeamChangedDel; // 0x3b0(0x10)
	None OnKSPlayerStateNameChangedDel; // 0x3d8(0x10)
	None CharacterOwner; // 0x400(0x08)
	None BackupCharacterOwner; // 0x408(0x08)
	None CharacterFoundationOwner; // 0x410(0x08)
	None EliminatedState; // 0x448(0x01)
	None OnPlayerEliminated; // 0x450(0x10)
	None OnPlayerInPlay; // 0x460(0x10)
	None OnPlayerLeftPlay; // 0x470(0x10)
	None bDowned; // 0x480(0x01)
	None OnPlayerDownedChangedDel; // 0x488(0x10)
	None LastKnownLocation; // 0x498(0x0c)
	None LocalSideNum; // 0x4a4(0x04)
	None bUIRelevant; // 0x4a8(0x01)
	None bMarkedUIIrrelevant; // 0x4a9(0x01)
	None r_ReplicatedNetId; // 0x4b0(0x08)
	None OnRespawnTicketsChanged; // 0x4d0(0x10)
	None RespawnTickets; // 0x4e0(0x04)
	None bIsPendingRepossession; // 0x4e4(0x01)
	None RespawnTimer; // 0x4e8(0x08)
	None DisallowGiveUpTimer; // 0x4f0(0x08)
	None OnRespawnTimerTick; // 0x4f8(0x10)
	None OnRespawnTimerActive; // 0x508(0x10)
	None OnRespawnTimerComplete; // 0x518(0x10)
	None OnDisallowGiveUpTimerTick; // 0x528(0x10)
	None OnDisallowGiveUpTimerActive; // 0x538(0x10)
	None OnDisallowGiveUpTimerComplete; // 0x548(0x10)
	None OnScoreChanged; // 0x558(0x10)
	None OnMultiDownAchievedDel; // 0x568(0x10)
	None OnMultiDownAchievedWithDataDel; // 0x578(0x10)
	None Kills; // 0x58c(0x04)
	None deaths; // 0x590(0x04)
	None Assists; // 0x594(0x04)
	None downs; // 0x598(0x04)
	None DownSpree; // 0x59c(0x04)
	None Revives; // 0x5a0(0x04)
	None eliminations; // 0x5a4(0x04)
	None Headshots; // 0x5a8(0x04)
	None Hacks; // 0x5ac(0x04)
	None Dehacks; // 0x5b0(0x04)
	None MitigatedDamageDealt; // 0x5b4(0x04)
	None MitigatedDamageReceived; // 0x5b8(0x04)
	None RawDamageDealt; // 0x5bc(0x04)
	None RawDamageReceived; // 0x5c0(0x04)
	None RoundsPlayed; // 0x5c4(0x04)
	None TimeAlive; // 0x5c8(0x04)
	None timePlayed; // 0x5cc(0x04)
	None OnUIRelevantPlayerStateChangedDel; // 0x5e8(0x10)
	None ScoreChangeList; // 0x5f8(0x90)
	None PreviewRecordedStats; // 0x688(0x08)
	None Money; // 0x690(0x04)
	None LastMoney; // 0x694(0x04)
	None OnMoneyEarned; // 0x698(0x10)
	None OnMoneyChanged; // 0x6a8(0x10)
	None bMoneyGivesCharge; // 0x6b8(0x01)
	None cash; // 0x6bc(0x04)
	None LastCash; // 0x6c0(0x04)
	None bHasReceivedStartingCash; // 0x6c4(0x01)
	None TotalCashEarned; // 0x6c8(0x04)
	None LastCashEarned; // 0x6cc(0x04)
	None OnCashChanged; // 0x6d0(0x10)
	None OnCashEarnedChanged; // 0x6e0(0x10)
	None OnCashChangeEvent; // 0x6f0(0x10)
	None CashChangeList; // 0x700(0x90)
	None OnItemPickedUpBySelf; // 0x790(0x10)
	None OnItemPickedUpByTeam; // 0x7a0(0x10)
	None bShouldRestoreInventory; // 0x7b0(0x01)
	None PlayerStateAssistant; // 0x7c8(0x08)
	None ModsToRestoreOnReactivated; // 0x7d0(0x10)
	None OnPlayerModCharge; // 0x7e0(0x10)
	None OnPlayerModActivationChange; // 0x7f0(0x10)
	None OnModAddedDel; // 0x800(0x10)
	None OnModRemovedDel; // 0x828(0x10)
	None Specialties; // 0x850(0x10)
	None OnJobChanged; // 0x860(0x10)
	None JobItem; // 0x870(0x08)
	None JobMasteryXpLevel; // 0x878(0x04)
	None OnJobLoadFinishedDel; // 0x880(0x10)
	None OnJobMasteryXpLevelChanged; // 0x8a8(0x10)
	None SkinItem; // 0x8c0(0x08)
	None OnSkinChanged; // 0x8c8(0x10)
	None LoadoutClass; // 0x8d8(0x08)
	None ItemsDroppedOnDeath; // 0x8e0(0x10)
	None Gender; // 0x908(0x02)
	None LocalGender; // 0x90a(0x02)
	None SkinTagContainer; // 0x910(0x20)
	None bStale; // 0x948(0x01)
	None AllyWidgetPoolName; // 0x950(0x10)
	None OnShopItemPurchased; // 0x960(0x10)
	None OnShopItemRefunded; // 0x970(0x10)
	None OnShopItemActive; // 0x980(0x10)
	None OnShopItemInactive; // 0x990(0x10)
	None OnPersistentPlayerDataChanged; // 0x9a0(0x10)
	None bPollInProgress; // 0x9d0(0x01)
	None bHasVoted; // 0x9d1(0x01)
	None CurrentPollType; // 0x9d8(0x08)
	None CachedPollData; // 0x9e0(0x10)
	None bCachedLocallyViewed; // 0x9f0(0x01)
	None OnCharacterLocalViewChange; // 0x9f8(0x10)
	None StimulatingObjects; // 0xa08(0x10)
	None RevealManager; // 0xa18(0x08)
	None OnActivityEventTriggered; // 0xa20(0x10)
	None OnCombatActivityEventTriggered; // 0xa30(0x10)
	None OnTargetedActivityEventTriggered; // 0xa40(0x10)
	None OnRevealEventTriggered; // 0xa50(0x10)
	None OnWeaponReloaded; // 0xa60(0x10)
	None OnWeaponFiredPreDamage; // 0xa70(0x10)
	None OnWeaponFiredPostDamage; // 0xa80(0x10)
	None bBackfill; // 0xa90(0x01)
	None SavedHumanPlayerId; // 0xa94(0x04)
	None ActionTimestampMap; // 0xa98(0x50)
	None LastDamagedByPlayerTimestampMap; // 0xae8(0x50)
	None CachedItemValueMap; // 0xb38(0x50)
	None ActivityBehaviorCache; // 0xb88(0x50)
	None VehicleOwner; // 0xbd8(0x08)
	None OnCharacterFoundationPossessionChangedDel; // 0xbe0(0x10)
	None ResourceManagerComponent; // 0x220(0x08)
	None LastOwnerPlayerId; // 0x228(0x10)
	None PlayerStateOwner; // 0x238(0x08)
	None PlayerModManager; // 0x240(0x08)
	None OnStartStimulatingPlayer; // 0xb0(0x10)
	None OnStopStimulatingPlayer; // 0xc0(0x10)
	None StimulateTarget; // 0xd0(0x01)
	None bRegisterOnBeginPlay; // 0xd1(0x01)
	None PollAudience; // 0x28(0x01)
	None PollTitle; // 0x30(0x18)
	None PollSuccessfulMessage; // 0x48(0x18)
	None PollUnsuccessfulMessage; // 0x60(0x18)
	None AffirmativeOption; // 0x78(0x18)
	None NegativeOption; // 0x90(0x18)
	None AffirmativeOptionVoteCastMessage; // 0xa8(0x18)
	None NegativeOptionVoteCastMessage; // 0xc0(0x18)
	None PollLengthInSeconds; // 0xd8(0x04)
	None OnPowerUpPickedUp; // 0x220(0x10)
	None CollisionBox; // 0x230(0x08)
	None OverlapSphere; // 0x238(0x08)
	None ProximityComponent; // 0x240(0x08)
	None OwningTeam; // 0x248(0x04)
	None bDestroyOnProximity; // 0x24c(0x01)
	None DestroyDelay; // 0x250(0x04)
	None ReequipWeaponTypesQuery; // 0x258(0x48)
	None bDropLeftovers; // 0x2a0(0x01)
	None EquipmentContainer; // 0x2d8(0x228)
	None WeaponComponent; // 0x500(0x08)
	None WeaponComponentEquipmentId; // 0x508(0x04)
	None CachedWeaponAsset; // 0x510(0x08)
	None WeaponComponentType; // 0x518(0x01)
	None ApparelObjectsToListenTo; // 0x520(0x10)
	None SkinTagContainer; // 0x530(0x20)
	None HorizontalThrowSpeed; // 0x568(0x04)
	None MaxSpeed; // 0x56c(0x04)
	None bModifyInitialSpeedWithPitch; // 0x570(0x01)
	None bDeadOrDownedDrop; // 0x571(0x01)
	None bCanBeIntercepted; // 0x572(0x01)
	None CollisionComponent0; // 0x578(0x08)
	None ProjectileMovementComponent; // 0x580(0x08)
	None ProjectileHit; // 0x588(0x88)
	None LifeSpanAfterDeactivate; // 0x610(0x04)
	None bShouldHideOnDeactivate; // 0x614(0x01)
	None bStopped; // 0x615(0x01)
	None NumBounces; // 0x618(0x04)
	None NumPenetrations; // 0x61c(0x04)
	None AdditionalPredictionTimeLenience; // 0x630(0x04)
	None AdditionalPredictionArcTime; // 0x634(0x04)
	None HitValidationLenience; // 0x638(0x04)
	None bValidateHitsWithCollision; // 0x63c(0x01)
	None StoppingHit; // 0x640(0x88)
	None bAttachWhenStopped; // 0x6c8(0x01)
	None bDetachWhenBumped; // 0x6c9(0x01)
	None bSimulatePhysicsWhenStopped; // 0x6ca(0x01)
	None bFreezeProjectileOnStop; // 0x6cb(0x01)
	None bDeflectOffShield; // 0x6cc(0x01)
	None bDealPointDamageAfterDetach; // 0x6e0(0x01)
	None DebugDrawLifetime; // 0x6e4(0x04)
	None bCreateClusterSegmentsOnStopped; // 0x6e8(0x01)
	None bCreateClusterSegmentsOnExplode; // 0x6e9(0x01)
	None OnWeaponAssetSet; // 0x6f0(0x10)
	None WeaponAsset; // 0x710(0x08)
	None ParentWeaponAsset; // 0x718(0x08)
	None DamageWeaponAssetOverride; // 0x720(0x08)
	None SpawningWeapon; // 0x728(0x08)
	None TimeCooked; // 0x730(0x04)
	None SpawnLocation; // 0x734(0x0c)
	None SpawnRotation; // 0x740(0x0c)
	None PrimitiveCollisionComponent; // 0x750(0x08)
	None LocationLastFrame; // 0x758(0x0c)
	None bActive; // 0x764(0x01)
	None DeactivateExplosionType; // 0x765(0x01)
	None bDeactivateInWater; // 0x766(0x01)
	None OnProjectileDeactivated; // 0x768(0x10)
	None bCanBeKilled; // 0x77c(0x01)
	None MaxHealth; // 0x780(0x04)
	None bSetInstigatorToKiller; // 0x784(0x01)
	None CurrentHealth; // 0x788(0x04)
	None LifeSpanAfterKilled; // 0x78c(0x04)
	None bExplodeOnKilled; // 0x790(0x01)
	None FriendlyKiller; // 0x798(0x08)
	None bProjectileKillPending; // 0x7a0(0x01)
	None OnProjectileKilled; // 0x7a8(0x10)
	None bAffectsFriendly; // 0x7b8(0x01)
	None bAllowFriendlyPlayersToDamage; // 0x7b9(0x01)
	None bPenetratesFriendly; // 0x7ba(0x01)
	None bAffectsEnemy; // 0x7bb(0x01)
	None bPenetratesEnemy; // 0x7bc(0x01)
	None bHasPlayedExplosion; // 0x7bd(0x01)
	None OnPlayExplosion; // 0x7c0(0x10)
	None DefaultSpang; // 0x7d0(0x08)
	None SurfaceSpangs; // 0x7d8(0x50)
	None SpinsPerSecond; // 0x828(0x04)
	None SpeedToReachSpinsPerSecond; // 0x82c(0x04)
	None SpinAxis; // 0x830(0x0c)
	None bSpinAfterDetaching; // 0x83c(0x01)
	None bCanBreakDestructibles; // 0x83d(0x01)
	None InteractionBlockerManager; // 0x840(0x08)
	None InteractableComponent; // 0x848(0x08)
	None bCanReclaim; // 0x850(0x01)
	None bDestroyOnReclaim; // 0x851(0x01)
	None InteractionDistanceOffset; // 0x854(0x04)
	None ReclaimPermissions; // 0x858(0x01)
	None bShouldRestoreWeaponAssetOnReclaim; // 0x859(0x01)
	None ReclaimTime; // 0x85c(0x04)
	None ReclaimInteractionType; // 0x860(0x08)
	None Reclaimer; // 0x868(0x08)
	None bReclaimPending; // 0x870(0x01)
	None ReclaimStock; // 0x874(0x04)
	None OnReclaim; // 0x878(0x10)
	None bShouldModifyVisibilityChecks; // 0x888(0x01)
	None VisibilityDistance; // 0x88c(0x04)
	None bShowOnHud; // 0x890(0x01)
	None WidgetIcon; // 0x898(0x08)
	None MinimapDisplayWidget; // 0x8a0(0x28)
	None FullmapDisplayWidget; // 0x8c8(0x28)
	None OverlayDisplayWidget; // 0x8f0(0x28)
	None WidgetIconAudience; // 0x918(0x01)
	None OverlayIconAudience; // 0x919(0x01)
	None WidgetInfos; // 0x920(0x10)
	None OriginalOwnerId; // 0x930(0x04)
	None ItemTags; // 0x938(0x10)
	None OverlayWarningDisplayWidget; // 0x960(0x28)
	None OnGrenadeProximity; // 0x988(0x10)
	None MarkerTeamVisibility; // 0x998(0x01)
	None bTakeOverOnStopped; // 0x999(0x01)
	None RepFuseTimeRemaining; // 0x99c(0x04)
	None CurrentFuseTime; // 0x9a4(0x04)
	None FuseTimerHandle; // 0x9a8(0x08)
	None FuseCookPauseTimerHandle; // 0x9b0(0x08)
	None ProximityWarningDelay; // 0x9b8(0x04)
	None bSetFuseOnBounce; // 0x9c8(0x01)
	None BounceFuseTime; // 0x9cc(0x04)
	None bSetFuseOnStopped; // 0x9d0(0x01)
	None StoppedFuseTime; // 0x9d4(0x04)
	None bExplodesOnStopped; // 0x9d8(0x01)
	None DetectionSphere; // 0x9e0(0x08)
	None bGeneratesTouchSenseEvents; // 0x9e9(0x01)
	None StimuliSourceComponent; // 0x9f0(0x08)
	None ProjectileClusterComponent; // 0x9f8(0x08)
	None bInflictDamageOnExplosion; // 0xa00(0x01)
	None ClusterExplosionEffect; // 0xa08(0x08)
	None ClusterExplosionDecalMaterial; // 0xa10(0x08)
	None ClusterDecalScale; // 0xa18(0x0c)
	None StopMesh; // 0xa28(0x08)
	None CollisionComponent; // 0x260(0x08)
	None ProjectileMovementComponent; // 0x268(0x08)
	None GroundSpreadVectors; // 0x28(0x10)
	None TimeToStartSpread; // 0xa00(0x04)
	None TickSpreadFrequency; // 0xa04(0x04)
	None TickSpreadTimerHandle; // 0xa08(0x08)
	None SpreadRuleClass; // 0xa10(0x08)
	None NormalZMin; // 0xa18(0x04)
	None SpreadList; // 0xa20(0x120)
	None MaxSpreadDistance; // 0xb40(0x04)
	None PreventCollisionBeneathSpread; // 0xb44(0x01)
	None SpreadTimerHandle; // 0xb48(0x08)
	None QueuedTransforms; // 0xb50(0x10)
	None SpreadStartLocations; // 0xb60(0x10)
	None SpreadProjectileCount; // 0xb70(0x04)
	None SpreadProjectiles; // 0xb78(0x10)
	None SpreadProjectileToSpawn; // 0xb88(0x08)
	None SpreadProjectileRotationMin; // 0xb90(0x04)
	None SpreadProjectileRotationMax; // 0xb94(0x04)
	None SpreadProjectileHeight; // 0xb98(0x04)
	None ChildSpreadGrenades; // 0xba0(0x10)
	None ParentSpreadGrenade; // 0xbb0(0x08)
	None MaxHealthPerTransform; // 0xbb8(0x04)
	None DamageTypeImmunities; // 0xbc0(0x10)
	None SphereCollisionRadius; // 0xbd0(0x04)
	None bExtinguishable; // 0xbd4(0x01)
	None OverlapClassFilter; // 0xbd8(0x08)
	None OverlapObjectTypes; // 0xbe0(0x10)
	None ToDestroyOnOverlap; // 0xbf0(0x10)
	None bUseDestroyOnOverlapList; // 0xc00(0x01)
	None LingerDuration; // 0xc18(0x04)
	None AffectedActors; // 0xc20(0x10)
	None LingeringAffectedActors; // 0xc30(0x50)
	None TickDamageAmount; // 0xc84(0x04)
	None TickDamageClass; // 0xc88(0x08)
	None TickDamageFrequency; // 0xc90(0x04)
	None KSNavModifierComponent; // 0xc98(0x08)
	None ParticleSystemComponents; // 0xca0(0x10)
	None DecalComponents; // 0xcb0(0x10)
	None MeshComponents; // 0xcc0(0x10)
	None ParticleSystemTemplate; // 0xcd0(0x08)
	None TranslucencySortPriority; // 0xcd8(0x04)
	None PreDeactivateTime; // 0xcdc(0x04)
	None ParticleOcclusionRadius; // 0xce0(0x04)
	None DecalMaterial; // 0xce8(0x08)
	None DecalDepth; // 0xcf0(0x04)
	None MeshAsset; // 0xcf8(0x08)
	None FriendlyMaterial; // 0xd00(0x08)
	None EnemyMaterial; // 0xd08(0x08)
	None MeshOutlineThickness; // 0xd10(0x04)
	None SkeletalAnimClass; // 0xd18(0x08)
	None MeshTransform; // 0xd20(0x30)
	None bAutomaticPickup; // 0x950(0x01)
	None ProjectileDamageType; // 0x950(0x08)
	None HitActors; // 0x958(0x10)
	None ProjectileEdgeTolerance; // 0x950(0x04)
	None TraceChannel; // 0x954(0x01)
	None ObjectTypes; // 0x958(0x10)
	None bDrawDebugLine; // 0x968(0x01)
	None AlreadyHitActors; // 0x970(0x10)
	None bHasHitWall; // 0x980(0x01)
	None bHasHitEnemy; // 0x981(0x01)
	None ProximityComponent; // 0x9f8(0x08)
	None bInitializeProximityCheckingOnStopped; // 0xa00(0x01)
	None CanDetonateNow; // 0xa10(0x01)
	None bCanDetonateBeforeStopping; // 0xa11(0x01)
	None DetectionMod; // 0xa18(0x08)
	None bRequiresMatchingDetonator; // 0xa28(0x01)
	None RelativeInteractionPoint; // 0xa2c(0x0c)
	None DetectedEnemy; // 0xa39(0x01)
	None TargetCharacter; // 0x950(0x08)
	None ReviveTime; // 0x968(0x04)
	None TargetCharacterMod; // 0x970(0x08)
	None OnSucceed; // 0x978(0x10)
	None OnFailed; // 0x988(0x10)
	None ProjectileTarget; // 0x970(0x0c)
	None ProjectileClusterSpreadType; // 0xbc(0x01)
	None ClusterSegmentSpawnOffset; // 0xc0(0x0c)
	None bLinkSpreadGrenades; // 0xcc(0x01)
	None bIgnoreZAxisForClusterDirection; // 0xcd(0x01)
	None bAlwaysUseInitialClusterDirection; // 0xce(0x01)
	None RandomMinPitch; // 0xd0(0x04)
	None RandomMaxPitch; // 0xd4(0x04)
	None RandomMinYaw; // 0xd8(0x04)
	None RandomMaxYaw; // 0xdc(0x04)
	None ClusterSegmentDefinitions; // 0xe0(0x10)
	None ClusterSegments; // 0xf0(0x10)
	None OnOwnedSegmentKilled; // 0x100(0x10)
	None OnProjectilePenetrated; // 0x1d0(0x10)
	None PreStopVelocity; // 0x1e0(0x0c)
	None LifetimeUponStop; // 0x1ec(0x04)
	None ProjectileVelocityDeflectDampener; // 0x1f0(0x04)
	None ProjectileSimFrequency; // 0x148(0x04)
	None MaxSimTime; // 0x14c(0x04)
	None StaticMesh; // 0x220(0x08)
	None CollisionAkEvent; // 0x228(0x08)
	None ImpactSoundThreshold; // 0x230(0x04)
	None OnProximityInfoUpdated; // 0xb0(0x10)
	None ProximityFilter; // 0xc0(0x28)
	None MaxTimeBetweenUpdates; // 0xe8(0x04)
	None LOSChannel; // 0xec(0x01)
	None ActorProximityInfoMap; // 0xf0(0x50)
	None RegisteredShape; // 0x150(0x08)
	None bProximityCheckingEnabled; // 0x158(0x01)
	None GoodBehaviorConfig; // 0x30(0x10)
	None BadBehaviorConfig; // 0x40(0x10)
	None EndMatchPunishConfig; // 0x50(0x10)
	None PunishmentConfigClass; // 0xb0(0x08)
	None PunishmentConfig; // 0xb8(0x08)
	None UseDeserterPenalty; // 0xc0(0x01)
	None PlayerPunishmentTrackers; // 0xc8(0x50)
	None QueueConfigRow; // 0x28(0x10)
	None MapListBaseConfigRow; // 0x88(0x10)
	None MapBaseConfigRow; // 0xe8(0x10)
	None BonusProgressionBaseConfigRow; // 0x148(0x10)
	None SurrenderBaseConfigRow; // 0x1a8(0x10)
	None QueueGroupBaseConfigRow; // 0x208(0x10)
	None RankedProgressionBaseConfigRow; // 0x268(0x10)
	None LimitedTimeEventBaseConfigRow; // 0x2c8(0x10)
	None RankedSeasonBaseConfigRow; // 0x328(0x10)
	None ActiveLimitedTimeEventNames; // 0x388(0x10)
	None ActiveRankedSeasonKey; // 0x398(0x10)
	None QueueSectionSortConfigRow; // 0x3a8(0x10)
	None QueuePlatformFilter; // 0x3b8(0x10)
	None OverriddenAudioEventName; // 0x2b8(0x08)
	None QuipAudioEvent; // 0x2c0(0x28)
	None VoicelineAudience; // 0x2e0(0x01)
	None QuipCooldownGroup; // 0x2e4(0x04)
	None QuipCooldownDuration; // 0x2e8(0x04)
	None CachedOwner; // 0xb0(0x08)
	None bThrottleQuipsAndComms; // 0xb8(0x01)
	None QuipsAndCommsAllowedBeforeThrottle; // 0xbc(0x04)
	None QuipAndCommThrottleDetectionPeriod; // 0xc0(0x04)
	None QuipAndCommThrottleCooldown; // 0xc4(0x04)
	None CurrentQuipsAndCommsBeforeThrottle; // 0xc8(0x04)
	None bQuipsAndCommsCurrentlyThrottled; // 0xcc(0x01)
	None ReequipWeaponsTypeQuery; // 0x228(0x48)
	None ReloadWeaponsTypeQuery; // 0x270(0x48)
	None AbilityChargeToRestore; // 0x2b8(0x04)
	None HealthToRestore; // 0x2bc(0x04)
	None bRefundAllShopPurchases; // 0x2c0(0x01)
	None InteractTime; // 0x2c4(0x04)
	None InteractionType; // 0x2c8(0x08)
	None InteractionMode; // 0x2d0(0x08)
	None bCanInteractFromBehind; // 0x2d8(0x01)
	None bForceLOS; // 0x2d9(0x01)
	None InteractPromptText; // 0x2e0(0x18)
	None CurrentZoneUsers; // 0x2f8(0x50)
	None InteractionBlockerManager; // 0x348(0x08)
	None InteractableComponent; // 0x350(0x08)
	None PositionHistoryComponent; // 0xcd0(0x08)
	None OutOfBoundsManager; // 0xcd8(0x08)
	None OnOutOfBoundsBeginDel; // 0xce0(0x10)
	None OnOutOfBoundsWarningEndDel; // 0xcf0(0x10)
	None OnOutOfBoundsEndDel; // 0xd00(0x10)
	None OutOfBoundsInfo; // 0xd10(0x08)
	None bLocalOutOfBounds; // 0xd18(0x01)
	None OnStartVehicleDestruction; // 0xd28(0x10)
	None OnEndVehicleDestruction; // 0xd38(0x10)
	None SpringArm; // 0xd48(0x08)
	None MainCamera; // 0xd50(0x08)
	None CameraBlendTime; // 0xd58(0x04)
	None CameraXTurnRate; // 0xd5c(0x04)
	None CameraYTurnRate; // 0xd60(0x04)
	None CameraMinHorizontalAngle; // 0xd64(0x04)
	None CameraMaxHorizontalAngle; // 0xd68(0x04)
	None CameraMinVerticalAngle; // 0xd6c(0x04)
	None CameraMaxVerticalAngle; // 0xd70(0x04)
	None DefaultPPE; // 0xd88(0x50)
	None bDisplayDefaultPPE; // 0xdd8(0x01)
	None bDisplayFadeInOnStart; // 0xdd9(0x01)
	None FadeInDuration; // 0xddc(0x04)
	None DestroyedMesh; // 0xde0(0x08)
	None MaxHealth; // 0xde8(0x04)
	None bShouldDisplayFriendlyOutline; // 0xdec(0x01)
	None DeathInfo; // 0xdf0(0x20)
	None InstantDeathDamageType; // 0xe10(0x08)
	None LastCharacterToDamageMe; // 0xe18(0x08)
	None bIsSelfDestructing; // 0xe21(0x01)
	None KilledDamageTypeClass; // 0xe28(0x08)
	None OnVehicleDeathStateChangedDel; // 0xe30(0x10)
	None OnAbilityOnePressed; // 0xe40(0x10)
	None OnAbilityOneReleased; // 0xe50(0x10)
	None OnAbilityTwoPressed; // 0xe60(0x10)
	None OnAbilityTwoReleased; // 0xe70(0x10)
	None OnAbilityThreePressed; // 0xe80(0x10)
	None OnAbilityThreeReleased; // 0xe90(0x10)
	None VehicleDisplayName; // 0xea0(0x18)
	None bReportsDamage; // 0xeb8(0x01)
	None HudIconPath; // 0xec0(0x18)
	None bHidesWeaponReticule; // 0xed8(0x01)
	None OnVehicleHoverChange; // 0xee0(0x10)
	None bDurationHasEnded; // 0xef0(0x01)
	None OnResourceAddedDel; // 0xb0(0x10)
	None OnResourceRemovedDel; // 0xc0(0x10)
	None OnResourceValueChangedDel; // 0xd0(0x10)
	None OnResourceFilledDel; // 0xe0(0x10)
	None OnResourceDepletedDel; // 0xf0(0x10)
	None StartingResources; // 0x100(0x10)
	None ActiveResourceInfoContainer; // 0x110(0x120)
	None OnServerRevealAdded; // 0x220(0x10)
	None FriendlyColor; // 0x230(0x10)
	None EnemyColor; // 0x240(0x10)
	None NeutralColor; // 0x250(0x10)
	None FriendlyObjectiveColor; // 0x260(0x10)
	None EnemyObjectiveColor; // 0x270(0x10)
	None NeutralObjectiveColor; // 0x280(0x10)
	None GameStateRef; // 0x290(0x08)
	None ActiveRevealInfoContainer; // 0x298(0x120)
	None LocalActiveRevealInfos; // 0x3b8(0x10)
	None PlayerDamageInfo; // 0xa0(0x10)
	None RocketRotationCatchUpRadians; // 0x4c0(0x04)
	None CameraInitialLockoutTime; // 0x4c4(0x04)
	None SpringArm; // 0x4d0(0x08)
	None MainCamera; // 0x4d8(0x08)
	None ExplodeWeaponAsset; // 0x4e0(0x08)
	None FlightDuration; // 0x4e8(0x04)
	None OnFlightDurationTimerTick; // 0x4f0(0x10)
	None OnFlightDurationTimerActive; // 0x500(0x10)
	None OnFlightDurationTimerComplete; // 0x510(0x10)
	None FlightDurationTimer; // 0x520(0x08)
	None MaxSpeed; // 0x680(0x04)
	None RocketAcceleration; // 0x684(0x04)
	None RocketIgniteTime; // 0x688(0x04)
	None RocketRotationCatchUpDegrees; // 0x68c(0x04)
	None bSmoothRotation; // 0x690(0x01)
	None OnIgnitionKickoff; // 0x698(0x10)
	None OnRocketStop; // 0x6a8(0x10)
	None SideNum; // 0x228(0x04)
	None SkyDiverRelevanceRules; // 0x22c(0x01)
	None SkyDiverLimit; // 0x22d(0x01)
	None CardinalSize; // 0x38(0x04)
	None CornerRadius; // 0x3c(0x04)
	None ValidityZone; // 0x220(0x08)
	None ZoneDamageAsset; // 0x228(0x08)
	None StartingRadius; // 0x230(0x04)
	None OldParams; // 0x234(0x10)
	None NewParams; // 0x244(0x10)
	None ZoneLerpVelocity; // 0x254(0x04)
	None ZoneLerpAlpha; // 0x258(0x04)
	None CurrentCenter; // 0x25c(0x0c)
	None CurrentRadius; // 0x268(0x04)
	None ZoneActive; // 0x26c(0x01)
	None IsShrinking; // 0x26d(0x01)
	None Sound; // 0x278(0x08)
	None SoundStart; // 0x280(0x08)
	None SoundStop; // 0x288(0x08)
	None OnPhaseCompleted; // 0x28(0x10)
	None OnFailedToStart; // 0x38(0x10)
	None MatchPhase; // 0x5c(0x14)
	None SideNum; // 0x238(0x04)
	None OnFinishedSublevelLoadEvent; // 0x220(0x10)
	None SeasonalEventNamesAndSublevels; // 0x230(0x50)
	None SceneRootComponent; // 0x220(0x08)
	None OnSpawnLocationCleared; // 0x238(0x10)
	None bShouldSpawnAtSetup; // 0x220(0x01)
	None bShouldSpawnPeriodically; // 0x221(0x01)
	None SpawnIntervalSeconds; // 0x224(0x04)
	None SeasonalSpawningInfos; // 0x2b0(0x50)
	None OnShieldDamagedDel; // 0x220(0x10)
	None bShieldEnabled; // 0x248(0x01)
	None Health; // 0x24c(0x04)
	None StartingCash; // 0xb8(0x04)
	None StartingCashRoundBonus; // 0xbc(0x01)
	None bResetShopsOnTeamSidesFlipped; // 0xbd(0x01)
	None TypesToNotResetOnTeamSidesFlipped; // 0xc0(0x50)
	None bResetShopsOnRoundPrepare; // 0x110(0x01)
	None TypesToNotResetOnRoundPrepare; // 0x118(0x50)
	None bLockUndoEachRound; // 0x168(0x01)
	None bAllowShopAccessWhileDead; // 0x169(0x01)
	None bDisableShopOnClose; // 0x16a(0x01)
	None bDisableShopOnSignificantAction; // 0x16b(0x01)
	None bAllowUnmasteredWeapons; // 0x16c(0x01)
	None bCircleGameShopEnabled; // 0x16d(0x01)
	None ShopClass; // 0x170(0x08)
	None PlayerShops; // 0x178(0x50)
	None ShopPricing; // 0x1c8(0x108)
	None PermanentItems; // 0x2d0(0x50)
	None StartActiveItems; // 0x320(0x50)
	None OneTimePurchaseItems; // 0x370(0x50)
	None ExhaustibleItems; // 0x3c0(0x50)
	None RoundItems; // 0x410(0x50)
	None PrerequisiteMap; // 0x460(0x50)
	None RestrictionMap; // 0x4b0(0x50)
	None MaxCategoryPurchases; // 0x500(0x1c)
	None GlobalGambitList; // 0x520(0x10)
	None GlobalPerkList; // 0x560(0x80)
	None ShopOptions; // 0x5e0(0x07)
	None MaximumStimulusDistance; // 0xd8(0x04)
	None MaximumStimulusAngle; // 0xdc(0x04)
	None OffsetFromOwner; // 0xe0(0x0c)
	None bCheckForOffsetBlocks; // 0xec(0x01)
	None RogueSelectCharacterClass; // 0x260(0x28)
	None SkinSpecificWeaponAttachments; // 0x288(0x10)
	None StarterSkin; // 0x298(0x01)
	None SkinFlatImage; // 0x2a0(0x28)
	None Job; // 0x2c8(0x28)
	None bOverrideJobLobbyProps; // 0x2f0(0x01)
	None LobbyPropsToPreload; // 0x2f8(0x10)
	None bSmoothTranslation; // 0x208(0x01)
	None bSmoothRotation; // 0x209(0x01)
	None TranslationOffset; // 0x20c(0x0c)
	None RotationOffset; // 0x220(0x10)
	None CharacterOwner; // 0x230(0x08)
	None RuleName; // 0x28(0x08)
	None OverridePropertyNames; // 0x30(0x10)
	None OuterRadius; // 0x40(0x04)
	None InnerRadius; // 0x44(0x04)
	None RecordDuration; // 0x48(0x04)
	None bScoreDecaysWithTime; // 0x4c(0x01)
	None bConsidersFriendlies; // 0x4d(0x01)
	None bConsidersEnemies; // 0x4e(0x01)
	None bConsidersSelf; // 0x4f(0x01)
	None bConsiderFriendlies; // 0x48(0x01)
	None bConsiderEnemies; // 0x49(0x01)
	None bUseAverageScore; // 0x4a(0x01)
	None NullTeamScore; // 0x40(0x04)
	None OccupiedByPawnScore; // 0x40(0x04)
	None RequiresAdjustmentScore; // 0x44(0x04)
	None GameScore; // 0x484(0x04)
	None FailureReason; // 0x488(0x08)
	None BaseRoot; // 0xb0(0x28)
	None SideRoot; // 0xd8(0x28)
	None FlipRoot; // 0x100(0x28)
	None GameRoot; // 0x128(0x28)
	None PlayerStarts; // 0x150(0x10)
	None FriendlyName; // 0x160(0x08)
	None bCanEverFlip; // 0x178(0x01)
	None InvalidFlipPercent; // 0x17c(0x04)
	None bFlipped; // 0x180(0x01)
	None DefaultBranch; // 0x40(0x28)
	None bDoesHandleFailure; // 0x68(0x01)
	None FailureBranch; // 0x70(0x28)
	None RequiredUnlockLevel; // 0x250(0x04)
	None DynamicPoseImage; // 0x258(0x28)
	None BannerIcon; // 0x280(0x28)
	None LeftBannerIcon; // 0x2a8(0x28)
	None RightBannerIcon; // 0x2d0(0x28)
	None SmallIcon; // 0x2f8(0x28)
	None AvailableKillstreaks; // 0x320(0x10)
	None AvailableAbilities; // 0x330(0x10)
	None AvailableGadgets; // 0x340(0x10)
	None AvailablePistols; // 0x350(0x10)
	None AvailableWeaponAttachments; // 0x360(0x10)
	None RoleType; // 0x370(0x01)
	None AutoEquippedMods; // 0x378(0x10)
	None PerkSlotOneCategory; // 0x388(0x28)
	None PerkSlotTwoCategory; // 0x3b0(0x28)
	None StatTrackingActivity; // 0x320(0x28)
	None SprayTraceChannel; // 0x2e0(0x01)
	None SprayTraceDistance; // 0x2e4(0x04)
	None CachedAim; // 0x2e8(0x50)
	None CachedSprayLocation; // 0x338(0x0c)
	None CachedSprayRotation; // 0x344(0x0c)
	None CachedSprayTarget; // 0x350(0x08)
	None CachedSprayNormal; // 0x358(0x0c)
	None CachedSprayRotationByNormal; // 0x364(0x0c)
	None bEnableSmoothLengthReturn; // 0x290(0x01)
	None SmoothLengthReturnSpeed; // 0x294(0x04)
	None SmoothingCurve; // 0x298(0x08)
	None OffsetCurve; // 0x2a0(0x08)
	None bRelativeTargetOffset; // 0x2a8(0x01)
	None CharacterOwner; // 0x2b0(0x08)
	None StatsByType; // 0x28(0x50)
	None Icon; // 0x28(0x28)
	None DisplayName; // 0x50(0x18)
	None ShouldRepresentValueAsFloat; // 0x68(0x01)
	None StoreVendorGroupId; // 0x290(0x04)
	None StoreVendorsLoaded; // 0x294(0x01)
	None OnStoreItemNewStatusChange; // 0x298(0x10)
	None ActiveStoreItems; // 0x2a8(0x50)
	None StoreHasUnseenItems; // 0x300(0x01)
	None EquipPointDefinitions; // 0x28(0x10)
	None bIsClosed; // 0x330(0x01)
	None CurrentDistance; // 0x238(0x04)
	None PlayerTeamKillTracker; // 0xa0(0x10)
	None TeamKillRequirement; // 0xb0(0x04)
	None r_TeamNum; // 0x220(0x04)
	None bTeamEliminated; // 0x224(0x01)
	None bTeamEliminatedOrDowned; // 0x225(0x01)
	None OnTeamEliminated; // 0x228(0x10)
	None OnTeamEliminatedOrDowned; // 0x238(0x10)
	None OnTeamMemberEliminatedDel; // 0x248(0x10)
	None OnTeamMemberDownedDel; // 0x258(0x10)
	None AllMembers; // 0x280(0x10)
	None PlayerMembers; // 0x290(0x10)
	None OnMemberAdded; // 0x2b0(0x10)
	None OnMemberRemoved; // 0x2d8(0x10)
	None RespawnConfig; // 0x300(0x18)
	None Respawns; // 0x318(0x04)
	None OnRespawnsChangedDel; // 0x320(0x10)
	None OnRespawnQueueChangedDel; // 0x330(0x10)
	None OnRespawnConfigChangedDel; // 0x340(0x10)
	None RespawnQueue; // 0x350(0x10)
	None PersistentRespawnQueue; // 0x360(0x10)
	None Score; // 0x370(0x04)
	None IntraScore; // 0x374(0x04)
	None IntraScoreGoal; // 0x378(0x04)
	None RoundWins; // 0x37c(0x04)
	None RoundLosses; // 0x380(0x04)
	None OnScoreChanged; // 0x388(0x10)
	None OnIntraScoreChanged; // 0x398(0x10)
	None OnIntraScoreGoalChanged; // 0x3a8(0x10)
	None OnObjectiveRoleChanged; // 0x3b8(0x10)
	None TeamType; // 0x3c8(0x01)
	None OnPingAdded; // 0x3d0(0x10)
	None OnPingRemoved; // 0x3e0(0x10)
	None OnPingChanged; // 0x3f0(0x10)
	None JobSelectionClass; // 0x400(0x08)
	None JobSelectionComponent; // 0x408(0x08)
	None OnJobSelectionComponentReady; // 0x410(0x10)
	None TotalKills; // 0x468(0x04)
	None TotalDeaths; // 0x46c(0x04)
	None TotalAssists; // 0x470(0x04)
	None SideNum; // 0x474(0x04)
	None LocalSideNum; // 0x478(0x04)
	None PersistentTeamMembers; // 0x480(0x10)
	None OnPersistentTeamMemberAdded; // 0x490(0x10)
	None OnPersistentTeamMemberRemoved; // 0x4b8(0x10)
	None OnTeamCanSurrenderChanged; // 0x4e0(0x10)
	None bTeamCanProposeSurrender; // 0x4f0(0x01)
	None SkinMapReplicator; // 0x518(0x1d8)
	None ControlScore; // 0x6f0(0x04)
	None CategoryDisplayNameSingular; // 0x250(0x18)
	None CategoryTag; // 0x268(0x08)
	None SoftSymbolIcon; // 0x270(0x28)
	None SoftMasteryIcon; // 0x298(0x28)
	None SoftVerticalSplash; // 0x2c0(0x28)
	None SoftHorizontalSplash; // 0x2e8(0x28)
	None ShowsMasteryUI; // 0x310(0x01)
	None ShowsWeaponUnlockUI; // 0x311(0x01)
	None ShowsRelatedJobsUI; // 0x312(0x01)
	None ThreatUpdateIndex; // 0xb0(0x04)
	None CurrentThreat; // 0xb4(0x04)
	None ThreatBucketValue; // 0xb8(0x04)
	None OwningThreat; // 0xc0(0x08)
	None OwnedThreats; // 0xc8(0x10)
	None OwningCharacter; // 0xd8(0x08)
	None LocalPlayerCharacter; // 0xe0(0x08)
	None SelfThreatValue; // 0xf8(0x04)
	None AllyThreatValue; // 0xfc(0x04)
	None DefaultThreatValue; // 0x100(0x04)
	None BucketValues; // 0x108(0x10)
	None bUseFocused; // 0x118(0x01)
	None FocusedValue; // 0x11c(0x04)
	None FocusedWeight; // 0x120(0x04)
	None FocusedInnerAngle; // 0x124(0x04)
	None FocusedOuterAngle; // 0x12c(0x04)
	None bUseFocusTarget; // 0x134(0x01)
	None FocusTargetValue; // 0x138(0x04)
	None FocusTargetWeight; // 0x13c(0x04)
	None FocusTargetInnerAngle; // 0x140(0x04)
	None FocusTargetOuterAngle; // 0x148(0x04)
	None bUseProximity; // 0x150(0x01)
	None ProximityValue; // 0x154(0x04)
	None ProximityWeight; // 0x158(0x04)
	None ProximityInnerDistance; // 0x15c(0x04)
	None ProximityOuterDistance; // 0x160(0x04)
	None bUseBehind; // 0x164(0x01)
	None BehindValue; // 0x168(0x04)
	None BehindWeight; // 0x16c(0x04)
	None BehindInnerAngle; // 0x170(0x04)
	None BehindOuterAngle; // 0x178(0x04)
	None bUseEffectiveRange; // 0x180(0x01)
	None EffectiveRangeValue; // 0x184(0x04)
	None EffectiveRangeWeight; // 0x188(0x04)
	None TimerActive; // 0xb0(0x10)
	None TimerComplete; // 0xc0(0x10)
	None ReplicatedTimer; // 0xd0(0x38)
	None TimerState; // 0x108(0x08)
	None LocalTimerState; // 0x110(0x08)
	None TitleText; // 0x250(0x18)
	None bAchievementIntegrationEnabled; // 0xbb(0x01)
	None bHasInitialInventory; // 0xbc(0x01)
	None DivertFromQueueId; // 0xc0(0x04)
	None DivertToQueueId; // 0xc4(0x04)
	None QueueDivertType; // 0xc8(0x01)
	None ShelteredMMAttemptTimeout; // 0xcc(0x04)
	None ShelteredMMLevelLimit; // 0xd0(0x04)
	None ForcedBotMatchLimit; // 0xd4(0x04)
	None MercyMatchLossesRequired; // 0xd8(0x04)
	None bHasReceivedPlayerEmail; // 0xdc(0x01)
	None bEmailCallWasSuccess; // 0xdd(0x01)
	None PlayerEmail; // 0xe0(0x10)
	None KSVehicleMovementComponent; // 0x2a0(0x08)
	None InteractionBlockerManager; // 0x2a8(0x08)
	None InteractableComponent; // 0x2b0(0x08)
	None Seats; // 0x2b8(0x10)
	None RiderMap; // 0x2c8(0x50)
	None OnVehicleSeatingChanged; // 0x318(0x10)
	None VehicleName; // 0x328(0x18)
	None TimeToGetIn; // 0x340(0x04)
	None MaxSpeedToEnter; // 0x344(0x04)
	None MaxAngleFromVehicleToInteract; // 0x348(0x04)
	None SwapToDriverSeatHoldTime; // 0x34c(0x04)
	None Driver; // 0x350(0x08)
	None Riders; // 0x358(0x10)
	None Interacters; // 0x368(0x10)
	None PreventRiderSilhouette; // 0x379(0x01)
	None DetachedParachuteLinearDamping; // 0x37c(0x04)
	None TimeUntilParachuteDestroyed; // 0x380(0x04)
	None ParachuteDetachImpulse; // 0x384(0x0c)
	None ParachuteImpulseBoneNames; // 0x390(0x10)
	None ParachuteMesh; // 0x3a0(0x08)
	None OnManualDetachmentAvailable; // 0x3e8(0x10)
	None OnManualDetachmentUnavailable; // 0x3f8(0x10)
	None ValidInteractionTypes; // 0x410(0x10)
	None SpringArm; // 0x420(0x08)
	None MainCamera; // 0x428(0x08)
	None RiderCameraBlendTime; // 0x448(0x04)
	None RiderCameraBlendExponent; // 0x44c(0x04)
	None CameraXTurnRate; // 0x450(0x04)
	None CameraYTurnRate; // 0x454(0x04)
	None CameraDeadZoneRate; // 0x458(0x04)
	None CameraMinHorizontalAngle; // 0x45c(0x04)
	None CameraMaxHorizontalAngle; // 0x460(0x04)
	None CameraMinVerticalAngle; // 0x464(0x04)
	None CameraMaxVerticalAngle; // 0x468(0x04)
	None ViewInfo; // 0x46c(0x08)
	None MaxHealth; // 0x474(0x04)
	None CurrentHealth; // 0x478(0x04)
	None CurrentHealthStage; // 0x480(0x04)
	None OnVehicleHealthChanged; // 0x488(0x10)
	None Destroyed; // 0x498(0x01)
	None LocalImpulsePosition; // 0x49c(0x0c)
	None DestroyedMesh; // 0x4a8(0x08)
	None DamageableComponents; // 0x4b0(0x10)
	None HealthStages; // 0x4c8(0x50)
	None Vulnerabilities; // 0x518(0x50)
	None DamageImpulseMultiplier; // 0x568(0x04)
	None DestructionDamageWeapon; // 0x570(0x08)
	None DestructionDamageTypeClass; // 0x578(0x08)
	None MinSpeedToDamageHitPlayer; // 0x5c0(0x04)
	None MaxSpeedToDamageHitPlayer; // 0x5c4(0x04)
	None MinPlayerDamageMultiplier; // 0x5c8(0x04)
	None MaxPlayerDamageMultiplier; // 0x5cc(0x04)
	None PlayerDamageCooldown; // 0x5d0(0x04)
	None MinSpeedForImpactDamage; // 0x5d4(0x04)
	None MaxSpeedForImpactDamage; // 0x5d8(0x04)
	None MinImpactDamage; // 0x5dc(0x04)
	None MaxImpactDamage; // 0x5e0(0x04)
	None VehicleDamageCooldown; // 0x5e4(0x04)
	None MinImpactAngleFromVehicleUp; // 0x5e8(0x04)
	None MaxImpactAngleFromVehicleUp; // 0x5ec(0x04)
	None MinAngleToSlideCorrect; // 0x5f0(0x04)
	None MaxAngleToSlideCorrect; // 0x5f4(0x04)
	None MaxSlideCorrectionSpeed; // 0x5f8(0x04)
	None ImpactDamageWeapon; // 0x608(0x08)
	None ImpactDamageTypeClass; // 0x610(0x08)
	None PlayerHitComponent; // 0x618(0x08)
	None OwningCharacter; // 0x620(0x08)
	None JumpVector; // 0x628(0x0c)
	None JumpGroundTraceVector; // 0x634(0x0c)
	None JumpCooldown; // 0x640(0x04)
	None TotalBatteryDuration; // 0x650(0x04)
	None UpdateReplicatedBatteryTimerPeriod; // 0x654(0x04)
	None ReplicatedBatteryTimer; // 0x668(0x38)
	None RevealHoldDuration; // 0x6a0(0x04)
	None RevealConeAngle; // 0x6a4(0x04)
	None RevealMaxDistance; // 0x6a8(0x04)
	None RevealEffectDuration; // 0x6ac(0x04)
	None VehicleBaseOwner; // 0x680(0x08)
	None ParachuteDeployed; // 0x408(0x01)
	None ParachuteDetached; // 0x409(0x01)
	None SpeedToConsiderParachuteDeployment; // 0x40c(0x04)
	None DistanceToDeployParachute; // 0x410(0x04)
	None DistanceToDetachParachute; // 0x414(0x04)
	None DistanceToAllowManualDetachment; // 0x418(0x04)
	None TimeUntilParachuteDeployed; // 0x41c(0x04)
	None ParachuteDownwardSpeed; // 0x420(0x04)
	None ManualDetachmentAllowed; // 0x424(0x01)
	None ReorientedPitch; // 0x428(0x04)
	None TimeToReorientPitch; // 0x42c(0x04)
	None FallingTurnSpeed; // 0x430(0x04)
	None SlowFallingSpeed; // 0x434(0x04)
	None DefaultFallingSpeed; // 0x438(0x04)
	None FastFallingSpeed; // 0x43c(0x04)
	None TimeToReachDesiredFallSpeed; // 0x440(0x04)
	None AirSpeedInput; // 0x444(0x04)
	None MaxAngleToPreventRoll; // 0x448(0x04)
	None SeatPriority; // 0x208(0x04)
	None MainCameraViewInfo; // 0x20c(0x08)
	None AimCameraViewInfo; // 0x214(0x08)
	None AttachSocket; // 0x234(0x08)
	None GetInSequence; // 0x240(0x08)
	None GetOutSequence; // 0x248(0x08)
	None IdleSequence; // 0x250(0x08)
	None LeanOutSequence; // 0x258(0x08)
	None WheelEffectMap; // 0xf0(0x50)
	None WheelParticleSystem; // 0x140(0x08)
	None AttachSocketOverrideName; // 0x148(0x08)
	None VehicleSpeedParticleParameter; // 0x150(0x08)
	None EffectSpeedInterpolationAlpha; // 0x158(0x04)
	None MinimumWheelEffectSpeed; // 0x15c(0x04)
	None MaximumWheelEffectSpeed; // 0x160(0x04)
	None ViewModelName; // 0x280(0x08)
	None EquipmentContainer; // 0x288(0x228)
	None DefaultViewModelRotationOverride; // 0x4b0(0x0c)
	None MaxAxisRotation; // 0x4bc(0x0c)
	None IdleSecondsToResetRotation; // 0x4c8(0x04)
	None ResetRotationSpeedRadians; // 0x4cc(0x04)
	None RotationRatePerAxis; // 0x4d0(0x0c)
	None bForceOverrideViewModelRotation; // 0x4dc(0x01)
	None bModelDataIsDirty; // 0x520(0x01)
	None DesiredWeaponAsset; // 0x528(0x08)
	None DesiredAttachments; // 0x530(0x50)
	None ActiveWeaponComponent; // 0x580(0x08)
	None ActiveAttachmentCosmetics; // 0x588(0x10)
	None ActiveWeaponModelMeshComponent; // 0x598(0x08)
	None PendingWeaponComponentId; // 0x5a0(0x04)
	None PendingWeaponAsset; // 0x5a8(0x08)
	None PendingWeaponComponent; // 0x5b0(0x08)
	None PendingWeaponCosmeticIds; // 0x5b8(0x50)
	None PendingInfos; // 0x608(0x10)
	None ModelUpdateDebounceTime; // 0x618(0x04)
	None bClearActiveModelWhileTransitioning; // 0x628(0x01)
	None CharacterOwner; // 0xc8(0x08)
	None GlobalCooldownDuration; // 0x110(0x04)
	None CooldownGroupMap; // 0x118(0x50)
	None TimeNextEventCanPlayAfter; // 0x168(0x04)
	None OnVOLineFinished; // 0x16c(0x10)
	None VODuckingAmount; // 0x17c(0x04)
	None AnnouncerSquelchThreshold; // 0xb0(0x01)
	None AnnouncerDuckThreshold; // 0xb1(0x01)
	None CharacterSquelchThreshold; // 0xb2(0x01)
	None CharacterDuckThreshold; // 0xb3(0x01)
	None PlayingLines; // 0xb8(0x10)
	None WaterFXUpdatePeriod; // 0x258(0x04)
	None SurfaceOffsetZ; // 0x25c(0x04)
	None ActorCountdownMap; // 0x260(0x50)
	None CachedBounds; // 0x2b0(0x1c)
	None VariableScopeAsset; // 0x1b0(0x08)
	None ScopeZoomIndex; // 0x1b8(0x01)
	None WayPointSetLinks; // 0x258(0x50)
	None DefaultWayPointLinks; // 0x2a8(0x20)
	None DefensePointProbability; // 0x2c8(0x04)
	None DefensePointWaitTimeMin; // 0x2cc(0x04)
	None DefensePointWaitTimeMax; // 0x2d0(0x04)
	None DefensePointsForward; // 0x2d8(0x10)
	None DefensePointsReverse; // 0x2e8(0x10)
	None WayPointSet; // 0x220(0x04)
	None Waypoints; // 0x228(0x10)
	None ForwardSides; // 0x238(0x10)
	None ReversingSides; // 0x248(0x10)
	None CachedAim; // 0x6d8(0x50)
	None LastHitValidationRequestId; // 0x728(0x02)
	None HitValidationRecoveryList; // 0x730(0x50)
	None bAimOverShoulder; // 0x780(0x01)
	None CachedAimBonus; // 0x784(0x04)
	None bApplyAccuracyServerSide; // 0x788(0x01)
	None Range; // 0x7b4(0x04)
	None FiredReplicationFlags; // 0x7b8(0x01)
	None AimAssistCorrectionData; // 0x7c0(0x08)
	None bAllowAimCorrection; // 0x7c8(0x01)
	None HeadAimCorrectionOffset; // 0x7cc(0x04)
	None HeadAimCorrectionOffsetPC; // 0x7d0(0x04)
	None HeadAimCorrectionRange; // 0x7d4(0x04)
	None bAllowHipAimCorrection; // 0x7d8(0x01)
	None HeadHipAimCorrectionOffset; // 0x7dc(0x04)
	None HeadHipMouseAimCorrectionOffset; // 0x7e0(0x04)
	None HeadHipAimCorrectionRange; // 0x7e4(0x04)
	None ValidationSweepRadius; // 0x7e8(0x04)
	None AimOriginOffsetLenience; // 0x7ec(0x04)
	None AimOriginAngularLenience; // 0x7f0(0x04)
	None MinimumShotDirCoincidence; // 0x7f4(0x04)
	None CosAngularLenience; // 0x7f8(0x04)
	None OnInvalidBuildPlacementDel; // 0x818(0x10)
	None OnValidBuildPlacementDel; // 0x840(0x10)
	None BuildLocationOffset; // 0x850(0x0c)
	None MaxAdjustBuildDistanceHorizontal; // 0x85c(0x04)
	None MaxAdjustBuildDistanceVertical; // 0x860(0x04)
	None MaxAdjustBuildDistanceOffGround; // 0x864(0x04)
	None BuildPreviewActor; // 0x868(0x08)
	None BuildState; // 0x870(0x01)
	None OnBuildSpawned; // 0x8b8(0x10)
	None ActiveTarget; // 0x6d8(0x08)
	None TargeterConfig; // 0x6e0(0x0c)
	None OnGrenadeThrown; // 0x820(0x10)
	None bDropOffSuccess; // 0x800(0x01)
	None bHasBeenDropped; // 0x801(0x01)
	None DropThrowSpeed; // 0x804(0x04)
	None DropPositionOffset; // 0x808(0x04)
	None OnMeleeHit; // 0x800(0x10)
	None OnProjectileSpawned; // 0x828(0x10)
	None Projectile; // 0x858(0x08)
	None FakeProjectile; // 0x860(0x08)
	None MeleeWeaponAsset; // 0x868(0x08)
	None bMeleeSwinging; // 0x870(0x01)
	None MeleeSwingingTimerHandle; // 0x878(0x08)
	None DamagedTargetsInSwing; // 0x880(0x10)
	None bIsInQuickMelee; // 0x890(0x01)
	None ProximityComponentClass; // 0x6d8(0x08)
	None ProximityComponent; // 0x6e0(0x08)
	None bCacheProximityActorsWhileFiring; // 0x6e8(0x01)
	None bProximityActiveOnlyInHand; // 0x6e9(0x01)
	None ProximityActors; // 0x6f0(0x10)
	None CachedProximityActors; // 0x700(0x10)
	None ProximityComponents; // 0x710(0x10)
	None CachedProximityComponents; // 0x720(0x10)
	None OnCachedProximityActorsUpdatedDel; // 0x730(0x10)
	None CameraBlendTime; // 0x6d8(0x04)
	None CameraBlendFunction; // 0x6dc(0x01)
	None CameraBlendExp; // 0x6e0(0x04)
	None CameraLockOutgoing; // 0x6e4(0x01)
	None PostDestroyDelay; // 0x6e8(0x04)
	None RemoteRocketToSpawn; // 0x6f0(0x08)
	None RemoteRocketRelativeLocation; // 0x6f8(0x0c)
	None SpawnedRemoteRocket; // 0x708(0x08)
	None RocketController; // 0x710(0x08)
	None OnDetonatorEquipped; // 0x840(0x10)
	None DetonatorAsset; // 0x860(0x08)
	None ReadyForDetonator; // 0x868(0x01)
	None bUseSequentialDetonation; // 0x870(0x01)
	None AltFireSubWeaponName; // 0x874(0x08)
	None OnRemoteThrowEquipped; // 0x6d8(0x10)
	None AttachedCharges; // 0x708(0x10)
	None MaxDetonationRange; // 0x718(0x04)
	None OnDetonationReady; // 0x720(0x10)
	None RemoteThrowAsset; // 0x730(0x08)
	None RemoteVehicleToSpawn; // 0x6d8(0x08)
	None RemoteVehicleRelativeTransform; // 0x6e0(0x30)
	None SpawnedRemoteVehicle; // 0x710(0x08)
	None DartProjectile; // 0x6f0(0x08)
	None OnSucceed; // 0x6f8(0x10)
	None OnFailed; // 0x708(0x10)
	None DisplayTargetList; // 0x6d8(0x10)
	None TargetSelectCancelled; // 0x6e8(0x10)
	None PotentialTargets; // 0x6f8(0x10)
	None SelectTargetOnRetrieve; // 0x708(0x01)
	None TargetedActor; // 0x70c(0x08)
	None DroneClass; // 0x718(0x08)
	None DroneActor; // 0x720(0x08)
	None OnDroneReviveBegin; // 0x6f0(0x10)
	None OnDroneReviveComplete; // 0x700(0x10)
	None OnDroneAbort; // 0x710(0x10)
	None OnDroneTargetRevive; // 0x720(0x10)
	None OnDroneTargetDied; // 0x730(0x10)
	None OnDroneDestroyed; // 0x740(0x10)
	None OnDroneSpawned; // 0x750(0x10)
	None DroneClass; // 0x760(0x08)
	None DroneActor; // 0x768(0x08)
	None CachedPelletSpread; // 0x800(0x10)
	None OnSurfaceTargetFireFailure; // 0x800(0x10)
	None OnSurfaceValidityChanged; // 0x810(0x10)
	None ValidTarget; // 0x820(0x01)
	None OnEndPointUpdated; // 0x800(0x10)
	None ZipLineClass; // 0x810(0x08)
	None Zipline; // 0x818(0x08)
	None PreviewTraceChannel; // 0x820(0x01)
	None MaxRange; // 0x824(0x04)
	None MinRange; // 0x828(0x04)
	None ProjectileSpeed; // 0x82c(0x04)
	None m_bIsReloading; // 0x330(0x01)
	None m_fIKAlpha; // 0x334(0x04)
	None m_fIKBlendInTime; // 0x338(0x04)
	None m_fIKBlendOutTime; // 0x33c(0x04)
	None m_vADSOffset; // 0x340(0x0c)
	None m_bIsMoving; // 0x34c(0x01)
	None m_fMovingAlpha; // 0x350(0x04)
	None m_nFireImpulseCounter; // 0x354(0x04)
	None m_bFireImpulse; // 0x358(0x01)
	None m_fADSAlpha; // 0x35c(0x04)
	None m_bIsSprinting; // 0x360(0x01)
	None m_fLeadingPitch; // 0x364(0x04)
	None m_fLeadingYaw; // 0x368(0x04)
	None m_fLeadingPitchADS; // 0x36c(0x04)
	None m_fLeadingYawADS; // 0x370(0x04)
	None LeadingPitch; // 0x374(0x10)
	None LeadingYaw; // 0x384(0x10)
	None LeadingPitchADS; // 0x394(0x10)
	None LeadingYawADS; // 0x3a4(0x10)
	None m_LandImpulseCounter; // 0x3c0(0x04)
	None m_JumpImpulseCounter; // 0x3c4(0x04)
	None m_bFoldIronSights; // 0x3c8(0x01)
	None WeaponAnimIndex; // 0x3cc(0x04)
	None bPlayerCrouching; // 0x3d0(0x01)
	None TempPhoneFlip; // 0x3d4(0x04)
	None TargetBarrelRotation; // 0x3d8(0x0c)
	None bEnableBarrelRotation; // 0x3e4(0x01)
	None bEnableRogueSelectPose; // 0x3e5(0x01)
	None bEnableWalkInPose; // 0x3e6(0x01)
	None bNeedsWalkInStartTime; // 0x3e7(0x01)
	None WalkInStartTime; // 0x3e8(0x04)
	None SoftBuildActorClass; // 0x900(0x28)
	None SoftBuildPreviewActorClass; // 0x928(0x28)
	None BuildActivationDelay; // 0x950(0x04)
	None ProjectileClass; // 0x900(0x28)
	None ProjectileWeaponAsset; // 0x928(0x28)
	None AdditionalProjectileWeaponInfos; // 0x950(0x10)
	None RadialDamageOriginOffsetDistance; // 0x960(0x04)
	None TimeToFullyCook; // 0x964(0x04)
	None CookSpeedMultiplierCurve; // 0x968(0x08)
	None CookDamageMultiplierCurve; // 0x970(0x08)
	None BounceDamageMultiplierCurve; // 0x978(0x08)
	None bAllowCooking; // 0x980(0x01)
	None MinimumCookTime; // 0x984(0x04)
	None FuseTime; // 0x988(0x04)
	None MinHandRemainingFuse; // 0x98c(0x04)
	None bFuseTicksInHand; // 0x990(0x01)
	None GrenadeClass; // 0x998(0x28)
	None MeleeSphereOffset; // 0x980(0x0c)
	None MeleeSphereRadius; // 0x98c(0x04)
	None MeleeSwingActiveTimeSeconds; // 0x990(0x04)
	None OverlapObjectTypes; // 0x998(0x10)
	None TraceChannel; // 0x9a8(0x01)
	None MaxLungeDistance; // 0x9ac(0x04)
	None MaxLungeDistanceCorrectionMultiplier; // 0x9b0(0x04)
	None MaxLungeDuration; // 0x9b4(0x04)
	None LungeConeHalfAngle; // 0x9b8(0x04)
	None LungeConeOriginDistanceOffset; // 0x9bc(0x04)
	None DamageScalarAfterWalls; // 0x980(0x04)
	None PierceClass; // 0x988(0x28)
	None PelletsPerShot; // 0x900(0x04)
	None AimDownSightsAccuracy; // 0x904(0x04)
	None bUseSpreadPattern; // 0x908(0x01)
	None SpreadPattern; // 0x910(0x10)
	None HitPercentageForHeadshot; // 0x920(0x04)
	None NonlinearPelletDamageCurve; // 0x928(0x08)
	None FunctionalClass; // 0x250(0x28)
	None CosmeticClass; // 0x278(0x28)
	None ValidAttachPoints; // 0x2a0(0x20)
	None WeaponCompatibilityRules; // 0x2c0(0x08)
	None CompatibleWeaponTypes; // 0x2c8(0x20)
	None bShouldBeInAttachmentCollection; // 0x2e8(0x01)
	None GlobalWeaponAttachmentCollection; // 0x2f0(0x08)
	None bReplaceKickbackModule; // 0x2f8(0x01)
	None KickbackModule; // 0x300(0x08)
	None KickbackResetTime; // 0x308(0x04)
	None bModifyKickbackScale; // 0x30c(0x01)
	None KickbackScale; // 0x310(0x04)
	None bModifyBaseAccuracy; // 0x314(0x01)
	None BaseAccuracyMultiplier; // 0x318(0x04)
	None DefaultAmmoIncrease; // 0x2f8(0x04)
	None ClipSize; // 0x2f8(0x04)
	None ClipSizeIncreaseMultiplier; // 0x2f8(0x04)
	None RoundingType; // 0x2fc(0x01)
	None FalloffRangeMultiplier; // 0x2f8(0x04)
	None ReloadPeriodMultiplier; // 0x2f8(0x04)
	None ReactiveWrapPreviewModeActive; // 0x2f8(0x01)
	None ReactiveWrapPreviewDisplayDescription; // 0x300(0x18)
	None ProgressionTrackATitle; // 0x318(0x08)
	None ProgressionTrackBTitle; // 0x320(0x08)
	None ProgressionTrackCTitle; // 0x328(0x08)
	None ReactiveWrapPreviewParameters; // 0x330(0x10)
	None StartingMilestonePreviewIndex; // 0x340(0x04)
	None UtilizeOnComponentStateChanged; // 0x344(0x01)
	None TriggerOnFire; // 0x345(0x01)
	None ResetOnReload; // 0x346(0x01)
	None ResetOnInactive; // 0x347(0x01)
	None ResetOnHolster; // 0x348(0x01)
	None ResetOnIdleTimer; // 0x349(0x01)
	None IdleResetTimerDuration; // 0x34c(0x04)
	None UtilizeOnAimModeChanged; // 0x350(0x01)
	None HideOnADS; // 0x351(0x01)
	None UtilizeOnAnyPlayerDeath; // 0x352(0x01)
	None TriggerOnKillingAnEnemyWithAnything; // 0x353(0x01)
	None TriggerOnKillingAnEnemyWithYourReactiveWeapon; // 0x354(0x01)
	None ResetOnYourDeath; // 0x355(0x01)
	None UtilizeOnAnyPlayerDowned; // 0x356(0x01)
	None TriggerOnDowningAnEnemyWithAnything; // 0x357(0x01)
	None TriggerOnDowningAnEnemyWithYourReactiveWeapon; // 0x358(0x01)
	None ResetOnYourDown; // 0x359(0x01)
	None UtilizeOnOwnedPawnInstigateDamage; // 0x35a(0x01)
	None TriggerOnDamagingAnEnemyWithAnything; // 0x35b(0x01)
	None TriggerOnDamagingAnEnemyWithYourReactiveWeapon; // 0x35c(0x01)
	None ResetOnYouTakeDamage; // 0x35d(0x01)
	None TriggerOnDamageThresholdWithYourReactiveWeaponOnly; // 0x35e(0x01)
	None TargetTriggerDamageThreshold; // 0x360(0x04)
	None DamageThresholdResetTimerDuration; // 0x364(0x04)
	None UtilizeOnMultiDownAchieved; // 0x368(0x01)
	None TriggerOnMutlipleDownsWithAnything; // 0x369(0x01)
	None TriggerOnMutlipleDownsWithYourReactiveWeapon; // 0x36a(0x01)
	None TargetNumberOfDownsToAchieve; // 0x36c(0x04)
	None AimDownSightsFov; // 0x2f8(0x04)
	None ScopeMultiplier; // 0x2f8(0x04)
	None AudibleRange; // 0x2f8(0x04)
	None bModifyFalloffRange; // 0x2fc(0x01)
	None FalloffRangeMultiplier; // 0x300(0x04)
	None ScopeSettings; // 0x2f8(0x10)
	None ScopeType; // 0x308(0x04)
	None WeaponOwner; // 0xd0(0x08)
	None AttachmentCosmeticComponent; // 0xd8(0x08)
	None AttachPoint; // 0xf8(0x14)
	None AttachmentAsset; // 0x120(0x08)
	None bPersistsOnWeaponDrop; // 0x128(0x01)
	None PersistentStateData; // 0x140(0x02)
	None VariableScopeAsset; // 0x130(0x08)
	None ScopeZoomIndex; // 0x138(0x01)
	None Weapon; // 0x30(0x28)
	None AttachmentCosmetic; // 0x58(0x28)
	None AssetOverrideTables; // 0x80(0x10)
	None CategoryTag; // 0x98(0x08)
	None WrapTag; // 0xa0(0x08)
	None bExcludeUpgrades; // 0xa8(0x01)
	None bRequireItemId; // 0xa9(0x01)
	None DisplayName; // 0xb0(0x18)
	None DisplayNameSingular; // 0xc8(0x18)
	None DisplayNameCategory; // 0xe0(0x18)
	None SoftSymbolIcon; // 0xf8(0x28)
	None SoftFlatSymbolIcon; // 0x120(0x28)
	None SoftMasteryIcon; // 0x148(0x28)
	None SoftVerticalSplash; // 0x170(0x28)
	None SoftHorizontalSplash; // 0x198(0x28)
	None ShowsMasteryUI; // 0x1c0(0x01)
	None ShowsWeaponUnlockUI; // 0x1c1(0x01)
	None ShowsRelatedJobsUI; // 0x1c2(0x01)
	None DefaultPreviewWeapon; // 0x1d8(0x28)
	None WeaponComponentTickType; // 0x128(0x01)
	None bAllowTickingOnItemDropActor; // 0x129(0x01)
	None ForcedWeaponLODWhenLocallyViewed; // 0x12a(0x01)
	None bForceResidentFlagOnWeaponTextures; // 0x12b(0x01)
	None bAllowAnimationAsItemDrop; // 0x12c(0x01)
	None WeaponState; // 0x12d(0x01)
	None InitialState; // 0x12e(0x01)
	None WeaponAsset; // 0x130(0x08)
	None bPendingFire; // 0x138(0x01)
	None InitialAmmoInClip; // 0x139(0x01)
	None AmmoInClip; // 0x13a(0x01)
	None bInitializationStarted; // 0x13b(0x01)
	None bInitializationCompleted; // 0x13c(0x01)
	None OnAmmoChangedDel; // 0x140(0x10)
	None OnFireRateChangedDel; // 0x168(0x10)
	None OnWeaponComponentInitializationCompletedDel; // 0x180(0x10)
	None bCachedWeaponVisibility; // 0x1a9(0x01)
	None MeshMaxDrawDistance; // 0x1ac(0x04)
	None bUseMaxDistForCharacterOwnedWeapons; // 0x1b0(0x01)
	None bHideAncillaryMagazine; // 0x1b1(0x01)
	None AncillaryMagazineIndex; // 0x1b4(0x04)
	None bIsGrenade; // 0x1b8(0x01)
	None bUsesHeavyGadget; // 0x1b9(0x01)
	None MeleeComboTarget; // 0x1bc(0x08)
	None bPreventReturnToHolsterFlag; // 0x1c4(0x01)
	None WeaponAttachType; // 0x1c5(0x01)
	None SkeletalMesh; // 0x1c8(0x08)
	None PhysicsAsset; // 0x1d0(0x08)
	None WeaponSkeletalMeshCollisionProfileName; // 0x1d8(0x08)
	None bLoadWeaponSkeletalMeshComponentOnServer; // 0x1e0(0x01)
	None ActiveRequiredDedicatedServerCharacterBoneNames; // 0x1e8(0x10)
	None MeshComponentVisibilityBasedAnimTickOption; // 0x1f8(0x01)
	None bAllowMeshCompositing; // 0x1f9(0x01)
	None ScopeMesh; // 0x200(0x08)
	None ScopeAttachmentTag; // 0x208(0x08)
	None MagazineMesh; // 0x210(0x08)
	None MagazineAttachmentTag; // 0x218(0x08)
	None StockMesh; // 0x220(0x08)
	None StockAttachmentTag; // 0x228(0x08)
	None SilencerMesh; // 0x230(0x08)
	None SilencerAttachmentTag; // 0x238(0x08)
	None GripMesh; // 0x240(0x08)
	None GripAttachmentTag; // 0x248(0x08)
	None KeywordsForCompositingMesh; // 0x250(0x10)
	None BaseMeshOverrideKeyword; // 0x260(0x08)
	None MeshNeedsCPUAccessKeyword; // 0x268(0x08)
	None PhysicsAssetOverrideKeyword; // 0x270(0x08)
	None AnimInstance; // 0x278(0x08)
	None AnimInstanceOverrideKeyword; // 0x280(0x08)
	None EquipSocketOverride; // 0x288(0x08)
	None WeaponSkeletalMeshComponent; // 0x290(0x08)
	None PropWeaponSkeletalMeshComponent; // 0x298(0x08)
	None bHideOnCreation; // 0x2a0(0x01)
	None bDuplicate; // 0x2a1(0x01)
	None DuplicateSocket; // 0x2a4(0x08)
	None DuplicateSkeletalMeshComponent; // 0x2b0(0x08)
	None bWeaponLoweringEnabled; // 0x2b8(0x01)
	None CharacterRightShoulderBoneName; // 0x2bc(0x08)
	None CharacterRightElbowBoneName; // 0x2c4(0x08)
	None CharacterLeftShoulderBoneName; // 0x2cc(0x08)
	None CharacterLeftElbowBoneName; // 0x2d4(0x08)
	None CharacterChestBoneName; // 0x2dc(0x08)
	None WeaponBarrelBoneName; // 0x2e4(0x08)
	None WeaponLowerSphereTraceRadius; // 0x2ec(0x04)
	None WeaponLowerTestDistanceAdjustment; // 0x2f0(0x04)
	None AncillaryMeshData; // 0x2f8(0x10)
	None WeaponLowerViewDotThreshold; // 0x308(0x04)
	None bResetLocked; // 0x30c(0x01)
	None NextBroadcastId; // 0x310(0x04)
	None LastBroadcastReceived; // 0x314(0x04)
	None AncillaryMeshes; // 0x318(0x10)
	None bPreventRetreive; // 0x328(0x01)
	None bForceDisableLHIK; // 0x329(0x01)
	None bAttachHandWhileSprinting; // 0x32a(0x01)
	None bAttachHandWhileMoving; // 0x32b(0x01)
	None bAttachHandWhileCrouching; // 0x32c(0x01)
	None bAttachHandMelee; // 0x32d(0x01)
	None bAttachHandWhileIdle; // 0x32e(0x01)
	None bAttachHandWhileZiplining; // 0x32f(0x01)
	None bForceAttachHandIfNotNonCom; // 0x330(0x01)
	None bForceDisableRHIK; // 0x331(0x01)
	None bAttachRightHand; // 0x332(0x01)
	None bAttachRightHandWhileZiplining; // 0x333(0x01)
	None bHasMirroredReloadAnim; // 0x334(0x01)
	None bHasMirroredQuickReloadAnim; // 0x335(0x01)
	None bHasMirroredFireAnim; // 0x336(0x01)
	None bReplicateWeaponStateAsVariable; // 0x337(0x01)
	None bForceBroadcastAllWeaponStateChanges; // 0x338(0x01)
	None bForceReliableWeaponStateBroadcast; // 0x339(0x01)
	None ShotsFiredSinceLastReload; // 0x33c(0x04)
	None bFirstReload; // 0x340(0x01)
	None bShouldBroadcastEmptyFire; // 0x341(0x01)
	None bShouldReliablyBroadcastEmptyFire; // 0x342(0x01)
	None bShouldReliablyBroadcastAmmoChanges; // 0x343(0x01)
	None OnWeaponComponentStateChangedDel; // 0x348(0x10)
	None bIsInAction; // 0x370(0x01)
	None bNonComUseLimitedMovement; // 0x371(0x01)
	None bComUseLimitedMovement; // 0x372(0x01)
	None bEngUseLimitedMovement; // 0x373(0x01)
	None bEnableTurnInPlaceForAOS; // 0x374(0x01)
	None ZoomFOVChanged; // 0x378(0x10)
	None CachedAimMode; // 0x388(0x01)
	None DefaultAimCameraTransitionTime; // 0x38c(0x04)
	None AimOverShoulderCameraTransitionTime; // 0x390(0x04)
	None AimDownSightsCameraTransitionTime; // 0x394(0x04)
	None OnWeaponComponentAimModeChangedDel; // 0x398(0x10)
	None AttachmentCosmetics; // 0x3e0(0x10)
	None SkinObjectParenting; // 0x3f0(0x01)
	None ActiveIndex; // 0x3f4(0x04)
	None OnEquipmentBecomeActiveDel; // 0x3f8(0x10)
	None OnEquipmentEndActiveDel; // 0x420(0x10)
	None ActiveReloadMontage; // 0x458(0x08)
	None ActiveWeaponReloadMontage; // 0x460(0x08)
	None bMultiStageReload; // 0x468(0x01)
	None bSpeedloaded; // 0x469(0x01)
	None PostReloadTimerIsActive; // 0x46a(0x01)
	None EnableAimsDuringReload; // 0x46b(0x01)
	None bShieldIsActive; // 0x46c(0x01)
	None MuzzleSocketKeyword; // 0x470(0x08)
	None ApparelObjectsToListenTo; // 0x4a8(0x10)
	None BaseAssetDataTables; // 0x4b8(0x10)
	None bCreateDataTableForLegacyAssets; // 0x4c8(0x01)
	None AssetDataTableManager; // 0x4d0(0x08)
	None SkinObject; // 0x4d8(0x08)
	None bSkinObjectAdded; // 0x4e0(0x01)
	None ViewModelScale; // 0x4f8(0x0c)
	None ViewModelRotation; // 0x504(0x0c)
	None ViewModelLocationOffset; // 0x510(0x0c)
	None WeaponCombatStateCooldown; // 0x520(0x04)
	None ForceNonCombatShotBlockDistance; // 0x524(0x04)
	None TargetingVisualizationClass; // 0x528(0x08)
	None bIsTargeting; // 0x530(0x01)
	None TargetingVisualizerInstance; // 0x538(0x08)
	None VibrationEffect; // 0x540(0x08)
	None AlternateVibrationEffect; // 0x548(0x08)
	None AlternativeVibrationAttenuation; // 0x550(0x08)
	None RecoilProfileAsset; // 0x558(0x08)
	None bIsMeleeWeaponComponent; // 0x560(0x01)
	None VFXSpangKeywordPrefix; // 0x568(0x10)
	None DecalSpangKeywordPrefix; // 0x578(0x10)
	None VFXSpangDefaultKeyword; // 0x588(0x08)
	None VFXSpangKeywordMap; // 0x590(0x50)
	None DecalSpangDefaultKeyword; // 0x5e0(0x08)
	None DecalSpangKeywordMap; // 0x5e8(0x50)
	None MiscRewardsTable; // 0x210(0x08)
	None WeaponReference; // 0x250(0x28)
	None ActiveNamelessProps; // 0x188(0x10)
	None ActiveProps; // 0x198(0x50)
	None LegacyProps; // 0x1e8(0x50)
	None bAllowAnimNotifyStatesToCreatePropSpawners; // 0x288(0x01)
	None bApplySkeletalMeshBoundsParameterToMaterials; // 0xda0(0x01)
	None SkeletalMeshBoundsParameterName; // 0xda4(0x08)
	None bApplySkeletalLengthParameterToMaterials; // 0xdac(0x01)
	None SkeletalMeshLengthParameterName; // 0xdb0(0x08)
	None bApplySkeletalWidthParameterToMaterials; // 0xdb8(0x01)
	None SkeletalMeshWidthParameterName; // 0xdbc(0x08)
	None bApplySkeletalHeightParameterToMaterials; // 0xdc4(0x01)
	None SkeletalMeshHeightParameterName; // 0xdc8(0x08)
	None SocketAttachPoint; // 0x1b0(0x08)
	None AssetPrefix; // 0x1b8(0x10)
	None bShouldDodgeRollOnLanding; // 0x1c8(0x01)
	None bShouldUseFootIKDuringFreefall; // 0x1c9(0x01)
	None BaseAssetDataTables; // 0x1d0(0x10)
	None ViewModelScale; // 0x1e0(0x0c)
	None ViewModelRotation; // 0x1ec(0x0c)
	None ViewModelLocationOffset; // 0x1f8(0x0c)
	None WingSuitVFXList; // 0x208(0x10)
	None StartSFX; // 0x218(0x08)
	None LoopSFX; // 0x220(0x08)
	None StopSFX; // 0x228(0x08)
	None bUseLowDrainBatteryMode; // 0x3e0(0x01)
	None ParticleSystemPoolComponent; // 0x3e8(0x08)
	None DecalPoolComponent; // 0x3f0(0x08)
	None GunshotDecalPoolComponent; // 0x3f8(0x08)
	None FootprintDecalPoolComponent; // 0x400(0x08)
	None SkeletalMeshPoolComponent; // 0x408(0x08)
	None StaticMeshPoolComponent; // 0x410(0x08)
	None TracerParticlePoolComponent; // 0x418(0x08)
	None TracerStaticMeshPoolComponent; // 0x420(0x08)
	None AkPoolComponent; // 0x428(0x08)
	None EchoRequestCount; // 0x430(0x04)
	None FriendlyAudioName; // 0x448(0x10)
	None FriendlyAchievementName; // 0x458(0x10)
	None MapTags; // 0x468(0x10)
	None AudioPlayerToSpawn; // 0x478(0x28)
	None AudioOcclusionLUT; // 0x4a0(0x08)
	None BoolPropertyMap; // 0x4a8(0x50)
	None IntPropertyMap; // 0x4f8(0x50)
	None FloatPropertyMap; // 0x548(0x50)
	None ZipLiners; // 0x230(0x10)
	None ZipStart; // 0x240(0x0c)
	None ZipEnd; // 0x24c(0x0c)
	None ZipHangOffset; // 0x258(0x0c)
	None ZipSpeed; // 0x264(0x04)
	None bReadyToRide; // 0x268(0x01)
	None CooldownTime; // 0x26c(0x04)
	None MinimumInteractTime; // 0x270(0x04)
	None InteractTime; // 0x274(0x04)
	None LengthToEndToIgnore; // 0x278(0x04)
	None bUpline; // 0x27c(0x01)
	None bGrabFromBehind; // 0x27d(0x01)
	None bForgivingInteractionAngle; // 0x27e(0x01)
	None InteractionType; // 0x280(0x08)
	None AutoReleaseDistance; // 0x288(0x04)
	None AutoReleaseSpeed; // 0x28c(0x04)
	None AutoReleasePitchAngle; // 0x290(0x04)
	None bSupportsPreHold; // 0x294(0x01)
	None InteractionBlockerManager; // 0x298(0x08)
	None InteractableComponent; // 0x2a0(0x08)
	None WheelSpeedModifier; // 0x10f8(0x04)
	None WheelCurrentSpeed; // 0x10fc(0x04)
	None UpperWheelRotator; // 0x1100(0x0c)
	None LowerWheelRotator; // 0x110c(0x0c)
	None ZiplineTopLockRot; // 0x1118(0x0c)
	None ZiplineTopLockRotModifierPitch; // 0x1124(0x04)
	None ZiplineTopLockRotModifierRoll; // 0x1128(0x04)
	None ZiplineTopLockRotModifierYaw; // 0x112c(0x04)
	None FailSafeLoadingScreen; // 0x30(0x70)
	None CollectionName; // 0x98(0x18)
	None CollectionDescription; // 0xb0(0x18)
	None PendingHUDClass; // 0x6b8(0x08)
	None PerkCategoryName; // 0x98(0x18)
	None PerkCategoryDescription; // 0xb0(0x18)
	None AssociatedPerkTree; // 0xc8(0x28)
	None ThemeColorLight; // 0xf0(0x10)
	None ThemeColorDark; // 0x100(0x10)
	None PerkCategoryIcon; // 0x120(0x28)
	None SkinMap; // 0xc8(0x50)
	None JobToUse; // 0x118(0x08)
	None CurrentJob; // 0xb8(0x08)
	None FailSafeJob; // 0xc0(0x28)
	None SkinMap; // 0xe8(0x50)
	None WeakPlayerInfo; // 0x138(0x08)
	None CurrentJob; // 0xb8(0x08)
	None CurrentSkin; // 0xc0(0x08)
	None SkinMap; // 0xc8(0x50)
	None SkinBundleCollectionName; // 0x98(0x18)
	None SkinBundleCollectionDescription; // 0xb0(0x18)
	None SmoothTimeline; // 0x220(0x14)
	None TimelineComponentToSimulate; // 0x238(0x08)
	None bPauseOnImpact; // 0xf0(0x01)
	None BehaviourType; // 0xf4(0x01)
	None bForceSubStepping; // 0xf8(0x01)
	None OnSplineReverse; // 0x100(0x10)
	None OnSplineStop; // 0x110(0x10)
	None OnWaitBeginDelegate; // 0x120(0x10)
	None OnWaitEndDelegate; // 0x130(0x10)
	None OnResetDelegate; // 0x140(0x10)
	None MaxSimulationTimeStep; // 0x150(0x04)
	None MaxSimulationIterations; // 0x154(0x04)
	None Spline; // 0x158(0x08)
	None Speed; // 0x160(0x04)
	None ThermalScopePPComponentClass; // 0xb0(0x08)
	None CharacterOwner; // 0xc0(0x08)
	None ActiveThermals; // 0xc8(0x10)
	None ManagerComponent; // 0xb0(0x08)
	None CameraManagerOwner; // 0xb8(0x08)
	None ThermalPostProcessMaterial; // 0xc0(0x08)
	None ThermalPostProcessMaterialDynamic; // 0xc8(0x08)
	None start; // 0x6b0(0x0c)
	None end; // 0x6bc(0x0c)
	None TravelSpeed; // 0x6c8(0x04)
	None bDestroyOnDestinationReached; // 0x6cc(0x01)
	None bDeactivateOnDestinationReached; // 0x6cd(0x01)
	None bEnableTravel; // 0x6ce(0x01)
	None OnTracerParticleReachedDestiniationDel; // 0x6d0(0x10)
	None start; // 0x4f0(0x0c)
	None end; // 0x4fc(0x0c)
	None TravelSpeed; // 0x508(0x04)
	None bDestroyOnDestinationReached; // 0x50c(0x01)
	None bEnableTravel; // 0x50d(0x01)
	None OnTracerParticleReachedDestiniationDel; // 0x510(0x10)
	None PooledTraceStaticMeshComponentClass; // 0xd8(0x08)
	None UnusedComponentsArray; // 0xe0(0x10)
	None UsedComponentsSet; // 0xf0(0x50)
	None PeekedTracerStaticMeshComponent; // 0x140(0x08)
	None WeaponCollectionName; // 0x98(0x18)
	None WeaponCollectionDescription; // 0xb0(0x18)
	None UberGraphFrame; // 0x630(0x08)
	None ShowDetail; // 0x638(0x08)
	None BattleZoneinfo; // 0x640(0x08)
	None ButtonText; // 0x648(0x08)
	None ContentSwitcher; // 0x650(0x08)
	None Divider; // 0x658(0x08)
	None Divider_2; // 0x660(0x08)
	None EmptyContent; // 0x668(0x08)
	None EmptyContentBackButton; // 0x670(0x08)
	None ErrorContainer; // 0x678(0x08)
	None ErrorLabel; // 0x680(0x08)
	None GrandmasterText; // 0x688(0x08)
	None Image; // 0x690(0x08)
	None Image_2; // 0x698(0x08)
	None Image_3; // 0x6a0(0x08)
	None Image_4; // 0x6a8(0x08)
	None Image_5; // 0x6b0(0x08)
	None Image_6; // 0x6b8(0x08)
	None Image_7; // 0x6c0(0x08)
	None Image_8; // 0x6c8(0x08)
	None Image_9; // 0x6d0(0x08)
	None Image_10; // 0x6d8(0x08)
	None Image_11; // 0x6e0(0x08)
	None Image_12; // 0x6e8(0x08)
	None Image_13; // 0x6f0(0x08)
	None Image_14; // 0x6f8(0x08)
	None Image_15; // 0x700(0x08)
	None Image_110; // 0x708(0x08)
	None Image_142; // 0x710(0x08)
	None Image_222; // 0x718(0x08)
	None Image_329; // 0x720(0x08)
	None Image_392; // 0x728(0x08)
	None MapRotationHeader; // 0x730(0x08)
	None MapScrollBox; // 0x738(0x08)
	None MapScrollPrompt; // 0x740(0x08)
	None MapScrollPromptContainer; // 0x748(0x08)
	None MapThumbnailGrid; // 0x750(0x08)
	None MobileSelectQueueBtn; // 0x758(0x08)
	None ObjectiveTxt; // 0x760(0x08)
	None PartyMaxLabel; // 0x768(0x08)
	None PartyMinLabel; // 0x770(0x08)
	None PlayerCount; // 0x778(0x08)
	None QueueDataSwitcher; // 0x780(0x08)
	None QueueDescription; // 0x788(0x08)
	None QueueDescWrapper; // 0x790(0x08)
	None QueueDetailsDisplay; // 0x798(0x08)
	None QueueDetailSwitcher; // 0x7a0(0x08)
	None QueueDetailWrapper; // 0x7a8(0x08)
	None QueueName; // 0x7b0(0x08)
	None QueueScrollBox; // 0x7b8(0x08)
	None QueueSectionContainer; // 0x7c0(0x08)
	None QueueSelectContainer; // 0x7c8(0x08)
	None QueueSelectPanel; // 0x7d0(0x08)
	None RankedDetailContainer22; // 0x7d8(0x08)
	None RankedInfoButton; // 0x7e0(0x08)
	None RankedProgressBadge; // 0x7e8(0x08)
	None RankedProgressText; // 0x7f0(0x08)
	None RegionSwitcher; // 0x7f8(0x08)
	None RichTextBlock; // 0x800(0x08)
	None RichTextBlock_2; // 0x808(0x08)
	None RichTextBlock_3; // 0x810(0x08)
	None RichTextBlock_4; // 0x818(0x08)
	None RichTextBlock_5; // 0x820(0x08)
	None RichTextBlock_6; // 0x828(0x08)
	None RichTextBlock_7; // 0x830(0x08)
	None RichTextBlock_8; // 0x838(0x08)
	None RichTextBlock_9; // 0x840(0x08)
	None RichTextBlock_10; // 0x848(0x08)
	None SeasonLabel; // 0x850(0x08)
	None WBP_panel_bevel; // 0x858(0x08)
	None WBP_ProgressEarnedBar; // 0x860(0x08)
	None WBP_QueueSelection_RegionSelectButton; // 0x868(0x08)
	None WBP_QuickPlay_MapThumbnail; // 0x870(0x08)
	None WBP_QuickPlay_QueueTypeSection; // 0x878(0x08)
	None WBP_QuickPlay_QueueTypeSection_129; // 0x880(0x08)
	None WBP_RegionSelect; // 0x888(0x08)
	None WBP_ThrobberHorizontal; // 0x890(0x08)
	None NavigationButtons; // 0x898(0x10)
	None AllQueueButtons; // 0x8a8(0x10)
	None MaxColumn; // 0x8b8(0x04)
	None QueueDataFactory; // 0x8c0(0x08)
	None SelectedQueueInfo; // 0x8c8(0xd8)
	None CurrentScreen; // 0x9a0(0x08)
	None ScreenToWidget; // 0x9a8(0x50)
	None MapScrollSpeed; // 0x9f8(0x04)
	None ShowQuickPlaySFX; // 0xa00(0x08)
	None CustomMatchButton; // 0xa08(0x08)
	None FoundQueueToFocus; // 0xa10(0x01)
	None TopQueueButton; // 0xa18(0x08)
	None LookatTrackingSettings; // 0x7a0(0x50)
	None CranePitch; // 0x220(0x04)
	None CraneYaw; // 0x224(0x04)
	None CraneArmLength; // 0x228(0x04)
	None bLockMountPitch; // 0x22c(0x01)
	None bLockMountYaw; // 0x22d(0x01)
	None TransformComponent; // 0x230(0x08)
	None CraneYawControl; // 0x238(0x08)
	None CranePitchControl; // 0x240(0x08)
	None CraneCameraMount; // 0x248(0x08)
	None CurrentPositionOnRail; // 0x220(0x04)
	None bLockOrientationToRail; // 0x224(0x01)
	None TransformComponent; // 0x228(0x08)
	None RailSplineComponent; // 0x230(0x08)
	None RailCameraMount; // 0x238(0x08)
	None FilmbackSettings; // 0x7e0(0x0c)
	None Filmback; // 0x7ec(0x0c)
	None LensSettings; // 0x7f8(0x18)
	None FocusSettings; // 0x810(0x58)
	None CurrentFocalLength; // 0x868(0x04)
	None CurrentAperture; // 0x86c(0x04)
	None CurrentFocusDistance; // 0x870(0x04)
	None FilmbackPresets; // 0x880(0x10)
	None LensPresets; // 0x890(0x10)
	None DefaultFilmbackPresetName; // 0x8a0(0x10)
	None DefaultFilmbackPreset; // 0x8b0(0x10)
	None DefaultLensPresetName; // 0x8c0(0x10)
	None DefaultLensFocalLength; // 0x8d0(0x04)
	None DefaultLensFStop; // 0x8d4(0x04)
	None PlaybackSettings; // 0x230(0x14)
	None SequencePlayer; // 0x248(0x08)
	None LevelSequence; // 0x250(0x18)
	None AdditionalEventReceivers; // 0x268(0x10)
	None CameraSettings; // 0x278(0x02)
	None BurnInOptions; // 0x280(0x08)
	None BindingOverrides; // 0x288(0x08)
	None bAutoPlay; // 0x290(0x01)
	None bOverrideInstanceData; // 0x290(0x01)
	None bReplicatePlayback; // 0x290(0x01)
	None DefaultInstanceData; // 0x298(0x08)
	None BurnInInstance; // 0x2a0(0x08)
	None bShowBurnin; // 0x2a8(0x01)
	None TransformOriginActor; // 0x30(0x08)
	None TransformOrigin; // 0x40(0x30)
	None MovieScene; // 0x348(0x08)
	None ObjectReferences; // 0x350(0x50)
	None BindingReferences; // 0x3a0(0xa0)
	None PossessedObjects; // 0x440(0x50)
	None DirectorClass; // 0x490(0x08)
	None bUseBurnIn; // 0x28(0x01)
	None BurnInClass; // 0x30(0x18)
	None Settings; // 0x48(0x08)
	None FrameInformation; // 0x238(0xb8)
	None LevelSequenceActor; // 0x2f0(0x08)
	None Player; // 0x28(0x08)
	None OnCameraCut; // 0x888(0x10)
	None Sequence; // 0x228(0x08)
	None MediaComponent; // 0x230(0x08)
	None ServerStartTimeSeconds; // 0x238(0x04)
	None DefaultCost; // 0x30(0x04)
	None FixedAreaEnteringCost; // 0x34(0x04)
	None DrawColor; // 0x38(0x04)
	None SupportedAgents; // 0x3c(0x04)
	None bSupportsAgent0; // 0x40(0x01)
	None bSupportsAgent1; // 0x40(0x01)
	None bSupportsAgent2; // 0x40(0x01)
	None bSupportsAgent3; // 0x40(0x01)
	None bSupportsAgent4; // 0x40(0x01)
	None bSupportsAgent5; // 0x40(0x01)
	None bSupportsAgent6; // 0x40(0x01)
	None bSupportsAgent7; // 0x40(0x01)
	None bSupportsAgent8; // 0x41(0x01)
	None bSupportsAgent9; // 0x41(0x01)
	None bSupportsAgent10; // 0x41(0x01)
	None bSupportsAgent11; // 0x41(0x01)
	None bSupportsAgent12; // 0x41(0x01)
	None bSupportsAgent13; // 0x41(0x01)
	None bSupportsAgent14; // 0x41(0x01)
	None bSupportsAgent15; // 0x41(0x01)
	None Areas; // 0x28(0x10)
	None IncludeFlags; // 0x38(0x04)
	None ExcludeFlags; // 0x3c(0x04)
	None bAttachToOwnersRoot; // 0xd4(0x01)
	None CachedNavParent; // 0xd8(0x08)
	None AreaClass; // 0xe0(0x08)
	None FailsafeExtent; // 0xe8(0x0c)
	None bIncludeAgentHeight; // 0xf4(0x01)
	None AreaClass; // 0x260(0x08)
	None RenderingComp; // 0x228(0x08)
	None NavDataConfig; // 0x230(0x78)
	None bEnableDrawing; // 0x2a8(0x01)
	None bForceRebuildOnLoad; // 0x2a8(0x01)
	None bAutoDestroyWhenNoNavigation; // 0x2a8(0x01)
	None bCanBeMainNavData; // 0x2a8(0x01)
	None bCanSpawnOnRebuild; // 0x2a8(0x01)
	None bRebuildAtRuntime; // 0x2a8(0x01)
	None RuntimeGeneration; // 0x2ac(0x01)
	None ObservedPathsTickInterval; // 0x2b0(0x04)
	None DataVersion; // 0x2b4(0x04)
	None SupportedAreas; // 0x398(0x10)
	None Agent0Area; // 0x48(0x08)
	None Agent1Area; // 0x50(0x08)
	None Agent2Area; // 0x58(0x08)
	None Agent3Area; // 0x60(0x08)
	None Agent4Area; // 0x68(0x08)
	None Agent5Area; // 0x70(0x08)
	None Agent6Area; // 0x78(0x08)
	None Agent7Area; // 0x80(0x08)
	None Agent8Area; // 0x88(0x08)
	None Agent9Area; // 0x90(0x08)
	None Agent10Area; // 0x98(0x08)
	None Agent11Area; // 0xa0(0x08)
	None Agent12Area; // 0xa8(0x08)
	None Agent13Area; // 0xb0(0x08)
	None Agent14Area; // 0xb8(0x08)
	None Agent15Area; // 0xc0(0x08)
	None CylinderCollision; // 0x80(0x10)
	None BoxCollision; // 0x90(0x10)
	None AreaClass; // 0xa0(0x08)
	None bGatherConvexGeometry; // 0xa8(0x01)
	None bCreateOnClient; // 0xa8(0x01)
	None Node; // 0x208(0x18)
	None NextNodeComponent; // 0x220(0x08)
	None PrevNodeComponent; // 0x228(0x08)
	None TileGenerationRadius; // 0xb0(0x04)
	None TileRemovalRadius; // 0xb4(0x04)
	None PathUpdatedNotifier; // 0x28(0x10)
	None PathPoints; // 0x38(0x10)
	None RecalculateOnInvalidation; // 0x48(0x01)
	None MainNavData; // 0x28(0x08)
	None AbstractNavData; // 0x30(0x08)
	None DefaultAgentName; // 0x38(0x08)
	None CrowdManagerClass; // 0x40(0x28)
	None bAutoCreateNavigationData; // 0x68(0x01)
	None bSpawnNavDataInNavBoundsLevel; // 0x68(0x01)
	None bAllowClientSideNavigation; // 0x68(0x01)
	None bShouldDiscardSubLevelNavData; // 0x68(0x01)
	None bTickWhilePaused; // 0x68(0x01)
	None bSupportRebuilding; // 0x68(0x01)
	None bInitialBuildingLocked; // 0x68(0x01)
	None bSkipAgentHeightCheckWhenPickingNavData; // 0x69(0x01)
	None DataGatheringMode; // 0x6c(0x01)
	None bGenerateNavigationOnlyAroundNavigationInvokers; // 0x70(0x01)
	None ActiveTilesUpdateInterval; // 0x74(0x04)
	None SupportedAgents; // 0x78(0x10)
	None SupportedAgentsMask; // 0x88(0x04)
	None NavDataSet; // 0x90(0x10)
	None NavDataRegistrationQueue; // 0xa0(0x10)
	None OnNavDataRegisteredEvent; // 0xc0(0x10)
	None OnNavigationGenerationFinishedDelegate; // 0xd0(0x10)
	None OperationMode; // 0x1bc(0x01)
	None DirtyAreasUpdateFreq; // 0x514(0x04)
	None bStrictlyStatic; // 0x50(0x01)
	None bCreateOnClient; // 0x50(0x01)
	None bAutoSpawnMissingNavData; // 0x50(0x01)
	None bSpawnNavDataInNavBoundsLevel; // 0x50(0x01)
	None CapsuleComponent; // 0x230(0x08)
	None InvokerComponent; // 0x238(0x08)
	None bActAsNavigationInvoker; // 0x240(0x01)
	None NavAgentProps; // 0x248(0x30)
	None QueryingExtent; // 0x278(0x0c)
	None MyNavData; // 0x288(0x08)
	None ProjectedLocation; // 0x290(0x0c)
	None bProjectedLocationValid; // 0x29c(0x01)
	None bSearchStart; // 0x29c(0x01)
	None CostLimitFactor; // 0x2a0(0x04)
	None MinimumCostLimit; // 0x2a4(0x04)
	None bBacktracking; // 0x2a8(0x01)
	None bUseHierarchicalPathfinding; // 0x2a8(0x01)
	None bGatherDetailedInfo; // 0x2a8(0x01)
	None bDrawDistanceToWall; // 0x2a8(0x01)
	None bShowNodePool; // 0x2a8(0x01)
	None bShowBestPath; // 0x2a8(0x01)
	None bShowDiffWithPreviousStep; // 0x2a8(0x01)
	None bShouldBeVisibleInGame; // 0x2a8(0x01)
	None CostDisplayMode; // 0x2ac(0x01)
	None TextCanvasOffset; // 0x2b0(0x08)
	None bPathExist; // 0x2b8(0x01)
	None bPathIsPartial; // 0x2b8(0x01)
	None bPathSearchOutOfNodes; // 0x2b8(0x01)
	None PathfindingTime; // 0x2bc(0x04)
	None PathCost; // 0x2c0(0x04)
	None PathfindingSteps; // 0x2c4(0x04)
	None OtherActor; // 0x2c8(0x08)
	None FilterClass; // 0x2d0(0x08)
	None ShowStepIndex; // 0x2d8(0x04)
	None OffsetFromCornersDistance; // 0x2dc(0x04)
	None Links; // 0x438(0x10)
	None NavLinkUserId; // 0xe8(0x04)
	None EnabledAreaClass; // 0xf0(0x08)
	None DisabledAreaClass; // 0xf8(0x08)
	None SupportedAgents; // 0x100(0x04)
	None LinkRelativeStart; // 0x104(0x0c)
	None LinkRelativeEnd; // 0x110(0x0c)
	None LinkDirection; // 0x11c(0x01)
	None bLinkEnabled; // 0x120(0x01)
	None bNotifyWhenEnabled; // 0x120(0x01)
	None bNotifyWhenDisabled; // 0x120(0x01)
	None bCreateBoxObstacle; // 0x120(0x01)
	None ObstacleOffset; // 0x124(0x0c)
	None ObstacleExtent; // 0x130(0x0c)
	None ObstacleAreaClass; // 0x140(0x08)
	None BroadcastRadius; // 0x148(0x04)
	None BroadcastInterval; // 0x14c(0x04)
	None BroadcastChannel; // 0x150(0x01)
	None SupportedAgents; // 0x258(0x04)
	None NavigationSystemConfig; // 0x220(0x08)
	None OverridePolicy; // 0x228(0x01)
	None bLoadOnClient; // 0x229(0x01)
	None bDrawTriangleEdges; // 0x400(0x01)
	None bDrawPolyEdges; // 0x400(0x01)
	None bDrawFilledPolys; // 0x400(0x01)
	None bDrawNavMeshEdges; // 0x400(0x01)
	None bDrawTileBounds; // 0x400(0x01)
	None bDrawPathCollidingGeometry; // 0x400(0x01)
	None bDrawTileLabels; // 0x400(0x01)
	None bDrawPolygonLabels; // 0x400(0x01)
	None bDrawDefaultPolygonCost; // 0x401(0x01)
	None bDrawLabelsOnPathNodes; // 0x401(0x01)
	None bDrawNavLinks; // 0x401(0x01)
	None bDrawFailedNavLinks; // 0x401(0x01)
	None bDrawClusters; // 0x401(0x01)
	None bDrawOctree; // 0x401(0x01)
	None bDrawOctreeDetails; // 0x401(0x01)
	None bDrawMarkedForbiddenPolys; // 0x401(0x01)
	None bDistinctlyDrawTilesBeingBuilt; // 0x402(0x01)
	None bDrawNavMesh; // 0x402(0x01)
	None DrawOffset; // 0x404(0x04)
	None bFixedTilePoolSize; // 0x408(0x01)
	None TilePoolSize; // 0x40c(0x04)
	None TileSizeUU; // 0x410(0x04)
	None CellSize; // 0x414(0x04)
	None CellHeight; // 0x418(0x04)
	None AgentRadius; // 0x41c(0x04)
	None AgentHeight; // 0x420(0x04)
	None AgentMaxHeight; // 0x424(0x04)
	None AgentMaxSlope; // 0x428(0x04)
	None AgentMaxStepHeight; // 0x42c(0x04)
	None MinRegionArea; // 0x430(0x04)
	None MergeRegionSize; // 0x434(0x04)
	None MaxSimplificationError; // 0x438(0x04)
	None MaxSimultaneousTileGenerationJobsCount; // 0x43c(0x04)
	None TileNumberHardLimit; // 0x440(0x04)
	None PolyRefTileBits; // 0x444(0x04)
	None PolyRefNavPolyBits; // 0x448(0x04)
	None PolyRefSaltBits; // 0x44c(0x04)
	None NavMeshOriginOffset; // 0x450(0x0c)
	None DefaultDrawDistance; // 0x45c(0x04)
	None DefaultMaxSearchNodes; // 0x460(0x04)
	None DefaultMaxHierarchicalSearchNodes; // 0x464(0x04)
	None RegionPartitioning; // 0x468(0x01)
	None LayerPartitioning; // 0x469(0x01)
	None RegionChunkSplits; // 0x46c(0x04)
	None LayerChunkSplits; // 0x470(0x04)
	None bSortNavigationAreasByCost; // 0x474(0x01)
	None bPerformVoxelFiltering; // 0x474(0x01)
	None bMarkLowHeightAreas; // 0x474(0x01)
	None bFilterLowSpanSequences; // 0x474(0x01)
	None bFilterLowSpanFromTileCache; // 0x474(0x01)
	None bDoFullyAsyncNavDataGathering; // 0x474(0x01)
	None bUseBetterOffsetsFromCorners; // 0x474(0x01)
	None bStoreEmptyTileLayers; // 0x474(0x01)
	None bUseVirtualFilters; // 0x475(0x01)
	None bAllowNavLinkAsPathEnd; // 0x475(0x01)
	None bUseVoxelCache; // 0x475(0x01)
	None TileSetUpdateInterval; // 0x478(0x04)
	None HeuristicScale; // 0x47c(0x04)
	None VerticalDeviationFromGroundCompensation; // 0x480(0x04)
	None UberGraphFrame; // 0x238(0x08)
	None Cycle; // 0x240(0x08)
	None Section1; // 0x248(0x08)
	None Section2; // 0x250(0x08)
	None Section3; // 0x258(0x08)
	None Section4; // 0x260(0x08)
	None Section5; // 0x268(0x08)
	None Section6; // 0x270(0x08)
	None HeaderText; // 0x28(0x18)
	None CalloutCards; // 0x40(0x10)
	None GuidedCalloutsTable; // 0x28(0x08)
	None bIsUIOnlyWidget; // 0x4c0(0x01)
	None bIsExclusiveMenuWidget; // 0x4c1(0x01)
	None AmbientSoundRtpc; // 0x4c4(0x04)
	None TickAnimations; // 0x4c8(0x08)
	None ViewportEvent; // 0x4d0(0x10)
	None bSubstituteKillCamWorld; // 0x4e0(0x01)
	None bSubstituteKillCamOwningPlayer; // 0x4e1(0x01)
	None bWantsKillCamCallbacks; // 0x4e2(0x01)
	None OpacityWhenAiming; // 0x500(0x04)
	None DoesFadeOutWhenAiming; // 0x504(0x01)
	None AimTransitionProgress; // 0x508(0x04)
	None IsBusy; // 0x520(0x01)
	None NumInQueue; // 0x524(0x04)
	None OnAccoladeReceived; // 0x528(0x10)
	None OnAccoladeUpdateMultiplier; // 0x538(0x10)
	None HeaderOverridesTable; // 0x520(0x08)
	None HeaderOverridesFromJson; // 0x528(0x50)
	None EventLookupTable; // 0x520(0x08)
	None BoundPlayerMod; // 0x550(0x08)
	None EquipmentWidgets; // 0x540(0x50)
	None ActiveWeaponSlot; // 0x5b0(0x04)
	None EquipPointsToIgnore; // 0x5b8(0x20)
	None bDelayClearUntilNextTick; // 0x5d8(0x01)
	None WeakActiveWeaponComponentPtr; // 0x5dc(0x08)
	None ActivitiesToCheck; // 0x28(0x10)
	None ActivityProgressMilestone; // 0x38(0x10)
	None ActivityProgressMilestoneSetting; // 0x48(0x10)
	None IncrementActivityProgressBeforeCheck; // 0x58(0x01)
	None bDrawAimAssistBoundary; // 0x238(0x01)
	None bDrawHeadAimCorrectionBoundary; // 0x239(0x01)
	None bDrawTargetInfo; // 0x23a(0x01)
	None bDoesIconRotate; // 0x238(0x01)
	None MarkerAnchorHeight; // 0x23c(0x04)
	None HeightThreshold; // 0x240(0x04)
	None CachedRawMetersAway; // 0x248(0x04)
	None UniqueId; // 0x24c(0x04)
	None CreatingPlayer; // 0x250(0x08)
	None ParentMapDisplayType; // 0x258(0x01)
	None AssociatedActor; // 0x25c(0x08)
	None AssociatedObject; // 0x264(0x08)
	None DefaultLocation; // 0x26c(0x0c)
	None Lifespan; // 0x278(0x04)
	None ParentMapWidget; // 0x27c(0x08)
	None ScreenMargins; // 0x284(0x08)
	None CenterPercentageWidth; // 0x28c(0x04)
	None CenterPercentageHeight; // 0x290(0x04)
	None OpacityWhenAiming; // 0x294(0x04)
	None DoesFadeOutWhenAiming; // 0x298(0x01)
	None AimTransitionOpacity; // 0x29c(0x04)
	None IconOffset; // 0x2a0(0x0c)
	None HoverDelaySeconds; // 0x2c4(0x04)
	None OnMapIconWidgetReady; // 0x2e0(0x10)
	None OnMapIconWidgetRemove; // 0x2f0(0x10)
	None bIsWidgetPool; // 0x300(0x01)
	None WidgetPoolName; // 0x308(0x10)
	None ArrowWidget; // 0x318(0x08)
	None NameOrStatusWidget; // 0x320(0x08)
	None DownedSectionWidget; // 0x328(0x08)
	None OnGameModeModActivationChanged; // 0x330(0x10)
	None CachedAmmoInClip; // 0x528(0x04)
	None CachedClipSize; // 0x52c(0x04)
	None CachedInReserve; // 0x530(0x04)
	None CachedIsReloading; // 0x534(0x01)
	None OnEndDisplay; // 0x520(0x10)
	None AnnouncementData; // 0x530(0x38)
	None IsBusy; // 0x520(0x01)
	None OnReadyForNextAnnouncement; // 0x528(0x10)
	None bTrackPersistentPlayerData; // 0x520(0x01)
	None bTrackRelevantPlayerStates; // 0x521(0x01)
	None TeamState; // 0x524(0x08)
	None AutoTeamType; // 0x550(0x01)
	None TeamNumber; // 0x554(0x04)
	None BaseBundleButton; // 0x530(0x08)
	None EliteBundleButton; // 0x538(0x08)
	None ConfirmPurchaseButton; // 0x540(0x08)
	None CurrencySummary; // 0x548(0x08)
	None BattlepassTimeRemaining; // 0x550(0x08)
	None ConfirmationBundleName; // 0x558(0x08)
	None background; // 0x560(0x08)
	None ShadeOverlay; // 0x568(0x08)
	None OutfitsModule; // 0x570(0x08)
	None WingsuitModule; // 0x578(0x08)
	None WeaponWrapModule; // 0x580(0x08)
	None ChaseModule; // 0x588(0x08)
	None SmokeModule; // 0x590(0x08)
	None CurrencyModule; // 0x598(0x08)
	None PurchasingTimeoutTime; // 0x5a8(0x04)
	None bCanAfford; // 0x530(0x01)
	None GamepadPromptHolder; // 0x538(0x08)
	None DiscountBanner; // 0x540(0x08)
	None DiscountPercentageDisplay; // 0x548(0x08)
	None ButtonText; // 0x550(0x08)
	None AdditionalLevelsText; // 0x558(0x08)
	None PriceTag; // 0x560(0x08)
	None ButtonSwitcher; // 0x568(0x08)
	None StoreItem; // 0x570(0x08)
	None IsCurrentlyHovered; // 0x578(0x01)
	None CurrentItemDetails; // 0x520(0x10)
	None ShrinkAnimationTime; // 0x5e8(0x04)
	None BlockedShotIconMaxScale; // 0x5ec(0x04)
	None BlockedShotIconMinScale; // 0x5f0(0x04)
	None BlockedShotMinScaleSqDist; // 0x5f4(0x04)
	None bGrenadeCooking; // 0x5f8(0x01)
	None bInADS; // 0x5f9(0x01)
	None bCachedBlockIconVisible; // 0x5fa(0x01)
	None CachedWeaponAccuracy; // 0x5fc(0x04)
	None CachedReticleOffset; // 0x600(0x04)
	None OnContextOptionsUpdated; // 0x520(0x10)
	None OnReportPlayer; // 0x530(0x10)
	None MenuContext; // 0x540(0x01)
	None bAllowReportPlayer; // 0x541(0x01)
	None CurrentPlayerInfo; // 0x548(0x08)
	None ContextMenuButtons; // 0x550(0x10)
	None MenuViewSide; // 0x560(0x01)
	None CachedQueuedOrInMatch; // 0x564(0x04)
	None bCachedReportedPlayer; // 0x568(0x01)
	None ContextOption; // 0x520(0x01)
	None OnPingRemovedCalled; // 0x318(0x10)
	None OnPingChangedCalled; // 0x328(0x10)
	None CurrentPingInfo; // 0x338(0xb0)
	None PingManager; // 0x3e8(0x08)
	None CosmeticItem; // 0x28(0x08)
	None StoreItem; // 0x30(0x08)
	None AssociatedJobItem; // 0x38(0x08)
	None MercCosmeticSlot; // 0x40(0x01)
	None WeaponSlot; // 0x41(0x01)
	None SlotPosition; // 0x44(0x04)
	None NavigatedFromNews; // 0x48(0x01)
	None RogueCustomizationRelatedInfos; // 0x528(0x10)
	None ActiveCosmeticSlots; // 0x538(0x10)
	None TabIndex; // 0x548(0x04)
	None ChallengeTimerRefreshRate; // 0x520(0x04)
	None OnPlayersUpdated; // 0x28(0x10)
	None OnHeaderUpdated; // 0x38(0x10)
	None OnMessageUpdated; // 0x48(0x10)
	None SortedPlayerList; // 0xd0(0x10)
	None OnDataUpdate; // 0x28(0x10)
	None Info; // 0x38(0x08)
	None DebugCommands; // 0x520(0x10)
	None UpdatePeriod; // 0x238(0x04)
	None bMarkedFinished; // 0x23c(0x01)
	None TimeUntilNextUpdate; // 0x240(0x04)
	None DurationBarClass; // 0x550(0x08)
	None DurationBars; // 0x558(0x10)
	None OnKeyDown; // 0xa30(0x10)
	None haveRecieveMatchReport; // 0x4c(0x01)
	None OnRewardsRecieved; // 0x100(0x10)
	None OnProgressionRecieved; // 0x110(0x10)
	None CosmeticItem; // 0x28(0x08)
	None HeaderText; // 0x30(0x18)
	None DescText; // 0x48(0x18)
	None EquipAllCompletedCallback; // 0x60(0x10)
	None EquipType; // 0x70(0x01)
	None SlotType; // 0x74(0x04)
	None SlotPosition; // 0x78(0x04)
	None WeaponToEquipTo; // 0x80(0x08)
	None EquipAllData; // 0x520(0x08)
	None bIsWaitingForNextQueue; // 0x550(0x01)
	None OnLerpComplete; // 0x238(0x10)
	None LerpTime; // 0x248(0x04)
	None LerpPower; // 0x24c(0x04)
	None OnUpdateRecentlyPlayedPlayers; // 0x128(0x10)
	None MapDisplayType; // 0x520(0x01)
	None bWasVisible; // 0x521(0x01)
	None LastUpdateFrame; // 0x528(0x08)
	None MapIconWidgetsToPool; // 0x530(0x10)
	None MapIconWidgetPool; // 0x540(0x10)
	None MapIconWidgetPoolShown; // 0x550(0x10)
	None PlayerIconMap; // 0x5b0(0x50)
	None AbsoluteRotation; // 0x640(0x01)
	None CanBeScrambled; // 0x641(0x01)
	None IsScrambled; // 0x642(0x01)
	None bAffectedByScramble; // 0x643(0x01)
	None MinimapRendererActor; // 0x648(0x08)
	None MinimapWidth; // 0x650(0x04)
	None OnPreferredSiteUpdated; // 0x5a0(0x10)
	None LoginDataFactory; // 0x5b0(0x08)
	None SettingsFactory; // 0x5b8(0x08)
	None ChatDataFactory; // 0x5c0(0x08)
	None PartyDataFactory; // 0x5c8(0x08)
	None NPEDataFactory; // 0x5d0(0x08)
	None PlayerDataFactory; // 0x5d8(0x08)
	None bDisplayWatermark; // 0x5e0(0x01)
	None WatermarkAlpha; // 0x5e4(0x04)
	None WatermarkOffsetLeft; // 0x5e8(0x04)
	None WatermarkOffsetTop; // 0x5ec(0x04)
	None WatermarkOffsetRight; // 0x5f0(0x04)
	None WatermarkOffsetBottom; // 0x5f4(0x04)
	None WatermarkChangePositionTime; // 0x5f8(0x04)
	None ColorPaletteDT; // 0x600(0x08)
	None FontPaletteDT; // 0x608(0x08)
	None CrosshairColorOptions; // 0x610(0x08)
	None AimAssistDebugWidgetClass; // 0x620(0x08)
	None AimAssistDebugWidget; // 0x628(0x08)
	None BaseAssetDataTables; // 0x630(0x10)
	None AssetDataTableManager; // 0x640(0x08)
	None SkinObject; // 0x648(0x08)
	None HUDStateTracker; // 0x650(0x08)
	None OnHudFubarDel; // 0x6a8(0x10)
	None CachedHealth; // 0x540(0x04)
	None CachedArmor; // 0x544(0x04)
	None CachedMaxHealth; // 0x548(0x04)
	None CachedOverheal; // 0x54c(0x04)
	None WidgetName; // 0x278(0x08)
	None bCanScale; // 0x280(0x01)
	None bCanSetOpacity; // 0x281(0x01)
	None bCanBeInvisible; // 0x282(0x01)
	None HudEditor; // 0x288(0x08)
	None OnSettingValueChanged; // 0x28(0x10)
	None OnSettingPreviewChanged; // 0x38(0x10)
	None bIsAutoApplied; // 0x48(0x01)
	None bIsAutoSaved; // 0x49(0x01)
	None TextOptions; // 0xd0(0x10)
	None OnTextOptionsChanged; // 0xe0(0x10)
	None MinValue; // 0xf0(0x04)
	None MaxValue; // 0xf4(0x04)
	None StepValue; // 0xf8(0x04)
	None bRoundValue; // 0xfc(0x01)
	None RoundToNearest; // 0x100(0x04)
	None bIsPercent; // 0x104(0x01)
	None InRange; // 0x108(0x08)
	None OutRange; // 0x110(0x08)
	None PropertyName; // 0x118(0x08)
	None ActiveWidget; // 0x120(0x08)
	None SettingsInfoList; // 0x520(0x10)
	None SelectedHudEditableWidget; // 0x530(0x08)
	None CurrentHighlightedWidget; // 0x520(0x08)
	None EditorPropertiesPanel; // 0x528(0x08)
	None DefaultHighlightedWidgetName; // 0x530(0x08)
	None bIsLayoutDirty; // 0x38(0x01)
	None HudEditableData; // 0x40(0x10)
	None OnHUDMatchPhaseChanged; // 0x28(0x10)
	None PhaseTime; // 0x38(0x04)
	None TrackedCurrentMatchPhase; // 0x3c(0x14)
	None bAutoBindJobSelector; // 0x520(0x01)
	None bWaitForPlayerToBecomeRelevant; // 0x521(0x01)
	None bBindToTasksChangedEvent; // 0x522(0x01)
	None bBindToPendingTasksChangedEvent; // 0x523(0x01)
	None bBindToPersonalTaskChangedEvent; // 0x524(0x01)
	None bBindToChoicesChangedEvent; // 0x525(0x01)
	None bBindToTaskCompletedEvent; // 0x526(0x01)
	None bBindToAllPersonalTasksCompletedEvent; // 0x527(0x01)
	None bBindToEndJobSelectionEvent; // 0x528(0x01)
	None JobSelector; // 0x52c(0x08)
	None CachedBanTasks; // 0x548(0x10)
	None CachedCaptainTask; // 0x548(0x48)
	None CachedCaptainPlayerData; // 0x590(0x08)
	None CachedCaptainId; // 0x598(0x10)
	None GridPanel; // 0x548(0x08)
	None ChoiceWidgetClass; // 0x550(0x08)
	None PaddingWidgetClass; // 0x558(0x08)
	None GridWidth; // 0x560(0x04)
	None ActiveChoiceWidgets; // 0x568(0x10)
	None ActivePaddingWidgets; // 0x578(0x10)
	None OnChoiceWidgetHovered; // 0x588(0x10)
	None OnChoiceWidgetUnhovered; // 0x598(0x10)
	None OnChoiceGridRebuilt; // 0x5a8(0x10)
	None HitTargets; // 0x568(0x10)
	None LocalJob; // 0x578(0x08)
	None CachedCompletedTasks; // 0x548(0x10)
	None CachedActiveTask; // 0x558(0x48)
	None bCachedActiveTaskPendingComplete; // 0x5a0(0x01)
	None PlayerData; // 0x5a8(0x08)
	None CachedDisplayText; // 0x548(0x18)
	None CachedDisplayTimerId; // 0x560(0x01)
	None CachedTimerState; // 0x561(0x01)
	None CachedPrimaryTask; // 0x568(0x48)
	None TimerUpdatePeriod; // 0x5b0(0x04)
	None DisplayDuration; // 0x520(0x04)
	None OnMinuteTimerUpdate; // 0x628(0x10)
	None QueueDataFactory; // 0x648(0x08)
	None FriendDataFactory; // 0x650(0x08)
	None PlayerQueryDataFactory; // 0x658(0x08)
	None EMODataFactory; // 0x660(0x08)
	None PlayerWhoDataFactory; // 0x668(0x08)
	None CurrentMediaPlayerWidget; // 0x670(0x08)
	None OnTriggerBlockerChange; // 0x680(0x10)
	None LobbyWidgetReady; // 0x690(0x10)
	None LoadingScreenFadeInDelay; // 0x6a4(0x04)
	None LoadingScreenFadeInDuration; // 0x6a8(0x04)
	None OnLoginRewardsReady; // 0x520(0x10)
	None LoginRewardItems; // 0x530(0x10)
	None nDefaultItemsPerRow; // 0x540(0x04)
	None MarkedLootSite; // 0x318(0x08)
	None MarkedLootSite; // 0x318(0x08)
	None MaxDisplayDistance; // 0x320(0x04)
	None bViewedPawnHasEndedFreeFall; // 0x324(0x01)
	None TagsToHide; // 0x328(0x10)
	None LowAmmoThreshold; // 0x5e8(0x04)
	None CachedLowAmmoState; // 0x5ec(0x01)
	None OnAmmoStateChangedDel; // 0x5f0(0x10)
	None PoolType; // 0x28(0x10)
	None MapIconWidgets; // 0x38(0x10)
	None Title; // 0x28(0x18)
	None ButtonLabel; // 0x40(0x18)
	None OnShouldShow; // 0x58(0x10)
	None OnClose; // 0x68(0x10)
	None OnGetIsSelected; // 0x78(0x10)
	None OnSelect; // 0x88(0x10)
	None OnSelect; // 0x78(0x10)
	None SelectedPlayers; // 0x520(0x10)
	None RouteData; // 0x530(0x08)
	None InvitationExpireTimeout; // 0x528(0x08)
	None FinalResultEndTime; // 0x52c(0x04)
	None RoundResultAnnoucement; // 0x530(0x20)
	None pTeamNum; // 0x550(0x04)
	None pOpposeTeamNum; // 0x554(0x04)
	None pTeamScore; // 0x558(0x04)
	None pOpposeTeamScore; // 0x55c(0x04)
	None bIsEndOfMatch; // 0x560(0x01)
	None bMatchEndedInSurrender; // 0x561(0x01)
	None MediaPlayerPlaylistEntries; // 0x520(0x08)
	None bOnlyWatchFirstEntry; // 0x538(0x01)
	None MilestoneEntries; // 0x28(0x10)
	None WeaponKeys; // 0x38(0x10)
	None WeaponXpCounts; // 0x48(0x50)
	None WeaponMasteryMeter; // 0x520(0x08)
	None PopulatedWeapon; // 0x528(0x08)
	None CurrentMilestoneData; // 0x530(0x08)
	None MinimapRepresentedWidth; // 0x648(0x04)
	None BackgroundWidth; // 0x64c(0x04)
	None ClampStyle; // 0x650(0x01)
	None OnNavTabSelected; // 0x520(0x10)
	None OnNavTabUnselected; // 0x530(0x10)
	None bSelected; // 0x540(0x01)
	None bDisabled; // 0x541(0x01)
	None NavText; // 0x548(0x18)
	None Image; // 0x80(0x08)
	None Header; // 0x88(0x18)
	None Body; // 0xa0(0x18)
	None PanelAction; // 0xb8(0x01)
	None ActionDetails; // 0xc0(0x10)
	None JsonSection; // 0x520(0x10)
	None TimePerSection; // 0x530(0x04)
	None Image; // 0x80(0x08)
	None RedirectViewName; // 0x28(0x08)
	None ViewsTable; // 0x520(0x08)
	None ViewNames; // 0x528(0x10)
	None CurrentViewName; // 0x538(0x08)
	None MyViewRouteName; // 0x590(0x08)
	None OnEmoteMessageReceived; // 0x1a8(0x10)
	None CachedDisplayedPartyMembers; // 0x520(0x10)
	None OnPerkHovered; // 0x520(0x10)
	None OnPerkSelected; // 0x530(0x10)
	None OnPerkUnlockRequest; // 0x540(0x10)
	None HoverTarget; // 0x550(0x08)
	None bTopEnabled; // 0x520(0x01)
	None bLeftEnabled; // 0x521(0x01)
	None bDiagonalEnabled; // 0x522(0x01)
	None bBackDiagonalEnabled; // 0x523(0x01)
	None AccentColor; // 0x524(0x10)
	None AssignedPerk; // 0x520(0x28)
	None OnTreeNodeHovered; // 0x548(0x10)
	None OnTreeNodeSelected; // 0x558(0x10)
	None OnRequestPerkPurchase; // 0x568(0x10)
	None bIsPlaceholder; // 0x578(0x01)
	None NodeState; // 0x579(0x01)
	None HoldReapply; // 0x558(0x04)
	None bWantsRepply; // 0x55c(0x01)
	None TeamPlayerData; // 0x560(0x10)
	None PendingAmmoWidgetClass; // 0x538(0x28)
	None LoadedAmmoWidgetClass; // 0x560(0x08)
	None AssignedPlayerInfo; // 0x520(0x08)
	None PlayerStatsManager; // 0xb0(0x08)
	None OnPlayerLevelChanged; // 0xb8(0x10)
	None CurrentHealthMeterState; // 0x568(0x18)
	None JobEntry; // 0x28(0x28)
	None StoreItem; // 0x50(0x08)
	None AllowIfUnowned; // 0x58(0x01)
	None JobSelectionManager; // 0x520(0x08)
	None JobSelectionComponent; // 0x528(0x08)
	None JobDetailEntries; // 0x530(0x10)
	None CurrentPlayerSelectionState; // 0x540(0x01)
	None EnemyJobDetailsEntries; // 0x548(0x10)
	None BoundEnemyJobSelectionComponent; // 0x558(0x08)
	None BoundLocalJobSelectionComponent; // 0x560(0x08)
	None CheckTimerHandle; // 0x138(0x08)
	None PlayerShop; // 0x528(0x08)
	None DisplayedPlayerStats; // 0x520(0x10)
	None DisplayedRogueStats; // 0x530(0x10)
	None PlayerProgressionData; // 0x520(0x170)
	None StoreItem; // 0x28(0x08)
	None PurchaseQuantity; // 0x30(0x04)
	None ExternalTransactionId; // 0x38(0x10)
	None PurchaseCompletedCallback; // 0x48(0x10)
	None StoreSectionItem; // 0x58(0x08)
	None EquipOnPurchase; // 0x58(0x08)
	None AssociatedWeaponAsset; // 0x58(0x08)
	None PurchaseItem; // 0x520(0x08)
	None PurchaseQuantity; // 0x528(0x04)
	None PurchaseRequestData; // 0x530(0x08)
	None OnSetQueueId; // 0x248(0x10)
	None OnQueueErrorRelevantStateChanged; // 0x258(0x10)
	None ChunksInstallingQueueId; // 0x268(0x04)
	None DefaultQueueId; // 0x26c(0x04)
	None CancelJoinMatchDelay; // 0x270(0x04)
	None OnSetQueueInputState; // 0x278(0x10)
	None PreviousCustomMatchMemberIds; // 0x288(0x10)
	None SelectedQueueId; // 0x298(0x04)
	None TimeoutForSwitchFromShelteredToMainQueue; // 0x29c(0x04)
	None bWaitingOnLeaveForShelteredSwitch; // 0x2a0(0x01)
	None bWaitingOnJoinForShelteredSwitch; // 0x2a1(0x01)
	None MaxRetriesForAlternateQueue; // 0x2a4(0x04)
	None TimeBetweenRetriesForAlternateQueue; // 0x2a8(0x04)
	None RetryingDisplayTime; // 0x2ac(0x04)
	None bRetryingViaAutoRejoin; // 0x2b0(0x01)
	None NumRetriesForAlternateQueue; // 0x2c4(0x04)
	None MapInfos; // 0x2c8(0x10)
	None QueueDetailDataTable; // 0x2d8(0x08)
	None OnSelectedQueueChanged; // 0x520(0x10)
	None CanCurrentlyJoinQueue; // 0x530(0x01)
	None CanControlQueue; // 0x531(0x01)
	None DefaultSelectedQueueId; // 0x534(0x04)
	None ChunksInstallingQueueId; // 0x538(0x04)
	None ReadyForQueueing; // 0x550(0x01)
	None CurrentSelectedQueue; // 0x558(0xd8)
	None EmoteSlots; // 0x520(0x10)
	None QuipSlots; // 0x530(0x10)
	None CommunicationSlots; // 0x540(0x10)
	None SpraySlots; // 0x550(0x10)
	None AdditionalInputsToDisableOnOpen; // 0x560(0x10)
	None RadialMenuCosmeticSlots; // 0x570(0x10)
	None bCycleBetweenMenusEnabled; // 0x580(0x01)
	None RadialWheelActivationMode; // 0x589(0x01)
	None ShrinkAnimationTime; // 0x538(0x04)
	None BlockedShotIconMaxScale; // 0x53c(0x04)
	None BlockedShotIconMinScale; // 0x540(0x04)
	None BlockedShotMinScaleSqDist; // 0x544(0x04)
	None bGrenadeCooking; // 0x548(0x01)
	None bInADS; // 0x549(0x01)
	None bCachedBlockIconVisible; // 0x54a(0x01)
	None CachedWeaponAccuracy; // 0x54c(0x04)
	None CachedReticleOffset; // 0x550(0x04)
	None MaxPageCount; // 0x520(0x04)
	None CurrentPage; // 0x524(0x04)
	None ItemButtons; // 0x528(0x10)
	None ActivityInstance; // 0x538(0x08)
	None Acquisition; // 0x540(0x08)
	None WeaponHubHelper; // 0x520(0x08)
	None RogueDetailsScreen; // 0x568(0x08)
	None ViewedJobItem; // 0x570(0x28)
	None GuidedMenuCalloutRedirectorClass; // 0x598(0x08)
	None GuidedMenuCalloutRedirector; // 0x5a0(0x08)
	None ContextualPingTypesDT; // 0x520(0x08)
	None ContextualPingMessagesDT; // 0x528(0x08)
	None bHideWhenOffscreen; // 0x318(0x01)
	None OffscreenMargins; // 0x31c(0x08)
	None SettingsWidgets; // 0x520(0x10)
	None AssociatePreviewWidget; // 0x530(0x08)
	None ContainerConfigAsset; // 0x538(0x08)
	None ColorOptions; // 0x30(0x10)
	None bIsAvailableOffline; // 0x30(0x01)
	None bRequires120HzDisplay; // 0x31(0x01)
	None AllowedPlatformTypes; // 0x32(0x0a)
	None RequiredInputTypes; // 0x3c(0x03)
	None RequiredExperiment; // 0x40(0x10)
	None SwitchDockedModeSetting; // 0x50(0x02)
	None bUsePreview; // 0x52(0x01)
	None PreviewWidget; // 0x58(0x08)
	None WidgetConfigs; // 0x60(0x10)
	None SettingName; // 0x70(0x18)
	None SettingNameByPlatform; // 0x88(0x50)
	None SettingDescription; // 0xd8(0x18)
	None SettingDescriptionByPlatform; // 0xf0(0x50)
	None SettingsGroups; // 0x30(0x10)
	None Heading; // 0x40(0x18)
	None HeadingByPlatform; // 0x58(0x50)
	None SettingsSectionConfigs; // 0x30(0x10)
	None PageName; // 0x40(0x18)
	None HeadingByPlatform; // 0x58(0x50)
	None SettingsPageConfigs; // 0x30(0x10)
	None OnSettingsReceivedFromPlayerAccount; // 0xe0(0x10)
	None OnKeyBindSettingsApplied; // 0x190(0x10)
	None OnKeyBindSettingsSaved; // 0x1a0(0x10)
	None BoolSettingPropertyIds; // 0x1b0(0x10)
	None IntSettingPropertyIds; // 0x210(0x10)
	None FloatSettingPropertyIds; // 0x270(0x10)
	None KSSettingsMenuConfigAssetSoftObjectPtr; // 0x330(0x28)
	None KSSettingsMenuConfigAsset; // 0x358(0x08)
	None OnDisplayLanguageApplied; // 0x370(0x10)
	None OnDisplayLanguageSaved; // 0x380(0x10)
	None OnScreenResolutionApplied; // 0x390(0x10)
	None OnScreenResolutionSaved; // 0x3a0(0x10)
	None SettingsContainers; // 0x520(0x10)
	None SettingsContainerClass; // 0x530(0x08)
	None GroupConfig; // 0x538(0x18)
	None PrimaryKeyBindInfo; // 0x108(0x10)
	None GamepadKeyBindInfo; // 0x118(0x10)
	None KSSettingType; // 0x108(0x01)
	None Name; // 0x10c(0x08)
	None ColorOptions; // 0x118(0x08)
	None MobilePerformanceOptions; // 0x108(0x10)
	None SettingsState; // 0x520(0x05)
	None SettingsPages; // 0x528(0x10)
	None SettingsPageClass; // 0x538(0x08)
	None MenuConfigAsset; // 0x540(0x08)
	None SettingsSections; // 0x520(0x10)
	None SettingsSectionClass; // 0x530(0x08)
	None PageConfigAsset; // 0x538(0x08)
	None OnPreviewValueChanged; // 0x520(0x10)
	None SettingsInfo; // 0x530(0x08)
	None SettingsGroups; // 0x520(0x10)
	None SettingsGroupClass; // 0x530(0x08)
	None SectionConfigAsset; // 0x538(0x08)
	None WidgetConfig; // 0x520(0x10)
	None WidgetContainerTitle; // 0x530(0x18)
	None WidgetContainerDescription; // 0x548(0x18)
	None bHasPreview; // 0x560(0x01)
	None WidgetContainerPreviewWidget; // 0x568(0x08)
	None SettingsInfo; // 0x570(0x08)
	None OnShopSelection; // 0x520(0x10)
	None OnShopViewItemDetails; // 0x530(0x10)
	None OnItemSelected; // 0x540(0x10)
	None OnItemViewDetails; // 0x550(0x10)
	None ActiveShopSlot; // 0x560(0x01)
	None OnDataReady; // 0x520(0x10)
	None OnPlayerCardClicked; // 0x530(0x10)
	None OnSocialHeaderClicked; // 0x540(0x10)
	None TreeView; // 0x550(0x08)
	None DataSource; // 0x558(0x08)
	None CategoriesList; // 0x570(0x10)
	None CategoryData; // 0x580(0x10)
	None Parent; // 0x590(0x08)
	None OnDataChanged; // 0x520(0x10)
	None CategoriesList; // 0x530(0x10)
	None PlayerCategoryMap; // 0x548(0x50)
	None PlayersToUpdate; // 0x598(0x10)
	None UnusedEntries; // 0x5b0(0x10)
	None OnOpen; // 0x580(0x10)
	None OnClose; // 0x590(0x10)
	None CachedPartyDataFactory; // 0x520(0x08)
	None Orientation; // 0x158(0x01)
	None OnSortCompareChildrenEvent; // 0x15c(0x10)
	None OnSortCompareChildrenEvent; // 0x138(0x10)
	None StoreItem; // 0x28(0x08)
	None IsNew; // 0x30(0x01)
	None DisplaySaleTag; // 0x31(0x01)
	None HasBeenSeen; // 0x32(0x01)
	None CustomBannerText; // 0x38(0x18)
	None StorePanelItems; // 0x28(0x10)
	None column; // 0x38(0x04)
	None Row; // 0x3c(0x04)
	None WidgetType; // 0x40(0x01)
	None CurrentlyViewedItem; // 0x48(0x08)
	None SectionItems; // 0x28(0x10)
	None SectionType; // 0x38(0x01)
	None OnTargetChanged; // 0x328(0x10)
	None OnModUsed; // 0x338(0x10)
	None CurrentTarget; // 0x348(0x08)
	None TargetModInst; // 0x350(0x08)
	None Targeter; // 0x358(0x10)
	None RadialMenuItemsToShowInChat; // 0x520(0x10)
	None ActiveChatChannelsDirty; // 0x530(0x01)
	None ActiveChatChannels; // 0x538(0x10)
	None CurrentChatChannelIndex; // 0x548(0x04)
	None OnCurrentChatChannelChanged; // 0x550(0x10)
	None OnToastReceived; // 0x520(0x10)
	None MaxToastNotification; // 0x530(0x04)
	None CurrentToastCount; // 0x534(0x04)
	None IsBusy; // 0x538(0x01)
	None ToastQueue; // 0x540(0x10)
	None PostMatchToasts; // 0x550(0x10)
	None bAlwaysShowQuickMelee; // 0x520(0x01)
	None bIsInEditMode; // 0x521(0x01)
	None QuickMeleeWeaponAsset; // 0x528(0x08)
	None ThrowGrenadeButton; // 0x530(0x08)
	None QuickMeleeButton; // 0x538(0x08)
	None AbilityButton; // 0x540(0x08)
	None MyAimDownSightsWidget; // 0x548(0x08)
	None MyAutoSprintWidget; // 0x550(0x08)
	None AimDownSightsEnableIcon; // 0x558(0x08)
	None AimDownSightsCancelIcon; // 0x560(0x08)
	None AutoSprintEnableIcon; // 0x568(0x08)
	None AutoSprintCancelIcon; // 0x570(0x08)
	None ContextualPingButton; // 0x578(0x08)
	None PrimaryWeaponSwitcher; // 0x580(0x08)
	None MyHud; // 0x3d8(0x08)
	None BackToScreenSound; // 0x28(0x08)
	None ErrorSound; // 0x30(0x08)
	None ScreenTransitionSound; // 0x38(0x08)
	None ButtonClicked; // 0x28(0x08)
	None ButtonHovered; // 0x30(0x08)
	None ButtonUnhovered; // 0x38(0x08)
	None ScrollClicked; // 0x28(0x08)
	None ScrollHovered; // 0x30(0x08)
	None ScrollUnhovered; // 0x38(0x08)
	None ScrollingSound; // 0x40(0x08)
	None ShopOpen; // 0x28(0x08)
	None ShopClose; // 0x30(0x08)
	None PurchaseSucceeded; // 0x38(0x08)
	None PurchaseFailed; // 0x40(0x08)
	None FriendToast; // 0x28(0x08)
	None PartyToast; // 0x30(0x08)
	None ErrorToast; // 0x38(0x08)
	None InfoToast; // 0x40(0x08)
	None UpdateViewLimitPosition; // 0x558(0x01)
	None ViewLimitPosition; // 0x55c(0x08)
	None StackingWait; // 0x550(0x04)
	None TetherToEventLocation; // 0x554(0x01)
	None MaxNumDamageWidgetsOnScreen; // 0x558(0x04)
	None DamageNumberContainer; // 0x560(0x08)
	None SpecialDamageTypes; // 0x568(0x50)
	None CurrentDamageNumbersOnScreen; // 0x5b8(0x10)
	None DamageNumbersPool; // 0x5c8(0x10)
	None OnNumberAnimationComplete; // 0x238(0x10)
	None DamageTarget; // 0x248(0x08)
	None InitialDamageLocation; // 0x250(0x0c)
	None TetherToEventLocation; // 0x25c(0x01)
	None DamageAmount; // 0x260(0x04)
	None DamageBaseType; // 0x264(0x01)
	None DamageFlourishType; // 0x265(0x01)
	None DamageModifier; // 0x266(0x01)
	None DamageTargetType; // 0x267(0x01)
	None DelayBeforeAnimation; // 0x268(0x04)
	None StackWaitTime; // 0x26c(0x04)
	None PlayingNumberAnimation; // 0x270(0x01)
	None VerticalWorldOffset; // 0x274(0x04)
	None ChangePosition; // 0x278(0x01)
	None ActiveInventoryItem; // 0x5b0(0x18)
	None StoreItems; // 0x520(0x10)
	None InventoryItem; // 0x530(0x08)
	None SceneCamera; // 0x538(0x08)
	None SceneViewModel; // 0x540(0x08)
	None LobbyCharacterIndex; // 0x548(0x01)
	None LocalActionName; // 0x28(0x08)
	None MediaPlayerDataTable; // 0x28(0x08)
	None VoiceAccountNamePairsUpdated; // 0x520(0x10)
	None VoiceParticipantAdded; // 0x530(0x10)
	None VoiceParticipantRemoved; // 0x540(0x10)
	None VoiceParticipantUpdated; // 0x550(0x10)
	None VoiceAudioStateChange; // 0x560(0x10)
	None WeaponCategory; // 0x520(0x28)
	None CategoryMasteryMeter; // 0x520(0x08)
	None RelatedRogues; // 0x528(0x08)
	None WeaponUnlockTooltipDisplay; // 0x530(0x08)
	None WeaponCountText; // 0x538(0x08)
	None PopulatedCategory; // 0x570(0x08)
	None HoveredWeapon; // 0x578(0x08)
	None WeaponComponent; // 0x520(0x08)
	None EquipmentId; // 0x528(0x04)
	None CachedAmmoInClip; // 0x540(0x04)
	None CachedClipSize; // 0x544(0x04)
	None CachedInReserve; // 0x548(0x04)
	None CachedIsReloading; // 0x54c(0x01)
	None WeaponMasteryMeter; // 0x520(0x08)
	None RelatedRogues; // 0x528(0x08)
	None SideNavigationOverlay; // 0x530(0x08)
	None WeaponMilestones; // 0x538(0x08)
	None WeaponStatsPanel; // 0x540(0x08)
	None PopulatedWeaponAsset; // 0x548(0x08)
	None DesiredEquipSound; // 0x580(0x08)
	None bPlayedWeaponEquipSound; // 0x588(0x01)
	None TotalWeaponMasteryMeter; // 0x520(0x08)
	None RelatedRogues; // 0x528(0x08)
	None WeaponCategoryDetailsTable; // 0x28(0x08)
	None WeaponMasteryManager; // 0x30(0x08)
	None MasteryEntries; // 0x28(0x10)
	None PopulatedEntry; // 0x520(0x48)
	None ViewActorName; // 0x568(0x08)
	None CurrentDisplayedMasteryType; // 0x520(0x01)
	None CurrentProgressActivityInstance; // 0x528(0x08)
	None PopulatedWeaponAsset; // 0x530(0x08)
	None PopulatedWeaponCategory; // 0x538(0x08)
	None PopulatedWeaponAsset; // 0x520(0x08)
	None PopulatedMilestoneInstance; // 0x520(0x08)
	None OnWeaponPreview; // 0x520(0x10)
	None OnWeaponSelected; // 0x530(0x10)
	None OnWeaponUnhovered; // 0x540(0x10)
	None bOnCosmeticNavToDetails; // 0x550(0x01)
	None WeaponAsset; // 0x558(0x08)
	None CurrentMasteryType; // 0x520(0x01)
	None CurrentMasteryInstance; // 0x528(0x08)
	None PopulatedWeaponAsset; // 0x540(0x08)
	None Header; // 0x80(0x18)
	None SubHeader; // 0x98(0x18)
	None HeaderAlignment; // 0xb0(0x01)
	None SubPanels; // 0xb8(0x10)
	None Alignment; // 0xc8(0x01)
	None BgBoxOpacity; // 0xcc(0x04)
	None Image; // 0xd0(0x08)
	None URL; // 0xd8(0x10)
	None maxPanelCount; // 0x520(0x04)
	None StoredPanels; // 0x528(0x10)
	None WeaponAsset; // 0x28(0x08)
	None SelectedWrap; // 0x30(0x08)
	None SelectedStoreItem; // 0x38(0x08)
	None PopulatedWeaponAsset; // 0x520(0x08)
	None PreviewedWeaponWrap; // 0x528(0x08)
	None PreviewedStoreItem; // 0x530(0x08)
	None OnWrapEquip; // 0x520(0x10)
	None OnWrapPreview; // 0x530(0x10)
	None OnStoreWrapSelect; // 0x540(0x10)
	None AnimsByName; // 0x28(0x50)
	None RecoilProfile; // 0x30(0x1ec)
	None DontPlayRecoilMontage; // 0x21c(0x01)
	None UberGraphFrame; // 0x538(0x08)
	None Image_42; // 0x540(0x08)
	None Image_305; // 0x548(0x08)
	None RifleReticle; // 0x550(0x08)
	None ShotgunReticle; // 0x558(0x08)
	None WidgetSwitcher_1; // 0x560(0x08)
	None SettingsDataFactory; // 0x568(0x08)
	None UberGraphFrame; // 0x520(0x08)
	None ShowHover; // 0x528(0x08)
	None rotating_arrows; // 0x530(0x08)
	None btnStroke1px; // 0x538(0x08)
	None ChallengeDescription; // 0x540(0x08)
	None ChallengeDisplayMode; // 0x548(0x08)
	None ChallengeProgress; // 0x550(0x08)
	None CheckMark; // 0x558(0x08)
	None HitTarget; // 0x560(0x08)
	None HoverButton; // 0x568(0x08)
	None ProgressBar; // 0x570(0x08)
	None RerollArrows; // 0x578(0x08)
	None RerollButton; // 0x580(0x08)
	None RerollIndicator; // 0x588(0x08)
	None RewardImageSwitcher; // 0x590(0x08)
	None RewardImageWithoutQty; // 0x598(0x08)
	None RewardImageWithQty; // 0x5a0(0x08)
	None RewardQty; // 0x5a8(0x08)
	None SelectionFrame; // 0x5b0(0x08)
	None Stroke1px_2; // 0x5b8(0x08)
	None ChallengeActivityInstance; // 0x5c0(0x08)
	None DisplayRerollPrompt; // 0x5c8(0x10)
	None HoverChallegeRendererSFX; // 0x5d8(0x08)
	None ClickRefreshChallegeRendererSFX; // 0x5e0(0x08)
	None AnimGraphNode_Root; // 0x10f8(0x40)
	None AnimGraphNode_TransitionResult_15; // 0x1138(0x38)
	None AnimGraphNode_TransitionResult_14; // 0x1170(0x38)
	None AnimGraphNode_TransitionResult_13; // 0x11a8(0x38)
	None AnimGraphNode_TransitionResult_12; // 0x11e0(0x38)
	None AnimGraphNode_TransitionResult_11; // 0x1218(0x38)
	None AnimGraphNode_TransitionResult_10; // 0x1250(0x38)
	None AnimGraphNode_TransitionResult_9; // 0x1288(0x38)
	None AnimGraphNode_TransitionResult_8; // 0x12c0(0x38)
	None AnimGraphNode_TransitionResult_7; // 0x12f8(0x38)
	None AnimGraphNode_TransitionResult_6; // 0x1330(0x38)
	None AnimGraphNode_TransitionResult_5; // 0x1368(0x38)
	None AnimGraphNode_TransitionResult_4; // 0x13a0(0x38)
	None AnimGraphNode_TransitionResult_3; // 0x13d8(0x38)
	None AnimGraphNode_StateResult_9; // 0x1410(0x40)
	None AnimGraphNode_BlendSpaceSkinned_8; // 0x1450(0x200)
	None AnimGraphNode_BlendSpacePlayer_8; // 0x1650(0xf0)
	None AnimGraphNode_StateResult_8; // 0x1740(0x40)
	None AnimGraphNode_SequencePlayer_6; // 0x1780(0x88)
	None AnimGraphNode_BlendListByBool_8; // 0x1808(0xb0)
	None AnimGraphNode_BlendSpaceSkinned_7; // 0x18b8(0x200)
	None AnimGraphNode_BlendSpacePlayer_7; // 0x1ab8(0xf0)
	None AnimGraphNode_StateResult_7; // 0x1ba8(0x40)
	None AnimGraphNode_BlendSpaceSkinned_6; // 0x1be8(0x200)
	None AnimGraphNode_BlendSpacePlayer_6; // 0x1de8(0xf0)
	None AnimGraphNode_BlendSpaceSkinned_5; // 0x1ed8(0x200)
	None AnimGraphNode_BlendSpacePlayer_5; // 0x20d8(0xf0)
	None AnimGraphNode_BlendListByEnum_2; // 0x21c8(0xc0)
	None AnimGraphNode_BlendSpaceSkinned_4; // 0x2288(0x200)
	None AnimGraphNode_BlendSpacePlayer_4; // 0x2488(0xf0)
	None AnimGraphNode_BlendSpaceSkinned_3; // 0x2578(0x200)
	None AnimGraphNode_BlendSpacePlayer_3; // 0x2778(0xf0)
	None AnimGraphNode_StateResult_6; // 0x2868(0x40)
	None AnimGraphNode_BlendSpaceSkinned_2; // 0x28a8(0x200)
	None AnimGraphNode_BlendSpacePlayer_2; // 0x2aa8(0xf0)
	None AnimGraphNode_StateResult_5; // 0x2b98(0x40)
	None AnimGraphNode_StateMachine_3; // 0x2bd8(0xc0)
	None AnimGraphNode_SequencePlayer_5; // 0x2c98(0x88)
	None AnimGraphNode_StateResult_4; // 0x2d20(0x40)
	None AnimGraphNode_StateMachine_2; // 0x2d60(0xc0)
	None AnimGraphNode_BlendListByBool_7; // 0x2e20(0xb0)
	None AnimGraphNode_TransitionResult_2; // 0x2ed0(0x38)
	None AnimGraphNode_TransitionResult; // 0x2f08(0x38)
	None AnimGraphNode_SequenceSkinned_5; // 0x2f40(0x160)
	None AnimGraphNode_SequencePlayer_4; // 0x30a0(0x88)
	None AnimGraphNode_StateResult_3; // 0x3128(0x40)
	None AnimGraphNode_BlendSpaceSkinned; // 0x3168(0x200)
	None AnimGraphNode_SequenceSkinned_4; // 0x3368(0x160)
	None AnimGraphNode_LayeredBoneBlend_4; // 0x34c8(0xd0)
	None AnimGraphNode_SequencePlayer_3; // 0x3598(0x88)
	None AnimGraphNode_BlendSpacePlayer; // 0x3620(0xf0)
	None AnimGraphNode_StateResult_2; // 0x3710(0x40)
	None AnimGraphNode_SequenceSkinned_3; // 0x3750(0x160)
	None AnimGraphNode_SequencePlayer_2; // 0x38b0(0x88)
	None AnimGraphNode_StateResult; // 0x3938(0x40)
	None AnimGraphNode_StateMachine; // 0x3978(0xc0)
	None AnimGraphNode_BlendListByBool_6; // 0x3a38(0xb0)
	None AnimGraphNode_SaveCachedPose_4; // 0x3ae8(0xc8)
	None AnimGraphNode_UseCachedPose_18; // 0x3bb0(0x38)
	None AnimGraphNode_TwoWayBlend_4; // 0x3be8(0xd8)
	None AnimGraphNode_AimOffsetSkinned_8; // 0x3cc0(0x1c0)
	None AnimGraphNode_AimOffsetSkinned_7; // 0x3e80(0x1c0)
	None AnimGraphNode_UseCachedPose_17; // 0x4040(0x38)
	None AnimGraphNode_BlendListByBool_5; // 0x4078(0xb0)
	None AnimGraphNode_TwoWayBlend_3; // 0x4128(0xd8)
	None AnimGraphNode_AimOffsetSkinned_6; // 0x4200(0x1c0)
	None AnimGraphNode_AimOffsetSkinned_5; // 0x43c0(0x1c0)
	None AnimGraphNode_UseCachedPose_16; // 0x4580(0x38)
	None AnimGraphNode_UseCachedPose_15; // 0x45b8(0x38)
	None AnimGraphNode_BlendListByEnum; // 0x45f0(0xc0)
	None AnimGraphNode_UseCachedPose_14; // 0x46b0(0x38)
	None AnimGraphNode_TwoWayBlend_2; // 0x46e8(0xd8)
	None AnimGraphNode_AimOffsetSkinned_4; // 0x47c0(0x1c0)
	None AnimGraphNode_AimOffsetSkinned_3; // 0x4980(0x1c0)
	None AnimGraphNode_UseCachedPose_13; // 0x4b40(0x38)
	None AnimGraphNode_SaveCachedPose_3; // 0x4b78(0xc8)
	None AnimGraphNode_BlendListByBool_4; // 0x4c40(0xb0)
	None AnimGraphNode_UseCachedPose_12; // 0x4cf0(0x38)
	None AnimGraphNode_UseCachedPose_11; // 0x4d28(0x38)
	None AnimGraphNode_ApplyAdditive; // 0x4d60(0xd8)
	None AnimGraphNode_SequencePlayer; // 0x4e38(0x88)
	None AnimGraphNode_SequenceSkinned_2; // 0x4ec0(0x160)
	None AnimGraphNode_BlendListByBool_3; // 0x5020(0xb0)
	None AnimGraphNode_BlendListByBool_2; // 0x50d0(0xb0)
	None AnimGraphNode_BlendListByBool; // 0x5180(0xb0)
	None AnimGraphNode_LayeredBoneBlend_3; // 0x5230(0xd0)
	None AnimGraphNode_LayeredBoneBlend_2; // 0x5300(0xd0)
	None AnimGraphNode_LayeredBoneBlend; // 0x53d0(0xd0)
	None AnimGraphNode_SaveCachedPose_2; // 0x54a0(0xc8)
	None AnimGraphNode_UseCachedPose_10; // 0x5568(0x38)
	None AnimGraphNode_UseCachedPose_9; // 0x55a0(0x38)
	None AnimGraphNode_UseCachedPose_8; // 0x55d8(0x38)
	None AnimGraphNode_SaveCachedPose; // 0x5610(0xc8)
	None AnimGraphNode_UseCachedPose_7; // 0x56d8(0x38)
	None AnimGraphNode_UseCachedPose_6; // 0x5710(0x38)
	None AnimGraphNode_UseCachedPose_5; // 0x5748(0x38)
	None AnimGraphNode_UseCachedPose_4; // 0x5780(0x38)
	None AnimGraphNode_UseCachedPose_3; // 0x57b8(0x38)
	None AnimGraphNode_SequenceSkinned; // 0x57f0(0x160)
	None AnimGraphNode_UseCachedPose_2; // 0x5950(0x38)
	None AnimGraphNode_TwoWayBlend; // 0x5988(0xd8)
	None AnimGraphNode_AimOffsetSkinned_2; // 0x5a60(0x1c0)
	None AnimGraphNode_AimOffsetSkinned; // 0x5c20(0x1c0)
	None AnimGraphNode_UseCachedPose; // 0x5de0(0x38)
	None Character; // 0x5e18(0x08)
	None Zipline Lower Wheel Rotator; // 0x5e20(0x0c)
	None Zipline Upper Wheel Rotator; // 0x5e2c(0x0c)
	None Wheel Speed; // 0x5e38(0x04)
	None Enable Zipline Eng Aims; // 0x5e3c(0x01)
	None UseHuntingRifleHold; // 0x5e3d(0x01)
	None EnableLayeredHandAdditives; // 0x5e3e(0x01)
	None bIsServer; // 0x5e3f(0x01)
	None Temp_float_Variable; // 0x5e40(0x04)
	None Temp_float_Variable_2; // 0x5e44(0x04)
	None Temp_bool_Variable; // 0x5e48(0x01)
	None K2Node_Select_Default; // 0x5e4c(0x04)
	None Temp_bool_Variable_2; // 0x5e50(0x01)
	None CallFunc_BreakRotator_Roll; // 0x5e54(0x04)
	None CallFunc_BreakRotator_Pitch; // 0x5e58(0x04)
	None CallFunc_BreakRotator_Yaw; // 0x5e5c(0x04)
	None Temp_float_Variable_3; // 0x5e60(0x04)
	None Temp_float_Variable_4; // 0x5e64(0x04)
	None Temp_bool_Variable_3; // 0x5e68(0x01)
	None K2Node_Select_Default_2; // 0x5e6c(0x04)
	None CallFunc_BreakRotator_Roll_2; // 0x5e70(0x04)
	None CallFunc_BreakRotator_Pitch_2; // 0x5e74(0x04)
	None CallFunc_BreakRotator_Yaw_2; // 0x5e78(0x04)
	None Temp_float_Variable_5; // 0x5e7c(0x04)
	None Temp_float_Variable_6; // 0x5e80(0x04)
	None Temp_bool_Variable_4; // 0x5e84(0x01)
	None K2Node_Select_Default_3; // 0x5e88(0x04)
	None Temp_float_Variable_7; // 0x5e8c(0x04)
	None Temp_float_Variable_8; // 0x5e90(0x04)
	None K2Node_Select_Default_4; // 0x5e94(0x04)
	None K2Node_DynamicCast_AsKSCharacter; // 0x5e98(0x08)
	None K2Node_DynamicCast_bSuccess; // 0x5ea0(0x01)
	None bIsActive; // 0x48(0x01)
	None AddViewLocation; // 0x4c(0x0c)
	None AddViewRotation; // 0x58(0x0c)
	None AddFOV; // 0x64(0x04)
	None UberGraphFrame; // 0x5c8(0x08)
	None Results; // 0x5d0(0x08)
	None SearchBar; // 0x5d8(0x08)
	None LastSelectedItem; // 0x5e0(0x08)
	None ClickSocialSearchTabSFX; // 0x5e8(0x08)
	None CustomStyle; // 0x28(0x08)
	None UberGraphFrame; // 0x530(0x08)
	None animToggleLeft; // 0x538(0x08)
	None animToggleRight; // 0x540(0x08)
	None animHoverRight; // 0x548(0x08)
	None animHoverLeft; // 0x550(0x08)
	None GamepadPrompt; // 0x558(0x08)
	None GamepadPrompt_2; // 0x560(0x08)
	None GamepadSwitcher_Left; // 0x568(0x08)
	None GamepadSwitcher_Right; // 0x570(0x08)
	None HitTargetLeft; // 0x578(0x08)
	None HitTargetRight; // 0x580(0x08)
	None HoverOverlay_Left; // 0x588(0x08)
	None HoverOverlay_Right; // 0x590(0x08)
	None LeftArrow; // 0x598(0x08)
	None LeftGroup; // 0x5a0(0x08)
	None NextWeaponText; // 0x5a8(0x08)
	None PrevWeaponText; // 0x5b0(0x08)
	None RightArrow; // 0x5b8(0x08)
	None RightGroup; // 0x5c0(0x08)
	None ClickWEPSideNavOverlaySFX; // 0x5c8(0x08)
	None HoverWEPSideNavOverlaySFX; // 0x5d0(0x08)
	None ForwardSettingMap; // 0x28(0x50)
	None QualityOverrides; // 0x28(0x1b)
	None PaddingContainer; // 0x238(0x08)
	None UberGraphFrame; // 0x578(0x08)
	None Dropdown; // 0x580(0x08)
	None UberGraphFrame; // 0x578(0x08)
	None OnShow; // 0x580(0x08)
	None AcquireTypeHeader; // 0x588(0x08)
	None BundleContents; // 0x590(0x08)
	None Contents; // 0x598(0x08)
	None ItemInfoContainer; // 0x5a0(0x08)
	None UnlockedItemText; // 0x5a8(0x08)
	None WBP_ItemPreviewStack; // 0x5b0(0x08)
	None StoreItem; // 0x5b8(0x08)
	None AcquisitionItemWidgets; // 0x5c0(0x10)
	None IsBundleAcquisition; // 0x5d0(0x01)
	None ShowAcquisitionSFX; // 0x5d8(0x08)
	None CurrentSkin; // 0x5e0(0x08)
	None CurrentCharacterJob; // 0x5e8(0x08)
	None PreviewActor; // 0x5f0(0x08)
	None PurchaseAcquisitionConfirmedSFX; // 0x5f8(0x08)
	None MaxScrollbackSize; // 0x28(0x04)
	None ManualAutoCompleteList; // 0x30(0x10)
	None AutoCompleteMapPaths; // 0x40(0x10)
	None BackgroundOpacityPercentage; // 0x50(0x04)
	None bOrderTopToBottom; // 0x54(0x01)
	None bDisplayHelpInAutoComplete; // 0x55(0x01)
	None InputColor; // 0x58(0x04)
	None HistoryColor; // 0x5c(0x04)
	None AutoCompleteCommandColor; // 0x60(0x04)
	None AutoCompleteCVarColor; // 0x64(0x04)
	None AutoCompleteFadedColor; // 0x68(0x04)
	None LocalMapOptions; // 0x28(0x10)
	None TransitionMap; // 0x38(0x18)
	None bUseSplitscreen; // 0x50(0x01)
	None TwoPlayerSplitscreenLayout; // 0x51(0x01)
	None ThreePlayerSplitscreenLayout; // 0x52(0x01)
	None FourPlayerSplitscreenLayout; // 0x53(0x01)
	None bOffsetPlayerGamepadIds; // 0x54(0x01)
	None GameInstanceClass; // 0x58(0x18)
	None GameDefaultMap; // 0x70(0x18)
	None ServerDefaultMap; // 0x88(0x18)
	None GlobalDefaultGameMode; // 0xa0(0x18)
	None GlobalDefaultServerGameMode; // 0xb8(0x18)
	None GameModeMapPrefixes; // 0xd0(0x10)
	None GameModeClassAliases; // 0xe0(0x10)
	None MinDynamicBandwidth; // 0x28(0x04)
	None MaxDynamicBandwidth; // 0x2c(0x04)
	None TotalNetBandwidth; // 0x30(0x04)
	None BadPingThreshold; // 0x34(0x04)
	None bIsStandbyCheckingEnabled; // 0x38(0x01)
	None StandbyRxCheatTime; // 0x3c(0x04)
	None StandbyTxCheatTime; // 0x40(0x04)
	None PercentMissingForRxStandby; // 0x44(0x04)
	None PercentMissingForTxStandby; // 0x48(0x04)
	None PercentForBadPing; // 0x4c(0x04)
	None JoinInProgressStandbyWaitTime; // 0x50(0x04)
	None MaxSpectators; // 0x28(0x04)
	None MaxPlayers; // 0x2c(0x04)
	None bRequiresPushToTalk; // 0x30(0x01)
	None CompanyName; // 0x28(0x10)
	None CompanyDistinguishedName; // 0x38(0x10)
	None CopyrightNotice; // 0x48(0x10)
	None Description; // 0x58(0x10)
	None Homepage; // 0x68(0x10)
	None LicensingTerms; // 0x78(0x10)
	None PrivacyPolicy; // 0x88(0x10)
	None ProjectID; // 0x98(0x10)
	None ProjectName; // 0xa8(0x10)
	None ProjectVersion; // 0xb8(0x10)
	None SupportContact; // 0xc8(0x10)
	None ProjectDisplayedTitle; // 0xd8(0x18)
	None ProjectDebugTitleInfo; // 0xf0(0x18)
	None bShouldWindowPreserveAspectRatio; // 0x108(0x01)
	None bUseBorderlessWindow; // 0x109(0x01)
	None bStartInVR; // 0x10a(0x01)
	None bStartInAR; // 0x10b(0x01)
	None bSupportAR; // 0x10c(0x01)
	None bAllowWindowResize; // 0x10d(0x01)
	None bAllowClose; // 0x10e(0x01)
	None bAllowMaximize; // 0x10f(0x01)
	None bAllowMinimize; // 0x110(0x01)
	None bShowHUD; // 0x28(0x01)
	None DebugDisplay; // 0x30(0x10)
	None OnMeshTrackerUpdated; // 0x208(0x10)
	None ScanWorld; // 0x218(0x01)
	None RequestNormals; // 0x219(0x01)
	None RequestVertexConfidence; // 0x21a(0x01)
	None VertexColorMode; // 0x21b(0x01)
	None BlockVertexColors; // 0x220(0x10)
	None VertexColorFromConfidenceZero; // 0x230(0x10)
	None VertexColorFromConfidenceOne; // 0x240(0x10)
	None UpdateInterval; // 0x250(0x04)
	None MRMesh; // 0x258(0x08)
	None Material; // 0x438(0x08)
	None bCreateMeshProxySections; // 0x440(0x01)
	None bUpdateNavMeshOnMeshUpdate; // 0x441(0x01)
	None bNeverCreateCollisionMesh; // 0x442(0x01)
	None CachedBodySetup; // 0x448(0x08)
	None BodySetups; // 0x450(0x10)
	None WireframeMaterial; // 0x460(0x08)
	None UberGraphFrame; // 0x520(0x08)
	None Hover; // 0x528(0x08)
	None Image_361; // 0x530(0x08)
	None RadioButton; // 0x538(0x08)
	None On Cleared; // 0x540(0x10)
	None HoverSettingsRadioSFX; // 0x550(0x08)
	None ClickSettingsRadioSFX; // 0x558(0x08)
	None UberGraphFrame; // 0x520(0x08)
	None EmptyPip; // 0x528(0x08)
	None PipButton; // 0x530(0x08)
	None SelectedPip; // 0x538(0x08)
	None IsActivePip; // 0x540(0x01)
	None OnClicked; // 0x548(0x10)
	None ButtonIndex; // 0x558(0x04)
	None OnSuccess; // 0x50(0x10)
	None OnFailed; // 0x60(0x10)
	None OnSuccess; // 0x50(0x10)
	None OnFailed; // 0x60(0x10)
	None AmbientIntensityLumens; // 0x28(0x04)
	None AmbientColorTemperatureKelvin; // 0x2c(0x04)
	None AmbientColor; // 0x30(0x10)
	None TrackedGeometry; // 0x28(0x08)
	None PinnedComponent; // 0x30(0x08)
	None LocalToTrackingTransform; // 0x40(0x30)
	None LocalToAlignedTrackingTransform; // 0x70(0x30)
	None TrackingState; // 0xa0(0x01)
	None OnARTrackingStateChanged; // 0xc0(0x10)
	None OnARTransformUpdated; // 0xd0(0x10)
	None bGenerateMeshDataFromTrackedGeometry; // 0x30(0x01)
	None bGenerateCollisionForMeshData; // 0x31(0x01)
	None bGenerateNavMeshForMeshData; // 0x32(0x01)
	None bUseMeshDataForOcclusion; // 0x33(0x01)
	None bRenderMeshDataInWireframe; // 0x34(0x01)
	None bTrackSceneObjects; // 0x35(0x01)
	None bUsePersonSegmentationForOcclusion; // 0x36(0x01)
	None WorldAlignment; // 0x37(0x01)
	None SessionType; // 0x38(0x01)
	None PlaneDetectionMode; // 0x39(0x01)
	None bHorizontalPlaneDetection; // 0x3a(0x01)
	None bVerticalPlaneDetection; // 0x3b(0x01)
	None bEnableAutoFocus; // 0x3c(0x01)
	None LightEstimationMode; // 0x3d(0x01)
	None FrameSyncMode; // 0x3e(0x01)
	None bEnableAutomaticCameraOverlay; // 0x3f(0x01)
	None bEnableAutomaticCameraTracking; // 0x40(0x01)
	None bResetCameraTracking; // 0x41(0x01)
	None bResetTrackedObjects; // 0x42(0x01)
	None CandidateImages; // 0x48(0x10)
	None MaxNumSimultaneousImagesTracked; // 0x58(0x04)
	None EnvironmentCaptureProbeType; // 0x5c(0x01)
	None WorldMapData; // 0x60(0x10)
	None CandidateObjects; // 0x70(0x10)
	None DesiredVideoFormat; // 0x80(0x0c)
	None FaceTrackingDirection; // 0x8c(0x01)
	None FaceTrackingUpdate; // 0x8d(0x01)
	None SerializedARCandidateImageDatabase; // 0x90(0x10)
	None EnabledSessionTrackingFeature; // 0xa0(0x01)
	None BufferSizePerChunk; // 0x308(0x04)
	None PreviewImageData; // 0x290(0x10)
	None ARWorldData; // 0x2a0(0x10)
	None PreviewImageBytesTotal; // 0x2b0(0x04)
	None ARWorldBytesTotal; // 0x2b4(0x04)
	None PreviewImageBytesDelivered; // 0x2b8(0x04)
	None ARWorldBytesDelivered; // 0x2bc(0x04)
	None CaptureProbe; // 0x230(0x08)
	None TextureType; // 0xb8(0x01)
	None Timestamp; // 0xbc(0x04)
	None ExternalTextureGuid; // 0xc0(0x10)
	None Size; // 0xd0(0x08)
	None DepthQuality; // 0xd8(0x01)
	None DepthAccuracy; // 0xd9(0x01)
	None bIsTemporallySmoothed; // 0xda(0x01)
	None TextureType; // 0x110(0x01)
	None Timestamp; // 0x114(0x04)
	None ExternalTextureGuid; // 0x118(0x10)
	None Size; // 0x128(0x08)
	None UniqueId; // 0x28(0x10)
	None LocalToTrackingTransform; // 0x40(0x30)
	None LocalToAlignedTrackingTransform; // 0x70(0x30)
	None TrackingState; // 0xa0(0x01)
	None UnderlyingMesh; // 0xb0(0x08)
	None ObjectClassification; // 0xb8(0x01)
	None LastUpdateFrameNumber; // 0xd0(0x04)
	None DebugName; // 0xe0(0x08)
	None Orientation; // 0xe8(0x01)
	None Center; // 0xec(0x0c)
	None Extent; // 0xf8(0x0c)
	None SubsumedBy; // 0x118(0x08)
	None DetectedImage; // 0xe8(0x08)
	None EstimatedSize; // 0xf0(0x08)
	None QRCode; // 0xf8(0x10)
	None Version; // 0x108(0x04)
	None LookAtTarget; // 0xe8(0x0c)
	None bIsTracked; // 0xf4(0x01)
	None BlendShapes; // 0xf8(0x50)
	None EnvironmentCaptureTexture; // 0xf8(0x08)
	None DetectedObject; // 0xe8(0x08)
	None OnAddTrackedGeometry; // 0xb0(0x10)
	None OnUpdateTrackedGeometry; // 0xc0(0x10)
	None OnRemoveTrackedGeometry; // 0xd0(0x10)
	None OnAddTrackedPlane; // 0xe0(0x10)
	None OnUpdateTrackedPlane; // 0xf0(0x10)
	None OnRemoveTrackedPlane; // 0x100(0x10)
	None OnAddTrackedPoint; // 0x110(0x10)
	None OnUpdateTrackedPoint; // 0x120(0x10)
	None OnRemoveTrackedPoint; // 0x130(0x10)
	None OnAddTrackedImage; // 0x140(0x10)
	None OnUpdateTrackedImage; // 0x150(0x10)
	None OnRemoveTrackedImage; // 0x160(0x10)
	None OnAddTrackedFace; // 0x170(0x10)
	None OnUpdateTrackedFace; // 0x180(0x10)
	None OnRemoveTrackedFace; // 0x190(0x10)
	None OnAddTrackedEnvProbe; // 0x1a0(0x10)
	None OnUpdateTrackedEnvProbe; // 0x1b0(0x10)
	None OnRemoveTrackedEnvProbe; // 0x1c0(0x10)
	None OnAddTrackedObject; // 0x1d0(0x10)
	None OnUpdateTrackedObject; // 0x1e0(0x10)
	None OnRemoveTrackedObject; // 0x1f0(0x10)
	None CandidateTexture; // 0x30(0x08)
	None FriendlyName; // 0x38(0x10)
	None Width; // 0x48(0x04)
	None Height; // 0x4c(0x04)
	None Orientation; // 0x50(0x01)
	None CandidateObjectData; // 0x30(0x10)
	None FriendlyName; // 0x40(0x10)
	None BoundingBox; // 0x50(0x1c)
	None UberGraphFrame; // 0x238(0x08)
	None Image_65; // 0x240(0x08)
	None Image_219; // 0x248(0x08)
	None TextBlock_126; // 0x250(0x08)
	None HeaderText; // 0x258(0x18)
	None PlayerIndex; // 0x430(0x04)
	None Hand; // 0x434(0x01)
	None MotionSource; // 0x438(0x08)
	None bDisableLowLatencyUpdate; // 0x440(0x01)
	None CurrentTrackingStatus; // 0x444(0x01)
	None bDisplayDeviceModel; // 0x445(0x01)
	None DisplayModelSource; // 0x448(0x08)
	None CustomDisplayMesh; // 0x450(0x08)
	None DisplayMeshMaterialOverrides; // 0x458(0x10)
	None DisplayComponent; // 0x4d0(0x08)
	None HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate; // 0xb0(0x10)
	None HMDTrackingInitializedDelegate; // 0xc0(0x10)
	None HMDRecenteredDelegate; // 0xd0(0x10)
	None HMDLostDelegate; // 0xe0(0x10)
	None HMDReconnectedDelegate; // 0xf0(0x10)
	None HMDConnectCanceledDelegate; // 0x100(0x10)
	None HMDPutOnHeadDelegate; // 0x110(0x10)
	None HMDRemovedFromHeadDelegate; // 0x120(0x10)
	None VRControllerRecenteredDelegate; // 0x130(0x10)
	None OnModelLoaded; // 0x30(0x10)
	None OnLoadFailure; // 0x40(0x10)
	None SpawnedComponent; // 0x58(0x08)
	None UberGraphFrame; // 0x520(0x08)
	None ShowAnim; // 0x528(0x08)
	None ItemContainer; // 0x530(0x08)
	None ScrollBox_1; // 0x538(0x08)
	None WBP_CosmeticItem_Banner; // 0x540(0x08)
	None WBP_CosmeticItem_Banner_2; // 0x548(0x08)
	None WBP_CosmeticItem_Banner_3; // 0x550(0x08)
	None WBP_CosmeticItem_Banner_4; // 0x558(0x08)
	None WBP_CosmeticItem_Banner_5; // 0x560(0x08)
	None WBP_CosmeticItem_Banner_6; // 0x568(0x08)
	None WBP_CosmeticItem_Banner_7; // 0x570(0x08)
	None WBP_CosmeticItem_Banner_8; // 0x578(0x08)
	None WBP_PlayerIDCustomize; // 0x580(0x08)
	None BannerItems; // 0x588(0x10)
	None EquippedBanner; // 0x598(0x08)
	None LoadoutDataFactory; // 0x5a0(0x08)
	None HoveredItem; // 0x5a8(0x08)
	None VisibleGridRows; // 0x5b0(0x04)
	None VisibleGridColumns; // 0x5b4(0x04)
	None ManifestFileVersion; // 0x28(0x01)
	None bIsFileData; // 0x29(0x01)
	None AppID; // 0x2c(0x04)
	None AppName; // 0x30(0x10)
	None BuildVersion; // 0x40(0x10)
	None LaunchExe; // 0x50(0x10)
	None LaunchCommand; // 0x60(0x10)
	None PrereqIds; // 0x70(0x50)
	None PrereqName; // 0xc0(0x10)
	None PrereqPath; // 0xd0(0x10)
	None PrereqArgs; // 0xe0(0x10)
	None FileManifestList; // 0xf0(0x10)
	None ChunkList; // 0x100(0x10)
	None CustomFields; // 0x110(0x10)
	None UberGraphFrame; // 0x520(0x08)
	None BG; // 0x528(0x08)
	None KeyboardBackButton; // 0x530(0x08)
	None ControlPointMeshComponent; // 0x220(0x08)
	None VirtualTextureMainPassMaxDrawDistance; // 0x4e8(0x04)
	None SplineComponent; // 0x220(0x08)
	None LandscapeGuid; // 0x228(0x10)
	None LandscapeSectionOffset; // 0x238(0x08)
	None MaxLODLevel; // 0x240(0x04)
	None LODDistanceFactor; // 0x244(0x04)
	None LODFalloff; // 0x248(0x01)
	None ComponentScreenSizeToUseSubSections; // 0x24c(0x04)
	None LOD0ScreenSize; // 0x250(0x04)
	None LOD0DistributionSetting; // 0x254(0x04)
	None LODDistributionSetting; // 0x258(0x04)
	None TessellationComponentScreenSize; // 0x25c(0x04)
	None UseTessellationComponentScreenSizeFalloff; // 0x260(0x01)
	None TessellationComponentScreenSizeFalloff; // 0x264(0x04)
	None OccluderGeometryLOD; // 0x268(0x04)
	None StaticLightingLOD; // 0x26c(0x04)
	None DefaultPhysMaterial; // 0x270(0x08)
	None StreamingDistanceMultiplier; // 0x278(0x04)
	None LandscapeMaterial; // 0x280(0x08)
	None LandscapeHoleMaterial; // 0x2a8(0x08)
	None LandscapeMaterialsOverride; // 0x2b0(0x10)
	None bMeshHoles; // 0x2c0(0x01)
	None MeshHolesMaxLod; // 0x2c1(0x01)
	None RuntimeVirtualTextures; // 0x2c8(0x10)
	None VirtualTextureNumLods; // 0x2d8(0x04)
	None VirtualTextureLodBias; // 0x2dc(0x04)
	None VirtualTextureRenderPassType; // 0x2e0(0x01)
	None NegativeZBoundsExtension; // 0x2e4(0x04)
	None PositiveZBoundsExtension; // 0x2e8(0x04)
	None LandscapeComponents; // 0x2f0(0x10)
	None CollisionComponents; // 0x300(0x10)
	None FoliageComponents; // 0x310(0x10)
	None bHasLandscapeGrass; // 0x384(0x01)
	None StaticLightingResolution; // 0x388(0x04)
	None bCastStaticShadow; // 0x38c(0x01)
	None bCastShadowAsTwoSided; // 0x38c(0x01)
	None bCastFarShadow; // 0x38c(0x01)
	None bAffectDistanceFieldLighting; // 0x390(0x01)
	None LightingChannels; // 0x391(0x01)
	None bUseMaterialPositionOffsetInStaticLighting; // 0x394(0x01)
	None bRenderCustomDepth; // 0x394(0x01)
	None CustomDepthStencilValue; // 0x398(0x04)
	None LDMaxDrawDistance; // 0x39c(0x04)
	None LightmassSettings; // 0x3a0(0x1c)
	None CollisionMipLevel; // 0x3bc(0x04)
	None SimpleCollisionMipLevel; // 0x3c0(0x04)
	None CollisionThickness; // 0x3c4(0x04)
	None BodyInstance; // 0x3c8(0x110)
	None bGenerateOverlapEvents; // 0x4d8(0x01)
	None bBakeMaterialPositionOffsetIntoCollision; // 0x4d8(0x01)
	None ComponentSizeQuads; // 0x4dc(0x04)
	None SubsectionSizeQuads; // 0x4e0(0x04)
	None NumSubsections; // 0x4e4(0x04)
	None bUsedForNavigation; // 0x4e8(0x01)
	None bFillCollisionUnderLandscapeForNavmesh; // 0x4e8(0x01)
	None bUseDynamicMaterialInstance; // 0x4ec(0x01)
	None NavigationGeometryGatheringMode; // 0x4ed(0x01)
	None bUseLandscapeForCullingInvisibleHLODVertices; // 0x4ee(0x01)
	None bHasLayersContent; // 0x4ef(0x01)
	None WeightmapUsageMap; // 0x4f0(0x50)
	None SectionBaseX; // 0x430(0x04)
	None SectionBaseY; // 0x434(0x04)
	None ComponentSizeQuads; // 0x438(0x04)
	None SubsectionSizeQuads; // 0x43c(0x04)
	None NumSubsections; // 0x440(0x04)
	None OverrideMaterial; // 0x448(0x08)
	None OverrideHoleMaterial; // 0x450(0x08)
	None OverrideMaterials; // 0x458(0x10)
	None MaterialInstances; // 0x468(0x10)
	None MaterialInstancesDynamic; // 0x478(0x10)
	None LODIndexToMaterialIndex; // 0x488(0x10)
	None MaterialIndexToDisabledTessellationMaterial; // 0x498(0x10)
	None XYOffsetmapTexture; // 0x4a8(0x08)
	None WeightmapScaleBias; // 0x4b0(0x10)
	None WeightmapSubsectionOffset; // 0x4c0(0x04)
	None HeightmapScaleBias; // 0x4d0(0x10)
	None CachedLocalBox; // 0x4e0(0x1c)
	None CollisionComponent; // 0x4fc(0x1c)
	None HeightmapTexture; // 0x518(0x08)
	None WeightmapLayerAllocations; // 0x520(0x10)
	None WeightmapTextures; // 0x530(0x10)
	None MapBuildDataId; // 0x540(0x10)
	None IrrelevantLights; // 0x550(0x10)
	None CollisionMipLevel; // 0x560(0x04)
	None SimpleCollisionMipLevel; // 0x564(0x04)
	None NegativeZBoundsExtension; // 0x568(0x04)
	None PositiveZBoundsExtension; // 0x56c(0x04)
	None StaticLightingResolution; // 0x570(0x04)
	None ForcedLOD; // 0x574(0x04)
	None LODBias; // 0x578(0x04)
	None StateId; // 0x57c(0x10)
	None BakedTextureMaterialGuid; // 0x58c(0x10)
	None GIBakedBaseColorTexture; // 0x5a0(0x08)
	None MobileBlendableLayerMask; // 0x5a8(0x01)
	None MobileMaterialInterface; // 0x5b0(0x08)
	None MobileMaterialInterfaces; // 0x5b8(0x10)
	None MobileWeightmapTextures; // 0x5c8(0x10)
	None GrassVarieties; // 0x28(0x10)
	None bEnableDensityScaling; // 0x38(0x01)
	None GrassMesh; // 0x40(0x08)
	None GrassDensity; // 0x48(0x04)
	None PlacementJitter; // 0x4c(0x04)
	None StartCullDistance; // 0x50(0x04)
	None EndCullDistance; // 0x54(0x04)
	None RandomRotation; // 0x58(0x01)
	None AlignToSurface; // 0x59(0x01)
	None ComponentLayerInfos; // 0x430(0x10)
	None SectionBaseX; // 0x440(0x04)
	None SectionBaseY; // 0x444(0x04)
	None CollisionSizeQuads; // 0x448(0x04)
	None CollisionScale; // 0x44c(0x04)
	None SimpleCollisionSizeQuads; // 0x450(0x04)
	None CollisionQuadFlags; // 0x458(0x10)
	None HeightfieldGuid; // 0x468(0x10)
	None CachedLocalBox; // 0x478(0x1c)
	None RenderComponent; // 0x494(0x1c)
	None CookedPhysicalMaterials; // 0x4c0(0x10)
	None LandscapeActor; // 0x28(0x1c)
	None LandscapeGuid; // 0x44(0x10)
	None ComponentSizeQuads; // 0x54(0x04)
	None SubsectionSizeQuads; // 0x58(0x04)
	None ComponentNumSubsections; // 0x5c(0x04)
	None DrawScale; // 0x60(0x0c)
	None Proxies; // 0x110(0x10)
	None LayerName; // 0x28(0x08)
	None PhysMaterial; // 0x30(0x08)
	None Hardness; // 0x38(0x04)
	None LayerUsageDebugColor; // 0x3c(0x10)
	None TextureStreamingInfo; // 0x410(0x10)
	None bIsLayerThumbnail; // 0x420(0x01)
	None bDisableTessellation; // 0x420(0x01)
	None bMobile; // 0x420(0x01)
	None bEditorToolUsage; // 0x420(0x01)
	None MeshGuid; // 0x510(0x10)
	None LandscapeMeshProxyComponent; // 0x220(0x08)
	None LandscapeGuid; // 0x4e8(0x10)
	None ProxyComponentBases; // 0x4f8(0x10)
	None ProxyLOD; // 0x508(0x01)
	None MaxNumberOfLayers; // 0x38(0x04)
	None ControlPoints; // 0x430(0x10)
	None Segments; // 0x440(0x10)
	None CookedForeignMeshComponents; // 0x450(0x10)
	None Location; // 0x28(0x0c)
	None Rotation; // 0x34(0x0c)
	None Width; // 0x40(0x04)
	None LayerWidthRatio; // 0x44(0x04)
	None SideFalloff; // 0x48(0x04)
	None LeftSideFalloffFactor; // 0x4c(0x04)
	None RightSideFalloffFactor; // 0x50(0x04)
	None LeftSideLayerFalloffFactor; // 0x54(0x04)
	None RightSideLayerFalloffFactor; // 0x58(0x04)
	None EndFalloff; // 0x5c(0x04)
	None ConnectedSegments; // 0x60(0x10)
	None Points; // 0x70(0x10)
	None Bounds; // 0x80(0x1c)
	None LocalMeshComponent; // 0xa0(0x08)
	None Connections; // 0x28(0x30)
	None SplineInfo; // 0x58(0x18)
	None Points; // 0x70(0x10)
	None Bounds; // 0x80(0x1c)
	None LocalMeshComponents; // 0xa0(0x10)
	None LandscapeActor; // 0x540(0x1c)
	None ChannelUsage; // 0x28(0x20)
	None LayerGuid; // 0x48(0x10)
	None GrassTypes; // 0x40(0x10)
	None Layers; // 0x40(0x10)
	None ExpressionGUID; // 0x50(0x10)
	None MappingType; // 0x40(0x01)
	None CustomUVType; // 0x41(0x01)
	None MappingScale; // 0x44(0x04)
	None MappingRotation; // 0x48(0x04)
	None MappingPanU; // 0x4c(0x04)
	None MappingPanV; // 0x50(0x04)
	None ParameterName; // 0x40(0x08)
	None PreviewWeight; // 0x48(0x04)
	None ExpressionGUID; // 0x4c(0x10)
	None LayerUsed; // 0x40(0x0c)
	None LayerNotUsed; // 0x54(0x0c)
	None ParameterName; // 0x68(0x08)
	None PreviewUsed; // 0x70(0x01)
	None ExpressionGUID; // 0x74(0x10)
	None Base; // 0x40(0x0c)
	None Layer; // 0x54(0x0c)
	None ParameterName; // 0x68(0x08)
	None PreviewWeight; // 0x70(0x04)
	None ConstBase; // 0x74(0x0c)
	None ExpressionGUID; // 0x80(0x10)
	None ExpressionGUID; // 0x40(0x10)
	None DataSources; // 0x28(0x50)
	None Category; // 0x520(0x08)
	None IconSwitcher; // 0x528(0x08)
	None Image_508; // 0x530(0x08)
	None PerkIcon; // 0x538(0x08)
	None PointsEarned; // 0x540(0x08)
	None WBP_ProgressionTally_C_1; // 0x548(0x08)
	None UberGraphFrame; // 0x520(0x08)
	None Anim_OnShown; // 0x528(0x08)
	None Anim_ErrorShake; // 0x530(0x08)
	None Anim_ShowSection; // 0x538(0x08)
	None AgreementCheckboxErrorContainer; // 0x540(0x08)
	None ArrowDown; // 0x548(0x08)
	None ArrowUp; // 0x550(0x08)
	None AutoFillLabelWrapper; // 0x558(0x08)
	None BackCallout; // 0x560(0x08)
	None BackPrompt; // 0x568(0x08)
	None BG; // 0x570(0x08)
	None CloseButtonGamepad; // 0x578(0x08)
	None DismissEulaButton; // 0x580(0x08)
	None EmailErrorContainer; // 0x588(0x08)
	None EmailInputWrapper; // 0x590(0x08)
	None EmailSubmission; // 0x598(0x08)
	None EulaContainer; // 0x5a0(0x08)
	None EulaScrollContent; // 0x5a8(0x08)
	None EulaText; // 0x5b0(0x08)
	None EulaVertBox; // 0x5b8(0x08)
	None FormStateSwitcher; // 0x5c0(0x08)
	None GamepadCallouts; // 0x5c8(0x08)
	None InvalidationBox_1; // 0x5d0(0x08)
	None OKButton; // 0x5d8(0x08)
	None PendingOverlay; // 0x5e0(0x08)
	None PendingOverlayText; // 0x5e8(0x08)
	None ScrollCallout; // 0x5f0(0x08)
	None SelectCallout; // 0x5f8(0x08)
	None SelectPrompt; // 0x600(0x08)
	None SubmissionComplete; // 0x608(0x08)
	None SubmitButton; // 0x610(0x08)
	None TermsAndConditions; // 0x618(0x08)
	None TermsAndConditionsPrompt; // 0x620(0x08)
	None WBP_CheckboxButton; // 0x628(0x08)
	None WBP_Header1_2; // 0x630(0x08)
	None WBP_KeyCallout; // 0x638(0x08)
	None WBP_ModalPopupContainer; // 0x640(0x08)
	None WBP_TextInputButton; // 0x648(0x08)
	None EmailValidationTimer; // 0x650(0x04)
	None ScrollDirection; // 0x654(0x04)
	None NotifyName; // 0x38(0x08)
	None NotifyName; // 0x30(0x08)
	None OnCompleted; // 0x28(0x10)
	None OnBlendOut; // 0x38(0x10)
	None OnInterrupted; // 0x48(0x10)
	None OnNotifyBegin; // 0x58(0x10)
	None OnNotifyEnd; // 0x68(0x10)
	None NetAnalyticsData; // 0x28(0x10)
	None UserDescription; // 0x28(0x10)
	None RootExpression; // 0x48(0x08)
	None TagQueryExportText_Helper; // 0x50(0x48)
	None Tags; // 0x28(0x20)
	None Tags; // 0x28(0x20)
	None Tags; // 0x28(0x20)
	None Expressions; // 0x28(0x10)
	None Expressions; // 0x28(0x10)
	None Expressions; // 0x28(0x10)

	void SwimNotifyTransitionStateLock(None bpp__bShouldLock__pf); // SwimNotifyTransitionStateLock Sub_Hero_ABP_Swimming.Sub_Hero_ABP_Swimming_C.SwimNotifyTransitionStateLock // (Native|Event|Public|BlueprintCallable) // <Game+0x195dfa0>
	void SetFillPercentage(None Percentage); // SetFillPercentage WBP_ProgressBar.WBP_ProgressBar_C.SetFillPercentage // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void HandleInitialSpawn(); // HandleInitialSpawn WBP_TextChat_ChatEntry.WBP_TextChat_ChatEntry_C.HandleInitialSpawn // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void ServerSetPartyOwner(None InUniqueId, None InPartyOwnerId); // ServerSetPartyOwner Lobby.LobbyBeaconClient.ServerSetPartyOwner // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // <Game+0xb3cad0>
	void OnRep_UniqueId(); // OnRep_UniqueId Lobby.LobbyBeaconPlayerState.OnRep_UniqueId // (Final|Native|Protected) // <Game+0xb3c5f0>
	void OnRep_WaitForPlayersTimeRemaining(); // OnRep_WaitForPlayersTimeRemaining Lobby.LobbyBeaconState.OnRep_WaitForPlayersTimeRemaining // (Final|Native|Protected) // <Game+0xb3c610>
	void ExecuteUbergraph(None EntryPoint); // ExecuteUbergraph CoreUObject.Object.ExecuteUbergraph // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void SetDestructibleMesh(None NewMesh); // SetDestructibleMesh ApexDestruction.DestructibleComponent.SetDestructibleMesh // (Final|Native|Public|BlueprintCallable) // <Game+0x9c4b90>
	void StartHotfixProcess(); // StartHotfixProcess Hotfix.OnlineHotfixManager.StartHotfixProcess // (Native|Public|BlueprintCallable) // <Game+0xb4dc40>
	None WasRecentlyRendered(None Tolerance); // WasRecentlyRendered Engine.Actor.WasRecentlyRendered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3d904f0>
	void ToggleActive(); // ToggleActive Engine.ActorComponent.ToggleActive // (Native|Public|BlueprintCallable) // <Game+0xbc91a0>
	void ToggleVisibility(None bPropagateToChildren); // ToggleVisibility Engine.SceneComponent.ToggleVisibility // (Final|Native|Public|BlueprintCallable) // <Game+0x3ec45e0>
	None WasRecentlyRendered(None Tolerance); // WasRecentlyRendered Engine.PrimitiveComponent.WasRecentlyRendered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3eb7100>
	void SetVectorParameterValueOnMaterials(None ParameterName, None ParameterValue); // SetVectorParameterValueOnMaterials Engine.MeshComponent.SetVectorParameterValueOnMaterials // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3e802d0>
	void UnloadSkinWeightProfile(None InProfileName); // UnloadSkinWeightProfile Engine.SkinnedMeshComponent.UnloadSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // <Game+0x3ed24c0>
	void SetLODSettings(None InLODSettings); // SetLODSettings Engine.SkeletalMesh.SetLODSettings // (Final|Native|Public|BlueprintCallable) // <Game+0x20c3550>
	None GetTimecode(); // GetTimecode Engine.TimecodeProvider.GetTimecode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3eeff90>
	void Activate(); // Activate Engine.BlueprintAsyncActionBase.Activate // (Native|Public|BlueprintCallable) // <Game+0x1fd5960>
	void SpawnDefaultController(); // SpawnDefaultController Engine.Pawn.SpawnDefaultController // (Native|Public|BlueprintCallable) // <Game+0x1981b70>
	void UnCrouch(None bClientSimulation); // UnCrouch Engine.Character.UnCrouch // (Native|Public|BlueprintCallable) // <Game+0x2156c80>
	void StopMovementImmediately(); // StopMovementImmediately Engine.MovementComponent.StopMovementImmediately // (Native|Public|BlueprintCallable) // <Game+0x21533c0>
	void StopMovementKeepPathing(); // StopMovementKeepPathing Engine.NavMovementComponent.StopMovementKeepPathing // (Final|Native|Public|BlueprintCallable) // <Game+0x3e85a10>
	None K2_GetInputVector(); // K2_GetInputVector Engine.PawnMovementComponent.K2_GetInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x3e99030>
	void SetWalkableFloorZ(None InWalkableFloorZ); // SetWalkableFloorZ Engine.CharacterMovementComponent.SetWalkableFloorZ // (Final|Native|Public|BlueprintCallable) // <Game+0x3dca370>
	void ReceiveShutdown(); // ReceiveShutdown Engine.GameInstance.ReceiveShutdown // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void StartPlay(); // StartPlay Engine.GameModeBase.StartPlay // (Native|Public|BlueprintCallable) // <Game+0x1951160>
	void StartMatch(); // StartMatch Engine.GameMode.StartMatch // (Native|Public|BlueprintCallable) // <Game+0x1954ff0>
	void OnRep_SpectatorClass(); // OnRep_SpectatorClass Engine.GameStateBase.OnRep_SpectatorClass // (Native|Protected) // <Game+0x1951540>
	void OnRep_MatchState(); // OnRep_MatchState Engine.GameState.OnRep_MatchState // (Native|Public) // <Game+0xbc8240>
	void UnPossess(); // UnPossess Engine.Controller.UnPossess // (Final|Native|Public|BlueprintCallable) // <Game+0x3dd27b0>
	None WasInputKeyJustReleased(None Key); // WasInputKeyJustReleased Engine.PlayerController.WasInputKeyJustReleased // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3eaa290>
	void SetMouseSensitivity(None Sensitivity); // SetMouseSensitivity Engine.PlayerInput.SetMouseSensitivity // (Final|Exec|Native|Public) // <Game+0x3eaeff0>
	None WasControllerKeyJustReleased(None Key); // WasControllerKeyJustReleased Engine.InputComponent.WasControllerKeyJustReleased // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // <Game+0x3e03fc0>
	void ReceiveOverrideWith(None OldPlayerState); // ReceiveOverrideWith Engine.PlayerState.ReceiveOverrideWith // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void SSSwapControllers(); // SSSwapControllers Engine.GameViewportClient.SSSwapControllers // (Exec|Native|Public) // <Game+0x1fd5960>
	void OnRep_WorldGravityZ(); // OnRep_WorldGravityZ Engine.WorldSettings.OnRep_WorldGravityZ // (Native|Public) // <Game+0x196cef0>
	void ShowHUD(); // ShowHUD Engine.HUD.ShowHUD // (Exec|Native|Public) // <Game+0x196cef0>
	None K2_GetWorldSettings(); // K2_GetWorldSettings Engine.World.K2_GetWorldSettings // (Final|Native|Public|BlueprintCallable) // <Game+0x3ef7360>
	void UnlinkAnimClassLayers(None InClass); // UnlinkAnimClassLayers Engine.SkeletalMeshComponent.UnlinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // <Game+0x3ecd0d0>
	None SetStaticMesh(None NewMesh); // SetStaticMesh Engine.StaticMeshComponent.SetStaticMesh // (Native|Public|BlueprintCallable) // <Game+0x3eea0a0>
	None Received_Notify(None MeshComp, None Animation); // Received_Notify Engine.AnimNotify.Received_Notify // (Event|Public|BlueprintEvent|Const) // <Game+0x260f470>
	void UnlockAIResources(None bUnlockMovement, None UnlockAILogic); // UnlockAIResources Engine.AnimInstance.UnlockAIResources // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game+0x3d9bd20>
	None Received_NotifyTick(None MeshComp, None Animation, None FrameDeltaTime); // Received_NotifyTick Engine.AnimNotifyState.Received_NotifyTick // (Event|Public|BlueprintEvent|Const) // <Game+0x260f470>
	void SetSortOrder(None Value); // SetSortOrder Engine.DecalComponent.SetSortOrder // (Final|Native|Public|BlueprintCallable) // <Game+0x3dd6750>
	void SetVectorParameter(None ParameterName, None Param); // SetVectorParameter Engine.FXSystemComponent.SetVectorParameter // (Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3e95f60>
	void StopDelayed(None DelayTime); // StopDelayed Engine.AudioComponent.StopDelayed // (Final|Native|Public|BlueprintCallable) // <Game+0x3dad4b0>
	void SetSphereRadius(None InSphereRadius, None bUpdateOverlaps); // SetSphereRadius Engine.SphereComponent.SetSphereRadius // (Final|Native|Public|BlueprintCallable) // <Game+0x3ee1c20>
	None OverridePSTemplate(None MeshComp, None Animation); // OverridePSTemplate Engine.AnimNotifyState_Trail.OverridePSTemplate // (Event|Public|BlueprintEvent|Const) // <Game+0x260f470>
	None IsDisabled(); // IsDisabled Engine.CameraModifier.IsDisabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0xbd48b0>
	void ReceiveStopShake(None bImmediately); // ReceiveStopShake Engine.CameraShake.ReceiveStopShake // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void SetCapsuleSize(None InRadius, None InHalfHeight, None bUpdateOverlaps); // SetCapsuleSize Engine.CapsuleComponent.SetCapsuleSize // (Final|Native|Public|BlueprintCallable) // <Game+0x3dc8160>
	void ValidateSettings(); // ValidateSettings Engine.GameUserSettings.ValidateSettings // (Native|Public|BlueprintCallable) // <Game+0x2040030>
	None GetAutoActivatePlayerIndex(); // GetAutoActivatePlayerIndex Engine.CameraActor.GetAutoActivatePlayerIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3dbf6f0>
	void StopCameraShake(None ShakeInstance, None bImmediately); // StopCameraShake Engine.PlayerCameraManager.StopCameraShake // (Native|Public|BlueprintCallable) // <Game+0x3ea05a0>
	void StopSimulating(None& HitResult); // StopSimulating Engine.ProjectileMovementComponent.StopSimulating // (Native|Public|HasOutParms|BlueprintCallable) // <Game+0x3eb91e0>
	void TurnAtRate(None Rate); // TurnAtRate Engine.DefaultPawn.TurnAtRate // (Native|Public|BlueprintCallable) // <Game+0x196cb80>
	void SetYScale(None Value); // SetYScale Engine.TextRenderComponent.SetYScale // (Final|Native|Public|BlueprintCallable) // <Game+0x19d23f0>
	None IsCollisionFixApplied(); // IsCollisionFixApplied Engine.SpringArmComponent.IsCollisionFixApplied // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3ee5360>
	void SetTrailSourceData(None InFirstSocketName, None InSecondSocketName, None InWidthMode, None InWidth); // SetTrailSourceData Engine.ParticleSystemComponent.SetTrailSourceData // (Final|Native|Public|BlueprintCallable) // <Game+0x3e95d80>
	void OnRep_bEnabled(); // OnRep_bEnabled Engine.SkyLight.OnRep_bEnabled // (Native|Public) // <Game+0x196cef0>
	None UpdateInstanceTransform(None InstanceIndex, None& NewInstanceTransform, None bWorldSpace, None bMarkRenderStateDirty, None bTeleport); // UpdateInstanceTransform Engine.InstancedStaticMeshComponent.UpdateInstanceTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3e04660>
	None RemoveInstances(None& InstancesToRemove); // RemoveInstances Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x3dfede0>
	void SetMobility(None InMobility); // SetMobility Engine.StaticMeshActor.SetMobility // (Final|Native|Public|BlueprintCallable) // <Game+0x3ee9bf0>
	void SetForceMipLevelsToBeResident(None OverrideForceMiplevelsToBeResident, None bForceMiplevelsToBeResidentValue, None ForceDuration, None CinematicTextureGroups, None bFastResponse); // SetForceMipLevelsToBeResident Engine.MaterialInterface.SetForceMipLevelsToBeResident // (RequiredAPI|Native|Public|BlueprintCallable) // <Game+0x3e7ff90>
	None K2_GetVectorParameterValue(None ParameterName); // K2_GetVectorParameterValue Engine.MaterialInstanceConstant.K2_GetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3e7cce0>
	void SetUseFieldOfViewForLOD(None bInUseFieldOfViewForLOD); // SetUseFieldOfViewForLOD Engine.CameraComponent.SetUseFieldOfViewForLOD // (Final|Native|Public|BlueprintCallable) // <Game+0x3dbfed0>
	void Stop(); // Stop Engine.AmbientSound.Stop // (Final|Native|Public|BlueprintCallable) // <Game+0x3d93ef0>
	None GetPlayLength(); // GetPlayLength Engine.AnimSequenceBase.GetPlayLength // (Native|Public|BlueprintCallable) // <Game+0x3da5900>
	None GetDefaultBlendOutTime(); // GetDefaultBlendOutTime Engine.AnimMontage.GetDefaultBlendOutTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0xbceb40>
	void StopAnim(); // StopAnim Engine.AnimSingleNodeInstance.StopAnim // (Final|Native|Public|BlueprintCallable) // <Game+0x3da6110>
	void SetArrowColor(None NewColor); // SetArrowColor Engine.ArrowComponent.SetArrowColor // (Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3da8e70>
	None AsyncSaveGameToSlot(None WorldContextObject, None SaveGameObject, None SlotName, None UserIndex); // AsyncSaveGameToSlot Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3da8d20>
	None AsyncLoadPrimaryAsset(None WorldContextObject, None PrimaryAsset, None& LoadBundles); // AsyncLoadPrimaryAsset Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3dab750>
	None AsyncLoadPrimaryAssetClass(None WorldContextObject, None PrimaryAsset, None& LoadBundles); // AsyncLoadPrimaryAssetClass Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3dab890>
	None AsyncLoadPrimaryAssetList(None WorldContextObject, None& PrimaryAssetList, None& LoadBundles); // AsyncLoadPrimaryAssetList Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3dabb30>
	None AsyncLoadPrimaryAssetClassList(None WorldContextObject, None& PrimaryAssetList, None& LoadBundles); // AsyncLoadPrimaryAssetClassList Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3dab9d0>
	None AsyncChangeBundleStateForPrimaryAssetList(None WorldContextObject, None& PrimaryAssetList, None& AddBundles, None& RemoveBundles); // AsyncChangeBundleStateForPrimaryAssetList Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3dab5a0>
	void StartPrecompute(); // StartPrecompute Engine.AtmosphericFogComponent.StartPrecompute // (Final|Native|Public|BlueprintCallable) // <Game+0xae0850>
	void SetReverbSettings(None& NewReverbSettings); // SetReverbSettings Engine.AudioVolume.SetReverbSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x3db1040>
	void OnActorEndPlay(None Actor, None EndPlayReason); // OnActorEndPlay Engine.AutoDestroySubsystem.OnActorEndPlay // (Final|Native|Private) // <Game+0x3db0d00>
	None RegisterMovementComponent(None MovementComp, None AvoidanceWeight); // RegisterMovementComponent Engine.AvoidanceManager.RegisterMovementComponent // (Final|Native|Public|BlueprintCallable) // <Game+0x3db0dc0>
	void SetUV(None NewU, None NewUL, None NewV, None NewVL); // SetUV Engine.BillboardComponent.SetUV // (Native|Public|BlueprintCallable) // <Game+0x3db1300>
	void SetMapPropertyByName(None Object, None PropertyName, None& Value); // SetMapPropertyByName Engine.BlueprintMapLibrary.SetMapPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3db8910>
	None VideoCaptureDir(); // VideoCaptureDir Engine.BlueprintPathsLibrary.VideoCaptureDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x3db8e70>
	None ScheduleLocalNotificationFromNow(None inSecondsFromNow, None& Title, None& Body, None& Action, None ActivationEvent); // ScheduleLocalNotificationFromNow Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3dbb680>
	void SetSetPropertyByName(None Object, None PropertyName, None& Value); // SetSetPropertyByName Engine.BlueprintSetLibrary.SetSetPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3dbba70>
	void SetLineThickness(None InLineThickness); // SetLineThickness Engine.BoxComponent.SetLineThickness // (Final|Native|Public|BlueprintCallable) // <Game+0x3dbb9f0>
	void Stop(None bImmediate); // Stop Engine.CameraAnimInst.Stop // (Final|Native|Public|BlueprintCallable) // <Game+0x3dbff60>
	void StopAllCameraShakes(None bImmediately); // StopAllCameraShakes Engine.CameraShakeSourceComponent.StopAllCameraShakes // (Final|Native|Public|BlueprintCallable) // <Game+0x3dc8270>
	None K2_TextSize(None RenderFont, None RenderText, None Scale); // K2_TextSize Engine.Canvas.K2_TextSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3dc6600>
	void UpdateResource(); // UpdateResource Engine.CanvasRenderTarget2D.UpdateResource // (Native|Public|BlueprintCallable) // <Game+0x3dc8390>
	void Walk(); // Walk Engine.CheatManager.Walk // (Exec|Native|Public|BlueprintCallable) // <Game+0x2040030>
	void SetChildActorClass(None InClass); // SetChildActorClass Engine.ChildActorComponent.SetChildActorClass // (Final|Native|Public|BlueprintCallable) // <Game+0x3dce290>
	void GetValueRange(None& MinValue, None& MaxValue); // GetValueRange Engine.CurveBase.GetValueRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game+0x3dd2080>
	None GetFloatValue(None InTime); // GetFloatValue Engine.CurveFloat.GetFloatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3dd1e70>
	None GetLinearColorValue(None InTime); // GetLinearColorValue Engine.CurveLinearColor.GetLinearColorValue // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x3dd1f00>
	None Blueprint_GetSizeY(); // Blueprint_GetSizeY Engine.Texture2D.Blueprint_GetSizeY // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3eec770>
	None GetCurvePosition(None InCurve, None& Position); // GetCurvePosition Engine.CurveLinearColorAtlas.GetCurvePosition // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x3dd1c00>
	None GetCurveValue(None CurveName); // GetCurveValue Engine.CurveSourceInterface.GetCurveValue // (Native|Event|Public|BlueprintEvent|Const) // <Game+0x3dd1ce0>
	None GetVectorValue(None InTime); // GetVectorValue Engine.CurveVector.GetVectorValue // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x3dd2160>
	void GetDataTableRowNames(None Table, None& OutRowNames); // GetDataTableRowNames Engine.DataTableFunctionLibrary.GetDataTableRowNames // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3dd5fd0>
	void ToggleDisplay(); // ToggleDisplay Engine.DebugCameraController.ToggleDisplay // (Final|Native|Public|BlueprintCallable) // <Game+0x3dd67f0>
	void SetDecalMaterial(None NewDecalMaterial); // SetDecalMaterial Engine.DecalActor.SetDecalMaterial // (Final|Native|Public|BlueprintCallable) // <Game+0x3dd6380>
	void ToggleEnabled(); // ToggleEnabled Engine.Light.ToggleEnabled // (Final|Native|Public|BlueprintCallable) // <Game+0x3e68ca0>
	void SetSamplesPerPixel(None NewValue); // SetSamplesPerPixel Engine.LightComponentBase.SetSamplesPerPixel // (Final|Native|Public|BlueprintCallable) // <Game+0x3e687f0>
	void SetVolumetricScatteringIntensity(None NewIntensity); // SetVolumetricScatteringIntensity Engine.LightComponent.SetVolumetricScatteringIntensity // (Final|Native|Public|BlueprintCallable) // <Game+0x3e68c20>
	void SetShadowDistanceFadeoutFraction(None NewValue); // SetShadowDistanceFadeoutFraction Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction // (Final|Native|Public|BlueprintCallable) // <Game+0x3dd9b70>
	void ToggleActive(); // ToggleActive Engine.Emitter.ToggleActive // (Final|Native|Public|BlueprintCallable) // <Game+0x3ddcbe0>
	void OnRep_bEnabled(); // OnRep_bEnabled Engine.ExponentialHeightFog.OnRep_bEnabled // (Native|Public) // <Game+0x196cef0>
	void SetVolumetricFogScatteringDistribution(None NewValue); // SetVolumetricFogScatteringDistribution Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution // (Final|Native|Public|BlueprintCallable) // <Game+0x3de7d00>
	None ScriptRunAssetExportTask(None Task); // ScriptRunAssetExportTask Engine.Exporter.ScriptRunAssetExportTask // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void Stop(); // Stop Engine.ForceFeedbackComponent.Stop // (Native|Public|BlueprintCallable) // <Game+0xbd9650>
	void UnloadStreamLevel(None WorldContextObject, None LevelName, None LatentInfo, None bShouldBlockOnUnload); // UnloadStreamLevel Engine.GameplayStatics.UnloadStreamLevel // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3df5dd0>
	void SetOuterConeAngle(None NewOuterConeAngle); // SetOuterConeAngle Engine.SpotLight.SetOuterConeAngle // (Final|Native|Public|BlueprintCallable) // <Game+0x3ee5b90>
	void StopPerformanceSnapshots(); // StopPerformanceSnapshots Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots // (Final|Exec|Native|Static|Public|BlueprintCallable) // <Game+0x3dff050>
	None RandomSobolFloat(None Index, None Dimension, None Seed); // RandomSobolFloat Engine.ImportanceSamplingLibrary.RandomSobolFloat // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x3dfebf0>
	void SaveKeyMappings(); // SaveKeyMappings Engine.InputSettings.SaveKeyMappings // (Final|Native|Public|BlueprintCallable) // <Game+0x3e04430>
	void StopSimulating(None& HitResult); // StopSimulating Engine.InterpToMovementComponent.StopSimulating // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x3e07ba0>
	void SetArrayPropertyByName(None Object, None PropertyName, None& Value); // SetArrayPropertyByName Engine.KismetArrayLibrary.SetArrayPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3e0d140>
	void Parse_StringToGuid(None GuidString, None& OutGuid, None& Success); // Parse_StringToGuid Engine.KismetGuidLibrary.Parse_StringToGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // <Game+0x3e10f80>
	None PointerEvent_IsTouchEvent(None& Input); // PointerEvent_IsTouchEvent Engine.KismetInputLibrary.PointerEvent_IsTouchEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x3e11ef0>
	None SetCurrentLocale(None Culture, None SaveToConfig); // SetCurrentLocale Engine.KismetInternationalizationLibrary.SetCurrentLocale // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3e123e0>
	void SetVectorParameterValue(None WorldContextObject, None Collection, None ParameterName, None& ParameterValue); // SetVectorParameterValue Engine.KismetMaterialLibrary.SetVectorParameterValue // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3e12600>
	None Xor_IntInt(None A, None B); // Xor_IntInt Engine.KismetMathLibrary.Xor_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x3e41430>
	void MarkBit(None& Data, None Index); // MarkBit Engine.KismetNodeHelperLibrary.MarkBit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3e47d40>
	void SetCastInsetShadowForAllAttachments(None PrimitiveComponent, None bCastInsetShadow, None bLightAttachmentsAsGroup); // SetCastInsetShadowForAllAttachments Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // <Game+0x3e49140>
	None TrimTrailing(None SourceString); // TrimTrailing Engine.KismetStringLibrary.TrimTrailing // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x3e49910>
	None IsRegisteredTableId(None TableId); // IsRegisteredTableId Engine.KismetStringTableLibrary.IsRegisteredTableId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x3e56d80>
	void UnregisterForRemoteNotifications(); // UnregisterForRemoteNotifications Engine.KismetSystemLibrary.UnregisterForRemoteNotifications // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3e5ba10>
	None TextTrimTrailing(None& InText); // TextTrimTrailing Engine.KismetTextLibrary.TextTrimTrailing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x3e64900>
	void WorldOriginLocationChanged(None OldOriginLocation, None NewOriginLocation); // WorldOriginLocationChanged Engine.LevelScriptActor.WorldOriginLocationChanged // (Event|Public|HasDefaults|BlueprintEvent) // <Game+0x260f470>
	None ShouldBeLoaded(); // ShouldBeLoaded Engine.LevelStreaming.ShouldBeLoaded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x362a870>
	None LoadLevelInstanceBySoftObjectPtr(None WorldContextObject, None Level, None Location, None Rotation, None& bOutSuccess); // LoadLevelInstanceBySoftObjectPtr Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3e670d0>
	void SetIntensityUnits(None NewIntensityUnits); // SetIntensityUnits Engine.LocalLightComponent.SetIntensityUnits // (Final|Native|Public|BlueprintCallable) // <Game+0x3e6aab0>
	void SetElements(None& NewElements); // SetElements Engine.MaterialBillboardComponent.SetElements // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x3e6e830>
	void SetVectorParameterValueByInfo(None& ParameterInfo, None Value); // SetVectorParameterValueByInfo Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3e7d440>
	void Stop(); // Stop Engine.MatineeActor.Stop // (Native|Public|BlueprintCallable) // <Game+0x1955270>
	void RemovePaintedVertices(None StaticMeshComponent); // RemovePaintedVertices Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3e831f0>
	void MarkPropertyDirtyFromRepIndex(None Object, None RepIndex, None PropertyName); // MarkPropertyDirtyFromRepIndex Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3e891e0>
	None ContainsEmitterType(None TypeData); // ContainsEmitterType Engine.ParticleSystem.ContainsEmitterType // (Final|Native|Public|BlueprintCallable) // <Game+0x3e94250>
	void MakeNoise(None NoiseMaker, None Loudness, None& NoiseLocation); // MakeNoise Engine.PawnNoiseEmitterComponent.MakeNoise // (BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3e99290>
	void SetStrengthMultiplyer(None InStrengthMultiplyer); // SetStrengthMultiplyer Engine.PhysicalAnimationComponent.SetStrengthMultiplyer // (Final|Native|Public|BlueprintCallable) // <Game+0x3e99670>
	void SetOrientationDriveTwistAndSwing(None bEnableTwistDrive, None bEnableSwingDrive); // SetOrientationDriveTwistAndSwing Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing // (Final|Native|Public|BlueprintCallable) // <Game+0x3e9ca80>
	void SetTargetRotation(None NewRotation); // SetTargetRotation Engine.PhysicsHandleComponent.SetTargetRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3e9ccc0>
	None GetSpringRestingPoint(); // GetSpringRestingPoint Engine.PhysicsSpringComponent.GetSpringRestingPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x3e9f530>
	void OnInterpToggle(None bEnable); // OnInterpToggle Engine.PlanarReflection.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // <Game+0x3e9f5d0>
	void ShowOnlyComponent(None InComponent); // ShowOnlyComponent Engine.SceneCaptureComponent.ShowOnlyComponent // (Final|Native|Public|BlueprintCallable) // <Game+0x3ec44a0>
	None SupportsConvertibleLaptops(); // SupportsConvertibleLaptops Engine.PlatformEventsComponent.SupportsConvertibleLaptops // (Final|Native|Public|BlueprintCallable) // <Game+0x3ea0670>
	None GetNumHeaders(); // GetNumHeaders Engine.PlatformInterfaceWebResponse.GetNumHeaders // (Native|Public) // <Game+0xf52110>
	void SetRadius(None NewRadius); // SetRadius Engine.PointLight.SetRadius // (Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game+0x3eaf070>
	void SetSourceRadius(None bNewValue); // SetSourceRadius Engine.PointLightComponent.SetSourceRadius // (Final|Native|Public|BlueprintCallable) // <Game+0x3eaf1f0>
	void SetBoneTransformByName(None BoneName, None& InTransform, None BoneSpace); // SetBoneTransformByName Engine.PoseableMeshComponent.SetBoneTransformByName // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3eaed90>
	void AddOrUpdateBlendable(None InBlendableObject, None InWeight); // AddOrUpdateBlendable Engine.PostProcessComponent.AddOrUpdateBlendable // (Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game+0x3eae220>
	void AddOrUpdateBlendable(None InBlendableObject, None InWeight); // AddOrUpdateBlendable Engine.PostProcessVolume.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // <Game+0x3eae130>
	void ToggleForce(); // ToggleForce Engine.RadialForceActor.ToggleForce // (Native|Public|BlueprintCallable) // <Game+0x1953790>
	void RemoveObjectTypeToAffect(None ObjectType); // RemoveObjectTypeToAffect Engine.RadialForceComponent.RemoveObjectTypeToAffect // (Native|Public|BlueprintCallable) // <Game+0x3eb8ed0>
	void SetSourceWidth(None bNewValue); // SetSourceWidth Engine.RectLightComponent.SetSourceWidth // (Final|Native|Public|BlueprintCallable) // <Game+0x3eb90d0>
	None GetTileSize(); // GetTileSize Engine.RuntimeVirtualTexture.GetTileSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3ebea30>
	None GetVirtualTextureTransform(); // GetVirtualTextureTransform Engine.RuntimeVirtualTextureComponent.GetVirtualTextureTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x3ebea80>
	void OnInterpToggle(None bEnable); // OnInterpToggle Engine.SceneCapture2D.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // <Game+0x3e9f5d0>
	void CaptureScene(); // CaptureScene Engine.SceneCaptureComponent2D.CaptureScene // (Final|Native|Public|BlueprintCallable) // <Game+0x3ec0f40>
	void CaptureScene(); // CaptureScene Engine.SceneCaptureComponentCube.CaptureScene // (Final|Native|Public|BlueprintCallable) // <Game+0x3ec0f40>
	void OnInterpToggle(None bEnable); // OnInterpToggle Engine.SceneCaptureCube.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // <Game+0x3e9f5d0>
	void OnRep_ReplicatedPhysAsset(); // OnRep_ReplicatedPhysAsset Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset // (Native|Public) // <Game+0x1955f80>
	void SetMinMaxLodToMesh(None InMesh); // SetMinMaxLodToMesh Engine.SkeletalMeshLODSettings.SetMinMaxLodToMesh // (Final|RequiredAPI|Native|Public|BlueprintCallable|Const) // <Game+0x3ed1a00>
	void InitializeSocketFromLocation(None SkelComp, None WorldLocation, None WorldNormal); // InitializeSocketFromLocation Engine.SkeletalMeshSocket.InitializeSocketFromLocation // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3ed13f0>
	void SetSkyLuminanceFactor(None NewValue); // SetSkyLuminanceFactor Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3ed5c90>
	void SetVolumetricScatteringIntensity(None NewIntensity); // SetVolumetricScatteringIntensity Engine.SkyLightComponent.SetVolumetricScatteringIntensity // (Final|Native|Public|BlueprintCallable) // <Game+0x3ed5d10>
	void StopRecordingOutput(None WorldContextObject, None ExportType, None Name, None Path, None ExistingSoundWaveToOverwrite); // StopRecordingOutput Engine.SoundSubmix.StopRecordingOutput // (Final|Native|Public|BlueprintCallable) // <Game+0x3ee2880>
	void UpdateSpline(); // UpdateSpline Engine.SplineComponent.UpdateSpline // (Final|Native|Public|BlueprintCallable) // <Game+0x3ee2a60>
	void UpdateMesh(); // UpdateMesh Engine.SplineMeshComponent.UpdateMesh // (Final|Native|Public|BlueprintCallable) // <Game+0x3ee6340>
	void SetOuterConeAngle(None NewOuterConeAngle); // SetOuterConeAngle Engine.SpotLightComponent.SetOuterConeAngle // (Final|Native|Public|BlueprintCallable) // <Game+0x3ee5c10>
	void RemoveSocket(None Socket); // RemoveSocket Engine.StaticMesh.RemoveSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game+0x3ee5390>
	void SetUVRect(None InUVRect); // SetUVRect Engine.StereoLayerComponent.SetUVRect // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3eea1c0>
	void SetRadius(None InRadius); // SetRadius Engine.StereoLayerShapeCylinder.SetRadius // (Final|Native|Public|BlueprintCallable) // <Game+0x3ee9df0>
	void SetEquirectProps(None InScaleBiases); // SetEquirectProps Engine.StereoLayerShapeEquirect.SetEquirectProps // (Final|Native|Public|BlueprintCallable) // <Game+0x3ee9970>
	void ShowSplashScreen(); // ShowSplashScreen Engine.StereoLayerFunctionLibrary.ShowSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x309cc40>
	None GetWorldSubsystem(None ContextObject, None Class); // GetWorldSubsystem Engine.SubsystemBlueprintLibrary.GetWorldSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x3eecae0>
	void Stop(); // Stop Engine.TimelineComponent.Stop // (Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game+0x3ef07a0>
	None TwitterRequest(None URL, None& ParamKeysAndValues, None RequestMethod, None AccountIndex); // TwitterRequest Engine.TwitterIntegrationBase.TwitterRequest // (Native|Public|HasOutParms) // <Game+0x3ef4b00>
	void SetIntensity(None NewIntensity); // SetIntensity Engine.VectorFieldComponent.SetIntensity // (Native|Public|BlueprintCallable) // <Game+0x3ef45c0>
	void RedirectVislog(None SourceOwner, None DestinationOwner); // RedirectVislog Engine.VisualLoggerKismetLibrary.RedirectVislog // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3e89130>
	void RegisterWithPlayerState(None OwningState); // RegisterWithPlayerState Engine.VOIPTalker.RegisterWithPlayerState // (Final|Native|Public|BlueprintCallable) // <Game+0x3ef4540>
	void SetMicThreshold(None InThreshold); // SetMicThreshold Engine.VOIPStatics.SetMicThreshold // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3ef46c0>
	void SetWindType(None InNewType); // SetWindType Engine.WindDirectionalSourceComponent.SetWindType // (Final|Native|Public|BlueprintCallable) // <Game+0x3ef4930>
	void OnMapGamepadHovered(None Button); // OnMapGamepadHovered WBP_CreateCustomGame.WBP_CreateCustomGame_C.OnMapGamepadHovered // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void SetVisibility(None InVisibility); // SetVisibility UMG.Widget.SetVisibility // (Native|Public|BlueprintCallable) // <Game+0x34c2590>
	void SetOpacity(None InOpacity); // SetOpacity UMG.Image.SetOpacity // (Final|Native|Public|BlueprintCallable) // <Game+0x34aa980>
	None RemoveChildAt(None Index); // RemoveChildAt UMG.PanelWidget.RemoveChildAt // (Final|Native|Public|BlueprintCallable) // <Game+0x34ae800>
	None AddChildToCanvas(None Content); // AddChildToCanvas UMG.CanvasPanel.AddChildToCanvas // (Final|Native|Public|BlueprintCallable) // <Game+0x34a09f0>
	void UnregisterInputComponent(); // UnregisterInputComponent UMG.UserWidget.UnregisterInputComponent // (Native|Protected|BlueprintCallable) // <Game+0x2176220>
	void SetUserTag(None InUserTag); // SetUserTag UMG.UMGSequencePlayer.SetUserTag // (Final|Native|Public|BlueprintCallable) // <Game+0x34be8b0>
	None SetContent(None Content); // SetContent UMG.ContentWidget.SetContent // (Final|Native|Public|BlueprintCallable) // <Game+0x34a5cb0>
	void SetSidesToPad(None InPadLeft, None InPadRight, None InPadTop, None InPadBottom); // SetSidesToPad UMG.SafeZone.SetSidesToPad // (Final|Native|Public|BlueprintCallable) // <Game+0x34b4100>
	void SetText(None InText); // SetText UMG.EditableTextBox.SetText // (Final|Native|Public|BlueprintCallable) // <Game+0x34a6af0>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.Border.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34a2980>
	void SetWheelScrollMultiplier(None NewWheelScrollMultiplier); // SetWheelScrollMultiplier UMG.ScrollBox.SetWheelScrollMultiplier // (Final|Native|Public|BlueprintCallable) // <Game+0x34b4700>
	void SetRowFill(None ColumnIndex, None Coefficient); // SetRowFill UMG.GridPanel.SetRowFill // (Final|Native|Public|BlueprintCallable) // <Game+0x34a6760>
	None AddChildToVerticalBox(None Content); // AddChildToVerticalBox UMG.VerticalBox.AddChildToVerticalBox // (Final|Native|Public|BlueprintCallable) // <Game+0x34c0b30>
	void SetWheelScrollMultiplier(None NewWheelScrollMultiplier); // SetWheelScrollMultiplier UMG.ListViewBase.SetWheelScrollMultiplier // (Final|Native|Public|BlueprintCallable) // <Game+0x34aaf10>
	void SetSelectionMode(None SelectionMode); // SetSelectionMode UMG.ListView.SetSelectionMode // (Final|Native|Public|BlueprintCallable) // <Game+0x34aad00>
	void SetItemExpansion(None Item, None bExpandItem); // SetItemExpansion UMG.TreeView.SetItemExpansion // (Final|Native|Public|BlueprintCallable) // <Game+0x34b7cc0>
	None DownloadImage(None URL); // DownloadImage UMG.AsyncTaskDownloadImage.DownloadImage // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x34a0a80>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.BackgroundBlur.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34a2880>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.BackgroundBlurSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34a2900>
	None GetValue(); // GetValue UMG.BoolBinding.GetValue // (Final|Native|Public|Const) // <Game+0x34a0e30>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.BorderSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34a2a00>
	None GetValue(); // GetValue UMG.BrushBinding.GetValue // (Final|Native|Public|Const) // <Game+0x34a0e60>
	void SetTouchMethod(None InTouchMethod); // SetTouchMethod UMG.Button.SetTouchMethod // (Final|Native|Public|BlueprintCallable) // <Game+0x34a2800>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.ButtonSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34a2a80>
	void SetZOrder(None InZOrder); // SetZOrder UMG.CanvasPanelSlot.SetZOrder // (Final|Native|Public|BlueprintCallable) // <Game+0x34a2b00>
	void SetIsChecked(None InIsChecked); // SetIsChecked UMG.CheckBox.SetIsChecked // (Final|Native|Public|BlueprintCallable) // <Game+0x34a1d10>
	None GetValue(); // GetValue UMG.CheckedStateBinding.GetValue // (Final|Native|Public|Const) // <Game+0x34a0ff0>
	void SetRadius(None InRadius); // SetRadius UMG.CircularThrobber.SetRadius // (Final|Native|Public|BlueprintCallable) // <Game+0x34a2620>
	None GetSlateValue(); // GetSlateValue UMG.ColorBinding.GetSlateValue // (Final|Native|Public|Const) // <Game+0x34a0dc0>
	void SetSelectedOption(None Option); // SetSelectedOption UMG.ComboBoxString.SetSelectedOption // (Final|Native|Public|BlueprintCallable) // <Game+0x34a6930>
	void Drop(None& PointerEvent); // Drop UMG.DragDropOperation.Drop // (Native|Event|Public|HasOutParms|BlueprintEvent) // <Game+0x34a5250>
	void SetEntrySpacing(None& InEntrySpacing); // SetEntrySpacing UMG.DynamicEntryBoxBase.SetEntrySpacing // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x34a5d40>
	void Reset(None bDeleteWidgets); // Reset UMG.DynamicEntryBox.Reset // (Final|Native|Public|BlueprintCallable) // <Game+0x34a5a50>
	void SetText(None InText); // SetText UMG.EditableText.SetText // (Final|Native|Public|BlueprintCallable) // <Game+0x34a6a10>
	void SetIsExpanded_Animated(None IsExpanded); // SetIsExpanded_Animated UMG.ExpandableArea.SetIsExpanded_Animated // (Final|Native|Public|BlueprintCallable) // <Game+0x34a6180>
	None GetValue(); // GetValue UMG.FloatBinding.GetValue // (Final|Native|Public|Const) // <Game+0x34a5870>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.GridSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34a6bd0>
	None AddChildToHorizontalBox(None Content); // AddChildToHorizontalBox UMG.HorizontalBox.AddChildToHorizontalBox // (Final|Native|Public|BlueprintCallable) // <Game+0x34a8cd0>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.HorizontalBoxSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34aae90>
	void SetTextBlockVisibility(None InVisibility); // SetTextBlockVisibility UMG.InputKeySelector.SetTextBlockVisibility // (Final|Native|Public|BlueprintCallable) // <Game+0x34aae10>
	None GetValue(); // GetValue UMG.Int32Binding.GetValue // (Final|Native|Public|Const) // <Game+0x34a96d0>
	void SetCanCache(None CanCache); // SetCanCache UMG.InvalidationBox.SetCanCache // (Final|Native|Public|BlueprintCallable) // <Game+0x34aa540>
	void BP_OnItemSelectionChanged(None bIsSelected); // BP_OnItemSelectionChanged UMG.UserListEntry.BP_OnItemSelectionChanged // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	None IsListItemSelected(None UserListEntry); // IsListItemSelected UMG.UserListEntryLibrary.IsListItemSelected // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x34a97a0>
	void OnListItemObjectSet(None ListItemObject); // OnListItemObjectSet UMG.UserObjectListEntry.OnListItemObjectSet // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	None GetListItemObject(None UserObjectListEntry); // GetListItemObject UMG.UserObjectListEntryLibrary.GetListItemObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x34a9530>
	void ToggleOpen(None bFocusOnOpen); // ToggleOpen UMG.MenuAnchor.ToggleOpen // (Final|Native|Public|BlueprintCallable) // <Game+0x34af5b0>
	None GetValue(); // GetValue UMG.MouseCursorBinding.GetValue // (Final|Native|Public|Const) // <Game+0x34ae590>
	void SetJustification(None InJustification); // SetJustification UMG.TextLayoutWidget.SetJustification // (Native|Public|BlueprintCallable) // <Game+0x34b7d90>
	void SetWidgetStyle(None& InWidgetStyle); // SetWidgetStyle UMG.MultiLineEditableText.SetWidgetStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x34af4d0>
	void SetTextStyle(None& InTextStyle); // SetTextStyle UMG.MultiLineEditableTextBox.SetTextStyle // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x34af320>
	None AddChildToOverlay(None Content); // AddChildToOverlay UMG.Overlay.AddChildToOverlay // (Final|Native|Public|BlueprintCallable) // <Game+0x34adf90>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.OverlaySlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34af450>
	void SetPercent(None InPercent); // SetPercent UMG.ProgressBar.SetPercent // (Final|Native|Public|BlueprintCallable) // <Game+0x34aef10>
	void SetTextureParameter(None TextureParameter); // SetTextureParameter UMG.RetainerBox.SetTextureParameter // (Final|Native|Public|BlueprintCallable) // <Game+0x34af3d0>
	void SetTextStyleSet(None NewTextStyleSet); // SetTextStyleSet UMG.RichTextBlock.SetTextStyleSet // (Final|Native|Public|BlueprintCallable) // <Game+0x34b4500>
	void SetUserSpecifiedScale(None InUserSpecifiedScale); // SetUserSpecifiedScale UMG.ScaleBox.SetUserSpecifiedScale // (Final|Native|Public|BlueprintCallable) // <Game+0x34b4580>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.ScaleBoxSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34a2a80>
	void SetState(None InOffsetFraction, None InThumbSizeFraction); // SetState UMG.ScrollBar.SetState // (Final|Native|Public|BlueprintCallable) // <Game+0x34b4270>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.ScrollBoxSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34b4600>
	void SetWidthOverride(None InWidthOverride); // SetWidthOverride UMG.SizeBox.SetWidthOverride // (Final|Native|Public|BlueprintCallable) // <Game+0x34b4780>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.SizeBoxSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34b4680>
	None TransformVectorLocalToAbsolute(None& Geometry, None LocalVector); // TransformVectorLocalToAbsolute UMG.SlateBlueprintLibrary.TransformVectorLocalToAbsolute // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // <Game+0x34b4b30>
	void SetValue(None InValue); // SetValue UMG.Slider.SetValue // (Final|Native|Public|BlueprintCallable) // <Game+0x34b8980>
	void SetSize(None InSize); // SetSize UMG.Spacer.SetSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x34b8520>
	void SetValue(None NewValue); // SetValue UMG.SpinBox.SetValue // (Final|Native|Public|BlueprintCallable) // <Game+0x34b8a00>
	None GetTextValue(); // GetTextValue UMG.TextBinding.GetTextValue // (Final|Native|Public|Const) // <Game+0x34b73d0>
	void SetText(None InText); // SetText UMG.TextBlock.SetText // (Native|Public|BlueprintCallable) // <Game+0x34b88a0>
	void SetNumberOfPieces(None InNumberOfPieces); // SetNumberOfPieces UMG.Throbber.SetNumberOfPieces // (Final|Native|Public|BlueprintCallable) // <Game+0x34b8320>
	void SetEntryWidth(None NewWidth); // SetEntryWidth UMG.TileView.SetEntryWidth // (Final|Native|Public|BlueprintCallable) // <Game+0x34b7990>
	void SetSlotPadding(None InSlotPadding); // SetSlotPadding UMG.UniformGridPanel.SetSlotPadding // (Final|Native|Public|BlueprintCallable) // <Game+0x34be820>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.UniformGridSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34be930>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.VerticalBoxSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34c23f0>
	None Spawn(None ActorClass); // Spawn UMG.Viewport.Spawn // (Final|Native|Public|BlueprintCallable) // <Game+0x34c2610>
	None GetValue(); // GetValue UMG.VisibilityBinding.GetValue // (Final|Native|Public|Const) // <Game+0x34c1110>
	void UnbindFromAnimationStarted(None Widget, None Delegate); // UnbindFromAnimationStarted UMG.WidgetAnimation.UnbindFromAnimationStarted // (Final|Native|Public|BlueprintCallable) // <Game+0x34c2880>
	None CreatePlayAnimationTimeRangeProxyObject(None& Result, None Widget, None InAnimation, None StartAtTime, None EndAtTime, None NumLoopsToPlay, None PlayMode, None PlaybackSpeed); // CreatePlayAnimationTimeRangeProxyObject UMG.WidgetAnimationPlayCallbackProxy.CreatePlayAnimationTimeRangeProxyObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x34c4870>
	None GetValue(); // GetValue UMG.WidgetBinding.GetValue // (Final|Native|Public|Const) // <Game+0x34c6a10>
	None UnlockMouse(None& Reply); // UnlockMouse UMG.WidgetBlueprintLibrary.UnlockMouse // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x34c80a0>
	void SetWindowVisibility(None InVisibility); // SetWindowVisibility UMG.WidgetComponent.SetWindowVisibility // (Final|Native|Public|BlueprintCallable) // <Game+0x34cb510>
	void SetFocus(None FocusWidget); // SetFocus UMG.WidgetInteractionComponent.SetFocus // (Final|Native|Public|BlueprintCallable) // <Game+0x34caf50>
	None SlotAsWrapBoxSlot(None Widget); // SlotAsWrapBoxSlot UMG.WidgetLayoutLibrary.SlotAsWrapBoxSlot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x34cbb90>
	void SetActiveWidgetIndex(None Index); // SetActiveWidgetIndex UMG.WidgetSwitcher.SetActiveWidgetIndex // (Native|Public|BlueprintCallable) // <Game+0x34ccea0>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.WidgetSwitcherSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34cd470>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.WindowTitleBarArea.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34cd4f0>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.WindowTitleBarAreaSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34cd570>
	void SetInnerSlotPadding(None InPadding); // SetInnerSlotPadding UMG.WrapBox.SetInnerSlotPadding // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x34cd240>
	void SetVerticalAlignment(None InVerticalAlignment); // SetVerticalAlignment UMG.WrapBoxSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // <Game+0x34cd5f0>
	void SetSelected(None bNewSelected); // SetSelected WBP_subscreen_nav_tab.WBP_subscreen_nav_tab_C.SetSelected // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void OnMatchReceivedTurn(None Match, None bDidBecomeActive); // OnMatchReceivedTurn OnlineSubsystem.TurnBasedMatchInterface.OnMatchReceivedTurn // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void ShowWaitingWidget(); // ShowWaitingWidget PlatformUMG.PUMG_AsyncImage.ShowWaitingWidget // (Native|Event|Public|BlueprintEvent) // <Game+0xbc2690>
	None IsWithEditor(); // IsWithEditor PlatformUMG.PUMG_BlueprintFunctionLibrary.IsWithEditor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0xbc1f90>
	void PlaceWidgetUnder(None BottomWidget, None TopWidget); // PlaceWidgetUnder PlatformUMG.PUMG_CanvasPanel.PlaceWidgetUnder // (Final|Native|Public|BlueprintCallable) // <Game+0xbc2060>
	None IsLoggedIn(); // IsLoggedIn PlatformUMG.PUMG_DataFactory.IsLoggedIn // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0xbc1dd0>
	void SetMaxMessageCount(None MaxMessageCount); // SetMaxMessageCount PlatformUMG.PUMG_ChatDataFactory.SetMaxMessageCount // (Final|Native|Public|BlueprintCallable) // <Game+0xbc2590>
	void UpdateRegistrationToInputManager(None Widget, None FocusGroup, None Up, None Down, None Left, None Right); // UpdateRegistrationToInputManager PlatformUMG.PUMG_Widget.UpdateRegistrationToInputManager // (Final|Native|Public|BlueprintCallable) // <Game+0xbdaf30>
	void RefreshContextBar(); // RefreshContextBar PlatformUMG.PUMG_ContextBar.RefreshContextBar // (Final|Native|Protected) // <Game+0xbc2140>
	void OnInputStateChanged(None InputState); // OnInputStateChanged PlatformUMG.PUMG_ContextBarPrompt.OnInputStateChanged // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void UIX_OnRemoveFriend(None PlayerId); // UIX_OnRemoveFriend PlatformUMG.PUMG_FriendDataFactory.UIX_OnRemoveFriend // (Final|Native|Public|BlueprintCallable) // <Game+0xbc28b0>
	None UnregisterOnClear(); // UnregisterOnClear PlatformUMG.GamepadPromptInterface.UnregisterOnClear // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	None UnregisterPromptForButton(None Button); // UnregisterPromptForButton PlatformUMG.PUMG_GamepadDataFactory.UnregisterPromptForButton // (Final|Native|Public|BlueprintCallable) // <Game+0xbc91c0>
	void TestHirezLogin(None User, None password); // TestHirezLogin PlatformUMG.PUMG_HUD.TestHirezLogin // (Final|Exec|Native|Protected) // <Game+0xbc8480>
	void TriggerHoldReleaseContextAction(None Status); // TriggerHoldReleaseContextAction PlatformUMG.ContextActionData.TriggerHoldReleaseContextAction // (Final|Native|Public|BlueprintCallable) // <Game+0xbc8680>
	void SetInputActions(None ActionData); // SetInputActions PlatformUMG.PUMG_InputManager.SetInputActions // (Final|Native|Protected) // <Game+0xbc7f60>
	void HandleJsonReady(None pHandler); // HandleJsonReady PlatformUMG.PUMG_JsonDataFactory.HandleJsonReady // (Native|Protected) // <Game+0xbc7070>
	None UpdateControllers(); // UpdateControllers PlatformUMG.PUMG_LoginDataFactory.UpdateControllers // (Final|Native|Public|BlueprintCallable) // <Game+0xbc92b0>
	void UIX_PromoteMemberToLeader(None PlayerId); // UIX_PromoteMemberToLeader PlatformUMG.PUMG_PartyDataFactory.UIX_PromoteMemberToLeader // (Native|Public|BlueprintCallable) // <Game+0xbcfe30>
	void OnSelectAvatar(None ItemId); // OnSelectAvatar PlatformUMG.PUMG_PlayerDataFactory.OnSelectAvatar // (Final|Native|Public|BlueprintCallable) // <Game+0xbcf620>
	void SetIgnored(None Ignored); // SetIgnored PlatformUMG.PUMG_PlayerInfo.SetIgnored // (Final|Native|Public|BlueprintCallable) // <Game+0xbcf820>
	void UIX_SearchByNameForPlayer(None PlayerName, None bIncludeOfflinePlayers); // UIX_SearchByNameForPlayer PlatformUMG.PUMG_PlayerWhoDataFactory.UIX_SearchByNameForPlayer // (Final|Native|Public|BlueprintCallable) // <Game+0xbcfec0>
	void ShowPopup(None popupData); // ShowPopup PlatformUMG.PUMG_PopupManager.ShowPopup // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void StartCustomMatch(None bDoChecks); // StartCustomMatch PlatformUMG.PUMG_QueueDataFactory.StartCustomMatch // (Final|Native|Public|BlueprintCallable) // <Game+0xbcfb60>
	void SetBorderSides(None bInBorderLeft, None bInBorderRight, None bInBorderTop, None bInBorderBottom); // SetBorderSides PlatformUMG.PUMG_SafeZone.SetBorderSides // (Final|Native|Public|BlueprintCallable) // <Game+0xbd4cb0>
	None OnSettingChanged(None SettingId, None SettingValue); // OnSettingChanged PlatformUMG.PUMG_SettingsDataFactory.OnSettingChanged // (Native|Public|BlueprintCallable) // <Game+0xbd4ac0>
	None SubmitPurchaseRequest(); // SubmitPurchaseRequest PlatformUMG.PUMG_StorePurchaseRequest.SubmitPurchaseRequest // (Final|Native|Public|BlueprintCallable) // <Game+0xbd4e50>
	None GetDiscountPercentage(); // GetDiscountPercentage PlatformUMG.PUMG_PortalOffer.GetDiscountPercentage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0xbd3560>
	None GetPriceWithCoupon(None Coupon); // GetPriceWithCoupon PlatformUMG.PUMG_StoreItemPrice.GetPriceWithCoupon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0xbd3be0>
	void UIX_ShowPurchaseConfirmation(None pPrice); // UIX_ShowPurchaseConfirmation PlatformUMG.PUMG_StoreItem.UIX_ShowPurchaseConfirmation // (Native|Public|BlueprintCallable) // <Game+0xbd5000>
	None GetXpAtLevel(None XpLevel); // GetXpAtLevel PlatformUMG.PUMG_XpTable.GetXpAtLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0xbd46e0>
	void UIX_RedeemCode(None Code); // UIX_RedeemCode PlatformUMG.PUMG_StoreItemHelper.UIX_RedeemCode // (Final|Native|Public|BlueprintCallable) // <Game+0xbd4f20>
	None ShouldRedirect(None HUD, None Route, None& SceneData); // ShouldRedirect PlatformUMG.PUMG_ViewRedirecter.ShouldRedirect // (Native|Public|HasOutParms) // <Game+0xbda8b0>
	None IsRouteValid(None RouteName); // IsRouteValid PlatformUMG.PUMG_ViewLayer.IsRouteValid // (Final|Native|Protected|BlueprintCallable) // <Game+0xbd9790>
	None SwapRoute(None RouteName, None SwapTargetRoute, None ForceTransition); // SwapRoute PlatformUMG.PUMG_ViewManager.SwapRoute // (Final|Native|Public|BlueprintCallable) // <Game+0xbdab90>
	void OnPartyDataUpdated(); // OnPartyDataUpdated PlatformUMG.PUMG_VoiceChatManager.OnPartyDataUpdated // (Final|Native|Protected) // <Game+0xbd9a30>
	None SetCustomMeshTriangles(None& Triangles); // SetCustomMeshTriangles CustomMeshComponent.CustomMeshComponent.SetCustomMeshTriangles // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b31c60>
	None GetStatValueText(None InWorldContextObject, None InPlayerState, None DescriptorId, None DescriptorString, None ShouldOverwriteValue, None OverwriteValue); // GetStatValueText StatWrapper_Player_Kills.StatWrapper_Player_Kills_C.GetStatValueText // (Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x260f470>
	void SetFrameRate(None& InFrameRate); // SetFrameRate PlatformCommon.PCom_SimpleTimecodeProvider.SetFrameRate // (Final|Native|Public|HasOutParms) // <Game+0x9fdd30>
	void ShowPreferredSiteIcon(None IsPreferredSite); // ShowPreferredSiteIcon WBP_RegionSelect_Entry.WBP_RegionSelect_Entry_C.ShowPreferredSiteIcon // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None FoliageOverlappingSphereCount(None WorldContextObject, None StaticMesh, None CenterPosition, None Radius); // FoliageOverlappingSphereCount Foliage.FoliageStatistics.FoliageOverlappingSphereCount // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0x32a17a0>
	void CapsuleTouched(None OverlappedComp, None Other, None OtherComp, None OtherBodyIndex, None bFromSweep, None& OverlapInfo); // CapsuleTouched Foliage.InteractiveFoliageActor.CapsuleTouched // (Final|Native|Protected|HasOutParms) // <Game+0x32a1490>
	void Simulate(None NumSteps); // Simulate Foliage.ProceduralFoliageSpawner.Simulate // (Final|Native|Public|BlueprintCallable) // <Game+0x32a18f0>
	None ShouldDisplayToUser(None LootId); // ShouldDisplayToUser PlatformInventoryItem.PlatformInventoryItem.ShouldDisplayToUser // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0xb6a690>
	None GetLootId(); // GetLootId PlatformInventoryItem.PlatformStoreAsset.GetLootId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0xb6a000>
	void GetCachedAchievementProgress(None WorldContextObject, None PlayerController, None AchievementID, None& bFoundID, None& Progress); // GetCachedAchievementProgress OnlineSubsystemUtils.AchievementBlueprintLibrary.GetCachedAchievementProgress // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0xa64110>
	None CacheAchievements(None WorldContextObject, None PlayerController); // CacheAchievements OnlineSubsystemUtils.AchievementQueryCallbackProxy.CacheAchievements // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa62c10>
	None WriteAchievementProgress(None WorldContextObject, None PlayerController, None AchievementName, None Progress, None UserTag); // WriteAchievementProgress OnlineSubsystemUtils.AchievementWriteCallbackProxy.WriteAchievementProgress // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa64730>
	None ConnectToService(None WorldContextObject, None PlayerController); // ConnectToService OnlineSubsystemUtils.ConnectionCallbackProxy.ConnectToService // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa62cd0>
	None CreateSession(None WorldContextObject, None PlayerController, None PublicConnections, None bUseLAN); // CreateSession OnlineSubsystemUtils.CreateSessionCallbackProxy.CreateSession // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa634d0>
	None DestroySession(None WorldContextObject, None PlayerController); // DestroySession OnlineSubsystemUtils.DestroySessionCallbackProxy.DestroySession // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa63600>
	None EndMatch(None WorldContextObject, None PlayerController, None MatchActor, None MatchID, None LocalPlayerOutcome, None OtherPlayersOutcome); // EndMatch OnlineSubsystemUtils.EndMatchCallbackProxy.EndMatch // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa636c0>
	None EndTurn(None WorldContextObject, None PlayerController, None MatchID, None TurnBasedMatchInterface); // EndTurn OnlineSubsystemUtils.EndTurnCallbackProxy.EndTurn // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa638d0>
	None GetServerName(None& Result); // GetServerName OnlineSubsystemUtils.FindSessionsCallbackProxy.GetServerName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0xa645e0>
	None FindTurnBasedMatch(None WorldContextObject, None PlayerController, None MatchActor, None MinPlayers, None MaxPlayers, None PlayerGroup, None ShowExistingMatches); // FindTurnBasedMatch OnlineSubsystemUtils.FindTurnBasedMatchCallbackProxy.FindTurnBasedMatch // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa63bb0>
	None CreateProxyObjectForInAppPurchase(None PlayerController, None& ProductRequest); // CreateProxyObjectForInAppPurchase OnlineSubsystemUtils.InAppPurchaseCallbackProxy.CreateProxyObjectForInAppPurchase // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0xa62e80>
	None CreateProxyObjectForInAppPurchaseUnprocessedPurchases(None PlayerController); // CreateProxyObjectForInAppPurchaseUnprocessedPurchases OnlineSubsystemUtils.InAppPurchaseCallbackProxy2.CreateProxyObjectForInAppPurchaseUnprocessedPurchases // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa63450>
	None CreateProxyObjectForInAppPurchaseQuery(None PlayerController, None& ProductIdentifiers); // CreateProxyObjectForInAppPurchaseQuery OnlineSubsystemUtils.InAppPurchaseQueryCallbackProxy.CreateProxyObjectForInAppPurchaseQuery // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0xa63080>
	None CreateProxyObjectForInAppPurchaseQuery(None PlayerController, None& ProductIdentifiers); // CreateProxyObjectForInAppPurchaseQuery OnlineSubsystemUtils.InAppPurchaseQueryCallbackProxy2.CreateProxyObjectForInAppPurchaseQuery // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0xa62f70>
	None CreateProxyObjectForInAppPurchaseRestore(None& ConsumableProductFlags, None PlayerController); // CreateProxyObjectForInAppPurchaseRestore OnlineSubsystemUtils.InAppPurchaseRestoreCallbackProxy.CreateProxyObjectForInAppPurchaseRestore // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0xa63330>
	None CreateProxyObjectForInAppPurchaseRestore(None& ConsumableProductFlags, None PlayerController); // CreateProxyObjectForInAppPurchaseRestore OnlineSubsystemUtils.InAppPurchaseRestoreCallbackProxy2.CreateProxyObjectForInAppPurchaseRestore // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0xa63210>
	None JoinSession(None WorldContextObject, None PlayerController, None& SearchResult); // JoinSession OnlineSubsystemUtils.JoinSessionCallbackProxy.JoinSession // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0xa68450>
	None WriteLeaderboardInteger(None PlayerController, None StatName, None StatValue); // WriteLeaderboardInteger OnlineSubsystemUtils.LeaderboardBlueprintLibrary.WriteLeaderboardInteger // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa690d0>
	None CreateProxyObjectForFlush(None PlayerController, None SessionName); // CreateProxyObjectForFlush OnlineSubsystemUtils.LeaderboardFlushCallbackProxy.CreateProxyObjectForFlush // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa682d0>
	None CreateProxyObjectForIntQuery(None PlayerController, None StatName); // CreateProxyObjectForIntQuery OnlineSubsystemUtils.LeaderboardQueryCallbackProxy.CreateProxyObjectForIntQuery // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa68390>
	None Logout(None WorldContextObject, None PlayerController); // Logout OnlineSubsystemUtils.LogoutCallbackProxy.Logout // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa685e0>
	void ClientOnConnected(); // ClientOnConnected OnlineSubsystemUtils.OnlineBeaconClient.ClientOnConnected // (Final|Net|NetReliableNative|Event|Private|NetClient) // <Game+0xa68030>
	void ServerUpdateReservationRequest(None SessionId, None ReservationUpdate); // ServerUpdateReservationRequest OnlineSubsystemUtils.PartyBeaconClient.ServerUpdateReservationRequest // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // <Game+0xa68e80>
	None QuitMatch(None WorldContextObject, None PlayerController, None MatchID, None Outcome, None TurnTimeoutInSeconds); // QuitMatch OnlineSubsystemUtils.QuitMatchCallbackProxy.QuitMatch // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa686a0>
	None ShowExternalLoginUI(None WorldContextObject, None InPlayerController); // ShowExternalLoginUI OnlineSubsystemUtils.ShowLoginUICallbackProxy.ShowExternalLoginUI // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa69010>
	void ServerReservationRequest(None SessionId, None Reservation); // ServerReservationRequest OnlineSubsystemUtils.SpectatorBeaconClient.ServerReservationRequest // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // <Game+0xa68ce0>
	void ServerPong(); // ServerPong OnlineSubsystemUtils.TestBeaconClient.ServerPong // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game+0xa68970>
	void RegisterTurnBasedMatchInterfaceObject(None WorldContextObject, None PlayerController, None Object); // RegisterTurnBasedMatchInterfaceObject OnlineSubsystemUtils.TurnBasedBlueprintLibrary.RegisterTurnBasedMatchInterfaceObject // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xa69c20>
	None IsIdling(); // IsIdling OnlineSubsystemUtils.VoipListenerSynthComponent.IsIdling // (Final|Native|Public|BlueprintCallable) // <Game+0xa69bf0>
	void Stop(); // Stop AudioMixer.SynthComponent.Stop // (Final|Native|Public|BlueprintCallable) // <Game+0x3530db0>
	None TrimAudioCache(None InMegabytesToFree); // TrimAudioCache AudioMixer.AudioMixerBlueprintLibrary.TrimAudioCache // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3531090>
	void SetSettings(None& Settings); // SetSettings AudioMixer.SubmixEffectDynamicsProcessorPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x35304f0>
	void SetSettings(None& InSettings); // SetSettings AudioMixer.SubmixEffectSubmixEQPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b60aa0>
	void SetSettingsWithReverbEffect(None InReverbEffect, None WetLevel, None DryLevel); // SetSettingsWithReverbEffect AudioMixer.SubmixEffectReverbPreset.SetSettingsWithReverbEffect // (Final|Native|Public|BlueprintCallable) // <Game+0x3530880>
	void SetSettingsWithReverbEffect(None InReverbEffect, None WetLevel, None DryLevel); // SetSettingsWithReverbEffect AudioMixer.SubmixEffectReverbFastPreset.SetSettingsWithReverbEffect // (Final|Native|Public|BlueprintCallable) // <Game+0x3530780>
	void UpdateScalarTrack(None TrackName, None TrackValue); // UpdateScalarTrack NearMissCurveComponent.NearMissCurveComponent_C.UpdateScalarTrack // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void Event Set Mastery Level(None MasteryLevel); // Event Set Mastery Level WBP_WeaponMasteryBadgeLarge.WBP_WeaponMasteryBadgeLarge_C.Event Set Mastery Level // (BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void SetRowIndex(None NewRowIndex); // SetRowIndex MovieScene.MovieSceneSection.SetRowIndex // (Final|Native|Public|BlueprintCallable) // <Game+0x33300a0>
	None FindBindingsByTag(None InBindingName); // FindBindingsByTag MovieScene.MovieSceneSequence.FindBindingsByTag // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x332fad0>
	void StopAtCurrentTime(); // StopAtCurrentTime MovieScene.MovieSceneSequencePlayer.StopAtCurrentTime // (Final|Native|Public|BlueprintCallable) // <Game+0x33341f0>
	void SetSequence(None Sequence); // SetSequence MovieScene.MovieSceneSubSection.SetSequence // (Final|Native|Public|BlueprintCallable) // <Game+0x3334090>
	void OnTick(None DeltaSeconds, None InPlayRate); // OnTick MovieScene.MovieSceneCustomClockSource.OnTick // (Native|Public) // <Game+0x332b490>
	None OnEvaluate(None Interp); // OnEvaluate MovieScene.MovieSceneEasingFunction.OnEvaluate // (Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x260f470>
	void ShowSkinnedMeshMaterialSection(None SkinnedMeshComponent, None MaterialID, None SectionIndex, None bShow, None LODIndex); // ShowSkinnedMeshMaterialSection PlatformGameFramework.PGame_BlueprintFunctionLibrary.ShowSkinnedMeshMaterialSection // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xae1360>
	void OnRep_Tween(); // OnRep_Tween PlatformGameFramework.PGame_Character.OnRep_Tween // (Native|Protected) // <Game+0xae0870>
	void StopTween(); // StopTween PlatformGameFramework.PGame_CharacterMovementComponent.StopTween // (Native|Public) // <Game+0xae17f0>
	void TestFubarRewardPostLogin(); // TestFubarRewardPostLogin PlatformGameFramework.PGame_CheatComponent.TestFubarRewardPostLogin // (Final|Exec|Native|Protected) // <Game+0xae1860>
	void Visualize(); // Visualize PlatformGameFramework.PGame_CombatLogVisualizer.Visualize // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void OnRep_EffectData(); // OnRep_EffectData PlatformGameFramework.PGame_EffectManagerComponent.OnRep_EffectData // (Native|Public) // <Game+0xae0830>
	None GetIntPropertyValue(None propIdInt); // GetIntPropertyValue PlatformGameFramework.PGame_Effectable.GetIntPropertyValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0xadfde0>
	void ProvideSonyMatchFeedback(None bReviewTeamOnly); // ProvideSonyMatchFeedback PlatformGameFramework.PGame_GameInstance.ProvideSonyMatchFeedback // (Final|Native|Public|BlueprintCallable) // <Game+0xae0920>
	void OnFubarShutdownTimeout(); // OnFubarShutdownTimeout PlatformGameFramework.PGame_GameMode.OnFubarShutdownTimeout // (Final|Native|Protected) // <Game+0xae0760>
	void OnRep_SonyMatchIdForPlayerFeedback(); // OnRep_SonyMatchIdForPlayerFeedback PlatformGameFramework.PGame_GameState.OnRep_SonyMatchIdForPlayerFeedback // (Final|Native|Public) // <Game+0xae0850>
	void RequestNewJson(); // RequestNewJson PlatformGameFramework.PGame_LandingPanelJSONHandler.RequestNewJson // (Final|Native|Private) // <Game+0xae0a30>
	void ServerUpdateSonyMatchOwnerEligibility(None bIsEligible); // ServerUpdateSonyMatchOwnerEligibility PlatformGameFramework.PGame_PlayerController.ServerUpdateSonyMatchOwnerEligibility // (Net|NetReliableNative|Event|Public|NetServer) // <Game+0xae1210>
	void RemoveTrackedPrimitive(None InPrimitive); // RemoveTrackedPrimitive PlatformGameFramework.PGame_PositionHistoryComponent.RemoveTrackedPrimitive // (Final|Native|Public|BlueprintCallable) // <Game+0xae09b0>
	void UnPin(); // UnPin MagicLeapARPin.MagicLeapARPinComponent.UnPin // (Final|Native|Public|BlueprintCallable) // <Game+0x1aae200>
	void UnBindToOnMagicLeapARPinUpdatedDelegate(None& Delegate); // UnBindToOnMagicLeapARPinUpdatedDelegate MagicLeapARPin.MagicLeapARPinFunctionLibrary.UnBindToOnMagicLeapARPinUpdatedDelegate // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x1aae160>
	None NavigateConfirm(); // NavigateConfirm WBP_PartyModuleCardSlot.WBP_PartyModuleCardSlot_C.NavigateConfirm // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void FocusFirstPlayer(None TreeView); // FocusFirstPlayer WBP_CustomMassInvite.WBP_CustomMassInvite_C.FocusFirstPlayer // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void Construct(); // Construct WBP_PerkDescSlot.WBP_PerkDescSlot_C.Construct // (BlueprintCosmetic|Event|Public|BlueprintEvent) // <Game+0x260f470>
	None GetGeometryCacheComponent(); // GetGeometryCacheComponent GeometryCache.GeometryCacheActor.GetGeometryCacheComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0xbc6cf0>
	void TickAtThisTime(None Time, None bInIsRunning, None bInBackwards, None bInIsLooping); // TickAtThisTime GeometryCache.GeometryCacheComponent.TickAtThisTime // (Final|Native|Public|BlueprintCallable) // <Game+0x19d2490>
	void AddMeshSample(None& MeshData, None SampleTime); // AddMeshSample GeometryCache.GeometryCacheTrack_FlipbookAnimation.AddMeshSample // (Final|Native|Public|HasOutParms) // <Game+0x19d1de0>
	void SetMesh(None& NewMeshData); // SetMesh GeometryCache.GeometryCacheTrack_TransformAnimation.SetMesh // (Final|Native|Public|HasOutParms) // <Game+0x19d2280>
	void SetMesh(None& NewMeshData); // SetMesh GeometryCache.GeometryCacheTrack_TransformGroupAnimation.SetMesh // (Final|Native|Public|HasOutParms) // <Game+0x19d2280>
	void SetTint(None BaseColor); // SetTint WBP_StorePanelButton.WBP_StorePanelButton_C.SetTint // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None UseBlackboard(None BlackboardAsset, None& BlackboardComponent); // UseBlackboard AIModule.AIController.UseBlackboard // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x406d3d0>
	void SetSenseEnabled(None SenseClass, None bEnable); // SetSenseEnabled AIModule.AIPerceptionComponent.SetSenseEnabled // (Final|Native|Public|BlueprintCallable) // <Game+0x406cd50>
	void ReportNoiseEvent(None WorldContextObject, None NoiseLocation, None Loudness, None Instigator, None MaxRange, None Tag); // ReportNoiseEvent AIModule.AISense_Hearing.ReportNoiseEvent // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0x40715c0>
	void UnregisterFromSense(None SenseClass); // UnregisterFromSense AIModule.AIPerceptionStimuliSourceComponent.UnregisterFromSense // (Final|Native|Public|BlueprintCallable) // <Game+0x406d350>
	void SetSmartLinkEnabled(None bEnabled); // SetSmartLinkEnabled AIModule.NavLinkProxy.SetSmartLinkEnabled // (Final|Native|Public|BlueprintCallable) // <Game+0x40850a0>
	void OnNavDataRegistered(None NavData); // OnNavDataRegistered AIModule.PathFollowingComponent.OnNavDataRegistered // (Final|Native|Protected) // <Game+0x4084c50>
	void SuspendCrowdSteering(None bSuspend); // SuspendCrowdSteering AIModule.CrowdFollowingComponent.SuspendCrowdSteering // (Native|Public|BlueprintCallable) // <Game+0x407de30>
	None GetActionPriority(); // GetActionPriority AIModule.PawnAction.GetActionPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x40846b0>
	void ActionTick(None ControlledPawn, None DeltaSeconds); // ActionTick AIModule.PawnAction_BlueprintBase.ActionTick // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void OnMoveCompleted(None RequestID, None MovementResult); // OnMoveCompleted AIModule.AIAsyncTaskBlueprintProxy.OnMoveCompleted // (Final|Native|Public) // <Game+0x406c550>
	void UnlockAIResourcesWithAnimation(None AnimInstance, None bUnlockMovement, None UnlockAILogic); // UnlockAIResourcesWithAnimation AIModule.AIBlueprintHelperLibrary.UnlockAIResourcesWithAnimation // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // <Game+0x406d220>
	void ReportPerceptionEvent(None WorldContextObject, None PerceptionEvent); // ReportPerceptionEvent AIModule.AIPerceptionSystem.ReportPerceptionEvent // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x406c9a0>
	None OnUpdate(None& EventsToProcess); // OnUpdate AIModule.AISense_Blueprint.OnUpdate // (Event|Public|HasOutParms|BlueprintEvent) // <Game+0x260f470>
	void ReportDamageEvent(None WorldContextObject, None DamagedActor, None Instigator, None DamageAmount, None EventLocation, None HitLocation); // ReportDamageEvent AIModule.AISense_Damage.ReportDamageEvent // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0x40713f0>
	void RequestPawnPredictionEvent(None Requestor, None PredictedActor, None PredictionTime); // RequestPawnPredictionEvent AIModule.AISense_Prediction.RequestPawnPredictionEvent // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x4071880>
	void AILoggingVerbose(); // AILoggingVerbose AIModule.AISystem.AILoggingVerbose // (Exec|Native|Public) // <Game+0x2040030>
	None AIMoveTo(None Controller, None GoalLocation, None GoalActor, None AcceptanceRadius, None StopOnOverlap, None AcceptPartialPath, None bUsePathfinding, None bLockAILogic, None bUseContinuosGoalTracking, None ProjectGoalOnNavigation); // AIMoveTo AIModule.AITask_MoveTo.AIMoveTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0x4070e10>
	None RunEQS(None Controller, None QueryTemplate); // RunEQS AIModule.AITask_RunEQS.RunEQS // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x4071980>
	void StopLogic(None Reason); // StopLogic AIModule.BrainComponent.StopLogic // (Native|Public|BlueprintCallable) // <Game+0x4076330>
	void SetDynamicSubtree(None InjectTag, None BehaviorAsset); // SetDynamicSubtree AIModule.BehaviorTreeComponent.SetDynamicSubtree // (Native|Public|BlueprintCallable) // <Game+0x4071a40>
	None GetBlackboardAsset(); // GetBlackboardAsset AIModule.BlackboardAssetProvider.GetBlackboardAsset // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2058a50>
	void SetValueAsVector(None& KeyName, None VectorValue); // SetValueAsVector AIModule.BlackboardComponent.SetValueAsVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x4076240>
	void ReceiveTickAI(None OwnerController, None ControlledPawn, None DeltaSeconds); // ReceiveTickAI AIModule.BTDecorator_BlueprintBase.ReceiveTickAI // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void StopUsingExternalEvent(None NodeOwner); // StopUsingExternalEvent AIModule.BTFunctionLibrary.StopUsingExternalEvent // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3e52170>
	void ReceiveTickAI(None OwnerController, None ControlledPawn, None DeltaSeconds); // ReceiveTickAI AIModule.BTService_BlueprintBase.ReceiveTickAI // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void SetFinishOnMessageWithId(None MessageName, None RequestID); // SetFinishOnMessageWithId AIModule.BTTask_BlueprintBase.SetFinishOnMessageWithId // (Final|Native|Protected|BlueprintCallable) // <Game+0x407a960>
	void ProvideSingleLocation(None QuerierObject, None QuerierActor, None& ResultingLocation); // ProvideSingleLocation AIModule.EnvQueryContext_BlueprintBase.ProvideSingleLocation // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent|Const) // <Game+0x260f470>
	None GetQuerier(); // GetQuerier AIModule.EnvQueryGenerator_BlueprintBase.GetQuerier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x407de00>
	void SetNamedParam(None ParamName, None Value); // SetNamedParam AIModule.EnvQueryInstanceBlueprintWrapper.SetNamedParam // (Final|Native|Public|BlueprintCallable) // <Game+0x4081950>
	None RunEQSQuery(None WorldContextObject, None QueryTemplate, None Querier, None RunMode, None WrapperClass); // RunEQSQuery AIModule.EnvQueryManager.RunEQSQuery // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x40817d0>
	None SetLocalNavigationGridDensity(None WorldContextObject, None CellSize); // SetLocalNavigationGridDensity AIModule.NavLocalGridManager.SetLocalNavigationGridDensity // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x4084e40>
	None K2_PushAction(None NewAction, None Priority, None Instigator); // K2_PushAction AIModule.PawnActionsComponent.K2_PushAction // (Final|Native|Public|BlueprintCallable) // <Game+0x40849b0>
	void SetSensingUpdatesEnabled(None bEnabled); // SetSensingUpdatesEnabled AIModule.PawnSensingComponent.SetSensingUpdatesEnabled // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game+0x4085010>
	void Has Player Owner(None& Return Value); // Has Player Owner WBP_RogueMasteryPortrait.WBP_RogueMasteryPortrait_C.Has Player Owner // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x260f470>
	void LaunchTutorial(None Force Close Screen); // LaunchTutorial FirstTimeTutorialWidget.FirstTimeTutorialWidget_C.LaunchTutorial // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void RemoveDataTables(None& InTables); // RemoveDataTables DataTableSkinsCommon.DynamicSkinTable.RemoveDataTables // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0xcd23c0>
	void UnsubscribeToKeywords(None& InKeywords); // UnsubscribeToKeywords DataTableSkinsCommon.MultiSkinObject.UnsubscribeToKeywords // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0xcd3b80>
	void StaticSetForcedLOD(None InMeshComp, None InForcedLOD); // StaticSetForcedLOD DataTableSkinsCommon.SkinnableSkeletalMeshComponent.StaticSetForcedLOD // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xcd38e0>
	void SetSkeletalMeshKeywords(None& InKeywords, None InFailSafeSkeletalMesh); // SetSkeletalMeshKeywords DataTableSkinsCommon.SkinnableMergedMeshComponent.SetSkeletalMeshKeywords // (Native|Public|HasOutParms|BlueprintCallable) // <Game+0xcd3710>
	void SetStaticMeshKeyword(None InKeyword, None InFailSafeStaticMesh); // SetStaticMeshKeyword DataTableSkinsCommon.SkinnableStaticMeshComponent.SetStaticMeshKeyword // (Native|Public|BlueprintCallable) // <Game+0xcd3810>
	void ServerQosRequest(None InSessionId); // ServerQosRequest Qos.QosBeaconClient.ServerQosRequest // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // <Game+0xaeb100>
	void SetInfoFieldData(None CosmeticItem, None ItemSlot); // SetInfoFieldData WBP_ItemInfoPanel.WBP_ItemInfoPanel_C.SetInfoFieldData // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void InitializeValue(); // InitializeValue SettingsInfo_Quality.SettingsInfo_Quality_C.InitializeValue // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void GetCurrentChallengeId(None& Return Value); // GetCurrentChallengeId WBP_ChallengeEntry_Card.WBP_ChallengeEntry_Card_C.GetCurrentChallengeId // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x260f470>
	void PostSelectiveEventStopToAkComponent(None SelectiveEvent, None AkComponent); // PostSelectiveEventStopToAkComponent SelectiveAkAudioEventCommon.SelectiveAkGameplayStatics.PostSelectiveEventStopToAkComponent // (Final|BlueprintCosmetic|Native|Static|Private|BlueprintCallable) // <Game+0xcf0170>
	None Received_NotifyEnd(None MeshComp, None Animation); // Received_NotifyEnd ANotifyState_MagazineHide.ANotifyState_MagazineHide_C.Received_NotifyEnd // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // <Game+0x260f470>
	void OpenPortal(); // OpenPortal AkAudio.AkAcousticPortal.OpenPortal // (Final|Native|Public|BlueprintCallable) // <Game+0xc78080>
	void StopAmbientSound(); // StopAmbientSound AkAudio.AkAmbientSound.StopAmbientSound // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0xc79210>
	void MigrateMultiCoreRendering(None NewValue); // MigrateMultiCoreRendering AkAudio.AkAndroidInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0xc77fd0>
	None MinimumDuration(); // MinimumDuration AkAudio.AkAudioEvent.MinimumDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0xc78050>
	void Stop(); // Stop AkAudio.AkGameObject.Stop // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0xc7df00>
	void UseReverbVolumes(None inUseReverbVolumes); // UseReverbVolumes AkAudio.AkComponent.UseReverbVolumes // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0xc79410>
	None PostAssociatedAudioInputEvent(); // PostAssociatedAudioInputEvent AkAudio.AkAudioInputComponent.PostAssociatedAudioInputEvent // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0xc787f0>
	void SetIsChecked(None InIsChecked); // SetIsChecked AkAudio.AkCheckBox.SetIsChecked // (Final|Native|Public|BlueprintCallable) // <Game+0xc78ca0>
	void UseReverbVolumes(None inUseReverbVolumes, None Actor); // UseReverbVolumes AkAudio.AkGameplayStatics.UseReverbVolumes // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // <Game+0xc7e5a0>
	None GetType(); // GetType AkAudio.AkMIDIEventCallbackInfo.GetType // (Final|Native|Public|BlueprintCallable) // <Game+0xc82e80>
	void UpdateGeometry(); // UpdateGeometry AkAudio.AkGeometryComponent.UpdateGeometry // (Final|Native|Public|BlueprintCallable) // <Game+0xc82ed0>
	void MigrateMultiCoreRendering(None NewValue); // MigrateMultiCoreRendering AkAudio.AkHololensInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0xc77fd0>
	None Conv_FAkBoolPropertyToControlToText(None& INAkBoolPropertyToControl); // Conv_FAkBoolPropertyToControlToText AkAudio.AkItemBoolPropertiesConv.Conv_FAkBoolPropertyToControlToText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0xc87030>
	void SetSearchText(None newText); // SetSearchText AkAudio.AkItemBoolProperties.SetSearchText // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0xc87650>
	None Conv_FAkPropertyToControlToText(None& INAkPropertyToControl); // Conv_FAkPropertyToControlToText AkAudio.AkItemPropertiesConv.Conv_FAkPropertyToControlToText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0xc87030>
	void SetSearchText(None newText); // SetSearchText AkAudio.AkItemProperties.SetSearchText // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0xc87650>
	void MigrateMultiCoreRendering(None NewValue); // MigrateMultiCoreRendering AkAudio.AkLinuxInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0xc77fd0>
	void MigrateMultiCoreRendering(None NewValue); // MigrateMultiCoreRendering AkAudio.AkLuminInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0xc77fd0>
	void MigrateMultiCoreRendering(None NewValue); // MigrateMultiCoreRendering AkAudio.AkMacInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0xc77fd0>
	void MigrateMultiCoreRendering(None NewValue); // MigrateMultiCoreRendering AkAudio.AkPS4InitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0xc87370>
	void SetValue(None InValue); // SetValue AkAudio.AkSlider.SetValue // (Final|Native|Public|BlueprintCallable) // <Game+0xc87870>
	void UpdateSurfaceReflectorSet(); // UpdateSurfaceReflectorSet AkAudio.AkSurfaceReflectorSetComponent.UpdateSurfaceReflectorSet // (Final|Native|Public|BlueprintCallable) // <Game+0xc8d710>
	void MigrateMultiCoreRendering(None NewValue); // MigrateMultiCoreRendering AkAudio.AkSwitchInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0xc77fd0>
	None Unsubscribe(None& SubscriptionId, None& UnsubscriptionDone); // Unsubscribe AkAudio.AkWaapiCalls.Unsubscribe // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0xc8d5f0>
	None Conv_FAkWaapiFieldNamesToText(None& INAkWaapiFieldNames); // Conv_FAkWaapiFieldNamesToText AkAudio.SAkWaapiFieldNamesConv.Conv_FAkWaapiFieldNamesToText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0xc87030>
	None SetStringField(None& FieldName, None FieldValue, None Target); // SetStringField AkAudio.AkWaapiJsonManager.SetStringField // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0xc8d0e0>
	None Conv_FAkWaapiUriToText(None& INAkWaapiUri); // Conv_FAkWaapiUriToText AkAudio.AkWaapiUriConv.Conv_FAkWaapiUriToText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0xc87030>
	void MigrateMultiCoreRendering(None NewValue); // MigrateMultiCoreRendering AkAudio.AkWindowsInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0xc77fd0>
	void MigrateMultiCoreRendering(None NewValue); // MigrateMultiCoreRendering AkAudio.AkWinGDKInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0xc77fd0>
	void SetSearchText(None newText); // SetSearchText AkAudio.AkWwiseTree.SetSearchText // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0xc87650>
	void MigrateMultiCoreRendering(None NewValue); // MigrateMultiCoreRendering AkAudio.AkXboxOneGDKInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0xc77fd0>
	void MigrateMultiCoreRendering(None NewValue); // MigrateMultiCoreRendering AkAudio.AkXboxOneInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0xc77fd0>
	void MigrateMultiCoreRendering(None NewValue); // MigrateMultiCoreRendering AkAudio.AkXSXInitializationSettings.MigrateMultiCoreRendering // (Final|Native|Public) // <Game+0xc77fd0>
	None PostEventAsync(None WorldContextObject, None AkEvent, None Actor, None CallbackMask, None& PostEventCallback, None& ExternalSources, None bStopWhenAttachedToDestroyed); // PostEventAsync AkAudio.PostEventAsync.PostEventAsync // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0xc906b0>
	None PostEventAtLocationAsync(None WorldContextObject, None AkEvent, None Location, None Orientation); // PostEventAtLocationAsync AkAudio.PostEventAtLocationAsync.PostEventAtLocationAsync // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0xc90930>
	void SetDisabledAppearance(None IsDisabled); // SetDisabledAppearance WBP_RadialMenuHighlight.WBP_RadialMenuHighlight_C.SetDisabledAppearance // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void ServerMessage(None Message); // ServerMessage EasyAntiCheatCommon.EasyAntiCheatNetComponent.ServerMessage // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game+0xc9d0a0>
	void SetAnimationBudgetParameters(None WorldContextObject, None& InParameters); // SetAnimationBudgetParameters AnimationBudgetAllocator.AnimationBudgetBlueprintLibrary.SetAnimationBudgetParameters // (Final|Native|Static|Private|HasOutParms|BlueprintCallable) // <Game+0xca27f0>
	void SetAutoRegisterWithBudgetAllocator(None bInAutoRegisterWithBudgetAllocator); // SetAutoRegisterWithBudgetAllocator AnimationBudgetAllocator.SkeletalMeshComponentBudgeted.SetAutoRegisterWithBudgetAllocator // (Final|Native|Public|BlueprintCallable) // <Game+0xca2990>
	None NavigateConfirm(); // NavigateConfirm WBP_NewsRotatorWidget.WBP_NewsRotatorWidget_C.NavigateConfirm // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void GetNavigationWidgets(None& Return Value); // GetNavigationWidgets ReportMenu.ReportMenu_C.GetNavigationWidgets // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x260f470>
	None GetSkinObject(); // GetSkinObject SkinnableAnimGraphRuntime.SkinnedAnimInstance.GetSkinObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0xce0940>
	None FindPositionFromDistanceCurve(None& DistanceCurveName, None Distance, None InAnimSequence); // FindPositionFromDistanceCurve HiRezAnimationCommon.HiRezAnimationStatics.FindPositionFromDistanceCurve // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0xcf0e90>
	None GetCurrentSecondsRemaining(); // GetCurrentSecondsRemaining WBP_Daily_Challenge_Timer.WBP_Daily_Challenge_Timer_C.GetCurrentSecondsRemaining // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x260f470>
	void HandleInputStateChange(None NewInputState); // HandleInputStateChange WBP_QueueSelection_RegionSelectButton.WBP_QueueSelection_RegionSelectButton_C.HandleInputStateChange // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void OnPSCFinished(None InPSC); // OnPSCFinished SceneComponentPools.ParticleSystemPoolComponentBase.OnPSCFinished // (Native|Protected) // <Game+0xcf9fa0>
	void ForceReturnToPool(); // ForceReturnToPool SceneComponentPools.PoolableDecalComponent.ForceReturnToPool // (Final|Native|Public|BlueprintCallable) // <Game+0xcf9d00>
	None SpawnStaticMeshAttached(None Mesh, None AttachToComponent, None AttachInfo); // SpawnStaticMeshAttached SceneComponentPools.SceneComponentPoolStatics.SpawnStaticMeshAttached // (Final|Native|Static|Public|BlueprintCallable) // <Game+0xcfaff0>
	void InitializeWidget(None HUD); // InitializeWidget WBP_RegionSelectRedirect.WBP_RegionSelectRedirect_C.InitializeWidget // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None DoesLocalSettingApply(None HUD); // DoesLocalSettingApply FirstTimeTutorialRedirector.FirstTimeTutorialRedirector_C.DoesLocalSettingApply // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // <Game+0x260f470>
	void GetRegionSelectEntries(None& RegionSelectEntries); // GetRegionSelectEntries WBP_RegionSelect.WBP_RegionSelect_C.GetRegionSelectEntries // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void UpdateProgressBar(None Perc); // UpdateProgressBar WBP_PlayerProfileScreen_AccountLevel.WBP_PlayerProfileScreen_AccountLevel_C.UpdateProgressBar // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void TransformNames(None& SubjectFrameHandle, None& TransformNames); // TransformNames LiveLink.LiveLinkBlueprintLibrary.TransformNames // (Final|Native|Static|Private|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0xdb1330>
	void GetSubjectDataAtWorldTime(None SubjectName, None WorldTime, None& bSuccess, None& SubjectFrameHandle); // GetSubjectDataAtWorldTime LiveLink.LiveLinkComponent.GetSubjectDataAtWorldTime // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0xdb0550>
	void GetAvailableProviders(None WorldContextObject, None LatentInfo, None Duration, None& AvailableProviders); // GetAvailableProviders LiveLink.LiveLinkMessageBusFinder.GetAvailableProviders // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0xdaed40>
	void BuildFromClient(); // BuildFromClient LiveLink.LiveLinkPreset.BuildFromClient // (Final|Native|Public|BlueprintCallable) // <Game+0xdae980>
	void RemapCurveElements(None& CurveItems); // RemapCurveElements LiveLink.LiveLinkRemapAsset.RemapCurveElements // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // <Game+0xdb0f40>
	None TransformTime(None& SourceTime, None& SourceRate, None& DestinationRate); // TransformTime TimeManagement.TimeManagementBlueprintLibrary.TransformTime // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x32dcc90>
	void FindWeaponXpReward(None ActivityTier, None& WeaponXpRewardItem, None& Success); // FindWeaponXpReward WBP_WeaponMilestoneEntry.WBP_WeaponMilestoneEntry_C.FindWeaponXpReward // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x260f470>
	void SetWeaponComponent(None WeaponComponent); // SetWeaponComponent BP_InWorld_Reticle.BP_InWorld_Reticle_C.SetWeaponComponent // (BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void OnPrimaryTwoWeaponHolstered__DelegateSignature(None bpp__WeaponComponent__pf, None bpp__PrimaryTwoHolstered__pf); // OnPrimaryTwoWeaponHolstered__DelegateSignature MainCharacter.MainCharacter_C.OnPrimaryTwoWeaponHolstered__DelegateSignature // (MulticastDelegate|Public|Delegate) // <Game+0x260f470>
	None BP_GetTransformOrigin(); // BP_GetTransformOrigin MovieSceneTracks.MovieSceneTransformOrigin.BP_GetTransformOrigin // (Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x260f470>
	void SetConstraintBindingID(None& InConstraintBindingID); // SetConstraintBindingID MovieSceneTracks.MovieScene3DConstraintSection.SetConstraintBindingID // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x33ec6f0>
	void SetStartOffset(None InStartOffset); // SetStartOffset MovieSceneTracks.MovieSceneAudioSection.SetStartOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0xbcfa20>
	void SetCameraBindingID(None& InCameraBindingID); // SetCameraBindingID MovieSceneTracks.MovieSceneCameraCutSection.SetCameraBindingID // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x33ec6f0>
	void SetShotDisplayName(None InShotDisplayName); // SetShotDisplayName MovieSceneTracks.MovieSceneCinematicShotSection.SetShotDisplayName // (Final|Native|Public|BlueprintCallable) // <Game+0x33f3260>
	void SetVisibility(None InVisibility); // SetVisibility MovieSceneTracks.MovieSceneLevelVisibilitySection.SetVisibility // (Final|Native|Public|BlueprintCallable) // <Game+0x33f3350>
	void SetDestroyOnSystemFinish(None bShouldDestroyOnSystemFinish); // SetDestroyOnSystemFinish Niagara.NiagaraActor.SetDestroyOnSystemFinish // (Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game+0xf450b0>
	void SetVariableVec4(None InVariableName, None& InValue); // SetVariableVec4 Niagara.NiagaraComponent.SetVariableVec4 // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0xf46480>
	void ReceiveParticleData(None& Data, None NiagaraSystem); // ReceiveParticleData Niagara.NiagaraParticleCallbackHandler.ReceiveParticleData // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0xf4af60>
	void GetTextureSize(None Component, None& SizeX, None& SizeY); // GetTextureSize Niagara.NiagaraDataInterfaceGrid2DCollection.GetTextureSize // (Native|Public|HasOutParms|BlueprintCallable) // <Game+0xf4ae40>
	None SpawnSystemAttached(None SystemTemplate, None AttachToComponent, None AttachPointName, None Location, None Rotation, None LocationType, None bAutoDestroy, None bAutoActivate, None PoolingMethod, None bPreCullCheck); // SpawnSystemAttached Niagara.NiagaraFunctionLibrary.SpawnSystemAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0xf4e290>
	void SetVectorParameter(None InVariableName, None InValue); // SetVectorParameter Niagara.NiagaraParameterCollectionInstance.SetVectorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0xf4dde0>
	void SetSystem(None InSystem); // SetSystem Niagara.NiagaraPreviewBase.SetSystem // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None Num(); // Num Niagara.NiagaraPreviewAxis.Num // (Native|Event|Public|BlueprintEvent) // <Game+0xf52110>
	void SetPaused(None bPaused); // SetPaused Niagara.NiagaraPreviewGrid.SetPaused // (Final|Native|Public|BlueprintCallable) // <Game+0xf52140>
	void RaiseOnGPUCompilationComplete(); // RaiseOnGPUCompilationComplete Niagara.NiagaraScript.RaiseOnGPUCompilationComplete // (Final|Native|Public) // <Game+0xae0850>
	void DisplayFullCompletion(); // DisplayFullCompletion WBP_ChallengeEntry_CardHorizontal.WBP_ChallengeEntry_CardHorizontal_C.DisplayFullCompletion // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void SliceProceduralMesh(None InProcMesh, None PlanePosition, None PlaneNormal, None bCreateOtherHalf, None& OutOtherHalfProcMesh, None CapOption, None CapMaterial); // SliceProceduralMesh ProceduralMeshComponent.KismetProceduralMeshLibrary.SliceProceduralMesh // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x1a84d20>
	void UpdateMeshSection_LinearColor(None SectionIndex, None& Vertices, None& Normals, None& UV0, None& UV1, None& UV2, None& UV3, None& VertexColors, None& Tangents); // UpdateMeshSection_LinearColor ProceduralMeshComponent.ProceduralMeshComponent.UpdateMeshSection_LinearColor // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1a85210>
	void DisplayGamepadFocus(None ShouldDisplayFocus); // DisplayGamepadFocus WBP_RogueMasteryTrackSection.WBP_RogueMasteryTrackSection_C.DisplayGamepadFocus // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None GetSpawnedEffect(); // GetSpawnedEffect NiagaraAnimNotifies.AnimNotify_PlayNiagaraEffect.GetSpawnedEffect // (Final|Native|Public|BlueprintCallable|Const) // <Game+0xf56fd0>
	void OnMultiAsyncTraceResult__DelegateSignature(None bBlockingHit, None& OutHits, None& start, None& end); // OnMultiAsyncTraceResult__DelegateSignature AsyncTraceUtil.AsyncTraceUtilBPLibrary.OnMultiAsyncTraceResult__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // <Game+0x260f470>
	void SetUseAutoGears(None bUseAuto); // SetUseAutoGears PhysXVehicles.WheeledVehicleMovementComponent.SetUseAutoGears // (Final|Native|Public|BlueprintCallable) // <Game+0x1998060>
	void SetSteerAngle(None SteerAngle, None WheelIndex); // SetSteerAngle PhysXVehicles.SimpleWheeledVehicleMovementComponent.SetSteerAngle // (Final|Native|Public|BlueprintCallable) // <Game+0x1997dd0>
	None GetVehicle(); // GetVehicle PhysXVehicles.VehicleAnimInstance.GetVehicle // (Final|Native|Public|BlueprintCallable) // <Game+0x1997410>
	None IsInAir(); // IsInAir PhysXVehicles.VehicleWheel.IsInAir // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1997440>
	void Set Mobile HACK Username(); // Set Mobile HACK Username LoginExisting.LoginExisting_C.Set Mobile HACK Username // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None Received_NotifyEnd(None MeshComp, None Animation); // Received_NotifyEnd ANotifyState_PropLock.ANotifyState_PropLock_C.Received_NotifyEnd // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // <Game+0x260f470>
	void SetColor(); // SetColor WBP_ProgressionCardSlot_MercMasteryXP.WBP_ProgressionCardSlot_MercMasteryXP_C.SetColor // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void ShowSwapCTA(None ShowCTA); // ShowSwapCTA WBP_RogueArmoryPanel.WBP_RogueArmoryPanel_C.ShowSwapCTA // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void GetInstancedActors(None& Actors); // GetInstancedActors AnimationSharing.AnimSharingStateInstance.GetInstancedActors // (Final|Native|Protected|HasOutParms|BlueprintCallable) // <Game+0x19a7660>
	void RegisterActorWithSkeletonBP(None InActor, None SharingSkeleton); // RegisterActorWithSkeletonBP AnimationSharing.AnimationSharingManager.RegisterActorWithSkeletonBP // (Final|Native|Public|BlueprintCallable) // <Game+0x19a78c0>
	void ProcessActorState(None& OutState, None InActor, None CurrentState, None OnDemandState, None& bShouldProcess); // ProcessActorState AnimationSharing.AnimationSharingStateProcessor.ProcessActorState // (Native|Event|Public|HasOutParms|BlueprintEvent) // <Game+0x19a7710>
	None GetModelViewerActorName(); // GetModelViewerActorName WBP_WeaponMasteryRewards.WBP_WeaponMasteryRewards_C.GetModelViewerActorName // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void SetPerkTier(None PerkTier); // SetPerkTier WBP_PerkTierHeader.WBP_PerkTierHeader_C.SetPerkTier // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None Validate(); // Validate MediaAssets.MediaSource.Validate // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x362a870>
	void SetFilePath(None Path); // SetFilePath MediaAssets.FileMediaSource.SetFilePath // (Final|Native|Public|BlueprintCallable) // <Game+0x3629a80>
	void EnumerateWebcamCaptureDevices(None& OutDevices, None Filter); // EnumerateWebcamCaptureDevices MediaAssets.MediaBlueprintFunctionLibrary.EnumerateWebcamCaptureDevices // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3627550>
	None GetMediaTexture(); // GetMediaTexture MediaAssets.MediaComponent.GetMediaTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x308be10>
	None SupportsSeeking(); // SupportsSeeking MediaAssets.MediaPlayer.SupportsSeeking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x362a840>
	None Replace(None Index, None Replacement); // Replace MediaAssets.MediaPlaylist.Replace // (Final|Native|Public|BlueprintCallable) // <Game+0x3629540>
	void SetSpectralAnalysisSettings(None InFrequenciesToAnalyze, None InFFTSize); // SetSpectralAnalysisSettings MediaAssets.MediaSoundComponent.SetSpectralAnalysisSettings // (Final|Native|Public|BlueprintCallable) // <Game+0x362a1b0>
	void SetMediaPlayer(None NewMediaPlayer); // SetMediaPlayer MediaAssets.MediaTexture.SetMediaPlayer // (Final|Native|Public|BlueprintCallable) // <Game+0x362a010>
	void SetTitle(None Title); // SetTitle WBP_PlayerIdentity_Title.WBP_PlayerIdentity_Title_C.SetTitle // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void ReceiveBeginPlay(); // ReceiveBeginPlay DroppedMagazine.DroppedMagazine_C.ReceiveBeginPlay // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	None GetDatasmithUserDataValueForKey(None Object, None Key); // GetDatasmithUserDataValueForKey DatasmithContent.DatasmithContentBlueprintLibrary.GetDatasmithUserDataValueForKey // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x19b5670>
	void PlayLevelSequence(None SequenceToPlay); // PlayLevelSequence DatasmithContent.DatasmithImportedSequencesActor.PlayLevelSequence // (Final|Native|Public|BlueprintCallable) // <Game+0x19b5770>
	None SendSharedWorldDataToClients(); // SendSharedWorldDataToClients MagicLeapSharedWorld.MagicLeapSharedWorldGameMode.SendSharedWorldDataToClients // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game+0x1ab2e50>
	void OnReplicate_SharedWorldData(); // OnReplicate_SharedWorldData MagicLeapSharedWorld.MagicLeapSharedWorldGameState.OnReplicate_SharedWorldData // (Final|Native|Private) // <Game+0x1ab2e30>
	void ServerSetLocalWorldData(None LocalWorldReplicationData); // ServerSetLocalWorldData MagicLeapSharedWorld.MagicLeapSharedWorldPlayerController.ServerSetLocalWorldData // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // <Game+0x1ab2f20>
	void OnNewCharacterFoundation(); // OnNewCharacterFoundation DamageResistModInst.DamageResistModInst_C.OnNewCharacterFoundation // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	None GetVariantSetByName(None VariantSetName); // GetVariantSetByName VariantManagerContent.LevelVariantSets.GetVariantSetByName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x19bfd40>
	None SwitchOnVariantByName(None VariantSetName, None VariantName); // SwitchOnVariantByName VariantManagerContent.LevelVariantSetsActor.SwitchOnVariantByName // (Final|Native|Public|BlueprintCallable) // <Game+0x19c0140>
	None HasRecordedData(); // HasRecordedData VariantManagerContent.PropertyValue.HasRecordedData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x19bfe30>
	void SelectOption(None OptionIndex); // SelectOption VariantManagerContent.SwitchActor.SelectOption // (Final|Native|Public|BlueprintCallable) // <Game+0x19bfe90>
	void SwitchOn(); // SwitchOn VariantManagerContent.Variant.SwitchOn // (Final|Native|Public|BlueprintCallable) // <Game+0x19c0060>
	void SetDisplayText(None& NewDisplayText); // SetDisplayText VariantManagerContent.VariantSet.SetDisplayText // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x19bff10>
	void OnClickedOtherClosed(None Widget); // OnClickedOtherClosed WBP_CompareFoundersEditions.WBP_CompareFoundersEditions_C.OnClickedOtherClosed // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void ShouldShowNewBadge(None& ShowNewBadge); // ShouldShowNewBadge WBP_JobGeneralButton.WBP_JobGeneralButton_C.ShouldShowNewBadge // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x260f470>
	void TakeGameplayAutomationScreenshot(None ScreenshotName, None MaxGlobalError, None MaxLocalError, None MapNameOverride); // TakeGameplayAutomationScreenshot AutomationUtils.AutomationUtilsBlueprintLibrary.TakeGameplayAutomationScreenshot // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x19d8610>
	void SetAnimDriveSpringStiffness(None InStiffness); // SetAnimDriveSpringStiffness ClothingSystemRuntimeInterface.ClothingSimulationInteractor.SetAnimDriveSpringStiffness // (Native|Public|BlueprintCallable) // <Game+0x36085b0>
	void SetSelected(None Selected); // SetSelected WBP_RogueStatsScreen_TabEntry.WBP_RogueStatsScreen_TabEntry_C.SetSelected // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None Received_Notify(None MeshComp, None Animation); // Received_Notify KneeCrawlingNotify.KneeCrawlingNotify_C.Received_Notify // (Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|Const) // <Game+0x260f470>
	void SetDisabled(None Disabled); // SetDisabled WBP_StandardButtonLarge.WBP_StandardButtonLarge_C.SetDisabled // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void SetDisplayedActivity(None ActivityInstance); // SetDisplayedActivity WBP_ChallengeEntry_SeasonalMastery.WBP_ChallengeEntry_SeasonalMastery_C.SetDisplayedActivity // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void WeldVertices(None& VertexIDs, None& OutNewVertexID); // WeldVertices EditableMesh.EditableMesh.WeldVertices // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1a6d2f0>
	None MakeEditableMesh(None PrimitiveComponent, None LODIndex); // MakeEditableMesh EditableMesh.EditableMeshFactory.MakeEditableMesh // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x1a70750>
	None CanCloseOnLogout(); // CanCloseOnLogout WBP_Context_Bar.WBP_Context_Bar_C.CanCloseOnLogout // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void SetSequencePath(None Path); // SetSequencePath ImgMedia.ImgMediaSource.SetSequencePath // (Final|Native|Public|BlueprintCallable) // <Game+0x1abd920>
	void PreConstruct(None IsDesignTime); // PreConstruct WBP_LerpingBar.WBP_LerpingBar_C.PreConstruct // (BlueprintCosmetic|Event|Public|BlueprintEvent) // <Game+0x260f470>
	void Check for Active View Mode Mod(None& ModsActive); // Check for Active View Mode Mod WBP_InWorld_Reticle.WBP_InWorld_Reticle_C.Check for Active View Mode Mod // (Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void SetDisplayType(); // SetDisplayType WBP_ActiveBoosterEntry.WBP_ActiveBoosterEntry_C.SetDisplayType // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void GetRewardItems(None& RewardItems); // GetRewardItems WBP_LoginRewardsGrid.WBP_LoginRewardsGrid_C.GetRewardItems // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x260f470>
	void SetRarity(None GameplayTag); // SetRarity WBP_LoginRewardItem.WBP_LoginRewardItem_C.SetRarity // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None Received_NotifyEnd(None MeshComp, None Animation); // Received_NotifyEnd ANotifyState_DisablesHandIK.ANotifyState_DisablesHandIK_C.Received_NotifyEnd // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // <Game+0x260f470>
	void ToggleContextBar(None bShouldShow); // ToggleContextBar WBP_CustomGameLobby.WBP_CustomGameLobby_C.ToggleContextBar // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void SetText(None Text); // SetText WBP_Header3.WBP_Header3_C.SetText // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void SetSequence(None InSequence); // SetSequence TemplateSequence.TemplateSequenceActor.SetSequence // (Final|Native|Public|BlueprintCallable) // <Game+0x1b0d070>
	None CreateTemplateSequencePlayer(None WorldContextObject, None TemplateSequence, None Settings, None& OutActor); // CreateTemplateSequencePlayer TemplateSequence.TemplateSequencePlayer.CreateTemplateSequencePlayer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x1b0cdf0>
	None CreateProxyObjectForConvertToTIFF(None SourceImage, None bWantColor, None bUseGpu, None Scale, None Rotate); // CreateProxyObjectForConvertToTIFF AppleImageUtils.AppleImageUtilsBaseAsyncTaskBlueprintProxy.CreateProxyObjectForConvertToTIFF // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x1b215e0>
	void SetPrompt(None Data); // SetPrompt GamepadPromptBasic.GamepadPromptBasic_C.SetPrompt // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None GetCollectionsContainingAssetPtr(None AssetPtr); // GetCollectionsContainingAssetPtr AssetTags.AssetTagsSubsystem.GetCollectionsContainingAssetPtr // (Final|Native|Public|BlueprintCallable) // <Game+0x1b234d0>
	void StopCapturingAudio(); // StopCapturingAudio AudioCapture.AudioCapture.StopCapturingAudio // (Final|Native|Public|BlueprintCallable) // <Game+0x1b24600>
	None CreateAudioCapture(); // CreateAudioCapture AudioCapture.AudioCaptureFunctionLibrary.CreateAudioCapture // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x1b244e0>
	void SetAttachEndToComponent(None Component, None SocketName); // SetAttachEndToComponent CableComponent.CableComponent.SetAttachEndToComponent // (Final|Native|Public|BlueprintCallable) // <Game+0x1b28f10>
	None ShowCellularDataConfirmation(); // ShowCellularDataConfirmation GooglePAD.GooglePADFunctionLibrary.ShowCellularDataConfirmation // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x1b32be0>
	void MagDropForDodgeReload(None Master Weapon Ref); // MagDropForDodgeReload ReloadOnDodgeRollModInst.ReloadOnDodgeRollModInst_C.MagDropForDodgeReload // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void AddModularSynthPresetToBankAsset(None InBank, None& Preset, None PresetName); // AddModularSynthPresetToBankAsset Synthesis.ModularSynthLibrary.AddModularSynthPresetToBankAsset // (Final|Native|Static|Private|HasOutParms|BlueprintCallable) // <Game+0x1b59830>
	void SetSynthPreset(None& SynthPreset); // SetSynthPreset Synthesis.ModularSynthComponent.SetSynthPreset // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b5bda0>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SourceEffectBitCrusherPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b60890>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SourceEffectChorusPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b60940>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SourceEffectDynamicsProcessorPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b609f0>
	void UnregisterEnvelopeFollowerListener(None EnvelopeFollowerListener); // UnregisterEnvelopeFollowerListener Synthesis.SourceEffectEnvelopeFollowerPreset.UnregisterEnvelopeFollowerListener // (Final|Native|Public|BlueprintCallable) // <Game+0x1b61210>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SourceEffectEQPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b60aa0>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SourceEffectFilterPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b60c00>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SourceEffectFoldbackDistortionPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b60cb0>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SourceEffectMidSideSpreaderPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b60d60>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SourceEffectPannerPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b60e10>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SourceEffectPhaserPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b60ec0>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SourceEffectRingModulationPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b60f80>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SourceEffectSimpleDelayPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b61020>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SourceEffectStereoDelayPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b610d0>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SourceEffectWaveShaperPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b60e10>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SubmixEffectConvolutionReverbPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b61170>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SubmixEffectDelayPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b66920>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SubmixEffectFilterPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b669e0>
	void SetSettings(None& InSettings); // SetSettings Synthesis.SubmixEffectFlexiverbPreset.SetSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b66a90>
	void SetTap(None TapId, None& TapInfo); // SetTap Synthesis.SubmixEffectTapDelayPreset.SetTap // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1b66ea0>
	void SetValue(None InValue); // SetValue Synthesis.Synth2DSlider.SetValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x1b66f80>
	void SetSustainGain(None SustainGain); // SetSustainGain Synthesis.GranularSynth.SetSustainGain // (Final|Native|Public|BlueprintCallable) // <Game+0x1b66d90>
	void SetWaveTablePosition(None InPosition); // SetWaveTablePosition Synthesis.SynthComponentMonoWaveTable.SetWaveTablePosition // (Final|Native|Public|BlueprintCallable) // <Game+0x1b67000>
	void SetSoundWave(None InSoundWave); // SetSoundWave Synthesis.SynthSamplePlayer.SetSoundWave // (Final|Native|Public|BlueprintCallable) // <Game+0x1b68100>
	void SetValue(None InValue); // SetValue Synthesis.SynthKnob.SetValue // (Final|Native|Public|BlueprintCallable) // <Game+0x1b68200>
	void AnimGraph(None& AnimGraph); // AnimGraph BombActivator_ABP.BombActivator_ABP_C.AnimGraph // (HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void RefreshTimeRemaining(); // RefreshTimeRemaining WBP_BattlePassTitle.WBP_BattlePassTitle_C.RefreshTimeRemaining // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void GetCompatibleAttachmentsForWeaponType(None& WeaponType, None& OutCompatibleAttachments); // GetCompatibleAttachmentsForWeaponType Killstreak.AttachmentCollection.GetCompatibleAttachmentsForWeaponType // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game+0x1fce3d0>
	None GetPathedOcclusion(None& Other); // GetPathedOcclusion Killstreak.AudioOcclusionComponent.GetPathedOcclusion // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x1fce600>
	void RequestEchoFromActor(None WorldContextObject, None EchoEvent, None OriginActor, None ZOffset, None SpeedOfSound, None NumberOfEchosToTrace, None EchoTraceRange, None bAllowPostAtMaxDistance); // RequestEchoFromActor Killstreak.EchoBlueprintLibrary.RequestEchoFromActor // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // <Game+0x1fceaa0>
	void TrackerLeave(None Tracker); // TrackerLeave Killstreak.EnvironmentActorInterface.TrackerLeave // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x1fced60>
	void ViewTargetEnvironmentChanged(None OldEnvironmentTag, None NewEnvironmentTag); // ViewTargetEnvironmentChanged Killstreak.EnvironmentListenerComponent.ViewTargetEnvironmentChanged // (Final|Native|Protected) // <Game+0x1fcedf0>
	None ReevalulateEnvironment(); // ReevalulateEnvironment Killstreak.EnvironmentTrackerComponent.ReevalulateEnvironment // (Native|Event|Protected|BlueprintEvent) // <Game+0x1fce810>
	void LoadoutDeleted(None InLoadoutId); // LoadoutDeleted Killstreak.RogueScreenLoadoutComponent.LoadoutDeleted // (Native|Protected) // <Game+0x20f7360>
	void CheckForPreferredJobChange(None InLoadout); // CheckForPreferredJobChange Killstreak.FavoritePreviewLoadoutComponent.CheckForPreferredJobChange // (Native|Protected) // <Game+0x1fce200>
	None GetRoleIcon(); // GetRoleIcon Killstreak.KSJobRole.GetRoleIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1fce6a0>
	None MakeKickbackInstance(None ShotIndex, None AbsoluteMaxDuration); // MakeKickbackInstance Killstreak.KickbackModule.MakeKickbackInstance // (Native|Event|Public|BlueprintEvent|Const) // <Game+0x1fce6d0>
	void StartTracking(); // StartTracking Killstreak.KSAccoladeTracker.StartTracking // (Native|Event|Public|BlueprintEvent) // <Game+0x1fd5960>
	void SortAcquisitionItemsBySortOrder(); // SortAcquisitionItemsBySortOrder Killstreak.KSAcquisition.SortAcquisitionItemsBySortOrder // (Final|Native|Public|BlueprintCallable) // <Game+0x1fd5920>
	void SetupEventGrandPrizeTestAcquisition(); // SetupEventGrandPrizeTestAcquisition Killstreak.KSAcquisitionManager.SetupEventGrandPrizeTestAcquisition // (Final|Native|Public) // <Game+0x1fd58e0>
	None MatchesTags(None ActivityTags); // MatchesTags Killstreak.KSActivity.MatchesTags // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1fd5510>
	void HandleLostPlayerController(); // HandleLostPlayerController Killstreak.KSActivityBehavior.HandleLostPlayerController // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	None IsDailyChallenge(); // IsDailyChallenge Killstreak.KSActivityComponent_Challenge.IsDailyChallenge // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1fdb010>
	void LoadJobItem(); // LoadJobItem Killstreak.KSActivityComponent_Job.LoadJobItem // (Final|Native|Public|BlueprintCallable) // <Game+0x1fdb0f0>
	None CanGrabNewLoginReward(); // CanGrabNewLoginReward Killstreak.KSActivityComponent_LoginReward.CanGrabNewLoginReward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1fd8230>
	void UpdateActivityTiers(); // UpdateActivityTiers Killstreak.KSActivityInstance.UpdateActivityTiers // (Final|Native|Public) // <Game+0x1fdbc40>
	void RequestActivitiesLoad(); // RequestActivitiesLoad Killstreak.KSActivityManagerBase.RequestActivitiesLoad // (Final|Native|Private) // <Game+0x1fdbb00>
	None IsActivitySequenceUnlocked(None& ActivitySequence, None PlayerController); // IsActivitySequenceUnlocked Killstreak.KSActivitySequenceManager.IsActivitySequenceUnlocked // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game+0x1fe5ef0>
	void DirectlySetupActivityTrackingForPlayer(None PlayerController); // DirectlySetupActivityTrackingForPlayer Killstreak.KSActivityTestManager.DirectlySetupActivityTrackingForPlayer // (Final|Native|Protected|BlueprintCallable) // <Game+0x1fe5580>
	void YieldToRealActor(); // YieldToRealActor Killstreak.KSLagCompensatedActor.YieldToRealActor // (Native|Event|Protected|BlueprintEvent) // <Game+0x1955270>
	void RefundAgentAsset(); // RefundAgentAsset Killstreak.KSAgentBase.RefundAgentAsset // (Native|Protected|BlueprintCallable) // <Game+0xa68190>
	void StartPreFire(); // StartPreFire Killstreak.KSAgent_Aimed.StartPreFire // (Final|Native|Protected) // <Game+0x1fe6730>
	void UpdateReplicatedTimer(); // UpdateReplicatedTimer Killstreak.KSAgent_RevealDrone.UpdateReplicatedTimer // (Final|Native|Protected) // <Game+0x1fe68a0>
	void TargetStartRevive(None Reviver, None Revivee, None TimeToRevive, None Remote); // TargetStartRevive Killstreak.KSAgent_RevivalDrone.TargetStartRevive // (Final|Native|Protected) // <Game+0x1fe6750>
	void SetNavigationInteractTarget(None InteractTargetIn); // SetNavigationInteractTarget Killstreak.KSAIController.SetNavigationInteractTarget // (Final|Native|Public) // <Game+0x1fea0b0>
	None GetCurrentDifficulty(); // GetCurrentDifficulty Killstreak.KSAIDifficultyComponent.GetCurrentDifficulty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1fce500>
	void InsertPriority(None& ItemPriority); // InsertPriority Killstreak.KSAIItemPriorityComponent.InsertPriority // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1fe9970>
	void ResetHealth(); // ResetHealth Killstreak.KSAimAssistActor.ResetHealth // (Final|Native|Public|BlueprintCallable) // <Game+0x1fea090>
	None GetScaledProjectionBoundsForActor(None Player, None InActor, None& OutBounds); // GetScaledProjectionBoundsForActor Killstreak.KSAimAssistComponent.GetScaledProjectionBoundsForActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // <Game+0x1fe9200>
	void UnregisterAsAimAssistTarget(); // UnregisterAsAimAssistTarget Killstreak.KSAimAssistTargetInterface.UnregisterAsAimAssistTarget // (Native|Public|BlueprintCallable) // <Game+0x1fecf70>
	void UpdatePriority(None& Key, None& ObjectivePriority, None ShouldResort); // UpdatePriority Killstreak.KSAIObjectivePriorityComponent.UpdatePriority // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x1fed010>
	void GetCurrentlyPerceivedStimuli(None SenseToUse, None& Stimuli); // GetCurrentlyPerceivedStimuli Killstreak.KSAIPerceptionComponent.GetCurrentlyPerceivedStimuli // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game+0x1fecaf0>
	void ReportObjectiveEvent(None WorldContextObject, None ObjectiveLocation, None Loudness, None Instigator, None MaxRange, None Tag); // ReportObjectiveEvent Killstreak.KSAISense_Objective.ReportObjectiveEvent // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0x1ff6ad0>
	void StopLoopingEvent(None StopHandle); // StopLoopingEvent Killstreak.KSAkComponent.StopLoopingEvent // (Final|Native|Public|BlueprintCallable) // <Game+0x1ff6f20>
	void StopAmbientSound(); // StopAmbientSound Killstreak.KSAkAmbientSound.StopAmbientSound // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // <Game+0x1ff6f00>
	None ShouldShowViewedItemLabel(); // ShouldShowViewedItemLabel Killstreak.KSItemDrop.ShouldShowViewedItemLabel // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x2091630>
	None GetReasonText(); // GetReasonText Killstreak.KSLootDrop.GetReasonText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20a3e20>
	None SoftGiveToAsync(None Item, None Owner, None Instigator, None InGiveItemParameters, None& GivenToEvent); // SoftGiveToAsync Killstreak.KSItem.SoftGiveToAsync // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x208ce00>
	None ShouldShareWithTeam(); // ShouldShareWithTeam Killstreak.KSLootItem.ShouldShareWithTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20a5290>
	None GetAmmoType(); // GetAmmoType Killstreak.KSAmmoDropAsset.GetAmmoType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1ff5a20>
	void AnimAuditStop(None AnimInst, None bExportImmediately); // AnimAuditStop Killstreak.KSAnimationAuditComponent.AnimAuditStop // (Final|Native|Public|BlueprintCallable) // <Game+0x1ff5740>
	void SetShieldActive(None bSetIsShieldActive); // SetShieldActive Killstreak.KSAnimInstance.SetShieldActive // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None GetBoneName(); // GetBoneName Killstreak.KSAnimNotify_Footstep.GetBoneName // (Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x260f470>
	void OnStaticMeshComponentInitialized(None MeshComp, None Animation, None TotalDuration, None SpawnedStaticMeshComponent); // OnStaticMeshComponentInitialized Killstreak.KSAnimNotifyState_EmoteProp.OnStaticMeshComponentInitialized // (Native|Event|Protected|BlueprintEvent|Const) // <Game+0x1ff6430>
	None ShouldPlayTimeAnnouncementFromGroup(None& Groups); // ShouldPlayTimeAnnouncementFromGroup Killstreak.KSAnnouncer.ShouldPlayTimeAnnouncementFromGroup // (Native|Event|Public|HasOutParms|BlueprintEvent) // <Game+0x1ff6d20>
	None GetSlot(); // GetSlot Killstreak.KSApparelAsset.GetSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1ffa630>
	void Unequip(None bLocal, None bWillReequip); // Unequip Killstreak.KSEquipment.Unequip // (Final|Native|Public) // <Game+0x2061430>
	None WasRemoved(); // WasRemoved Killstreak.KSWeapon.WasRemoved // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2157cd0>
	None ShouldDestroyOnBreak(); // ShouldDestroyOnBreak Killstreak.KSArmor.ShouldDestroyOnBreak // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1ffb470>
	None WillDropWhenDowned(); // WillDropWhenDowned Killstreak.KSWeaponAsset.WillDropWhenDowned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2164c20>
	None ShouldDestroyOnBreak(); // ShouldDestroyOnBreak Killstreak.KSArmorAsset.ShouldDestroyOnBreak // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1ffb4a0>
	void SetBundledAmmoToDefault(); // SetBundledAmmoToDefault Killstreak.KSWeaponAssetDrop.SetBundledAmmoToDefault // (Final|Native|Public|BlueprintCallable) // <Game+0x216aff0>
	None ResolvePreviousAssetId(); // ResolvePreviousAssetId Killstreak.KSAssetQueryHelperComponent.ResolvePreviousAssetId // (Final|Native|Public|BlueprintCallable) // <Game+0x1ffad90>
	void SetMaterialToUse(None InMID); // SetMaterialToUse Killstreak.KSAsyncImage.SetMaterialToUse // (Final|Native|Private|BlueprintCallable) // <Game+0x1ffb370>
	None IsWeaponAssetCompatible(None InWeaponAsset); // IsWeaponAssetCompatible Killstreak.KSAttachmentCompatRules.IsWeaponAssetCompatible // (Native|Public|Const) // <Game+0x2000050>
	void OnRep_EquipPoint(); // OnRep_EquipPoint Killstreak.KSEquipmentCosmeticComponent.OnRep_EquipPoint // (Final|Native|Protected) // <Game+0x2058e50>
	void OnRep_ParentEquipmentId(); // OnRep_ParentEquipmentId Killstreak.KSWeaponAttachmentCosmeticInst.OnRep_ParentEquipmentId // (Final|Native|Private) // <Game+0x2058e50>
	void WeaponPropAssigned(); // WeaponPropAssigned Killstreak.KSAttachCosmeticInst_Reactive.WeaponPropAssigned // (Native|Event|Public|BlueprintEvent) // <Game+0x1975d30>
	void OnRep_ObjectiveTimer(); // OnRep_ObjectiveTimer Killstreak.KSWeaponAssetDrop_MacGuffin.OnRep_ObjectiveTimer // (Final|Native|Private) // <Game+0x202f090>
	None Respawn(); // Respawn Killstreak.KSNeutralBombDrop.Respawn // (Final|Native|Protected) // <Game+0x20c7e50>
	void HandleTeamCinematicStarted(); // HandleTeamCinematicStarted Killstreak.KSAudioManager.HandleTeamCinematicStarted // (Final|Native|Private) // <Game+0x1fffe30>
	None ComposeEventNamePriorityArray(None EventName, None CurrentStateParameters); // ComposeEventNamePriorityArray Killstreak.KSAudioPlayer.ComposeEventNamePriorityArray // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	None HasActivePlayerCharacter(); // HasActivePlayerCharacter Killstreak.KSAudioPlayerStateParameterData.HasActivePlayerCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1ffff40>
	void OnOwnerPossessionChanged(None Controller); // OnOwnerPossessionChanged Killstreak.KSAutoPickupComponent.OnOwnerPossessionChanged // (Final|Native|Protected) // <Game+0x2000180>
	None GetSoftLargeAvatarIcon(); // GetSoftLargeAvatarIcon Killstreak.KSAvatar.GetSoftLargeAvatarIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1fff3b0>
	void StoreCombatInfo(None ElimEvent); // StoreCombatInfo Killstreak.KSAvenger.StoreCombatInfo // (Final|Native|Public) // <Game+0x2000330>
	void OnTeamSidesFlipped(); // OnTeamSidesFlipped Killstreak.KSGameRuleComponent.OnTeamSidesFlipped // (Native|Protected) // <Game+0x207d010>
	void SendBackfillRequest(); // SendBackfillRequest Killstreak.KSBackfillRuleComponent.SendBackfillRequest // (Final|Native|Private) // <Game+0x20002b0>
	None GetSoftSmallBannerIcon(); // GetSoftSmallBannerIcon Killstreak.KSBanner.GetSoftSmallBannerIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1fff3b0>
	None ShouldDisplayMiniBattlePass(); // ShouldDisplayMiniBattlePass Killstreak.KSBattlePassProgressionManager.ShouldDisplayMiniBattlePass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2000300>
	void HandleTeamSidesFlipped(); // HandleTeamSidesFlipped Killstreak.KSBehaviorRuleBaseComponent.HandleTeamSidesFlipped // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void ClearBehaviorChange(); // ClearBehaviorChange Killstreak.KSBehaviorRuleComponent.ClearBehaviorChange // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void SetTeamFilter(None NewFilteredTeam); // SetTeamFilter Killstreak.KSPlayerBehaviorRuleComponent.SetTeamFilter // (Final|Native|Public|BlueprintCallable) // <Game+0x200ab00>
	void UpdateScalarTrack(None TrackName, None TrackValue); // UpdateScalarTrack Killstreak.KSFXCurveComponent.UpdateScalarTrack // (Native|Event|Protected|BlueprintEvent) // <Game+0x1933370>
	void AddDamageInstance(None DamageAmount, None& DamageOrigin); // AddDamageInstance Killstreak.KSBloodSplatterComponent.AddDamageInstance // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x2003930>
	void SetInteractability(None NewInteractable); // SetInteractability Killstreak.KSBlueprintableInteractable.SetInteractability // (Final|Native|Public|BlueprintCallable) // <Game+0x200a980>
	void ReloadGrenadeAmmo(None InteractingCharacterState); // ReloadGrenadeAmmo Killstreak.KSBlueprintableAmmoRefillCrate.ReloadGrenadeAmmo // (Final|Native|Protected|BlueprintCallable) // <Game+0x200a730>
	void UpdateProgressForUniqueItem(None ActivityInstance, None PlayerState, None ItemIdToCheck, None UniqueSlotItemIds, None UniqueSlotLootTableItemIds); // UpdateProgressForUniqueItem Killstreak.KSBlueprintFunctionLibrary.UpdateProgressForUniqueItem // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x200c1c0>
	None GetSoftFullSplashImage(); // GetSoftFullSplashImage Killstreak.KSCurrency.GetSoftFullSplashImage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x204ce70>
	void GetBoostCategoryText(None& BoostCategoryText, None& DurationCategoryText); // GetBoostCategoryText Killstreak.KSBoost.GetBoostCategoryText // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x200f230>
	None GetSoftSmallBorderIcon(); // GetSoftSmallBorderIcon Killstreak.KSBorder.GetSoftSmallBorderIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1fff3b0>
	None GetTotalWaveNumber(); // GetTotalWaveNumber Killstreak.KSBotEncounter.GetTotalWaveNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x200f480>
	void UnhideSpawnedBots(); // UnhideSpawnedBots Killstreak.KSBotFactory.UnhideSpawnedBots // (Final|Native|Public|BlueprintCallable) // <Game+0x200ff70>
	None FindAimPoints(None Instigator, None Target, None& StartPoint, None& OutEndPoints); // FindAimPoints Killstreak.KSBTTask_FindGrenadeTarget.FindAimPoints // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent|Const) // <Game+0x20180d0>
	void YieldToRealTimerExpired(); // YieldToRealTimerExpired Killstreak.KSBuild.YieldToRealTimerExpired // (Final|Native|Private) // <Game+0x2033170>
	void OnRep_Active(); // OnRep_Active Killstreak.KSBuild_APS.OnRep_Active // (Final|Native|Private) // <Game+0x202eeb0>
	void HandleShopClosed(None PlayerShop); // HandleShopClosed Killstreak.KSBuild_Shop.HandleShopClosed // (Final|Native|Private) // <Game+0x202d6f0>
	void UpdateCanBeBuilt(None bInCanBeBuilt); // UpdateCanBeBuilt Killstreak.KSBuildPreview.UpdateCanBeBuilt // (Final|Native|Public|BlueprintCallable) // <Game+0x2032ad0>
	void StopKSEffect(None InFxID); // StopKSEffect Killstreak.KSCharacterFoundation.StopKSEffect // (Final|Native|Public|BlueprintCallable) // <Game+0x203ffb0>
	void UpdateSilhouette(None DeltaSeconds); // UpdateSilhouette Killstreak.KSCharacterBase.UpdateSilhouette // (Native|Event|Protected|BlueprintEvent) // <Game+0x203cbc0>
	None WantsToCrouch(); // WantsToCrouch Killstreak.KSCharacter.WantsToCrouch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2033140>
	None ShouldDisableFeetTilting(None ActorUpVector); // ShouldDisableFeetTilting Killstreak.KSCharacterAnimInstBase.ShouldDisableFeetTilting // (Native|Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x203c950>
	void UpdateTurnInPlace(None DeltaSeconds); // UpdateTurnInPlace Killstreak.KSCharacterAnimInst.UpdateTurnInPlace // (Native|Event|Protected|BlueprintEvent) // <Game+0x20371f0>
	void ServerChangeShoulderCamera(None InShoulder, None bAuto, None bUseAutoTiming); // ServerChangeShoulderCamera Killstreak.KSCharacterCameraHandler.ServerChangeShoulderCamera // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game+0x203fa90>
	void StopShakeOnViewTargetChanged(None NewController); // StopShakeOnViewTargetChanged Killstreak.KSCharacterCameraShake.StopShakeOnViewTargetChanged // (Native|Protected) // <Game+0xbcfe30>
	void ResetPostFireSprintLockout(); // ResetPostFireSprintLockout Killstreak.KSCharacterMovementComponent.ResetPostFireSprintLockout // (Final|Native|Public) // <Game+0x20419c0>
	void SetTeleportDistanceDeltaThreshold(None Threshold); // SetTeleportDistanceDeltaThreshold Killstreak.KSSkeletalMeshComponent.SetTeleportDistanceDeltaThreshold // (Final|Native|Public|BlueprintCallable) // <Game+0x21377a0>
	void WarpZ(None Z); // WarpZ Killstreak.KSCheatComponent.WarpZ // (Final|Exec|Native|Protected) // <Game+0x2048ee0>
	void TestPreviewActor(None PositionIndex, None JobName, None SkinName); // TestPreviewActor Killstreak.KSCheatComponent_Lobby.TestPreviewActor // (Final|Exec|Native|Private) // <Game+0x204d990>
	void SetPersistantPlayerData(None PersistantPlayerData); // SetPersistantPlayerData Killstreak.KSJobSelectPreviewActor.SetPersistantPlayerData // (Final|Native|Public|BlueprintCallable) // <Game+0x209c500>
	None VerifyCinematicCharacterLoaded(); // VerifyCinematicCharacterLoaded Killstreak.KSCinematicCharacterManager.VerifyCinematicCharacterLoaded // (Native|Event|Public|BlueprintEvent|Const) // <Game+0x1fe5390>
	None GetDefaultCameraTag(None& CinematicName); // GetDefaultCameraTag Killstreak.KSCinematicDataContainer.GetDefaultCameraTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game+0x204cbc0>
	None VerifyAllCinematicCharactersLoaded(); // VerifyAllCinematicCharactersLoaded Killstreak.KSCinematicSequenceManager.VerifyAllCinematicCharactersLoaded // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x204db70>
	void UpdateOverriddenOriginTransformOffset(None& NewOverriddenOriginTransformOffset); // UpdateOverriddenOriginTransformOffset Killstreak.KSWeaponTargetingModule.UpdateOverriddenOriginTransformOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x217fd40>
	None GetWeaponAsset_WithProjectile(); // GetWeaponAsset_WithProjectile Killstreak.KSProjectileTargetingModule.GetWeaponAsset_WithProjectile // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x211f2b0>
	None GetWeaponAsset_Grenade(); // GetWeaponAsset_Grenade Killstreak.KSGrenadeTargetingModule.GetWeaponAsset_Grenade // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x206b360>
	None ShouldPreventPlay(None InReason); // ShouldPreventPlay Killstreak.KSRadialMenuItem.ShouldPreventPlay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2125960>
	void ServerPlayRadialMenuItem(); // ServerPlayRadialMenuItem Killstreak.KSRadialMenuItemInstance.ServerPlayRadialMenuItem // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // <Game+0x2125870>
	void RecordDamageDealt(None ProratedDamage, None ActualDamage, None DamageType, None DamagedActor, None DamageCauser); // RecordDamageDealt Killstreak.KSControllerInterface.RecordDamageDealt // (Native|Public) // <Game+0x204d540>
	void SetState(None NewState, None NewOwner); // SetState Killstreak.KSObjectiveBase.SetState // (Native|Public|BlueprintCallable) // <Game+0x20d07d0>
	void UpdateControlPointSettings(None& NewSettings); // UpdateControlPointSettings Killstreak.KSControlPoint.UpdateControlPointSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x204dac0>
	None GetSkinObject(); // GetSkinObject Killstreak.KSCustomApparelComponent.GetSkinObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2050940>
	void ReportDamageByInstigator(None& DamageInfo); // ReportDamageByInstigator Killstreak.KSDamageable.ReportDamageByInstigator // (Native|Protected|HasOutParms|BlueprintCallable) // <Game+0x2051360>
	None PreProcessDamageEffects(None DamagedActor, None& Damage, None& DamageEventInfo, None EventInstigator, None DamageCauser); // PreProcessDamageEffects Killstreak.KSDamageTypeBase.PreProcessDamageEffects // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // <Game+0x2051110>
	None GetFlashCurve(None Intensity); // GetFlashCurve Killstreak.KSFlashSource.GetFlashCurve // (Event|Public|BlueprintEvent|Const) // <Game+0x260f470>
	None IsWallMarkerActive(None& WallLocation); // IsWallMarkerActive Killstreak.KSDefaultAimTargetingModule.IsWallMarkerActive // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x20509a0>
	None ShouldCrouch(); // ShouldCrouch Killstreak.KSMapPoint.ShouldCrouch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20b0110>
	void RelevantObjectiveUpdated(None Objective); // RelevantObjectiveUpdated Killstreak.KSDefensePoint.RelevantObjectiveUpdated // (Final|Native|Protected) // <Game+0x20512e0>
	None ShouldSetFriendlyOutlineOnRegister(); // ShouldSetFriendlyOutlineOnRegister Killstreak.KSDeployable.ShouldSetFriendlyOutlineOnRegister // (Native|Event|Public|BlueprintEvent|Const) // <Game+0x20516f0>
	None ShouldFireAt(); // ShouldFireAt Killstreak.KSDestroyableHazardComponent.ShouldFireAt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2051680>
	void UndoBadDestroy(); // UndoBadDestroy Killstreak.KSDestructibleBase.UndoBadDestroy // (Final|Native|Protected) // <Game+0x2051910>
	void Disperse(None& HitComponents); // Disperse Killstreak.KSDispersible.Disperse // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x2054890>
	None IsCloseEnough(); // IsCloseEnough Killstreak.KSDistanceOptimizationComponent.IsCloseEnough // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2054cc0>
	None ShouldReverseWayPointSetDirection(); // ShouldReverseWayPointSetDirection Killstreak.KSDropLocation.ShouldReverseWayPointSetDirection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2055190>
	void TeamUpdated(); // TeamUpdated Killstreak.KSDropOffZone.TeamUpdated // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void OnPlayerDowned(None EventInfo, None ExpBonus); // OnPlayerDowned Killstreak.KSDropRuleComponent.OnPlayerDowned // (Final|Native|Private) // <Game+0x2054f20>
	void ValidateDoor(); // ValidateDoor Killstreak.KSDropshipBase.ValidateDoor // (Final|Native|Public|BlueprintCallable) // <Game+0x2055770>
	void ActorLeavingZone(None Other); // ActorLeavingZone Killstreak.KSDropShipExitZone.ActorLeavingZone // (Final|Native|Protected|BlueprintCallable) // <Game+0x20545f0>
	void UpdateExteriorDoorRotation(None DoorRotation, None AdditionalMeshRotation1, None AdditionalMeshRotation2); // UpdateExteriorDoorRotation Killstreak.KSDropshipExterior.UpdateExteriorDoorRotation // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x2055660>
	void UpdateInteriorDoorRotation(None DoorRotation, None AdditionalMeshRotation1, None AdditionalMeshRotation2); // UpdateInteriorDoorRotation Killstreak.KSDropshipInterior.UpdateInteriorDoorRotation // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x20591f0>
	void StopLoopingLightsTimeline(); // StopLoopingLightsTimeline Killstreak.KSDropshipLights.StopLoopingLightsTimeline // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x1953790>
	void Wipe(); // Wipe Killstreak.KSDynamicMaskComponent.Wipe // (Final|Native|Public|BlueprintCallable) // <Game+0x2059300>
	None IsMovingEmote(); // IsMovingEmote Killstreak.KSEmote.IsMovingEmote // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2058c80>
	void OnRep_PlayTicker(); // OnRep_PlayTicker Killstreak.KSEmoteCosmeticComponent.OnRep_PlayTicker // (Final|Native|Private) // <Game+0x2058e70>
	void OnRep_UpdateStatTrackingNumber(); // OnRep_UpdateStatTrackingNumber Killstreak.KSEmoteCosmeticComponent_Spray.OnRep_UpdateStatTrackingNumber // (Final|Native|Protected) // <Game+0x2058e90>
	void MarkOwnerStopped(); // MarkOwnerStopped Killstreak.KSEmoteCosmeticSubInstance.MarkOwnerStopped // (Final|Native|Protected|BlueprintCallable) // <Game+0x2058cf0>
	None GetShouldLoop(); // GetShouldLoop Killstreak.KSEmoteCosmeticSubInstance_Play.GetShouldLoop // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // <Game+0x2058b60>
	void SetPrimarySprayDecalForOwner(None InDecalComponent); // SetPrimarySprayDecalForOwner Killstreak.KSEmoteCosmeticSubInstance_Spray.SetPrimarySprayDecalForOwner // (Final|Native|Protected|BlueprintCallable) // <Game+0x2058f50>
	None GetEmoteCosmeticComponent(); // GetEmoteCosmeticComponent Killstreak.KSEmoteInstance.GetEmoteCosmeticComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2058a20>
	void RemovePlayingMusic(None Sound); // RemovePlayingMusic Killstreak.KSEmoteMusicManager.RemovePlayingMusic // (Final|Native|Public|BlueprintCallable) // <Game+0x2058eb0>
	None GetEmoteMusicManager(); // GetEmoteMusicManager Killstreak.KSEmoteMusicManagerOwner.GetEmoteMusicManager // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x2058a50>
	None GetEmoteMusicManager(None WorldContextObject); // GetEmoteMusicManager Killstreak.KSEmoteMusicManagerStatics.GetEmoteMusicManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x2058a80>
	void start(); // start Killstreak.KSEmoteTestManager.start // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game+0x20590a0>
	None GetEmotionFloat(); // GetEmotionFloat Killstreak.KSEmotionComponentOwner.GetEmotionFloat // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2060770>
	None RemoveEmotionById(None InstanceId); // RemoveEmotionById Killstreak.KSEmotionComponent.RemoveEmotionById // (Final|Native|Public|BlueprintCallable) // <Game+0x20611c0>
	None SpawnQueuedBots(None nCount); // SpawnQueuedBots Killstreak.KSEncounterManager.SpawnQueuedBots // (Final|Native|Public|BlueprintCallable) // <Game+0x20613a0>
	None GetCostToSpawn(None nmTableRowName); // GetCostToSpawn Killstreak.KSEncounterWave.GetCostToSpawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2060660>
	void OnRep_EnforcedItems(); // OnRep_EnforcedItems Killstreak.KSEnforcedEquipmentState.OnRep_EnforcedItems // (Final|Native|Protected) // <Game+0x2060ec0>
	void UpdateEnvironmentTag(None NewTag); // UpdateEnvironmentTag Killstreak.KSEnvironmentVolumeActor.UpdateEnvironmentTag // (Final|Native|Public|BlueprintCallable) // <Game+0x2061500>
	void SetEquipmentContainerOwner(None& InEquipmentContainerOwner); // SetEquipmentContainerOwner Killstreak.KSEquipmentManagerComponent.SetEquipmentContainerOwner // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x2064980>
	None ShouldDisplayHolidayEvent(); // ShouldDisplayHolidayEvent Killstreak.KSEventChallengesManager.ShouldDisplayHolidayEvent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x2064b10>
	void TriggerEvent(None Count); // TriggerEvent Killstreak.KSEventTracker.TriggerEvent // (Final|Native|Public|BlueprintCallable) // <Game+0x2064ea0>
	None UsesPlacementMatches(); // UsesPlacementMatches Killstreak.KSEventTrackerPlayerData.UsesPlacementMatches // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2065060>
	void TurnFogOnViaCinematic(None CinematicSubLevelName); // TurnFogOnViaCinematic Killstreak.KSExponentialHeightFog.TurnFogOnViaCinematic // (Final|Native|Private) // <Game+0x2064fc0>
	None ShouldExtinguishRightNow(); // ShouldExtinguishRightNow Killstreak.KSExtinguisher.ShouldExtinguishRightNow // (Native|Event|Public|BlueprintEvent|Const) // <Game+0x20516f0>
	void OnRep_ObjectiveTimer(); // OnRep_ObjectiveTimer Killstreak.KSExtractionComputer.OnRep_ObjectiveTimer // (Final|Native|Private) // <Game+0x202f090>
	void HandleOnLastPlayer(None LastPlayer); // HandleOnLastPlayer Killstreak.KSFinalBlowTracker.HandleOnLastPlayer // (Final|Native|Public) // <Game+0x206b540>
	void OnOverlapEnd(None OverlappedActor, None OtherActor); // OnOverlapEnd Killstreak.KSFlightRecoveryVolume.OnOverlapEnd // (Final|Native|Public) // <Game+0x206c010>
	None GetPriorityLevel(); // GetPriorityLevel Killstreak.KSFootstepOverrideInterface.GetPriorityLevel // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x206b310>
	void OnVFXFinished(None ParticleSystem); // OnVFXFinished Killstreak.KSFreezeFramePawn.OnVFXFinished // (Final|Native|Private) // <Game+0x206c2a0>
	None GetLabelInfoForGadgetDescription(None& DescriptionText); // GetLabelInfoForGadgetDescription Killstreak.KSGadgetAssetDrop.GetLabelInfoForGadgetDescription // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x206ac90>
	void SetGoPlayMapTravelDelayed(None DelayGoPlayMap); // SetGoPlayMapTravelDelayed Killstreak.KSGameEngine.SetGoPlayMapTravelDelayed // (Final|Native|Public|BlueprintCallable) // <Game+0x206c5b0>
	void UpdateRecordedAnimStats(None& NewStats); // UpdateRecordedAnimStats Killstreak.KSGameInstance.UpdateRecordedAnimStats // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x206c840>
	None UsePlayerLoadouts(); // UsePlayerLoadouts Killstreak.KSGameMode.UsePlayerLoadouts // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x206c9a0>
	void StartRound(); // StartRound Killstreak.KSGameMode_RoundGame.StartRound // (Native|Public|BlueprintCallable) // <Game+0x207e4d0>
	void SortObjectivesByLootGroup(None& ObjectivesToSort, None ShouldSortDescending); // SortObjectivesByLootGroup Killstreak.KSGameMode_Modular.SortObjectivesByLootGroup // (Final|Native|Protected|HasOutParms|BlueprintCallable|Const) // <Game+0x207e3d0>
	void CallTutorialEndingDelegates(); // CallTutorialEndingDelegates Killstreak.KSGameMode_TutorialBase.CallTutorialEndingDelegates // (Final|Native|Public|BlueprintCallable) // <Game+0x2079880>
	void SetOuterDeadZone(None NewZoneX, None NewZoneY); // SetOuterDeadZone Killstreak.KSGamepadCurvedLookSpeedManager.SetOuterDeadZone // (Final|Exec|Native|Public) // <Game+0x207def0>
	void Activate(); // Activate Killstreak.KSGamePhaseProxyBase.Activate // (Native|Public|BlueprintCallable) // <Game+0x1fd5960>
	None WasLastPhasePrepare(); // WasLastPhasePrepare Killstreak.KSGameState.WasLastPhasePrepare // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x207e6b0>
	void TryToReplayLastKill(); // TryToReplayLastKill Killstreak.KSGameState_RoundGame.TryToReplayLastKill // (Native|Protected) // <Game+0x19821d0>
	None GetKSObjectiveComponent(); // GetKSObjectiveComponent Killstreak.KSGameState_Modular.GetKSObjectiveComponent // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void SaveLocalAction(None& Name); // SaveLocalAction Killstreak.KSGameUserSettings.SaveLocalAction // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x20823a0>
	void ShotNotify(None ShotInfo); // ShotNotify Killstreak.KSGlobalShotListener.ShotNotify // (Native|Public) // <Game+0x2082530>
	void HandleTrackerAccolade(None PlayerState); // HandleTrackerAccolade Killstreak.KSHeadShotTracker.HandleTrackerAccolade // (Final|Native|Public) // <Game+0x2081d70>
	void SetHealthMeterState(None HealthMeterState); // SetHealthMeterState Killstreak.KSPlayerHealthMeterBase.SetHealthMeterState // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void UnregisterWithoutHeatVisibilityBlocker(None Blocker); // UnregisterWithoutHeatVisibilityBlocker Killstreak.KSHeatSourceComponent.UnregisterWithoutHeatVisibilityBlocker // (Final|Native|Public|BlueprintCallable) // <Game+0x2082720>
	void OnObjectiveSpawned(None& GameObjective); // OnObjectiveSpawned Killstreak.KSHUDAnnouncementComponent.OnObjectiveSpawned // (Event|Protected|HasOutParms|BlueprintEvent) // <Game+0x260f470>
	void SetHeader(None& InHeader); // SetHeader Killstreak.KSHUDComponent_GameInfo.SetHeader // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x20879a0>
	void SetSafeFrameScale(None SafeFrameScale); // SetSafeFrameScale Killstreak.KSHUDInterface.SetSafeFrameScale // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x2087a70>
	void OnWinnerSet(None WinningTeamNumber); // OnWinnerSet Killstreak.KSHUDRoundAnnouncementComponent.OnWinnerSet // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void RelevantObjectiveUpdated(None Objective); // RelevantObjectiveUpdated Killstreak.KSIngressPoint.RelevantObjectiveUpdated // (Final|Native|Protected) // <Game+0x2087700>
	None GetGamepadIconSet(); // GetGamepadIconSet Killstreak.KSInputFunctionLibrary.GetGamepadIconSet // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x2086a60>
	None StartMusic(None CallbackMask, None& PostEventCallback, None OcclusionType, None bUseDistance, None bUseDirection); // StartMusic Killstreak.KSInspectableMusicManagerActor.StartMusic // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x2087c30>
	None GetInteractionPriority(); // GetInteractionPriority Killstreak.KSInteractableComponent.GetInteractionPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2086cb0>
	None UsePickupRangeForInteraction(); // UsePickupRangeForInteraction Killstreak.KSInteractable.UsePickupRangeForInteraction // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2087e00>
	void WeightedSiteShuffle(None& SiteArray); // WeightedSiteShuffle Killstreak.KSLootSiteBase.WeightedSiteShuffle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x20b03a0>
	void PickLoot(); // PickLoot Killstreak.KSInteractableLootSite.PickLoot // (Final|Native|Public|BlueprintCallable) // <Game+0x208c4a0>
	void ServerTap(None bAllowTapAsHold); // ServerTap Killstreak.KSInteractionManager.ServerTap // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // <Game+0x208c9c0>
	void PlayInteractionAnimation(None bIsStart, None Character, None InInteractionTarget, None Result, None InteractableLocation); // PlayInteractionAnimation Killstreak.KSInteractionType.PlayInteractionAnimation // (Native|Event|Protected|HasDefaults|BlueprintEvent|Const) // <Game+0x208c4c0>
	None GetGender(); // GetGender Killstreak.KSItem_Gender.GetGender // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x208b450>
	void GetSortedBundledItems(None& SortedItems); // GetSortedBundledItems Killstreak.KSItemBundle.GetSortedBundledItems // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x208ba30>
	void ShowLabel(); // ShowLabel Killstreak.ItemDropWidgetInterface.ShowLabel // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None IsValidJobItem(None KSItem); // IsValidJobItem Killstreak.KSJobItem.IsValidJobItem // (Final|Native|Public|BlueprintCallable) // <Game+0x20910d0>
	None ValidateAttachmentForWeapon(None AttachmentToCheck, None Weapon); // ValidateAttachmentForWeapon Killstreak.JobLoadout.ValidateAttachmentForWeapon // (Final|Native|Public|BlueprintCallable) // <Game+0x2091660>
	void OnRep_SelectionActivityStatus(); // OnRep_SelectionActivityStatus Killstreak.KSJobSelectionComponent.OnRep_SelectionActivityStatus // (Final|Native|Protected) // <Game+0x20987d0>
	void ServerRequestSelectionState(None ItemId, None State); // ServerRequestSelectionState Killstreak.KSJobSelectionManager.ServerRequestSelectionState // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // <Game+0x20989b0>
	None GetOverallStatusTextAndTimer(None InSelector, None& OutActiveTimerId, None& PrimaryTask); // GetOverallStatusTextAndTimer Killstreak.KSJobSelectionRules.GetOverallStatusTextAndTimer // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x2097f30>
	None TasksEqual(None& A, None& B); // TasksEqual Killstreak.KSJobSelector.TasksEqual // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x209c630>
	void StopActiveEmote(); // StopActiveEmote Killstreak.KSJobSelectPreviewActor_Lobby.StopActiveEmote // (Final|Native|Public|BlueprintCallable) // <Game+0x209c610>
	void OnInventoryItemUpdated(None& InventoryId); // OnInventoryItemUpdated Killstreak.KSJsonDataFactory.OnInventoryItemUpdated // (Final|Native|Protected|HasOutParms) // <Game+0x20a03f0>
	void KillCamStop(); // KillCamStop Killstreak.KSKillCam.KillCamStop // (Final|Native|Public) // <Game+0x20a0350>
	void ViewedPawnTakeDamage(None InActor, None DamageAmount, None DamageTypeCDO, None EventInstigator, None DamageCauser); // ViewedPawnTakeDamage Killstreak.KSPlayerController.ViewedPawnTakeDamage // (Native|Public) // <Game+0x20e9640>
	void ProcessElimEntry(None InstigatorPlayerState); // ProcessElimEntry Killstreak.KSKillLeaderTracker.ProcessElimEntry // (Final|Native|Public) // <Game+0x20a0650>
	void OnDeployed(None DeployableActor); // OnDeployed Killstreak.KSLimitDeployablesRuleComponent.OnDeployed // (Final|Native|Public) // <Game+0x20a0370>
	None GetWeapons(None& OutWeaponAssets); // GetWeapons Killstreak.KSLoadoutBundle.GetWeapons // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x20a0150>
	None GetDynamicPoseImage(None bAllowSyncLoad); // GetDynamicPoseImage Killstreak.KSLoadoutClass.GetDynamicPoseImage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x209fb20>
	void SaveLoadoutByType(None LoadoutType); // SaveLoadoutByType Killstreak.KSLoadoutDataFactory.SaveLoadoutByType // (Final|Native|Public|BlueprintCallable) // <Game+0x20a0750>
	None AllowItem(None Item, None Slot); // AllowItem Killstreak.KSLoadoutRuleComponent.AllowItem // (Native|Event|Public|BlueprintEvent) // <Game+0x209ef40>
	void VisibilityChanged(None IsVisible); // VisibilityChanged Killstreak.KSLobbyCharacter.VisibilityChanged // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	None IsKillCamReplayActive(); // IsKillCamReplayActive Killstreak.KSLocalPlayer.IsKillCamReplayActive // (Final|Native|Public|BlueprintCallable) // <Game+0x20a4080>
	void HandleTrackerAccolade(None PlayerState); // HandleTrackerAccolade Killstreak.KSLongShot.HandleTrackerAccolade // (Final|Native|Public) // <Game+0x2081d70>
	void SetOpen(None bOpen); // SetOpen Killstreak.KSLootCrate.SetOpen // (Final|Native|Protected|BlueprintCallable) // <Game+0x20a4dc0>
	void HandleTeamCreated(None TeamState); // HandleTeamCreated Killstreak.KSMapDifficultyManager.HandleTeamCreated // (Final|Native|Protected) // <Game+0x20afb90>
	void PushJsonMatchData(); // PushJsonMatchData Killstreak.KSMatchDataRecorder.PushJsonMatchData // (Final|Native|Public) // <Game+0xae0850>
	None ShiftLocationBetweenTransforms(None& Location, None& SourceTransform, None& TargetTransform); // ShiftLocationBetweenTransforms Killstreak.KSMath.ShiftLocationBetweenTransforms // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // <Game+0x20b6430>
	None GetBuildupTime(); // GetBuildupTime Killstreak.KSMedPack.GetBuildupTime // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // <Game+0x20b40f0>
	void Uninitialize(); // Uninitialize Killstreak.KSMercManager.Uninitialize // (Native|Public) // <Game+0x20b6720>
	None StaticGetMercMasteryActivity(None WorldContextObject, None Job); // StaticGetMercMasteryActivity Killstreak.KSMercMasteryManager.StaticGetMercMasteryActivity // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x20b6600>
	void GetRelativeMinimapHeightToLocalPlayer(None ActorLocation, None& RelativeHeight); // GetRelativeMinimapHeightToLocalPlayer Killstreak.KSMiniMapAssistant.GetRelativeMinimapHeightToLocalPlayer // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x20b4f90>
	None IsLocationOnSquareMap(None InLocation); // IsLocationOnSquareMap Killstreak.KSMinimapRendererBase.IsLocationOnSquareMap // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x20b5ae0>
	void HandleNewItemAssetReceived(); // HandleNewItemAssetReceived Killstreak.KSModDrop.HandleNewItemAssetReceived // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	None UsesDuration(); // UsesDuration Killstreak.KSPlayerModInstance.UsesDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20f7970>
	void UpdateChargeDirect(None DeltaCharge); // UpdateChargeDirect Killstreak.KSModInst_Activated.UpdateChargeDirect // (Native|Public|BlueprintCallable) // <Game+0x20b67c0>
	None TryToSetAsActiveMod(None Key); // TryToSetAsActiveMod Killstreak.KSModInst_ActivatedStateMachine.TryToSetAsActiveMod // (Final|Native|Public|BlueprintCallable) // <Game+0x20ba9f0>
	None GetCachedTarget(); // GetCachedTarget Killstreak.KSModInst_ActivatedTarget.GetCachedTarget // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // <Game+0x20b9ac0>
	void OnMatchingDamageDealt(None DamagedActor, None Damage, None DamageCauser); // OnMatchingDamageDealt Killstreak.KSModInst_OnDamageOther.OnMatchingDamageDealt // (Native|Event|Protected|BlueprintEvent) // <Game+0x20bf190>
	void OnEliminateOther(None Other); // OnEliminateOther Killstreak.KSModInst_OnDownOther.OnEliminateOther // (Native|Event|Public|BlueprintEvent) // <Game+0x20b5bb0>
	void OnDebuffsRemovedFromCharacter(None Character); // OnDebuffsRemovedFromCharacter Killstreak.KSModInst_ApplyDebuffOnDownOther.OnDebuffsRemovedFromCharacter // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void TryToRemoveItem(); // TryToRemoveItem Killstreak.KSModInst_GiveItemOnActivation.TryToRemoveItem // (Final|Native|Protected|BlueprintCallable) // <Game+0x20ba9d0>
	void WeaponAmmoConsumed(None Weapon, None AmmoConsumed); // WeaponAmmoConsumed Killstreak.KSModInst_GiveWeaponOnActivation.WeaponAmmoConsumed // (Final|Native|Protected) // <Game+0x20baab0>
	void OnRep_BaseWeapon(); // OnRep_BaseWeapon Killstreak.KSModInst_BuffWeaponOnActivation.OnRep_BaseWeapon // (Final|Native|Private) // <Game+0x20ba5c0>
	void OnAimReferenceAssetReady(); // OnAimReferenceAssetReady Killstreak.KSModInst_CacheAim.OnAimReferenceAssetReady // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void OnRep_EffectTimer(); // OnRep_EffectTimer Killstreak.KSModInst_OverTimeEffect.OnRep_EffectTimer // (Final|Native|Protected) // <Game+0x20c3920>
	void OnRep_EnemyDetected(); // OnRep_EnemyDetected Killstreak.KSModInst_DetectEnemy.OnRep_EnemyDetected // (Final|Native|Private) // <Game+0x20ba600>
	void HandleIdle(None Weapon, None OldState); // HandleIdle Killstreak.KSModInst_FireWeaponOnActivation.HandleIdle // (Native|Event|Protected|BlueprintEvent) // <Game+0x20a43e0>
	void BuildSucceeded(); // BuildSucceeded Killstreak.KSModInst_GiveBuildOnActivation.BuildSucceeded // (Final|Native|Protected) // <Game+0x20b9930>
	void OnRep_CurrentTarget(); // OnRep_CurrentTarget Killstreak.KSModInst_HoldToTarget.OnRep_CurrentTarget // (Final|Native|Protected) // <Game+0x20bf4e0>
	None GetThrowDistance(); // GetThrowDistance Killstreak.KSModInst_MartialArtist.GetThrowDistance // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // <Game+0x20be910>
	None GetDistance(); // GetDistance Killstreak.KSModInst_MovementAbility.GetDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20be7c0>
	void Triggered(); // Triggered Killstreak.KSModInst_OnAbilityUsed.Triggered // (Final|Native|Protected) // <Game+0x20bfd40>
	void Triggered(None RollDuration); // Triggered Killstreak.KSModInst_OnDodgeRoll.Triggered // (Final|Native|Protected) // <Game+0x20bfd60>
	void Triggered(); // Triggered Killstreak.KSModInst_OnDodgeRollEnd.Triggered // (Final|Native|Protected) // <Game+0x20bfd40>
	void OnReviveComplete(None Reviver, None Revivee); // OnReviveComplete Killstreak.KSModInst_OnDownOrRevive.OnReviveComplete // (Native|Event|Public|BlueprintEvent) // <Game+0x1962790>
	void OnEquipmentEndActive(None Character, None WeaponComponent); // OnEquipmentEndActive Killstreak.KSModInst_OnEquipmentActive.OnEquipmentEndActive // (Final|Native|Private) // <Game+0x20bef00>
	void ReloadEquipmentAtEquipPoint(None EquipPoint); // ReloadEquipmentAtEquipPoint Killstreak.KSModInst_OnEndActiveReload.ReloadEquipmentAtEquipPoint // (Final|Native|Private) // <Game+0x20bf9c0>
	void Triggered(); // Triggered Killstreak.KSModInst_OnFireWeaponType.Triggered // (Final|Native|Protected) // <Game+0x20bfd40>
	void Triggered(); // Triggered Killstreak.KSModInst_OnGenericEvent.Triggered // (Final|Native|Protected) // <Game+0x20bfd40>
	void OnItemPickedUp(None Character, None ItemDrop, None Item); // OnItemPickedUp Killstreak.KSModInst_OnPickupItem.OnItemPickedUp // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void OnProjectileStopped(None& HitResult); // OnProjectileStopped Killstreak.KSModInst_OnProjectileBounce.OnProjectileStopped // (Native|Event|Protected|HasOutParms|BlueprintEvent) // <Game+0x20bf420>
	void Triggered(None Reviver, None Revivee); // Triggered Killstreak.KSModInst_OnReviveOther.Triggered // (Final|Native|Protected) // <Game+0x20bfde0>
	void StopShotAtTimer(); // StopShotAtTimer Killstreak.KSModInst_OnShotAt.StopShotAtTimer // (Final|Native|Protected|BlueprintCallable) // <Game+0x20bfc00>
	void TimerComplete(None TimerType); // TimerComplete Killstreak.KSModInst_OnShotAtAndDodgeRollEnd.TimerComplete // (Final|Native|Protected|BlueprintCallable) // <Game+0x20bfcc0>
	void TakeDamageTimerComplete(); // TakeDamageTimerComplete Killstreak.KSModInst_OnTakeDamage.TakeDamageTimerComplete // (Native|Event|Protected|BlueprintEvent) // <Game+0x1975d30>
	void RegisterDeployable(None DeployableAsActor); // RegisterDeployable Killstreak.KSModInst_PilotOnActivation.RegisterDeployable // (Final|Native|Protected) // <Game+0x20c3550>
	void PingFromDownedEnemy(None DownedEnemy); // PingFromDownedEnemy Killstreak.KSModInst_PingOnOtherDowned.PingFromDownedEnemy // (Native|Public) // <Game+0x1962930>
	void ProximityActorUpdated(None Actor, None Component, None ProximityInfo); // ProximityActorUpdated Killstreak.KSModInst_ProximityComponent.ProximityActorUpdated // (Final|Native|Protected) // <Game+0x20c3a60>
	None IsValidReveal(None LocalPlayer); // IsValidReveal Killstreak.KSModInst_RevealOnMinimap.IsValidReveal // (Final|Native|Public|BlueprintCallable) // <Game+0x20c3320>
	void SetDroneTarget(None TargetCharacter); // SetDroneTarget Killstreak.KSModInst_ReviveDrone.SetDroneTarget // (Final|Native|Public) // <Game+0x20c3e20>
	void TargetReviveInterrupted(None Reviver, None Revivee); // TargetReviveInterrupted Killstreak.KSModInst_ReviveTarget.TargetReviveInterrupted // (Final|Native|Protected) // <Game+0x20c3f80>
	void GiveEquipment(); // GiveEquipment Killstreak.KSModInst_StartingEquipment.GiveEquipment // (Final|Native|Protected|BlueprintCallable) // <Game+0x20c3100>
	void OnActiveWeaponChanged(None Character); // OnActiveWeaponChanged Killstreak.KSModInst_WeaponSkinOverride.OnActiveWeaponChanged // (Final|Native|Protected) // <Game+0x20c33d0>
	void OnCharacterPossessedOutsideZone(None Controller); // OnCharacterPossessedOutsideZone Killstreak.KSModZone.OnCharacterPossessedOutsideZone // (Final|Native|Private) // <Game+0x20c34d0>
	void RemoveTrackerByPlayerState(None CurrentPlayerState); // RemoveTrackerByPlayerState Killstreak.KSMultiDownsTracker.RemoveTrackerByPlayerState // (Final|Native|Public) // <Game+0x20c3ce0>
	void RemoveTrackerByPlayerState(None CurrentPlayerState); // RemoveTrackerByPlayerState Killstreak.KSMultiElimTracker.RemoveTrackerByPlayerState // (Final|Native|Public|BlueprintCallable) // <Game+0x20c3d60>
	None GetOrderedPersistentPlayerDatasForMVPPoints(None UnorderedPersistentPlayerDatas); // GetOrderedPersistentPlayerDatasForMVPPoints Killstreak.KSMVPDeterminant.GetOrderedPersistentPlayerDatasForMVPPoints // (Final|Native|Public|Const) // <Game+0x20c77d0>
	None GetKSName(); // GetKSName Killstreak.KSNamedObject.GetKSName // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x20c7430>
	void UpdateNavigationMesh(); // UpdateNavigationMesh Killstreak.KSNavModifierComponent.UpdateNavigationMesh // (Final|Native|Public|BlueprintCallable) // <Game+0x20c8600>
	None DoesLocalPlayerHaveBomb(); // DoesLocalPlayerHaveBomb Killstreak.KSNeutralBombZone.DoesLocalPlayerHaveBomb // (Event|Public|BlueprintEvent|Const) // <Game+0x260f470>
	void UpdatePlayerTrackers(None InstigatorPlayerState); // UpdatePlayerTrackers Killstreak.KSNoFlyZoneTracker.UpdatePlayerTrackers // (Final|Native|Public) // <Game+0x20c8620>
	void GetNudgingActors(None& NudgingActors); // GetNudgingActors Killstreak.KSNudgeComponent.GetNudgingActors // (Final|Native|Public|HasOutParms|Const) // <Game+0x20c75e0>
	void UnbindFromObjectiveTimerTick(None Callback); // UnbindFromObjectiveTimerTick Killstreak.KSObjective.UnbindFromObjectiveTimerTick // (Native|Public|BlueprintCallable) // <Game+0x20c8540>
	void TickDamage(); // TickDamage Killstreak.KSOutOfBoundsManager.TickDamage // (Final|Native|Private) // <Game+0x20d08a0>
	void OnRoundStarted(None& RoundState); // OnRoundStarted Killstreak.KSOutOfBoundsManager_RoundGame.OnRoundStarted // (Final|Native|Protected|HasOutParms) // <Game+0x20d0500>
	void TurnOnDropBoundary(); // TurnOnDropBoundary Killstreak.KSOutOfBoundsZone.TurnOnDropBoundary // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void TurnOnCollision(); // TurnOnCollision Killstreak.KSOutOfBoundsVolume.TurnOnCollision // (Native|Event|Protected|BlueprintEvent) // <Game+0x196cdf0>
	None PrepareForNextRound(None& ActorToDestroy); // PrepareForNextRound Killstreak.KSPawnCommonInterface.PrepareForNextRound // (Native|Public|HasOutParms) // <Game+0x20d05a0>
	None IsVictimStored(None VictimPlayerId, None& PlayerTracker, None& TrackerIndex); // IsVictimStored Killstreak.KSPayBackTracker.IsVictimStored // (Final|Native|Public|HasOutParms) // <Game+0x20cf940>
	void GetNextCamera(); // GetNextCamera Killstreak.KSPerformanceCaptureCamera.GetNextCamera // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	None RequestJobMasteryExperience(None& InPlayerId, None InJob); // RequestJobMasteryExperience Killstreak.KSPersistentDataReplicator.RequestJobMasteryExperience // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x20d0650>
	None IsAbandoned(); // IsAbandoned Killstreak.KSPersistentPlayerData.IsAbandoned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20cf920>
	void SetTeamType(None Team, None TeamType); // SetTeamType Killstreak.KSPhaseRuleComponent.SetTeamType // (Final|Native|Public|BlueprintCallable) // <Game+0x20de000>
	None RemovePhysicsAsset(None Mesh, None PhysicsAsset); // RemovePhysicsAsset Killstreak.KSPhysicsAssetUtilities.RemovePhysicsAsset // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // <Game+0x20dd490>
	void BPIF_ShowOutline(); // BPIF_ShowOutline Killstreak.KSPingable.BPIF_ShowOutline // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x20dbcc0>
	void SetupBeaconDisplay(); // SetupBeaconDisplay Killstreak.KSPingBeaconBase.SetupBeaconDisplay // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void UpdateCachedHoveredActor(None NewCachedHoveredActor); // UpdateCachedHoveredActor Killstreak.KSPingManager.UpdateCachedHoveredActor // (Final|Native|Public) // <Game+0x20de0c0>
	None SaveSeenChallenges(None& SeenChallenges); // SaveSeenChallenges Killstreak.KSPlayerChallengesManager.SaveSeenChallenges // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x20e7e90>
	void ViewExternalProfile(); // ViewExternalProfile Killstreak.KSPlayerInfo.ViewExternalProfile // (Final|Native|Public|BlueprintCallable|Const) // <Game+0x20ee800>
	None DoesInputTypeSupportChords(None InputType); // DoesInputTypeSupportChords Killstreak.KSPlayerInput.DoesInputTypeSupportChords // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20ed040>
	void RemoveAllItemUpdatedCallbacks(None& Callback); // RemoveAllItemUpdatedCallbacks Killstreak.KSPlayerInventoryHelper.RemoveAllItemUpdatedCallbacks // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x20ee630>
	void ProcessNextTaskForPlayer(None Player); // ProcessNextTaskForPlayer Killstreak.KSPlayerJoinRuleComponent.ProcessNextTaskForPlayer // (Final|Native|Private) // <Game+0x20ee500>
	None BeginTask(None Player); // BeginTask Killstreak.KSPlayerJoinTask.BeginTask // (Native|Event|Public|BlueprintEvent) // <Game+0x2000050>
	void HandleShopClosed(None PlayerShop); // HandleShopClosed Killstreak.KSPlayerJoinTask_Shop.HandleShopClosed // (Final|Native|Private) // <Game+0x20edeb0>
	None ShouldRemoveAllInstances(); // ShouldRemoveAllInstances Killstreak.KSPlayerMod.ShouldRemoveAllInstances // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20ee700>
	None ShouldRemoveIfExhausted(); // ShouldRemoveIfExhausted Killstreak.KSPlayerMod_Activated.ShouldRemoveIfExhausted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20a3dd0>
	None GetTargetBuffs(); // GetTargetBuffs Killstreak.KSPlayerMod_ActivatedTarget.GetTargetBuffs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20f1e30>
	None CheckDistanceAndAngleFromEnemies(None InCharacter, None& bInLOS, None bWithinDistance, None bWithinAngle, None bCheckLOS, None bIgnoreDeadEnemies); // CheckDistanceAndAngleFromEnemies Killstreak.KSPlayerMod_AngleConfig.CheckDistanceAndAngleFromEnemies // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game+0x20f1930>
	void RemoveModInstances(None ModOwner, None ModInstancesToRemove); // RemoveModInstances Killstreak.KSPlayerMod_ApplyModOnEvent.RemoveModInstances // (Final|Native|Public|BlueprintCallable) // <Game+0x20f2190>
	None RequiresHeadshot(); // RequiresHeadshot Killstreak.KSPlayerMod_DamageDealt.RequiresHeadshot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20f22b0>
	None GetValidHitLocations(); // GetValidHitLocations Killstreak.KSPlayerMod_DamageTaken.GetValidHitLocations // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20f1fe0>
	None GetGivenItem(None Index); // GetGivenItem Killstreak.KSPlayerMod_GiveItemOnActivation.GetGivenItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20f1c60>
	void GiveItem(None ModOwner, None& GivenToEvent); // GiveItem Killstreak.KSPlayerMod_GiveItemOnEvent.GiveItem // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x20f20a0>
	None GetReclaimCharge(); // GetReclaimCharge Killstreak.KSPlayerMod_GiveWeaponConfig.GetReclaimCharge // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20f1df0>
	None GetHealUpTo(); // GetHealUpTo Killstreak.KSPlayerMod_HealOnEvent.GetHealUpTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20f6a20>
	None GetPickupRadius(); // GetPickupRadius Killstreak.KSPlayerMod_PickupRange.GetPickupRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20f1db0>
	None GetVehicleClass(); // GetVehicleClass Killstreak.KSPlayerMod_PilotOnActivation.GetVehicleClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20f6c00>
	None GetRevealParameters(); // GetRevealParameters Killstreak.KSPlayerMod_RevealTarget.GetRevealParameters // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20f6b70>
	void OnNewOtherCharacter(None InCharacter); // OnNewOtherCharacter Killstreak.KSPlayerModInst_Omniscience.OnNewOtherCharacter // (Final|Native|Private) // <Game+0x20f7410>
	void WeaponAddedToOwnerInventory(None NewWeapon, None InGiveItemParameters); // WeaponAddedToOwnerInventory Killstreak.KSPlayerModInst_WeaponAttachment.WeaponAddedToOwnerInventory // (Native|Protected) // <Game+0x20f7990>
	void SetPlayerStateOwner(None NewPlayerState); // SetPlayerStateOwner Killstreak.KSPlayerModManager.SetPlayerStateOwner // (Final|Native|Public) // <Game+0x2100e90>
	void OnHUDSetup(); // OnHUDSetup Killstreak.KSWidgetInfoActor.OnHUDSetup // (Final|Native|Protected) // <Game+0x217f880>
	void Undo(); // Undo Killstreak.KSPlayerShop.Undo // (Final|Native|Public|BlueprintCallable) // <Game+0x2101340>
	void ClearTransactionHistory(); // ClearTransactionHistory Killstreak.KSPlayerShopHistoryComponent.ClearTransactionHistory // (Final|Native|Public|BlueprintCallable) // <Game+0x2109030>
	void ZoneLeftByPlayer(None PlayerState); // ZoneLeftByPlayer Killstreak.KSPlayerShopZone.ZoneLeftByPlayer // (Final|Native|Protected|BlueprintCallable) // <Game+0x210d840>
	void OnKSGameStateDestroyed(None Actor); // OnKSGameStateDestroyed Killstreak.KSPlayerShotListener.OnKSGameStateDestroyed // (Final|Native|Private) // <Game+0x210c510>
	void SetSideNum(None InSideNum); // SetSideNum Killstreak.KSPlayerStart.SetSideNum // (Final|Native|Public|BlueprintCallable) // <Game+0x210d4d0>
	void UpdatePollVotes(None NewPollData); // UpdatePollVotes Killstreak.KSPlayerState.UpdatePollVotes // (Final|Native|Public) // <Game+0x210d720>
	void SetPlayerStateOwner(None NewPlayerState); // SetPlayerStateOwner Killstreak.KSPlayerStateAssistant.SetPlayerStateOwner // (Final|Native|Public) // <Game+0x21146d0>
	void UnregisterFromStimulusSystem(); // UnregisterFromStimulusSystem Killstreak.KSPlayerStimulusComponentBase.UnregisterFromStimulusSystem // (Final|Native|Public|BlueprintCallable) // <Game+0x2114ee0>
	void StagePOI(); // StagePOI Killstreak.KSPointOfInterest.StagePOI // (Native|Public|BlueprintCallable) // <Game+0x2114cf0>
	void SortPointsOfInterestByID(None& PointsOfInterest, None ShouldSortDescending); // SortPointsOfInterestByID Killstreak.KSPOIBlueprintFunctionLibrary.SortPointsOfInterestByID // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x2114b40>
	void OnPollStarted(None GameState, None TeamNum); // OnPollStarted Killstreak.KSPollBase.OnPollStarted // (Native|Event|Public|BlueprintEvent) // <Game+0x2113a10>
	void SetTeamNum(None NewTeam); // SetTeamNum Killstreak.KSPowerUp.SetTeamNum // (Final|Native|Public|BlueprintCallable) // <Game+0x2114750>
	void UpdateSpinRotation(None DeltaSeconds); // UpdateSpinRotation Killstreak.KSProjectile.UpdateSpinRotation // (Native|Event|Protected|BlueprintEvent) // <Game+0x2114f00>
	void UnregisterTouchEvent(None KSCharacter); // UnregisterTouchEvent Killstreak.KSProjectile_Grenade.UnregisterTouchEvent // (Final|Native|Public|BlueprintCallable) // <Game+0x211c9a0>
	None GetProjectileClusterComponent(); // GetProjectileClusterComponent Killstreak.KSProjectile_ClusterGrenade.GetProjectileClusterComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x211b890>
	None OnProjectileStopped(None& HitResult); // OnProjectileStopped Killstreak.KSSpreadProjectile.OnProjectileStopped // (Native|Event|Protected|HasOutParms|BlueprintEvent) // <Game+0x211c250>
	None GetSpread(None World, None Transform, None Radius, None NormalZMin); // GetSpread Killstreak.KSGrenadeSpreadRule.GetSpread // (Native|Event|Public|HasDefaults|BlueprintEvent|Const) // <Game+0x211b8b0>
	void UnlinkFromParent(); // UnlinkFromParent Killstreak.KSProjectile_GrenadeSpread.UnlinkFromParent // (Final|Native|Public|BlueprintCallable) // <Game+0x211c980>
	void PredictDamage(None DeltaTime); // PredictDamage Killstreak.KSProjectile_Melee.PredictDamage // (Final|Native|Public|BlueprintCallable) // <Game+0x211c420>
	void ProximityActorUpdated(None Actor, None Component, None ProximityInfo); // ProximityActorUpdated Killstreak.KSProjectile_ProximityGrenade.ProximityActorUpdated // (Native|Event|Protected|BlueprintEvent) // <Game+0x211f5c0>
	void ReportOwningClientLoaded(); // ReportOwningClientLoaded Killstreak.KSProjectile_RemoteTrigger.ReportOwningClientLoaded // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // <Game+0x211faf0>
	void OnReviveEnd(None RevivingCharacter, None SuccessfulRevive); // OnReviveEnd Killstreak.KSProjectile_ReviveDart.OnReviveEnd // (Final|Native|Protected) // <Game+0x211f470>
	void OnSegmentKilled(None Segment); // OnSegmentKilled Killstreak.KSProjectileClusterComponent.OnSegmentKilled // (Final|Native|Protected) // <Game+0x211f540>
	void UnregisterOverlapShape(None OverlapShape); // UnregisterOverlapShape Killstreak.KSProximityComponent.UnregisterOverlapShape // (Final|Native|Public|BlueprintCallable) // <Game+0x211fd30>
	None IsThrottled(None CosmeticSlot); // IsThrottled Killstreak.KSRadialMenuManager.IsThrottled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x21256b0>
	None GetRequiredPlacementMatches(None SeasonKey); // GetRequiredPlacementMatches Killstreak.KSRankedManager.GetRequiredPlacementMatches // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2125480>
	void Suicide(); // Suicide Killstreak.KSVehicleBase.Suicide // (Final|Native|Public|BlueprintCallable) // <Game+0x214c060>
	None SpendResource(None& InResourceKeyName, None InSpentAmount); // SpendResource Killstreak.KSResourceManagerComponent.SpendResource // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x212fcc0>
	void BPI_UnrevealObject(); // BPI_UnrevealObject Killstreak.KSRevealable.BPI_UnrevealObject // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x212e740>
	void SetGameStateRef(None NewGameState); // SetGameStateRef Killstreak.KSRevealManager.SetGameStateRef // (Final|Native|Public) // <Game+0x212fb50>
	void StoreDamageTakenEvent(None& DamageEvent); // StoreDamageTakenEvent Killstreak.KSReverseTracker.StoreDamageTakenEvent // (Final|Native|Public|HasOutParms) // <Game+0x212fdb0>
	void GetStatsOrdering(None& StatsOrdering); // GetStatsOrdering Killstreak.KSRewardsCalculator.GetStatsOrdering // (Event|Public|HasOutParms|BlueprintEvent) // <Game+0x260f470>
	void GamepadLookUp(None Value); // GamepadLookUp Killstreak.KSSpectatorPawn.GamepadLookUp // (Native|Public) // <Game+0x213b690>
	void OnRep_FlightDurationTimer(); // OnRep_FlightDurationTimer Killstreak.KSRocket.OnRep_FlightDurationTimer // (Final|Native|Protected) // <Game+0x2132f90>
	void StopSimulating(None& HitResult); // StopSimulating Killstreak.KSRocketMovementComponent.StopSimulating // (Native|Public|HasOutParms|BlueprintCallable) // <Game+0x2134140>
	void ReceiveGameSetup(); // ReceiveGameSetup Killstreak.KSRoundBasedObject.ReceiveGameSetup // (Final|Native|Protected) // <Game+0x2132ff0>
	None TryToDamage(None TargetActor, None AttemptedDamage); // TryToDamage Killstreak.KSRoyaleSafeZone.TryToDamage // (Final|Native|Public|BlueprintCallable) // <Game+0x2134200>
	None StartRuleBasedPhase(None WorldContextObject, None Rule, None TimeSeconds, None PhaseName, None PhaseDescription, None PhaseId); // StartRuleBasedPhase Killstreak.KSRuleBasedPhaseProxy.StartRuleBasedPhase // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x2133f70>
	void UnRevealOverlappedCharacter(None Character); // UnRevealOverlappedCharacter Killstreak.KSSafeZone.UnRevealOverlappedCharacter // (Final|Native|Protected) // <Game+0x20c3550>
	None SpawnTracerEmitterWithRotation(None WorldContextObject, None EmitterTemplate, None start, None end, None DeactivatesOnDestinationReached, None TravelSpeed, None Rotation); // SpawnTracerEmitterWithRotation Killstreak.KSSceneComponentPoolStatics.SpawnTracerEmitterWithRotation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0x2133d50>
	None IsAnySeasonalEventActive(); // IsAnySeasonalEventActive Killstreak.KSSeasonalEventLoader.IsAnySeasonalEventActive // (Final|Native|Public|Const) // <Game+0x2132cd0>
	void SpawnedActorDestroyed(None DestroyedActor); // SpawnedActorDestroyed Killstreak.KSSeasonalItemSpawnLocation.SpawnedActorDestroyed // (Final|Native|Private) // <Game+0x2137820>
	void Reset(); // Reset Killstreak.KSSeasonalItemSpawnLocationManager.Reset // (Final|Native|Private|BlueprintCallable) // <Game+0x20affe0>
	None GetSettingAsInt(None Name, None& OutInt); // GetSettingAsInt Killstreak.KSSettingsCallbackInterface.GetSettingAsInt // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game+0x21371e0>
	None GetLocalSettingsCallbackInterfaceFromPlayer(None InPlayer); // GetLocalSettingsCallbackInterfaceFromPlayer Killstreak.KSSettingsCallbackStatics.GetLocalSettingsCallbackInterfaceFromPlayer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x2136e80>
	void SetShieldEnabled(None ShieldEnabled); // SetShieldEnabled Killstreak.KSShield.SetShieldEnabled // (Final|Native|Public|BlueprintCallable) // <Game+0x2137710>
	void OnGamePhaseChanged(None NewPhase, None PreviousPhase); // OnGamePhaseChanged Killstreak.KSShopRuleComponent.OnGamePhaseChanged // (Final|Native|Public) // <Game+0x2137440>
	None StaticGetAssociatedJob(None& InSkinBundle); // StaticGetAssociatedJob Killstreak.KSSkinBundle.StaticGetAssociatedJob // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x21378a0>
	None GetSkinObject(); // GetSkinObject Killstreak.KSSkinObjectInterface.GetSkinObject // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2058a50>
	void Initialize(); // Initialize Killstreak.KSSpawnRule.Initialize // (Native|Event|Public|BlueprintEvent) // <Game+0x20b6720>
	None GetScoreForDistance(None& To, None& From); // GetScoreForDistance Killstreak.KSSpawnRule_Proximity.GetScoreForDistance // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x213c1e0>
	void OnPlayerEventRecordExpire(None KSPlayerEventRecord); // OnPlayerEventRecordExpire Killstreak.KSSpawnRule_PlayerEventProximity.OnPlayerEventRecordExpire // (Final|Native|Private) // <Game+0x213ceb0>
	void InitSideRoot(None& InSideRoot); // InitSideRoot Killstreak.KSSpawnSelectorComponent.InitSideRoot // (Event|Protected|HasOutParms|BlueprintEvent) // <Game+0x260f470>
	None SelectSpawnSelectorTreeNode(None Controller, None& SpawnPoints); // SelectSpawnSelectorTreeNode Killstreak.KSSpawnSelectorTierBranch.SelectSpawnSelectorTreeNode // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // <Game+0x213cf70>
	None GetDynamicPoseImage(None bAllowSyncLoad); // GetDynamicPoseImage Killstreak.KSSpecialty.GetDynamicPoseImage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x213bf40>
	None GetStatTrackingActivity(); // GetStatTrackingActivity Killstreak.KSSpray.GetStatTrackingActivity // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x213c540>
	void ServerPlaySpray(None InSprayAim); // ServerPlaySpray Killstreak.KSSprayInstance.ServerPlaySpray // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // <Game+0x213d0d0>
	void StopShakeOnStopSprint(None NewSprint); // StopShakeOnStopSprint Killstreak.KSSprintCameraShake.StopShakeOnStopSprint // (Native|Protected) // <Game+0x213d190>
	None GetStat(None StatType, None& OutStat); // GetStat Killstreak.KSPlayerMatchStats.GetStat // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x213c440>
	None GetTotalProgressSum(None& InActivityInstances); // GetTotalProgressSum Killstreak.KSStatWrapper.GetTotalProgressSum // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game+0x213caa0>
	None GetDLCForVoucer(); // GetDLCForVoucer Killstreak.KSStoreItem.GetDLCForVoucer // (Final|Native|Public|BlueprintCallable) // <Game+0x2140d20>
	None RedeemInactiveBoost(None InactiveBoostId); // RedeemInactiveBoost Killstreak.KSStoreItemHelper.RedeemInactiveBoost // (Final|Native|Public|BlueprintCallable) // <Game+0x2141aa0>
	void SwimNotifyTransitionStateLock(None bShouldLock); // SwimNotifyTransitionStateLock Killstreak.KSSwimmingAnimInst.SwimNotifyTransitionStateLock // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None OpenTablet(); // OpenTablet Killstreak.KSTabletAnimInstance.OpenTablet // (Final|Native|Public|BlueprintCallable) // <Game+0x21419c0>
	void OpenTablet(); // OpenTablet Killstreak.KSTabletMeshComponent.OpenTablet // (Final|Native|Public|BlueprintCallable) // <Game+0x21419f0>
	None GetCurrentTarget(); // GetCurrentTarget Killstreak.KSTargeter.GetCurrentTarget // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1feca80>
	void OnCurrentDistanceChanged(None NewDistance); // OnCurrentDistanceChanged Killstreak.KSTargetingDetailsWidget.OnCurrentDistanceChanged // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void StoreCombatInfo(None ElimEvent); // StoreCombatInfo Killstreak.KSTeamKillTracker.StoreCombatInfo // (Final|Native|Public) // <Game+0x2141c60>
	None SubtractTickets(None NumTickets); // SubtractTickets Killstreak.KSTeamState.SubtractTickets // (Final|Native|Public|BlueprintCallable) // <Game+0x2141d70>
	void DebugThreatLevels(None Show); // DebugThreatLevels Killstreak.KSThreatComponent.DebugThreatLevels // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void StopTimer(); // StopTimer Killstreak.KSTimerComponent.StopTimer // (Final|Native|Public|BlueprintCallable) // <Game+0x2147da0>
	void VehicleHit(None HitComponent, None OtherActor, None OtherComponent, None NormalImpulse, None& Hit); // VehicleHit Killstreak.KSVehicle.VehicleHit // (Native|Protected|HasOutParms|HasDefaults) // <Game+0x214c100>
	void SetOwningCharacter(None Rider); // SetOwningCharacter Killstreak.KSVehicle_Remote.SetOwningCharacter // (Final|Native|Public|BlueprintCallable) // <Game+0x214bf60>
	void StopParachute(); // StopParachute Killstreak.KSVehicleMovementComponent4W.StopParachute // (Final|Native|Protected) // <Game+0x2157bb0>
	None GetSeatSpringArm(); // GetSeatSpringArm Killstreak.KSVehicleSeatComponent.GetSeatSpringArm // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x21550c0>
	void OnAnimInstanceInitialized(); // OnAnimInstanceInitialized Killstreak.KSViewModel.OnAnimInstanceInitialized // (Final|Native|Protected) // <Game+0x21557c0>
	None GetViewModelName(); // GetViewModelName Killstreak.KSViewModelInterface.GetViewModelName // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x1fce540>
	void TeamStateChanged(None PlayerState); // TeamStateChanged Killstreak.KSVOComponent.TeamStateChanged // (Final|Native|Protected) // <Game+0x2157bf0>
	void OnWaterFXTriggered(None TriggeringActor, None SurfaceRelevantLocation, None bIsFullySubmerged); // OnWaterFXTriggered Killstreak.KSWaterFXVolume.OnWaterFXTriggered // (Event|Public|HasDefaults|BlueprintEvent) // <Game+0x260f470>
	void OnRep_ScopeZoomIndex(); // OnRep_ScopeZoomIndex Killstreak.KSWAttachmentCosmetic_VarScope.OnRep_ScopeZoomIndex // (Native|Protected) // <Game+0x2155f80>
	None GetNextWayPoints(None WayPointSet); // GetNextWayPoints Killstreak.KSWayPoint.GetNextWayPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2154f50>
	void UpdateWayPointVisuals(); // UpdateWayPointVisuals Killstreak.KSWayPointSet.UpdateWayPointVisuals // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void ValidateReceivedAimData(None& ReceivedAim); // ValidateReceivedAimData Killstreak.KSWeapon_Aimed.ValidateReceivedAimData // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // <Game+0x215c5a0>
	void OnRep_BuildState(); // OnRep_BuildState Killstreak.KSWeapon_Build.OnRep_BuildState // (Final|Native|Private) // <Game+0x215b810>
	void SubmitTargetSelection(None TargetCandidate); // SubmitTargetSelection Killstreak.KSWeapon_DirectTarget.SubmitTargetSelection // (Net|NetReliableNative|Event|Protected|NetServer|NetValidate) // <Game+0x215c390>
	void OnFullyCooked(); // OnFullyCooked Killstreak.KSWeapon_Projectile.OnFullyCooked // (Final|Native|Private) // <Game+0xae0850>
	void OnFuseTimerExpired(None MinHandRemainingFuse); // OnFuseTimerExpired Killstreak.KSWeapon_GrenadeThrow.OnFuseTimerExpired // (Native|Protected) // <Game+0x215b660>
	None ShouldThrowWeapon(); // ShouldThrowWeapon Killstreak.KSWeapon_Melee.ShouldThrowWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x215c0f0>
	void ProximityActorUpdated(None Actor, None Component, None ProximityInfo); // ProximityActorUpdated Killstreak.KSWeapon_Proximity.ProximityActorUpdated // (Final|Native|Protected) // <Game+0x215b980>
	void OnRocketDestroyed(None RocketActor); // OnRocketDestroyed Killstreak.KSWeapon_RemoteRocket.OnRocketDestroyed // (Final|Native|Protected) // <Game+0x215b850>
	void SwapToDetonator(); // SwapToDetonator Killstreak.KSWeapon_RemoteThrow.SwapToDetonator // (Final|Native|Protected|BlueprintCallable) // <Game+0x215c450>
	void SwapOffDetonator(); // SwapOffDetonator Killstreak.KSWeapon_RemoteTrigger.SwapOffDetonator // (Final|Native|Protected|BlueprintCallable) // <Game+0x21646b0>
	void VehicleDestroyed(); // VehicleDestroyed Killstreak.KSWeapon_RemoteVehicle.VehicleDestroyed // (Final|Native|Protected) // <Game+0x2164c00>
	void OnReviveSucceed(); // OnReviveSucceed Killstreak.KSWeapon_ReviveDartDirect.OnReviveSucceed // (Final|Native|Private) // <Game+0x2164360>
	None TargetCurrentlyValid(None TestTarget); // TargetCurrentlyValid Killstreak.KSWeapon_Targeted.TargetCurrentlyValid // (Native|Protected|BlueprintCallable|BlueprintPure|Const) // <Game+0x21646d0>
	void OnRep_DroneActor(); // OnRep_DroneActor Killstreak.KSWeapon_ReviveDroneDirect.OnRep_DroneActor // (Final|Native|Protected) // <Game+0x2164320>
	None UsesNonlinerPelletDamage(); // UsesNonlinerPelletDamage Killstreak.KSWeapon_Shotgun.UsesNonlinerPelletDamage // (Final|Native|Protected|BlueprintCallable) // <Game+0x2164bb0>
	void SetWeaponState(None OwningWeaponComponent, None OldState, None NewState); // SetWeaponState Killstreak.KSWeaponAnimInstance.SetWeaponState // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None GetSoftBuildPreviewActorClass(); // GetSoftBuildPreviewActorClass Killstreak.KSWeaponAsset_Build.GetSoftBuildPreviewActorClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x216aac0>
	None GetTimeToFullyCook(); // GetTimeToFullyCook Killstreak.KSWeaponAsset_WithProjectile.GetTimeToFullyCook // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x216ad70>
	None GetMinimumCookTime(); // GetMinimumCookTime Killstreak.KSWeaponAsset_Grenade.GetMinimumCookTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x216a7c0>
	None GetOverlapObjectTypes(); // GetOverlapObjectTypes Killstreak.KSWeaponAsset_Melee.GetOverlapObjectTypes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x216a800>
	None GetDamageScalarAfterWalls(); // GetDamageScalarAfterWalls Killstreak.KSWeaponAsset_Pierce.GetDamageScalarAfterWalls // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x216a3c0>
	void GetSpreadPattern(None& OutPattern); // GetSpreadPattern Killstreak.KSWeaponAsset_Shotgun.GetSpreadPattern // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game+0x216ac80>
	void GetValidAttachPoints(None& OutAttachPoints); // GetValidAttachPoints Killstreak.KSWeaponAttachment.GetValidAttachPoints // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game+0x216ad90>
	None GetClipSize(); // GetClipSize Killstreak.KSWeaponAttachment_ExtMagazine.GetClipSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20549d0>
	None GetReloadPeriodMultiplier(); // GetReloadPeriodMultiplier Killstreak.KSWeaponAttachment_QuickMag.GetReloadPeriodMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20549d0>
	None GetAimDownSightsFieldOfView(); // GetAimDownSightsFieldOfView Killstreak.KSWeaponAttachment_ScopeFixedFOV.GetAimDownSightsFieldOfView // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20549d0>
	None GetScopeMultiplier(); // GetScopeMultiplier Killstreak.KSWeaponAttachment_ScopeMultiply.GetScopeMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20549d0>
	None GetAudibleRange(); // GetAudibleRange Killstreak.KSWeaponAttachment_Silencer.GetAudibleRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20549d0>
	None GetScopeFOVOptions(None InAsset); // GetScopeFOVOptions Killstreak.KSWeaponAttachment_VarScope.GetScopeFOVOptions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x216e120>
	void SetPersistsOnWeaponDrop(None bEnable); // SetPersistsOnWeaponDrop Killstreak.KSWeaponAttachmentInstance.SetPersistsOnWeaponDrop // (Final|Native|Public|BlueprintCallable) // <Game+0x216e6f0>
	void ServerSetScopeZoomIndex(None NewIndex); // ServerSetScopeZoomIndex Killstreak.KSWeaponAttachmentInst_VarScope.ServerSetScopeZoomIndex // (Net|Native|Event|Protected|NetServer|NetValidate) // <Game+0x216e640>
	None GetWrapTag(); // GetWrapTag Killstreak.KSWeaponCategoryAsset.GetWrapTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x216e500>
	None UsingAccuracyLoss(); // UsingAccuracyLoss Killstreak.KSWeaponComponent.UsingAccuracyLoss // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2176410>
	void OnTraceReactionDelay__DelegateSignature(None bBlockingHit, None& OutHits, None& start, None& end); // OnTraceReactionDelay__DelegateSignature Killstreak.KSWeaponFunctionLibrary.OnTraceReactionDelay__DelegateSignature // (Public|Delegate|HasOutParms|HasDefaults) // <Game+0x260f470>
	void Uninitialize(); // Uninitialize Killstreak.KSWeaponManager.Uninitialize // (Native|Public) // <Game+0x20b6720>
	None IsWeaponUnlockedInStore(None WeaponAsset, None PlayerState); // IsWeaponUnlockedInStore Killstreak.KSWeaponMasteryManager.IsWeaponUnlockedInStore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x217b130>
	void OnWingSuitCosmeticInitialized(); // OnWingSuitCosmeticInitialized Killstreak.KSWingSuitCosmeticComponent.OnWingSuitCosmeticInitialized // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void LevelActorDestroyed(None TheActor); // LevelActorDestroyed Killstreak.KSWorldSettings.LevelActorDestroyed // (Final|Native|Protected) // <Game+0x217f6f0>
	void SetReadyToRide(None bIsReadyToRide); // SetReadyToRide Killstreak.KSZipLine.SetReadyToRide // (Final|Native|Public|BlueprintCallable) // <Game+0x217faa0>
	void SetDynamicAnchors(None StartAnchor, None EndAnchor); // SetDynamicAnchors Killstreak.KSZipLine_Dynamic.SetDynamicAnchors // (Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void StartZiplining(); // StartZiplining Killstreak.KSZiplineMeshComponent.StartZiplining // (Final|Native|Public|BlueprintCallable) // <Game+0x217fbb0>
	void UIX_FlushPressedKeys(); // UIX_FlushPressedKeys Killstreak.LobbyPlayerController.UIX_FlushPressedKeys // (Final|Native|Protected|BlueprintCallable) // <Game+0x19820b0>
	void UpdateChannels(); // UpdateChannels Killstreak.ParticleSystemChannelComponent.UpdateChannels // (Final|Native|Protected|BlueprintCallable) // <Game+0x218af90>
	None GetSoftCategoryIcon(); // GetSoftCategoryIcon Killstreak.PerkCategory.GetSoftCategoryIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x218ac30>
	void OwnerChangedPersistentPlayerData(); // OwnerChangedPersistentPlayerData Killstreak.PersistentPlayerLoadoutComponent.OwnerChangedPersistentPlayerData // (Final|Native|Protected) // <Game+0x218ad30>
	void SetTimelineComponentToSimulate(None InTimelineComponent); // SetTimelineComponentToSimulate Killstreak.SmoothRepTimelineActor.SetTimelineComponentToSimulate // (Final|Native|Public|BlueprintCallable) // <Game+0x218ae50>
	void StopSimulating(None& HitResult); // StopSimulating Killstreak.SplineMovementComponent.StopSimulating // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x218aed0>
	None CreateThermalManagerComponent(None InCharacter, None InWeaponComponent, None ThermalPostProcessClass); // CreateThermalManagerComponent Killstreak.ThermalScopeManagerComponent.CreateThermalManagerComponent // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x218ab10>
	void OnTracerDestinationReached(None TracerComponent); // OnTracerDestinationReached Killstreak.TracerParticlePoolComponent.OnTracerDestinationReached // (Native|Public) // <Game+0x21533e0>
	void OnTracerDestinationReached(None TracerComponent); // OnTracerDestinationReached Killstreak.TracerStaticMeshPoolComponent.OnTracerDestinationReached // (Native|Protected) // <Game+0xcf9fa0>
	void UpdateTopQueueButton(); // UpdateTopQueueButton WBP_QuickPlay.WBP_QuickPlay_C.UpdateTopQueueButton // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None GetCineCameraComponent(); // GetCineCameraComponent CinematicCamera.CineCameraActor.GetCineCameraComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x34d0dd0>
	None GetRailSplineComponent(); // GetRailSplineComponent CinematicCamera.CameraRig_Rail.GetRailSplineComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x209b2b0>
	void SetLensPresetByName(None InPresetName); // SetLensPresetByName CinematicCamera.CineCameraComponent.SetLensPresetByName // (Final|Native|Public|BlueprintCallable) // <Game+0x34d1230>
	void ShowBurnin(); // ShowBurnin LevelSequence.LevelSequenceActor.ShowBurnin // (Final|Native|Public|BlueprintCallable) // <Game+0x36386c0>
	void RemoveMetaDataByClass(None InClass); // RemoveMetaDataByClass LevelSequence.LevelSequence.RemoveMetaDataByClass // (Final|Native|Public|BlueprintCallable) // <Game+0x3637ff0>
	void SetBurnIn(None InBurnInClass); // SetBurnIn LevelSequence.LevelSequenceBurnInOptions.SetBurnIn // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x36383b0>
	void SetSettings(None InSettings); // SetSettings LevelSequence.LevelSequenceBurnIn.SetSettings // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void OnCreated(); // OnCreated LevelSequence.LevelSequenceDirector.OnCreated // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	None GetActiveCameraComponent(); // GetActiveCameraComponent LevelSequence.LevelSequencePlayer.GetActiveCameraComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3637cd0>
	void SynchronizeToServer(None DesyncThresholdSeconds); // SynchronizeToServer LevelSequence.LevelSequenceMediaController.SynchronizeToServer // (Final|Native|Public|BlueprintCallable) // <Game+0x36386e0>
	void SetNavigationRelevancy(None bRelevant); // SetNavigationRelevancy NavigationSystem.NavRelevantComponent.SetNavigationRelevancy // (Final|Native|Public|BlueprintCallable) // <Game+0x3fdf620>
	void SetAreaClass(None NewAreaClass); // SetAreaClass NavigationSystem.NavModifierComponent.SetAreaClass // (Final|Native|Public|BlueprintCallable) // <Game+0x3fdf5a0>
	void SetAreaClass(None NewAreaClass); // SetAreaClass NavigationSystem.NavModifierVolume.SetAreaClass // (Final|Native|Public|BlueprintCallable) // <Game+0x3fdf520>
	None IsValid(); // IsValid NavigationSystem.NavigationPath.IsValid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3fdc7a0>
	void UnregisterNavigationInvoker(None Invoker); // UnregisterNavigationInvoker NavigationSystem.NavigationSystemV1.UnregisterNavigationInvoker // (Final|Native|Public|BlueprintCallable) // <Game+0x3fdd6a0>
	None K2_ReplaceAreaInTileBounds(None Bounds, None OldArea, None NewArea, None ReplaceLinks); // K2_ReplaceAreaInTileBounds NavigationSystem.RecastNavMesh.K2_ReplaceAreaInTileBounds // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x3fdf390>
	void ResetThrobberAnim(); // ResetThrobberAnim WBP_ThrobberShield.WBP_ThrobberShield_C.ResetThrobberAnim // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void SetNPEGuidedCalloutSeen(None GuidedCalloutScene); // SetNPEGuidedCalloutSeen KillstreakUINew.GuidedMenuCalloutsViewRedirector.SetNPEGuidedCalloutSeen // (Final|Native|Public) // <Game+0x2265170>
	void UpdateOpacityWhenAiming(); // UpdateOpacityWhenAiming KillstreakUINew.KSWidget.UpdateOpacityWhenAiming // (Native|Event|Protected|BlueprintEvent) // <Game+0x21758e0>
	void Queue(None Accolades); // Queue KillstreakUINew.KSAccoladeQueueWidget.Queue // (Final|Native|Protected|BlueprintCallable) // <Game+0x2264e20>
	None GetHeaderText(None Acquisitition); // GetHeaderText KillstreakUINew.KSAcquisitionModal.GetHeaderText // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // <Game+0x2263ca0>
	void GetBonusAppliedToLastMatch(None& ActiveEvents); // GetBonusAppliedToLastMatch KillstreakUINew.KSActiveBonusesWidget.GetBonusAppliedToLastMatch // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game+0x2263a70>
	void SetValuesFromBoundPlayerMod(); // SetValuesFromBoundPlayerMod KillstreakUINew.KSActiveDurationBar.SetValuesFromBoundPlayerMod // (Final|Native|Protected) // <Game+0x2265210>
	void SetPlayerStateUIRelevanceChanged(); // SetPlayerStateUIRelevanceChanged KillstreakUINew.KSPawnWidget.SetPlayerStateUIRelevanceChanged // (Native|Event|Protected|BlueprintEvent) // <Game+0x2263910>
	None RemoveWidgetFor(None InWeaponComponent); // RemoveWidgetFor KillstreakUINew.KSPawnInventoryWidget.RemoveWidgetFor // (Final|Native|Protected|BlueprintCallable) // <Game+0x2289570>
	void PreClearActiveWeaponComponent(); // PreClearActiveWeaponComponent KillstreakUINew.KSActiveWeaponComponentWidget.PreClearActiveWeaponComponent // (Native|Event|Protected|BlueprintEvent) // <Game+0x195d6d0>
	None GetRelevantActivityManager(None GameInstance); // GetRelevantActivityManager KillstreakUINew.KSActivity_ViewRedirector.GetRelevantActivityManager // (Native|Event|Protected|BlueprintEvent|Const) // <Game+0x2264010>
	None GetOwningKSPlayer(); // GetOwningKSPlayer KillstreakUINew.KSAimAssistDebugWidget.GetOwningKSPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2263fe0>
	void UpdateScreenRegion(); // UpdateScreenRegion KillstreakUINew.KSMapIconWidgetBase.UpdateScreenRegion // (Final|Native|Public|BlueprintCallable) // <Game+0x227fdf0>
	void View_SetSelfPingIcon(None PingType, None PingMessage); // View_SetSelfPingIcon KillstreakUINew.KSAllyMarkerWidget.View_SetSelfPingIcon // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	None LoadAlphaDisclaimerText(None& SaveText); // LoadAlphaDisclaimerText KillstreakUINew.KSAlphaDisclaimer.LoadAlphaDisclaimerText // (Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x2264a30>
	void SetOwningWeapon(None InWeapon); // SetOwningWeapon KillstreakUINew.KSWeaponWidget.SetOwningWeapon // (Final|Native|Public|BlueprintCallable) // <Game+0x22c6980>
	void StopReloading(); // StopReloading KillstreakUINew.KSAmmoWidget.StopReloading // (Native|Event|Protected|BlueprintEvent) // <Game+0x2265280>
	void DisplayAnnouncement(); // DisplayAnnouncement KillstreakUINew.KSAnnouncementQueuedMessageWidget.DisplayAnnouncement // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x2263910>
	void Queue(None Announcement); // Queue KillstreakUINew.KSAnnouncementQueueWidget.Queue // (Final|Native|Protected|BlueprintCallable) // <Game+0x2264ee0>
	void SetTeam(None NewTeam); // SetTeam KillstreakUINew.KSTeamWidget.SetTeam // (Native|Public|BlueprintCallable) // <Game+0x2288610>
	void TeamAddedToGameState(None InTeam); // TeamAddedToGameState KillstreakUINew.KSAutoTeamWidget.TeamAddedToGameState // (Final|Native|Private) // <Game+0x22652a0>
	void PlayTrasitionToPurchaseConfirmation(); // PlayTrasitionToPurchaseConfirmation KillstreakUINew.KSBattlepassUpsellWidget.PlayTrasitionToPurchaseConfirmation // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void UpdateGamepadPromptVisibility(); // UpdateGamepadPromptVisibility KillstreakUINew.KSBattlepassUpsellWidgetButton.UpdateGamepadPromptVisibility // (Final|Native|Public|BlueprintCallable) // <Game+0x226b220>
	void View_SetFromItem(None ItemDetails); // View_SetFromItem KillstreakUINew.KSBoostInventoryItemWidget.View_SetFromItem // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void SetChallengeData(None ActivityInstance); // SetChallengeData KillstreakUINew.KSChallengeEntryCardBase.SetChallengeData // (Final|Native|Public|BlueprintCallable) // <Game+0x226aad0>
	void ViewedPawnInstigatedDamageNotify(None& DamageInfo); // ViewedPawnInstigatedDamageNotify KillstreakUINew.KSComponentReticleWidgetBase.ViewedPawnInstigatedDamageNotify // (Native|Event|Protected|HasOutParms|BlueprintEvent) // <Game+0x226b240>
	void SetOptionsVisibility(); // SetOptionsVisibility KillstreakUINew.KSContextMenu.SetOptionsVisibility // (Final|Native|Public|BlueprintCallable) // <Game+0x226ae70>
	void SetContextOption(None Context); // SetContextOption KillstreakUINew.KSContextMenuButton.SetContextOption // (Final|Native|Public|BlueprintCallable) // <Game+0x226ab50>
	void SetupPingOnReady(); // SetupPingOnReady KillstreakUINew.KSContextualPingMarkerWidget.SetupPingOnReady // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void SetCurrentDisplayByItem(None StoreItem); // SetCurrentDisplayByItem KillstreakUINew.KSCurrencyDisplay.SetCurrentDisplayByItem // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void TabRight(); // TabRight KillstreakUINew.KSCustomizationSelection.TabRight // (Final|Native|Public|BlueprintCallable) // <Game+0x226b200>
	void UpdateChallenges(); // UpdateChallenges KillstreakUINew.KSDailyChallengeViewBase.UpdateChallenges // (Final|Native|Protected) // <Game+0x226faa0>
	None TryConsumeOpenOnUpdate(); // TryConsumeOpenOnUpdate KillstreakUINew.KSDataSocialCategory.TryConsumeOpenOnUpdate // (Final|Native|Public|BlueprintCallable) // <Game+0x226fa70>
	void KSSocialPlayerUpdate__DelegateSignature(None playerinfo); // KSSocialPlayerUpdate__DelegateSignature KillstreakUINew.KSDataSocialPlayer.KSSocialPlayerUpdate__DelegateSignature // (MulticastDelegate|Public|Delegate) // <Game+0x260f470>
	None GetSubmenu(None BaseCommand, None& Submenu); // GetSubmenu KillstreakUINew.KSDebugMenu.GetSubmenu // (Final|Native|Protected|HasOutParms|BlueprintCallable) // <Game+0x226e830>
	void UpdateFinished(); // UpdateFinished KillstreakUINew.KSDownloadProgressWidget.UpdateFinished // (Native|Event|Protected|BlueprintEvent) // <Game+0x1962e90>
	void RemoveDurationBarsForNonPawnMods(); // RemoveDurationBarsForNonPawnMods KillstreakUINew.KSDurationBarContainer.RemoveDurationBarsForNonPawnMods // (Final|Native|Protected) // <Game+0x226f410>
	void ShowMessageForTakenDown(None Instigator, None IsElimination); // ShowMessageForTakenDown KillstreakUINew.KSEliminationMessageWidget.ShowMessageForTakenDown // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void SubmitEmailAddress(None EmailAddress); // SubmitEmailAddress KillstreakUINew.KSEmailCollectionWidget.SubmitEmailAddress // (Final|Native|Public|BlueprintCallable) // <Game+0x226f990>
	void SetupTestData(None PlayerXp, None RankedXp, None RogueXp, None ReputationEarned, None PlacementMatchNum, None BattlePassXp, None WeaponMasteryCount, None WeaponMasteryLevels, None CategoryMasteryCanLevel, None MilestonesPerWeapon, None BonusPoints); // SetupTestData KillstreakUINew.KSEMODataFactory.SetupTestData // (Final|Native|Public) // <Game+0x226f6a0>
	void OnEquipAll(); // OnEquipAll KillstreakUINew.KSEquipAllWidget.OnEquipAll // (Final|Native|Public|BlueprintCallable) // <Game+0x2275170>
	None IsValidTab(); // IsValidTab KillstreakUINew.KSTabValidator.IsValidTab // (Native|Public) // <Game+0x1a6b460>
	None GetEventTimeRemaining(); // GetEventTimeRemaining KillstreakUINew.KSEventChallengesModal.GetEventTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x2273cc0>
	void QueueExpDisplays(None ExpInfo); // QueueExpDisplays KillstreakUINew.KSExpDisplayWidget.QueueExpDisplays // (Final|Native|Protected|BlueprintCallable) // <Game+0x2275780>
	void SetTargetValue(None Value); // SetTargetValue KillstreakUINew.KSFloatTickLerpWidgetBase.SetTargetValue // (Final|Native|Public|BlueprintCallable) // <Game+0x2275bd0>
	void OnEOMRewardsReceived(None PlayerRewardsSummary, None ScoreboardStats); // OnEOMRewardsReceived KillstreakUINew.KSFriendDataFactory.OnEOMRewardsReceived // (Final|Native|Protected) // <Game+0x2274e40>
	void ReceiveFubar(None Reason); // ReceiveFubar KillstreakUINew.KSFubarPopupWidget.ReceiveFubar // (Final|Native|Protected) // <Game+0x2275870>
	void UpdateIcon(None Icon); // UpdateIcon KillstreakUINew.KSMapWidgetBase.UpdateIcon // (Final|Native|Protected) // <Game+0x2284b80>
	void UIX_ReportServer(); // UIX_ReportServer KillstreakUINew.KSHUDCommon.UIX_ReportServer // (Final|Native|Public|BlueprintCallable) // <Game+0x2275e50>
	void UIX_ReturnLobby(); // UIX_ReturnLobby KillstreakUINew.KSGameHUDNew.UIX_ReturnLobby // (Final|Native|Public|BlueprintCallable) // <Game+0x2275e70>
	void ToggleTopHUDBar(None bShow); // ToggleTopHUDBar KillstreakUINew.KSGameInfoOverlayBase.ToggleTopHUDBar // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void SetContext(None PromptContext); // SetContext KillstreakUINew.KSGamepadPromptWidget.SetContext // (Final|Native|Public|BlueprintCallable) // <Game+0x2275910>
	void HandleCharacterOverhealChange(None Character); // HandleCharacterOverhealChange KillstreakUINew.KSHealthWidget.HandleCharacterOverhealChange // (Final|Native|Private) // <Game+0x22746b0>
	void CheckForOnShownEvents(); // CheckForOnShownEvents KillstreakUINew.KSHomeScreenWidget.CheckForOnShownEvents // (Final|Native|Protected|BlueprintCallable) // <Game+0x22736c0>
	void HandleLayoutSaved(); // HandleLayoutSaved KillstreakUINew.KSHudEditableWidget.HandleLayoutSaved // (Final|Native|Public) // <Game+0x2279680>
	void UpdateTextOptions(None& NewOptions); // UpdateTextOptions KillstreakUINew.KSSettingsInfoBase.UpdateTextOptions // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x22a85c0>
	void SetStepValue(None InStepValue); // SetStepValue KillstreakUINew.KSHudEditorSettingsInfo.SetStepValue // (Final|Native|Public) // <Game+0x227a590>
	void SetSelectedHudEditableWidget(None NewWidget); // SetSelectedHudEditableWidget KillstreakUINew.KSEditorPropertiesPanel.SetSelectedHudEditableWidget // (Final|Native|Public) // <Game+0x227a510>
	None TryToExit(); // TryToExit KillstreakUINew.KSHudEditor.TryToExit // (Final|Native|Public|BlueprintCallable) // <Game+0x227a780>
	void UpdateHudEditablePosition(None InWidget, None InAbsolutePosition); // UpdateHudEditablePosition KillstreakUINew.KSHudEditorSettings.UpdateHudEditablePosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x227a7b0>
	void PollMatchPhase(); // PollMatchPhase KillstreakUINew.KSHUDStateTracker.PollMatchPhase // (Final|Native|Protected) // <Game+0x2279970>
	None SetInfoActor(None InfoActor); // SetInfoActor KillstreakUINew.KSInfoActorWidgetInterface.SetInfoActor // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x2279f50>
	void UnbindEventFromInspectPlayerChanged(None& Callback); // UnbindEventFromInspectPlayerChanged KillstreakUINew.KSInspectPlayerInterface.UnbindEventFromInspectPlayerChanged // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void TasksChanged(); // TasksChanged KillstreakUINew.KSJobSelectorWidget.TasksChanged // (Native|Event|Protected|BlueprintEvent) // <Game+0x22737f0>
	void BansChanged(); // BansChanged KillstreakUINew.KSJobSelectBanWidget.BansChanged // (Native|Event|Protected|BlueprintEvent) // <Game+0x195d6b0>
	void CaptainTaskChanged(); // CaptainTaskChanged KillstreakUINew.KSJobSelectCaptainStatusWidget.CaptainTaskChanged // (Native|Event|Protected|BlueprintEvent) // <Game+0x195d6b0>
	None SortActiveChoiceWidgets(None LHS, None RHS); // SortActiveChoiceWidgets KillstreakUINew.KSJobSelectChoiceGridWidget.SortActiveChoiceWidgets // (Native|Event|Public|BlueprintEvent|Const) // <Game+0x227a610>
	void SetJob(None Job); // SetJob KillstreakUINew.KSJobSelectionChoiceWidget.SetJob // (Final|Native|Public|BlueprintCallable) // <Game+0x227a070>
	void SetPlayerByPlayerState(None InPlayerState); // SetPlayerByPlayerState KillstreakUINew.KSJobSelectionPlayerStatusWidget.SetPlayerByPlayerState // (Final|Native|Public|BlueprintCallable) // <Game+0x227a390>
	None GetJobItems(); // GetJobItems KillstreakUINew.KSJobSelectionWidget.GetJobItems // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // <Game+0x2279390>
	None GetCountdownFormattedText(None SecondsRemaining, None bShowHours, None bShowTenthsOfSecond, None bAllowNegative); // GetCountdownFormattedText KillstreakUINew.KSJobSelectOverallStatusWidget.GetCountdownFormattedText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x227db40>
	void ShowPlayerAndMessage(None PlayerState, None& Message); // ShowPlayerAndMessage KillstreakUINew.KSKillCardWidget.ShowPlayerAndMessage // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void TransitionCamera(None CameraTag, None BlendTime); // TransitionCamera KillstreakUINew.KSLobbyHUDNew.TransitionCamera // (Final|Exec|Native|Public|BlueprintCallable) // <Game+0x227fb70>
	void SetupRankedManager(); // SetupRankedManager KillstreakUINew.KSLobbyNameplateWidget.SetupRankedManager // (Final|Native|Public|BlueprintCallable) // <Game+0x227f500>
	void OnStoreVendorsLoaded(None GroupId, None& VendorIds); // OnStoreVendorsLoaded KillstreakUINew.KSLoginInventoryCheck.OnStoreVendorsLoaded // (Final|Native|Protected|HasOutParms) // <Game+0x227ef50>
	void ProcessAccountRewards(); // ProcessAccountRewards KillstreakUINew.KSLoginProcessRewards.ProcessAccountRewards // (Final|Native|Protected|BlueprintCallable) // <Game+0x227f050>
	void UIX_AttemptClaimReward(); // UIX_AttemptClaimReward KillstreakUINew.KSLoginRewardsModal.UIX_AttemptClaimReward // (Final|Native|Public|BlueprintCallable) // <Game+0x227fc40>
	None GetAmmoState(); // GetAmmoState KillstreakUINew.KSLowAmmoAlertWidget.GetAmmoState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x227d940>
	None GetMapIconWidget(); // GetMapIconWidget KillstreakUINew.KSMapIconWidgetPool.GetMapIconWidget // (Final|Native|Public) // <Game+0x2283290>
	None GetScreenPositionForMarker(None TargetLocation, None AnchorHeight, None MarginX, None MarginY, None& ScreenLocation); // GetScreenPositionForMarker KillstreakUINew.KSMarkerDisplayBase.GetScreenPositionForMarker // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x2283550>
	None SetCallbacks(None GetIsSelected, None Select, None ShouldShowPlayer, None Close); // SetCallbacks KillstreakUINew.KSDataIndividualInviteSetup.SetCallbacks // (Final|Native|Public|BlueprintCallable) // <Game+0x22847c0>
	None SetCallbacks(None Select, None ShouldShowPlayer, None Cancel); // SetCallbacks KillstreakUINew.KSDataBatchInviteSetup.SetCallbacks // (Final|Native|Public|BlueprintCallable) // <Game+0x2284660>
	None UpdateRouteData(); // UpdateRouteData KillstreakUINew.KSMassInviteModal.UpdateRouteData // (Final|Native|Protected|BlueprintCallable) // <Game+0x2284d90>
	void OnInvitationExpired(); // OnInvitationExpired KillstreakUINew.KSMatchInvitationModal.OnInvitationExpired // (Final|Native|Private) // <Game+0x2284110>
	void UpdateRoundBaseScore(None pGameState); // UpdateRoundBaseScore KillstreakUINew.KSMatchResult.UpdateRoundBaseScore // (Final|Native|Protected|BlueprintCallable) // <Game+0x2284d10>
	void UIX_SkipEntry(); // UIX_SkipEntry KillstreakUINew.KSMediaPlayerWidget.UIX_SkipEntry // (Final|Native|Public|BlueprintCallable) // <Game+0x2284b60>
	None GetMilestoneEntriesForWeapon(None Weapon, None& OutMilestoneEntries); // GetMilestoneEntriesForWeapon KillstreakUINew.KSMilestoneCompletedSummary.GetMilestoneEntriesForWeapon // (Final|Native|Public|HasOutParms) // <Game+0x22832c0>
	void StartAnimSequence(); // StartAnimSequence KillstreakUINew.KSMilestoneCompletedScreen.StartAnimSequence // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void UpdateMapMaterialTransform(None MapMaterial, None NormalizedX, None NormalizedY, None Rotation, None Scale); // UpdateMapMaterialTransform KillstreakUINew.KSMinimapWidgetBase.UpdateMapMaterialTransform // (Final|Native|Public|BlueprintCallable) // <Game+0x2289b00>
	void ViewModelByName(None WorldContextObject, None InTargetItem, None InDataTable); // ViewModelByName KillstreakUINew.KSModelViewer.ViewModelByName // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x2289fc0>
	void OnDetectChanged(None DetectEnemyModInst, None bIsDetectingEnemy); // OnDetectChanged KillstreakUINew.KSModWidget_DetectEnemy.OnDetectChanged // (Final|Native|Private) // <Game+0x2289360>
	None RemoveModInstance(None InInstance); // RemoveModInstance KillstreakUINew.KSModWidgetInterface.RemoveModInstance // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x2279f50>
	void UnselectNavTab(); // UnselectNavTab KillstreakUINew.KSNavTabWidget.UnselectNavTab // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x2289ae0>
	None ShouldShowPanel(None Panel); // ShouldShowPanel KillstreakUINew.KSNewsRotatorWidget.ShouldShowPanel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x2289820>
	None IsNewsAvailable(); // IsNewsAvailable KillstreakUINew.KSNewStartMenuWidget.IsNewsAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x2289310>
	void UIX_ClaimTutorialActivity(); // UIX_ClaimTutorialActivity KillstreakUINew.KSNPEDataFactory.UIX_ClaimTutorialActivity // (Final|Native|Public|BlueprintCallable) // <Game+0x22899a0>
	void SetFocusToView(); // SetFocusToView KillstreakUINew.KSOverlayTabHubBase.SetFocusToView // (Final|Native|Protected|BlueprintCallable) // <Game+0x2289750>
	void SetSelectedQueueId(None QueueId); // SetSelectedQueueId KillstreakUINew.KSPartyDataFactory.SetSelectedQueueId // (Final|Native|Public|BlueprintCallable) // <Game+0x2289770>
	void RefreshFromPartyData(); // RefreshFromPartyData KillstreakUINew.KSPartyManagerWidgetBase.RefreshFromPartyData // (Final|Native|Protected|BlueprintCallable) // <Game+0x2289550>
	void SetCursorLerping(None bLerping); // SetCursorLerping KillstreakUINew.KSPerkTreeBase.SetCursorLerping // (Final|Native|Protected|BlueprintCallable) // <Game+0x228e900>
	void SetViewByState(None EdgeInfo); // SetViewByState KillstreakUINew.KSPerkTreeEdgeBase.SetViewByState // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void SetNodeState(None NewNodeState); // SetNodeState KillstreakUINew.KSPerkTreeNodeBase.SetNodeState // (Final|Native|Public|BlueprintCallable) // <Game+0x228e990>
	None SortPlayerData(None LHS, None RHS); // SortPlayerData KillstreakUINew.KSPersistentDataTeamBarWidget.SortPlayerData // (Native|Event|Protected|BlueprintEvent|Const) // <Game+0x228eac0>
	void SetActiveAmmoWidget(None NewWidgetClass, None NewWeapon); // SetActiveAmmoWidget KillstreakUINew.KSPlayerAmmoLoaderWidget.SetActiveAmmoWidget // (Native|Event|Protected|BlueprintEvent) // <Game+0x228e830>
	void GetSortedRecentlyProgressedData(None AwardData, None& RecentlyProgressedData); // GetSortedRecentlyProgressedData KillstreakUINew.KSPlayerAwardsPanelWidget.GetSortedRecentlyProgressedData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game+0x228d7d0>
	void View_SetPlayer(None playerinfo, None PlayerStatus, None IsPortalFriend, None IsPending); // View_SetPlayer KillstreakUINew.KSPlayerCardModuleBase.View_SetPlayer // (Native|Public|BlueprintCallable) // <Game+0x228ec50>
	void GetItemsForSlot(None SlotType, None& CosmeticItems); // GetItemsForSlot KillstreakUINew.KSPlayerCosmeticWidget.GetItemsForSlot // (Final|Native|Protected|HasOutParms|BlueprintCallable) // <Game+0x228d380>
	None ShouldDisplayRankedLevel(); // ShouldDisplayRankedLevel KillstreakUINew.KSPlayerDataFactory.ShouldDisplayRankedLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x228ea90>
	void View_SetResidualValue(None PercentValue); // View_SetResidualValue KillstreakUINew.KSPlayerHealthSegmentBase.View_SetResidualValue // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void View_SetResidualPercent(None ResidualPercent); // View_SetResidualPercent KillstreakUINew.KSPlayerHealthWidgetBase.View_SetResidualPercent // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	None IsSelf(); // IsSelf KillstreakUINew.JobSelectionEntryDetails.IsSelf // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x228e4f0>
	None UIX_RequestJobSelect(None JobEntry, None RequestedState); // UIX_RequestJobSelect KillstreakUINew.KSPlayerJobSelectWidgetBase.UIX_RequestJobSelect // (Final|Native|Public|BlueprintCallable) // <Game+0x228eb90>
	None QueryPlayersByNameWithProfiles(None& PlayerName, None OnReponse, None& OutHandle); // QueryPlayersByNameWithProfiles KillstreakUINew.KSPlayerQueryDataFactory.QueryPlayersByNameWithProfiles // (Final|Native|Public|HasOutParms|BlueprintCallable) // <Game+0x2293390>
	void TriggerDisplayUpdate(None ForceUpdate); // TriggerDisplayUpdate KillstreakUINew.KSPlayerShopWidgetBase.TriggerDisplayUpdate // (Final|Native|Public|BlueprintCallable) // <Game+0x2293ca0>
	void ClearSearchResults(); // ClearSearchResults KillstreakUINew.KSPlayerWhoDataFactory.ClearSearchResults // (Final|Native|Public|BlueprintCallable) // <Game+0x2291dc0>
	void ViewShowTeamCelebration(None TeamState); // ViewShowTeamCelebration KillstreakUINew.KSPointObjectiveMarkerWidget.ViewShowTeamCelebration // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	None GetPortalOfferItems(); // GetPortalOfferItems KillstreakUINew.KSPortalOffersWidget.GetPortalOfferItems // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // <Game+0x2292380>
	void SetPriceTag(None StoreItemPrice, None StoreItem); // SetPriceTag KillstreakUINew.KSPriceTag.SetPriceTag // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	None GetActiveJobIds(); // GetActiveJobIds KillstreakUINew.KSProfileRogueStatsWidget.GetActiveJobIds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x2291eb0>
	void SetPlayerProgressionData(None PlayerProgression); // SetPlayerProgressionData KillstreakUINew.KSProgressionTallyWidget.SetPlayerProgressionData // (Final|Native|Public|BlueprintCallable) // <Game+0x2293750>
	void SetDeltaAnimationParams(None BasePercent, None DeltaPercent, None AnimTime); // SetDeltaAnimationParams KillstreakUINew.KSProgressMeterWidgetBase.SetDeltaAnimationParams // (Final|Native|Protected|BlueprintCallable) // <Game+0x22935c0>
	None TryChangePurchaseQuantity(None QuantityChangeAmount); // TryChangePurchaseQuantity KillstreakUINew.KSPurchaseConfirmationWidget.TryChangePurchaseQuantity // (Final|Native|Protected|BlueprintCallable) // <Game+0x2293d30>
	void SetupBindings(); // SetupBindings KillstreakUINew.KSPurchaseModal.SetupBindings // (Final|Native|Public|BlueprintCallable) // <Game+0x229a160>
	void StopDisplayingRetrying(); // StopDisplayingRetrying KillstreakUINew.KSQueueDataFactory.StopDisplayingRetrying // (Final|Native|Protected) // <Game+0x229a490>
	void QueueMessage(None Message); // QueueMessage KillstreakUINew.KSQueuedMessageWidget.QueueMessage // (Final|Native|Protected|BlueprintCallable) // <Game+0x2299af0>
	void UpdateQueueSelection(); // UpdateQueueSelection KillstreakUINew.KSQueueWidgetBase.UpdateQueueSelection // (Native|Protected) // <Game+0x2265260>
	void OnUpdateQueueTimerState(None State); // OnUpdateQueueTimerState KillstreakUINew.KSQueueTimerWidgetBase.OnUpdateQueueTimerState // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void UpdateQueuePermissions(); // UpdateQueuePermissions KillstreakUINew.KSQuickPlay.UpdateQueuePermissions // (Final|Native|Protected) // <Game+0x229a5f0>
	void UpdateState(); // UpdateState KillstreakUINew.KSQuickPlayWidget.UpdateState // (Final|Native|Protected|BlueprintCallable) // <Game+0x229ebb0>
	void UpdateLastSelectedIndex(None NewIndex); // UpdateLastSelectedIndex KillstreakUINew.KSRadialSelectionWidgetBase.UpdateLastSelectedIndex // (Final|Native|Protected|BlueprintCallable) // <Game+0x229eab0>
	None FormatProgressionData(None ProgressionData); // FormatProgressionData KillstreakUINew.KSRankChangeWidget.FormatProgressionData // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // <Game+0x229d760>
	void RedeemCode(None Code); // RedeemCode KillstreakUINew.KSRedeemCodeScreenBase.RedeemCode // (Final|Native|Public|BlueprintCallable) // <Game+0x229e660>
	void DisplayLocked(None bLocked); // DisplayLocked KillstreakUINew.KSRelatedRogueEntry.DisplayLocked // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void PopulateForWeaponOwnership(None WeaponAsset); // PopulateForWeaponOwnership KillstreakUINew.KSRelatedRoguesGroup.PopulateForWeaponOwnership // (Final|Native|Public) // <Game+0x229e5e0>
	void UpdateReticleOffset(None OffsetFromCenterScreen); // UpdateReticleOffset KillstreakUINew.KSReticleWidgetBase.UpdateReticleOffset // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void UpdateFromRewardTier(None ActivityTier, None ActivityCount); // UpdateFromRewardTier KillstreakUINew.KSRewardsTrackMeterSegmentBase.UpdateFromRewardTier // (Final|Native|Public|BlueprintCallable) // <Game+0x229e910>
	void UpdateMaxPageCount(None RewardCount); // UpdateMaxPageCount KillstreakUINew.KSRewardsTrackWidgetBase.UpdateMaxPageCount // (Final|Native|Protected|BlueprintCallable) // <Game+0x229eb30>
	void ShowGuidedCallout(None CalloutName); // ShowGuidedCallout KillstreakUINew.KSRogueDetailsWidget.ShowGuidedCallout // (Final|Native|Protected|BlueprintCallable) // <Game+0x229e890>
	void GetSectionData(None ActivityInstance, None& SectionData); // GetSectionData KillstreakUINew.KSRogueMasteryWidget.GetSectionData // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game+0x22a2990>
	None GetViewFraction(); // GetViewFraction KillstreakUINew.KSScrollBox.GetViewFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x22a2e80>
	void OnShowSettingsWidget(None SettingsWidget); // OnShowSettingsWidget KillstreakUINew.KSSettingsContainer.OnShowSettingsWidget // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	None GetSettingName(); // GetSettingName KillstreakUINew.KSSettingsContainerConfigAsset.GetSettingName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x22a2db0>
	None GetHeading(); // GetHeading KillstreakUINew.KSSettingsSectionConfigAsset.GetHeading // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x22a27a0>
	None GetPageName(); // GetPageName KillstreakUINew.KSSettingsPageConfigAsset.GetPageName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x22a27a0>
	None SetSelectedRegion(None SiteId); // SetSelectedRegion KillstreakUINew.KSSettingsDataFactory.SetSelectedRegion // (Final|Native|Public|BlueprintCallable) // <Game+0x22a3300>
	void OnShowContainer(None SettingsContainer); // OnShowContainer KillstreakUINew.KSSettingsGroup.OnShowContainer // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void OnSettingsReceivedFromPlayerAccount(); // OnSettingsReceivedFromPlayerAccount KillstreakUINew.KSSettingsInfo_Binding.OnSettingsReceivedFromPlayerAccount // (Final|Native|Private) // <Game+0x22a7680>
	void OnSettingSaved(); // OnSettingSaved KillstreakUINew.KSSettingsInfo_Brightness.OnSettingSaved // (Final|Native|Protected|BlueprintCallable) // <Game+0x22a7600>
	void OnSettingSaved(); // OnSettingSaved KillstreakUINew.KSSettingsInfo_ConsolePerformanceMode.OnSettingSaved // (Final|Native|Protected|BlueprintCallable) // <Game+0x22a7620>
	void OnSettingSaved(); // OnSettingSaved KillstreakUINew.KSSettingsInfo_Generic.OnSettingSaved // (Final|Native|Protected|BlueprintCallable) // <Game+0x22a7640>
	void OnSettingSaved(); // OnSettingSaved KillstreakUINew.KSSettingsInfo_MobilePerformanceMode.OnSettingSaved // (Final|Native|Protected|BlueprintCallable) // <Game+0x22a7660>
	void OnPreferredSiteUpdated(); // OnPreferredSiteUpdated KillstreakUINew.KSSettingsInfo_Region.OnPreferredSiteUpdated // (Final|Native|Protected) // <Game+0x22aca70>
	void OnScreenResolutionSaved(None SavedScreenResolution); // OnScreenResolutionSaved KillstreakUINew.KSSettingsInfo_Resolution.OnScreenResolutionSaved // (Final|Native|Private|HasDefaults) // <Game+0x22acbd0>
	void RevertSettings(); // RevertSettings KillstreakUINew.KSSettingsMenu.RevertSettings // (Event|Protected|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void OnShowSection(None SettingsSection); // OnShowSection KillstreakUINew.KSSettingsPage.OnShowSection // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void HandleOnValueChanged(None ChangedExternally); // HandleOnValueChanged KillstreakUINew.KSSettingsPreview.HandleOnValueChanged // (Final|Native|Private) // <Game+0x22ac690>
	void OnShowGroup(None SettingsGroup); // OnShowGroup KillstreakUINew.KSSettingsSection.OnShowGroup // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	void SaveSetting(); // SaveSetting KillstreakUINew.KSSettingsWidget.SaveSetting // (Final|Native|Public|BlueprintCallable) // <Game+0x22acd80>
	None GetHitTarget(); // GetHitTarget KillstreakUINew.KSShopItemButtonBase.GetHitTarget // (Event|Protected|BlueprintEvent|Const) // <Game+0x260f470>
	void HandleNavigateRight(); // HandleNavigateRight KillstreakUINew.KSSideNavigationOverlay.HandleNavigateRight // (Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void UpdateListData(); // UpdateListData KillstreakUINew.KSSocialPanelBase.UpdateListData // (Native|Protected) // <Game+0x2278e70>
	void RepopulateAll(); // RepopulateAll KillstreakUINew.KSSocialOverlay.RepopulateAll // (Final|Native|Private|BlueprintCallable) // <Game+0x22acd40>
	void OnSearchTimeout(); // OnSearchTimeout KillstreakUINew.KSSocialSearchPanel.OnSearchTimeout // (Final|Native|Private) // <Game+0x22acc50>
	void SortFriendData(None& Friends); // SortFriendData KillstreakUINew.KSSocialWidgetBase.SortFriendData // (Final|Native|Protected|HasOutParms) // <Game+0x22acf40>
	None SortChildrenComparator__DelegateSignature(None LHS, None RHS); // SortChildrenComparator__DelegateSignature KillstreakUINew.KSSortableGridPanel.SortChildrenComparator__DelegateSignature // (Public|Delegate) // <Game+0x260f470>
	None SortChildrenComparator__DelegateSignature(None LHS, None RHS); // SortChildrenComparator__DelegateSignature KillstreakUINew.KSSortableVerticalBox.SortChildrenComparator__DelegateSignature // (Public|Delegate) // <Game+0x260f470>
	None IsOnSale(); // IsOnSale KillstreakUINew.KSStorePanelItem.IsOnSale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x22b2430>
	None HasUnseenItems(); // HasUnseenItems KillstreakUINew.KSStoreSectionItem.HasUnseenItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x22b2370>
	None HasUnseenItems(); // HasUnseenItems KillstreakUINew.KSStoreSection.HasUnseenItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x22b2340>
	void OnVendorsReceived(None GroupId, None& VendorIds); // OnVendorsReceived KillstreakUINew.KSStoreWidget.OnVendorsReceived // (Event|Public|HasOutParms|BlueprintEvent) // <Game+0x260f470>
	void UpdateCharge(None ModInst); // UpdateCharge KillstreakUINew.KSTargetMarkerWidget.UpdateCharge // (Final|Native|Public) // <Game+0x22b3410>
	void Whisper(None PlayerName, None Message); // Whisper KillstreakUINew.KSTextChatWidget.Whisper // (Final|Native|Protected) // <Game+0x22b3490>
	void TestDisplayChallengeNotification(); // TestDisplayChallengeNotification KillstreakUINew.KSToastNotificationWidgetBase.TestDisplayChallengeNotification // (Final|Native|Protected) // <Game+0xae0850>
	void UnbindEventFromTopBarStatusIconShowingChanged(None& Callback); // UnbindEventFromTopBarStatusIconShowingChanged KillstreakUINew.KSTopBarStatusIconInterface.UnbindEventFromTopBarStatusIconShowingChanged // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void UpdateQuickMeleeRadius(); // UpdateQuickMeleeRadius KillstreakUINew.KSTouchHudWidget.UpdateQuickMeleeRadius // (Final|Native|Public|BlueprintCallable) // <Game+0x22b8390>
	void UninitializeWidget(); // UninitializeWidget KillstreakUINew.KSTreeView.UninitializeWidget // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game+0x22b8310>
	None UIX_ReportPlayer(None WorldContextObject, None& Params); // UIX_ReportPlayer KillstreakUINew.KSUIBlueprintFunctionLibrary.UIX_ReportPlayer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x22b81f0>
	None GetVendorIDFromEnum(None VendorType); // GetVendorIDFromEnum KillstreakUINew.CommonVendorHelper.GetVendorIDFromEnum // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game+0x22b6e80>
	void UpdateLabelPosition(); // UpdateLabelPosition KillstreakUINew.KSViewedItemLabel.UpdateLabelPosition // (Final|Native|Protected|BlueprintCallable) // <Game+0x22bccf0>
	void PrimeDamageNumbersWidgetPool(); // PrimeDamageNumbersWidgetPool KillstreakUINew.KSViewedPawnDamageDisplay.PrimeDamageNumbersWidgetPool // (Final|Native|Protected|BlueprintCallable) // <Game+0x22bc7f0>
	void SetDisplayInformation(None InTargetActor, None InTetherToEventLocation, None InDamageAmount, None InIsSpecialDamage, None InDamageColors, None InIsLethal, None InIsHeadshot, None InDelayWindow, None InStackWait, None InArmorHit, None InDamageReduced, None InDamageResisted, None InDamageShielded); // SetDisplayInformation KillstreakUINew.DamageNumberDisplayWidget.SetDisplayInformation // (Final|Native|Public) // <Game+0x22bc900>
	void OnUpdatedPawnInventorySlot(None InventorySlot); // OnUpdatedPawnInventorySlot KillstreakUINew.KSViewedPawnInventoryWidget.OnUpdatedPawnInventorySlot // (Native|Event|Public|BlueprintEvent) // <Game+0x22bc5f0>
	void OnViewedPawnModAdded(None Mod, None ModInstance, None bFromPawnChange); // OnViewedPawnModAdded KillstreakUINew.KSViewedPawnModsWidget.OnViewedPawnModAdded // (Final|Native|Private) // <Game+0x22bc6a0>
	None DoesLocalSettingApply(None HUD); // DoesLocalSettingApply KillstreakUINew.KSViewRedirector_LocalSetting.DoesLocalSettingApply // (Native|Event|Public|BlueprintEvent|Const) // <Game+0x22bb870>
	void OnVoiceParticipantUpdated(None AccountId, None bIsTalking, None bIsMuted); // OnVoiceParticipantUpdated KillstreakUINew.KSVoiceActivityWidget.OnVoiceParticipantUpdated // (Event|Protected|BlueprintEvent) // <Game+0x260f470>
	None RedeemVouchers(None VoucherItems); // RedeemVouchers KillstreakUINew.KSVoucherAcquisition.RedeemVouchers // (Final|Native|Public|BlueprintCallable) // <Game+0x22bc810>
	void OnWeaponCategorySelected(); // OnWeaponCategorySelected KillstreakUINew.KSWeaponCategoryButton.OnWeaponCategorySelected // (Final|Native|Public|BlueprintCallable) // <Game+0x22bc7b0>
	void RefreshWidgetNavigation(); // RefreshWidgetNavigation KillstreakUINew.KSWeaponCategoryScreen.RefreshWidgetNavigation // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void SetOwningWeaponComponent(None InWeaponComponent); // SetOwningWeaponComponent KillstreakUINew.KSWeaponComponentWidget.SetOwningWeaponComponent // (Final|Native|Public|BlueprintCallable) // <Game+0x22c1950>
	void StopReloading(); // StopReloading KillstreakUINew.KSWeaponComponentAmmoWidget.StopReloading // (Native|Event|Protected|BlueprintEvent) // <Game+0x2265260>
	void PopulateFromWeaponAsset(None WeaponAsset, None FromSideNav); // PopulateFromWeaponAsset KillstreakUINew.KSWeaponDetailScreen.PopulateFromWeaponAsset // (Final|Native|Public) // <Game+0x22c1410>
	void HandleWeaponCategoryPreview(None WeaponCategory); // HandleWeaponCategoryPreview KillstreakUINew.KSWeaponHubBase.HandleWeaponCategoryPreview // (Final|Native|Public) // <Game+0x22c0ef0>
	None GetWeaponsForCategory(None WeaponCategoryTag, None JobItem); // GetWeaponsForCategory KillstreakUINew.KSWeaponHubHelper.GetWeaponsForCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game+0x22c0a10>
	void SwapEntryToTop(None InMasteryAsset); // SwapEntryToTop KillstreakUINew.KSWeaponMasteryLevelUpSummary.SwapEntryToTop // (Final|Native|Public|BlueprintCallable) // <Game+0x22c1a70>
	void ShowNextEntry(); // ShowNextEntry KillstreakUINew.KSWeaponMasteryLevelUpScreen.ShowNextEntry // (Final|Native|Public) // <Game+0x22c1a50>
	void UpdateReactiveStateDescription(); // UpdateReactiveStateDescription KillstreakUINew.KSWeaponMasteryRewardsScreen.UpdateReactiveStateDescription // (Final|Native|Public) // <Game+0x22c1b80>
	void PopulateFromWeaponAsset(None WeaponAsset); // PopulateFromWeaponAsset KillstreakUINew.KSWeaponMilestoneDisplay.PopulateFromWeaponAsset // (Final|Native|Public) // <Game+0x22c1560>
	void PopulateFromMilestoneActivity(None MilestoneInstance); // PopulateFromMilestoneActivity KillstreakUINew.KSWeaponMilestoneEntry.PopulateFromMilestoneActivity // (Final|Native|Public) // <Game+0x22c1350>
	void SetWeaponAsset(None InWeaponAsset); // SetWeaponAsset KillstreakUINew.KSWeaponProgressButton.SetWeaponAsset // (Final|Native|Public|BlueprintCallable) // <Game+0x22c19d0>
	void PopulateProgressReward(None ProgressInstance); // PopulateProgressReward KillstreakUINew.KSWeaponProgressMeter.PopulateProgressReward // (Final|Native|Protected) // <Game+0x22c64e0>
	void UpdateStatCount(None NewStatCount); // UpdateStatCount KillstreakUINew.KSWeaponStatsPanel.UpdateStatCount // (Final|Native|Public) // <Game+0x22c6c30>
	void UpdateWhatsNewPanels(None JsonName); // UpdateWhatsNewPanels KillstreakUINew.KSWhatsNewModal.UpdateWhatsNewPanels // (Final|Native|Protected) // <Game+0x22c6cb0>
	void UpdateReactiveStateDescription(); // UpdateReactiveStateDescription KillstreakUINew.KSWrapCustomizationScreen.UpdateReactiveStateDescription // (Final|Native|Public) // <Game+0x22c6b90>
	void PopulateEntry(None WeaponAttachment, None StoreItem, None IsEquipped); // PopulateEntry KillstreakUINew.KSWrapSelectionEntry.PopulateEntry // (Final|Native|Public) // <Game+0x22c6190>
	void StopAnimation(None AnimName); // StopAnimation KillstreakUINew.TickAnimationManager.StopAnimation // (Final|Native|Public) // <Game+0x22c77d0>
	void GetPreviewValue(None& Value); // GetPreviewValue WBP_SettingsPreview_Reticle.WBP_SettingsPreview_Reticle_C.GetPreviewValue // (Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure) // <Game+0x260f470>
	None NavigateConfirmPressed(); // NavigateConfirmPressed WBP_Challenge_Renderer.WBP_Challenge_Renderer_C.NavigateConfirmPressed // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Sub_Hero_ABP_Zipline_AnimGraphNode_TwoWayBlend_DDE3AA1946C4264B5A59E0B1BADCBADC(); // EvaluateGraphExposedInputs_ExecuteUbergraph_Sub_Hero_ABP_Zipline_AnimGraphNode_TwoWayBlend_DDE3AA1946C4264B5A59E0B1BADCBADC Sub_Hero_ABP_Zipline.Sub_Hero_ABP_Zipline_C.EvaluateGraphExposedInputs_ExecuteUbergraph_Sub_Hero_ABP_Zipline_AnimGraphNode_TwoWayBlend_DDE3AA1946C4264B5A59E0B1BADCBADC // (Native|Public) // <Game+0x1952690>
	void OnCamModFinished(); // OnCamModFinished CamMod_Master.CamMod_Master_C.OnCamModFinished // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void ClearListFocus(); // ClearListFocus WBP_Social_Search_Tab.WBP_Social_Search_Tab_C.ClearListFocus // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void ExportToDisk(None Texture, None Filename, None& Options); // ExportToDisk ImageWriteQueue.ImageWriteBlueprintLibrary.ExportToDisk // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x2919a60>
	void Construct(); // Construct WBP_WeaponSideNavigationOverlay.WBP_WeaponSideNavigationOverlay_C.Construct // (BlueprintCosmetic|Event|Public|BlueprintEvent) // <Game+0x260f470>
	void Set Num Segments(None NumSegments); // Set Num Segments PlayerHealthMeterPadding.PlayerHealthMeterPadding_C.Set Num Segments // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void SetPreviewIndex(None Index, None& Success); // SetPreviewIndex WBP_SettingsDropdown.WBP_SettingsDropdown_C.SetPreviewIndex // (Public|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void OnGamepadItemHover(None Item, None Widget); // OnGamepadItemHover WBP_Acquisition.WBP_Acquisition_C.OnGamepadItemHover // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void SetSkipAssigningGamepadToPlayer1(None bSkipFirstPlayer); // SetSkipAssigningGamepadToPlayer1 EngineSettings.GameMapsSettings.SetSkipAssigningGamepadToPlayer1 // (Final|Native|Public|BlueprintCallable) // <Game+0x2dc3770>
	void StopReconstruction(); // StopReconstruction MRMesh.MeshReconstructorBase.StopReconstruction // (Native|Public|BlueprintCallable) // <Game+0x20b6720>
	void OnMockDataMeshTrackerUpdated__DelegateSignature(None Index, None& Vertices, None& Triangles, None& Normals, None& Confidence); // OnMockDataMeshTrackerUpdated__DelegateSignature MRMesh.MockDataMeshTrackerComponent.OnMockDataMeshTrackerUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // <Game+0x260f470>
	None IsConnected(); // IsConnected MRMesh.MRMeshComponent.IsConnected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3078170>
	None NavigateConfirmPressed(); // NavigateConfirmPressed WBP_SettingsBinding_Clear.WBP_SettingsBinding_Clear_C.NavigateConfirmPressed // (Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void SetActiveButton(None IsActive); // SetActiveButton WBP_NewsRotatorButton.WBP_NewsRotatorButton_C.SetActiveButton // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void UnpinComponent(None ComponentToUnpin); // UnpinComponent AugmentedReality.ARBlueprintLibrary.UnpinComponent // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3087120>
	None GetTrackedGeometry(None& TraceResult); // GetTrackedGeometry AugmentedReality.ARTraceResultLibrary.GetTrackedGeometry // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game+0x3085ed0>
	None ARSaveWorld(None WorldContextObject); // ARSaveWorld AugmentedReality.ARSaveWorldAsyncTaskBlueprintProxy.ARSaveWorld // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x3084610>
	None ARGetCandidateObject(None WorldContextObject, None Location, None Extent); // ARGetCandidateObject AugmentedReality.ARGetCandidateObjectAsyncTaskBlueprintProxy.ARGetCandidateObject // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game+0x30844f0>
	None GetAmbientIntensityLumens(); // GetAmbientIntensityLumens AugmentedReality.ARBasicLightEstimate.GetAmbientIntensityLumens // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3085420>
	None GetTrackingState(); // GetTrackingState AugmentedReality.ARPin.GetTrackingState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3085780>
	None ShouldResetTrackedObjects(); // ShouldResetTrackedObjects AugmentedReality.ARSessionConfig.ShouldResetTrackedObjects // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3087060>
	void SetPreviewImageData(None ImageData); // SetPreviewImageData AugmentedReality.ARSharedWorldGameMode.SetPreviewImageData // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game+0x308c320>
	void K2_OnARWorldMapIsReady(); // K2_OnARWorldMapIsReady AugmentedReality.ARSharedWorldGameState.K2_OnARWorldMapIsReady // (Event|Public|BlueprintEvent) // <Game+0x260f470>
	void ServerMarkReadyForReceiving(); // ServerMarkReadyForReceiving AugmentedReality.ARSharedWorldPlayerController.ServerMarkReadyForReceiving // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game+0x308bf20>
	void SetEnvironmentCaptureProbe(None InCaptureProbe); // SetEnvironmentCaptureProbe AugmentedReality.ARSkyLight.SetEnvironmentCaptureProbe // (Final|Native|Public|BlueprintCallable) // <Game+0x308c1c0>
	None IsTracked(); // IsTracked AugmentedReality.ARTrackedGeometry.IsTracked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x308bef0>
	None GetSubsumedBy(); // GetSubsumedBy AugmentedReality.ARPlaneGeometry.GetSubsumedBy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x20f6aa0>
	None GetEstimateSize(); // GetEstimateSize AugmentedReality.ARTrackedImage.GetEstimateSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // <Game+0x308baf0>
	None GetWorldSpaceEyeTransform(None Eye); // GetWorldSpaceEyeTransform AugmentedReality.ARFaceGeometry.GetWorldSpaceEyeTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x308be40>
	None GetExtent(); // GetExtent AugmentedReality.AREnvironmentCaptureProbe.GetExtent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game+0x308bb30>
	None GetDetectedObject(); // GetDetectedObject AugmentedReality.ARTrackedObject.GetDetectedObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x217f420>
	None GetTrackedPoseData(); // GetTrackedPoseData AugmentedReality.ARTrackedPose.GetTrackedPoseData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x308bde0>
	None GetPhysicalWidth(); // GetPhysicalWidth AugmentedReality.ARCandidateImage.GetPhysicalWidth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x226e3d0>
	void SetFriendlyName(None NewName); // SetFriendlyName AugmentedReality.ARCandidateObject.SetFriendlyName // (Final|Native|Public|BlueprintCallable) // <Game+0x308c240>
	void PreConstruct(None IsDesignTime); // PreConstruct WBP_subscreen_header.WBP_subscreen_header_C.PreConstruct // (BlueprintCosmetic|Event|Public|BlueprintEvent) // <Game+0x260f470>
	void UpdateExternalTrackingHMDPosition(None& ExternalTrackingTransform); // UpdateExternalTrackingHMDPosition HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.UpdateExternalTrackingHMDPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x309cc60>
	void SetTrackingSource(None NewSource); // SetTrackingSource HeadMountedDisplay.MotionControllerComponent.SetTrackingSource // (Final|Native|Public|BlueprintCallable) // <Game+0x309cb00>
	void SetIsControllerMotionTrackingEnabledByDefault(None Enable); // SetIsControllerMotionTrackingEnabledByDefault HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.SetIsControllerMotionTrackingEnabledByDefault // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x309c490>
	None AddNamedDeviceVisualizationComponentBlocking(None Target, None SystemName, None DeviceName, None bManualAttachment, None& RelativeTransform, None& XRDeviceId); // AddNamedDeviceVisualizationComponentBlocking HeadMountedDisplay.XRAssetFunctionLibrary.AddNamedDeviceVisualizationComponentBlocking // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x309a220>
	None AddNamedDeviceVisualizationComponentAsync(None Target, None SystemName, None DeviceName, None bManualAttachment, None& RelativeTransform, None& XRDeviceId, None& NewComponent); // AddNamedDeviceVisualizationComponentAsync HeadMountedDisplay.AsyncTask_LoadXRDeviceVisComponent.AddNamedDeviceVisualizationComponentAsync // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game+0x3099f90>
	void ShowLoadingScreen(); // ShowLoadingScreen HeadMountedDisplay.XRLoadingScreenFunctionLibrary.ShowLoadingScreen // (Final|Native|Static|Public|BlueprintCallable) // <Game+0x309cc40>
	None OnSortRarityDescNameAsc(None LHS, None RHS); // OnSortRarityDescNameAsc WBP_CustomizeBanner.WBP_CustomizeBanner_C.OnSortRarityDescNameAsc // (Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None GetStatValueText(None InWorldContextObject, None InPlayerState, None DescriptorId, None DescriptorString, None ShouldOverwriteValue, None OverwriteValue); // GetStatValueText StatWrapper_Rogue_Revives.StatWrapper_Rogue_Revives_C.GetStatValueText // (Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x260f470>
	void BndEvt__KeyboardBackButton_K2Node_ComponentBoundEvent_2_OnBackButtonClicked__DelegateSignature(); // BndEvt__KeyboardBackButton_K2Node_ComponentBoundEvent_2_OnBackButtonClicked__DelegateSignature WBP_PlayerCustomizeScreen.WBP_PlayerCustomizeScreen_C.BndEvt__KeyboardBackButton_K2Node_ComponentBoundEvent_2_OnBackButtonClicked__DelegateSignature // (BlueprintEvent) // <Game+0x260f470>
	void SetLandscapeMaterialVectorParameterValue(None ParameterName, None Value); // SetLandscapeMaterialVectorParameterValue Landscape.LandscapeProxy.SetLandscapeMaterialVectorParameterValue // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <Game+0x32d99a0>
	void RequestLandscapeUpdate(); // RequestLandscapeUpdate Landscape.LandscapeBlueprintBrushBase.RequestLandscapeUpdate // (Final|Native|Public|BlueprintCallable) // <Game+0xae0850>
	None GetMaterialInstanceDynamic(None InIndex); // GetMaterialInstanceDynamic Landscape.LandscapeComponent.GetMaterialInstanceDynamic // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x32d7a80>
	None GetRenderComponent(); // GetRenderComponent Landscape.LandscapeHeightfieldCollisionComponent.GetRenderComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x32d7b10>
	None GetSplineMeshComponents(); // GetSplineMeshComponents Landscape.LandscapeSplinesComponent.GetSplineMeshComponents // (Final|Native|Public|BlueprintCallable) // <Game+0x32d9790>
	void ProcessPlayerProgression(None PlayerProgression); // ProcessPlayerProgression WBP_ProgressionCardSlot_Reputation.WBP_ProgressionCardSlot_Reputation_C.ProcessPlayerProgression // (Public|HasDefaults|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	void GotoTermsAndConditions(); // GotoTermsAndConditions WBP_EmailCollectionPopup.WBP_EmailCollectionPopup_C.GotoTermsAndConditions // (Public|BlueprintCallable|BlueprintEvent) // <Game+0x260f470>
	None GetStatValueText(None InWorldContextObject, None InPlayerState, None DescriptorId, None DescriptorString, None ShouldOverwriteValue, None OverwriteValue); // GetStatValueText StatWrapper_Rogue_TimePlayed.StatWrapper_Rogue_TimePlayed_C.GetStatValueText // (Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // <Game+0x260f470>
	void K2_TwoBoneIK(None& RootPos, None& JointPos, None& EndPos, None& JointTarget, None& Effector, None& OutJointPos, None& OutEndPos, None bAllowStretching, None StartStretchRatio, None MaxStretchScale); // K2_TwoBoneIK AnimGraphRuntime.KismetAnimationLibrary.K2_TwoBoneIK // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // <Game+0x339ca10>
	void OnNotifyEndReceived(None NotifyName, None& BranchingPointNotifyPayload); // OnNotifyEndReceived AnimGraphRuntime.PlayMontageCallbackProxy.OnNotifyEndReceived // (Final|Native|Protected|HasOutParms) // <Game+0x339cfc0>
	None ToSoftObjectPath(None& InAssetData); // ToSoftObjectPath AssetRegistry.AssetRegistryHelpers.ToSoftObjectPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // <Game+0x357eef0>
	void UseFilterToExcludeAssets(None& AssetDataList, None& Filter); // UseFilterToExcludeAssets AssetRegistry.AssetRegistry.UseFilterToExcludeAssets // (Native|Public|HasOutParms|BlueprintCallable|Const) // <Game+0x357f030>
	None RemoveGameplayTag(None& TagContainer, None Tag); // RemoveGameplayTag GameplayTags.BlueprintGameplayTagLibrary.RemoveGameplayTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game+0x3591690>
	None HasMatchingGameplayTag(None TagToCheck); // HasMatchingGameplayTag GameplayTags.GameplayTagAssetInterface.HasMatchingGameplayTag // (Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game+0x3590830>
};

