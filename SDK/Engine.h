// Enum Engine.ETextGender
enum class ETextGender : uint8_t {
	Masculine = 0,
	Feminine = 1,
	Neuter = 2,
	ETextGender_MAX = 3,
};

// Enum Engine.EFormatArgumentType
enum class EFormatArgumentType : uint8_t {
	Int = 0,
	UInt = 1,
	Float = 2,
	Double = 3,
	Text = 4,
	Gender = 5,
	EFormatArgumentType_MAX = 6,
};

// Enum Engine.EEndPlayReason
enum class EEndPlayReason : uint8_t {
	Destroyed = 0,
	LevelTransition = 1,
	EndPlayInEditor = 2,
	RemovedFromWorld = 3,
	Quit = 4,
	EEndPlayReason_MAX = 5,
};

// Enum Engine.ETickingGroup
enum class ETickingGroup : uint8_t {
	TG_PrePhysics = 0,
	TG_StartPhysics = 1,
	TG_DuringPhysics = 2,
	TG_EndPhysics = 3,
	TG_PostPhysics = 4,
	TG_PostUpdateWork = 5,
	TG_LastDemotable = 6,
	TG_NewlySpawned = 7,
	TG_MAX = 8,
};

// Enum Engine.EComponentCreationMethod
enum class EComponentCreationMethod : uint8_t {
	Native = 0,
	SimpleConstructionScript = 1,
	UserConstructionScript = 2,
	Instance = 3,
	EComponentCreationMethod_MAX = 4,
};

// Enum Engine.ETemperatureSeverityType
enum class ETemperatureSeverityType : uint8_t {
	Unknown = 0,
	Good = 1,
	Bad = 2,
	Serious = 3,
	Critical = 4,
	NumSeverities = 5,
	ETemperatureSeverityType_MAX = 6,
};

// Enum Engine.EPlaneConstraintAxisSetting
enum class EPlaneConstraintAxisSetting : uint8_t {
	Custom = 0,
	X = 1,
	Y = 2,
	Z = 3,
	UseGlobalPhysicsSetting = 4,
	EPlaneConstraintAxisSetting_MAX = 5,
};

// Enum Engine.EInterpToBehaviourType
enum class EInterpToBehaviourType : uint8_t {
	OneShot = 0,
	OneShot_Reverse = 1,
	Loop_Reset = 2,
	PingPong = 3,
	EInterpToBehaviourType_MAX = 4,
};

// Enum Engine.ETeleportType
enum class ETeleportType : uint8_t {
	None = 0,
	TeleportPhysics = 1,
	ResetPhysics = 2,
	ETeleportType_MAX = 3,
};

// Enum Engine.EPlatformInterfaceDataType
enum class EPlatformInterfaceDataType : uint8_t {
	PIDT_None = 0,
	PIDT_Int = 1,
	PIDT_Float = 2,
	PIDT_String = 3,
	PIDT_Object = 4,
	PIDT_Custom = 5,
	PIDT_MAX = 6,
};

// Enum Engine.EMovementMode
enum class EMovementMode : uint8_t {
	MOVE_None = 0,
	MOVE_Walking = 1,
	MOVE_NavWalking = 2,
	MOVE_Falling = 3,
	MOVE_Swimming = 4,
	MOVE_Flying = 5,
	MOVE_Custom = 6,
	MOVE_MAX = 7,
};

// Enum Engine.ENetworkFailure
enum class ENetworkFailure : uint8_t {
	NetDriverAlreadyExists = 0,
	NetDriverCreateFailure = 1,
	NetDriverListenFailure = 2,
	ConnectionLost = 3,
	ConnectionTimeout = 4,
	FailureReceived = 5,
	OutdatedClient = 6,
	OutdatedServer = 7,
	PendingConnectionFailure = 8,
	NetGuidMismatch = 9,
	NetChecksumMismatch = 10,
	ServerConnectionLost = 11,
	SecuritySeedMismatch = 12,
	ENetworkFailure_MAX = 13,
};

// Enum Engine.ETravelFailure
enum class ETravelFailure : uint8_t {
	NoLevel = 0,
	LoadMapFailure = 1,
	InvalidURL = 2,
	PackageMissing = 3,
	PackageVersion = 4,
	NoDownload = 5,
	TravelFailure = 6,
	CheatCommands = 7,
	PendingNetGameCreateFailure = 8,
	CloudSaveFailure = 9,
	ServerTravelFailure = 10,
	ClientTravelFailure = 11,
	ETravelFailure_MAX = 12,
};

// Enum Engine.EScreenOrientation
enum class EScreenOrientation : uint8_t {
	Unknown = 0,
	Portrait = 1,
	PortraitUpsideDown = 2,
	LandscapeLeft = 3,
	LandscapeRight = 4,
	FaceUp = 5,
	FaceDown = 6,
	EScreenOrientation_MAX = 7,
};

// Enum Engine.EApplicationState
enum class EApplicationState : uint8_t {
	Unknown = 0,
	Inactive = 1,
	Background = 2,
	Active = 3,
	EApplicationState_MAX = 4,
};

// Enum Engine.EObjectTypeQuery
enum class EObjectTypeQuery : uint8_t {
	ObjectTypeQuery1 = 0,
	ObjectTypeQuery2 = 1,
	ObjectTypeQuery3 = 2,
	ObjectTypeQuery4 = 3,
	ObjectTypeQuery5 = 4,
	ObjectTypeQuery6 = 5,
	ObjectTypeQuery7 = 6,
	ObjectTypeQuery8 = 7,
	ObjectTypeQuery9 = 8,
	ObjectTypeQuery10 = 9,
	ObjectTypeQuery11 = 10,
	ObjectTypeQuery12 = 11,
	ObjectTypeQuery13 = 12,
	ObjectTypeQuery14 = 13,
	ObjectTypeQuery15 = 14,
	ObjectTypeQuery16 = 15,
	ObjectTypeQuery17 = 16,
	ObjectTypeQuery18 = 17,
	ObjectTypeQuery19 = 18,
	ObjectTypeQuery20 = 19,
	ObjectTypeQuery21 = 20,
	ObjectTypeQuery22 = 21,
	ObjectTypeQuery23 = 22,
	ObjectTypeQuery24 = 23,
	ObjectTypeQuery25 = 24,
	ObjectTypeQuery26 = 25,
	ObjectTypeQuery27 = 26,
	ObjectTypeQuery28 = 27,
	ObjectTypeQuery29 = 28,
	ObjectTypeQuery30 = 29,
	ObjectTypeQuery31 = 30,
	ObjectTypeQuery32 = 31,
	ObjectTypeQuery_MAX = 32,
	EObjectTypeQuery_MAX = 33,
};

// Enum Engine.EDrawDebugTrace
enum class EDrawDebugTrace : uint8_t {
	None = 0,
	ForOneFrame = 1,
	ForDuration = 2,
	Persistent = 3,
	EDrawDebugTrace_MAX = 4,
};

// Enum Engine.ETraceTypeQuery
enum class ETraceTypeQuery : uint8_t {
	TraceTypeQuery1 = 0,
	TraceTypeQuery2 = 1,
	TraceTypeQuery3 = 2,
	TraceTypeQuery4 = 3,
	TraceTypeQuery5 = 4,
	TraceTypeQuery6 = 5,
	TraceTypeQuery7 = 6,
	TraceTypeQuery8 = 7,
	TraceTypeQuery9 = 8,
	TraceTypeQuery10 = 9,
	TraceTypeQuery11 = 10,
	TraceTypeQuery12 = 11,
	TraceTypeQuery13 = 12,
	TraceTypeQuery14 = 13,
	TraceTypeQuery15 = 14,
	TraceTypeQuery16 = 15,
	TraceTypeQuery17 = 16,
	TraceTypeQuery18 = 17,
	TraceTypeQuery19 = 18,
	TraceTypeQuery20 = 19,
	TraceTypeQuery21 = 20,
	TraceTypeQuery22 = 21,
	TraceTypeQuery23 = 22,
	TraceTypeQuery24 = 23,
	TraceTypeQuery25 = 24,
	TraceTypeQuery26 = 25,
	TraceTypeQuery27 = 26,
	TraceTypeQuery28 = 27,
	TraceTypeQuery29 = 28,
	TraceTypeQuery30 = 29,
	TraceTypeQuery31 = 30,
	TraceTypeQuery32 = 31,
	TraceTypeQuery_MAX = 32,
	ETraceTypeQuery_MAX = 33,
};

// Enum Engine.EMoveComponentAction
enum class EMoveComponentAction : uint8_t {
	Move = 0,
	Stop = 1,
	Return = 2,
	EMoveComponentAction_MAX = 3,
};

// Enum Engine.EQuitPreference
enum class EQuitPreference : uint8_t {
	Quit = 0,
	Background = 1,
	EQuitPreference_MAX = 2,
};

// Enum Engine.EMKReplaySampling
enum class EMKReplaySampling : uint8_t {
	Not = 0,
	Net = 1,
	NetOnlyRecording = 2,
	Client = 3,
	ClientOnlyRecording = 4,
	EMKReplaySampling_MAX = 5,
};

// Enum Engine.ENetRole
enum class ENetRole : uint8_t {
	ROLE_None = 0,
	ROLE_SimulatedProxy = 1,
	ROLE_AutonomousProxy = 2,
	ROLE_Authority = 3,
	ROLE_MAX = 4,
};

// Enum Engine.EAttachLocation
enum class EAttachLocation : uint8_t {
	KeepRelativeOffset = 0,
	KeepWorldPosition = 1,
	SnapToTarget = 2,
	SnapToTargetIncludingScale = 3,
	EAttachLocation_MAX = 4,
};

// Enum Engine.EAttachmentRule
enum class EAttachmentRule : uint8_t {
	KeepRelative = 0,
	KeepWorld = 1,
	SnapToTarget = 2,
	EAttachmentRule_MAX = 3,
};

// Enum Engine.EDetachmentRule
enum class EDetachmentRule : uint8_t {
	KeepRelative = 0,
	KeepWorld = 1,
	EDetachmentRule_MAX = 2,
};

// Enum Engine.ENetDormancy
enum class ENetDormancy : uint8_t {
	DORM_Never = 0,
	DORM_Awake = 1,
	DORM_DormantAll = 2,
	DORM_DormantPartial = 3,
	DORM_Initial = 4,
	DORM_MAX = 5,
};

// Enum Engine.EAutoReceiveInput
enum class EAutoReceiveInput : uint8_t {
	Disabled = 0,
	Player0 = 1,
	Player1 = 2,
	Player2 = 3,
	Player3 = 4,
	Player4 = 5,
	Player5 = 6,
	Player6 = 7,
	Player7 = 8,
	EAutoReceiveInput_MAX = 9,
};

// Enum Engine.ESpawnActorCollisionHandlingMethod
enum class ESpawnActorCollisionHandlingMethod : uint8_t {
	Undefined = 0,
	AlwaysSpawn = 1,
	AdjustIfPossibleButAlwaysSpawn = 2,
	AdjustIfPossibleButDontSpawnIfColliding = 3,
	DontSpawnIfColliding = 4,
	ESpawnActorCollisionHandlingMethod_MAX = 5,
};

// Enum Engine.ERotatorQuantization
enum class ERotatorQuantization : uint8_t {
	ByteComponents = 0,
	ShortComponents = 1,
	ERotatorQuantization_MAX = 2,
};

// Enum Engine.EVectorQuantization
enum class EVectorQuantization : uint8_t {
	RoundWholeNumber = 0,
	RoundOneDecimal = 1,
	RoundTwoDecimals = 2,
	CompressedToMinimum = 3,
	EVectorQuantization_MAX = 4,
};

// Enum Engine.EActorUpdateOverlapsMethod
enum class EActorUpdateOverlapsMethod : uint8_t {
	UseConfigDefault = 0,
	AlwaysUpdate = 1,
	OnlyUpdateMovable = 2,
	NeverUpdate = 3,
	EActorUpdateOverlapsMethod_MAX = 4,
};

// Enum Engine.ECameraAnimPlaySpace
enum class ECameraAnimPlaySpace : uint8_t {
	CameraLocal = 0,
	World = 1,
	UserDefined = 2,
	ECameraAnimPlaySpace_MAX = 3,
};

// Enum Engine.EViewTargetBlendFunction
enum class EViewTargetBlendFunction : uint8_t {
	VTBlend_Linear = 0,
	VTBlend_Cubic = 1,
	VTBlend_EaseIn = 2,
	VTBlend_EaseOut = 3,
	VTBlend_EaseInOut = 4,
	VTBlend_MAX = 5,
};

// Enum Engine.ETravelType
enum class ETravelType : uint8_t {
	TRAVEL_Absolute = 0,
	TRAVEL_Partial = 1,
	TRAVEL_Relative = 2,
	TRAVEL_MAX = 3,
};

// Enum Engine.ECollisionChannel
enum class ECollisionChannel : uint8_t {
	ECC_WorldStatic = 0,
	ECC_WorldDynamic = 1,
	ECC_Pawn = 2,
	ECC_Visibility = 3,
	ECC_Camera = 4,
	ECC_PhysicsBody = 5,
	ECC_Vehicle = 6,
	ECC_Destructible = 7,
	ECC_EngineTraceChannel1 = 8,
	ECC_EngineTraceChannel2 = 9,
	ECC_EngineTraceChannel3 = 10,
	ECC_EngineTraceChannel4 = 11,
	ECC_EngineTraceChannel5 = 12,
	ECC_EngineTraceChannel6 = 13,
	ECC_GameTraceChannel1 = 14,
	ECC_GameTraceChannel2 = 15,
	ECC_GameTraceChannel3 = 16,
	ECC_GameTraceChannel4 = 17,
	ECC_GameTraceChannel5 = 18,
	ECC_GameTraceChannel6 = 19,
	ECC_GameTraceChannel7 = 20,
	ECC_GameTraceChannel8 = 21,
	ECC_GameTraceChannel9 = 22,
	ECC_GameTraceChannel10 = 23,
	ECC_GameTraceChannel11 = 24,
	ECC_GameTraceChannel12 = 25,
	ECC_GameTraceChannel13 = 26,
	ECC_GameTraceChannel14 = 27,
	ECC_GameTraceChannel15 = 28,
	ECC_GameTraceChannel16 = 29,
	ECC_GameTraceChannel17 = 30,
	ECC_GameTraceChannel18 = 31,
	ECC_OverlapAll_Deprecated = 32,
	ECC_MAX = 33,
};

// Enum Engine.EControllerAnalogStick
enum class EControllerAnalogStick : uint8_t {
	CAS_LeftStick = 0,
	CAS_RightStick = 1,
	CAS_MAX = 2,
};

// Enum Engine.EDynamicForceFeedbackAction
enum class EDynamicForceFeedbackAction : uint8_t {
	Start = 0,
	Update = 1,
	Stop = 2,
	EDynamicForceFeedbackAction_MAX = 3,
};

// Enum Engine.ECameraType
enum class ECameraType : uint8_t {
	FreeCamera = 0,
	PlayerCamera = 1,
	ECameraType_MAX = 2,
};

// Enum Engine.EReplayViewMode
enum class EReplayViewMode : uint8_t {
	DontUsed = 0,
	Player = 1,
	Follow = 2,
	EReplayViewMode_MAX = 3,
};

// Enum Engine.EFractureSoundType
enum class EFractureSoundType : uint8_t {
	None = 0,
	GlassSmall = 1,
	GlassLarge = 2,
	WoodSmall = 3,
	WoodLarge = 4,
	Rock = 5,
	EFractureSoundType_MAX = 6,
};

// Enum Engine.EMouseLockMode
enum class EMouseLockMode : uint8_t {
	DoNotLock = 0,
	LockOnCapture = 1,
	LockAlways = 2,
	LockInFullscreen = 3,
	EMouseLockMode_MAX = 4,
};

// Enum Engine.EWindowTitleBarMode
enum class EWindowTitleBarMode : uint8_t {
	Overlay = 0,
	VerticalBox = 1,
	EWindowTitleBarMode_MAX = 2,
};

// Enum Engine.TextureFilter
enum class TextureFilter : uint8_t {
	TF_Nearest = 0,
	TF_Bilinear = 1,
	TF_Trilinear = 2,
	TF_Default = 3,
	TF_MAX = 4,
};

// Enum Engine.EInputEvent
enum class EInputEvent : uint8_t {
	IE_Pressed = 0,
	IE_Released = 1,
	IE_Repeat = 2,
	IE_DoubleClick = 3,
	IE_Axis = 4,
	IE_MAX = 5,
};

// Enum Engine.ERelativeTransformSpace
enum class ERelativeTransformSpace : uint8_t {
	RTS_World = 0,
	RTS_Actor = 1,
	RTS_Component = 2,
	RTS_ParentBoneSpace = 3,
	RTS_MAX = 4,
};

// Enum Engine.EComponentMobility
enum class EComponentMobility : uint8_t {
	Static = 0,
	Stationary = 1,
	Movable = 2,
	EComponentMobility_MAX = 3,
};

// Enum Engine.EDetailMode
enum class EDetailMode : uint8_t {
	DM_Low = 0,
	DM_Medium = 1,
	DM_High = 2,
	DM_MAX = 3,
};

// Enum Engine.EAutoPossessAI
enum class EAutoPossessAI : uint8_t {
	Disabled = 0,
	PlacedInWorld = 1,
	Spawned = 2,
	PlacedInWorldOrSpawned = 3,
	EAutoPossessAI_MAX = 4,
};

// Enum Engine.ETimelineLengthMode
enum class ETimelineLengthMode : uint8_t {
	TL_TimelineLength = 0,
	TL_LastKeyFrame = 1,
	TL_MAX = 2,
};

// Enum Engine.ENetworkSmoothingMode
enum class ENetworkSmoothingMode : uint8_t {
	Disabled = 0,
	Linear = 1,
	Exponential = 2,
	Replay = 3,
	ENetworkSmoothingMode_MAX = 4,
};

// Enum Engine.EReflectedAndRefractedRayTracedShadows
enum class EReflectedAndRefractedRayTracedShadows : uint8_t {
	Disabled = 0,
	Hard_shadows = 1,
	Area_shadows = 2,
	EReflectedAndRefractedRayTracedShadows_MAX = 3,
};

// Enum Engine.ETranslucencyType
enum class ETranslucencyType : uint8_t {
	Raster = 0,
	RayTracing = 1,
	ETranslucencyType_MAX = 2,
};

// Enum Engine.EReflectionsType
enum class EReflectionsType : uint8_t {
	ScreenSpace = 0,
	RayTracing = 1,
	EReflectionsType_MAX = 2,
};

// Enum Engine.ERayTracingGlobalIlluminationType
enum class ERayTracingGlobalIlluminationType : uint8_t {
	Disabled = 0,
	BruteForce = 1,
	FinalGather = 2,
	ERayTracingGlobalIlluminationType_MAX = 3,
};

// Enum Engine.EFilmicTonemapperType
enum class EFilmicTonemapperType : uint8_t {
	EngineDefault = 0,
	Disable = 1,
	Enable = 2,
	EFilmicTonemapperType_MAX = 3,
};

// Enum Engine.EAutoExposureMethod
enum class EAutoExposureMethod : uint8_t {
	AEM_Histogram = 0,
	AEM_Basic = 1,
	AEM_Manual = 2,
	AEM_MAX = 3,
};

// Enum Engine.EBloomMethod
enum class EBloomMethod : uint8_t {
	BM_SOG = 0,
	BM_FFT = 1,
	BM_MAX = 2,
};

// Enum Engine.EPhysicalSurface
enum class EPhysicalSurface : uint8_t {
	SurfaceType_Default = 0,
	SurfaceType1 = 1,
	SurfaceType2 = 2,
	SurfaceType3 = 3,
	SurfaceType4 = 4,
	SurfaceType5 = 5,
	SurfaceType6 = 6,
	SurfaceType7 = 7,
	SurfaceType8 = 8,
	SurfaceType9 = 9,
	SurfaceType10 = 10,
	SurfaceType11 = 11,
	SurfaceType12 = 12,
	SurfaceType13 = 13,
	SurfaceType14 = 14,
	SurfaceType15 = 15,
	SurfaceType16 = 16,
	SurfaceType17 = 17,
	SurfaceType18 = 18,
	SurfaceType19 = 19,
	SurfaceType20 = 20,
	SurfaceType21 = 21,
	SurfaceType22 = 22,
	SurfaceType23 = 23,
	SurfaceType24 = 24,
	SurfaceType25 = 25,
	SurfaceType26 = 26,
	SurfaceType27 = 27,
	SurfaceType28 = 28,
	SurfaceType29 = 29,
	SurfaceType30 = 30,
	SurfaceType31 = 31,
	SurfaceType32 = 32,
	SurfaceType33 = 33,
	SurfaceType34 = 34,
	SurfaceType35 = 35,
	SurfaceType36 = 36,
	SurfaceType37 = 37,
	SurfaceType38 = 38,
	SurfaceType39 = 39,
	SurfaceType40 = 40,
	SurfaceType41 = 41,
	SurfaceType42 = 42,
	SurfaceType43 = 43,
	SurfaceType44 = 44,
	SurfaceType45 = 45,
	SurfaceType46 = 46,
	SurfaceType47 = 47,
	SurfaceType48 = 48,
	SurfaceType49 = 49,
	SurfaceType50 = 50,
	SurfaceType51 = 51,
	SurfaceType52 = 52,
	SurfaceType53 = 53,
	SurfaceType54 = 54,
	SurfaceType55 = 55,
	SurfaceType56 = 56,
	SurfaceType57 = 57,
	SurfaceType58 = 58,
	SurfaceType59 = 59,
	SurfaceType60 = 60,
	SurfaceType61 = 61,
	SurfaceType62 = 62,
	SurfaceType_Max = 63,
	EPhysicalSurface_MAX = 64,
};

// Enum Engine.EFastArraySerializerDeltaFlags
enum class EFastArraySerializerDeltaFlags : uint8_t {
	None = 0,
	HasBeenSerialized = 1,
	HasDeltaBeenRequested = 2,
	IsUsingDeltaSerialization = 4,
	EFastArraySerializerDeltaFlags_MAX = 5,
};

// Enum Engine.ERadialImpulseFalloff
enum class ERadialImpulseFalloff : uint8_t {
	RIF_Constant = 0,
	RIF_Linear = 1,
	RIF_MAX = 2,
};

// Enum Engine.EBlendMode
enum class EBlendMode : uint8_t {
	BLEND_Opaque = 0,
	BLEND_Masked = 1,
	BLEND_Translucent = 2,
	BLEND_Additive = 3,
	BLEND_Modulate = 4,
	BLEND_AlphaComposite = 5,
	BLEND_AlphaHoldout = 6,
	BLEND_MAX = 7,
};

// Enum Engine.ERichCurveExtrapolation
enum class ERichCurveExtrapolation : uint8_t {
	RCCE_Cycle = 0,
	RCCE_CycleWithOffset = 1,
	RCCE_Oscillate = 2,
	RCCE_Linear = 3,
	RCCE_Constant = 4,
	RCCE_None = 5,
	RCCE_MAX = 6,
};

// Enum Engine.ERichCurveTangentWeightMode
enum class ERichCurveTangentWeightMode : uint8_t {
	RCTWM_WeightedNone = 0,
	RCTWM_WeightedArrive = 1,
	RCTWM_WeightedLeave = 2,
	RCTWM_WeightedBoth = 3,
	RCTWM_MAX = 4,
};

// Enum Engine.ERichCurveTangentMode
enum class ERichCurveTangentMode : uint8_t {
	RCTM_Auto = 0,
	RCTM_User = 1,
	RCTM_Break = 2,
	RCTM_None = 3,
	RCTM_MAX = 4,
};

// Enum Engine.ERichCurveInterpMode
enum class ERichCurveInterpMode : uint8_t {
	RCIM_Linear = 0,
	RCIM_Constant = 1,
	RCIM_Cubic = 2,
	RCIM_None = 3,
	RCIM_MAX = 4,
};

// Enum Engine.ECollisionEnabled
enum class ECollisionEnabled : uint8_t {
	NoCollision = 0,
	QueryOnly = 1,
	PhysicsOnly = 2,
	QueryAndPhysics = 3,
	ECollisionEnabled_MAX = 4,
};

// Enum Engine.ECollisionResponse
enum class ECollisionResponse : uint8_t {
	ECR_Ignore = 0,
	ECR_Overlap = 1,
	ECR_Block = 2,
	ECR_MAX = 3,
};

// Enum Engine.EWalkableSlopeBehavior
enum class EWalkableSlopeBehavior : uint8_t {
	WalkableSlope_Default = 0,
	WalkableSlope_Increase = 1,
	WalkableSlope_Decrease = 2,
	WalkableSlope_Unwalkable = 3,
	WalkableSlope_Max = 4,
};

// Enum Engine.EDOFMode
enum class EDOFMode : uint8_t {
	Default = 0,
	SixDOF = 1,
	YZPlane = 2,
	XZPlane = 3,
	XYPlane = 4,
	CustomPlane = 5,
	None = 6,
	EDOFMode_MAX = 7,
};

// Enum Engine.ERendererStencilMask
enum class ERendererStencilMask : uint8_t {
	ERSM_Default = 0,
	ERSM_256 = 1,
	ERSM_2 = 2,
	ERSM_3 = 3,
	ERSM_5 = 4,
	ERSM_9 = 5,
	ERSM_17 = 6,
	ERSM_33 = 7,
	ERSM_65 = 8,
	ERSM_129 = 9,
	ERSM_MAX = 10,
};

// Enum Engine.ESleepFamily
enum class ESleepFamily : uint8_t {
	Normal = 0,
	Sensitive = 1,
	Custom = 2,
	ESleepFamily_MAX = 3,
};

// Enum Engine.ERuntimeVirtualTextureMainPassType
enum class ERuntimeVirtualTextureMainPassType : uint8_t {
	Never = 0,
	Exclusive = 1,
	Always = 2,
	ERuntimeVirtualTextureMainPassType_MAX = 3,
};

// Enum Engine.ECanBeCharacterBase
enum class ECanBeCharacterBase : uint8_t {
	ECB_No = 0,
	ECB_Yes = 1,
	ECB_Owner = 2,
	ECB_MAX = 3,
};

// Enum Engine.EHasCustomNavigableGeometry
enum class EHasCustomNavigableGeometry : uint8_t {
	No = 0,
	Yes = 1,
	EvenIfNotCollidable = 2,
	DontExport = 3,
	EHasCustomNavigableGeometry_MAX = 4,
};

// Enum Engine.ELightmapType
enum class ELightmapType : uint8_t {
	Default = 0,
	ForceSurface = 1,
	ForceVolumetric = 2,
	ELightmapType_MAX = 3,
};

// Enum Engine.EIndirectLightingCacheQuality
enum class EIndirectLightingCacheQuality : uint8_t {
	ILCQ_Off = 0,
	ILCQ_Point = 1,
	ILCQ_Volume = 2,
	ILCQ_MAX = 3,
};

// Enum Engine.ESceneDepthPriorityGroup
enum class ESceneDepthPriorityGroup : uint8_t {
	SDPG_World = 0,
	SDPG_Foreground = 1,
	SDPG_MAX = 2,
};

// Enum Engine.EAlphaBlendOption
enum class EAlphaBlendOption : uint8_t {
	Linear = 0,
	Cubic = 1,
	HermiteCubic = 2,
	Sinusoidal = 3,
	QuadraticInOut = 4,
	CubicInOut = 5,
	QuarticInOut = 6,
	QuinticInOut = 7,
	CircularIn = 8,
	CircularOut = 9,
	CircularInOut = 10,
	ExpIn = 11,
	ExpOut = 12,
	ExpInOut = 13,
	Custom = 14,
	EAlphaBlendOption_MAX = 15,
};

// Enum Engine.EAnimGroupRole
enum class EAnimGroupRole : uint8_t {
	CanBeLeader = 0,
	AlwaysFollower = 1,
	AlwaysLeader = 2,
	TransitionLeader = 3,
	TransitionFollower = 4,
	EAnimGroupRole_MAX = 5,
};

// Enum Engine.EPreviewAnimationBlueprintApplicationMethod
enum class EPreviewAnimationBlueprintApplicationMethod : uint8_t {
	LinkedLayers = 0,
	LinkedAnimGraph = 1,
	EPreviewAnimationBlueprintApplicationMethod_MAX = 2,
};

// Enum Engine.AnimationKeyFormat
enum class AnimationKeyFormat : uint8_t {
	AKF_ConstantKeyLerp = 0,
	AKF_VariableKeyLerp = 1,
	AKF_PerTrackCompression = 2,
	AKF_MAX = 3,
};

// Enum Engine.ERawCurveTrackTypes
enum class ERawCurveTrackTypes : uint8_t {
	RCT_Float = 0,
	RCT_Vector = 1,
	RCT_Transform = 2,
	RCT_MAX = 3,
};

// Enum Engine.EAnimAssetCurveFlags
enum class EAnimAssetCurveFlags : uint8_t {
	AACF_NONE = 0,
	AACF_DriveMorphTarget_DEPRECATED = 1,
	AACF_DriveAttribute_DEPRECATED = 2,
	AACF_Editable = 4,
	AACF_DriveMaterial_DEPRECATED = 8,
	AACF_Metadata = 16,
	AACF_DriveTrack = 32,
	AACF_Disabled = 64,
	AACF_MAX = 65,
};

// Enum Engine.AnimationCompressionFormat
enum class AnimationCompressionFormat : uint8_t {
	ACF_None = 0,
	ACF_Float96NoW = 1,
	ACF_Fixed48NoW = 2,
	ACF_IntervalFixed32NoW = 3,
	ACF_Fixed32NoW = 4,
	ACF_Float32NoW = 5,
	ACF_Identity = 6,
	ACF_MAX = 7,
};

// Enum Engine.EAdditiveBasePoseType
enum class EAdditiveBasePoseType : uint8_t {
	ABPT_None = 0,
	ABPT_RefPose = 1,
	ABPT_AnimScaled = 2,
	ABPT_AnimFrame = 3,
	ABPT_MAX = 4,
};

// Enum Engine.ERootMotionMode
enum class ERootMotionMode : uint8_t {
	NoRootMotionExtraction = 0,
	IgnoreRootMotion = 1,
	RootMotionFromEverything = 2,
	RootMotionFromMontagesOnly = 3,
	ERootMotionMode_MAX = 4,
};

// Enum Engine.ERootMotionRootLock
enum class ERootMotionRootLock : uint8_t {
	RefPose = 0,
	AnimFirstFrame = 1,
	Zero = 2,
	ERootMotionRootLock_MAX = 3,
};

// Enum Engine.EMontagePlayReturnType
enum class EMontagePlayReturnType : uint8_t {
	MontageLength = 0,
	Duration = 1,
	EMontagePlayReturnType_MAX = 2,
};

// Enum Engine.EDrawDebugItemType
enum class EDrawDebugItemType : uint8_t {
	DirectionalArrow = 0,
	Sphere = 1,
	Line = 2,
	OnScreenMessage = 3,
	CoordinateSystem = 4,
	EDrawDebugItemType_MAX = 5,
};

// Enum Engine.EAnimLinkMethod
enum class EAnimLinkMethod : uint8_t {
	Absolute = 0,
	Relative = 1,
	Proportional = 2,
	EAnimLinkMethod_MAX = 3,
};

// Enum Engine.EMontageSubStepResult
enum class EMontageSubStepResult : uint8_t {
	Moved = 0,
	NotMoved = 1,
	InvalidSection = 2,
	InvalidMontage = 3,
	EMontageSubStepResult_MAX = 4,
};

// Enum Engine.EAnimNotifyEventType
enum class EAnimNotifyEventType : uint8_t {
	Begin = 0,
	End = 1,
	EAnimNotifyEventType_MAX = 2,
};

// Enum Engine.EInertializationSpace
enum class EInertializationSpace : uint8_t {
	Default = 0,
	WorldSpace = 1,
	WorldRotation = 2,
	EInertializationSpace_MAX = 3,
};

// Enum Engine.EInertializationBoneState
enum class EInertializationBoneState : uint8_t {
	Invalid = 0,
	Valid = 1,
	Excluded = 2,
	EInertializationBoneState_MAX = 3,
};

// Enum Engine.EInertializationState
enum class EInertializationState : uint8_t {
	Inactive = 0,
	Pending = 1,
	Active = 2,
	EInertializationState_MAX = 3,
};

// Enum Engine.EEvaluatorMode
enum class EEvaluatorMode : uint8_t {
	EM_Standard = 0,
	EM_Freeze = 1,
	EM_DelayedFreeze = 2,
	EM_MAX = 3,
};

// Enum Engine.EEvaluatorDataSource
enum class EEvaluatorDataSource : uint8_t {
	EDS_SourcePose = 0,
	EDS_DestinationPose = 1,
	EDS_MAX = 2,
};

// Enum Engine.ECopyType
enum class ECopyType : uint8_t {
	PlainProperty = 0,
	BoolProperty = 1,
	StructProperty = 2,
	ObjectProperty = 3,
	NameProperty = 4,
	ECopyType_MAX = 5,
};

// Enum Engine.EPostCopyOperation
enum class EPostCopyOperation : uint8_t {
	None = 0,
	LogicalNegateBool = 1,
	EPostCopyOperation_MAX = 2,
};

// Enum Engine.EPinHidingMode
enum class EPinHidingMode : uint8_t {
	NeverAsPin = 0,
	PinHiddenByDefault = 1,
	PinShownByDefault = 2,
	AlwaysAsPin = 3,
	EPinHidingMode_MAX = 4,
};

// Enum Engine.AnimPhysCollisionType
enum class AnimPhysCollisionType : uint8_t {
	CoM = 0,
	CustomSphere = 1,
	InnerSphere = 2,
	OuterSphere = 3,
	AnimPhysCollisionType_MAX = 4,
};

// Enum Engine.AnimPhysTwistAxis
enum class AnimPhysTwistAxis : uint8_t {
	AxisX = 0,
	AxisY = 1,
	AxisZ = 2,
	AnimPhysTwistAxis_MAX = 3,
};

// Enum Engine.ETypeAdvanceAnim
enum class ETypeAdvanceAnim : uint8_t {
	ETAA_Default = 0,
	ETAA_Finished = 1,
	ETAA_Looped = 2,
	ETAA_MAX = 3,
};

// Enum Engine.ETransitionLogicType
enum class ETransitionLogicType : uint8_t {
	TLT_StandardBlend = 0,
	TLT_Inertialization = 1,
	TLT_Custom = 2,
	TLT_MAX = 3,
};

// Enum Engine.ETransitionBlendMode
enum class ETransitionBlendMode : uint8_t {
	TBM_Linear = 0,
	TBM_Cubic = 1,
	TBM_MAX = 2,
};

// Enum Engine.EComponentType
enum class EComponentType : uint8_t {
	None = 0,
	TranslationX = 1,
	TranslationY = 2,
	TranslationZ = 3,
	RotationX = 4,
	RotationY = 5,
	RotationZ = 6,
	Scale = 7,
	ScaleX = 8,
	ScaleY = 9,
	ScaleZ = 10,
	EComponentType_MAX = 11,
};

// Enum Engine.EAxisOption
enum class EAxisOption : uint8_t {
	X = 0,
	Y = 1,
	Z = 2,
	X_Neg = 3,
	Y_Neg = 4,
	Z_Neg = 5,
	Custom = 6,
	EAxisOption_MAX = 7,
};

// Enum Engine.EAnimInterpolationType
enum class EAnimInterpolationType : uint8_t {
	Linear = 0,
	Step = 1,
	EAnimInterpolationType_MAX = 2,
};

// Enum Engine.ECurveBlendOption
enum class ECurveBlendOption : uint8_t {
	Override = 0,
	DoNotOverride = 1,
	NormalizeByWeight = 2,
	BlendByWeight = 3,
	UseBasePose = 4,
	UseMaxValue = 5,
	UseMinValue = 6,
	ECurveBlendOption_MAX = 7,
};

// Enum Engine.EAdditiveAnimationType
enum class EAdditiveAnimationType : uint8_t {
	AAT_None = 0,
	AAT_LocalSpaceBase = 1,
	AAT_RotationOffsetMeshSpace = 2,
	AAT_MAX = 3,
};

// Enum Engine.ENotifyFilterType
enum class ENotifyFilterType : uint8_t {
	NoFiltering = 0,
	LOD = 1,
	ENotifyFilterType_MAX = 2,
};

// Enum Engine.EMontageNotifyTickType
enum class EMontageNotifyTickType : uint8_t {
	Queued = 0,
	BranchingPoint = 1,
	EMontageNotifyTickType_MAX = 2,
};

// Enum Engine.EBoneRotationSource
enum class EBoneRotationSource : uint8_t {
	BRS_KeepComponentSpaceRotation = 0,
	BRS_KeepLocalSpaceRotation = 1,
	BRS_CopyFromTarget = 2,
	BRS_MAX = 3,
};

// Enum Engine.EBoneControlSpace
enum class EBoneControlSpace : uint8_t {
	BCS_WorldSpace = 0,
	BCS_ComponentSpace = 1,
	BCS_ParentBoneSpace = 2,
	BCS_BoneSpace = 3,
	BCS_MAX = 4,
};

// Enum Engine.EBoneAxis
enum class EBoneAxis : uint8_t {
	BA_X = 0,
	BA_Y = 1,
	BA_Z = 2,
	BA_MAX = 3,
};

// Enum Engine.EPrimaryAssetCookRule
enum class EPrimaryAssetCookRule : uint8_t {
	Unknown = 0,
	NeverCook = 1,
	DevelopmentCook = 2,
	DevelopmentAlwaysCook = 3,
	AlwaysCook = 4,
	EPrimaryAssetCookRule_MAX = 5,
};

// Enum Engine.ENaturalSoundFalloffMode
enum class ENaturalSoundFalloffMode : uint8_t {
	Continues = 0,
	Silent = 1,
	Hold = 2,
	ENaturalSoundFalloffMode_MAX = 3,
};

// Enum Engine.EAttenuationShape
enum class EAttenuationShape : uint8_t {
	Sphere = 0,
	Capsule = 1,
	Box = 2,
	Cone = 3,
	EAttenuationShape_MAX = 4,
};

// Enum Engine.EAttenuationDistanceModel
enum class EAttenuationDistanceModel : uint8_t {
	Linear = 0,
	Logarithmic = 1,
	Inverse = 2,
	LogReverse = 3,
	NaturalSound = 4,
	Custom = 5,
	EAttenuationDistanceModel_MAX = 6,
};

// Enum Engine.EAudioFaderCurve
enum class EAudioFaderCurve : uint8_t {
	Linear = 0,
	Logarithmic = 1,
	SCurve = 2,
	Sin = 3,
	Count = 4,
	EAudioFaderCurve_MAX = 5,
};

// Enum Engine.EAudioComponentPlayState
enum class EAudioComponentPlayState : uint8_t {
	Playing = 0,
	Stopped = 1,
	Paused = 2,
	FadingIn = 3,
	FadingOut = 4,
	Count = 5,
	EAudioComponentPlayState_MAX = 6,
};

// Enum Engine.EAudioOutputTarget
enum class EAudioOutputTarget : uint8_t {
	Speaker = 0,
	Controller = 1,
	ControllerFallbackToSpeaker = 2,
	EAudioOutputTarget_MAX = 3,
};

// Enum Engine.EMonoChannelUpmixMethod
enum class EMonoChannelUpmixMethod : uint8_t {
	Linear = 0,
	EqualPower = 1,
	FullVolume = 2,
	EMonoChannelUpmixMethod_MAX = 3,
};

// Enum Engine.EPanningMethod
enum class EPanningMethod : uint8_t {
	Linear = 0,
	EqualPower = 1,
	EPanningMethod_MAX = 2,
};

// Enum Engine.EVoiceSampleRate
enum class EVoiceSampleRate : int32_t {
	Low16000Hz = 16000,
	Normal24000Hz = 24000,
	EVoiceSampleRate_MAX = 24001,
};

// Enum Engine.EBlendableLocation
enum class EBlendableLocation : uint8_t {
	BL_AfterTonemapping = 0,
	BL_BeforeTonemapping = 1,
	BL_BeforeTranslucency = 2,
	BL_ReplacingTonemapper = 3,
	BL_SSRInput = 4,
	BL_MAX = 5,
};

// Enum Engine.ENotifyTriggerMode
enum class ENotifyTriggerMode : uint8_t {
	AllAnimations = 0,
	HighestWeightedAnimation = 1,
	None = 2,
	ENotifyTriggerMode_MAX = 3,
};

// Enum Engine.EBlendSpaceAxis
enum class EBlendSpaceAxis : uint8_t {
	BSA_None = 0,
	BSA_X = 1,
	BSA_Y = 2,
	BSA_Max = 3,
};

// Enum Engine.EBlueprintNativizationFlag
enum class EBlueprintNativizationFlag : uint8_t {
	Disabled = 0,
	Dependency = 1,
	ExplicitlyEnabled = 2,
	EBlueprintNativizationFlag_MAX = 3,
};

// Enum Engine.EBlueprintCompileMode
enum class EBlueprintCompileMode : uint8_t {
	Default = 0,
	Development = 1,
	FinalRelease = 2,
	EBlueprintCompileMode_MAX = 3,
};

// Enum Engine.EBlueprintType
enum class EBlueprintType : uint8_t {
	BPTYPE_Normal = 0,
	BPTYPE_Const = 1,
	BPTYPE_MacroLibrary = 2,
	BPTYPE_Interface = 3,
	BPTYPE_LevelScript = 4,
	BPTYPE_FunctionLibrary = 5,
	BPTYPE_MAX = 6,
};

// Enum Engine.EBlueprintStatus
enum class EBlueprintStatus : uint8_t {
	BS_Unknown = 0,
	BS_Dirty = 1,
	BS_Error = 2,
	BS_UpToDate = 3,
	BS_BeingCreated = 4,
	BS_UpToDateWithWarnings = 5,
	BS_MAX = 6,
};

// Enum Engine.EBodyCollisionResponse
enum class EBodyCollisionResponse : uint8_t {
	BodyCollision_Enabled = 0,
	BodyCollision_Disabled = 1,
	BodyCollision_MAX = 2,
};

// Enum Engine.EPhysicsType
enum class EPhysicsType : uint8_t {
	PhysType_Default = 0,
	PhysType_Kinematic = 1,
	PhysType_Simulated = 2,
	PhysType_MAX = 3,
};

// Enum Engine.ECollisionTraceFlag
enum class ECollisionTraceFlag : uint8_t {
	CTF_UseDefault = 0,
	CTF_UseSimpleAndComplex = 1,
	CTF_UseSimpleAsComplex = 2,
	CTF_UseComplexAsSimple = 3,
	CTF_MAX = 4,
};

// Enum Engine.EBrushType
enum class EBrushType : uint8_t {
	Brush_Default = 0,
	Brush_Add = 1,
	Brush_Subtract = 2,
	Brush_MAX = 3,
};

// Enum Engine.ECsgOper
enum class ECsgOper : uint8_t {
	CSG_Active = 0,
	CSG_Add = 1,
	CSG_Subtract = 2,
	CSG_Intersect = 3,
	CSG_Deintersect = 4,
	CSG_None = 5,
	CSG_MAX = 6,
};

// Enum Engine.EInitialOscillatorOffset
enum class EInitialOscillatorOffset : uint8_t {
	EOO_OffsetRandom = 0,
	EOO_OffsetZero = 1,
	EOO_MAX = 2,
};

// Enum Engine.EOscillatorWaveform
enum class EOscillatorWaveform : uint8_t {
	SineWave = 0,
	PerlinNoise = 1,
	EOscillatorWaveform_MAX = 2,
};

// Enum Engine.ECameraShakeAttenuation
enum class ECameraShakeAttenuation : uint8_t {
	Linear = 0,
	Quadratic = 1,
	ECameraShakeAttenuation_MAX = 2,
};

// Enum Engine.ECameraAlphaBlendMode
enum class ECameraAlphaBlendMode : uint8_t {
	CABM_Linear = 0,
	CABM_Cubic = 1,
	CABM_MAX = 2,
};

// Enum Engine.ECameraProjectionMode
enum class ECameraProjectionMode : uint8_t {
	Perspective = 0,
	Orthographic = 1,
	ECameraProjectionMode_MAX = 2,
};

// Enum Engine.ECloudStorageDelegate
enum class ECloudStorageDelegate : uint8_t {
	CSD_KeyValueReadComplete = 0,
	CSD_KeyValueWriteComplete = 1,
	CSD_ValueChanged = 2,
	CSD_DocumentQueryComplete = 3,
	CSD_DocumentReadComplete = 4,
	CSD_DocumentWriteComplete = 5,
	CSD_DocumentConflictDetected = 6,
	CSD_MAX = 7,
};

// Enum Engine.EAngularDriveMode
enum class EAngularDriveMode : uint8_t {
	SLERP = 0,
	TwistAndSwing = 1,
	EAngularDriveMode_MAX = 2,
};

// Enum Engine.ELinearConstraintMotion
enum class ELinearConstraintMotion : uint8_t {
	LCM_Free = 0,
	LCM_Limited = 1,
	LCM_Locked = 2,
	LCM_MAX = 3,
};

// Enum Engine.ECurveTableMode
enum class ECurveTableMode : uint8_t {
	Empty = 0,
	SimpleCurves = 1,
	RichCurves = 2,
	ECurveTableMode_MAX = 3,
};

// Enum Engine.EEvaluateCurveTableResult
enum class EEvaluateCurveTableResult : uint8_t {
	RowFound = 0,
	RowNotFound = 1,
	EEvaluateCurveTableResult_MAX = 2,
};

// Enum Engine.EGrammaticalNumber
enum class EGrammaticalNumber : uint8_t {
	Singular = 0,
	Plural = 1,
	EGrammaticalNumber_MAX = 2,
};

// Enum Engine.EGrammaticalGender
enum class EGrammaticalGender : uint8_t {
	Neuter = 0,
	Masculine = 1,
	Feminine = 2,
	Mixed = 3,
	EGrammaticalGender_MAX = 4,
};

// Enum Engine.DistributionParamMode
enum class DistributionParamMode : uint8_t {
	DPM_Normal = 0,
	DPM_Abs = 1,
	DPM_Direct = 2,
	DPM_MAX = 3,
};

// Enum Engine.EDistributionVectorMirrorFlags
enum class EDistributionVectorMirrorFlags : uint8_t {
	EDVMF_Same = 0,
	EDVMF_Different = 1,
	EDVMF_Mirror = 2,
	EDVMF_MAX = 3,
};

// Enum Engine.EDistributionVectorLockFlags
enum class EDistributionVectorLockFlags : uint8_t {
	EDVLF_None = 0,
	EDVLF_XY = 1,
	EDVLF_XZ = 2,
	EDVLF_YZ = 3,
	EDVLF_XYZ = 4,
	EDVLF_MAX = 5,
};

// Enum Engine.ENodeEnabledState
enum class ENodeEnabledState : uint8_t {
	Enabled = 0,
	Disabled = 1,
	DevelopmentOnly = 2,
	ENodeEnabledState_MAX = 3,
};

// Enum Engine.ENodeAdvancedPins
enum class ENodeAdvancedPins : uint8_t {
	NoPins = 0,
	Shown = 1,
	Hidden = 2,
	ENodeAdvancedPins_MAX = 3,
};

// Enum Engine.ENodeTitleType
enum class ENodeTitleType : uint8_t {
	FullTitle = 0,
	ListView = 1,
	EditableTitle = 2,
	MenuTitle = 3,
	MAX_TitleTypes = 4,
	ENodeTitleType_MAX = 5,
};

// Enum Engine.EPinContainerType
enum class EPinContainerType : uint8_t {
	None = 0,
	Array = 1,
	Set = 2,
	Map = 3,
	EPinContainerType_MAX = 4,
};

// Enum Engine.EEdGraphPinDirection
enum class EEdGraphPinDirection : uint8_t {
	EGPD_Input = 0,
	EGPD_Output = 1,
	EGPD_MAX = 2,
};

// Enum Engine.EBlueprintPinStyleType
enum class EBlueprintPinStyleType : uint8_t {
	BPST_Original = 0,
	BPST_VariantA = 1,
	BPST_MAX = 2,
};

// Enum Engine.ECanCreateConnectionResponse
enum class ECanCreateConnectionResponse : uint8_t {
	CONNECT_RESPONSE_MAKE = 0,
	CONNECT_RESPONSE_DISALLOW = 1,
	CONNECT_RESPONSE_BREAK_OTHERS_A = 2,
	CONNECT_RESPONSE_BREAK_OTHERS_B = 3,
	CONNECT_RESPONSE_BREAK_OTHERS_AB = 4,
	CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE = 5,
	CONNECT_RESPONSE_MAX = 6,
};

// Enum Engine.EGraphType
enum class EGraphType : uint8_t {
	GT_Function = 0,
	GT_Ubergraph = 1,
	GT_Macro = 2,
	GT_Animation = 3,
	GT_StateMachine = 4,
	GT_MAX = 5,
};

// Enum Engine.ETransitionType
enum class ETransitionType : uint8_t {
	None = 0,
	Paused = 1,
	Loading = 2,
	Saving = 3,
	Connecting = 4,
	Precaching = 5,
	WaitingToConnect = 6,
	MAX = 7,
};

// Enum Engine.EFullyLoadPackageType
enum class EFullyLoadPackageType : uint8_t {
	FULLYLOAD_Map = 0,
	FULLYLOAD_Game_PreLoadClass = 1,
	FULLYLOAD_Game_PostLoadClass = 2,
	FULLYLOAD_Always = 3,
	FULLYLOAD_Mutator = 4,
	FULLYLOAD_MAX = 5,
};

// Enum Engine.EViewModeIndex
enum class EViewModeIndex : uint8_t {
	VMI_BrushWireframe = 0,
	VMI_Wireframe = 1,
	VMI_Unlit = 2,
	VMI_Lit = 3,
	VMI_Lit_DetailLighting = 4,
	VMI_LightingOnly = 5,
	VMI_LightComplexity = 6,
	VMI_ShaderComplexity = 8,
	VMI_LightmapDensity = 9,
	VMI_LitLightmapDensity = 10,
	VMI_ReflectionOverride = 11,
	VMI_VisualizeBuffer = 12,
	VMI_StationaryLightOverlap = 14,
	VMI_CollisionPawn = 15,
	VMI_CollisionVisibility = 16,
	VMI_LODColoration = 18,
	VMI_QuadOverdraw = 19,
	VMI_PrimitiveDistanceAccuracy = 20,
	VMI_MeshUVDensityAccuracy = 21,
	VMI_ShaderComplexityWithQuadOverdraw = 22,
	VMI_HLODColoration = 23,
	VMI_GroupLODColoration = 24,
	VMI_MaterialTextureScaleAccuracy = 25,
	VMI_RequiredTextureResolution = 26,
	VMI_PathTracing = 27,
	VMI_RayTracingDebug = 28,
	VMI_Max = 29,
	VMI_Unknown = 255,
};

// Enum Engine.EDemoPlayFailure
enum class EDemoPlayFailure : uint8_t {
	Generic = 0,
	DemoNotFound = 1,
	Corrupt = 2,
	InvalidVersion = 3,
	InitBase = 4,
	GameSpecificHeader = 5,
	ReplayStreamerInternal = 6,
	LoadMap = 7,
	Serialization = 8,
	EDemoPlayFailure_MAX = 9,
};

// Enum Engine.ENetworkLagState
enum class ENetworkLagState : uint8_t {
	NotLagging = 0,
	Lagging = 1,
	ENetworkLagState_MAX = 2,
};

// Enum Engine.EMouseCaptureMode
enum class EMouseCaptureMode : uint8_t {
	NoCapture = 0,
	CapturePermanently = 1,
	CapturePermanently_IncludingInitialMouseDown = 2,
	CaptureDuringMouseDown = 3,
	CaptureDuringRightMouseDown = 4,
	EMouseCaptureMode_MAX = 5,
};

// Enum Engine.ECustomTimeStepSynchronizationState
enum class ECustomTimeStepSynchronizationState : uint8_t {
	Closed = 0,
	Error = 1,
	Synchronized = 2,
	Synchronizing = 3,
	ECustomTimeStepSynchronizationState_MAX = 4,
};

// Enum Engine.EMeshBufferAccess
enum class EMeshBufferAccess : uint8_t {
	Default = 0,
	ForceCPUAndGPU = 1,
	EMeshBufferAccess_MAX = 2,
};

// Enum Engine.EConstraintFrame
enum class EConstraintFrame : uint8_t {
	Frame1 = 0,
	Frame2 = 1,
	EConstraintFrame_MAX = 2,
};

// Enum Engine.EAngularConstraintMotion
enum class EAngularConstraintMotion : uint8_t {
	ACM_Free = 0,
	ACM_Limited = 1,
	ACM_Locked = 2,
	ACM_MAX = 3,
};

// Enum Engine.EComponentSocketType
enum class EComponentSocketType : uint8_t {
	Invalid = 0,
	Bone = 1,
	Socket = 2,
	EComponentSocketType_MAX = 3,
};

// Enum Engine.EPhysicalMaterialMaskColor
enum class EPhysicalMaterialMaskColor : uint8_t {
	Red = 0,
	Green = 1,
	Blue = 2,
	Cyan = 3,
	Magenta = 4,
	Yellow = 5,
	White = 6,
	Black = 7,
	MAX = 8,
};

// Enum Engine.EUpdateRateShiftBucket
enum class EUpdateRateShiftBucket : uint8_t {
	ShiftBucket0 = 0,
	ShiftBucket1 = 1,
	ShiftBucket2 = 2,
	ShiftBucket3 = 3,
	ShiftBucket4 = 4,
	ShiftBucket5 = 5,
	ShiftBucketMax = 6,
	EUpdateRateShiftBucket_MAX = 7,
};

// Enum Engine.EShadowMapFlags
enum class EShadowMapFlags : uint8_t {
	SMF_None = 0,
	SMF_Streamed = 1,
	SMF_MAX = 2,
};

// Enum Engine.ELightMapPaddingType
enum class ELightMapPaddingType : uint8_t {
	LMPT_NormalPadding = 0,
	LMPT_PrePadding = 1,
	LMPT_NoPadding = 2,
	LMPT_MAX = 3,
};

// Enum Engine.ETimelineSigType
enum class ETimelineSigType : uint8_t {
	ETS_EventSignature = 0,
	ETS_FloatSignature = 1,
	ETS_VectorSignature = 2,
	ETS_LinearColorSignature = 3,
	ETS_InvalidSignature = 4,
	ETS_MAX = 5,
};

// Enum Engine.EFilterInterpolationType
enum class EFilterInterpolationType : uint8_t {
	BSIT_Average = 0,
	BSIT_Linear = 1,
	BSIT_Cubic = 2,
	BSIT_MAX = 3,
};

// Enum Engine.EOverlapFilterOption
enum class EOverlapFilterOption : uint8_t {
	OverlapFilter_All = 0,
	OverlapFilter_DynamicOnly = 1,
	OverlapFilter_StaticOnly = 2,
	OverlapFilter_MAX = 3,
};

// Enum Engine.ELightingBuildQuality
enum class ELightingBuildQuality : uint8_t {
	Quality_Preview = 0,
	Quality_Medium = 1,
	Quality_High = 2,
	Quality_Production = 3,
	Quality_MAX = 4,
};

// Enum Engine.EMaterialStencilCompare
enum class EMaterialStencilCompare : uint8_t {
	MSC_Less = 0,
	MSC_LessEqual = 1,
	MSC_Greater = 2,
	MSC_GreaterEqual = 3,
	MSC_Equal = 4,
	MSC_NotEqual = 5,
	MSC_Never = 6,
	MSC_Always = 7,
	MSC_Count = 8,
	MSC_MAX = 9,
};

// Enum Engine.EMaterialSamplerType
enum class EMaterialSamplerType : uint8_t {
	SAMPLERTYPE_Color = 0,
	SAMPLERTYPE_Grayscale = 1,
	SAMPLERTYPE_Alpha = 2,
	SAMPLERTYPE_Normal = 3,
	SAMPLERTYPE_Masks = 4,
	SAMPLERTYPE_DistanceFieldFont = 5,
	SAMPLERTYPE_LinearColor = 6,
	SAMPLERTYPE_LinearGrayscale = 7,
	SAMPLERTYPE_Data = 8,
	SAMPLERTYPE_External = 9,
	SAMPLERTYPE_VirtualColor = 10,
	SAMPLERTYPE_VirtualGrayscale = 11,
	SAMPLERTYPE_VirtualAlpha = 12,
	SAMPLERTYPE_VirtualNormal = 13,
	SAMPLERTYPE_VirtualMasks = 14,
	SAMPLERTYPE_VirtualLinearColor = 15,
	SAMPLERTYPE_VirtualLinearGrayscale = 16,
	SAMPLERTYPE_MAX = 17,
};

// Enum Engine.EMaterialTessellationMode
enum class EMaterialTessellationMode : uint8_t {
	MTM_NoTessellation = 0,
	MTM_FlatTessellation = 1,
	MTM_PNTriangles = 2,
	MTM_MAX = 3,
};

// Enum Engine.EMaterialShadingModel
enum class EMaterialShadingModel : uint8_t {
	MSM_Unlit = 0,
	MSM_DefaultLit = 1,
	MSM_Subsurface = 2,
	MSM_PreintegratedSkin = 3,
	MSM_ClearCoat = 4,
	MSM_SubsurfaceProfile = 5,
	MSM_TwoSidedFoliage = 6,
	MSM_Hair = 7,
	MSM_Cloth = 8,
	MSM_Eye = 9,
	MSM_SingleLayerWater = 10,
	MSM_ThinTranslucent = 11,
	MSM_Bark = 12,
	MSM_NUM = 13,
	MSM_FromMaterialExpression = 14,
	MSM_MAX = 15,
};

// Enum Engine.EParticleCollisionMode
enum class EParticleCollisionMode : uint8_t {
	SceneDepth = 0,
	DistanceField = 1,
	EParticleCollisionMode_MAX = 2,
};

// Enum Engine.ETrailWidthMode
enum class ETrailWidthMode : uint8_t {
	ETrailWidthMode_FromCentre = 0,
	ETrailWidthMode_FromFirst = 1,
	ETrailWidthMode_FromSecond = 2,
	ETrailWidthMode_MAX = 3,
};

// Enum Engine.EGBufferFormat
enum class EGBufferFormat : uint8_t {
	Force8BitsPerChannel = 0,
	Default = 1,
	HighPrecisionNormals = 3,
	Force16BitsPerChannel = 5,
	EGBufferFormat_MAX = 6,
};

// Enum Engine.ESceneCaptureCompositeMode
enum class ESceneCaptureCompositeMode : uint8_t {
	SCCM_Overwrite = 0,
	SCCM_Additive = 1,
	SCCM_Composite = 2,
	SCCM_MAX = 3,
};

// Enum Engine.ESceneCaptureSource
enum class ESceneCaptureSource : uint8_t {
	SCS_SceneColorHDR = 0,
	SCS_SceneColorHDRNoAlpha = 1,
	SCS_FinalColorLDR = 2,
	SCS_SceneColorSceneDepth = 3,
	SCS_SceneDepth = 4,
	SCS_DeviceDepth = 5,
	SCS_Normal = 6,
	SCS_BaseColor = 7,
	SCS_FinalColorHDR = 8,
	SCS_FinalToneCurveHDR = 9,
	SCS_MAX = 10,
};

// Enum Engine.ETranslucentSortPolicy
enum class ETranslucentSortPolicy : uint8_t {
	SortByDistance = 0,
	SortByProjectedZ = 1,
	SortAlongAxis = 2,
	ETranslucentSortPolicy_MAX = 3,
};

// Enum Engine.ERefractionMode
enum class ERefractionMode : uint8_t {
	RM_IndexOfRefraction = 0,
	RM_PixelNormalOffset = 1,
	RM_MAX = 2,
};

// Enum Engine.ETranslucencyLightingMode
enum class ETranslucencyLightingMode : uint8_t {
	TLM_VolumetricNonDirectional = 0,
	TLM_VolumetricDirectional = 1,
	TLM_VolumetricPerVertexNonDirectional = 2,
	TLM_VolumetricPerVertexDirectional = 3,
	TLM_Surface = 4,
	TLM_SurfacePerPixelLighting = 5,
	TLM_MAX = 6,
};

// Enum Engine.ESamplerSourceMode
enum class ESamplerSourceMode : uint8_t {
	SSM_FromTextureAsset = 0,
	SSM_Wrap_WorldGroupSettings = 1,
	SSM_Clamp_WorldGroupSettings = 2,
	SSM_MAX = 3,
};

// Enum Engine.EOcclusionCombineMode
enum class EOcclusionCombineMode : uint8_t {
	OCM_Minimum = 0,
	OCM_Multiply = 1,
	OCM_MAX = 2,
};

// Enum Engine.EAspectRatioAxisConstraint
enum class EAspectRatioAxisConstraint : uint8_t {
	AspectRatio_MaintainYFOV = 0,
	AspectRatio_MaintainXFOV = 1,
	AspectRatio_MajorAxisFOV = 2,
	AspectRatio_MAX = 3,
};

// Enum Engine.EFontCacheType
enum class EFontCacheType : uint8_t {
	Offline = 0,
	Runtime = 1,
	EFontCacheType_MAX = 2,
};

// Enum Engine.EFontImportCharacterSet
enum class EFontImportCharacterSet : uint8_t {
	FontICS_Default = 0,
	FontICS_Ansi = 1,
	FontICS_Symbol = 2,
	FontICS_MAX = 3,
};

// Enum Engine.EStandbyType
enum class EStandbyType : uint8_t {
	STDBY_Rx = 0,
	STDBY_Tx = 1,
	STDBY_BadPing = 2,
	STDBY_MAX = 3,
};

// Enum Engine.ESuggestProjVelocityTraceOption
enum class ESuggestProjVelocityTraceOption : uint8_t {
	DoNotTrace = 0,
	TraceFullPath = 1,
	OnlyTraceWhileAscending = 2,
	ESuggestProjVelocityTraceOption_MAX = 3,
};

// Enum Engine.EWindowMode
enum class EWindowMode : uint8_t {
	Fullscreen = 0,
	WindowedFullscreen = 1,
	Windowed = 2,
	EWindowMode_MAX = 3,
};

// Enum Engine.EHitProxyPriority
enum class EHitProxyPriority : uint8_t {
	HPP_World = 0,
	HPP_Wireframe = 1,
	HPP_Foreground = 2,
	HPP_UI = 3,
	HPP_MAX = 4,
};

// Enum Engine.EImportanceWeight
enum class EImportanceWeight : uint8_t {
	Luminance = 0,
	Red = 1,
	Green = 2,
	Blue = 3,
	Alpha = 4,
	EImportanceWeight_MAX = 5,
};

// Enum Engine.EAdManagerDelegate
enum class EAdManagerDelegate : uint8_t {
	AMD_ClickedBanner = 0,
	AMD_UserClosedAd = 1,
	AMD_MAX = 2,
};

// Enum Engine.EAnimAlphaInputType
enum class EAnimAlphaInputType : uint8_t {
	Float = 0,
	Bool = 1,
	Curve = 2,
	EAnimAlphaInputType_MAX = 3,
};

// Enum Engine.ETrackActiveCondition
enum class ETrackActiveCondition : uint8_t {
	ETAC_Always = 0,
	ETAC_GoreEnabled = 1,
	ETAC_GoreDisabled = 2,
	ETAC_MAX = 3,
};

// Enum Engine.EInterpTrackMoveRotMode
enum class EInterpTrackMoveRotMode : uint8_t {
	IMR_Keyframed = 0,
	IMR_LookAtGroup = 1,
	IMR_Ignore = 2,
	IMR_MAX = 3,
};

// Enum Engine.EInterpMoveAxis
enum class EInterpMoveAxis : uint8_t {
	AXIS_TranslationX = 0,
	AXIS_TranslationY = 1,
	AXIS_TranslationZ = 2,
	AXIS_RotationX = 3,
	AXIS_RotationY = 4,
	AXIS_RotationZ = 5,
	AXIS_MAX = 6,
};

// Enum Engine.ETrackToggleAction
enum class ETrackToggleAction : uint8_t {
	ETTA_Off = 0,
	ETTA_On = 1,
	ETTA_Toggle = 2,
	ETTA_Trigger = 3,
	ETTA_MAX = 4,
};

// Enum Engine.EVisibilityTrackCondition
enum class EVisibilityTrackCondition : uint8_t {
	EVTC_Always = 0,
	EVTC_GoreEnabled = 1,
	EVTC_GoreDisabled = 2,
	EVTC_MAX = 3,
};

// Enum Engine.EVisibilityTrackAction
enum class EVisibilityTrackAction : uint8_t {
	EVTA_Hide = 0,
	EVTA_Show = 1,
	EVTA_Toggle = 2,
	EVTA_MAX = 3,
};

// Enum Engine.ESlateGesture
enum class ESlateGesture : uint8_t {
	None = 0,
	Scroll = 1,
	Magnify = 2,
	Swipe = 3,
	Rotate = 4,
	LongPress = 5,
	ESlateGesture_MAX = 6,
};

// Enum Engine.EMatrixColumns
enum class EMatrixColumns : uint8_t {
	First = 0,
	Second = 1,
	Third = 2,
	Fourth = 3,
	EMatrixColumns_MAX = 4,
};

// Enum Engine.ELerpInterpolationMode
enum class ELerpInterpolationMode : uint8_t {
	QuatInterp = 0,
	EulerInterp = 1,
	DualQuatInterp = 2,
	ELerpInterpolationMode_MAX = 3,
};

// Enum Engine.EEasingFunc
enum class EEasingFunc : uint8_t {
	Linear = 0,
	Step = 1,
	SinusoidalIn = 2,
	SinusoidalOut = 3,
	SinusoidalInOut = 4,
	EaseIn = 5,
	EaseOut = 6,
	EaseInOut = 7,
	ExpoIn = 8,
	ExpoOut = 9,
	ExpoInOut = 10,
	CircularIn = 11,
	CircularOut = 12,
	CircularInOut = 13,
	EEasingFunc_MAX = 14,
};

// Enum Engine.ERoundingMode
enum class ERoundingMode : uint8_t {
	HalfToEven = 0,
	HalfFromZero = 1,
	HalfToZero = 2,
	FromZero = 3,
	ToZero = 4,
	ToNegativeInfinity = 5,
	ToPositiveInfinity = 6,
	ERoundingMode_MAX = 7,
};

// Enum Engine.EStreamingVolumeUsage
enum class EStreamingVolumeUsage : uint8_t {
	SVB_Loading = 0,
	SVB_LoadingAndVisibility = 1,
	SVB_VisibilityBlockingOnLoad = 2,
	SVB_BlockingOnLoad = 3,
	SVB_LoadingNotVisible = 4,
	SVB_MAX = 5,
};

// Enum Engine.EMaterialDecalResponse
enum class EMaterialDecalResponse : uint8_t {
	MDR_None = 0,
	MDR_ColorNormalRoughness = 1,
	MDR_Color = 2,
	MDR_ColorNormal = 3,
	MDR_ColorRoughness = 4,
	MDR_Normal = 5,
	MDR_NormalRoughness = 6,
	MDR_Roughness = 7,
	MDR_MAX = 8,
};

// Enum Engine.EDecalBlendMode
enum class EDecalBlendMode : uint8_t {
	DBM_Translucent = 0,
	DBM_Stain = 1,
	DBM_Normal = 2,
	DBM_Emissive = 3,
	DBM_DBuffer_ColorNormalRoughness = 4,
	DBM_DBuffer_Color = 5,
	DBM_DBuffer_ColorNormal = 6,
	DBM_DBuffer_ColorRoughness = 7,
	DBM_DBuffer_Normal = 8,
	DBM_DBuffer_NormalRoughness = 9,
	DBM_DBuffer_Roughness = 10,
	DBM_DBuffer_Emissive = 11,
	DBM_DBuffer_AlphaComposite = 12,
	DBM_DBuffer_EmissiveAlphaComposite = 13,
	DBM_Volumetric_DistanceFunction = 14,
	DBM_AlphaComposite = 15,
	DBM_AmbientOcclusion = 16,
	DBM_MAX = 17,
};

// Enum Engine.ETextureColorChannel
enum class ETextureColorChannel : uint8_t {
	TCC_Red = 0,
	TCC_Green = 1,
	TCC_Blue = 2,
	TCC_Alpha = 3,
	TCC_MAX = 4,
};

// Enum Engine.EMaterialAttributeBlend
enum class EMaterialAttributeBlend : uint8_t {
	Blend = 0,
	UseA = 1,
	UseB = 2,
	EMaterialAttributeBlend_MAX = 3,
};

// Enum Engine.EChannelMaskParameterColor
enum class EChannelMaskParameterColor : uint8_t {
	Red = 0,
	Green = 1,
	Blue = 2,
	Alpha = 3,
	EChannelMaskParameterColor_MAX = 4,
};

// Enum Engine.EClampMode
enum class EClampMode : uint8_t {
	CMODE_Clamp = 0,
	CMODE_ClampMin = 1,
	CMODE_ClampMax = 2,
	CMODE_MAX = 3,
};

// Enum Engine.ECustomMaterialOutputType
enum class ECustomMaterialOutputType : uint8_t {
	CMOT_Float1 = 0,
	CMOT_Float2 = 1,
	CMOT_Float3 = 2,
	CMOT_Float4 = 3,
	CMOT_MAX = 4,
};

// Enum Engine.EDepthOfFieldFunctionValue
enum class EDepthOfFieldFunctionValue : uint8_t {
	TDOF_NearAndFarMask = 0,
	TDOF_NearMask = 1,
	TDOF_FarMask = 2,
	TDOF_CircleOfConfusionRadius = 3,
	TDOF_MAX = 4,
};

// Enum Engine.EFunctionInputType
enum class EFunctionInputType : uint8_t {
	FunctionInput_Scalar = 0,
	FunctionInput_Vector2 = 1,
	FunctionInput_Vector3 = 2,
	FunctionInput_Vector4 = 3,
	FunctionInput_Texture2D = 4,
	FunctionInput_TextureCube = 5,
	FunctionInput_Texture2DArray = 6,
	FunctionInput_VolumeTexture = 7,
	FunctionInput_StaticBool = 8,
	FunctionInput_MaterialAttributes = 9,
	FunctionInput_TextureExternal = 10,
	FunctionInput_MAX = 11,
};

// Enum Engine.ENoiseFunction
enum class ENoiseFunction : uint8_t {
	NOISEFUNCTION_SimplexTex = 0,
	NOISEFUNCTION_GradientTex = 1,
	NOISEFUNCTION_GradientTex3D = 2,
	NOISEFUNCTION_GradientALU = 3,
	NOISEFUNCTION_ValueALU = 4,
	NOISEFUNCTION_VoronoiALU = 5,
	NOISEFUNCTION_MAX = 6,
};

// Enum Engine.ERuntimeVirtualTextureMipValueMode
enum class ERuntimeVirtualTextureMipValueMode : uint8_t {
	RVTMVM_None = 0,
	RVTMVM_MipLevel = 1,
	RVTMVM_MipBias = 2,
	RVTMVM_MAX = 3,
};

// Enum Engine.EMaterialSceneAttributeInputMode
enum class EMaterialSceneAttributeInputMode : uint8_t {
	Coordinates = 0,
	OffsetFraction = 1,
	EMaterialSceneAttributeInputMode_MAX = 2,
};

// Enum Engine.ESpeedTreeLODType
enum class ESpeedTreeLODType : uint8_t {
	STLOD_Pop = 0,
	STLOD_Smooth = 1,
	STLOD_MAX = 2,
};

// Enum Engine.ESpeedTreeWindType
enum class ESpeedTreeWindType : uint8_t {
	STW_None = 0,
	STW_Fastest = 1,
	STW_Fast = 2,
	STW_Better = 3,
	STW_Best = 4,
	STW_Palm = 5,
	STW_BestPlus = 6,
	STW_MAX = 7,
};

// Enum Engine.ESpeedTreeGeometryType
enum class ESpeedTreeGeometryType : uint8_t {
	STG_Branch = 0,
	STG_Frond = 1,
	STG_Leaf = 2,
	STG_FacingLeaf = 3,
	STG_Billboard = 4,
	STG_MAX = 5,
};

// Enum Engine.EMaterialExposedTextureProperty
enum class EMaterialExposedTextureProperty : uint8_t {
	TMTM_TextureSize = 0,
	TMTM_TexelSize = 1,
	TMTM_MAX = 2,
};

// Enum Engine.ETextureMipValueMode
enum class ETextureMipValueMode : uint8_t {
	TMVM_None = 0,
	TMVM_MipLevel = 1,
	TMVM_MipBias = 2,
	TMVM_Derivative = 3,
	TMVM_MAX = 4,
};

// Enum Engine.EMaterialVectorCoordTransform
enum class EMaterialVectorCoordTransform : uint8_t {
	TRANSFORM_Tangent = 0,
	TRANSFORM_Local = 1,
	TRANSFORM_World = 2,
	TRANSFORM_View = 3,
	TRANSFORM_Camera = 4,
	TRANSFORM_ParticleWorld = 5,
	TRANSFORM_MAX = 6,
};

// Enum Engine.EMaterialVectorCoordTransformSource
enum class EMaterialVectorCoordTransformSource : uint8_t {
	TRANSFORMSOURCE_Tangent = 0,
	TRANSFORMSOURCE_Local = 1,
	TRANSFORMSOURCE_World = 2,
	TRANSFORMSOURCE_View = 3,
	TRANSFORMSOURCE_Camera = 4,
	TRANSFORMSOURCE_ParticleWorld = 5,
	TRANSFORMSOURCE_MAX = 6,
};

// Enum Engine.EMaterialPositionTransformSource
enum class EMaterialPositionTransformSource : uint8_t {
	TRANSFORMPOSSOURCE_Local = 0,
	TRANSFORMPOSSOURCE_World = 1,
	TRANSFORMPOSSOURCE_TranslatedWorld = 2,
	TRANSFORMPOSSOURCE_View = 3,
	TRANSFORMPOSSOURCE_Camera = 4,
	TRANSFORMPOSSOURCE_Particle = 5,
	TRANSFORMPOSSOURCE_MAX = 6,
};

// Enum Engine.EVectorNoiseFunction
enum class EVectorNoiseFunction : uint8_t {
	VNF_CellnoiseALU = 0,
	VNF_VectorALU = 1,
	VNF_GradientALU = 2,
	VNF_CurlALU = 3,
	VNF_VoronoiALU = 4,
	VNF_MAX = 5,
};

// Enum Engine.EMaterialExposedViewProperty
enum class EMaterialExposedViewProperty : uint8_t {
	MEVP_BufferSize = 0,
	MEVP_FieldOfView = 1,
	MEVP_TanHalfFieldOfView = 2,
	MEVP_ViewSize = 3,
	MEVP_WorldSpaceViewPosition = 4,
	MEVP_WorldSpaceCameraPosition = 5,
	MEVP_ViewportOffset = 6,
	MEVP_TemporalSampleCount = 7,
	MEVP_TemporalSampleIndex = 8,
	MEVP_TemporalSampleOffset = 9,
	MEVP_RuntimeVirtualTextureOutputLevel = 10,
	MEVP_RuntimeVirtualTextureOutputDerivative = 11,
	MEVP_PreExposure = 12,
	MEVP_MAX = 13,
};

// Enum Engine.EWorldPositionIncludedOffsets
enum class EWorldPositionIncludedOffsets : uint8_t {
	WPT_Default = 0,
	WPT_ExcludeAllShaderOffsets = 1,
	WPT_CameraRelative = 2,
	WPT_CameraRelativeNoOffsets = 3,
	WPT_MAX = 4,
};

// Enum Engine.EMaterialFunctionUsage
enum class EMaterialFunctionUsage : uint8_t {
	Default = 0,
	MaterialLayer = 1,
	MaterialLayerBlend = 2,
	EMaterialFunctionUsage_MAX = 3,
};

// Enum Engine.EMaterialUsage
enum class EMaterialUsage : uint8_t {
	MATUSAGE_SkeletalMesh = 0,
	MATUSAGE_ParticleSprites = 1,
	MATUSAGE_BeamTrails = 2,
	MATUSAGE_MeshParticles = 3,
	MATUSAGE_StaticLighting = 4,
	MATUSAGE_MorphTargets = 5,
	MATUSAGE_SplineMesh = 6,
	MATUSAGE_InstancedStaticMeshes = 7,
	MATUSAGE_GeometryCollections = 8,
	MATUSAGE_Clothing = 9,
	MATUSAGE_NiagaraSprites = 10,
	MATUSAGE_NiagaraRibbons = 11,
	MATUSAGE_NiagaraMeshParticles = 12,
	MATUSAGE_GeometryCache = 13,
	MATUSAGE_Water = 14,
	MATUSAGE_HairStrands = 15,
	MATUSAGE_LidarPointCloud = 16,
	MATUSAGE_MAX = 17,
};

// Enum Engine.EMaterialParameterAssociation
enum class EMaterialParameterAssociation : uint8_t {
	LayerParameter = 0,
	BlendParameter = 1,
	GlobalParameter = 2,
	EMaterialParameterAssociation_MAX = 3,
};

// Enum Engine.EMaterialMergeType
enum class EMaterialMergeType : uint8_t {
	MaterialMergeType_Default = 0,
	MaterialMergeType_Simplygon = 1,
	MaterialMergeType_MAX = 2,
};

// Enum Engine.ETextureSizingType
enum class ETextureSizingType : uint8_t {
	TextureSizingType_UseSingleTextureSize = 0,
	TextureSizingType_UseAutomaticBiasedSizes = 1,
	TextureSizingType_UseManualOverrideTextureSize = 2,
	TextureSizingType_UseSimplygonAutomaticSizing = 3,
	TextureSizingType_MAX = 4,
};

// Enum Engine.ESceneTextureId
enum class ESceneTextureId : uint8_t {
	PPI_SceneColor = 0,
	PPI_SceneDepth = 1,
	PPI_DiffuseColor = 2,
	PPI_SpecularColor = 3,
	PPI_SubsurfaceColor = 4,
	PPI_BaseColor = 5,
	PPI_Specular = 6,
	PPI_Metallic = 7,
	PPI_WorldNormal = 8,
	PPI_SeparateTranslucency = 9,
	PPI_Opacity = 10,
	PPI_Roughness = 11,
	PPI_MaterialAO = 12,
	PPI_CustomDepth = 13,
	PPI_PostProcessInput0 = 14,
	PPI_PostProcessInput1 = 15,
	PPI_PostProcessInput2 = 16,
	PPI_PostProcessInput3 = 17,
	PPI_PostProcessInput4 = 18,
	PPI_PostProcessInput5 = 19,
	PPI_PostProcessInput6 = 20,
	PPI_DecalMask = 21,
	PPI_ShadingModelColor = 22,
	PPI_ShadingModelID = 23,
	PPI_AmbientOcclusion = 24,
	PPI_CustomStencil = 25,
	PPI_StoredBaseColor = 26,
	PPI_StoredSpecular = 27,
	PPI_Velocity = 28,
	PPI_WorldTangent = 29,
	PPI_Anisotropy = 30,
	PPI_MAX = 31,
};

// Enum Engine.EMaterialDomain
enum class EMaterialDomain : uint8_t {
	MD_Surface = 0,
	MD_DeferredDecal = 1,
	MD_LightFunction = 2,
	MD_Volume = 3,
	MD_PostProcess = 4,
	MD_UI = 5,
	MD_RuntimeVirtualTexture = 6,
	MD_MAX = 7,
};

// Enum Engine.EMeshInstancingReplacementMethod
enum class EMeshInstancingReplacementMethod : uint8_t {
	RemoveOriginalActors = 0,
	KeepOriginalActorsAsEditorOnly = 1,
	EMeshInstancingReplacementMethod_MAX = 2,
};

// Enum Engine.EUVOutput
enum class EUVOutput : uint8_t {
	DoNotOutputChannel = 0,
	OutputChannel = 1,
	EUVOutput_MAX = 2,
};

// Enum Engine.EMeshMergeType
enum class EMeshMergeType : uint8_t {
	MeshMergeType_Default = 0,
	MeshMergeType_MergeActor = 1,
	MeshMergeType_MAX = 2,
};

// Enum Engine.EMeshLODSelectionType
enum class EMeshLODSelectionType : uint8_t {
	AllLODs = 0,
	SpecificLOD = 1,
	CalculateLOD = 2,
	LowestDetailLOD = 3,
	EMeshLODSelectionType_MAX = 4,
};

// Enum Engine.EProxyNormalComputationMethod
enum class EProxyNormalComputationMethod : uint8_t {
	AngleWeighted = 0,
	AreaWeighted = 1,
	EqualWeighted = 2,
	EProxyNormalComputationMethod_MAX = 3,
};

// Enum Engine.ELandscapeCullingPrecision
enum class ELandscapeCullingPrecision : uint8_t {
	High = 0,
	Medium = 1,
	Low = 2,
	ELandscapeCullingPrecision_MAX = 3,
};

// Enum Engine.EStaticMeshReductionTerimationCriterion
enum class EStaticMeshReductionTerimationCriterion : uint8_t {
	Triangles = 0,
	Vertices = 1,
	Any = 2,
	EStaticMeshReductionTerimationCriterion_MAX = 3,
};

// Enum Engine.EMeshFeatureImportance
enum class EMeshFeatureImportance : uint8_t {
	Off = 0,
	Lowest = 1,
	Low = 2,
	Normal = 3,
	High = 4,
	Highest = 5,
	EMeshFeatureImportance_MAX = 6,
};

// Enum Engine.EVertexPaintAxis
enum class EVertexPaintAxis : uint8_t {
	X = 0,
	Y = 1,
	Z = 2,
	EVertexPaintAxis_MAX = 3,
};

// Enum Engine.EMicroTransactionResult
enum class EMicroTransactionResult : uint8_t {
	MTR_Succeeded = 0,
	MTR_Failed = 1,
	MTR_Canceled = 2,
	MTR_RestoredFromServer = 3,
	MTR_MAX = 4,
};

// Enum Engine.EMicroTransactionDelegate
enum class EMicroTransactionDelegate : uint8_t {
	MTD_PurchaseQueryComplete = 0,
	MTD_PurchaseComplete = 1,
	MTD_MAX = 2,
};

// Enum Engine.EKillType
enum class EKillType : uint8_t {
	Kill = 0,
	Knockout = 1,
	Resuscitated = 2,
	Reported = 3,
	EKillType_MAX = 4,
};

// Enum Engine.EReplayFailure
enum class EReplayFailure : uint8_t {
	OK = 0,
	PlayReplayCommand = 1,
	PlayReplayNoWorld = 2,
	PlayReplayCorrupt = 3,
	PlayReplayCreateDriver = 4,
	ConnectNoWorld = 5,
	ConnectNoGameInstance = 6,
	ConnectInitBase = 7,
	ConnectCreateReplayStreamer = 8,
	PlaybackStreamerReady = 9,
	ConnectNoWorldContext = 10,
	ReadHeaderDemoNotFound = 11,
	ReadHeaderCorrupt = 12,
	ReadHeaderGameSpecific = 13,
	TickPlayStreamerInternal = 14,
	TickPlayStreamerFileAr = 15,
	ReadFrameFileAr = 16,
	ReadFrameStreamerInternal = 17,
	ReadFrameMismatchTimeChecksum = 18,
	ReadFrameServerDeltaTime = 19,
	ReadFrameReadPacketError = 20,
	ReadFrameNotReachable1 = 21,
	ReadFrameNotReachable2 = 22,
	ProcessPacket = 23,
	CheckpointReady = 24,
	CheckpointDriverInvalid = 25,
	InstantReady = 26,
	InstantDriverInvalid = 27,
	DownloadHeader = 28,
	DownloadHeaderLevelNamesAndTimes = 29,
	LoadMap = 30,
	PlayKillcamNoWorld = 31,
	PlayKillcamNoDriver = 32,
	PlayKillcamNoActiveReplay = 33,
	PlayKillcamInvalidArguments = 34,
	PlayKillcamCorrupt = 35,
	PlayKillcamSetViewTarget = 36,
	PlayKillcamSetTime = 37,
	PlayKillcamFindViewTargetTimeout = 38,
	SpawnReplayPcNoWorld = 39,
	SpawnReplayPcLoadClass = 40,
	SpawnReplayPc = 41,
	PLAYBACK_FAILURE_MAX = 42,
	RecordingReplayCommand = 43,
	RecordingReplayRejectOption = 44,
	RecordingReplayNoWorld = 45,
	RecordingReplayAlreadyPlaying = 46,
	RecordingReplayCorrupt = 47,
	RecordingReplayCreateDriver = 48,
	RecordingReplayPrepare = 49,
	ListenNoWorld = 50,
	ListenNoGameInstance = 51,
	ListenInitBase = 52,
	ListenCreateReplayStreamer = 53,
	ListenNoWorldSettings = 54,
	ListenWriteHeader = 55,
	RecordingStreamerReady = 56,
	ContinueListen = 57,
	TickRecordStreamerInternal = 58,
	TickRecordStreamerFileAr = 59,
	TickRecordNoGameDriver = 60,
	TickRecordNoGameConnection = 61,
	TickRecordCorrupt = 62,
	SaveCheckpointNoGameDriver = 63,
	SaveCheckpointNoGameConnection = 64,
	OnSeamlessTravelWriteHeader = 65,
	RECORDING_FAILURE_MAX = 66,
	EReplayFailure_MAX = 67,
};

// Enum Engine.FNavigationSystemRunMode
enum class FNavigationSystemRunMode : uint8_t {
	InvalidMode = 0,
	GameMode = 1,
	EditorMode = 2,
	SimulationMode = 3,
	PIEMode = 4,
	FNavigationSystemRunMode_MAX = 5,
};

// Enum Engine.ENavigationQueryResult
enum class ENavigationQueryResult : uint8_t {
	Invalid = 0,
	Error = 1,
	Fail = 2,
	Success = 3,
	ENavigationQueryResult_MAX = 4,
};

// Enum Engine.ENavPathEvent
enum class ENavPathEvent : uint8_t {
	Cleared = 0,
	NewPath = 1,
	UpdatedDueToGoalMoved = 2,
	UpdatedDueToNavigationChanged = 3,
	Invalidated = 4,
	RePathFailed = 5,
	MetaPathUpdate = 6,
	Custom = 7,
	ENavPathEvent_MAX = 8,
};

// Enum Engine.ENavDataGatheringModeConfig
enum class ENavDataGatheringModeConfig : uint8_t {
	Invalid = 0,
	Instant = 1,
	Lazy = 2,
	ENavDataGatheringModeConfig_MAX = 3,
};

// Enum Engine.ENavDataGatheringMode
enum class ENavDataGatheringMode : uint8_t {
	Default = 0,
	Instant = 1,
	Lazy = 2,
	ENavDataGatheringMode_MAX = 3,
};

// Enum Engine.ENavigationOptionFlag
enum class ENavigationOptionFlag : uint8_t {
	Default = 0,
	Enable = 1,
	Disable = 2,
	MAX = 3,
};

// Enum Engine.ENavLinkDirection
enum class ENavLinkDirection : uint8_t {
	BothWays = 0,
	LeftToRight = 1,
	RightToLeft = 2,
	ENavLinkDirection_MAX = 3,
};

// Enum Engine.EEmitterRenderMode
enum class EEmitterRenderMode : uint8_t {
	ERM_Normal = 0,
	ERM_Point = 1,
	ERM_Cross = 2,
	ERM_LightsOnly = 3,
	ERM_None = 4,
	ERM_MAX = 5,
};

// Enum Engine.EParticleSubUVInterpMethod
enum class EParticleSubUVInterpMethod : uint8_t {
	PSUVIM_None = 0,
	PSUVIM_Linear = 1,
	PSUVIM_Linear_Blend = 2,
	PSUVIM_Random = 3,
	PSUVIM_Random_Blend = 4,
	PSUVIM_MAX = 5,
};

// Enum Engine.EParticleBurstMethod
enum class EParticleBurstMethod : uint8_t {
	EPBM_Instant = 0,
	EPBM_Interpolated = 1,
	EPBM_MAX = 2,
};

// Enum Engine.EParticleSystemInsignificanceReaction
enum class EParticleSystemInsignificanceReaction : uint8_t {
	Auto = 0,
	Complete = 1,
	DisableTick = 2,
	DisableTickAndKill = 3,
	Num = 4,
	EParticleSystemInsignificanceReaction_MAX = 5,
};

// Enum Engine.EParticleSignificanceLevel
enum class EParticleSignificanceLevel : uint8_t {
	Low = 0,
	Medium = 1,
	High = 2,
	Critical = 3,
	Num = 4,
	EParticleSignificanceLevel_MAX = 5,
};

// Enum Engine.EParticleDetailMode
enum class EParticleDetailMode : uint8_t {
	PDM_Low = 0,
	PDM_Medium = 1,
	PDM_High = 2,
	PDM_MAX = 3,
};

// Enum Engine.EParticleSourceSelectionMethod
enum class EParticleSourceSelectionMethod : uint8_t {
	EPSSM_Random = 0,
	EPSSM_Sequential = 1,
	EPSSM_MAX = 2,
};

// Enum Engine.EModuleType
enum class EModuleType : uint8_t {
	EPMT_General = 0,
	EPMT_TypeData = 1,
	EPMT_Beam = 2,
	EPMT_Trail = 3,
	EPMT_Spawn = 4,
	EPMT_Required = 5,
	EPMT_Event = 6,
	EPMT_Light = 7,
	EPMT_SubUV = 8,
	EPMT_MAX = 9,
};

// Enum Engine.EAttractorParticleSelectionMethod
enum class EAttractorParticleSelectionMethod : uint8_t {
	EAPSM_Random = 0,
	EAPSM_Sequential = 1,
	EAPSM_MAX = 2,
};

// Enum Engine.Beam2SourceTargetTangentMethod
enum class Beam2SourceTargetTangentMethod : uint8_t {
	PEB2STTM_Direct = 0,
	PEB2STTM_UserSet = 1,
	PEB2STTM_Distribution = 2,
	PEB2STTM_Emitter = 3,
	PEB2STTM_MAX = 4,
};

// Enum Engine.Beam2SourceTargetMethod
enum class Beam2SourceTargetMethod : uint8_t {
	PEB2STM_Default = 0,
	PEB2STM_UserSet = 1,
	PEB2STM_Emitter = 2,
	PEB2STM_Particle = 3,
	PEB2STM_Actor = 4,
	PEB2STM_MAX = 5,
};

// Enum Engine.BeamModifierType
enum class BeamModifierType : uint8_t {
	PEB2MT_Source = 0,
	PEB2MT_Target = 1,
	PEB2MT_MAX = 2,
};

// Enum Engine.EParticleCameraOffsetUpdateMethod
enum class EParticleCameraOffsetUpdateMethod : uint8_t {
	EPCOUM_DirectSet = 0,
	EPCOUM_Additive = 1,
	EPCOUM_Scalar = 2,
	EPCOUM_MAX = 3,
};

// Enum Engine.EParticleCollisionComplete
enum class EParticleCollisionComplete : uint8_t {
	EPCC_Kill = 0,
	EPCC_Freeze = 1,
	EPCC_HaltCollisions = 2,
	EPCC_FreezeTranslation = 3,
	EPCC_FreezeRotation = 4,
	EPCC_FreezeMovement = 5,
	EPCC_MAX = 6,
};

// Enum Engine.EParticleCollisionResponse
enum class EParticleCollisionResponse : uint8_t {
	Bounce = 0,
	Stop = 1,
	Kill = 2,
	EParticleCollisionResponse_MAX = 3,
};

// Enum Engine.ELocationBoneSocketSelectionMethod
enum class ELocationBoneSocketSelectionMethod : uint8_t {
	BONESOCKETSEL_Sequential = 0,
	BONESOCKETSEL_Random = 1,
	BONESOCKETSEL_MAX = 2,
};

// Enum Engine.ELocationBoneSocketSource
enum class ELocationBoneSocketSource : uint8_t {
	BONESOCKETSOURCE_Bones = 0,
	BONESOCKETSOURCE_Sockets = 1,
	BONESOCKETSOURCE_MAX = 2,
};

// Enum Engine.ELocationEmitterSelectionMethod
enum class ELocationEmitterSelectionMethod : uint8_t {
	ELESM_Random = 0,
	ELESM_Sequential = 1,
	ELESM_MAX = 2,
};

// Enum Engine.CylinderHeightAxis
enum class CylinderHeightAxis : uint8_t {
	PMLPC_HEIGHTAXIS_X = 0,
	PMLPC_HEIGHTAXIS_Y = 1,
	PMLPC_HEIGHTAXIS_Z = 2,
	PMLPC_HEIGHTAXIS_MAX = 3,
};

// Enum Engine.ELocationSkelVertSurfaceSource
enum class ELocationSkelVertSurfaceSource : uint8_t {
	VERTSURFACESOURCE_Vert = 0,
	VERTSURFACESOURCE_Surface = 1,
	VERTSURFACESOURCE_MAX = 2,
};

// Enum Engine.EOrbitChainMode
enum class EOrbitChainMode : uint8_t {
	EOChainMode_Add = 0,
	EOChainMode_Scale = 1,
	EOChainMode_Link = 2,
	EOChainMode_MAX = 3,
};

// Enum Engine.EParticleAxisLock
enum class EParticleAxisLock : uint8_t {
	EPAL_NONE = 0,
	EPAL_X = 1,
	EPAL_Y = 2,
	EPAL_Z = 3,
	EPAL_NEGATIVE_X = 4,
	EPAL_NEGATIVE_Y = 5,
	EPAL_NEGATIVE_Z = 6,
	EPAL_ROTATE_X = 7,
	EPAL_ROTATE_Y = 8,
	EPAL_ROTATE_Z = 9,
	EPAL_MAX = 10,
};

// Enum Engine.EEmitterDynamicParameterValue
enum class EEmitterDynamicParameterValue : uint8_t {
	EDPV_UserSet = 0,
	EDPV_AutoSet = 1,
	EDPV_VelocityX = 2,
	EDPV_VelocityY = 3,
	EDPV_VelocityZ = 4,
	EDPV_VelocityMag = 5,
	EDPV_MAX = 6,
};

// Enum Engine.EEmitterNormalsMode
enum class EEmitterNormalsMode : uint8_t {
	ENM_CameraFacing = 0,
	ENM_Spherical = 1,
	ENM_Cylindrical = 2,
	ENM_MAX = 3,
};

// Enum Engine.EParticleSortMode
enum class EParticleSortMode : uint8_t {
	PSORTMODE_None = 0,
	PSORTMODE_ViewProjDepth = 1,
	PSORTMODE_DistanceToView = 2,
	PSORTMODE_Age_OldestFirst = 3,
	PSORTMODE_Age_NewestFirst = 4,
	PSORTMODE_MAX = 5,
};

// Enum Engine.EParticleUVFlipMode
enum class EParticleUVFlipMode : uint8_t {
	None = 0,
	FlipUV = 1,
	FlipUOnly = 2,
	FlipVOnly = 3,
	RandomFlipUV = 4,
	RandomFlipUOnly = 5,
	RandomFlipVOnly = 6,
	RandomFlipUVIndependent = 7,
	EParticleUVFlipMode_MAX = 8,
};

// Enum Engine.ETrail2SourceMethod
enum class ETrail2SourceMethod : uint8_t {
	PET2SRCM_Default = 0,
	PET2SRCM_Particle = 1,
	PET2SRCM_Actor = 2,
	PET2SRCM_MAX = 3,
};

// Enum Engine.EBeamTaperMethod
enum class EBeamTaperMethod : uint8_t {
	PEBTM_None = 0,
	PEBTM_Full = 1,
	PEBTM_Partial = 2,
	PEBTM_MAX = 3,
};

// Enum Engine.EBeam2Method
enum class EBeam2Method : uint8_t {
	PEB2M_Distance = 0,
	PEB2M_Target = 1,
	PEB2M_Branch = 2,
	PEB2M_MAX = 3,
};

// Enum Engine.EMeshCameraFacingOptions
enum class EMeshCameraFacingOptions : uint8_t {
	XAxisFacing_NoUp = 0,
	XAxisFacing_ZUp = 1,
	XAxisFacing_NegativeZUp = 2,
	XAxisFacing_YUp = 3,
	XAxisFacing_NegativeYUp = 4,
	LockedAxis_ZAxisFacing = 5,
	LockedAxis_NegativeZAxisFacing = 6,
	LockedAxis_YAxisFacing = 7,
	LockedAxis_NegativeYAxisFacing = 8,
	VelocityAligned_ZAxisFacing = 9,
	VelocityAligned_NegativeZAxisFacing = 10,
	VelocityAligned_YAxisFacing = 11,
	VelocityAligned_NegativeYAxisFacing = 12,
	EMeshCameraFacingOptions_MAX = 13,
};

// Enum Engine.EMeshCameraFacingUpAxis
enum class EMeshCameraFacingUpAxis : uint8_t {
	CameraFacing_NoneUP = 0,
	CameraFacing_ZUp = 1,
	CameraFacing_NegativeZUp = 2,
	CameraFacing_YUp = 3,
	CameraFacing_NegativeYUp = 4,
	CameraFacing_MAX = 5,
};

// Enum Engine.EMeshScreenAlignment
enum class EMeshScreenAlignment : uint8_t {
	PSMA_MeshFaceCameraWithRoll = 0,
	PSMA_MeshFaceCameraWithSpin = 1,
	PSMA_MeshFaceCameraWithLockedAxis = 2,
	PSMA_MAX = 3,
};

// Enum Engine.ETrailsRenderAxisOption
enum class ETrailsRenderAxisOption : uint8_t {
	Trails_CameraUp = 0,
	Trails_SourceUp = 1,
	Trails_WorldUp = 2,
	Trails_MAX = 3,
};

// Enum Engine.EParticleScreenAlignment
enum class EParticleScreenAlignment : uint8_t {
	PSA_FacingCameraPosition = 0,
	PSA_Square = 1,
	PSA_Rectangle = 2,
	PSA_Velocity = 3,
	PSA_AwayFromCenter = 4,
	PSA_TypeSpecific = 5,
	PSA_FacingCameraDistanceBlend = 6,
	PSA_MAX = 7,
};

// Enum Engine.EParticleSystemOcclusionBoundsMethod
enum class EParticleSystemOcclusionBoundsMethod : uint8_t {
	EPSOBM_None = 0,
	EPSOBM_ParticleBounds = 1,
	EPSOBM_CustomBounds = 2,
	EPSOBM_MAX = 3,
};

// Enum Engine.ParticleSystemLODMethod
enum class ParticleSystemLODMethod : uint8_t {
	PARTICLESYSTEMLODMETHOD_Automatic = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic = 2,
	PARTICLESYSTEMLODMETHOD_MAX = 3,
};

// Enum Engine.EParticleSystemUpdateMode
enum class EParticleSystemUpdateMode : uint8_t {
	EPSUM_RealTime = 0,
	EPSUM_FixedTime = 1,
	EPSUM_MAX = 2,
};

// Enum Engine.EParticleEventType
enum class EParticleEventType : uint8_t {
	EPET_Any = 0,
	EPET_Spawn = 1,
	EPET_Death = 2,
	EPET_Collision = 3,
	EPET_Burst = 4,
	EPET_Blueprint = 5,
	EPET_MAX = 6,
};

// Enum Engine.ParticleReplayState
enum class ParticleReplayState : uint8_t {
	PRS_Disabled = 0,
	PRS_Capturing = 1,
	PRS_Replaying = 2,
	PRS_MAX = 3,
};

// Enum Engine.EParticleSysParamType
enum class EParticleSysParamType : uint8_t {
	PSPT_None = 0,
	PSPT_Scalar = 1,
	PSPT_ScalarRand = 2,
	PSPT_Vector = 3,
	PSPT_VectorRand = 4,
	PSPT_Color = 5,
	PSPT_Actor = 6,
	PSPT_Material = 7,
	PSPT_VectorUnitRand = 8,
	PSPT_MAX = 9,
};

// Enum Engine.ESettingsLockedAxis
enum class ESettingsLockedAxis : uint8_t {
	None = 0,
	X = 1,
	Y = 2,
	Z = 3,
	Invalid = 4,
	ESettingsLockedAxis_MAX = 5,
};

// Enum Engine.ESettingsDOF
enum class ESettingsDOF : uint8_t {
	Full3D = 0,
	YZPlane = 1,
	XZPlane = 2,
	XYPlane = 3,
	ESettingsDOF_MAX = 4,
};

// Enum Engine.EFrictionCombineMode
enum class EFrictionCombineMode : uint8_t {
	Average = 0,
	Min = 1,
	Multiply = 2,
	Max = 3,
};

// Enum Engine.EReflectionSourceType
enum class EReflectionSourceType : uint8_t {
	CapturedScene = 0,
	SpecifiedCubemap = 1,
	EReflectionSourceType_MAX = 2,
};

// Enum Engine.EDefaultBackBufferPixelFormat
enum class EDefaultBackBufferPixelFormat : uint8_t {
	DBBPF_B8G8R8A8 = 0,
	DBBPF_A16B16G16R16_DEPRECATED = 1,
	DBBPF_FloatRGB_DEPRECATED = 2,
	DBBPF_FloatRGBA = 3,
	DBBPF_A2B10G10R10 = 4,
	DBBPF_MAX = 5,
};

// Enum Engine.EAutoExposureMethodUI
enum class EAutoExposureMethodUI : uint8_t {
	AEM_Histogram = 0,
	AEM_Basic = 1,
	AEM_Manual = 2,
	AEM_MAX = 3,
};

// Enum Engine.EAlphaChannelMode
enum class EAlphaChannelMode : uint8_t {
	Disabled = 0,
	LinearColorSpaceOnly = 1,
	AllowThroughTonemapper = 2,
	EAlphaChannelMode_MAX = 3,
};

// Enum Engine.EEarlyZPass
enum class EEarlyZPass : uint8_t {
	None = 0,
	OpaqueOnly = 1,
	OpaqueAndMasked = 2,
	Auto = 3,
	EEarlyZPass_MAX = 4,
};

// Enum Engine.ECustomDepthStencil
enum class ECustomDepthStencil : uint8_t {
	Disabled = 0,
	Enabled = 1,
	EnabledOnDemand = 2,
	EnabledWithStencil = 3,
	ECustomDepthStencil_MAX = 4,
};

// Enum Engine.EMobileMSAASampleCount
enum class EMobileMSAASampleCount : uint8_t {
	One = 1,
	Two = 2,
	Four = 4,
	Eight = 8,
	EMobileMSAASampleCount_MAX = 9,
};

// Enum Engine.ECompositingSampleCount
enum class ECompositingSampleCount : uint8_t {
	One = 1,
	Two = 2,
	Four = 4,
	Eight = 8,
	ECompositingSampleCount_MAX = 9,
};

// Enum Engine.EClearSceneOptions
enum class EClearSceneOptions : uint8_t {
	NoClear = 0,
	HardwareClear = 1,
	QuadAtMaxZ = 2,
	EClearSceneOptions_MAX = 3,
};

// Enum Engine.EReporterLineStyle
enum class EReporterLineStyle : uint8_t {
	Line = 0,
	Dash = 1,
	EReporterLineStyle_MAX = 2,
};

// Enum Engine.ELegendPosition
enum class ELegendPosition : uint8_t {
	Outside = 0,
	Inside = 1,
	ELegendPosition_MAX = 2,
};

// Enum Engine.EGraphDataStyle
enum class EGraphDataStyle : uint8_t {
	Lines = 0,
	Filled = 1,
	EGraphDataStyle_MAX = 2,
};

// Enum Engine.EGraphAxisStyle
enum class EGraphAxisStyle : uint8_t {
	Lines = 0,
	Notches = 1,
	Grid = 2,
	EGraphAxisStyle_MAX = 3,
};

// Enum Engine.ReverbPreset
enum class ReverbPreset : uint8_t {
	REVERB_Default = 0,
	REVERB_Bathroom = 1,
	REVERB_StoneRoom = 2,
	REVERB_Auditorium = 3,
	REVERB_ConcertHall = 4,
	REVERB_Cave = 5,
	REVERB_Hallway = 6,
	REVERB_StoneCorridor = 7,
	REVERB_Alley = 8,
	REVERB_Forest = 9,
	REVERB_City = 10,
	REVERB_Mountains = 11,
	REVERB_Quarry = 12,
	REVERB_Plain = 13,
	REVERB_ParkingLot = 14,
	REVERB_SewerPipe = 15,
	REVERB_Underwater = 16,
	REVERB_SmallRoom = 17,
	REVERB_MediumRoom = 18,
	REVERB_LargeRoom = 19,
	REVERB_MediumHall = 20,
	REVERB_LargeHall = 21,
	REVERB_Plate = 22,
	REVERB_MAX = 23,
};

// Enum Engine.ERichCurveKeyTimeCompressionFormat
enum class ERichCurveKeyTimeCompressionFormat : uint8_t {
	RCKTCF_uint16 = 0,
	RCKTCF_float32 = 1,
	RCKTCF_MAX = 2,
};

// Enum Engine.ERichCurveCompressionFormat
enum class ERichCurveCompressionFormat : uint8_t {
	RCCF_Empty = 0,
	RCCF_Constant = 1,
	RCCF_Linear = 2,
	RCCF_Cubic = 3,
	RCCF_Mixed = 4,
	RCCF_MAX = 5,
};

// Enum Engine.EConstraintTransform
enum class EConstraintTransform : uint8_t {
	Absolute = 0,
	Relative = 1,
	EConstraintTransform_MAX = 2,
};

// Enum Engine.EControlConstraint
enum class EControlConstraint : uint8_t {
	Orientation = 0,
	Translation = 1,
	MAX = 2,
};

// Enum Engine.ERootMotionFinishVelocityMode
enum class ERootMotionFinishVelocityMode : uint8_t {
	MaintainLastRootMotionVelocity = 0,
	SetVelocity = 1,
	ClampVelocity = 2,
	ERootMotionFinishVelocityMode_MAX = 3,
};

// Enum Engine.ERootMotionSourceSettingsFlags
enum class ERootMotionSourceSettingsFlags : uint8_t {
	UseSensitiveLiftoffCheck = 1,
	DisablePartialEndTick = 2,
	IgnoreZAccumulate = 4,
	ERootMotionSourceSettingsFlags_MAX = 5,
};

// Enum Engine.ERootMotionSourceStatusFlags
enum class ERootMotionSourceStatusFlags : uint8_t {
	Prepared = 1,
	Finished = 2,
	MarkedForRemoval = 4,
	ERootMotionSourceStatusFlags_MAX = 5,
};

// Enum Engine.ERootMotionAccumulateMode
enum class ERootMotionAccumulateMode : uint8_t {
	Override = 0,
	Additive = 1,
	ERootMotionAccumulateMode_MAX = 2,
};

// Enum Engine.ERuntimeVirtualTextureMaterialType
enum class ERuntimeVirtualTextureMaterialType : uint8_t {
	BaseColor = 0,
	BaseColor_Normal_DEPRECATED = 1,
	BaseColor_Normal_Specular = 2,
	BaseColor_Normal_Specular_YCoCg = 3,
	BaseColor_Normal_Specular_Mask_YCoCg = 4,
	WorldHeight = 5,
	Count = 6,
	ERuntimeVirtualTextureMaterialType_MAX = 7,
};

// Enum Engine.ELightUnits
enum class ELightUnits : uint8_t {
	Unitless = 0,
	Candelas = 1,
	Lumens = 2,
	ELightUnits_MAX = 3,
};

// Enum Engine.EAntiAliasingMethod
enum class EAntiAliasingMethod : uint8_t {
	AAM_None = 0,
	AAM_FXAA = 1,
	AAM_TemporalAA = 2,
	AAM_MSAA = 3,
	AAM_MAX = 4,
};

// Enum Engine.EDepthOfFieldMethod
enum class EDepthOfFieldMethod : uint8_t {
	DOFM_BokehDOF = 0,
	DOFM_Gaussian = 1,
	DOFM_CircleDOF = 2,
	DOFM_MAX = 3,
};

// Enum Engine.ESceneCapturePrimitiveRenderMode
enum class ESceneCapturePrimitiveRenderMode : uint8_t {
	PRM_LegacySceneCapture = 0,
	PRM_RenderScenePrimitives = 1,
	PRM_UseShowOnlyList = 2,
	PRM_MAX = 3,
};

// Enum Engine.EMaterialProperty
enum class EMaterialProperty : uint8_t {
	MP_EmissiveColor = 0,
	MP_Opacity = 1,
	MP_OpacityMask = 2,
	MP_DiffuseColor = 3,
	MP_SpecularColor = 4,
	MP_BaseColor = 5,
	MP_Metallic = 6,
	MP_Specular = 7,
	MP_Roughness = 8,
	MP_Anisotropy = 9,
	MP_Normal = 10,
	MP_Tangent = 11,
	MP_WorldPositionOffset = 12,
	MP_WorldDisplacement = 13,
	MP_TessellationMultiplier = 14,
	MP_SubsurfaceColor = 15,
	MP_CustomData0 = 16,
	MP_CustomData1 = 17,
	MP_AmbientOcclusion = 18,
	MP_Refraction = 19,
	MP_CustomizedUVs0 = 20,
	MP_CustomizedUVs1 = 21,
	MP_CustomizedUVs2 = 22,
	MP_CustomizedUVs3 = 23,
	MP_CustomizedUVs4 = 24,
	MP_CustomizedUVs5 = 25,
	MP_CustomizedUVs6 = 26,
	MP_CustomizedUVs7 = 27,
	MP_PixelDepthOffset = 28,
	MP_ShadingModel = 29,
	MP_MaterialAttributes = 30,
	MP_CustomOutput = 31,
	MP_MAX = 32,
};

// Enum Engine.ESkinCacheDefaultBehavior
enum class ESkinCacheDefaultBehavior : uint8_t {
	Exclusive = 0,
	Inclusive = 1,
	ESkinCacheDefaultBehavior_MAX = 2,
};

// Enum Engine.ESkinCacheUsage
enum class ESkinCacheUsage : uint8_t {
	Auto = 0,
	Disabled = 255,
	Enabled = 1,
	ESkinCacheUsage_MAX = 256,
};

// Enum Engine.EPhysicsTransformUpdateMode
enum class EPhysicsTransformUpdateMode : uint8_t {
	SimulationUpatesComponentTransform = 0,
	ComponentTransformIsKinematic = 1,
	EPhysicsTransformUpdateMode_MAX = 2,
};

// Enum Engine.EAnimationMode
enum class EAnimationMode : uint8_t {
	AnimationBlueprint = 0,
	AnimationSingleNode = 1,
	AnimationCustomMode = 2,
	EAnimationMode_MAX = 3,
};

// Enum Engine.EKinematicBonesUpdateToPhysics
enum class EKinematicBonesUpdateToPhysics : uint8_t {
	SkipSimulatingBones = 0,
	SkipAllBones = 1,
	EKinematicBonesUpdateToPhysics_MAX = 2,
};

// Enum Engine.EClothMassMode
enum class EClothMassMode : uint8_t {
	UniformMass = 0,
	TotalMass = 1,
	Density = 2,
	MaxClothMassMode = 3,
	EClothMassMode_MAX = 4,
};

// Enum Engine.EAnimCurveType
enum class EAnimCurveType : uint8_t {
	AttributeCurve = 0,
	MaterialCurve = 1,
	MorphTargetCurve = 2,
	MaxAnimCurveType = 3,
	EAnimCurveType_MAX = 4,
};

// Enum Engine.ESkeletalMeshSkinningImportVersions
enum class ESkeletalMeshSkinningImportVersions : uint8_t {
	Before_Versionning = 0,
	SkeletalMeshBuildRefactor = 1,
	VersionPlusOne = 2,
	LatestVersion = 1,
	ESkeletalMeshSkinningImportVersions_MAX = 3,
};

// Enum Engine.ESkeletalMeshGeoImportVersions
enum class ESkeletalMeshGeoImportVersions : uint8_t {
	Before_Versionning = 0,
	SkeletalMeshBuildRefactor = 1,
	VersionPlusOne = 2,
	LatestVersion = 1,
	ESkeletalMeshGeoImportVersions_MAX = 3,
};

// Enum Engine.EBoneFilterActionOption
enum class EBoneFilterActionOption : uint8_t {
	Remove = 0,
	Keep = 1,
	Invalid = 2,
	EBoneFilterActionOption_MAX = 3,
};

// Enum Engine.SkeletalMeshOptimizationImportance
enum class SkeletalMeshOptimizationImportance : uint8_t {
	SMOI_Off = 0,
	SMOI_Lowest = 1,
	SMOI_Low = 2,
	SMOI_Normal = 3,
	SMOI_High = 4,
	SMOI_Highest = 5,
	SMOI_MAX = 6,
};

// Enum Engine.SkeletalMeshOptimizationType
enum class SkeletalMeshOptimizationType : uint8_t {
	SMOT_NumOfTriangles = 0,
	SMOT_MaxDeviation = 1,
	SMOT_TriangleOrDeviation = 2,
	SMOT_MAX = 3,
};

// Enum Engine.SkeletalMeshTerminationCriterion
enum class SkeletalMeshTerminationCriterion : uint8_t {
	SMTC_NumOfTriangles = 0,
	SMTC_NumOfVerts = 1,
	SMTC_TriangleOrVert = 2,
	SMTC_AbsNumOfTriangles = 3,
	SMTC_AbsNumOfVerts = 4,
	SMTC_AbsTriangleOrVert = 5,
	SMTC_MAX = 6,
};

// Enum Engine.EBoneTranslationRetargetingMode
enum class EBoneTranslationRetargetingMode : uint8_t {
	Animation = 0,
	Skeleton = 1,
	AnimationScaled = 2,
	AnimationRelative = 3,
	OrientAndScale = 4,
	EBoneTranslationRetargetingMode_MAX = 5,
};

// Enum Engine.EBoneSpaces
enum class EBoneSpaces : uint8_t {
	WorldSpace = 0,
	ComponentSpace = 1,
	EBoneSpaces_MAX = 2,
};

// Enum Engine.EVisibilityBasedAnimTickOption
enum class EVisibilityBasedAnimTickOption : uint8_t {
	AlwaysTickPoseAndRefreshBones = 0,
	AlwaysTickPose = 1,
	OnlyTickMontagesWhenNotRendered = 2,
	OnlyTickPoseWhenRendered = 3,
	EVisibilityBasedAnimTickOption_MAX = 4,
};

// Enum Engine.EPhysBodyOp
enum class EPhysBodyOp : uint8_t {
	PBO_None = 0,
	PBO_Term = 1,
	PBO_MAX = 2,
};

// Enum Engine.EBoneVisibilityStatus
enum class EBoneVisibilityStatus : uint8_t {
	BVS_HiddenByParent = 0,
	BVS_Visible = 1,
	BVS_ExplicitlyHidden = 2,
	BVS_MAX = 3,
};

// Enum Engine.ESkyAtmosphereTransformMode
enum class ESkyAtmosphereTransformMode : uint8_t {
	PlanetTopAtAbsoluteWorldOrigin = 0,
	PlanetTopAtComponentTransform = 1,
	PlanetCenterAtComponentTransform = 2,
	ESkyAtmosphereTransformMode_MAX = 3,
};

// Enum Engine.ESpecularOcclusionMode
enum class ESpecularOcclusionMode : uint8_t {
	SOM_NonDirectional = 0,
	SOM_DirectionalCones = 1,
	SOM_Combine = 2,
	SOM_Maximum = 3,
	SOM_MAX = 4,
};

// Enum Engine.ESkyLightSourceType
enum class ESkyLightSourceType : uint8_t {
	SLS_CapturedScene = 0,
	SLS_SpecifiedCubemap = 1,
	SLS_MAX = 2,
};

// Enum Engine.EPriorityAttenuationMethod
enum class EPriorityAttenuationMethod : uint8_t {
	Linear = 0,
	CustomCurve = 1,
	Manual = 2,
	EPriorityAttenuationMethod_MAX = 3,
};

// Enum Engine.ESubmixSendMethod
enum class ESubmixSendMethod : uint8_t {
	Linear = 0,
	CustomCurve = 1,
	Manual = 2,
	ESubmixSendMethod_MAX = 3,
};

// Enum Engine.EReverbSendMethod
enum class EReverbSendMethod : uint8_t {
	Linear = 0,
	CustomCurve = 1,
	Manual = 2,
	EReverbSendMethod_MAX = 3,
};

// Enum Engine.EAirAbsorptionMethod
enum class EAirAbsorptionMethod : uint8_t {
	Linear = 0,
	CustomCurve = 1,
	EAirAbsorptionMethod_MAX = 2,
};

// Enum Engine.ESoundSpatializationAlgorithm
enum class ESoundSpatializationAlgorithm : uint8_t {
	SPATIALIZATION_Default = 0,
	SPATIALIZATION_HRTF = 1,
	SPATIALIZATION_MAX = 2,
};

// Enum Engine.ESoundDistanceCalc
enum class ESoundDistanceCalc : uint8_t {
	SOUNDDISTANCE_Normal = 0,
	SOUNDDISTANCE_InfiniteXYPlane = 1,
	SOUNDDISTANCE_InfiniteXZPlane = 2,
	SOUNDDISTANCE_InfiniteYZPlane = 3,
	SOUNDDISTANCE_MAX = 4,
};

// Enum Engine.EVirtualizationMode
enum class EVirtualizationMode : uint8_t {
	Disabled = 0,
	PlayWhenSilent = 1,
	Restart = 2,
	EVirtualizationMode_MAX = 3,
};

// Enum Engine.EMaxConcurrentResolutionRule
enum class EMaxConcurrentResolutionRule : uint8_t {
	PreventNew = 0,
	StopOldest = 1,
	StopFarthestThenPreventNew = 2,
	StopFarthestThenOldest = 3,
	StopLowestPriority = 4,
	StopQuietest = 5,
	StopLowestPriorityThenPreventNew = 6,
	Count = 7,
	EMaxConcurrentResolutionRule_MAX = 8,
};

// Enum Engine.ESoundGroup
enum class ESoundGroup : uint8_t {
	SOUNDGROUP_Default = 0,
	SOUNDGROUP_Effects = 1,
	SOUNDGROUP_UI = 2,
	SOUNDGROUP_Music = 3,
	SOUNDGROUP_Voice = 4,
	SOUNDGROUP_GameSoundGroup1 = 5,
	SOUNDGROUP_GameSoundGroup2 = 6,
	SOUNDGROUP_GameSoundGroup3 = 7,
	SOUNDGROUP_GameSoundGroup4 = 8,
	SOUNDGROUP_GameSoundGroup5 = 9,
	SOUNDGROUP_GameSoundGroup6 = 10,
	SOUNDGROUP_GameSoundGroup7 = 11,
	SOUNDGROUP_GameSoundGroup8 = 12,
	SOUNDGROUP_GameSoundGroup9 = 13,
	SOUNDGROUP_GameSoundGroup10 = 14,
	SOUNDGROUP_GameSoundGroup11 = 15,
	SOUNDGROUP_GameSoundGroup12 = 16,
	SOUNDGROUP_GameSoundGroup13 = 17,
	SOUNDGROUP_GameSoundGroup14 = 18,
	SOUNDGROUP_GameSoundGroup15 = 19,
	SOUNDGROUP_GameSoundGroup16 = 20,
	SOUNDGROUP_GameSoundGroup17 = 21,
	SOUNDGROUP_GameSoundGroup18 = 22,
	SOUNDGROUP_GameSoundGroup19 = 23,
	SOUNDGROUP_GameSoundGroup20 = 24,
	SOUNDGROUP_MAX = 25,
};

// Enum Engine.ModulationParamMode
enum class ModulationParamMode : uint8_t {
	MPM_Normal = 0,
	MPM_Abs = 1,
	MPM_Direct = 2,
	MPM_MAX = 3,
};

// Enum Engine.ESourceBusChannels
enum class ESourceBusChannels : uint8_t {
	Mono = 0,
	Stereo = 1,
	ESourceBusChannels_MAX = 2,
};

// Enum Engine.ESourceBusSendLevelControlMethod
enum class ESourceBusSendLevelControlMethod : uint8_t {
	Linear = 0,
	CustomCurve = 1,
	Manual = 2,
	ESourceBusSendLevelControlMethod_MAX = 3,
};

// Enum Engine.ESendLevelControlMethod
enum class ESendLevelControlMethod : uint8_t {
	Linear = 0,
	CustomCurve = 1,
	Manual = 2,
	ESendLevelControlMethod_MAX = 3,
};

// Enum Engine.EAudioRecordingExportType
enum class EAudioRecordingExportType : uint8_t {
	SoundWave = 0,
	WavFile = 1,
	EAudioRecordingExportType_MAX = 2,
};

// Enum Engine.ESoundWaveFFTSize
enum class ESoundWaveFFTSize : uint8_t {
	VerySmall_65 = 0,
	Small_257 = 1,
	Medium_513 = 2,
	Large_1025 = 3,
	VeryLarge_2049 = 4,
	ESoundWaveFFTSize_MAX = 5,
};

// Enum Engine.EDecompressionType
enum class EDecompressionType : uint8_t {
	DTYPE_Setup = 0,
	DTYPE_Invalid = 1,
	DTYPE_Preview = 2,
	DTYPE_Native = 3,
	DTYPE_RealTime = 4,
	DTYPE_Procedural = 5,
	DTYPE_Xenon = 6,
	DTYPE_Streaming = 7,
	DTYPE_MAX = 8,
};

// Enum Engine.ESoundWaveLoadingBehavior
enum class ESoundWaveLoadingBehavior : uint8_t {
	Inherited = 0,
	RetainOnLoad = 1,
	PrimeOnLoad = 2,
	LoadOnDemand = 3,
	ForceInline = 4,
	Uninitialized = 255,
	ESoundWaveLoadingBehavior_MAX = 256,
};

// Enum Engine.ESplineCoordinateSpace
enum class ESplineCoordinateSpace : uint8_t {
	Local = 0,
	World = 1,
	ESplineCoordinateSpace_MAX = 2,
};

// Enum Engine.ESplinePointType
enum class ESplinePointType : uint8_t {
	Linear = 0,
	Curve = 1,
	Constant = 2,
	CurveClamped = 3,
	CurveCustomTangent = 4,
	ESplinePointType_MAX = 5,
};

// Enum Engine.ESplineMeshAxis
enum class ESplineMeshAxis : uint8_t {
	X = 0,
	Y = 1,
	Z = 2,
	ESplineMeshAxis_MAX = 3,
};

// Enum Engine.EOptimizationType
enum class EOptimizationType : uint8_t {
	OT_NumOfTriangles = 0,
	OT_MaxDeviation = 1,
	OT_MAX = 2,
};

// Enum Engine.EImportanceLevel
enum class EImportanceLevel : uint8_t {
	IL_Off = 0,
	IL_Lowest = 1,
	IL_Low = 2,
	IL_Normal = 3,
	IL_High = 4,
	IL_Highest = 5,
	TEMP_BROKEN2 = 6,
	EImportanceLevel_MAX = 7,
};

// Enum Engine.ENormalMode
enum class ENormalMode : uint8_t {
	NM_PreserveSmoothingGroups = 0,
	NM_RecalculateNormals = 1,
	NM_RecalculateNormalsSmooth = 2,
	NM_RecalculateNormalsHard = 3,
	TEMP_BROKEN = 4,
	ENormalMode_MAX = 5,
};

// Enum Engine.EStereoLayerShape
enum class EStereoLayerShape : uint8_t {
	SLSH_QuadLayer = 0,
	SLSH_CylinderLayer = 1,
	SLSH_CubemapLayer = 2,
	SLSH_EquirectLayer = 3,
	SLSH_MAX = 4,
};

// Enum Engine.EStereoLayerType
enum class EStereoLayerType : uint8_t {
	SLT_WorldLocked = 0,
	SLT_TrackerLocked = 1,
	SLT_FaceLocked = 2,
	SLT_MAX = 3,
};

// Enum Engine.EOpacitySourceMode
enum class EOpacitySourceMode : uint8_t {
	OSM_Alpha = 0,
	OSM_ColorBrightness = 1,
	OSM_RedChannel = 2,
	OSM_GreenChannel = 3,
	OSM_BlueChannel = 4,
	OSM_MAX = 5,
};

// Enum Engine.ESubUVBoundingVertexCount
enum class ESubUVBoundingVertexCount : uint8_t {
	BVC_FourVertices = 0,
	BVC_EightVertices = 1,
	BVC_MAX = 2,
};

// Enum Engine.EVerticalTextAligment
enum class EVerticalTextAligment : uint8_t {
	EVRTA_TextTop = 0,
	EVRTA_TextCenter = 1,
	EVRTA_TextBottom = 2,
	EVRTA_QuadTop = 3,
	EVRTA_MAX = 4,
};

// Enum Engine.EHorizTextAligment
enum class EHorizTextAligment : uint8_t {
	EHTA_Left = 0,
	EHTA_Center = 1,
	EHTA_Right = 2,
	EHTA_MAX = 3,
};

// Enum Engine.ETextureLossyCompressionAmount
enum class ETextureLossyCompressionAmount : uint8_t {
	TLCA_Default = 0,
	TLCA_None = 1,
	TLCA_Lowest = 2,
	TLCA_Low = 3,
	TLCA_Medium = 4,
	TLCA_High = 5,
	TLCA_Highest = 6,
	TLCA_MAX = 7,
};

// Enum Engine.ETextureCompressionQuality
enum class ETextureCompressionQuality : uint8_t {
	TCQ_Default = 0,
	TCQ_Lowest = 1,
	TCQ_Low = 2,
	TCQ_Medium = 3,
	TCQ_High = 4,
	TCQ_Highest = 5,
	TCQ_MAX = 6,
};

// Enum Engine.ETextureSourceFormat
enum class ETextureSourceFormat : uint8_t {
	TSF_Invalid = 0,
	TSF_G8 = 1,
	TSF_BGRA8 = 2,
	TSF_BGRE8 = 3,
	TSF_RGBA16 = 4,
	TSF_RGBA16F = 5,
	TSF_RGBA8 = 6,
	TSF_RGBE8 = 7,
	TSF_G16 = 8,
	TSF_MAX = 9,
};

// Enum Engine.ETextureSourceArtType
enum class ETextureSourceArtType : uint8_t {
	TSAT_Uncompressed = 0,
	TSAT_PNGCompressed = 1,
	TSAT_DDSFile = 2,
	TSAT_MAX = 3,
};

// Enum Engine.ETextureMipCount
enum class ETextureMipCount : uint8_t {
	TMC_ResidentMips = 0,
	TMC_AllMips = 1,
	TMC_AllMipsBiased = 2,
	TMC_MAX = 3,
};

// Enum Engine.ECompositeTextureMode
enum class ECompositeTextureMode : uint8_t {
	CTM_Disabled = 0,
	CTM_NormalRoughnessToRed = 1,
	CTM_NormalRoughnessToGreen = 2,
	CTM_NormalRoughnessToBlue = 3,
	CTM_NormalRoughnessToAlpha = 4,
	CTM_MAX = 5,
};

// Enum Engine.TextureAddress
enum class TextureAddress : uint8_t {
	TA_Wrap = 0,
	TA_Clamp = 1,
	TA_Mirror = 2,
	TA_MAX = 3,
};

// Enum Engine.TextureCompressionSettings
enum class TextureCompressionSettings : uint8_t {
	TC_Default = 0,
	TC_Normalmap = 1,
	TC_Masks = 2,
	TC_Grayscale = 3,
	TC_Displacementmap = 4,
	TC_VectorDisplacementmap = 5,
	TC_HDR = 6,
	TC_EditorIcon = 7,
	TC_Alpha = 8,
	TC_DistanceFieldFont = 9,
	TC_HDR_Compressed = 10,
	TC_BC7 = 11,
	TC_MAX = 12,
};

// Enum Engine.ETextureMipLoadOptions
enum class ETextureMipLoadOptions : uint8_t {
	Default = 0,
	AllMips = 1,
	OnlyFirstMip = 2,
	ETextureMipLoadOptions_MAX = 3,
};

// Enum Engine.ETextureSamplerFilter
enum class ETextureSamplerFilter : uint8_t {
	Point = 0,
	Bilinear = 1,
	Trilinear = 2,
	AnisotropicPoint = 3,
	AnisotropicLinear = 4,
	ETextureSamplerFilter_MAX = 5,
};

// Enum Engine.ETexturePowerOfTwoSetting
enum class ETexturePowerOfTwoSetting : uint8_t {
	None = 0,
	PadToPowerOfTwo = 1,
	PadToSquarePowerOfTwo = 2,
	ETexturePowerOfTwoSetting_MAX = 3,
};

// Enum Engine.TextureMipGenSettings
enum class TextureMipGenSettings : uint8_t {
	TMGS_FromTextureGroup = 0,
	TMGS_SimpleAverage = 1,
	TMGS_Sharpen0 = 2,
	TMGS_Sharpen1 = 3,
	TMGS_Sharpen2 = 4,
	TMGS_Sharpen3 = 5,
	TMGS_Sharpen4 = 6,
	TMGS_Sharpen5 = 7,
	TMGS_Sharpen6 = 8,
	TMGS_Sharpen7 = 9,
	TMGS_Sharpen8 = 10,
	TMGS_Sharpen9 = 11,
	TMGS_Sharpen10 = 12,
	TMGS_NoMipmaps = 13,
	TMGS_LeaveExistingMips = 14,
	TMGS_Blur1 = 15,
	TMGS_Blur2 = 16,
	TMGS_Blur3 = 17,
	TMGS_Blur4 = 18,
	TMGS_Blur5 = 19,
	TMGS_Unfiltered = 20,
	TMGS_MAX = 21,
};

// Enum Engine.TextureGroup
enum class TextureGroup : uint8_t {
	TEXTUREGROUP_World = 0,
	TEXTUREGROUP_WorldNormalMap = 1,
	TEXTUREGROUP_WorldSpecular = 2,
	TEXTUREGROUP_Character = 3,
	TEXTUREGROUP_CharacterNormalMap = 4,
	TEXTUREGROUP_CharacterSpecular = 5,
	TEXTUREGROUP_Weapon = 6,
	TEXTUREGROUP_WeaponNormalMap = 7,
	TEXTUREGROUP_WeaponSpecular = 8,
	TEXTUREGROUP_Vehicle = 9,
	TEXTUREGROUP_VehicleNormalMap = 10,
	TEXTUREGROUP_VehicleSpecular = 11,
	TEXTUREGROUP_Cinematic = 12,
	TEXTUREGROUP_Effects = 13,
	TEXTUREGROUP_EffectsNotFiltered = 14,
	TEXTUREGROUP_Skybox = 15,
	TEXTUREGROUP_UI = 16,
	TEXTUREGROUP_Lightmap = 17,
	TEXTUREGROUP_RenderTarget = 18,
	TEXTUREGROUP_MobileFlattened = 19,
	TEXTUREGROUP_ProcBuilding_Face = 20,
	TEXTUREGROUP_ProcBuilding_LightMap = 21,
	TEXTUREGROUP_Shadowmap = 22,
	TEXTUREGROUP_ColorLookupTable = 23,
	TEXTUREGROUP_Terrain_Heightmap = 24,
	TEXTUREGROUP_Terrain_Weightmap = 25,
	TEXTUREGROUP_Bokeh = 26,
	TEXTUREGROUP_IESLightProfile = 27,
	TEXTUREGROUP_Pixels2D = 28,
	TEXTUREGROUP_HierarchicalLOD = 29,
	TEXTUREGROUP_Impostor = 30,
	TEXTUREGROUP_ImpostorNormalDepth = 31,
	TEXTUREGROUP_8BitData = 32,
	TEXTUREGROUP_16BitData = 33,
	TEXTUREGROUP_Project01 = 34,
	TEXTUREGROUP_Project02 = 35,
	TEXTUREGROUP_Project03 = 36,
	TEXTUREGROUP_Project04 = 37,
	TEXTUREGROUP_Project05 = 38,
	TEXTUREGROUP_Project06 = 39,
	TEXTUREGROUP_Project07 = 40,
	TEXTUREGROUP_Project08 = 41,
	TEXTUREGROUP_Project09 = 42,
	TEXTUREGROUP_Project10 = 43,
	TEXTUREGROUP_Project11 = 44,
	TEXTUREGROUP_Project12 = 45,
	TEXTUREGROUP_Project13 = 46,
	TEXTUREGROUP_Project14 = 47,
	TEXTUREGROUP_Project15 = 48,
	TEXTUREGROUP_MAX = 49,
};

// Enum Engine.ETextureRenderTargetFormat
enum class ETextureRenderTargetFormat : uint8_t {
	RTF_R8 = 0,
	RTF_RG8 = 1,
	RTF_RGBA8 = 2,
	RTF_RGBA8_SRGB = 3,
	RTF_R16f = 4,
	RTF_RG16f = 5,
	RTF_RGBA16f = 6,
	RTF_R32f = 7,
	RTF_RG32f = 8,
	RTF_RGBA32f = 9,
	RTF_RGB10A2 = 10,
	RTF_MAX = 11,
};

// Enum Engine.ETimecodeProviderSynchronizationState
enum class ETimecodeProviderSynchronizationState : uint8_t {
	Closed = 0,
	Error = 1,
	Synchronized = 2,
	Synchronizing = 3,
	ETimecodeProviderSynchronizationState_MAX = 4,
};

// Enum Engine.ETimelineDirection
enum class ETimelineDirection : uint8_t {
	Forward = 0,
	Backward = 1,
	ETimelineDirection_MAX = 2,
};

// Enum Engine.ETimeStretchCurveMapping
enum class ETimeStretchCurveMapping : uint8_t {
	T_Original = 0,
	T_TargetMin = 1,
	T_TargetMax = 2,
	MAX = 3,
};

// Enum Engine.ETwitterIntegrationDelegate
enum class ETwitterIntegrationDelegate : uint8_t {
	TID_AuthorizeComplete = 0,
	TID_TweetUIComplete = 1,
	TID_RequestComplete = 2,
	TID_MAX = 3,
};

// Enum Engine.ETwitterRequestMethod
enum class ETwitterRequestMethod : uint8_t {
	TRM_Get = 0,
	TRM_Post = 1,
	TRM_Delete = 2,
	TRM_MAX = 3,
};

// Enum Engine.EUserDefinedStructureStatus
enum class EUserDefinedStructureStatus : uint8_t {
	UDSS_UpToDate = 0,
	UDSS_Dirty = 1,
	UDSS_Error = 2,
	UDSS_Duplicate = 3,
	UDSS_MAX = 4,
};

// Enum Engine.EUIScalingRule
enum class EUIScalingRule : uint8_t {
	ShortestSide = 0,
	LongestSide = 1,
	Horizontal = 2,
	Vertical = 3,
	Custom = 4,
	EUIScalingRule_MAX = 5,
};

// Enum Engine.ERenderFocusRule
enum class ERenderFocusRule : uint8_t {
	Always = 0,
	NonPointer = 1,
	NavigationOnly = 2,
	Never = 3,
	ERenderFocusRule_MAX = 4,
};

// Enum Engine.EVectorFieldConstructionOp
enum class EVectorFieldConstructionOp : uint8_t {
	VFCO_Extrude = 0,
	VFCO_Revolve = 1,
	VFCO_MAX = 2,
};

// Enum Engine.EWindSourceType
enum class EWindSourceType : uint8_t {
	Directional = 0,
	Point = 1,
	EWindSourceType_MAX = 2,
};

// Enum Engine.ELevelScanRule
enum class ELevelScanRule : uint8_t {
	All = 0,
	EXT_World = 1,
	EXT_Only = 2,
	Grid_World = 3,
	Grid_Only = 4,
	Landscape_Only = 5,
	WorldArt = 6,
	Dev = 7,
	Custom = 8,
	ELevelScanRule_MAX = 9,
};

// Enum Engine.EPSCPoolMethod
enum class EPSCPoolMethod : uint8_t {
	None = 0,
	AutoRelease = 1,
	ManualRelease = 2,
	ManualRelease_OnComplete = 3,
	FreeInPool = 4,
	EPSCPoolMethod_MAX = 5,
};

// Enum Engine.EVolumeLightingMethod
enum class EVolumeLightingMethod : uint8_t {
	VLM_VolumetricLightmap = 0,
	VLM_SparseVolumeLightingSamples = 1,
	VLM_MAX = 2,
};

// Enum Engine.EVisibilityAggressiveness
enum class EVisibilityAggressiveness : uint8_t {
	VIS_LeastAggressive = 0,
	VIS_ModeratelyAggressive = 1,
	VIS_MostAggressive = 2,
	VIS_Max = 3,
};

// Class Engine.ActorComponent
class UActorComponent : public Object {

public:

	struct Unknown PrimaryComponentTick; // 0x30 (48)
	struct TArray<Unknown> ComponentTags; // 0x60 (16)
	struct TArray<Unknown> AssetUserData; // 0x70 (16)
	int32_t UCSSerializationIndex; // 0x84 (4)
	char bNetAddressable : 0; // 0x88 (1)
	char bReplicates : 0; // 0x88 (1)
	char bAutoActivate : 0; // 0x89 (1)
	char bIsActive : 0; // 0x8A (1)
	char bEditableWhenInherited : 0; // 0x8A (1)
	char bCanEverAffectNavigation : 0; // 0x8A (1)
	char bIsEditorOnly : 0; // 0x8A (1)
	enum class Unknow CreationMethod; // 0x8C (1)
	struct FMulticastSparseDelegate OnComponentActivated; // 0x8D (1)
	struct FMulticastSparseDelegate OnComponentDeactivated; // 0x8E (1)
	struct TArray<Unknown> UCSModifiedProperties; // 0x90 (16)

	void ToggleActive(); // Function Engine.ActorComponent.ToggleActive(Native|Public|BlueprintCallable) // <Game_BE.exe+0x3B58CE0>
	void SetTickGroup(char NewTickGroup); // Function Engine.ActorComponent.SetTickGroup(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4438F90>
	void SetTickableWhenPaused(char bTickableWhenPaused); // Function Engine.ActorComponent.SetTickableWhenPaused(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4439010>
	void SetIsReplicated(char ShouldReplicate); // Function Engine.ActorComponent.SetIsReplicated(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4438F00>
	void SetComponentTickInterval(float TickInterval); // Function Engine.ActorComponent.SetComponentTickInterval(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4438E80>
	void SetComponentTickEnabled(char bEnabled); // Function Engine.ActorComponent.SetComponentTickEnabled(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4433D50>
	void SetAutoActivate(char bNewAutoActivate); // Function Engine.ActorComponent.SetAutoActivate(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4438DF0>
	void SetActive(char bNewActive, char bReset); // Function Engine.ActorComponent.SetActive(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4438D20>
	void RemoveTickPrerequisiteComponent(struct Unknown PrerequisiteComponent); // Function Engine.ActorComponent.RemoveTickPrerequisiteComponent(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4438C90>
	void RemoveTickPrerequisiteActor(struct Unknown PrerequisiteActor); // Function Engine.ActorComponent.RemoveTickPrerequisiteActor(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4438C00>
	void ReceiveTick(float DeltaSeconds); // Function Engine.ActorComponent.ReceiveTick(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveEndPlay(char EndPlayReason); // Function Engine.ActorComponent.ReceiveEndPlay(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveBeginPlay(); // Function Engine.ActorComponent.ReceiveBeginPlay(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void OnRep_IsActive(); // Function Engine.ActorComponent.OnRep_IsActive(Native|Public) // <Game_BE.exe+0x36B0790>
	void K2_DestroyComponent(struct Unknown Object); // Function Engine.ActorComponent.K2_DestroyComponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4438B00>
	char IsComponentTickEnabled(); // Function Engine.ActorComponent.IsComponentTickEnabled(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4438AD0>
	char IsBeingDestroyed(); // Function Engine.ActorComponent.IsBeingDestroyed(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4438AA0>
	char IsActive(); // Function Engine.ActorComponent.IsActive(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4438A70>
	struct Unknown GetOwner(); // Function Engine.ActorComponent.GetOwner(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4438A50>
	float GetComponentTickInterval(); // Function Engine.ActorComponent.GetComponentTickInterval(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4438A20>
	void Deactivate(); // Function Engine.ActorComponent.Deactivate(Native|Public|BlueprintCallable) // <Game_BE.exe+0x36B0770>
	char ComponentHasTag(struct FName Tag); // Function Engine.ActorComponent.ComponentHasTag(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4438810>
	void AddTickPrerequisiteComponent(struct Unknown PrerequisiteComponent); // Function Engine.ActorComponent.AddTickPrerequisiteComponent(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44386C0>
	void AddTickPrerequisiteActor(struct Unknown PrerequisiteActor); // Function Engine.ActorComponent.AddTickPrerequisiteActor(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4438630>
	void Activate(char bReset); // Function Engine.ActorComponent.Activate(Native|Public|BlueprintCallable) // <Game_BE.exe+0x3B58F80>
};

// Class Engine.SceneComponent
class USceneComponent : public UActorComponent {

public:

	struct TWeakObjectPtr<struct Unknown> PhysicsVolume; // 0x114 (8)
	struct Unknown AttachParent; // 0x170 (8)
	struct FName AttachSocketName; // 0x164 (8)
	struct TArray<Unknown> AttachChildren; // 0xF0 (16)
	struct TArray<Unknown> ClientAttachedChildren; // 0x178 (16)
	struct Unknown RelativeLocation; // 0xB8 (12)
	struct Unknown RelativeRotation; // 0x120 (12)
	struct Unknown RelativeScale3D; // 0x1C0 (12)
	struct Unknown ComponentVelocity; // 0x108 (12)
	char bComponentToWorldUpdated : 0; // 0x11D (1)
	char bAbsoluteLocation : 0; // 0x148 (1)
	char bAbsoluteRotation : 0; // 0x16C (1)
	char bAbsoluteScale : 0; // 0x148 (1)
	char bVisible : 0; // 0xC4 (1)
	char bShouldBeAttached : 0; // 0x160 (1)
	char bShouldSnapLocationWhenAttached : 0; // 0x220 (1)
	char bShouldSnapRotationWhenAttached : 0; // 0x160 (1)
	char bShouldUpdatePhysicsVolume : 0; // 0x220 (1)
	char bHiddenInGame : 0; // 0xC4 (1)
	char bBoundsChangeTriggersStreamingDataRebuild : 0; // 0x1B2 (1)
	char bUseAttachParentBound : 0; // 0x1B0 (1)
	char Mobility; // 0x12C (1)
	char DetailMode; // 0x11C (1)
	struct FMulticastSparseDelegate PhysicsVolumeChangedDelegate; // 0x1BC (1)

	void ToggleVisibility(char bPropagateToChildren); // Function Engine.SceneComponent.ToggleVisibility(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B7740>
	char SnapTo(struct Unknown InParent, struct FName InSocketName); // Function Engine.SceneComponent.SnapTo(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B7680>
	void SetWorldScale3D(struct Unknown NewScale); // Function Engine.SceneComponent.SetWorldScale3D(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B74A0>
	void SetVisibility(char bNewVisibility, char bPropagateToChildren); // Function Engine.SceneComponent.SetVisibility(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B73D0>
	void SetShouldUpdatePhysicsVolume(char bInShouldUpdatePhysicsVolume); // Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B7340>
	void SetRelativeScale3D(struct Unknown NewScale3D); // Function Engine.SceneComponent.SetRelativeScale3D(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B72B0>
	void SetMobility(char NewMobility); // Function Engine.SceneComponent.SetMobility(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B7230>
	void SetHiddenInGame(char NewHidden, char bPropagateToChildren); // Function Engine.SceneComponent.SetHiddenInGame(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B7160>
	void SetAbsolute(char bNewAbsoluteLocation, char bNewAbsoluteRotation, char bNewAbsoluteScale); // Function Engine.SceneComponent.SetAbsolute(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B6FC0>
	void ResetRelativeTransform(); // Function Engine.SceneComponent.ResetRelativeTransform(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B6FA0>
	void OnRep_Visibility(char OldValue); // Function Engine.SceneComponent.OnRep_Visibility(Final|Native|Private) // <Game_BE.exe+0x45B6DC0>
	void OnRep_Transform(); // Function Engine.SceneComponent.OnRep_Transform(Final|Native|Private) // <Game_BE.exe+0x45B6DA0>
	void OnRep_AttachSocketName(); // Function Engine.SceneComponent.OnRep_AttachSocketName(Final|Native|Private) // <Game_BE.exe+0x45B6D80>
	void OnRep_AttachParent(); // Function Engine.SceneComponent.OnRep_AttachParent(Final|Native|Private) // <Game_BE.exe+0x45B6D80>
	void OnRep_AttachChildren(); // Function Engine.SceneComponent.OnRep_AttachChildren(Final|Native|Private) // <Game_BE.exe+0x45B6D60>
	void K2_SetWorldTransform(struct Unknown& NewTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_SetWorldTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B6B60>
	void K2_SetWorldRotation(struct Unknown NewRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_SetWorldRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B69C0>
	void K2_SetWorldLocationAndRotation(struct Unknown NewLocation, struct Unknown NewRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocationAndRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B67D0>
	void K2_SetWorldLocation(struct Unknown NewLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B6630>
	void K2_SetRelativeTransform(struct Unknown& NewTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_SetRelativeTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B6430>
	void K2_SetRelativeRotation(struct Unknown NewRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_SetRelativeRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B6290>
	void K2_SetRelativeLocationAndRotation(struct Unknown NewLocation, struct Unknown NewRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B60A0>
	void K2_SetRelativeLocation(struct Unknown NewLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B5F00>
	struct Unknown K2_GetComponentToWorld(); // Function Engine.SceneComponent.K2_GetComponentToWorld(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B5EA0>
	struct Unknown K2_GetComponentScale(); // Function Engine.SceneComponent.K2_GetComponentScale(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B5E60>
	struct Unknown K2_GetComponentRotation(); // Function Engine.SceneComponent.K2_GetComponentRotation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B5E20>
	struct Unknown K2_GetComponentLocation(); // Function Engine.SceneComponent.K2_GetComponentLocation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B5DE0>
	void K2_DetachFromComponent(enum class Unknow LocationRule, enum class Unknow RotationRule, enum class Unknow ScaleRule, char bCallModify); // Function Engine.SceneComponent.K2_DetachFromComponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B5C90>
	char K2_AttachToComponent(struct Unknown Parent, struct FName SocketName, enum class Unknow LocationRule, enum class Unknow RotationRule, enum class Unknow ScaleRule, char bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachToComponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B5AE0>
	char K2_AttachTo(struct Unknown InParent, struct FName InSocketName, char AttachType, char bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachTo(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B5990>
	void K2_AddWorldTransform(struct Unknown& DeltaTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_AddWorldTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B5790>
	void K2_AddWorldRotation(struct Unknown DeltaRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_AddWorldRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B55F0>
	void K2_AddWorldOffset(struct Unknown DeltaLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_AddWorldOffset(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B5450>
	void K2_AddRelativeRotation(struct Unknown DeltaRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_AddRelativeRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B52B0>
	void K2_AddRelativeLocation(struct Unknown DeltaLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_AddRelativeLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B5110>
	void K2_AddLocalTransform(struct Unknown& DeltaTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_AddLocalTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B4F10>
	void K2_AddLocalRotation(struct Unknown DeltaRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_AddLocalRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B4D70>
	void K2_AddLocalOffset(struct Unknown DeltaLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.SceneComponent.K2_AddLocalOffset(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45B4BD0>
	char IsVisible(); // Function Engine.SceneComponent.IsVisible(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4BA0>
	char IsSimulatingPhysics(struct FName BoneName); // Function Engine.SceneComponent.IsSimulatingPhysics(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4B00>
	char IsAnySimulatingPhysics(); // Function Engine.SceneComponent.IsAnySimulatingPhysics(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4AD0>
	struct Unknown GetUpVector(); // Function Engine.SceneComponent.GetUpVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4940>
	struct Unknown GetSocketTransform(struct FName InSocketName, char TransformSpace); // Function Engine.SceneComponent.GetSocketTransform(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4840>
	struct Unknown GetSocketRotation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketRotation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4790>
	struct Unknown GetSocketQuaternion(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketQuaternion(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B46F0>
	struct Unknown GetSocketLocation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketLocation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4640>
	char GetShouldUpdatePhysicsVolume(); // Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4610>
	struct Unknown GetRightVector(); // Function Engine.SceneComponent.GetRightVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B45D0>
	struct Unknown GetRelativeTransform(); // Function Engine.SceneComponent.GetRelativeTransform(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4570>
	struct Unknown GetPhysicsVolume(); // Function Engine.SceneComponent.GetPhysicsVolume(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4540>
	void GetParentComponents(struct TArray<Unknown>& Parents); // Function Engine.SceneComponent.GetParentComponents(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4490>
	int32_t GetNumChildrenComponents(); // Function Engine.SceneComponent.GetNumChildrenComponents(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4460>
	struct Unknown GetForwardVector(); // Function Engine.SceneComponent.GetForwardVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x458B200>
	struct Unknown GetComponentVelocity(); // Function Engine.SceneComponent.GetComponentVelocity(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4420>
	void GetChildrenComponents(char bIncludeAllDescendants, struct TArray<Unknown>& Children); // Function Engine.SceneComponent.GetChildrenComponents(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4320>
	struct Unknown GetChildComponent(int32_t ChildIndex); // Function Engine.SceneComponent.GetChildComponent(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4290>
	struct FName GetAttachSocketName(); // Function Engine.SceneComponent.GetAttachSocketName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4270>
	struct Unknown GetAttachParent(); // Function Engine.SceneComponent.GetAttachParent(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4250>
	struct TArray<Unknown> GetAllSocketNames(); // Function Engine.SceneComponent.GetAllSocketNames(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B41D0>
	char DoesSocketExist(struct FName InSocketName); // Function Engine.SceneComponent.DoesSocketExist(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45B4130>
	void DetachFromParent(char bMaintainWorldPosition, char bCallModify); // Function Engine.SceneComponent.DetachFromParent(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B4060>
};

// Class Engine.MKActorEx
class UMKActorEx : public Object {

public:

	char ReplaySamplable; // 0x28 (1)
	struct Unknown* ReplaySampleClass; // 0x30 (8)
	float ReplaySamplingFrequency; // 0x38 (4)
	uint32_t ClientReplaySamplingGUID; // 0x3C (4)
	char bReplayLevelAttached : 0; // 0x44 (1)
	struct TArray<Unknown> ReplaySamplesForPlayback; // 0x68 (16)
	struct Unknown SelfActor; // 0x88 (8)

	void OnTickReplaySampleRecord(struct Unknown DemoNetDriver, float MinRecordHz, float MaxRecordHz, char bSaveCheckpoint); // Function Engine.MKActorEx.OnTickReplaySampleRecord(Final|Native|Private) // <Game_BE.exe+0x4564B10>
	void OnTickReplaySamplePlayback(struct Unknown DemoNetDriver); // Function Engine.MKActorEx.OnTickReplaySamplePlayback(Final|Native|Private) // <Game_BE.exe+0x4564A90>
	void OnReplayPreScrub(struct Unknown InWorld); // Function Engine.MKActorEx.OnReplayPreScrub(Native|Protected) // <Game_BE.exe+0x36B0500>
	void OnPostRecordReplay(struct Unknown InWorld, struct Unknown& DemoURL); // Function Engine.MKActorEx.OnPostRecordReplay(Final|Native|Private|HasOutParms) // <Game_BE.exe+0x45649A0>
	void LerpReplaySampleForPlayback(struct Unknown DemoNetDriver, struct Unknown L, struct Unknown R, float LerpPercent); // Function Engine.MKActorEx.LerpReplaySampleForPlayback(Native|Event|Protected|BlueprintEvent) // <Game_BE.exe+0x4564760>
	char HandleTimelineScrubbed(); // Function Engine.MKActorEx.HandleTimelineScrubbed(Native|Public) // <Game_BE.exe+0x36B0710>
	void GatherReplaySampleForRecording(struct Unknown DemoNetDriver, float DemoCurrentTime, char bSaveCheckpoint); // Function Engine.MKActorEx.GatherReplaySampleForRecording(Native|Event|Protected|BlueprintEvent) // <Game_BE.exe+0x4563620>
	void ForceReplaySamplingUpdate(); // Function Engine.MKActorEx.ForceReplaySamplingUpdate(Native|Public|BlueprintCallable) // <Game_BE.exe+0x448C350>
};

// Class Engine.Actor
class UActor : public UMKActorEx {

public:

	struct Unknown PrimaryActorTick; // 0x148 (48)
	char bNetTemporary : 0; // 0x198 (1)
	char bNetStartup : 0; // 0x198 (1)
	char bOnlyRelevantToOwner : 0; // 0x214 (1)
	char bAlwaysRelevant : 0; // 0x90 (1)
	char bReplicateMovement : 0; // 0x11A (1)
	char bHidden : 0; // 0x2CC (1)
	char bTearOff : 0; // 0x30E (1)
	char bExchangedRoles : 0; // 0x2B0 (1)
	char bNetLoadOnClient : 0; // 0x98 (1)
	char bNetUseOwnerRelevancy : 0; // 0x2A9 (1)
	char bRelevantForNetworkReplays : 0; // 0x2A9 (1)
	char bRelevantForLevelBounds : 0; // 0x238 (1)
	char bReplayRewindable : 0; // 0x2F8 (1)
	char bAllowTickBeforeBeginPlay : 0; // 0x290 (1)
	char bAutoDestroyWhenFinished : 0; // 0x2F8 (1)
	char bCanBeDamaged : 0; // 0x224 (1)
	char bBlockInput : 0; // 0xD3 (1)
	char bCollideWhenPlacing : 0; // 0x2E2 (1)
	char bFindCameraComponentWhenViewTarget : 0; // 0xD1 (1)
	char bGenerateOverlapEventsDuringLevelStreaming : 0; // 0x2B0 (1)
	char bIgnoresOriginShifting : 0; // 0x2CC (1)
	char bEnableAutoLODGeneration : 0; // 0x184 (1)
	char bIsEditorOnlyActor : 0; // 0x128 (1)
	char bActorSeamlessTraveled : 0; // 0x11A (1)
	char bReplicates : 0; // 0x2E0 (1)
	char bCanBeInCluster : 0; // 0x2CE (1)
	char bAllowReceiveTickEventOnDedicatedServer : 0; // 0x11A (1)
	char bActorEnableCollision : 0; // 0x98 (1)
	char bActorIsBeingDestroyed : 0; // 0x270 (1)
	enum class Unknow UpdateOverlapsMethodDuringLevelStreaming; // 0x215 (1)
	enum class Unknow DefaultUpdateOverlapsMethodDuringLevelStreaming; // 0x30D (1)
	char RemoteRole; // 0xD0 (1)
	struct Unknown ReplicatedMovement; // 0x9C (52)
	float InitialLifeSpan; // 0x310 (4)
	float CustomTimeDilation; // 0x1B4 (4)
	struct Unknown AttachmentReplication; // 0xD8 (64)
	struct Unknown Owner; // 0x278 (8)
	struct FName NetDriverName; // 0x20C (8)
	char Role; // 0x17C (1)
	char NetDormancy; // 0x2E3 (1)
	enum class Unknow SpawnCollisionHandlingMethod; // 0x99 (1)
	char AutoReceiveInput; // 0x119 (1)
	int32_t InputPriority; // 0x2C8 (4)
	struct Unknown InputComponent; // 0x2D8 (8)
	float NetCullDistanceSquared; // 0x2AC (4)
	int32_t NetTag; // 0x220 (4)
	float NetUpdateFrequency; // 0x12C (4)
	float MinNetUpdateFrequency; // 0x308 (4)
	float NetPriority; // 0x94 (4)
	struct Unknown Instigator; // 0x120 (8)
	struct TArray<Unknown> Children; // 0x2B8 (16)
	struct Unknown RootComponent; // 0x138 (8)
	struct TArray<Unknown> ControllingMatineeActors; // 0x188 (16)
	struct TArray<Unknown> Layers; // 0x240 (16)
	struct TWeakObjectPtr<struct Unknown> ParentComponent; // 0x2FC (8)
	char bEnableRerunConstructionScript : 0; // 0x11C (1)
	struct TArray<Unknown> Tags; // 0x1A0 (16)
	struct FMulticastSparseDelegate OnTakeAnyDamage; // 0x208 (1)
	struct FMulticastSparseDelegate OnTakePointDamage; // 0x304 (1)
	struct FMulticastSparseDelegate OnTakeRadialDamage; // 0x11D (1)
	struct FMulticastSparseDelegate OnActorBeginOverlap; // 0x2A8 (1)
	struct FMulticastSparseDelegate OnActorEndOverlap; // 0x11B (1)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0xD2 (1)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0x2CF (1)
	struct FMulticastSparseDelegate OnClicked; // 0x118 (1)
	struct FMulticastSparseDelegate OnReleased; // 0x2E1 (1)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x30C (1)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x2CD (1)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x271 (1)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x130 (1)
	struct FMulticastSparseDelegate OnActorHit; // 0x2D0 (1)
	struct FMulticastSparseDelegate OnDestroyed; // 0x239 (1)
	struct FMulticastSparseDelegate OnEndPlay; // 0x23B (1)
	struct TArray<Unknown> InstanceComponents; // 0x250 (16)
	struct TArray<Unknown> BlueprintCreatedComponents; // 0x228 (16)
	struct TArray<Unknown> LoadedObjects; // 0x298 (16)

	char WasRecentlyRendered(float Tolerance); // Function Engine.Actor.WasRecentlyRendered(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4434540>
	void UserConstructionScript(); // Function Engine.Actor.UserConstructionScript(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void TearOff(); // Function Engine.Actor.TearOff(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4434520>
	void SnapRootComponentTo(struct Unknown InParentActor, struct FName InSocketName); // Function Engine.Actor.SnapRootComponentTo(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4434460>
	void SetTickGroup(char NewTickGroup); // Function Engine.Actor.SetTickGroup(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4434350>
	void SetTickableWhenPaused(char bTickableWhenPaused); // Function Engine.Actor.SetTickableWhenPaused(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44343D0>
	void SetReplicates(char bInReplicates); // Function Engine.Actor.SetReplicates(Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44342C0>
	void SetReplicateMovement(char bInReplicateMovement); // Function Engine.Actor.SetReplicateMovement(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4434230>
	void SetOwner(struct Unknown NewOwner); // Function Engine.Actor.SetOwner(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44341A0>
	void SetNetDormancy(char NewDormancy); // Function Engine.Actor.SetNetDormancy(Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4434120>
	void SetLifeSpan(float InLifespan); // Function Engine.Actor.SetLifeSpan(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44340A0>
	void SetAutoDestroyWhenFinished(char bVal); // Function Engine.Actor.SetAutoDestroyWhenFinished(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4434010>
	void SetActorTickInterval(float TickInterval); // Function Engine.Actor.SetActorTickInterval(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4433F90>
	void SetActorTickEnabled(char bEnabled); // Function Engine.Actor.SetActorTickEnabled(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4433F00>
	void SetActorScale3D(struct Unknown NewScale3D); // Function Engine.Actor.SetActorScale3D(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4433E70>
	void SetActorRelativeScale3D(struct Unknown NewRelativeScale); // Function Engine.Actor.SetActorRelativeScale3D(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4433DE0>
	void SetActorHiddenInGame(char bNewHidden); // Function Engine.Actor.SetActorHiddenInGame(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4433D50>
	void SetActorEnableCollision(char bNewActorEnableCollision); // Function Engine.Actor.SetActorEnableCollision(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4433CC0>
	void RemoveTickPrerequisiteComponent(struct Unknown PrerequisiteComponent); // Function Engine.Actor.RemoveTickPrerequisiteComponent(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4433C30>
	void RemoveTickPrerequisiteActor(struct Unknown PrerequisiteActor); // Function Engine.Actor.RemoveTickPrerequisiteActor(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4433BA0>
	void ReceiveTick(float DeltaSeconds); // Function Engine.Actor.ReceiveTick(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveRadialDamage(float DamageReceived, struct Unknown DamageType, struct Unknown Origin, struct Unknown& HitInfo, struct Unknown InstigatedBy, struct Unknown DamageCauser); // Function Engine.Actor.ReceiveRadialDamage(BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceivePointDamage(float Damage, struct Unknown DamageType, struct Unknown HitLocation, struct Unknown HitNormal, struct Unknown HitComponent, struct FName BoneName, struct Unknown ShotFromDirection, struct Unknown InstigatedBy, struct Unknown DamageCauser, struct Unknown& HitInfo); // Function Engine.Actor.ReceivePointDamage(BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveHit(struct Unknown MyComp, struct Unknown Other, struct Unknown OtherComp, char bSelfMoved, struct Unknown HitLocation, struct Unknown HitNormal, struct Unknown NormalImpulse, struct Unknown& Hit); // Function Engine.Actor.ReceiveHit(Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveEndPlay(char EndPlayReason); // Function Engine.Actor.ReceiveEndPlay(Event|Protected|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveDestroyed(); // Function Engine.Actor.ReceiveDestroyed(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveBeginPlay(); // Function Engine.Actor.ReceiveBeginPlay(Event|Protected|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveAnyDamage(float Damage, struct Unknown DamageType, struct Unknown InstigatedBy, struct Unknown DamageCauser); // Function Engine.Actor.ReceiveAnyDamage(BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveActorOnReleased(struct Unknown ButtonReleased); // Function Engine.Actor.ReceiveActorOnReleased(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveActorOnInputTouchLeave(char FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchLeave(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveActorOnInputTouchEnter(char FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnter(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveActorOnInputTouchEnd(char FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnd(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveActorOnInputTouchBegin(char FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchBegin(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveActorOnClicked(struct Unknown ButtonPressed); // Function Engine.Actor.ReceiveActorOnClicked(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveActorEndOverlap(struct Unknown OtherActor); // Function Engine.Actor.ReceiveActorEndOverlap(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveActorEndCursorOver(); // Function Engine.Actor.ReceiveActorEndCursorOver(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveActorBeginOverlap(struct Unknown OtherActor); // Function Engine.Actor.ReceiveActorBeginOverlap(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveActorBeginCursorOver(); // Function Engine.Actor.ReceiveActorBeginCursorOver(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void PrestreamTextures(float Seconds, char bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.Actor.PrestreamTextures(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4433A90>
	void OnRep_ReplicateMovement(); // Function Engine.Actor.OnRep_ReplicateMovement(Native|Public) // <Game_BE.exe+0x1EC6F70>
	void OnRep_ReplicatedMovement(); // Function Engine.Actor.OnRep_ReplicatedMovement(Native|Public) // <Game_BE.exe+0x4433A70>
	void OnRep_Owner(); // Function Engine.Actor.OnRep_Owner(Native|Protected) // <Game_BE.exe+0x1EC6930>
	void OnRep_Instigator(); // Function Engine.Actor.OnRep_Instigator(Native|Public) // <Game_BE.exe+0x4433A50>
	void OnRep_AttachmentReplication(); // Function Engine.Actor.OnRep_AttachmentReplication(Native|Public) // <Game_BE.exe+0x1EC6AD0>
	void MakeNoise(float Loudness, struct Unknown NoiseInstigator, struct Unknown NoiseLocation, float MaxRange, struct FName Tag); // Function Engine.Actor.MakeNoise(Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44338C0>
	struct Unknown MakeMIDForMaterial(struct Unknown Parent); // Function Engine.Actor.MakeMIDForMaterial(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4433830>
	char K2_TeleportTo(struct Unknown DestLocation, struct Unknown DestRotation); // Function Engine.Actor.K2_TeleportTo(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4433740>
	char K2_SetActorTransform(struct Unknown& NewTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.Actor.K2_SetActorTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4433540>
	char K2_SetActorRotation(struct Unknown NewRotation, char bTeleportPhysics); // Function Engine.Actor.K2_SetActorRotation(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4433460>
	void K2_SetActorRelativeTransform(struct Unknown& NewRelativeTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.Actor.K2_SetActorRelativeTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4433260>
	void K2_SetActorRelativeRotation(struct Unknown NewRelativeRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.Actor.K2_SetActorRelativeRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44330C0>
	void K2_SetActorRelativeLocation(struct Unknown NewRelativeLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.Actor.K2_SetActorRelativeLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4432F20>
	char K2_SetActorLocationAndRotation(struct Unknown NewLocation, struct Unknown NewRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.Actor.K2_SetActorLocationAndRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4432D20>
	char K2_SetActorLocation(struct Unknown NewLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.Actor.K2_SetActorLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4432B70>
	void K2_OnReset(); // Function Engine.Actor.K2_OnReset(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void K2_OnEndViewTarget(struct Unknown PC); // Function Engine.Actor.K2_OnEndViewTarget(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void K2_OnBecomeViewTarget(struct Unknown PC); // Function Engine.Actor.K2_OnBecomeViewTarget(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	struct Unknown K2_GetRootComponent(); // Function Engine.Actor.K2_GetRootComponent(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4432B50>
	struct TArray<Unknown> K2_GetComponentsByClass(struct Unknown* ComponentClass); // Function Engine.Actor.K2_GetComponentsByClass(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4432A70>
	struct Unknown K2_GetActorRotation(); // Function Engine.Actor.K2_GetActorRotation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44329B0>
	struct Unknown K2_GetActorLocation(); // Function Engine.Actor.K2_GetActorLocation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4432910>
	void K2_DetachFromActor(enum class Unknow LocationRule, enum class Unknow RotationRule, enum class Unknow ScaleRule); // Function Engine.Actor.K2_DetachFromActor(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4432810>
	void K2_DestroyComponent(struct Unknown Component); // Function Engine.Actor.K2_DestroyComponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4432790>
	void K2_DestroyActor(); // Function Engine.Actor.K2_DestroyActor(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4432770>
	void K2_AttachToComponent(struct Unknown Parent, struct FName SocketName, enum class Unknow LocationRule, enum class Unknow RotationRule, enum class Unknow ScaleRule, char bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToComponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44325B0>
	void K2_AttachToActor(struct Unknown ParentActor, struct FName SocketName, enum class Unknow LocationRule, enum class Unknow RotationRule, enum class Unknow ScaleRule, char bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToActor(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44323F0>
	void K2_AttachRootComponentToActor(struct Unknown InParentActor, struct FName InSocketName, char AttachLocationType, char bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentToActor(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44322A0>
	void K2_AttachRootComponentTo(struct Unknown InParent, struct FName InSocketName, char AttachLocationType, char bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentTo(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4432150>
	void K2_AddActorWorldTransform(struct Unknown& DeltaTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.Actor.K2_AddActorWorldTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4431F50>
	void K2_AddActorWorldRotation(struct Unknown DeltaRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.Actor.K2_AddActorWorldRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4431DB0>
	void K2_AddActorWorldOffset(struct Unknown DeltaLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.Actor.K2_AddActorWorldOffset(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4431C10>
	void K2_AddActorLocalTransform(struct Unknown& NewTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.Actor.K2_AddActorLocalTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4431A10>
	void K2_AddActorLocalRotation(struct Unknown DeltaRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.Actor.K2_AddActorLocalRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4431870>
	void K2_AddActorLocalOffset(struct Unknown DeltaLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport); // Function Engine.Actor.K2_AddActorLocalOffset(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44316D0>
	char IsOverlappingActor(struct Unknown Other); // Function Engine.Actor.IsOverlappingActor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4431640>
	char IsChildActor(); // Function Engine.Actor.IsChildActor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4431610>
	char IsActorTickEnabled(); // Function Engine.Actor.IsActorTickEnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44315E0>
	char IsActorBeingDestroyed(); // Function Engine.Actor.IsActorBeingDestroyed(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44315B0>
	char HasAuthority(); // Function Engine.Actor.HasAuthority(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4431580>
	float GetVerticalDistanceTo(struct Unknown OtherActor); // Function Engine.Actor.GetVerticalDistanceTo(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44314E0>
	struct Unknown GetVelocity(); // Function Engine.Actor.GetVelocity(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44314A0>
	struct Unknown GetTransform(); // Function Engine.Actor.GetTransform(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4431450>
	char GetTickableWhenPaused(); // Function Engine.Actor.GetTickableWhenPaused(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4431420>
	float GetSquaredDistanceTo(struct Unknown OtherActor); // Function Engine.Actor.GetSquaredDistanceTo(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4431380>
	char GetRemoteRole(); // Function Engine.Actor.GetRemoteRole(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4431360>
	struct Unknown GetParentComponent(); // Function Engine.Actor.GetParentComponent(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4431330>
	struct Unknown GetParentActor(); // Function Engine.Actor.GetParentActor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4431300>
	struct Unknown GetOwner(); // Function Engine.Actor.GetOwner(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44312E0>
	void GetOverlappingComponents(struct TArray<Unknown>& OverlappingComponents); // Function Engine.Actor.GetOverlappingComponents(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4431230>
	void GetOverlappingActors(struct TArray<Unknown>& OverlappingActors, struct Unknown* ClassFilter); // Function Engine.Actor.GetOverlappingActors(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4431130>
	char GetLocalRole(); // Function Engine.Actor.GetLocalRole(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4431110>
	float GetLifeSpan(); // Function Engine.Actor.GetLifeSpan(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44310D0>
	struct Unknown GetInstigatorController(); // Function Engine.Actor.GetInstigatorController(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44310A0>
	struct Unknown GetInstigator(); // Function Engine.Actor.GetInstigator(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4431070>
	struct Unknown GetInputVectorAxisValue(struct Unknown InputAxisKey); // Function Engine.Actor.GetInputVectorAxisValue(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430F70>
	float GetInputAxisValue(struct FName InputAxisName); // Function Engine.Actor.GetInputAxisValue(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430ED0>
	float GetInputAxisKeyValue(struct Unknown InputAxisKey); // Function Engine.Actor.GetInputAxisKeyValue(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430DE0>
	float GetHorizontalDotProductTo(struct Unknown OtherActor); // Function Engine.Actor.GetHorizontalDotProductTo(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430D40>
	float GetHorizontalDistanceTo(struct Unknown OtherActor); // Function Engine.Actor.GetHorizontalDistanceTo(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430CA0>
	float GetGameTimeSinceCreation(); // Function Engine.Actor.GetGameTimeSinceCreation(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430C70>
	float GetDotProductTo(struct Unknown OtherActor); // Function Engine.Actor.GetDotProductTo(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430BD0>
	float GetDistanceTo(struct Unknown OtherActor); // Function Engine.Actor.GetDistanceTo(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430B30>
	struct TArray<Unknown> GetComponentsByTag(struct Unknown* ComponentClass, struct FName Tag); // Function Engine.Actor.GetComponentsByTag(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430A20>
	struct TArray<Unknown> GetComponentsByInterface(struct Unknown* Interface); // Function Engine.Actor.GetComponentsByInterface(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430940>
	struct Unknown GetComponentByClass(struct Unknown* ComponentClass); // Function Engine.Actor.GetComponentByClass(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44308B0>
	struct FName GetAttachParentSocketName(); // Function Engine.Actor.GetAttachParentSocketName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430630>
	void GetAttachParentActors(struct TArray<Unknown>& OutActors); // Function Engine.Actor.GetAttachParentActors(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430580>
	struct Unknown GetAttachParentActorMost(); // Function Engine.Actor.GetAttachParentActorMost(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430550>
	struct Unknown GetAttachParentActor(); // Function Engine.Actor.GetAttachParentActor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430520>
	void GetAttachedActorsRecursive(struct TArray<Unknown>& OutActors, char bIncludeChildActor); // Function Engine.Actor.GetAttachedActorsRecursive(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44307B0>
	void GetAttachedActors(struct TArray<Unknown>& OutActors, char bResetArray, char bIncludeChildActor); // Function Engine.Actor.GetAttachedActors(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430670>
	void GetAllChildActors(struct TArray<Unknown>& ChildActors, char bIncludeDescendants); // Function Engine.Actor.GetAllChildActors(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430420>
	struct Unknown GetActorUpVector(); // Function Engine.Actor.GetActorUpVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44303B0>
	float GetActorTimeDilation(); // Function Engine.Actor.GetActorTimeDilation(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430380>
	float GetActorTickInterval(); // Function Engine.Actor.GetActorTickInterval(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430350>
	struct Unknown GetActorScale3D(); // Function Engine.Actor.GetActorScale3D(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430310>
	struct Unknown GetActorRightVector(); // Function Engine.Actor.GetActorRightVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44302A0>
	struct Unknown GetActorRelativeScale3D(); // Function Engine.Actor.GetActorRelativeScale3D(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430260>
	struct Unknown GetActorForwardVector(); // Function Engine.Actor.GetActorForwardVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44301F0>
	void GetActorEyesViewPoint(struct Unknown& OutLocation, struct Unknown& OutRotation); // Function Engine.Actor.GetActorEyesViewPoint(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4430100>
	char GetActorEnableCollision(); // Function Engine.Actor.GetActorEnableCollision(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44300D0>
	void GetActorBounds(char bOnlyCollidingComponents, struct Unknown& Origin, struct Unknown& BoxExtent, char bIncludeFromChildActors); // Function Engine.Actor.GetActorBounds(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x442FF50>
	void ForceNetUpdate(); // Function Engine.Actor.ForceNetUpdate(Native|Public|BlueprintCallable) // <Game_BE.exe+0x442FF30>
	void FlushNetDormancy(); // Function Engine.Actor.FlushNetDormancy(Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game_BE.exe+0x442FF10>
	void EnableInput(struct Unknown PlayerController); // Function Engine.Actor.EnableInput(Native|Public|BlueprintCallable) // <Game_BE.exe+0x442FE80>
	void DisableInput(struct Unknown PlayerController); // Function Engine.Actor.DisableInput(Native|Public|BlueprintCallable) // <Game_BE.exe+0x442FDF0>
	void DetachRootComponentFromParent(char bMaintainWorldPosition); // Function Engine.Actor.DetachRootComponentFromParent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x442FD60>
	void AddTickPrerequisiteComponent(struct Unknown PrerequisiteComponent); // Function Engine.Actor.AddTickPrerequisiteComponent(Native|Public|BlueprintCallable) // <Game_BE.exe+0x442FCD0>
	void AddTickPrerequisiteActor(struct Unknown PrerequisiteActor); // Function Engine.Actor.AddTickPrerequisiteActor(Native|Public|BlueprintCallable) // <Game_BE.exe+0x442FC40>
	struct Unknown AddComponent(struct FName TemplateName, char bManualAttachment, struct Unknown& RelativeTransform, struct Unknown ComponentTemplateContext); // Function Engine.Actor.AddComponent(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x442FA80>
	char ActorHasTag(struct FName Tag); // Function Engine.Actor.ActorHasTag(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x442F9F0>
};

// Class Engine.SkeletalMeshActor
class ASkeletalMeshActor : public UActor {

public:

	char bShouldDoAnimNotifies : 0; // 0x320 (1)
	char bWakeOnLevelStart : 0; // 0x320 (1)
	struct Unknown SkeletalMeshComponent; // 0x328 (8)
	struct Unknown ReplicatedMesh; // 0x330 (8)
	struct Unknown ReplicatedPhysAsset; // 0x338 (8)
	struct Unknown ReplicatedMaterial0; // 0x340 (8)
	struct Unknown ReplicatedMaterial1; // 0x348 (8)

	void OnRep_ReplicatedPhysAsset(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset(Native|Public) // <Game_BE.exe+0x124C7C0>
	void OnRep_ReplicatedMesh(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh(Native|Public) // <Game_BE.exe+0x1E71820>
	void OnRep_ReplicatedMaterial1(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1(Native|Public) // <Game_BE.exe+0x1F3B8B0>
	void OnRep_ReplicatedMaterial0(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0(Native|Public) // <Game_BE.exe+0x1F3D150>
};

// Class Engine.PrimitiveComponent
class UPrimitiveComponent : public USceneComponent {

public:

	float MinDrawDistance; // 0x230 (4)
	float LDMaxDrawDistance; // 0x234 (4)
	float CachedMaxDrawDistance; // 0x238 (4)
	char DepthPriorityGroup; // 0x23C (1)
	char ViewOwnerDepthPriorityGroup; // 0x23D (1)
	char IndirectLightingCacheQuality; // 0x23E (1)
	enum class Unknow LightmapType; // 0x23F (1)
	char bUseMaxLODAsImposter : 0; // 0x240 (1)
	char bBatchImpostersAsInstances : 0; // 0x240 (1)
	char bNeverDistanceCull : 0; // 0x240 (1)
	char bAlwaysCreatePhysicsState : 0; // 0x240 (1)
	char bGenerateOverlapEvents : 0; // 0x241 (1)
	char bMultiBodyOverlap : 0; // 0x241 (1)
	char bTraceComplexOnMove : 0; // 0x241 (1)
	char bReturnMaterialOnMove : 0; // 0x241 (1)
	char bUseViewOwnerDepthPriorityGroup : 0; // 0x241 (1)
	char bAllowCullDistanceVolume : 0; // 0x241 (1)
	char bHasMotionBlurVelocityMeshes : 0; // 0x241 (1)
	char bVisibleInReflectionCaptures : 0; // 0x241 (1)
	char bVisibleInRayTracing : 0; // 0x242 (1)
	char bRenderInMainPass : 0; // 0x242 (1)
	char bRenderInDepthPass : 0; // 0x242 (1)
	char bReceivesDecals : 0; // 0x242 (1)
	char bOwnerNoSee : 0; // 0x242 (1)
	char bOnlyOwnerSee : 0; // 0x242 (1)
	char bIgnoreNearClippingForOcclusion : 0; // 0x242 (1)
	char bTreatAsBackgroundForOcclusion : 0; // 0x242 (1)
	char bUseAsOccluder : 0; // 0x243 (1)
	char bSelectable : 0; // 0x243 (1)
	char bForceMipStreaming : 0; // 0x243 (1)
	char bHasPerInstanceHitProxies : 0; // 0x243 (1)
	char CastShadow : 0; // 0x243 (1)
	char bAffectDynamicIndirectLighting : 0; // 0x243 (1)
	char bAffectDistanceFieldLighting : 0; // 0x243 (1)
	char bCastDynamicShadow : 0; // 0x243 (1)
	char bCastStaticShadow : 0; // 0x244 (1)
	char bCastDirectionalShadow : 0; // 0x244 (1)
	char bCastVolumetricTranslucentShadow : 0; // 0x244 (1)
	char bSelfShadowOnly : 0; // 0x244 (1)
	char bCastFarShadow : 0; // 0x244 (1)
	char bCastInsetShadow : 0; // 0x244 (1)
	char bCastCinematicShadow : 0; // 0x244 (1)
	char bCastHiddenShadow : 0; // 0x244 (1)
	char bCastShadowAsTwoSided : 0; // 0x245 (1)
	char bLightAsIfStatic : 0; // 0x245 (1)
	char bLightAttachmentsAsGroup : 0; // 0x245 (1)
	char bExcludeFromLightAttachmentGroup : 0; // 0x245 (1)
	char bReceiveMobileCSMShadows : 0; // 0x245 (1)
	char bSingleSampleShadowFromStationaryLights : 0; // 0x245 (1)
	char bIgnoreRadialImpulse : 0; // 0x245 (1)
	char bIgnoreRadialForce : 0; // 0x245 (1)
	char bApplyImpulseOnDamage : 0; // 0x246 (1)
	char bReplicatePhysicsToAutonomousProxy : 0; // 0x246 (1)
	char bFillCollisionUnderneathForNavmesh : 0; // 0x246 (1)
	char AlwaysLoadOnClient : 0; // 0x246 (1)
	char AlwaysLoadOnServer : 0; // 0x246 (1)
	char bUseEditorCompositing : 0; // 0x246 (1)
	char bRenderCustomDepth : 0; // 0x246 (1)
	char bHasNoStreamableTextures : 0; // 0x247 (1)
	char bHasCustomNavigableGeometry; // 0x248 (1)
	char CanCharacterStepUpOn; // 0x24A (1)
	struct Unknown LightingChannels; // 0x24B (1)
	enum class Unknow CustomDepthStencilWriteMask; // 0x24C (1)
	int32_t CustomDepthStencilValue; // 0x250 (4)
	struct Unknown CustomPrimitiveData; // 0x258 (16)
	struct Unknown CustomPrimitiveDataInternal; // 0x268 (16)
	int32_t TranslucencySortPriority; // 0x278 (4)
	int32_t VisibilityId; // 0x27C (4)
	struct TArray<Unknown> RuntimeVirtualTextures; // 0x280 (16)
	int8_t VirtualTextureLodBias; // 0x290 (1)
	int8_t VirtualTextureCullMips; // 0x291 (1)
	int8_t VirtualTextureMinCoverage; // 0x292 (1)
	enum class Unknow VirtualTextureRenderPassType; // 0x293 (1)
	float LpvBiasMultiplier; // 0x298 (4)
	float BoundsScale; // 0x2A4 (4)
	struct TArray<Unknown> MoveIgnoreActors; // 0x2B8 (16)
	struct TArray<Unknown> MoveIgnoreComponents; // 0x2C8 (16)
	struct Unknown BodyInstance; // 0x2E8 (400)
	struct FMulticastSparseDelegate OnComponentHit; // 0x478 (1)
	struct FMulticastSparseDelegate OnComponentBeginOverlap; // 0x479 (1)
	struct FMulticastSparseDelegate OnComponentEndOverlap; // 0x47A (1)
	struct FMulticastSparseDelegate OnComponentWake; // 0x47B (1)
	struct FMulticastSparseDelegate OnComponentSleep; // 0x47C (1)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x47E (1)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0x47F (1)
	struct FMulticastSparseDelegate OnClicked; // 0x480 (1)
	struct FMulticastSparseDelegate OnReleased; // 0x481 (1)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x482 (1)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x483 (1)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x484 (1)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x485 (1)
	struct Unknown LODParentPrimitive; // 0x4A0 (8)

	char WasRecentlyRendered(float Tolerance); // Function Engine.PrimitiveComponent.WasRecentlyRendered(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A4930>
	void WakeRigidBody(struct FName BoneName); // Function Engine.PrimitiveComponent.WakeRigidBody(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A48A0>
	void WakeAllRigidBodies(); // Function Engine.PrimitiveComponent.WakeAllRigidBodies(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4583830>
	void SetWalkableSlopeOverride(struct Unknown& NewOverride); // Function Engine.PrimitiveComponent.SetWalkableSlopeOverride(Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45A47F0>
	void SetUseCCD(char InUseCCD, struct FName BoneName); // Function Engine.PrimitiveComponent.SetUseCCD(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A4720>
	void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority); // Function Engine.PrimitiveComponent.SetTranslucentSortPriority(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A46A0>
	void SetSingleSampleShadowFromStationaryLights(char bNewSingleSampleShadowFromStationaryLights); // Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A4610>
	void SetSimulatePhysics(char bSimulate); // Function Engine.PrimitiveComponent.SetSimulatePhysics(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A4580>
	void SetRenderInMainPass(char bValue); // Function Engine.PrimitiveComponent.SetRenderInMainPass(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A44F0>
	void SetRenderCustomDepth(char bValue); // Function Engine.PrimitiveComponent.SetRenderCustomDepth(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A4460>
	void SetReceivesDecals(char bNewReceivesDecals); // Function Engine.PrimitiveComponent.SetReceivesDecals(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A43D0>
	void SetPhysMaterialOverride(struct Unknown NewPhysMaterial); // Function Engine.PrimitiveComponent.SetPhysMaterialOverride(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A3DA0>
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, char bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A42C0>
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, char bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A41B0>
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, char bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A41B0>
	void SetPhysicsLinearVelocity(struct Unknown NewVel, char bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A4090>
	void SetPhysicsAngularVelocityInRadians(struct Unknown NewAngVel, char bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A3F70>
	void SetPhysicsAngularVelocityInDegrees(struct Unknown NewAngVel, char bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A3E30>
	void SetPhysicsAngularVelocity(struct Unknown NewAngVel, char bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A3E30>
	void SetOwnerNoSee(char bNewOwnerNoSee); // Function Engine.PrimitiveComponent.SetOwnerNoSee(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A3D10>
	void SetOnlyOwnerSee(char bNewOnlyOwnerSee); // Function Engine.PrimitiveComponent.SetOnlyOwnerSee(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A3C80>
	void SetNotifyRigidBodyCollision(char bNewNotifyRigidBodyCollision); // Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A3BF0>
	void SetMaterialByName(struct FName MaterialSlotName, struct Unknown Material); // Function Engine.PrimitiveComponent.SetMaterialByName(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A3B20>
	void SetMaterial(int32_t ElementIndex, struct Unknown Material); // Function Engine.PrimitiveComponent.SetMaterial(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A3A50>
	void SetMassScale(struct FName BoneName, float InMassScale); // Function Engine.PrimitiveComponent.SetMassScale(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A3980>
	void SetMassOverrideInKg(struct FName BoneName, float MassInKg, char bOverrideMass); // Function Engine.PrimitiveComponent.SetMassOverrideInKg(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A3880>
	void SetLinearDamping(float InDamping); // Function Engine.PrimitiveComponent.SetLinearDamping(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A3800>
	void SetLightingChannels(char bChannel0, char bChannel1, char bChannel2); // Function Engine.PrimitiveComponent.SetLightingChannels(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A36E0>
	void SetLightAttachmentsAsGroup(char bInLightAttachmentsAsGroup); // Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A3650>
	void SetGenerateOverlapEvents(char bInGenerateOverlapEvents); // Function Engine.PrimitiveComponent.SetGenerateOverlapEvents(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A35C0>
	void SetExcludeFromLightAttachmentGroup(char bInExcludeFromLightAttachmentGroup); // Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A3530>
	void SetEnableGravity(char bGravityEnabled); // Function Engine.PrimitiveComponent.SetEnableGravity(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A34A0>
	void SetCustomPrimitiveDataVector4(int32_t DataIndex, struct Unknown Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A33D0>
	void SetCustomPrimitiveDataVector3(int32_t DataIndex, struct Unknown Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A3300>
	void SetCustomPrimitiveDataVector2(int32_t DataIndex, struct Unknown Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A3240>
	void SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A3170>
	void SetCustomDepthStencilWriteMask(enum class Unknow WriteMaskBit); // Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A30F0>
	void SetCustomDepthStencilValue(int32_t Value); // Function Engine.PrimitiveComponent.SetCustomDepthStencilValue(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A3070>
	void SetCullDistance(float NewCullDistance); // Function Engine.PrimitiveComponent.SetCullDistance(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A2FF0>
	void SetConstraintMode(char ConstraintMode); // Function Engine.PrimitiveComponent.SetConstraintMode(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A2F70>
	void SetCollisionResponseToChannel(char Channel, char NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToChannel(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A2EB0>
	void SetCollisionResponseToAllChannels(char NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A2E30>
	void SetCollisionProfileName(struct FName InCollisionProfileName, char bUpdateOverlaps); // Function Engine.PrimitiveComponent.SetCollisionProfileName(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A2D60>
	void SetCollisionObjectType(char Channel); // Function Engine.PrimitiveComponent.SetCollisionObjectType(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A2CE0>
	void SetCollisionEnabled(char NewType); // Function Engine.PrimitiveComponent.SetCollisionEnabled(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A2C60>
	void SetCenterOfMass(struct Unknown CenterOfMassOffset, struct FName BoneName); // Function Engine.PrimitiveComponent.SetCenterOfMass(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A2B90>
	void SetCastShadow(char NewCastShadow); // Function Engine.PrimitiveComponent.SetCastShadow(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A2B00>
	void SetCastInsetShadow(char bInCastInsetShadow); // Function Engine.PrimitiveComponent.SetCastInsetShadow(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A2A70>
	void SetBoundsScale(float NewBoundsScale); // Function Engine.PrimitiveComponent.SetBoundsScale(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A29F0>
	void SetAngularDamping(float InDamping); // Function Engine.PrimitiveComponent.SetAngularDamping(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A2970>
	void SetAllUseCCD(char InUseCCD); // Function Engine.PrimitiveComponent.SetAllUseCCD(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45943C0>
	void SetAllPhysicsLinearVelocity(struct Unknown NewVel, char bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A2890>
	void SetAllPhysicsAngularVelocityInRadians(struct Unknown& NewAngVel, char bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A27B0>
	void SetAllPhysicsAngularVelocityInDegrees(struct Unknown& NewAngVel, char bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A2690>
	void SetAllMassScale(float InMassScale); // Function Engine.PrimitiveComponent.SetAllMassScale(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45826F0>
	struct Unknown ScaleByMomentOfInertia(struct Unknown InputVector, struct FName BoneName); // Function Engine.PrimitiveComponent.ScaleByMomentOfInertia(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A2590>
	void PutRigidBodyToSleep(struct FName BoneName); // Function Engine.PrimitiveComponent.PutRigidBodyToSleep(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A2510>
	char K2_SphereTraceComponent(struct Unknown TraceStart, struct Unknown TraceEnd, float SphereRadius, char bTraceComplex, char bShowTrace, char bPersistentShowTrace, struct Unknown& HitLocation, struct Unknown& HitNormal, struct FName& BoneName, struct Unknown& OutHit); // Function Engine.PrimitiveComponent.K2_SphereTraceComponent(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A2180>
	char K2_SphereOverlapComponent(struct Unknown InSphereCentre, float InSphereRadius, char bTraceComplex, char bShowTrace, char bPersistentShowTrace, struct Unknown& HitLocation, struct Unknown& HitNormal, struct FName& BoneName, struct Unknown& OutHit); // Function Engine.PrimitiveComponent.K2_SphereOverlapComponent(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A1E40>
	char K2_LineTraceComponent(struct Unknown TraceStart, struct Unknown TraceEnd, char bTraceComplex, char bShowTrace, char bPersistentShowTrace, struct Unknown& HitLocation, struct Unknown& HitNormal, struct FName& BoneName, struct Unknown& OutHit); // Function Engine.PrimitiveComponent.K2_LineTraceComponent(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A1AF0>
	char K2_IsQueryCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A1AB0>
	char K2_IsPhysicsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A1A70>
	char K2_IsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsCollisionEnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A1A30>
	char K2_BoxOverlapComponent(struct Unknown InBoxCentre, struct Unknown InBox, char bTraceComplex, char bShowTrace, char bPersistentShowTrace, struct Unknown& HitLocation, struct Unknown& HitNormal, struct FName& BoneName, struct Unknown& OutHit); // Function Engine.PrimitiveComponent.K2_BoxOverlapComponent(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A16E0>
	char IsOverlappingComponent(struct Unknown OtherComp); // Function Engine.PrimitiveComponent.IsOverlappingComponent(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A1650>
	char IsOverlappingActor(struct Unknown Other); // Function Engine.PrimitiveComponent.IsOverlappingActor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A15C0>
	char IsGravityEnabled(); // Function Engine.PrimitiveComponent.IsGravityEnabled(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x448F740>
	char IsAnyRigidBodyAwake(); // Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake(Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x45A1590>
	void IgnoreComponentWhenMoving(struct Unknown Component, char bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A14C0>
	void IgnoreActorWhenMoving(struct Unknown Actor, char bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreActorWhenMoving(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A13F0>
	struct Unknown GetWalkableSlopeOverride(); // Function Engine.PrimitiveComponent.GetWalkableSlopeOverride(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A13C0>
	struct Unknown GetPhysicsLinearVelocityAtPoint(struct Unknown Point, struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A12D0>
	struct Unknown GetPhysicsLinearVelocity(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A1230>
	struct Unknown GetPhysicsAngularVelocityInRadians(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A1190>
	struct Unknown GetPhysicsAngularVelocityInDegrees(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A10C0>
	struct Unknown GetPhysicsAngularVelocity(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A10C0>
	void GetOverlappingComponents(struct TArray<Unknown>& OutOverlappingComponents); // Function Engine.PrimitiveComponent.GetOverlappingComponents(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A1010>
	void GetOverlappingActors(struct TArray<Unknown>& OverlappingActors, struct Unknown* ClassFilter); // Function Engine.PrimitiveComponent.GetOverlappingActors(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0F10>
	int32_t GetNumMaterials(); // Function Engine.PrimitiveComponent.GetNumMaterials(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0EE0>
	struct Unknown GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex); // Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex(Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0E00>
	struct Unknown GetMaterial(int32_t ElementIndex); // Function Engine.PrimitiveComponent.GetMaterial(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0D60>
	float GetMassScale(struct FName BoneName); // Function Engine.PrimitiveComponent.GetMassScale(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0CC0>
	float GetMass(); // Function Engine.PrimitiveComponent.GetMass(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0C80>
	float GetLinearDamping(); // Function Engine.PrimitiveComponent.GetLinearDamping(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0C40>
	struct Unknown GetInertiaTensor(struct FName BoneName); // Function Engine.PrimitiveComponent.GetInertiaTensor(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0B90>
	char GetGenerateOverlapEvents(); // Function Engine.PrimitiveComponent.GetGenerateOverlapEvents(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0B60>
	char GetCollisionResponseToChannel(char Channel); // Function Engine.PrimitiveComponent.GetCollisionResponseToChannel(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0AD0>
	struct FName GetCollisionProfileName(); // Function Engine.PrimitiveComponent.GetCollisionProfileName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0A90>
	char GetCollisionObjectType(); // Function Engine.PrimitiveComponent.GetCollisionObjectType(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0A60>
	char GetCollisionEnabled(); // Function Engine.PrimitiveComponent.GetCollisionEnabled(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0A30>
	float GetClosestPointOnCollision(struct Unknown& Point, struct Unknown& OutPointOnBody, struct FName BoneName); // Function Engine.PrimitiveComponent.GetClosestPointOnCollision(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A08F0>
	struct Unknown GetCenterOfMass(struct FName BoneName); // Function Engine.PrimitiveComponent.GetCenterOfMass(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0850>
	float GetAngularDamping(); // Function Engine.PrimitiveComponent.GetAngularDamping(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A0810>
	struct Unknown CreateDynamicMaterialInstance(int32_t ElementIndex, struct Unknown SourceMaterial, struct FName OptionalName); // Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A0700>
	struct Unknown CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, struct Unknown Parent); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A0630>
	struct Unknown CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A0590>
	struct TArray<Unknown> CopyArrayOfMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A0510>
	struct TArray<Unknown> CopyArrayOfMoveIgnoreActors(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A0490>
	void ClearMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A0460>
	void ClearMoveIgnoreActors(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreActors(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A0440>
	char CanCharacterStepUp(struct Unknown Pawn); // Function Engine.PrimitiveComponent.CanCharacterStepUp(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A03A0>
	void AddTorqueInRadians(struct Unknown Torque, struct FName BoneName, char bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInRadians(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A0140>
	void AddTorqueInDegrees(struct Unknown Torque, struct FName BoneName, char bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInDegrees(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A0260>
	void AddTorque(struct Unknown Torque, struct FName BoneName, char bAccelChange); // Function Engine.PrimitiveComponent.AddTorque(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A0140>
	void AddRadialImpulse(struct Unknown Origin, float Radius, float Strength, char Falloff, char bVelChange); // Function Engine.PrimitiveComponent.AddRadialImpulse(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x459FF80>
	void AddRadialForce(struct Unknown Origin, float Radius, float Strength, char Falloff, char bAccelChange); // Function Engine.PrimitiveComponent.AddRadialForce(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x459FDC0>
	void AddImpulseAtLocation(struct Unknown Impulse, struct Unknown Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddImpulseAtLocation(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x459FC90>
	void AddImpulse(struct Unknown Impulse, struct FName BoneName, char bVelChange); // Function Engine.PrimitiveComponent.AddImpulse(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x459FB70>
	void AddForceAtLocationLocal(struct Unknown Force, struct Unknown Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocationLocal(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x459FA40>
	void AddForceAtLocation(struct Unknown Force, struct Unknown Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocation(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x459F910>
	void AddForce(struct Unknown Force, struct FName BoneName, char bAccelChange); // Function Engine.PrimitiveComponent.AddForce(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x459F7F0>
	void AddAngularImpulseInRadians(struct Unknown Impulse, struct FName BoneName, char bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInRadians(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x459F6D0>
	void AddAngularImpulseInDegrees(struct Unknown Impulse, struct FName BoneName, char bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x459F590>
	void AddAngularImpulse(struct Unknown Impulse, struct FName BoneName, char bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulse(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x459F470>
};

// Class Engine.MeshComponent
class UMeshComponent : public UPrimitiveComponent {

public:

	float MipStreamingScale; // 0x4A8 (4)
	struct TArray<Unknown> OverrideMaterials; // 0x4B0 (16)
	char bEnableMaterialParameterCaching : 0; // 0x4D0 (1)

	void SetVectorParameterValueOnMaterials(struct FName ParameterName, struct Unknown ParameterValue); // Function Engine.MeshComponent.SetVectorParameterValueOnMaterials(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x455C5A0>
	void SetScalarParameterValueOnMaterials(struct FName ParameterName, float ParameterValue); // Function Engine.MeshComponent.SetScalarParameterValueOnMaterials(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x455C4D0>
	void SetColorParameterValueOnMaterials(struct FName ParameterName, struct Unknown ParameterValue); // Function Engine.MeshComponent.SetColorParameterValueOnMaterials(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x455C2A0>
	void PrestreamTextures(float Seconds, char bPrioritizeCharacterTextures, int32_t CinematicTextureGroups); // Function Engine.MeshComponent.PrestreamTextures(Native|Public|BlueprintCallable) // <Game_BE.exe+0x455C190>
	char IsMaterialSlotNameValid(struct FName MaterialSlotName); // Function Engine.MeshComponent.IsMaterialSlotNameValid(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x455C0F0>
	struct TArray<Unknown> GetMaterialSlotNames(); // Function Engine.MeshComponent.GetMaterialSlotNames(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x455BFF0>
	struct TArray<Unknown> GetMaterials(); // Function Engine.MeshComponent.GetMaterials(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x455C070>
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.MeshComponent.GetMaterialIndex(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x455BF50>
};

// Class Engine.SkinnedMeshComponent
class USkinnedMeshComponent : public UMeshComponent {

public:

	struct Unknown SkeletalMesh; // 0x4D8 (8)
	struct TWeakObjectPtr<struct Unknown> MasterPoseComponent; // 0x4E0 (8)
	struct TArray<Unknown> SkinCacheUsage; // 0x4E8 (16)
	struct Unknown PhysicsAssetOverride; // 0x5F0 (8)
	int32_t ForcedLodModel; // 0x5F8 (4)
	int32_t MinLodModel; // 0x5FC (4)
	float StreamingDistanceMultiplier; // 0x608 (4)
	struct TArray<Unknown> LODInfo; // 0x618 (16)
	enum class Unknow VisibilityBasedAnimTickOption; // 0x64C (1)
	char bOverrideMinLod : 0; // 0x64E (1)
	char bUseBoundsFromMasterPoseComponent : 0; // 0x64E (1)
	char bForceWireframe : 0; // 0x64E (1)
	char bDisplayBones : 0; // 0x64E (1)
	char bDisableMorphTarget : 0; // 0x64E (1)
	char bHideSkin : 0; // 0x64E (1)
	char bPerBoneMotionBlur : 0; // 0x64F (1)
	char bComponentUseFixedSkelBounds : 0; // 0x64F (1)
	char bConsiderAllBodiesForBounds : 0; // 0x64F (1)
	char bSyncAttachParentLOD : 0; // 0x64F (1)
	char bCanHighlightSelectedSections : 0; // 0x64F (1)
	char bRecentlyRendered : 0; // 0x64F (1)
	char bCastCapsuleDirectShadow : 0; // 0x64F (1)
	char bCastCapsuleIndirectShadow : 0; // 0x64F (1)
	char bCPUSkinning : 0; // 0x650 (1)
	char bEnableUpdateRateOptimizations : 0; // 0x650 (1)
	char bDisplayDebugUpdateRateOptimizations : 0; // 0x650 (1)
	char bRenderStatic : 0; // 0x650 (1)
	char bIgnoreMasterPoseComponentLOD : 0; // 0x650 (1)
	char bCachedLocalBoundsUpToDate : 0; // 0x650 (1)
	char bForceMeshObjectUpdate : 0; // 0x651 (1)
	float CapsuleIndirectShadowMinVisibility; // 0x654 (4)
	struct Unknown CachedWorldSpaceBounds; // 0x668 (28)
	struct Unknown CachedWorldToLocalTransform; // 0x690 (64)

	void UnloadSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CB390>
	void UnHideBoneByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.UnHideBoneByName(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CB310>
	void TransformToBoneSpace(struct FName BoneName, struct Unknown InPosition, struct Unknown InRotation, struct Unknown& OutPosition, struct Unknown& OutRotation); // Function Engine.SkinnedMeshComponent.TransformToBoneSpace(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45CB150>
	void TransformFromBoneSpace(struct FName BoneName, struct Unknown InPosition, struct Unknown InRotation, struct Unknown& OutPosition, struct Unknown& OutRotation); // Function Engine.SkinnedMeshComponent.TransformFromBoneSpace(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45CAF90>
	void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, char bShow, int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ShowMaterialSection(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CAE50>
	void ShowAllMaterialSections(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ShowAllMaterialSections(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CADD0>
	void SetVertexColorOverride_LinearColor(int32_t LODIndex, struct TArray<Unknown>& VertexColors); // Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45CACE0>
	char SetSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.SetSkinWeightProfile(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CAC50>
	void SetSkinWeightOverride(int32_t LODIndex, struct TArray<Unknown>& SkinWeights); // Function Engine.SkinnedMeshComponent.SetSkinWeightOverride(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45CAB60>
	void SetSkeletalMesh(struct Unknown NewMesh, char bReinitPose); // Function Engine.SkinnedMeshComponent.SetSkeletalMesh(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CAA90>
	void SetRenderStatic(char bNewValue); // Function Engine.SkinnedMeshComponent.SetRenderStatic(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CAA00>
	void SetPhysicsAsset(struct Unknown NewPhysicsAsset, char bForceReInit); // Function Engine.SkinnedMeshComponent.SetPhysicsAsset(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CA930>
	void SetMinLOD(int32_t InNewMinLOD); // Function Engine.SkinnedMeshComponent.SetMinLOD(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CA8B0>
	void SetMasterPoseComponent(struct Unknown NewMasterBoneComponent, char bForceUpdate); // Function Engine.SkinnedMeshComponent.SetMasterPoseComponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CA7E0>
	void SetForcedLOD(int32_t InNewForcedLOD); // Function Engine.SkinnedMeshComponent.SetForcedLOD(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CA760>
	void SetCastCapsuleIndirectShadow(char bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CA6D0>
	void SetCastCapsuleDirectShadow(char bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CA640>
	void SetCapsuleIndirectShadowMinVisibility(float NewValue); // Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CA5C0>
	char IsUsingSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45CA590>
	char IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex); // Function Engine.SkinnedMeshComponent.IsMaterialSectionShown(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CA4D0>
	char IsBoneHiddenByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.IsBoneHiddenByName(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CA440>
	void HideBoneByName(struct FName BoneName, char PhysBodyOption); // Function Engine.SkinnedMeshComponent.HideBoneByName(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CA260>
	char GetTwistAndSwingAngleOfDeltaRotationFromRefPose(struct FName BoneName, float& OutTwistAngle, float& OutSwingAngle); // Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45CA140>
	struct FName GetSocketBoneName(struct FName InSocketName); // Function Engine.SkinnedMeshComponent.GetSocketBoneName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45CA010>
	struct Unknown GetRefPosePosition(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetRefPosePosition(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45C9F70>
	struct FName GetParentBone(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetParentBone(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C9EE0>
	int32_t GetNumLODs(); // Function Engine.SkinnedMeshComponent.GetNumLODs(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C9EB0>
	int32_t GetNumBones(); // Function Engine.SkinnedMeshComponent.GetNumBones(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C9E80>
	int32_t GetForcedLOD(); // Function Engine.SkinnedMeshComponent.GetForcedLOD(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C9E50>
	struct Unknown GetDeltaTransformFromRefPose(struct FName BoneName, struct FName BaseName); // Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C9D50>
	struct FName GetCurrentSkinWeightProfileName(); // Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C9D30>
	struct FName GetBoneName(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetBoneName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C9CA0>
	int32_t GetBoneIndex(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetBoneIndex(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C9C10>
	struct FName FindClosestBone_K2(struct Unknown TestLocation, struct Unknown& BoneLocation, float IgnoreScale, char bRequirePhysicsAsset); // Function Engine.SkinnedMeshComponent.FindClosestBone_K2(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C9A80>
	void ClearVertexColorOverride(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ClearVertexColorOverride(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C9A00>
	void ClearSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.ClearSkinWeightProfile(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C99E0>
	void ClearSkinWeightOverride(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C9960>
	char BoneIsChildOf(struct FName BoneName, struct FName ParentBoneName); // Function Engine.SkinnedMeshComponent.BoneIsChildOf(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C98A0>
};

// Class Engine.StreamableRenderAsset
class UStreamableRenderAsset : public Object {

public:

	double ForceMipLevelsToBeResidentTimestamp; // 0x28 (8)
	int32_t NumCinematicMipLevels; // 0x30 (4)
	int32_t StreamingIndex; // 0x34 (4)
	int32_t CachedCombinedLODBias; // 0x38 (4)
	char CachedNumResidentLODs; // 0x3C (1)
	char bCachedReadyForStreaming : 0; // 0x3D (1)
	char NeverStream : 0; // 0x3D (1)
	char bGlobalForceMipLevelsToBeResident : 0; // 0x3D (1)
	char bIsStreamable : 0; // 0x3D (1)
	char bHasStreamingUpdatePending : 0; // 0x3D (1)
	char bForceMiplevelsToBeResident : 0; // 0x3D (1)
	char bIgnoreStreamingMipBias : 0; // 0x3D (1)
	char bUseCinematicMipLevels : 0; // 0x3D (1)
};

// Class Engine.SkeletalMesh
class USkeletalMesh : public UStreamableRenderAsset {

public:

	struct Unknown Skeleton; // 0x198 (8)
	struct Unknown ImportedBounds; // 0x314 (28)
	struct Unknown ExtendedBounds; // 0x1D0 (28)
	struct Unknown PositiveBoundsExtension; // 0x60 (12)
	struct Unknown NegativeBoundsExtension; // 0x6C (12)
	struct TArray<Unknown> Materials; // 0x1A0 (16)
	struct TArray<Unknown> SkelMirrorTable; // 0x390 (16)
	struct TArray<Unknown> LODInfo; // 0x1B0 (16)
	struct Unknown MinLOD; // 0xC8 (4)
	struct Unknown DisableBelowMinLodStripping; // 0xCC (1)
	char SkelMirrorAxis; // 0x389 (1)
	char SkelMirrorFlipAxis; // 0x331 (1)
	char bUseFullPrecisionUVs : 0; // 0x310 (1)
	char bUseHighPrecisionTangentBasis : 0; // 0x330 (1)
	char bHasBeenSimplified : 0; // 0x1EC (1)
	char bHasVertexColors : 0; // 0x200 (1)
	char bEnablePerPolyCollision : 0; // 0x388 (1)
	struct Unknown BodySetup; // 0xD0 (8)
	struct Unknown PhysicsAsset; // 0xD8 (8)
	struct Unknown ShadowPhysicsAsset; // 0xE0 (8)
	struct TArray<Unknown> NodeMappingData; // 0xE8 (16)
	struct TArray<Unknown> MorphTargets; // 0xF8 (16)
	struct Unknown* PostProcessAnimBlueprint; // 0x108 (8)
	struct TArray<Unknown> MeshClothingAssets; // 0x110 (16)
	struct Unknown SamplingInfo; // 0x120 (48)
	struct TArray<Unknown> AssetUserData; // 0x150 (16)
	struct TArray<Unknown> Sockets; // 0x168 (16)
	struct TArray<Unknown> SkinWeightProfiles; // 0x188 (16)

	void SetLODSettings(struct Unknown InLODSettings); // Function Engine.SkeletalMesh.SetLODSettings(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x16C9DF0>
	int32_t NumSockets(); // Function Engine.SkeletalMesh.NumSockets(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45BD280>
	struct TArray<Unknown> K2_GetAllMorphTargetNames(); // Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45BD1A0>
	char IsSectionUsingCloth(int32_t InSectionIndex, char bCheckCorrespondingSections); // Function Engine.SkeletalMesh.IsSectionUsingCloth(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45BD0E0>
	struct Unknown GetSocketByIndex(int32_t Index); // Function Engine.SkeletalMesh.GetSocketByIndex(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45BD050>
	struct Unknown GetNodeMappingContainer(struct Unknown SourceAsset); // Function Engine.SkeletalMesh.GetNodeMappingContainer(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45BCFC0>
	struct Unknown GetImportedBounds(); // Function Engine.SkeletalMesh.GetImportedBounds(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45BCF70>
	struct Unknown GetBounds(); // Function Engine.SkeletalMesh.GetBounds(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45BCF20>
	struct Unknown FindSocketInfo(struct FName InSocketName, struct Unknown& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketInfo(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45BCD50>
	struct Unknown FindSocketAndIndex(struct FName InSocketName, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketAndIndex(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45BCC80>
	struct Unknown FindSocket(struct FName InSocketName); // Function Engine.SkeletalMesh.FindSocket(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45BCBF0>
};

// Class Engine.StaticMeshActor
class AStaticMeshActor : public UActor {

public:

	struct Unknown StaticMeshComponent; // 0x318 (8)
	char bStaticMeshReplicateMovement : 0; // 0x320 (1)
	enum class Unknow NavigationGeometryGatheringMode; // 0x321 (1)

	void SetMobility(char InMobility); // Function Engine.StaticMeshActor.SetMobility(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x1262460>
};

// Class Engine.Texture
class UTexture : public UStreamableRenderAsset {

public:

	struct Unknown LightingGuid; // 0x48 (16)
	int32_t LODBias; // 0x58 (4)
	char CompressionSettings; // 0x5C (1)
	char Filter; // 0x5D (1)
	enum class Unknow MipLoadOptions; // 0x5E (1)
	char LODGroup; // 0x5F (1)
	char SRGB : 0; // 0x60 (1)
	char bNoTiling : 0; // 0x60 (1)
	char VirtualTextureStreaming : 0; // 0x60 (1)
	char CompressionYCoCg : 0; // 0x60 (1)
	char bAsyncResourceReleaseHasBeenStarted : 0; // 0x60 (1)
	struct TArray<Unknown> AssetUserData; // 0x68 (16)
};

// Class Engine.Texture2DDynamic
class UTexture2DDynamic : public UTexture {

public:

	char Format; // 0xC0 (1)
};

// Class Engine.HUD
class AHUD : public UActor {

public:

	struct Unknown PlayerOwner; // 0x318 (8)
	char bLostFocusPaused : 0; // 0x320 (1)
	char bShowHUD : 0; // 0x320 (1)
	char bShowDebugInfo : 0; // 0x320 (1)
	int32_t CurrentTargetIndex; // 0x324 (4)
	char bShowHitBoxDebugInfo : 0; // 0x328 (1)
	char bShowOverlays : 0; // 0x328 (1)
	char bEnableDebugTextShadow : 0; // 0x328 (1)
	struct TArray<Unknown> PostRenderedActors; // 0x330 (16)
	struct TArray<Unknown> DebugDisplay; // 0x348 (16)
	struct TArray<Unknown> ToggledDebugCategories; // 0x358 (16)
	struct Unknown Canvas; // 0x368 (8)
	struct Unknown DebugCanvas; // 0x370 (8)
	struct TArray<Unknown> DebugTextList; // 0x378 (16)
	struct Unknown* ShowDebugTargetDesiredClass; // 0x388 (8)
	struct Unknown ShowDebugTargetActor; // 0x390 (8)

	void ShowHUD(); // Function Engine.HUD.ShowHUD(Exec|Native|Public) // <Game_BE.exe+0x1E71820>
	void ShowDebugToggleSubCategory(struct FName Category); // Function Engine.HUD.ShowDebugToggleSubCategory(Final|Exec|Native|Public) // <Game_BE.exe+0x44CB720>
	void ShowDebugForReticleTargetToggle(struct Unknown* DesiredClass); // Function Engine.HUD.ShowDebugForReticleTargetToggle(Final|Exec|Native|Public) // <Game_BE.exe+0x44CB6A0>
	void ShowDebug(struct FName DebugType); // Function Engine.HUD.ShowDebug(Exec|Native|Public) // <Game_BE.exe+0x1E969A0>
	void RemoveDebugText(struct Unknown SrcActor, char bLeaveDurationText); // Function Engine.HUD.RemoveDebugText(Final|Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x44CB480>
	void RemoveAllDebugStrings(); // Function Engine.HUD.RemoveAllDebugStrings(Final|Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x44CB460>
	void ReceiveHitBoxRelease(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxRelease(BlueprintCosmetic|Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveHitBoxEndCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxEndCursorOver(BlueprintCosmetic|Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveHitBoxClick(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxClick(BlueprintCosmetic|Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveHitBoxBeginCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxBeginCursorOver(BlueprintCosmetic|Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY); // Function Engine.HUD.ReceiveDrawHUD(BlueprintCosmetic|Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	struct Unknown Project(struct Unknown Location); // Function Engine.HUD.Project(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44CB3B0>
	void PreviousDebugTarget(); // Function Engine.HUD.PreviousDebugTarget(Exec|Native|Public) // <Game_BE.exe+0x1FCB910>
	void NextDebugTarget(); // Function Engine.HUD.NextDebugTarget(Exec|Native|Public) // <Game_BE.exe+0x11E2230>
	void GetTextSize(struct FString Text, float& OutWidth, float& OutHeight, struct Unknown Font, float Scale); // Function Engine.HUD.GetTextSize(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44CB0B0>
	struct Unknown GetOwningPlayerController(); // Function Engine.HUD.GetOwningPlayerController(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x16E7500>
	struct Unknown GetOwningPawn(); // Function Engine.HUD.GetOwningPawn(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44CB080>
	void GetActorsInSelectionRectangle(struct Unknown* ClassFilter, struct Unknown& FirstPoint, struct Unknown& SecondPoint, struct TArray<Unknown>& OutActors, char bIncludeNonCollidingComponents, char bActorMustBeFullyEnclosed); // Function Engine.HUD.GetActorsInSelectionRectangle(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x44CAE70>
	void DrawTextureSimple(struct Unknown Texture, float ScreenX, float ScreenY, float Scale, char bScalePosition); // Function Engine.HUD.DrawTextureSimple(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44CACE0>
	void DrawTexture(struct Unknown Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, struct Unknown TintColor, char BlendMode, float Scale, char bScalePosition, float Rotation, struct Unknown RotPivot); // Function Engine.HUD.DrawTexture(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44CA8C0>
	void DrawText(struct FString Text, struct Unknown TextColor, float ScreenX, float ScreenY, struct Unknown Font, float Scale, char bScalePosition); // Function Engine.HUD.DrawText(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44CA690>
	void DrawRect(struct Unknown RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH); // Function Engine.HUD.DrawRect(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44CA4E0>
	void DrawMaterialTriangle(struct Unknown Material, struct Unknown V0_Pos, struct Unknown V1_Pos, struct Unknown V2_Pos, struct Unknown V0_UV, struct Unknown V1_UV, struct Unknown V2_UV, struct Unknown V0_Color, struct Unknown V1_Color, struct Unknown V2_Color); // Function Engine.HUD.DrawMaterialTriangle(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44CA220>
	void DrawMaterialSimple(struct Unknown Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, char bScalePosition); // Function Engine.HUD.DrawMaterialSimple(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44CA020>
	void DrawMaterial(struct Unknown Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, char bScalePosition, float Rotation, struct Unknown RotPivot); // Function Engine.HUD.DrawMaterial(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44C9C90>
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, struct Unknown LineColor, float LineThickness); // Function Engine.HUD.DrawLine(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44C9AB0>
	void Deproject(float ScreenX, float ScreenY, struct Unknown& WorldPosition, struct Unknown& WorldDirection); // Function Engine.HUD.Deproject(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C98B0>
	void AddHitBox(struct Unknown Position, struct Unknown Size, struct FName InName, char bConsumesInput, int32_t Priority); // Function Engine.HUD.AddHitBox(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44C9720>
	void AddDebugText(struct FString DebugText, struct Unknown SrcActor, float Duration, struct Unknown Offset, struct Unknown DesiredOffset, struct Unknown TextColor, char bSkipOverwriteCheck, char bAbsoluteLocation, char bKeepAttachedToActor, struct Unknown InFont, float FontScale, char bDrawShadow); // Function Engine.HUD.AddDebugText(Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // <Game_BE.exe+0x44C9380>
};

// Class Engine.Player
class UPlayer : public Object {

public:

	struct Unknown PlayerController; // 0x30 (8)
	int32_t CurrentNetSpeed; // 0x38 (4)
	int32_t ConfiguredInternetSpeed; // 0x3C (4)
	int32_t ConfiguredLanSpeed; // 0x40 (4)
};

// Class Engine.MKNetConnectionEx
class UMKNetConnectionEx : public UPlayer {

public:

	struct Unknown SelfNetConnection; // 0xB0 (8)
};

// Class Engine.NetConnection
class UNetConnection : public UMKNetConnectionEx {

public:

	struct TArray<Unknown> Children; // 0xB8 (16)
	struct Unknown Driver; // 0xC8 (8)
	struct Unknown* PackageMapClass; // 0xD0 (8)
	struct Unknown PackageMap; // 0xD8 (8)
	struct TArray<Unknown> OpenChannels; // 0xE0 (16)
	struct TArray<Unknown> SentTemporaries; // 0xF0 (16)
	struct Unknown ViewTarget; // 0x100 (8)
	struct Unknown OwningActor; // 0x108 (8)
	int32_t MaxPacket; // 0x110 (4)
	char InternalAck : 0; // 0x114 (1)
	struct Unknown PlayerId; // 0x1D0 (40)
	double LastReceiveTime; // 0x240 (8)
	struct TArray<Unknown> ChannelsToTick; // 0x1580 (16)
};

// Class Engine.NetDriver
class UNetDriver : public Object {

public:

	struct FString NetConnectionClassName; // 0x30 (16)
	struct FString ReplicationDriverClassName; // 0x40 (16)
	int32_t MaxDownloadSize; // 0x50 (4)
	char bClampListenServerTickRate : 0; // 0x54 (1)
	int32_t NetServerMaxTickRate; // 0x58 (4)
	int32_t MaxNetTickRate; // 0x5C (4)
	int32_t MaxInternetClientRate; // 0x60 (4)
	int32_t MaxClientRate; // 0x64 (4)
	float ServerTravelPause; // 0x68 (4)
	float SpawnPrioritySeconds; // 0x6C (4)
	float RelevantTimeout; // 0x70 (4)
	float KeepAliveTime; // 0x74 (4)
	float InitialConnectTimeout; // 0x78 (4)
	float ConnectionTimeout; // 0x7C (4)
	float TimeoutMultiplierForUnoptimizedBuilds; // 0x80 (4)
	char bNoTimeouts : 0; // 0x84 (1)
	char bNeverApplyNetworkEmulationSettings : 0; // 0x85 (1)
	struct Unknown ServerConnection; // 0x88 (8)
	struct TArray<Unknown> ClientConnections; // 0x90 (16)
	int32_t RecentlyDisconnectedTrackingTime; // 0x100 (4)
	struct Unknown World; // 0x140 (8)
	struct Unknown WorldPackage; // 0x148 (8)
	struct Unknown* NetConnectionClass; // 0x170 (8)
	struct Unknown* ReplicationDriverClass; // 0x178 (8)
	struct FName NetDriverName; // 0x190 (8)
	struct TArray<Unknown> ChannelDefinitions; // 0x198 (16)
	struct TMap<Unknown, Unknown> ChannelDefinitionMap; // 0x1A8 (80)
	struct TArray<Unknown> ActorChannelPool; // 0x1F8 (16)
	float Time; // 0x210 (4)
	struct Unknown ReplicationDriver; // 0x6E8 (8)
};

// Class Engine.Engine
class UEngine : public Object {

public:

	struct Unknown TinyFont; // 0x30 (8)
	struct Unknown TinyFontName; // 0x38 (24)
	struct Unknown SmallFont; // 0x50 (8)
	struct Unknown SmallFontName; // 0x58 (24)
	struct Unknown MediumFont; // 0x70 (8)
	struct Unknown MediumFontName; // 0x78 (24)
	struct Unknown LargeFont; // 0x90 (8)
	struct Unknown LargeFontName; // 0x98 (24)
	struct Unknown SubtitleFont; // 0xB0 (8)
	struct Unknown SubtitleFontName; // 0xB8 (24)
	struct TArray<Unknown> AdditionalFonts; // 0xD0 (16)
	struct TArray<Unknown> AdditionalFontNames; // 0xE8 (16)
	struct Unknown* ConsoleClass; // 0xF8 (8)
	struct Unknown ConsoleClassName; // 0x100 (24)
	struct Unknown* GameViewportClientClass; // 0x118 (8)
	struct Unknown GameViewportClientClassName; // 0x120 (24)
	struct Unknown* LocalPlayerClass; // 0x138 (8)
	struct Unknown LocalPlayerClassName; // 0x140 (24)
	struct Unknown* WorldSettingsClass; // 0x158 (8)
	struct Unknown WorldSettingsClassName; // 0x160 (24)
	struct Unknown NavigationSystemClassName; // 0x178 (24)
	struct Unknown* NavigationSystemClass; // 0x190 (8)
	struct Unknown NavigationSystemConfigClassName; // 0x198 (24)
	struct Unknown* NavigationSystemConfigClass; // 0x1B0 (8)
	struct Unknown AvoidanceManagerClassName; // 0x1B8 (24)
	struct Unknown* AvoidanceManagerClass; // 0x1D0 (8)
	struct Unknown* PhysicsCollisionHandlerClass; // 0x1D8 (8)
	struct Unknown PhysicsCollisionHandlerClassName; // 0x1E0 (24)
	struct Unknown GameUserSettingsClassName; // 0x1F8 (24)
	struct Unknown* GameUserSettingsClass; // 0x210 (8)
	struct Unknown AIControllerClassName; // 0x218 (24)
	struct Unknown GameUserSettings; // 0x230 (8)
	struct Unknown* LevelScriptActorClass; // 0x238 (8)
	struct Unknown LevelScriptActorClassName; // 0x240 (24)
	struct Unknown DefaultBlueprintBaseClassName; // 0x258 (24)
	struct Unknown GameSingletonClassName; // 0x270 (24)
	struct Unknown GameSingleton; // 0x288 (8)
	struct Unknown AssetManagerClassName; // 0x290 (24)
	struct Unknown AssetManager; // 0x2A8 (8)
	struct Unknown DefaultTexture; // 0x2B0 (8)
	struct Unknown DefaultTextureName; // 0x2B8 (24)
	struct Unknown DefaultDiffuseTexture; // 0x2D0 (8)
	struct Unknown DefaultDiffuseTextureName; // 0x2D8 (24)
	struct Unknown DefaultBSPVertexTexture; // 0x2F0 (8)
	struct Unknown DefaultBSPVertexTextureName; // 0x2F8 (24)
	struct Unknown HighFrequencyNoiseTexture; // 0x310 (8)
	struct Unknown HighFrequencyNoiseTextureName; // 0x318 (24)
	struct Unknown DefaultBokehTexture; // 0x330 (8)
	struct Unknown DefaultBokehTextureName; // 0x338 (24)
	struct Unknown DefaultBloomKernelTexture; // 0x350 (8)
	struct Unknown DefaultBloomKernelTextureName; // 0x358 (24)
	struct Unknown WireframeMaterial; // 0x370 (8)
	struct FString WireframeMaterialName; // 0x378 (16)
	struct Unknown DebugMeshMaterial; // 0x388 (8)
	struct Unknown DebugMeshMaterialName; // 0x390 (24)
	struct Unknown EmissiveMeshMaterial; // 0x3A8 (8)
	struct Unknown EmissiveMeshMaterialName; // 0x3B0 (24)
	struct Unknown LevelColorationLitMaterial; // 0x3C8 (8)
	struct FString LevelColorationLitMaterialName; // 0x3D0 (16)
	struct Unknown LevelColorationUnlitMaterial; // 0x3E0 (8)
	struct FString LevelColorationUnlitMaterialName; // 0x3E8 (16)
	struct Unknown LightingTexelDensityMaterial; // 0x3F8 (8)
	struct FString LightingTexelDensityName; // 0x400 (16)
	struct Unknown ShadedLevelColorationLitMaterial; // 0x410 (8)
	struct FString ShadedLevelColorationLitMaterialName; // 0x418 (16)
	struct Unknown ShadedLevelColorationUnlitMaterial; // 0x428 (8)
	struct FString ShadedLevelColorationUnlitMaterialName; // 0x430 (16)
	struct Unknown RemoveSurfaceMaterial; // 0x440 (8)
	struct Unknown RemoveSurfaceMaterialName; // 0x448 (24)
	struct Unknown VertexColorMaterial; // 0x460 (8)
	struct FString VertexColorMaterialName; // 0x468 (16)
	struct Unknown VertexColorViewModeMaterial_ColorOnly; // 0x478 (8)
	struct FString VertexColorViewModeMaterialName_ColorOnly; // 0x480 (16)
	struct Unknown VertexColorViewModeMaterial_AlphaAsColor; // 0x490 (8)
	struct FString VertexColorViewModeMaterialName_AlphaAsColor; // 0x498 (16)
	struct Unknown VertexColorViewModeMaterial_RedOnly; // 0x4A8 (8)
	struct FString VertexColorViewModeMaterialName_RedOnly; // 0x4B0 (16)
	struct Unknown VertexColorViewModeMaterial_GreenOnly; // 0x4C0 (8)
	struct FString VertexColorViewModeMaterialName_GreenOnly; // 0x4C8 (16)
	struct Unknown VertexColorViewModeMaterial_BlueOnly; // 0x4D8 (8)
	struct FString VertexColorViewModeMaterialName_BlueOnly; // 0x4E0 (16)
	struct Unknown DebugEditorMaterialName; // 0x4F0 (24)
	struct Unknown ConstraintLimitMaterial; // 0x508 (8)
	struct Unknown ConstraintLimitMaterialX; // 0x510 (8)
	struct Unknown ConstraintLimitMaterialXAxis; // 0x518 (8)
	struct Unknown ConstraintLimitMaterialY; // 0x520 (8)
	struct Unknown ConstraintLimitMaterialYAxis; // 0x528 (8)
	struct Unknown ConstraintLimitMaterialZ; // 0x530 (8)
	struct Unknown ConstraintLimitMaterialZAxis; // 0x538 (8)
	struct Unknown ConstraintLimitMaterialPrismatic; // 0x540 (8)
	struct Unknown InvalidLightmapSettingsMaterial; // 0x548 (8)
	struct Unknown InvalidLightmapSettingsMaterialName; // 0x550 (24)
	struct Unknown PreviewShadowsIndicatorMaterial; // 0x568 (8)
	struct Unknown PreviewShadowsIndicatorMaterialName; // 0x570 (24)
	struct Unknown ArrowMaterial; // 0x588 (8)
	struct Unknown ArrowMaterialYellow; // 0x590 (8)
	struct Unknown ArrowMaterialName; // 0x598 (24)
	struct Unknown LightingOnlyBrightness; // 0x5B0 (16)
	struct TArray<Unknown> ShaderComplexityColors; // 0x5C0 (16)
	struct TArray<Unknown> QuadComplexityColors; // 0x5D0 (16)
	struct TArray<Unknown> LightComplexityColors; // 0x5E0 (16)
	struct TArray<Unknown> StationaryLightOverlapColors; // 0x5F0 (16)
	struct TArray<Unknown> LODColorationColors; // 0x600 (16)
	struct TArray<Unknown> HLODColorationColors; // 0x610 (16)
	struct TArray<Unknown> StreamingAccuracyColors; // 0x620 (16)
	float MaxPixelShaderAdditiveComplexityCount; // 0x630 (4)
	float MaxES3PixelShaderAdditiveComplexityCount; // 0x634 (4)
	float MinLightMapDensity; // 0x638 (4)
	float IdealLightMapDensity; // 0x63C (4)
	float MaxLightMapDensity; // 0x640 (4)
	char bRenderLightMapDensityGrayscale : 0; // 0x644 (1)
	float RenderLightMapDensityGrayscaleScale; // 0x648 (4)
	float RenderLightMapDensityColorScale; // 0x64C (4)
	struct Unknown LightMapDensityVertexMappedColor; // 0x650 (16)
	struct Unknown LightMapDensitySelectedColor; // 0x660 (16)
	struct TArray<Unknown> StatColorMappings; // 0x670 (16)
	struct Unknown DefaultPhysMaterial; // 0x680 (8)
	struct Unknown DefaultPhysMaterialName; // 0x688 (24)
	struct TArray<Unknown> ActiveGameNameRedirects; // 0x6A0 (16)
	struct TArray<Unknown> ActiveClassRedirects; // 0x6B0 (16)
	struct TArray<Unknown> ActivePluginRedirects; // 0x6C0 (16)
	struct TArray<Unknown> ActiveStructRedirects; // 0x6D0 (16)
	struct Unknown PreIntegratedSkinBRDFTexture; // 0x6E0 (8)
	struct Unknown PreIntegratedSkinBRDFTextureName; // 0x6E8 (24)
	struct Unknown BlueNoiseTexture; // 0x700 (8)
	struct Unknown BlueNoiseTextureName; // 0x708 (24)
	struct Unknown MiniFontTexture; // 0x720 (8)
	struct Unknown MiniFontTextureName; // 0x728 (24)
	struct Unknown WeightMapPlaceholderTexture; // 0x740 (8)
	struct Unknown WeightMapPlaceholderTextureName; // 0x748 (24)
	struct Unknown LightMapDensityTexture; // 0x760 (8)
	struct Unknown LightMapDensityTextureName; // 0x768 (24)
	struct Unknown GameViewport; // 0x788 (8)
	struct TArray<Unknown> DeferredCommands; // 0x790 (16)
	int32_t TickCycles; // 0x7A0 (4)
	int32_t GameCycles; // 0x7A4 (4)
	int32_t ClientCycles; // 0x7A8 (4)
	float NearClipPlane; // 0x7AC (4)
	float EditorNearClipPlane; // 0x7B0 (4)
	char bUseCustomAudioModule : 0; // 0x7B4 (1)
	char bHardwareSurveyEnabled : 0; // 0x7B8 (1)
	char bSubtitlesEnabled : 0; // 0x7B8 (1)
	char bSubtitlesForcedOff : 0; // 0x7B8 (1)
	int32_t MaximumLoopIterationCount; // 0x7BC (4)
	char bCanBlueprintsTickByDefault : 0; // 0x7C0 (1)
	char bOptimizeAnimBlueprintMemberVariableAccess : 0; // 0x7C0 (1)
	char bAllowMultiThreadedAnimationUpdate : 0; // 0x7C0 (1)
	char bEnableEditorPSysRealtimeLOD : 0; // 0x7C0 (1)
	char bSmoothFrameRate : 0; // 0x7C0 (1)
	char bUseFixedFrameRate : 0; // 0x7C0 (1)
	float FixedFrameRate; // 0x7C4 (4)
	struct Unknown SmoothedFrameRateRange; // 0x7C8 (16)
	struct Unknown CustomTimeStep; // 0x7D8 (8)
	struct Unknown CustomTimeStepClassName; // 0x800 (24)
	struct Unknown TimecodeProvider; // 0x818 (8)
	struct Unknown TimecodeProviderClassName; // 0x840 (24)
	char bGenerateDefaultTimecode : 0; // 0x858 (1)
	struct Unknown GenerateDefaultTimecodeFrameRate; // 0x85C (8)
	float GenerateDefaultTimecodeFrameDelay; // 0x864 (4)
	char bCheckForMultiplePawnsSpawnedInAFrame : 0; // 0x868 (1)
	int32_t NumPawnsAllowedToBeSpawnedInAFrame; // 0x86C (4)
	char bShouldGenerateLowQualityLightmaps : 0; // 0x870 (1)
	struct Unknown C_WorldBox; // 0x874 (4)
	struct Unknown C_BrushWire; // 0x878 (4)
	struct Unknown C_AddWire; // 0x87C (4)
	struct Unknown C_SubtractWire; // 0x880 (4)
	struct Unknown C_SemiSolidWire; // 0x884 (4)
	struct Unknown C_NonSolidWire; // 0x888 (4)
	struct Unknown C_WireBackground; // 0x88C (4)
	struct Unknown C_ScaleBoxHi; // 0x890 (4)
	struct Unknown C_VolumeCollision; // 0x894 (4)
	struct Unknown C_BSPCollision; // 0x898 (4)
	struct Unknown C_OrthoBackground; // 0x89C (4)
	struct Unknown C_Volume; // 0x8A0 (4)
	struct Unknown C_BrushShape; // 0x8A4 (4)
	float StreamingDistanceFactor; // 0x8A8 (4)
	struct Unknown GameScreenshotSaveDirectory; // 0x8B0 (16)
	enum class Unknow TransitionType; // 0x8C0 (1)
	struct FString TransitionDescription; // 0x8C8 (16)
	struct FString TransitionGameMode; // 0x8D8 (16)
	float MeshLODRange; // 0x8E8 (4)
	char bAllowMatureLanguage : 0; // 0x8EC (1)
	float CameraRotationThreshold; // 0x8F0 (4)
	float CameraTranslationThreshold; // 0x8F4 (4)
	float PrimitiveProbablyVisibleTime; // 0x8F8 (4)
	float MaxOcclusionPixelsFraction; // 0x8FC (4)
	char bPauseOnLossOfFocus : 0; // 0x900 (1)
	int32_t MaxParticleResize; // 0x904 (4)
	int32_t MaxParticleResizeWarn; // 0x908 (4)
	struct TArray<Unknown> PendingDroppedNotes; // 0x910 (16)
	float NetClientTicksPerSecond; // 0x920 (4)
	float DisplayGamma; // 0x924 (4)
	float MinDesiredFrameRate; // 0x928 (4)
	struct Unknown DefaultSelectedMaterialColor; // 0x92C (16)
	struct Unknown SelectedMaterialColor; // 0x93C (16)
	struct Unknown SelectionOutlineColor; // 0x94C (16)
	struct Unknown SubduedSelectionOutlineColor; // 0x95C (16)
	struct Unknown SelectedMaterialColorOverride; // 0x96C (16)
	char bIsOverridingSelectedColor : 0; // 0x97C (1)
	char bEnableOnScreenDebugMessages : 0; // 0x980 (1)
	char bEnableOnScreenDebugMessagesDisplay : 0; // 0x980 (1)
	char bSuppressMapWarnings : 0; // 0x980 (1)
	char bDisableAILogging : 0; // 0x980 (1)
	uint32_t bEnableVisualLogRecordingOnStart; // 0x984 (4)
	int32_t ScreenSaverInhibitorSemaphore; // 0x98C (4)
	char bLockReadOnlyLevels : 0; // 0x990 (1)
	struct FString ParticleEventManagerClassPath; // 0x998 (16)
	float SelectionHighlightIntensity; // 0x9A8 (4)
	float BSPSelectionHighlightIntensity; // 0x9AC (4)
	float SelectionHighlightIntensityBillboards; // 0x9B0 (4)
	struct TArray<Unknown> NetDriverDefinitions; // 0xC00 (16)
	struct TArray<Unknown> ServerActors; // 0xC10 (16)
	struct TArray<Unknown> RuntimeServerActors; // 0xC20 (16)
	float NetErrorLogInterval; // 0xC30 (4)
	char bStartedLoadMapMovie : 0; // 0xC34 (1)
	int32_t NextWorldContextHandle; // 0xC50 (4)
};

// Class Engine.LocalPlayer
class ULocalPlayer : public UPlayer {

public:

	struct Unknown ViewportClient; // 0x70 (8)
	char AspectRatioAxisConstraint; // 0x94 (1)
	struct Unknown* PendingLevelPlayerControllerClass; // 0x98 (8)
	char bSentSplitJoin : 0; // 0xA0 (1)
	int32_t ControllerId; // 0xB8 (4)
};

// Class Engine.SkeletalMeshComponent
class USkeletalMeshComponent : public USkinnedMeshComponent {

public:

	struct Unknown* AnimBlueprintGeneratedClass; // 0x6F0 (8)
	struct Unknown* AnimClass; // 0x6F8 (8)
	struct Unknown AnimScriptInstance; // 0x700 (8)
	struct Unknown PostprocessAnimInstance; // 0x708 (8)
	struct Unknown AnimationData; // 0x710 (24)
	struct Unknown RootBoneTranslation; // 0x738 (12)
	struct Unknown LineCheckBoundsScale; // 0x744 (12)
	struct TArray<Unknown> LinkedInstances; // 0x770 (16)
	struct TArray<Unknown> CachedBoneSpaceTransforms; // 0x780 (16)
	struct TArray<Unknown> CachedComponentSpaceTransforms; // 0x790 (16)
	float GlobalAnimRateScale; // 0x7C0 (4)
	char KinematicBonesUpdateType; // 0x7C4 (1)
	char PhysicsTransformUpdateMode; // 0x7C5 (1)
	char AnimationMode; // 0x7CD (1)
	char bDisablePostProcessBlueprint : 0; // 0x7CF (1)
	char bUpdateOverlapsOnAnimationFinalize : 0; // 0x7CF (1)
	char bHasValidBodies : 0; // 0x7CF (1)
	char bBlendPhysics : 0; // 0x7CF (1)
	char bEnablePhysicsOnDedicatedServer : 0; // 0x7CF (1)
	char bUpdateJointsFromAnimation : 0; // 0x7D0 (1)
	char bDisableClothSimulation : 0; // 0x7D0 (1)
	char bDisableRigidBodyAnimNode : 0; // 0x7D0 (1)
	char bAllowAnimCurveEvaluation : 0; // 0x7D0 (1)
	char bDisableAnimCurves : 0; // 0x7D0 (1)
	char bCollideWithEnvironment : 0; // 0x7D1 (1)
	char bCollideWithAttachedChildren : 0; // 0x7D1 (1)
	char bLocalSpaceSimulation : 0; // 0x7D1 (1)
	char bResetAfterTeleport : 0; // 0x7D1 (1)
	char bDeferKinematicBoneUpdate : 0; // 0x7D1 (1)
	char bNoSkeletonUpdate : 0; // 0x7D1 (1)
	char bPauseAnims : 0; // 0x7D1 (1)
	char bUseRefPoseOnInitAnim : 0; // 0x7D2 (1)
	char bEnablePerPolyCollision : 0; // 0x7D2 (1)
	char bForceRefpose : 0; // 0x7D2 (1)
	char bOnlyAllowAutonomousTickPose : 0; // 0x7D2 (1)
	char bIsAutonomousTickPose : 0; // 0x7D2 (1)
	char bOldForceRefPose : 0; // 0x7D2 (1)
	char bShowPrePhysBones : 0; // 0x7D2 (1)
	char bRequiredBonesUpToDate : 0; // 0x7D2 (1)
	char bAnimTreeInitialised : 0; // 0x7D3 (1)
	char bIncludeComponentLocationIntoBounds : 0; // 0x7D3 (1)
	char bEnableLineCheckWithBounds : 0; // 0x7D3 (1)
	char bUseBendingElements : 0; // 0x7D3 (1)
	char bUseTetrahedralConstraints : 0; // 0x7D3 (1)
	char bUseThinShellVolumeConstraints : 0; // 0x7D3 (1)
	char bUseSelfCollisions : 0; // 0x7D3 (1)
	char bUseContinuousCollisionDetection : 0; // 0x7D3 (1)
	char bPropagateCurvesToSlaves : 0; // 0x7D4 (1)
	char bSkipKinematicUpdateWhenInterpolating : 0; // 0x7D4 (1)
	char bSkipBoundsUpdateWhenInterpolating : 0; // 0x7D4 (1)
	char bNeedsQueuedAnimEventsDispatched : 0; // 0x7D4 (1)
	uint16_t CachedAnimCurveUidVersion; // 0x7D6 (2)
	enum class Unknow MassMode; // 0x7D8 (1)
	float UniformMass; // 0x7DC (4)
	float TotalMass; // 0x7E0 (4)
	float Density; // 0x7E4 (4)
	float MinPerParticleMass; // 0x7E8 (4)
	float ClothBlendWeight; // 0x7EC (4)
	float EdgeStiffness; // 0x7F0 (4)
	float BendingStiffness; // 0x7F4 (4)
	float AreaStiffness; // 0x7F8 (4)
	float VolumeStiffness; // 0x7FC (4)
	float StrainLimitingStiffness; // 0x800 (4)
	float ShapeTargetStiffness; // 0x804 (4)
	struct TArray<Unknown> DisallowedAnimCurves; // 0x808 (16)
	struct Unknown BodySetup; // 0x818 (8)
	struct FMulticastInlineDelegate OnConstraintBroken; // 0x828 (16)
	struct Unknown* ClothingSimulationFactory; // 0x838 (8)
	float TeleportDistanceThreshold; // 0x908 (4)
	float TeleportRotationThreshold; // 0x90C (4)
	uint32_t LastPoseTickFrame; // 0x918 (4)
	struct Unknown ClothingInteractor; // 0x970 (8)
	struct FMulticastInlineDelegate OnAnimInitialized; // 0xA40 (16)

	void UnlinkAnimClassLayers(struct Unknown* InClass); // Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2D40>
	void UnbindClothFromMasterPoseComponent(char bRestoreSimulationSpace); // Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2CB0>
	void ToggleDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2C90>
	void TermBodiesBelow(struct FName ParentBoneName); // Function Engine.SkeletalMeshComponent.TermBodiesBelow(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2C10>
	void SuspendClothingSimulation(); // Function Engine.SkeletalMeshComponent.SuspendClothingSimulation(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2BF0>
	void Stop(); // Function Engine.SkeletalMeshComponent.Stop(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2BD0>
	void SnapshotPose(struct Unknown& Snapshot); // Function Engine.SkeletalMeshComponent.SnapshotPose(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45C2B00>
	void SetUpdateAnimationInEditor(char NewUpdateState); // Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x12620D0>
	void SetTeleportRotationThreshold(float threshold); // Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2A80>
	void SetTeleportDistanceThreshold(float threshold); // Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2A00>
	void SetPosition(float InPos, char bFireNotifies); // Function Engine.SkeletalMeshComponent.SetPosition(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2930>
	void SetPlayRate(float Rate); // Function Engine.SkeletalMeshComponent.SetPlayRate(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C28B0>
	void SetPhysicsBlendWeight(float PhysicsBlendWeight); // Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2830>
	void SetNotifyRigidBodyCollisionBelow(char bNewNotifyRigidBodyCollision, struct FName BoneName, char bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2720>
	void SetMorphTarget(struct FName MorphTargetName, float Value, char bRemoveZeroWeight); // Function Engine.SkeletalMeshComponent.SetMorphTarget(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2610>
	void SetEnablePhysicsBlending(char bNewBlendPhysics); // Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2580>
	void SetEnableGravityOnAllBodiesBelow(char bEnableGravity, struct FName BoneName, char bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2470>
	void SetEnableBodyGravity(char bEnableGravity, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetEnableBodyGravity(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C23B0>
	void SetDisablePostProcessBlueprint(char bInDisablePostProcess); // Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2320>
	void SetDisableAnimCurves(char bInDisableAnimCurves); // Function Engine.SkeletalMeshComponent.SetDisableAnimCurves(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2290>
	void SetConstraintProfileForAll(struct FName ProfileName, char bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C21C0>
	void SetConstraintProfile(struct FName JointName, struct FName ProfileName, char bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfile(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C20B0>
	void SetClothMaxDistanceScale(float Scale); // Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C2030>
	void SetBodyNotifyRigidBodyCollision(char bNewNotifyRigidBodyCollision, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C1F60>
	void SetAnimClass(struct Unknown* NewClass); // Function Engine.SkeletalMeshComponent.SetAnimClass(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C1DD0>
	void SetAnimationMode(char InAnimationMode); // Function Engine.SkeletalMeshComponent.SetAnimationMode(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C1EE0>
	void SetAnimation(struct Unknown NewAnimToPlay); // Function Engine.SkeletalMeshComponent.SetAnimation(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C1E60>
	void SetAngularLimits(struct FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle); // Function Engine.SkeletalMeshComponent.SetAngularLimits(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C1C80>
	void SetAllowRigidBodyAnimNode(char bInAllow, char bReinitAnim); // Function Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C1AB0>
	void SetAllowedAnimCurvesEvaluation(struct TArray<Unknown>& List, char bAllow); // Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45C1B80>
	void SetAllowAnimCurveEvaluation(char bInAllow); // Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C1A20>
	void SetAllMotorsAngularVelocityDrive(char bEnableSwingDrive, char bEnableTwistDrive, char bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C1900>
	void SetAllMotorsAngularPositionDrive(char bEnableSwingDrive, char bEnableTwistDrive, char bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C17E0>
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, char bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C1680>
	void SetAllBodiesSimulatePhysics(char bNewSimulate); // Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C15F0>
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, char bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C1520>
	void SetAllBodiesBelowSimulatePhysics(struct FName& InBoneName, char bNewSimulate, char bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45C1400>
	void SetAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float PhysicsBlendWeight, char bSkipCustomPhysicsType, char bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45C1290>
	void ResumeClothingSimulation(); // Function Engine.SkeletalMeshComponent.ResumeClothingSimulation(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C1270>
	void ResetClothTeleportMode(); // Function Engine.SkeletalMeshComponent.ResetClothTeleportMode(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C1250>
	void ResetAnimInstanceDynamics(enum class Unknow InTeleportType); // Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C11D0>
	void ResetAllowedAnimCurveEvaluation(); // Function Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C11B0>
	void ResetAllBodiesSimulatePhysics(); // Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C1190>
	void PlayAnimation(struct Unknown NewAnimToPlay, char bLooping); // Function Engine.SkeletalMeshComponent.PlayAnimation(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C10C0>
	void Play(char bLooping); // Function Engine.SkeletalMeshComponent.Play(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C1030>
	void OverrideAnimationData(struct Unknown InAnimToPlay, char bIsLooping, char bIsPlaying, float Position, float PlayRate); // Function Engine.SkeletalMeshComponent.OverrideAnimationData(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C0E90>
	void LinkAnimGraphByTag(struct FName InTag, struct Unknown* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C0DD0>
	void LinkAnimClassLayers(struct Unknown* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimClassLayers(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C0D50>
	char K2_GetClosestPointOnPhysicsAsset(struct Unknown& WorldPosition, struct Unknown& ClosestWorldPosition, struct Unknown& Normal, struct FName& BoneName, float& Distance); // Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C0B50>
	char IsPlaying(); // Function Engine.SkeletalMeshComponent.IsPlaying(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C0B20>
	char IsClothingSimulationSuspended(); // Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C0AF0>
	char IsBodyGravityEnabled(struct FName BoneName); // Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C0A60>
	char HasValidAnimationInstance(); // Function Engine.SkeletalMeshComponent.HasValidAnimationInstance(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C0A30>
	float GetTeleportRotationThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C0A00>
	float GetTeleportDistanceThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C0A00>
	struct Unknown GetSkeletalCenterOfMass(); // Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C09C0>
	struct Unknown GetPostProcessInstance(); // Function Engine.SkeletalMeshComponent.GetPostProcessInstance(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x1E6D470>
	float GetPosition(); // Function Engine.SkeletalMeshComponent.GetPosition(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C0990>
	float GetPlayRate(); // Function Engine.SkeletalMeshComponent.GetPlayRate(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C0960>
	float GetMorphTarget(struct FName MorphTargetName); // Function Engine.SkeletalMeshComponent.GetMorphTarget(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C08C0>
	struct Unknown GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C0830>
	struct Unknown GetLinkedAnimLayerInstanceByClass(struct Unknown* InClass); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C07A0>
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<Unknown>& OutLinkedInstances); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C06B0>
	struct Unknown GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C0620>
	char GetDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C05F0>
	char GetDisableAnimCurves(); // Function Engine.SkeletalMeshComponent.GetDisableAnimCurves(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C05C0>
	void GetCurrentJointAngles(struct FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle); // Function Engine.SkeletalMeshComponent.GetCurrentJointAngles(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45C0440>
	float GetClothMaxDistanceScale(); // Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C03E0>
	struct Unknown GetClothingSimulationInteractor(); // Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C0410>
	float GetBoneMass(struct FName BoneName, char bScaleMass); // Function Engine.SkeletalMeshComponent.GetBoneMass(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C0310>
	struct Unknown GetAnimInstance(); // Function Engine.SkeletalMeshComponent.GetAnimInstance(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C02B0>
	struct Unknown* GetAnimClass(); // Function Engine.SkeletalMeshComponent.GetAnimClass(Final|Native|Public) // <Game_BE.exe+0x45C0280>
	char GetAnimationMode(); // Function Engine.SkeletalMeshComponent.GetAnimationMode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C02E0>
	char GetAllowRigidBodyAnimNode(); // Function Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C0220>
	char GetAllowedAnimCurveEvaluate(); // Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45C0250>
	void ForceClothNextUpdateTeleportAndReset(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C0200>
	void ForceClothNextUpdateTeleport(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C01E0>
	struct FName FindConstraintBoneName(int32_t ConstraintIndex); // Function Engine.SkeletalMeshComponent.FindConstraintBoneName(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C0150>
	void ClearMorphTargets(); // Function Engine.SkeletalMeshComponent.ClearMorphTargets(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45C0130>
	void BreakConstraint(struct Unknown Impulse, struct Unknown HitLocation, struct FName InBoneName); // Function Engine.SkeletalMeshComponent.BreakConstraint(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45C0000>
	void BindClothToMasterPoseComponent(); // Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45BFFE0>
	void AllowAnimCurveEvaluation(struct FName NameOfCurve, char bAllow); // Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45BFF10>
	void AddImpulseToAllBodiesBelow(struct Unknown Impulse, struct FName BoneName, char bVelChange, char bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45BFDA0>
	void AddForceToAllBodiesBelow(struct Unknown Force, struct FName BoneName, char bAccelChange, char bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45BFC30>
	void AccumulateAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float AddPhysicsBlendWeight, char bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45BFB10>
};

// Class Engine.AnimInstance
class UAnimInstance : public Object {

public:

	struct Unknown CurrentSkeleton; // 0x260 (8)
	char RootMotionMode; // 0x269 (1)
	char bUseMultiThreadedAnimationUpdate : 0; // 0x258 (1)
	char bUsingCopyPoseFromMesh : 0; // 0x26A (1)
	char bReceiveNotifiesFromLinkedInstances : 0; // 0x258 (1)
	char bPropagateNotifiesToLinkedInstances : 0; // 0x258 (1)
	char bQueueMontageEvents : 0; // 0x258 (1)
	struct FMulticastInlineDelegate OnMontageBlendingOut; // 0x28 (16)
	struct FMulticastInlineDelegate OnMontageStarted; // 0x38 (16)
	struct FMulticastInlineDelegate OnMontageEnded; // 0x48 (16)
	struct FMulticastInlineDelegate OnAllMontageInstancesEnded; // 0x58 (16)
	struct Unknown NotifyQueue; // 0xF0 (112)
	struct TArray<Unknown> ActiveAnimNotifyState; // 0x160 (16)

	void UnlockAIResources(char bUnlockMovement, char UnlockAILogic); // Function Engine.AnimInstance.UnlockAIResources(Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game_BE.exe+0x1EFE490>
	void UnlinkAnimClassLayers(struct Unknown* InClass); // Function Engine.AnimInstance.UnlinkAnimClassLayers(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4444420>
	struct Unknown TryGetPawnOwner(); // Function Engine.AnimInstance.TryGetPawnOwner(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44443F0>
	void StopSlotAnimation(float InBlendOutTime, struct FName SlotNodeName); // Function Engine.AnimInstance.StopSlotAnimation(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4444320>
	void SnapshotPose(struct Unknown& Snapshot); // Function Engine.AnimInstance.SnapshotPose(Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x4444250>
	void SetRootMotionMode(char Value); // Function Engine.AnimInstance.SetRootMotionMode(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44441D0>
	void SetReceiveNotifiesFromLinkedInstances(char bSet); // Function Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4444140>
	void SetPropagateNotifiesToLinkedInstances(char bSet); // Function Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44440B0>
	void SetMorphTarget(struct FName MorphTargetName, float Value); // Function Engine.AnimInstance.SetMorphTarget(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443FE0>
	void SavePoseSnapshot(struct FName SnapshotName); // Function Engine.AnimInstance.SavePoseSnapshot(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443F50>
	void ResetDynamics(enum class Unknow InTeleportType); // Function Engine.AnimInstance.ResetDynamics(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443ED0>
	struct Unknown PlaySlotAnimationAsDynamicMontage(struct Unknown Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443C90>
	float PlaySlotAnimation(struct Unknown Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount); // Function Engine.AnimInstance.PlaySlotAnimation(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443AD0>
	void Montage_StopGroupByName(float InBlendOutTime, struct FName GroupName); // Function Engine.AnimInstance.Montage_StopGroupByName(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443A00>
	void Montage_Stop(float InBlendOutTime, struct Unknown Montage); // Function Engine.AnimInstance.Montage_Stop(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443930>
	void Montage_SetPosition(struct Unknown Montage, float NewPosition); // Function Engine.AnimInstance.Montage_SetPosition(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443860>
	void Montage_SetPlayRate(struct Unknown Montage, float NewPlayRate); // Function Engine.AnimInstance.Montage_SetPlayRate(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443790>
	void Montage_SetNextSection(struct FName SectionNameToChange, struct FName NextSection, struct Unknown Montage); // Function Engine.AnimInstance.Montage_SetNextSection(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443690>
	void Montage_Resume(struct Unknown Montage); // Function Engine.AnimInstance.Montage_Resume(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443610>
	float Montage_Play(struct Unknown MontageToPlay, float InPlayRate, enum class Unknow ReturnValueType, float InTimeToStartMontageAt, char bStopAllMontages); // Function Engine.AnimInstance.Montage_Play(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443480>
	void Montage_Pause(struct Unknown Montage); // Function Engine.AnimInstance.Montage_Pause(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443400>
	void Montage_JumpToSectionsEnd(struct FName SectionName, struct Unknown Montage); // Function Engine.AnimInstance.Montage_JumpToSectionsEnd(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443340>
	void Montage_JumpToSection(struct FName SectionName, struct Unknown Montage); // Function Engine.AnimInstance.Montage_JumpToSection(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4443280>
	char Montage_IsPlaying(struct Unknown Montage); // Function Engine.AnimInstance.Montage_IsPlaying(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44431F0>
	char Montage_IsActive(struct Unknown Montage); // Function Engine.AnimInstance.Montage_IsActive(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4443160>
	float Montage_GetPosition(struct Unknown Montage); // Function Engine.AnimInstance.Montage_GetPosition(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44430C0>
	float Montage_GetPlayRate(struct Unknown Montage); // Function Engine.AnimInstance.Montage_GetPlayRate(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4443020>
	char Montage_GetIsStopped(struct Unknown Montage); // Function Engine.AnimInstance.Montage_GetIsStopped(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4442F90>
	struct FName Montage_GetCurrentSection(struct Unknown Montage); // Function Engine.AnimInstance.Montage_GetCurrentSection(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4442F00>
	float Montage_GetBlendTime(struct Unknown Montage); // Function Engine.AnimInstance.Montage_GetBlendTime(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4442E60>
	void LockAIResources(char bLockMovement, char LockAILogic); // Function Engine.AnimInstance.LockAIResources(Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game_BE.exe+0x1EFE490>
	void LinkAnimGraphByTag(struct FName InTag, struct Unknown* InClass); // Function Engine.AnimInstance.LinkAnimGraphByTag(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4442DA0>
	void LinkAnimClassLayers(struct Unknown* InClass); // Function Engine.AnimInstance.LinkAnimClassLayers(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4442D20>
	char IsSyncGroupBetweenMarkers(struct FName InSyncGroupName, struct FName PreviousMarker, struct FName NextMarker, char bRespectMarkerOrder); // Function Engine.AnimInstance.IsSyncGroupBetweenMarkers(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4442BD0>
	char IsPlayingSlotAnimation(struct Unknown Asset, struct FName SlotNodeName); // Function Engine.AnimInstance.IsPlayingSlotAnimation(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4442B10>
	char IsAnyMontagePlaying(); // Function Engine.AnimInstance.IsAnyMontagePlaying(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4442AE0>
	char HasMarkerBeenHitThisFrame(struct FName SyncGroup, struct FName MarkerName); // Function Engine.AnimInstance.HasMarkerBeenHitThisFrame(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4442A20>
	char GetTimeToClosestMarker(struct FName SyncGroup, struct FName MarkerName, float& OutMarkerTime); // Function Engine.AnimInstance.GetTimeToClosestMarker(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4442910>
	struct Unknown GetSyncGroupPosition(struct FName InSyncGroupName); // Function Engine.AnimInstance.GetSyncGroupPosition(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4442870>
	float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x44427B0>
	float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemaining(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x44426F0>
	float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeFraction(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4442630>
	float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTime(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4442570>
	float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimLength(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x44424B0>
	char GetReceiveNotifiesFromLinkedInstances(); // Function Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4442480>
	char GetPropagateNotifiesToLinkedInstances(); // Function Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4442450>
	struct Unknown GetOwningComponent(); // Function Engine.AnimInstance.GetOwningComponent(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4442420>
	struct Unknown GetOwningActor(); // Function Engine.AnimInstance.GetOwningActor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44423F0>
	struct Unknown GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4442360>
	struct Unknown GetLinkedAnimLayerInstanceByClass(struct Unknown* InClass); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44422D0>
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<Unknown>& OutLinkedInstances); // Function Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44421E0>
	struct Unknown GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4442150>
	float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4442090>
	float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4441FD0>
	float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4441F10>
	float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetInstanceStateWeight(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4441E50>
	float GetInstanceMachineWeight(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceMachineWeight(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4441DC0>
	float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4441D30>
	float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4441CA0>
	float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4441C10>
	float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4441B80>
	float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTime(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4441AF0>
	float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerLength(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4441A60>
	float GetCurveValue(struct FName CurveName); // Function Engine.AnimInstance.GetCurveValue(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44419C0>
	struct FName GetCurrentStateName(int32_t MachineIndex); // Function Engine.AnimInstance.GetCurrentStateName(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4441930>
	struct Unknown GetCurrentActiveMontage(); // Function Engine.AnimInstance.GetCurrentActiveMontage(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4441900>
	void GetAllCurveNames(struct TArray<Unknown>& OutNames); // Function Engine.AnimInstance.GetAllCurveNames(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4441850>
	void GetActiveCurveNames(enum class Unknow CurveType, struct TArray<Unknown>& OutNames); // Function Engine.AnimInstance.GetActiveCurveNames(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4441760>
	void ClearMorphTargets(); // Function Engine.AnimInstance.ClearMorphTargets(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4441740>
	float CalculateDirection(struct Unknown& Velocity, struct Unknown& BaseRotation); // Function Engine.AnimInstance.CalculateDirection(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4441640>
	void BlueprintUpdateAnimation(float DeltaTimeX); // Function Engine.AnimInstance.BlueprintUpdateAnimation(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void BlueprintPostEvaluateAnimation(); // Function Engine.AnimInstance.BlueprintPostEvaluateAnimation(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void BlueprintLinkedAnimationLayersInitialized(); // Function Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void BlueprintInitializeAnimation(); // Function Engine.AnimInstance.BlueprintInitializeAnimation(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void BlueprintBeginPlay(); // Function Engine.AnimInstance.BlueprintBeginPlay(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
};

// Class Engine.Exporter
class UExporter : public Object {

public:

	struct Unknown* SupportedClass; // 0x28 (8)
	struct Unknown ExportRootScope; // 0x30 (8)
	struct TArray<Unknown> FormatExtension; // 0x38 (16)
	struct TArray<Unknown> FormatDescription; // 0x48 (16)
	int32_t PreferredFormatIndex; // 0x58 (4)
	int32_t TextIndent; // 0x5C (4)
	char bText : 0; // 0x60 (1)
	char bSelectedOnly : 0; // 0x60 (1)
	char bForceFileOperations : 0; // 0x60 (1)
	struct Unknown ExportTask; // 0x68 (8)

	char ScriptRunAssetExportTask(struct Unknown Task); // Function Engine.Exporter.ScriptRunAssetExportTask(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	char RunAssetExportTasks(struct TArray<Unknown>& ExportTasks); // Function Engine.Exporter.RunAssetExportTasks(Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x44B27A0>
	char RunAssetExportTask(struct Unknown Task); // Function Engine.Exporter.RunAssetExportTask(Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // <Game_BE.exe+0x17ED8A0>
};

// Class Engine.LevelScriptActor
class ALevelScriptActor : public UActor {

public:

	char bInputEnabled : 0; // 0x318 (1)

	void WorldOriginLocationChanged(struct Unknown OldOriginLocation, struct Unknown NewOriginLocation); // Function Engine.LevelScriptActor.WorldOriginLocationChanged(Event|Public|HasDefaults|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void SetCinematicMode(char bCinematicMode, char bHidePlayer, char bAffectsHUD, char bAffectsMovement, char bAffectsTurning); // Function Engine.LevelScriptActor.SetCinematicMode(Native|Public|BlueprintCallable) // <Game_BE.exe+0x453C920>
	char RemoteEvent(struct FName EventName); // Function Engine.LevelScriptActor.RemoteEvent(Native|Public|BlueprintCallable) // <Game_BE.exe+0x453C3D0>
	void LevelReset(); // Function Engine.LevelScriptActor.LevelReset(BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
};

// Class Engine.FXSystemAsset
class UFXSystemAsset : public Object {

public:

	uint32_t MaxPoolSize; // 0x28 (4)
};

// Class Engine.Brush
class ABrush : public UActor {

public:

	char BrushType; // 0x318 (1)
	struct Unknown BrushColor; // 0x31C (4)
	int32_t PolyFlags; // 0x320 (4)
	char bColored : 0; // 0x324 (1)
	char bSolidWhenSelected : 0; // 0x324 (1)
	char bPlaceableFromClassBrowser : 0; // 0x324 (1)
	char bNotForClientOrServer : 0; // 0x324 (1)
	struct Unknown Brush; // 0x328 (8)
	struct Unknown BrushComponent; // 0x330 (8)
	char bInManipulation : 0; // 0x338 (1)
	struct TArray<Unknown> SavedSelections; // 0x340 (16)
};

// Class Engine.MKWorldEx
class UMKWorldEx : public Object {

public:

	struct Unknown SelfWorld; // 0x38 (8)
};

// Class Engine.World
class UWorld : public UMKWorldEx {

public:

	struct Unknown PersistentLevel; // 0x48 (8)
	struct Unknown NetDriver; // 0x50 (8)
	struct Unknown LineBatcher; // 0x58 (8)
	struct Unknown PersistentLineBatcher; // 0x60 (8)
	struct Unknown ForegroundLineBatcher; // 0x68 (8)
	struct Unknown NetworkManager; // 0x70 (8)
	struct Unknown PhysicsCollisionHandler; // 0x78 (8)
	struct TArray<Unknown> ExtraReferencedObjects; // 0x80 (16)
	struct TArray<Unknown> PerModuleDataObjects; // 0x90 (16)
	struct TArray<Unknown> LevelSequenceActors; // 0xA0 (16)
	struct TArray<Unknown> StreamingLevels; // 0xB0 (16)
	struct Unknown StreamingLevelsToConsider; // 0xC0 (72)
	struct FString StreamingLevelsPrefix; // 0x120 (16)
	struct Unknown CurrentLevelPendingVisibility; // 0x130 (8)
	struct Unknown CurrentLevelPendingInvisibility; // 0x138 (8)
	struct Unknown DemoNetDriver; // 0x140 (8)
	struct Unknown MyParticleEventManager; // 0x148 (8)
	struct Unknown DefaultPhysicsVolume; // 0x150 (8)
	char bAreConstraintsDirty : 0; // 0x16E (1)
	struct Unknown NavigationSystem; // 0x170 (8)
	struct Unknown AuthorityGameMode; // 0x178 (8)
	struct Unknown GameState; // 0x180 (8)
	struct Unknown AISystem; // 0x188 (8)
	struct Unknown AvoidanceManager; // 0x190 (8)
	struct TArray<Unknown> Levels; // 0x198 (16)
	struct TArray<Unknown> LevelCollections; // 0x1A8 (16)
	struct Unknown OwningGameInstance; // 0x1D8 (8)
	struct TArray<Unknown> ParameterCollectionInstances; // 0x1E0 (16)
	struct Unknown CanvasForRenderingToTarget; // 0x1F0 (8)
	struct Unknown CanvasForDrawMaterialToRenderTarget; // 0x1F8 (8)
	struct TArray<Unknown> ComponentsThatNeedEndOfFrameUpdate; // 0x250 (16)
	struct TArray<Unknown> ComponentsThatNeedEndOfFrameUpdate_OnGameThread; // 0x260 (16)
	struct Unknown WorldComposition; // 0x5B0 (8)
	struct Unknown PSCPool; // 0x650 (88)

	struct Unknown K2_GetWorldSettings(); // Function Engine.World.K2_GetWorldSettings(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45FCB00>
	void HandleTimelineScrubbed(); // Function Engine.World.HandleTimelineScrubbed(Final|Native|Public) // <Game_BE.exe+0x45FCAE0>
};

// Class Engine.InterpTrack
class UInterpTrack : public Object {

public:

	struct TArray<Unknown> SubTracks; // 0x38 (16)
	struct Unknown* TrackInstClass; // 0x48 (8)
	char ActiveCondition; // 0x50 (1)
	struct FString TrackTitle; // 0x58 (16)
	char bOnePerGroup : 0; // 0x68 (1)
	char bDirGroupOnly : 0; // 0x68 (1)
	char bDisableTrack : 0; // 0x68 (1)
	char bIsSelected : 0; // 0x68 (1)
	char bIsAnimControlTrack : 0; // 0x68 (1)
	char bSubTrackOnly : 0; // 0x68 (1)
	char bVisible : 0; // 0x68 (1)
	char bIsRecording : 0; // 0x68 (1)
};

// Class Engine.InterpTrackVectorBase
class UInterpTrackVectorBase : public UInterpTrack {

public:

	struct Unknown VectorTrack; // 0x70 (24)
	float CurveTension; // 0x88 (4)
};

// Class Engine.InterpTrackFloatBase
class UInterpTrackFloatBase : public UInterpTrack {

public:

	struct Unknown FloatTrack; // 0x70 (24)
	float CurveTension; // 0x88 (4)
};

// Class Engine.DataAsset
class UDataAsset : public Object {

public:

	struct Unknown* NativeClass; // 0x28 (8)
};

// Class Engine.MaterialExpression
class UMaterialExpression : public Object {

public:

	struct Unknown Material; // 0x28 (8)
	struct Unknown Function; // 0x30 (8)
	char bIsParameterExpression : 0; // 0x38 (1)
};

// Class Engine.MaterialExpressionTextureBase
class UMaterialExpressionTextureBase : public UMaterialExpression {

public:

	struct Unknown Texture; // 0x40 (8)
	char SamplerType; // 0x48 (1)
	char IsDefaultMeshpaintTexture : 0; // 0x49 (1)
};

// Class Engine.MaterialExpressionTextureSample
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase {

public:

	struct Unknown Coordinates; // 0x50 (12)
	struct Unknown TextureObject; // 0x64 (12)
	struct Unknown MipValue; // 0x78 (12)
	struct Unknown CoordinatesDX; // 0x8C (12)
	struct Unknown CoordinatesDY; // 0xA0 (12)
	struct Unknown AutomaticViewMipBiasValue; // 0xB4 (12)
	char MipValueMode; // 0xC8 (1)
	char SamplerSource; // 0xC9 (1)
	char AutomaticViewMipBias : 0; // 0xCA (1)
	char ConstCoordinate; // 0xCB (1)
	int32_t ConstMipValue; // 0xCC (4)
};

// Class Engine.MaterialExpressionTextureSampleParameter
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample {

public:

	struct FName ParameterName; // 0xD0 (8)
	struct Unknown ExpressionGUID; // 0xD8 (16)
	struct FName Group; // 0xE8 (8)
};

// Class Engine.MKPawnEx
class AMKPawnEx : public UActor {

public:

	struct Unknown SelfPawn; // 0x320 (8)

	void OnChangedViewMode(); // Function Engine.MKPawnEx.OnChangedViewMode(Native|Event|Public|BlueprintEvent) // <Game_BE.exe+0x1E71820>
};

// Class Engine.Pawn
class APawn : public AMKPawnEx {

public:

	char bUseControllerRotationPitch : 0; // 0x330 (1)
	char bUseControllerRotationYaw : 0; // 0x330 (1)
	char bUseControllerRotationRoll : 0; // 0x330 (1)
	char bCanAffectNavigationGeneration : 0; // 0x330 (1)
	float BaseEyeHeight; // 0x334 (4)
	char AutoPossessPlayer; // 0x338 (1)
	enum class Unknow AutoPossessAI; // 0x339 (1)
	uint16_t RemoteViewPitch; // 0x33A (2)
	uint16_t RemoteViewYaw; // 0x33C (2)
	struct Unknown* AIControllerClass; // 0x340 (8)
	struct Unknown PlayerState; // 0x348 (8)
	struct Unknown LastHitBy; // 0x358 (8)
	struct Unknown Controller; // 0x360 (8)
	struct Unknown ControlInputVector; // 0x36C (12)
	struct Unknown LastControlInputVector; // 0x378 (12)

	void SpawnDefaultController(); // Function Engine.Pawn.SpawnDefaultController(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4583830>
	void SetCanAffectNavigationGeneration(char bNewValue, char bForceUpdate); // Function Engine.Pawn.SetCanAffectNavigationGeneration(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4583660>
	void ReceiveUnpossessed(struct Unknown OldController); // Function Engine.Pawn.ReceiveUnpossessed(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceivePossessed(struct Unknown NewController); // Function Engine.Pawn.ReceivePossessed(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void PawnMakeNoise(float Loudness, struct Unknown NoiseLocation, char bUseNoiseMakerLocation, struct Unknown NoiseMaker); // Function Engine.Pawn.PawnMakeNoise(Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45834F0>
	void OnRep_PlayerState(); // Function Engine.Pawn.OnRep_PlayerState(Native|Public) // <Game_BE.exe+0x1F3F610>
	void OnRep_Controller(); // Function Engine.Pawn.OnRep_Controller(Native|Public) // <Game_BE.exe+0x448F8F0>
	void LaunchPawn(struct Unknown LaunchVelocity, char bXYOverride, char bZOverride); // Function Engine.Pawn.LaunchPawn(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45832B0>
	struct Unknown K2_GetMovementInputVector(); // Function Engine.Pawn.K2_GetMovementInputVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4583120>
	char IsPlayerControlled(); // Function Engine.Pawn.IsPlayerControlled(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4583280>
	char IsPawnControlled(); // Function Engine.Pawn.IsPawnControlled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4583250>
	char IsMoveInputIgnored(); // Function Engine.Pawn.IsMoveInputIgnored(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45831F0>
	char IsLocallyControlled(); // Function Engine.Pawn.IsLocallyControlled(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45831C0>
	char IsControlled(); // Function Engine.Pawn.IsControlled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4583190>
	char IsBotControlled(); // Function Engine.Pawn.IsBotControlled(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4583160>
	struct Unknown GetPendingMovementInputVector(); // Function Engine.Pawn.GetPendingMovementInputVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4583120>
	struct Unknown GetNavAgentLocation(); // Function Engine.Pawn.GetNavAgentLocation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4583060>
	struct Unknown GetMovementComponent(); // Function Engine.Pawn.GetMovementComponent(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4583030>
	struct Unknown GetMovementBaseActor(struct Unknown Pawn); // Function Engine.Pawn.GetMovementBaseActor(Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4582FB0>
	struct Unknown GetLastMovementInputVector(); // Function Engine.Pawn.GetLastMovementInputVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4582F70>
	struct Unknown GetControlRotation(); // Function Engine.Pawn.GetControlRotation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4582ED0>
	struct Unknown GetController(); // Function Engine.Pawn.GetController(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4582F10>
	struct Unknown GetBaseAimRotation(); // Function Engine.Pawn.GetBaseAimRotation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4582DD0>
	void DetachFromControllerPendingDestroy(); // Function Engine.Pawn.DetachFromControllerPendingDestroy(Native|Public|BlueprintCallable) // <Game_BE.exe+0x1F4B850>
	struct Unknown ConsumeMovementInputVector(); // Function Engine.Pawn.ConsumeMovementInputVector(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4582D90>
	void AddMovementInput(struct Unknown WorldDirection, float ScaleValue, char bForce); // Function Engine.Pawn.AddMovementInput(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45828D0>
	void AddControllerYawInput(float Val); // Function Engine.Pawn.AddControllerYawInput(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4582770>
	void AddControllerRollInput(float Val); // Function Engine.Pawn.AddControllerRollInput(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45826F0>
	void AddControllerPitchInput(float Val); // Function Engine.Pawn.AddControllerPitchInput(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4582670>
};

// Class Engine.MKCharacterEx
class AMKCharacterEx : public APawn {

public:

	struct Unknown SelfCharacter; // 0x390 (8)
};

// Class Engine.Character
class ACharacter : public AMKCharacterEx {

public:

	struct Unknown Mesh; // 0x3A0 (8)
	struct Unknown CharacterMovement; // 0x3A8 (8)
	struct Unknown CapsuleComponent; // 0x3B0 (8)
	struct Unknown BasedMovement; // 0x3C0 (48)
	struct Unknown ReplicatedBasedMovement; // 0x3F0 (48)
	float AnimRootMotionTranslationScale; // 0x420 (4)
	struct Unknown BaseTranslationOffset; // 0x424 (12)
	struct Unknown BaseRotationOffset; // 0x430 (16)
	float ReplicatedServerLastTransformUpdateTimeStamp; // 0x440 (4)
	float ReplayLastTransformUpdateTimeStamp; // 0x444 (4)
	char ReplicatedMovementMode; // 0x448 (1)
	char bInBaseReplication : 0; // 0x449 (1)
	float CrouchedEyeHeight; // 0x44C (4)
	char bIsCrouched : 0; // 0x450 (1)
	char bProxyIsJumpForceApplied : 0; // 0x450 (1)
	char bPressedJump : 0; // 0x450 (1)
	char bClientUpdating : 0; // 0x450 (1)
	char bClientWasFalling : 0; // 0x450 (1)
	char bClientResimulateRootMotion : 0; // 0x450 (1)
	char bClientResimulateRootMotionSources : 0; // 0x450 (1)
	char bSimGravityDisabled : 0; // 0x450 (1)
	char bClientCheckEncroachmentOnNetUpdate : 0; // 0x451 (1)
	char bServerMoveIgnoreRootMotion : 0; // 0x451 (1)
	char bWasJumping : 0; // 0x451 (1)
	float JumpKeyHoldTime; // 0x454 (4)
	float JumpForceTimeRemaining; // 0x458 (4)
	float ProxyJumpForceStartedTime; // 0x45C (4)
	float JumpMaxHoldTime; // 0x460 (4)
	int32_t JumpMaxCount; // 0x464 (4)
	int32_t JumpCurrentCount; // 0x468 (4)
	struct FMulticastInlineDelegate OnReachedJumpApex; // 0x470 (16)
	struct FMulticastInlineDelegate MovementModeChangedDelegate; // 0x490 (16)
	struct FMulticastInlineDelegate OnCharacterMovementUpdated; // 0x4A0 (16)
	struct Unknown SavedRootMotion; // 0x4B0 (56)
	struct Unknown ClientRootMotionParams; // 0x4F0 (64)
	struct TArray<Unknown> RootMotionRepMoves; // 0x530 (16)
	struct Unknown RepRootMotion; // 0x540 (152)

	void UnCrouch(char bClientSimulation); // Function Engine.Character.UnCrouch(Native|Public|BlueprintCallable) // <Game_BE.exe+0x2043BA0>
	void StopJumping(); // Function Engine.Character.StopJumping(Native|Public|BlueprintCallable) // <Game_BE.exe+0x204CA90>
	void StopAnimMontage(struct Unknown AnimMontage); // Function Engine.Character.StopAnimMontage(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4484830>
	void ServerMoveOld(float OldTimeStamp, struct Unknown OldAccel, struct Unknown InVel, char OldMoveFlags); // Function Engine.Character.ServerMoveOld(Net|Native|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x44843C0>
	void ServerMoveNoBase(float Timestamp, struct Unknown InAccel, struct Unknown InVel, struct Unknown ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Function Engine.Character.ServerMoveNoBase(Net|Native|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x44840D0>
	void ServerMoveDualNoBase(float TimeStamp0, struct Unknown InAccel0, struct Unknown InVel, char PendingFlags, uint32_t View0, float Timestamp, struct Unknown InAccel, struct Unknown ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Function Engine.Character.ServerMoveDualNoBase(Net|Native|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4483C90>
	void ServerMoveDualHybridRootMotion(float TimeStamp0, struct Unknown InAccel0, struct Unknown InVel, char PendingFlags, uint32_t View0, float Timestamp, struct Unknown InAccel, struct Unknown ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct Unknown ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMoveDualHybridRootMotion(Net|Native|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x44837E0>
	void ServerMoveDual(float TimeStamp0, struct Unknown InAccel0, struct Unknown InVel, char PendingFlags, uint32_t View0, float Timestamp, struct Unknown InAccel, struct Unknown ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct Unknown ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMoveDual(Net|Native|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4483330>
	void ServerMove(float Timestamp, struct Unknown InAccel, struct Unknown InVel, struct Unknown ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, struct Unknown ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMove(Net|Native|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4482FB0>
	void RootMotionDebugClientPrintOnScreen(struct FString inString); // Function Engine.Character.RootMotionDebugClientPrintOnScreen(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4482F00>
	float PlayAnimMontage(struct Unknown AnimMontage, float InPlayRate, struct FName StartSectionName); // Function Engine.Character.PlayAnimMontage(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4482DF0>
	void OnWalkingOffLedge(struct Unknown& PreviousFloorImpactNormal, struct Unknown& PreviousFloorContactNormal, struct Unknown& PreviousLocation, float TimeDelta); // Function Engine.Character.OnWalkingOffLedge(Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <Game_BE.exe+0x4482C50>
	void OnRep_RootMotion(); // Function Engine.Character.OnRep_RootMotion(Final|Native|Public) // <Game_BE.exe+0x4482C30>
	void OnRep_ReplicatedBasedMovement(); // Function Engine.Character.OnRep_ReplicatedBasedMovement(Native|Public) // <Game_BE.exe+0x4482C10>
	void OnRep_ReplayLastTransformUpdateTimeStamp(); // Function Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp(Final|Native|Public) // <Game_BE.exe+0x4482BF0>
	void OnRep_IsCrouched(); // Function Engine.Character.OnRep_IsCrouched(Native|Public) // <Game_BE.exe+0x4482BD0>
	void OnLaunched(struct Unknown LaunchVelocity, char bXYOverride, char bZOverride); // Function Engine.Character.OnLaunched(Event|Public|HasDefaults|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void OnLanded(struct Unknown& Hit); // Function Engine.Character.OnLanded(Event|Public|HasOutParms|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void OnJumped(); // Function Engine.Character.OnJumped(Native|Event|Public|BlueprintEvent) // <Game_BE.exe+0x4482BB0>
	void LaunchCharacter(struct Unknown LaunchVelocity, char bXYOverride, char bZOverride); // Function Engine.Character.LaunchCharacter(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4482A90>
	void K2_UpdateCustomMovement(float DeltaTime); // Function Engine.Character.K2_UpdateCustomMovement(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.Character.K2_OnStartCrouch(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void K2_OnMovementModeChanged(char PrevMovementMode, char NewMovementMode, char PrevCustomMode, char NewCustomMode); // Function Engine.Character.K2_OnMovementModeChanged(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.Character.K2_OnEndCrouch(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void Jump(); // Function Engine.Character.Jump(Native|Public|BlueprintCallable) // <Game_BE.exe+0x204E270>
	char IsPlayingRootMotion(); // Function Engine.Character.IsPlayingRootMotion(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4482A60>
	char IsPlayingNetworkedRootMotionMontage(); // Function Engine.Character.IsPlayingNetworkedRootMotionMontage(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4482A30>
	char IsJumpProvidingForce(); // Function Engine.Character.IsJumpProvidingForce(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x204CA40>
	char HasAnyRootMotion(); // Function Engine.Character.HasAnyRootMotion(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4482A00>
	struct Unknown GetCurrentMontage(); // Function Engine.Character.GetCurrentMontage(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4482370>
	struct Unknown GetBaseTranslationOffset(); // Function Engine.Character.GetBaseTranslationOffset(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4482340>
	struct Unknown GetBaseRotationOffsetRotator(); // Function Engine.Character.GetBaseRotationOffsetRotator(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44822F0>
	float GetAnimRootMotionTranslationScale(); // Function Engine.Character.GetAnimRootMotionTranslationScale(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44822C0>
	void ForceLastAckMove(); // Function Engine.Character.ForceLastAckMove(Net|Native|Event|Public|NetClient) // <Game_BE.exe+0x204CA70>
	void Crouch(char bClientSimulation); // Function Engine.Character.Crouch(Native|Public|BlueprintCallable) // <Game_BE.exe+0x204CB80>
	void ClientVeryShortAdjustPosition(float Timestamp, struct Unknown NewLoc, struct Unknown NewBase, struct FName NewBaseBoneName, char bHasBase, char bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientVeryShortAdjustPosition(Net|Native|Event|Public|HasDefaults|NetClient) // <Game_BE.exe+0x4481F70>
	void ClientCheatWalk(); // Function Engine.Character.ClientCheatWalk(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x3B633E0>
	void ClientCheatGhost(); // Function Engine.Character.ClientCheatGhost(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4481F50>
	void ClientCheatFly(); // Function Engine.Character.ClientCheatFly(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4481F30>
	void ClientAdjustRootMotionSourcePosition(float Timestamp, struct Unknown ServerRootMotion, char bHasAnimRootMotion, float ServerMontageTrackPosition, struct Unknown ServerLoc, struct Unknown ServerRotation, float ServerVelZ, struct Unknown ServerBase, struct FName ServerBoneName, char bHasBase, char bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustRootMotionSourcePosition(Net|Native|Event|Public|HasDefaults|NetClient) // <Game_BE.exe+0x4481A70>
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, struct Unknown ServerLoc, struct Unknown ServerRotation, float ServerVelZ, struct Unknown ServerBase, struct FName ServerBoneName, char bHasBase, char bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustRootMotionPosition(Net|Native|Event|Public|HasDefaults|NetClient) // <Game_BE.exe+0x4481780>
	void ClientAdjustPosition(float Timestamp, struct Unknown NewLoc, struct Unknown NewVel, struct Unknown NewBase, struct FName NewBaseBoneName, char bHasBase, char bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustPosition(Net|Native|Event|Public|HasDefaults|NetClient) // <Game_BE.exe+0x4481510>
	void ClientAckGoodMove(float Timestamp); // Function Engine.Character.ClientAckGoodMove(Net|Native|Event|Public|NetClient) // <Game_BE.exe+0x4481490>
	char CanJumpInternal(); // Function Engine.Character.CanJumpInternal(Native|Event|Protected|BlueprintEvent|Const) // <Game_BE.exe+0x4481460>
	char CanJump(); // Function Engine.Character.CanJump(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4481430>
	char CanCrouch(); // Function Engine.Character.CanCrouch(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4481400>
	void CacheInitialMeshOffset(struct Unknown MeshRelativeLocation, struct Unknown MeshRelativeRotation); // Function Engine.Character.CacheInitialMeshOffset(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4481320>
};

// Class Engine.SplineComponent
class USplineComponent : public UPrimitiveComponent {

public:

	struct Unknown SplineCurves; // 0x4A8 (104)
	struct Unknown SplineInfo; // 0x510 (24)
	struct Unknown SplineRotInfo; // 0x528 (24)
	struct Unknown SplineScaleInfo; // 0x540 (24)
	struct Unknown SplineReparamTable; // 0x558 (24)
	char bAllowSplineEditingPerInstance : 0; // 0x570 (1)
	int32_t ReparamStepsPerSegment; // 0x574 (4)
	float Duration; // 0x578 (4)
	char bStationaryEndpoints : 0; // 0x57C (1)
	char bSplineHasBeenEdited : 0; // 0x57D (1)
	char bModifiedByConstructionScript : 0; // 0x57E (1)
	char bInputSplinePointsToConstructionScript : 0; // 0x57F (1)
	char bDrawDebug : 0; // 0x580 (1)
	char bClosedLoop : 0; // 0x581 (1)
	char bLoopPositionOverride : 0; // 0x582 (1)
	float LoopPosition; // 0x584 (4)
	struct Unknown DefaultUpVector; // 0x588 (12)

	void UpdateSpline(); // Function Engine.SplineComponent.UpdateSpline(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E06C0>
	void SetWorldLocationAtSplinePoint(int32_t PointIndex, struct Unknown& InLocation); // Function Engine.SplineComponent.SetWorldLocationAtSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E05E0>
	void SetUpVectorAtSplinePoint(int32_t PointIndex, struct Unknown& InUpVector, char CoordinateSpace, char bUpdateSpline); // Function Engine.SplineComponent.SetUpVectorAtSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E0480>
	void SetUnselectedSplineSegmentColor(struct Unknown& SegmentColor); // Function Engine.SplineComponent.SetUnselectedSplineSegmentColor(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45DFC70>
	void SetTangentsAtSplinePoint(int32_t PointIndex, struct Unknown& InArriveTangent, struct Unknown& InLeaveTangent, char CoordinateSpace, char bUpdateSpline); // Function Engine.SplineComponent.SetTangentsAtSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E02C0>
	void SetTangentAtSplinePoint(int32_t PointIndex, struct Unknown& InTangent, char CoordinateSpace, char bUpdateSpline); // Function Engine.SplineComponent.SetTangentAtSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E0160>
	void SetSplineWorldPoints(struct TArray<Unknown>& Points); // Function Engine.SplineComponent.SetSplineWorldPoints(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45E00B0>
	void SetSplinePointType(int32_t PointIndex, char Type, char bUpdateSpline); // Function Engine.SplineComponent.SetSplinePointType(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45DFE80>
	void SetSplinePoints(struct TArray<Unknown>& Points, char CoordinateSpace, char bUpdateSpline); // Function Engine.SplineComponent.SetSplinePoints(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45DFF80>
	void SetSplineLocalPoints(struct TArray<Unknown>& Points); // Function Engine.SplineComponent.SetSplineLocalPoints(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45DFDD0>
	void SetSelectedSplineSegmentColor(struct Unknown& SegmentColor); // Function Engine.SplineComponent.SetSelectedSplineSegmentColor(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45DFC70>
	void SetLocationAtSplinePoint(int32_t PointIndex, struct Unknown& InLocation, char CoordinateSpace, char bUpdateSpline); // Function Engine.SplineComponent.SetLocationAtSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45DFB10>
	void SetDrawDebug(char bShow); // Function Engine.SplineComponent.SetDrawDebug(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45DFA80>
	void SetDefaultUpVector(struct Unknown& UpVector, char CoordinateSpace); // Function Engine.SplineComponent.SetDefaultUpVector(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45DF9A0>
	void SetClosedLoopAtPosition(char bInClosedLoop, float Key, char bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoopAtPosition(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45DF890>
	void SetClosedLoop(char bInClosedLoop, char bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoop(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45DF7C0>
	void RemoveSplinePoint(int32_t Index, char bUpdateSpline); // Function Engine.SplineComponent.RemoveSplinePoint(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45DF700>
	char IsClosedLoop(); // Function Engine.SplineComponent.IsClosedLoop(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DF6D0>
	struct Unknown GetWorldTangentAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DF620>
	struct Unknown GetWorldRotationAtTime(float Time, char bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldRotationAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DF530>
	struct Unknown GetWorldRotationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DF480>
	struct Unknown GetWorldLocationAtTime(float Time, char bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldLocationAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DF390>
	struct Unknown GetWorldLocationAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetWorldLocationAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DF2E0>
	struct Unknown GetWorldLocationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DF230>
	struct Unknown GetWorldDirectionAtTime(float Time, char bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldDirectionAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DF140>
	struct Unknown GetWorldDirectionAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DF090>
	struct Unknown GetVectorPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DEFC0>
	struct Unknown GetVectorPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DEEE0>
	struct Unknown GetUpVectorAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity); // Function Engine.SplineComponent.GetUpVectorAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DEDC0>
	struct Unknown GetUpVectorAtSplinePoint(int32_t PointIndex, char CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DECF0>
	struct Unknown GetUpVectorAtSplineInputKey(float InKey, char CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DEC10>
	struct Unknown GetUpVectorAtDistanceAlongSpline(float Distance, char CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DEB30>
	struct Unknown GetTransformAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity, char bUseScale); // Function Engine.SplineComponent.GetTransformAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DE9A0>
	struct Unknown GetTransformAtSplinePoint(int32_t PointIndex, char CoordinateSpace, char bUseScale); // Function Engine.SplineComponent.GetTransformAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DE860>
	struct Unknown GetTransformAtSplineInputKey(float InKey, char CoordinateSpace, char bUseScale); // Function Engine.SplineComponent.GetTransformAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DE710>
	struct Unknown GetTransformAtDistanceAlongSpline(float Distance, char CoordinateSpace, char bUseScale); // Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DE5C0>
	struct Unknown GetTangentAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity); // Function Engine.SplineComponent.GetTangentAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DE4A0>
	struct Unknown GetTangentAtSplinePoint(int32_t PointIndex, char CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DCC80>
	struct Unknown GetTangentAtSplineInputKey(float InKey, char CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DE3C0>
	struct Unknown GetTangentAtDistanceAlongSpline(float Distance, char CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DE2E0>
	char GetSplinePointType(int32_t PointIndex); // Function Engine.SplineComponent.GetSplinePointType(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DE250>
	float GetSplineLength(); // Function Engine.SplineComponent.GetSplineLength(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DE220>
	struct Unknown GetScaleAtTime(float Time, char bUseConstantVelocity); // Function Engine.SplineComponent.GetScaleAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DE0B0>
	struct Unknown GetScaleAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetScaleAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DE010>
	struct Unknown GetScaleAtSplineInputKey(float InKey); // Function Engine.SplineComponent.GetScaleAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DDF70>
	struct Unknown GetScaleAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DDED0>
	struct Unknown GetRotationAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity); // Function Engine.SplineComponent.GetRotationAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DDDB0>
	struct Unknown GetRotationAtSplinePoint(int32_t PointIndex, char CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DDCE0>
	struct Unknown GetRotationAtSplineInputKey(float InKey, char CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DDC00>
	struct Unknown GetRotationAtDistanceAlongSpline(float Distance, char CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DDB20>
	float GetRollAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity); // Function Engine.SplineComponent.GetRollAtTime(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DDA10>
	float GetRollAtSplinePoint(int32_t PointIndex, char CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplinePoint(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DD950>
	float GetRollAtSplineInputKey(float InKey, char CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplineInputKey(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DD880>
	float GetRollAtDistanceAlongSpline(float Distance, char CoordinateSpace); // Function Engine.SplineComponent.GetRollAtDistanceAlongSpline(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DD7B0>
	struct Unknown GetRightVectorAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity); // Function Engine.SplineComponent.GetRightVectorAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DD690>
	struct Unknown GetRightVectorAtSplinePoint(int32_t PointIndex, char CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DD5C0>
	struct Unknown GetRightVectorAtSplineInputKey(float InKey, char CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DD4E0>
	struct Unknown GetRightVectorAtDistanceAlongSpline(float Distance, char CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DD400>
	int32_t GetNumberOfSplineSegments(); // Function Engine.SplineComponent.GetNumberOfSplineSegments(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DD3D0>
	int32_t GetNumberOfSplinePoints(); // Function Engine.SplineComponent.GetNumberOfSplinePoints(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DD3A0>
	struct Unknown GetLocationAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity); // Function Engine.SplineComponent.GetLocationAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DD280>
	struct Unknown GetLocationAtSplinePoint(int32_t PointIndex, char CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DD1B0>
	struct Unknown GetLocationAtSplineInputKey(float InKey, char CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DD0D0>
	struct Unknown GetLocationAtDistanceAlongSpline(float Distance, char CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DCFF0>
	void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, struct Unknown& Location, struct Unknown& Tangent, char CoordinateSpace); // Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DCE80>
	void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, struct Unknown& LocalLocation, struct Unknown& LocalTangent); // Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DCD50>
	struct Unknown GetLeaveTangentAtSplinePoint(int32_t PointIndex, char CoordinateSpace); // Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DCC80>
	float GetInputKeyAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DCBF0>
	float GetFloatPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DCB30>
	float GetFloatPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DCA60>
	float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DC9D0>
	struct Unknown GetDirectionAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity); // Function Engine.SplineComponent.GetDirectionAtTime(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DC8B0>
	struct Unknown GetDirectionAtSplinePoint(int32_t PointIndex, char CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DC7E0>
	struct Unknown GetDirectionAtSplineInputKey(float InKey, char CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplineInputKey(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DC700>
	struct Unknown GetDirectionAtDistanceAlongSpline(float Distance, char CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DC620>
	struct Unknown GetDefaultUpVector(char CoordinateSpace); // Function Engine.SplineComponent.GetDefaultUpVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DC580>
	struct Unknown GetArriveTangentAtSplinePoint(int32_t PointIndex, char CoordinateSpace); // Function Engine.SplineComponent.GetArriveTangentAtSplinePoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DC4B0>
	struct Unknown FindUpVectorClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace); // Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DC3C0>
	struct Unknown FindTransformClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace, char bUseScale); // Function Engine.SplineComponent.FindTransformClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DC270>
	struct Unknown FindTangentClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace); // Function Engine.SplineComponent.FindTangentClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DC180>
	struct Unknown FindScaleClosestToWorldLocation(struct Unknown& WorldLocation); // Function Engine.SplineComponent.FindScaleClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DC0D0>
	struct Unknown FindRotationClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace); // Function Engine.SplineComponent.FindRotationClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DBFE0>
	float FindRollClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace); // Function Engine.SplineComponent.FindRollClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DBF00>
	struct Unknown FindRightVectorClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace); // Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DBE10>
	struct Unknown FindLocationClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace); // Function Engine.SplineComponent.FindLocationClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DBD20>
	float FindInputKeyClosestToWorldLocation(struct Unknown& WorldLocation); // Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DBC80>
	struct Unknown FindDirectionClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace); // Function Engine.SplineComponent.FindDirectionClosestToWorldLocation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DBB90>
	void ClearSplinePoints(char bUpdateSpline); // Function Engine.SplineComponent.ClearSplinePoints(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45DBB00>
	void AddSplineWorldPoint(struct Unknown& Position); // Function Engine.SplineComponent.AddSplineWorldPoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45DBA60>
	void AddSplinePointAtIndex(struct Unknown& Position, int32_t Index, char CoordinateSpace, char bUpdateSpline); // Function Engine.SplineComponent.AddSplinePointAtIndex(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45DB900>
	void AddSplinePoint(struct Unknown& Position, char CoordinateSpace, char bUpdateSpline); // Function Engine.SplineComponent.AddSplinePoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45DB7F0>
	void AddSplineLocalPoint(struct Unknown& Position); // Function Engine.SplineComponent.AddSplineLocalPoint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45DB760>
	void AddPoints(struct TArray<Unknown>& Points, char bUpdateSpline); // Function Engine.SplineComponent.AddPoints(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45DB660>
	void AddPoint(struct Unknown& Point, char bUpdateSpline); // Function Engine.SplineComponent.AddPoint(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45DB550>
};

// Class Engine.Commandlet
class UCommandlet : public Object {

public:

	struct FString HelpDescription; // 0x28 (16)
	struct FString HelpUsage; // 0x38 (16)
	struct FString HelpWebLink; // 0x48 (16)
	struct TArray<Unknown> HelpParamNames; // 0x58 (16)
	struct TArray<Unknown> HelpParamDescriptions; // 0x68 (16)
	char IsServer : 0; // 0x78 (1)
	char IsClient : 0; // 0x78 (1)
	char IsEditor : 0; // 0x78 (1)
	char LogToConsole : 0; // 0x78 (1)
	char ShowErrorCount : 0; // 0x78 (1)
	char ShowProgress : 0; // 0x78 (1)
};

// Class Engine.AudioComponent
class UAudioComponent : public USceneComponent {

public:

	struct Unknown Sound; // 0x228 (8)
	struct TArray<Unknown> InstanceParameters; // 0x230 (16)
	struct Unknown SoundClassOverride; // 0x240 (8)
	char bAutoDestroy : 0; // 0x248 (1)
	char bStopWhenOwnerDestroyed : 0; // 0x248 (1)
	char bShouldRemainActiveIfDropped : 0; // 0x248 (1)
	char bAllowSpatialization : 0; // 0x248 (1)
	char bOverrideAttenuation : 0; // 0x248 (1)
	char bOverrideSubtitlePriority : 0; // 0x248 (1)
	char bIsUISound : 0; // 0x248 (1)
	char bEnableLowPassFilter : 0; // 0x248 (1)
	char bOverridePriority : 0; // 0x249 (1)
	char bSuppressSubtitles : 0; // 0x249 (1)
	char bAutoManageAttachment : 0; // 0x24A (1)
	struct FName AudioComponentUserID; // 0x250 (8)
	float PitchModulationMin; // 0x258 (4)
	float PitchModulationMax; // 0x25C (4)
	float VolumeModulationMin; // 0x260 (4)
	float VolumeModulationMax; // 0x264 (4)
	float VolumeMultiplier; // 0x268 (4)
	int32_t EnvelopeFollowerAttackTime; // 0x26C (4)
	int32_t EnvelopeFollowerReleaseTime; // 0x270 (4)
	float Priority; // 0x274 (4)
	float SubtitlePriority; // 0x278 (4)
	struct Unknown SourceEffectChain; // 0x280 (8)
	float PitchMultiplier; // 0x288 (4)
	float LowPassFilterFrequency; // 0x28C (4)
	struct Unknown AttenuationSettings; // 0x298 (8)
	struct Unknown AttenuationOverrides; // 0x2A0 (928)
	struct Unknown ConcurrencySettings; // 0x640 (8)
	struct TSet<Unknown> ConcurrencySet; // 0x648 (80)
	enum class Unknow AutoAttachLocationRule; // 0x6A4 (1)
	enum class Unknow AutoAttachRotationRule; // 0x6A5 (1)
	enum class Unknow AutoAttachScaleRule; // 0x6A6 (1)
	struct FMulticastInlineDelegate OnAudioFinished; // 0x6A8 (16)
	struct FMulticastInlineDelegate OnAudioPlaybackPercent; // 0x6D0 (16)
	struct FMulticastInlineDelegate OnAudioSingleEnvelopeValue; // 0x6F8 (16)
	struct FMulticastInlineDelegate OnAudioMultiEnvelopeValue; // 0x720 (16)
	struct Unknown Modulation; // 0x748 (16)
	struct FDelegate OnQueueSubtitles; // 0x758 (16)
	struct TWeakObjectPtr<struct Unknown> AutoAttachParent; // 0x768 (8)
	struct FName AutoAttachSocketName; // 0x770 (8)

	void StopDelayed(float DelayTime); // Function Engine.AudioComponent.StopDelayed(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4460AE0>
	void Stop(); // Function Engine.AudioComponent.Stop(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4460AC0>
	void SetWaveParameter(struct FName InName, struct Unknown InWave); // Function Engine.AudioComponent.SetWaveParameter(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4460A00>
	void SetVolumeMultiplier(float NewVolumeMultiplier); // Function Engine.AudioComponent.SetVolumeMultiplier(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4460980>
	void SetUISound(char bInUISound); // Function Engine.AudioComponent.SetUISound(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44608F0>
	void SetSubmixSend(struct Unknown Submix, float SendLevel); // Function Engine.AudioComponent.SetSubmixSend(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4460820>
	void SetSourceBusSendPreEffect(struct Unknown SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPreEffect(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4460750>
	void SetSourceBusSendPostEffect(struct Unknown SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPostEffect(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4460680>
	void SetSound(struct Unknown NewSound); // Function Engine.AudioComponent.SetSound(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4460600>
	void SetPitchMultiplier(float NewPitchMultiplier); // Function Engine.AudioComponent.SetPitchMultiplier(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4460450>
	void SetPaused(char bPause); // Function Engine.AudioComponent.SetPaused(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44603C0>
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency); // Function Engine.AudioComponent.SetLowPassFilterFrequency(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4460340>
	void SetLowPassFilterEnabled(char InLowPassFilterEnabled); // Function Engine.AudioComponent.SetLowPassFilterEnabled(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44602B0>
	void SetIntParameter(struct FName InName, int32_t inInt); // Function Engine.AudioComponent.SetIntParameter(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4460150>
	void SetFloatParameter(struct FName InName, float InFloat); // Function Engine.AudioComponent.SetFloatParameter(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4460080>
	void SetBoolParameter(struct FName InName, char InBool); // Function Engine.AudioComponent.SetBoolParameter(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445FF20>
	void Play(float StartTime); // Function Engine.AudioComponent.Play(Native|Public|BlueprintCallable) // <Game_BE.exe+0x445FEA0>
	char IsPlaying(); // Function Engine.AudioComponent.IsPlaying(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x445FE50>
	char HasCookedFFTData(); // Function Engine.AudioComponent.HasCookedFFTData(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x445FE20>
	char HasCookedAmplitudeEnvelopeData(); // Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x445FDF0>
	enum class Unknow GetPlayState(); // Function Engine.AudioComponent.GetPlayState(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x445FDC0>
	char GetCookedFFTDataForAllPlayingSounds(struct TArray<Unknown>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x445FCE0>
	char GetCookedFFTData(struct TArray<Unknown>& FrequenciesToGet, struct TArray<Unknown>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTData(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x445FBB0>
	char GetCookedEnvelopeDataForAllPlayingSounds(struct TArray<Unknown>& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x445FAF0>
	char GetCookedEnvelopeData(float& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeData(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x445FA40>
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, enum class Unknow FadeCurve); // Function Engine.AudioComponent.FadeOut(Native|Public|BlueprintCallable) // <Game_BE.exe+0x445F930>
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, enum class Unknow FadeCurve); // Function Engine.AudioComponent.FadeIn(Native|Public|BlueprintCallable) // <Game_BE.exe+0x445F7E0>
	char BP_GetAttenuationSettingsToApply(struct Unknown& OutAttenuationSettings); // Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x445F710>
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, enum class Unknow FadeCurve); // Function Engine.AudioComponent.AdjustVolume(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445F610>
	void AdjustAttenuation(struct Unknown& InAttenuationSettings); // Function Engine.AudioComponent.AdjustAttenuation(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x445F540>
};

// Class Engine.GameModeBase
class AGameModeBase : public AInfo {

public:

	struct FString OptionsString; // 0x318 (16)
	struct Unknown* GameSessionClass; // 0x328 (8)
	struct Unknown* GameStateClass; // 0x330 (8)
	struct Unknown* PlayerControllerClass; // 0x338 (8)
	struct Unknown* PlayerStateClass; // 0x340 (8)
	struct Unknown* HUDClass; // 0x348 (8)
	struct Unknown* DefaultPawnClass; // 0x350 (8)
	struct Unknown* SpectatorClass; // 0x358 (8)
	struct Unknown* ReplaySpectatorPlayerControllerClass; // 0x360 (8)
	struct Unknown* ServerStatReplicatorClass; // 0x368 (8)
	struct Unknown GameSession; // 0x370 (8)
	struct Unknown GameState; // 0x378 (8)
	struct Unknown ServerStatReplicator; // 0x380 (8)
	struct FText DefaultPlayerName; // 0x388 (24)
	char bUseSeamlessTravel : 0; // 0x3A0 (1)
	char bStartPlayersAsSpectators : 0; // 0x3A0 (1)
	char bPauseable : 0; // 0x3A0 (1)

	void StartPlay(); // Function Engine.GameModeBase.StartPlay(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B67A0>
	struct Unknown SpawnDefaultPawnFor(struct Unknown NewPlayer, struct Unknown StartSpot); // Function Engine.GameModeBase.SpawnDefaultPawnFor(Native|Event|Public|BlueprintEvent) // <Game_BE.exe+0x44B66B0>
	struct Unknown SpawnDefaultPawnAtTransform(struct Unknown NewPlayer, struct Unknown& SpawnTransform); // Function Engine.GameModeBase.SpawnDefaultPawnAtTransform(Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <Game_BE.exe+0x44B6590>
	char ShouldReset(struct Unknown ActorToReset); // Function Engine.GameModeBase.ShouldReset(Native|Event|Public|BlueprintEvent) // <Game_BE.exe+0x44B64F0>
	void ReturnToMainMenuHost(); // Function Engine.GameModeBase.ReturnToMainMenuHost(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B63A0>
	void RestartPlayerAtTransform(struct Unknown NewPlayer, struct Unknown& SpawnTransform); // Function Engine.GameModeBase.RestartPlayerAtTransform(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44B6280>
	void RestartPlayerAtPlayerStart(struct Unknown NewPlayer, struct Unknown StartSpot); // Function Engine.GameModeBase.RestartPlayerAtPlayerStart(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B61B0>
	void RestartPlayer(struct Unknown NewPlayer); // Function Engine.GameModeBase.RestartPlayer(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B6120>
	void ResetLevel(); // Function Engine.GameModeBase.ResetLevel(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B6100>
	char PlayerCanRestart(struct Unknown Player); // Function Engine.GameModeBase.PlayerCanRestart(Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game_BE.exe+0x44B6000>
	char MustSpectate(struct Unknown NewPlayerController); // Function Engine.GameModeBase.MustSpectate(Native|Event|Public|BlueprintEvent|Const) // <Game_BE.exe+0x44B5F60>
	void K2_PostLogin(struct Unknown NewPlayer); // Function Engine.GameModeBase.K2_PostLogin(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void K2_OnSwapPlayerControllers(struct Unknown OldPC, struct Unknown NewPC); // Function Engine.GameModeBase.K2_OnSwapPlayerControllers(Event|Protected|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void K2_OnRestartPlayer(struct Unknown NewPlayer); // Function Engine.GameModeBase.K2_OnRestartPlayer(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void K2_OnLogout(struct Unknown ExitingController); // Function Engine.GameModeBase.K2_OnLogout(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void K2_OnChangeName(struct Unknown Other, struct FString NewName, char bNameChange); // Function Engine.GameModeBase.K2_OnChangeName(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	struct Unknown K2_FindPlayerStart(struct Unknown Player, struct FString IncomingName); // Function Engine.GameModeBase.K2_FindPlayerStart(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x44B5E70>
	void InitStartSpot(struct Unknown StartSpot, struct Unknown NewPlayer); // Function Engine.GameModeBase.InitStartSpot(Native|Event|Public|BlueprintEvent) // <Game_BE.exe+0x44B5D70>
	void InitializeHUDForPlayer(struct Unknown NewPlayer); // Function Engine.GameModeBase.InitializeHUDForPlayer(Native|Event|Protected|BlueprintEvent) // <Game_BE.exe+0x44A0CE0>
	char HasMatchStarted(); // Function Engine.GameModeBase.HasMatchStarted(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44B5D40>
	void HandleStartingNewPlayer(struct Unknown NewPlayer); // Function Engine.GameModeBase.HandleStartingNewPlayer(Native|Event|Public|BlueprintEvent) // <Game_BE.exe+0x44B5C80>
	int32_t GetNumSpectators(); // Function Engine.GameModeBase.GetNumSpectators(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B5C50>
	int32_t GetNumPlayers(); // Function Engine.GameModeBase.GetNumPlayers(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B5C20>
	struct Unknown* GetDefaultPawnClassForController(struct Unknown InController); // Function Engine.GameModeBase.GetDefaultPawnClassForController(Native|Event|Public|BlueprintCallable|BlueprintEvent) // <Game_BE.exe+0x44B5B60>
	struct Unknown FindPlayerStart(struct Unknown Player, struct FString IncomingName); // Function Engine.GameModeBase.FindPlayerStart(Native|Event|Public|BlueprintEvent) // <Game_BE.exe+0x44B5A60>
	struct Unknown ChoosePlayerStart(struct Unknown Player); // Function Engine.GameModeBase.ChoosePlayerStart(Native|Event|Public|BlueprintEvent) // <Game_BE.exe+0x44B58A0>
	void ChangeName(struct Unknown Controller, struct FString NewName, char bNameChange); // Function Engine.GameModeBase.ChangeName(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B5770>
	char CanSpectate(struct Unknown Viewer, struct Unknown ViewTarget); // Function Engine.GameModeBase.CanSpectate(Native|Event|Public|BlueprintEvent) // <Game_BE.exe+0x44B56A0>
};

// Class Engine.GameMode
class AGameMode : public AGameModeBase {

public:

	struct FName MatchState; // 0x3B8 (8)
	char bDelayedStart : 0; // 0x3C0 (1)
	int32_t NumSpectators; // 0x3C4 (4)
	int32_t NumPlayers; // 0x3C8 (4)
	int32_t NumBots; // 0x3CC (4)
	float MinRespawnDelay; // 0x3D0 (4)
	int32_t NumTravellingPlayers; // 0x3D4 (4)
	struct Unknown* EngineMessageClass; // 0x3D8 (8)
	struct TArray<Unknown> InactivePlayerArray; // 0x3E0 (16)
	float InactivePlayerStateLifeSpan; // 0x3F0 (4)
	int32_t MaxInactivePlayers; // 0x3F4 (4)
	char bHandleDedicatedServerReplays : 0; // 0x3F8 (1)

	void StartMatch(); // Function Engine.GameMode.StartMatch(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B6780>
	void SetBandwidthLimit(float AsyncIOBandwidthLimit); // Function Engine.GameMode.SetBandwidthLimit(Exec|Native|Public) // <Game_BE.exe+0x44B6470>
	void Say(struct FString Msg); // Function Engine.GameMode.Say(Exec|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B63C0>
	void RestartGame(); // Function Engine.GameMode.RestartGame(Native|Public|BlueprintCallable) // <Game_BE.exe+0x2043B00>
	char ReadyToStartMatch(); // Function Engine.GameMode.ReadyToStartMatch(Native|Event|Protected|BlueprintEvent) // <Game_BE.exe+0x44B60D0>
	char ReadyToEndMatch(); // Function Engine.GameMode.ReadyToEndMatch(Native|Event|Protected|BlueprintEvent) // <Game_BE.exe+0x44B60A0>
	void K2_OnSetMatchState(struct FName NewState); // Function Engine.GameMode.K2_OnSetMatchState(Event|Protected|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	char IsMatchInProgress(); // Function Engine.GameMode.IsMatchInProgress(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44B5E40>
	char HasMatchEnded(); // Function Engine.GameMode.HasMatchEnded(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44B5D10>
	struct FName GetMatchState(); // Function Engine.GameMode.GetMatchState(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44B5C00>
	void EndMatch(); // Function Engine.GameMode.EndMatch(Native|Public|BlueprintCallable) // <Game_BE.exe+0x2045B40>
	void AbortMatch(); // Function Engine.GameMode.AbortMatch(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B5680>
};

// Class Engine.GameStateBase
class AGameStateBase : public AInfo {

public:

	struct Unknown* GameModeClass; // 0x318 (8)
	struct Unknown AuthorityGameMode; // 0x320 (8)
	struct Unknown* SpectatorClass; // 0x328 (8)
	struct TArray<Unknown> PlayerArray; // 0x330 (16)
	char bReplicatedHasBegunPlay : 0; // 0x340 (1)
	float ReplicatedWorldTimeSeconds; // 0x344 (4)
	float ServerWorldTimeSecondsDelta; // 0x348 (4)
	float ServerWorldTimeSecondsUpdateFrequency; // 0x34C (4)

	void OnRep_SpectatorClass(); // Function Engine.GameStateBase.OnRep_SpectatorClass(Native|Protected) // <Game_BE.exe+0x1F3F610>
	void OnRep_ReplicatedWorldTimeSeconds(); // Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds(Native|Protected) // <Game_BE.exe+0x1FCB910>
	void OnRep_ReplicatedHasBegunPlay(); // Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay(Native|Protected) // <Game_BE.exe+0x1F3F630>
	void OnRep_GameModeClass(); // Function Engine.GameStateBase.OnRep_GameModeClass(Native|Protected) // <Game_BE.exe+0x448F8F0>
	char HasMatchStarted(); // Function Engine.GameStateBase.HasMatchStarted(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5F10>
	char HasBegunPlay(); // Function Engine.GameStateBase.HasBegunPlay(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5EE0>
	float GetServerWorldTimeSeconds(); // Function Engine.GameStateBase.GetServerWorldTimeSeconds(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5E10>
	float GetPlayerStartTime(struct Unknown Controller); // Function Engine.GameStateBase.GetPlayerStartTime(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5920>
	float GetPlayerRespawnDelay(struct Unknown Controller); // Function Engine.GameStateBase.GetPlayerRespawnDelay(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5880>
};

// Class Engine.GameState
class AGameState : public AGameStateBase {

public:

	struct FName MatchState; // 0x368 (8)
	struct FName PreviousMatchState; // 0x370 (8)
	int32_t ElapsedTime; // 0x378 (4)

	void OnRep_MatchState(); // Function Engine.GameState.OnRep_MatchState(Native|Public) // <Game_BE.exe+0x44B6100>
	void OnRep_ElapsedTime(); // Function Engine.GameState.OnRep_ElapsedTime(Native|Public) // <Game_BE.exe+0x44B63A0>
};

// Class Engine.Controller
class AController : public UActor {

public:

	struct Unknown PlayerState; // 0x398 (8)
	struct FMulticastInlineDelegate OnInstigatedAnyDamage; // 0x358 (16)
	struct FName StateName; // 0x374 (8)
	struct Unknown Pawn; // 0x340 (8)
	struct Unknown Character; // 0x330 (8)
	struct Unknown TransformComponent; // 0x380 (8)
	struct Unknown ControlRotation; // 0x368 (12)
	char bAttachToPawn : 0; // 0x338 (1)

	void UnPossess(); // Function Engine.Controller.UnPossess(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x448FC50>
	void StopMovement(); // Function Engine.Controller.StopMovement(Native|Public|BlueprintCallable) // <Game_BE.exe+0x1F4B850>
	void SetInitialLocationAndRotation(struct Unknown& NewLocation, struct Unknown& NewRotation); // Function Engine.Controller.SetInitialLocationAndRotation(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x448FB60>
	void SetIgnoreMoveInput(char bNewMoveInput); // Function Engine.Controller.SetIgnoreMoveInput(Native|Public|BlueprintCallable) // <Game_BE.exe+0x448FAD0>
	void SetIgnoreLookInput(char bNewLookInput); // Function Engine.Controller.SetIgnoreLookInput(Native|Public|BlueprintCallable) // <Game_BE.exe+0x448FA40>
	void SetControlRotation(struct Unknown& NewRotation); // Function Engine.Controller.SetControlRotation(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x448F9B0>
	void ResetIgnoreMoveInput(); // Function Engine.Controller.ResetIgnoreMoveInput(Native|Public|BlueprintCallable) // <Game_BE.exe+0x204C840>
	void ResetIgnoreLookInput(); // Function Engine.Controller.ResetIgnoreLookInput(Native|Public|BlueprintCallable) // <Game_BE.exe+0x1E70660>
	void ResetIgnoreInputFlags(); // Function Engine.Controller.ResetIgnoreInputFlags(Native|Public|BlueprintCallable) // <Game_BE.exe+0x448F990>
	void ReceiveUnPossess(struct Unknown UnpossessedPawn); // Function Engine.Controller.ReceiveUnPossess(Event|Protected|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceivePossess(struct Unknown PossessedPawn); // Function Engine.Controller.ReceivePossess(Event|Protected|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveInstigatedAnyDamage(float Damage, struct Unknown DamageType, struct Unknown DamagedActor, struct Unknown DamageCauser); // Function Engine.Controller.ReceiveInstigatedAnyDamage(BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void Possess(struct Unknown InPawn); // Function Engine.Controller.Possess(Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // <Game_BE.exe+0x448F910>
	void OnRep_PlayerState(); // Function Engine.Controller.OnRep_PlayerState(Native|Public) // <Game_BE.exe+0x448F8F0>
	void OnRep_Pawn(); // Function Engine.Controller.OnRep_Pawn(Native|Public) // <Game_BE.exe+0x11E4DC0>
	char LineOfSightTo(struct Unknown Other, struct Unknown ViewPoint, char bAlternateChecks); // Function Engine.Controller.LineOfSightTo(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x448F7D0>
	struct Unknown K2_GetPawn(); // Function Engine.Controller.K2_GetPawn(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x448F7A0>
	char IsPlayerController(); // Function Engine.Controller.IsPlayerController(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x448F770>
	char IsMoveInputIgnored(); // Function Engine.Controller.IsMoveInputIgnored(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x448F740>
	char IsLookInputIgnored(); // Function Engine.Controller.IsLookInputIgnored(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x448F710>
	char IsLocalPlayerController(); // Function Engine.Controller.IsLocalPlayerController(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x448F6C0>
	char IsLocalController(); // Function Engine.Controller.IsLocalController(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x448F690>
	struct Unknown GetViewTarget(); // Function Engine.Controller.GetViewTarget(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x448F660>
	struct Unknown GetDesiredRotation(); // Function Engine.Controller.GetDesiredRotation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x448F620>
	struct Unknown GetControlRotation(); // Function Engine.Controller.GetControlRotation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x448F5E0>
	void ClientSetRotation(struct Unknown NewRotation, char bResetCamera); // Function Engine.Controller.ClientSetRotation(Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // <Game_BE.exe+0x448F500>
	void ClientSetLocation(struct Unknown NewLocation, struct Unknown NewRotation); // Function Engine.Controller.ClientSetLocation(Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // <Game_BE.exe+0x448F420>
	struct Unknown CastToPlayerController(); // Function Engine.Controller.CastToPlayerController(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x448F3F0>
};

// Class Engine.MKPlayerControllerEx
class AMKPlayerControllerEx : public AController {

public:

	struct Unknown SelfPlayerController; // 0x3B8 (8)
};

// Class Engine.PlayerController
class APlayerController : public AMKPlayerControllerEx {

public:

	struct Unknown Player; // 0x670 (8)
	struct Unknown AcknowledgedPawn; // 0x4C8 (8)
	struct Unknown ControllingDirTrackInst; // 0x658 (8)
	struct Unknown MyHUD; // 0x530 (8)
	struct Unknown PlayerCameraManager; // 0x4E0 (8)
	struct Unknown* PlayerCameraManagerClass; // 0x438 (8)
	char bAutoManageActiveCameraTarget : 0; // 0x69D (1)
	struct Unknown TargetViewRotation; // 0x60C (12)
	float SmoothTargetViewRotationSpeed; // 0x468 (4)
	struct TArray<Unknown> HiddenActors; // 0x478 (16)
	struct TArray<Unknown> HiddenPrimitiveComponents; // 0x618 (16)
	float LastSpectatorStateSynchTime; // 0x4B4 (4)
	struct Unknown LastSpectatorSyncLocation; // 0x4A8 (12)
	struct Unknown LastSpectatorSyncRotation; // 0x4E8 (12)
	int32_t ClientCap; // 0x4B8 (4)
	struct Unknown CheatManager; // 0x460 (8)
	struct Unknown* CheatClass; // 0x4F8 (8)
	struct Unknown PlayerInput; // 0x640 (8)
	struct TArray<Unknown> ActiveForceFeedbackEffects; // 0x520 (16)
	char bPlayerIsWaiting : 0; // 0x500 (1)
	char NetPlayerIndex; // 0x69C (1)
	struct Unknown PendingSwapConnection; // 0x648 (8)
	struct Unknown NetConnection; // 0x6D8 (8)
	float InputYawScale; // 0x508 (4)
	float InputPitchScale; // 0x560 (4)
	float InputRollScale; // 0x488 (4)
	char bShowMouseCursor : 0; // 0x494 (1)
	char bEnableClickEvents : 0; // 0x4BC (1)
	char bEnableTouchEvents : 0; // 0x6C8 (1)
	char bEnableMouseOverEvents : 0; // 0x5F4 (1)
	char bEnableTouchOverEvents : 0; // 0x6C8 (1)
	char bForceFeedbackEnabled : 0; // 0x6E0 (1)
	float ForceFeedbackScale; // 0x448 (4)
	struct TArray<Unknown> ClickEventKeys; // 0x630 (16)
	char DefaultMouseCursor; // 0x69E (1)
	char CurrentMouseCursor; // 0x6FA (1)
	char DefaultClickTraceChannel; // 0x505 (1)
	char CurrentClickTraceChannel; // 0x628 (1)
	float HitResultTraceDistance; // 0x4C0 (4)
	uint16_t SeamlessTravelCount; // 0x4C4 (2)
	uint16_t LastCompletedSeamlessTravelCount; // 0x6F8 (2)
	struct Unknown InactiveStateInputComponent; // 0x568 (8)
	char bShouldPerformFullTickWhenPaused : 0; // 0x654 (1)
	struct Unknown CurrentTouchInterface; // 0x660 (8)
	struct Unknown SpectatorPawn; // 0x440 (8)
	char bIsLocalPlayerController : 0; // 0x504 (1)
	struct Unknown SpawnLocation; // 0x5E8 (12)

	char WasInputKeyJustReleased(struct Unknown Key); // Function Engine.PlayerController.WasInputKeyJustReleased(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4596680>
	char WasInputKeyJustPressed(struct Unknown Key); // Function Engine.PlayerController.WasInputKeyJustPressed(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4596590>
	void ToggleSpeaking(char bInSpeaking); // Function Engine.PlayerController.ToggleSpeaking(Exec|Native|Public) // <Game_BE.exe+0x4596500>
	void TestServerLevelVisibilityChange(struct FName PackageName, struct FName Filename); // Function Engine.PlayerController.TestServerLevelVisibilityChange(Final|Exec|Native|Private) // <Game_BE.exe+0x1F90600>
	void SwitchLevel(struct FString URL); // Function Engine.PlayerController.SwitchLevel(Exec|Native|Public) // <Game_BE.exe+0x4596450>
	void StopHapticEffect(enum class Unknow Hand); // Function Engine.PlayerController.StopHapticEffect(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45963D0>
	void StartFire(char FireModeNum); // Function Engine.PlayerController.StartFire(Exec|Native|Public) // <Game_BE.exe+0x4596350>
	void SetVirtualJoystickVisibility(char bVisible); // Function Engine.PlayerController.SetVirtualJoystickVisibility(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45962C0>
	void SetViewTargetWithBlend(struct Unknown NewViewTarget, float BlendTime, char BlendFunc, float BlendExp, char bLockOutgoing); // Function Engine.PlayerController.SetViewTargetWithBlend(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4596140>
	void SetName(struct FString S); // Function Engine.PlayerController.SetName(Exec|Native|Public) // <Game_BE.exe+0x4596090>
	void SetMouseLocation(int32_t X, int32_t Y); // Function Engine.PlayerController.SetMouseLocation(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4595FD0>
	void SetMouseCursorWidget(char Cursor, struct Unknown CursorWidget); // Function Engine.PlayerController.SetMouseCursorWidget(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4595F10>
	void SetHapticsByValue(float Frequency, float Amplitude, enum class Unknow Hand); // Function Engine.PlayerController.SetHapticsByValue(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4595E10>
	void SetDisableHaptics(char bNewDisabled); // Function Engine.PlayerController.SetDisableHaptics(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4595D80>
	void SetControllerLightColor(struct Unknown Color); // Function Engine.PlayerController.SetControllerLightColor(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4595D10>
	void SetCinematicMode(char bInCinematicMode, char bHidePlayer, char bAffectsHUD, char bAffectsMovement, char bAffectsTurning); // Function Engine.PlayerController.SetCinematicMode(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4595B50>
	void SetAudioListenerOverride(struct Unknown AttachToComponent, struct Unknown Location, struct Unknown Rotation); // Function Engine.PlayerController.SetAudioListenerOverride(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4595A30>
	void SetAudioListenerAttenuationOverride(struct Unknown AttachToComponent, struct Unknown AttenuationLocationOVerride); // Function Engine.PlayerController.SetAudioListenerAttenuationOverride(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4595960>
	void ServerViewSelf(struct Unknown TransitionParams); // Function Engine.PlayerController.ServerViewSelf(Net|Native|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4595870>
	void ServerViewPrevPlayer(); // Function Engine.PlayerController.ServerViewPrevPlayer(Net|Native|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4595820>
	void ServerViewNextPlayer(); // Function Engine.PlayerController.ServerViewNextPlayer(Net|Native|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x45957D0>
	void ServerVerifyViewTarget(); // Function Engine.PlayerController.ServerVerifyViewTarget(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4595780>
	void ServerUpdateMultipleLevelsVisibility(struct TArray<Unknown> LevelVisibilities); // Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility(Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x45956C0>
	void ServerUpdateLevelVisibility(struct Unknown LevelVisibility); // Function Engine.PlayerController.ServerUpdateLevelVisibility(Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4595600>
	void ServerUpdateCamera(struct Unknown CamLoc, int32_t CamPitchAndYaw); // Function Engine.PlayerController.ServerUpdateCamera(Net|Native|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x45954E0>
	void ServerUnmutePlayer(struct Unknown PlayerId); // Function Engine.PlayerController.ServerUnmutePlayer(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4595380>
	void ServerToggleAILogging(); // Function Engine.PlayerController.ServerToggleAILogging(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4595330>
	void ServerShortTimeout(); // Function Engine.PlayerController.ServerShortTimeout(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x45952E0>
	void ServerSetSpectatorWaiting(char bWaiting); // Function Engine.PlayerController.ServerSetSpectatorWaiting(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4595220>
	void ServerSetSpectatorLocation(struct Unknown NewLoc, struct Unknown NewRot); // Function Engine.PlayerController.ServerSetSpectatorLocation(Net|Native|Event|Public|NetServer|HasDefaults|NetValidate) // <Game_BE.exe+0x45950F0>
	void ServerRestartPlayer(); // Function Engine.PlayerController.ServerRestartPlayer(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x45950A0>
	void ServerPause(); // Function Engine.PlayerController.ServerPause(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4595050>
	void ServerNotifyLoadedWorld(struct FName WorldPackageName); // Function Engine.PlayerController.ServerNotifyLoadedWorld(Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4594FA0>
	void ServerMutePlayer(struct Unknown PlayerId); // Function Engine.PlayerController.ServerMutePlayer(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4594E40>
	void ServerExecRPC(struct FString Msg); // Function Engine.PlayerController.ServerExecRPC(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4594D70>
	void ServerExec(struct FString Msg); // Function Engine.PlayerController.ServerExec(Final|Exec|Native|Public) // <Game_BE.exe+0x1EFCE90>
	void ServerCheckClientPossessionReliable(); // Function Engine.PlayerController.ServerCheckClientPossessionReliable(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4594D20>
	void ServerCheckClientPossession(); // Function Engine.PlayerController.ServerCheckClientPossession(Net|Native|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4594CD0>
	void ServerChangeName(struct FString S); // Function Engine.PlayerController.ServerChangeName(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4594C00>
	void ServerCamera(struct FName NewMode); // Function Engine.PlayerController.ServerCamera(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4594B40>
	void ServerAcknowledgePossession(struct Unknown P); // Function Engine.PlayerController.ServerAcknowledgePossession(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x4594A80>
	void SendToConsole(struct FString Command); // Function Engine.PlayerController.SendToConsole(Exec|Native|Public) // <Game_BE.exe+0x45949D0>
	void RestartLevel(); // Function Engine.PlayerController.RestartLevel(Exec|Native|Public) // <Game_BE.exe+0x45949B0>
	void ResetMouseCursorWidget(); // Function Engine.PlayerController.ResetMouseCursorWidget(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4594990>
	void ResetControllerLightColor(); // Function Engine.PlayerController.ResetControllerLightColor(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4594970>
	char ProjectWorldLocationToScreen(struct Unknown WorldLocation, struct Unknown& ScreenLocation, char bPlayerViewportRelative); // Function Engine.PlayerController.ProjectWorldLocationToScreen(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4594840>
	void PlayHapticEffect(struct Unknown HapticEffect, enum class Unknow Hand, float Scale, char bLoop); // Function Engine.PlayerController.PlayHapticEffect(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45946F0>
	void PlayDynamicForceFeedback(float Intensity, float Duration, char bAffectsLeftLarge, char bAffectsLeftSmall, char bAffectsRightLarge, char bAffectsRightSmall, char Action, struct Unknown LatentInfo); // Function Engine.PlayerController.PlayDynamicForceFeedback(Final|Native|Private|BlueprintCallable) // <Game_BE.exe+0x4594470>
	void Pause(); // Function Engine.PlayerController.Pause(Exec|Native|Public) // <Game_BE.exe+0x4594450>
	void OnServerStartedVisualLogger(char bIsLogging); // Function Engine.PlayerController.OnServerStartedVisualLogger(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x45943C0>
	void LocalTravel(struct FString URL); // Function Engine.PlayerController.LocalTravel(Exec|Native|Public) // <Game_BE.exe+0x4594310>
	void K2_ClientPlayForceFeedback(struct Unknown ForceFeedbackEffect, struct FName Tag, char bLooping, char bIgnoreTimeDilation, char bPlayWhilePaused); // Function Engine.PlayerController.K2_ClientPlayForceFeedback(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4594160>
	char IsInputKeyDown(struct Unknown Key); // Function Engine.PlayerController.IsInputKeyDown(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4594070>
	void GetViewportSize(int32_t& SizeX, int32_t& SizeY); // Function Engine.PlayerController.GetViewportSize(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4593F90>
	struct Unknown GetSpectatorPawn(); // Function Engine.PlayerController.GetSpectatorPawn(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4593F70>
	char GetMousePosition(float& LocationX, float& LocationY); // Function Engine.PlayerController.GetMousePosition(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4593E80>
	struct Unknown GetInputVectorKeyState(struct Unknown Key); // Function Engine.PlayerController.GetInputVectorKeyState(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4593D80>
	void GetInputTouchState(char FingerIndex, float& LocationX, float& LocationY, char& bIsCurrentlyPressed); // Function Engine.PlayerController.GetInputTouchState(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4593C00>
	void GetInputMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.PlayerController.GetInputMouseDelta(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4593B20>
	void GetInputMotionState(struct Unknown& Tilt, struct Unknown& RotationRate, struct Unknown& Gravity, struct Unknown& Acceleration); // Function Engine.PlayerController.GetInputMotionState(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4593990>
	float GetInputKeyTimeDown(struct Unknown Key); // Function Engine.PlayerController.GetInputKeyTimeDown(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45938A0>
	void GetInputAnalogStickState(char WhichStick, float& StickX, float& StickY); // Function Engine.PlayerController.GetInputAnalogStickState(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4593780>
	float GetInputAnalogKeyState(struct Unknown Key); // Function Engine.PlayerController.GetInputAnalogKeyState(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4593690>
	struct Unknown GetHUD(); // Function Engine.PlayerController.GetHUD(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4592CC0>
	char GetHitResultUnderFingerForObjects(char FingerIndex, struct TArray<Unknown>& ObjectTypes, char bTraceComplex, struct Unknown& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerForObjects(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45934C0>
	char GetHitResultUnderFingerByChannel(char FingerIndex, char TraceChannel, char bTraceComplex, struct Unknown& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerByChannel(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4593320>
	char GetHitResultUnderFinger(char FingerIndex, char TraceChannel, char bTraceComplex, struct Unknown& HitResult); // Function Engine.PlayerController.GetHitResultUnderFinger(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4593180>
	char GetHitResultUnderCursorForObjects(struct TArray<Unknown>& ObjectTypes, char bTraceComplex, struct Unknown& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorForObjects(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4592FF0>
	char GetHitResultUnderCursorByChannel(char TraceChannel, char bTraceComplex, struct Unknown& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorByChannel(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4592E70>
	char GetHitResultUnderCursor(char TraceChannel, char bTraceComplex, struct Unknown& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursor(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4592CF0>
	struct Unknown GetFocalLocation(); // Function Engine.PlayerController.GetFocalLocation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4592C80>
	void FOV(float NewFOV); // Function Engine.PlayerController.FOV(Exec|Native|Public) // <Game_BE.exe+0x4592C00>
	void EnableCheats(); // Function Engine.PlayerController.EnableCheats(Exec|Native|Public) // <Game_BE.exe+0x4592BE0>
	char DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct Unknown& WorldLocation, struct Unknown& WorldDirection); // Function Engine.PlayerController.DeprojectScreenPositionToWorld(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4592A60>
	char DeprojectMousePositionToWorld(struct Unknown& WorldLocation, struct Unknown& WorldDirection); // Function Engine.PlayerController.DeprojectMousePositionToWorld(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4592960>
	void ConsoleKey(struct Unknown Key); // Function Engine.PlayerController.ConsoleKey(Exec|Native|Public) // <Game_BE.exe+0x4592870>
	void ClientWasKicked(struct FText KickReason); // Function Engine.PlayerController.ClientWasKicked(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x45927B0>
	void ClientVoiceHandshakeComplete(); // Function Engine.PlayerController.ClientVoiceHandshakeComplete(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4592790>
	void ClientUpdateMultipleLevelsStreamingStatus(struct TArray<Unknown> LevelStatuses); // Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x45926F0>
	void ClientUpdateLevelStreamingStatus(struct FName PackageName, char bNewShouldBeLoaded, char bNewShouldBeVisible, char bNewShouldBlockOnLoad, int32_t LODIndex); // Function Engine.PlayerController.ClientUpdateLevelStreamingStatus(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4592540>
	void ClientUnmutePlayer(struct Unknown PlayerId); // Function Engine.PlayerController.ClientUnmutePlayer(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4592420>
	void ClientTravelInternal(struct FString URL, char TravelType, char bSeamless, struct Unknown MapPackageGuid); // Function Engine.PlayerController.ClientTravelInternal(Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // <Game_BE.exe+0x45922A0>
	void ClientTravel(struct FString URL, char TravelType, char bSeamless, struct Unknown MapPackageGuid); // Function Engine.PlayerController.ClientTravel(Final|Native|Public|HasDefaults) // <Game_BE.exe+0x4592130>
	void ClientTeamMessage(struct Unknown SenderPlayerState, struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientTeamMessage(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4591FD0>
	void ClientStopForceFeedback(struct Unknown ForceFeedbackEffect, struct FName Tag); // Function Engine.PlayerController.ClientStopForceFeedback(Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // <Game_BE.exe+0x4591F00>
	void ClientStopCameraShakesFromSource(struct Unknown SourceComponent, char bImmediately); // Function Engine.PlayerController.ClientStopCameraShakesFromSource(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4591E30>
	void ClientStopCameraShake(struct Unknown* Shake, char bImmediately); // Function Engine.PlayerController.ClientStopCameraShake(Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // <Game_BE.exe+0x4591D60>
	void ClientStopCameraAnim(struct Unknown AnimToStop); // Function Engine.PlayerController.ClientStopCameraAnim(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4591CD0>
	void ClientStartOnlineSession(); // Function Engine.PlayerController.ClientStartOnlineSession(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4591CB0>
	void ClientSpawnCameraLensEffect(struct Unknown* LensEffectEmitterClass); // Function Engine.PlayerController.ClientSpawnCameraLensEffect(Net|Native|Event|Public|NetClient|BlueprintCallable) // <Game_BE.exe+0x4591C20>
	void ClientSetViewTarget(struct Unknown A, struct Unknown TransitionParams); // Function Engine.PlayerController.ClientSetViewTarget(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4591B30>
	void ClientSetSpectatorWaiting(char bWaiting); // Function Engine.PlayerController.ClientSetSpectatorWaiting(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4591AA0>
	void ClientSetHUD(struct Unknown* NewHUDClass); // Function Engine.PlayerController.ClientSetHUD(Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // <Game_BE.exe+0x4591A10>
	void ClientSetForceMipLevelsToBeResident(struct Unknown Material, float ForceDuration, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4591910>
	void ClientSetCinematicMode(char bInCinematicMode, char bAffectsMovement, char bAffectsTurning, char bAffectsHUD); // Function Engine.PlayerController.ClientSetCinematicMode(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x45917A0>
	void ClientSetCameraMode(struct FName NewCamMode); // Function Engine.PlayerController.ClientSetCameraMode(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4591710>
	void ClientSetCameraFade(char bEnableFading, struct Unknown FadeColor, struct Unknown FadeAlpha, float FadeTime, char bFadeAudio); // Function Engine.PlayerController.ClientSetCameraFade(Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // <Game_BE.exe+0x4591580>
	void ClientSetBlockOnAsyncLoading(); // Function Engine.PlayerController.ClientSetBlockOnAsyncLoading(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4591560>
	void ClientReturnToMainMenuWithTextReason(struct FText ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x45914A0>
	void ClientReturnToMainMenu(struct FString ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenu(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x45913F0>
	void ClientRetryClientRestart(struct Unknown NewPawn); // Function Engine.PlayerController.ClientRetryClientRestart(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4591360>
	void ClientRestart(struct Unknown NewPawn); // Function Engine.PlayerController.ClientRestart(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x45912D0>
	void ClientReset(); // Function Engine.PlayerController.ClientReset(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x45912B0>
	void ClientRepObjRef(struct Unknown Object); // Function Engine.PlayerController.ClientRepObjRef(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4591220>
	void ClientReceiveLocalizedMessage(struct Unknown* Message, int32_t Switch, struct Unknown RelatedPlayerState_2, struct Unknown RelatedPlayerState_3, struct Unknown OptionalObject); // Function Engine.PlayerController.ClientReceiveLocalizedMessage(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x45910A0>
	void ClientPrestreamTextures(struct Unknown ForcedActor, float ForceDuration, char bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientPrestreamTextures(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4590F50>
	void ClientPrepareMapChange(struct FName LevelName, char bFirst, char bLast); // Function Engine.PlayerController.ClientPrepareMapChange(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4590E40>
	void ClientPlaySoundAtLocation(struct Unknown Sound, struct Unknown Location, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySoundAtLocation(Net|Native|Event|Public|HasDefaults|NetClient) // <Game_BE.exe+0x4590CF0>
	void ClientPlaySound(struct Unknown Sound, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySound(Net|Native|Event|Public|NetClient) // <Game_BE.exe+0x4590BF0>
	void ClientPlayForceFeedback_Internal(struct Unknown ForceFeedbackEffect, struct Unknown Params); // Function Engine.PlayerController.ClientPlayForceFeedback_Internal(Final|Net|Native|Event|Private|NetClient) // <Game_BE.exe+0x4590B00>
	void ClientPlayCameraShakeFromSource(struct Unknown* Shake, struct Unknown SourceComponent); // Function Engine.PlayerController.ClientPlayCameraShakeFromSource(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4590A40>
	void ClientPlayCameraShake(struct Unknown* Shake, float Scale, char PlaySpace, struct Unknown UserPlaySpaceRot); // Function Engine.PlayerController.ClientPlayCameraShake(Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // <Game_BE.exe+0x45908E0>
	void ClientPlayCameraAnim(struct Unknown AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, char bLoop, char bRandomStartTime, char Space, struct Unknown CustomPlaySpace); // Function Engine.PlayerController.ClientPlayCameraAnim(Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // <Game_BE.exe+0x4590640>
	void ClientMutePlayer(struct Unknown PlayerId); // Function Engine.PlayerController.ClientMutePlayer(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4590520>
	void ClientMessage(struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientMessage(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x45903F0>
	void ClientIgnoreMoveInput(char bIgnore); // Function Engine.PlayerController.ClientIgnoreMoveInput(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4590360>
	void ClientIgnoreLookInput(char bIgnore); // Function Engine.PlayerController.ClientIgnoreLookInput(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x45902D0>
	void ClientGotoState(struct FName NewState); // Function Engine.PlayerController.ClientGotoState(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4590240>
	void ClientGameEnded(struct Unknown EndGameFocus, char bIsWinner); // Function Engine.PlayerController.ClientGameEnded(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4590170>
	void ClientForceGarbageCollection(); // Function Engine.PlayerController.ClientForceGarbageCollection(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4590150>
	void ClientFlushLevelStreaming(); // Function Engine.PlayerController.ClientFlushLevelStreaming(Final|Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4590130>
	void ClientEndOnlineSession(); // Function Engine.PlayerController.ClientEndOnlineSession(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x2045880>
	void ClientEnableNetworkVoice(char bEnable); // Function Engine.PlayerController.ClientEnableNetworkVoice(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x45900A0>
	void ClientCommitMapChange(); // Function Engine.PlayerController.ClientCommitMapChange(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x4590080>
	void ClientClearCameraLensEffects(); // Function Engine.PlayerController.ClientClearCameraLensEffects(Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // <Game_BE.exe+0x4590060>
	void ClientCapBandwidth(int32_t Cap); // Function Engine.PlayerController.ClientCapBandwidth(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x458FFD0>
	void ClientCancelPendingMapChange(); // Function Engine.PlayerController.ClientCancelPendingMapChange(Net|NetReliableNative|Event|Public|NetClient) // <Game_BE.exe+0x458FFB0>
	void ClientAddTextureStreamingLoc(struct Unknown InLoc, float Duration, char bOverrideLocation); // Function Engine.PlayerController.ClientAddTextureStreamingLoc(Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // <Game_BE.exe+0x458FE90>
	void ClearAudioListenerOverride(); // Function Engine.PlayerController.ClearAudioListenerOverride(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x458FE70>
	void ClearAudioListenerAttenuationOverride(); // Function Engine.PlayerController.ClearAudioListenerAttenuationOverride(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x458FE50>
	char CanRestartPlayer(); // Function Engine.PlayerController.CanRestartPlayer(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458FE20>
	void Camera(struct FName NewMode); // Function Engine.PlayerController.Camera(Exec|Native|Public) // <Game_BE.exe+0x458FD90>
	void AddYawInput(float Val); // Function Engine.PlayerController.AddYawInput(Native|Public|BlueprintCallable) // <Game_BE.exe+0x1EE2F60>
	void AddRollInput(float Val); // Function Engine.PlayerController.AddRollInput(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458FD10>
	void AddPitchInput(float Val); // Function Engine.PlayerController.AddPitchInput(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458FC90>
	void ActivateTouchInterface(struct Unknown NewTouchInterface); // Function Engine.PlayerController.ActivateTouchInterface(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458FC00>
};

// Class Engine.ApplicationLifecycleComponent
class UApplicationLifecycleComponent : public UActorComponent {

public:

	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0xB0 (16)
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0xC0 (16)
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0xD0 (16)
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0xE0 (16)
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0xF0 (16)
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x100 (16)
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x110 (16)
	struct FMulticastInlineDelegate OnTemperatureChangeDelegate; // 0x120 (16)
	struct FMulticastInlineDelegate OnLowPowerModeDelegate; // 0x130 (16)
};

// Class Engine.MovementComponent
class UMovementComponent : public UActorComponent {

public:

	struct Unknown UpdatedComponent; // 0xB0 (8)
	struct Unknown UpdatedPrimitive; // 0xB8 (8)
	struct Unknown Velocity; // 0xC4 (12)
	struct Unknown PlaneConstraintNormal; // 0xD0 (12)
	struct Unknown PlaneConstraintOrigin; // 0xDC (12)
	char bUpdateOnlyIfRendered : 0; // 0xE8 (1)
	char bAutoUpdateTickRegistration : 0; // 0xE8 (1)
	char bTickBeforeOwner : 0; // 0xE8 (1)
	char bAutoRegisterUpdatedComponent : 0; // 0xE8 (1)
	char bConstrainToPlane : 0; // 0xE8 (1)
	char bSnapToPlaneAtStart : 0; // 0xE8 (1)
	char bAutoRegisterPhysicsVolumeUpdates : 0; // 0xE8 (1)
	char bComponentShouldUpdatePhysicsVolume : 0; // 0xE8 (1)
	enum class Unknow PlaneConstraintAxisSetting; // 0xEB (1)

	void StopMovementImmediately(); // Function Engine.MovementComponent.StopMovementImmediately(Native|Public|BlueprintCallable) // <Game_BE.exe+0x2072130>
	void SnapUpdatedComponentToPlane(); // Function Engine.MovementComponent.SnapUpdatedComponentToPlane(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4569730>
	void SetUpdatedComponent(struct Unknown NewUpdatedComponent); // Function Engine.MovementComponent.SetUpdatedComponent(Native|Public|BlueprintCallable) // <Game_BE.exe+0x120CDE0>
	void SetPlaneConstraintOrigin(struct Unknown PlaneOrigin); // Function Engine.MovementComponent.SetPlaneConstraintOrigin(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45696A0>
	void SetPlaneConstraintNormal(struct Unknown PlaneNormal); // Function Engine.MovementComponent.SetPlaneConstraintNormal(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4569610>
	void SetPlaneConstraintFromVectors(struct Unknown Forward, struct Unknown Up); // Function Engine.MovementComponent.SetPlaneConstraintFromVectors(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4569530>
	void SetPlaneConstraintEnabled(char bEnabled); // Function Engine.MovementComponent.SetPlaneConstraintEnabled(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45694A0>
	void SetPlaneConstraintAxisSetting(enum class Unknow NewAxisSetting); // Function Engine.MovementComponent.SetPlaneConstraintAxisSetting(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4569420>
	void PhysicsVolumeChanged(struct Unknown NewVolume); // Function Engine.MovementComponent.PhysicsVolumeChanged(Native|Public) // <Game_BE.exe+0x4569390>
	char K2_MoveUpdatedComponent(struct Unknown Delta, struct Unknown NewRotation, struct Unknown& OutHit, char bSweep, char bTeleport); // Function Engine.MovementComponent.K2_MoveUpdatedComponent(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4569190>
	float K2_GetModifiedMaxSpeed(); // Function Engine.MovementComponent.K2_GetModifiedMaxSpeed(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4569150>
	float K2_GetMaxSpeedModifier(); // Function Engine.MovementComponent.K2_GetMaxSpeedModifier(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4569110>
	char IsExceedingMaxSpeed(float MaxSpeed); // Function Engine.MovementComponent.IsExceedingMaxSpeed(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4569080>
	struct Unknown GetPlaneConstraintOrigin(); // Function Engine.MovementComponent.GetPlaneConstraintOrigin(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4569040>
	struct Unknown GetPlaneConstraintNormal(); // Function Engine.MovementComponent.GetPlaneConstraintNormal(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4569000>
	enum class Unknow GetPlaneConstraintAxisSetting(); // Function Engine.MovementComponent.GetPlaneConstraintAxisSetting(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4568FE0>
	struct Unknown GetPhysicsVolume(); // Function Engine.MovementComponent.GetPhysicsVolume(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4568FB0>
	float GetMaxSpeed(); // Function Engine.MovementComponent.GetMaxSpeed(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4568F70>
	float GetGravityZ(); // Function Engine.MovementComponent.GetGravityZ(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4568F30>
	struct Unknown ConstrainNormalToPlane(struct Unknown Normal); // Function Engine.MovementComponent.ConstrainNormalToPlane(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4568E80>
	struct Unknown ConstrainLocationToPlane(struct Unknown Location); // Function Engine.MovementComponent.ConstrainLocationToPlane(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4568DD0>
	struct Unknown ConstrainDirectionToPlane(struct Unknown Direction); // Function Engine.MovementComponent.ConstrainDirectionToPlane(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4568D20>
};

// Class Engine.NavMovementComponent
class UNavMovementComponent : public UMovementComponent {

public:

	struct Unknown NavAgentProps; // 0xF0 (48)
	float FixedPathBrakingDistance; // 0x120 (4)
	char bUpdateNavAgentWithOwnersCollision : 0; // 0x124 (1)
	char bUseAccelerationForPaths : 0; // 0x124 (1)
	char bUseFixedBrakingDistanceForPaths : 0; // 0x124 (1)
	struct Unknown MovementState; // 0x125 (1)
	struct Unknown PathFollowingComp; // 0x128 (8)

	void StopMovementKeepPathing(); // Function Engine.NavMovementComponent.StopMovementKeepPathing(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x456E390>
	void StopActiveMovement(); // Function Engine.NavMovementComponent.StopActiveMovement(Native|Public|BlueprintCallable) // <Game_BE.exe+0x456E370>
	char IsSwimming(); // Function Engine.NavMovementComponent.IsSwimming(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x456E1A0>
	char IsMovingOnGround(); // Function Engine.NavMovementComponent.IsMovingOnGround(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44865E0>
	char IsFlying(); // Function Engine.NavMovementComponent.IsFlying(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x456E170>
	char IsFalling(); // Function Engine.NavMovementComponent.IsFalling(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x456E140>
	char IsCrouching(); // Function Engine.NavMovementComponent.IsCrouching(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x445FE50>
};

// Class Engine.PawnMovementComponent
class UPawnMovementComponent : public UNavMovementComponent {

public:

	struct Unknown PawnOwner; // 0x130 (8)

	struct Unknown K2_GetInputVector(); // Function Engine.PawnMovementComponent.K2_GetInputVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45830E0>
	char IsMoveInputIgnored(); // Function Engine.PawnMovementComponent.IsMoveInputIgnored(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4583220>
	struct Unknown GetPendingInputVector(); // Function Engine.PawnMovementComponent.GetPendingInputVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45830E0>
	struct Unknown GetPawnOwner(); // Function Engine.PawnMovementComponent.GetPawnOwner(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45830B0>
	struct Unknown GetLastInputVector(); // Function Engine.PawnMovementComponent.GetLastInputVector(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4582F30>
	struct Unknown ConsumeInputVector(); // Function Engine.PawnMovementComponent.ConsumeInputVector(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4582D50>
	void AddInputVector(struct Unknown WorldVector, char bForce); // Function Engine.PawnMovementComponent.AddInputVector(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45827F0>
};

// Class Engine.CharacterMovementComponent
class UCharacterMovementComponent : public UPawnMovementComponent {

public:

	struct Unknown CharacterOwner; // 0x698 (8)
	float GravityScale; // 0x4E4 (4)
	float MaxStepHeight; // 0x4F0 (4)
	float JumpZVelocity; // 0x6C0 (4)
	float JumpOffJumpZFactor; // 0x4AC (4)
	float WalkableFloorAngle; // 0x56C (4)
	float WalkableFloorZ; // 0x45C (4)
	char MovementMode; // 0x219 (1)
	char CustomMovementMode; // 0x6C9 (1)
	enum class Unknow NetworkSmoothingMode; // 0x2C0 (1)
	float GroundFriction; // 0x64C (4)
	float MaxWalkSpeed; // 0x6B0 (4)
	float MaxWalkSpeedCrouched; // 0x638 (4)
	float MaxSwimSpeed; // 0x4A8 (4)
	float MaxFlySpeed; // 0x594 (4)
	float MaxCustomMovementSpeed; // 0x600 (4)
	float MaxAcceleration; // 0x660 (4)
	float MinAnalogWalkSpeed; // 0x6A0 (4)
	float BrakingFrictionFactor; // 0x21C (4)
	float BrakingFriction; // 0x668 (4)
	float BrakingSubStepTime; // 0x4D8 (4)
	float BrakingDecelerationWalking; // 0x40C (4)
	float BrakingDecelerationFalling; // 0x5E8 (4)
	float BrakingDecelerationSwimming; // 0x494 (4)
	float BrakingDecelerationFlying; // 0x49C (4)
	float AirControl; // 0x23C (4)
	float AirControlBoostMultiplier; // 0x248 (4)
	float AirControlBoostVelocityThreshold; // 0x498 (4)
	float FallingLateralFriction; // 0x588 (4)
	float CrouchedHalfHeight; // 0x240 (4)
	float Buoyancy; // 0x630 (4)
	float PerchRadiusThreshold; // 0x6C4 (4)
	float PerchAdditionalHeight; // 0x484 (4)
	struct Unknown RotationRate; // 0x2B4 (12)
	char bUseSeparateBrakingFriction : 0; // 0x430 (1)
	char bApplyGravityWhileJumping : 0; // 0x510 (1)
	char bUseControllerDesiredRotation : 0; // 0x520 (1)
	char bOrientRotationToMovement : 0; // 0x5DC (1)
	char bSweepWhileNavWalking : 0; // 0x238 (1)
	char bMovementInProgress : 0; // 0x6BC (1)
	char bEnableScopedMovementUpdates : 0; // 0x6C8 (1)
	char bEnableServerDualMoveScopedMovementUpdates : 0; // 0x250 (1)
	char bForceMaxAccel : 0; // 0x510 (1)
	char bRunPhysicsWithNoController : 0; // 0x650 (1)
	char bForceNextFloorCheck : 0; // 0x67C (1)
	char bShrinkProxyCapsule : 0; // 0x224 (1)
	char bCanWalkOffLedges : 0; // 0x684 (1)
	char bCanWalkOffLedgesWhenCrouching : 0; // 0x4BC (1)
	char bNetworkSkipProxyPredictionOnNetUpdate : 0; // 0x635 (1)
	char bNetworkAlwaysReplicateTransformUpdateTimestamp : 0; // 0x528 (1)
	char bDeferUpdateMoveComponent : 0; // 0x458 (1)
	char bEnablePhysicsInteraction : 0; // 0x5A0 (1)
	char bTouchForceScaledToMass : 0; // 0x518 (1)
	char bPushForceScaledToMass : 0; // 0x614 (1)
	char bPushForceUsingZOffset : 0; // 0x414 (1)
	char bScalePushForceToVelocity : 0; // 0x4E8 (1)
	struct Unknown DeferredUpdatedMoveComponent; // 0x450 (8)
	float MaxOutOfWaterStepHeight; // 0x44C (4)
	float OutofWaterZ; // 0x48C (4)
	float Mass; // 0x4D0 (4)
	float StandingDownwardForceScale; // 0x254 (4)
	float InitialPushForceFactor; // 0x618 (4)
	float PushForceFactor; // 0x640 (4)
	float PushForcePointZOffsetFactor; // 0x3FC (4)
	float TouchForceFactor; // 0x51C (4)
	float MinTouchForce; // 0x648 (4)
	float MaxTouchForce; // 0x4D4 (4)
	float RepulsionForce; // 0x5EC (4)
	struct Unknown Acceleration; // 0x22C (12)
	struct Unknown LastUpdateRotation; // 0x5F0 (16)
	struct Unknown LastUpdateLocation; // 0x5B0 (12)
	struct Unknown LastUpdateVelocity; // 0x4B0 (12)
	float ServerLastTransformUpdateTimeStamp; // 0x598 (4)
	float ServerLastClientGoodMoveAckTime; // 0x4A4 (4)
	float ServerLastClientAdjustmentTime; // 0x624 (4)
	struct Unknown PendingImpulseToApply; // 0x5D0 (12)
	struct Unknown PendingForceToApply; // 0x608 (12)
	float AnalogInputModifier; // 0x2C4 (4)
	float MaxSimulationTimeStep; // 0x6B8 (4)
	int32_t MaxSimulationIterations; // 0x4F8 (4)
	int32_t MaxJumpApexAttemptsPerSimulation; // 0x410 (4)
	float MaxDepenetrationWithGeometry; // 0x400 (4)
	float MaxDepenetrationWithGeometryAsProxy; // 0x514 (4)
	float MaxDepenetrationWithPawn; // 0x6D0 (4)
	float MaxDepenetrationWithPawnAsProxy; // 0x688 (4)
	float NetworkSimulatedSmoothLocationTime; // 0x444 (4)
	float NetworkSimulatedSmoothRotationTime; // 0x50C (4)
	float ListenServerNetworkSimulatedSmoothLocationTime; // 0x680 (4)
	float ListenServerNetworkSimulatedSmoothRotationTime; // 0x228 (4)
	float NetProxyShrinkRadius; // 0x568 (4)
	float NetProxyShrinkHalfHeight; // 0x664 (4)
	float NetworkMaxSmoothUpdateDistance; // 0x2C8 (4)
	float NetworkNoSmoothUpdateDistance; // 0x6CC (4)
	float NetworkMinTimeBetweenClientAckGoodMoves; // 0x4A0 (4)
	float NetworkMinTimeBetweenClientAdjustments; // 0x404 (4)
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x590 (4)
	float NetworkLargeClientCorrectionDistance; // 0x3F0 (4)
	float LedgeCheckThreshold; // 0x3F4 (4)
	float JumpOutOfWaterPitch; // 0x4F4 (4)
	struct Unknown CurrentFloor; // 0x358 (148)
	char DefaultLandMovementMode; // 0x354 (1)
	char DefaultWaterMovementMode; // 0x239 (1)
	char GroundMovementMode; // 0x634 (1)
	char bMaintainHorizontalGroundVelocity : 0; // 0x63C (1)
	char bImpartBaseVelocityX : 0; // 0x66C (1)
	char bImpartBaseVelocityY : 0; // 0x3EC (1)
	char bImpartBaseVelocityZ : 0; // 0x355 (1)
	char bImpartBaseAngularVelocity : 0; // 0x244 (1)
	char bJustTeleported : 0; // 0x21A (1)
	char bNetworkUpdateReceived : 0; // 0x684 (1)
	char bNetworkMovementModeChanged : 0; // 0x250 (1)
	char bIgnoreClientMovementErrorChecksAndCorrection : 0; // 0x58C (1)
	char bServerAcceptClientAuthoritativePosition : 0; // 0x6AC (1)
	char bNotifyApex : 0; // 0x644 (1)
	char bCheatFlying : 0; // 0x604 (1)
	char bWantsToCrouch : 0; // 0x25C (1)
	char bCrouchMaintainsBaseLocation : 0; // 0x416 (1)
	char bIgnoreBaseRotation : 0; // 0x5BC (1)
	char bFastAttachedMove : 0; // 0x244 (1)
	char bAlwaysCheckFloor : 0; // 0x2A0 (1)
	char bUseFlatBaseForFloorChecks : 0; // 0x490 (1)
	char bPerformingJumpOff : 0; // 0x250 (1)
	char bWantsToLeaveNavWalking : 0; // 0x4E0 (1)
	char bUseRVOAvoidance : 0; // 0x3F8 (1)
	char bRequestedMoveUseAcceleration : 0; // 0x2B0 (1)
	char bWasSimulatingRootMotion : 0; // 0x414 (1)
	char bAllowPhysicsRotationDuringAnimRootMotion : 0; // 0x5A0 (1)
	char bHasRequestedVelocity : 0; // 0x408 (1)
	char bRequestedMoveWithMaxSpeed : 0; // 0x480 (1)
	char bWasAvoidanceUpdated : 0; // 0x63C (1)
	char bProjectNavMeshWalking : 0; // 0x5A0 (1)
	char bProjectNavMeshOnBothWorldChannels : 0; // 0x224 (1)
	float AvoidanceConsiderationRadius; // 0x6B4 (4)
	struct Unknown RequestedVelocity; // 0x670 (12)
	int32_t AvoidanceUID; // 0x508 (4)
	struct Unknown AvoidanceGroup; // 0x4EC (4)
	struct Unknown GroupsToAvoid; // 0x4DC (4)
	struct Unknown GroupsToIgnore; // 0x460 (4)
	float AvoidanceWeight; // 0x62C (4)
	struct Unknown PendingLaunchVelocity; // 0x2A4 (12)
	float NavMeshProjectionInterval; // 0x4FC (4)
	float NavMeshProjectionTimer; // 0x6A8 (4)
	float NavMeshProjectionInterpSpeed; // 0x24C (4)
	float NavMeshProjectionHeightScaleUp; // 0x524 (4)
	float NavMeshProjectionHeightScaleDown; // 0x5E4 (4)
	float NavWalkingFloorDistTolerance; // 0x59C (4)
	struct Unknown PostPhysicsTickFunction; // 0x148 (48)
	float MinTimeBetweenTimeStampResets; // 0x628 (4)
	struct Unknown ClientAutonomuousBase; // 0x438 (8)
	struct Unknown CurrentRootMotion; // 0x530 (56)
	struct Unknown RootMotionParams; // 0x260 (64)
	struct Unknown AnimRootMotionVelocity; // 0x5A4 (12)
	float BlockingHit_SlideAccelerator; // 0x504 (4)
	struct Unknown BlockingPhysMaterial; // 0x690 (8)

	void SetWalkableFloorZ(float InWalkableFloorZ); // Function Engine.CharacterMovementComponent.SetWalkableFloorZ(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4486F00>
	void SetWalkableFloorAngle(float InWalkableFloorAngle); // Function Engine.CharacterMovementComponent.SetWalkableFloorAngle(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4486E80>
	void SetMovementMode(char NewMovementMode, char NewCustomMode); // Function Engine.CharacterMovementComponent.SetMovementMode(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4486DC0>
	void SetGroupsToIgnoreMask(struct Unknown& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x4486D30>
	void SetGroupsToIgnore(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToIgnore(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4486CB0>
	void SetGroupsToAvoidMask(struct Unknown& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x4486C20>
	void SetGroupsToAvoid(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToAvoid(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4486BA0>
	void SetAvoidanceGroupMask(struct Unknown& GroupMask); // Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x4486B10>
	void SetAvoidanceGroup(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetAvoidanceGroup(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4486A90>
	void SetAvoidanceEnabled(char bEnable); // Function Engine.CharacterMovementComponent.SetAvoidanceEnabled(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4486A00>
	float K2_GetWalkableFloorZ(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44869D0>
	float K2_GetWalkableFloorAngle(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44869A0>
	float K2_GetModifiedMaxAcceleration(); // Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4486960>
	void K2_FindFloor(struct Unknown CapsuleLocation, struct Unknown& FloorResult); // Function Engine.CharacterMovementComponent.K2_FindFloor(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4486810>
	void K2_ComputeFloorDist(struct Unknown CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct Unknown& FloorResult); // Function Engine.CharacterMovementComponent.K2_ComputeFloorDist(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4486610>
	char IsWalking(); // Function Engine.CharacterMovementComponent.IsWalking(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44865E0>
	char IsWalkable(struct Unknown& Hit); // Function Engine.CharacterMovementComponent.IsWalkable(Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44864F0>
	float GetValidPerchRadius(); // Function Engine.CharacterMovementComponent.GetValidPerchRadius(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44864C0>
	float GetPerchRadiusThreshold(); // Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4486490>
	struct Unknown GetMovementBase(); // Function Engine.CharacterMovementComponent.GetMovementBase(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4486460>
	float GetMinAnalogSpeed(); // Function Engine.CharacterMovementComponent.GetMinAnalogSpeed(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4486420>
	float GetMaxJumpHeightWithJumpTime(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44863E0>
	float GetMaxJumpHeight(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeight(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x1F3F5D0>
	float GetMaxBrakingDeceleration(); // Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44863A0>
	float GetMaxAcceleration(); // Function Engine.CharacterMovementComponent.GetMaxAcceleration(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4486360>
	struct Unknown GetLastUpdateVelocity(); // Function Engine.CharacterMovementComponent.GetLastUpdateVelocity(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4486330>
	struct Unknown GetLastUpdateRotation(); // Function Engine.CharacterMovementComponent.GetLastUpdateRotation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44862E0>
	struct Unknown GetLastUpdateLocation(); // Function Engine.CharacterMovementComponent.GetLastUpdateLocation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44862B0>
	struct Unknown GetImpartedMovementBaseVelocity(); // Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4486270>
	struct Unknown GetCurrentAcceleration(); // Function Engine.CharacterMovementComponent.GetCurrentAcceleration(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4486230>
	struct Unknown GetCharacterOwner(); // Function Engine.CharacterMovementComponent.GetCharacterOwner(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4486210>
	float GetAnalogInputModifier(); // Function Engine.CharacterMovementComponent.GetAnalogInputModifier(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44861E0>
	void DisableMovement(); // Function Engine.CharacterMovementComponent.DisableMovement(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44861C0>
	void ClearAccumulatedForces(); // Function Engine.CharacterMovementComponent.ClearAccumulatedForces(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44861A0>
	void CapsuleTouched(struct Unknown OverlappedComp, struct Unknown Other, struct Unknown OtherComp, int32_t OtherBodyIndex, char bFromSweep, struct Unknown& SweepResult); // Function Engine.CharacterMovementComponent.CapsuleTouched(Native|Protected|HasOutParms) // <Game_BE.exe+0x4485FA0>
	void CalcVelocity(float DeltaTime, float Friction, char bFluid, float BrakingDeceleration); // Function Engine.CharacterMovementComponent.CalcVelocity(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4485E40>
	void AddImpulse(struct Unknown Impulse, char bVelocityChange); // Function Engine.CharacterMovementComponent.AddImpulse(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4485D60>
	void AddForce(struct Unknown Force); // Function Engine.CharacterMovementComponent.AddForce(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4485CD0>
};

// Class Engine.SceneCapture
class ASceneCapture : public UActor {

public:

	struct Unknown MeshComp; // 0x318 (8)
	struct Unknown SceneComponent; // 0x320 (8)
};

// Class Engine.SceneCapture2D
class ASceneCapture2D : public ASceneCapture {

public:

	struct Unknown CaptureComponent2D; // 0x328 (8)

	void OnInterpToggle(char bEnable); // Function Engine.SceneCapture2D.OnInterpToggle(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x458B2E0>
};

// Class Engine.AssetManager
class UAssetManager : public Object {

public:

	struct TArray<Unknown> ObjectReferenceList; // 0x2C0 (16)
	char bIsGlobalAsyncScanEnvironment : 0; // 0x2D0 (1)
	char bShouldGuessTypeAndName : 0; // 0x2D1 (1)
	char bShouldUseSynchronousLoad : 0; // 0x2D2 (1)
	char bIsLoadingFromPakFiles : 0; // 0x2D3 (1)
	char bShouldAcquireMissingChunksOnLoad : 0; // 0x2D4 (1)
	char bOnlyCookProductionAssets : 0; // 0x2D5 (1)
	char bIsBulkScanning : 0; // 0x2D6 (1)
	char bIsPrimaryAssetDirectoryCurrent : 0; // 0x2D7 (1)
	char bIsManagementDatabaseCurrent : 0; // 0x2D8 (1)
	char bUpdateManagementDatabaseAfterScan : 0; // 0x2D9 (1)
	char bIncludeOnlyOnDiskAssets : 0; // 0x2DA (1)
	int32_t NumberOfSpawnedNotifications; // 0x2DC (4)
};

// Class Engine.ShapeComponent
class UShapeComponent : public UPrimitiveComponent {

public:

	struct Unknown ShapeBodySetup; // 0x4A8 (8)
	struct Unknown* AreaClass; // 0x4B0 (8)
	struct Unknown ShapeColor; // 0x4B8 (4)
	char bDrawOnlyIfSelected : 0; // 0x4BC (1)
	char bShouldCollideWhenPlacing : 0; // 0x4BC (1)
	char bDynamicObstacle : 0; // 0x4BC (1)
};

// Class Engine.BoxComponent
class UBoxComponent : public UShapeComponent {

public:

	struct Unknown BoxExtent; // 0x4C0 (12)
	float LineThickness; // 0x4CC (4)

	void SetBoxExtent(struct Unknown InBoxExtent, char bUpdateOverlaps); // Function Engine.BoxComponent.SetBoxExtent(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4478C30>
	struct Unknown GetUnscaledBoxExtent(); // Function Engine.BoxComponent.GetUnscaledBoxExtent(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4478A50>
	struct Unknown GetScaledBoxExtent(); // Function Engine.BoxComponent.GetScaledBoxExtent(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44789F0>
};

// Class Engine.CameraComponent
class UCameraComponent : public USceneComponent {

public:

	float FieldOfView; // 0x228 (4)
	float OrthoWidth; // 0x22C (4)
	float OrthoNearClipPlane; // 0x230 (4)
	float OrthoFarClipPlane; // 0x234 (4)
	float AspectRatio; // 0x238 (4)
	char bConstrainAspectRatio : 0; // 0x23C (1)
	char bUseFieldOfViewForLOD : 0; // 0x23C (1)
	char bLockToHmd : 0; // 0x244 (1)
	char bUsePawnControlRotation : 0; // 0x244 (1)
	char ProjectionMode; // 0x245 (1)
	float PostProcessBlendWeight; // 0x280 (4)
	struct Unknown PostProcessSettings; // 0x2B0 (1472)

	void SetUseFieldOfViewForLOD(char bInUseFieldOfViewForLOD); // Function Engine.CameraComponent.SetUseFieldOfViewForLOD(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44791A0>
	void SetProjectionMode(char InProjectionMode); // Function Engine.CameraComponent.SetProjectionMode(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44790A0>
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight); // Function Engine.CameraComponent.SetPostProcessBlendWeight(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4479020>
	void SetOrthoWidth(float InOrthoWidth); // Function Engine.CameraComponent.SetOrthoWidth(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4478FA0>
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane); // Function Engine.CameraComponent.SetOrthoNearClipPlane(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4478F20>
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane); // Function Engine.CameraComponent.SetOrthoFarClipPlane(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4478EA0>
	void SetFieldOfView(float InFieldOfView); // Function Engine.CameraComponent.SetFieldOfView(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4478E20>
	void SetConstraintAspectRatio(char bInConstrainAspectRatio); // Function Engine.CameraComponent.SetConstraintAspectRatio(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4478D10>
	void SetAspectRatio(float InAspectRatio); // Function Engine.CameraComponent.SetAspectRatio(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4478BB0>
	void RemoveBlendable(struct TScriptInterface<IUnknown> InBlendableObject); // Function Engine.CameraComponent.RemoveBlendable(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4478A80>
	void OnCameraMeshHiddenChanged(); // Function Engine.CameraComponent.OnCameraMeshHiddenChanged(Final|Native|Protected|BlueprintCallable) // <Game_BE.exe+0x1530390>
	void GetCameraView(float DeltaTime, struct Unknown& DesiredView); // Function Engine.CameraComponent.GetCameraView(Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x4478850>
	void AddOrUpdateBlendable(struct TScriptInterface<IUnknown> InBlendableObject, float InWeight); // Function Engine.CameraComponent.AddOrUpdateBlendable(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44786D0>
};

// Class Engine.CheatManager
class UCheatManager : public Object {

public:

	struct Unknown DebugCameraControllerRef; // 0x28 (8)
	struct Unknown* DebugCameraControllerClass; // 0x30 (8)

	void Walk(); // Function Engine.CheatManager.Walk(Exec|Native|Public|BlueprintCallable) // <Game_BE.exe+0x36B0610>
	void ViewSelf(); // Function Engine.CheatManager.ViewSelf(Exec|Native|Public) // <Game_BE.exe+0x1EC7070>
	void ViewPlayer(struct FString S); // Function Engine.CheatManager.ViewPlayer(Exec|Native|Public) // <Game_BE.exe+0x448C510>
	void ViewClass(struct Unknown* DesiredClass); // Function Engine.CheatManager.ViewClass(Exec|Native|Public) // <Game_BE.exe+0x448C480>
	void ViewActor(struct FName ActorName); // Function Engine.CheatManager.ViewActor(Exec|Native|Public) // <Game_BE.exe+0x448C3F0>
	void UpdateSafeArea(); // Function Engine.CheatManager.UpdateSafeArea(Final|Exec|Native|Public) // <Game_BE.exe+0x448C3D0>
	void ToggleServerStatReplicatorUpdateStatNet(); // Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet(Final|Exec|Native|Public) // <Game_BE.exe+0x448C3B0>
	void ToggleServerStatReplicatorClientOverwrite(); // Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite(Final|Exec|Native|Public) // <Game_BE.exe+0x448C390>
	void ToggleDebugCamera(); // Function Engine.CheatManager.ToggleDebugCamera(Exec|Native|Public) // <Game_BE.exe+0x4433A50>
	void ToggleAILogging(); // Function Engine.CheatManager.ToggleAILogging(Exec|Native|Public) // <Game_BE.exe+0x448C370>
	void TestCollisionDistance(); // Function Engine.CheatManager.TestCollisionDistance(Exec|Native|Public) // <Game_BE.exe+0x1EDCE20>
	void Teleport(); // Function Engine.CheatManager.Teleport(Exec|Native|Public|BlueprintCallable) // <Game_BE.exe+0x448C350>
	void Summon(struct FString ClassName); // Function Engine.CheatManager.Summon(Exec|Native|Public) // <Game_BE.exe+0x448C2A0>
	void StreamLevelOut(struct FName PackageName); // Function Engine.CheatManager.StreamLevelOut(Exec|Native|Public) // <Game_BE.exe+0x448C210>
	void StreamLevelIn(struct FName PackageName); // Function Engine.CheatManager.StreamLevelIn(Exec|Native|Public) // <Game_BE.exe+0x448C180>
	void SpawnServerStatReplicator(); // Function Engine.CheatManager.SpawnServerStatReplicator(Final|Exec|Native|Public) // <Game_BE.exe+0x448C160>
	void Slomo(float NewTimeDilation); // Function Engine.CheatManager.Slomo(Exec|Native|Public|BlueprintCallable) // <Game_BE.exe+0x448C0E0>
	void SetWorldOrigin(); // Function Engine.CheatManager.SetWorldOrigin(Final|Exec|Native|Public) // <Game_BE.exe+0x448C0C0>
	void SetReflexLatencyGraph(int32_t Type, float Min, float MAX); // Function Engine.CheatManager.SetReflexLatencyGraph(Final|Exec|Native|Public) // <Game_BE.exe+0x448BFC0>
	void SetMouseSensitivityToDefault(); // Function Engine.CheatManager.SetMouseSensitivityToDefault(Exec|Native|Public) // <Game_BE.exe+0x448BFA0>
	void ServerToggleAILogging(); // Function Engine.CheatManager.ServerToggleAILogging(Net|NetReliableNative|Event|Public|NetServer|NetValidate) // <Game_BE.exe+0x448BEC0>
	void ReceiveInitCheatManager(); // Function Engine.CheatManager.ReceiveInitCheatManager(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveEndPlay(); // Function Engine.CheatManager.ReceiveEndPlay(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void PlayersOnly(); // Function Engine.CheatManager.PlayersOnly(Exec|Native|Public|BlueprintCallable) // <Game_BE.exe+0x1EC6830>
	void OnlyLoadLevel(struct FName PackageName); // Function Engine.CheatManager.OnlyLoadLevel(Exec|Native|Public) // <Game_BE.exe+0x448BE30>
	void LogLoc(); // Function Engine.CheatManager.LogLoc(Exec|Native|Public) // <Game_BE.exe+0x448BE10>
	void InvertMouse(); // Function Engine.CheatManager.InvertMouse(Exec|Native|Public) // <Game_BE.exe+0x448BDF0>
	void God(); // Function Engine.CheatManager.God(Exec|Native|Public|BlueprintCallable) // <Game_BE.exe+0x1EC6F70>
	void Ghost(); // Function Engine.CheatManager.Ghost(Exec|Native|Public|BlueprintCallable) // <Game_BE.exe+0x447BF00>
	void FreezeFrame(float Delay); // Function Engine.CheatManager.FreezeFrame(Exec|Native|Public|BlueprintCallable) // <Game_BE.exe+0x448BD70>
	void Fly(); // Function Engine.CheatManager.Fly(Exec|Native|Public|BlueprintCallable) // <Game_BE.exe+0x3CA4A00>
	void FlushLog(); // Function Engine.CheatManager.FlushLog(Exec|Native|Public) // <Game_BE.exe+0x448BD50>
	void EnableDebugCamera(); // Function Engine.CheatManager.EnableDebugCamera(Native|Protected|BlueprintCallable) // <Game_BE.exe+0x1E72B80>
	void DumpVoiceMutingState(); // Function Engine.CheatManager.DumpVoiceMutingState(Exec|Native|Public) // <Game_BE.exe+0x448BD30>
	void DumpPartyState(); // Function Engine.CheatManager.DumpPartyState(Exec|Native|Public) // <Game_BE.exe+0x448BD10>
	void DumpOnlineSessionState(); // Function Engine.CheatManager.DumpOnlineSessionState(Exec|Native|Public) // <Game_BE.exe+0x448BCF0>
	void DumpChatState(); // Function Engine.CheatManager.DumpChatState(Exec|Native|Public) // <Game_BE.exe+0x448BCD0>
	void DisableDebugCamera(); // Function Engine.CheatManager.DisableDebugCamera(Native|Protected|BlueprintCallable) // <Game_BE.exe+0x120CDC0>
	void DestroyTarget(); // Function Engine.CheatManager.DestroyTarget(Exec|Native|Public|BlueprintCallable) // <Game_BE.exe+0x1EC6EA0>
	void DestroyServerStatReplicator(); // Function Engine.CheatManager.DestroyServerStatReplicator(Final|Exec|Native|Public) // <Game_BE.exe+0x448BCB0>
	void DestroyPawns(struct Unknown* aClass); // Function Engine.CheatManager.DestroyPawns(Exec|Native|Public) // <Game_BE.exe+0x448BC20>
	void DestroyAllPawnsExceptTarget(); // Function Engine.CheatManager.DestroyAllPawnsExceptTarget(Exec|Native|Public) // <Game_BE.exe+0x1EC6930>
	void DestroyAll(struct Unknown* aClass); // Function Engine.CheatManager.DestroyAll(Exec|Native|Public) // <Game_BE.exe+0x448BB90>
	void DebugCapsuleSweepSize(float HalfHeight, float Radius); // Function Engine.CheatManager.DebugCapsuleSweepSize(Exec|Native|Public) // <Game_BE.exe+0x448BAC0>
	void DebugCapsuleSweepPawn(); // Function Engine.CheatManager.DebugCapsuleSweepPawn(Exec|Native|Public) // <Game_BE.exe+0x448BAA0>
	void DebugCapsuleSweepComplex(char bTraceComplex); // Function Engine.CheatManager.DebugCapsuleSweepComplex(Exec|Native|Public) // <Game_BE.exe+0x448BA10>
	void DebugCapsuleSweepClear(); // Function Engine.CheatManager.DebugCapsuleSweepClear(Exec|Native|Public) // <Game_BE.exe+0x448B9F0>
	void DebugCapsuleSweepChannel(char Channel); // Function Engine.CheatManager.DebugCapsuleSweepChannel(Exec|Native|Public) // <Game_BE.exe+0x448B970>
	void DebugCapsuleSweepCapture(); // Function Engine.CheatManager.DebugCapsuleSweepCapture(Exec|Native|Public) // <Game_BE.exe+0x448B950>
	void DebugCapsuleSweep(); // Function Engine.CheatManager.DebugCapsuleSweep(Exec|Native|Public) // <Game_BE.exe+0x448B930>
	void DamageTarget(float DamageAmount); // Function Engine.CheatManager.DamageTarget(Exec|Native|Public|BlueprintCallable) // <Game_BE.exe+0x448B8B0>
	void CheatScript(struct FString ScriptName); // Function Engine.CheatManager.CheatScript(Final|Exec|Native|Public) // <Game_BE.exe+0x448B7C0>
	void ChangeSize(float F); // Function Engine.CheatManager.ChangeSize(Exec|Native|Public|BlueprintCallable) // <Game_BE.exe+0x448B740>
	void BugItStringCreator(struct Unknown ViewLocation, struct Unknown ViewRotation, struct FString& GoString, struct FString& LocString); // Function Engine.CheatManager.BugItStringCreator(Exec|Native|Public|HasOutParms|HasDefaults) // <Game_BE.exe+0x448B570>
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll); // Function Engine.CheatManager.BugItGo(Exec|Native|Public) // <Game_BE.exe+0x448B3A0>
	void BugIt(struct FString ScreenShotDescription); // Function Engine.CheatManager.BugIt(Exec|Native|Public) // <Game_BE.exe+0x448B2F0>
};

// Class Engine.DamageType
class UDamageType : public Object {

public:

	char bCausedByWorld : 0; // 0x28 (1)
	char bScaleMomentumByMass : 0; // 0x28 (1)
	char bRadialDamageVelChange : 0; // 0x28 (1)
	float DamageImpulse; // 0x2C (4)
	float DestructibleImpulse; // 0x30 (4)
	float DestructibleDamageSpreadScale; // 0x34 (4)
	float DamageFalloff; // 0x38 (4)
};

// Class Engine.MKDemoNetDriverEx
class UMKDemoNetDriverEx : public UNetDriver {

public:

	struct Unknown* SpectatorControllerClass; // 0x928 (8)
	struct Unknown SelfDemoNetDriver; // 0x930 (8)

	void SetReplaySample(struct Unknown Target, struct Unknown ReplaySample, char bSaveCheckpoint); // Function Engine.MKDemoNetDriverEx.SetReplaySample(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4564E40>
	void GetReplaySampleArray(struct Unknown Target, struct TArray<Unknown>& OutReplaySampleArray); // Function Engine.MKDemoNetDriverEx.GetReplaySampleArray(Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x4563F50>
};

// Class Engine.DemoNetDriver
class UDemoNetDriver : public UMKDemoNetDriverEx {

public:

	struct TMap<Unknown, Unknown> RollbackNetStartupActors; // 0xA50 (80)
	float CheckpointSaveMaxMSPerFrame; // 0xECC (4)
	struct TArray<Unknown> MulticastRecordOptions; // 0xF00 (16)
	char bIsLocalReplay : 0; // 0xF60 (1)
	struct TArray<Unknown> SpectatorControllers; // 0xF68 (16)
};

// Class Engine.StaticMeshComponent
class UStaticMeshComponent : public UMeshComponent {

public:

	int32_t ForcedLodModel; // 0x4D8 (4)
	int32_t PreviousLODLevel; // 0x4DC (4)
	int32_t MinLOD; // 0x4E0 (4)
	int32_t SubDivisionStepSize; // 0x4E4 (4)
	struct Unknown StaticMesh; // 0x4E8 (8)
	struct Unknown WireframeColorOverride; // 0x4F0 (4)
	char bEvaluateWorldPositionOffset : 0; // 0x4F4 (1)
	char bOverrideWireframeColor : 0; // 0x4F4 (1)
	char pad_4FC_0 : 7; // 0x4FC (1)
	char bOverrideMinLod : 1; // 0x4F4 (1)
	char bOverrideNavigationExport : 0; // 0x4F4 (1)
	char bForceNavigationObstacle : 0; // 0x4F4 (1)
	char bDisallowMeshPaintPerInstance : 0; // 0x4F4 (1)
	char bIgnoreInstanceForTextureStreaming : 0; // 0x4F4 (1)
	char bOverrideLightMapRes : 0; // 0x4F4 (1)
	char bCastDistanceFieldIndirectShadow : 0; // 0x4F5 (1)
	char bOverrideDistanceFieldSelfShadowBias : 0; // 0x4F5 (1)
	char bUseSubDivisions : 0; // 0x4F5 (1)
	char bUseDefaultCollision : 0; // 0x4F5 (1)
	char bReverseCulling : 0; // 0x4F5 (1)
	int32_t OverriddenLightMapRes; // 0x4F8 (4)
	float DistanceFieldIndirectShadowMinVisibility; // 0x4FC (4)
	float DistanceFieldSelfShadowBias; // 0x500 (4)
	float StreamingDistanceMultiplier; // 0x504 (4)
	struct TArray<Unknown> LODData; // 0x508 (16)
	struct TArray<Unknown> StreamingTextureData; // 0x518 (16)
	struct Unknown LightmassSettings; // 0x528 (24)

	char SetStaticMesh(struct Unknown NewMesh); // Function Engine.StaticMeshComponent.SetStaticMesh(Native|Public|BlueprintCallable) // <Game_BE.exe+0x16A3340>
	void SetReverseCulling(char ReverseCulling); // Function Engine.StaticMeshComponent.SetReverseCulling(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E9AF0>
	void SetForcedLodModel(int32_t NewForcedLodModel); // Function Engine.StaticMeshComponent.SetForcedLodModel(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E9770>
	void SetDistanceFieldSelfShadowBias(float NewValue); // Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E94F0>
	void OnRep_StaticMesh(struct Unknown OldStaticMesh); // Function Engine.StaticMeshComponent.OnRep_StaticMesh(Final|Native|Public) // <Game_BE.exe+0x45E9470>
	void GetLocalBounds(struct Unknown& Min, struct Unknown& MAX); // Function Engine.StaticMeshComponent.GetLocalBounds(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E92D0>
};

// Class Engine.GameEngine
class UGameEngine : public UEngine {

public:

	float MaxDeltaTime; // 0xDE8 (4)
	float ServerFlushLogInterval; // 0xDEC (4)
	struct Unknown GameInstance; // 0xDF0 (8)
};

// Class Engine.MKGameInstanceEx
class UMKGameInstanceEx : public Object {

public:

	struct TArray<Unknown> ReplayListItemInfos; // 0x28 (16)
	struct FMulticastInlineDelegate OnEnumerateReplayListCompleteEvent; // 0x38 (16)
	struct FMulticastInlineDelegate OnDeleteReplayCompleteEvent; // 0x48 (16)
	struct FMulticastInlineDelegate OnKeepAndDeleteOldetsReplaysCompleteEvent; // 0x58 (16)
	struct FMulticastInlineDelegate OnKeepAndDeleteOldVersionReplaysCompleteEvent; // 0x68 (16)
	struct Unknown SelfGameInstance; // 0x80 (8)
	char bLoadingWidgetVisible : 0; // 0x88 (1)

	void SetTargetCamera(char bKiller); // Function Engine.MKGameInstanceEx.SetTargetCamera(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4564F50>
	void PlayReplayCommand(struct FString DemoName); // Function Engine.MKGameInstanceEx.PlayReplayCommand(Final|Exec|Native|Public) // <Game_BE.exe+0x4564D50>
	char PlayReplay(struct Unknown LocalPlayer, struct FString DemoName); // Function Engine.MKGameInstanceEx.PlayReplay(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4564C60>
	void OnKeepAndDeleteOldVersionReplaysCompleteEvent__DelegateSignature(); // DelegateFunction Engine.MKGameInstanceEx.OnKeepAndDeleteOldVersionReplaysCompleteEvent__DelegateSignature(MulticastDelegate|Public|Delegate) // <Game_BE.exe+0x2B80160>
	void OnKeepAndDeleteOldestReplaysCompleteEvent__DelegateSignature(int32_t nRemainedReplays, char bSuccess); // DelegateFunction Engine.MKGameInstanceEx.OnKeepAndDeleteOldestReplaysCompleteEvent__DelegateSignature(MulticastDelegate|Public|Delegate) // <Game_BE.exe+0x2B80160>
	void OnEnumerateStreamsCompleteEvent__DelegateSignature(int32_t OutPageIndex, int32_t OutPageSize); // DelegateFunction Engine.MKGameInstanceEx.OnEnumerateStreamsCompleteEvent__DelegateSignature(MulticastDelegate|Public|Delegate) // <Game_BE.exe+0x2B80160>
	void OnDeleteStreamCompleteEvent__DelegateSignature(struct FString StreamName, char bSuccess); // DelegateFunction Engine.MKGameInstanceEx.OnDeleteStreamCompleteEvent__DelegateSignature(MulticastDelegate|Public|Delegate) // <Game_BE.exe+0x2B80160>
	struct FString GetVictimNetGuid(); // Function Engine.MKGameInstanceEx.GetVictimNetGuid(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4564040>
	void GetNumOfReplays(int32_t& TotalReplays, int32_t& ReplaysToKeep); // Function Engine.MKGameInstanceEx.GetNumOfReplays(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x4563E70>
	struct FString GetKillerNetGuid(); // Function Engine.MKGameInstanceEx.GetKillerNetGuid(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4563C40>
	void EnumerateReplayList(int32_t PageIndex, int32_t PageSize); // Function Engine.MKGameInstanceEx.EnumerateReplayList(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4563560>
};

// Class Engine.GameInstance
class UGameInstance : public UMKGameInstanceEx {

public:

	struct TArray<Unknown> LocalPlayers; // 0xB8 (16)
	struct Unknown OnlineSession; // 0xC8 (8)
	struct TArray<Unknown> ReferencedObjects; // 0xD0 (16)

	void ReceiveShutdown(); // Function Engine.GameInstance.ReceiveShutdown(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveInit(); // Function Engine.GameInstance.ReceiveInit(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void HandleTravelError(char FailureType); // Function Engine.GameInstance.HandleTravelError(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void HandleNetworkError(char FailureType, char bIsServer); // Function Engine.GameInstance.HandleNetworkError(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void DebugRemovePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugRemovePlayer(Exec|Native|Public) // <Game_BE.exe+0x44B59D0>
	void DebugCreatePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugCreatePlayer(Exec|Native|Public) // <Game_BE.exe+0x44B5940>
};

// Class Engine.GameSession
class AGameSession : public AInfo {

public:

	int32_t MaxSpectators; // 0x318 (4)
	int32_t MaxPlayers; // 0x31C (4)
	int32_t MaxPartySize; // 0x320 (4)
	char MaxSplitscreensPerConnection; // 0x324 (1)
	char bRequiresPushToTalk : 0; // 0x325 (1)
	struct FName SessionName; // 0x328 (8)
};

// Class Engine.InstancedStaticMeshComponent
class UInstancedStaticMeshComponent : public UStaticMeshComponent {

public:

	struct TArray<Unknown> PerInstanceSMData; // 0x540 (16)
	int32_t NumCustomDataFloats; // 0x550 (4)
	struct TArray<Unknown> PerInstanceSMCustomData; // 0x558 (16)
	char bMergeCollision : 0; // 0x568 (1)
	int32_t InstancingRandomSeed; // 0x56C (4)
	int32_t InstanceStartCullDistance; // 0x570 (4)
	int32_t InstanceEndCullDistance; // 0x574 (4)
	int8_t CulldistanceType; // 0x578 (1)
	float MinScreenSizeScale; // 0x57C (4)
	char InstanceBodiesSplitRatio; // 0x580 (1)
	struct TArray<Unknown> InstanceReorderTable; // 0x588 (16)
	int32_t NumPendingLightmaps; // 0x5F4 (4)
	struct TArray<Unknown> CachedMappings; // 0x5F8 (16)

	char UpdateInstanceTransform(int32_t InstanceIndex, struct Unknown& NewInstanceTransform, char bWorldSpace, char bMarkRenderStateDirty, char bTeleport); // Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44D7520>
	char SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, char bMarkRenderStateDirty); // Function Engine.InstancedStaticMeshComponent.SetCustomDataValue(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44D73D0>
	void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance); // Function Engine.InstancedStaticMeshComponent.SetCullDistances(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44D7310>
	char RemoveInstance(int32_t InstanceIndex); // Function Engine.InstancedStaticMeshComponent.RemoveInstance(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44D7270>
	char GetInstanceTransform(int32_t InstanceIndex, struct Unknown& OutInstanceTransform, char bWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstanceTransform(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D6E70>
	struct TArray<Unknown> GetInstancesOverlappingSphere(struct Unknown& Center, float Radius, char bSphereInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D7100>
	struct TArray<Unknown> GetInstancesOverlappingBox(struct Unknown& Box, char bBoxInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D6FD0>
	int32_t GetInstanceCount(); // Function Engine.InstancedStaticMeshComponent.GetInstanceCount(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D6E40>
	void ClearInstances(char bClearBodies); // Function Engine.InstancedStaticMeshComponent.ClearInstances(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44D6DB0>
	char BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, struct TArray<Unknown>& NewInstancesTransforms, char bWorldSpace, char bMarkRenderStateDirty, char bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms(Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x44D6BC0>
	char BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, struct Unknown& NewInstancesTransform, char bWorldSpace, char bMarkRenderStateDirty, char bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44D6990>
	int32_t AddInstanceWorldSpace(struct Unknown& WorldTransform); // Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44D68B0>
	int32_t AddInstance(struct Unknown& InstanceTransform); // Function Engine.InstancedStaticMeshComponent.AddInstance(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44D67D0>
};

// Class Engine.HierarchicalInstancedStaticMeshComponent
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent {

public:

	struct TArray<Unknown> SortedInstances; // 0x618 (16)
	int32_t NumBuiltInstances; // 0x628 (4)
	struct Unknown BuiltInstanceBounds; // 0x630 (28)
	struct Unknown UnbuiltInstanceBounds; // 0x64C (28)
	struct TArray<Unknown> UnbuiltInstanceBoundsList; // 0x668 (16)
	char bEnableDensityScaling : 0; // 0x678 (1)
	int32_t OcclusionLayerNumNodes; // 0x680 (4)
	struct Unknown CacheMeshExtendedBounds; // 0x684 (28)
	char bDisableCollision : 0; // 0x6A0 (1)
	int32_t InstanceCountToRender; // 0x6A4 (4)

	char RemoveInstances(struct TArray<Unknown>& InstancesToRemove); // Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x44CB550>
	char DisableInstance(int32_t InstanceIndex); // Function Engine.HierarchicalInstancedStaticMeshComponent.DisableInstance(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C9A20>
};

// Class Engine.MK3DReplayController
class AMK3DReplayController : public APlayerController {

public:

	struct FMulticastInlineDelegate OnReplayPauseEvent; // 0x700 (16)
	struct FMulticastInlineDelegate OnReplayJumpEvent; // 0x710 (16)
	struct FMulticastInlineDelegate OnReplayJumpCompleteEvent; // 0x720 (16)
	struct FString PlayerCameraManagerClassName; // 0x7B8 (16)
	struct FString SpectatorPawnClassName; // 0x7C8 (16)
	struct FMulticastInlineDelegate ChangeViewModeDelegate; // 0x7D8 (16)
	struct FMulticastInlineDelegate ChangeCameraTypeDelegate; // 0x7E8 (16)
	struct FMulticastInlineDelegate ChangeCameraTypeByNetGuidDelegate; // 0x7F8 (16)
	struct TArray<Unknown> WidgetInfoArray; // 0x810 (16)
	struct TMap<Unknown, Unknown> ReplayWidgetMap; // 0x820 (80)
	struct Unknown KillcamComponent; // 0x8D0 (8)
	struct Unknown TargetcamComponent; // 0x8D8 (8)
	struct Unknown pTargetPlayerInRecording; // 0x8F0 (8)
	struct FString AfterKillcamHUDClassName; // 0x8F8 (16)
	struct Unknown* AfterKillcamHUDClass; // 0x908 (8)
	struct FString ReplayHUDClassName; // 0x920 (16)
	struct Unknown* ReplayHUDClass; // 0x930 (8)

	void ToggleReplayPauseAndResume(); // Function Engine.MK3DReplayController.ToggleReplayPauseAndResume(Final|Native|Protected|BlueprintCallable) // <Game_BE.exe+0x45603D0>
	void TimerFuncPendingSetPlayerCameraNetGuid(); // Function Engine.MK3DReplayController.TimerFuncPendingSetPlayerCameraNetGuid(Final|Native|Private) // <Game_BE.exe+0x45603B0>
	void TimerFuncPendingSetPlayerCamera(); // Function Engine.MK3DReplayController.TimerFuncPendingSetPlayerCamera(Final|Native|Private) // <Game_BE.exe+0x4560390>
	void TimerFuncClearTimerSetPlayerCameraNetGuid(); // Function Engine.MK3DReplayController.TimerFuncClearTimerSetPlayerCameraNetGuid(Final|Native|Private) // <Game_BE.exe+0x4560370>
	void TimerFuncClearTimerSetPlayerCamera(); // Function Engine.MK3DReplayController.TimerFuncClearTimerSetPlayerCamera(Final|Native|Private) // <Game_BE.exe+0x4560350>
	void ShowInGameReplayHUD(); // Function Engine.MK3DReplayController.ShowInGameReplayHUD(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4560330>
	void SetSpeedByIndex(int32_t WantSpeedIndex); // Function Engine.MK3DReplayController.SetSpeedByIndex(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45602B0>
	void SetSpeed(float PlayTimeDilation); // Function Engine.MK3DReplayController.SetSpeed(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4560230>
	char SetPlayerCamera(struct FString TargetName); // Function Engine.MK3DReplayController.SetPlayerCamera(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4560180>
	void SetKillcamTargetCamera(char bKiller); // Function Engine.MK3DReplayController.SetKillcamTargetCamera(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45600F0>
	char SetFreeCamera(struct Unknown& Pos, struct Unknown& Rot); // Function Engine.MK3DReplayController.SetFreeCamera(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x455FFF0>
	char ResumeReplay(); // Function Engine.MK3DReplayController.ResumeReplay(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x455FFC0>
	void RestoreCameraLag(); // Function Engine.MK3DReplayController.RestoreCameraLag(Final|Native|Private) // <Game_BE.exe+0x455FFA0>
	char PauseReplay(); // Function Engine.MK3DReplayController.PauseReplay(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x455FE40>
	void OnSetSpeedDelegate__DelegateSignature(); // DelegateFunction Engine.MK3DReplayController.OnSetSpeedDelegate__DelegateSignature(MulticastDelegate|Public|Delegate) // <Game_BE.exe+0x2B80160>
	void OnReplayPause__DelegateSignature(char bPaused); // DelegateFunction Engine.MK3DReplayController.OnReplayPause__DelegateSignature(MulticastDelegate|Public|Delegate) // <Game_BE.exe+0x2B80160>
	void OnReplayJumpComplete__DelegateSignature(char bSuccess); // DelegateFunction Engine.MK3DReplayController.OnReplayJumpComplete__DelegateSignature(MulticastDelegate|Public|Delegate) // <Game_BE.exe+0x2B80160>
	void OnReplayJump__DelegateSignature(float TimeInSec); // DelegateFunction Engine.MK3DReplayController.OnReplayJump__DelegateSignature(MulticastDelegate|Public|Delegate) // <Game_BE.exe+0x2B80160>
	void OnGoToEndTime(); // Function Engine.MK3DReplayController.OnGoToEndTime(Final|Native|Public) // <Game_BE.exe+0x455FAD0>
	void OnGoToBeginTime(); // Function Engine.MK3DReplayController.OnGoToBeginTime(Final|Native|Public) // <Game_BE.exe+0x455FAB0>
	void OnFreeCamera(); // Function Engine.MK3DReplayController.OnFreeCamera(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x455FA90>
	void OnFindActorsByCursorStop(); // Function Engine.MK3DReplayController.OnFindActorsByCursorStop(Final|Native|Public) // <Game_BE.exe+0x455FA70>
	void OnFindActorsByCursorStart(); // Function Engine.MK3DReplayController.OnFindActorsByCursorStart(Final|Native|Public) // <Game_BE.exe+0x455FA50>
	void MK3DReplayController_EnableReplayKillcamUI(char bEnable); // Function Engine.MK3DReplayController.MK3DReplayController_EnableReplayKillcamUI(Final|Exec|Native|Public) // <Game_BE.exe+0x455F9C0>
	char IsReplaying(); // Function Engine.MK3DReplayController.IsReplaying(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x455F990>
	char IsPlayingReplay(); // Function Engine.MK3DReplayController.IsPlayingReplay(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x455F960>
	char IsPlayingLiveReplay(); // Function Engine.MK3DReplayController.IsPlayingLiveReplay(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x455F930>
	char IsPlayingKillcamAndBlockUI(); // Function Engine.MK3DReplayController.IsPlayingKillcamAndBlockUI(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x455F900>
	char IsPlayingKillcam(); // Function Engine.MK3DReplayController.IsPlayingKillcam(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x455F8D0>
	char IsPlayerViewMode(); // Function Engine.MK3DReplayController.IsPlayerViewMode(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x455F8A0>
	char IsPlayerCamera(); // Function Engine.MK3DReplayController.IsPlayerCamera(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x455F870>
	char IsPaused(); // Function Engine.MK3DReplayController.IsPaused(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x455F840>
	char IsFreeCamera(); // Function Engine.MK3DReplayController.IsFreeCamera(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x455F810>
	char IsFollowViewMode(); // Function Engine.MK3DReplayController.IsFollowViewMode(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x455F7E0>
	void IncreaseSpeedByIndex(); // Function Engine.MK3DReplayController.IncreaseSpeedByIndex(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x455F7C0>
	float GetTotalTimeInSec(); // Function Engine.MK3DReplayController.GetTotalTimeInSec(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x455F790>
	struct Unknown GetTargetPlayer(); // Function Engine.MK3DReplayController.GetTargetPlayer(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x455F760>
	float GetSpeed(); // Function Engine.MK3DReplayController.GetSpeed(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x455F730>
	float GetReplayJumpDelay(); // Function Engine.MK3DReplayController.GetReplayJumpDelay(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x455F700>
	enum class Unknow GetReplayCameraType(); // Function Engine.MK3DReplayController.GetReplayCameraType(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x455F6D0>
	struct Unknown GetPlayerCharacter(); // Function Engine.MK3DReplayController.GetPlayerCharacter(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x455F6A0>
	enum class Unknow GetLatestReplayCameraType(); // Function Engine.MK3DReplayController.GetLatestReplayCameraType(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x455F670>
	int32_t GetCurrnetSpeedIndex(); // Function Engine.MK3DReplayController.GetCurrnetSpeedIndex(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x455F640>
	float GetCurrentTimeInSec(); // Function Engine.MK3DReplayController.GetCurrentTimeInSec(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x455F610>
	char FindViewTargetByName(struct FString TargetName, struct Unknown& OutTarget); // Function Engine.MK3DReplayController.FindViewTargetByName(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x455F510>
	int32_t FindSpeedIndex(float fSpeed); // Function Engine.MK3DReplayController.FindSpeedIndex(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x455F480>
	void DecreaseSpeedByIndex(); // Function Engine.MK3DReplayController.DecreaseSpeedByIndex(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x455F460>
	void ChangeViewModeDelegate__DelegateSignature(char ViewMode); // DelegateFunction Engine.MK3DReplayController.ChangeViewModeDelegate__DelegateSignature(MulticastDelegate|Public|Delegate) // <Game_BE.exe+0x2B80160>
	void ChangeCameraTypeDelegate__DelegateSignature(enum class Unknow CameraType, struct FString TargetPlayerName); // DelegateFunction Engine.MK3DReplayController.ChangeCameraTypeDelegate__DelegateSignature(MulticastDelegate|Public|Delegate) // <Game_BE.exe+0x2B80160>
	void ChangeCameraTypeByNetGuidDelegate__DelegateSignature(enum class Unknow CameraType, struct FString TargetPlayerNetGuid); // DelegateFunction Engine.MK3DReplayController.ChangeCameraTypeByNetGuidDelegate__DelegateSignature(MulticastDelegate|Public|Delegate) // <Game_BE.exe+0x2B80160>
};

// Class Engine.DefaultPawn
class ADefaultPawn : public APawn {

public:

	float BaseTurnRate; // 0x388 (4)
	float BaseLookUpRate; // 0x38C (4)
	struct Unknown MovementComponent; // 0x390 (8)
	struct Unknown CollisionComponent; // 0x398 (8)
	struct Unknown MeshComponent; // 0x3A0 (8)
	char bAddDefaultMovementBindings : 0; // 0x3A8 (1)

	void TurnAtRate(float Rate); // Function Engine.DefaultPawn.TurnAtRate(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498C70>
	void MoveUp_World(float Val); // Function Engine.DefaultPawn.MoveUp_World(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498300>
	void MoveRight(float Val); // Function Engine.DefaultPawn.MoveRight(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498280>
	void MoveForward(float Val); // Function Engine.DefaultPawn.MoveForward(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498200>
	void LookUpAtRate(float Rate); // Function Engine.DefaultPawn.LookUpAtRate(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498180>
};

// Class Engine.PhysicalMaterial
class UPhysicalMaterial : public Object {

public:

	float Friction; // 0x28 (4)
	char FrictionCombineMode; // 0x2C (1)
	char bOverrideFrictionCombineMode : 0; // 0x2D (1)
	float Restitution; // 0x30 (4)
	char RestitutionCombineMode; // 0x34 (1)
	char bOverrideRestitutionCombineMode : 0; // 0x35 (1)
	float Density; // 0x38 (4)
	float RaiseMassToPower; // 0x3C (4)
	float DestructibleDamageThresholdScale; // 0x40 (4)
	struct Unknown PhysicalMaterialProperty; // 0x48 (8)
	char SurfaceType; // 0x50 (1)
	float TireFrictionScale; // 0x54 (4)
	struct TArray<Unknown> TireFrictionScales; // 0x58 (16)
};

// Class Engine.PlayerCameraManager
class APlayerCameraManager : public UActor {

public:

	struct Unknown PCOwner; // 0x318 (8)
	struct Unknown TransformComponent; // 0x320 (8)
	float DefaultFOV; // 0x330 (4)
	float DefaultOrthoWidth; // 0x338 (4)
	float DefaultAspectRatio; // 0x340 (4)
	struct Unknown CameraCache; // 0x390 (1632)
	struct Unknown LastFrameCameraCache; // 0x9F0 (1632)
	struct Unknown ViewTarget; // 0x1050 (1648)
	struct Unknown PendingViewTarget; // 0x16C0 (1648)
	struct Unknown CameraCachePrivate; // 0x1D60 (1632)
	struct Unknown LastFrameCameraCachePrivate; // 0x23C0 (1632)
	struct TArray<Unknown> ModifierList; // 0x2A20 (16)
	struct TArray<Unknown> DefaultModifiers; // 0x2A30 (16)
	float FreeCamDistance; // 0x2A40 (4)
	struct Unknown FreeCamOffset; // 0x2A44 (12)
	struct Unknown ViewTargetOffset; // 0x2A50 (12)
	struct TArray<Unknown> CameraLensEffects; // 0x2A70 (16)
	struct Unknown CachedCameraShakeMod; // 0x2A80 (8)
	struct Unknown AnimInstPool[0x8]; // 0x2A88 (64)
	struct TArray<Unknown> PostProcessBlendCache; // 0x2AC8 (16)
	struct TArray<Unknown> ActiveAnims; // 0x2AE8 (16)
	struct TArray<Unknown> FreeAnims; // 0x2AF8 (16)
	struct Unknown AnimCameraActor; // 0x2B08 (8)
	char bIsOrthographic : 0; // 0x2B10 (1)
	char bDefaultConstrainAspectRatio : 0; // 0x2B10 (1)
	char bClientSimulatingViewTarget : 0; // 0x2B10 (1)
	char bUseClientSideCameraUpdates : 0; // 0x2B10 (1)
	char bGameCameraCutThisFrame : 0; // 0x2B11 (1)
	float ViewPitchMin; // 0x2B14 (4)
	float ViewPitchMax; // 0x2B18 (4)
	float ViewYawMin; // 0x2B1C (4)
	float ViewYawMax; // 0x2B20 (4)
	float ViewRollMin; // 0x2B24 (4)
	float ViewRollMax; // 0x2B28 (4)
	float ServerUpdateCameraTimeout; // 0x2B30 (4)

	void StopCameraShake(struct Unknown ShakeInstance, char bImmediately); // Function Engine.PlayerCameraManager.StopCameraShake(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458C220>
	void StopCameraFade(); // Function Engine.PlayerCameraManager.StopCameraFade(Native|Public|BlueprintCallable) // <Game_BE.exe+0x204E270>
	void StopCameraAnimInst(struct Unknown AnimInst, char bImmediate); // Function Engine.PlayerCameraManager.StopCameraAnimInst(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458C150>
	void StopAllInstancesOfCameraShakeFromSource(struct Unknown SourceComponent, char bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458C080>
	void StopAllInstancesOfCameraShake(struct Unknown* Shake, char bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458BFB0>
	void StopAllInstancesOfCameraAnim(struct Unknown Anim, char bImmediate); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458BEE0>
	void StopAllCameraShakes(char bImmediately); // Function Engine.PlayerCameraManager.StopAllCameraShakes(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458BE50>
	void StopAllCameraAnims(char bImmediate); // Function Engine.PlayerCameraManager.StopAllCameraAnims(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458BDC0>
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, struct Unknown Color, char bShouldFadeAudio, char bHoldWhenFinished); // Function Engine.PlayerCameraManager.StartCameraFade(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x458BBF0>
	void SetManualCameraFade(float InFadeAmount, struct Unknown Color, char bInFadeAudio); // Function Engine.PlayerCameraManager.SetManualCameraFade(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x458BAD0>
	void SetGameCameraCutThisFrame(); // Function Engine.PlayerCameraManager.SetGameCameraCutThisFrame(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x458BAB0>
	char RemoveCameraModifier(struct Unknown ModifierToRemove); // Function Engine.PlayerCameraManager.RemoveCameraModifier(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458BA10>
	void RemoveCameraLensEffect(struct Unknown Emitter); // Function Engine.PlayerCameraManager.RemoveCameraLensEffect(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B6120>
	struct Unknown PlayCameraShakeFromSource(struct Unknown* ShakeClass, struct Unknown SourceComponent); // Function Engine.PlayerCameraManager.PlayCameraShakeFromSource(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458B940>
	struct Unknown PlayCameraShake(struct Unknown* ShakeClass, float Scale, char PlaySpace, struct Unknown UserPlaySpaceRot); // Function Engine.PlayerCameraManager.PlayCameraShake(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x458B7D0>
	struct Unknown PlayCameraAnim(struct Unknown Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, char bLoop, char bRandomStartTime, float Duration, char PlaySpace, struct Unknown UserPlaySpaceRot); // Function Engine.PlayerCameraManager.PlayCameraAnim(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x458B4F0>
	void PhotographyCameraModify(struct Unknown NewCameraLocation, struct Unknown PreviousCameraLocation, struct Unknown OriginalCameraLocation, struct Unknown& ResultCameraLocation); // Function Engine.PlayerCameraManager.PhotographyCameraModify(BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <Game_BE.exe+0x458B370>
	void OnPhotographySessionStart(); // Function Engine.PlayerCameraManager.OnPhotographySessionStart(BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // <Game_BE.exe+0x1F3B8B0>
	void OnPhotographySessionEnd(); // Function Engine.PlayerCameraManager.OnPhotographySessionEnd(BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // <Game_BE.exe+0x1F3D150>
	void OnPhotographyMultiPartCaptureStart(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart(BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // <Game_BE.exe+0x124C7C0>
	void OnPhotographyMultiPartCaptureEnd(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd(BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // <Game_BE.exe+0x1E71820>
	struct Unknown GetOwningPlayerController(); // Function Engine.PlayerCameraManager.GetOwningPlayerController(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x458B190>
	float GetFOVAngle(); // Function Engine.PlayerCameraManager.GetFOVAngle(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x458AEC0>
	struct Unknown GetCameraRotation(); // Function Engine.PlayerCameraManager.GetCameraRotation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x458AE80>
	struct Unknown GetCameraLocation(); // Function Engine.PlayerCameraManager.GetCameraLocation(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x458AE40>
	struct Unknown FindCameraModifierByClass(struct Unknown* ModifierClass); // Function Engine.PlayerCameraManager.FindCameraModifierByClass(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458ADA0>
	void ClearCameraLensEffects(); // Function Engine.PlayerCameraManager.ClearCameraLensEffects(Native|Public|BlueprintCallable) // <Game_BE.exe+0x204CA70>
	char BlueprintUpdateCamera(struct Unknown CameraTarget, struct Unknown& NewCameraLocation, struct Unknown& NewCameraRotation, float& NewCameraFOV); // Function Engine.PlayerCameraManager.BlueprintUpdateCamera(BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	struct Unknown AddNewCameraModifier(struct Unknown* ModifierClass); // Function Engine.PlayerCameraManager.AddNewCameraModifier(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458AD00>
	struct Unknown AddCameraLensEffect(struct Unknown* LensEffectEmitterClass); // Function Engine.PlayerCameraManager.AddCameraLensEffect(Native|Public|BlueprintCallable) // <Game_BE.exe+0x458AC60>
};

// Class Engine.MKPlayerStateEx
class AMKPlayerStateEx : public AInfo {

public:

	struct Unknown SelfPlayerState; // 0x318 (8)
};

// Class Engine.PlayerState
class APlayerState : public AMKPlayerStateEx {

public:

	float Score; // 0x320 (4)
	int32_t PlayerId; // 0x324 (4)
	char Ping; // 0x328 (1)
	char bShouldUpdateReplicatedPing : 0; // 0x32A (1)
	char bIsSpectator : 0; // 0x32A (1)
	char bOnlySpectator : 0; // 0x32A (1)
	char bIsABot : 0; // 0x32A (1)
	char bIsInactive : 0; // 0x32A (1)
	char bFromPreviousLevel : 0; // 0x32A (1)
	int32_t StartTime; // 0x32C (4)
	struct Unknown* EngineMessageClass; // 0x330 (8)
	struct FString SavedNetworkAddress; // 0x340 (16)
	struct Unknown UniqueID; // 0x350 (40)
	struct Unknown PawnPrivate; // 0x380 (8)
	struct FString PlayerNamePrivate; // 0x400 (16)

	void ReceiveOverrideWith(struct Unknown OldPlayerState); // Function Engine.PlayerState.ReceiveOverrideWith(Event|Protected|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveCopyProperties(struct Unknown NewPlayerState); // Function Engine.PlayerState.ReceiveCopyProperties(Event|Protected|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void OnRep_UniqueId(); // Function Engine.PlayerState.OnRep_UniqueId(Native|Public) // <Game_BE.exe+0x124CA30>
	void OnRep_Score(); // Function Engine.PlayerState.OnRep_Score(Native|Public) // <Game_BE.exe+0x1F3B8B0>
	void OnRep_PlayerName(); // Function Engine.PlayerState.OnRep_PlayerName(Native|Public) // <Game_BE.exe+0x11E2190>
	void OnRep_PlayerId(); // Function Engine.PlayerState.OnRep_PlayerId(Native|Public) // <Game_BE.exe+0x124C6F0>
	void OnRep_bIsInactive(); // Function Engine.PlayerState.OnRep_bIsInactive(Native|Public) // <Game_BE.exe+0x445FE80>
	struct FString GetPlayerName(); // Function Engine.PlayerState.GetPlayerName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x459B190>
};

// Class Engine.SceneCaptureComponent
class USceneCaptureComponent : public USceneComponent {

public:

	enum class Unknow PrimitiveRenderMode; // 0x228 (1)
	char bTonemapPropagateAlpha : 0; // 0x229 (1)
	char bUsePostProcessMaterial : 0; // 0x229 (1)
	char bUseDirectionalLights : 0; // 0x229 (1)
	char CaptureSource; // 0x22A (1)
	char bCaptureEveryFrame : 0; // 0x22B (1)
	char bCaptureOnMovement : 0; // 0x22B (1)
	char bAlwaysPersistRenderingState : 0; // 0x22C (1)
	struct TArray<Unknown> HiddenComponents; // 0x230 (16)
	struct TArray<Unknown> HiddenActors; // 0x240 (16)
	struct TArray<Unknown> ShowOnlyComponents; // 0x250 (16)
	struct TArray<Unknown> ShowOnlyActors; // 0x260 (16)
	float LODDistanceFactor; // 0x270 (4)
	float MaxViewDistanceOverride; // 0x274 (4)
	int32_t CaptureSortPriority; // 0x278 (4)
	char bUseRayTracingIfEnabled : 0; // 0x27C (1)
	struct TArray<Unknown> ShowFlagSettings; // 0x280 (16)
	struct FString ProfilingEventName; // 0x2A0 (16)

	void ShowOnlyComponent(struct Unknown InComponent); // Function Engine.SceneCaptureComponent.ShowOnlyComponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B7600>
	void ShowOnlyActorComponents(struct Unknown InActor, char bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.ShowOnlyActorComponents(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B7530>
	void SetCaptureSortPriority(int32_t NewCaptureSortPriority); // Function Engine.SceneCaptureComponent.SetCaptureSortPriority(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B70E0>
	void RemoveShowOnlyComponent(struct Unknown InComponent); // Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B6F20>
	void RemoveShowOnlyActorComponents(struct Unknown InActor, char bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B6E50>
	void HideComponent(struct Unknown InComponent); // Function Engine.SceneCaptureComponent.HideComponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B4A50>
	void HideActorComponents(struct Unknown InActor, char bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.HideActorComponents(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B4980>
	void ClearShowOnlyComponents(); // Function Engine.SceneCaptureComponent.ClearShowOnlyComponents(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B4040>
	void ClearHiddenComponents(); // Function Engine.SceneCaptureComponent.ClearHiddenComponents(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B4020>
};

// Class Engine.SceneCaptureComponent2D
class USceneCaptureComponent2D : public USceneCaptureComponent {

public:

	char ProjectionType; // 0x2C0 (1)
	float FOVAngle; // 0x2C4 (4)
	float OrthoWidth; // 0x2C8 (4)
	struct Unknown TextureTarget; // 0x2D0 (8)
	char CompositeMode; // 0x2D8 (1)
	struct Unknown PostProcessSettings; // 0x2E0 (1472)
	float PostProcessBlendWeight; // 0x8A0 (4)
	char bOverride_CustomNearClippingPlane : 0; // 0x8A4 (1)
	float CustomNearClippingPlane; // 0x8A8 (4)
	char bUseCustomProjectionMatrix : 0; // 0x8AC (1)
	struct Unknown CustomProjectionMatrix; // 0x8B0 (64)
	char bEnableClipPlane : 0; // 0x8F0 (1)
	struct Unknown ClipPlaneBase; // 0x8F4 (12)
	struct Unknown ClipPlaneNormal; // 0x900 (12)
	char bCameraCutThisFrame : 0; // 0x90C (1)
	char bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 0; // 0x90C (1)
	char bDisableFlipCopyGLES : 0; // 0x910 (1)

	void CaptureScene(); // Function Engine.SceneCaptureComponent2D.CaptureScene(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B4000>
	void AddOrUpdateBlendable(struct TScriptInterface<IUnknown> InBlendableObject, float InWeight); // Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B3EB0>
};

// Class Engine.ArrowComponent
class UArrowComponent : public UPrimitiveComponent {

public:

	struct Unknown ArrowColor; // 0x4A8 (4)
	float ArrowSize; // 0x4AC (4)
	float ScreenSize; // 0x4B0 (4)
	char bIsScreenSizeScaled : 0; // 0x4B4 (1)
	char bTreatAsASprite : 0; // 0x4B4 (1)

	void SetArrowColor(struct Unknown NewColor); // Function Engine.ArrowComponent.SetArrowColor(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44584F0>
};

// Class Engine.NavigationObjectBase
class ANavigationObjectBase : public UActor {

public:

	struct Unknown CapsuleComponent; // 0x320 (8)
	struct Unknown GoodSprite; // 0x328 (8)
	struct Unknown BadSprite; // 0x330 (8)
	char bIsPIEPlayerStart : 0; // 0x338 (1)
};

// Class Engine.PlayerStart
class APlayerStart : public ANavigationObjectBase {

public:

	struct FName PlayerStartTag; // 0x340 (8)
};

// Class Engine.ProjectileMovementComponent
class UProjectileMovementComponent : public UMovementComponent {

public:

	float InitialSpeed; // 0xF0 (4)
	float MaxSpeed; // 0xF4 (4)
	char bRotationFollowsVelocity : 0; // 0xF8 (1)
	char bRotationRemainsVertical : 0; // 0xF8 (1)
	char bShouldBounce : 0; // 0xF8 (1)
	char bInitialVelocityInLocalSpace : 0; // 0xF8 (1)
	char bForceSubStepping : 0; // 0xF8 (1)
	char bSimulationEnabled : 0; // 0xF8 (1)
	char bSweepCollision : 0; // 0xF8 (1)
	char bIsHomingProjectile : 0; // 0xF8 (1)
	char bBounceAngleAffectsFriction : 0; // 0xF9 (1)
	char bIsSliding : 0; // 0xF9 (1)
	char bInterpMovement : 0; // 0xF9 (1)
	char bInterpRotation : 0; // 0xF9 (1)
	float PreviousHitTime; // 0xFC (4)
	struct Unknown PreviousHitNormal; // 0x100 (12)
	float ProjectileGravityScale; // 0x10C (4)
	float Buoyancy; // 0x110 (4)
	float Bounciness; // 0x114 (4)
	float Friction; // 0x118 (4)
	float BounceVelocityStopSimulatingThreshold; // 0x11C (4)
	float MinFrictionFraction; // 0x120 (4)
	struct FMulticastInlineDelegate OnProjectileBounce; // 0x128 (16)
	struct FMulticastInlineDelegate OnProjectileStop; // 0x138 (16)
	float HomingAccelerationMagnitude; // 0x148 (4)
	struct TWeakObjectPtr<struct Unknown> HomingTargetComponent; // 0x14C (8)
	float MaxSimulationTimeStep; // 0x154 (4)
	int32_t MaxSimulationIterations; // 0x158 (4)
	int32_t BounceAdditionalIterations; // 0x15C (4)
	float InterpLocationTime; // 0x160 (4)
	float InterpRotationTime; // 0x164 (4)
	float InterpLocationMaxLagDistance; // 0x168 (4)
	float InterpLocationSnapToTargetDistance; // 0x16C (4)

	void StopSimulating(struct Unknown& HitResult); // Function Engine.ProjectileMovementComponent.StopSimulating(Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45A7520>
	void SetVelocityInLocalSpace(struct Unknown NewVelocity); // Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A7490>
	void SetInterpolatedComponent(struct Unknown Component); // Function Engine.ProjectileMovementComponent.SetInterpolatedComponent(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A7300>
	void ResetInterpolation(); // Function Engine.ProjectileMovementComponent.ResetInterpolation(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A71E0>
	void OnProjectileStopDelegate__DelegateSignature(struct Unknown& ImpactResult); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature(MulticastDelegate|Public|Delegate|HasOutParms) // <Game_BE.exe+0x2B80160>
	void OnProjectileBounceDelegate__DelegateSignature(struct Unknown& ImpactResult, struct Unknown& ImpactVelocity); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature(MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // <Game_BE.exe+0x2B80160>
	void MoveInterpolationTarget(struct Unknown& NewLocation, struct Unknown& NewRotation); // Function Engine.ProjectileMovementComponent.MoveInterpolationTarget(Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45A7070>
	struct Unknown LimitVelocity(struct Unknown NewVelocity); // Function Engine.ProjectileMovementComponent.LimitVelocity(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A6FC0>
	char IsVelocityUnderSimulationThreshold(); // Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A6F60>
	char IsInterpolationComplete(); // Function Engine.ProjectileMovementComponent.IsInterpolationComplete(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45A6F30>
};

// Class Engine.GameUserSettings
class UGameUserSettings : public Object {

public:

	char bUseVSync : 0; // 0x28 (1)
	char bIsSmoothFrameRate : 0; // 0x29 (1)
	char bUseDynamicResolution : 0; // 0x2A (1)
	uint32_t ResolutionSizeX; // 0x80 (4)
	uint32_t ResolutionSizeY; // 0x84 (4)
	uint32_t LastUserConfirmedResolutionSizeX; // 0x88 (4)
	uint32_t LastUserConfirmedResolutionSizeY; // 0x8C (4)
	int32_t WindowPosX; // 0x90 (4)
	int32_t WindowPosY; // 0x94 (4)
	int32_t FullscreenMode; // 0x98 (4)
	int32_t LastConfirmedFullscreenMode; // 0x9C (4)
	int32_t PreferredFullscreenMode; // 0xA0 (4)
	uint32_t Version; // 0xA4 (4)
	int32_t AudioQualityLevel; // 0xA8 (4)
	int32_t LastConfirmedAudioQualityLevel; // 0xAC (4)
	float FrameRateLimit; // 0xB0 (4)
	float LobbyFrameRateLimit; // 0xB4 (4)
	int32_t DesiredScreenWidth; // 0xBC (4)
	char bUseDesiredScreenHeight : 0; // 0xC0 (1)
	int32_t DesiredScreenHeight; // 0xC4 (4)
	int32_t LastUserConfirmedDesiredScreenWidth; // 0xC8 (4)
	int32_t LastUserConfirmedDesiredScreenHeight; // 0xCC (4)
	float LastRecommendedScreenWidth; // 0xD0 (4)
	float LastRecommendedScreenHeight; // 0xD4 (4)
	float LastCPUBenchmarkResult; // 0xD8 (4)
	float LastGPUBenchmarkResult; // 0xDC (4)
	struct TArray<Unknown> LastCPUBenchmarkSteps; // 0xE0 (16)
	struct TArray<Unknown> LastGPUBenchmarkSteps; // 0xF0 (16)
	struct FString LastCPUBrand; // 0x100 (16)
	struct FString LastGPUBrand; // 0x110 (16)
	int32_t LastInstallStorageType; // 0x120 (4)
	int64_t LastTotalGraphicsMemory; // 0x128 (8)
	float LastGPUBenchmarkMultiplier; // 0x130 (4)
	char bUseHDRDisplayOutput : 0; // 0x134 (1)
	int32_t HDRDisplayOutputNits; // 0x138 (4)
	char ShowHUD : 0; // 0x13C (1)
	struct FMulticastInlineDelegate OnGameUserSettingsUINeedsUpdate; // 0x140 (16)

	void ValidateSettings(); // Function Engine.GameUserSettings.ValidateSettings(Native|Public|BlueprintCallable) // <Game_BE.exe+0x36B0610>
	char SupportsHDRDisplayOutput(); // Function Engine.GameUserSettings.SupportsHDRDisplayOutput(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C6D90>
	void SetVSyncEnabled(char bEnable); // Function Engine.GameUserSettings.SetVSyncEnabled(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6C00>
	void SetVisualEffectQuality(int32_t Value); // Function Engine.GameUserSettings.SetVisualEffectQuality(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6D10>
	void SetViewDistanceQuality(int32_t Value); // Function Engine.GameUserSettings.SetViewDistanceQuality(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6C90>
	void SetToDefaults(char bIgnoreResolutionSettings); // Function Engine.GameUserSettings.SetToDefaults(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6B70>
	void SetTextureQuality(int32_t Value); // Function Engine.GameUserSettings.SetTextureQuality(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6AF0>
	void SetSmoothFrameRateEnabled(char bEnable); // Function Engine.GameUserSettings.SetSmoothFrameRateEnabled(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6A60>
	void SetShadowQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadowQuality(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C69E0>
	void SetShadingQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadingQuality(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6960>
	void SetScreenResolution(struct Unknown Resolution); // Function Engine.GameUserSettings.SetScreenResolution(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44C68E0>
	void SetResolutionScaleValueEx(float NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValueEx(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6860>
	void SetResolutionScaleValue(int32_t NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValue(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C67E0>
	void SetResolutionScaleNormalized(float NewScaleNormalized); // Function Engine.GameUserSettings.SetResolutionScaleNormalized(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6760>
	void SetPostProcessingQuality(int32_t Value); // Function Engine.GameUserSettings.SetPostProcessingQuality(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C66E0>
	void SetOverallScalabilityLevel(int32_t Value); // Function Engine.GameUserSettings.SetOverallScalabilityLevel(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6650>
	void SetLobbyFrameRateLimit(float NewLimit); // Function Engine.GameUserSettings.SetLobbyFrameRateLimit(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C65D0>
	void SetFullscreenMode(char InFullscreenMode); // Function Engine.GameUserSettings.SetFullscreenMode(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6550>
	void SetFrameRateLimit(float NewLimit); // Function Engine.GameUserSettings.SetFrameRateLimit(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C64D0>
	void SetFoliageQuality(int32_t Value); // Function Engine.GameUserSettings.SetFoliageQuality(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6450>
	void SetDynamicResolutionEnabled(char bEnable); // Function Engine.GameUserSettings.SetDynamicResolutionEnabled(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C63C0>
	void SetBenchmarkFallbackValues(); // Function Engine.GameUserSettings.SetBenchmarkFallbackValues(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C63A0>
	void SetAudioQualityLevel(int32_t QualityLevel); // Function Engine.GameUserSettings.SetAudioQualityLevel(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6320>
	void SetAntiAliasingQuality(int32_t Value); // Function Engine.GameUserSettings.SetAntiAliasingQuality(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C62A0>
	void SaveSettings(); // Function Engine.GameUserSettings.SaveSettings(Native|Public|BlueprintCallable) // <Game_BE.exe+0x1EC6F70>
	void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier); // Function Engine.GameUserSettings.RunHardwareBenchmark(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C61A0>
	void RevertVideoMode(); // Function Engine.GameUserSettings.RevertVideoMode(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6180>
	void ResetToCurrentSettings(); // Function Engine.GameUserSettings.ResetToCurrentSettings(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4434520>
	void LoadSettings(char bForceReload); // Function Engine.GameUserSettings.LoadSettings(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C60F0>
	char IsVSyncEnabled(); // Function Engine.GameUserSettings.IsVSyncEnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x10902E0>
	char IsVSyncDirty(); // Function Engine.GameUserSettings.IsVSyncDirty(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C60C0>
	char IsSmoothFrameRate(); // Function Engine.GameUserSettings.IsSmoothFrameRate(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C6090>
	char IsShowingHUD(); // Function Engine.GameUserSettings.IsShowingHUD(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C6060>
	char IsScreenResolutionDirty(); // Function Engine.GameUserSettings.IsScreenResolutionDirty(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C6030>
	char IsHDREnabled(); // Function Engine.GameUserSettings.IsHDREnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C6000>
	char IsFullscreenModeDirty(); // Function Engine.GameUserSettings.IsFullscreenModeDirty(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5FD0>
	char IsDynamicResolutionEnabled(); // Function Engine.GameUserSettings.IsDynamicResolutionEnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5FA0>
	char IsDynamicResolutionDirty(); // Function Engine.GameUserSettings.IsDynamicResolutionDirty(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5F70>
	char IsDirty(); // Function Engine.GameUserSettings.IsDirty(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5F40>
	int32_t GetVisualEffectQuality(); // Function Engine.GameUserSettings.GetVisualEffectQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x108FC40>
	int32_t GetViewDistanceQuality(); // Function Engine.GameUserSettings.GetViewDistanceQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5EB0>
	int32_t GetTextureQuality(); // Function Engine.GameUserSettings.GetTextureQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5E80>
	int32_t GetSyncInterval(); // Function Engine.GameUserSettings.GetSyncInterval(Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x44C5E50>
	int32_t GetShadowQuality(); // Function Engine.GameUserSettings.GetShadowQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x13980D0>
	int32_t GetShadingQuality(); // Function Engine.GameUserSettings.GetShadingQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x109A060>
	struct Unknown GetScreenResolution(); // Function Engine.GameUserSettings.GetScreenResolution(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5DD0>
	float GetResolutionScaleNormalized(); // Function Engine.GameUserSettings.GetResolutionScaleNormalized(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5DA0>
	void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformationEx(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5C00>
	void GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformation(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5A60>
	float GetRecommendedResolutionScale(); // Function Engine.GameUserSettings.GetRecommendedResolutionScale(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C5A20>
	char GetPreferredFullscreenMode(); // Function Engine.GameUserSettings.GetPreferredFullscreenMode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C59F0>
	int32_t GetPostProcessingQuality(); // Function Engine.GameUserSettings.GetPostProcessingQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C59C0>
	int32_t GetOverallScalabilityLevel(); // Function Engine.GameUserSettings.GetOverallScalabilityLevel(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5850>
	float GetLobbyFrameRateLimit(); // Function Engine.GameUserSettings.GetLobbyFrameRateLimit(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5820>
	struct Unknown GetLastConfirmedScreenResolution(); // Function Engine.GameUserSettings.GetLastConfirmedScreenResolution(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C57E0>
	char GetLastConfirmedFullscreenMode(); // Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C57B0>
	struct Unknown GetGameUserSettings(); // Function Engine.GameUserSettings.GetGameUserSettings(Final|Native|Static|Public|BlueprintCallable) // <Game_BE.exe+0x44C5780>
	char GetFullscreenMode(); // Function Engine.GameUserSettings.GetFullscreenMode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5750>
	float GetFrameRateLimit(); // Function Engine.GameUserSettings.GetFrameRateLimit(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5720>
	int32_t GetFramePace(); // Function Engine.GameUserSettings.GetFramePace(Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x44C56F0>
	int32_t GetFoliageQuality(); // Function Engine.GameUserSettings.GetFoliageQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C56C0>
	struct Unknown GetDesktopResolution(); // Function Engine.GameUserSettings.GetDesktopResolution(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5680>
	struct Unknown GetDefaultWindowPosition(); // Function Engine.GameUserSettings.GetDefaultWindowPosition(Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44C5640>
	char GetDefaultWindowMode(); // Function Engine.GameUserSettings.GetDefaultWindowMode(Final|Native|Static|Public|BlueprintCallable) // <Game_BE.exe+0x44C5610>
	float GetDefaultResolutionScale(); // Function Engine.GameUserSettings.GetDefaultResolutionScale(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C55D0>
	struct Unknown GetDefaultResolution(); // Function Engine.GameUserSettings.GetDefaultResolution(Final|Native|Static|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44C5590>
	char GetCurrentResolutionWindowMode(); // Function Engine.GameUserSettings.GetCurrentResolutionWindowMode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5560>
	int32_t GetCurrentHDRDisplayNits(); // Function Engine.GameUserSettings.GetCurrentHDRDisplayNits(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44C5530>
	int32_t GetAudioQualityLevel(); // Function Engine.GameUserSettings.GetAudioQualityLevel(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x398BD90>
	int32_t GetAntiAliasingQuality(); // Function Engine.GameUserSettings.GetAntiAliasingQuality(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x10845A0>
	void EnableHDRDisplayOutput(char bEnable, int32_t DisplayNits); // Function Engine.GameUserSettings.EnableHDRDisplayOutput(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C5470>
	void ConfirmVideoMode(); // Function Engine.GameUserSettings.ConfirmVideoMode(Native|Public|BlueprintCallable) // <Game_BE.exe+0x36B0770>
	void ApplySettings(char bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplySettings(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C53E0>
	void ApplyResolutionSettings(char bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplyResolutionSettings(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C5350>
	void ApplyNonResolutionSettings(); // Function Engine.GameUserSettings.ApplyNonResolutionSettings(Native|Public|BlueprintCallable) // <Game_BE.exe+0x36B07B0>
	void ApplyHardwareBenchmarkResults(); // Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults(Native|Public|BlueprintCallable) // <Game_BE.exe+0x1EC7070>
};

// Class Engine.CapsuleComponent
class UCapsuleComponent : public UShapeComponent {

public:

	float CapsuleHalfHeight; // 0x4C0 (4)
	float CapsuleRadius; // 0x4C4 (4)

	void SetCapsuleSize(float InRadius, float InHalfHeight, char bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleSize(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4484720>
	void SetCapsuleRadius(float Radius, char bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleRadius(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4484650>
	void SetCapsuleHalfHeight(float HalfHeight, char bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleHalfHeight(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4484580>
	void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4482910>
	void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4482820>
	float GetUnscaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4482800>
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44827D0>
	float GetUnscaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44827B0>
	float GetShapeScale(); // Function Engine.CapsuleComponent.GetShapeScale(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4482690>
	void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4482570>
	void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetScaledCapsuleSize(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4482460>
	float GetScaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetScaledCapsuleRadius(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4482420>
	float GetScaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44823D0>
	float GetScaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44823A0>
};

// Class Engine.GameViewportClient
class UGameViewportClient : public UScriptViewportClient {

public:

	struct Unknown ViewportConsole; // 0x40 (8)
	struct TArray<Unknown> DebugProperties; // 0x48 (16)
	int32_t MaxSplitscreenPlayers; // 0x68 (4)
	struct Unknown World; // 0x78 (8)
	struct Unknown GameInstance; // 0x80 (8)

	void SSSwapControllers(); // Function Engine.GameViewportClient.SSSwapControllers(Exec|Native|Public) // <Game_BE.exe+0x36B0790>
	void ShowTitleSafeArea(); // Function Engine.GameViewportClient.ShowTitleSafeArea(Exec|Native|Public) // <Game_BE.exe+0x36B07B0>
	void SetConsoleTarget(int32_t PlayerIndex); // Function Engine.GameViewportClient.SetConsoleTarget(Exec|Native|Public) // <Game_BE.exe+0x44CB610>
};

// Class Engine.PhysicsVolume
class APhysicsVolume : public AVolume {

public:

	float TerminalVelocity; // 0x350 (4)
	int32_t Priority; // 0x354 (4)
	float FluidFriction; // 0x358 (4)
	char bWaterVolume : 0; // 0x35C (1)
	char bPhysicsOnContact : 0; // 0x35C (1)
};

// Class Engine.WorldSettings
class AWorldSettings : public AInfo {

public:

	int32_t VisibilityCellSize; // 0x320 (4)
	char VisibilityAggressiveness; // 0x324 (1)
	char bPrecomputeVisibility : 0; // 0x325 (1)
	char bPlaceCellsOnlyAlongCameraTracks : 0; // 0x325 (1)
	char bEnableWorldBoundsChecks : 0; // 0x325 (1)
	char bEnableNavigationSystem : 0; // 0x325 (1)
	char bEnableAISystem : 0; // 0x325 (1)
	char bEnableWorldComposition : 0; // 0x325 (1)
	char bUseClientSideLevelStreamingVolumes : 0; // 0x325 (1)
	char bEnableWorldOriginRebasing : 0; // 0x325 (1)
	char bWorldGravitySet : 0; // 0x326 (1)
	char bGlobalGravitySet : 0; // 0x326 (1)
	char bMinimizeBSPSections : 0; // 0x326 (1)
	char bForceNoPrecomputedLighting : 0; // 0x326 (1)
	char bHighPriorityLoading : 0; // 0x326 (1)
	char bHighPriorityLoadingLocal : 0; // 0x326 (1)
	char bOverrideDefaultBroadphaseSettings : 0; // 0x326 (1)
	struct Unknown NavigationSystemConfig; // 0x328 (8)
	struct Unknown NavigationSystemConfigOverride; // 0x330 (8)
	float WorldToMeters; // 0x338 (4)
	float KillZ; // 0x33C (4)
	struct Unknown* KillZDamageType; // 0x340 (8)
	float WorldGravityZ; // 0x348 (4)
	float GlobalGravityZ; // 0x34C (4)
	struct Unknown* DefaultPhysicsVolumeClass; // 0x350 (8)
	struct Unknown* PhysicsCollisionHandlerClass; // 0x358 (8)
	struct Unknown* DefaultGameMode; // 0x360 (8)
	struct Unknown* GameNetworkManagerClass; // 0x368 (8)
	int32_t PackedLightAndShadowMapTextureSize; // 0x370 (4)
	struct Unknown DefaultColorScale; // 0x374 (12)
	float DefaultMaxDistanceFieldOcclusionDistance; // 0x380 (4)
	float GlobalDistanceFieldViewDistance; // 0x384 (4)
	float DynamicIndirectShadowsSelfShadowingIntensity; // 0x388 (4)
	struct Unknown DefaultReverbSettings; // 0x390 (32)
	struct Unknown DefaultAmbientZoneSettings; // 0x3B0 (36)
	float MonoCullingDistance; // 0x3D4 (4)
	struct Unknown DefaultBaseSoundMix; // 0x3D8 (8)
	float TimeDilation; // 0x3E0 (4)
	float MatineeTimeDilation; // 0x3E4 (4)
	float DemoPlayTimeDilation; // 0x3E8 (4)
	float MinGlobalTimeDilation; // 0x3EC (4)
	float MaxGlobalTimeDilation; // 0x3F0 (4)
	float MinUndilatedFrameTime; // 0x3F4 (4)
	float MaxUndilatedFrameTime; // 0x3F8 (4)
	struct Unknown BroadphaseSettings; // 0x3FC (64)
	struct Unknown Pauser; // 0x440 (8)
	struct TArray<Unknown> ReplicationViewers; // 0x448 (16)
	struct TArray<Unknown> AssetUserData; // 0x458 (16)
	struct Unknown PauserPlayerState; // 0x468 (8)
	int32_t MaxNumberOfBookmarks; // 0x470 (4)
	struct Unknown* DefaultBookmarkClass; // 0x478 (8)
	struct TArray<Unknown> BookmarkArray; // 0x480 (16)
	struct Unknown* LastBookmarkClass; // 0x490 (8)
	char bUseInstancedStaticCollision : 0; // 0x498 (1)

	void OnRep_WorldGravityZ(); // Function Engine.WorldSettings.OnRep_WorldGravityZ(Native|Public) // <Game_BE.exe+0x1E71820>
};

// Class Engine.CameraModifier
class UCameraModifier : public Object {

public:

	char bDebug : 0; // 0x28 (1)
	char bExclusive : 0; // 0x28 (1)
	char Priority; // 0x2C (1)
	struct Unknown CameraOwner; // 0x30 (8)
	float AlphaInTime; // 0x38 (4)
	float AlphaOutTime; // 0x3C (4)
	float ALPHA; // 0x40 (4)

	char IsDisabled(); // Function Engine.CameraModifier.IsDisabled(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x36B0710>
	struct Unknown GetViewTarget(); // Function Engine.CameraModifier.GetViewTarget(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x3B587A0>
	void EnableModifier(); // Function Engine.CameraModifier.EnableModifier(Native|Public|BlueprintCallable) // <Game_BE.exe+0x447BF00>
	void DisableModifier(char bImmediate); // Function Engine.CameraModifier.DisableModifier(Native|Public|BlueprintCallable) // <Game_BE.exe+0x447BE70>
	void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, struct Unknown& PostProcessSettings); // Function Engine.CameraModifier.BlueprintModifyPostProcess(BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void BlueprintModifyCamera(float DeltaTime, struct Unknown ViewLocation, struct Unknown ViewRotation, float FOV, struct Unknown& NewViewLocation, struct Unknown& NewViewRotation, float& NewFOV); // Function Engine.CameraModifier.BlueprintModifyCamera(BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // <Game_BE.exe+0x2B80160>
};

// Class Engine.SkyLight
class ASkyLight : public AInfo {

public:

	struct Unknown LightComponent; // 0x318 (8)
	char bEnabled : 0; // 0x320 (1)

	void OnRep_bEnabled(); // Function Engine.SkyLight.OnRep_bEnabled(Native|Public) // <Game_BE.exe+0x1E71820>
};

// Class Engine.MaterialInterface
class UMaterialInterface : public Object {

public:

	struct Unknown SubsurfaceProfile; // 0x38 (8)
	struct Unknown LightmassSettings; // 0x50 (16)
	struct TArray<Unknown> TextureStreamingData; // 0x60 (16)
	struct TArray<Unknown> AssetUserData; // 0x70 (16)

	void SetForceMipLevelsToBeResident(char OverrideForceMiplevelsToBeResident, char bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, char bFastResponse); // Function Engine.MaterialInterface.SetForceMipLevelsToBeResident(RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4558030>
	struct Unknown GetPhysicalMaterialMask(); // Function Engine.MaterialInterface.GetPhysicalMaterialMask(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x3B58770>
	struct Unknown GetPhysicalMaterialFromMap(int32_t Index); // Function Engine.MaterialInterface.GetPhysicalMaterialFromMap(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4557800>
	struct Unknown GetPhysicalMaterial(); // Function Engine.MaterialInterface.GetPhysicalMaterial(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x3B587A0>
	struct Unknown GetParameterInfo(char Association, struct FName ParameterName, struct Unknown LayerFunction); // Function Engine.MaterialInterface.GetParameterInfo(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45576F0>
	struct Unknown GetBaseMaterial(); // Function Engine.MaterialInterface.GetBaseMaterial(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45576C0>
};

// Class Engine.MaterialInstance
class UMaterialInstance : public UMaterialInterface {

public:

	struct Unknown PhysMaterial; // 0x88 (8)
	struct Unknown PhysicalMaterialMap[0x8]; // 0x90 (64)
	struct Unknown Parent; // 0xD0 (8)
	char bHasStaticPermutationResource : 0; // 0xD8 (1)
	char bOverrideSubsurfaceProfile : 0; // 0xD8 (1)
	struct TArray<Unknown> ScalarParameterValues; // 0xE0 (16)
	struct TArray<Unknown> VectorParameterValues; // 0xF0 (16)
	struct TArray<Unknown> TextureParameterValues; // 0x100 (16)
	struct TArray<Unknown> RuntimeVirtualTextureParameterValues; // 0x110 (16)
	struct TArray<Unknown> FontParameterValues; // 0x120 (16)
	struct Unknown BasePropertyOverrides; // 0x130 (8)
	struct Unknown StaticParameters; // 0x148 (64)
	struct Unknown CachedLayerParameters; // 0x188 (416)
	struct TArray<Unknown> CachedReferencedTextures; // 0x328 (16)
};

// Class Engine.MaterialInstanceConstant
class UMaterialInstanceConstant : public UMaterialInstance {

public:

	struct Unknown PhysMaterialMask; // 0x408 (8)

	struct Unknown K2_GetVectorParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetVectorParameterValue(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4557D30>
	struct Unknown K2_GetTextureParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetTextureParameterValue(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4557B60>
	float K2_GetScalarParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetScalarParameterValue(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4557970>
};

// Class Engine.BlueprintGeneratedClass
class UBlueprintGeneratedClass : public UClass {

public:

	int32_t NumReplicatedProperties; // 0x2D0 (4)
	char bHasNativizedParent : 0; // 0x2D4 (1)
	char bHasCookedComponentInstancingData : 0; // 0x2D4 (1)
	struct TArray<Unknown> DynamicBindingObjects; // 0x2D8 (16)
	struct TArray<Unknown> ComponentTemplates; // 0x2E8 (16)
	struct TArray<Unknown> Timelines; // 0x2F8 (16)
	struct TArray<Unknown> ComponentClassOverrides; // 0x308 (16)
	struct Unknown SimpleConstructionScript; // 0x318 (8)
	struct Unknown InheritableComponentHandler; // 0x320 (8)
	struct Unknown UberGraphFramePointerProperty; // 0x328 (8)
	struct Unknown UberGraphFunction; // 0x338 (8)
	struct TMap<Unknown, Unknown> CookedComponentInstancingData; // 0x340 (80)
};

// Class Engine.CameraActor
class ACameraActor : public UActor {

public:

	char AutoActivateForPlayer; // 0x318 (1)
	struct Unknown CameraComponent; // 0x320 (8)
	struct Unknown SceneComponent; // 0x328 (8)
	char bConstrainAspectRatio : 0; // 0x338 (1)
	float AspectRatio; // 0x33C (4)
	float FOVAngle; // 0x340 (4)
	float PostProcessBlendWeight; // 0x344 (4)
	struct Unknown PostProcessSettings; // 0x350 (1472)

	int32_t GetAutoActivatePlayerIndex(); // Function Engine.CameraActor.GetAutoActivatePlayerIndex(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4478820>
};

// Class Engine.SoundBase
class USoundBase : public Object {

public:

	struct Unknown SoundClassObject; // 0x28 (8)
	char bDebug : 0; // 0x30 (1)
	char bOverrideConcurrency : 0; // 0x30 (1)
	char bOutputToBusOnly : 0; // 0x30 (1)
	char bHasDelayNode : 0; // 0x30 (1)
	char bHasConcatenatorNode : 0; // 0x30 (1)
	char bBypassVolumeScaleForPriority : 0; // 0x30 (1)
	enum class Unknow VirtualizationMode; // 0x31 (1)
	struct TSet<Unknown> ConcurrencySet; // 0x88 (80)
	struct Unknown ConcurrencyOverrides; // 0xD8 (32)
	float Duration; // 0xF8 (4)
	float MaxDistance; // 0xFC (4)
	float TotalSamples; // 0x100 (4)
	float Priority; // 0x104 (4)
	struct Unknown AttenuationSettings; // 0x108 (8)
	struct Unknown Modulation; // 0x110 (16)
	struct Unknown SoundSubmixObject; // 0x120 (8)
	struct TArray<Unknown> SoundSubmixSends; // 0x128 (16)
	struct Unknown SourceEffectChain; // 0x138 (8)
	struct TArray<Unknown> BusSends; // 0x140 (16)
	struct TArray<Unknown> PreEffectBusSends; // 0x150 (16)
};

// Class Engine.SoundWave
class USoundWave : public USoundBase {

public:

	int32_t CompressionQuality; // 0x160 (4)
	int32_t StreamingPriority; // 0x164 (4)
	enum class Unknow SampleRateQuality; // 0x168 (1)
	char SoundGroup; // 0x16A (1)
	char bLooping : 0; // 0x16B (1)
	char bStreaming : 0; // 0x16B (1)
	char bSeekableStreaming : 0; // 0x16B (1)
	enum class Unknow LoadingBehavior; // 0x16C (1)
	char bMature : 0; // 0x16D (1)
	char bManualWordWrap : 0; // 0x16D (1)
	char bSingleLine : 0; // 0x16D (1)
	char bIsAmbisonics : 0; // 0x16E (1)
	struct TArray<Unknown> FrequenciesToAnalyze; // 0x170 (16)
	struct TArray<Unknown> CookedSpectralTimeData; // 0x180 (16)
	struct TArray<Unknown> CookedEnvelopeTimeData; // 0x190 (16)
	int32_t InitialChunkSize; // 0x1A0 (4)
	struct FString SpokenText; // 0x1E8 (16)
	float SubtitlePriority; // 0x1F8 (4)
	float Volume; // 0x1FC (4)
	float Pitch; // 0x200 (4)
	int32_t NumChannels; // 0x204 (4)
	int32_t SampleRate; // 0x208 (4)
	struct TArray<Unknown> Subtitles; // 0x218 (16)
	struct Unknown Curves; // 0x228 (8)
	struct Unknown InternalCurves; // 0x230 (8)
};

// Class Engine.BlueprintCore
class UBlueprintCore : public Object {

public:

	struct Unknown* SkeletonGeneratedClass; // 0x28 (8)
	struct Unknown* GeneratedClass; // 0x30 (8)
	char bLegacyNeedToPurgeSkelRefs : 0; // 0x38 (1)
	struct Unknown BlueprintGuid; // 0x3C (16)
};

// Class Engine.Blueprint
class UBlueprint : public UBlueprintCore {

public:

	struct Unknown* ParentClass; // 0x50 (8)
	char BlueprintType; // 0x58 (1)
	char bRecompileOnLoad : 0; // 0x59 (1)
	char bHasBeenRegenerated : 0; // 0x59 (1)
	char bIsRegeneratingOnLoad : 0; // 0x59 (1)
	int32_t BlueprintSystemVersion; // 0x5C (4)
	struct Unknown SimpleConstructionScript; // 0x60 (8)
	struct TArray<Unknown> ComponentTemplates; // 0x68 (16)
	struct TArray<Unknown> Timelines; // 0x78 (16)
	struct TArray<Unknown> ComponentClassOverrides; // 0x88 (16)
	struct Unknown InheritableComponentHandler; // 0x98 (8)
};

// Class Engine.MKChannelEx
class UMKChannelEx : public Object {

public:

	struct Unknown SelfChannel; // 0x30 (8)
};

// Class Engine.Channel
class UChannel : public UMKChannelEx {

public:

	struct Unknown Connection; // 0x38 (8)
};

// Class Engine.MKActorChannelEx
class UMKActorChannelEx : public UChannel {

public:

	struct Unknown SelfActorChannel; // 0xA0 (8)
};

// Class Engine.ActorChannel
class UActorChannel : public UMKActorChannelEx {

public:

	struct Unknown Actor; // 0xA8 (8)
	struct TArray<Unknown> CreateSubObjects; // 0x198 (16)
};

// Class Engine.AnimationAsset
class UAnimationAsset : public Object {

public:

	struct Unknown Skeleton; // 0x50 (8)
	struct TArray<Unknown> MetaData; // 0x68 (16)
	struct TArray<Unknown> AssetUserData; // 0x38 (16)
};

// Class Engine.BlendSpaceBase
class UBlendSpaceBase : public UAnimationAsset {

public:

	char bRotationBlendInMeshSpace : 0; // 0x98 (1)
	float AnimLength; // 0x9C (4)
	struct Unknown InterpolationParam[0x3]; // 0xA0 (24)
	float TargetWeightInterpolationSpeedPerSec; // 0xB8 (4)
	char NotifyTriggerMode; // 0xBC (1)
	struct TArray<Unknown> PerBoneBlend; // 0xC0 (16)
	int32_t SampleIndexWithMarkers; // 0xD0 (4)
	struct TArray<Unknown> SampleData; // 0xD8 (16)
	struct TArray<Unknown> GridSamples; // 0xE8 (16)
	struct Unknown BlendParameters[0x3]; // 0xF8 (96)
};

// Class Engine.BlendSpace
class UBlendSpace : public UBlendSpaceBase {

public:

	char AxisToScaleAnimation; // 0x158 (1)
};

// Class Engine.BlendSpace1D
class UBlendSpace1D : public UBlendSpaceBase {

public:

	char bScaleAnimation : 0; // 0x158 (1)
};

// Class Engine.AISystemBase
class UAISystemBase : public Object {

public:

	struct Unknown AISystemClassName; // 0x28 (24)
	struct FName AISystemModuleName; // 0x40 (8)
	char bInstantiateAISystemOnClient : 0; // 0x50 (1)
};

// Class Engine.AmbientSound
class AAmbientSound : public UActor {

public:

	struct Unknown AudioComponent; // 0x318 (8)

	void Stop(); // Function Engine.AmbientSound.Stop(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44390A0>
	void Play(float StartTime); // Function Engine.AmbientSound.Play(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4438B80>
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeOut(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4438960>
	void FadeIn(float FadeInDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeIn(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44388A0>
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel); // Function Engine.AmbientSound.AdjustVolume(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4438750>
};

// Class Engine.AnimationSettings
class UAnimationSettings : public UDeveloperSettings {

public:

	int32_t CompressCommandletVersion; // 0x38 (4)
	struct TArray<Unknown> KeyEndEffectorsMatchNameArray; // 0x40 (16)
	char ForceRecompression : 0; // 0x50 (1)
	char bOnlyCheckForMissingSkeletalMeshes : 0; // 0x51 (1)
	char bForceBelowThreshold : 0; // 0x52 (1)
	char bFirstRecompressUsingCurrentOrDefault : 0; // 0x53 (1)
	char bRaiseMaxErrorToExisting : 0; // 0x54 (1)
	char bEnablePerformanceLog : 0; // 0x55 (1)
	char bStripAnimationDataOnDedicatedServer : 0; // 0x56 (1)
	char bTickAnimationOnSkeletalMeshInit : 0; // 0x57 (1)
};

// Class Engine.AnimBlueprint
class UAnimBlueprint : public UBlueprint {

public:

	struct Unknown TargetSkeleton; // 0xA8 (8)
	struct TArray<Unknown> Groups; // 0xB8 (16)
	char bUseMultiThreadedAnimationUpdate : 0; // 0xB0 (1)
	char bWarnAboutBlueprintUsage : 0; // 0xC8 (1)
};

// Class Engine.AnimBlueprintGeneratedClass
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass {

public:

	struct TArray<Unknown> BakedStateMachines; // 0x528 (16)
	struct Unknown TargetSkeleton; // 0x510 (8)
	struct TArray<Unknown> AnimNotifies; // 0x460 (16)
	struct TMap<Unknown, Unknown> OrderedSavedPoseIndicesMap; // 0x410 (80)
	struct TArray<Unknown> SyncGroupNames; // 0x518 (16)
	struct TArray<Unknown> EvaluateGraphExposedInputs; // 0x578 (16)
	struct TMap<Unknown, Unknown> GraphAssetPlayerInformation; // 0x4C0 (80)
	struct TMap<Unknown, Unknown> GraphBlendOptions; // 0x470 (80)
};

// Class Engine.AnimBoneCompressionCodec
class UAnimBoneCompressionCodec : public Object {

public:

	struct FString Description; // 0x28 (16)
};

// Class Engine.AnimBoneCompressionSettings
class UAnimBoneCompressionSettings : public Object {

public:

	struct TArray<Unknown> Codecs; // 0x28 (16)
};

// Class Engine.AnimClassData
class UAnimClassData : public Object {

public:

	struct TArray<Unknown> BakedStateMachines; // 0x258 (16)
	struct Unknown TargetSkeleton; // 0x230 (8)
	struct TArray<Unknown> AnimNotifies; // 0x150 (16)
	struct TMap<Unknown, Unknown> OrderedSavedPoseIndicesMap; // 0x100 (80)
	struct TArray<Unknown> AnimBlueprintFunctions; // 0x200 (16)
	struct TArray<Unknown> AnimBlueprintFunctionData; // 0x248 (16)
	struct TArray<Unknown> AnimNodeProperties; // 0x90 (16)
	struct TArray<Unknown> LinkedAnimGraphNodeProperties; // 0x190 (16)
	struct TArray<Unknown> LinkedAnimLayerNodeProperties; // 0x238 (16)
	struct TArray<Unknown> PreUpdateNodeProperties; // 0xD0 (16)
	struct TArray<Unknown> DynamicResetNodeProperties; // 0xE0 (16)
	struct TArray<Unknown> StateMachineNodeProperties; // 0x1F0 (16)
	struct TArray<Unknown> InitializationNodeProperties; // 0xF0 (16)
	struct TMap<Unknown, Unknown> GraphNameAssetPlayers; // 0x1A0 (80)
	struct TArray<Unknown> SyncGroupNames; // 0xC0 (16)
	struct TArray<Unknown> EvaluateGraphExposedInputs; // 0x210 (16)
	struct TMap<Unknown, Unknown> GraphBlendOptions; // 0x40 (80)
};

// Class Engine.AnimSequenceBase
class UAnimSequenceBase : public UAnimationAsset {

public:

	struct TArray<Unknown> Notifies; // 0x90 (16)
	float SequenceLength; // 0xA0 (4)
	float RateScale; // 0xA4 (4)
	struct Unknown RawCurveData; // 0xA8 (16)

	float GetPlayLength(); // Function Engine.AnimSequenceBase.GetPlayLength(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44527D0>
};

// Class Engine.AnimComposite
class UAnimComposite : public UAnimCompositeBase {

public:

	struct Unknown AnimationTrack; // 0xB8 (16)
};

// Class Engine.AnimCompress
class UAnimCompress : public UAnimBoneCompressionCodec {

public:

	char bNeedsSkeleton : 0; // 0x38 (1)
	char TranslationCompressionFormat; // 0x3C (1)
	char RotationCompressionFormat; // 0x3D (1)
	char ScaleCompressionFormat; // 0x3E (1)
};

// Class Engine.AnimCompress_RemoveLinearKeys
class UAnimCompress_RemoveLinearKeys : public UAnimCompress {

public:

	float MaxPosDiff; // 0x40 (4)
	float MaxAngleDiff; // 0x44 (4)
	float MaxScaleDiff; // 0x48 (4)
	float MaxEffectorDiff; // 0x4C (4)
	float MinEffectorDiff; // 0x50 (4)
	float EffectorDiffSocket; // 0x54 (4)
	float ParentKeyScale; // 0x58 (4)
	char bRetarget : 0; // 0x5C (1)
	char bActuallyFilterLinearKeys : 0; // 0x5C (1)
};

// Class Engine.AnimCompress_PerTrackCompression
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys {

public:

	float MaxZeroingThreshold; // 0x60 (4)
	float MaxPosDiffBitwise; // 0x64 (4)
	float MaxAngleDiffBitwise; // 0x68 (4)
	float MaxScaleDiffBitwise; // 0x6C (4)
	struct TArray<Unknown> AllowedRotationFormats; // 0x70 (16)
	struct TArray<Unknown> AllowedTranslationFormats; // 0x80 (16)
	struct TArray<Unknown> AllowedScaleFormats; // 0x90 (16)
	char bResampleAnimation : 0; // 0xA0 (1)
	float ResampledFramerate; // 0xA4 (4)
	int32_t MinKeysForResampling; // 0xA8 (4)
	char bUseAdaptiveError : 0; // 0xAC (1)
	char bUseOverrideForEndEffectors : 0; // 0xAC (1)
	int32_t TrackHeightBias; // 0xB0 (4)
	float ParentingDivisor; // 0xB4 (4)
	float ParentingDivisorExponent; // 0xB8 (4)
	char bUseAdaptiveError2 : 0; // 0xBC (1)
	float RotationErrorSourceRatio; // 0xC0 (4)
	float TranslationErrorSourceRatio; // 0xC4 (4)
	float ScaleErrorSourceRatio; // 0xC8 (4)
	float MaxErrorPerTrackRatio; // 0xCC (4)
	float PerturbationProbeSize; // 0xD0 (4)
};

// Class Engine.AnimCompress_RemoveEverySecondKey
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress {

public:

	int32_t MinKeys; // 0x40 (4)
	char bStartAtSecondKey : 0; // 0x44 (1)
};

// Class Engine.AnimCompress_RemoveTrivialKeys
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress {

public:

	float MaxPosDiff; // 0x40 (4)
	float MaxAngleDiff; // 0x44 (4)
	float MaxScaleDiff; // 0x48 (4)
};

// Class Engine.AnimCurveCompressionSettings
class UAnimCurveCompressionSettings : public Object {

public:

	struct Unknown Codec; // 0x28 (8)
};

// Class Engine.AnimMontage
class UAnimMontage : public UAnimCompositeBase {

public:

	struct Unknown BlendIn; // 0xB8 (48)
	float BlendInTime; // 0xE8 (4)
	struct Unknown BlendOut; // 0xF0 (48)
	float BlendOutTime; // 0x120 (4)
	float BlendOutTriggerTime; // 0x124 (4)
	struct FName SyncGroup; // 0x128 (8)
	int32_t SyncSlotIndex; // 0x130 (4)
	struct Unknown MarkerData; // 0x138 (32)
	struct TArray<Unknown> CompositeSections; // 0x158 (16)
	struct TArray<Unknown> SlotAnimTracks; // 0x168 (16)
	struct TArray<Unknown> BranchingPoints; // 0x178 (16)
	char bEnableRootMotionTranslation : 0; // 0x188 (1)
	char bEnableRootMotionRotation : 0; // 0x189 (1)
	char bEnableAutoBlendOut : 0; // 0x18A (1)
	char RootMotionRootLock; // 0x18B (1)
	struct TArray<Unknown> BranchingPointMarkers; // 0x190 (16)
	struct TArray<Unknown> BranchingPointStateNotifyIndices; // 0x1A0 (16)
	struct Unknown TimeStretchCurve; // 0x1B0 (40)
	struct FName TimeStretchCurveName; // 0x1D8 (8)

	float GetDefaultBlendOutTime(); // Function Engine.AnimMontage.GetDefaultBlendOutTime(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x444E170>
};

// Class Engine.AnimNotify_PlayParticleEffect
class UAnimNotify_PlayParticleEffect : public UAnimNotify {

public:

	struct Unknown PSTemplate; // 0x38 (8)
	struct Unknown LocationOffset; // 0x40 (12)
	struct Unknown RotationOffset; // 0x4C (12)
	struct Unknown Scale; // 0x58 (12)
	char Attached : 0; // 0x80 (1)
	struct FName SocketName; // 0x84 (8)
};

// Class Engine.AnimNotify_PlaySound
class UAnimNotify_PlaySound : public UAnimNotify {

public:

	struct Unknown Sound; // 0x38 (8)
	float VolumeMultiplier; // 0x40 (4)
	float PitchMultiplier; // 0x44 (4)
	char bFollow : 0; // 0x48 (1)
	struct FName AttachName; // 0x4C (8)
};

// Class Engine.AnimNotifyState_TimedParticleEffect
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState {

public:

	struct Unknown PSTemplate; // 0x30 (8)
	struct FName SocketName; // 0x38 (8)
	struct Unknown LocationOffset; // 0x40 (12)
	struct Unknown RotationOffset; // 0x4C (12)
	char bDestroyAtEnd : 0; // 0x58 (1)
};

// Class Engine.AnimNotifyState_Trail
class UAnimNotifyState_Trail : public UAnimNotifyState {

public:

	struct Unknown PSTemplate; // 0x30 (8)
	struct FName FirstSocketName; // 0x38 (8)
	struct FName SecondSocketName; // 0x40 (8)
	char WidthScaleMode; // 0x48 (1)
	struct FName WidthScaleCurve; // 0x4C (8)
	char bRecycleSpawnedSystems : 0; // 0x54 (1)

	struct Unknown OverridePSTemplate(struct Unknown MeshComp, struct Unknown Animation); // Function Engine.AnimNotifyState_Trail.OverridePSTemplate(Event|Public|BlueprintEvent|Const) // <Game_BE.exe+0x2B80160>
};

// Class Engine.AnimSequence
class UAnimSequence : public UAnimSequenceBase {

public:

	int32_t NumFrames; // 0xB8 (4)
	struct TArray<Unknown> TrackToSkeletonMapTable; // 0xC0 (16)
	struct Unknown BoneCompressionSettings; // 0xE0 (8)
	struct Unknown CurveCompressionSettings; // 0xE8 (8)
	char AdditiveAnimType; // 0x160 (1)
	char RefPoseType; // 0x161 (1)
	struct Unknown RefPoseSeq; // 0x168 (8)
	int32_t RefFrameIndex; // 0x170 (4)
	struct FName RetargetSource; // 0x174 (8)
	enum class Unknow Interpolation; // 0x17C (1)
	char bEnableRootMotion : 0; // 0x17D (1)
	char RootMotionRootLock; // 0x17E (1)
	char bForceRootLock : 0; // 0x17F (1)
	char bUseNormalizedRootMotionScale : 0; // 0x180 (1)
	char bRootMotionSettingsCopiedFromMontage : 0; // 0x181 (1)
	struct TArray<Unknown> AuthoredSyncMarkers; // 0x188 (16)
};

// Class Engine.AnimSet
class UAnimSet : public Object {

public:

	char bAnimRotationOnly : 0; // 0x28 (1)
	struct TArray<Unknown> TrackBoneNames; // 0x30 (16)
	struct TArray<Unknown> LinkupCache; // 0x40 (16)
	struct TArray<Unknown> BoneUseAnimTranslation; // 0x50 (16)
	struct TArray<Unknown> ForceUseMeshTranslation; // 0x60 (16)
	struct TArray<Unknown> UseTranslationBoneNames; // 0x70 (16)
	struct TArray<Unknown> ForceMeshTranslationBoneNames; // 0x80 (16)
	struct FName PreviewSkelMeshName; // 0x90 (8)
	struct FName BestRatioSkelMeshName; // 0x98 (8)
};

// Class Engine.AnimSingleNodeInstance
class UAnimSingleNodeInstance : public UAnimInstance {

public:

	struct Unknown CurrentAsset; // 0x270 (8)
	struct FDelegate PostEvaluateAnimEvent; // 0x278 (16)

	void StopAnim(); // Function Engine.AnimSingleNodeInstance.StopAnim(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4452FE0>
	void SetReverse(char bInReverse); // Function Engine.AnimSingleNodeInstance.SetReverse(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4452F50>
	void SetPreviewCurveOverride(struct FName& PoseName, float Value, char bRemoveIfZero); // Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x4452E30>
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, char bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4452D20>
	void SetPosition(float InPosition, char bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPosition(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4452C50>
	void SetPlayRate(float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetPlayRate(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4452B40>
	void SetPlaying(char bIsPlaying); // Function Engine.AnimSingleNodeInstance.SetPlaying(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4452BC0>
	void SetLooping(char bIsLooping); // Function Engine.AnimSingleNodeInstance.SetLooping(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4452AB0>
	void SetBlendSpaceInput(struct Unknown& InBlendInput); // Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4452A20>
	void SetAnimationAsset(struct Unknown NewAsset, char bIsLooping, float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetAnimationAsset(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4452910>
	void PlayAnim(char bIsLooping, float InPlayRate, float InStartPosition); // Function Engine.AnimSingleNodeInstance.PlayAnim(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4452810>
	float GetLength(); // Function Engine.AnimSingleNodeInstance.GetLength(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44527A0>
	struct Unknown GetAnimationAsset(); // Function Engine.AnimSingleNodeInstance.GetAnimationAsset(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4452770>
};

// Class Engine.AnimStreamable
class UAnimStreamable : public UAnimSequenceBase {

public:

	int32_t NumFrames; // 0xB8 (4)
	enum class Unknow Interpolation; // 0xBC (1)
	struct FName RetargetSource; // 0xC0 (8)
	struct Unknown BoneCompressionSettings; // 0xD8 (8)
	struct Unknown CurveCompressionSettings; // 0xE0 (8)
	char bEnableRootMotion : 0; // 0xE8 (1)
	char RootMotionRootLock; // 0xE9 (1)
	char bForceRootLock : 0; // 0xEA (1)
	char bUseNormalizedRootMotionScale : 0; // 0xEB (1)
};

// Class Engine.AssetExportTask
class UAssetExportTask : public Object {

public:

	struct Unknown Object; // 0x28 (8)
	struct Unknown Exporter; // 0x30 (8)
	struct FString Filename; // 0x38 (16)
	char bSelected : 0; // 0x48 (1)
	char bReplaceIdentical : 0; // 0x49 (1)
	char bPrompt : 0; // 0x4A (1)
	char bAutomated : 0; // 0x4B (1)
	char bUseFileArchive : 0; // 0x4C (1)
	char bWriteEmptyFiles : 0; // 0x4D (1)
	struct TArray<Unknown> IgnoreObjectList; // 0x50 (16)
	struct Unknown options; // 0x60 (8)
	struct TArray<Unknown> Errors; // 0x68 (16)
};

// Class Engine.AssetManagerSettings
class UAssetManagerSettings : public UDeveloperSettings {

public:

	struct TArray<Unknown> PrimaryAssetTypesToScan; // 0x38 (16)
	struct TArray<Unknown> DirectoriesToExclude; // 0x48 (16)
	struct TArray<Unknown> PrimaryAssetRules; // 0x58 (16)
	struct TArray<Unknown> CustomPrimaryAssetRules; // 0x68 (16)
	char bOnlyCookProductionAssets : 0; // 0x78 (1)
	char bShouldManagerDetermineTypeAndName : 0; // 0x79 (1)
	char bShouldGuessTypeAndNameInEditor : 0; // 0x7A (1)
	char bShouldAcquireMissingChunksOnLoad : 0; // 0x7B (1)
	struct TArray<Unknown> PrimaryAssetIdRedirects; // 0x80 (16)
	struct TArray<Unknown> PrimaryAssetTypeRedirects; // 0x90 (16)
	struct TArray<Unknown> AssetPathRedirects; // 0xA0 (16)
	struct TSet<Unknown> MetaDataTagsForAssetRegistry; // 0xB0 (80)
	char bUsePathExcludedFromScan : 0; // 0x100 (1)
	char bRemoveRedundantDirectroyChunks : 0; // 0x101 (1)
};

// Class Engine.AssetMappingTable
class UAssetMappingTable : public Object {

public:

	struct TArray<Unknown> MappedAssets; // 0x28 (16)
};

// Class Engine.AsyncActionHandleSaveGame
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase {

public:

	struct FMulticastInlineDelegate Completed; // 0x30 (16)
	struct Unknown SaveGameObject; // 0x60 (8)

	struct Unknown AsyncSaveGameToSlot(struct Unknown WorldContextObject, struct Unknown SaveGameObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot(Final|Native|Static|Public|BlueprintCallable) // <Game_BE.exe+0x445C620>
	struct Unknown AsyncLoadGameFromSlot(struct Unknown WorldContextObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot(Final|Native|Static|Public|BlueprintCallable) // <Game_BE.exe+0x445BFC0>
};

// Class Engine.AsyncActionLoadPrimaryAsset
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase {

public:

	struct FMulticastInlineDelegate Completed; // 0x78 (16)

	struct Unknown AsyncLoadPrimaryAsset(struct Unknown WorldContextObject, struct Unknown PrimaryAsset, struct TArray<Unknown>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset(Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x445C0E0>
};

// Class Engine.AsyncActionLoadPrimaryAssetClass
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase {

public:

	struct FMulticastInlineDelegate Completed; // 0x78 (16)

	struct Unknown AsyncLoadPrimaryAssetClass(struct Unknown WorldContextObject, struct Unknown PrimaryAsset, struct TArray<Unknown>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass(Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x445C220>
};

// Class Engine.AsyncActionLoadPrimaryAssetList
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase {

public:

	struct FMulticastInlineDelegate Completed; // 0x78 (16)

	struct Unknown AsyncLoadPrimaryAssetList(struct Unknown WorldContextObject, struct TArray<Unknown>& PrimaryAssetList, struct TArray<Unknown>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList(Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x445C4C0>
};

// Class Engine.AsyncActionLoadPrimaryAssetClassList
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase {

public:

	struct FMulticastInlineDelegate Completed; // 0x78 (16)

	struct Unknown AsyncLoadPrimaryAssetClassList(struct Unknown WorldContextObject, struct TArray<Unknown>& PrimaryAssetList, struct TArray<Unknown>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList(Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x445C360>
};

// Class Engine.AsyncActionChangePrimaryAssetBundles
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase {

public:

	struct FMulticastInlineDelegate Completed; // 0x78 (16)

	struct Unknown AsyncChangeBundleStateForPrimaryAssetList(struct Unknown WorldContextObject, struct TArray<Unknown>& PrimaryAssetList, struct TArray<Unknown>& AddBundles, struct TArray<Unknown>& RemoveBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList(Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x445BE00>
	struct Unknown AsyncChangeBundleStateForMatchingPrimaryAssets(struct Unknown WorldContextObject, struct TArray<Unknown>& NewBundles, struct TArray<Unknown>& OldBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets(Final|Native|Static|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x445BCA0>
};

// Class Engine.AtmosphericFog
class AAtmosphericFog : public AInfo {

public:

	struct Unknown AtmosphericFogComponent; // 0x318 (8)
};

// Class Engine.AtmosphericFogComponent
class UAtmosphericFogComponent : public USceneComponent {

public:

	float SunMultiplier; // 0x228 (4)
	float FogMultiplier; // 0x22C (4)
	float DensityMultiplier; // 0x230 (4)
	float DensityOffset; // 0x234 (4)
	float DistanceScale; // 0x238 (4)
	float AltitudeScale; // 0x23C (4)
	float DistanceOffset; // 0x240 (4)
	float GroundOffset; // 0x244 (4)
	float StartDistance; // 0x248 (4)
	float SunDiscScale; // 0x24C (4)
	float DefaultBrightness; // 0x250 (4)
	struct Unknown DefaultLightColor; // 0x254 (4)
	char bDisableSunDisk : 0; // 0x258 (1)
	char bAtmosphereAffectsSunIlluminance : 0; // 0x258 (1)
	char bDisableGroundScattering : 0; // 0x258 (1)
	struct Unknown PrecomputeParams; // 0x25C (44)
	struct Unknown TransmittanceTexture; // 0x288 (8)
	struct Unknown IrradianceTexture; // 0x290 (8)

	void StartPrecompute(); // Function Engine.AtmosphericFogComponent.StartPrecompute(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x1530390>
	void SetSunMultiplier(float NewSunMultiplier); // Function Engine.AtmosphericFogComponent.SetSunMultiplier(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445CE20>
	void SetStartDistance(float NewStartDistance); // Function Engine.AtmosphericFogComponent.SetStartDistance(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445CDA0>
	void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum); // Function Engine.AtmosphericFogComponent.SetPrecomputeParams(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445CC90>
	void SetFogMultiplier(float NewFogMultiplier); // Function Engine.AtmosphericFogComponent.SetFogMultiplier(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445CC10>
	void SetDistanceScale(float NewDistanceScale); // Function Engine.AtmosphericFogComponent.SetDistanceScale(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445CB90>
	void SetDistanceOffset(float NewDistanceOffset); // Function Engine.AtmosphericFogComponent.SetDistanceOffset(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445CB10>
	void SetDensityOffset(float NewDensityOffset); // Function Engine.AtmosphericFogComponent.SetDensityOffset(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445CA90>
	void SetDensityMultiplier(float NewDensityMultiplier); // Function Engine.AtmosphericFogComponent.SetDensityMultiplier(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445CA10>
	void SetDefaultLightColor(struct Unknown NewLightColor); // Function Engine.AtmosphericFogComponent.SetDefaultLightColor(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x445C990>
	void SetDefaultBrightness(float NewBrightness); // Function Engine.AtmosphericFogComponent.SetDefaultBrightness(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445C910>
	void SetAltitudeScale(float NewAltitudeScale); // Function Engine.AtmosphericFogComponent.SetAltitudeScale(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445C890>
	void DisableSunDisk(char NewSunDisk); // Function Engine.AtmosphericFogComponent.DisableSunDisk(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445C800>
	void DisableGroundScattering(char NewGroundScattering); // Function Engine.AtmosphericFogComponent.DisableGroundScattering(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445C770>
};

// Class Engine.AudioSettings
class UAudioSettings : public UDeveloperSettings {

public:

	struct Unknown DefaultSoundClassName; // 0x38 (24)
	struct Unknown DefaultMediaSoundClassName; // 0x50 (24)
	struct Unknown DefaultSoundConcurrencyName; // 0x68 (24)
	struct Unknown DefaultBaseSoundMix; // 0x80 (24)
	struct Unknown VoiPSoundClass; // 0x98 (24)
	struct Unknown MasterSubmix; // 0xB0 (24)
	struct Unknown ReverbSubmix; // 0xC8 (24)
	struct Unknown EQSubmix; // 0xE0 (24)
	enum class Unknow VoiPSampleRate; // 0xF8 (4)
	float DefaultReverbSendLevel; // 0xFC (4)
	int32_t MaximumConcurrentStreams; // 0x100 (4)
	float GlobalMinPitchScale; // 0x104 (4)
	float GlobalMaxPitchScale; // 0x108 (4)
	struct TArray<Unknown> QualityLevels; // 0x110 (16)
	char bAllowPlayWhenSilent : 0; // 0x120 (1)
	char bDisableMasterEQ : 0; // 0x120 (1)
	char bAllowCenterChannel3DPanning : 0; // 0x120 (1)
	uint32_t NumStoppingSources; // 0x124 (4)
	enum class Unknow PanningMethod; // 0x128 (1)
	enum class Unknow MonoChannelUpmixMethod; // 0x129 (1)
	struct FString DialogueFilenameFormat; // 0x130 (16)
};

// Class Engine.AudioVolume
class AAudioVolume : public AVolume {

public:

	float Priority; // 0x350 (4)
	char bEnabled : 0; // 0x354 (1)
	struct Unknown Settings; // 0x358 (32)
	struct Unknown AmbientZoneSettings; // 0x378 (36)

	void SetReverbSettings(struct Unknown& NewReverbSettings); // Function Engine.AudioVolume.SetReverbSettings(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x4460550>
	void SetPriority(float NewPriority); // Function Engine.AudioVolume.SetPriority(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44604D0>
	void SetInteriorSettings(struct Unknown& NewInteriorSettings); // Function Engine.AudioVolume.SetInteriorSettings(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x4460210>
	void SetEnabled(char bNewEnabled); // Function Engine.AudioVolume.SetEnabled(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445FFF0>
	void OnRep_bEnabled(); // Function Engine.AudioVolume.OnRep_bEnabled(Final|Native|Private) // <Game_BE.exe+0x445FE80>
};

// Class Engine.AutoDestroySubsystem
class UAutoDestroySubsystem : public UWorldSubsystem {

public:

	struct TArray<Unknown> ActorsToPoll; // 0x38 (16)

	void OnActorEndPlay(struct Unknown Actor, char EndPlayReason); // Function Engine.AutoDestroySubsystem.OnActorEndPlay(Final|Native|Private) // <Game_BE.exe+0x4466CE0>
};

// Class Engine.AutomationTestSettings
class UAutomationTestSettings : public Object {

public:

	struct TArray<Unknown> EngineTestModules; // 0x28 (16)
	struct TArray<Unknown> EditorTestModules; // 0x38 (16)
	struct Unknown AutomationTestmap; // 0x48 (24)
	struct TArray<Unknown> EditorPerformanceTestMaps; // 0x60 (16)
	struct TArray<Unknown> AssetsToOpen; // 0x70 (16)
	struct Unknown BuildPromotionTest; // 0x80 (496)
	struct Unknown MaterialEditorPromotionTest; // 0x270 (48)
	struct Unknown ParticleEditorPromotionTest; // 0x2A0 (16)
	struct Unknown BlueprintEditorPromotionTest; // 0x2B0 (48)
	struct TArray<Unknown> TestLevelFolders; // 0x2E0 (16)
	struct TArray<Unknown> ExternalTools; // 0x2F0 (16)
	struct TArray<Unknown> ImportExportTestDefinitions; // 0x300 (16)
	struct TArray<Unknown> LaunchOnSettings; // 0x310 (16)
	struct Unknown DefaultScreenshotResolution; // 0x320 (8)
};

// Class Engine.AvoidanceManager
class UAvoidanceManager : public Object {

public:

	float DefaultTimeToLive; // 0x30 (4)
	float LockTimeAfterAvoid; // 0x34 (4)
	float LockTimeAfterClean; // 0x38 (4)
	float DeltaTimeToPredict; // 0x3C (4)
	float ArtificialRadiusExpansion; // 0x40 (4)
	float TestHeightDifference; // 0x44 (4)
	float HeightCheckMargin; // 0x48 (4)

	char RegisterMovementComponent(struct Unknown MovementComp, float AvoidanceWeight); // Function Engine.AvoidanceManager.RegisterMovementComponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4466DA0>
	int32_t GetObjectCount(); // Function Engine.AvoidanceManager.GetObjectCount(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4466CB0>
	int32_t GetNewAvoidanceUID(); // Function Engine.AvoidanceManager.GetNewAvoidanceUID(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4466C80>
	struct Unknown GetAvoidanceVelocityForComponent(struct Unknown MovementComp); // Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4466BE0>
};

// Class Engine.BandwidthTestActor
class ABandwidthTestActor : public UActor {

public:

	struct Unknown BandwidthGenerator; // 0x318 (32)
};

// Class Engine.BillboardComponent
class UBillboardComponent : public UPrimitiveComponent {

public:

	struct Unknown Sprite; // 0x4A8 (8)
	char bIsScreenSizeScaled : 0; // 0x4B0 (1)
	float ScreenSize; // 0x4B4 (4)
	float U; // 0x4B8 (4)
	float UL; // 0x4BC (4)
	float V; // 0x4C0 (4)
	float VL; // 0x4C4 (4)

	void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetUV(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4467080>
	void SetSpriteAndUV(struct Unknown NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetSpriteAndUV(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4466F00>
	void SetSprite(struct Unknown NewSprite); // Function Engine.BillboardComponent.SetSprite(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4466E70>
};

// Class Engine.Skeleton
class USkeleton : public Object {

public:

	struct TArray<Unknown> BoneTree; // 0x2F8 (16)
	struct TArray<Unknown> RefLocalPoses; // 0x1C0 (16)
	struct Unknown VirtualBoneGuid; // 0x280 (16)
	struct TArray<Unknown> VirtualBones; // 0x290 (16)
	struct TArray<Unknown> Sockets; // 0x1D0 (16)
	struct Unknown SmartNames; // 0x68 (80)
	struct TArray<Unknown> BlendProfiles; // 0x40 (16)
	struct TArray<Unknown> SlotGroups; // 0x308 (16)
	struct TArray<Unknown> AssetUserData; // 0x2D0 (16)
};

// Class Engine.BlendProfile
class UBlendProfile : public Object {

public:

	struct Unknown OwningSkeleton; // 0x38 (8)
	struct TArray<Unknown> ProfileEntries; // 0x48 (16)
};

// Class Engine.PlatformGameInstance
class UPlatformGameInstance : public UGameInstance {

public:

	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0x218 (16)
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0x228 (16)
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0x238 (16)
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0x248 (16)
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0x258 (16)
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x268 (16)
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x278 (16)
	struct FMulticastInlineDelegate ApplicationRegisteredForRemoteNotificationsDelegate; // 0x288 (16)
	struct FMulticastInlineDelegate ApplicationRegisteredForUserNotificationsDelegate; // 0x298 (16)
	struct FMulticastInlineDelegate ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x2A8 (16)
	struct FMulticastInlineDelegate ApplicationReceivedRemoteNotificationDelegate; // 0x2B8 (16)
	struct FMulticastInlineDelegate ApplicationReceivedLocalNotificationDelegate; // 0x2C8 (16)
	struct FMulticastInlineDelegate ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x2D8 (16)
};

// Class Engine.BodySetup
class UBodySetup : public Object {

public:

	struct Unknown AggGeom; // 0x28 (88)
	struct FName BoneName; // 0x80 (8)
	char PhysicsType; // 0x88 (1)
	char bAlwaysFullAnimWeight : 0; // 0x89 (1)
	char bConsiderForBounds : 0; // 0x89 (1)
	char bMeshCollideAll : 0; // 0x89 (1)
	char bDoubleSidedGeometry : 0; // 0x89 (1)
	char bGenerateNonMirroredCollision : 0; // 0x89 (1)
	char bSharedCookedData : 0; // 0x89 (1)
	char bGenerateMirroredCollision : 0; // 0x89 (1)
	char bSupportUVsAndFaceRemap : 0; // 0x89 (1)
	char CollisionReponse; // 0x8B (1)
	char CollisionTraceFlag; // 0x8C (1)
	struct Unknown PhysMaterial; // 0x90 (8)
	struct Unknown WalkableSlopeOverride; // 0x98 (16)
	struct Unknown DefaultInstance; // 0x120 (400)
	struct Unknown BuildScale3D; // 0x2B8 (12)
};

// Class Engine.BoneMaskFilter
class UBoneMaskFilter : public Object {

public:

	struct TArray<Unknown> BlendPoses; // 0x28 (16)
};

// Class Engine.BookMark
class UBookMark : public UBookmarkBase {

public:

	struct Unknown Location; // 0x28 (12)
	struct Unknown Rotation; // 0x34 (12)
	struct TArray<Unknown> HiddenLevels; // 0x40 (16)
};

// Class Engine.BookMark2D
class UBookMark2D : public UBookmarkBase {

public:

	float Zoom2D; // 0x28 (4)
	struct Unknown Location; // 0x2C (8)
};

// Class Engine.ReflectionCapture
class AReflectionCapture : public UActor {

public:

	struct Unknown CaptureComponent; // 0x318 (8)
};

// Class Engine.ReflectionCaptureComponent
class UReflectionCaptureComponent : public USceneComponent {

public:

	struct Unknown VisualizationMesh; // 0x228 (8)
	struct Unknown CaptureOffsetComponent; // 0x230 (8)
	enum class Unknow ReflectionSourceType; // 0x238 (1)
	struct Unknown Cubemap; // 0x240 (8)
	float SourceCubemapAngle; // 0x248 (4)
	float Brightness; // 0x24C (4)
	float DiffuseRadiance; // 0x250 (4)
	struct Unknown CaptureOffset; // 0x254 (12)
	struct Unknown MapBuildDataId; // 0x260 (16)
};

// Class Engine.BoxReflectionCaptureComponent
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent {

public:

	float BoxTransitionDistance; // 0x2B0 (4)
	struct Unknown PreviewInfluenceBox; // 0x2B8 (8)
	struct Unknown PreviewCaptureBox; // 0x2C0 (8)
};

// Class Engine.Breakpoint
class UBreakpoint : public Object {

public:

	char bEnabled : 0; // 0x28 (1)
	struct Unknown Node; // 0x30 (8)
	char bStepOnce : 0; // 0x38 (1)
	char bStepOnce_WasPreviouslyDisabled : 0; // 0x38 (1)
	char bStepOnce_RemoveAfterHit : 0; // 0x38 (1)
};

// Class Engine.BrushBuilder
class UBrushBuilder : public Object {

public:

	struct FString BitmapFilename; // 0x28 (16)
	struct FString Tooltip; // 0x38 (16)
	char NotifyBadParams : 0; // 0x48 (1)
	struct TArray<Unknown> Vertices; // 0x50 (16)
	struct TArray<Unknown> Polys; // 0x60 (16)
	struct FName Layer; // 0x70 (8)
	char MergeCoplanars : 0; // 0x78 (1)
};

// Class Engine.BrushComponent
class UBrushComponent : public UPrimitiveComponent {

public:

	struct Unknown Brush; // 0x4A8 (8)
	struct Unknown BrushBodySetup; // 0x4B0 (8)
};

// Class Engine.ButtonStyleAsset
class UButtonStyleAsset : public Object {

public:

	struct Unknown ButtonStyle; // 0x28 (632)
};

// Class Engine.CameraAnim
class UCameraAnim : public Object {

public:

	struct Unknown CameraInterpGroup; // 0x28 (8)
	float AnimLength; // 0x30 (4)
	struct Unknown BoundingBox; // 0x34 (28)
	char bRelativeToInitialTransform : 0; // 0x50 (1)
	char bRelativeToInitialFOV : 0; // 0x50 (1)
	float BaseFOV; // 0x54 (4)
	struct Unknown BasePostProcessSettings; // 0x60 (1472)
	float BasePostProcessBlendWeight; // 0x620 (4)
};

// Class Engine.CameraAnimInst
class UCameraAnimInst : public Object {

public:

	struct Unknown CamAnim; // 0x28 (8)
	struct Unknown InterpGroupInst; // 0x30 (8)
	float PlayRate; // 0x50 (4)
	struct Unknown MoveTrack; // 0x68 (8)
	struct Unknown MoveInst; // 0x70 (8)
	char PlaySpace; // 0x78 (1)

	void Stop(char bImmediate); // Function Engine.CameraAnimInst.Stop(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4479230>
	void SetScale(float NewDuration); // Function Engine.CameraAnimInst.SetScale(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4479120>
	void SetDuration(float NewDuration); // Function Engine.CameraAnimInst.SetDuration(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4478DA0>
};

// Class Engine.CameraModifier_CameraShake
class UCameraModifier_CameraShake : public UCameraModifier {

public:

	struct TArray<Unknown> ActiveShakes; // 0x48 (16)
	struct TMap<Unknown, Unknown> ExpiredPooledShakesMap; // 0x58 (80)
	float SplitScreenShakeScale; // 0xA8 (4)
};

// Class Engine.CameraShake
class UCameraShake : public Object {

public:

	char bSingleInstance : 0; // 0x28 (1)
	float OscillationDuration; // 0x2C (4)
	float OscillationBlendInTime; // 0x30 (4)
	float OscillationBlendOutTime; // 0x34 (4)
	struct Unknown RotOscillation; // 0x38 (36)
	struct Unknown LocOscillation; // 0x5C (36)
	struct Unknown FOVOscillation; // 0x80 (12)
	float AnimPlayRate; // 0x8C (4)
	float AnimScale; // 0x90 (4)
	float AnimBlendInTime; // 0x94 (4)
	float AnimBlendOutTime; // 0x98 (4)
	float RandomAnimSegmentDuration; // 0x9C (4)
	struct Unknown Anim; // 0xA0 (8)
	char bRandomAnimSegment : 0; // 0xA8 (1)
	struct Unknown CameraOwner; // 0xC0 (8)
	float ShakeScale; // 0x148 (4)
	float OscillatorTimeRemaining; // 0x14C (4)
	struct Unknown AnimInst; // 0x150 (8)

	void ReceiveStopShake(char bImmediately); // Function Engine.CameraShake.ReceiveStopShake(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceivePlayShake(float Scale); // Function Engine.CameraShake.ReceivePlayShake(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	char ReceiveIsFinished(); // Function Engine.CameraShake.ReceiveIsFinished(Native|Event|Public|BlueprintEvent|Const) // <Game_BE.exe+0x1784070>
	void BlueprintUpdateCameraShake(float DeltaTime, float ALPHA, struct Unknown& POV, struct Unknown& ModifiedPOV); // Function Engine.CameraShake.BlueprintUpdateCameraShake(Event|Public|HasOutParms|BlueprintEvent) // <Game_BE.exe+0x2B80160>
};

// Class Engine.CameraShakeSourceActor
class ACameraShakeSourceActor : public UActor {

public:

	struct Unknown CameraShakeSourceComponent; // 0x318 (8)
};

// Class Engine.CameraShakeSourceComponent
class UCameraShakeSourceComponent : public USceneComponent {

public:

	enum class Unknow Attenuation; // 0x228 (1)
	float InnerAttenuationRadius; // 0x22C (4)
	float OuterAttenuationRadius; // 0x230 (4)
	struct Unknown* CameraShake; // 0x238 (8)
	char bAutoPlay : 0; // 0x240 (1)

	void StopAllCameraShakes(char bImmediately); // Function Engine.CameraShakeSourceComponent.StopAllCameraShakes(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x447D740>
	void PlayCameraShake(struct Unknown* InCameraShake); // Function Engine.CameraShakeSourceComponent.PlayCameraShake(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x447D6C0>
	void Play(); // Function Engine.CameraShakeSourceComponent.Play(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x447D6A0>
	float GetAttenuationFactor(struct Unknown& Location); // Function Engine.CameraShakeSourceComponent.GetAttenuationFactor(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x447BF20>
};

// Class Engine.Canvas
class UCanvas : public Object {

public:

	float OrgX; // 0x28 (4)
	float OrgY; // 0x2C (4)
	float ClipX; // 0x30 (4)
	float ClipY; // 0x34 (4)
	struct Unknown DrawColor; // 0x38 (4)
	char bCenterX : 0; // 0x3C (1)
	char bCenterY : 0; // 0x3C (1)
	char bNoSmooth : 0; // 0x3C (1)
	int32_t SizeX; // 0x40 (4)
	int32_t SizeY; // 0x44 (4)
	struct Unknown ColorModulate; // 0x50 (16)
	struct Unknown DefaultTexture; // 0x60 (8)
	struct Unknown GradientTexture0; // 0x68 (8)
	struct Unknown ReporterGraph; // 0x70 (8)

	struct Unknown K2_TextSize(struct Unknown RenderFont, struct FString RenderText, struct Unknown Scale); // Function Engine.Canvas.K2_TextSize(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x447D570>
	struct Unknown K2_StrLen(struct Unknown RenderFont, struct FString RenderText); // Function Engine.Canvas.K2_StrLen(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x447D480>
	struct Unknown K2_Project(struct Unknown WorldLocation); // Function Engine.Canvas.K2_Project(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x447D3D0>
	void K2_DrawTriangle(struct Unknown RenderTexture, struct TArray<Unknown> Triangles); // Function Engine.Canvas.K2_DrawTriangle(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x447D2B0>
	void K2_DrawTexture(struct Unknown RenderTexture, struct Unknown ScreenPosition, struct Unknown ScreenSize, struct Unknown CoordinatePosition, struct Unknown CoordinateSize, struct Unknown RenderColor, char BlendMode, float Rotation, struct Unknown PivotPoint); // Function Engine.Canvas.K2_DrawTexture(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x447D030>
	void K2_DrawText(struct Unknown RenderFont, struct FString RenderText, struct Unknown ScreenPosition, struct Unknown Scale, struct Unknown RenderColor, float Kerning, struct Unknown ShadowColor, struct Unknown ShadowOffset, char bCentreX, char bCentreY, char bOutlined, struct Unknown OutlineColor); // Function Engine.Canvas.K2_DrawText(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x447CC90>
	void K2_DrawPolygon(struct Unknown RenderTexture, struct Unknown ScreenPosition, struct Unknown Radius, int32_t NumberOfSides, struct Unknown RenderColor); // Function Engine.Canvas.K2_DrawPolygon(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x447CB00>
	void K2_DrawMaterialTriangle(struct Unknown RenderMaterial, struct TArray<Unknown> Triangles); // Function Engine.Canvas.K2_DrawMaterialTriangle(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x447C9E0>
	void K2_DrawMaterial(struct Unknown RenderMaterial, struct Unknown ScreenPosition, struct Unknown ScreenSize, struct Unknown CoordinatePosition, struct Unknown CoordinateSize, float Rotation, struct Unknown PivotPoint); // Function Engine.Canvas.K2_DrawMaterial(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x447C7C0>
	void K2_DrawLine(struct Unknown ScreenPositionA, struct Unknown ScreenPositionB, float Thickness, struct Unknown RenderColor); // Function Engine.Canvas.K2_DrawLine(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x447C670>
	void K2_DrawBox(struct Unknown ScreenPosition, struct Unknown ScreenSize, float Thickness, struct Unknown RenderColor); // Function Engine.Canvas.K2_DrawBox(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x447C520>
	void K2_DrawBorder(struct Unknown BorderTexture, struct Unknown BackgroundTexture, struct Unknown LeftBorderTexture, struct Unknown RightBorderTexture, struct Unknown TopBorderTexture, struct Unknown BottomBorderTexture, struct Unknown ScreenPosition, struct Unknown ScreenSize, struct Unknown CoordinatePosition, struct Unknown CoordinateSize, struct Unknown RenderColor, struct Unknown BorderScale, struct Unknown BackgroundScale, float Rotation, struct Unknown PivotPoint, struct Unknown CornerSize); // Function Engine.Canvas.K2_DrawBorder(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x447C0E0>
	void K2_Deproject(struct Unknown ScreenPosition, struct Unknown& WorldOrigin, struct Unknown& WorldDirection); // Function Engine.Canvas.K2_Deproject(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x447BFC0>
};

// Class Engine.TextureRenderTarget
class UTextureRenderTarget : public UTexture {

public:

	float TargetGamma; // 0xB8 (4)
};

// Class Engine.TextureRenderTarget2D
class UTextureRenderTarget2D : public UTextureRenderTarget {

public:

	int32_t SizeX; // 0xC0 (4)
	int32_t SizeY; // 0xC4 (4)
	struct Unknown ClearColor; // 0xC8 (16)
	char AddressX; // 0xD8 (1)
	char AddressY; // 0xD9 (1)
	char bForceLinearGamma : 0; // 0xDA (1)
	char bHDR : 0; // 0xDA (1)
	char bGPUSharedFlag : 0; // 0xDA (1)
	char RenderTargetFormat; // 0xDB (1)
	char bAutoGenerateMips : 0; // 0xDC (1)
	char MipsSamplerFilter; // 0xDD (1)
	char MipsAddressU; // 0xDE (1)
	char MipsAddressV; // 0xDF (1)
	char OverrideFormat; // 0xE0 (1)
};

// Class Engine.CanvasRenderTarget2D
class UCanvasRenderTarget2D : public UTextureRenderTarget2D {

public:

	struct FMulticastInlineDelegate OnCanvasRenderTargetUpdate; // 0xE8 (16)
	struct TWeakObjectPtr<struct Unknown> World; // 0xF8 (8)
	char bShouldClearRenderTargetOnReceiveUpdate : 0; // 0x100 (1)

	void UpdateResource(); // Function Engine.CanvasRenderTarget2D.UpdateResource(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44848C0>
	void ReceiveUpdate(struct Unknown Canvas, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.ReceiveUpdate(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void GetSize(int32_t& Width, int32_t& Height); // Function Engine.CanvasRenderTarget2D.GetSize(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x44826D0>
	struct Unknown CreateCanvasRenderTarget2D(struct Unknown WorldContextObject, struct Unknown* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D(Final|Native|Static|Public|BlueprintCallable) // <Game_BE.exe+0x4482190>
};

// Class Engine.ChaosPhysicalMaterial
class UChaosPhysicalMaterial : public Object {

public:

	float Friction; // 0x28 (4)
	float StaticFriction; // 0x2C (4)
	float Restitution; // 0x30 (4)
	float LinearEtherDrag; // 0x34 (4)
	float AngularEtherDrag; // 0x38 (4)
	float SleepingLinearVelocityThreshold; // 0x3C (4)
	float SleepingAngularVelocityThreshold; // 0x40 (4)
};

// Class Engine.CheckBoxStyleAsset
class UCheckBoxStyleAsset : public Object {

public:

	struct Unknown CheckBoxStyle; // 0x28 (1408)
};

// Class Engine.ChildActorComponent
class UChildActorComponent : public USceneComponent {

public:

	struct Unknown* ChildActorClass; // 0x228 (8)
	struct Unknown ChildActor; // 0x230 (8)
	struct Unknown ChildActorTemplate; // 0x238 (8)

	void SetChildActorClass(struct Unknown* InClass); // Function Engine.ChildActorComponent.SetChildActorClass(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x448BF10>
};

// Class Engine.ChildConnection
class UChildConnection : public UNetConnection {

public:

	struct Unknown Parent; // 0x1AA0 (8)
};

// Class Engine.PlatformInterfaceBase
class UPlatformInterfaceBase : public Object {

public:

	struct TArray<Unknown> AllDelegates; // 0x28 (16)
};

// Class Engine.CloudStorageBase
class UCloudStorageBase : public UPlatformInterfaceBase {

public:

	struct TArray<Unknown> LocalCloudFiles; // 0x38 (16)
	char bSuppressDelegateCalls : 0; // 0x48 (1)
};

// Class Engine.CollisionProfile
class UCollisionProfile : public UDeveloperSettings {

public:

	struct TArray<Unknown> Profiles; // 0x38 (16)
	struct TArray<Unknown> DefaultChannelResponses; // 0x48 (16)
	struct TArray<Unknown> EditProfiles; // 0x58 (16)
	struct TArray<Unknown> ProfileRedirects; // 0x68 (16)
	struct TArray<Unknown> CollisionChannelRedirects; // 0x78 (16)
};

// Class Engine.ComponentDelegateBinding
class UComponentDelegateBinding : public UDynamicBlueprintBinding {

public:

	struct TArray<Unknown> ComponentDelegateBindings; // 0x28 (16)
};

// Class Engine.CompositeCurveTable
class UCompositeCurveTable : public UCurveTable {

public:

	struct TArray<Unknown> ParentTables; // 0xA0 (16)
	struct TArray<Unknown> OldParentTables; // 0xB0 (16)
};

// Class Engine.DataTable
class UDataTable : public Object {

public:

	struct Unknown RowStruct; // 0x28 (8)
	char bStripFromClientBuilds : 0; // 0x80 (1)
	char bIgnoreExtraFields : 0; // 0x80 (1)
	char bIgnoreMissingFields : 0; // 0x80 (1)
	struct FString ImportKeyField; // 0x88 (16)
};

// Class Engine.CompositeDataTable
class UCompositeDataTable : public UDataTable {

public:

	struct TArray<Unknown> ParentTables; // 0xC8 (16)
	struct TArray<Unknown> OldParentTables; // 0xD8 (16)
};

// Class Engine.Console
class UConsole : public Object {

public:

	struct Unknown ConsoleTargetPlayer; // 0x38 (8)
	struct Unknown DefaultTexture_Black; // 0x40 (8)
	struct Unknown DefaultTexture_White; // 0x48 (8)
	struct TArray<Unknown> HistoryBuffer; // 0x68 (16)
};

// Class Engine.StreamingSettings
class UStreamingSettings : public UDeveloperSettings {

public:

	char AsyncLoadingThreadEnabled : 0; // 0x38 (1)
	char AsyncPostLoadEnabled : 0; // 0x38 (1)
	char WarnIfTimeLimitExceeded : 0; // 0x38 (1)
	float TimeLimitExceededMultiplier; // 0x3C (4)
	float TimeLimitExceededMinTime; // 0x40 (4)
	int32_t MinBulkDataSizeForAsyncLoading; // 0x44 (4)
	char UseBackgroundLevelStreaming : 0; // 0x48 (1)
	char AsyncLoadingUseFullTimeLimit : 0; // 0x48 (1)
	float AsyncLoadingTimeLimit; // 0x4C (4)
	float PriorityAsyncLoadingExtraTime; // 0x50 (4)
	float LevelStreamingActorsUpdateTimeLimit; // 0x54 (4)
	float PriorityLevelStreamingActorsUpdateExtraTime; // 0x58 (4)
	int32_t LevelStreamingComponentsRegistrationGranularity; // 0x5C (4)
	float LevelStreamingUnregisterComponentsTimeLimit; // 0x60 (4)
	int32_t LevelStreamingComponentsUnregistrationGranularity; // 0x64 (4)
	char FlushStreamingOnExit : 0; // 0x68 (1)
	char EventDrivenLoaderEnabled : 0; // 0x68 (1)
};

// Class Engine.GarbageCollectionSettings
class UGarbageCollectionSettings : public UDeveloperSettings {

public:

	float TimeBetweenPurgingPendingKillObjects; // 0x38 (4)
	char FlushStreamingOnGC : 0; // 0x3C (1)
	char AllowParallelGC : 0; // 0x3C (1)
	char IncrementalBeginDestroyEnabled : 0; // 0x3C (1)
	char MultithreadedDestructionEnabled : 0; // 0x3C (1)
	char CreateGCClusters : 0; // 0x3C (1)
	char AssetClusteringEnabled : 0; // 0x3C (1)
	char ActorClusteringEnabled : 0; // 0x3C (1)
	char BlueprintClusteringEnabled : 0; // 0x3C (1)
	char UseDisregardForGCOnDedicatedServers : 0; // 0x3D (1)
	int32_t MinGCClusterSize; // 0x40 (4)
	int32_t NumRetriesBeforeForcingGC; // 0x44 (4)
	int32_t MaxObjectsNotConsideredByGC; // 0x48 (4)
	int32_t SizeOfPermanentObjectPool; // 0x4C (4)
	int32_t MaxObjectsInGame; // 0x50 (4)
	int32_t MaxObjectsInEditor; // 0x54 (4)
};

// Class Engine.CullDistanceVolume
class ACullDistanceVolume : public AVolume {

public:

	struct TArray<Unknown> CullDistances; // 0x350 (16)
	char bEnabled : 0; // 0x360 (1)
};

// Class Engine.CurveFloat
class UCurveFloat : public UCurveBase {

public:

	struct Unknown FloatCurve; // 0x30 (128)
	char bIsEventCurve : 0; // 0xB0 (1)

	float GetFloatValue(float InTime); // Function Engine.CurveFloat.GetFloatValue(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44943B0>
};

// Class Engine.CurveLinearColor
class UCurveLinearColor : public UCurveBase {

public:

	struct Unknown FloatCurves[0x4]; // 0x30 (512)
	float AdjustHue; // 0x230 (4)
	float AdjustSaturation; // 0x234 (4)
	float AdjustBrightness; // 0x238 (4)
	float AdjustBrightnessCurve; // 0x23C (4)
	float AdjustVibrance; // 0x240 (4)
	float AdjustMinAlpha; // 0x244 (4)
	float AdjustMaxAlpha; // 0x248 (4)

	struct Unknown GetLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetLinearColorValue(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4494440>
	struct Unknown GetClampedLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetClampedLinearColorValue(Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4493A40>
};

// Class Engine.Texture2D
class UTexture2D : public UTexture {

public:

	int32_t LevelIndex; // 0xB8 (4)
	int32_t FirstResourceMemMip; // 0xBC (4)
	char bTemporarilyDisableStreaming : 0; // 0xC0 (1)
	char AddressX; // 0xC1 (1)
	char AddressY; // 0xC2 (1)
	struct Unknown ImportedSize; // 0xC4 (8)

	int32_t Blueprint_GetSizeY(); // Function Engine.Texture2D.Blueprint_GetSizeY(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1C60>
	int32_t Blueprint_GetSizeX(); // Function Engine.Texture2D.Blueprint_GetSizeX(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1C30>
};

// Class Engine.CurveLinearColorAtlas
class UCurveLinearColorAtlas : public UTexture2D {

public:

	uint32_t TextureSize; // 0xE8 (4)
	struct TArray<Unknown> GradientCurves; // 0xF0 (16)

	char GetCurvePosition(struct Unknown InCurve, float& Position); // Function Engine.CurveLinearColorAtlas.GetCurvePosition(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x4493AE0>
};

// Class Engine.CurveVector
class UCurveVector : public UCurveBase {

public:

	struct Unknown FloatCurves[0x3]; // 0x30 (384)

	struct Unknown GetVectorValue(float InTime); // Function Engine.CurveVector.GetVectorValue(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44946D0>
};

// Class Engine.DebugCameraController
class ADebugCameraController : public APlayerController {

public:

	char bShowSelectedInfo : 0; // 0x700 (1)
	char bIsFrozenRendering : 0; // 0x700 (1)
	char bOverrideInitialMaxSpeed : 0; // 0x700 (1)
	float OverrideInitialMaxSpeed; // 0x704 (4)
	char bIsOrbitingSelectedActor : 0; // 0x708 (1)
	char bOrbitPivotUseCenter : 0; // 0x708 (1)
	char bEnableBufferVisualization : 0; // 0x708 (1)
	char bEnableBufferVisualizationFullMode : 0; // 0x708 (1)
	char bIsBufferVisualizationInputSetup : 0; // 0x708 (1)
	char bLastDisplayEnabled : 0; // 0x708 (1)
	struct Unknown DrawFrustum; // 0x710 (8)
	struct Unknown SelectedActor; // 0x718 (8)
	struct Unknown SelectedComponent; // 0x720 (8)
	struct Unknown SelectedHitPoint; // 0x728 (136)
	struct Unknown OriginalControllerRef; // 0x7B0 (8)
	struct Unknown OriginalPlayer; // 0x7B8 (8)
	float SpeedScale; // 0x7C0 (4)
	float InitialMaxSpeed; // 0x7C4 (4)
	float InitialAccel; // 0x7C8 (4)
	float InitialDecel; // 0x7CC (4)

	void ToggleDisplay(); // Function Engine.DebugCameraController.ToggleDisplay(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4494810>
	void ShowDebugSelectedInfo(); // Function Engine.DebugCameraController.ShowDebugSelectedInfo(Exec|Native|Public) // <Game_BE.exe+0x44947F0>
	void SetPawnMovementSpeedScale(float NewSpeedScale); // Function Engine.DebugCameraController.SetPawnMovementSpeedScale(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4494770>
	void ReceiveOnDeactivate(struct Unknown RestoredPC); // Function Engine.DebugCameraController.ReceiveOnDeactivate(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveOnActorSelected(struct Unknown NewSelectedActor, struct Unknown& SelectHitLocation, struct Unknown& SelectHitNormal, struct Unknown& Hit); // Function Engine.DebugCameraController.ReceiveOnActorSelected(Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	void ReceiveOnActivate(struct Unknown OriginalPC); // Function Engine.DebugCameraController.ReceiveOnActivate(Event|Public|BlueprintEvent) // <Game_BE.exe+0x2B80160>
	struct Unknown GetSelectedActor(); // Function Engine.DebugCameraController.GetSelectedActor(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44944E0>
};

// Class Engine.DebugCameraControllerSettings
class UDebugCameraControllerSettings : public UDeveloperSettings {

public:

	struct TArray<Unknown> CycleViewModes; // 0x38 (16)
};

// Class Engine.DecalActor
class ADecalActor : public UActor {

public:

	struct Unknown Decal; // 0x318 (8)

	void SetDecalMaterial(struct Unknown NewDecalMaterial); // Function Engine.DecalActor.SetDecalMaterial(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498480>
	struct Unknown GetDecalMaterial(); // Function Engine.DecalActor.GetDecalMaterial(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4498060>
	struct Unknown CreateDynamicMaterialInstance(); // Function Engine.DecalActor.CreateDynamicMaterialInstance(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498000>
};

// Class Engine.DecalComponent
class UDecalComponent : public USceneComponent {

public:

	struct Unknown DecalMaterial; // 0x228 (8)
	int32_t SortOrder; // 0x230 (4)
	float FadeScreenSize; // 0x234 (4)
	float FadeStartDelay; // 0x238 (4)
	float FadeDuration; // 0x23C (4)
	float FadeInDuration; // 0x240 (4)
	float FadeInStartDelay; // 0x244 (4)
	char bDestroyOwnerAfterFade : 0; // 0x248 (1)
	struct Unknown DecalSize; // 0x24C (12)

	void SetSortOrder(int32_t Value); // Function Engine.DecalComponent.SetSortOrder(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498BF0>
	void SetFadeScreenSize(float NewFadeScreenSize); // Function Engine.DecalComponent.SetFadeScreenSize(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498960>
	void SetFadeOut(float StartDelay, float Duration, char DestroyOwnerAfterFade); // Function Engine.DecalComponent.SetFadeOut(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498850>
	void SetFadeIn(float StartDelay, float Duaration); // Function Engine.DecalComponent.SetFadeIn(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498790>
	void SetDecalMaterial(struct Unknown NewDecalMaterial); // Function Engine.DecalComponent.SetDecalMaterial(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498500>
	float GetFadeStartDelay(); // Function Engine.DecalComponent.GetFadeStartDelay(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4498150>
	float GetFadeInStartDelay(); // Function Engine.DecalComponent.GetFadeInStartDelay(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4498120>
	float GetFadeInDuration(); // Function Engine.DecalComponent.GetFadeInDuration(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44980F0>
	float GetFadeDuration(); // Function Engine.DecalComponent.GetFadeDuration(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44980C0>
	struct Unknown GetDecalMaterial(); // Function Engine.DecalComponent.GetDecalMaterial(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4498090>
	struct Unknown CreateDynamicMaterialInstance(); // Function Engine.DecalComponent.CreateDynamicMaterialInstance(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498030>
};

// Class Engine.MKDemoNetConnectionEx
class UMKDemoNetConnectionEx : public UNetConnection {

public:

	struct Unknown SelfDemoNetConnection; // 0x1BE8 (8)
};

// Class Engine.PendingNetGame
class UPendingNetGame : public Object {

public:

	struct Unknown NetDriver; // 0x30 (8)
	struct Unknown DemoNetDriver; // 0x38 (8)
};

// Class Engine.TextureLODSettings
class UTextureLODSettings : public Object {

public:

	struct TArray<Unknown> TextureLODGroups; // 0x28 (16)
};

// Class Engine.DeviceProfile
class UDeviceProfile : public UTextureLODSettings {

public:

	struct FString DeviceType; // 0x38 (16)
	struct FString BaseProfileName; // 0x48 (16)
	struct Unknown Parent; // 0x58 (8)
	struct TArray<Unknown> CVars; // 0x78 (16)
};

// Class Engine.DeviceProfileManager
class UDeviceProfileManager : public Object {

public:

	struct TArray<Unknown> Profiles; // 0x28 (16)
};

// Class Engine.DialogueVoice
class UDialogueVoice : public Object {

public:

	enum class None gender; // 0x28 (1)
	char Plurality; // 0x29 (1)
	struct Unknown LocalizationGUID; // 0x2C (16)
};

// Class Engine.DialogueWave
class UDialogueWave : public Object {

public:

	char bMature : 0; // 0x28 (1)
	char bOverride_SubtitleOverride : 0; // 0x28 (1)
	struct FString SpokenText; // 0x30 (16)
	struct FString SubtitleOverride; // 0x40 (16)
	struct TArray<Unknown> ContextMappings; // 0x50 (16)
	struct Unknown LocalizationGUID; // 0x60 (16)
};

// Class Engine.Light
class ALight : public UActor {

public:

	struct Unknown LightComponent; // 0x318 (8)
	char bEnabled : 0; // 0x320 (1)

	void ToggleEnabled(); // Function Engine.Light.ToggleEnabled(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453DA50>
	void SetLightFunctionScale(struct Unknown NewLightFunctionScale); // Function Engine.Light.SetLightFunctionScale(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x453D2E0>
	void SetLightFunctionMaterial(struct Unknown NewLightFunctionMaterial); // Function Engine.Light.SetLightFunctionMaterial(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D1E0>
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.Light.SetLightFunctionFadeDistance(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D0E0>
	void SetLightColor(struct Unknown NewLightColor); // Function Engine.Light.SetLightColor(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x453CF10>
	void SetEnabled(char bSetEnabled); // Function Engine.Light.SetEnabled(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453CB70>
	void SetCastShadows(char bNewValue); // Function Engine.Light.SetCastShadows(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453C890>
	void SetBrightness(float NewBrightness); // Function Engine.Light.SetBrightness(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453C810>
	void SetAffectTranslucentLighting(char bNewValue); // Function Engine.Light.SetAffectTranslucentLighting(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453C500>
	void OnRep_bEnabled(); // Function Engine.Light.OnRep_bEnabled(Native|Public) // <Game_BE.exe+0x1E71820>
	char IsEnabled(); // Function Engine.Light.IsEnabled(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x453BED0>
	struct Unknown GetLightColor(); // Function Engine.Light.GetLightColor(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x453BE30>
	float GetBrightness(); // Function Engine.Light.GetBrightness(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x453BDD0>
};

// Class Engine.LightComponentBase
class ULightComponentBase : public USceneComponent {

public:

	struct Unknown LightGuid; // 0x228 (16)
	float Brightness; // 0x238 (4)
	float Intensity; // 0x23C (4)
	struct Unknown LightColor; // 0x240 (4)
	char bAffectsWorld : 0; // 0x244 (1)
	char CastShadows : 0; // 0x244 (1)
	char CastStaticShadows : 0; // 0x244 (1)
	char CastDynamicShadows : 0; // 0x244 (1)
	char bAffectTranslucentLighting : 0; // 0x244 (1)
	char bTransmission : 0; // 0x244 (1)
	char bCastVolumetricShadow : 0; // 0x244 (1)
	char bCastDeepShadow : 0; // 0x244 (1)
	char bCastRaytracedShadow : 0; // 0x245 (1)
	char bAffectReflection : 0; // 0x245 (1)
	char bAffectGlobalIllumination : 0; // 0x245 (1)
	float IndirectLightingIntensity; // 0x248 (4)
	float VolumetricScatteringIntensity; // 0x24C (4)
	float VolumetricAttenuationScale; // 0x250 (4)
	float VolumetricSourceRadiusScale; // 0x254 (4)
	int32_t SamplesPerPixel; // 0x258 (4)

	void SetSamplesPerPixel(int32_t NewValue); // Function Engine.LightComponentBase.SetSamplesPerPixel(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45406C0>
	void SetCastVolumetricShadow(char bNewValue); // Function Engine.LightComponentBase.SetCastVolumetricShadow(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45405B0>
	void SetCastShadows(char bNewValue); // Function Engine.LightComponentBase.SetCastShadows(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4540520>
	void SetCastRaytracedShadow(char bNewValue); // Function Engine.LightComponentBase.SetCastRaytracedShadow(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4540490>
	void SetCastDeepShadow(char bNewValue); // Function Engine.LightComponentBase.SetCastDeepShadow(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4540400>
	void SetAffectReflection(char bNewValue); // Function Engine.LightComponentBase.SetAffectReflection(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45402F0>
	void SetAffectGlobalIllumination(char bNewValue); // Function Engine.LightComponentBase.SetAffectGlobalIllumination(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4540260>
	struct Unknown GetLightColor(); // Function Engine.LightComponentBase.GetLightColor(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4540120>
};

// Class Engine.LightComponent
class ULightComponent : public ULightComponentBase {

public:

	float Temperature; // 0x260 (4)
	float MaxDrawDistance; // 0x264 (4)
	float MaxDistanceFadeRange; // 0x268 (4)
	char bUseTemperature : 0; // 0x26C (1)
	int32_t ShadowMapChannel; // 0x270 (4)
	float MinRoughness; // 0x278 (4)
	float SpecularScale; // 0x27C (4)
	float ShadowResolutionScale; // 0x280 (4)
	float ShadowBias; // 0x284 (4)
	float ShadowSlopeBias; // 0x288 (4)
	float ShadowSharpen; // 0x28C (4)
	float ContactShadowLength; // 0x290 (4)
	char ContactShadowLengthInWS : 0; // 0x294 (1)
	float ContactShadowStartDistance; // 0x298 (4)
	float ContactShadowFadeDistance; // 0x29C (4)
	float ShadowStrength; // 0x2A0 (4)
	float TranslucentShadowDensity; // 0x2A4 (4)
	char InverseSquaredFalloff : 0; // 0x2A8 (1)
	char CastTranslucentShadows : 0; // 0x2A8 (1)
	char bCastShadowsFromCinematicObjectsOnly : 0; // 0x2A8 (1)
	char bAffectDynamicIndirectLighting : 0; // 0x2A8 (1)
	char bForceCachedShadowsFromMovablePrimitivesAsStatic : 0; // 0x2A8 (1)
	char bForceCachedShadowsForMovablePrimitives : 0; // 0x2A8 (1)
	struct Unknown LightingChannels; // 0x2AC (1)
	struct Unknown LightFunctionMaterial; // 0x2B0 (8)
	struct Unknown LightFunctionScale; // 0x2B8 (12)
	struct Unknown IESTexture; // 0x2C8 (8)
	char bUseIESBrightness : 0; // 0x2D0 (1)
	float IESBrightnessScale; // 0x2D4 (4)
	float LightFunctionFadeDistance; // 0x2D8 (4)
	float DisabledBrightness; // 0x2DC (4)
	char bEnableLightShaftBloom : 0; // 0x2E0 (1)
	float BloomScale; // 0x2E4 (4)
	float BloomThreshold; // 0x2E8 (4)
	float BloomMaxBrightness; // 0x2EC (4)
	struct Unknown BloomTint; // 0x2F0 (4)
	char bUseFoliageLighting : 0; // 0x2F4 (1)
	char bUseRayTracedDistanceFieldShadows : 0; // 0x2F5 (1)
	float RayStartOffsetDepthScale; // 0x2F8 (4)

	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.LightComponent.SetVolumetricScatteringIntensity(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D9D0>
	void SetUseIESBrightness(char bNewValue); // Function Engine.LightComponent.SetUseIESBrightness(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D940>
	void SetTransmission(char bNewValue); // Function Engine.LightComponent.SetTransmission(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D8B0>
	void SetTemperature(float NewTemperature); // Function Engine.LightComponent.SetTemperature(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D830>
	void SetSpecularScale(float NewValue); // Function Engine.LightComponent.SetSpecularScale(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D7B0>
	void SetShadowSlopeBias(float NewValue); // Function Engine.LightComponent.SetShadowSlopeBias(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D6A0>
	void SetShadowResolutionScale(float NewValue); // Function Engine.LightComponent.SetShadowResolutionScale(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D620>
	void SetShadowBias(float NewValue); // Function Engine.LightComponent.SetShadowBias(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D5A0>
	void SetLightingChannels(char bChannel0, char bChannel1, char bChannel2); // Function Engine.LightComponent.SetLightingChannels(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D400>
	void SetLightFunctionScale(struct Unknown NewLightFunctionScale); // Function Engine.LightComponent.SetLightFunctionScale(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x453D370>
	void SetLightFunctionMaterial(struct Unknown NewLightFunctionMaterial); // Function Engine.LightComponent.SetLightFunctionMaterial(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D260>
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.LightComponent.SetLightFunctionFadeDistance(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D160>
	void SetLightFunctionDisabledBrightness(float NewValue); // Function Engine.LightComponent.SetLightFunctionDisabledBrightness(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D060>
	void SetLightColor(struct Unknown NewLightColor, char bSRGB); // Function Engine.LightComponent.SetLightColor(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x453CF90>
	void SetIntensity(float NewIntensity); // Function Engine.LightComponent.SetIntensity(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453CE10>
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.LightComponent.SetIndirectLightingIntensity(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453CD90>
	void SetIESTexture(struct Unknown NewValue); // Function Engine.LightComponent.SetIESTexture(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453CD10>
	void SetIESBrightnessScale(float NewValue); // Function Engine.LightComponent.SetIESBrightnessScale(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453CC90>
	void SetForceCachedShadowsForMovablePrimitives(char bNewValue); // Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453CC00>
	void SetEnableLightShaftBloom(char bNewValue); // Function Engine.LightComponent.SetEnableLightShaftBloom(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453CAE0>
	void SetBloomTint(struct Unknown NewValue); // Function Engine.LightComponent.SetBloomTint(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x453C7A0>
	void SetBloomThreshold(float NewValue); // Function Engine.LightComponent.SetBloomThreshold(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453C720>
	void SetBloomScale(float NewValue); // Function Engine.LightComponent.SetBloomScale(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453C6A0>
	void SetBloomMaxBrightness(float NewValue); // Function Engine.LightComponent.SetBloomMaxBrightness(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453C620>
	void SetAffectTranslucentLighting(char bNewValue); // Function Engine.LightComponent.SetAffectTranslucentLighting(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453C590>
	void SetAffectDynamicIndirectLighting(char bNewValue); // Function Engine.LightComponent.SetAffectDynamicIndirectLighting(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453C470>
};

// Class Engine.DirectionalLightComponent
class UDirectionalLightComponent : public ULightComponent {

public:

	float ShadowCascadeBiasDistribution; // 0x370 (4)
	char bEnableLightShaftOcclusion : 0; // 0x374 (1)
	float OcclusionMaskDarkness; // 0x378 (4)
	float OcclusionDepthRange; // 0x37C (4)
	struct Unknown LightShaftOverrideDirection; // 0x380 (12)
	float WholeSceneDynamicShadowRadius; // 0x38C (4)
	float DynamicShadowDistanceMovableLight; // 0x390 (4)
	float DynamicShadowDistanceStationaryLight; // 0x394 (4)
	int32_t DynamicShadowCascades; // 0x398 (4)
	float CascadeDistributionExponent; // 0x39C (4)
	float CascadeTransitionFraction; // 0x3A0 (4)
	float ShadowDistanceFadeoutFraction; // 0x3A4 (4)
	char bUseInsetShadowsForMovableObjects : 0; // 0x3A8 (1)
	int32_t FarShadowCascadeCount; // 0x3AC (4)
	float FarShadowDistance; // 0x3B0 (4)
	char bUseFarShadowAsStaticWorldShadow : 0; // 0x3B4 (1)
	float DistanceFieldShadowDistance; // 0x3B8 (4)
	float LightSourceAngle; // 0x3BC (4)
	float LightSourceSoftAngle; // 0x3C0 (4)
	float TraceDistance; // 0x3C4 (4)
	struct Unknown LightmassSettings; // 0x3C8 (16)
	char bCastModulatedShadows : 0; // 0x3D8 (1)
	struct Unknown ModulatedShadowColor; // 0x3DC (4)
	float ShadowAmount; // 0x3E0 (4)
	char bUsedAsAtmosphereSunLight : 0; // 0x3E4 (1)
	int32_t AtmosphereSunLightIndex; // 0x3E8 (4)

	void SetShadowDistanceFadeoutFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498B70>
	void SetShadowAmount(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowAmount(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498AF0>
	void SetOcclusionMaskDarkness(float NewValue); // Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498A70>
	void SetLightShaftOverrideDirection(struct Unknown NewValue); // Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44989E0>
	void SetEnableLightShaftOcclusion(char bNewValue); // Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498700>
	void SetDynamicShadowDistanceStationaryLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498680>
	void SetDynamicShadowDistanceMovableLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498600>
	void SetDynamicShadowCascades(int32_t NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowCascades(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498580>
	void SetCascadeTransitionFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498400>
	void SetCascadeDistributionExponent(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4498380>
};

// Class Engine.DistributionFloat
class UDistributionFloat : public UDistribution {

public:

	char bCanBeBaked : 0; // 0x30 (1)
	char bBakedDataSuccesfully : 0; // 0x30 (1)
};

// Class Engine.DistributionFloatConstant
class UDistributionFloatConstant : public UDistributionFloat {

public:

	float Constant; // 0x38 (4)
};

// Class Engine.DistributionFloatConstantCurve
class UDistributionFloatConstantCurve : public UDistributionFloat {

public:

	struct Unknown ConstantCurve; // 0x38 (24)
};

// Class Engine.DistributionFloatParameterBase
class UDistributionFloatParameterBase : public UDistributionFloatConstant {

public:

	struct FName ParameterName; // 0x40 (8)
	float MinInput; // 0x48 (4)
	float MaxInput; // 0x4C (4)
	float MinOutput; // 0x50 (4)
	float MaxOutput; // 0x54 (4)
	char ParamMode; // 0x58 (1)
};

// Class Engine.DistributionFloatUniform
class UDistributionFloatUniform : public UDistributionFloat {

public:

	float Min; // 0x38 (4)
	float MAX; // 0x3C (4)
};

// Class Engine.DistributionFloatUniformCurve
class UDistributionFloatUniformCurve : public UDistributionFloat {

public:

	struct Unknown ConstantCurve; // 0x38 (24)
};

// Class Engine.DistributionVector
class UDistributionVector : public UDistribution {

public:

	char bCanBeBaked : 0; // 0x30 (1)
	char bIsDirty : 0; // 0x30 (1)
	char bBakedDataSuccesfully : 0; // 0x30 (1)
};

// Class Engine.DistributionVectorConstant
class UDistributionVectorConstant : public UDistributionVector {

public:

	struct Unknown Constant; // 0x38 (12)
	char bLockAxes : 0; // 0x44 (1)
	char LockedAxes; // 0x48 (1)
};

// Class Engine.DistributionVectorConstantCurve
class UDistributionVectorConstantCurve : public UDistributionVector {

public:

	struct Unknown ConstantCurve; // 0x38 (24)
	char bLockAxes : 0; // 0x50 (1)
	char LockedAxes; // 0x54 (1)
};

// Class Engine.DistributionVectorParameterBase
class UDistributionVectorParameterBase : public UDistributionVectorConstant {

public:

	struct FName ParameterName; // 0x50 (8)
	struct Unknown MinInput; // 0x58 (12)
	struct Unknown MaxInput; // 0x64 (12)
	struct Unknown MinOutput; // 0x70 (12)
	struct Unknown MaxOutput; // 0x7C (12)
	char ParamModes[0x3]; // 0x88 (3)
};

// Class Engine.DistributionVectorUniform
class UDistributionVectorUniform : public UDistributionVector {

public:

	struct Unknown MAX; // 0x38 (12)
	struct Unknown Min; // 0x44 (12)
	char bLockAxes : 0; // 0x50 (1)
	char LockedAxes; // 0x54 (1)
	char MirrorFlags[0x3]; // 0x55 (3)
	char bUseExtremes : 0; // 0x58 (1)
};

// Class Engine.DistributionVectorUniformCurve
class UDistributionVectorUniformCurve : public UDistributionVector {

public:

	struct Unknown ConstantCurve; // 0x38 (24)
	char bLockAxes1 : 0; // 0x50 (1)
	char bLockAxes2 : 0; // 0x50 (1)
	char LockedAxes[0x2]; // 0x54 (2)
	char MirrorFlags[0x3]; // 0x56 (3)
	char bUseExtremes : 0; // 0x5C (1)
};

// Class Engine.DrawFrustumComponent
class UDrawFrustumComponent : public UPrimitiveComponent {

public:

	struct Unknown FrustumColor; // 0x4A8 (4)
	float FrustumAngle; // 0x4AC (4)
	float FrustumAspectRatio; // 0x4B0 (4)
	float FrustumStartDist; // 0x4B4 (4)
	float FrustumEndDist; // 0x4B8 (4)
	struct Unknown Texture; // 0x4C0 (8)
};

// Class Engine.SphereComponent
class USphereComponent : public UShapeComponent {

public:

	float SphereRadius; // 0x4C0 (4)

	void SetSphereRadius(float InSphereRadius, char bUpdateOverlaps); // Function Engine.SphereComponent.SetSphereRadius(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45DFD00>
	float GetUnscaledSphereRadius(); // Function Engine.SphereComponent.GetUnscaledSphereRadius(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44827B0>
	float GetShapeScale(); // Function Engine.SphereComponent.GetShapeScale(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DE1E0>
	float GetScaledSphereRadius(); // Function Engine.SphereComponent.GetScaledSphereRadius(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45DE190>
};

// Class Engine.EdGraph
class UEdGraph : public Object {

public:

	struct Unknown* Schema; // 0x28 (8)
	struct TArray<Unknown> Nodes; // 0x30 (16)
	char bEditable : 0; // 0x40 (1)
	char bAllowDeletion : 0; // 0x40 (1)
	char bAllowRenaming : 0; // 0x40 (1)
};

// Class Engine.GraphNodeContextMenuContext
class UGraphNodeContextMenuContext : public Object {

public:

	struct Unknown Blueprint; // 0x28 (8)
	struct Unknown Graph; // 0x30 (8)
	struct Unknown Node; // 0x38 (8)
	char bIsDebugging : 0; // 0x48 (1)
};

// Class Engine.EdGraphNode
class UEdGraphNode : public Object {

public:

	struct TArray<Unknown> DeprecatedPins; // 0x38 (16)
	int32_t NodePosX; // 0x48 (4)
	int32_t NodePosY; // 0x4C (4)
	int32_t NodeWidth; // 0x50 (4)
	int32_t NodeHeight; // 0x54 (4)
	char AdvancedPinDisplay; // 0x58 (1)
	enum class Unknow EnabledState; // 0x59 (1)
	char bDisplayAsDisabled : 0; // 0x5B (1)
	char bUserSetEnabledState : 0; // 0x5B (1)
	char bIsNodeEnabled : 0; // 0x5B (1)
	char bHasCompilerMessage : 0; // 0x5B (1)
	struct FString NodeComment; // 0x60 (16)
	int32_t ErrorType; // 0x70 (4)
	struct FString ErrorMsg; // 0x78 (16)
	struct Unknown NodeGuid; // 0x88 (16)
};

// Class Engine.EdGraphNode_Documentation
class UEdGraphNode_Documentation : public UEdGraphNode {

public:

	struct FString Link; // 0x98 (16)
	struct FString Excerpt; // 0xA8 (16)
};

// Class Engine.EdGraphPin_Deprecated
class UEdGraphPin_Deprecated : public Object {

public:

	struct FString PinName; // 0x28 (16)
	struct FString PinToolTip; // 0x38 (16)
	char Direction; // 0x48 (1)
	struct Unknown PinType; // 0x50 (88)
	struct FString DefaultValue; // 0xA8 (16)
	struct FString AutogeneratedDefaultValue; // 0xB8 (16)
	struct Unknown DefaultObject; // 0xC8 (8)
	struct FText DefaultTextValue; // 0xD0 (24)
	struct TArray<Unknown> LinkedTo; // 0xE8 (16)
	struct TArray<Unknown> SubPins; // 0xF8 (16)
	struct Unknown ParentPin; // 0x108 (8)
	struct Unknown ReferencePassThroughConnection; // 0x110 (8)
};

// Class Engine.Emitter
class AEmitter : public UActor {

public:

	struct Unknown ParticleSystemComponent; // 0x318 (8)
	char bDestroyOnSystemFinish : 0; // 0x320 (1)
	char bPostUpdateTickGroup : 0; // 0x320 (1)
	char bCurrentlyActive : 0; // 0x320 (1)
	struct FMulticastInlineDelegate OnParticleSpawn; // 0x328 (16)
	struct FMulticastInlineDelegate OnParticleBurst; // 0x338 (16)
	struct FMulticastInlineDelegate OnParticleDeath; // 0x348 (16)
	struct FMulticastInlineDelegate OnParticleCollide; // 0x358 (16)

	void ToggleActive(); // Function Engine.Emitter.ToggleActive(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44A1160>
	void SetVectorParameter(struct FName ParameterName, struct Unknown Param); // Function Engine.Emitter.SetVectorParameter(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44A1090>
	void SetTemplate(struct Unknown NewTemplate); // Function Engine.Emitter.SetTemplate(Native|Public|BlueprintCallable) // <Game_BE.exe+0x124C7E0>
	void SetMaterialParameter(struct FName ParameterName, struct Unknown Param); // Function Engine.Emitter.SetMaterialParameter(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44A0FD0>
	void SetFloatParameter(struct FName ParameterName, float Param); // Function Engine.Emitter.SetFloatParameter(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44A0F00>
	void SetColorParameter(struct FName ParameterName, struct Unknown Param); // Function Engine.Emitter.SetColorParameter(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44A0E30>
	void SetActorParameter(struct FName ParameterName, struct Unknown Param); // Function Engine.Emitter.SetActorParameter(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44A0D70>
	void OnRep_bCurrentlyActive(); // Function Engine.Emitter.OnRep_bCurrentlyActive(Native|Public) // <Game_BE.exe+0x124C7C0>
	void OnParticleSystemFinished(struct Unknown FinishedComponent); // Function Engine.Emitter.OnParticleSystemFinished(Native|Public) // <Game_BE.exe+0x44A0CE0>
	char IsActive(); // Function Engine.Emitter.IsActive(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44A0CB0>
	void Deactivate(); // Function Engine.Emitter.Deactivate(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44A0C90>
	void Activate(); // Function Engine.Emitter.Activate(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44A0C70>
};

// Class Engine.EmitterCameraLensEffectBase
class AEmitterCameraLensEffectBase : public AEmitter {

public:

	struct Unknown PS_CameraEffect; // 0x368 (8)
	struct Unknown PS_CameraEffectNonExtremeContent; // 0x370 (8)
	struct Unknown BaseCamera; // 0x378 (8)
	struct Unknown RelativeTransform; // 0x380 (48)
	float BaseFOV; // 0x3B0 (4)
	char bAllowMultipleInstances : 0; // 0x3B4 (1)
	char bResetWhenRetriggered : 0; // 0x3B4 (1)
	struct TArray<Unknown> EmittersToTreatAsSame; // 0x3B8 (16)
	float DistFromCamera; // 0x3C8 (4)
};

// Class Engine.EngineMessage
class UEngineMessage : public ULocalMessage {

public:

	struct FString FailedPlaceMessage; // 0x28 (16)
	struct FString MaxedOutMessage; // 0x38 (16)
	struct FString EnteredMessage; // 0x48 (16)
	struct FString LeftMessage; // 0x58 (16)
	struct FString GlobalNameChange; // 0x68 (16)
	struct FString SpecEnteredMessage; // 0x78 (16)
	struct FString NewPlayerMessage; // 0x88 (16)
	struct FString NewSpecMessage; // 0x98 (16)
};

// Class Engine.ExponentialHeightFog
class AExponentialHeightFog : public AInfo {

public:

	struct Unknown Component; // 0x318 (8)
	char bEnabled : 0; // 0x320 (1)

	void OnRep_bEnabled(); // Function Engine.ExponentialHeightFog.OnRep_bEnabled(Native|Public) // <Game_BE.exe+0x1E71820>
};

// Class Engine.ExponentialHeightFogComponent
class UExponentialHeightFogComponent : public USceneComponent {

public:

	float FogDensity; // 0x228 (4)
	float FogHeightFalloff; // 0x22C (4)
	struct Unknown SecondFogData; // 0x230 (12)
	struct Unknown FogInscatteringColor; // 0x23C (16)
	struct Unknown InscatteringColorCubemap; // 0x250 (8)
	float InscatteringColorCubemapAngle; // 0x258 (4)
	struct Unknown InscatteringTextureTint; // 0x25C (16)
	float FullyDirectionalInscatteringColorDistance; // 0x26C (4)
	float NonDirectionalInscatteringColorDistance; // 0x270 (4)
	float DirectionalInscatteringExponent; // 0x274 (4)
	float DirectionalInscatteringStartDistance; // 0x278 (4)
	struct Unknown DirectionalInscatteringColor; // 0x27C (16)
	float FogMaxOpacity; // 0x28C (4)
	float StartDistance; // 0x290 (4)
	float FogCutoffDistance; // 0x294 (4)
	char bEnableVolumetricFog : 0; // 0x298 (1)
	float VolumetricFogScatteringDistribution; // 0x29C (4)
	struct Unknown VolumetricFogAlbedo; // 0x2A0 (4)
	struct Unknown VolumetricFogEmissive; // 0x2A4 (16)
	float VolumetricFogExtinctionScale; // 0x2B4 (4)
	float VolumetricFogDistance; // 0x2B8 (4)
	float VolumetricFogStaticLightingScatteringIntensity; // 0x2BC (4)
	char bOverrideLightColorsWithFogInscatteringColors : 0; // 0x2C0 (1)

	void SetVolumetricFogScatteringDistribution(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B31D0>
	void SetVolumetricFogExtinctionScale(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B3150>
	void SetVolumetricFogEmissive(struct Unknown NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44B30D0>
	void SetVolumetricFogDistance(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B3050>
	void SetVolumetricFogAlbedo(struct Unknown NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44B2FE0>
	void SetVolumetricFog(char bNewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFog(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B2F50>
	void SetStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetStartDistance(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B2ED0>
	void SetNonDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B2E50>
	void SetInscatteringTextureTint(struct Unknown Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44B2D50>
	void SetInscatteringColorCubemapAngle(float Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B2CD0>
	void SetInscatteringColorCubemap(struct Unknown Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B2C50>
	void SetFullyDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B2BD0>
	void SetFogMaxOpacity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B2AD0>
	void SetFogInscatteringColor(struct Unknown Value); // Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44B2A50>
	void SetFogHeightFalloff(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445CC10>
	void SetFogDensity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogDensity(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x445CE20>
	void SetFogCutoffDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B29D0>
	void SetDirectionalInscatteringStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B2950>
	void SetDirectionalInscatteringExponent(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B28D0>
	void SetDirectionalInscatteringColor(struct Unknown Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x44B2850>
};

// Class Engine.FloatingPawnMovement
class UFloatingPawnMovement : public UPawnMovementComponent {

public:

	float MaxSpeed; // 0x138 (4)
	float Acceleration; // 0x13C (4)
	float Deceleration; // 0x140 (4)
	float TurningBoost; // 0x144 (4)
	char bPositionCorrected : 0; // 0x148 (1)
};

// Class Engine.Font
class UFont : public Object {

public:

	enum class Unknow FontCacheType; // 0x30 (1)
	struct TArray<Unknown> Characters; // 0x38 (16)
	struct TArray<Unknown> Textures; // 0x48 (16)
	int32_t IsRemapped; // 0x58 (4)
	float EmScale; // 0x5C (4)
	float Ascent; // 0x60 (4)
	float Descent; // 0x64 (4)
	float Leading; // 0x68 (4)
	int32_t Kerning; // 0x6C (4)
	struct Unknown ImportOptions; // 0x70 (176)
	int32_t NumCharacters; // 0x120 (4)
	struct TArray<Unknown> MaxCharHeight; // 0x128 (16)
	float ScalingFactor; // 0x138 (4)
	int32_t LegacyFontSize; // 0x13C (4)
	struct FName LegacyFontName; // 0x140 (8)
	struct Unknown CompositeFont; // 0x148 (56)
};

// Class Engine.FontFace
class UFontFace : public Object {

public:

	struct FString SourceFilename; // 0x30 (16)
	enum class Unknow Hinting; // 0x40 (1)
	enum class Unknow LoadingPolicy; // 0x41 (1)
	enum class Unknow LayoutMethod; // 0x42 (1)
};

// Class Engine.FontImportOptions
class UFontImportOptions : public Object {

public:

	struct Unknown Data; // 0x28 (176)
};

// Class Engine.ForceFeedbackAttenuation
class UForceFeedbackAttenuation : public Object {

public:

	struct Unknown Attenuation; // 0x28 (176)
};

// Class Engine.ForceFeedbackComponent
class UForceFeedbackComponent : public USceneComponent {

public:

	struct Unknown ForceFeedbackEffect; // 0x228 (8)
	char bAutoDestroy : 0; // 0x230 (1)
	char bStopWhenOwnerDestroyed : 0; // 0x230 (1)
	char bLooping : 0; // 0x230 (1)
	char bIgnoreTimeDilation : 0; // 0x230 (1)
	char bOverrideAttenuation : 0; // 0x230 (1)
	float IntensityMultiplier; // 0x234 (4)
	struct Unknown AttenuationSettings; // 0x238 (8)
	struct Unknown AttenuationOverrides; // 0x240 (176)
	struct FMulticastInlineDelegate OnForceFeedbackFinished; // 0x2F0 (16)

	void Stop(); // Function Engine.ForceFeedbackComponent.Stop(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B3250>
	void SetIntensityMultiplier(float NewIntensityMultiplier); // Function Engine.ForceFeedbackComponent.SetIntensityMultiplier(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B2DD0>
	void SetForceFeedbackEffect(struct Unknown NewForceFeedbackEffect); // Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44B2B50>
	void Play(float StartTime); // Function Engine.ForceFeedbackComponent.Play(Native|Public|BlueprintCallable) // <Game_BE.exe+0x4478E20>
	char BP_GetAttenuationSettingsToApply(struct Unknown& OutAttenuationSettings); // Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44B26A0>
	void AdjustAttenuation(struct Unknown& InAttenuationSettings); // Function Engine.ForceFeedbackComponent.AdjustAttenuation(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x44B25A0>
};

// Class Engine.ForceFeedbackEffect
class UForceFeedbackEffect : public Object {

public:

	struct TArray<Unknown> ChannelDetails; // 0x28 (16)
	float Duration; // 0x38 (4)
};

// Class Engine.GameNetworkManager
class AGameNetworkManager : public AInfo {

public:

	float BadPacketLossThreshold; // 0x318 (4)
	float SeverePacketLossThreshold; // 0x31C (4)
	int32_t BadPingThreshold; // 0x320 (4)
	int32_t SeverePingThreshold; // 0x324 (4)
	int32_t AdjustedNetSpeed; // 0x328 (4)
	float LastNetSpeedUpdateTime; // 0x32C (4)
	int32_t TotalNetBandwidth; // 0x330 (4)
	int32_t MinDynamicBandwidth; // 0x334 (4)
	int32_t MaxDynamicBandwidth; // 0x338 (4)
	char bIsStandbyCheckingEnabled : 0; // 0x33C (1)
	char bHasStandbyCheatTriggered : 0; // 0x33C (1)
	float StandbyRxCheatTime; // 0x340 (4)
	float StandbyTxCheatTime; // 0x344 (4)
	float PercentMissingForRxStandby; // 0x348 (4)
	float PercentMissingForTxStandby; // 0x34C (4)
	float PercentForBadPing; // 0x350 (4)
	float JoinInProgressStandbyWaitTime; // 0x354 (4)
	float MoveRepSize; // 0x358 (4)
	float MAXPOSITIONERRORSQUARED; // 0x35C (4)
	float MAXNEARZEROVELOCITYSQUARED; // 0x360 (4)
	float CLIENTADJUSTUPDATECOST; // 0x364 (4)
	float MAXCLIENTUPDATEINTERVAL; // 0x368 (4)
	float MaxClientForcedUpdateDuration; // 0x36C (4)
	float ServerForcedUpdateHitchThreshold; // 0x370 (4)
	float ServerForcedUpdateHitchCooldown; // 0x374 (4)
	float MaxMoveDeltaTime; // 0x378 (4)
	float MaxClientSmoothingDeltaTime; // 0x37C (4)
	float ClientNetSendMoveDeltaTime; // 0x380 (4)
	float ClientNetSendMoveDeltaTimeThrottled; // 0x384 (4)
	float ClientNetSendMoveDeltaTimeStationary; // 0x388 (4)
	int32_t ClientNetSendMoveThrottleAtNetSpeed; // 0x38C (4)
	int32_t ClientNetSendMoveThrottleOverPlayerCount; // 0x390 (4)
	char ClientAuthorativePosition : 0; // 0x394 (1)
	float ClientErrorUpdateRateLimit; // 0x398 (4)
	float ClientNetCamUpdateDeltaTime; // 0x39C (4)
	float ClientNetCamUpdatePositionLimit; // 0x3A0 (4)
	char bMovementTimeDiscrepancyDetection : 0; // 0x3A4 (1)
	char bMovementTimeDiscrepancyResolution : 0; // 0x3A5 (1)
	float MovementTimeDiscrepancyMaxTimeMargin; // 0x3A8 (4)
	float MovementTimeDiscrepancyMinTimeMargin; // 0x3AC (4)
	float MovementTimeDiscrepancyResolutionRate; // 0x3B0 (4)
	float MovementTimeDiscrepancyDriftAllowance; // 0x3B4 (4)
	char bMovementTimeDiscrepancyForceCorrectionsDuringResolution : 0; // 0x3B8 (1)
	char bUseDistanceBasedRelevancy : 0; // 0x3B9 (1)
};

// Class Engine.SpotLight
class ASpotLight : public ALight {

public:

	struct Unknown SpotLightComponent; // 0x328 (8)

	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLight.SetOuterConeAngle(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E4A50>
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLight.SetInnerConeAngle(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E4950>
};

// Class Engine.HapticFeedbackEffect_Buffer
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base {

public:

	struct TArray<Unknown> Amplitudes; // 0x28 (16)
	int32_t SampleRate; // 0x38 (4)
};

// Class Engine.HapticFeedbackEffect_Curve
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base {

public:

	struct Unknown HapticDetails; // 0x28 (272)
};

// Class Engine.HapticFeedbackEffect_SoundWave
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base {

public:

	struct Unknown SoundWave; // 0x28 (8)
};

// Class Engine.HLODProxy
class UHLODProxy : public Object {

public:

	struct TArray<Unknown> ProxyMeshes; // 0x28 (16)
};

// Class Engine.InGameAdManager
class UInGameAdManager : public UPlatformInterfaceBase {

public:

	char bShouldPauseWhileAdOpen : 0; // 0x38 (1)
	struct TArray<Unknown> ClickedBannerDelegates; // 0x40 (16)
	struct TArray<Unknown> ClosedAdDelegates; // 0x50 (16)
};

// Class Engine.InheritableComponentHandler
class UInheritableComponentHandler : public Object {

public:

	struct TArray<Unknown> Records; // 0x28 (16)
	struct TArray<Unknown> UnnecessaryComponents; // 0x38 (16)
};

// Class Engine.InputActionDelegateBinding
class UInputActionDelegateBinding : public UInputDelegateBinding {

public:

	struct TArray<Unknown> InputActionDelegateBindings; // 0x28 (16)
};

// Class Engine.InputAxisDelegateBinding
class UInputAxisDelegateBinding : public UInputDelegateBinding {

public:

	struct TArray<Unknown> InputAxisDelegateBindings; // 0x28 (16)
};

// Class Engine.InputAxisKeyDelegateBinding
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding {

public:

	struct TArray<Unknown> InputAxisKeyDelegateBindings; // 0x28 (16)
};

// Class Engine.InputComponent
class UInputComponent : public UActorComponent {

public:

	struct TArray<Unknown> CachedKeyToActionInfo; // 0x120 (16)

	char WasControllerKeyJustReleased(struct Unknown Key); // Function Engine.InputComponent.WasControllerKeyJustReleased(Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D17C0>
	char WasControllerKeyJustPressed(struct Unknown Key); // Function Engine.InputComponent.WasControllerKeyJustPressed(Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D17C0>
	char IsControllerKeyDown(struct Unknown Key); // Function Engine.InputComponent.IsControllerKeyDown(Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D17C0>
	void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, char& bIsCurrentlyPressed); // Function Engine.InputComponent.GetTouchState(Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D1340>
	struct Unknown GetControllerVectorKeyState(struct Unknown Key); // Function Engine.InputComponent.GetControllerVectorKeyState(Final|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D1210>
	void GetControllerMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.InputComponent.GetControllerMouseDelta(Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D1130>
	float GetControllerKeyTimeDown(struct Unknown Key); // Function Engine.InputComponent.GetControllerKeyTimeDown(Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D0F20>
	void GetControllerAnalogStickState(char WhichStick, float& StickX, float& StickY); // Function Engine.InputComponent.GetControllerAnalogStickState(Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D1010>
	float GetControllerAnalogKeyState(struct Unknown Key); // Function Engine.InputComponent.GetControllerAnalogKeyState(Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D0F20>
};

// Class Engine.InputKeyDelegateBinding
class UInputKeyDelegateBinding : public UInputDelegateBinding {

public:

	struct TArray<Unknown> InputKeyDelegateBindings; // 0x28 (16)
};

// Class Engine.InputSettings
class UInputSettings : public Object {

public:

	struct TArray<Unknown> AxisConfig; // 0x28 (16)
	char bAltEnterTogglesFullscreen : 0; // 0x38 (1)
	char bF11TogglesFullscreen : 0; // 0x38 (1)
	char bUseMouseForTouch : 0; // 0x38 (1)
	char bEnableMouseSmoothing : 0; // 0x38 (1)
	char bEnableFOVScaling : 0; // 0x38 (1)
	char bCaptureMouseOnLaunch : 0; // 0x38 (1)
	char bDefaultViewportMouseLock : 0; // 0x38 (1)
	char bAlwaysShowTouchInterface : 0; // 0x38 (1)
	char bShowConsoleOnFourFingerTap : 0; // 0x39 (1)
	char bEnableGestureRecognizer : 0; // 0x39 (1)
	char bUseAutocorrect : 0; // 0x3A (1)
	struct TArray<Unknown> ExcludedAutocorrectOS; // 0x40 (16)
	struct TArray<Unknown> ExcludedAutocorrectCultures; // 0x50 (16)
	struct TArray<Unknown> ExcludedAutocorrectDeviceModels; // 0x60 (16)
	enum class Unknow DefaultViewportMouseCaptureMode; // 0x70 (1)
	enum class Unknow DefaultViewportMouseLockMode; // 0x71 (1)
	float FOVScale; // 0x74 (4)
	float DoubleClickTime; // 0x78 (4)
	struct TArray<Unknown> ActionMappings; // 0x80 (16)
	struct TArray<Unknown> AxisMappings; // 0x90 (16)
	struct TArray<Unknown> SpeechMappings; // 0xA0 (16)
	struct Unknown DefaultTouchInterface; // 0xB0 (24)
	struct Unknown ConsoleKey; // 0xC8 (24)
	struct TArray<Unknown> ConsoleKeys; // 0xE0 (16)

	void SaveKeyMappings(); // Function Engine.InputSettings.SaveKeyMappings(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44D24B0>
	void RemoveAxisMapping(struct Unknown& KeyMapping, char bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveAxisMapping(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x44D2310>
	void RemoveActionMapping(struct Unknown& KeyMapping, char bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveActionMapping(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x44D2170>
	struct Unknown GetInputSettings(); // Function Engine.InputSettings.GetInputSettings(Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x44D1310>
	void GetAxisNames(struct TArray<Unknown>& AxisNames); // Function Engine.InputSettings.GetAxisNames(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D0E70>
	void GetAxisMappingByName(struct FName InAxisName, struct TArray<Unknown>& OutMappings); // Function Engine.InputSettings.GetAxisMappingByName(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D0D40>
	void GetActionNames(struct TArray<Unknown>& ActionNames); // Function Engine.InputSettings.GetActionNames(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D0C90>
	void GetActionMappingByName(struct FName InActionName, struct TArray<Unknown>& OutMappings); // Function Engine.InputSettings.GetActionMappingByName(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x44D0B60>
	void ForceRebuildKeymaps(); // Function Engine.InputSettings.ForceRebuildKeymaps(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44D0B40>
	void AddAxisMapping(struct Unknown& KeyMapping, char bForceRebuildKeymaps); // Function Engine.InputSettings.AddAxisMapping(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x44D0810>
	void AddActionMapping(struct Unknown& KeyMapping, char bForceRebuildKeymaps); // Function Engine.InputSettings.AddActionMapping(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x44D0670>
};

// Class Engine.InputTouchDelegateBinding
class UInputTouchDelegateBinding : public UInputDelegateBinding {

public:

	struct TArray<Unknown> InputTouchDelegateBindings; // 0x28 (16)
};

// Class Engine.InstancedCollisionComponent
class UInstancedCollisionComponent : public UActorComponent {

public:

	struct TArray<Unknown> StaticMeshComponents; // 0xB0 (16)
	struct Unknown StaticMeshComponent; // 0xD0 (8)
};

// Class Engine.InstancedStaticCollisionActor
class AInstancedStaticCollisionActor : public UActor {

public:

	struct TMap<Unknown, Unknown> InstancedCollisionComponentMap; // 0x318 (80)
};

// Class Engine.InterpCurveEdSetup
class UInterpCurveEdSetup : public Object {

public:

	struct TArray<Unknown> Tabs; // 0x28 (16)
	int32_t ActiveTab; // 0x38 (4)
};

// Class Engine.InterpData
class UInterpData : public Object {

public:

	float InterpLength; // 0x28 (4)
	float PathBuildTime; // 0x2C (4)
	struct TArray<Unknown> InterpGroups; // 0x30 (16)
	struct Unknown CurveEdSetup; // 0x40 (8)
	float EdSectionStart; // 0x48 (4)
	float EdSectionEnd; // 0x4C (4)
	char bShouldBakeAndPrune : 0; // 0x50 (1)
	struct Unknown CachedDirectorGroup; // 0x58 (8)
	struct TArray<Unknown> AllEventNames; // 0x60 (16)
};

// Class Engine.InterpFilter
class UInterpFilter : public Object {

public:

	struct FString Caption; // 0x28 (16)
};

// Class Engine.InterpGroup
class UInterpGroup : public Object {

public:

	struct TArray<Unknown> InterpTracks; // 0x30 (16)
	struct FName GroupName; // 0x40 (8)
	struct Unknown GroupColor; // 0x48 (4)
	char bCollapsed : 0; // 0x4C (1)
	char bVisible : 0; // 0x4C (1)
	char bIsFolder : 0; // 0x4C (1)
	char bIsParented : 0; // 0x4C (1)
	char bIsSelected : 0; // 0x4C (1)
};

// Class Engine.InterpGroupCamera
class UInterpGroupCamera : public UInterpGroup {

public:

	struct Unknown CameraAnimInst; // 0x50 (8)
	float CompressTolerance; // 0x58 (4)
};

// Class Engine.InterpGroupInst
class UInterpGroupInst : public Object {

public:

	struct Unknown Group; // 0x28 (8)
	struct Unknown GroupActor; // 0x30 (8)
	struct TArray<Unknown> TrackInst; // 0x38 (16)
};

// Class Engine.InterpToMovementComponent
class UInterpToMovementComponent : public UMovementComponent {

public:

	float Duration; // 0xF0 (4)
	char bPauseOnImpact : 0; // 0xF4 (1)
	char bSweep : 0; // 0xF8 (1)
	enum class Unknow TeleportType; // 0xF9 (1)
	enum class Unknow BehaviourType; // 0xFA (1)
	char bCheckIfStillInWorld : 0; // 0xFB (1)
	char bForceSubStepping : 0; // 0xFC (1)
	struct FMulticastInlineDelegate OnInterpToReverse; // 0x100 (16)
	struct FMulticastInlineDelegate OnInterpToStop; // 0x110 (16)
	struct FMulticastInlineDelegate OnWaitBeginDelegate; // 0x120 (16)
	struct FMulticastInlineDelegate OnWaitEndDelegate; // 0x130 (16)
	struct FMulticastInlineDelegate OnResetDelegate; // 0x140 (16)
	float MaxSimulationTimeStep; // 0x150 (4)
	int32_t MaxSimulationIterations; // 0x154 (4)
	struct TArray<Unknown> ControlPoints; // 0x158 (16)

	void StopSimulating(struct Unknown& HitResult); // Function Engine.InterpToMovementComponent.StopSimulating(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x44DB440>
	void RestartMovement(float InitialDirection); // Function Engine.InterpToMovementComponent.RestartMovement(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44DB3C0>
	void OnInterpToWaitEndDelegate__DelegateSignature(struct Unknown& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature(MulticastDelegate|Public|Delegate|HasOutParms) // <Game_BE.exe+0x2B80160>
	void OnInterpToWaitBeginDelegate__DelegateSignature(struct Unknown& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature(MulticastDelegate|Public|Delegate|HasOutParms) // <Game_BE.exe+0x2B80160>
	void OnInterpToStopDelegate__DelegateSignature(struct Unknown& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature(MulticastDelegate|Public|Delegate|HasOutParms) // <Game_BE.exe+0x2B80160>
	void OnInterpToReverseDelegate__DelegateSignature(struct Unknown& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature(MulticastDelegate|Public|Delegate|HasOutParms) // <Game_BE.exe+0x2B80160>
	void OnInterpToResetDelegate__DelegateSignature(struct Unknown& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature(MulticastDelegate|Public|Delegate|HasOutParms) // <Game_BE.exe+0x2B80160>
	void FinaliseControlPoints(); // Function Engine.InterpToMovementComponent.FinaliseControlPoints(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x44DB3A0>
};

// Class Engine.InterpTrackAnimControl
class UInterpTrackAnimControl : public UInterpTrackFloatBase {

public:

	struct FName SlotName; // 0x90 (8)
	struct TArray<Unknown> AnimSeqs; // 0x98 (16)
	char bSkipAnimNotifiers : 0; // 0xA8 (1)
};

// Class Engine.InterpTrackBoolProp
class UInterpTrackBoolProp : public UInterpTrack {

public:

	struct TArray<Unknown> BoolTrack; // 0x70 (16)
	struct FName PropertyName; // 0x80 (8)
};

// Class Engine.InterpTrackColorProp
class UInterpTrackColorProp : public UInterpTrackVectorBase {

public:

	struct FName PropertyName; // 0x90 (8)
};

// Class Engine.InterpTrackDirector
class UInterpTrackDirector : public UInterpTrack {

public:

	struct TArray<Unknown> CutTrack; // 0x70 (16)
	char bSimulateCameraCutsOnClients : 0; // 0x80 (1)
};

// Class Engine.InterpTrackEvent
class UInterpTrackEvent : public UInterpTrack {

public:

	struct TArray<Unknown> EventTrack; // 0x70 (16)
	char bFireEventsWhenForwards : 0; // 0x80 (1)
	char bFireEventsWhenBackwards : 0; // 0x80 (1)
	char bFireEventsWhenJumpingForwards : 0; // 0x80 (1)
	char bUseCustomEventName : 0; // 0x80 (1)
};

// Class Engine.InterpTrackFade
class UInterpTrackFade : public UInterpTrackFloatBase {

public:

	char bPersistFade : 0; // 0x90 (1)
	char bFadeAudio : 0; // 0x90 (1)
	struct Unknown FadeColor; // 0x94 (16)
};

// Class Engine.InterpTrackFloatAnimBPParam
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase {

public:

	struct Unknown* AnimBlueprintClass; // 0x90 (8)
	struct Unknown* AnimClass; // 0x98 (8)
	struct FName ParamName; // 0xA0 (8)
};

// Class Engine.InterpTrackFloatMaterialParam
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase {

public:

	struct TArray<Unknown> TargetMaterials; // 0x90 (16)
	struct FName ParamName; // 0xA0 (8)
};

// Class Engine.InterpTrackFloatParticleParam
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase {

public:

	struct FName ParamName; // 0x90 (8)
};

// Class Engine.InterpTrackFloatProp
class UInterpTrackFloatProp : public UInterpTrackFloatBase {

public:

	struct FName PropertyName; // 0x90 (8)
};

// Class Engine.InterpTrackInstAnimControl
class UInterpTrackInstAnimControl : public UInterpTrackInst {

public:

	float LastUpdatePosition; // 0x28 (4)
};

// Class Engine.InterpTrackInstProperty
class UInterpTrackInstProperty : public UInterpTrackInst {

public:

	struct TFieldPath<FUnknown> InterpProperty; // 0x28 (32)
	struct Unknown PropertyOuterObjectInst; // 0x48 (8)
};

// Class Engine.InterpTrackInstBoolProp
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty {

public:

	char ResetBool : 0; // 0x60 (1)
};

// Class Engine.InterpTrackInstColorProp
class UInterpTrackInstColorProp : public UInterpTrackInstProperty {

public:

	struct Unknown ResetColor; // 0x58 (4)
};

// Class Engine.InterpTrackInstDirector
class UInterpTrackInstDirector : public UInterpTrackInst {

public:

	struct Unknown OldViewTarget; // 0x28 (8)
};

// Class Engine.InterpTrackInstEvent
class UInterpTrackInstEvent : public UInterpTrackInst {

public:

	float LastUpdatePosition; // 0x28 (4)
};

// Class Engine.InterpTrackInstFloatAnimBPParam
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst {

public:

	struct Unknown AnimScriptInstance; // 0x28 (8)
	float ResetFloat; // 0x30 (4)
};

// Class Engine.InterpTrackInstFloatMaterialParam
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst {

public:

	struct TArray<Unknown> MaterialInstances; // 0x28 (16)
	struct TArray<Unknown> ResetFloats; // 0x38 (16)
	struct TArray<Unknown> PrimitiveMaterialRefs; // 0x48 (16)
	struct Unknown InstancedTrack; // 0x58 (8)
};

// Class Engine.InterpTrackInstFloatParticleParam
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst {

public:

	float ResetFloat; // 0x28 (4)
};

// Class Engine.InterpTrackInstFloatProp
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty {

public:

	float ResetFloat; // 0x58 (4)
};

// Class Engine.InterpTrackInstLinearColorProp
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty {

public:

	struct Unknown ResetColor; // 0x58 (16)
};

// Class Engine.InterpTrackInstMove
class UInterpTrackInstMove : public UInterpTrackInst {

public:

	struct Unknown ResetLocation; // 0x28 (12)
	struct Unknown ResetRotation; // 0x34 (12)
};

// Class Engine.InterpTrackInstParticleReplay
class UInterpTrackInstParticleReplay : public UInterpTrackInst {

public:

	float LastUpdatePosition; // 0x28 (4)
};

// Class Engine.InterpTrackInstSlomo
class UInterpTrackInstSlomo : public UInterpTrackInst {

public:

	float OldTimeDilation; // 0x28 (4)
};

// Class Engine.InterpTrackInstSound
class UInterpTrackInstSound : public UInterpTrackInst {

public:

	float LastUpdatePosition; // 0x28 (4)
	struct Unknown PlayAudioComp; // 0x30 (8)
};

// Class Engine.InterpTrackInstToggle
class UInterpTrackInstToggle : public UInterpTrackInst {

public:

	char Action; // 0x28 (1)
	float LastUpdatePosition; // 0x2C (4)
	char bSavedActiveState : 0; // 0x30 (1)
};

// Class Engine.InterpTrackInstVectorMaterialParam
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst {

public:

	struct TArray<Unknown> MaterialInstances; // 0x28 (16)
	struct TArray<Unknown> ResetVectors; // 0x38 (16)
	struct TArray<Unknown> PrimitiveMaterialRefs; // 0x48 (16)
	struct Unknown InstancedTrack; // 0x58 (8)
};

// Class Engine.InterpTrackInstVectorProp
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty {

public:

	struct Unknown ResetVector; // 0x58 (12)
};

// Class Engine.InterpTrackInstVisibility
class UInterpTrackInstVisibility : public UInterpTrackInst {

public:

	char Action; // 0x28 (1)
	float LastUpdatePosition; // 0x2C (4)
};

// Class Engine.InterpTrackLinearColorBase
class UInterpTrackLinearColorBase : public UInterpTrack {

public:

	struct Unknown LinearColorTrack; // 0x70 (24)
	float CurveTension; // 0x88 (4)
};

// Class Engine.InterpTrackLinearColorProp
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase {

public:

	struct FName PropertyName; // 0x90 (8)
};

// Class Engine.InterpTrackMove
class UInterpTrackMove : public UInterpTrack {

public:

	struct Unknown PosTrack; // 0x70 (24)
	struct Unknown EulerTrack; // 0x88 (24)
	struct Unknown LookupTrack; // 0xA0 (16)
	struct FName LookAtGroupName; // 0xB0 (8)
	float LinCurveTension; // 0xB8 (4)
	float AngCurveTension; // 0xBC (4)
	char bUseQuatInterpolation : 0; // 0xC0 (1)
	char bShowArrowAtKeys : 0; // 0xC0 (1)
	char bDisableMovement : 0; // 0xC0 (1)
	char bShowTranslationOnCurveEd : 0; // 0xC0 (1)
	char bShowRotationOnCurveEd : 0; // 0xC0 (1)
	char bHide3DTrack : 0; // 0xC0 (1)
	char RotMode; // 0xC4 (1)
};

// Class Engine.InterpTrackMoveAxis
class UInterpTrackMoveAxis : public UInterpTrackFloatBase {

public:

	char MoveAxis; // 0x90 (1)
	struct Unknown LookupTrack; // 0x98 (16)
};

// Class Engine.InterpTrackParticleReplay
class UInterpTrackParticleReplay : public UInterpTrack {

public:

	struct TArray<Unknown> TrackKeys; // 0x70 (16)
};

// Class Engine.InterpTrackSound
class UInterpTrackSound : public UInterpTrackVectorBase {

public:

	struct TArray<Unknown> Sounds; // 0x90 (16)
	char bPlayOnReverse : 0; // 0xA0 (1)
	char bContinueSoundOnMatineeEnd : 0; // 0xA0 (1)
	char bSuppressSubtitles : 0; // 0xA0 (1)
	char bTreatAsDialogue : 0; // 0xA0 (1)
	char bAttach : 0; // 0xA0 (1)
};

// Class Engine.InterpTrackToggle
class UInterpTrackToggle : public UInterpTrack {

public:

	struct TArray<Unknown> ToggleTrack; // 0x70 (16)
	char bActivateSystemEachUpdate : 0; // 0x80 (1)
	char bActivateWithJustAttachedFlag : 0; // 0x80 (1)
	char bFireEventsWhenForwards : 0; // 0x80 (1)
	char bFireEventsWhenBackwards : 0; // 0x80 (1)
	char bFireEventsWhenJumpingForwards : 0; // 0x80 (1)
};

// Class Engine.InterpTrackVectorMaterialParam
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase {

public:

	struct TArray<Unknown> TargetMaterials; // 0x90 (16)
	struct FName ParamName; // 0xA0 (8)
};

// Class Engine.InterpTrackVectorProp
class UInterpTrackVectorProp : public UInterpTrackVectorBase {

public:

	struct FName PropertyName; // 0x90 (8)
};

// Class Engine.InterpTrackVisibility
class UInterpTrackVisibility : public UInterpTrack {

public:

	struct TArray<Unknown> VisibilityTrack; // 0x70 (16)
	char bFireEventsWhenForwards : 0; // 0x80 (1)
	char bFireEventsWhenBackwards : 0; // 0x80 (1)
	char bFireEventsWhenJumpingForwards : 0; // 0x80 (1)
};

// Class Engine.IntSerialization
class UIntSerialization : public Object {

public:

	uint16_t UnsignedInt16Variable; // 0x28 (2)
	uint32_t UnsignedInt32Variable; // 0x2C (4)
	uint64_t UnsignedInt64Variable; // 0x30 (8)
	int8_t SignedInt8Variable; // 0x38 (1)
	int16_t SignedInt16Variable; // 0x3A (2)
	int64_t SignedInt64Variable; // 0x40 (8)
	char UnsignedInt8Variable; // 0x48 (1)
	int32_t SignedInt32Variable; // 0x4C (4)
};

// Class Engine.Layer
class ULayer : public Object {

public:

	struct FName LayerName; // 0x28 (8)
	char bIsVisible : 0; // 0x30 (1)
	struct TArray<Unknown> ActorStats; // 0x38 (16)
};

// Class Engine.Level
class ULevel : public Object {

public:

	struct Unknown OwningWorld; // 0xB8 (8)
	struct Unknown Model; // 0xC0 (8)
	struct TArray<Unknown> ModelComponents; // 0xC8 (16)
	struct Unknown ActorCluster; // 0xD8 (8)
	int32_t NumTextureStreamingUnbuiltComponents; // 0xE0 (4)
	int32_t NumTextureStreamingDirtyResources; // 0xE4 (4)
	struct Unknown LevelScriptActor; // 0xE8 (8)
	struct Unknown NavListStart; // 0xF0 (8)
	struct Unknown NavListEnd; // 0xF8 (8)
	struct TArray<Unknown> NavDataChunks; // 0x100 (16)
	float LightmapTotalSize; // 0x110 (4)
	float ShadowmapTotalSize; // 0x114 (4)
	struct TArray<Unknown> StaticNavigableGeometry; // 0x118 (16)
	struct TArray<Unknown> StreamingTextureGuids; // 0x128 (16)
	struct Unknown LevelBuildDataId; // 0x1D0 (16)
	struct Unknown MapBuildData; // 0x1E0 (8)
	struct Unknown LightBuildLevelOffset; // 0x1E8 (12)
	char bIsLightingScenario : 0; // 0x1F4 (1)
	char bTextureStreamingRotationChanged : 0; // 0x1F4 (1)
	char bStaticComponentsRegisteredInStreamingManager : 0; // 0x1F4 (1)
	char bIsVisible : 0; // 0x1F4 (1)
	struct Unknown WorldSettings; // 0x240 (8)
	struct TArray<Unknown> AssetUserData; // 0x250 (16)
	struct TArray<Unknown> DestroyedReplicatedStaticActors; // 0x270 (16)
};

// Class Engine.LevelActorContainer
class ULevelActorContainer : public Object {

public:

	struct TArray<Unknown> Actors; // 0x28 (16)
};

// Class Engine.LevelBounds
class ALevelBounds : public UActor {

public:

	struct Unknown BoxComponent; // 0x318 (8)
	char bAutoUpdateBounds : 0; // 0x320 (1)
};

// Class Engine.LevelStreaming
class ULevelStreaming : public Object {

public:

	struct Unknown WorldAsset; // 0x28 (40)
	struct FName PackageNameToLoad; // 0x50 (8)
	struct TArray<Unknown> LODPackageNames; // 0x58 (16)
	struct Unknown LevelTransform; // 0x80 (48)
	int32_t LevelLODIndex; // 0xB0 (4)
	int32_t StreamingPriority; // 0xB4 (4)
	char bShouldBeVisible : 0; // 0xC0 (1)
	char bShouldBeLoaded : 0; // 0xC0 (1)
	char bLocked : 0; // 0xC0 (1)
	char bIsStatic : 0; // 0xC0 (1)
	char bShouldBlockOnLoad : 0; // 0xC0 (1)
	char bShouldBlockOnUnload : 0; // 0xC0 (1)
	char bDisableDistanceStreaming : 0; // 0xC0 (1)
	char bDrawOnLevelStatusMap : 0; // 0xC0 (1)
	struct Unknown LevelColor; // 0xC4 (16)
	struct TArray<Unknown> EditorStreamingVolumes; // 0xD8 (16)
	float MinTimeBetweenVolumeUnloadRequests; // 0xE8 (4)
	struct FMulticastInlineDelegate OnLevelLoaded; // 0xF0 (16)
	struct FMulticastInlineDelegate OnLevelUnloaded; // 0x100 (16)
	struct FMulticastInlineDelegate OnLevelShown; // 0x110 (16)
	struct FMulticastInlineDelegate OnLevelHidden; // 0x120 (16)
	struct Unknown LoadedLevel; // 0x130 (8)
	struct Unknown PendingUnloadLevel; // 0x138 (8)

	char ShouldBeLoaded(); // Function Engine.LevelStreaming.ShouldBeLoaded(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x3CC2590>
	void SetShouldBeVisible(char bInShouldBeVisible); // Function Engine.LevelStreaming.SetShouldBeVisible(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D720>
	void SetShouldBeLoaded(char bInShouldBeLoaded); // Function Engine.LevelStreaming.SetShouldBeLoaded(Native|Public|BlueprintCallable) // <Game_BE.exe+0x44C53E0>
	void SetPriority(int32_t NewPriority); // Function Engine.LevelStreaming.SetPriority(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D520>
	void SetLevelLODIndex(int32_t LODIndex); // Function Engine.LevelStreaming.SetLevelLODIndex(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453CE90>
	char IsStreamingStatePending(); // Function Engine.LevelStreaming.IsStreamingStatePending(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x453BF60>
	char IsLevelVisible(); // Function Engine.LevelStreaming.IsLevelVisible(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x453BF30>
	char IsLevelLoaded(); // Function Engine.LevelStreaming.IsLevelLoaded(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x453BF00>
	struct FName GetWorldAssetPackageFName(); // Function Engine.LevelStreaming.GetWorldAssetPackageFName(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x453BE90>
	struct Unknown GetLoadedLevel(); // Function Engine.LevelStreaming.GetLoadedLevel(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x453BE70>
	struct Unknown GetLevelScriptActor(); // Function Engine.LevelStreaming.GetLevelScriptActor(Final|Native|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x453BE00>
	struct Unknown CreateInstance(struct FString UniqueInstanceName); // Function Engine.LevelStreaming.CreateInstance(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453BD20>
};

// Class Engine.LevelStreamingDynamic
class ULevelStreamingDynamic : public ULevelStreaming {

public:

	char bInitiallyLoaded : 0; // 0x158 (1)
	char bInitiallyVisible : 0; // 0x158 (1)

	struct Unknown LoadLevelInstanceBySoftObjectPtr(struct Unknown WorldContextObject, struct Unknown Level, struct Unknown Location, struct Unknown Rotation, char& bOutSuccess); // Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr(Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x453C1A0>
	struct Unknown LoadLevelInstance(struct Unknown WorldContextObject, struct FString LevelName, struct Unknown Location, struct Unknown Rotation, char& bOutSuccess); // Function Engine.LevelStreamingDynamic.LoadLevelInstance(Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x453BF90>
};

// Class Engine.LevelStreamingVolume
class ALevelStreamingVolume : public AVolume {

public:

	struct TArray<Unknown> StreamingLevelNames; // 0x350 (16)
	char bEditorPreVisOnly : 0; // 0x360 (1)
	char bDisabled : 0; // 0x360 (1)
	char StreamingUsage; // 0x364 (1)
};

// Class Engine.LightmappedSurfaceCollection
class ULightmappedSurfaceCollection : public Object {

public:

	struct Unknown SourceModel; // 0x28 (8)
	struct TArray<Unknown> Surfaces; // 0x30 (16)
};

// Class Engine.LightmassPortal
class ALightmassPortal : public UActor {

public:

	struct Unknown PortalComponent; // 0x318 (8)
};

// Class Engine.LightmassPortalComponent
class ULightmassPortalComponent : public USceneComponent {

public:

	struct Unknown PreviewBox; // 0x228 (8)
};

// Class Engine.LightmassPrimitiveSettingsObject
class ULightmassPrimitiveSettingsObject : public Object {

public:

	struct Unknown LightmassSettings; // 0x28 (24)
};

// Class Engine.LocalLightComponent
class ULocalLightComponent : public ULightComponent {

public:

	enum class Unknow IntensityUnits; // 0x370 (1)
	float Radius; // 0x374 (4)
	float AttenuationRadius; // 0x378 (4)
	struct Unknown LightmassSettings; // 0x37C (12)

	void SetIntensityUnits(enum class Unknow NewIntensityUnits); // Function Engine.LocalLightComponent.SetIntensityUnits(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4540640>
	void SetAttenuationRadius(float NewRadius); // Function Engine.LocalLightComponent.SetAttenuationRadius(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4540380>
	float GetUnitsConversionFactor(enum class Unknow SrcUnits, enum class Unknow TargetUnits, float CosHalfConeAngle); // Function Engine.LocalLightComponent.GetUnitsConversionFactor(Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4540160>
};

// Class Engine.LODActor
class ALODActor : public UActor {

public:

	struct Unknown StaticMeshComponent; // 0x318 (8)
	struct TMap<Unknown, Unknown> ImpostersStaticMeshComponents; // 0x320 (80)
	struct Unknown Proxy; // 0x370 (8)
	struct FName Key; // 0x378 (8)
	float LODDrawDistance; // 0x380 (4)
	int32_t LODLevel; // 0x384 (4)
	struct TArray<Unknown> SubActors; // 0x388 (16)
	char CachedNumHLODLevels; // 0x398 (1)
};

// Class Engine.MapBuildDataRegistry
class UMapBuildDataRegistry : public Object {

public:

	char LevelLightingQuality; // 0x28 (1)
};

// Class Engine.Material
class UMaterial : public UMaterialInterface {

public:

	struct Unknown PhysMaterial; // 0x88 (8)
	struct Unknown PhysMaterialMask; // 0x90 (8)
	struct Unknown PhysicalMaterialMap[0x8]; // 0x98 (64)
	struct Unknown Metallic; // 0xD8 (12)
	struct Unknown Specular; // 0xEC (12)
	struct Unknown Anisotropy; // 0x100 (12)
	struct Unknown Normal; // 0x114 (12)
	struct Unknown Tangent; // 0x128 (12)
	struct Unknown EmissiveColor; // 0x13C (12)
	char MaterialDomain; // 0x150 (1)
	char BlendMode; // 0x151 (1)
	char DecalBlendMode; // 0x152 (1)
	char MaterialDecalResponse; // 0x153 (1)
	char ShadingModel; // 0x154 (1)
	char bCastDynamicShadowAsMasked : 0; // 0x155 (1)
	struct Unknown ShadingModels; // 0x156 (2)
	float OpacityMaskClipValue; // 0x158 (4)
	struct Unknown WorldPositionOffset; // 0x15C (12)
	struct Unknown Refraction; // 0x170 (12)
	struct Unknown MaterialAttributes; // 0x184 (16)
	struct Unknown PixelDepthOffset; // 0x19C (12)
	struct Unknown ShadingModelFromMaterialExpression; // 0x1B0 (12)
	char bEnableSeparateTranslucency : 0; // 0x1C4 (1)
	char bEnableResponsiveAA : 0; // 0x1C4 (1)
	char bEnableTranslucentVelocity : 0; // 0x1C8 (1)
	char bScreenSpaceReflections : 0; // 0x1CC (1)
	char bContactShadows : 0; // 0x1CC (1)
	char TwoSided : 0; // 0x1CC (1)
	char DitheredLODTransition : 0; // 0x1CC (1)
	char DitherOpacityMask : 0; // 0x1CC (1)
	char bAllowNegativeEmissiveColor : 0; // 0x1CC (1)
	char TranslucencyLightingMode; // 0x1CD (1)
	char bEnableMobileSeparateTranslucency : 0; // 0x1CE (1)
	int32_t NumCustomizedUVs; // 0x1D0 (4)
	float TranslucencyDirectionalLightingIntensity; // 0x1D4 (4)
	float TranslucentShadowDensityScale; // 0x1D8 (4)
	float TranslucentSelfShadowDensityScale; // 0x1DC (4)
	float TranslucentSelfShadowSecondDensityScale; // 0x1E0 (4)
	float TranslucentSelfShadowSecondOpacity; // 0x1E4 (4)
	float TranslucentBackscatteringExponent; // 0x1E8 (4)
	struct Unknown TranslucentMultipleScatteringExtinction; // 0x1EC (16)
	float TranslucentShadowStartOffset; // 0x1FC (4)
	char bDisableDepthTest : 0; // 0x200 (1)
	char bWriteOnlyAlpha : 0; // 0x200 (1)
	char bGenerateSphericalParticleNormals : 0; // 0x200 (1)
	char bTangentSpaceNormal : 0; // 0x200 (1)
	char bUseEmissiveForDynamicAreaLighting : 0; // 0x200 (1)
	char bBlockGI : 0; // 0x200 (1)
	char bUsedAsSpecialEngineMaterial : 0; // 0x200 (1)
	char bUsedWithSkeletalMesh : 0; // 0x200 (1)
	char bUsedWithEditorCompositing : 0; // 0x201 (1)
	char bUsedWithParticleSprites : 0; // 0x201 (1)
	char bUsedWithBeamTrails : 0; // 0x201 (1)
	char bUsedWithMeshParticles : 0; // 0x201 (1)
	char bUsedWithNiagaraSprites : 0; // 0x201 (1)
	char bUsedWithNiagaraRibbons : 0; // 0x201 (1)
	char bUsedWithNiagaraMeshParticles : 0; // 0x201 (1)
	char bUsedWithGeometryCache : 0; // 0x201 (1)
	char bUsedWithStaticLighting : 0; // 0x202 (1)
	char bUsedWithMorphTargets : 0; // 0x202 (1)
	char bUsedWithSplineMeshes : 0; // 0x202 (1)
	char bUsedWithInstancedStaticMeshes : 0; // 0x202 (1)
	char bUsedWithGeometryCollections : 0; // 0x202 (1)
	char bUsesDistortion : 0; // 0x202 (1)
	char bUsedWithClothing : 0; // 0x202 (1)
	char bUsedWithWater : 0; // 0x204 (1)
	char bUsedWithHairStrands : 0; // 0x204 (1)
	char bUsedWithLidarPointCloud : 0; // 0x204 (1)
	char bUsedWithUI : 0; // 0x208 (1)
	char bAutomaticallySetUsageInEditor : 0; // 0x208 (1)
	char bFullyRough : 0; // 0x208 (1)
	char bUseFullPrecision : 0; // 0x208 (1)
	char bUseLightmapDirectionality : 0; // 0x208 (1)
	char bForwardRenderUsePreintegratedGFForSimpleIBL : 0; // 0x20C (1)
	char bUseHQForwardReflections : 0; // 0x210 (1)
	char bUsePlanarForwardReflections : 0; // 0x210 (1)
	char bNormalCurvatureToRoughness : 0; // 0x210 (1)
	char D3D11TessellationMode; // 0x211 (1)
	char bEnableCrackFreeDisplacement : 0; // 0x212 (1)
	char bEnableAdaptiveTessellation : 0; // 0x212 (1)
	char AllowTranslucentCustomDepthWrites : 0; // 0x212 (1)
	char Wireframe : 0; // 0x212 (1)
	char bCanMaskedBeAssumedOpaque : 0; // 0x212 (1)
	char bIsMasked : 0; // 0x212 (1)
	char bIsPreviewMaterial : 0; // 0x212 (1)
	char bIsFunctionPreviewMaterial : 0; // 0x212 (1)
	char bUseMaterialAttributes : 0; // 0x213 (1)
	char bCastRayTracedShadows : 0; // 0x213 (1)
	char bUseTranslucencyVertexFog : 0; // 0x213 (1)
	char bIsSky : 0; // 0x213 (1)
	char bComputeFogPerPixel : 0; // 0x213 (1)
	char bOutputTranslucentVelocity : 0; // 0x213 (1)
	char bAllowDevelopmentShaderCompile : 0; // 0x213 (1)
	char bIsMaterialEditorStatsMaterial : 0; // 0x213 (1)
	char BlendableLocation; // 0x214 (1)
	char BlendableOutputAlpha : 0; // 0x215 (1)
	char bEnableStencilTest : 0; // 0x215 (1)
	char StencilCompare; // 0x216 (1)
	char StencilRefValue; // 0x217 (1)
	char RefractionMode; // 0x218 (1)
	int32_t BlendablePriority; // 0x21C (4)
	char bIsBlendable : 0; // 0x220 (1)
	uint32_t UsageFlagWarnings; // 0x224 (4)
	float RefractionDepthBias; // 0x228 (4)
	struct Unknown StateID; // 0x22C (16)
	float MaxDisplacement; // 0x23C (4)
	struct Unknown CachedExpressionData; // 0x2C8 (552)
};

// Class Engine.MaterialBillboardComponent
class UMaterialBillboardComponent : public UPrimitiveComponent {

public:

	struct TArray<Unknown> Elements; // 0x4A8 (16)

	void SetElements(struct TArray<Unknown>& NewElements); // Function Engine.MaterialBillboardComponent.SetElements(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x4545040>
	void AddElement(struct Unknown Material, struct Unknown DistanceToOpacityCurve, char bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, struct Unknown DistanceToSizeCurve); // Function Engine.MaterialBillboardComponent.AddElement(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4544E70>
};

// Class Engine.MaterialExpressionAbs
class UMaterialExpressionAbs : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionAdd
class UMaterialExpressionAdd : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (12)
	struct Unknown B; // 0x54 (12)
	float ConstA; // 0x68 (4)
	float ConstB; // 0x6C (4)
};

// Class Engine.MaterialExpressionAntialiasedTextureMask
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D {

public:

	float threshold; // 0xF0 (4)
	char Channel; // 0xF4 (1)
};

// Class Engine.MaterialExpressionAppendVector
class UMaterialExpressionAppendVector : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (12)
	struct Unknown B; // 0x54 (12)
};

// Class Engine.MaterialExpressionArccosine
class UMaterialExpressionArccosine : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionArccosineFast
class UMaterialExpressionArccosineFast : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionArcsine
class UMaterialExpressionArcsine : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionArcsineFast
class UMaterialExpressionArcsineFast : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionArctangent
class UMaterialExpressionArctangent : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionArctangent2
class UMaterialExpressionArctangent2 : public UMaterialExpression {

public:

	struct Unknown Y; // 0x40 (12)
	struct Unknown X; // 0x54 (12)
};

// Class Engine.MaterialExpressionArctangent2Fast
class UMaterialExpressionArctangent2Fast : public UMaterialExpression {

public:

	struct Unknown Y; // 0x40 (12)
	struct Unknown X; // 0x54 (12)
};

// Class Engine.MaterialExpressionArctangentFast
class UMaterialExpressionArctangentFast : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionAtmosphericFogColor
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression {

public:

	struct Unknown WorldPosition; // 0x40 (12)
};

// Class Engine.MaterialExpressionBentNormalCustomOutput
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionBlackBody
class UMaterialExpressionBlackBody : public UMaterialExpression {

public:

	struct Unknown Temp; // 0x40 (12)
};

// Class Engine.MaterialExpressionBlendMaterialAttributes
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (16)
	struct Unknown B; // 0x58 (16)
	struct Unknown ALPHA; // 0x70 (12)
	char PixelAttributeBlendType; // 0x84 (1)
	char VertexAttributeBlendType; // 0x85 (1)
};

// Class Engine.MaterialExpressionBreakMaterialAttributes
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression {

public:

	struct Unknown MaterialAttributes; // 0x40 (16)
};

// Class Engine.MaterialExpressionBumpOffset
class UMaterialExpressionBumpOffset : public UMaterialExpression {

public:

	struct Unknown Coordinate; // 0x40 (12)
	struct Unknown Height; // 0x54 (12)
	struct Unknown HeightRatioInput; // 0x68 (12)
	float HeightRatio; // 0x7C (4)
	float ReferencePlane; // 0x80 (4)
	uint32_t ConstCoordinate; // 0x84 (4)
};

// Class Engine.MaterialExpressionCeil
class UMaterialExpressionCeil : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionParameter
class UMaterialExpressionParameter : public UMaterialExpression {

public:

	struct FName ParameterName; // 0x40 (8)
	struct Unknown ExpressionGUID; // 0x48 (16)
};

// Class Engine.MaterialExpressionVectorParameter
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter {

public:

	struct Unknown DefaultValue; // 0x58 (16)
	char bUseCustomPrimitiveData : 0; // 0x68 (1)
	char PrimitiveDataIndex; // 0x69 (1)
};

// Class Engine.MaterialExpressionChannelMaskParameter
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter {

public:

	char MaskChannel; // 0x70 (1)
	struct Unknown Input; // 0x74 (12)
};

// Class Engine.MaterialExpressionClamp
class UMaterialExpressionClamp : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
	struct Unknown Min; // 0x54 (12)
	struct Unknown MAX; // 0x68 (12)
	char ClampMode; // 0x7C (1)
	float MinDefault; // 0x80 (4)
	float MaxDefault; // 0x84 (4)
};

// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionCollectionParameter
class UMaterialExpressionCollectionParameter : public UMaterialExpression {

public:

	struct Unknown Collection; // 0x40 (8)
	struct FName ParameterName; // 0x48 (8)
	struct Unknown ParameterId; // 0x50 (16)
};

// Class Engine.MaterialExpressionComment
class UMaterialExpressionComment : public UMaterialExpression {

public:

	int32_t SizeX; // 0x40 (4)
	int32_t SizeY; // 0x44 (4)
	struct FString Text; // 0x48 (16)
	struct Unknown CommentColor; // 0x58 (16)
	int32_t FontSize; // 0x68 (4)
};

// Class Engine.MaterialExpressionComponentMask
class UMaterialExpressionComponentMask : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
	char R : 0; // 0x54 (1)
	char G : 0; // 0x54 (1)
	char B : 0; // 0x54 (1)
	char A : 0; // 0x54 (1)
};

// Class Engine.MaterialExpressionConstant
class UMaterialExpressionConstant : public UMaterialExpression {

public:

	float R; // 0x40 (4)
};

// Class Engine.MaterialExpressionConstant2Vector
class UMaterialExpressionConstant2Vector : public UMaterialExpression {

public:

	float R; // 0x40 (4)
	float G; // 0x44 (4)
};

// Class Engine.MaterialExpressionConstant3Vector
class UMaterialExpressionConstant3Vector : public UMaterialExpression {

public:

	struct Unknown Constant; // 0x40 (16)
};

// Class Engine.MaterialExpressionConstant4Vector
class UMaterialExpressionConstant4Vector : public UMaterialExpression {

public:

	struct Unknown Constant; // 0x40 (16)
};

// Class Engine.MaterialExpressionConstantBiasScale
class UMaterialExpressionConstantBiasScale : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
	float Bias; // 0x54 (4)
	float Scale; // 0x58 (4)
};

// Class Engine.MaterialExpressionCosine
class UMaterialExpressionCosine : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
	float Period; // 0x54 (4)
};

// Class Engine.MaterialExpressionCrossProduct
class UMaterialExpressionCrossProduct : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (12)
	struct Unknown B; // 0x54 (12)
};

// Class Engine.MaterialExpressionScalarParameter
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter {

public:

	float DefaultValue; // 0x58 (4)
	char bUseCustomPrimitiveData : 0; // 0x5C (1)
	char PrimitiveDataIndex; // 0x5D (1)
};

// Class Engine.MaterialExpressionCurveAtlasRowParameter
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter {

public:

	struct Unknown Curve; // 0x60 (8)
	struct Unknown Atlas; // 0x68 (8)
	struct Unknown InputTime; // 0x70 (12)
};

// Class Engine.MaterialExpressionCustom
class UMaterialExpressionCustom : public UMaterialExpression {

public:

	struct FString Code; // 0x40 (16)
	char OutputType; // 0x50 (1)
	struct FString Description; // 0x58 (16)
	struct TArray<Unknown> Inputs; // 0x68 (16)
	struct TArray<Unknown> AdditionalDefines; // 0x78 (16)
	struct TArray<Unknown> IncludeFilePaths; // 0x88 (16)
};

// Class Engine.MaterialExpressionDDX
class UMaterialExpressionDDX : public UMaterialExpression {

public:

	struct Unknown Value; // 0x40 (12)
};

// Class Engine.MaterialExpressionDDY
class UMaterialExpressionDDY : public UMaterialExpression {

public:

	struct Unknown Value; // 0x40 (12)
};

// Class Engine.MaterialExpressionDecalMipmapLevel
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression {

public:

	struct Unknown TextureSize; // 0x40 (12)
	float ConstWidth; // 0x54 (4)
	float ConstHeight; // 0x58 (4)
};

// Class Engine.MaterialExpressionDepthFade
class UMaterialExpressionDepthFade : public UMaterialExpression {

public:

	struct Unknown InOpacity; // 0x40 (12)
	struct Unknown FadeDistance; // 0x54 (12)
	float OpacityDefault; // 0x68 (4)
	float FadeDistanceDefault; // 0x6C (4)
};

// Class Engine.MaterialExpressionDepthOfFieldFunction
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression {

public:

	char FunctionValue; // 0x40 (1)
	struct Unknown Depth; // 0x44 (12)
};

// Class Engine.MaterialExpressionDeriveNormalZ
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression {

public:

	struct Unknown InXY; // 0x40 (12)
};

// Class Engine.MaterialExpressionDesaturation
class UMaterialExpressionDesaturation : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
	struct Unknown Fraction; // 0x54 (12)
	struct Unknown LuminanceFactors; // 0x68 (16)
};

// Class Engine.MaterialExpressionDistance
class UMaterialExpressionDistance : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (12)
	struct Unknown B; // 0x54 (12)
};

// Class Engine.MaterialExpressionDistanceFieldGradient
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression {

public:

	struct Unknown Position; // 0x40 (12)
};

// Class Engine.MaterialExpressionDistanceToNearestSurface
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression {

public:

	struct Unknown Position; // 0x40 (12)
};

// Class Engine.MaterialExpressionDivide
class UMaterialExpressionDivide : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (12)
	struct Unknown B; // 0x54 (12)
	float ConstA; // 0x68 (4)
	float ConstB; // 0x6C (4)
};

// Class Engine.MaterialExpressionDotProduct
class UMaterialExpressionDotProduct : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (12)
	struct Unknown B; // 0x54 (12)
};

// Class Engine.MaterialExpressionDynamicParameter
class UMaterialExpressionDynamicParameter : public UMaterialExpression {

public:

	struct TArray<Unknown> ParamNames; // 0x40 (16)
	struct Unknown DefaultValue; // 0x50 (16)
	uint32_t ParameterIndex; // 0x60 (4)
};

// Class Engine.MaterialExpressionFeatureLevelSwitch
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression {

public:

	struct Unknown Default; // 0x40 (12)
	struct Unknown Inputs[0x4]; // 0x54 (48)
};

// Class Engine.MaterialExpressionFloor
class UMaterialExpressionFloor : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionFmod
class UMaterialExpressionFmod : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (12)
	struct Unknown B; // 0x54 (12)
};

// Class Engine.MaterialExpressionFontSample
class UMaterialExpressionFontSample : public UMaterialExpression {

public:

	struct Unknown Font; // 0x40 (8)
	int32_t FontTexturePage; // 0x48 (4)
};

// Class Engine.MaterialExpressionFontSampleParameter
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample {

public:

	struct FName ParameterName; // 0x50 (8)
	struct Unknown ExpressionGUID; // 0x58 (16)
	struct FName Group; // 0x68 (8)
};

// Class Engine.MaterialExpressionFrac
class UMaterialExpressionFrac : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionFresnel
class UMaterialExpressionFresnel : public UMaterialExpression {

public:

	struct Unknown ExponentIn; // 0x40 (12)
	float Exponent; // 0x54 (4)
	struct Unknown BaseReflectFractionIn; // 0x58 (12)
	float BaseReflectFraction; // 0x6C (4)
	struct Unknown Normal; // 0x70 (12)
};

// Class Engine.MaterialExpressionFunctionInput
class UMaterialExpressionFunctionInput : public UMaterialExpression {

public:

	struct Unknown Preview; // 0x40 (12)
	struct FName InputName; // 0x54 (8)
	struct FString Description; // 0x60 (16)
	struct Unknown ID; // 0x70 (16)
	char InputType; // 0x80 (1)
	struct Unknown PreviewValue; // 0x90 (16)
	char bUsePreviewValueAsDefault : 0; // 0xA0 (1)
	int32_t SortPriority; // 0xA4 (4)
	char bCompilingFunctionPreview : 0; // 0xA8 (1)
};

// Class Engine.MaterialExpressionFunctionOutput
class UMaterialExpressionFunctionOutput : public UMaterialExpression {

public:

	struct FName OutputName; // 0x40 (8)
	struct FString Description; // 0x48 (16)
	int32_t SortPriority; // 0x58 (4)
	struct Unknown A; // 0x5C (12)
	char bLastPreviewed : 0; // 0x70 (1)
	struct Unknown ID; // 0x74 (16)
};

// Class Engine.MaterialExpressionGetMaterialAttributes
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression {

public:

	struct Unknown MaterialAttributes; // 0x40 (16)
	struct TArray<Unknown> AttributeGetTypes; // 0x58 (16)
};

// Class Engine.MaterialExpressionGIReplace
class UMaterialExpressionGIReplace : public UMaterialExpression {

public:

	struct Unknown Default; // 0x40 (12)
	struct Unknown StaticIndirect; // 0x54 (12)
	struct Unknown DynamicIndirect; // 0x68 (12)
};

// Class Engine.MaterialExpressionIf
class UMaterialExpressionIf : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (12)
	struct Unknown B; // 0x54 (12)
	struct Unknown AGreaterThanB; // 0x68 (12)
	struct Unknown AEqualsB; // 0x7C (12)
	struct Unknown ALessThanB; // 0x90 (12)
	float EqualsThreshold; // 0xA4 (4)
	float ConstB; // 0xA8 (4)
	float ConstAEqualsB; // 0xAC (4)
};

// Class Engine.MaterialExpressionLightmassReplace
class UMaterialExpressionLightmassReplace : public UMaterialExpression {

public:

	struct Unknown Realtime; // 0x40 (12)
	struct Unknown Lightmass; // 0x54 (12)
};

// Class Engine.MaterialExpressionLinearInterpolate
class UMaterialExpressionLinearInterpolate : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (12)
	struct Unknown B; // 0x54 (12)
	struct Unknown ALPHA; // 0x68 (12)
	float ConstA; // 0x7C (4)
	float ConstB; // 0x80 (4)
	float ConstAlpha; // 0x84 (4)
};

// Class Engine.MaterialExpressionLogarithm10
class UMaterialExpressionLogarithm10 : public UMaterialExpression {

public:

	struct Unknown X; // 0x40 (12)
};

// Class Engine.MaterialExpressionLogarithm2
class UMaterialExpressionLogarithm2 : public UMaterialExpression {

public:

	struct Unknown X; // 0x40 (12)
};

// Class Engine.MaterialExpressionMakeMaterialAttributes
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression {

public:

	struct Unknown BaseColor; // 0x40 (12)
	struct Unknown Metallic; // 0x54 (12)
	struct Unknown Specular; // 0x68 (12)
	struct Unknown Roughness; // 0x7C (12)
	struct Unknown Anisotropy; // 0x90 (12)
	struct Unknown EmissiveColor; // 0xA4 (12)
	struct Unknown Opacity; // 0xB8 (12)
	struct Unknown OpacityMask; // 0xCC (12)
	struct Unknown Normal; // 0xE0 (12)
	struct Unknown Tangent; // 0xF4 (12)
	struct Unknown WorldPositionOffset; // 0x108 (12)
	struct Unknown WorldDisplacement; // 0x11C (12)
	struct Unknown TessellationMultiplier; // 0x130 (12)
	struct Unknown SubsurfaceColor; // 0x144 (12)
	struct Unknown ClearCoat; // 0x158 (12)
	struct Unknown ClearCoatRoughness; // 0x16C (12)
	struct Unknown AmbientOcclusion; // 0x180 (12)
	struct Unknown Refraction; // 0x194 (12)
	struct Unknown CustomizedUVs[0x8]; // 0x1A8 (96)
	struct Unknown PixelDepthOffset; // 0x248 (12)
	struct Unknown ShadingModel; // 0x25C (12)
};

// Class Engine.MaterialExpressionMapARPassthroughCameraUV
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression {

public:

	struct Unknown Coordinates; // 0x40 (12)
};

// Class Engine.MaterialExpressionMaterialAttributeLayers
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression {

public:

	struct FName ParameterName; // 0x40 (8)
	struct Unknown ExpressionGUID; // 0x48 (16)
	struct Unknown Input; // 0x58 (16)
	struct Unknown DefaultLayers; // 0x70 (64)
	struct TArray<Unknown> LayerCallers; // 0xB0 (16)
	int32_t NumActiveLayerCallers; // 0xC0 (4)
	struct TArray<Unknown> BlendCallers; // 0xC8 (16)
	int32_t NumActiveBlendCallers; // 0xD8 (4)
	char bIsLayerGraphBuilt : 0; // 0xDC (1)
};

// Class Engine.MaterialExpressionMaterialFunctionCall
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression {

public:

	struct Unknown MaterialFunction; // 0x40 (8)
	struct Unknown FunctionParameterInfo; // 0x48 (16)
};

// Class Engine.MaterialExpressionMaterialProxyReplace
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression {

public:

	struct Unknown Realtime; // 0x40 (12)
	struct Unknown MaterialProxy; // 0x54 (12)
};

// Class Engine.MaterialExpressionMax
class UMaterialExpressionMax : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (12)
	struct Unknown B; // 0x54 (12)
	float ConstA; // 0x68 (4)
	float ConstB; // 0x6C (4)
};

// Class Engine.MaterialExpressionMin
class UMaterialExpressionMin : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (12)
	struct Unknown B; // 0x54 (12)
	float ConstA; // 0x68 (4)
	float ConstB; // 0x6C (4)
};

// Class Engine.MaterialExpressionMultiply
class UMaterialExpressionMultiply : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (12)
	struct Unknown B; // 0x54 (12)
	float ConstA; // 0x68 (4)
	float ConstB; // 0x6C (4)
};

// Class Engine.MaterialExpressionNoise
class UMaterialExpressionNoise : public UMaterialExpression {

public:

	struct Unknown Position; // 0x40 (12)
	struct Unknown FilterWidth; // 0x54 (12)
	float Scale; // 0x68 (4)
	int32_t Quality; // 0x6C (4)
	char NoiseFunction; // 0x70 (1)
	char bTurbulence : 0; // 0x74 (1)
	int32_t Levels; // 0x78 (4)
	float OutputMin; // 0x7C (4)
	float OutputMax; // 0x80 (4)
	float LevelScale; // 0x84 (4)
	char bTiling : 0; // 0x88 (1)
	uint32_t RepeatSize; // 0x8C (4)
};

// Class Engine.MaterialExpressionNormalize
class UMaterialExpressionNormalize : public UMaterialExpression {

public:

	struct Unknown VectorInput; // 0x40 (12)
};

// Class Engine.MaterialExpressionOneMinus
class UMaterialExpressionOneMinus : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionPanner
class UMaterialExpressionPanner : public UMaterialExpression {

public:

	struct Unknown Coordinate; // 0x40 (12)
	struct Unknown Time; // 0x54 (12)
	struct Unknown Speed; // 0x68 (12)
	float SpeedX; // 0x7C (4)
	float SpeedY; // 0x80 (4)
	uint32_t ConstCoordinate; // 0x84 (4)
	char bFractionalPart : 0; // 0x88 (1)
};

// Class Engine.MaterialExpressionParticleSubUV
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample {

public:

	char bBlend : 0; // 0xD0 (1)
};

// Class Engine.MaterialExpressionPerInstanceCustomData
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression {

public:

	struct Unknown DefaultValue; // 0x40 (12)
	float ConstDefaultValue; // 0x54 (4)
	uint32_t DataIndex; // 0x58 (4)
};

// Class Engine.MaterialExpressionPower
class UMaterialExpressionPower : public UMaterialExpression {

public:

	struct Unknown Base; // 0x40 (12)
	struct Unknown Exponent; // 0x54 (12)
	float ConstExponent; // 0x68 (4)
};

// Class Engine.MaterialExpressionPreviousFrameSwitch
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression {

public:

	struct Unknown CurrentFrame; // 0x40 (12)
	struct Unknown PreviousFrame; // 0x54 (12)
};

// Class Engine.MaterialExpressionQualitySwitch
class UMaterialExpressionQualitySwitch : public UMaterialExpression {

public:

	struct Unknown Default; // 0x40 (12)
	struct Unknown Inputs[0x3]; // 0x54 (36)
};

// Class Engine.MaterialExpressionRayTracingQualitySwitch
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression {

public:

	struct Unknown Normal; // 0x40 (12)
	struct Unknown RayTraced; // 0x54 (12)
};

// Class Engine.MaterialExpressionRebaseToZeroOrigin
class UMaterialExpressionRebaseToZeroOrigin : public UMaterialExpression {

public:

	struct Unknown InputVector; // 0x40 (12)
};

// Class Engine.MaterialExpressionReflectionVectorWS
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression {

public:

	struct Unknown CustomWorldNormal; // 0x40 (12)
	char bNormalizeCustomWorldNormal : 0; // 0x54 (1)
};

// Class Engine.MaterialExpressionReroute
class UMaterialExpressionReroute : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionRotateAboutAxis
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression {

public:

	struct Unknown NormalizedRotationAxis; // 0x40 (12)
	struct Unknown RotationAngle; // 0x54 (12)
	struct Unknown PivotPoint; // 0x68 (12)
	struct Unknown Position; // 0x7C (12)
	float Period; // 0x90 (4)
};

// Class Engine.MaterialExpressionRotator
class UMaterialExpressionRotator : public UMaterialExpression {

public:

	struct Unknown Coordinate; // 0x40 (12)
	struct Unknown Time; // 0x54 (12)
	float CenterX; // 0x68 (4)
	float CenterY; // 0x6C (4)
	float Speed; // 0x70 (4)
	uint32_t ConstCoordinate; // 0x74 (4)
};

// Class Engine.MaterialExpressionRound
class UMaterialExpressionRound : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput {

public:

	struct Unknown BaseColor; // 0x40 (12)
	struct Unknown Specular; // 0x54 (12)
	struct Unknown Roughness; // 0x68 (12)
	struct Unknown Normal; // 0x7C (12)
	struct Unknown WorldHeight; // 0x90 (12)
	struct Unknown Opacity; // 0xA4 (12)
	struct Unknown Mask; // 0xB8 (12)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression {

public:

	struct Unknown Default; // 0x40 (12)
	struct Unknown VirtualTextureOutput; // 0x54 (12)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression {

public:

	struct Unknown Coordinates; // 0x40 (12)
	struct Unknown WorldPosition; // 0x54 (12)
	struct Unknown MipValue; // 0x68 (12)
	struct Unknown VirtualTexture; // 0x80 (8)
	enum class Unknow MaterialType; // 0x88 (1)
	char bSinglePhysicalSpace : 0; // 0x89 (1)
	char MipValueMode; // 0x8A (1)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample {

public:

	struct FName ParameterName; // 0x90 (8)
	struct Unknown ExpressionGUID; // 0x98 (16)
	struct FName Group; // 0xA8 (8)
};

// Class Engine.MaterialExpressionSaturate
class UMaterialExpressionSaturate : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionSceneColor
class UMaterialExpressionSceneColor : public UMaterialExpression {

public:

	char InputMode; // 0x40 (1)
	struct Unknown Input; // 0x44 (12)
	struct Unknown OffsetFraction; // 0x58 (12)
	struct Unknown ConstInput; // 0x6C (8)
};

// Class Engine.MaterialExpressionSceneDepth
class UMaterialExpressionSceneDepth : public UMaterialExpression {

public:

	char InputMode; // 0x40 (1)
	struct Unknown Input; // 0x44 (12)
	struct Unknown Coordinates; // 0x58 (12)
	struct Unknown ConstInput; // 0x6C (8)
};

// Class Engine.MaterialExpressionSceneTexture
class UMaterialExpressionSceneTexture : public UMaterialExpression {

public:

	struct Unknown Coordinates; // 0x40 (12)
	char SceneTextureId; // 0x54 (1)
	char bFiltered : 0; // 0x55 (1)
};

// Class Engine.MaterialExpressionSetMaterialAttributes
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression {

public:

	struct TArray<Unknown> Inputs; // 0x40 (16)
	struct TArray<Unknown> AttributeSetTypes; // 0x50 (16)
};

// Class Engine.MaterialExpressionShaderStageSwitch
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression {

public:

	struct Unknown PixelShader; // 0x40 (12)
	struct Unknown VertexShader; // 0x54 (12)
};

// Class Engine.MaterialExpressionShadingModel
class UMaterialExpressionShadingModel : public UMaterialExpression {

public:

	char ShadingModel; // 0x40 (1)
};

// Class Engine.MaterialExpressionShadingPathSwitch
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression {

public:

	struct Unknown Default; // 0x40 (12)
	struct Unknown Inputs[0x3]; // 0x54 (36)
};

// Class Engine.MaterialExpressionShadowReplace
class UMaterialExpressionShadowReplace : public UMaterialExpression {

public:

	struct Unknown Default; // 0x40 (12)
	struct Unknown Shadow; // 0x54 (12)
};

// Class Engine.MaterialExpressionSign
class UMaterialExpressionSign : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionSine
class UMaterialExpressionSine : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
	float Period; // 0x54 (4)
};

// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput {

public:

	struct Unknown ScatteringCoefficients; // 0x40 (12)
	struct Unknown AbsorptionCoefficients; // 0x54 (12)
	struct Unknown PhaseG; // 0x68 (12)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression {

public:

	int32_t LightIndex; // 0x40 (4)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression {

public:

	int32_t LightIndex; // 0x40 (4)
	struct Unknown WorldPosition; // 0x44 (12)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression {

public:

	int32_t LightIndex; // 0x40 (4)
};

// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression {

public:

	struct Unknown WorldPosition; // 0x40 (12)
};

// Class Engine.MaterialExpressionSobol
class UMaterialExpressionSobol : public UMaterialExpression {

public:

	struct Unknown cell; // 0x40 (12)
	struct Unknown Index; // 0x54 (12)
	struct Unknown Seed; // 0x68 (12)
	uint32_t ConstIndex; // 0x7C (4)
	struct Unknown ConstSeed; // 0x80 (8)
};

// Class Engine.MaterialExpressionSpeedTree
class UMaterialExpressionSpeedTree : public UMaterialExpression {

public:

	struct Unknown GeometryInput; // 0x40 (12)
	struct Unknown WindInput; // 0x54 (12)
	struct Unknown LODInput; // 0x68 (12)
	struct Unknown ExtraBendWS; // 0x7C (12)
	char GeometryType; // 0x90 (1)
	char WindType; // 0x91 (1)
	char LODType; // 0x92 (1)
	float BillboardThreshold; // 0x94 (4)
	char bAccurateWindVelocities : 0; // 0x98 (1)
};

// Class Engine.MaterialExpressionSphereMask
class UMaterialExpressionSphereMask : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (12)
	struct Unknown B; // 0x54 (12)
	struct Unknown Radius; // 0x68 (12)
	struct Unknown Hardness; // 0x7C (12)
	float AttenuationRadius; // 0x90 (4)
	float HardnessPercent; // 0x94 (4)
};

// Class Engine.MaterialExpressionSphericalParticleOpacity
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression {

public:

	struct Unknown Density; // 0x40 (12)
	float ConstantDensity; // 0x54 (4)
};

// Class Engine.MaterialExpressionSquareRoot
class UMaterialExpressionSquareRoot : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionStaticBool
class UMaterialExpressionStaticBool : public UMaterialExpression {

public:

	char Value : 0; // 0x40 (1)
};

// Class Engine.MaterialExpressionStaticBoolParameter
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter {

public:

	char DefaultValue : 0; // 0x58 (1)
};

// Class Engine.MaterialExpressionStaticComponentMaskParameter
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter {

public:

	struct Unknown Input; // 0x58 (12)
	char DefaultR : 0; // 0x6C (1)
	char DefaultG : 0; // 0x6C (1)
	char DefaultB : 0; // 0x6C (1)
	char DefaultA : 0; // 0x6C (1)
};

// Class Engine.MaterialExpressionStaticSwitch
class UMaterialExpressionStaticSwitch : public UMaterialExpression {

public:

	char DefaultValue : 0; // 0x40 (1)
	struct Unknown A; // 0x44 (12)
	struct Unknown B; // 0x58 (12)
	struct Unknown Value; // 0x6C (12)
};

// Class Engine.MaterialExpressionStaticSwitchParameter
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter {

public:

	struct Unknown A; // 0x60 (12)
	struct Unknown B; // 0x74 (12)
};

// Class Engine.MaterialExpressionSubtract
class UMaterialExpressionSubtract : public UMaterialExpression {

public:

	struct Unknown A; // 0x40 (12)
	struct Unknown B; // 0x54 (12)
	float ConstA; // 0x68 (4)
	float ConstB; // 0x6C (4)
};

// Class Engine.MaterialExpressionTangent
class UMaterialExpressionTangent : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
	float Period; // 0x54 (4)
};

// Class Engine.MaterialExpressionTangentOutput
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionTemporalSobol
class UMaterialExpressionTemporalSobol : public UMaterialExpression {

public:

	struct Unknown Index; // 0x40 (12)
	struct Unknown Seed; // 0x54 (12)
	uint32_t ConstIndex; // 0x68 (4)
	struct Unknown ConstSeed; // 0x6C (8)
};

// Class Engine.MaterialExpressionTextureCoordinate
class UMaterialExpressionTextureCoordinate : public UMaterialExpression {

public:

	int32_t CoordinateIndex; // 0x40 (4)
	float UTiling; // 0x44 (4)
	float VTiling; // 0x48 (4)
	char UnMirrorU : 0; // 0x4C (1)
	char UnMirrorV : 0; // 0x4C (1)
};

// Class Engine.MaterialExpressionTextureProperty
class UMaterialExpressionTextureProperty : public UMaterialExpression {

public:

	struct Unknown TextureObject; // 0x40 (12)
	char Property; // 0x54 (1)
};

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D {

public:

	char bBlend : 0; // 0xF0 (1)
};

// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput {

public:

	struct Unknown TransmittanceColor; // 0x40 (12)
};

// Class Engine.MaterialExpressionTime
class UMaterialExpressionTime : public UMaterialExpression {

public:

	char bIgnorePause : 0; // 0x40 (1)
	char bOverride_Period : 0; // 0x40 (1)
	float Period; // 0x44 (4)
};

// Class Engine.MaterialExpressionTransform
class UMaterialExpressionTransform : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
	char TransformSourceType; // 0x54 (1)
	char TransformType; // 0x55 (1)
};

// Class Engine.MaterialExpressionTransformPosition
class UMaterialExpressionTransformPosition : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
	char TransformSourceType; // 0x54 (1)
	char TransformType; // 0x55 (1)
};

// Class Engine.MaterialExpressionTruncate
class UMaterialExpressionTruncate : public UMaterialExpression {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionVectorNoise
class UMaterialExpressionVectorNoise : public UMaterialExpression {

public:

	struct Unknown Position; // 0x40 (12)
	char NoiseFunction; // 0x54 (1)
	int32_t Quality; // 0x58 (4)
	char bTiling : 0; // 0x5C (1)
	uint32_t TileSize; // 0x60 (4)
};

// Class Engine.MaterialExpressionVertexInterpolator
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput {

public:

	struct Unknown Input; // 0x40 (12)
};

// Class Engine.MaterialExpressionViewProperty
class UMaterialExpressionViewProperty : public UMaterialExpression {

public:

	char Property; // 0x40 (1)
};

// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression {

public:

	struct Unknown No; // 0x40 (12)
	struct Unknown Yes; // 0x54 (12)
};

// Class Engine.MaterialExpressionWorldPosition
class UMaterialExpressionWorldPosition : public UMaterialExpression {

public:

	char WorldPositionShaderOffset; // 0x40 (1)
};

// Class Engine.MaterialFunctionInterface
class UMaterialFunctionInterface : public Object {

public:

	struct Unknown StateID; // 0x28 (16)
	enum class Unknow MaterialFunctionUsage; // 0x38 (1)
};

// Class Engine.MaterialFunction
class UMaterialFunction : public UMaterialFunctionInterface {

public:

	struct FString Description; // 0x40 (16)
	char bExposeToLibrary : 0; // 0x50 (1)
	char bPrefixParameterNames : 0; // 0x50 (1)
	char bReentrantFlag : 0; // 0x50 (1)
};

// Class Engine.MaterialFunctionInstance
class UMaterialFunctionInstance : public UMaterialFunctionInterface {

public:

	struct Unknown Parent; // 0x40 (8)
	struct Unknown Base; // 0x48 (8)
	struct TArray<Unknown> ScalarParameterValues; // 0x50 (16)
	struct TArray<Unknown> VectorParameterValues; // 0x60 (16)
	struct TArray<Unknown> TextureParameterValues; // 0x70 (16)
	struct TArray<Unknown> FontParameterValues; // 0x80 (16)
	struct TArray<Unknown> StaticSwitchParameterValues; // 0x90 (16)
	struct TArray<Unknown> StaticComponentMaskParameterValues; // 0xA0 (16)
	struct TArray<Unknown> RuntimeVirtualTextureParameterValues; // 0xB0 (16)
};

// Class Engine.MaterialInstanceActor
class AMaterialInstanceActor : public UActor {

public:

	struct TArray<Unknown> TargetActors; // 0x318 (16)
};

// Class Engine.MaterialParameterCollection
class UMaterialParameterCollection : public Object {

public:

	struct Unknown StateID; // 0x28 (16)
	struct TArray<Unknown> ScalarParameters; // 0x38 (16)
	struct TArray<Unknown> VectorParameters; // 0x48 (16)
};

// Class Engine.MaterialParameterCollectionInstance
class UMaterialParameterCollectionInstance : public Object {

public:

	struct Unknown Collection; // 0x30 (8)
};

// Class Engine.MatineeActor
class AMatineeActor : public UActor {

public:

	struct Unknown MatineeData; // 0x318 (8)
	struct FName MatineeControllerName; // 0x320 (8)
	float PlayRate; // 0x328 (4)
	char bPlayOnLevelLoad : 0; // 0x32C (1)
	char bForceStartPos : 0; // 0x32C (1)
	float ForceStartPosition; // 0x330 (4)
	char bLooping : 0; // 0x334 (1)
	char bRewindOnPlay : 0; // 0x334 (1)
	char bNoResetOnRewind : 0; // 0x334 (1)
	char bRewindIfAlreadyPlaying : 0; // 0x334 (1)
	char bDisableRadioFilter : 0; // 0x334 (1)
	char bClientSideOnly : 0; // 0x334 (1)
	char bSkipUpdateIfNotVisible : 0; // 0x334 (1)
	char bIsSkippable : 0; // 0x334 (1)
	int32_t PreferredSplitScreenNum; // 0x338 (4)
	char bDisableMovementInput : 0; // 0x33C (1)
	char bDisableLookAtInput : 0; // 0x33C (1)
	char bHidePlayer : 0; // 0x33C (1)
	char bHideHud : 0; // 0x33C (1)
	struct TArray<Unknown> GroupActorInfos; // 0x340 (16)
	char bShouldShowGore : 0; // 0x350 (1)
	struct TArray<Unknown> GroupInst; // 0x358 (16)
	struct TArray<Unknown> CameraCuts; // 0x368 (16)
	char bIsPlaying : 0; // 0x378 (1)
	char bReversePlayback : 0; // 0x378 (1)
	char bPaused : 0; // 0x378 (1)
	char bPendingStop : 0; // 0x378 (1)
	float InterpPosition; // 0x37C (4)
	char ReplicationForceIsPlaying; // 0x384 (1)
	struct FMulticastInlineDelegate OnPlay; // 0x388 (16)
	struct FMulticastInlineDelegate OnStop; // 0x398 (16)
	struct FMulticastInlineDelegate OnPause; // 0x3A8 (16)

	void Stop(); // Function Engine.MatineeActor.Stop(Native|Public|BlueprintCallable) // <Game_BE.exe+0x1F3D150>
	void SetPosition(float NewPosition, char bJump); // Function Engine.MatineeActor.SetPosition(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x455C400>
	void SetLoopingState(char bNewLooping); // Function Engine.MatineeActor.SetLoopingState(Native|Public|BlueprintCallable) // <Game_BE.exe+0x455C370>
	void Reverse(); // Function Engine.MatineeActor.Reverse(Native|Public|BlueprintCallable) // <Game_BE.exe+0x1F3B8B0>
	void Play(); // Function Engine.MatineeActor.Play(Native|Public|BlueprintCallable) // <Game_BE.exe+0x124C7C0>
	void Pause(); // Function Engine.MatineeActor.Pause(Native|Public|BlueprintCallable) // <Game_BE.exe+0x11E2190>
	void EnableGroupByName(struct FString GroupName, char bEnable); // Function Engine.MatineeActor.EnableGroupByName(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x455BE10>
	void ChangePlaybackDirection(); // Function Engine.MatineeActor.ChangePlaybackDirection(Native|Public|BlueprintCallable) // <Game_BE.exe+0x445FE80>
};

// Class Engine.MatineeActorCameraAnim
class AMatineeActorCameraAnim : public AMatineeActor {

public:

	struct Unknown CameraAnim; // 0x3C0 (8)
};

// Class Engine.MeshSimplificationSettings
class UMeshSimplificationSettings : public UDeveloperSettings {

public:

	struct FName MeshReductionModuleName; // 0x38 (8)
};

// Class Engine.MicroTransactionBase
class UMicroTransactionBase : public UPlatformInterfaceBase {

public:

	struct TArray<Unknown> AvailableProducts; // 0x38 (16)
	struct FString LastError; // 0x48 (16)
	struct FString LastErrorSolution; // 0x58 (16)
};

// Class Engine.MK3DKillcamComponent
class UMK3DKillcamComponent : public UActorComponent {

public:

	struct FMulticastInlineDelegate OnMK3DKillcamCompleteEvent; // 0xB0 (16)
	struct TArray<Unknown> MK3DKillEvents; // 0xD8 (16)
	float KillcamBeforeSec; // 0xE8 (4)
	float KillcamAfterSec; // 0xEC (4)

	void OnJumpCompleteForKillcam(char bSuccess); // Function Engine.MK3DKillcamComponent.OnJumpCompleteForKillcam(Final|Native|Public) // <Game_BE.exe+0x455FAF0>
};

// Class Engine.MK3DTargetcamComponent
class UMK3DTargetcamComponent : public UActorComponent {

public:

	struct FMulticastInlineDelegate OnMK3DTargetcamCompleteEvent; // 0xB0 (16)
	struct TArray<Unknown> MK3DTargetEvents; // 0xD8 (16)

	void EnumerateMK3DTargetEvents(struct Unknown World); // Function Engine.MK3DTargetcamComponent.EnumerateMK3DTargetEvents(Final|Native|Public) // <Game_BE.exe+0x45634E0>
};

// Class Engine.MKDemoActorChannel
class UMKDemoActorChannel : public UActorChannel {

public:

	struct TArray<Unknown> PendingNetObjectsHolder; // 0x2F0 (16)
};

// Class Engine.ReplaySampleBase
class UReplaySampleBase : public Object {

public:

	char DataVersion; // 0x30 (1)
	float Time; // 0x34 (4)

	struct Unknown MakeReplaySample(struct Unknown Actor); // Function Engine.ReplaySampleBase.MakeReplaySample(Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // <Game_BE.exe+0x4564920>
};

// Class Engine.ModelComponent
class UModelComponent : public UPrimitiveComponent {

public:

	struct Unknown ModelBodySetup; // 0x4C0 (8)
};

// Class Engine.MorphTarget
class UMorphTarget : public Object {

public:

	struct Unknown BaseSkelMesh; // 0x28 (8)
};

// Class Engine.NavCollisionBase
class UNavCollisionBase : public Object {

public:

	char bIsDynamicObstacle : 0; // 0x28 (1)
};

// Class Engine.NavigationDataChunk
class UNavigationDataChunk : public Object {

public:

	struct FName NavigationDataName; // 0x28 (8)
};

// Class Engine.NavigationSystemConfig
class UNavigationSystemConfig : public Object {

public:

	struct Unknown NavigationSystemClass; // 0x28 (24)
	struct Unknown SupportedAgentsMask; // 0x40 (4)
	struct FName DefaultAgentName; // 0x44 (8)
	char bIsOverriden : 0; // 0x4C (1)
};

// Class Engine.NavLinkDefinition
class UNavLinkDefinition : public Object {

public:

	struct TArray<Unknown> LINKS; // 0x28 (16)
	struct TArray<Unknown> SegmentLinks; // 0x38 (16)
};

// Class Engine.NetworkSettings
class UNetworkSettings : public UDeveloperSettings {

public:

	char bVerifyPeer : 0; // 0x38 (1)
	char bEnableMultiplayerWorldOriginRebasing : 0; // 0x38 (1)
	int32_t MaxRepArraySize; // 0x3C (4)
	int32_t MaxRepArrayMemory; // 0x40 (4)
	struct TArray<Unknown> NetworkEmulationProfiles; // 0x48 (16)
};

// Class Engine.NodeMappingContainer
class UNodeMappingContainer : public Object {

public:

	struct TMap<Unknown, Unknown> SourceItems; // 0x28 (80)
	struct TMap<Unknown, Unknown> TargetItems; // 0x78 (80)
	struct TMap<Unknown, Unknown> SourceToTarget; // 0xC8 (80)
	struct Unknown SourceAsset; // 0x118 (40)
	struct Unknown TargetAsset; // 0x140 (40)
};

// Class Engine.ObjectLibrary
class UObjectLibrary : public Object {

public:

	struct Unknown* ObjectBaseClass; // 0x28 (8)
	char bHasBlueprintClasses : 0; // 0x30 (1)
	struct TArray<Unknown> Objects; // 0x38 (16)
	struct TArray<Unknown> WeakObjects; // 0x48 (16)
	char bUseWeakReferences : 0; // 0x58 (1)
	char bIsFullyLoaded : 0; // 0x59 (1)
};

// Class Engine.ObjectReferencer
class UObjectReferencer : public Object {

public:

	struct TArray<Unknown> ReferencedObjects; // 0x28 (16)
};

// Class Engine.PainCausingVolume
class APainCausingVolume : public APhysicsVolume {

public:

	char bPainCausing : 0; // 0x360 (1)
	float DamagePerSec; // 0x364 (4)
	struct Unknown* DamageType; // 0x368 (8)
	float PainInterval; // 0x370 (4)
	char bEntryPain : 0; // 0x374 (1)
	char BACKUP_bPainCausing : 0; // 0x374 (1)
	struct Unknown DamageInstigator; // 0x378 (8)
};

// Class Engine.ParticleEmitter
class UParticleEmitter : public Object {

public:

	struct FName EmitterName; // 0x28 (8)
	int32_t SubUVDataOffset; // 0x30 (4)
	char EmitterRenderMode; // 0x34 (1)
	enum class Unknow SignificanceLevel; // 0x35 (1)
	char bUseLegacySpawningBehavior : 0; // 0x37 (1)
	char ConvertedModules : 0; // 0x37 (1)
	char bIsSoloing : 0; // 0x37 (1)
	char bCookedOut : 0; // 0x37 (1)
	char bDisabledLODsKeepEmitterAlive : 0; // 0x37 (1)
	char bDisableWhenInsignficant : 0; // 0x38 (1)
	struct TArray<Unknown> LODLevels; // 0x40 (16)
	int32_t PeakActiveParticles; // 0x50 (4)
	int32_t InitialAllocationCount; // 0x54 (4)
	float QualityLevelSpawnRateScale; // 0x58 (4)
	uint32_t DetailModeBitmask; // 0x5C (4)
};

// Class Engine.ParticleLODLevel
class UParticleLODLevel : public Object {

public:

	int32_t Level; // 0x28 (4)
	char bEnabled : 0; // 0x2C (1)
	struct Unknown RequiredModule; // 0x30 (8)
	struct TArray<Unknown> Modules; // 0x38 (16)
	struct Unknown TypeDataModule; // 0x48 (8)
	struct Unknown SpawnModule; // 0x50 (8)
	struct Unknown EventGenerator; // 0x58 (8)
	struct TArray<Unknown> SpawningModules; // 0x60 (16)
	struct TArray<Unknown> SpawnModules; // 0x70 (16)
	struct TArray<Unknown> UpdateModules; // 0x80 (16)
	struct TArray<Unknown> OrbitModules; // 0x90 (16)
	struct TArray<Unknown> EventReceiverModules; // 0xA0 (16)
	char ConvertedModules : 0; // 0xB0 (1)
	int32_t PeakActiveParticles; // 0xB4 (4)
};

// Class Engine.ParticleModule
class UParticleModule : public Object {

public:

	char bSpawnModule : 0; // 0x28 (1)
	char bUpdateModule : 0; // 0x28 (1)
	char bFinalUpdateModule : 0; // 0x28 (1)
	char bUpdateForGPUEmitter : 0; // 0x28 (1)
	char bCurvesAsColor : 0; // 0x28 (1)
	char b3DDrawMode : 0; // 0x28 (1)
	char bSupported3DDrawMode : 0; // 0x28 (1)
	char bEnabled : 0; // 0x28 (1)
	char bEditable : 0; // 0x29 (1)
	char LODDuplicate : 0; // 0x29 (1)
	char bSupportsRandomSeed : 0; // 0x29 (1)
	char bRequiresLoopingNotification : 0; // 0x29 (1)
	char LODValidity; // 0x2A (1)
};

// Class Engine.ParticleModuleAccelerationBase
class UParticleModuleAccelerationBase : public UParticleModule {

public:

	char bAlwaysInWorldSpace : 0; // 0x30 (1)
};

// Class Engine.ParticleModuleAcceleration
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase {

public:

	struct Unknown Acceleration; // 0x38 (72)
	char bApplyOwnerScale : 0; // 0x80 (1)
};

// Class Engine.ParticleModuleAccelerationConstant
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase {

public:

	struct Unknown Acceleration; // 0x38 (12)
};

// Class Engine.ParticleModuleAccelerationDrag
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase {

public:

	struct Unknown DragCoefficient; // 0x38 (8)
	struct Unknown DragCoefficientRaw; // 0x40 (48)
};

// Class Engine.ParticleModuleAccelerationDragScaleOverLife
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase {

public:

	struct Unknown DragScale; // 0x38 (8)
	struct Unknown DragScaleRaw; // 0x40 (48)
};

// Class Engine.ParticleModuleAccelerationOverLifetime
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase {

public:

	struct Unknown AccelOverLife; // 0x38 (72)
};

// Class Engine.ParticleModuleAttractorLine
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase {

public:

	struct Unknown EndPoint0; // 0x30 (12)
	struct Unknown EndPoint1; // 0x3C (12)
	struct Unknown Range; // 0x48 (48)
	struct Unknown Strength; // 0x78 (48)
};

// Class Engine.ParticleModuleAttractorParticle
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase {

public:

	struct FName EmitterName; // 0x30 (8)
	struct Unknown Range; // 0x38 (48)
	char bStrengthByDistance : 0; // 0x68 (1)
	struct Unknown Strength; // 0x70 (48)
	char bAffectBaseVelocity : 0; // 0xA0 (1)
	char SelectionMethod; // 0xA4 (1)
	char bRenewSource : 0; // 0xA8 (1)
	char bInheritSourceVel : 0; // 0xA8 (1)
	int32_t LastSelIndex; // 0xAC (4)
};

// Class Engine.ParticleModuleAttractorPoint
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase {

public:

	struct Unknown Position; // 0x30 (72)
	struct Unknown Range; // 0x78 (48)
	struct Unknown Strength; // 0xA8 (48)
	char StrengthByDistance : 0; // 0xD8 (1)
	char bAffectBaseVelocity : 0; // 0xD8 (1)
	char bOverrideVelocity : 0; // 0xD8 (1)
	char bUseWorldSpacePosition : 0; // 0xD8 (1)
	char Positive_X : 0; // 0xD8 (1)
	char Positive_Y : 0; // 0xD8 (1)
	char Positive_Z : 0; // 0xD8 (1)
	char Negative_X : 0; // 0xD8 (1)
	char Negative_Y : 0; // 0xD9 (1)
	char Negative_Z : 0; // 0xD9 (1)
};

// Class Engine.ParticleModuleAttractorPointGravity
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase {

public:

	struct Unknown Position; // 0x30 (12)
	float Radius; // 0x3C (4)
	struct Unknown Strength; // 0x40 (8)
	struct Unknown StrengthRaw; // 0x48 (48)
};

// Class Engine.ParticleModuleBeamModifier
class UParticleModuleBeamModifier : public UParticleModuleBeamBase {

public:

	char ModifierType; // 0x30 (1)
	struct Unknown PositionOptions; // 0x34 (4)
	struct Unknown Position; // 0x38 (72)
	struct Unknown TangentOptions; // 0x80 (4)
	struct Unknown Tangent; // 0x88 (72)
	char bAbsoluteTangent : 0; // 0xD0 (1)
	struct Unknown StrengthOptions; // 0xD4 (4)
	struct Unknown Strength; // 0xD8 (48)
};

// Class Engine.ParticleModuleBeamNoise
class UParticleModuleBeamNoise : public UParticleModuleBeamBase {

public:

	char bLowFreq_Enabled : 0; // 0x30 (1)
	int32_t Frequency; // 0x34 (4)
	int32_t Frequency_LowRange; // 0x38 (4)
	struct Unknown NoiseRange; // 0x40 (72)
	struct Unknown NoiseRangeScale; // 0x88 (48)
	char bNRScaleEmitterTime : 0; // 0xB8 (1)
	struct Unknown NoiseSpeed; // 0xC0 (72)
	char bSmooth : 0; // 0x108 (1)
	float NoiseLockRadius; // 0x10C (4)
	char bNoiseLock : 0; // 0x110 (1)
	char bOscillate : 0; // 0x110 (1)
	float NoiseLockTime; // 0x114 (4)
	float NoiseTension; // 0x118 (4)
	char bUseNoiseTangents : 0; // 0x11C (1)
	struct Unknown NoiseTangentStrength; // 0x120 (48)
	int32_t NoiseTessellation; // 0x150 (4)
	char bTargetNoise : 0; // 0x154 (1)
	float FrequencyDistance; // 0x158 (4)
	char bApplyNoiseScale : 0; // 0x15C (1)
	struct Unknown NoiseScale; // 0x160 (48)
};

// Class Engine.ParticleModuleBeamSource
class UParticleModuleBeamSource : public UParticleModuleBeamBase {

public:

	char SourceMethod; // 0x30 (1)
	struct FName SourceName; // 0x34 (8)
	char bSourceAbsolute : 0; // 0x3C (1)
	struct Unknown Source; // 0x40 (72)
	char bLockSource : 0; // 0x88 (1)
	char SourceTangentMethod; // 0x8C (1)
	struct Unknown SourceTangent; // 0x90 (72)
	char bLockSourceTangent : 0; // 0xD8 (1)
	struct Unknown SourceStrength; // 0xE0 (48)
	char bLockSourceStength : 0; // 0x110 (1)
};

// Class Engine.ParticleModuleBeamTarget
class UParticleModuleBeamTarget : public UParticleModuleBeamBase {

public:

	char TargetMethod; // 0x30 (1)
	struct FName TargetName; // 0x34 (8)
	struct Unknown Target; // 0x40 (72)
	char bTargetAbsolute : 0; // 0x88 (1)
	char bLockTarget : 0; // 0x88 (1)
	char TargetTangentMethod; // 0x8C (1)
	struct Unknown TargetTangent; // 0x90 (72)
	char bLockTargetTangent : 0; // 0xD8 (1)
	struct Unknown TargetStrength; // 0xE0 (48)
	char bLockTargetStength : 0; // 0x110 (1)
	float LockRadius; // 0x114 (4)
};

// Class Engine.ParticleModuleCameraOffset
class UParticleModuleCameraOffset : public UParticleModuleCameraBase {

public:

	struct Unknown CameraOffset; // 0x30 (48)
	char bSpawnTimeOnly : 0; // 0x60 (1)
	char UpdateMethod; // 0x64 (1)
};

// Class Engine.ParticleModuleCollision
class UParticleModuleCollision : public UParticleModuleCollisionBase {

public:

	struct Unknown DampingFactor; // 0x30 (72)
	struct Unknown DampingFactorRotation; // 0x78 (72)
	struct Unknown MaxCollisions; // 0xC0 (48)
	char CollisionCompletionOption; // 0xF0 (1)
	struct TArray<Unknown> CollisionTypes; // 0xF8 (16)
	char bApplyPhysics : 0; // 0x110 (1)
	char bIgnoreTriggerVolumes : 0; // 0x110 (1)
	struct Unknown ParticleMass; // 0x118 (48)
	float DirScalar; // 0x148 (4)
	char bPawnsDoNotDecrementCount : 0; // 0x14C (1)
	char bOnlyVerticalNormalsDecrementCount : 0; // 0x14C (1)
	float VerticalFudgeFactor; // 0x150 (4)
	struct Unknown DelayAmount; // 0x158 (48)
	char bDropDetail : 0; // 0x188 (1)
	char bCollideOnlyIfVisible : 0; // 0x188 (1)
	char bIgnoreSourceActor : 0; // 0x188 (1)
	float MaxCollisionDistance; // 0x18C (4)
};

// Class Engine.ParticleModuleCollisionGPU
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase {

public:

	struct Unknown Resilience; // 0x30 (48)
	struct Unknown ResilienceScaleOverLife; // 0x60 (48)
	float Friction; // 0x90 (4)
	float RandomSpread; // 0x94 (4)
	float RandomDistribution; // 0x98 (4)
	float RadiusScale; // 0x9C (4)
	float RadiusBias; // 0xA0 (4)
	char Response; // 0xA4 (1)
	char CollisionMode; // 0xA5 (1)
};

// Class Engine.ParticleModuleColor
class UParticleModuleColor : public UParticleModuleColorBase {

public:

	struct Unknown StartColor; // 0x30 (72)
	struct Unknown StartAlpha; // 0x78 (48)
	char bClampAlpha : 0; // 0xA8 (1)
};

// Class Engine.ParticleModuleColor_Seeded
class UParticleModuleColor_Seeded : public UParticleModuleColor {

public:

	struct Unknown RandomSeedInfo; // 0xB0 (32)
};

// Class Engine.ParticleModuleColorOverLife
class UParticleModuleColorOverLife : public UParticleModuleColorBase {

public:

	struct Unknown ColorOverLife; // 0x30 (72)
	struct Unknown AlphaOverLife; // 0x78 (48)
	char bClampAlpha : 0; // 0xA8 (1)
};

// Class Engine.ParticleModuleColorScaleOverLife
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase {

public:

	struct Unknown ColorScaleOverLife; // 0x30 (72)
	struct Unknown AlphaScaleOverLife; // 0x78 (48)
	char bEmitterTime : 0; // 0xA8 (1)
};

// Class Engine.ParticleModuleEventGenerator
class UParticleModuleEventGenerator : public UParticleModuleEventBase {

public:

	struct TArray<Unknown> Events; // 0x30 (16)
};

// Class Engine.ParticleModuleEventReceiverBase
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase {

public:

	char EventGeneratorType; // 0x30 (1)
	struct FName EventName; // 0x34 (8)
};

// Class Engine.ParticleModuleEventReceiverKillParticles
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase {

public:

	char bStopSpawning : 0; // 0x40 (1)
};

// Class Engine.ParticleModuleEventReceiverSpawn
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase {

public:

	struct Unknown SpawnCount; // 0x40 (48)
	char bUseParticleTime : 0; // 0x70 (1)
	char bUsePSysLocation : 0; // 0x70 (1)
	char bInheritVelocity : 0; // 0x70 (1)
	struct Unknown InheritVelocityScale; // 0x78 (72)
	struct TArray<Unknown> PhysicalMaterials; // 0xC0 (16)
	char bBanPhysicalMaterials : 0; // 0xD0 (1)
};

// Class Engine.ParticleModuleKillBox
class UParticleModuleKillBox : public UParticleModuleKillBase {

public:

	struct Unknown LowerLeftCorner; // 0x30 (72)
	struct Unknown UpperRightCorner; // 0x78 (72)
	char bAbsolute : 0; // 0xC0 (1)
	char bKillInside : 0; // 0xC0 (1)
	char bAxisAlignedAndFixedSize : 0; // 0xC0 (1)
};

// Class Engine.ParticleModuleKillHeight
class UParticleModuleKillHeight : public UParticleModuleKillBase {

public:

	struct Unknown Height; // 0x30 (48)
	char bAbsolute : 0; // 0x60 (1)
	char bFloor : 0; // 0x60 (1)
	char bApplyPSysScale : 0; // 0x60 (1)
};

// Class Engine.ParticleModuleLifetime
class UParticleModuleLifetime : public UParticleModuleLifetimeBase {

public:

	struct Unknown LifeTime; // 0x30 (48)
};

// Class Engine.ParticleModuleLifetime_Seeded
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime {

public:

	struct Unknown RandomSeedInfo; // 0x60 (32)
};

// Class Engine.ParticleModuleLight
class UParticleModuleLight : public UParticleModuleLightBase {

public:

	char bUseInverseSquaredFalloff : 0; // 0x30 (1)
	char bAffectsTranslucency : 0; // 0x31 (1)
	char bPreviewLightRadius : 0; // 0x32 (1)
	float SpawnFraction; // 0x34 (4)
	struct Unknown ColorScaleOverLife; // 0x38 (72)
	struct Unknown BrightnessOverLife; // 0x80 (48)
	struct Unknown RadiusScale; // 0xB0 (48)
	struct Unknown LightExponent; // 0xE0 (48)
	struct Unknown LightingChannels; // 0x110 (1)
	float VolumetricScatteringIntensity; // 0x114 (4)
	char bHighQualityLights : 0; // 0x118 (1)
	char bShadowCastingLights : 0; // 0x119 (1)
};

// Class Engine.ParticleModuleLight_Seeded
class UParticleModuleLight_Seeded : public UParticleModuleLight {

public:

	struct Unknown RandomSeedInfo; // 0x120 (32)
};

// Class Engine.ParticleModuleLocation
class UParticleModuleLocation : public UParticleModuleLocationBase {

public:

	struct Unknown StartLocation; // 0x30 (72)
	float DistributeOverNPoints; // 0x78 (4)
	float DistributeThreshold; // 0x7C (4)
};

// Class Engine.ParticleModuleLocation_Seeded
class UParticleModuleLocation_Seeded : public UParticleModuleLocation {

public:

	struct Unknown RandomSeedInfo; // 0x80 (32)
};

// Class Engine.ParticleModuleLocationBoneSocket
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase {

public:

	char SourceType; // 0x30 (1)
	struct Unknown UniversalOffset; // 0x34 (12)
	struct TArray<Unknown> SourceLocations; // 0x40 (16)
	char SelectionMethod; // 0x50 (1)
	char bUpdatePositionEachFrame : 0; // 0x54 (1)
	char bOrientMeshEmitters : 0; // 0x54 (1)
	char bInheritBoneVelocity : 0; // 0x54 (1)
	float InheritVelocityScale; // 0x58 (4)
	struct FName SkelMeshActorParamName; // 0x5C (8)
	int32_t NumPreSelectedIndices; // 0x64 (4)
};

// Class Engine.ParticleModuleLocationDirect
class UParticleModuleLocationDirect : public UParticleModuleLocationBase {

public:

	struct Unknown Location; // 0x30 (72)
	struct Unknown LocationOffset; // 0x78 (72)
	struct Unknown ScaleFactor; // 0xC0 (72)
	struct Unknown Direction; // 0x108 (72)
};

// Class Engine.ParticleModuleLocationEmitter
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase {

public:

	struct FName EmitterName; // 0x30 (8)
	char SelectionMethod; // 0x38 (1)
	char InheritSourceVelocity : 0; // 0x3C (1)
	float InheritSourceVelocityScale; // 0x40 (4)
	char bInheritSourceRotation : 0; // 0x44 (1)
	float InheritSourceRotationScale; // 0x48 (4)
};

// Class Engine.ParticleModuleLocationEmitterDirect
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase {

public:

	struct FName EmitterName; // 0x30 (8)
};

// Class Engine.ParticleModuleLocationPrimitiveBase
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase {

public:

	char Positive_X : 0; // 0x30 (1)
	char Positive_Y : 0; // 0x30 (1)
	char Positive_Z : 0; // 0x30 (1)
	char Negative_X : 0; // 0x30 (1)
	char Negative_Y : 0; // 0x30 (1)
	char Negative_Z : 0; // 0x30 (1)
	char SurfaceOnly : 0; // 0x30 (1)
	char Velocity : 0; // 0x30 (1)
	struct Unknown VelocityScale; // 0x38 (48)
	struct Unknown StartLocation; // 0x68 (72)
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase {

public:

	char RadialVelocity : 0; // 0xB0 (1)
	struct Unknown StartRadius; // 0xB8 (48)
	struct Unknown StartHeight; // 0xE8 (48)
	char HeightAxis; // 0x118 (1)
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder {

public:

	struct Unknown RandomSeedInfo; // 0x120 (32)
};

// Class Engine.ParticleModuleLocationPrimitiveSphere
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase {

public:

	struct Unknown StartRadius; // 0xB0 (48)
};

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere {

public:

	struct Unknown RandomSeedInfo; // 0xE0 (32)
};

// Class Engine.ParticleModuleLocationPrimitiveTriangle
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase {

public:

	struct Unknown StartOffset; // 0x30 (72)
	struct Unknown Height; // 0x78 (48)
	struct Unknown Angle; // 0xA8 (48)
	struct Unknown Thickness; // 0xD8 (48)
};

// Class Engine.ParticleModuleLocationSkelVertSurface
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase {

public:

	char SourceType; // 0x30 (1)
	struct Unknown UniversalOffset; // 0x34 (12)
	char bUpdatePositionEachFrame : 0; // 0x40 (1)
	char bOrientMeshEmitters : 0; // 0x40 (1)
	char bInheritBoneVelocity : 0; // 0x40 (1)
	float InheritVelocityScale; // 0x44 (4)
	struct FName SkelMeshActorParamName; // 0x48 (8)
	struct TArray<Unknown> ValidAssociatedBones; // 0x50 (16)
	char bEnforceNormalCheck : 0; // 0x60 (1)
	struct Unknown NormalToCompare; // 0x64 (12)
	float NormalCheckToleranceDegrees; // 0x70 (4)
	float NormalCheckTolerance; // 0x74 (4)
	struct TArray<Unknown> ValidMaterialIndices; // 0x78 (16)
	char bInheritVertexColor : 0; // 0x88 (1)
	char bInheritUV : 0; // 0x88 (1)
	uint32_t InheritUVChannel; // 0x8C (4)
};

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset {

public:

	struct Unknown RandomSeedInfo; // 0x80 (32)
};

// Class Engine.ParticleModuleMeshMaterial
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase {

public:

	struct TArray<Unknown> MeshMaterials; // 0x30 (16)
};

// Class Engine.ParticleModuleMeshRotation
class UParticleModuleMeshRotation : public UParticleModuleRotationBase {

public:

	struct Unknown StartRotation; // 0x30 (72)
	char bInheritParent : 0; // 0x78 (1)
};

// Class Engine.ParticleModuleMeshRotation_Seeded
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation {

public:

	struct Unknown RandomSeedInfo; // 0x80 (32)
};

// Class Engine.ParticleModuleMeshRotationRate
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase {

public:

	struct Unknown StartRotationRate; // 0x30 (72)
};

// Class Engine.ParticleModuleMeshRotationRate_Seeded
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate {

public:

	struct Unknown RandomSeedInfo; // 0x78 (32)
};

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase {

public:

	struct Unknown LifeMultiplier; // 0x30 (72)
};

// Class Engine.ParticleModuleMeshRotationRateOverLife
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase {

public:

	struct Unknown RotRate; // 0x30 (72)
	char bScaleRotRate : 0; // 0x78 (1)
};

// Class Engine.ParticleModuleOrbitBase
class UParticleModuleOrbitBase : public UParticleModule {

public:

	char bUseEmitterTime : 0; // 0x30 (1)
};

// Class Engine.ParticleModuleOrbit
class UParticleModuleOrbit : public UParticleModuleOrbitBase {

public:

	char ChainMode; // 0x38 (1)
	struct Unknown OffsetAmount; // 0x40 (72)
	struct Unknown OffsetOptions; // 0x88 (4)
	struct Unknown RotationAmount; // 0x90 (72)
	struct Unknown RotationOptions; // 0xD8 (4)
	struct Unknown RotationRateAmount; // 0xE0 (72)
	struct Unknown RotationRateOptions; // 0x128 (4)
};

// Class Engine.ParticleModuleOrientationAxisLock
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase {

public:

	char LockAxisFlags; // 0x30 (1)
};

// Class Engine.ParticleModuleParameterDynamic
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase {

public:

	struct TArray<Unknown> DynamicParams; // 0x30 (16)
	int32_t UpdateFlags; // 0x40 (4)
	char bUsesVelocity : 0; // 0x44 (1)
};

// Class Engine.ParticleModuleParameterDynamic_Seeded
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic {

public:

	struct Unknown RandomSeedInfo; // 0x48 (32)
};

// Class Engine.ParticleModulePivotOffset
class UParticleModulePivotOffset : public UParticleModuleLocationBase {

public:

	struct Unknown PivotOffset; // 0x30 (8)
};

// Class Engine.ParticleModuleRequired
class UParticleModuleRequired : public UParticleModule {

public:

	struct Unknown Material; // 0x30 (8)
	float MinFacingCameraBlendDistance; // 0x38 (4)
	float MaxFacingCameraBlendDistance; // 0x3C (4)
	struct Unknown EmitterOrigin; // 0x40 (12)
	struct Unknown EmitterRotation; // 0x4C (12)
	char ScreenAlignment; // 0x58 (1)
	char bUseLocalSpace : 0; // 0x59 (1)
	char bKillOnDeactivate : 0; // 0x59 (1)
	char bKillOnCompleted : 0; // 0x59 (1)
	char SortMode; // 0x5A (1)
	char bUseLegacyEmitterTime : 0; // 0x5B (1)
	char bRemoveHMDRoll : 0; // 0x5B (1)
	char bEmitterDurationUseRange : 0; // 0x5B (1)
	float EmitterDuration; // 0x5C (4)
	struct Unknown SpawnRate; // 0x60 (48)
	struct TArray<Unknown> BurstList; // 0x90 (16)
	float EmitterDelay; // 0xA0 (4)
	float EmitterDelayLow; // 0xA4 (4)
	char bDelayFirstLoopOnly : 0; // 0xA8 (1)
	char InterpolationMethod; // 0xA9 (1)
	char bScaleUV : 0; // 0xAA (1)
	char bEmitterDelayUseRange : 0; // 0xAA (1)
	char ParticleBurstMethod; // 0xAB (1)
	char bOverrideSystemMacroUV : 0; // 0xAC (1)
	char bUseMaxDrawCount : 0; // 0xAC (1)
	char OpacitySourceMode; // 0xAD (1)
	char EmitterNormalsMode; // 0xAE (1)
	char bOrbitModuleAffectsVelocityAlignment : 0; // 0xAF (1)
	int32_t SubImages_Horizontal; // 0xB0 (4)
	int32_t SubImages_Vertical; // 0xB4 (4)
	float RandomImageTime; // 0xB8 (4)
	int32_t RandomImageChanges; // 0xBC (4)
	struct Unknown MacroUVPosition; // 0xC0 (12)
	float MacroUVRadius; // 0xCC (4)
	enum class Unknow UVFlippingMode; // 0xD0 (1)
	char BoundingMode; // 0xD1 (1)
	char bDurationRecalcEachLoop : 0; // 0xD2 (1)
	struct Unknown NormalsSphereCenter; // 0xD4 (12)
	float AlphaThreshold; // 0xE0 (4)
	int32_t EmitterLoops; // 0xE4 (4)
	struct Unknown CutoutTexture; // 0xE8 (8)
	int32_t MaxDrawCount; // 0xF0 (4)
	float EmitterDurationLow; // 0xF4 (4)
	struct Unknown NormalsCylinderDirection; // 0xF8 (12)
	struct TArray<Unknown> NamedMaterialOverrides; // 0x108 (16)
};

// Class Engine.ParticleModuleRotation
class UParticleModuleRotation : public UParticleModuleRotationBase {

public:

	struct Unknown StartRotation; // 0x30 (48)
};

// Class Engine.ParticleModuleRotation_Seeded
class UParticleModuleRotation_Seeded : public UParticleModuleRotation {

public:

	struct Unknown RandomSeedInfo; // 0x60 (32)
};

// Class Engine.ParticleModuleRotationOverLifetime
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase {

public:

	struct Unknown RotationOverLife; // 0x30 (48)
	char Scale : 0; // 0x60 (1)
};

// Class Engine.ParticleModuleRotationRate
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase {

public:

	struct Unknown StartRotationRate; // 0x30 (48)
};

// Class Engine.ParticleModuleRotationRate_Seeded
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate {

public:

	struct Unknown RandomSeedInfo; // 0x60 (32)
};

// Class Engine.ParticleModuleRotationRateMultiplyLife
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase {

public:

	struct Unknown LifeMultiplier; // 0x30 (48)
};

// Class Engine.ParticleModuleSize
class UParticleModuleSize : public UParticleModuleSizeBase {

public:

	struct Unknown StartSize; // 0x30 (72)
};

// Class Engine.ParticleModuleSize_Seeded
class UParticleModuleSize_Seeded : public UParticleModuleSize {

public:

	struct Unknown RandomSeedInfo; // 0x78 (32)
};

// Class Engine.ParticleModuleSizeMultiplyLife
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase {

public:

	struct Unknown LifeMultiplier; // 0x30 (72)
	char MultiplyX : 0; // 0x78 (1)
	char MultiplyY : 0; // 0x78 (1)
	char MultiplyZ : 0; // 0x78 (1)
};

// Class Engine.ParticleModuleSizeScale
class UParticleModuleSizeScale : public UParticleModuleSizeBase {

public:

	struct Unknown SizeScale; // 0x30 (72)
	char EnableX : 0; // 0x78 (1)
	char EnableY : 0; // 0x78 (1)
	char EnableZ : 0; // 0x78 (1)
};

// Class Engine.ParticleModuleSizeScaleBySpeed
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase {

public:

	struct Unknown SpeedScale; // 0x30 (8)
	struct Unknown MaxScale; // 0x38 (8)
};

// Class Engine.ParticleModuleSourceMovement
class UParticleModuleSourceMovement : public UParticleModuleLocationBase {

public:

	struct Unknown SourceMovementScale; // 0x30 (72)
};

// Class Engine.ParticleModuleSpawnBase
class UParticleModuleSpawnBase : public UParticleModule {

public:

	char bProcessSpawnRate : 0; // 0x30 (1)
	char bProcessBurstList : 0; // 0x30 (1)
};

// Class Engine.ParticleModuleSpawn
class UParticleModuleSpawn : public UParticleModuleSpawnBase {

public:

	struct Unknown Rate; // 0x38 (48)
	struct Unknown RateScale; // 0x68 (48)
	char ParticleBurstMethod; // 0x98 (1)
	struct TArray<Unknown> BurstList; // 0xA0 (16)
	struct Unknown BurstScale; // 0xB0 (48)
	char bApplyGlobalSpawnRateScale : 0; // 0xE0 (1)
};

// Class Engine.ParticleModuleSpawnPerUnit
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase {

public:

	float UnitScalar; // 0x38 (4)
	float MovementTolerance; // 0x3C (4)
	struct Unknown SpawnPerUnit; // 0x40 (48)
	float MaxFrameDistance; // 0x70 (4)
	char bIgnoreSpawnRateWhenMoving : 0; // 0x74 (1)
	char bIgnoreMovementAlongX : 0; // 0x74 (1)
	char bIgnoreMovementAlongY : 0; // 0x74 (1)
	char bIgnoreMovementAlongZ : 0; // 0x74 (1)
};

// Class Engine.ParticleModuleSubUV
class UParticleModuleSubUV : public UParticleModuleSubUVBase {

public:

	struct Unknown Animation; // 0x30 (8)
	struct Unknown SubImageIndex; // 0x38 (48)
	char bUseRealTime : 0; // 0x68 (1)
};

// Class Engine.ParticleModuleSubUVMovie
class UParticleModuleSubUVMovie : public UParticleModuleSubUV {

public:

	char bUseEmitterTime : 0; // 0x70 (1)
	struct Unknown FrameRate; // 0x78 (48)
	int32_t StartingFrame; // 0xA8 (4)
};

// Class Engine.ParticleModuleTrailSource
class UParticleModuleTrailSource : public UParticleModuleTrailBase {

public:

	char SourceMethod; // 0x30 (1)
	struct FName SourceName; // 0x34 (8)
	struct Unknown SourceStrength; // 0x40 (48)
	char bLockSourceStength : 0; // 0x70 (1)
	int32_t SourceOffsetCount; // 0x74 (4)
	struct TArray<Unknown> SourceOffsetDefaults; // 0x78 (16)
	char SelectionMethod; // 0x88 (1)
	char bInheritRotation : 0; // 0x8C (1)
};

// Class Engine.ParticleModuleTypeDataAnimTrail
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase {

public:

	char bDeadTrailsOnDeactivate : 0; // 0x30 (1)
	char bEnablePreviousTangentRecalculation : 0; // 0x30 (1)
	char bTangentRecalculationEveryFrame : 0; // 0x30 (1)
	float TilingDistance; // 0x34 (4)
	float DistanceTessellationStepSize; // 0x38 (4)
	float TangentTessellationStepSize; // 0x3C (4)
	float WidthTessellationStepSize; // 0x40 (4)
};

// Class Engine.ParticleModuleTypeDataBeam2
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase {

public:

	char BeamMethod; // 0x30 (1)
	int32_t TextureTile; // 0x34 (4)
	float TextureTileDistance; // 0x38 (4)
	int32_t Sheets; // 0x3C (4)
	int32_t MaxBeamCount; // 0x40 (4)
	float Speed; // 0x44 (4)
	int32_t InterpolationPoints; // 0x48 (4)
	char bAlwaysOn : 0; // 0x4C (1)
	int32_t UpVectorStepSize; // 0x50 (4)
	struct FName BranchParentName; // 0x54 (8)
	struct Unknown Distance; // 0x60 (48)
	char TaperMethod; // 0x90 (1)
	struct Unknown TaperFactor; // 0x98 (48)
	struct Unknown TaperScale; // 0xC8 (48)
	char RenderGeometry : 0; // 0xF8 (1)
	char RenderDirectLine : 0; // 0xF8 (1)
	char RenderLines : 0; // 0xF8 (1)
	char RenderTessellation : 0; // 0xF8 (1)
};

// Class Engine.ParticleModuleTypeDataGpu
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase {

public:

	struct Unknown EmitterInfo; // 0x30 (640)
	struct Unknown ResourceData; // 0x2B0 (352)
	float CameraMotionBlurAmount; // 0x410 (4)
	char bClearExistingParticlesOnInit : 0; // 0x414 (1)
};

// Class Engine.ParticleModuleTypeDataMesh
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase {

public:

	struct Unknown Mesh; // 0x30 (8)
	float LODSizeScale; // 0x40 (4)
	char bUseStaticMeshLODs : 0; // 0x44 (1)
	char CastShadows : 0; // 0x44 (1)
	char DoCollisions : 0; // 0x44 (1)
	char MeshAlignment; // 0x45 (1)
	char bOverrideMaterial : 0; // 0x46 (1)
	char bOverrideDefaultMotionBlurSettings : 0; // 0x46 (1)
	char bEnableMotionBlur : 0; // 0x46 (1)
	struct Unknown RollPitchYawRange; // 0x48 (72)
	char AxisLockOption; // 0x90 (1)
	char bCameraFacing : 0; // 0x91 (1)
	char CameraFacingUpAxisOption; // 0x92 (1)
	char CameraFacingOption; // 0x93 (1)
	char bApplyParticleRotationAsSpin : 0; // 0x94 (1)
	char bFaceCameraDirectionRatherThanPosition : 0; // 0x94 (1)
	char bCollisionsConsiderPartilceSize : 0; // 0x94 (1)
};

// Class Engine.ParticleModuleTypeDataRibbon
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase {

public:

	int32_t MaxTessellationBetweenParticles; // 0x30 (4)
	int32_t SheetsPerTrail; // 0x34 (4)
	int32_t MaxTrailCount; // 0x38 (4)
	int32_t MaxParticleInTrailCount; // 0x3C (4)
	char bDeadTrailsOnDeactivate : 0; // 0x40 (1)
	char bDeadTrailsOnSourceLoss : 0; // 0x40 (1)
	char bClipSourceSegement : 0; // 0x40 (1)
	char bEnablePreviousTangentRecalculation : 0; // 0x40 (1)
	char bTangentRecalculationEveryFrame : 0; // 0x40 (1)
	char bSpawnInitialParticle : 0; // 0x40 (1)
	char RenderAxis; // 0x44 (1)
	float TangentSpawningScalar; // 0x48 (4)
	char bRenderGeometry : 0; // 0x4C (1)
	char bRenderSpawnPoints : 0; // 0x4C (1)
	char bRenderTangents : 0; // 0x4C (1)
	char bRenderTessellation : 0; // 0x4C (1)
	float TilingDistance; // 0x50 (4)
	float DistanceTessellationStepSize; // 0x54 (4)
	char bEnableTangentDiffInterpScale : 0; // 0x58 (1)
	float TangentTessellationScalar; // 0x5C (4)
};

// Class Engine.ParticleModuleVectorFieldGlobal
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase {

public:

	char bOverrideGlobalVectorFieldTightness : 0; // 0x30 (1)
	float GlobalVectorFieldScale; // 0x34 (4)
	float GlobalVectorFieldTightness; // 0x38 (4)
};

// Class Engine.ParticleModuleVectorFieldLocal
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase {

public:

	struct Unknown VectorField; // 0x30 (8)
	struct Unknown RelativeTranslation; // 0x38 (12)
	struct Unknown RelativeRotation; // 0x44 (12)
	struct Unknown RelativeScale3D; // 0x50 (12)
	float Intensity; // 0x5C (4)
	float Tightness; // 0x60 (4)
	char bIgnoreComponentTransform : 0; // 0x64 (1)
	char bTileX : 0; // 0x64 (1)
	char bTileY : 0; // 0x64 (1)
	char bTileZ : 0; // 0x64 (1)
	char bUseFixDT : 0; // 0x64 (1)
};

// Class Engine.ParticleModuleVectorFieldRotation
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase {

public:

	struct Unknown MinInitialRotation; // 0x30 (12)
	struct Unknown MaxInitialRotation; // 0x3C (12)
};

// Class Engine.ParticleModuleVectorFieldRotationRate
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase {

public:

	struct Unknown RotationRate; // 0x30 (12)
};

// Class Engine.ParticleModuleVectorFieldScale
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase {

public:

	struct Unknown VectorFieldScale; // 0x30 (8)
	struct Unknown VectorFieldScaleRaw; // 0x38 (48)
};

// Class Engine.ParticleModuleVectorFieldScaleOverLife
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase {

public:

	struct Unknown VectorFieldScaleOverLife; // 0x30 (8)
	struct Unknown VectorFieldScaleOverLifeRaw; // 0x38 (48)
};

// Class Engine.ParticleModuleVelocityBase
class UParticleModuleVelocityBase : public UParticleModule {

public:

	char bInWorldSpace : 0; // 0x30 (1)
	char bApplyOwnerScale : 0; // 0x30 (1)
};

// Class Engine.ParticleModuleVelocity
class UParticleModuleVelocity : public UParticleModuleVelocityBase {

public:

	struct Unknown StartVelocity; // 0x38 (72)
	struct Unknown StartVelocityRadial; // 0x80 (48)
};

// Class Engine.ParticleModuleVelocity_Seeded
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity {

public:

	struct Unknown RandomSeedInfo; // 0xB0 (32)
};

// Class Engine.ParticleModuleVelocityCone
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase {

public:

	struct Unknown Angle; // 0x38 (48)
	struct Unknown Velocity; // 0x68 (48)
	struct Unknown Direction; // 0x98 (12)
};

// Class Engine.ParticleModuleVelocityInheritParent
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase {

public:

	struct Unknown Scale; // 0x38 (72)
};

// Class Engine.ParticleModuleVelocityOverLifetime
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase {

public:

	struct Unknown VelOverLife; // 0x38 (72)
	char Absolute : 0; // 0x80 (1)
};

// Class Engine.ParticleSystem
class UParticleSystem : public UFXSystemAsset {

public:

	float UpdateTime_FPS; // 0x30 (4)
	float UpdateTime_Delta; // 0x34 (4)
	float WarmupTime; // 0x38 (4)
	float WarmupTickRate; // 0x3C (4)
	struct TArray<Unknown> Emitters; // 0x40 (16)
	struct Unknown PreviewComponent; // 0x50 (8)
	struct Unknown CurveEdSetup; // 0x58 (8)
	float LODDistanceCheckTime; // 0x60 (4)
	float MacroUVRadius; // 0x64 (4)
	struct TArray<Unknown> LODDistances; // 0x68 (16)
	struct TArray<Unknown> LODSettings; // 0x78 (16)
	struct Unknown FixedRelativeBoundingBox; // 0x88 (28)
	float SecondsBeforeInactive; // 0xA4 (4)
	float Delay; // 0xA8 (4)
	float DelayLow; // 0xAC (4)
	char bOrientZAxisTowardCamera : 0; // 0xB0 (1)
	char bUseFixedRelativeBoundingBox : 0; // 0xB0 (1)
	char bShouldResetPeakCounts : 0; // 0xB0 (1)
	char bHasPhysics : 0; // 0xB0 (1)
	char bUseRealtimeThumbnail : 0; // 0xB0 (1)
	char ThumbnailImageOutOfDate : 0; // 0xB0 (1)
	char bUseDelayRange : 0; // 0xB1 (1)
	char bAllowManagedTicking : 0; // 0xB1 (1)
	char bAutoDeactivate : 0; // 0xB1 (1)
	char bRegenerateLODDuplicate : 0; // 0xB1 (1)
	char SystemUpdateMode; // 0xB2 (1)
	char LODMethod; // 0xB3 (1)
	enum class Unknow InsignificantReaction; // 0xB4 (1)
	char OcclusionBoundsMethod; // 0xB5 (1)
	enum class Unknow MaxSignificanceLevel; // 0xB7 (1)
	uint32_t MinTimeBetweenTicks; // 0xB8 (4)
	float InsignificanceDelay; // 0xBC (4)
	struct Unknown MacroUVPosition; // 0xC0 (12)
	struct Unknown CustomOcclusionBounds; // 0xCC (28)
	struct TArray<Unknown> SoloTracking; // 0xE8 (16)
	struct TArray<Unknown> NamedMaterialSlots; // 0xF8 (16)

	char ContainsEmitterType(struct Unknown* TypeData); // Function Engine.ParticleSystem.ContainsEmitterType(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x457D4C0>
};

// Class Engine.ParticleSystemComponent
class UParticleSystemComponent : public UFXSystemComponent {

public:

	struct Unknown Template; // 0x4A8 (8)
	struct TArray<Unknown> EmitterMaterials; // 0x4B0 (16)
	struct TArray<Unknown> SkelMeshComponents; // 0x4C0 (16)
	char bResetOnDetach : 0; // 0x4D1 (1)
	char bUpdateOnDedicatedServer : 0; // 0x4D1 (1)
	char bAllowRecycling : 0; // 0x4D1 (1)
	char bAutoManageAttachment : 0; // 0x4D1 (1)
	char bAutoAttachWeldSimulatedBodies : 0; // 0x4D1 (1)
	char bWarmingUp : 0; // 0x4D2 (1)
	char bOverrideLODMethod : 0; // 0x4D2 (1)
	char bSkipUpdateDynamicDataDuringTick : 0; // 0x4D2 (1)
	char LODMethod; // 0x4DD (1)
	enum class Unknow RequiredSignificance; // 0x4DE (1)
	struct TArray<Unknown> InstanceParameters; // 0x4E0 (16)
	struct FMulticastInlineDelegate OnParticleSpawn; // 0x4F0 (16)
	struct FMulticastInlineDelegate OnParticleBurst; // 0x500 (16)
	struct FMulticastInlineDelegate OnParticleDeath; // 0x510 (16)
	struct FMulticastInlineDelegate OnParticleCollide; // 0x520 (16)
	char bOldPositionValid : 0; // 0x530 (1)
	struct Unknown OldPosition; // 0x534 (12)
	struct Unknown PartSysVelocity; // 0x540 (12)
	float WarmupTime; // 0x54C (4)
	float WarmupTickRate; // 0x550 (4)
	float SecondsBeforeInactive; // 0x568 (4)
	float MaxTimeBeforeForceUpdateTransform; // 0x570 (4)
	struct TArray<Unknown> ReplayClips; // 0x590 (16)
	float CustomTimeDilation; // 0x5A8 (4)
	struct TWeakObjectPtr<struct Unknown> AutoAttachParent; // 0x600 (8)
	struct FName AutoAttachSocketName; // 0x608 (8)
	enum class Unknow AutoAttachLocationRule; // 0x610 (1)
	enum class Unknow AutoAttachRotationRule; // 0x611 (1)
	enum class Unknow AutoAttachScaleRule; // 0x612 (1)
	struct FMulticastInlineDelegate OnSystemFinished; // 0x640 (16)

	void SetTrailSourceData(struct FName InFirstSocketName, struct FName InSecondSocketName, char InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.SetTrailSourceData(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x457EF50>
	void SetTemplate(struct Unknown NewTemplate); // Function Engine.ParticleSystemComponent.SetTemplate(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x457EED0>
	void SetMaterialParameter(struct FName ParameterName, struct Unknown Param); // Function Engine.ParticleSystemComponent.SetMaterialParameter(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x457EE10>
	void SetBeamTargetTangent(int32_t EmitterIndex, struct Unknown NewTangentPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetTangent(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x457E9C0>
	void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetStrength(Native|Public|BlueprintCallable) // <Game_BE.exe+0x457E8C0>
	void SetBeamTargetPoint(int32_t EmitterIndex, struct Unknown NewTargetPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetPoint(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x457E7B0>
	void SetBeamSourceTangent(int32_t EmitterIndex, struct Unknown NewTangentPoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceTangent(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x457E6A0>
	void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceStrength(Native|Public|BlueprintCallable) // <Game_BE.exe+0x457E5A0>
	void SetBeamSourcePoint(int32_t EmitterIndex, struct Unknown NewSourcePoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourcePoint(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x457E490>
	void SetBeamEndPoint(int32_t EmitterIndex, struct Unknown NewEndPoint); // Function Engine.ParticleSystemComponent.SetBeamEndPoint(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x457E3C0>
	void SetAutoAttachParams(struct Unknown Parent, struct FName SocketName, char LocationType); // Function Engine.ParticleSystemComponent.SetAutoAttachParams(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x457E120>
	int32_t GetNumActiveParticles(); // Function Engine.ParticleSystemComponent.GetNumActiveParticles(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x457E020>
	struct Unknown GetNamedMaterial(struct FName InName); // Function Engine.ParticleSystemComponent.GetNamedMaterial(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x457DF80>
	char GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, struct Unknown& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetTangent(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x457DE40>
	char GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength); // Function Engine.ParticleSystemComponent.GetBeamTargetStrength(Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x457DD20>
	char GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, struct Unknown& OutTargetPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetPoint(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x457DC10>
	char GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, struct Unknown& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamSourceTangent(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x457DB00>
	char GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength); // Function Engine.ParticleSystemComponent.GetBeamSourceStrength(Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x457D9E0>
	char GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, struct Unknown& OutSourcePoint); // Function Engine.ParticleSystemComponent.GetBeamSourcePoint(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x457D8D0>
	char GetBeamEndPoint(int32_t EmitterIndex, struct Unknown& OutEndPoint); // Function Engine.ParticleSystemComponent.GetBeamEndPoint(Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x457D7F0>
	void GenerateParticleEvent(struct FName InEventName, float InEmitterTime, struct Unknown InLocation, struct Unknown InDirection, struct Unknown InVelocity); // Function Engine.ParticleSystemComponent.GenerateParticleEvent(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x457D640>
	void EndTrails(); // Function Engine.ParticleSystemComponent.EndTrails(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x457D620>
	struct Unknown CreateNamedDynamicMaterialInstance(struct FName InName, struct Unknown SourceMaterial); // Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance(Native|Public|BlueprintCallable) // <Game_BE.exe+0x457D550>
	void BeginTrails(struct FName InFirstSocketName, struct FName InSecondSocketName, char InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.BeginTrails(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x457D370>
};

// Class Engine.ParticleSystemReplay
class UParticleSystemReplay : public Object {

public:

	int32_t ClipIDNumber; // 0x28 (4)
};

// Class Engine.PawnNoiseEmitterComponent
class UPawnNoiseEmitterComponent : public UActorComponent {

public:

	char bAIPerceptionSystemCompatibilityMode : 0; // 0xB0 (1)
	struct Unknown LastRemoteNoisePosition; // 0xB4 (12)
	float NoiseLifetime; // 0xC0 (4)
	float LastRemoteNoiseVolume; // 0xC4 (4)
	float LastRemoteNoiseTime; // 0xC8 (4)
	float LastLocalNoiseVolume; // 0xCC (4)
	float LastLocalNoiseTime; // 0xD0 (4)

	void MakeNoise(struct Unknown NoiseMaker, float Loudness, struct Unknown& NoiseLocation); // Function Engine.PawnNoiseEmitterComponent.MakeNoise(BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45833D0>
};

// Class Engine.PhysicalAnimationComponent
class UPhysicalAnimationComponent : public UActorComponent {

public:

	float StrengthMultiplyer; // 0xB0 (4)
	struct Unknown SkeletalMeshComponent; // 0xB8 (8)

	void SetStrengthMultiplyer(float InStrengthMultiplyer); // Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45837B0>
	void SetSkeletalMeshComponent(struct Unknown InSkeletalMeshComponent); // Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4583730>
	struct Unknown GetBodyTargetTransform(struct FName BodyName); // Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4582E10>
	void ApplyPhysicalAnimationSettingsBelow(struct FName BodyName, struct Unknown& PhysicalAnimationData, char bIncludeSelf); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x4582C20>
	void ApplyPhysicalAnimationSettings(struct FName BodyName, struct Unknown& PhysicalAnimationData); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x4582B40>
	void ApplyPhysicalAnimationProfileBelow(struct FName BodyName, struct FName ProfileName, char bIncludeSelf, char bClearNotFound); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45829F0>
};

// Class Engine.PhysicalMaterialMask
class UPhysicalMaterialMask : public Object {

public:

	int32_t UVChannelIndex; // 0x28 (4)
	char AddressX; // 0x2C (1)
	char AddressY; // 0x2D (1)
};

// Class Engine.PhysicsAsset
class UPhysicsAsset : public Object {

public:

	struct TArray<Unknown> BoundsBodies; // 0x30 (16)
	struct TArray<Unknown> SkeletalBodySetups; // 0x40 (16)
	struct TArray<Unknown> ConstraintSetup; // 0x50 (16)
	struct Unknown SolverIterations; // 0x60 (24)
	char bNotForDedicatedServer : 0; // 0x78 (1)
	struct Unknown ThumbnailInfo; // 0x120 (8)
	struct TArray<Unknown> BodySetup; // 0x128 (16)
};

// Class Engine.SkeletalBodySetup
class USkeletalBodySetup : public UBodySetup {

public:

	char bSkipScaleFromAnimation : 0; // 0x2D0 (1)
	struct TArray<Unknown> PhysicalAnimationData; // 0x2D8 (16)
};

// Class Engine.PhysicsCollisionHandler
class UPhysicsCollisionHandler : public Object {

public:

	float ImpactThreshold; // 0x28 (4)
	float ImpactReFireDelay; // 0x2C (4)
	struct Unknown DefaultImpactSound; // 0x30 (8)
	float LastImpactSoundTime; // 0x38 (4)
};

// Class Engine.PhysicsConstraintActor
class APhysicsConstraintActor : public ARigidBodyBase {

public:

	struct Unknown ConstraintComp; // 0x318 (8)
	struct Unknown ConstraintActor1; // 0x320 (8)
	struct Unknown ConstraintActor2; // 0x328 (8)
	char bDisableCollision : 0; // 0x330 (1)
};

// Class Engine.PhysicsConstraintComponent
class UPhysicsConstraintComponent : public USceneComponent {

public:

	struct Unknown ConstraintActor1; // 0x228 (8)
	struct Unknown ComponentName1; // 0x230 (8)
	struct Unknown ConstraintActor2; // 0x238 (8)
	struct Unknown ComponentName2; // 0x240 (8)
	struct Unknown ConstraintSetup; // 0x258 (8)
	struct FMulticastInlineDelegate OnConstraintBroken; // 0x260 (16)
	struct Unknown ConstraintInstance; // 0x270 (440)

	void SetOrientationDriveTwistAndSwing(char bEnableTwistDrive, char bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45871D0>
	void SetOrientationDriveSLERP(char bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4587140>
	void SetLinearZLimit(char ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearZLimit(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4587080>
	void SetLinearYLimit(char ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearYLimit(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4586FC0>
	void SetLinearXLimit(char ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearXLimit(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4586F00>
	void SetLinearVelocityTarget(struct Unknown& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4586E70>
	void SetLinearVelocityDrive(char bEnableDriveX, char bEnableDriveY, char bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4586D50>
	void SetLinearPositionTarget(struct Unknown& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4586C40>
	void SetLinearPositionDrive(char bEnableDriveX, char bEnableDriveY, char bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4586B20>
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetLinearDriveParams(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4586A10>
	void SetLinearBreakable(char bLinearBreakable, float LinearBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetLinearBreakable(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45868C0>
	void SetDisableCollision(char bDisableCollision); // Function Engine.PhysicsConstraintComponent.SetDisableCollision(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45867B0>
	void SetConstraintReferencePosition(char Frame, struct Unknown& RefPosition); // Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45866E0>
	void SetConstraintReferenceOrientation(char Frame, struct Unknown& PriAxis, struct Unknown& SecAxis); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45865C0>
	void SetConstraintReferenceFrame(char Frame, struct Unknown& RefFrame); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45864A0>
	void SetConstrainedComponents(struct Unknown Component1, struct FName BoneName1, struct Unknown Component2, struct FName BoneName2); // Function Engine.PhysicsConstraintComponent.SetConstrainedComponents(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4586350>
	void SetAngularVelocityTarget(struct Unknown& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45862C0>
	void SetAngularVelocityDriveTwistAndSwing(char bEnableTwistDrive, char bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45861F0>
	void SetAngularVelocityDriveSLERP(char bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4586160>
	void SetAngularVelocityDrive(char bEnableSwingDrive, char bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4586090>
	void SetAngularTwistLimit(char ConstraintType, float TwistLimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4585FD0>
	void SetAngularSwing2Limit(char MotionType, float Swing2LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4585F10>
	void SetAngularSwing1Limit(char MotionType, float Swing1LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4585E50>
	void SetAngularOrientationTarget(struct Unknown& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4585D40>
	void SetAngularOrientationDrive(char bEnableSwingDrive, char bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4585C70>
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetAngularDriveParams(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4585B60>
	void SetAngularDriveMode(char DriveMode); // Function Engine.PhysicsConstraintComponent.SetAngularDriveMode(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4585AE0>
	void SetAngularBreakable(char bAngularBreakable, float AngularBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetAngularBreakable(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4585990>
	char IsBroken(); // Function Engine.PhysicsConstraintComponent.IsBroken(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4585960>
	float GetCurrentTwist(); // Function Engine.PhysicsConstraintComponent.GetCurrentTwist(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4585470>
	float GetCurrentSwing2(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing2(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4585440>
	float GetCurrentSwing1(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing1(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x4585410>
	void GetConstraintForce(struct Unknown& OutLinearForce, struct Unknown& OutAngularForce); // Function Engine.PhysicsConstraintComponent.GetConstraintForce(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4585330>
	void BreakConstraint(); // Function Engine.PhysicsConstraintComponent.BreakConstraint(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4585310>
};

// Class Engine.PhysicsConstraintTemplate
class UPhysicsConstraintTemplate : public Object {

public:

	struct Unknown DefaultInstance; // 0x28 (440)
	struct TArray<Unknown> ProfileHandles; // 0x1E0 (16)
	struct Unknown DefaultProfile; // 0x1F0 (260)
};

// Class Engine.PhysicsHandleComponent
class UPhysicsHandleComponent : public UActorComponent {

public:

	struct Unknown GrabbedComponent; // 0xB0 (8)
	char bSoftAngularConstraint : 0; // 0xC0 (1)
	char bSoftLinearConstraint : 0; // 0xC0 (1)
	char bInterpolateTarget : 0; // 0xC0 (1)
	float LinearDamping; // 0xC4 (4)
	float LinearStiffness; // 0xC8 (4)
	float AngularDamping; // 0xCC (4)
	float AngularStiffness; // 0xD0 (4)
	float InterpolationSpeed; // 0x140 (4)

	void SetTargetRotation(struct Unknown NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetRotation(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4587410>
	void SetTargetLocationAndRotation(struct Unknown NewLocation, struct Unknown NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4587330>
	void SetTargetLocation(struct Unknown NewLocation); // Function Engine.PhysicsHandleComponent.SetTargetLocation(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45872A0>
	void SetLinearStiffness(float NewLinearStiffness); // Function Engine.PhysicsHandleComponent.SetLinearStiffness(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4586CD0>
	void SetLinearDamping(float NewLinearDamping); // Function Engine.PhysicsHandleComponent.SetLinearDamping(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4586990>
	void SetInterpolationSpeed(float NewInterpolationSpeed); // Function Engine.PhysicsHandleComponent.SetInterpolationSpeed(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4586840>
	void SetAngularStiffness(float NewAngularStiffness); // Function Engine.PhysicsHandleComponent.SetAngularStiffness(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4585DD0>
	void SetAngularDamping(float NewAngularDamping); // Function Engine.PhysicsHandleComponent.SetAngularDamping(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x4585A60>
	void ReleaseComponent(); // Function Engine.PhysicsHandleComponent.ReleaseComponent(Native|Public|BlueprintCallable) // <Game_BE.exe+0x206A070>
	void GrabComponentAtLocationWithRotation(struct Unknown Component, struct FName InBoneName, struct Unknown Location, struct Unknown Rotation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45857E0>
	void GrabComponentAtLocation(struct Unknown Component, struct FName InBoneName, struct Unknown GrabLocation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocation(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45856D0>
	void GrabComponent(struct Unknown Component, struct FName InBoneName, struct Unknown GrabLocation, char bConstrainRotation); // Function Engine.PhysicsHandleComponent.GrabComponent(Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x4585580>
	void GetTargetLocationAndRotation(struct Unknown& TargetLocation, struct Unknown& TargetRotation); // Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45854A0>
	struct Unknown GetGrabbedComponent(); // Function Engine.PhysicsHandleComponent.GetGrabbedComponent(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x36C4A80>
};

// Class Engine.PhysicsSettings
class UPhysicsSettings : public UDeveloperSettings {

public:

	float DefaultGravityZ; // 0x38 (4)
	float DefaultTerminalVelocity; // 0x3C (4)
	float DefaultFluidFriction; // 0x40 (4)
	int32_t SimulateScratchMemorySize; // 0x44 (4)
	int32_t RagdollAggregateThreshold; // 0x48 (4)
	float TriangleMeshTriangleMinAreaThreshold; // 0x4C (4)
	char bEnableShapeSharing : 0; // 0x50 (1)
	char bEnablePCM : 0; // 0x51 (1)
	char bEnableStabilization : 0; // 0x52 (1)
	char bWarnMissingLocks : 0; // 0x53 (1)
	char bEnable2DPhysics : 0; // 0x54 (1)
	struct Unknown PhysicErrorCorrection; // 0x58 (52)
	char LockedAxis; // 0x8C (1)
	char DefaultDegreesOfFreedom; // 0x8D (1)
	float BounceThresholdVelocity; // 0x90 (4)
	char FrictionCombineMode; // 0x94 (1)
	char RestitutionCombineMode; // 0x95 (1)
	float MaxAngularVelocity; // 0x98 (4)
	float MaxDepenetrationVelocity; // 0x9C (4)
	float ContactOffsetMultiplier; // 0xA0 (4)
	float MinContactOffset; // 0xA4 (4)
	float MaxContactOffset; // 0xA8 (4)
	char bSimulateSkeletalMeshOnDedicatedServer : 0; // 0xAC (1)
	char DefaultShapeComplexity; // 0xAD (1)
	char bDefaultHasComplexCollision : 0; // 0xAE (1)
	char bSuppressFaceRemapTable : 0; // 0xAF (1)
	char bSupportUVFromHitResults : 0; // 0xB0 (1)
	char bDisableActiveActors : 0; // 0xB1 (1)
	char bDisableKinematicStaticPairs : 0; // 0xB2 (1)
	char bDisableKinematicKinematicPairs : 0; // 0xB3 (1)
	char bDisableCCD : 0; // 0xB4 (1)
	char bEnableEnhancedDeterminism : 0; // 0xB5 (1)
	float AnimPhysicsMinDeltaTime; // 0xB8 (4)
	char bSimulateAnimPhysicsAfterReset : 0; // 0xBC (1)
	float MaxPhysicsDeltaTime; // 0xC0 (4)
	char bSubstepping : 0; // 0xC4 (1)
	char bSubsteppingAsync : 0; // 0xC5 (1)
	float MaxSubstepDeltaTime; // 0xC8 (4)
	int32_t MaxSubsteps; // 0xCC (4)
	float SyncSceneSmoothingFactor; // 0xD0 (4)
	float InitialAverageFrameRate; // 0xD4 (4)
	int32_t PhysXTreeRebuildRate; // 0xD8 (4)
	struct TArray<Unknown> PhysicalSurfaces; // 0xE0 (16)
	struct Unknown DefaultBroadphaseSettings; // 0xF0 (64)
	struct Unknown ChaosSettings; // 0x130 (3)
};

// Class Engine.PhysicsSpringComponent
class UPhysicsSpringComponent : public USceneComponent {

public:

	float SpringStiffness; // 0x228 (4)
	float SpringDamping; // 0x22C (4)
	float SpringLengthAtRest; // 0x230 (4)
	float SpringRadius; // 0x234 (4)
	char SpringChannel; // 0x238 (1)
	char bIgnoreSelf : 0; // 0x239 (1)
	float SpringCompression; // 0x23C (4)

	struct Unknown GetSpringRestingPoint(); // Function Engine.PhysicsSpringComponent.GetSpringRestingPoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x458B240>
	struct Unknown GetSpringDirection(); // Function Engine.PhysicsSpringComponent.GetSpringDirection(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x458B200>
	struct Unknown GetSpringCurrentEndPoint(); // Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x458B1C0>
	float GetNormalizedCompressionScalar(); // Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x458B160>
};

// Class Engine.PhysicsThruster
class APhysicsThruster : public ARigidBodyBase {

public:

	struct Unknown ThrusterComponent; // 0x318 (8)
};

// Class Engine.PhysicsThrusterComponent
class UPhysicsThrusterComponent : public USceneComponent {

public:

	float ThrustStrength; // 0x228 (4)
};

// Class Engine.PlanarReflection
class APlanarReflection : public ASceneCapture {

public:

	struct Unknown PlanarReflectionComponent; // 0x328 (8)
	char bShowPreviewPlane : 0; // 0x330 (1)

	void OnInterpToggle(char bEnable); // Function Engine.PlanarReflection.OnInterpToggle(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x458B2E0>
};

// Class Engine.PlanarReflectionComponent
class UPlanarReflectionComponent : public USceneCaptureComponent {

public:

	struct Unknown PreviewBox; // 0x2C0 (8)
	float NormalDistortionStrength; // 0x2C8 (4)
	float PrefilterRoughness; // 0x2CC (4)
	float PrefilterRoughnessDistance; // 0x2D0 (4)
	int32_t ScreenPercentage; // 0x2D4 (4)
	float ExtraFOV; // 0x2D8 (4)
	float DistanceFromPlaneFadeStart; // 0x2DC (4)
	float DistanceFromPlaneFadeEnd; // 0x2E0 (4)
	float DistanceFromPlaneFadeoutStart; // 0x2E4 (4)
	float DistanceFromPlaneFadeoutEnd; // 0x2E8 (4)
	float AngleFromPlaneFadeStart; // 0x2EC (4)
	float AngleFromPlaneFadeEnd; // 0x2F0 (4)
	char bShowPreviewPlane : 0; // 0x2F4 (1)
	char bRenderSceneTwoSided : 0; // 0x2F5 (1)
};

// Class Engine.PlaneReflectionCaptureComponent
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent {

public:

	float InfluenceRadiusScale; // 0x2B0 (4)
	struct Unknown PreviewInfluenceRadius; // 0x2B8 (8)
	struct Unknown PreviewCaptureBox; // 0x2C0 (8)
};

// Class Engine.PlatformEventsComponent
class UPlatformEventsComponent : public UActorComponent {

public:

	struct FMulticastInlineDelegate PlatformChangedToLaptopModeDelegate; // 0xB0 (16)
	struct FMulticastInlineDelegate PlatformChangedToTabletModeDelegate; // 0xC0 (16)

	char SupportsConvertibleLaptops(); // Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x458C2F0>
	void PlatformEventDelegate__DelegateSignature(); // DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature(MulticastDelegate|Public|Delegate) // <Game_BE.exe+0x2B80160>
	char IsInTabletMode(); // Function Engine.PlatformEventsComponent.IsInTabletMode(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x458B2B0>
	char IsInLaptopMode(); // Function Engine.PlatformEventsComponent.IsInLaptopMode(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x458B280>
};

// Class Engine.PlatformInterfaceWebResponse
class UPlatformInterfaceWebResponse : public Object {

public:

	struct FString OriginalURL; // 0x28 (16)
	int32_t responsecode; // 0x38 (4)
	int32_t Tag; // 0x3C (4)
	struct FString StringResponse; // 0x40 (16)
	struct TArray<Unknown> BinaryResponse; // 0x50 (16)

	int32_t GetNumHeaders(); // Function Engine.PlatformInterfaceWebResponse.GetNumHeaders(Native|Public) // <Game_BE.exe+0x1530360>
	struct FString GetHeaderValue(struct FString HeaderName); // Function Engine.PlatformInterfaceWebResponse.GetHeaderValue(Native|Public) // <Game_BE.exe+0x458B070>
	void GetHeader(int32_t HeaderIndex, struct FString& Header, struct FString& Value); // Function Engine.PlatformInterfaceWebResponse.GetHeader(Native|Public|HasOutParms) // <Game_BE.exe+0x458AF00>
};

// Class Engine.PlayerInput
class UPlayerInput : public Object {

public:

	struct TArray<Unknown> DebugExecBindings; // 0x120 (16)
	struct TArray<Unknown> InvertedAxis; // 0x160 (16)

	void SetMouseSensitivity(float Sensitivity); // Function Engine.PlayerInput.SetMouseSensitivity(Final|Exec|Native|Public) // <Game_BE.exe+0x459BA60>
	void SetBind(struct FName BindName, struct FString Command); // Function Engine.PlayerInput.SetBind(Final|Exec|Native|Public) // <Game_BE.exe+0x459B3F0>
	void InvertAxisKey(struct Unknown AxisKey); // Function Engine.PlayerInput.InvertAxisKey(Final|Exec|Native|Public) // <Game_BE.exe+0x459B290>
	void InvertAxis(struct FName AxisName); // Function Engine.PlayerInput.InvertAxis(Final|Exec|Native|Public) // <Game_BE.exe+0x459B210>
	void ClearSmoothing(); // Function Engine.PlayerInput.ClearSmoothing(Final|Exec|Native|Public) // <Game_BE.exe+0x459AD80>
};

// Class Engine.PointLight
class APointLight : public ALight {

public:

	struct Unknown PointLightComponent; // 0x328 (8)

	void SetRadius(float NewRadius); // Function Engine.PointLight.SetRadius(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x459BAE0>
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLight.SetLightFalloffExponent(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x459B960>
};

// Class Engine.PointLightComponent
class UPointLightComponent : public ULocalLightComponent {

public:

	char bUseInverseSquaredFalloff : 0; // 0x388 (1)
	float LightFalloffExponent; // 0x38C (4)
	float SourceRadius; // 0x390 (4)
	float SoftSourceRadius; // 0x394 (4)
	float SourceLength; // 0x398 (4)

	void SetSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSourceRadius(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x459BC60>
	void SetSourceLength(float NewValue); // Function Engine.PointLightComponent.SetSourceLength(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x459BBE0>
	void SetSoftSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSoftSourceRadius(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x459BB60>
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLightComponent.SetLightFalloffExponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x459B9E0>
};

// Class Engine.PoseAsset
class UPoseAsset : public UAnimationAsset {

public:

	struct Unknown PoseContainer; // 0x90 (144)
	char bAdditivePose : 0; // 0x120 (1)
	int32_t BasePoseIndex; // 0x124 (4)
	struct FName RetargetSource; // 0x128 (8)
};

// Class Engine.PoseWatch
class UPoseWatch : public Object {

public:

	struct Unknown Node; // 0x28 (8)
	struct Unknown PoseWatchColour; // 0x30 (4)
};

// Class Engine.PostProcessComponent
class UPostProcessComponent : public USceneComponent {

public:

	struct Unknown Settings; // 0x230 (1472)
	float Priority; // 0x7F0 (4)
	float BlendRadius; // 0x7F4 (4)
	float BlendWeight; // 0x7F8 (4)
	char bEnabled : 0; // 0x7FC (1)
	char bUnbound : 0; // 0x7FC (1)

	void AddOrUpdateBlendable(struct TScriptInterface<IUnknown> InBlendableObject, float InWeight); // Function Engine.PostProcessComponent.AddOrUpdateBlendable(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x459AC30>
};

// Class Engine.PostProcessVolume
class APostProcessVolume : public AVolume {

public:

	struct Unknown Settings; // 0x360 (1472)
	float Priority; // 0x920 (4)
	float BlendRadius; // 0x924 (4)
	float BlendWeight; // 0x928 (4)
	char bEnabled : 0; // 0x92C (1)
	char bUnbound : 0; // 0x92C (1)

	void AddOrUpdateBlendable(struct TScriptInterface<IUnknown> InBlendableObject, float InWeight); // Function Engine.PostProcessVolume.AddOrUpdateBlendable(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x459AAE0>
};

// Class Engine.PrecomputedVisibilityOverrideVolume
class APrecomputedVisibilityOverrideVolume : public AVolume {

public:

	struct TArray<Unknown> OverrideVisibleActors; // 0x350 (16)
	struct TArray<Unknown> OverrideInvisibleActors; // 0x360 (16)
	struct TArray<Unknown> OverrideInvisibleLevels; // 0x370 (16)
};

// Class Engine.PreviewMeshCollection
class UPreviewMeshCollection : public UDataAsset {

public:

	struct Unknown Skeleton; // 0x58 (8)
	struct TArray<Unknown> SkeletalMeshes; // 0x40 (16)
};

// Class Engine.PrimaryAssetLabel
class UPrimaryAssetLabel : public UPrimaryDataAsset {

public:

	struct Unknown Rules; // 0x30 (12)
	char bLabelAssetsInMyDirectory : 0; // 0x3C (1)
	char bIsRuntimeLabel : 0; // 0x3C (1)
	struct TArray<Unknown> ExplicitAssets; // 0x40 (16)
	struct TArray<Unknown> ExplicitBlueprints; // 0x50 (16)
	struct Unknown AssetCollection; // 0x60 (8)
};

// Class Engine.ProxyLODMeshSimplificationSettings
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings {

public:

	struct FName ProxyLODMeshReductionModuleName; // 0x38 (8)
};

// Class Engine.RadialForceActor
class ARadialForceActor : public ARigidBodyBase {

public:

	struct Unknown ForceComponent; // 0x318 (8)

	void ToggleForce(); // Function Engine.RadialForceActor.ToggleForce(Native|Public|BlueprintCallable) // <Game_BE.exe+0x1F3B8B0>
	void FireImpulse(); // Function Engine.RadialForceActor.FireImpulse(Native|Public|BlueprintCallable) // <Game_BE.exe+0x1E71820>
	void EnableForce(); // Function Engine.RadialForceActor.EnableForce(Native|Public|BlueprintCallable) // <Game_BE.exe+0x124C7C0>
	void DisableForce(); // Function Engine.RadialForceActor.DisableForce(Native|Public|BlueprintCallable) // <Game_BE.exe+0x1F3D150>
};

// Class Engine.RadialForceComponent
class URadialForceComponent : public USceneComponent {

public:

	float Radius; // 0x228 (4)
	char Falloff; // 0x22C (1)
	float ImpulseStrength; // 0x230 (4)
	char bImpulseVelChange : 0; // 0x234 (1)
	char bIgnoreOwningActor : 0; // 0x234 (1)
	float ForceStrength; // 0x238 (4)
	float DestructibleDamage; // 0x23C (4)
	struct TArray<Unknown> ObjectTypesToAffect; // 0x240 (16)

	void RemoveObjectTypeToAffect(char ObjectType); // Function Engine.RadialForceComponent.RemoveObjectTypeToAffect(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A7160>
	void FireImpulse(); // Function Engine.RadialForceComponent.FireImpulse(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A6F10>
	void AddObjectTypeToAffect(char ObjectType); // Function Engine.RadialForceComponent.AddObjectTypeToAffect(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A6E90>
};

// Class Engine.RectLight
class ARectLight : public ALight {

public:

	struct Unknown RectLightComponent; // 0x328 (8)
};

// Class Engine.RectLightComponent
class URectLightComponent : public ULocalLightComponent {

public:

	float SourceWidth; // 0x388 (4)
	float SourceHeight; // 0x38C (4)
	float BarnDoorAngle; // 0x390 (4)
	float BarnDoorLength; // 0x394 (4)
	struct Unknown SourceTexture; // 0x398 (8)

	void SetSourceWidth(float bNewValue); // Function Engine.RectLightComponent.SetSourceWidth(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A7410>
	void SetSourceTexture(struct Unknown bNewValue); // Function Engine.RectLightComponent.SetSourceTexture(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A7390>
	void SetSourceHeight(float NewValue); // Function Engine.RectLightComponent.SetSourceHeight(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x459B9E0>
	void SetBarnDoorLength(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorLength(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A7280>
	void SetBarnDoorAngle(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorAngle(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45A7200>
};

// Class Engine.RendererSettings
class URendererSettings : public UDeveloperSettings {

public:

	char bMobileDisableVertexFog : 0; // 0x38 (1)
	int32_t MaxMobileCascades; // 0x3C (4)
	char MobileMSAASampleCount; // 0x40 (1)
	char bMobileUseLegacyShadingModel : 0; // 0x44 (1)
	char bMobileAllowDitheredLODTransition : 0; // 0x44 (1)
	char bMobileAllowSoftwareOcclusionCulling : 0; // 0x44 (1)
	char bMobileVirtualTextures : 0; // 0x44 (1)
	char bDiscardUnusedQualityLevels : 0; // 0x44 (1)
	char bOcclusionCulling : 0; // 0x44 (1)
	float MinScreenRadiusForLights; // 0x48 (4)
	float MinScreenRadiusForEarlyZPass; // 0x4C (4)
	float MinScreenRadiusForCSMdepth; // 0x50 (4)
	char bPrecomputedVisibilityWarning : 0; // 0x54 (1)
	char bUseCullDistanceVolumes : 0; // 0x54 (1)
	char bTextureStreaming : 0; // 0x54 (1)
	char bUseDXT5NormalMaps : 0; // 0x54 (1)
	char bVirtualTextures : 0; // 0x54 (1)
	char bVirtualTexturedLightmaps : 0; // 0x54 (1)
	uint32_t VirtualTextureTileSize; // 0x58 (4)
	uint32_t VirtualTextureTileBorderSize; // 0x5C (4)
	uint32_t VirtualTextureFeedbackFactor; // 0x60 (4)
	char bVirtualTextureEnableCompressZlib : 0; // 0x64 (1)
	char bVirtualTextureEnableCompressCrunch : 0; // 0x64 (1)
	char bClearCoatEnableSecondNormal : 0; // 0x64 (1)
	char bPreIntegratedSkinBRDF : 0; // 0x64 (1)
	char bAnisotropicBRDF : 0; // 0x64 (1)
	int32_t ReflectionCaptureResolution; // 0x68 (4)
	char ReflectionEnvironmentLightmapMixBasedOnRoughness : 0; // 0x6C (1)
	char bForwardShading : 0; // 0x6C (1)
	char bVertexFoggingForOpaque : 0; // 0x6C (1)
	char bAllowStaticLighting : 0; // 0x6C (1)
	char bUseNormalMapsForStaticLighting : 0; // 0x6C (1)
	char bGenerateMeshDistanceFields : 0; // 0x6C (1)
	char bEightBitMeshDistanceFields : 0; // 0x6C (1)
	char bGenerateLandscapeGIData : 0; // 0x6C (1)
	char bCompressMeshDistanceFields : 0; // 0x6D (1)
	float TessellationAdaptivePixelsPerTriangle; // 0x70 (4)
	char bSeparateTranslucency : 0; // 0x74 (1)
	char TranslucentSortPolicy; // 0x78 (1)
	struct Unknown TranslucentSortAxis; // 0x7C (12)
	char CustomDepthStencil; // 0x88 (1)
	char bCustomDepthTaaJitter : 0; // 0x8C (1)
	char bEnableAlphaChannelInPostProcessing; // 0x90 (1)
	char bDefaultFeatureBloom : 0; // 0x94 (1)
	char bDefaultFeatureAmbientOcclusion : 0; // 0x94 (1)
	char bDefaultFeatureAmbientOcclusionStaticFraction : 0; // 0x94 (1)
	char bDefaultFeatureAutoExposure : 0; // 0x94 (1)
	char DefaultFeatureAutoExposure; // 0x98 (1)
	float DefaultFeatureAutoExposureBias; // 0x9C (4)
	char bExtendDefaultLuminanceRangeInAutoExposureSettings : 0; // 0xA0 (1)
	char bUsePreExposure : 0; // 0xA0 (1)
	char bEnablePreExposureOnlyInTheEditor : 0; // 0xA0 (1)
	char bDefaultFeatureMotionBlur : 0; // 0xA0 (1)
	char bDefaultFeatureLensFlare : 0; // 0xA0 (1)
	char bTemporalUpsampling : 0; // 0xA0 (1)
	char bSSGI : 0; // 0xA0 (1)
	char DefaultFeatureAntiAliasing; // 0xA4 (1)
	enum class Unknow DefaultLightUnits; // 0xA5 (1)
	char DefaultBackBufferPixelFormat; // 0xA6 (1)
	char bRenderUnbuiltPreviewShadowsInGame : 0; // 0xA8 (1)
	char bStencilForLODDither : 0; // 0xA8 (1)
	char EarlyZPass; // 0xAC (1)
	char bEarlyZPassOnlyMaterialMasking : 0; // 0xB0 (1)
	char bDBuffer : 0; // 0xB0 (1)
	char ClearSceneMethod; // 0xB4 (1)
	char bBasePassOutputsVelocity : 0; // 0xB8 (1)
	char bVertexDeformationOutputsVelocity : 0; // 0xB8 (1)
	char bSelectiveBasePassOutputs : 0; // 0xB8 (1)
	char bDefaultParticleCutouts : 0; // 0xB8 (1)
	int32_t GPUSimulationTextureSizeX; // 0xBC (4)
	int32_t GPUSimulationTextureSizeY; // 0xC0 (4)
	char bGlobalClipPlane : 0; // 0xC4 (1)
	char GBufferFormat; // 0xC8 (1)
	char bUseGPUMorphTargets : 0; // 0xCC (1)
	char bNvidiaAftermathEnabled : 0; // 0xCC (1)
	char bMultiView : 0; // 0xCC (1)
	char bMobilePostProcessing : 0; // 0xCC (1)
	char bMobileMultiView : 0; // 0xCC (1)
	char bMobileUseHWsRGBEncoding : 0; // 0xCC (1)
	char bRoundRobinOcclusion : 0; // 0xCC (1)
	char bODSCapture : 0; // 0xCC (1)
	char bMeshStreaming : 0; // 0xCD (1)
	float WireframeCullThreshold; // 0xD0 (4)
	char bEnableRayTracing : 0; // 0xD4 (1)
	char bEnableRayTracingTextureLOD : 0; // 0xD4 (1)
	char bSupportStationarySkylight : 0; // 0xD4 (1)
	char bSupportLowQualityLightmaps : 0; // 0xD4 (1)
	char bSupportPointLightWholeSceneShadows : 0; // 0xD4 (1)
	char bSupportAtmosphericFog : 0; // 0xD4 (1)
	char bSupportSkyAtmosphere : 0; // 0xD4 (1)
	char bSupportSkyAtmosphereAffectsHeightFog : 0; // 0xD4 (1)
	char bSupportSkinCacheShaders : 0; // 0xD5 (1)
	enum class Unknow DefaultSkinCacheBehavior; // 0xD8 (1)
	float SkinCacheSceneMemoryLimitInMB; // 0xDC (4)
	char bMobileEnableStaticAndCSMShadowReceivers : 0; // 0xE0 (1)
	char bMobileEnableMovableLightCSMShaderCulling : 0; // 0xE0 (1)
	char bMobileAllowDistanceFieldShadows : 0; // 0xE0 (1)
	char bMobileAllowMovableDirectionalLights : 0; // 0xE0 (1)
	uint32_t MobileNumDynamicPointLights; // 0xE4 (4)
	char bMobileDynamicPointLightsUseStaticBranch : 0; // 0xE8 (1)
	char bMobileAllowMovableSpotlights : 0; // 0xE8 (1)
	char bSupport16BitBoneIndex : 0; // 0xE8 (1)
	char bGPUSkinLimit2BoneInfluences : 0; // 0xE8 (1)
	char bSupportDepthOnlyIndexBuffers : 0; // 0xE8 (1)
	char bSupportReversedIndexBuffers : 0; // 0xE8 (1)
	char bSupportMaterialLayers : 0; // 0xE8 (1)
	char bLPV : 0; // 0xE8 (1)
};

// Class Engine.RendererOverrideSettings
class URendererOverrideSettings : public UDeveloperSettings {

public:

	char bSupportAllShaderPermutations : 0; // 0x38 (1)
	char bForceRecomputeTangents : 0; // 0x38 (1)
};

// Class Engine.ReverbEffect
class UReverbEffect : public Object {

public:

	float Density; // 0x28 (4)
	float Diffusion; // 0x2C (4)
	float Gain; // 0x30 (4)
	float GainHF; // 0x34 (4)
	float DecayTime; // 0x38 (4)
	float DecayHFRatio; // 0x3C (4)
	float ReflectionsGain; // 0x40 (4)
	float ReflectionsDelay; // 0x44 (4)
	float LateGain; // 0x48 (4)
	float LateDelay; // 0x4C (4)
	float AirAbsorptionGainHF; // 0x50 (4)
	float RoomRolloffFactor; // 0x54 (4)
};

// Class Engine.Rig
class URig : public Object {

public:

	struct TArray<Unknown> TransformBases; // 0x30 (16)
	struct TArray<Unknown> Nodes; // 0x40 (16)
};

// Class Engine.RotatingMovementComponent
class URotatingMovementComponent : public UMovementComponent {

public:

	struct Unknown RotationRate; // 0xF0 (12)
	struct Unknown PivotTranslation; // 0xFC (12)
	char bRotationInLocalSpace : 0; // 0x108 (1)
};

// Class Engine.RuntimeVirtualTexture
class URuntimeVirtualTexture : public Object {

public:

	enum class Unknow MaterialType; // 0x28 (1)
	char bCompressTextures : 0; // 0x29 (1)
	char bEnable : 0; // 0x2A (1)
	char bClearTextures : 0; // 0x2B (1)
	char bSinglePhysicalSpace : 0; // 0x2C (1)
	char bPrivateSpace : 0; // 0x2D (1)
	char bEnableScalability : 0; // 0x2E (1)
	int32_t Size; // 0x30 (4)
	int32_t TileCount; // 0x34 (4)
	int32_t TileSize; // 0x38 (4)
	int32_t TileBorderSize; // 0x3C (4)
	int32_t StreamLowMips; // 0x40 (4)
	struct Unknown StreamingTexture; // 0x48 (8)
	char bEnableCompressCrunch : 0; // 0x50 (1)
	int32_t RemoveLowMips; // 0x54 (4)

	int32_t GetTileSize(); // Function Engine.RuntimeVirtualTexture.GetTileSize(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45AD2B0>
	int32_t GetTileCount(); // Function Engine.RuntimeVirtualTexture.GetTileCount(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45AD270>
	int32_t GetTileBorderSize(); // Function Engine.RuntimeVirtualTexture.GetTileBorderSize(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45AD230>
	int32_t GetSize(); // Function Engine.RuntimeVirtualTexture.GetSize(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45AD1C0>
};

// Class Engine.RuntimeVirtualTextureComponent
class URuntimeVirtualTextureComponent : public USceneComponent {

public:

	struct Unknown VirtualTexture; // 0x228 (8)
	char bUseStreamingLowMipsInEditor : 0; // 0x230 (1)
	struct Unknown BoundsSourceActor; // 0x238 (8)

	struct Unknown GetVirtualTextureTransform(); // Function Engine.RuntimeVirtualTextureComponent.GetVirtualTextureTransform(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45AD300>
};

// Class Engine.RuntimeVirtualTextureStreamingProxy
class URuntimeVirtualTextureStreamingProxy : public UTexture2D {

public:

	struct Unknown Settings; // 0xE8 (12)
	char bSinglePhysicalSpace : 0; // 0xF4 (1)
	uint32_t BuildHash; // 0xF8 (4)
};

// Class Engine.RuntimeVirtualTextureVolume
class ARuntimeVirtualTextureVolume : public UActor {

public:

	struct Unknown VirtualTextureComponent; // 0x318 (8)
};

// Class Engine.SceneCaptureComponentCube
class USceneCaptureComponentCube : public USceneCaptureComponent {

public:

	struct Unknown TextureTarget; // 0x2C0 (8)
	char bCaptureRotation : 0; // 0x2C8 (1)
	struct Unknown TextureTargetLeft; // 0x2D0 (8)
	struct Unknown TextureTargetRight; // 0x2D8 (8)
	struct Unknown TextureTargetODS; // 0x2E0 (8)
	float IPD; // 0x2E8 (4)

	void CaptureScene(); // Function Engine.SceneCaptureComponentCube.CaptureScene(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45B4000>
};

// Class Engine.SceneCaptureCube
class ASceneCaptureCube : public ASceneCapture {

public:

	struct Unknown CaptureComponentCube; // 0x328 (8)

	void OnInterpToggle(char bEnable); // Function Engine.SceneCaptureCube.OnInterpToggle(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x458B2E0>
};

// Class Engine.SCS_Node
class USCS_Node : public Object {

public:

	struct Unknown* ComponentClass; // 0x28 (8)
	struct Unknown ComponentTemplate; // 0x30 (8)
	struct Unknown CookedComponentInstancingData; // 0x38 (72)
	struct FName AttachToName; // 0x80 (8)
	struct FName ParentComponentOrVariableName; // 0x88 (8)
	struct FName ParentComponentOwnerClassName; // 0x90 (8)
	char bIsParentComponentNative : 0; // 0x98 (1)
	struct TArray<Unknown> ChildNodes; // 0xA0 (16)
	struct TArray<Unknown> MetaDataArray; // 0xB0 (16)
	struct Unknown VariableGuid; // 0xC0 (16)
	struct FName InternalVariableName; // 0xD0 (8)
};

// Class Engine.ServerStatReplicator
class AServerStatReplicator : public AInfo {

public:

	char bUpdateStatNet : 0; // 0x318 (1)
	char bOverwriteClientStats : 0; // 0x319 (1)
	uint32_t Channels; // 0x31C (4)
	uint32_t InRate; // 0x320 (4)
	uint32_t OutRate; // 0x324 (4)
	uint32_t MaxPacketOverhead; // 0x32C (4)
	uint32_t InRateClientMax; // 0x330 (4)
	uint32_t InRateClientMin; // 0x334 (4)
	uint32_t InRateClientAvg; // 0x338 (4)
	uint32_t InPacketsClientMax; // 0x33C (4)
	uint32_t InPacketsClientMin; // 0x340 (4)
	uint32_t InPacketsClientAvg; // 0x344 (4)
	uint32_t OutRateClientMax; // 0x348 (4)
	uint32_t OutRateClientMin; // 0x34C (4)
	uint32_t OutRateClientAvg; // 0x350 (4)
	uint32_t OutPacketsClientMax; // 0x354 (4)
	uint32_t OutPacketsClientMin; // 0x358 (4)
	uint32_t OutPacketsClientAvg; // 0x35C (4)
	uint32_t NetNumClients; // 0x360 (4)
	uint32_t InPackets; // 0x364 (4)
	uint32_t OutPackets; // 0x368 (4)
	uint32_t InBunches; // 0x36C (4)
	uint32_t OutBunches; // 0x370 (4)
	uint32_t OutLoss; // 0x374 (4)
	uint32_t InLoss; // 0x378 (4)
	uint32_t VoiceBytesSent; // 0x37C (4)
	uint32_t VoiceBytesRecv; // 0x380 (4)
	uint32_t VoicePacketsSent; // 0x384 (4)
	uint32_t VoicePacketsRecv; // 0x388 (4)
	uint32_t PercentInVoice; // 0x38C (4)
	uint32_t PercentOutVoice; // 0x390 (4)
	uint32_t NumActorChannels; // 0x394 (4)
	uint32_t NumConsideredActors; // 0x398 (4)
	uint32_t PrioritizedActors; // 0x39C (4)
	uint32_t NumRelevantActors; // 0x3A0 (4)
	uint32_t NumRelevantDeletedActors; // 0x3A4 (4)
	uint32_t NumReplicatedActorAttempts; // 0x3A8 (4)
	uint32_t NumReplicatedActors; // 0x3AC (4)
	uint32_t NumActors; // 0x3B0 (4)
	uint32_t NumNetActors; // 0x3B4 (4)
	uint32_t NumDormantActors; // 0x3B8 (4)
	uint32_t NumInitiallyDormantActors; // 0x3BC (4)
	uint32_t NumNetGUIDsAckd; // 0x3C0 (4)
	uint32_t NumNetGUIDsPending; // 0x3C4 (4)
	uint32_t NumNetGUIDsUnAckd; // 0x3C8 (4)
	uint32_t ObjPathBytes; // 0x3CC (4)
	uint32_t NetGUIDOutRate; // 0x3D0 (4)
	uint32_t NetGUIDInRate; // 0x3D4 (4)
	uint32_t NetSaturated; // 0x3D8 (4)
};

// Class Engine.ShadowMapTexture2D
class UShadowMapTexture2D : public UTexture2D {

public:

	char ShadowmapFlags; // 0xE8 (1)
};

// Class Engine.SimpleConstructionScript
class USimpleConstructionScript : public Object {

public:

	struct TArray<Unknown> RootNodes; // 0x28 (16)
	struct TArray<Unknown> AllNodes; // 0x38 (16)
	struct Unknown DefaultSceneRootNode; // 0x48 (8)
};

// Class Engine.SkeletalMeshLODSettings
class USkeletalMeshLODSettings : public UDataAsset {

public:

	struct Unknown MinLOD; // 0x30 (4)
	struct Unknown DisableBelowMinLodStripping; // 0x34 (1)
	struct Unknown bSupportLODStreaming; // 0x35 (1)
	struct Unknown MaxNumStreamedLODs; // 0x38 (4)
	struct Unknown MaxNumOptionalLODs; // 0x3C (4)
	struct TArray<Unknown> LODGroups; // 0x40 (16)
};

// Class Engine.SkeletalMeshSimplificationSettings
class USkeletalMeshSimplificationSettings : public UDeveloperSettings {

public:

	struct FName SkeletalMeshReductionModuleName; // 0x38 (8)
};

// Class Engine.SkeletalMeshSocket
class USkeletalMeshSocket : public Object {

public:

	struct FName SocketName; // 0x28 (8)
	struct FName BoneName; // 0x30 (8)
	struct Unknown RelativeLocation; // 0x38 (12)
	struct Unknown RelativeRotation; // 0x44 (12)
	struct Unknown RelativeScale; // 0x50 (12)
	char bForceAlwaysAnimated : 0; // 0x5C (1)

	void InitializeSocketFromLocation(struct Unknown SkelComp, struct Unknown WorldLocation, struct Unknown WorldNormal); // Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45CA320>
	struct Unknown GetSocketLocation(struct Unknown SkelComp); // Function Engine.SkeletalMeshSocket.GetSocketLocation(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45CA0A0>
};

// Class Engine.SkyAtmosphereComponent
class USkyAtmosphereComponent : public USceneComponent {

public:

	enum class Unknow TransformMode; // 0x228 (1)
	float BottomRadius; // 0x22C (4)
	struct Unknown GroundAlbedo; // 0x230 (4)
	float AtmosphereHeight; // 0x234 (4)
	float MultiScatteringFactor; // 0x238 (4)
	float RayleighScatteringScale; // 0x23C (4)
	struct Unknown RayleighScattering; // 0x240 (16)
	float RayleighExponentialDistribution; // 0x250 (4)
	float MieScatteringScale; // 0x254 (4)
	struct Unknown MieScattering; // 0x258 (16)
	float MieAbsorptionScale; // 0x268 (4)
	struct Unknown MieAbsorption; // 0x26C (16)
	float MieAnisotropy; // 0x27C (4)
	float MieExponentialDistribution; // 0x280 (4)
	float OtherAbsorptionScale; // 0x284 (4)
	struct Unknown OtherAbsorption; // 0x288 (16)
	struct Unknown OtherTentDistribution; // 0x298 (12)
	struct Unknown SkyLuminanceFactor; // 0x2A4 (16)
	float AerialPespectiveViewDistanceScale; // 0x2B4 (4)
	float HeightFogContribution; // 0x2B8 (4)
	float TransmittanceMinLightElevationAngle; // 0x2BC (4)
	struct Unknown bStaticLightingBuiltGUID; // 0x2E4 (16)

	void SetSkyLuminanceFactor(struct Unknown NewValue); // Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45D0360>
	void SetRayleighScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45D02E0>
	void SetRayleighScattering(struct Unknown NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScattering(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45D0260>
	void SetRayleighExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45D01E0>
	void SetOtherAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D5A0>
	void SetOtherAbsorption(struct Unknown NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorption(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45D0160>
	void SetMieScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScatteringScale(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CFDB0>
	void SetMieScattering(struct Unknown NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScattering(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45CFD30>
	void SetMieExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D620>
	void SetMieAnisotropy(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAnisotropy(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x453D7B0>
	void SetMieAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CFCB0>
	void SetMieAbsorption(struct Unknown NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorption(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45CFC30>
	void SetHeightFogContribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetHeightFogContribution(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CF9A0>
	void SetAerialPespectiveViewDistanceScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CF700>
	void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, struct Unknown& LightDirection); // Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection(Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45CF610>
};

// Class Engine.SkyAtmosphere
class ASkyAtmosphere : public AInfo {

public:

	struct Unknown SkyAtmosphereComponent; // 0x318 (8)
};

// Class Engine.SkyLightComponent
class USkyLightComponent : public ULightComponentBase {

public:

	char SourceType; // 0x260 (1)
	struct Unknown Cubemap; // 0x268 (8)
	float SourceCubemapAngle; // 0x270 (4)
	int32_t CubemapResolution; // 0x274 (4)
	float SkyDistanceThreshold; // 0x278 (4)
	char bCaptureEmissiveOnly : 0; // 0x27C (1)
	char bLowerHemisphereIsBlack : 0; // 0x27D (1)
	struct Unknown LowerHemisphereColor; // 0x280 (16)
	char bAffectDynamicIndirectLighting : 0; // 0x290 (1)
	float OcclusionMaxDistance; // 0x294 (4)
	float Contrast; // 0x298 (4)
	float OcclusionExponent; // 0x29C (4)
	struct Unknown OcclusionFoliageTint; // 0x2A0 (4)
	float MinOcclusion; // 0x2A4 (4)
	struct Unknown OcclusionBarkTint; // 0x2A8 (4)
	struct Unknown OcclusionTint; // 0x2AC (4)
	char OcclusionCombineMode; // 0x2B0 (1)
	char SpecularOcclusionMode; // 0x2B1 (1)
	float SpecularOcclusionStrength; // 0x2B4 (4)
	float SelfShadowBiasForObjectAO; // 0x2B8 (4)
	float OcclusionTranslucencyForTwoSidedFoliages; // 0x2BC (4)
	struct Unknown BlendDestinationCubemap; // 0x378 (8)

	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45D03E0>
	void SetOcclusionTint(struct Unknown& InTint); // Function Engine.SkyLightComponent.SetOcclusionTint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45D00D0>
	void SetOcclusionFoliageTint(struct Unknown& InTint); // Function Engine.SkyLightComponent.SetOcclusionFoliageTint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45D0040>
	void SetOcclusionExponent(float InOcclusionExponent); // Function Engine.SkyLightComponent.SetOcclusionExponent(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CFFC0>
	void SetOcclusionContrast(float InOcclusionContrast); // Function Engine.SkyLightComponent.SetOcclusionContrast(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CFF40>
	void SetOcclusionBarkTint(struct Unknown& InTint); // Function Engine.SkyLightComponent.SetOcclusionBarkTint(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45CFEB0>
	void SetMinOcclusion(float InMinOcclusion); // Function Engine.SkyLightComponent.SetMinOcclusion(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CFE30>
	void SetLowerHemisphereColor(struct Unknown& InLowerHemisphereColor); // Function Engine.SkyLightComponent.SetLowerHemisphereColor(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45CFBA0>
	void SetLightColor(struct Unknown NewLightColor); // Function Engine.SkyLightComponent.SetLightColor(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45CFB20>
	void SetIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIntensity(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CFAA0>
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIndirectLightingIntensity(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CFA20>
	void SetCubemapBlend(struct Unknown SourceCubemap, struct Unknown DestinationCubemap, float InBlendFraction); // Function Engine.SkyLightComponent.SetCubemapBlend(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CF890>
	void SetCubemap(struct Unknown NewCubemap); // Function Engine.SkyLightComponent.SetCubemap(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CF810>
	void SetAffectDynamicIndirectLighting(char bNewValue); // Function Engine.SkyLightComponent.SetAffectDynamicIndirectLighting(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CF780>
	void RecaptureSky(); // Function Engine.SkyLightComponent.RecaptureSky(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45CF6E0>
};

// Class Engine.SlateBrushAsset
class USlateBrushAsset : public Object {

public:

	struct Unknown Brush; // 0x28 (136)
};

// Class Engine.SoundAttenuation
class USoundAttenuation : public Object {

public:

	struct Unknown Attenuation; // 0x28 (928)
};

// Class Engine.SoundClass
class USoundClass : public Object {

public:

	struct Unknown Properties; // 0x28 (88)
	struct TArray<Unknown> ChildClasses; // 0x80 (16)
	struct TArray<Unknown> PassiveSoundMixModifiers; // 0x90 (16)
	struct Unknown Modulation; // 0xA0 (16)
	struct Unknown ParentClass; // 0xB0 (8)
};

// Class Engine.SoundConcurrency
class USoundConcurrency : public Object {

public:

	struct Unknown Concurrency; // 0x28 (32)
};

// Class Engine.SoundCue
class USoundCue : public USoundBase {

public:

	char bPrimeOnLoad : 0; // 0x160 (1)
	struct Unknown FirstNode; // 0x168 (8)
	float VolumeMultiplier; // 0x170 (4)
	float PitchMultiplier; // 0x174 (4)
	struct Unknown AttenuationOverrides; // 0x178 (928)
	float SubtitlePriority; // 0x518 (4)
	char bOverrideAttenuation : 0; // 0x520 (1)
	char bExcludeFromRandomNodeBranchCulling : 0; // 0x520 (1)
	int32_t CookedQualityIndex; // 0x524 (4)
	char bHasPlayWhenSilent : 0; // 0x528 (1)
};

// Class Engine.SoundEffectSourcePresetChain
class USoundEffectSourcePresetChain : public Object {

public:

	struct TArray<Unknown> Chain; // 0x28 (16)
	char bPlayEffectChainTails : 0; // 0x38 (1)
};

// Class Engine.SoundGroups
class USoundGroups : public Object {

public:

	struct TArray<Unknown> SoundGroupProfiles; // 0x28 (16)
};

// Class Engine.SoundMix
class USoundMix : public Object {

public:

	char bApplyEQ : 0; // 0x28 (1)
	float EQPriority; // 0x2C (4)
	struct Unknown EQSettings; // 0x30 (64)
	struct TArray<Unknown> SoundClassEffects; // 0x70 (16)
	float InitialDelay; // 0x80 (4)
	float FadeInTime; // 0x84 (4)
	float Duration; // 0x88 (4)
	float FadeOutTime; // 0x8C (4)
};

// Class Engine.SoundNode
class USoundNode : public Object {

public:

	struct TArray<Unknown> ChildNodes; // 0x28 (16)
};

// Class Engine.SoundNodeAttenuation
class USoundNodeAttenuation : public USoundNode {

public:

	struct Unknown AttenuationSettings; // 0x48 (8)
	struct Unknown AttenuationOverrides; // 0x50 (928)
	char bOverrideAttenuation : 0; // 0x3F0 (1)
};

// Class Engine.SoundNodeBranch
class USoundNodeBranch : public USoundNode {

public:

	struct FName BoolParameterName; // 0x48 (8)
};

// Class Engine.SoundNodeConcatenator
class USoundNodeConcatenator : public USoundNode {

public:

	struct TArray<Unknown> InputVolume; // 0x48 (16)
};

// Class Engine.SoundNodeDelay
class USoundNodeDelay : public USoundNode {

public:

	float DelayMin; // 0x48 (4)
	float DelayMax; // 0x4C (4)
};

// Class Engine.SoundNodeDialoguePlayer
class USoundNodeDialoguePlayer : public USoundNode {

public:

	struct Unknown DialogueWaveParameter; // 0x48 (32)
	char bLooping : 0; // 0x68 (1)
};

// Class Engine.SoundNodeDistanceCrossFade
class USoundNodeDistanceCrossFade : public USoundNode {

public:

	struct TArray<Unknown> CrossFadeInput; // 0x48 (16)
};

// Class Engine.SoundNodeDoppler
class USoundNodeDoppler : public USoundNode {

public:

	float DopplerIntensity; // 0x48 (4)
	char bUseSmoothing : 0; // 0x4C (1)
	float SmoothingInterpSpeed; // 0x50 (4)
};

// Class Engine.SoundNodeEnveloper
class USoundNodeEnveloper : public USoundNode {

public:

	float LoopStart; // 0x48 (4)
	float LoopEnd; // 0x4C (4)
	float DurationAfterLoop; // 0x50 (4)
	int32_t LoopCount; // 0x54 (4)
	char bLoopIndefinitely : 0; // 0x58 (1)
	char bLoop : 0; // 0x58 (1)
	struct Unknown VolumeInterpCurve; // 0x60 (8)
	struct Unknown PitchInterpCurve; // 0x68 (8)
	struct Unknown VolumeCurve; // 0x70 (136)
	struct Unknown PitchCurve; // 0xF8 (136)
	float PitchMin; // 0x180 (4)
	float PitchMax; // 0x184 (4)
	float VolumeMin; // 0x188 (4)
	float VolumeMax; // 0x18C (4)
};

// Class Engine.SoundNodeGroupControl
class USoundNodeGroupControl : public USoundNode {

public:

	struct TArray<Unknown> GroupSizes; // 0x48 (16)
};

// Class Engine.SoundNodeLooping
class USoundNodeLooping : public USoundNode {

public:

	int32_t LoopCount; // 0x48 (4)
	char bLoopIndefinitely : 0; // 0x4C (1)
};

// Class Engine.SoundNodeMixer
class USoundNodeMixer : public USoundNode {

public:

	struct TArray<Unknown> InputVolume; // 0x48 (16)
};

// Class Engine.SoundNodeModulator
class USoundNodeModulator : public USoundNode {

public:

	float PitchMin; // 0x48 (4)
	float PitchMax; // 0x4C (4)
	float VolumeMin; // 0x50 (4)
	float VolumeMax; // 0x54 (4)
};

// Class Engine.SoundNodeModulatorContinuous
class USoundNodeModulatorContinuous : public USoundNode {

public:

	struct Unknown PitchModulationParams; // 0x48 (32)
	struct Unknown VolumeModulationParams; // 0x68 (32)
};

// Class Engine.SoundNodeOscillator
class USoundNodeOscillator : public USoundNode {

public:

	char bModulateVolume : 0; // 0x48 (1)
	char bModulatePitch : 0; // 0x48 (1)
	float AmplitudeMin; // 0x4C (4)
	float AmplitudeMax; // 0x50 (4)
	float FrequencyMin; // 0x54 (4)
	float FrequencyMax; // 0x58 (4)
	float OffsetMin; // 0x5C (4)
	float OffsetMax; // 0x60 (4)
	float CenterMin; // 0x64 (4)
	float CenterMax; // 0x68 (4)
};

// Class Engine.SoundNodeParamCrossFade
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade {

public:

	struct FName ParamName; // 0x58 (8)
};

// Class Engine.SoundNodeRandom
class USoundNodeRandom : public USoundNode {

public:

	struct TArray<Unknown> Weights; // 0x48 (16)
	struct TArray<Unknown> HasBeenUsed; // 0x58 (16)
	int32_t NumRandomUsed; // 0x68 (4)
	int32_t PreselectAtLevelLoad; // 0x6C (4)
	char bShouldExcludeFromBranchCulling : 0; // 0x70 (1)
	char bSoundCueExcludedFromBranchCulling : 0; // 0x70 (1)
	char bRandomizeWithoutReplacement : 0; // 0x70 (1)
};

// Class Engine.SoundNodeSoundClass
class USoundNodeSoundClass : public USoundNode {

public:

	struct Unknown SoundClassOverride; // 0x48 (8)
};

// Class Engine.SoundNodeSwitch
class USoundNodeSwitch : public USoundNode {

public:

	struct FName IntParameterName; // 0x48 (8)
};

// Class Engine.SoundNodeWaveParam
class USoundNodeWaveParam : public USoundNode {

public:

	struct FName WaveParameterName; // 0x48 (8)
};

// Class Engine.SoundNodeWavePlayer
class USoundNodeWavePlayer : public USoundNodeAssetReferencer {

public:

	struct Unknown SoundWaveAssetPtr; // 0x48 (40)
	struct Unknown SoundWave; // 0x70 (8)
	char bLooping : 0; // 0x78 (1)
};

// Class Engine.SoundSourceBus
class USoundSourceBus : public USoundWave {

public:

	enum class Unknow SourceBusChannels; // 0x308 (1)
	float SourceBusDuration; // 0x30C (4)
	char bAutoDeactivateWhenSilent : 0; // 0x310 (1)
};

// Class Engine.SoundSubmixBase
class USoundSubmixBase : public Object {

public:

	struct TArray<Unknown> ChildSubmixes; // 0x28 (16)
};

// Class Engine.SoundSubmixWithParentBase
class USoundSubmixWithParentBase : public USoundSubmixBase {

public:

	struct Unknown ParentSubmix; // 0x38 (8)
};

// Class Engine.SoundSubmix
class USoundSubmix : public USoundSubmixWithParentBase {

public:

	char bMuteWhenBackgrounded : 0; // 0x40 (1)
	struct TArray<Unknown> SubmixEffectChain; // 0x48 (16)
	struct Unknown AmbisonicsPluginSettings; // 0x58 (8)
	int32_t EnvelopeFollowerAttackTime; // 0x60 (4)
	int32_t EnvelopeFollowerReleaseTime; // 0x64 (4)
	float OutputVolume; // 0x68 (4)
	struct FMulticastInlineDelegate OnSubmixRecordedFileDone; // 0x70 (16)

	void StopRecordingOutput(struct Unknown WorldContextObject, enum class Unknow ExportType, struct FString Name, struct FString Path, struct Unknown ExistingSoundWaveToOverwrite); // Function Engine.SoundSubmix.StopRecordingOutput(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45D8270>
	void StopEnvelopeFollowing(struct Unknown WorldContextObject); // Function Engine.SoundSubmix.StopEnvelopeFollowing(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45D81F0>
	void StartRecordingOutput(struct Unknown WorldContextObject, float ExpectedDuration); // Function Engine.SoundSubmix.StartRecordingOutput(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45D8120>
	void StartEnvelopeFollowing(struct Unknown WorldContextObject); // Function Engine.SoundSubmix.StartEnvelopeFollowing(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45D80A0>
	void SetSubmixOutputVolume(struct Unknown WorldContextObject, float InOutputVolume); // Function Engine.SoundSubmix.SetSubmixOutputVolume(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45D7FD0>
	void AddEnvelopeFollowerDelegate(struct Unknown WorldContextObject, struct FDelegate& OnSubmixEnvelopeBP); // Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45D7EE0>
};

// Class Engine.SoundfieldSubmix
class USoundfieldSubmix : public USoundSubmixWithParentBase {

public:

	struct FName SoundfieldEncodingFormat; // 0x40 (8)
	struct Unknown EncodingSettings; // 0x48 (8)
	struct TArray<Unknown> SoundfieldEffectChain; // 0x50 (16)
	struct Unknown* EncodingSettingsClass; // 0x60 (8)
};

// Class Engine.EndpointSubmix
class UEndpointSubmix : public USoundSubmixBase {

public:

	struct FName EndpointType; // 0x38 (8)
	struct Unknown* EndpointSettingsClass; // 0x40 (8)
	struct Unknown EndpointSettings; // 0x48 (8)
};

// Class Engine.SoundfieldEndpointSubmix
class USoundfieldEndpointSubmix : public USoundSubmixBase {

public:

	struct FName SoundfieldEndpointType; // 0x38 (8)
	struct Unknown* EndpointSettingsClass; // 0x40 (8)
	struct Unknown EndpointSettings; // 0x48 (8)
	struct Unknown* EncodingSettingsClass; // 0x50 (8)
	struct Unknown EncodingSettings; // 0x58 (8)
	struct TArray<Unknown> SoundfieldEffectChain; // 0x60 (16)
};

// Class Engine.SpectatorPawnMovement
class USpectatorPawnMovement : public UFloatingPawnMovement {

public:

	char bIgnoreTimeDilation : 0; // 0x150 (1)
};

// Class Engine.SphereReflectionCapture
class ASphereReflectionCapture : public AReflectionCapture {

public:

	struct Unknown DrawCaptureRadius; // 0x320 (8)
};

// Class Engine.SphereReflectionCaptureComponent
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent {

public:

	float InfluenceRadius; // 0x2B0 (4)
	float CaptureDistanceScale; // 0x2B4 (4)
	struct Unknown PreviewInfluenceRadius; // 0x2B8 (8)
};

// Class Engine.SplineMeshActor
class ASplineMeshActor : public UActor {

public:

	struct Unknown SplineMeshComponent; // 0x318 (8)
};

// Class Engine.SplineMeshComponent
class USplineMeshComponent : public UStaticMeshComponent {

public:

	struct Unknown SplineParams; // 0x548 (88)
	struct Unknown SplineUpDir; // 0x5A0 (12)
	float SplineBoundaryMin; // 0x5AC (4)
	struct Unknown CachedMeshBodySetupGuid; // 0x5B0 (16)
	struct Unknown BodySetup; // 0x5C0 (8)
	float SplineBoundaryMax; // 0x5C8 (4)
	char bAllowSplineEditingPerInstance : 0; // 0x5CC (1)
	char bSmoothInterpRollScale : 0; // 0x5CC (1)
	char bMeshDirty : 0; // 0x5CC (1)
	char ForwardAxis; // 0x5CD (1)
	float VirtualTextureMainPassMaxDrawDistance; // 0x5D0 (4)

	void UpdateMesh(); // Function Engine.SplineMeshComponent.UpdateMesh(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E5200>
	void SetStartTangent(struct Unknown StartTangent, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartTangent(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E5120>
	void SetStartScale(struct Unknown StartScale, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartScale(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E5060>
	void SetStartRoll(float StartRoll, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartRoll(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E4F90>
	void SetStartPosition(struct Unknown StartPos, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartPosition(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E4EB0>
	void SetStartOffset(struct Unknown StartOffset, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartOffset(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E4DF0>
	void SetStartAndEnd(struct Unknown StartPos, struct Unknown StartTangent, struct Unknown EndPos, struct Unknown EndTangent, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartAndEnd(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E4C30>
	void SetSplineUpDir(struct Unknown& InSplineUpDir, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetSplineUpDir(Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E4B50>
	void SetForwardAxis(char InForwardAxis, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetForwardAxis(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E4880>
	void SetEndTangent(struct Unknown EndTangent, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndTangent(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E47A0>
	void SetEndScale(struct Unknown EndScale, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndScale(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E46E0>
	void SetEndRoll(float EndRoll, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndRoll(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E4610>
	void SetEndPosition(struct Unknown EndPos, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndPosition(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E4530>
	void SetEndOffset(struct Unknown EndOffset, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndOffset(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E4470>
	void SetBoundaryMin(float InBoundaryMin, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMin(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E43A0>
	void SetBoundaryMax(float InBoundaryMax, char bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMax(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E42D0>
	struct Unknown GetStartTangent(); // Function Engine.SplineMeshComponent.GetStartTangent(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E41E0>
	struct Unknown GetStartScale(); // Function Engine.SplineMeshComponent.GetStartScale(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E41A0>
	float GetStartRoll(); // Function Engine.SplineMeshComponent.GetStartRoll(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E4170>
	struct Unknown GetStartPosition(); // Function Engine.SplineMeshComponent.GetStartPosition(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E4130>
	struct Unknown GetStartOffset(); // Function Engine.SplineMeshComponent.GetStartOffset(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E40F0>
	struct Unknown GetSplineUpDir(); // Function Engine.SplineMeshComponent.GetSplineUpDir(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E40B0>
	char GetForwardAxis(); // Function Engine.SplineMeshComponent.GetForwardAxis(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3BF0>
	struct Unknown GetEndTangent(); // Function Engine.SplineMeshComponent.GetEndTangent(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3BB0>
	struct Unknown GetEndScale(); // Function Engine.SplineMeshComponent.GetEndScale(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3B70>
	float GetEndRoll(); // Function Engine.SplineMeshComponent.GetEndRoll(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3B40>
	struct Unknown GetEndPosition(); // Function Engine.SplineMeshComponent.GetEndPosition(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3B00>
	struct Unknown GetEndOffset(); // Function Engine.SplineMeshComponent.GetEndOffset(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3AC0>
	float GetBoundaryMin(); // Function Engine.SplineMeshComponent.GetBoundaryMin(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E39F0>
	float GetBoundaryMax(); // Function Engine.SplineMeshComponent.GetBoundaryMax(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E39C0>
};

// Class Engine.SpotLightComponent
class USpotLightComponent : public UPointLightComponent {

public:

	float InnerConeAngle; // 0x3A0 (4)
	float OuterConeAngle; // 0x3A4 (4)
	float LightShaftConeAngle; // 0x3A8 (4)
	char bUsePCSS : 0; // 0x3AC (1)
	float PCSSSharpness; // 0x3B0 (4)
	float PCSSContrast; // 0x3B4 (4)

	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLightComponent.SetOuterConeAngle(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E4AD0>
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLightComponent.SetInnerConeAngle(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E49D0>
};

// Class Engine.SpringArmComponent
class USpringArmComponent : public USceneComponent {

public:

	float TargetArmLength; // 0x228 (4)
	struct Unknown SocketOffset; // 0x22C (12)
	struct Unknown TargetOffset; // 0x238 (12)
	float ProbeSize; // 0x244 (4)
	char ProbeChannel; // 0x248 (1)
	char bDoCollisionTest : 0; // 0x24C (1)
	char bUsePawnControlRotation : 0; // 0x24C (1)
	char bInheritPitch : 0; // 0x24C (1)
	char bInheritYaw : 0; // 0x24C (1)
	char bInheritRoll : 0; // 0x24C (1)
	char bEnableCameraLag : 0; // 0x24C (1)
	char bEnableCameraRotationLag : 0; // 0x24C (1)
	char bUseCameraLagSubstepping : 0; // 0x24C (1)
	char bDrawDebugLagMarkers : 0; // 0x24D (1)
	float CameraLagSpeed; // 0x250 (4)
	float CameraRotationLagSpeed; // 0x254 (4)
	float CameraLagMaxTimeStep; // 0x258 (4)
	float CameraLagMaxDistance; // 0x25C (4)

	char IsCollisionFixApplied(); // Function Engine.SpringArmComponent.IsCollisionFixApplied(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E42A0>
	struct Unknown GetUnfixedCameraPosition(); // Function Engine.SpringArmComponent.GetUnfixedCameraPosition(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E4260>
	struct Unknown GetTargetRotation(); // Function Engine.SpringArmComponent.GetTargetRotation(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E4220>
};

// Class Engine.StaticMesh
class UStaticMesh : public UStreamableRenderAsset {

public:

	char bUseAsOccluderForSoftwareOcclusion : 0; // 0x60 (1)
	struct FName LODGroup; // 0x64 (8)
	struct FName MeshStreamingGroup; // 0x6C (8)
	struct Unknown MinLOD; // 0x80 (4)
	float LpvBiasMultiplier; // 0x84 (4)
	struct TArray<Unknown> StaticMaterials; // 0x88 (16)
	float LightmapUVDensity; // 0x98 (4)
	int32_t LightMapResolution; // 0x9C (4)
	int32_t LightMapCoordinateIndex; // 0xA0 (4)
	float DistanceFieldSelfShadowBias; // 0xA4 (4)
	struct Unknown BodySetup; // 0xA8 (8)
	int32_t LODForCollision; // 0xB0 (4)
	char bGenerateMeshDistanceField : 0; // 0xB4 (1)
	char bStripComplexCollisionForConsole : 0; // 0xB4 (1)
	char bHasNavigationData : 0; // 0xB4 (1)
	char bSupportUniformlyDistributedSampling : 0; // 0xB4 (1)
	char bSupportPhysicalMaterialMasks : 0; // 0xB4 (1)
	char bIsBuiltAtRuntime : 0; // 0xB4 (1)
	char bAllowCPUAccess : 0; // 0xB4 (1)
	char bSupportGpuUniformlyDistributedSampling : 0; // 0xB5 (1)
	struct TArray<Unknown> Sockets; // 0xD8 (16)
	struct Unknown PositiveBoundsExtension; // 0xF8 (12)
	struct Unknown NegativeBoundsExtension; // 0x104 (12)
	struct Unknown ExtendedBounds; // 0x110 (28)
	int32_t ElementToIgnoreForTexFactor; // 0x12C (4)
	struct TArray<Unknown> AssetUserData; // 0x130 (16)
	struct Unknown EditableMesh; // 0x148 (8)
	struct Unknown NavCollision; // 0x150 (8)

	void RemoveSocket(struct Unknown Socket); // Function Engine.StaticMesh.RemoveSocket(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x1FA2A20>
	int32_t GetNumTriangles(int32_t LODIndex); // Function Engine.StaticMesh.GetNumTriangles(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E4020>
	int32_t GetNumSections(int32_t InLOD); // Function Engine.StaticMesh.GetNumSections(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3F90>
	int32_t GetNumMaterial(); // Function Engine.StaticMesh.GetNumMaterial(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3F70>
	int32_t GetNumLODs(); // Function Engine.StaticMesh.GetNumLODs(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3F40>
	void GetMinimumLODForPlatforms(struct TMap<Unknown, Unknown>& PlatformMinimumLODs); // Function Engine.StaticMesh.GetMinimumLODForPlatforms(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3DC0>
	int32_t GetMinimumLODForPlatform(struct FName& PlatformName); // Function Engine.StaticMesh.GetMinimumLODForPlatform(Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3D40>
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.StaticMesh.GetMaterialIndex(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3CB0>
	struct Unknown GetMaterial(int32_t MaterialIndex); // Function Engine.StaticMesh.GetMaterial(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3C20>
	struct Unknown GetBounds(); // Function Engine.StaticMesh.GetBounds(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3A70>
	struct Unknown GetBoundingBox(); // Function Engine.StaticMesh.GetBoundingBox(Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3A20>
	struct Unknown FindSocket(struct FName InSocketName); // Function Engine.StaticMesh.FindSocket(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E3930>
	struct Unknown CreateStaticMeshDescription(struct Unknown Outer); // Function Engine.StaticMesh.CreateStaticMeshDescription(Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // <Game_BE.exe+0x45E38B0>
	void BuildFromStaticMeshDescriptions(struct TArray<Unknown>& StaticMeshDescriptions, char bBuildSimpleCollision); // Function Engine.StaticMesh.BuildFromStaticMeshDescriptions(Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45E37B0>
	void AddSocket(struct Unknown Socket); // Function Engine.StaticMesh.AddSocket(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x1FA29A0>
	struct FName AddMaterial(struct Unknown Material); // Function Engine.StaticMesh.AddMaterial(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E3720>
};

// Class Engine.StaticMeshSocket
class UStaticMeshSocket : public Object {

public:

	struct FName SocketName; // 0x28 (8)
	struct Unknown RelativeLocation; // 0x30 (12)
	struct Unknown RelativeRotation; // 0x3C (12)
	struct Unknown RelativeScale; // 0x48 (12)
	struct FString Tag; // 0x58 (16)
};

// Class Engine.StereoLayerComponent
class UStereoLayerComponent : public USceneComponent {

public:

	char bLiveTexture : 0; // 0x228 (1)
	char bSupportsDepth : 0; // 0x228 (1)
	char bNoAlphaChannel : 0; // 0x228 (1)
	struct Unknown Texture; // 0x230 (8)
	struct Unknown LeftTexture; // 0x238 (8)
	char bQuadPreserveTextureRatio : 0; // 0x240 (1)
	struct Unknown QuadSize; // 0x244 (8)
	struct Unknown UVRect; // 0x24C (20)
	float CylinderRadius; // 0x260 (4)
	float CylinderOverlayArc; // 0x264 (4)
	int32_t CylinderHeight; // 0x268 (4)
	struct Unknown EquirectProps; // 0x26C (72)
	char StereoLayerType; // 0x2B4 (1)
	char StereoLayerShape; // 0x2B5 (1)
	struct Unknown Shape; // 0x2B8 (8)
	int32_t Priority; // 0x2C0 (4)

	void SetUVRect(struct Unknown InUVRect); // Function Engine.StereoLayerComponent.SetUVRect(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E9DA0>
	void SetTexture(struct Unknown InTexture); // Function Engine.StereoLayerComponent.SetTexture(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E9D20>
	void SetQuadSize(struct Unknown InQuadSize); // Function Engine.StereoLayerComponent.SetQuadSize(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45E99F0>
	void SetPriority(int32_t InPriority); // Function Engine.StereoLayerComponent.SetPriority(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E9970>
	void SetLeftTexture(struct Unknown InTexture); // Function Engine.StereoLayerComponent.SetLeftTexture(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E9870>
	void SetEquirectProps(struct Unknown InScaleBiases); // Function Engine.StereoLayerComponent.SetEquirectProps(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E9570>
	void MarkTextureForUpdate(); // Function Engine.StereoLayerComponent.MarkTextureForUpdate(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E9450>
	struct Unknown GetUVRect(); // Function Engine.StereoLayerComponent.GetUVRect(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E9420>
	struct Unknown GetTexture(); // Function Engine.StereoLayerComponent.GetTexture(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E9400>
	struct Unknown GetQuadSize(); // Function Engine.StereoLayerComponent.GetQuadSize(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E93D0>
	int32_t GetPriority(); // Function Engine.StereoLayerComponent.GetPriority(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E93B0>
	struct Unknown GetLeftTexture(); // Function Engine.StereoLayerComponent.GetLeftTexture(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45E92B0>
};

// Class Engine.StereoLayerShapeCylinder
class UStereoLayerShapeCylinder : public UStereoLayerShape {

public:

	float Radius; // 0x28 (4)
	float OverlayArc; // 0x2C (4)
	int32_t Height; // 0x30 (4)

	void SetRadius(float InRadius); // Function Engine.StereoLayerShapeCylinder.SetRadius(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E9A70>
	void SetOverlayArc(float InOverlayArc); // Function Engine.StereoLayerShapeCylinder.SetOverlayArc(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E98F0>
	void SetHeight(int32_t InHeight); // Function Engine.StereoLayerShapeCylinder.SetHeight(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E97F0>
};

// Class Engine.StereoLayerShapeEquirect
class UStereoLayerShapeEquirect : public UStereoLayerShape {

public:

	struct Unknown LeftUVRect; // 0x28 (20)
	struct Unknown RightUVRect; // 0x3C (20)
	struct Unknown LeftScale; // 0x50 (8)
	struct Unknown RightScale; // 0x58 (8)
	struct Unknown LeftBias; // 0x60 (8)
	struct Unknown RightBias; // 0x68 (8)

	void SetEquirectProps(struct Unknown InScaleBiases); // Function Engine.StereoLayerShapeEquirect.SetEquirectProps(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45E9670>
};

// Class Engine.SubsurfaceProfile
class USubsurfaceProfile : public Object {

public:

	struct Unknown Settings; // 0x28 (140)
};

// Class Engine.SubUVAnimation
class USubUVAnimation : public Object {

public:

	struct Unknown SubUVTexture; // 0x28 (8)
	int32_t SubImages_Horizontal; // 0x30 (4)
	int32_t SubImages_Vertical; // 0x34 (4)
	char BoundingMode; // 0x38 (1)
	char OpacitySourceMode; // 0x39 (1)
	float AlphaThreshold; // 0x3C (4)
};

// Class Engine.TimecodeProvider
class UTimecodeProvider : public Object {

public:

	float FrameDelay; // 0x28 (4)

	struct Unknown GetTimecode(); // Function Engine.TimecodeProvider.GetTimecode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1E50>
	enum class Unknow GetSynchronizationState(); // Function Engine.TimecodeProvider.GetSynchronizationState(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1E20>
	struct Unknown GetQualifiedFrameTime(); // Function Engine.TimecodeProvider.GetQualifiedFrameTime(Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1DE0>
	struct Unknown GetFrameRate(); // Function Engine.TimecodeProvider.GetFrameRate(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1D10>
	struct Unknown GetDelayedTimecode(); // Function Engine.TimecodeProvider.GetDelayedTimecode(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1CD0>
	struct Unknown GetDelayedQualifiedFrameTime(); // Function Engine.TimecodeProvider.GetDelayedQualifiedFrameTime(Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1C90>
};

// Class Engine.SystemTimeTimecodeProvider
class USystemTimeTimecodeProvider : public UTimecodeProvider {

public:

	struct Unknown FrameRate; // 0x30 (8)
	char bGenerateFullFrame : 0; // 0x38 (1)
	char bUseHighPerformanceClock : 0; // 0x39 (1)
};

// Class Engine.TextPropertyTestObject
class UTextPropertyTestObject : public Object {

public:

	struct FText DefaultedText; // 0x28 (24)
	struct FText UndefaultedText; // 0x40 (24)
	struct FText TransientText; // 0x58 (24)
};

// Class Engine.TextRenderActor
class ATextRenderActor : public UActor {

public:

	struct Unknown TextRender; // 0x318 (8)
};

// Class Engine.TextRenderComponent
class UTextRenderComponent : public UPrimitiveComponent {

public:

	struct FText Text; // 0x4A8 (24)
	struct Unknown TextMaterial; // 0x4C0 (8)
	struct Unknown Font; // 0x4C8 (8)
	char HorizontalAlignment; // 0x4D0 (1)
	char VerticalAlignment; // 0x4D1 (1)
	struct Unknown TextRenderColor; // 0x4D4 (4)
	float XScale; // 0x4D8 (4)
	float YScale; // 0x4DC (4)
	float WorldSize; // 0x4E0 (4)
	float InvDefaultSize; // 0x4E4 (4)
	float HorizSpacingAdjust; // 0x4E8 (4)
	float VertSpacingAdjust; // 0x4EC (4)
	char bAlwaysRenderAsText : 0; // 0x4F0 (1)

	void SetYScale(float Value); // Function Engine.TextRenderComponent.SetYScale(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45EE2F0>
	void SetXScale(float Value); // Function Engine.TextRenderComponent.SetXScale(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45EE270>
	void SetWorldSize(float Value); // Function Engine.TextRenderComponent.SetWorldSize(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45EE1F0>
	void SetVertSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetVertSpacingAdjust(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45EE0F0>
	void SetVerticalAlignment(char Value); // Function Engine.TextRenderComponent.SetVerticalAlignment(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45EE170>
	void SetTextRenderColor(struct Unknown Value); // Function Engine.TextRenderComponent.SetTextRenderColor(Final|Native|Public|HasDefaults|BlueprintCallable) // <Game_BE.exe+0x45EE080>
	void SetTextMaterial(struct Unknown Material); // Function Engine.TextRenderComponent.SetTextMaterial(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45EE000>
	void SetText(struct FString Value); // Function Engine.TextRenderComponent.SetText(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45EDF60>
	void SetHorizSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetHorizSpacingAdjust(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45EDE60>
	void SetHorizontalAlignment(char Value); // Function Engine.TextRenderComponent.SetHorizontalAlignment(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45EDEE0>
	void SetFont(struct Unknown Value); // Function Engine.TextRenderComponent.SetFont(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45EDDE0>
	void K2_SetText(struct FText& Value); // Function Engine.TextRenderComponent.K2_SetText(Final|Native|Public|HasOutParms|BlueprintCallable) // <Game_BE.exe+0x45EDD10>
	struct Unknown GetTextWorldSize(); // Function Engine.TextRenderComponent.GetTextWorldSize(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45EDC10>
	struct Unknown GetTextLocalSize(); // Function Engine.TextRenderComponent.GetTextLocalSize(Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45EDBD0>
};

// Class Engine.TextureLightProfile
class UTextureLightProfile : public UTexture2D {

public:

	float Brightness; // 0xE8 (4)
	float TextureMultiplier; // 0xEC (4)
};

// Class Engine.TextureRenderTargetCube
class UTextureRenderTargetCube : public UTextureRenderTarget {

public:

	int32_t SizeX; // 0xC0 (4)
	struct Unknown ClearColor; // 0xC4 (16)
	char OverrideFormat; // 0xD4 (1)
	char bHDR : 0; // 0xD5 (1)
	char bForceLinearGamma : 0; // 0xD5 (1)
};

// Class Engine.TimelineComponent
class UTimelineComponent : public UActorComponent {

public:

	struct Unknown TheTimeline; // 0xB0 (152)
	char bIgnoreTimeDilation : 0; // 0x148 (1)

	void Stop(); // Function Engine.TimelineComponent.Stop(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F2660>
	void SetVectorCurve(struct Unknown NewVectorCurve, struct FName VectorTrackName); // Function Engine.TimelineComponent.SetVectorCurve(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F25A0>
	void SetTimelineLengthMode(char NewLengthMode); // Function Engine.TimelineComponent.SetTimelineLengthMode(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F2520>
	void SetTimelineLength(float NewLength); // Function Engine.TimelineComponent.SetTimelineLength(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F24A0>
	void SetPlayRate(float NewRate); // Function Engine.TimelineComponent.SetPlayRate(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F2310>
	void SetPlaybackPosition(float NewPosition, char bFireEvents, char bFireUpdate); // Function Engine.TimelineComponent.SetPlaybackPosition(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F2390>
	void SetNewTime(float NewTime); // Function Engine.TimelineComponent.SetNewTime(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F2290>
	void SetLooping(char bNewLooping); // Function Engine.TimelineComponent.SetLooping(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F2200>
	void SetLinearColorCurve(struct Unknown NewLinearColorCurve, struct FName LinearColorTrackName); // Function Engine.TimelineComponent.SetLinearColorCurve(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F2140>
	void SetIgnoreTimeDilation(char bNewIgnoreTimeDilation); // Function Engine.TimelineComponent.SetIgnoreTimeDilation(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F20B0>
	void SetFloatCurve(struct Unknown NewFloatCurve, struct FName FloatTrackName); // Function Engine.TimelineComponent.SetFloatCurve(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F1FF0>
	void ReverseFromEnd(); // Function Engine.TimelineComponent.ReverseFromEnd(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F1FD0>
	void Reverse(); // Function Engine.TimelineComponent.Reverse(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F1FB0>
	void PlayFromStart(); // Function Engine.TimelineComponent.PlayFromStart(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F1F90>
	void Play(); // Function Engine.TimelineComponent.Play(Final|RequiredAPI|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F1F70>
	void OnRep_Timeline(); // Function Engine.TimelineComponent.OnRep_Timeline(Final|Native|Public) // <Game_BE.exe+0x45F1F50>
	char IsReversing(); // Function Engine.TimelineComponent.IsReversing(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1F20>
	char IsPlaying(); // Function Engine.TimelineComponent.IsPlaying(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1EF0>
	char IsLooping(); // Function Engine.TimelineComponent.IsLooping(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1EC0>
	float GetTimelineLength(); // Function Engine.TimelineComponent.GetTimelineLength(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1E90>
	float GetPlayRate(); // Function Engine.TimelineComponent.GetPlayRate(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1D80>
	float GetPlaybackPosition(); // Function Engine.TimelineComponent.GetPlaybackPosition(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1DB0>
	char GetIgnoreTimeDilation(); // Function Engine.TimelineComponent.GetIgnoreTimeDilation(Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // <Game_BE.exe+0x45F1D50>
};

// Class Engine.TimelineTemplate
class UTimelineTemplate : public Object {

public:

	float TimelineLength; // 0x28 (4)
	char LengthMode; // 0x2C (1)
	char bAutoPlay : 0; // 0x2D (1)
	char bLoop : 0; // 0x2D (1)
	char bReplicated : 0; // 0x2D (1)
	char bIgnoreTimeDilation : 0; // 0x2D (1)
	struct TArray<Unknown> EventTracks; // 0x30 (16)
	struct TArray<Unknown> FloatTracks; // 0x40 (16)
	struct TArray<Unknown> VectorTracks; // 0x50 (16)
	struct TArray<Unknown> LinearColorTracks; // 0x60 (16)
	struct TArray<Unknown> MetaDataArray; // 0x70 (16)
	struct Unknown TimelineGuid; // 0x80 (16)
	struct FName VariableName; // 0x90 (8)
	struct FName DirectionPropertyName; // 0x98 (8)
	struct FName UpdateFunctionName; // 0xA0 (8)
	struct FName FinishedFunctionName; // 0xA8 (8)
};

// Class Engine.TireType
class UTireType : public UDataAsset {

public:

	float FrictionScale; // 0x30 (4)
};

// Class Engine.TouchInterface
class UTouchInterface : public Object {

public:

	struct TArray<Unknown> Controls; // 0x28 (16)
	float ActiveOpacity; // 0x38 (4)
	float InactiveOpacity; // 0x3C (4)
	float TimeUntilDeactive; // 0x40 (4)
	float TimeUntilReset; // 0x44 (4)
	float ActivationDelay; // 0x48 (4)
	char bPreventRecenter : 0; // 0x4C (1)
	float StartupDelay; // 0x50 (4)
};

// Class Engine.TriggerBase
class ATriggerBase : public UActor {

public:

	struct Unknown CollisionComponent; // 0x318 (8)
};

// Class Engine.UserDefinedEnum
class UUserDefinedEnum : public UEnum {

public:

	struct TMap<Unknown, Unknown> DisplayNameMap; // 0x60 (80)
};

// Class Engine.UserDefinedStruct
class UUserDefinedStruct : public UScriptStruct {

public:

	enum class None status; // 0xC0 (1)
	struct Unknown Guid; // 0xC4 (16)
};

// Class Engine.UserInterfaceSettings
class UUserInterfaceSettings : public UDeveloperSettings {

public:

	enum class Unknow RenderFocusRule; // 0x38 (1)
	struct TMap<Unknown, Unknown> HardwareCursors; // 0x40 (80)
	struct TMap<Unknown, Unknown> SoftwareCursors; // 0x90 (80)
	struct Unknown DefaultCursor; // 0xE0 (24)
	struct Unknown TextEditBeamCursor; // 0xF8 (24)
	struct Unknown CrosshairsCursor; // 0x110 (24)
	struct Unknown HandCursor; // 0x128 (24)
	struct Unknown GrabHandCursor; // 0x140 (24)
	struct Unknown GrabHandClosedCursor; // 0x158 (24)
	struct Unknown SlashedCircleCursor; // 0x170 (24)
	float ApplicationScale; // 0x188 (4)
	enum class Unknow UIScaleRule; // 0x18C (1)
	struct Unknown CustomScalingRuleClass; // 0x190 (24)
	struct Unknown UIScaleCurve; // 0x1A8 (136)
	char bAllowHighDPIInGameMode : 0; // 0x230 (1)
	char bLoadWidgetsOnDedicatedServer : 0; // 0x231 (1)
	struct TArray<Unknown> CursorClasses; // 0x238 (16)
	struct Unknown* CustomScalingRuleClassInstance; // 0x248 (8)
	struct Unknown CustomScalingRule; // 0x250 (8)
};

// Class Engine.VectorField
class UVectorField : public Object {

public:

	struct Unknown Bounds; // 0x28 (28)
	float Intensity; // 0x44 (4)
};

// Class Engine.VectorFieldAnimated
class UVectorFieldAnimated : public UVectorField {

public:

	struct Unknown Texture; // 0x48 (8)
	char ConstructionOp; // 0x50 (1)
	int32_t VolumeSizeX; // 0x54 (4)
	int32_t VolumeSizeY; // 0x58 (4)
	int32_t VolumeSizeZ; // 0x5C (4)
	int32_t SubImagesX; // 0x60 (4)
	int32_t SubImagesY; // 0x64 (4)
	int32_t FrameCount; // 0x68 (4)
	float FramesPerSecond; // 0x6C (4)
	char bLoop : 0; // 0x70 (1)
	struct Unknown NoiseField; // 0x78 (8)
	float NoiseScale; // 0x80 (4)
	float NoiseMax; // 0x84 (4)
};

// Class Engine.VectorFieldComponent
class UVectorFieldComponent : public UPrimitiveComponent {

public:

	struct Unknown VectorField; // 0x4A8 (8)
	float Intensity; // 0x4B0 (4)
	float Tightness; // 0x4B4 (4)
	char bPreviewVectorField : 0; // 0x4B8 (1)

	void SetIntensity(float NewIntensity); // Function Engine.VectorFieldComponent.SetIntensity(Native|Public|BlueprintCallable) // <Game_BE.exe+0x45F68D0>
};

// Class Engine.VectorFieldStatic
class UVectorFieldStatic : public UVectorField {

public:

	int32_t SizeX; // 0x48 (4)
	int32_t SizeY; // 0x4C (4)
	int32_t SizeZ; // 0x50 (4)
	char bAllowCPUAccess : 0; // 0x54 (1)
	struct TArray<Unknown> CPUData; // 0x80 (16)
};

// Class Engine.VectorFieldVolume
class AVectorFieldVolume : public UActor {

public:

	struct Unknown VectorFieldComponent; // 0x318 (8)
};

// Class Engine.LightMapVirtualTexture2D
class ULightMapVirtualTexture2D : public UTexture2D {

public:

	struct TArray<Unknown> TypeToLayer; // 0xE8 (16)
};

// Class Engine.VirtualTexturePoolConfig
class UVirtualTexturePoolConfig : public Object {

public:

	int32_t DefaultSizeInMegabyte; // 0x28 (4)
	struct TArray<Unknown> Pools; // 0x30 (16)
};

// Class Engine.VOIPTalker
class UVOIPTalker : public UActorComponent {

public:

	struct Unknown Settings; // 0xB0 (24)

	void RegisterWithPlayerState(struct Unknown OwningState); // Function Engine.VOIPTalker.RegisterWithPlayerState(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45FD460>
	float GetVoiceLevel(); // Function Engine.VOIPTalker.GetVoiceLevel(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45FCAB0>
	struct Unknown CreateTalkerForPlayer(struct Unknown OwningState); // Function Engine.VOIPTalker.CreateTalkerForPlayer(Final|Native|Static|Public|BlueprintCallable) // <Game_BE.exe+0x45FCA30>
	void BPOnTalkingEnd(); // Function Engine.VOIPTalker.BPOnTalkingEnd(Native|Event|Protected|BlueprintEvent) // <Game_BE.exe+0x12226B0>
	void BPOnTalkingBegin(struct Unknown AudioComponent); // Function Engine.VOIPTalker.BPOnTalkingBegin(Native|Event|Protected|BlueprintEvent) // <Game_BE.exe+0x45FC9A0>
};

// Class Engine.VolumetricLightmapDensityVolume
class AVolumetricLightmapDensityVolume : public AVolume {

public:

	struct Unknown AllowedMipLevelRange; // 0x350 (8)
};

// Class Engine.WindDirectionalSource
class AWindDirectionalSource : public AInfo {

public:

	struct Unknown Component; // 0x318 (8)
};

// Class Engine.WindDirectionalSourceComponent
class UWindDirectionalSourceComponent : public USceneComponent {

public:

	float Strength; // 0x228 (4)
	float Speed; // 0x22C (4)
	float MinGustAmount; // 0x230 (4)
	float MaxGustAmount; // 0x234 (4)
	float Radius; // 0x238 (4)
	char bPointWind : 0; // 0x23C (1)

	void SetWindType(enum class Unknow InNewType); // Function Engine.WindDirectionalSourceComponent.SetWindType(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45FD7D0>
	void SetStrength(float InNewStrength); // Function Engine.WindDirectionalSourceComponent.SetStrength(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45FD750>
	void SetSpeed(float InNewSpeed); // Function Engine.WindDirectionalSourceComponent.SetSpeed(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45FD6D0>
	void SetRadius(float InNewRadius); // Function Engine.WindDirectionalSourceComponent.SetRadius(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45FD650>
	void SetMinimumGustAmount(float InNewMinGust); // Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45FD5D0>
	void SetMaximumGustAmount(float InNewMaxGust); // Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount(Final|Native|Public|BlueprintCallable) // <Game_BE.exe+0x45FD4E0>
};

// Class Engine.WorldComposition
class UWorldComposition : public Object {

public:

	struct TArray<Unknown> TilesStreaming; // 0x130 (16)
	double TilesStreamingTimeThreshold; // 0x140 (8)
	char bLoadAllTilesDuringCinematic : 0; // 0x148 (1)
	char bRebaseOriginIn3DSpace : 0; // 0x149 (1)
	float RebaseOriginDistance; // 0x14C (4)
	char bApplyMinStreamingPriorityToLOD : 0; // 0x150 (1)
	char bApplyStreamingDistanceScaleToLOD : 0; // 0x151 (1)
	struct TArray<Unknown> DevFilterRule; // 0x158 (16)
};

// Class Engine.HierarchicalLODSetup
class UHierarchicalLODSetup : public Object {

public:

	struct TArray<Unknown> HierarchicalLODSetup; // 0x28 (16)
	struct Unknown OverrideBaseMaterial; // 0x38 (40)
};

// Class Engine.WorldTileLODSetup
class UWorldTileLODSetup : public Object {

public:

	int32_t NumLOD; // 0x28 (4)
	struct Unknown LOD1; // 0x2C (316)
	struct Unknown LOD2; // 0x168 (316)
	struct Unknown LOD3; // 0x2A4 (316)
	struct Unknown LOD4; // 0x3E0 (316)
};

// ScriptStruct Engine.DistributionLookupTable
struct FDistributionLookupTable {
	float TimeScale; // 0x0 (4)
	float TimeBias; // 0x4 (4)
	struct TArray<Unknown> Values; // 0x8 (16)
	char Op; // 0x18 (1)
	char EntryCount; // 0x19 (1)
	char EntryStride; // 0x1A (1)
	char SubEntryStride; // 0x1B (1)
	char LockFlag; // 0x1C (1)
};

// ScriptStruct Engine.RawDistribution
struct FRawDistribution {
	struct Unknown Table; // 0x0 (32)
};

// ScriptStruct Engine.FloatDistribution
struct FFloatDistribution {
	struct Unknown Table; // 0x0 (32)
};

// ScriptStruct Engine.VectorDistribution
struct FVectorDistribution {
	struct Unknown Table; // 0x0 (32)
};

// ScriptStruct Engine.Vector4Distribution
struct FVector4Distribution {
	struct Unknown Table; // 0x0 (32)
};

// ScriptStruct Engine.FloatRK4SpringInterpolator
struct FFloatRK4SpringInterpolator {
	float StiffnessConstant; // 0x0 (4)
	float DampeningRatio; // 0x4 (4)
};

// ScriptStruct Engine.VectorRK4SpringInterpolator
struct FVectorRK4SpringInterpolator {
	float StiffnessConstant; // 0x0 (4)
	float DampeningRatio; // 0x4 (4)
};

// ScriptStruct Engine.FormatArgumentData
struct FFormatArgumentData {
	struct FString ArgumentName; // 0x0 (16)
	char ArgumentValueType; // 0x10 (1)
	struct FText ArgumentValue; // 0x18 (24)
	int32_t ArgumentValueInt; // 0x30 (4)
	float ArgumentValueFloat; // 0x34 (4)
	enum class Unknow ArgumentValueGender; // 0x38 (1)
};

// ScriptStruct Engine.ExpressionInput
struct FExpressionInput {
	int32_t OutputIndex; // 0x0 (4)
	struct FName ExpressionName; // 0x4 (8)
};

// ScriptStruct Engine.MaterialAttributesInput
struct FMaterialAttributesInput : FExpressionInput {
	int32_t PropertyConnectedBitmask; // 0xC (4)
};

// ScriptStruct Engine.ExpressionOutput
struct FExpressionOutput {
	struct FName OutputName; // 0x0 (8)
};

// ScriptStruct Engine.MaterialInput
struct FMaterialInput {
	int32_t OutputIndex; // 0x0 (4)
	struct FName ExpressionName; // 0x4 (8)
};

// ScriptStruct Engine.HitResult
struct FHitResult {
	char bBlockingHit : 0; // 0x0 (1)
	char bStartPenetrating : 0; // 0x0 (1)
	int32_t FaceIndex; // 0x4 (4)
	float Time; // 0x8 (4)
	float Distance; // 0xC (4)
	struct Unknown Location; // 0x10 (12)
	struct Unknown ImpactPoint; // 0x1C (12)
	struct Unknown Normal; // 0x28 (12)
	struct Unknown ImpactNormal; // 0x34 (12)
	struct Unknown TraceStart; // 0x40 (12)
	struct Unknown TraceEnd; // 0x4C (12)
	float PenetrationDepth; // 0x58 (4)
	int32_t Item; // 0x5C (4)
	struct TWeakObjectPtr<struct Unknown> PhysMaterial; // 0x60 (8)
	struct TWeakObjectPtr<struct Unknown> Actor; // 0x68 (8)
	struct TWeakObjectPtr<struct Unknown> Component; // 0x70 (8)
	struct FName BoneName; // 0x78 (8)
	struct FName MyBoneName; // 0x80 (8)
};

// ScriptStruct Engine.MKReplayListItemInfo
struct FMKReplayListItemInfo {
	struct FString Name; // 0x0 (16)
	struct FString FriendlyName; // 0x10 (16)
	struct Unknown Timestamp; // 0x20 (8)
	int32_t SizeInBytes; // 0x28 (4)
	int32_t LengthInMS; // 0x2C (4)
	int32_t NumViewers; // 0x30 (4)
	char bIsLive : 0; // 0x34 (1)
	int32_t ChangeList; // 0x38 (4)
	char bSouldKeep : 0; // 0x3C (1)
	char bIncomplete : 0; // 0x3D (1)
	char bIsVersionCompatible : 0; // 0x3E (1)
	char bIsCorrupted : 0; // 0x3F (1)
	struct FString GameVersion; // 0x40 (16)
	struct FString RecordUserId; // 0x50 (16)
	struct FString RecordUserNickName; // 0x60 (16)
	struct FString MapName; // 0x70 (16)
	int32_t BattleMode; // 0x80 (4)
	char FPP : 0; // 0x84 (1)
	int32_t TotalTeamCount; // 0x88 (4)
	int32_t FinalRank; // 0x8C (4)
	int32_t Kill; // 0x90 (4)
	float LifeTime; // 0x94 (4)
	float TotalDamage; // 0x98 (4)
	struct FString BlueZoneTitle; // 0xA0 (16)
	int32_t BlueZoneMaxPlayerCount; // 0xB0 (4)
	struct TArray<Unknown> TeamInfos; // 0xB8 (16)
	float KillcamStartTime; // 0xC8 (4)
	float KillcamEndTime; // 0xCC (4)
	char bHaveCameraEvent : 0; // 0xD0 (1)
	struct FString AdditionalInfo; // 0xD8 (16)
	int32_t MK3DReplayVersion; // 0xE8 (4)
	int32_t NetworkVersion; // 0xEC (4)
	struct TArray<Unknown> KillEvent; // 0xF0 (16)
	struct Unknown ReportInfo; // 0x100 (40)
};

// ScriptStruct Engine.MKReplayReportInfo
struct FMKReplayReportInfo {
	struct FString ReporterName; // 0x0 (16)
	struct FString SuspectName; // 0x10 (16)
	int32_t ReportType; // 0x20 (4)
	int32_t ReplayTime; // 0x24 (4)
};

// ScriptStruct Engine.ReplayKillEvent
struct FReplayKillEvent {
	struct FString KillerName; // 0x0 (16)
	struct FString VictimName; // 0x10 (16)
	int32_t TimeSeconds; // 0x20 (4)
};

// ScriptStruct Engine.MKReplayTeamInfo
struct FMKReplayTeamInfo {
	struct FString NickName; // 0x0 (16)
	struct FString DeckName; // 0x10 (16)
	struct FString WeaponName; // 0x20 (16)
	int32_t ClassLevel; // 0x30 (4)
};

// ScriptStruct Engine.SimpleMemberReference
struct FSimpleMemberReference {
	struct Unknown MemberParent; // 0x0 (8)
	struct FName MemberName; // 0x8 (8)
	struct Unknown MemberGuid; // 0x10 (16)
};

// ScriptStruct Engine.TickFunction
struct FTickFunction {
	char TickGroup; // 0x8 (1)
	char EndTickGroup; // 0x9 (1)
	char bTickEvenWhenPaused : 0; // 0xA (1)
	char bCanEverTick : 0; // 0xA (1)
	char bStartWithTickEnabled : 0; // 0xA (1)
	char bAllowTickOnDedicatedServer : 0; // 0xA (1)
	float TickInterval; // 0xC (4)
};

// ScriptStruct Engine.SubtitleCue
struct FSubtitleCue {
	struct FText Text; // 0x0 (24)
	float Time; // 0x18 (4)
};

// ScriptStruct Engine.InterpControlPoint
struct FInterpControlPoint {
	struct Unknown PositionControlPoint; // 0x0 (12)
	char bPositionIsRelative : 0; // 0xC (1)
};

// ScriptStruct Engine.PlatformInterfaceDelegateResult
struct FPlatformInterfaceDelegateResult {
	char bSuccessful : 0; // 0x0 (1)
	struct Unknown Data; // 0x8 (48)
};

// ScriptStruct Engine.PlatformInterfaceData
struct FPlatformInterfaceData {
	struct FName DataName; // 0x0 (8)
	char Type; // 0x8 (1)
	int32_t IntValue; // 0xC (4)
	float FloatValue; // 0x10 (4)
	struct FString StringValue; // 0x18 (16)
	struct Unknown ObjectValue; // 0x28 (8)
};

// ScriptStruct Engine.DebugFloatHistory
struct FDebugFloatHistory {
	struct TArray<Unknown> Samples; // 0x0 (16)
	float MaxSamples; // 0x10 (4)
	float MinValue; // 0x14 (4)
	float MaxValue; // 0x18 (4)
	char bAutoAdjustMinMax : 0; // 0x1C (1)
};

// ScriptStruct Engine.LatentActionInfo
struct FLatentActionInfo {
	int32_t Linkage; // 0x0 (4)
	int32_t UUID; // 0x4 (4)
	struct FName ExecutionFunction; // 0x8 (8)
	struct Unknown CallbackTarget; // 0x10 (8)
};

// ScriptStruct Engine.TimerHandle
struct FTimerHandle {
	uint64_t Handle; // 0x0 (8)
};

// ScriptStruct Engine.CollisionProfileName
struct FCollisionProfileName {
	struct FName Name; // 0x0 (8)
};

// ScriptStruct Engine.GenericStruct
struct FGenericStruct {
	int32_t Data; // 0x0 (4)
};

// ScriptStruct Engine.UserActivity
struct FUserActivity {
	struct FString ActionName; // 0x0 (16)
};

// ScriptStruct Engine.URL
struct FURL {
	struct FString Protocol; // 0x0 (16)
	struct FString Host; // 0x10 (16)
	int32_t Port; // 0x20 (4)
	int32_t Valid; // 0x24 (4)
	struct FString Map; // 0x28 (16)
	struct FString RedirectURL; // 0x38 (16)
	struct TArray<Unknown> Op; // 0x48 (16)
	struct FString Portal; // 0x58 (16)
};

// ScriptStruct Engine.RepAttachment
struct FRepAttachment {
	struct Unknown AttachParent; // 0x0 (8)
	struct Unknown LocationOffset; // 0x8 (12)
	struct Unknown RelativeScale3D; // 0x14 (12)
	struct Unknown RotationOffset; // 0x20 (12)
	struct FName AttachSocket; // 0x2C (8)
	struct Unknown AttachComponent; // 0x38 (8)
};

// ScriptStruct Engine.RepMovement
struct FRepMovement {
	struct Unknown LinearVelocity; // 0x0 (12)
	struct Unknown AngularVelocity; // 0xC (12)
	struct Unknown Location; // 0x18 (12)
	struct Unknown Rotation; // 0x24 (12)
	char bSimulatedPhysicSleep : 0; // 0x30 (1)
	char bRepPhysics : 0; // 0x30 (1)
	enum class Unknow LocationQuantizationLevel; // 0x31 (1)
	enum class Unknow VelocityQuantizationLevel; // 0x32 (1)
	enum class Unknow RotationQuantizationLevel; // 0x33 (1)
};

// ScriptStruct Engine.UniqueNetIdRepl
struct FUniqueNetIdRepl : FUniqueNetIdWrapper {
	struct TArray<Unknown> ReplicationBytes; // 0x18 (16)
};

// ScriptStruct Engine.ForceFeedbackParameters
struct FForceFeedbackParameters {
	struct FName Tag; // 0x0 (8)
	char bLooping : 0; // 0x8 (1)
	char bIgnoreTimeDilation : 0; // 0x9 (1)
	char bPlayWhilePaused : 0; // 0xA (1)
};

// ScriptStruct Engine.ViewTargetTransitionParams
struct FViewTargetTransitionParams {
	float BlendTime; // 0x0 (4)
	char BlendFunction; // 0x4 (1)
	float BlendExp; // 0x8 (4)
	char bLockOutgoing : 0; // 0xC (1)
};

// ScriptStruct Engine.UpdateLevelStreamingLevelStatus
struct FUpdateLevelStreamingLevelStatus {
	struct FName PackageName; // 0x0 (8)
	int32_t LODIndex; // 0x8 (4)
	char bNewShouldBeLoaded : 0; // 0xC (1)
	char bNewShouldBeVisible : 0; // 0xC (1)
	char bNewShouldBlockOnLoad : 0; // 0xC (1)
};

// ScriptStruct Engine.UpdateLevelVisibilityLevelInfo
struct FUpdateLevelVisibilityLevelInfo {
	struct FName PackageName; // 0x0 (8)
	struct FName Filename; // 0x8 (8)
	char bIsVisible : 0; // 0x10 (1)
};

// ScriptStruct Engine.ActiveForceFeedbackEffect
struct FActiveForceFeedbackEffect {
	struct Unknown ForceFeedbackEffect; // 0x0 (8)
};

// ScriptStruct Engine.UserWidgetInfoForReplay
struct FUserWidgetInfoForReplay {
	struct FString KeyName; // 0x0 (16)
	struct FString FilePath; // 0x10 (16)
};

// ScriptStruct Engine.FractureEffect
struct FFractureEffect {
	struct Unknown ParticleSystem; // 0x0 (8)
	struct Unknown Sound; // 0x8 (8)
	enum class Unknow SoundType; // 0x10 (1)
};

// ScriptStruct Engine.RootMotionSourceGroup
struct FRootMotionSourceGroup {
	char bHasAdditiveSources : 0; // 0x28 (1)
	char bHasOverrideSources : 0; // 0x28 (1)
	char bHasOverrideSourcesWithIgnoreZAccumulate : 0; // 0x28 (1)
	char bIsAdditiveVelocityApplied : 0; // 0x28 (1)
	struct Unknown LastAccumulatedSettings; // 0x29 (1)
	struct Unknown LastPreAdditiveVelocity; // 0x2C (12)
};

// ScriptStruct Engine.RootMotionSourceSettings
struct FRootMotionSourceSettings {
	char Flags; // 0x0 (1)
};

// ScriptStruct Engine.RepRootMotionMontage
struct FRepRootMotionMontage {
	char bIsActive : 0; // 0x0 (1)
	struct Unknown AnimMontage; // 0x8 (8)
	float Position; // 0x10 (4)
	struct Unknown Location; // 0x14 (12)
	struct Unknown Rotation; // 0x20 (12)
	struct Unknown MovementBase; // 0x30 (8)
	struct FName MovementBaseBoneName; // 0x38 (8)
	char bRelativePosition : 0; // 0x40 (1)
	char bRelativeRotation : 0; // 0x41 (1)
	struct Unknown AuthoritativeRootMotion; // 0x48 (56)
	struct Unknown Acceleration; // 0x80 (12)
	struct Unknown LinearVelocity; // 0x8C (12)
};

// ScriptStruct Engine.SimulatedRootMotionReplicatedMove
struct FSimulatedRootMotionReplicatedMove {
	float Time; // 0x0 (4)
	struct Unknown RootMotion; // 0x8 (152)
};

// ScriptStruct Engine.RootMotionMovementParams
struct FRootMotionMovementParams {
	char bHasRootMotion : 0; // 0x0 (1)
	float BlendWeight; // 0x4 (4)
	struct Unknown RootMotionTransform; // 0x10 (48)
};

// ScriptStruct Engine.BasedMovementInfo
struct FBasedMovementInfo {
	struct Unknown MovementBase; // 0x0 (8)
	struct FName BoneName; // 0x8 (8)
	struct Unknown Location; // 0x10 (12)
	struct Unknown Rotation; // 0x1C (12)
	char bServerHasBaseComponent : 0; // 0x28 (1)
	char bRelativeRotation : 0; // 0x29 (1)
	char bServerHasVelocity : 0; // 0x2A (1)
};

// ScriptStruct Engine.Timeline
struct FTimeline {
	char LengthMode; // 0x0 (1)
	char bLooping : 0; // 0x1 (1)
	char bReversePlayback : 0; // 0x1 (1)
	char bPlaying : 0; // 0x1 (1)
	float Length; // 0x4 (4)
	float PlayRate; // 0x8 (4)
	float Position; // 0xC (4)
	struct TArray<Unknown> Events; // 0x10 (16)
	struct TArray<Unknown> InterpVectors; // 0x20 (16)
	struct TArray<Unknown> InterpFloats; // 0x30 (16)
	struct TArray<Unknown> InterpLinearColors; // 0x40 (16)
	struct FDelegate TimelinePostUpdateFunc; // 0x50 (16)
	struct FDelegate TimelineFinishedFunc; // 0x60 (16)
	struct TWeakObjectPtr<struct Unknown> PropertySetObject; // 0x70 (8)
	struct FName DirectionPropertyName; // 0x78 (8)
};

// ScriptStruct Engine.TimelineLinearColorTrack
struct FTimelineLinearColorTrack {
	struct Unknown LinearColorCurve; // 0x0 (8)
	struct FDelegate InterpFunc; // 0x8 (16)
	struct FName TrackName; // 0x18 (8)
	struct FName LinearColorPropertyName; // 0x20 (8)
};

// ScriptStruct Engine.TimelineFloatTrack
struct FTimelineFloatTrack {
	struct Unknown FloatCurve; // 0x0 (8)
	struct FDelegate InterpFunc; // 0x8 (16)
	struct FName TrackName; // 0x18 (8)
	struct FName FloatPropertyName; // 0x20 (8)
};

// ScriptStruct Engine.TimelineVectorTrack
struct FTimelineVectorTrack {
	struct Unknown VectorCurve; // 0x0 (8)
	struct FDelegate InterpFunc; // 0x8 (16)
	struct FName TrackName; // 0x18 (8)
	struct FName VectorPropertyName; // 0x20 (8)
};

// ScriptStruct Engine.TimelineEventEntry
struct FTimelineEventEntry {
	float Time; // 0x0 (4)
	struct FDelegate EventFunc; // 0x4 (16)
};

// ScriptStruct Engine.DataTableRowHandle
struct FDataTableRowHandle {
	struct Unknown DataTable; // 0x0 (8)
	struct FName RowName; // 0x8 (8)
};

// ScriptStruct Engine.DamageEvent
struct FDamageEvent {
	struct Unknown* DamageTypeClass; // 0x8 (8)
};

// ScriptStruct Engine.RadialDamageEvent
struct FRadialDamageEvent : FDamageEvent {
	struct Unknown Params; // 0x10 (20)
	struct Unknown Origin; // 0x24 (12)
	struct TArray<Unknown> ComponentHits; // 0x30 (16)
};

// ScriptStruct Engine.RadialDamageParams
struct FRadialDamageParams {
	float BaseDamage; // 0x0 (4)
	float MinimumDamage; // 0x4 (4)
	float InnerRadius; // 0x8 (4)
	float OuterRadius; // 0xC (4)
	float DamageFalloff; // 0x10 (4)
};

// ScriptStruct Engine.PointDamageEvent
struct FPointDamageEvent : FDamageEvent {
	float Damage; // 0x10 (4)
	struct Unknown ShotDirection; // 0x14 (12)
	struct Unknown HitInfo; // 0x20 (136)
};

// ScriptStruct Engine.PostProcessSettings
struct FPostProcessSettings {
	char bOverride_WhiteTemp : 0; // 0x0 (1)
	char bOverride_WhiteTint : 0; // 0x0 (1)
	char bOverride_ColorSaturation : 0; // 0x0 (1)
	char bOverride_ColorContrast : 0; // 0x0 (1)
	char bOverride_ColorGamma : 0; // 0x0 (1)
	char bOverride_ColorGain : 0; // 0x0 (1)
	char bOverride_ColorOffset : 0; // 0x0 (1)
	char bOverride_ColorSaturationShadows : 0; // 0x0 (1)
	char bOverride_ColorContrastShadows : 0; // 0x1 (1)
	char bOverride_ColorGammaShadows : 0; // 0x1 (1)
	char bOverride_ColorGainShadows : 0; // 0x1 (1)
	char bOverride_ColorOffsetShadows : 0; // 0x1 (1)
	char bOverride_ColorSaturationMidtones : 0; // 0x1 (1)
	char bOverride_ColorContrastMidtones : 0; // 0x1 (1)
	char bOverride_ColorGammaMidtones : 0; // 0x1 (1)
	char bOverride_ColorGainMidtones : 0; // 0x1 (1)
	char bOverride_ColorOffsetMidtones : 0; // 0x2 (1)
	char bOverride_ColorSaturationHighlights : 0; // 0x2 (1)
	char bOverride_ColorContrastHighlights : 0; // 0x2 (1)
	char bOverride_ColorGammaHighlights : 0; // 0x2 (1)
	char bOverride_ColorGainHighlights : 0; // 0x2 (1)
	char bOverride_ColorOffsetHighlights : 0; // 0x2 (1)
	char bOverride_ColorCorrectionShadowsMax : 0; // 0x2 (1)
	char bOverride_ColorCorrectionHighlightsMin : 0; // 0x2 (1)
	char bOverride_BlueCorrection : 0; // 0x3 (1)
	char bOverride_ExpandGamut : 0; // 0x3 (1)
	char bOverride_FilmWhitePoint : 0; // 0x3 (1)
	char bOverride_FilmSaturation : 0; // 0x3 (1)
	char bOverride_FilmChannelMixerRed : 0; // 0x3 (1)
	char bOverride_FilmChannelMixerGreen : 0; // 0x3 (1)
	char bOverride_FilmChannelMixerBlue : 0; // 0x3 (1)
	char bOverride_FilmContrast : 0; // 0x3 (1)
	char bOverride_FilmDynamicRange : 0; // 0x4 (1)
	char bOverride_FilmHealAmount : 0; // 0x4 (1)
	char bOverride_FilmToeAmount : 0; // 0x4 (1)
	char bOverride_FilmShadowTint : 0; // 0x4 (1)
	char bOverride_FilmShadowTintBlend : 0; // 0x4 (1)
	char bOverride_FilmShadowTintAmount : 0; // 0x4 (1)
	char bOverride_FilmSlope : 0; // 0x4 (1)
	char bOverride_FilmToe : 0; // 0x4 (1)
	char bOverride_FilmShoulder : 0; // 0x5 (1)
	char bOverride_FilmBlackClip : 0; // 0x5 (1)
	char bOverride_FilmWhiteClip : 0; // 0x5 (1)
	char bOverride_FilmicTonemapper : 0; // 0x5 (1)
	char bOverride_TonemapperSharpen : 0; // 0x5 (1)
	char bOverride_UseVolumetricFogEmissive : 0; // 0x5 (1)
	char bOverride_VolumetricFogEmissive : 0; // 0x5 (1)
	char bOverride_SceneColorTint : 0; // 0x5 (1)
	char bOverride_SceneFringeIntensity : 0; // 0x6 (1)
	char bOverride_ChromaticAberrationStartOffset : 0; // 0x6 (1)
	char bOverride_AmbientCubemapTint : 0; // 0x6 (1)
	char bOverride_AmbientCubemapIntensity : 0; // 0x6 (1)
	char bOverride_BloomMethod : 0; // 0x6 (1)
	char bOverride_BloomIntensity : 0; // 0x6 (1)
	char bOverride_BloomThreshold : 0; // 0x6 (1)
	char bOverride_Bloom1Tint : 0; // 0x6 (1)
	char bOverride_Bloom1Size : 0; // 0x7 (1)
	char bOverride_Bloom2Size : 0; // 0x7 (1)
	char bOverride_Bloom2Tint : 0; // 0x7 (1)
	char bOverride_Bloom3Tint : 0; // 0x7 (1)
	char bOverride_Bloom3Size : 0; // 0x7 (1)
	char bOverride_Bloom4Tint : 0; // 0x7 (1)
	char bOverride_Bloom4Size : 0; // 0x7 (1)
	char bOverride_Bloom5Tint : 0; // 0x7 (1)
	char bOverride_Bloom5Size : 0; // 0x8 (1)
	char bOverride_Bloom6Tint : 0; // 0x8 (1)
	char bOverride_Bloom6Size : 0; // 0x8 (1)
	char bOverride_BloomSizeScale : 0; // 0x8 (1)
	char bOverride_BloomConvolutionTexture : 0; // 0x8 (1)
	char bOverride_BloomConvolutionSize : 0; // 0x8 (1)
	char bOverride_BloomConvolutionCenterUV : 0; // 0x8 (1)
	char bOverride_BloomConvolutionPreFilter : 0; // 0x8 (1)
	char bOverride_BloomConvolutionPreFilterMin : 0; // 0x9 (1)
	char bOverride_BloomConvolutionPreFilterMax : 0; // 0x9 (1)
	char bOverride_BloomConvolutionPreFilterMult : 0; // 0x9 (1)
	char bOverride_BloomConvolutionBufferScale : 0; // 0x9 (1)
	char bOverride_BloomDirtMaskIntensity : 0; // 0x9 (1)
	char bOverride_BloomDirtMaskTint : 0; // 0x9 (1)
	char bOverride_BloomDirtMask : 0; // 0x9 (1)
	char bOverride_CameraShutterSpeed : 0; // 0x9 (1)
	char bOverride_CameraISO : 0; // 0xA (1)
	char bOverride_AutoExposureMethod : 0; // 0xA (1)
	char bOverride_AutoExposureLowPercent : 0; // 0xA (1)
	char bOverride_AutoExposureHighPercent : 0; // 0xA (1)
	char bOverride_AutoExposureMinBrightness : 0; // 0xA (1)
	char bOverride_AutoExposureMaxBrightness : 0; // 0xA (1)
	char bOverride_AutoExposureCalibrationConstant : 0; // 0xA (1)
	char bOverride_AutoExposureSpeedUp : 0; // 0xA (1)
	char bOverride_AutoExposureSpeedDown : 0; // 0xB (1)
	char bOverride_AutoExposureBias : 0; // 0xB (1)
	char bOverride_AutoExposureBiasCurve : 0; // 0xB (1)
	char bOverride_AutoExposureMeterMask : 0; // 0xB (1)
	char bOverride_AutoExposureApplyPhysicalCameraExposure : 0; // 0xB (1)
	char bOverride_HistogramLogMin : 0; // 0xB (1)
	char bOverride_HistogramLogMax : 0; // 0xB (1)
	char bOverride_LensFlareIntensity : 0; // 0xB (1)
	char bOverride_LensFlareTint : 0; // 0xC (1)
	char bOverride_LensFlareTints : 0; // 0xC (1)
	char bOverride_LensFlareBokehSize : 0; // 0xC (1)
	char bOverride_LensFlareBokehShape : 0; // 0xC (1)
	char bOverride_LensFlareThreshold : 0; // 0xC (1)
	char bOverride_VignetteIntensity : 0; // 0xC (1)
	char bOverride_GrainIntensity : 0; // 0xC (1)
	char bOverride_GrainJitter : 0; // 0xC (1)
	char bOverride_AmbientOcclusionIntensity : 0; // 0xD (1)
	char bOverride_AmbientOcclusionIntensitySubsurfaceProfile : 0; // 0xD (1)
	char bOverride_AmbientOcclusionStaticFraction : 0; // 0xD (1)
	char bOverride_AmbientOcclusionRadius : 0; // 0xD (1)
	char bOverride_AmbientOcclusionFadeDistance : 0; // 0xD (1)
	char bOverride_AmbientOcclusionFadeRadius : 0; // 0xD (1)
	char bOverride_AmbientOcclusionDistance : 0; // 0xD (1)
	char bOverride_AmbientOcclusionRadiusInWS : 0; // 0xD (1)
	char bOverride_AmbientOcclusionPower : 0; // 0xE (1)
	char bOverride_AmbientOcclusionBias : 0; // 0xE (1)
	char bOverride_AmbientOcclusionQuality : 0; // 0xE (1)
	char bOverride_AmbientOcclusionMipBlend : 0; // 0xE (1)
	char bOverride_AmbientOcclusionMipScale : 0; // 0xE (1)
	char bOverride_AmbientOcclusionMipThreshold : 0; // 0xE (1)
	char bOverride_RayTracingAO : 0; // 0x10 (1)
	char bOverride_RayTracingAOSamplesPerPixel : 0; // 0x10 (1)
	char bOverride_LPVIntensity : 0; // 0x14 (1)
	char bOverride_LPVDirectionalOcclusionIntensity : 0; // 0x14 (1)
	char bOverride_LPVDirectionalOcclusionRadius : 0; // 0x14 (1)
	char bOverride_LPVDiffuseOcclusionExponent : 0; // 0x14 (1)
	char bOverride_LPVSpecularOcclusionExponent : 0; // 0x14 (1)
	char bOverride_LPVDiffuseOcclusionIntensity : 0; // 0x14 (1)
	char bOverride_LPVSpecularOcclusionIntensity : 0; // 0x14 (1)
	char bOverride_LPVSize : 0; // 0x14 (1)
	char bOverride_LPVSecondaryOcclusionIntensity : 0; // 0x15 (1)
	char bOverride_LPVSecondaryBounceIntensity : 0; // 0x15 (1)
	char bOverride_LPVGeometryVolumeBias : 0; // 0x15 (1)
	char bOverride_LPVVplInjectionBias : 0; // 0x15 (1)
	char bOverride_LPVEmissiveInjectionIntensity : 0; // 0x15 (1)
	char bOverride_LPVFadeRange : 0; // 0x15 (1)
	char bOverride_LPVDirectionalOcclusionFadeRange : 0; // 0x15 (1)
	char bOverride_LPVReflectionIntensity : 0; // 0x18 (1)
	char bOverride_LPVReflectionLength : 0; // 0x18 (1)
	char bOverride_LPVReflectionOcclusion : 0; // 0x18 (1)
	char bOverride_LPVHairSpecularLightingIntensity : 0; // 0x18 (1)
	char bOverride_LPVHairSpecularOcclusionIntensity : 0; // 0x18 (1)
	char bOverride_LPVHairRoughnessOverride : 0; // 0x18 (1)
	char bOverride_LPVDistantLightingIntensity : 0; // 0x18 (1)
	char bOverride_LPVEnvironmentColor : 0; // 0x18 (1)
	char bOverride_UseSeparateAOVolume : 0; // 0x19 (1)
	char bOverride_IndirectLightingColor : 0; // 0x1C (1)
	char bOverride_IndirectLightingIntensity : 0; // 0x1C (1)
	char bOverride_SkyLightingIntensity : 0; // 0x1C (1)
	char bOverride_DiffuseIBLIntensity : 0; // 0x1C (1)
	char bOverride_TwoSidedFoliageSpecularReflectionIntensity : 0; // 0x1C (1)
	char bOverride_IndirectSpecularIntensity : 0; // 0x1C (1)
	char bOverride_IndirectSpecularBlendFactor : 0; // 0x1C (1)
	char bOverride_IndirectLightingDirectionality : 0; // 0x1C (1)
	char bOverride_IndirectLightingDirectionalSourceSize : 0; // 0x1D (1)
	char bOverride_IndirectLightingDirectionalSpecularIntensity : 0; // 0x1D (1)
	char bOverride_ColorGradingIntensity : 0; // 0x1D (1)
	char bOverride_ColorGradingLUT : 0; // 0x1D (1)
	char bOverride_DepthOfFieldFocalDistance : 0; // 0x1D (1)
	char bOverride_DepthOfFieldFstop : 0; // 0x1D (1)
	char bOverride_DepthOfFieldMinFstop : 0; // 0x1D (1)
	char bOverride_DepthOfFieldBladeCount : 0; // 0x1D (1)
	char bOverride_DepthOfFieldSensorWidth : 0; // 0x1E (1)
	char bOverride_DepthOfFieldDepthBlurRadius : 0; // 0x1E (1)
	char bOverride_DepthOfFieldDepthBlurAmount : 0; // 0x1E (1)
	char bOverride_DepthOfFieldFocalRegion : 0; // 0x1E (1)
	char bOverride_DepthOfFieldNearTransitionRegion : 0; // 0x1E (1)
	char bOverride_DepthOfFieldFarTransitionRegion : 0; // 0x1E (1)
	char bOverride_DepthOfFieldEnabled : 0; // 0x1E (1)
	char bOverride_DepthOfFieldScale : 0; // 0x1E (1)
	char bOverride_DepthOfFieldNearBlurSize : 0; // 0x1F (1)
	char bOverride_DepthOfFieldFarBlurSize : 0; // 0x1F (1)
	char bOverride_MobileHQGaussian : 0; // 0x1F (1)
	char bOverride_DepthOfFieldOcclusion : 0; // 0x1F (1)
	char bOverride_DepthOfFieldSkyFocusDistance : 0; // 0x1F (1)
	char bOverride_DepthOfFieldVignetteSize : 0; // 0x1F (1)
	char bOverride_MotionBlurAmount : 0; // 0x1F (1)
	char bOverride_MotionBlurMax : 0; // 0x1F (1)
	char bOverride_MotionBlurTargetFPS : 0; // 0x20 (1)
	char bOverride_MotionBlurPerObjectSize : 0; // 0x20 (1)
	char bOverride_ScreenPercentage : 0; // 0x20 (1)
	char bOverride_ScreenSpaceReflectionIntensity : 0; // 0x20 (1)
	char bOverride_ScreenSpaceReflectionQuality : 0; // 0x20 (1)
	char bOverride_ScreenSpaceReflectionMaxRoughness : 0; // 0x20 (1)
	char bOverride_ScreenSpaceReflectionRoughnessScale : 0; // 0x20 (1)
	char bOverride_ReflectionsType : 0; // 0x24 (1)
	char bOverride_RayTracingReflectionsMaxRoughness : 0; // 0x24 (1)
	char bOverride_RayTracingReflectionsMaxBounces : 0; // 0x24 (1)
	char bOverride_RayTracingReflectionsSamplesPerPixel : 0; // 0x24 (1)
	char bOverride_RayTracingReflectionsShadows : 0; // 0x24 (1)
	char bOverride_RayTracingReflectionsTranslucency : 0; // 0x24 (1)
	char bOverride_TranslucencyType : 0; // 0x24 (1)
	char bOverride_RayTracingTranslucencyMaxRoughness : 0; // 0x24 (1)
	char bOverride_RayTracingTranslucencyRefractionRays : 0; // 0x25 (1)
	char bOverride_RayTracingTranslucencySamplesPerPixel : 0; // 0x25 (1)
	char bOverride_RayTracingTranslucencyShadows : 0; // 0x25 (1)
	char bOverride_RayTracingTranslucencyRefraction : 0; // 0x25 (1)
	char bOverride_RayTracingGI : 0; // 0x25 (1)
	char bOverride_RayTracingGIMaxBounces : 0; // 0x25 (1)
	char bOverride_RayTracingGISamplesPerPixel : 0; // 0x25 (1)
	char bOverride_PathTracingMaxBounces : 0; // 0x25 (1)
	char bOverride_PathTracingSamplesPerPixel : 0; // 0x26 (1)
	char bMobileHQGaussian : 0; // 0x28 (1)
	char BloomMethod; // 0x29 (1)
	char AutoExposureMethod; // 0x2A (1)
	float WhiteTemp; // 0x2C (4)
	float WhiteTint; // 0x30 (4)
	struct Unknown ColorSaturation; // 0x40 (16)
	struct Unknown ColorContrast; // 0x50 (16)
	struct Unknown ColorGamma; // 0x60 (16)
	struct Unknown ColorGain; // 0x70 (16)
	struct Unknown ColorOffset; // 0x80 (16)
	struct Unknown ColorSaturationShadows; // 0x90 (16)
	struct Unknown ColorContrastShadows; // 0xA0 (16)
	struct Unknown ColorGammaShadows; // 0xB0 (16)
	struct Unknown ColorGainShadows; // 0xC0 (16)
	struct Unknown ColorOffsetShadows; // 0xD0 (16)
	struct Unknown ColorSaturationMidtones; // 0xE0 (16)
	struct Unknown ColorContrastMidtones; // 0xF0 (16)
	struct Unknown ColorGammaMidtones; // 0x100 (16)
	struct Unknown ColorGainMidtones; // 0x110 (16)
	struct Unknown ColorOffsetMidtones; // 0x120 (16)
	struct Unknown ColorSaturationHighlights; // 0x130 (16)
	struct Unknown ColorContrastHighlights; // 0x140 (16)
	struct Unknown ColorGammaHighlights; // 0x150 (16)
	struct Unknown ColorGainHighlights; // 0x160 (16)
	struct Unknown ColorOffsetHighlights; // 0x170 (16)
	float ColorCorrectionHighlightsMin; // 0x180 (4)
	float ColorCorrectionShadowsMax; // 0x184 (4)
	float BlueCorrection; // 0x188 (4)
	float ExpandGamut; // 0x18C (4)
	float FilmSlope; // 0x190 (4)
	float FilmToe; // 0x194 (4)
	float FilmShoulder; // 0x198 (4)
	float FilmBlackClip; // 0x19C (4)
	float FilmWhiteClip; // 0x1A0 (4)
	struct Unknown FilmWhitePoint; // 0x1A4 (16)
	struct Unknown FilmShadowTint; // 0x1B4 (16)
	float FilmShadowTintBlend; // 0x1C4 (4)
	float FilmShadowTintAmount; // 0x1C8 (4)
	float FilmSaturation; // 0x1CC (4)
	struct Unknown FilmChannelMixerRed; // 0x1D0 (16)
	struct Unknown FilmChannelMixerGreen; // 0x1E0 (16)
	struct Unknown FilmChannelMixerBlue; // 0x1F0 (16)
	float FilmContrast; // 0x200 (4)
	float FilmToeAmount; // 0x204 (4)
	float FilmHealAmount; // 0x208 (4)
	float FilmDynamicRange; // 0x20C (4)
	enum class Unknow FilmicTonemapper; // 0x210 (1)
	float TonemapperSharpen; // 0x214 (4)
	char UseVolumetricFogEmissive : 0; // 0x218 (1)
	struct Unknown VolumetricFogEmissive; // 0x21C (16)
	struct Unknown SceneColorTint; // 0x22C (16)
	float SceneFringeIntensity; // 0x23C (4)
	float ChromaticAberrationStartOffset; // 0x240 (4)
	float BloomIntensity; // 0x244 (4)
	float BloomThreshold; // 0x248 (4)
	float BloomSizeScale; // 0x24C (4)
	float Bloom1Size; // 0x250 (4)
	float Bloom2Size; // 0x254 (4)
	float Bloom3Size; // 0x258 (4)
	float Bloom4Size; // 0x25C (4)
	float Bloom5Size; // 0x260 (4)
	float Bloom6Size; // 0x264 (4)
	struct Unknown Bloom1Tint; // 0x268 (16)
	struct Unknown Bloom2Tint; // 0x278 (16)
	struct Unknown Bloom3Tint; // 0x288 (16)
	struct Unknown Bloom4Tint; // 0x298 (16)
	struct Unknown Bloom5Tint; // 0x2A8 (16)
	struct Unknown Bloom6Tint; // 0x2B8 (16)
	float BloomConvolutionSize; // 0x2C8 (4)
	struct Unknown BloomConvolutionTexture; // 0x2D0 (8)
	struct Unknown BloomConvolutionCenterUV; // 0x2D8 (8)
	float BloomConvolutionPreFilterMin; // 0x2E0 (4)
	float BloomConvolutionPreFilterMax; // 0x2E4 (4)
	float BloomConvolutionPreFilterMult; // 0x2E8 (4)
	float BloomConvolutionBufferScale; // 0x2EC (4)
	struct Unknown BloomDirtMask; // 0x2F0 (8)
	float BloomDirtMaskIntensity; // 0x2F8 (4)
	struct Unknown BloomDirtMaskTint; // 0x2FC (16)
	struct Unknown AmbientCubemapTint; // 0x30C (16)
	float AmbientCubemapIntensity; // 0x31C (4)
	struct Unknown AmbientCubemap; // 0x320 (8)
	float CameraShutterSpeed; // 0x328 (4)
	float CameraISO; // 0x32C (4)
	float DepthOfFieldFstop; // 0x330 (4)
	float DepthOfFieldMinFstop; // 0x334 (4)
	int32_t DepthOfFieldBladeCount; // 0x338 (4)
	float AutoExposureBias; // 0x33C (4)
	float AutoExposureBiasBackup; // 0x340 (4)
	char bOverride_AutoExposureBiasBackup : 0; // 0x344 (1)
	char AutoExposureApplyPhysicalCameraExposure : 0; // 0x348 (1)
	struct Unknown AutoExposureBiasCurve; // 0x350 (8)
	struct Unknown AutoExposureMeterMask; // 0x358 (8)
	float AutoExposureLowPercent; // 0x360 (4)
	float AutoExposureHighPercent; // 0x364 (4)
	float AutoExposureMinBrightness; // 0x368 (4)
	float AutoExposureMaxBrightness; // 0x36C (4)
	float AutoExposureSpeedUp; // 0x370 (4)
	float AutoExposureSpeedDown; // 0x374 (4)
	float HistogramLogMin; // 0x378 (4)
	float HistogramLogMax; // 0x37C (4)
	float AutoExposureCalibrationConstant; // 0x380 (4)
	float LensFlareIntensity; // 0x384 (4)
	struct Unknown LensFlareTint; // 0x388 (16)
	float LensFlareBokehSize; // 0x398 (4)
	float LensFlareThreshold; // 0x39C (4)
	struct Unknown LensFlareBokehShape; // 0x3A0 (8)
	struct Unknown LensFlareTints[0x8]; // 0x3A8 (128)
	float VignetteIntensity; // 0x428 (4)
	float GrainJitter; // 0x42C (4)
	float GrainIntensity; // 0x430 (4)
	float AmbientOcclusionIntensity; // 0x434 (4)
	float AmbientOcclusionIntensitySubsurfaceProfile; // 0x438 (4)
	float AmbientOcclusionStaticFraction; // 0x43C (4)
	float AmbientOcclusionRadius; // 0x440 (4)
	char AmbientOcclusionRadiusInWS : 0; // 0x444 (1)
	float AmbientOcclusionFadeDistance; // 0x448 (4)
	float AmbientOcclusionFadeRadius; // 0x44C (4)
	float AmbientOcclusionDistance; // 0x450 (4)
	float AmbientOcclusionPower; // 0x454 (4)
	float AmbientOcclusionBias; // 0x458 (4)
	float AmbientOcclusionQuality; // 0x45C (4)
	float AmbientOcclusionMipBlend; // 0x460 (4)
	float AmbientOcclusionMipScale; // 0x464 (4)
	float AmbientOcclusionMipThreshold; // 0x468 (4)
	char RayTracingAO : 0; // 0x46C (1)
	int32_t RayTracingAOSamplesPerPixel; // 0x470 (4)
	struct Unknown IndirectLightingColor; // 0x474 (16)
	float IndirectLightingIntensity; // 0x484 (4)
	float SkyLightingIntensity; // 0x488 (4)
	float DiffuseIBLIntensity; // 0x48C (4)
	float TwoSidedFoliageSpecularReflectionIntensity; // 0x490 (4)
	float IndirectSpecularIntensity; // 0x494 (4)
	float IndirectSpecularBlendFactor; // 0x498 (4)
	float IndirectLightingDirectionality; // 0x49C (4)
	float IndirectLightingDirectionalSourceSize; // 0x4A0 (4)
	float IndirectLightingDirectionalSpecularIntensity; // 0x4A4 (4)
	enum class Unknow RayTracingGIType; // 0x4A8 (1)
	int32_t RayTracingGIMaxBounces; // 0x4AC (4)
	int32_t RayTracingGISamplesPerPixel; // 0x4B0 (4)
	float ColorGradingIntensity; // 0x4B4 (4)
	struct Unknown ColorGradingLUT; // 0x4B8 (8)
	float DepthOfFieldSensorWidth; // 0x4C0 (4)
	float DepthOfFieldFocalDistance; // 0x4C4 (4)
	float DepthOfFieldDepthBlurAmount; // 0x4C8 (4)
	float DepthOfFieldDepthBlurRadius; // 0x4CC (4)
	float DepthOfFieldFocalRegion; // 0x4D0 (4)
	float DepthOfFieldNearTransitionRegion; // 0x4D4 (4)
	float DepthOfFieldFarTransitionRegion; // 0x4D8 (4)
	char bDepthOfFieldEnabled : 0; // 0x4DC (1)
	float DepthOfFieldScale; // 0x4E0 (4)
	float DepthOfFieldNearBlurSize; // 0x4E4 (4)
	float DepthOfFieldFarBlurSize; // 0x4E8 (4)
	float DepthOfFieldOcclusion; // 0x4EC (4)
	float DepthOfFieldSkyFocusDistance; // 0x4F0 (4)
	float DepthOfFieldVignetteSize; // 0x4F4 (4)
	float MotionBlurAmount; // 0x4F8 (4)
	float MotionBlurMax; // 0x4FC (4)
	int32_t MotionBlurTargetFPS; // 0x500 (4)
	float MotionBlurPerObjectSize; // 0x504 (4)
	float LPVIntensity; // 0x508 (4)
	float LPVVplInjectionBias; // 0x50C (4)
	float LPVSize; // 0x510 (4)
	float LPVSecondaryOcclusionIntensity; // 0x514 (4)
	float LPVSecondaryBounceIntensity; // 0x518 (4)
	float LPVGeometryVolumeBias; // 0x51C (4)
	float LPVEmissiveInjectionIntensity; // 0x520 (4)
	float LPVDirectionalOcclusionIntensity; // 0x524 (4)
	float LPVDirectionalOcclusionRadius; // 0x528 (4)
	float LPVDiffuseOcclusionExponent; // 0x52C (4)
	float LPVSpecularOcclusionExponent; // 0x530 (4)
	float LPVDiffuseOcclusionIntensity; // 0x534 (4)
	float LPVSpecularOcclusionIntensity; // 0x538 (4)
	float LPVReflectionIntensity; // 0x53C (4)
	float LPVReflectionLength; // 0x540 (4)
	char bLPVReflectionOcclusion : 0; // 0x544 (1)
	float LPVHairSpecularLightingIntensity; // 0x548 (4)
	float LPVHairSpecularOcclusionIntensity; // 0x54C (4)
	float LPVHairRoughnessOverride; // 0x550 (4)
	float LPVDistantLightingIntensity; // 0x554 (4)
	struct Unknown LPVEnvironmentColor; // 0x558 (16)
	char bUseSeparateAOVolume : 0; // 0x568 (1)
	enum class Unknow ReflectionsType; // 0x569 (1)
	float ScreenSpaceReflectionIntensity; // 0x56C (4)
	float ScreenSpaceReflectionQuality; // 0x570 (4)
	float ScreenSpaceReflectionMaxRoughness; // 0x574 (4)
	float RayTracingReflectionsMaxRoughness; // 0x578 (4)
	int32_t RayTracingReflectionsMaxBounces; // 0x57C (4)
	int32_t RayTracingReflectionsSamplesPerPixel; // 0x580 (4)
	enum class Unknow RayTracingReflectionsShadows; // 0x584 (1)
	char RayTracingReflectionsTranslucency : 0; // 0x585 (1)
	enum class Unknow TranslucencyType; // 0x586 (1)
	float RayTracingTranslucencyMaxRoughness; // 0x588 (4)
	int32_t RayTracingTranslucencyRefractionRays; // 0x58C (4)
	int32_t RayTracingTranslucencySamplesPerPixel; // 0x590 (4)
	enum class Unknow RayTracingTranslucencyShadows; // 0x594 (1)
	char RayTracingTranslucencyRefraction : 0; // 0x595 (1)
	int32_t PathTracingMaxBounces; // 0x598 (4)
	int32_t PathTracingSamplesPerPixel; // 0x59C (4)
	float LPVFadeRange; // 0x5A0 (4)
	float LPVDirectionalOcclusionFadeRange; // 0x5A4 (4)
	float ScreenPercentage; // 0x5A8 (4)
	struct Unknown WeightedBlendables; // 0x5B0 (16)
};

// ScriptStruct Engine.WeightedBlendables
struct FWeightedBlendables {
	struct TArray<Unknown> Array; // 0x0 (16)
};

// ScriptStruct Engine.WeightedBlendable
struct FWeightedBlendable {
	float Weight; // 0x0 (4)
	struct Unknown Object; // 0x8 (8)
};

// ScriptStruct Engine.FastArraySerializer
struct FFastArraySerializer {
	int32_t ArrayReplicationKey; // 0x54 (4)
	enum class Unknow DeltaFlags; // 0x100 (1)
};

// ScriptStruct Engine.FastArraySerializerItem
struct FFastArraySerializerItem {
	int32_t ReplicationID; // 0x0 (4)
	int32_t ReplicationKey; // 0x4 (4)
	int32_t MostRecentArrayReplicationKey; // 0x8 (4)
};

// ScriptStruct Engine.InputActionKeyMapping
struct FInputActionKeyMapping {
	struct FName ActionName; // 0x0 (8)
	char bShift : 0; // 0x8 (1)
	char bCtrl : 0; // 0x8 (1)
	char bAlt : 0; // 0x8 (1)
	char bCmd : 0; // 0x8 (1)
	struct Unknown Key; // 0x10 (24)
};

// ScriptStruct Engine.RigidBodyErrorCorrection
struct FRigidBodyErrorCorrection {
	float PingExtrapolation; // 0x0 (4)
	float PingLimit; // 0x4 (4)
	float ErrorPerLinearDifference; // 0x8 (4)
	float ErrorPerAngularDifference; // 0xC (4)
	float MaxRestoredStateError; // 0x10 (4)
	float MaxLinearHardSnapDistance; // 0x14 (4)
	float PositionLerp; // 0x18 (4)
	float AngleLerp; // 0x1C (4)
	float LinearVelocityCoefficient; // 0x20 (4)
	float AngularVelocityCoefficient; // 0x24 (4)
	float ErrorAccumulationSeconds; // 0x28 (4)
	float ErrorAccumulationDistanceSq; // 0x2C (4)
	float ErrorAccumulationSimilarity; // 0x30 (4)
};

// ScriptStruct Engine.DebugTextInfo
struct FDebugTextInfo {
	struct Unknown SrcActor; // 0x0 (8)
	struct Unknown SrcActorOffset; // 0x8 (12)
	struct Unknown SrcActorDesiredOffset; // 0x14 (12)
	struct FString DebugText; // 0x20 (16)
	float TimeRemaining; // 0x30 (4)
	float Duration; // 0x34 (4)
	struct Unknown TextColor; // 0x38 (4)
	char bAbsoluteLocation : 0; // 0x3C (1)
	char bKeepAttachedToActor : 0; // 0x3C (1)
	char bDrawShadow : 0; // 0x3C (1)
	struct Unknown OrigActorLocation; // 0x40 (12)
	struct Unknown Font; // 0x50 (8)
	float FontScale; // 0x58 (4)
};

// ScriptStruct Engine.MovementProperties
struct FMovementProperties {
	char bCanCrouch : 0; // 0x0 (1)
	char bCanJump : 0; // 0x0 (1)
	char bCanWalk : 0; // 0x0 (1)
	char bCanSwim : 0; // 0x0 (1)
	char bCanFly : 0; // 0x0 (1)
};

// ScriptStruct Engine.NavAgentProperties
struct FNavAgentProperties : FMovementProperties {
	float AgentRadius; // 0x4 (4)
	float AgentHeight; // 0x8 (4)
	float AgentStepHeight; // 0xC (4)
	float NavWalkingSearchHeightScale; // 0x10 (4)
	struct Unknown PreferredNavData; // 0x18 (24)
};

// ScriptStruct Engine.NavAvoidanceMask
struct FNavAvoidanceMask {
	char bGroup0 : 0; // 0x0 (1)
	char bGroup1 : 0; // 0x0 (1)
	char bGroup2 : 0; // 0x0 (1)
	char bGroup3 : 0; // 0x0 (1)
	char bGroup4 : 0; // 0x0 (1)
	char bGroup5 : 0; // 0x0 (1)
	char bGroup6 : 0; // 0x0 (1)
	char bGroup7 : 0; // 0x0 (1)
	char bGroup8 : 0; // 0x1 (1)
	char bGroup9 : 0; // 0x1 (1)
	char bGroup10 : 0; // 0x1 (1)
	char bGroup11 : 0; // 0x1 (1)
	char bGroup12 : 0; // 0x1 (1)
	char bGroup13 : 0; // 0x1 (1)
	char bGroup14 : 0; // 0x1 (1)
	char bGroup15 : 0; // 0x1 (1)
	char bGroup16 : 0; // 0x2 (1)
	char bGroup17 : 0; // 0x2 (1)
	char bGroup18 : 0; // 0x2 (1)
	char bGroup19 : 0; // 0x2 (1)
	char bGroup20 : 0; // 0x2 (1)
	char bGroup21 : 0; // 0x2 (1)
	char bGroup22 : 0; // 0x2 (1)
	char bGroup23 : 0; // 0x2 (1)
	char bGroup24 : 0; // 0x3 (1)
	char bGroup25 : 0; // 0x3 (1)
	char bGroup26 : 0; // 0x3 (1)
	char bGroup27 : 0; // 0x3 (1)
	char bGroup28 : 0; // 0x3 (1)
	char bGroup29 : 0; // 0x3 (1)
	char bGroup30 : 0; // 0x3 (1)
	char bGroup31 : 0; // 0x3 (1)
};

// ScriptStruct Engine.RuntimeFloatCurve
struct FRuntimeFloatCurve {
	struct Unknown EditorCurveData; // 0x0 (128)
	struct Unknown ExternalCurve; // 0x80 (8)
};

// ScriptStruct Engine.IndexedCurve
struct FIndexedCurve {
	struct Unknown KeyHandlesToIndices; // 0x8 (96)
};

// ScriptStruct Engine.RealCurve
struct FRealCurve : FIndexedCurve {
	float DefaultValue; // 0x68 (4)
	char PreInfinityExtrap; // 0x6C (1)
	char PostInfinityExtrap; // 0x6D (1)
};

// ScriptStruct Engine.RichCurve
struct FRichCurve : FRealCurve {
	struct TArray<Unknown> Keys; // 0x70 (16)
};

// ScriptStruct Engine.RichCurveKey
struct FRichCurveKey {
	char InterpMode; // 0x0 (1)
	char TangentMode; // 0x1 (1)
	char TangentWeightMode; // 0x2 (1)
	float Time; // 0x4 (4)
	float Value; // 0x8 (4)
	float ArriveTangent; // 0xC (4)
	float ArriveTangentWeight; // 0x10 (4)
	float LeaveTangent; // 0x14 (4)
	float LeaveTangentWeight; // 0x18 (4)
};

// ScriptStruct Engine.WalkableSlopeOverride
struct FWalkableSlopeOverride {
	char WalkableSlopeBehavior; // 0x0 (1)
	float WalkableSlopeAngle; // 0x4 (4)
};

// ScriptStruct Engine.BodyInstance
struct FBodyInstance {
	char ObjectType; // 0x6 (1)
	char CollisionEnabled; // 0x8 (1)
	enum class Unknow SleepFamily; // 0xA (1)
	char DOFMode; // 0xB (1)
	char bUseCCD : 0; // 0xD (1)
	char bIgnoreAnalyticCollisions : 0; // 0xD (1)
	char bNotifyRigidBodyCollision : 0; // 0xD (1)
	char bIgnoreCollisionsWithoutImpulse : 0; // 0xD (1)
	char bContactModification : 0; // 0xD (1)
	char bSimulatePhysics : 0; // 0xD (1)
	char bOverrideMass : 0; // 0xD (1)
	char bEnableGravity : 0; // 0xD (1)
	char bAutoWeld : 0; // 0xE (1)
	char bStartAwake : 0; // 0xE (1)
	char bGenerateWakeEvents : 0; // 0xE (1)
	char bUpdateMassWhenScaleChanges : 0; // 0xE (1)
	char bLockTranslation : 0; // 0xE (1)
	char bLockRotation : 0; // 0xE (1)
	char bLockXTranslation : 0; // 0xE (1)
	char bLockYTranslation : 0; // 0xE (1)
	char bLockZTranslation : 0; // 0xF (1)
	char bLockXRotation : 0; // 0xF (1)
	char bLockYRotation : 0; // 0xF (1)
	char bLockZRotation : 0; // 0xF (1)
	char bOverrideMaxAngularVelocity : 0; // 0xF (1)
	char bOverrideMaxDepenetrationVelocity : 0; // 0xF (1)
	char bOverrideWalkableSlopeOnInstance : 0; // 0x10 (1)
	char bInterpolateWhenSubStepping : 0; // 0x10 (1)
	struct FName CollisionProfileName; // 0x20 (8)
	char PositionSolverIterationCount; // 0x28 (1)
	char VelocitySolverIterationCount; // 0x29 (1)
	struct Unknown CollisionResponses; // 0x30 (48)
	float MaxDepenetrationVelocity; // 0x60 (4)
	float MassInKgOverride; // 0x64 (4)
	float LinearDamping; // 0x70 (4)
	float AngularDamping; // 0x74 (4)
	struct Unknown CustomDOFPlaneNormal; // 0x78 (12)
	struct Unknown COMNudge; // 0x84 (12)
	float MassScale; // 0x90 (4)
	struct Unknown InertiaTensorScale; // 0x94 (12)
	struct Unknown WalkableSlopeOverride; // 0xB0 (16)
	struct Unknown PhysMaterialOverride; // 0xC0 (8)
	float MaxAngularVelocity; // 0xC8 (4)
	float CustomSleepThresholdMultiplier; // 0xCC (4)
	float StabilizationThresholdMultiplier; // 0xD0 (4)
	float PhysicsBlendWeight; // 0xD4 (4)
};

// ScriptStruct Engine.CollisionResponse
struct FCollisionResponse {
	struct Unknown ResponseToChannels; // 0x0 (32)
	struct TArray<Unknown> ResponseArray; // 0x20 (16)
};

// ScriptStruct Engine.ResponseChannel
struct FResponseChannel {
	struct FName Channel; // 0x0 (8)
	char Response; // 0x8 (1)
};

// ScriptStruct Engine.CollisionResponseContainer
struct FCollisionResponseContainer {
	char WorldStatic; // 0x0 (1)
	char WorldDynamic; // 0x1 (1)
	char Pawn; // 0x2 (1)
	char Visibility; // 0x3 (1)
	char Camera; // 0x4 (1)
	char PhysicsBody; // 0x5 (1)
	char Vehicle; // 0x6 (1)
	char Destructible; // 0x7 (1)
	char EngineTraceChannel1; // 0x8 (1)
	char EngineTraceChannel2; // 0x9 (1)
	char EngineTraceChannel3; // 0xA (1)
	char EngineTraceChannel4; // 0xB (1)
	char EngineTraceChannel5; // 0xC (1)
	char EngineTraceChannel6; // 0xD (1)
	char GameTraceChannel1; // 0xE (1)
	char GameTraceChannel2; // 0xF (1)
	char GameTraceChannel3; // 0x10 (1)
	char GameTraceChannel4; // 0x11 (1)
	char GameTraceChannel5; // 0x12 (1)
	char GameTraceChannel6; // 0x13 (1)
	char GameTraceChannel7; // 0x14 (1)
	char GameTraceChannel8; // 0x15 (1)
	char GameTraceChannel9; // 0x16 (1)
	char GameTraceChannel10; // 0x17 (1)
	char GameTraceChannel11; // 0x18 (1)
	char GameTraceChannel12; // 0x19 (1)
	char GameTraceChannel13; // 0x1A (1)
	char GameTraceChannel14; // 0x1B (1)
	char GameTraceChannel15; // 0x1C (1)
	char GameTraceChannel16; // 0x1D (1)
	char GameTraceChannel17; // 0x1E (1)
	char GameTraceChannel18; // 0x1F (1)
};

// ScriptStruct Engine.CustomPrimitiveData
struct FCustomPrimitiveData {
	struct TArray<Unknown> Data; // 0x0 (16)
};

// ScriptStruct Engine.LightingChannels
struct FLightingChannels {
	char bChannel0 : 0; // 0x0 (1)
	char bChannel1 : 0; // 0x0 (1)
	char bChannel2 : 0; // 0x0 (1)
};

// ScriptStruct Engine.PoseLinkBase
struct FPoseLinkBase {
	int32_t LinkID; // 0x0 (4)
};

// ScriptStruct Engine.InputScaleBiasClamp
struct FInputScaleBiasClamp {
	char bMapRange : 0; // 0x0 (1)
	char bClampResult : 0; // 0x1 (1)
	char bInterpResult : 0; // 0x2 (1)
	struct Unknown InRange; // 0x4 (8)
	struct Unknown OutRange; // 0xC (8)
	float Scale; // 0x14 (4)
	float Bias; // 0x18 (4)
	float ClampMin; // 0x1C (4)
	float ClampMax; // 0x20 (4)
	float InterpSpeedIncreasing; // 0x24 (4)
	float InterpSpeedDecreasing; // 0x28 (4)
};

// ScriptStruct Engine.InputRange
struct FInputRange {
	float Min; // 0x0 (4)
	float MAX; // 0x4 (4)
};

// ScriptStruct Engine.InputAlphaBoolBlend
struct FInputAlphaBoolBlend {
	float BlendInTime; // 0x0 (4)
	float BlendOutTime; // 0x4 (4)
	enum class Unknow BlendOption; // 0x8 (1)
	char bInitialized : 0; // 0x9 (1)
	struct Unknown CustomCurve; // 0x10 (8)
	struct Unknown AlphaBlend; // 0x18 (48)
};

// ScriptStruct Engine.AlphaBlend
struct FAlphaBlend {
	struct Unknown CustomCurve; // 0x0 (8)
	float BlendTime; // 0x8 (4)
	enum class Unknow BlendOption; // 0x24 (1)
};

// ScriptStruct Engine.InputScaleBias
struct FInputScaleBias {
	float Scale; // 0x0 (4)
	float Bias; // 0x4 (4)
};

// ScriptStruct Engine.BoneReference
struct FBoneReference {
	struct FName BoneName; // 0x0 (8)
};

// ScriptStruct Engine.PerPlatformFloat
struct FPerPlatformFloat {
	float Default; // 0x0 (4)
};

// ScriptStruct Engine.PerPlatformInt
struct FPerPlatformInt {
	int32_t Default; // 0x0 (4)
};

// ScriptStruct Engine.PerPlatformBool
struct FPerPlatformBool {
	char Default : 0; // 0x0 (1)
};

// ScriptStruct Engine.DirectoryPath
struct FDirectoryPath {
	struct FString Path; // 0x0 (16)
};

// ScriptStruct Engine.AnimNode_AssetPlayerBase
struct FAnimNode_AssetPlayerBase : FAnimNode_Base {
	int32_t GroupIndex; // 0x10 (4)
	char GroupRole; // 0x14 (1)
	char bIgnoreForRelevancyTest : 0; // 0x15 (1)
	float BlendWeight; // 0x18 (4)
	float InternalTimeAccumulator; // 0x1C (4)
};

// ScriptStruct Engine.PerBoneBlendWeight
struct FPerBoneBlendWeight {
	int32_t SourceIndex; // 0x0 (4)
	float BlendWeight; // 0x4 (4)
};

// ScriptStruct Engine.InputBlendPose
struct FInputBlendPose {
	struct TArray<Unknown> BranchFilters; // 0x0 (16)
};

// ScriptStruct Engine.BranchFilter
struct FBranchFilter {
	struct FName BoneName; // 0x0 (8)
	int32_t BlendDepth; // 0x8 (4)
};

// ScriptStruct Engine.PoseSnapshot
struct FPoseSnapshot {
	struct TArray<Unknown> LocalTransforms; // 0x0 (16)
	struct TArray<Unknown> BoneNames; // 0x10 (16)
	struct FName SkeletalMeshName; // 0x20 (8)
	struct FName SnapshotName; // 0x28 (8)
	char bIsValid : 0; // 0x30 (1)
};

// ScriptStruct Engine.SolverIterations
struct FSolverIterations {
	int32_t SolverIterations; // 0x0 (4)
	int32_t JointIterations; // 0x4 (4)
	int32_t CollisionIterations; // 0x8 (4)
	int32_t SolverPushOutIterations; // 0xC (4)
	int32_t JointPushOutIterations; // 0x10 (4)
	int32_t CollisionPushOutIterations; // 0x14 (4)
};

// ScriptStruct Engine.AnimNode_Root
struct FAnimNode_Root : FAnimNode_Base {
	struct Unknown Result; // 0x10 (16)
	struct FName Name; // 0x20 (8)
	struct FName Group; // 0x28 (8)
};

// ScriptStruct Engine.AnimCurveParam
struct FAnimCurveParam {
	struct FName Name; // 0x0 (8)
};

// ScriptStruct Engine.ActorComponentInstanceData
struct FActorComponentInstanceData {
	struct Unknown SourceComponentTemplate; // 0x8 (8)
	enum class Unknow SourceComponentCreationMethod; // 0x10 (1)
	int32_t SourceComponentTypeSerializedIndex; // 0x14 (4)
	struct TArray<Unknown> SavedProperties; // 0x18 (16)
	struct TArray<Unknown> DuplicatedObjects; // 0x28 (16)
	struct TArray<Unknown> ReferencedObjects; // 0x38 (16)
	struct TArray<Unknown> ReferencedNames; // 0x48 (16)
};

// ScriptStruct Engine.SceneComponentInstanceData
struct FSceneComponentInstanceData : FActorComponentInstanceData {
	struct TMap<Unknown, Unknown> AttachedInstanceComponents; // 0x58 (80)
};

// ScriptStruct Engine.KAggregateGeom
struct FKAggregateGeom {
	struct TArray<Unknown> SphereElems; // 0x0 (16)
	struct TArray<Unknown> BoxElems; // 0x10 (16)
	struct TArray<Unknown> SphylElems; // 0x20 (16)
	struct TArray<Unknown> ConvexElems; // 0x30 (16)
	struct TArray<Unknown> TaperedCapsuleElems; // 0x40 (16)
};

// ScriptStruct Engine.KShapeElem
struct FKShapeElem {
	float RestOffset; // 0x8 (4)
	struct FName Name; // 0xC (8)
	char bContributeToMass : 0; // 0x18 (1)
};

// ScriptStruct Engine.KTaperedCapsuleElem
struct FKTaperedCapsuleElem : FKShapeElem {
	struct Unknown Center; // 0x30 (12)
	struct Unknown Rotation; // 0x3C (12)
	float Radius0; // 0x48 (4)
	float Radius1; // 0x4C (4)
	float Length; // 0x50 (4)
};

// ScriptStruct Engine.KConvexElem
struct FKConvexElem : FKShapeElem {
	struct TArray<Unknown> VertexData; // 0x30 (16)
	struct TArray<Unknown> IndexData; // 0x40 (16)
	struct Unknown ElemBox; // 0x50 (28)
	struct Unknown Transform; // 0x70 (48)
};

// ScriptStruct Engine.KSphylElem
struct FKSphylElem : FKShapeElem {
	struct Unknown Center; // 0x30 (12)
	struct Unknown Rotation; // 0x3C (12)
	float Radius; // 0x48 (4)
	float Length; // 0x4C (4)
};

// ScriptStruct Engine.KBoxElem
struct FKBoxElem : FKShapeElem {
	struct Unknown Center; // 0x30 (12)
	struct Unknown Rotation; // 0x3C (12)
	float X; // 0x48 (4)
	float Y; // 0x4C (4)
	float Z; // 0x50 (4)
};

// ScriptStruct Engine.KSphereElem
struct FKSphereElem : FKShapeElem {
	struct Unknown Center; // 0x30 (12)
	float Radius; // 0x3C (4)
};

// ScriptStruct Engine.AnimationGroupReference
struct FAnimationGroupReference {
	struct FName GroupName; // 0x0 (8)
	char GroupRole; // 0x8 (1)
};

// ScriptStruct Engine.AnimTickRecord
struct FAnimTickRecord {
	struct Unknown SourceAsset; // 0x0 (8)
};

// ScriptStruct Engine.MarkerSyncAnimPosition
struct FMarkerSyncAnimPosition {
	struct FName PreviousMarkerName; // 0x0 (8)
	struct FName NextMarkerName; // 0x8 (8)
	float PositionBetweenMarkers; // 0x10 (4)
};

// ScriptStruct Engine.BlendSampleData
struct FBlendSampleData {
	int32_t SampleDataIndex; // 0x0 (4)
	struct Unknown Animation; // 0x8 (8)
	float TotalWeight; // 0x10 (4)
	float Time; // 0x14 (4)
	float PreviousTime; // 0x18 (4)
	float SamplePlayRate; // 0x1C (4)
};

// ScriptStruct Engine.AnimationRecordingSettings
struct FAnimationRecordingSettings {
	char bRecordInWorldSpace : 0; // 0x0 (1)
	char bRemoveRootAnimation : 0; // 0x1 (1)
	char bAutoSaveAsset : 0; // 0x2 (1)
	float SampleRate; // 0x4 (4)
	float Length; // 0x8 (4)
	char InterpMode; // 0xC (1)
	char TangentMode; // 0xD (1)
};

// ScriptStruct Engine.ComponentSpacePose
struct FComponentSpacePose {
	struct TArray<Unknown> Transforms; // 0x0 (16)
	struct TArray<Unknown> Names; // 0x10 (16)
};

// ScriptStruct Engine.LocalSpacePose
struct FLocalSpacePose {
	struct TArray<Unknown> Transforms; // 0x0 (16)
	struct TArray<Unknown> Names; // 0x10 (16)
};

// ScriptStruct Engine.NamedTransform
struct FNamedTransform {
	struct Unknown Value; // 0x0 (48)
	struct FName Name; // 0x30 (8)
};

// ScriptStruct Engine.NamedColor
struct FNamedColor {
	struct Unknown Value; // 0x0 (4)
	struct FName Name; // 0x4 (8)
};

// ScriptStruct Engine.NamedVector
struct FNamedVector {
	struct Unknown Value; // 0x0 (12)
	struct FName Name; // 0xC (8)
};

// ScriptStruct Engine.NamedFloat
struct FNamedFloat {
	float Value; // 0x0 (4)
	struct FName Name; // 0x4 (8)
};

// ScriptStruct Engine.AnimParentNodeAssetOverride
struct FAnimParentNodeAssetOverride {
	struct Unknown NewAsset; // 0x0 (8)
	struct Unknown ParentNodeGuid; // 0x8 (16)
};

// ScriptStruct Engine.AnimGroupInfo
struct FAnimGroupInfo {
	struct FName Name; // 0x0 (8)
	struct Unknown Color; // 0x8 (16)
};

// ScriptStruct Engine.AnimBlueprintFunctionData
struct FAnimBlueprintFunctionData {
	struct TFieldPath<FUnknown> OutputPoseNodeProperty; // 0x0 (32)
	struct TArray<Unknown> InputPoseNodeProperties; // 0x20 (16)
	struct TArray<Unknown> InputProperties; // 0x30 (16)
};

// ScriptStruct Engine.AnimGraphBlendOptions
struct FAnimGraphBlendOptions {
	float BlendInTime; // 0x0 (4)
	float BlendOutTime; // 0x4 (4)
};

// ScriptStruct Engine.GraphAssetPlayerInformation
struct FGraphAssetPlayerInformation {
	struct TArray<Unknown> PlayerNodeIndices; // 0x0 (16)
};

// ScriptStruct Engine.CachedPoseIndices
struct FCachedPoseIndices {
	struct TArray<Unknown> OrderedSavedPoseNodeIndices; // 0x0 (16)
};

// ScriptStruct Engine.AnimBlueprintFunction
struct FAnimBlueprintFunction {
	struct FName Name; // 0x0 (8)
	struct FName Group; // 0x8 (8)
	int32_t OutputPoseNodeIndex; // 0x10 (4)
	struct TArray<Unknown> InputPoseNames; // 0x18 (16)
	struct TArray<Unknown> InputPoseNodeIndices; // 0x28 (16)
	char bImplemented : 0; // 0x60 (1)
};

// ScriptStruct Engine.AnimTrack
struct FAnimTrack {
	struct TArray<Unknown> AnimSegments; // 0x0 (16)
};

// ScriptStruct Engine.AnimSegment
struct FAnimSegment {
	struct Unknown AnimReference; // 0x0 (8)
	float StartPos; // 0x8 (4)
	float AnimStartTime; // 0xC (4)
	float AnimEndTime; // 0x10 (4)
	float AnimPlayRate; // 0x14 (4)
	int32_t LoopingCount; // 0x18 (4)
};

// ScriptStruct Engine.RootMotionExtractionStep
struct FRootMotionExtractionStep {
	struct Unknown AnimSequence; // 0x0 (8)
	float StartPosition; // 0x8 (4)
	float EndPosition; // 0xC (4)
};

// ScriptStruct Engine.RawCurveTracks
struct FRawCurveTracks {
	struct TArray<Unknown> FloatCurves; // 0x0 (16)
};

// ScriptStruct Engine.AnimCurveBase
struct FAnimCurveBase {
	struct FName LastObservedName; // 0x0 (8)
	struct Unknown Name; // 0x8 (12)
	int32_t CurveTypeFlags; // 0x14 (4)
};

// ScriptStruct Engine.SmartName
struct FSmartName {
	struct FName DisplayName; // 0x0 (8)
};

// ScriptStruct Engine.FloatCurve
struct FFloatCurve : FAnimCurveBase {
	struct Unknown FloatCurve; // 0x18 (128)
};

// ScriptStruct Engine.TransformCurve
struct FTransformCurve : FAnimCurveBase {
	struct Unknown TranslationCurve; // 0x18 (408)
	struct Unknown RotationCurve; // 0x1B0 (408)
	struct Unknown ScaleCurve; // 0x348 (408)
};

// ScriptStruct Engine.VectorCurve
struct FVectorCurve : FAnimCurveBase {
	struct Unknown FloatCurves[0x3]; // 0x18 (384)
};

// ScriptStruct Engine.SlotEvaluationPose
struct FSlotEvaluationPose {
	char AdditiveType; // 0x0 (1)
	float Weight; // 0x4 (4)
};

// ScriptStruct Engine.A2Pose
struct FA2Pose {
	struct TArray<Unknown> Bones; // 0x0 (16)
};

// ScriptStruct Engine.A2CSPose
struct FA2CSPose : FA2Pose {
	struct TArray<Unknown> ComponentSpaceFlags; // 0x18 (16)
};

// ScriptStruct Engine.QueuedDrawDebugItem
struct FQueuedDrawDebugItem {
	char ItemType; // 0x0 (1)
	struct Unknown StartLoc; // 0x4 (12)
	struct Unknown EndLoc; // 0x10 (12)
	struct Unknown Center; // 0x1C (12)
	struct Unknown Rotation; // 0x28 (12)
	float Radius; // 0x34 (4)
	float Size; // 0x38 (4)
	int32_t Segments; // 0x3C (4)
	struct Unknown Color; // 0x40 (4)
	char bPersistentLines : 0; // 0x44 (1)
	float LifeTime; // 0x48 (4)
	float Thickness; // 0x4C (4)
	struct FString Message; // 0x50 (16)
	struct Unknown TextScale; // 0x60 (8)
};

// ScriptStruct Engine.AnimLinkableElement
struct FAnimLinkableElement {
	struct Unknown LinkedMontage; // 0x8 (8)
	int32_t SlotIndex; // 0x10 (4)
	int32_t SegmentIndex; // 0x14 (4)
	char LinkMethod; // 0x18 (1)
	char CachedLinkMethod; // 0x19 (1)
	float SegmentBeginTime; // 0x1C (4)
	float SegmentLength; // 0x20 (4)
	float LinkValue; // 0x24 (4)
	struct Unknown LinkedSequence; // 0x28 (8)
};

// ScriptStruct Engine.AnimMontageInstance
struct FAnimMontageInstance {
	struct Unknown Montage; // 0x0 (8)
	char bPlaying : 0; // 0x28 (1)
	float DefaultBlendTimeMultiplier; // 0x2C (4)
	struct TArray<Unknown> NextSections; // 0xE8 (16)
	struct TArray<Unknown> PrevSections; // 0xF8 (16)
	struct TArray<Unknown> ActiveStateBranchingPoints; // 0x118 (16)
	float Position; // 0x128 (4)
	float PlayRate; // 0x12C (4)
	struct Unknown Blend; // 0x130 (48)
	int32_t DisableRootMotionCount; // 0x188 (4)
};

// ScriptStruct Engine.AnimNotifyEvent
struct FAnimNotifyEvent : FAnimLinkableElement {
	float DisplayTime; // 0x30 (4)
	float TriggerTimeOffset; // 0x34 (4)
	float EndTriggerTimeOffset; // 0x38 (4)
	float TriggerWeightThreshold; // 0x3C (4)
	struct FName NotifyName; // 0x40 (8)
	struct Unknown notify; // 0x48 (8)
	struct Unknown NotifyStateClass; // 0x50 (8)
	float Duration; // 0x58 (4)
	struct Unknown EndLink; // 0x60 (48)
	char bConvertedFromBranchingPoint : 0; // 0x90 (1)
	char MontageTickType; // 0x91 (1)
	float NotifyTriggerChance; // 0x94 (4)
	char NotifyFilterType; // 0x98 (1)
	int32_t NotifyFilterLOD; // 0x9C (4)
	char bTriggerOnDedicatedServer : 0; // 0xA0 (1)
	char bTriggerOnFollower : 0; // 0xA1 (1)
	int32_t TrackIndex; // 0xA4 (4)
};

// ScriptStruct Engine.BranchingPointMarker
struct FBranchingPointMarker {
	int32_t NotifyIndex; // 0x0 (4)
	float TriggerTime; // 0x4 (4)
	char NotifyEventType; // 0x8 (1)
};

// ScriptStruct Engine.BranchingPoint
struct FBranchingPoint : FAnimLinkableElement {
	struct FName EventName; // 0x30 (8)
	float DisplayTime; // 0x38 (4)
	float TriggerTimeOffset; // 0x3C (4)
};

// ScriptStruct Engine.SlotAnimationTrack
struct FSlotAnimationTrack {
	struct FName SlotName; // 0x0 (8)
	struct Unknown AnimTrack; // 0x8 (16)
};

// ScriptStruct Engine.CompositeSection
struct FCompositeSection : FAnimLinkableElement {
	struct FName SectionName; // 0x30 (8)
	float StartTime; // 0x38 (4)
	struct FName NextSectionName; // 0x3C (8)
	struct TArray<Unknown> MetaData; // 0x48 (16)
};

// ScriptStruct Engine.AnimNode_ApplyMeshSpaceAdditive
struct FAnimNode_ApplyMeshSpaceAdditive : FAnimNode_Base {
	struct Unknown Base; // 0x10 (16)
	struct Unknown Additive; // 0x20 (16)
	enum class Unknow AlphaInputType; // 0x30 (1)
	float ALPHA; // 0x34 (4)
	char bAlphaBoolEnabled : 0; // 0x38 (1)
	struct Unknown AlphaBoolBlend; // 0x40 (72)
	struct FName AlphaCurveName; // 0x88 (8)
	struct Unknown AlphaScaleBias; // 0x90 (8)
	struct Unknown AlphaScaleBiasClamp; // 0x98 (48)
	int32_t LODThreshold; // 0xC8 (4)
};

// ScriptStruct Engine.AnimNode_CustomProperty
struct FAnimNode_CustomProperty : FAnimNode_Base {
	struct TArray<Unknown> SourcePropertyNames; // 0x10 (16)
	struct TArray<Unknown> DestPropertyNames; // 0x20 (16)
	struct Unknown TargetInstance; // 0x30 (8)
};

// ScriptStruct Engine.AnimNode_Inertialization
struct FAnimNode_Inertialization : FAnimNode_Base {
	struct Unknown Source; // 0x10 (16)
};

// ScriptStruct Engine.AnimNode_LinkedAnimGraph
struct FAnimNode_LinkedAnimGraph : FAnimNode_CustomProperty {
	struct TArray<Unknown> InputPoses; // 0x58 (16)
	struct TArray<Unknown> InputPoseNames; // 0x68 (16)
	struct Unknown* InstanceClass; // 0x78 (8)
	struct FName Tag; // 0x80 (8)
	char bReceiveNotifiesFromLinkedInstances : 0; // 0x98 (1)
	char bPropagateNotifiesToLinkedInstances : 0; // 0x98 (1)
};

// ScriptStruct Engine.AnimNode_LinkedAnimLayer
struct FAnimNode_LinkedAnimLayer : FAnimNode_LinkedAnimGraph {
	struct Unknown* Interface; // 0xA0 (8)
	struct FName Layer; // 0xA8 (8)
};

// ScriptStruct Engine.AnimNode_LinkedInputPose
struct FAnimNode_LinkedInputPose : FAnimNode_Base {
	struct FName Name; // 0x10 (8)
	struct FName Graph; // 0x18 (8)
	struct Unknown InputPose; // 0x20 (16)
};

// ScriptStruct Engine.AnimNode_SaveCachedPose
struct FAnimNode_SaveCachedPose : FAnimNode_Base {
	struct Unknown pose; // 0x10 (16)
	struct FName CachePoseName; // 0x20 (8)
};

// ScriptStruct Engine.AnimNode_SequencePlayer
struct FAnimNode_SequencePlayer : FAnimNode_AssetPlayerBase {
	struct Unknown Sequence; // 0x30 (8)
	float PlayRateBasis; // 0x38 (4)
	float PlayRate; // 0x3C (4)
	struct Unknown PlayRateScaleBiasClamp; // 0x40 (48)
	float StartPosition; // 0x70 (4)
	char bLoopAnimation : 0; // 0x74 (1)
};

// ScriptStruct Engine.AnimNode_StateMachine
struct FAnimNode_StateMachine : FAnimNode_Base {
	int32_t StateMachineIndexInClass; // 0x10 (4)
	int32_t MaxTransitionsPerFrame; // 0x14 (4)
	char bSkipFirstUpdateTransition : 0; // 0x18 (1)
	char bReinitializeOnBecomingRelevant : 0; // 0x19 (1)
};

// ScriptStruct Engine.AnimationActiveTransitionEntry
struct FAnimationActiveTransitionEntry {
	struct Unknown BlendProfile; // 0xB8 (8)
};

// ScriptStruct Engine.AnimNode_TransitionPoseEvaluator
struct FAnimNode_TransitionPoseEvaluator : FAnimNode_Base {
	int32_t FramesToCachePose; // 0x48 (4)
	char DataSource; // 0x50 (1)
	char EvaluatorMode; // 0x51 (1)
};

// ScriptStruct Engine.AnimNode_TransitionResult
struct FAnimNode_TransitionResult : FAnimNode_Base {
	char bCanEnterTransition : 0; // 0x10 (1)
};

// ScriptStruct Engine.AnimNode_UseCachedPose
struct FAnimNode_UseCachedPose : FAnimNode_Base {
	struct Unknown LinkToCachingNode; // 0x10 (16)
	struct FName CachePoseName; // 0x20 (8)
};

// ScriptStruct Engine.ExposedValueHandler
struct FExposedValueHandler {
	struct FName BoundFunction; // 0x0 (8)
	struct TArray<Unknown> CopyRecords; // 0x8 (16)
	struct Unknown Function; // 0x18 (8)
	struct TFieldPath<FUnknown> ValueHandlerNodeProperty; // 0x20 (32)
};

// ScriptStruct Engine.ExposedValueCopyRecord
struct FExposedValueCopyRecord {
	struct FName SourcePropertyName; // 0x0 (8)
	struct FName SourceSubPropertyName; // 0x8 (8)
	int32_t SourceArrayIndex; // 0x10 (4)
	char bInstanceIsTarget : 0; // 0x14 (1)
	enum class Unknow PostCopyOperation; // 0x15 (1)
	enum class Unknow CopyType; // 0x16 (1)
	struct TFieldPath<FUnknown> DestProperty; // 0x18 (32)
	int32_t DestArrayIndex; // 0x38 (4)
	int32_t Size; // 0x3C (4)
	struct TFieldPath<FUnknown> CachedSourceProperty; // 0x40 (32)
	struct TFieldPath<FUnknown> CachedSourceStructSubProperty; // 0x60 (32)
};

// ScriptStruct Engine.AnimNode_ConvertLocalToComponentSpace
struct FAnimNode_ConvertLocalToComponentSpace : FAnimNode_Base {
	struct Unknown LocalPose; // 0x10 (16)
};

// ScriptStruct Engine.AnimNode_ConvertComponentToLocalSpace
struct FAnimNode_ConvertComponentToLocalSpace : FAnimNode_Base {
	struct Unknown ComponentPose; // 0x10 (16)
};

// ScriptStruct Engine.AnimNotifyQueue
struct FAnimNotifyQueue {
	struct TArray<Unknown> AnimNotifies; // 0x10 (16)
	struct TMap<Unknown, Unknown> UnfilteredMontageAnimNotifies; // 0x20 (80)
};

// ScriptStruct Engine.AnimNotifyArray
struct FAnimNotifyArray {
	struct TArray<Unknown> Notifies; // 0x0 (16)
};

// ScriptStruct Engine.AnimNotifyEventReference
struct FAnimNotifyEventReference {
	struct Unknown NotifySource; // 0x8 (8)
};

// ScriptStruct Engine.CompressedTrack
struct FCompressedTrack {
	struct TArray<Unknown> ByteStream; // 0x0 (16)
	struct TArray<Unknown> Times; // 0x10 (16)
	float Mins[0x3]; // 0x20 (12)
	float Ranges[0x3]; // 0x2C (12)
};

// ScriptStruct Engine.CurveTrack
struct FCurveTrack {
	struct FName CurveName; // 0x0 (8)
	struct TArray<Unknown> CurveWeights; // 0x8 (16)
};

// ScriptStruct Engine.ScaleTrack
struct FScaleTrack {
	struct TArray<Unknown> ScaleKeys; // 0x0 (16)
	struct TArray<Unknown> Times; // 0x10 (16)
};

// ScriptStruct Engine.RotationTrack
struct FRotationTrack {
	struct TArray<Unknown> RotKeys; // 0x0 (16)
	struct TArray<Unknown> Times; // 0x10 (16)
};

// ScriptStruct Engine.TranslationTrack
struct FTranslationTrack {
	struct TArray<Unknown> PosKeys; // 0x0 (16)
	struct TArray<Unknown> Times; // 0x10 (16)
};

// ScriptStruct Engine.AnimSequenceTrackContainer
struct FAnimSequenceTrackContainer {
	struct TArray<Unknown> AnimationTracks; // 0x0 (16)
	struct TArray<Unknown> TrackNames; // 0x10 (16)
};

// ScriptStruct Engine.RawAnimSequenceTrack
struct FRawAnimSequenceTrack {
	struct TArray<Unknown> PosKeys; // 0x0 (16)
	struct TArray<Unknown> RotKeys; // 0x10 (16)
	struct TArray<Unknown> ScaleKeys; // 0x20 (16)
};

// ScriptStruct Engine.AnimSetMeshLinkup
struct FAnimSetMeshLinkup {
	struct TArray<Unknown> BoneToTrackTable; // 0x0 (16)
};

// ScriptStruct Engine.AnimNode_SingleNode
struct FAnimNode_SingleNode : FAnimNode_Base {
	struct Unknown SourcePose; // 0x10 (16)
};

// ScriptStruct Engine.BakedAnimationStateMachine
struct FBakedAnimationStateMachine {
	struct FName MachineName; // 0x0 (8)
	int32_t InitialState; // 0x8 (4)
	struct TArray<Unknown> States; // 0x10 (16)
	struct TArray<Unknown> Transitions; // 0x20 (16)
};

// ScriptStruct Engine.AnimationStateBase
struct FAnimationStateBase {
	struct FName StateName; // 0x0 (8)
};

// ScriptStruct Engine.AnimationTransitionBetweenStates
struct FAnimationTransitionBetweenStates : FAnimationStateBase {
	int32_t PreviousState; // 0x8 (4)
	int32_t NextState; // 0xC (4)
	float CrossfadeDuration; // 0x10 (4)
	int32_t StartNotify; // 0x14 (4)
	int32_t EndNotify; // 0x18 (4)
	int32_t InterruptNotify; // 0x1C (4)
	enum class Unknow BlendMode; // 0x20 (1)
	struct Unknown CustomCurve; // 0x28 (8)
	struct Unknown BlendProfile; // 0x30 (8)
	char LogicType; // 0x38 (1)
};

// ScriptStruct Engine.BakedAnimationState
struct FBakedAnimationState {
	struct FName StateName; // 0x0 (8)
	struct TArray<Unknown> Transitions; // 0x8 (16)
	int32_t StateRootNodeIndex; // 0x18 (4)
	int32_t StartNotify; // 0x1C (4)
	int32_t EndNotify; // 0x20 (4)
	int32_t FullyBlendedNotify; // 0x24 (4)
	char bIsAConduit : 0; // 0x28 (1)
	int32_t EntryRuleNodeIndex; // 0x2C (4)
	struct TArray<Unknown> PlayerNodeIndices; // 0x30 (16)
	struct TArray<Unknown> LayerNodeIndices; // 0x40 (16)
	char bAlwaysResetOnEntry : 0; // 0x50 (1)
};

// ScriptStruct Engine.BakedStateExitTransition
struct FBakedStateExitTransition {
	int32_t CanTakeDelegateIndex; // 0x0 (4)
	int32_t CustomResultNodeIndex; // 0x4 (4)
	int32_t TransitionIndex; // 0x8 (4)
	char bDesiredTransitionReturnValue : 0; // 0xC (1)
	char bAutomaticRemainingTimeRule : 0; // 0xD (1)
	struct TArray<Unknown> PoseEvaluatorLinks; // 0x10 (16)
};

// ScriptStruct Engine.AnimationState
struct FAnimationState : FAnimationStateBase {
	struct TArray<Unknown> Transitions; // 0x8 (16)
	int32_t StateRootNodeIndex; // 0x18 (4)
	int32_t StartNotify; // 0x1C (4)
	int32_t EndNotify; // 0x20 (4)
	int32_t FullyBlendedNotify; // 0x24 (4)
};

// ScriptStruct Engine.AnimationTransitionRule
struct FAnimationTransitionRule {
	struct FName RuleToExecute; // 0x0 (8)
	char TransitionReturnVal : 0; // 0x8 (1)
	int32_t TransitionIndex; // 0xC (4)
};

// ScriptStruct Engine.TrackToSkeletonMap
struct FTrackToSkeletonMap {
	int32_t BoneTreeIndex; // 0x0 (4)
};

// ScriptStruct Engine.MarkerSyncData
struct FMarkerSyncData {
	struct TArray<Unknown> AuthoredSyncMarkers; // 0x0 (16)
};

// ScriptStruct Engine.AnimSyncMarker
struct FAnimSyncMarker {
	struct FName MarkerName; // 0x0 (8)
	float Time; // 0x8 (4)
};

// ScriptStruct Engine.AnimNotifyTrack
struct FAnimNotifyTrack {
	struct FName TrackName; // 0x0 (8)
	struct Unknown TrackColor; // 0x8 (16)
};

// ScriptStruct Engine.PerBoneBlendWeights
struct FPerBoneBlendWeights {
	struct TArray<Unknown> BoneBlendWeights; // 0x0 (16)
};

// ScriptStruct Engine.PrimaryAssetRulesCustomOverride
struct FPrimaryAssetRulesCustomOverride {
	struct Unknown PrimaryAssetType; // 0x0 (8)
	struct Unknown FilterDirectory; // 0x8 (16)
	struct FString FilterString; // 0x18 (16)
	struct Unknown Rules; // 0x28 (12)
};

// ScriptStruct Engine.PrimaryAssetRules
struct FPrimaryAssetRules {
	int32_t Priority; // 0x0 (4)
	int32_t ChunkId; // 0x4 (4)
	char bApplyRecursively : 0; // 0x8 (1)
	enum class Unknow CookRule; // 0x9 (1)
};

// ScriptStruct Engine.PrimaryAssetRulesOverride
struct FPrimaryAssetRulesOverride {
	struct Unknown PrimaryAssetId; // 0x0 (16)
	struct Unknown Rules; // 0x10 (12)
};

// ScriptStruct Engine.AssetManagerRedirect
struct FAssetManagerRedirect {
	struct FString Old; // 0x0 (16)
	struct FString New; // 0x10 (16)
};

// ScriptStruct Engine.PrimaryAssetTypeInfo
struct FPrimaryAssetTypeInfo {
	struct FName PrimaryAssetType; // 0x0 (8)
	struct TSoftClassPtr<UObject> AssetBaseClass; // 0x8 (40)
	struct Unknown* AssetBaseClassLoaded; // 0x30 (8)
	char bHasBlueprintClasses : 0; // 0x38 (1)
	char bIsEditorOnly : 0; // 0x39 (1)
	struct TArray<Unknown> Directories; // 0x40 (16)
	struct TArray<Unknown> SpecificAssets; // 0x50 (16)
	struct Unknown Rules; // 0x60 (12)
	struct TArray<Unknown> AssetScanPaths; // 0x70 (16)
	char bIsDynamicAsset : 0; // 0x80 (1)
	int32_t NumberOfAssets; // 0x84 (4)
};

// ScriptStruct Engine.AssetMapping
struct FAssetMapping {
	struct Unknown SourceAsset; // 0x0 (8)
	struct Unknown TargetAsset; // 0x8 (8)
};

// ScriptStruct Engine.AtmospherePrecomputeParameters
struct FAtmospherePrecomputeParameters {
	float DensityHeight; // 0x0 (4)
	float DecayHeight; // 0x4 (4)
	int32_t MaxScatteringOrder; // 0x8 (4)
	int32_t TransmittanceTexWidth; // 0xC (4)
	int32_t TransmittanceTexHeight; // 0x10 (4)
	int32_t IrradianceTexWidth; // 0x14 (4)
	int32_t IrradianceTexHeight; // 0x18 (4)
	int32_t InscatterAltitudeSampleNum; // 0x1C (4)
	int32_t InscatterMuNum; // 0x20 (4)
	int32_t InscatterMuSNum; // 0x24 (4)
	int32_t InscatterNuNum; // 0x28 (4)
};

// ScriptStruct Engine.BaseAttenuationSettings
struct FBaseAttenuationSettings {
	enum class Unknow DistanceAlgorithm; // 0x8 (1)
	char AttenuationShape; // 0x9 (1)
	float dBAttenuationAtMax; // 0xC (4)
	enum class Unknow FalloffMode; // 0x10 (1)
	struct Unknown AttenuationShapeExtents; // 0x14 (12)
	float ConeOffset; // 0x20 (4)
	float FalloffDistance; // 0x24 (4)
	struct Unknown CustomAttenuationCurve; // 0x28 (136)
};

// ScriptStruct Engine.AudioComponentParam
struct FAudioComponentParam {
	struct FName ParamName; // 0x0 (8)
	float FloatParam; // 0x8 (4)
	char BoolParam : 0; // 0xC (1)
	int32_t IntParam; // 0x10 (4)
	struct Unknown SoundWaveParam; // 0x18 (8)
};

// ScriptStruct Engine.AudioQualitySettings
struct FAudioQualitySettings {
	struct FText DisplayName; // 0x0 (24)
	int32_t MaxChannels; // 0x18 (4)
};

// ScriptStruct Engine.InteriorSettings
struct FInteriorSettings {
	char bIsWorldSettings : 0; // 0x0 (1)
	float ExteriorVolume; // 0x4 (4)
	float ExteriorTime; // 0x8 (4)
	float ExteriorLPF; // 0xC (4)
	float ExteriorLPFTime; // 0x10 (4)
	float InteriorVolume; // 0x14 (4)
	float InteriorTime; // 0x18 (4)
	float InteriorLPF; // 0x1C (4)
	float InteriorLPFTime; // 0x20 (4)
};

// ScriptStruct Engine.LaunchOnTestSettings
struct FLaunchOnTestSettings {
	struct Unknown LaunchOnTestmap; // 0x0 (16)
	struct FString DeviceID; // 0x10 (16)
};

// ScriptStruct Engine.FilePath
struct FFilePath {
	struct FString FilePath; // 0x0 (16)
};

// ScriptStruct Engine.EditorMapPerformanceTestDefinition
struct FEditorMapPerformanceTestDefinition {
	struct Unknown PerformanceTestmap; // 0x0 (24)
	int32_t TestTimer; // 0x18 (4)
};

// ScriptStruct Engine.BuildPromotionTestSettings
struct FBuildPromotionTestSettings {
	struct Unknown DefaultStaticMeshAsset; // 0x0 (16)
	struct Unknown ImportWorkflow; // 0x10 (336)
	struct Unknown OpenAssets; // 0x160 (96)
	struct Unknown NewProjectSettings; // 0x1C0 (32)
	struct Unknown SourceControlMaterial; // 0x1E0 (16)
};

// ScriptStruct Engine.BuildPromotionNewProjectSettings
struct FBuildPromotionNewProjectSettings {
	struct Unknown NewProjectFolderOverride; // 0x0 (16)
	struct FString NewProjectNameOverride; // 0x10 (16)
};

// ScriptStruct Engine.BuildPromotionOpenAssetSettings
struct FBuildPromotionOpenAssetSettings {
	struct Unknown BlueprintAsset; // 0x0 (16)
	struct Unknown MaterialAsset; // 0x10 (16)
	struct Unknown ParticleSystemAsset; // 0x20 (16)
	struct Unknown SkeletalMeshAsset; // 0x30 (16)
	struct Unknown StaticMeshAsset; // 0x40 (16)
	struct Unknown TextureAsset; // 0x50 (16)
};

// ScriptStruct Engine.BuildPromotionImportWorkflowSettings
struct FBuildPromotionImportWorkflowSettings {
	struct Unknown Diffuse; // 0x0 (32)
	struct Unknown Normal; // 0x20 (32)
	struct Unknown StaticMesh; // 0x40 (32)
	struct Unknown ReimportStaticMesh; // 0x60 (32)
	struct Unknown BlendShapeMesh; // 0x80 (32)
	struct Unknown MorphMesh; // 0xA0 (32)
	struct Unknown SkeletalMesh; // 0xC0 (32)
	struct Unknown Animation; // 0xE0 (32)
	struct Unknown Sound; // 0x100 (32)
	struct Unknown SurroundSound; // 0x120 (32)
	struct TArray<Unknown> OtherAssetsToImport; // 0x140 (16)
};

// ScriptStruct Engine.EditorImportWorkflowDefinition
struct FEditorImportWorkflowDefinition {
	struct Unknown ImportFilePath; // 0x0 (16)
	struct TArray<Unknown> FactorySettings; // 0x10 (16)
};

// ScriptStruct Engine.ImportFactorySettingValues
struct FImportFactorySettingValues {
	struct FString SettingName; // 0x0 (16)
	struct FString Value; // 0x10 (16)
};

// ScriptStruct Engine.BlueprintEditorPromotionSettings
struct FBlueprintEditorPromotionSettings {
	struct Unknown FirstMeshPath; // 0x0 (16)
	struct Unknown SecondMeshPath; // 0x10 (16)
	struct Unknown DefaultParticleAsset; // 0x20 (16)
};

// ScriptStruct Engine.ParticleEditorPromotionSettings
struct FParticleEditorPromotionSettings {
	struct Unknown DefaultParticleAsset; // 0x0 (16)
};

// ScriptStruct Engine.MaterialEditorPromotionSettings
struct FMaterialEditorPromotionSettings {
	struct Unknown DefaultMaterialAsset; // 0x0 (16)
	struct Unknown DefaultDiffuseTexture; // 0x10 (16)
	struct Unknown DefaultNormalTexture; // 0x20 (16)
};

// ScriptStruct Engine.EditorImportExportTestDefinition
struct FEditorImportExportTestDefinition {
	struct Unknown ImportFilePath; // 0x0 (16)
	struct FString ExportFileExtension; // 0x10 (16)
	char bSkipExport : 0; // 0x20 (1)
	struct TArray<Unknown> FactorySettings; // 0x28 (16)
};

// ScriptStruct Engine.ExternalToolDefinition
struct FExternalToolDefinition {
	struct FString ToolName; // 0x0 (16)
	struct Unknown ExecutablePath; // 0x10 (16)
	struct FString CommandLineOptions; // 0x20 (16)
	struct Unknown WorkingDirectory; // 0x30 (16)
	struct FString ScriptExtension; // 0x40 (16)
	struct Unknown ScriptDirectory; // 0x50 (16)
};

// ScriptStruct Engine.BandwidthTestGenerator
struct FBandwidthTestGenerator {
	struct TArray<Unknown> ReplicatedBuffers; // 0x0 (16)
};

// ScriptStruct Engine.BandwidthTestItem
struct FBandwidthTestItem {
	struct TArray<Unknown> Kilobyte; // 0x0 (16)
};

// ScriptStruct Engine.BlendProfileBoneEntry
struct FBlendProfileBoneEntry {
	struct Unknown BoneReference; // 0x0 (16)
	float BlendScale; // 0x10 (4)
};

// ScriptStruct Engine.PerBoneInterpolation
struct FPerBoneInterpolation {
	struct Unknown BoneReference; // 0x0 (16)
	float InterpolationSpeedPerSec; // 0x10 (4)
};

// ScriptStruct Engine.GridBlendSample
struct FGridBlendSample {
	struct Unknown GridElement; // 0x0 (24)
	float BlendWeight; // 0x18 (4)
};

// ScriptStruct Engine.EditorElement
struct FEditorElement {
	int32_t Indices[0x3]; // 0x0 (12)
	float Weights[0x3]; // 0xC (12)
};

// ScriptStruct Engine.BlendSample
struct FBlendSample {
	struct Unknown Animation; // 0x0 (8)
	struct Unknown SampleValue; // 0x8 (12)
	float RateScale; // 0x14 (4)
};

// ScriptStruct Engine.BlendParameter
struct FBlendParameter {
	struct FString DisplayName; // 0x0 (16)
	float Min; // 0x10 (4)
	float MAX; // 0x14 (4)
	int32_t GridNum; // 0x18 (4)
};

// ScriptStruct Engine.InterpolationParameter
struct FInterpolationParameter {
	float InterpolationTime; // 0x0 (4)
	char InterpolationType; // 0x4 (1)
};

// ScriptStruct Engine.BPEditorBookmarkNode
struct FBPEditorBookmarkNode {
	struct Unknown NodeGuid; // 0x0 (16)
	struct Unknown ParentGuid; // 0x10 (16)
	struct FText DisplayName; // 0x20 (24)
};

// ScriptStruct Engine.EditedDocumentInfo
struct FEditedDocumentInfo {
	struct Unknown EditedObjectPath; // 0x0 (24)
	struct Unknown SavedViewOffset; // 0x18 (8)
	float SavedZoomAmount; // 0x20 (4)
	struct Unknown EditedObject; // 0x28 (8)
};

// ScriptStruct Engine.BPInterfaceDescription
struct FBPInterfaceDescription {
	struct Unknown* Interface; // 0x0 (8)
	struct TArray<Unknown> Graphs; // 0x8 (16)
};

// ScriptStruct Engine.BPVariableDescription
struct FBPVariableDescription {
	struct FName VarName; // 0x0 (8)
	struct Unknown VarGuid; // 0x8 (16)
	struct Unknown VarType; // 0x18 (88)
	struct FString FriendlyName; // 0x70 (16)
	struct FText Category; // 0x80 (24)
	uint64_t PropertyFlags; // 0x98 (8)
	struct FName RepNotifyFunc; // 0xA0 (8)
	char ReplicationCondition; // 0xA8 (1)
	struct TArray<Unknown> MetaDataArray; // 0xB0 (16)
	struct FString DefaultValue; // 0xC0 (16)
};

// ScriptStruct Engine.BPVariableMetaDataEntry
struct FBPVariableMetaDataEntry {
	struct FName DataKey; // 0x0 (8)
	struct FString DataValue; // 0x8 (16)
};

// ScriptStruct Engine.EdGraphPinType
struct FEdGraphPinType {
	struct FName PinCategory; // 0x0 (8)
	struct FName PinSubCategory; // 0x8 (8)
	struct TWeakObjectPtr<struct Unknown> PinSubCategoryObject; // 0x10 (8)
	struct Unknown PinSubCategoryMemberReference; // 0x18 (32)
	struct Unknown PinValueType; // 0x38 (28)
	enum class Unknow ContainerType; // 0x54 (1)
	char bIsArray : 0; // 0x55 (1)
	char bIsReference : 0; // 0x55 (1)
	char bIsConst : 0; // 0x55 (1)
	char bIsWeakPointer : 0; // 0x55 (1)
};

// ScriptStruct Engine.EdGraphTerminalType
struct FEdGraphTerminalType {
	struct FName TerminalCategory; // 0x0 (8)
	struct FName TerminalSubCategory; // 0x8 (8)
	struct TWeakObjectPtr<struct Unknown> TerminalSubCategoryObject; // 0x10 (8)
	char bTerminalIsConst : 0; // 0x18 (1)
	char bTerminalIsWeakPointer : 0; // 0x19 (1)
};

// ScriptStruct Engine.CompilerNativizationOptions
struct FCompilerNativizationOptions {
	struct FName PlatformName; // 0x0 (8)
	char ServerOnlyPlatform : 0; // 0x8 (1)
	char ClientOnlyPlatform : 0; // 0x9 (1)
	char bExcludeMonolithicHeaders : 0; // 0xA (1)
	struct TArray<Unknown> ExcludedModules; // 0x10 (16)
	struct TSet<Unknown> ExcludedAssets; // 0x20 (80)
	struct TArray<Unknown> ExcludedFolderPaths; // 0x70 (16)
};

// ScriptStruct Engine.BPComponentClassOverride
struct FBPComponentClassOverride {
	struct FName ComponentName; // 0x0 (8)
	struct Unknown* ComponentClass; // 0x8 (8)
};

// ScriptStruct Engine.BlueprintCookedComponentInstancingData
struct FBlueprintCookedComponentInstancingData {
	struct TArray<Unknown> ChangedPropertyList; // 0x0 (16)
	char bHasValidCookedData : 0; // 0x21 (1)
};

// ScriptStruct Engine.BlueprintComponentChangedPropertyInfo
struct FBlueprintComponentChangedPropertyInfo {
	struct FName PropertyName; // 0x0 (8)
	int32_t ArrayIndex; // 0x8 (4)
	struct Unknown PropertyScope; // 0x10 (8)
};

// ScriptStruct Engine.EventGraphFastCallPair
struct FEventGraphFastCallPair {
	struct Unknown FunctionToPatch; // 0x0 (8)
	int32_t EventGraphCallOffset; // 0x8 (4)
};

// ScriptStruct Engine.GeomSelection
struct FGeomSelection {
	int32_t Type; // 0x0 (4)
	int32_t Index; // 0x4 (4)
	int32_t SelectionIndex; // 0x8 (4)
};

// ScriptStruct Engine.BuilderPoly
struct FBuilderPoly {
	struct TArray<Unknown> VertexIndices; // 0x0 (16)
	int32_t Direction; // 0x10 (4)
	struct FName ItemName; // 0x14 (8)
	int32_t PolyFlags; // 0x1C (4)
};

// ScriptStruct Engine.CachedAnimTransitionData
struct FCachedAnimTransitionData {
	struct FName StateMachineName; // 0x0 (8)
	struct FName FromStateName; // 0x8 (8)
	struct FName ToStateName; // 0x10 (8)
};

// ScriptStruct Engine.CachedAnimRelevancyData
struct FCachedAnimRelevancyData {
	struct FName StateMachineName; // 0x0 (8)
	struct FName StateName; // 0x8 (8)
};

// ScriptStruct Engine.CachedAnimAssetPlayerData
struct FCachedAnimAssetPlayerData {
	struct FName StateMachineName; // 0x0 (8)
	struct FName StateName; // 0x8 (8)
};

// ScriptStruct Engine.CachedAnimStateArray
struct FCachedAnimStateArray {
	struct TArray<Unknown> States; // 0x0 (16)
};

// ScriptStruct Engine.CachedAnimStateData
struct FCachedAnimStateData {
	struct FName StateMachineName; // 0x0 (8)
	struct FName StateName; // 0x8 (8)
};

// ScriptStruct Engine.ActiveCameraShakeInfo
struct FActiveCameraShakeInfo {
	struct Unknown ShakeInstance; // 0x0 (8)
	struct TWeakObjectPtr<struct Unknown> ShakeSource; // 0x8 (8)
};

// ScriptStruct Engine.PooledCameraShakes
struct FPooledCameraShakes {
	struct TArray<Unknown> PooledShakes; // 0x0 (16)
};

// ScriptStruct Engine.VOscillator
struct FVOscillator {
	struct Unknown X; // 0x0 (12)
	struct Unknown Y; // 0xC (12)
	struct Unknown Z; // 0x18 (12)
};

// ScriptStruct Engine.FOscillator
struct FFOscillator {
	float Amplitude; // 0x0 (4)
	float Frequency; // 0x4 (4)
	char InitialOffset; // 0x8 (1)
	enum class Unknow Waveform; // 0x9 (1)
};

// ScriptStruct Engine.ROscillator
struct FROscillator {
	struct Unknown Pitch; // 0x0 (12)
	struct Unknown Yaw; // 0xC (12)
	struct Unknown Roll; // 0x18 (12)
};

// ScriptStruct Engine.MinimalViewInfo
struct FMinimalViewInfo {
	struct Unknown Location; // 0x0 (12)
	struct Unknown Rotation; // 0xC (12)
	float FOV; // 0x18 (4)
	float DesiredFOV; // 0x1C (4)
	float OrthoWidth; // 0x24 (4)
	float OrthoNearClipPlane; // 0x28 (4)
	float OrthoFarClipPlane; // 0x2C (4)
	float AspectRatio; // 0x30 (4)
	char bConstrainAspectRatio : 0; // 0x34 (1)
	char bUseFieldOfViewForLOD : 0; // 0x34 (1)
	char ProjectionMode; // 0x38 (1)
	float PostProcessBlendWeight; // 0x3C (4)
	struct Unknown PostProcessSettings; // 0x40 (1472)
	struct Unknown OffCenterProjectionOffset; // 0x600 (8)
};

// ScriptStruct Engine.CanvasIcon
struct FCanvasIcon {
	struct Unknown Texture; // 0x0 (8)
	float U; // 0x8 (4)
	float V; // 0xC (4)
	float UL; // 0x10 (4)
	float VL; // 0x14 (4)
};

// ScriptStruct Engine.WrappedStringElement
struct FWrappedStringElement {
	struct FString Value; // 0x0 (16)
	struct Unknown LineExtent; // 0x10 (8)
};

// ScriptStruct Engine.TextSizingParameters
struct FTextSizingParameters {
	float DrawX; // 0x0 (4)
	float DrawY; // 0x4 (4)
	float DrawXL; // 0x8 (4)
	float DrawYL; // 0xC (4)
	struct Unknown Scaling; // 0x10 (8)
	struct Unknown DrawFont; // 0x18 (8)
	struct Unknown SpacingAdjust; // 0x20 (8)
};

// ScriptStruct Engine.FindFloorResult
struct FFindFloorResult {
	char bBlockingHit : 0; // 0x0 (1)
	char bWalkableFloor : 0; // 0x0 (1)
	char bLineTrace : 0; // 0x0 (1)
	float FloorDist; // 0x4 (4)
	float LineDist; // 0x8 (4)
	struct Unknown HitResult; // 0xC (136)
};

// ScriptStruct Engine.ChildActorComponentInstanceData
struct FChildActorComponentInstanceData : FSceneComponentInstanceData {
	struct Unknown* ChildActorClass; // 0xA8 (8)
	struct FName ChildActorName; // 0xB0 (8)
	struct TArray<Unknown> AttachedActors; // 0xB8 (16)
};

// ScriptStruct Engine.ChildActorAttachedActorInfo
struct FChildActorAttachedActorInfo {
	struct TWeakObjectPtr<struct Unknown> Actor; // 0x0 (8)
	struct FName SocketName; // 0x8 (8)
	struct Unknown RelativeTransform; // 0x10 (48)
};

// ScriptStruct Engine.CustomProfile
struct FCustomProfile {
	struct FName Name; // 0x0 (8)
	struct TArray<Unknown> CustomResponses; // 0x8 (16)
};

// ScriptStruct Engine.CustomChannelSetup
struct FCustomChannelSetup {
	char Channel; // 0x0 (1)
	char DefaultResponse; // 0x1 (1)
	char bTraceType : 0; // 0x2 (1)
	char bStaticObject : 0; // 0x3 (1)
	struct FName Name; // 0x4 (8)
};

// ScriptStruct Engine.CollisionResponseTemplate
struct FCollisionResponseTemplate {
	struct FName Name; // 0x0 (8)
	char CollisionEnabled; // 0x8 (1)
	char bCanModify : 0; // 0xA (1)
	struct FName ObjectTypeName; // 0x2C (8)
	struct TArray<Unknown> CustomResponses; // 0x38 (16)
};

// ScriptStruct Engine.BlueprintComponentDelegateBinding
struct FBlueprintComponentDelegateBinding {
	struct FName ComponentPropertyName; // 0x0 (8)
	struct FName DelegatePropertyName; // 0x8 (8)
	struct FName FunctionNameToBind; // 0x10 (8)
};

// ScriptStruct Engine.MeshUVChannelInfo
struct FMeshUVChannelInfo {
	char bInitialized : 0; // 0x0 (1)
	char bOverrideDensities : 0; // 0x1 (1)
	float LocalUVDensities[0x4]; // 0x4 (16)
};

// ScriptStruct Engine.AutoCompleteNode
struct FAutoCompleteNode {
	int32_t IndexChar; // 0x0 (4)
	struct TArray<Unknown> AutoCompleteListIndices; // 0x8 (16)
};

// ScriptStruct Engine.AngularDriveConstraint
struct FAngularDriveConstraint {
	struct Unknown TwistDrive; // 0x0 (16)
	struct Unknown SwingDrive; // 0x10 (16)
	struct Unknown SlerpDrive; // 0x20 (16)
	struct Unknown OrientationTarget; // 0x30 (12)
	struct Unknown AngularVelocityTarget; // 0x3C (12)
	char AngularDriveMode; // 0x48 (1)
};

// ScriptStruct Engine.ConstraintDrive
struct FConstraintDrive {
	float Stiffness; // 0x0 (4)
	float Damping; // 0x4 (4)
	float MaxForce; // 0x8 (4)
	char bEnablePositionDrive : 0; // 0xC (1)
	char bEnableVelocityDrive : 0; // 0xC (1)
};

// ScriptStruct Engine.LinearDriveConstraint
struct FLinearDriveConstraint {
	struct Unknown PositionTarget; // 0x0 (12)
	struct Unknown VelocityTarget; // 0xC (12)
	struct Unknown XDrive; // 0x18 (16)
	struct Unknown YDrive; // 0x28 (16)
	struct Unknown ZDrive; // 0x38 (16)
	char bEnablePositionDrive : 0; // 0x48 (1)
};

// ScriptStruct Engine.ConstraintInstance
struct FConstraintInstance {
	struct FName JointName; // 0x18 (8)
	struct FName ConstraintBone1; // 0x20 (8)
	struct FName ConstraintBone2; // 0x28 (8)
	struct Unknown Pos1; // 0x30 (12)
	struct Unknown PriAxis1; // 0x3C (12)
	struct Unknown SecAxis1; // 0x48 (12)
	struct Unknown Pos2; // 0x54 (12)
	struct Unknown PriAxis2; // 0x60 (12)
	struct Unknown SecAxis2; // 0x6C (12)
	struct Unknown AngularRotationOffset; // 0x78 (12)
	char bScaleLinearLimits : 0; // 0x84 (1)
	struct Unknown ProfileInstance; // 0x8C (260)
};

// ScriptStruct Engine.ConstraintProfileProperties
struct FConstraintProfileProperties {
	float ProjectionLinearTolerance; // 0x0 (4)
	float ProjectionAngularTolerance; // 0x4 (4)
	float LinearBreakThreshold; // 0x8 (4)
	float AngularBreakThreshold; // 0xC (4)
	struct Unknown LinearLimit; // 0x10 (28)
	struct Unknown ConeLimit; // 0x2C (32)
	struct Unknown TwistLimit; // 0x4C (28)
	struct Unknown LinearDrive; // 0x68 (76)
	struct Unknown AngularDrive; // 0xB4 (76)
	char bDisableCollision : 0; // 0x100 (1)
	char bParentDominates : 0; // 0x100 (1)
	char bEnableProjection : 0; // 0x100 (1)
	char bAngularBreakable : 0; // 0x100 (1)
	char bLinearBreakable : 0; // 0x100 (1)
};

// ScriptStruct Engine.ConstraintBaseParams
struct FConstraintBaseParams {
	float Stiffness; // 0x0 (4)
	float Damping; // 0x4 (4)
	float Restitution; // 0x8 (4)
	float ContactDistance; // 0xC (4)
	char bSoftConstraint : 0; // 0x10 (1)
};

// ScriptStruct Engine.TwistConstraint
struct FTwistConstraint : FConstraintBaseParams {
	float TwistLimitDegrees; // 0x14 (4)
	char TwistMotion; // 0x18 (1)
};

// ScriptStruct Engine.ConeConstraint
struct FConeConstraint : FConstraintBaseParams {
	float Swing1LimitDegrees; // 0x14 (4)
	float Swing2LimitDegrees; // 0x18 (4)
	char Swing1Motion; // 0x1C (1)
	char Swing2Motion; // 0x1D (1)
};

// ScriptStruct Engine.LinearConstraint
struct FLinearConstraint : FConstraintBaseParams {
	float Limit; // 0x14 (4)
	char XMotion; // 0x18 (1)
	char YMotion; // 0x19 (1)
	char ZMotion; // 0x1A (1)
};

// ScriptStruct Engine.CullDistanceSizePair
struct FCullDistanceSizePair {
	float Size; // 0x0 (4)
	float CullDistance; // 0x4 (4)
};

// ScriptStruct Engine.RuntimeCurveLinearColor
struct FRuntimeCurveLinearColor {
	struct Unknown ColorCurves[0x4]; // 0x0 (512)
	struct Unknown ExternalCurve; // 0x200 (8)
};

// ScriptStruct Engine.NamedCurveValue
struct FNamedCurveValue {
	struct FName Name; // 0x0 (8)
	float Value; // 0x8 (4)
};

// ScriptStruct Engine.CurveTableRowHandle
struct FCurveTableRowHandle {
	struct Unknown CurveTable; // 0x0 (8)
	struct FName RowName; // 0x8 (8)
};

// ScriptStruct Engine.DataTableCategoryHandle
struct FDataTableCategoryHandle {
	struct Unknown DataTable; // 0x0 (8)
	struct FName ColumnName; // 0x8 (8)
	struct FName RowContents; // 0x10 (8)
};

// ScriptStruct Engine.DebugCameraControllerSettingsViewModeIndex
struct FDebugCameraControllerSettingsViewModeIndex {
	char ViewModeIndex; // 0x8 (1)
};

// ScriptStruct Engine.DebugDisplayProperty
struct FDebugDisplayProperty {
	struct Unknown Obj; // 0x0 (8)
	struct Unknown* WithinClass; // 0x8 (8)
};

// ScriptStruct Engine.MulticastRecordOptions
struct FMulticastRecordOptions {
	struct FString FuncPathName; // 0x0 (16)
	char bServerSkip : 0; // 0x10 (1)
	char bClientSkip : 0; // 0x11 (1)
};

// ScriptStruct Engine.RollbackNetStartupActorInfo
struct FRollbackNetStartupActorInfo {
	struct Unknown Archetype; // 0x8 (8)
	struct Unknown Level; // 0x38 (8)
	struct TArray<Unknown> ObjReferences; // 0xA0 (16)
};

// ScriptStruct Engine.LevelNameAndTime
struct FLevelNameAndTime {
	struct FString LevelName; // 0x0 (16)
	uint32_t LevelChangeTimeInMS; // 0x10 (4)
};

// ScriptStruct Engine.DialogueWaveParameter
struct FDialogueWaveParameter {
	struct Unknown DialogueWave; // 0x0 (8)
	struct Unknown Context; // 0x8 (24)
};

// ScriptStruct Engine.DialogueContext
struct FDialogueContext {
	struct Unknown Speaker; // 0x0 (8)
	struct TArray<Unknown> Targets; // 0x8 (16)
};

// ScriptStruct Engine.DialogueContextMapping
struct FDialogueContextMapping {
	struct Unknown Context; // 0x0 (24)
	struct Unknown SoundWave; // 0x18 (8)
	struct FString LocalizationKeyFormat; // 0x20 (16)
	struct Unknown Proxy; // 0x30 (8)
};

// ScriptStruct Engine.RawDistributionFloat
struct FRawDistributionFloat : FRawDistribution {
	float MinValue; // 0x20 (4)
	float MaxValue; // 0x24 (4)
	struct Unknown Distribution; // 0x28 (8)
};

// ScriptStruct Engine.RawDistributionVector
struct FRawDistributionVector : FRawDistribution {
	float MinValue; // 0x20 (4)
	float MaxValue; // 0x24 (4)
	struct Unknown MinValueVec; // 0x28 (12)
	struct Unknown MaxValueVec; // 0x34 (12)
	struct Unknown Distribution; // 0x40 (8)
};

// ScriptStruct Engine.GraphReference
struct FGraphReference {
	struct Unknown MacroGraph; // 0x0 (8)
	struct Unknown GraphBlueprint; // 0x8 (8)
	struct Unknown GraphGuid; // 0x10 (16)
};

// ScriptStruct Engine.EdGraphPinReference
struct FEdGraphPinReference {
	struct TWeakObjectPtr<struct Unknown> OwningNode; // 0x0 (8)
	struct Unknown PinID; // 0x8 (16)
};

// ScriptStruct Engine.EdGraphSchemaAction
struct FEdGraphSchemaAction {
	struct FText MenuDescription; // 0x8 (24)
	struct FText TooltipDescription; // 0x20 (24)
	struct FText Category; // 0x38 (24)
	struct FText Keywords; // 0x50 (24)
	int32_t Grouping; // 0x68 (4)
	int32_t SectionID; // 0x6C (4)
	struct TArray<Unknown> MenuDescriptionArray; // 0x70 (16)
	struct TArray<Unknown> FullSearchTitlesArray; // 0x80 (16)
	struct TArray<Unknown> FullSearchKeywordsArray; // 0x90 (16)
	struct TArray<Unknown> FullSearchCategoryArray; // 0xA0 (16)
	struct TArray<Unknown> LocalizedMenuDescriptionArray; // 0xB0 (16)
	struct TArray<Unknown> LocalizedFullSearchTitlesArray; // 0xC0 (16)
	struct TArray<Unknown> LocalizedFullSearchKeywordsArray; // 0xD0 (16)
	struct TArray<Unknown> LocalizedFullSearchCategoryArray; // 0xE0 (16)
	struct FString SearchText; // 0xF0 (16)
};

// ScriptStruct Engine.EdGraphSchemaAction_NewNode
struct FEdGraphSchemaAction_NewNode : FEdGraphSchemaAction {
	struct Unknown NodeTemplate; // 0x100 (8)
};

// ScriptStruct Engine.PluginRedirect
struct FPluginRedirect {
	struct FString OldPluginName; // 0x0 (16)
	struct FString NewPluginName; // 0x10 (16)
};

// ScriptStruct Engine.StructRedirect
struct FStructRedirect {
	struct FName OldStructName; // 0x0 (8)
	struct FName NewStructName; // 0x8 (8)
};

// ScriptStruct Engine.ClassRedirect
struct FClassRedirect {
	struct FName ObjectName; // 0x0 (8)
	struct FName OldClassName; // 0x8 (8)
	struct FName NewClassName; // 0x10 (8)
	struct FName OldSubobjName; // 0x18 (8)
	struct FName NewSubobjName; // 0x20 (8)
	struct FName NewClassClass; // 0x28 (8)
	struct FName NewClassPackage; // 0x30 (8)
	char InstanceOnly : 0; // 0x38 (1)
};

// ScriptStruct Engine.GameNameRedirect
struct FGameNameRedirect {
	struct FName OldGameName; // 0x0 (8)
	struct FName NewGameName; // 0x8 (8)
};

// ScriptStruct Engine.ScreenMessageString
struct FScreenMessageString {
	uint64_t Key; // 0x0 (8)
	struct FString ScreenMessage; // 0x8 (16)
	struct Unknown DisplayColor; // 0x18 (4)
	float TimeToDisplay; // 0x1C (4)
	float CurrentTimeDisplayed; // 0x20 (4)
	struct Unknown TextScale; // 0x24 (8)
};

// ScriptStruct Engine.DropNoteInfo
struct FDropNoteInfo {
	struct Unknown Location; // 0x0 (12)
	struct Unknown Rotation; // 0xC (12)
	struct FString Comment; // 0x18 (16)
};

// ScriptStruct Engine.StatColorMapping
struct FStatColorMapping {
	struct FString StatName; // 0x0 (16)
	struct TArray<Unknown> ColorMap; // 0x10 (16)
	char DisableBlend : 0; // 0x20 (1)
};

// ScriptStruct Engine.StatColorMapEntry
struct FStatColorMapEntry {
	float In; // 0x0 (4)
	struct Unknown Out; // 0x4 (4)
};

// ScriptStruct Engine.WorldContext
struct FWorldContext {
	struct Unknown LastURL; // 0xD0 (104)
	struct Unknown LastRemoteURL; // 0x138 (104)
	struct Unknown PendingNetGame; // 0x1A0 (8)
	struct TArray<Unknown> PackagesToFullyLoad; // 0x1A8 (16)
	struct TArray<Unknown> LoadedLevelsForPendingMapChange; // 0x1C8 (16)
	struct TArray<Unknown> ObjectReferencers; // 0x1F0 (16)
	struct TArray<Unknown> PendingLevelStreamingStatusUpdates; // 0x200 (16)
	struct Unknown GameViewport; // 0x210 (8)
	struct Unknown OwningGameInstance; // 0x218 (8)
	struct TArray<Unknown> ActiveNetDrivers; // 0x220 (16)
};

// ScriptStruct Engine.NamedNetDriver
struct FNamedNetDriver {
	struct Unknown NetDriver; // 0x0 (8)
};

// ScriptStruct Engine.LevelStreamingStatus
struct FLevelStreamingStatus {
	struct FName PackageName; // 0x0 (8)
	char bShouldBeLoaded : 0; // 0x8 (1)
	char bShouldBeVisible : 0; // 0x8 (1)
	uint32_t LODIndex; // 0xC (4)
};

// ScriptStruct Engine.FullyLoadedPackagesInfo
struct FFullyLoadedPackagesInfo {
	char FullyLoadType; // 0x0 (1)
	struct FString Tag; // 0x8 (16)
	struct TArray<Unknown> PackagesToLoad; // 0x18 (16)
	struct TArray<Unknown> LoadedObjects; // 0x28 (16)
};

// ScriptStruct Engine.NetDriverDefinition
struct FNetDriverDefinition {
	struct FName DefName; // 0x0 (8)
	struct FName DriverClassName; // 0x8 (8)
	struct FName DriverClassNameFallback; // 0x10 (8)
};

// ScriptStruct Engine.ExposureSettings
struct FExposureSettings {
	float FixedEV100; // 0x0 (4)
	char bFixed : 0; // 0x4 (1)
};

// ScriptStruct Engine.CanvasUVTri
struct FCanvasUVTri {
	struct Unknown V0_Pos; // 0x0 (8)
	struct Unknown V0_UV; // 0x8 (8)
	struct Unknown V0_Color; // 0x10 (16)
	struct Unknown V1_Pos; // 0x20 (8)
	struct Unknown V1_UV; // 0x28 (8)
	struct Unknown V1_Color; // 0x30 (16)
	struct Unknown V2_Pos; // 0x40 (8)
	struct Unknown V2_UV; // 0x48 (8)
	struct Unknown V2_Color; // 0x50 (16)
};

// ScriptStruct Engine.FontRenderInfo
struct FFontRenderInfo {
	char bClipText : 0; // 0x0 (1)
	char bEnableShadow : 0; // 0x0 (1)
	struct Unknown GlowInfo; // 0x4 (36)
};

// ScriptStruct Engine.DepthFieldGlowInfo
struct FDepthFieldGlowInfo {
	char bEnableGlow : 0; // 0x0 (1)
	struct Unknown GlowColor; // 0x4 (16)
	struct Unknown GlowOuterRadius; // 0x14 (8)
	struct Unknown GlowInnerRadius; // 0x1C (8)
};

// ScriptStruct Engine.Redirector
struct FRedirector {
	struct FName OldName; // 0x0 (8)
	struct FName NewName; // 0x8 (8)
};

// ScriptStruct Engine.CollectionReference
struct FCollectionReference {
	struct FName CollectionName; // 0x0 (8)
};

// ScriptStruct Engine.ComponentReference
struct FComponentReference {
	struct Unknown OtherActor; // 0x0 (8)
	struct FName ComponentProperty; // 0x8 (8)
	struct FString PathToComponent; // 0x10 (16)
};

// ScriptStruct Engine.ConstrainComponentPropName
struct FConstrainComponentPropName {
	struct FName ComponentName; // 0x0 (8)
};

// ScriptStruct Engine.SkeletalMeshBuildSettings
struct FSkeletalMeshBuildSettings {
	char bRecomputeNormals : 0; // 0x0 (1)
	char bRecomputeTangents : 0; // 0x0 (1)
	char bUseMikkTSpace : 0; // 0x0 (1)
	char bComputeWeightedNormals : 0; // 0x0 (1)
	char bRemoveDegenerates : 0; // 0x0 (1)
	char bUseHighPrecisionTangentBasis : 0; // 0x0 (1)
	char bUseFullPrecisionUVs : 0; // 0x0 (1)
	char bBuildAdjacencyBuffer : 0; // 0x0 (1)
	float ThresholdPosition; // 0x4 (4)
	float ThresholdTangentNormal; // 0x8 (4)
	float ThresholdUV; // 0xC (4)
	float MorphThresholdPosition; // 0x10 (4)
};

// ScriptStruct Engine.MeshBuildSettings
struct FMeshBuildSettings {
	char bUseMikkTSpace : 0; // 0x0 (1)
	char bRecomputeNormals : 0; // 0x0 (1)
	char bRecomputeTangents : 0; // 0x0 (1)
	char bComputeWeightedNormals : 0; // 0x0 (1)
	char bRemoveDegenerates : 0; // 0x0 (1)
	char bBuildAdjacencyBuffer : 0; // 0x0 (1)
	char bBuildReversedIndexBuffer : 0; // 0x0 (1)
	char bUseHighPrecisionTangentBasis : 0; // 0x0 (1)
	char bUseFullPrecisionUVs : 0; // 0x1 (1)
	char bGenerateLightmapUVs : 0; // 0x1 (1)
	char bGenerateDistanceFieldAsIfTwoSided : 0; // 0x1 (1)
	char bSupportFaceRemap : 0; // 0x1 (1)
	int32_t MinLightmapResolution; // 0x4 (4)
	int32_t SrcLightmapIndex; // 0x8 (4)
	int32_t DstLightmapIndex; // 0xC (4)
	float BuildScale; // 0x10 (4)
	struct Unknown BuildScale3D; // 0x14 (12)
	float DistanceFieldResolutionScale; // 0x20 (4)
	struct Unknown DistanceFieldReplacementMesh; // 0x28 (8)
};

// ScriptStruct Engine.POV
struct FPOV {
	struct Unknown Location; // 0x0 (12)
	struct Unknown Rotation; // 0xC (12)
	float FOV; // 0x18 (4)
};

// ScriptStruct Engine.AnimUpdateRateParameters
struct FAnimUpdateRateParameters {
	enum class Unknow ShiftBucket; // 0x1 (1)
	char bInterpolateSkippedFrames : 0; // 0x2 (1)
	char bShouldUseLodMap : 0; // 0x2 (1)
	char bShouldUseMinLod : 0; // 0x2 (1)
	char bSkipUpdate : 0; // 0x2 (1)
	char bSkipEvaluation : 0; // 0x2 (1)
	int32_t UpdateRate; // 0x4 (4)
	int32_t EvaluationRate; // 0x8 (4)
	float TickedPoseOffestTime; // 0xC (4)
	float AdditionalTime; // 0x10 (4)
	int32_t BaseNonRenderedUpdateRate; // 0x18 (4)
	int32_t MaxEvalRateForInterpolation; // 0x1C (4)
	struct TArray<Unknown> BaseVisibleDistanceFactorThesholds; // 0x20 (16)
	struct TMap<Unknown, Unknown> LODToFrameSkipMap; // 0x30 (80)
	int32_t SkippedUpdateFrames; // 0x80 (4)
	int32_t SkippedEvalFrames; // 0x84 (4)
};

// ScriptStruct Engine.AnimSlotDesc
struct FAnimSlotDesc {
	struct FName SlotName; // 0x0 (8)
	int32_t NumChannels; // 0x8 (4)
};

// ScriptStruct Engine.AnimSlotInfo
struct FAnimSlotInfo {
	struct FName SlotName; // 0x0 (8)
	struct TArray<Unknown> ChannelWeights; // 0x8 (16)
};

// ScriptStruct Engine.MTDResult
struct FMTDResult {
	struct Unknown Direction; // 0x0 (12)
	float Distance; // 0xC (4)
};

// ScriptStruct Engine.OverlapResult
struct FOverlapResult {
	struct TWeakObjectPtr<struct Unknown> Actor; // 0x0 (8)
	struct TWeakObjectPtr<struct Unknown> Component; // 0x8 (8)
	char bBlockingHit : 0; // 0x14 (1)
};

// ScriptStruct Engine.PrimitiveMaterialRef
struct FPrimitiveMaterialRef {
	struct Unknown Primitive; // 0x0 (8)
	struct Unknown Decal; // 0x8 (8)
	int32_t ElementIndex; // 0x10 (4)
};

// ScriptStruct Engine.SwarmDebugOptions
struct FSwarmDebugOptions {
	char bDistributionEnabled : 0; // 0x0 (1)
	char bForceContentExport : 0; // 0x0 (1)
	char bInitialized : 0; // 0x0 (1)
};

// ScriptStruct Engine.LightmassDebugOptions
struct FLightmassDebugOptions {
	char bDebugMode : 0; // 0x0 (1)
	char bStatsEnabled : 0; // 0x0 (1)
	char bGatherBSPSurfacesAcrossComponents : 0; // 0x0 (1)
	float CoplanarTolerance; // 0x4 (4)
	char bUseImmediateImport : 0; // 0x8 (1)
	char bImmediateProcessMappings : 0; // 0x8 (1)
	char bSortMappings : 0; // 0x8 (1)
	char bDumpBinaryFiles : 0; // 0x8 (1)
	char bDebugMaterials : 0; // 0x8 (1)
	char bPadMappings : 0; // 0x8 (1)
	char bDebugPaddings : 0; // 0x8 (1)
	char bOnlyCalcDebugTexelMappings : 0; // 0x8 (1)
	char bUseRandomColors : 0; // 0x9 (1)
	char bColorBordersGreen : 0; // 0x9 (1)
	char bColorByExecutionTime : 0; // 0x9 (1)
	float ExecutionTimeDivisor; // 0xC (4)
};

// ScriptStruct Engine.LightmassPrimitiveSettings
struct FLightmassPrimitiveSettings {
	char bUseTwoSidedLighting : 0; // 0x0 (1)
	char bShadowIndirectOnly : 0; // 0x0 (1)
	char bUseEmissiveForStaticLighting : 0; // 0x0 (1)
	char bUseVertexNormalForHemisphereGather : 0; // 0x0 (1)
	float EmissiveLightFalloffExponent; // 0x4 (4)
	float EmissiveLightExplicitInfluenceRadius; // 0x8 (4)
	float EmissiveBoost; // 0xC (4)
	float DiffuseBoost; // 0x10 (4)
	float FullyOccludedSamplesFraction; // 0x14 (4)
};

// ScriptStruct Engine.LightmassLightSettings
struct FLightmassLightSettings {
	float IndirectLightingSaturation; // 0x0 (4)
	float ShadowExponent; // 0x4 (4)
	char bUseAreaShadowsForStationaryLight : 0; // 0x8 (1)
};

// ScriptStruct Engine.LightmassDirectionalLightSettings
struct FLightmassDirectionalLightSettings : FLightmassLightSettings {
	float LightSourceAngle; // 0xC (4)
};

// ScriptStruct Engine.BasedPosition
struct FBasedPosition {
	struct Unknown Base; // 0x0 (8)
	struct Unknown Position; // 0x8 (12)
	struct Unknown CachedBaseLocation; // 0x14 (12)
	struct Unknown CachedBaseRotation; // 0x20 (12)
	struct Unknown CachedTransPosition; // 0x2C (12)
};

// ScriptStruct Engine.CollisionImpactData
struct FCollisionImpactData {
	struct TArray<Unknown> ContactInfos; // 0x0 (16)
	struct Unknown TotalNormalImpulse; // 0x10 (12)
	struct Unknown TotalFrictionImpulse; // 0x1C (12)
};

// ScriptStruct Engine.RigidBodyContactInfo
struct FRigidBodyContactInfo {
	struct Unknown ContactPosition; // 0x0 (12)
	struct Unknown ContactNormal; // 0xC (12)
	float ContactPenetration; // 0x18 (4)
	struct Unknown PhysMaterial[0x2]; // 0x20 (16)
};

// ScriptStruct Engine.RigidBodyState
struct FRigidBodyState {
	struct Unknown Position; // 0x0 (12)
	struct Unknown Quaternion; // 0x10 (16)
	struct Unknown LinVel; // 0x20 (12)
	struct Unknown AngVel; // 0x2C (12)
	char Flags; // 0x38 (1)
};

// ScriptStruct Engine.MaterialShadingModelField
struct FMaterialShadingModelField {
	uint16_t ShadingModelField; // 0x0 (2)
};

// ScriptStruct Engine.ExponentialHeightFogData
struct FExponentialHeightFogData {
	float FogDensity; // 0x0 (4)
	float FogHeightFalloff; // 0x4 (4)
	float FogHeightOffset; // 0x8 (4)
};

// ScriptStruct Engine.FontCharacter
struct FFontCharacter {
	int32_t StartU; // 0x0 (4)
	int32_t StartV; // 0x4 (4)
	int32_t USize; // 0x8 (4)
	int32_t VSize; // 0xC (4)
	char TextureIndex; // 0x10 (1)
	int32_t VerticalOffset; // 0x14 (4)
};

// ScriptStruct Engine.FontImportOptionsData
struct FFontImportOptionsData {
	struct FString FontName; // 0x0 (16)
	float Height; // 0x10 (4)
	char bEnableAntialiasing : 0; // 0x14 (1)
	char bEnableBold : 0; // 0x14 (1)
	char bEnableItalic : 0; // 0x14 (1)
	char bEnableUnderline : 0; // 0x14 (1)
	char bAlphaOnly : 0; // 0x14 (1)
	char CharacterSet; // 0x18 (1)
	struct FString Chars; // 0x20 (16)
	struct FString UnicodeRange; // 0x30 (16)
	struct FString CharsFilePath; // 0x40 (16)
	struct FString CharsFileWildcard; // 0x50 (16)
	char bCreatePrintableOnly : 0; // 0x60 (1)
	char bIncludeASCIIRange : 0; // 0x60 (1)
	struct Unknown ForegroundColor; // 0x64 (16)
	char bEnableDropShadow : 0; // 0x74 (1)
	int32_t TexturePageWidth; // 0x78 (4)
	int32_t TexturePageMaxHeight; // 0x7C (4)
	int32_t XPadding; // 0x80 (4)
	int32_t YPadding; // 0x84 (4)
	int32_t ExtendBoxTop; // 0x88 (4)
	int32_t ExtendBoxBottom; // 0x8C (4)
	int32_t ExtendBoxRight; // 0x90 (4)
	int32_t ExtendBoxLeft; // 0x94 (4)
	char bEnableLegacyMode : 0; // 0x98 (1)
	int32_t Kerning; // 0x9C (4)
	char bUseDistanceFieldAlpha : 0; // 0xA0 (1)
	int32_t DistanceFieldScaleFactor; // 0xA4 (4)
	float DistanceFieldScanRadiusScale; // 0xA8 (4)
};

// ScriptStruct Engine.ForceFeedbackChannelDetails
struct FForceFeedbackChannelDetails {
	char bAffectsLeftLarge : 0; // 0x0 (1)
	char bAffectsLeftSmall : 0; // 0x0 (1)
	char bAffectsRightLarge : 0; // 0x0 (1)
	char bAffectsRightSmall : 0; // 0x0 (1)
	struct Unknown Curve; // 0x8 (136)
};

// ScriptStruct Engine.PredictProjectilePathResult
struct FPredictProjectilePathResult {
	struct TArray<Unknown> PathData; // 0x0 (16)
	struct Unknown LastTraceDestination; // 0x10 (28)
	struct Unknown HitResult; // 0x2C (136)
};

// ScriptStruct Engine.PredictProjectilePathPointData
struct FPredictProjectilePathPointData {
	struct Unknown Location; // 0x0 (12)
	struct Unknown Velocity; // 0xC (12)
	float Time; // 0x18 (4)
};

// ScriptStruct Engine.PredictProjectilePathParams
struct FPredictProjectilePathParams {
	struct Unknown StartLocation; // 0x0 (12)
	struct Unknown LaunchVelocity; // 0xC (12)
	char bTraceWithCollision : 0; // 0x18 (1)
	float ProjectileRadius; // 0x1C (4)
	float MaxSimTime; // 0x20 (4)
	char bTraceWithChannel : 0; // 0x24 (1)
	char TraceChannel; // 0x25 (1)
	struct TArray<Unknown> ObjectTypes; // 0x28 (16)
	struct TArray<Unknown> ActorsToIgnore; // 0x38 (16)
	float SimFrequency; // 0x48 (4)
	float OverrideGravityZ; // 0x4C (4)
	char DrawDebugType; // 0x50 (1)
	float DrawDebugTime; // 0x54 (4)
	char bTraceComplex : 0; // 0x58 (1)
};

// ScriptStruct Engine.ActiveHapticFeedbackEffect
struct FActiveHapticFeedbackEffect {
	struct Unknown HapticEffect; // 0x0 (8)
};

// ScriptStruct Engine.HapticFeedbackDetails_Curve
struct FHapticFeedbackDetails_Curve {
	struct Unknown Frequency; // 0x0 (136)
	struct Unknown Amplitude; // 0x88 (136)
};

// ScriptStruct Engine.ClusterNode
struct FClusterNode {
	struct Unknown BoundMin; // 0x0 (12)
	int32_t FirstChild; // 0xC (4)
	struct Unknown BoundMax; // 0x10 (12)
	int32_t LastChild; // 0x1C (4)
	int32_t FirstInstance; // 0x20 (4)
	int32_t LastInstance; // 0x24 (4)
	struct Unknown MinInstanceScale; // 0x28 (12)
	struct Unknown MaxInstanceScale; // 0x34 (12)
};

// ScriptStruct Engine.ClusterNode_DEPRECATED
struct FClusterNode_DEPRECATED {
	struct Unknown BoundMin; // 0x0 (12)
	int32_t FirstChild; // 0xC (4)
	struct Unknown BoundMax; // 0x10 (12)
	int32_t LastChild; // 0x1C (4)
	int32_t FirstInstance; // 0x20 (4)
	int32_t LastInstance; // 0x24 (4)
};

// ScriptStruct Engine.HLODProxyMesh
struct FHLODProxyMesh {
	LazyObjectProperty LODActor; // 0x0 (28)
	struct Unknown StaticMesh; // 0x20 (8)
	struct FName Key; // 0x28 (8)
};

// ScriptStruct Engine.ImportanceTexture
struct FImportanceTexture {
	struct Unknown Size; // 0x0 (8)
	int32_t NumMips; // 0x8 (4)
	struct TArray<Unknown> MarginalCDF; // 0x10 (16)
	struct TArray<Unknown> ConditionalCDF; // 0x20 (16)
	struct TArray<Unknown> TextureData; // 0x30 (16)
	struct TWeakObjectPtr<struct Unknown> Texture; // 0x40 (8)
	char Weighting; // 0x48 (1)
};

// ScriptStruct Engine.ComponentOverrideRecord
struct FComponentOverrideRecord {
	struct Unknown* ComponentClass; // 0x0 (8)
	struct Unknown ComponentTemplate; // 0x8 (8)
	struct Unknown ComponentKey; // 0x10 (32)
	struct Unknown CookedComponentInstancingData; // 0x30 (72)
};

// ScriptStruct Engine.ComponentKey
struct FComponentKey {
	struct Unknown* OwnerClass; // 0x0 (8)
	struct FName SCSVariableName; // 0x8 (8)
	struct Unknown AssociatedGuid; // 0x10 (16)
};

// ScriptStruct Engine.BlueprintInputDelegateBinding
struct FBlueprintInputDelegateBinding {
	char bConsumeInput : 0; // 0x0 (1)
	char bExecuteWhenPaused : 0; // 0x0 (1)
	char bOverrideParentBinding : 0; // 0x0 (1)
};

// ScriptStruct Engine.BlueprintInputActionDelegateBinding
struct FBlueprintInputActionDelegateBinding : FBlueprintInputDelegateBinding {
	struct FName InputActionName; // 0x4 (8)
	char InputKeyEvent; // 0xC (1)
	struct FName FunctionNameToBind; // 0x10 (8)
};

// ScriptStruct Engine.BlueprintInputAxisDelegateBinding
struct FBlueprintInputAxisDelegateBinding : FBlueprintInputDelegateBinding {
	struct FName InputAxisName; // 0x4 (8)
	struct FName FunctionNameToBind; // 0xC (8)
};

// ScriptStruct Engine.BlueprintInputAxisKeyDelegateBinding
struct FBlueprintInputAxisKeyDelegateBinding : FBlueprintInputDelegateBinding {
	struct Unknown AxisKey; // 0x8 (24)
	struct FName FunctionNameToBind; // 0x20 (8)
};

// ScriptStruct Engine.CachedKeyToActionInfo
struct FCachedKeyToActionInfo {
	struct Unknown PlayerInput; // 0x0 (8)
};

// ScriptStruct Engine.BlueprintInputKeyDelegateBinding
struct FBlueprintInputKeyDelegateBinding : FBlueprintInputDelegateBinding {
	struct Unknown InputChord; // 0x8 (32)
	char InputKeyEvent; // 0x28 (1)
	struct FName FunctionNameToBind; // 0x2C (8)
};

// ScriptStruct Engine.BlueprintInputTouchDelegateBinding
struct FBlueprintInputTouchDelegateBinding : FBlueprintInputDelegateBinding {
	char InputKeyEvent; // 0x4 (1)
	struct FName FunctionNameToBind; // 0x8 (8)
};

// ScriptStruct Engine.InstancedStaticMeshComponentInstanceData
struct FInstancedStaticMeshComponentInstanceData : FSceneComponentInstanceData {
	struct Unknown StaticMesh; // 0xA8 (8)
	struct Unknown CachedStaticLighting; // 0xB0 (64)
	struct TArray<Unknown> PerInstanceSMData; // 0xF0 (16)
	struct TArray<Unknown> PerInstanceSMCustomData; // 0x100 (16)
	int32_t InstancingRandomSeed; // 0x130 (4)
};

// ScriptStruct Engine.InstancedStaticMeshInstanceData
struct FInstancedStaticMeshInstanceData {
	struct Unknown Transform; // 0x0 (64)
};

// ScriptStruct Engine.InstancedStaticMeshLightMapInstanceData
struct FInstancedStaticMeshLightMapInstanceData {
	struct Unknown Transform; // 0x0 (48)
	struct TArray<Unknown> MapBuildDataIds; // 0x30 (16)
};

// ScriptStruct Engine.IntegralCurve
struct FIntegralCurve : FIndexedCurve {
	struct TArray<Unknown> Keys; // 0x68 (16)
	int32_t DefaultValue; // 0x78 (4)
	char bUseDefaultValueBeforeFirstKey : 0; // 0x7C (1)
};

// ScriptStruct Engine.IntegralKey
struct FIntegralKey {
	float Time; // 0x0 (4)
	int32_t Value; // 0x4 (4)
};

// ScriptStruct Engine.CurveEdTab
struct FCurveEdTab {
	struct FString TabName; // 0x0 (16)
	struct TArray<Unknown> Curves; // 0x10 (16)
	float ViewStartInput; // 0x20 (4)
	float ViewEndInput; // 0x24 (4)
	float ViewStartOutput; // 0x28 (4)
	float ViewEndOutput; // 0x2C (4)
};

// ScriptStruct Engine.CurveEdEntry
struct FCurveEdEntry {
	struct Unknown CurveObject; // 0x0 (8)
	struct Unknown CurveColor; // 0x8 (4)
	struct FString CurveName; // 0x10 (16)
	int32_t bHideCurve; // 0x20 (4)
	int32_t bColorCurve; // 0x24 (4)
	int32_t bFloatingPointColorCurve; // 0x28 (4)
	int32_t bClamp; // 0x2C (4)
	float ClampLow; // 0x30 (4)
	float ClampHigh; // 0x34 (4)
};

// ScriptStruct Engine.InterpEdSelKey
struct FInterpEdSelKey {
	struct Unknown Group; // 0x0 (8)
	struct Unknown Track; // 0x8 (8)
	int32_t KeyIndex; // 0x10 (4)
	float UnsnappedPosition; // 0x14 (4)
};

// ScriptStruct Engine.CameraPreviewInfo
struct FCameraPreviewInfo {
	struct Unknown* PawnClass; // 0x0 (8)
	struct Unknown AnimSeq; // 0x8 (8)
	struct Unknown Location; // 0x10 (12)
	struct Unknown Rotation; // 0x1C (12)
	struct Unknown PawnInst; // 0x28 (8)
};

// ScriptStruct Engine.SubTrackGroup
struct FSubTrackGroup {
	struct FString GroupName; // 0x0 (16)
	struct TArray<Unknown> TrackIndices; // 0x10 (16)
	char bIsCollapsed : 0; // 0x20 (1)
	char bIsSelected : 0; // 0x20 (1)
};

// ScriptStruct Engine.SupportedSubTrackInfo
struct FSupportedSubTrackInfo {
	struct Unknown* SupportedClass; // 0x0 (8)
	struct FString SubTrackName; // 0x8 (16)
	int32_t GroupIndex; // 0x18 (4)
};

// ScriptStruct Engine.AnimControlTrackKey
struct FAnimControlTrackKey {
	float StartTime; // 0x0 (4)
	struct Unknown AnimSeq; // 0x8 (8)
	float AnimStartOffset; // 0x10 (4)
	float AnimEndOffset; // 0x14 (4)
	float AnimPlayRate; // 0x18 (4)
	char bLooping : 0; // 0x1C (1)
	char bReverse : 0; // 0x1C (1)
};

// ScriptStruct Engine.BoolTrackKey
struct FBoolTrackKey {
	float Time; // 0x0 (4)
	char Value : 0; // 0x4 (1)
};

// ScriptStruct Engine.DirectorTrackCut
struct FDirectorTrackCut {
	float Time; // 0x0 (4)
	float TransitionTime; // 0x4 (4)
	struct FName TargetCamGroup; // 0x8 (8)
	int32_t ShotNumber; // 0x10 (4)
};

// ScriptStruct Engine.EventTrackKey
struct FEventTrackKey {
	float Time; // 0x0 (4)
	struct FName EventName; // 0x4 (8)
};

// ScriptStruct Engine.InterpLookupTrack
struct FInterpLookupTrack {
	struct TArray<Unknown> Points; // 0x0 (16)
};

// ScriptStruct Engine.InterpLookupPoint
struct FInterpLookupPoint {
	struct FName GroupName; // 0x0 (8)
	float Time; // 0x8 (4)
};

// ScriptStruct Engine.ParticleReplayTrackKey
struct FParticleReplayTrackKey {
	float Time; // 0x0 (4)
	float Duration; // 0x4 (4)
	int32_t ClipIDNumber; // 0x8 (4)
};

// ScriptStruct Engine.SoundTrackKey
struct FSoundTrackKey {
	float Time; // 0x0 (4)
	float Volume; // 0x4 (4)
	float Pitch; // 0x8 (4)
	struct Unknown Sound; // 0x10 (8)
};

// ScriptStruct Engine.ToggleTrackKey
struct FToggleTrackKey {
	float Time; // 0x0 (4)
	char ToggleAction; // 0x4 (1)
};

// ScriptStruct Engine.VisibilityTrackKey
struct FVisibilityTrackKey {
	float Time; // 0x0 (4)
	char Action; // 0x4 (1)
	char ActiveCondition; // 0x5 (1)
};

// ScriptStruct Engine.DrawToRenderTargetContext
struct FDrawToRenderTargetContext {
	struct Unknown RenderTarget; // 0x0 (8)
};

// ScriptStruct Engine.LayerActorStats
struct FLayerActorStats {
	struct Unknown* Type; // 0x0 (8)
	int32_t Total; // 0x8 (4)
};

// ScriptStruct Engine.ReplicatedStaticActorDestructionInfo
struct FReplicatedStaticActorDestructionInfo {
	struct Unknown* ObjClass; // 0x30 (8)
};

// ScriptStruct Engine.LevelSimplificationDetails
struct FLevelSimplificationDetails {
	char bCreatePackagePerAsset : 0; // 0x0 (1)
	float DetailsPercentage; // 0x4 (4)
	struct Unknown StaticMeshMaterialSettings; // 0x8 (140)
	char bOverrideLandscapeExportLOD : 0; // 0x94 (1)
	int32_t LandscapeExportLOD; // 0x98 (4)
	struct Unknown LandscapeMaterialSettings; // 0x9C (140)
	char bBakeFoliageToLandscape : 0; // 0x128 (1)
	char bBakeGrassToLandscape : 0; // 0x129 (1)
	char bAllowDistanceField : 0; // 0x12A (1)
	char bSimplifiedMeshMerge : 0; // 0x12B (1)
	char bGenerateMeshNormalMap : 0; // 0x12C (1)
	char bGenerateMeshMetallicMap : 0; // 0x12D (1)
	char bGenerateMeshRoughnessMap : 0; // 0x12E (1)
	char bGenerateMeshSpecularMap : 0; // 0x12F (1)
	char bGenerateLandscapeNormalMap : 0; // 0x130 (1)
	char bGenerateLandscapeMetallicMap : 0; // 0x131 (1)
	char bGenerateLandscapeRoughnessMap : 0; // 0x132 (1)
	char bGenerateLandscapeSpecularMap : 0; // 0x133 (1)
};

// ScriptStruct Engine.MaterialProxySettings
struct FMaterialProxySettings {
	struct Unknown TextureSize; // 0x0 (8)
	float GutterSpace; // 0x8 (4)
	float MetallicConstant; // 0xC (4)
	float RoughnessConstant; // 0x10 (4)
	float AnisotropyConstant; // 0x14 (4)
	float SpecularConstant; // 0x18 (4)
	float OpacityConstant; // 0x1C (4)
	float OpacityMaskConstant; // 0x20 (4)
	float AmbientOcclusionConstant; // 0x24 (4)
	char TextureSizingType; // 0x28 (1)
	char MaterialMergeType; // 0x29 (1)
	char BlendMode; // 0x2A (1)
	char bAllowTwoSidedMaterial : 0; // 0x2B (1)
	char bNormalMap : 0; // 0x2B (1)
	char bTangentMap : 0; // 0x2B (1)
	char bMetallicMap : 0; // 0x2B (1)
	char bRoughnessMap : 0; // 0x2B (1)
	char bAnisotropyMap : 0; // 0x2B (1)
	char bSpecularMap : 0; // 0x2B (1)
	char bEmissiveMap : 0; // 0x2B (1)
	char bOpacityMap : 0; // 0x2C (1)
	char bOpacityMaskMap : 0; // 0x2C (1)
	char bAmbientOcclusionMap : 0; // 0x2C (1)
	struct Unknown DiffuseTextureSize; // 0x30 (8)
	struct Unknown NormalTextureSize; // 0x38 (8)
	struct Unknown TangentTextureSize; // 0x40 (8)
	struct Unknown MetallicTextureSize; // 0x48 (8)
	struct Unknown RoughnessTextureSize; // 0x50 (8)
	struct Unknown AnisotropyTextureSize; // 0x58 (8)
	struct Unknown SpecularTextureSize; // 0x60 (8)
	struct Unknown EmissiveTextureSize; // 0x68 (8)
	struct Unknown OpacityTextureSize; // 0x70 (8)
	struct Unknown OpacityMaskTextureSize; // 0x78 (8)
	struct Unknown AmbientOcclusionTextureSize; // 0x80 (8)
	char bHLODMaterial : 0; // 0x88 (1)
	char bWorldCompositionMaterial : 0; // 0x89 (1)
};

// ScriptStruct Engine.DynamicTextureInstance
struct FDynamicTextureInstance : FStreamableTextureInstance {
	struct Unknown Texture; // 0x28 (8)
	char bAttached : 0; // 0x30 (1)
	float OriginalRadius; // 0x34 (4)
};

// ScriptStruct Engine.PrecomputedLightInstanceData
struct FPrecomputedLightInstanceData : FSceneComponentInstanceData {
	struct Unknown Transform; // 0xB0 (48)
	struct Unknown LightGuid; // 0xE0 (16)
	int32_t PreviewShadowMapChannel; // 0xF0 (4)
};

// ScriptStruct Engine.BatchedPoint
struct FBatchedPoint {
	struct Unknown Position; // 0x0 (12)
	struct Unknown Color; // 0xC (16)
	float PointSize; // 0x1C (4)
	float RemainingLifeTime; // 0x20 (4)
	char DepthPriority; // 0x24 (1)
};

// ScriptStruct Engine.BatchedLine
struct FBatchedLine {
	struct Unknown Start; // 0x0 (12)
	struct Unknown End; // 0xC (12)
	struct Unknown Color; // 0x18 (16)
	float Thickness; // 0x28 (4)
	float RemainingLifeTime; // 0x2C (4)
	char DepthPriority; // 0x30 (1)
};

// ScriptStruct Engine.ClientReceiveData
struct FClientReceiveData {
	struct Unknown LocalPC; // 0x0 (8)
	struct FName MessageType; // 0x8 (8)
	int32_t MessageIndex; // 0x10 (4)
	struct FString MessageString; // 0x18 (16)
	struct Unknown RelatedPlayerState_2; // 0x28 (8)
	struct Unknown RelatedPlayerState_3; // 0x30 (8)
	struct Unknown OptionalObject; // 0x38 (8)
};

// ScriptStruct Engine.ParameterGroupData
struct FParameterGroupData {
	struct FString GroupName; // 0x0 (16)
	int32_t GroupSortPriority; // 0x10 (4)
};

// ScriptStruct Engine.MaterialSpriteElement
struct FMaterialSpriteElement {
	struct Unknown Material; // 0x0 (8)
	struct Unknown DistanceToOpacityCurve; // 0x8 (8)
	char bSizeIsInScreenSpace : 0; // 0x10 (1)
	float BaseSizeX; // 0x14 (4)
	float BaseSizeY; // 0x18 (4)
	struct Unknown DistanceToSizeCurve; // 0x20 (8)
};

// ScriptStruct Engine.MaterialCachedExpressionData
struct FMaterialCachedExpressionData {
	struct Unknown Parameters; // 0x0 (416)
	struct TArray<Unknown> ReferencedTextures; // 0x1A0 (16)
	struct TArray<Unknown> FunctionInfos; // 0x1B0 (16)
	struct TArray<Unknown> ParameterCollectionInfos; // 0x1C0 (16)
	struct TArray<Unknown> DefaultLayers; // 0x1D0 (16)
	struct TArray<Unknown> DefaultLayerBlends; // 0x1E0 (16)
	struct TArray<Unknown> GrassTypes; // 0x1F0 (16)
	struct TArray<Unknown> DynamicParameterNames; // 0x200 (16)
	struct TArray<Unknown> QualityLevelsUsed; // 0x210 (16)
	char bHasRuntimeVirtualTextureOutput : 0; // 0x220 (1)
	char bHasSceneColor : 0; // 0x220 (1)
};

// ScriptStruct Engine.MaterialParameterCollectionInfo
struct FMaterialParameterCollectionInfo {
	struct Unknown StateID; // 0x0 (16)
	struct Unknown ParameterCollection; // 0x10 (8)
};

// ScriptStruct Engine.MaterialFunctionInfo
struct FMaterialFunctionInfo {
	struct Unknown StateID; // 0x0 (16)
	struct Unknown Function; // 0x10 (8)
};

// ScriptStruct Engine.MaterialCachedParameters
struct FMaterialCachedParameters {
	struct Unknown Entries[0x5]; // 0x0 (320)
	struct TArray<Unknown> ScalarValues; // 0x140 (16)
	struct TArray<Unknown> VectorValues; // 0x150 (16)
	struct TArray<Unknown> TextureValues; // 0x160 (16)
	struct TArray<Unknown> FontValues; // 0x170 (16)
	struct TArray<Unknown> FontPageValues; // 0x180 (16)
	struct TArray<Unknown> RuntimeVirtualTextureValues; // 0x190 (16)
};

// ScriptStruct Engine.MaterialCachedParameterEntry
struct FMaterialCachedParameterEntry {
	struct TArray<Unknown> NameHashes; // 0x0 (16)
	struct TArray<Unknown> ParameterInfos; // 0x10 (16)
	struct TArray<Unknown> ExpressionGuids; // 0x20 (16)
	struct TArray<Unknown> Overrides; // 0x30 (16)
};

// ScriptStruct Engine.MaterialParameterInfo
struct FMaterialParameterInfo {
	struct FName Name; // 0x0 (8)
	char Association; // 0x8 (1)
	int32_t Index; // 0xC (4)
};

// ScriptStruct Engine.ParameterChannelNames
struct FParameterChannelNames {
	struct FText R; // 0x0 (24)
	struct FText G; // 0x18 (24)
	struct FText B; // 0x30 (24)
	struct FText A; // 0x48 (24)
};

// ScriptStruct Engine.CustomDefine
struct FCustomDefine {
	struct FString DefineName; // 0x0 (16)
	struct FString DefineValue; // 0x10 (16)
};

// ScriptStruct Engine.CustomInput
struct FCustomInput {
	struct FName InputName; // 0x0 (8)
	struct Unknown Input; // 0x8 (12)
};

// ScriptStruct Engine.FunctionExpressionOutput
struct FFunctionExpressionOutput {
	struct Unknown ExpressionOutput; // 0x0 (8)
	struct Unknown ExpressionOutputId; // 0x8 (16)
	struct Unknown Output; // 0x18 (8)
};

// ScriptStruct Engine.FunctionExpressionInput
struct FFunctionExpressionInput {
	struct Unknown ExpressionInput; // 0x0 (8)
	struct Unknown ExpressionInputId; // 0x8 (16)
	struct Unknown Input; // 0x18 (12)
};

// ScriptStruct Engine.FontParameterValue
struct FFontParameterValue {
	struct Unknown ParameterInfo; // 0x0 (16)
	struct Unknown FontValue; // 0x10 (8)
	int32_t FontPage; // 0x18 (4)
	struct Unknown ExpressionGUID; // 0x1C (16)
};

// ScriptStruct Engine.RuntimeVirtualTextureParameterValue
struct FRuntimeVirtualTextureParameterValue {
	struct Unknown ParameterInfo; // 0x0 (16)
	struct Unknown ParameterValue; // 0x10 (8)
	struct Unknown ExpressionGUID; // 0x18 (16)
};

// ScriptStruct Engine.TextureParameterValue
struct FTextureParameterValue {
	struct Unknown ParameterInfo; // 0x0 (16)
	struct Unknown ParameterValue; // 0x10 (8)
	struct Unknown ExpressionGUID; // 0x18 (16)
};

// ScriptStruct Engine.VectorParameterValue
struct FVectorParameterValue {
	struct Unknown ParameterInfo; // 0x0 (16)
	struct Unknown ParameterValue; // 0x10 (16)
	struct Unknown ExpressionGUID; // 0x20 (16)
};

// ScriptStruct Engine.ScalarParameterValue
struct FScalarParameterValue {
	struct Unknown ParameterInfo; // 0x0 (16)
	float ParameterValue; // 0x10 (4)
	struct Unknown ExpressionGUID; // 0x14 (16)
};

// ScriptStruct Engine.ScalarParameterAtlasInstanceData
struct FScalarParameterAtlasInstanceData {
	char bIsUsedAsAtlasPosition : 0; // 0x0 (1)
	struct Unknown Curve; // 0x8 (40)
	struct Unknown Atlas; // 0x30 (40)
};

// ScriptStruct Engine.MaterialInstanceBasePropertyOverrides
struct FMaterialInstanceBasePropertyOverrides {
	char bOverride_OpacityMaskClipValue : 0; // 0x0 (1)
	char bOverride_BlendMode : 0; // 0x0 (1)
	char bOverride_ShadingModel : 0; // 0x0 (1)
	char bOverride_DitheredLODTransition : 0; // 0x0 (1)
	char bOverride_CastDynamicShadowAsMasked : 0; // 0x0 (1)
	char bOverride_TwoSided : 0; // 0x0 (1)
	char TwoSided : 0; // 0x0 (1)
	char DitheredLODTransition : 0; // 0x0 (1)
	char bCastDynamicShadowAsMasked : 0; // 0x1 (1)
	char BlendMode; // 0x2 (1)
	char ShadingModel; // 0x3 (1)
	float OpacityMaskClipValue; // 0x4 (4)
};

// ScriptStruct Engine.MaterialTextureInfo
struct FMaterialTextureInfo {
	float SamplingScale; // 0x0 (4)
	int32_t UVChannelIndex; // 0x4 (4)
	struct FName TextureName; // 0x8 (8)
};

// ScriptStruct Engine.LightmassMaterialInterfaceSettings
struct FLightmassMaterialInterfaceSettings {
	float EmissiveBoost; // 0x0 (4)
	float DiffuseBoost; // 0x4 (4)
	float ExportResolutionScale; // 0x8 (4)
	char bCastShadowAsMasked : 0; // 0xC (1)
	char bOverrideCastShadowAsMasked : 0; // 0xC (1)
	char bOverrideEmissiveBoost : 0; // 0xC (1)
	char bOverrideDiffuseBoost : 0; // 0xC (1)
	char bOverrideExportResolutionScale : 0; // 0xC (1)
};

// ScriptStruct Engine.MaterialLayersFunctions
struct FMaterialLayersFunctions {
	struct TArray<Unknown> Layers; // 0x0 (16)
	struct TArray<Unknown> Blends; // 0x10 (16)
	struct TArray<Unknown> LayerStates; // 0x20 (16)
	struct FString KeyString; // 0x30 (16)
};

// ScriptStruct Engine.CollectionParameterBase
struct FCollectionParameterBase {
	struct FName ParameterName; // 0x0 (8)
	struct Unknown ID; // 0x8 (16)
};

// ScriptStruct Engine.CollectionVectorParameter
struct FCollectionVectorParameter : FCollectionParameterBase {
	struct Unknown DefaultValue; // 0x18 (16)
};

// ScriptStruct Engine.CollectionScalarParameter
struct FCollectionScalarParameter : FCollectionParameterBase {
	float DefaultValue; // 0x18 (4)
};

// ScriptStruct Engine.InterpGroupActorInfo
struct FInterpGroupActorInfo {
	struct FName ObjectName; // 0x0 (8)
	struct TArray<Unknown> Actors; // 0x8 (16)
};

// ScriptStruct Engine.CameraCutInfo
struct FCameraCutInfo {
	struct Unknown Location; // 0x0 (12)
	float Timestamp; // 0xC (4)
};

// ScriptStruct Engine.MemberReference
struct FMemberReference {
	struct Unknown MemberParent; // 0x0 (8)
	struct FString MemberScope; // 0x8 (16)
	struct FName MemberName; // 0x18 (8)
	struct Unknown MemberGuid; // 0x20 (16)
	char bSelfContext : 0; // 0x30 (1)
	char bWasDeprecated : 0; // 0x31 (1)
};

// ScriptStruct Engine.MeshInstancingSettings
struct FMeshInstancingSettings {
	struct Unknown* ActorClassToUse; // 0x0 (8)
	int32_t InstanceReplacementThreshold; // 0x8 (4)
	enum class Unknow MeshReplacementMethod; // 0xC (1)
	char bSkipMeshesWithVertexColors : 0; // 0xD (1)
	char bUseHLODVolumes : 0; // 0xE (1)
	struct Unknown* ISMComponentToUse; // 0x10 (8)
};

// ScriptStruct Engine.MeshMergingSettings
struct FMeshMergingSettings {
	int32_t TargetLightMapResolution; // 0x0 (4)
	enum class Unknow OutputUVs[0x8]; // 0x4 (8)
	struct Unknown MaterialSettings; // 0xC (140)
	int32_t GutterSize; // 0x98 (4)
	int32_t SpecificLOD; // 0x9C (4)
	enum class Unknow LODSelectionType; // 0xA0 (1)
	char bGenerateLightMapUV : 0; // 0xA1 (1)
	char bComputedLightMapResolution : 0; // 0xA1 (1)
	char bPivotPointAtZero : 0; // 0xA1 (1)
	char bMergePhysicsData : 0; // 0xA1 (1)
	char bMergeMaterials : 0; // 0xA1 (1)
	char bCreateMergedMaterial : 0; // 0xA1 (1)
	char bBakeVertexDataToMesh : 0; // 0xA1 (1)
	char bUseVertexDataForBakingMaterial : 0; // 0xA1 (1)
	char bUseTextureBinning : 0; // 0xA2 (1)
	char bReuseMeshLightmapUVs : 0; // 0xA2 (1)
	char bMergeEquivalentMaterials : 0; // 0xA2 (1)
	char bUseLandscapeCulling : 0; // 0xA2 (1)
	char bIncludeImposters : 0; // 0xA2 (1)
	char bAllowDistanceField : 0; // 0xA2 (1)
};

// ScriptStruct Engine.MeshProxySettings
struct FMeshProxySettings {
	int32_t ScreenSize; // 0x0 (4)
	float VoxelSize; // 0x4 (4)
	struct Unknown MaterialSettings; // 0x8 (140)
	float MergeDistance; // 0x94 (4)
	struct Unknown UnresolvedGeometryColor; // 0x98 (4)
	float MaxRayCastDist; // 0x9C (4)
	float HardAngleThreshold; // 0xA0 (4)
	int32_t LightMapResolution; // 0xA4 (4)
	char NormalCalculationMethod; // 0xA8 (1)
	char LandscapeCullingPrecision; // 0xA9 (1)
	char bCalculateCorrectLODModel : 0; // 0xAA (1)
	char bOverrideVoxelSize : 0; // 0xAA (1)
	char bOverrideTransferDistance : 0; // 0xAA (1)
	char bUseHardAngleThreshold : 0; // 0xAA (1)
	char bComputeLightMapResolution : 0; // 0xAA (1)
	char bRecalculateNormals : 0; // 0xAA (1)
	char bUseLandscapeCulling : 0; // 0xAA (1)
	char bAllowAdjacency : 0; // 0xAA (1)
	char bAllowDistanceField : 0; // 0xAB (1)
	char bReuseMeshLightmapUVs : 0; // 0xAB (1)
	char bCreateCollision : 0; // 0xAB (1)
	char bAllowVertexColors : 0; // 0xAB (1)
	char bGenerateLightmapUVs : 0; // 0xAB (1)
};

// ScriptStruct Engine.MeshReductionSettings
struct FMeshReductionSettings {
	float PercentTriangles; // 0x0 (4)
	float PercentVertices; // 0x4 (4)
	float MaxDeviation; // 0x8 (4)
	float PixelError; // 0xC (4)
	float WeldingThreshold; // 0x10 (4)
	float HardAngleThreshold; // 0x14 (4)
	int32_t BaseLODModel; // 0x18 (4)
	char SilhouetteImportance; // 0x1C (1)
	char TextureImportance; // 0x1D (1)
	char ShadingImportance; // 0x1E (1)
	char bRecalculateNormals : 0; // 0x1F (1)
	char bGenerateUniqueLightmapUVs : 0; // 0x1F (1)
	char bKeepSymmetry : 0; // 0x1F (1)
	char bVisibilityAided : 0; // 0x1F (1)
	char bCullOccluded : 0; // 0x1F (1)
	enum class Unknow TerminationCriterion; // 0x20 (1)
	char VisibilityAggressiveness; // 0x21 (1)
	char VertexColorImportance; // 0x22 (1)
};

// ScriptStruct Engine.PurchaseInfo
struct FPurchaseInfo {
	struct FString Identifier; // 0x0 (16)
	struct FString DisplayName; // 0x10 (16)
	struct FString DisplayDescription; // 0x20 (16)
	struct FString DisplayPrice; // 0x30 (16)
};

// ScriptStruct Engine.MK3DHighlightTargetEvent
struct FMK3DHighlightTargetEvent {
	struct FString ID; // 0x0 (16)
	struct FString Group; // 0x10 (16)
	struct FString MetaData; // 0x20 (16)
	int32_t Time1; // 0x30 (4)
	int32_t Time2; // 0x34 (4)
	struct FString TargetNetGUID; // 0x38 (16)
	struct FString TargetId; // 0x48 (16)
	struct FString TargetName; // 0x58 (16)
};

// ScriptStruct Engine.MK3DTargetData
struct FMK3DTargetData {
	struct FString TargetNetGUID; // 0x0 (16)
	struct FString TargetId; // 0x10 (16)
	struct FString TargetName; // 0x20 (16)
};

// ScriptStruct Engine.MK3DHighlightKillEvent
struct FMK3DHighlightKillEvent {
	int32_t Time1; // 0x0 (4)
	struct FString KillerName; // 0x8 (16)
	float KillerAppearanceTime; // 0x18 (4)
	struct FString VictimName; // 0x20 (16)
};

// ScriptStruct Engine.MK3DKillData
struct FMK3DKillData {
	struct FString VictimNetId; // 0x0 (16)
	struct FString KillerName; // 0x10 (16)
	float KillerAppearanceTime; // 0x20 (4)
	struct FString VictimName; // 0x28 (16)
};

// ScriptStruct Engine.NameCurve
struct FNameCurve : FIndexedCurve {
	struct TArray<Unknown> Keys; // 0x68 (16)
};

// ScriptStruct Engine.NameCurveKey
struct FNameCurveKey {
	float Time; // 0x0 (4)
	struct FName Value; // 0x4 (8)
};

// ScriptStruct Engine.NavDataConfig
struct FNavDataConfig : FNavAgentProperties {
	struct FName Name; // 0x30 (8)
	struct Unknown Color; // 0x38 (4)
	struct Unknown DefaultQueryExtent; // 0x3C (12)
	struct Unknown* NavigationDataClass; // 0x48 (8)
	struct TSoftClassPtr<UObject> NavDataClass; // 0x50 (40)
};

// ScriptStruct Engine.NavAgentSelector
struct FNavAgentSelector {
	char bSupportsAgent0 : 0; // 0x0 (1)
	char bSupportsAgent1 : 0; // 0x0 (1)
	char bSupportsAgent2 : 0; // 0x0 (1)
	char bSupportsAgent3 : 0; // 0x0 (1)
	char bSupportsAgent4 : 0; // 0x0 (1)
	char bSupportsAgent5 : 0; // 0x0 (1)
	char bSupportsAgent6 : 0; // 0x0 (1)
	char bSupportsAgent7 : 0; // 0x0 (1)
	char bSupportsAgent8 : 0; // 0x1 (1)
	char bSupportsAgent9 : 0; // 0x1 (1)
	char bSupportsAgent10 : 0; // 0x1 (1)
	char bSupportsAgent11 : 0; // 0x1 (1)
	char bSupportsAgent12 : 0; // 0x1 (1)
	char bSupportsAgent13 : 0; // 0x1 (1)
	char bSupportsAgent14 : 0; // 0x1 (1)
	char bSupportsAgent15 : 0; // 0x1 (1)
};

// ScriptStruct Engine.NavigationLinkBase
struct FNavigationLinkBase {
	float LeftProjectHeight; // 0x0 (4)
	float MaxFallDownLength; // 0x4 (4)
	float SnapRadius; // 0xC (4)
	float SnapHeight; // 0x10 (4)
	struct Unknown SupportedAgents; // 0x14 (4)
	char bSupportsAgent0 : 0; // 0x18 (1)
	char bSupportsAgent1 : 0; // 0x18 (1)
	char bSupportsAgent2 : 0; // 0x18 (1)
	char bSupportsAgent3 : 0; // 0x18 (1)
	char bSupportsAgent4 : 0; // 0x18 (1)
	char bSupportsAgent5 : 0; // 0x18 (1)
	char bSupportsAgent6 : 0; // 0x18 (1)
	char bSupportsAgent7 : 0; // 0x18 (1)
	char bSupportsAgent8 : 0; // 0x19 (1)
	char bSupportsAgent9 : 0; // 0x19 (1)
	char bSupportsAgent10 : 0; // 0x19 (1)
	char bSupportsAgent11 : 0; // 0x19 (1)
	char bSupportsAgent12 : 0; // 0x19 (1)
	char bSupportsAgent13 : 0; // 0x19 (1)
	char bSupportsAgent14 : 0; // 0x19 (1)
	char bSupportsAgent15 : 0; // 0x19 (1)
	char Direction; // 0x1C (1)
	char bUseSnapHeight : 0; // 0x1D (1)
	char bSnapToCheapestArea : 0; // 0x1D (1)
	char bCustomFlag0 : 0; // 0x1D (1)
	char bCustomFlag1 : 0; // 0x1D (1)
	char bCustomFlag2 : 0; // 0x1D (1)
	char bCustomFlag3 : 0; // 0x1D (1)
	char bCustomFlag4 : 0; // 0x1D (1)
	char bCustomFlag5 : 0; // 0x1D (1)
	char bCustomFlag6 : 0; // 0x1E (1)
	char bCustomFlag7 : 0; // 0x1E (1)
	struct Unknown* AreaClass; // 0x20 (8)
};

// ScriptStruct Engine.NavigationSegmentLink
struct FNavigationSegmentLink : FNavigationLinkBase {
	struct Unknown LeftStart; // 0x30 (12)
	struct Unknown LeftEnd; // 0x3C (12)
	struct Unknown RightStart; // 0x48 (12)
	struct Unknown RightEnd; // 0x54 (12)
};

// ScriptStruct Engine.NavigationLink
struct FNavigationLink : FNavigationLinkBase {
	struct Unknown Left; // 0x30 (12)
	struct Unknown Right; // 0x3C (12)
};

// ScriptStruct Engine.ChannelDefinition
struct FChannelDefinition {
	struct FName ChannelName; // 0x0 (8)
	struct FName ClassName; // 0x8 (8)
	struct Unknown* ChannelClass; // 0x10 (8)
	int32_t StaticChannelIndex; // 0x18 (4)
	char bTickOnCreate : 0; // 0x1C (1)
	char bServerOpen : 0; // 0x1D (1)
	char bClientOpen : 0; // 0x1E (1)
	char bInitialServer : 0; // 0x1F (1)
	char bInitialClient : 0; // 0x20 (1)
};

// ScriptStruct Engine.PacketSimulationSettings
struct FPacketSimulationSettings {
	int32_t PktLoss; // 0x0 (4)
	int32_t PktLossMaxSize; // 0x4 (4)
	int32_t PktLossMinSize; // 0x8 (4)
	int32_t PktOrder; // 0xC (4)
	int32_t PktDup; // 0x10 (4)
	int32_t PktLag; // 0x14 (4)
	int32_t PktLagVariance; // 0x18 (4)
	int32_t PktLagMin; // 0x1C (4)
	int32_t PktLagMax; // 0x20 (4)
	int32_t PktIncomingLagMin; // 0x24 (4)
	int32_t PktIncomingLagMax; // 0x28 (4)
	int32_t PktIncomingLoss; // 0x2C (4)
	int32_t PktJitter; // 0x30 (4)
};

// ScriptStruct Engine.NetworkEmulationProfileDescription
struct FNetworkEmulationProfileDescription {
	struct FString ProfileName; // 0x0 (16)
	struct FString Tooltip; // 0x10 (16)
};

// ScriptStruct Engine.NodeItem
struct FNodeItem {
	struct FName ParentName; // 0x0 (8)
	struct Unknown Transform; // 0x10 (48)
};

// ScriptStruct Engine.ParticleBurst
struct FParticleBurst {
	int32_t Count; // 0x0 (4)
	int32_t CountLow; // 0x4 (4)
	float Time; // 0x8 (4)
};

// ScriptStruct Engine.ParticleRandomSeedInfo
struct FParticleRandomSeedInfo {
	struct FName ParameterName; // 0x0 (8)
	char bGetSeedFromInstance : 0; // 0x8 (1)
	char bInstanceSeedIsIndex : 0; // 0x8 (1)
	char bResetSeedOnEmitterLooping : 0; // 0x8 (1)
	char bRandomlySelectSeedArray : 0; // 0x8 (1)
	struct TArray<Unknown> RandomSeeds; // 0x10 (16)
};

// ScriptStruct Engine.ParticleCurvePair
struct FParticleCurvePair {
	struct FString CurveName; // 0x0 (16)
	struct Unknown CurveObject; // 0x10 (8)
};

// ScriptStruct Engine.BeamModifierOptions
struct FBeamModifierOptions {
	char bModify : 0; // 0x0 (1)
	char bScale : 0; // 0x0 (1)
	char bLock : 0; // 0x0 (1)
};

// ScriptStruct Engine.ParticleEvent_GenerateInfo
struct FParticleEvent_GenerateInfo {
	char Type; // 0x0 (1)
	int32_t Frequency; // 0x4 (4)
	int32_t ParticleFrequency; // 0x8 (4)
	char FirstTimeOnly : 0; // 0xC (1)
	char LastTimeOnly : 0; // 0xC (1)
	char UseReflectedImpactVector : 0; // 0xC (1)
	char bUseOrbitOffset : 0; // 0xC (1)
	struct FName CustomName; // 0x10 (8)
	struct TArray<Unknown> ParticleModuleEventsToSendToGame; // 0x18 (16)
};

// ScriptStruct Engine.LocationBoneSocketInfo
struct FLocationBoneSocketInfo {
	struct FName BoneSocketName; // 0x0 (8)
	struct Unknown Offset; // 0x8 (12)
};

// ScriptStruct Engine.OrbitOptions
struct FOrbitOptions {
	char bProcessDuringSpawn : 0; // 0x0 (1)
	char bProcessDuringUpdate : 0; // 0x0 (1)
	char bUseEmitterTime : 0; // 0x0 (1)
};

// ScriptStruct Engine.EmitterDynamicParameter
struct FEmitterDynamicParameter {
	struct FName ParamName; // 0x0 (8)
	char bUseEmitterTime : 0; // 0x8 (1)
	char bSpawnTimeOnly : 0; // 0x8 (1)
	char ValueMethod; // 0xC (1)
	char bScaleVelocityByParamValue : 0; // 0x10 (1)
	struct Unknown ParamValue; // 0x18 (48)
};

// ScriptStruct Engine.BeamTargetData
struct FBeamTargetData {
	struct FName TargetName; // 0x0 (8)
	float TargetPercentage; // 0x8 (4)
};

// ScriptStruct Engine.GPUSpriteResourceData
struct FGPUSpriteResourceData {
	struct TArray<Unknown> QuantizedColorSamples; // 0x0 (16)
	struct TArray<Unknown> QuantizedMiscSamples; // 0x10 (16)
	struct TArray<Unknown> QuantizedSimulationAttrSamples; // 0x20 (16)
	struct Unknown ColorScale; // 0x30 (16)
	struct Unknown ColorBias; // 0x40 (16)
	struct Unknown MiscScale; // 0x50 (16)
	struct Unknown MiscBias; // 0x60 (16)
	struct Unknown SimulationAttrCurveScale; // 0x70 (16)
	struct Unknown SimulationAttrCurveBias; // 0x80 (16)
	struct Unknown SubImageSize; // 0x90 (16)
	struct Unknown SizeBySpeed; // 0xA0 (16)
	struct Unknown ConstantAcceleration; // 0xB0 (12)
	struct Unknown OrbitOffsetBase; // 0xBC (12)
	struct Unknown OrbitOffsetRange; // 0xC8 (12)
	struct Unknown OrbitFrequencyBase; // 0xD4 (12)
	struct Unknown OrbitFrequencyRange; // 0xE0 (12)
	struct Unknown OrbitPhaseBase; // 0xEC (12)
	struct Unknown OrbitPhaseRange; // 0xF8 (12)
	float GlobalVectorFieldScale; // 0x104 (4)
	float GlobalVectorFieldTightness; // 0x108 (4)
	float PerParticleVectorFieldScale; // 0x10C (4)
	float PerParticleVectorFieldBias; // 0x110 (4)
	float DragCoefficientScale; // 0x114 (4)
	float DragCoefficientBias; // 0x118 (4)
	float ResilienceScale; // 0x11C (4)
	float ResilienceBias; // 0x120 (4)
	float CollisionRadiusScale; // 0x124 (4)
	float CollisionRadiusBias; // 0x128 (4)
	float CollisionTimeBias; // 0x12C (4)
	float CollisionRandomSpread; // 0x130 (4)
	float CollisionRandomDistribution; // 0x134 (4)
	float OneMinusFriction; // 0x138 (4)
	float RotationRateScale; // 0x13C (4)
	float CameraMotionBlurAmount; // 0x140 (4)
	char ScreenAlignment; // 0x144 (1)
	char LockAxisFlag; // 0x145 (1)
	struct Unknown PivotOffset; // 0x148 (8)
	char bRemoveHMDRoll : 0; // 0x150 (1)
	float MinFacingCameraBlendDistance; // 0x154 (4)
	float MaxFacingCameraBlendDistance; // 0x158 (4)
};

// ScriptStruct Engine.GPUSpriteEmitterInfo
struct FGPUSpriteEmitterInfo {
	struct Unknown RequiredModule; // 0x0 (8)
	struct Unknown SpawnModule; // 0x8 (8)
	struct Unknown SpawnPerUnitModule; // 0x10 (8)
	struct TArray<Unknown> SpawnModules; // 0x18 (16)
	struct Unknown LocalVectorField; // 0x30 (112)
	struct Unknown VectorFieldScale; // 0xA0 (32)
	struct Unknown DragCoefficient; // 0xC0 (32)
	struct Unknown PointAttractorStrength; // 0xE0 (32)
	struct Unknown Resilience; // 0x100 (32)
	struct Unknown ConstantAcceleration; // 0x120 (12)
	struct Unknown PointAttractorPosition; // 0x12C (12)
	float PointAttractorRadiusSq; // 0x138 (4)
	struct Unknown OrbitOffsetBase; // 0x13C (12)
	struct Unknown OrbitOffsetRange; // 0x148 (12)
	struct Unknown InvMaxSize; // 0x154 (8)
	float InvRotationRateScale; // 0x15C (4)
	float MaxLifetime; // 0x160 (4)
	int32_t MaxParticleCount; // 0x164 (4)
	char ScreenAlignment; // 0x168 (1)
	char LockAxisFlag; // 0x169 (1)
	char bEnableCollision : 0; // 0x16C (1)
	char CollisionMode; // 0x170 (1)
	char bRemoveHMDRoll : 0; // 0x174 (1)
	float MinFacingCameraBlendDistance; // 0x178 (4)
	float MaxFacingCameraBlendDistance; // 0x17C (4)
	struct Unknown DynamicColor; // 0x180 (72)
	struct Unknown DynamicAlpha; // 0x1C8 (48)
	struct Unknown DynamicColorScale; // 0x1F8 (72)
	struct Unknown DynamicAlphaScale; // 0x240 (48)
};

// ScriptStruct Engine.GPUSpriteLocalVectorFieldInfo
struct FGPUSpriteLocalVectorFieldInfo {
	struct Unknown Field; // 0x0 (8)
	struct Unknown Transform; // 0x10 (48)
	struct Unknown MinInitialRotation; // 0x40 (12)
	struct Unknown MaxInitialRotation; // 0x4C (12)
	struct Unknown RotationRate; // 0x58 (12)
	float Intensity; // 0x64 (4)
	float Tightness; // 0x68 (4)
	char bIgnoreComponentTransform : 0; // 0x6C (1)
	char bTileX : 0; // 0x6C (1)
	char bTileY : 0; // 0x6C (1)
	char bTileZ : 0; // 0x6C (1)
	char bUseFixDT : 0; // 0x6C (1)
};

// ScriptStruct Engine.NamedEmitterMaterial
struct FNamedEmitterMaterial {
	struct FName Name; // 0x0 (8)
	struct Unknown Material; // 0x8 (8)
};

// ScriptStruct Engine.LODSoloTrack
struct FLODSoloTrack {
	struct TArray<Unknown> SoloEnableSetting; // 0x0 (16)
};

// ScriptStruct Engine.ParticleSysParam
struct FParticleSysParam {
	struct FName Name; // 0x0 (8)
	char ParamType; // 0x8 (1)
	float Scalar; // 0xC (4)
	float Scalar_Low; // 0x10 (4)
	struct Unknown Vector; // 0x14 (12)
	struct Unknown Vector_Low; // 0x20 (12)
	struct Unknown Color; // 0x2C (4)
	struct Unknown Actor; // 0x30 (8)
	struct Unknown Material; // 0x38 (8)
};

// ScriptStruct Engine.PhysicalAnimationData
struct FPhysicalAnimationData {
	struct FName BodyName; // 0x0 (8)
	char bIsLocalSimulation : 0; // 0x8 (1)
	float OrientationStrength; // 0xC (4)
	float AngularVelocityStrength; // 0x10 (4)
	float PositionStrength; // 0x14 (4)
	float VelocityStrength; // 0x18 (4)
	float MaxLinearForce; // 0x1C (4)
	float MaxAngularForce; // 0x20 (4)
};

// ScriptStruct Engine.TireFrictionScalePair
struct FTireFrictionScalePair {
	struct Unknown TireType; // 0x0 (8)
	float FrictionScale; // 0x8 (4)
};

// ScriptStruct Engine.PhysicalAnimationProfile
struct FPhysicalAnimationProfile {
	struct FName ProfileName; // 0x0 (8)
	struct Unknown PhysicalAnimationData; // 0x8 (36)
};

// ScriptStruct Engine.PhysicsConstraintProfileHandle
struct FPhysicsConstraintProfileHandle {
	struct Unknown ProfileProperties; // 0x0 (260)
	struct FName ProfileName; // 0x104 (8)
};

// ScriptStruct Engine.ChaosPhysicsSettings
struct FChaosPhysicsSettings {
	enum class Unknow DefaultThreadingModel; // 0x0 (1)
	enum class Unknow DedicatedThreadTickMode; // 0x1 (1)
	enum class Unknow DedicatedThreadBufferMode; // 0x2 (1)
};

// ScriptStruct Engine.PhysicalSurfaceName
struct FPhysicalSurfaceName {
	char Type; // 0x0 (1)
	struct FName Name; // 0x4 (8)
};

// ScriptStruct Engine.DelegateArray
struct FDelegateArray {
	struct TArray<Unknown> Delegates; // 0x0 (16)
};

// ScriptStruct Engine.TViewTarget
struct FTViewTarget {
	struct Unknown Target; // 0x0 (8)
	struct Unknown POV; // 0x10 (1616)
	struct Unknown PlayerState; // 0x660 (8)
};

// ScriptStruct Engine.CameraCacheEntry
struct FCameraCacheEntry {
	float Timestamp; // 0x0 (4)
	struct Unknown POV; // 0x10 (1616)
};

// ScriptStruct Engine.InputActionSpeechMapping
struct FInputActionSpeechMapping {
	struct FName ActionName; // 0x0 (8)
	struct FName SpeechKeyword; // 0x8 (8)
};

// ScriptStruct Engine.InputAxisKeyMapping
struct FInputAxisKeyMapping {
	struct FName AxisActionName; // 0x0 (8)
	struct FName AxisName; // 0x8 (8)
	float Scale; // 0x10 (4)
	struct Unknown Key; // 0x18 (24)
};

// ScriptStruct Engine.InputAxisConfigEntry
struct FInputAxisConfigEntry {
	struct FName AxisKeyName; // 0x0 (8)
	struct Unknown AxisProperties; // 0x8 (16)
};

// ScriptStruct Engine.InputAxisProperties
struct FInputAxisProperties {
	float DeadZone; // 0x0 (4)
	float Sensitivity; // 0x4 (4)
	float Exponent; // 0x8 (4)
	char bInvert : 0; // 0xC (1)
};

// ScriptStruct Engine.KeyBind
struct FKeyBind {
	struct Unknown Key; // 0x0 (24)
	struct FString Command; // 0x18 (16)
	char Control : 0; // 0x28 (1)
	char Shift : 0; // 0x28 (1)
	char Alt : 0; // 0x28 (1)
	char Cmd : 0; // 0x28 (1)
	char bIgnoreCtrl : 0; // 0x28 (1)
	char bIgnoreShift : 0; // 0x28 (1)
	char bIgnoreAlt : 0; // 0x28 (1)
	char bIgnoreCmd : 0; // 0x28 (1)
	char bDisabled : 0; // 0x29 (1)
};

// ScriptStruct Engine.PlayerMuteList
struct FPlayerMuteList {
	char bHasVoiceHandshakeCompleted : 0; // 0x30 (1)
	int32_t VoiceChannelIdx; // 0x34 (4)
};

// ScriptStruct Engine.PoseDataContainer
struct FPoseDataContainer {
	struct TArray<Unknown> PoseNames; // 0x0 (16)
	struct TArray<Unknown> Tracks; // 0x10 (16)
	struct TMap<Unknown, Unknown> TrackMap; // 0x20 (80)
	struct TArray<Unknown> Poses; // 0x70 (16)
	struct TArray<Unknown> Curves; // 0x80 (16)
};

// ScriptStruct Engine.PoseData
struct FPoseData {
	struct TArray<Unknown> LocalSpacePose; // 0x0 (16)
	struct TMap<Unknown, Unknown> TrackToBufferIndex; // 0x10 (80)
	struct TArray<Unknown> CurveData; // 0x60 (16)
};

// ScriptStruct Engine.PreviewAssetAttachContainer
struct FPreviewAssetAttachContainer {
	struct TArray<Unknown> AttachedObjects; // 0x0 (16)
};

// ScriptStruct Engine.PreviewAttachedObjectPair
struct FPreviewAttachedObjectPair {
	struct Unknown AttachedObject; // 0x0 (40)
	struct Unknown Object; // 0x28 (8)
	struct FName AttachedTo; // 0x30 (8)
};

// ScriptStruct Engine.PreviewMeshCollectionEntry
struct FPreviewMeshCollectionEntry {
	struct Unknown SkeletalMesh; // 0x0 (40)
};

// ScriptStruct Engine.PrimitiveComponentInstanceData
struct FPrimitiveComponentInstanceData : FSceneComponentInstanceData {
	struct Unknown ComponentTransform; // 0xB0 (48)
	int32_t VisibilityId; // 0xE0 (4)
	struct Unknown LODParent; // 0xE8 (8)
};

// ScriptStruct Engine.SpriteCategoryInfo
struct FSpriteCategoryInfo {
	struct FName Category; // 0x0 (8)
	struct FText DisplayName; // 0x8 (24)
	struct FText Description; // 0x20 (24)
};

// ScriptStruct Engine.ReverbSettings
struct FReverbSettings {
	char bApplyReverb : 0; // 0x0 (1)
	struct Unknown ReverbEffect; // 0x8 (8)
	struct Unknown ReverbPluginEffect; // 0x10 (8)
	float Volume; // 0x18 (4)
	float FadeTime; // 0x1C (4)
};

// ScriptStruct Engine.TransformBase
struct FTransformBase {
	struct FName Node; // 0x0 (8)
	struct Unknown Constraints[0x2]; // 0x8 (32)
};

// ScriptStruct Engine.TransformBaseConstraint
struct FTransformBaseConstraint {
	struct TArray<Unknown> TransformConstraints; // 0x0 (16)
};

// ScriptStruct Engine.RigTransformConstraint
struct FRigTransformConstraint {
	char TranformType; // 0x0 (1)
	struct FName ParentSpace; // 0x4 (8)
	float Weight; // 0xC (4)
};

// ScriptStruct Engine.Node
struct FNode {
	struct FName Name; // 0x0 (8)
	struct FName ParentName; // 0x8 (8)
	struct Unknown Transform; // 0x10 (48)
	struct FString DisplayName; // 0x40 (16)
	char bAdvanced : 0; // 0x50 (1)
};

// ScriptStruct Engine.RootMotionSource
struct FRootMotionSource {
	uint16_t Priority; // 0x10 (2)
	uint16_t LocalID; // 0x12 (2)
	enum class Unknow AccumulateMode; // 0x14 (1)
	struct FName InstanceName; // 0x18 (8)
	float StartTime; // 0x20 (4)
	float CurrentTime; // 0x24 (4)
	float PreviousTime; // 0x28 (4)
	float Duration; // 0x2C (4)
	struct Unknown status; // 0x30 (1)
	struct Unknown Settings; // 0x31 (1)
	char bInLocalSpace : 0; // 0x32 (1)
	struct Unknown RootMotionParams; // 0x40 (64)
	struct Unknown FinishVelocityParams; // 0x80 (20)
};

// ScriptStruct Engine.RootMotionFinishVelocitySettings
struct FRootMotionFinishVelocitySettings {
	enum class Unknow Mode; // 0x0 (1)
	struct Unknown SetVelocity; // 0x4 (12)
	float ClampVelocity; // 0x10 (4)
};

// ScriptStruct Engine.RootMotionSourceStatus
struct FRootMotionSourceStatus {
	char Flags; // 0x0 (1)
};

// ScriptStruct Engine.RootMotionSource_JumpForce
struct FRootMotionSource_JumpForce : FRootMotionSource {
	struct Unknown Rotation; // 0x98 (12)
	float Distance; // 0xA4 (4)
	float Height; // 0xA8 (4)
	char bDisableTimeout : 0; // 0xAC (1)
	struct Unknown PathOffsetCurve; // 0xB0 (8)
	struct Unknown TimeMappingCurve; // 0xB8 (8)
};

// ScriptStruct Engine.RootMotionSource_MoveToDynamicForce
struct FRootMotionSource_MoveToDynamicForce : FRootMotionSource {
	struct Unknown StartLocation; // 0x98 (12)
	struct Unknown InitialTargetLocation; // 0xA4 (12)
	struct Unknown TargetLocation; // 0xB0 (12)
	char bRestrictSpeedToExpected : 0; // 0xBC (1)
	struct Unknown PathOffsetCurve; // 0xC0 (8)
	struct Unknown TimeMappingCurve; // 0xC8 (8)
};

// ScriptStruct Engine.RootMotionSource_MoveToForce
struct FRootMotionSource_MoveToForce : FRootMotionSource {
	struct Unknown StartLocation; // 0x98 (12)
	struct Unknown TargetLocation; // 0xA4 (12)
	char bRestrictSpeedToExpected : 0; // 0xB0 (1)
	struct Unknown PathOffsetCurve; // 0xB8 (8)
};

// ScriptStruct Engine.RootMotionSource_RadialForce
struct FRootMotionSource_RadialForce : FRootMotionSource {
	struct Unknown Location; // 0x98 (12)
	struct Unknown LocationActor; // 0xA8 (8)
	float Radius; // 0xB0 (4)
	float Strength; // 0xB4 (4)
	char bIsPush : 0; // 0xB8 (1)
	char bNoZForce : 0; // 0xB9 (1)
	struct Unknown StrengthDistanceFalloff; // 0xC0 (8)
	struct Unknown StrengthOverTime; // 0xC8 (8)
	char bUseFixedWorldDirection : 0; // 0xD0 (1)
	struct Unknown FixedWorldDirection; // 0xD4 (12)
};

// ScriptStruct Engine.RootMotionSource_ConstantForce
struct FRootMotionSource_ConstantForce : FRootMotionSource {
	struct Unknown Force; // 0x98 (12)
	struct Unknown StrengthOverTime; // 0xA8 (8)
};

// ScriptStruct Engine.CameraExposureSettings
struct FCameraExposureSettings {
	char Method; // 0x0 (1)
	float LowPercent; // 0x4 (4)
	float HighPercent; // 0x8 (4)
	float MinBrightness; // 0xC (4)
	float MaxBrightness; // 0x10 (4)
	float SpeedUp; // 0x14 (4)
	float SpeedDown; // 0x18 (4)
	float Bias; // 0x1C (4)
	struct Unknown BiasCurve; // 0x20 (8)
	struct Unknown MeterMask; // 0x28 (8)
	float HistogramLogMin; // 0x30 (4)
	float HistogramLogMax; // 0x34 (4)
	float CalibrationConstant; // 0x38 (4)
	char ApplyPhysicalCameraExposure : 0; // 0x3C (1)
};

// ScriptStruct Engine.LensSettings
struct FLensSettings {
	struct Unknown Bloom; // 0x0 (184)
	struct Unknown Imperfections; // 0xB8 (32)
	float ChromaticAberration; // 0xD8 (4)
};

// ScriptStruct Engine.LensImperfectionSettings
struct FLensImperfectionSettings {
	struct Unknown DirtMask; // 0x0 (8)
	float DirtMaskIntensity; // 0x8 (4)
	struct Unknown DirtMaskTint; // 0xC (16)
};

// ScriptStruct Engine.LensBloomSettings
struct FLensBloomSettings {
	struct Unknown GaussianSum; // 0x0 (132)
	struct Unknown Convolution; // 0x88 (40)
	char Method; // 0xB0 (1)
};

// ScriptStruct Engine.ConvolutionBloomSettings
struct FConvolutionBloomSettings {
	struct Unknown Texture; // 0x0 (8)
	float Size; // 0x8 (4)
	struct Unknown CenterUV; // 0xC (8)
	float PreFilterMin; // 0x14 (4)
	float PreFilterMax; // 0x18 (4)
	float PreFilterMult; // 0x1C (4)
	float BufferScale; // 0x20 (4)
};

// ScriptStruct Engine.GaussianSumBloomSettings
struct FGaussianSumBloomSettings {
	float Intensity; // 0x0 (4)
	float threshold; // 0x4 (4)
	float SizeScale; // 0x8 (4)
	float Filter1Size; // 0xC (4)
	float Filter2Size; // 0x10 (4)
	float Filter3Size; // 0x14 (4)
	float Filter4Size; // 0x18 (4)
	float Filter5Size; // 0x1C (4)
	float Filter6Size; // 0x20 (4)
	struct Unknown Filter1Tint; // 0x24 (16)
	struct Unknown Filter2Tint; // 0x34 (16)
	struct Unknown Filter3Tint; // 0x44 (16)
	struct Unknown Filter4Tint; // 0x54 (16)
	struct Unknown Filter5Tint; // 0x64 (16)
	struct Unknown Filter6Tint; // 0x74 (16)
};

// ScriptStruct Engine.FilmStockSettings
struct FFilmStockSettings {
	float Slope; // 0x0 (4)
	float Toe; // 0x4 (4)
	float Shoulder; // 0x8 (4)
	float BlackClip; // 0xC (4)
	float WhiteClip; // 0x10 (4)
};

// ScriptStruct Engine.ColorGradingSettings
struct FColorGradingSettings {
	struct Unknown Global; // 0x0 (80)
	struct Unknown Shadows; // 0x50 (80)
	struct Unknown Midtones; // 0xA0 (80)
	struct Unknown Highlights; // 0xF0 (80)
	float ShadowsMax; // 0x140 (4)
	float HighlightsMin; // 0x144 (4)
};

// ScriptStruct Engine.ColorGradePerRangeSettings
struct FColorGradePerRangeSettings {
	struct Unknown Saturation; // 0x0 (16)
	struct Unknown Contrast; // 0x10 (16)
	struct Unknown Gamma; // 0x20 (16)
	struct Unknown Gain; // 0x30 (16)
	struct Unknown Offset; // 0x40 (16)
};

// ScriptStruct Engine.EngineShowFlagsSetting
struct FEngineShowFlagsSetting {
	struct FString ShowFlagName; // 0x0 (16)
	char Enabled : 0; // 0x10 (1)
};

// ScriptStruct Engine.SimpleCurve
struct FSimpleCurve : FRealCurve {
	char InterpMode; // 0x70 (1)
	struct TArray<Unknown> Keys; // 0x78 (16)
};

// ScriptStruct Engine.SimpleCurveKey
struct FSimpleCurveKey {
	float Time; // 0x0 (4)
	float Value; // 0x4 (4)
};

// ScriptStruct Engine.SingleAnimationPlayData
struct FSingleAnimationPlayData {
	struct Unknown AnimToPlay; // 0x0 (8)
	char bSavedLooping : 0; // 0x8 (1)
	char bSavedPlaying : 0; // 0x8 (1)
	float SavedPosition; // 0xC (4)
	float SavedPlayRate; // 0x10 (4)
};

// ScriptStruct Engine.SkeletalMaterial
struct FSkeletalMaterial {
	struct Unknown MaterialInterface; // 0x0 (8)
	struct FName MaterialSlotName; // 0x8 (8)
	struct Unknown UVChannelData; // 0x10 (20)
};

// ScriptStruct Engine.ClothingAssetData_Legacy
struct FClothingAssetData_Legacy {
	struct FName AssetName; // 0x0 (8)
	struct FString ApexFileName; // 0x8 (16)
	char bClothPropertiesChanged : 0; // 0x18 (1)
	struct Unknown PhysicsProperties; // 0x1C (80)
};

// ScriptStruct Engine.ClothPhysicsProperties_Legacy
struct FClothPhysicsProperties_Legacy {
	float VerticalResistance; // 0x0 (4)
	float HorizontalResistance; // 0x4 (4)
	float BendResistance; // 0x8 (4)
	float ShearResistance; // 0xC (4)
	float Friction; // 0x10 (4)
	float Damping; // 0x14 (4)
	float TetherStiffness; // 0x18 (4)
	float TetherLimit; // 0x1C (4)
	float Drag; // 0x20 (4)
	float StiffnessFrequency; // 0x24 (4)
	float GravityScale; // 0x28 (4)
	float MassScale; // 0x2C (4)
	float InertiaBlend; // 0x30 (4)
	float SelfCollisionThickness; // 0x34 (4)
	float SelfCollisionSquashScale; // 0x38 (4)
	float SelfCollisionStiffness; // 0x3C (4)
	float SolverFrequency; // 0x40 (4)
	float FiberCompression; // 0x44 (4)
	float FiberExpansion; // 0x48 (4)
	float FiberResistance; // 0x4C (4)
};

// ScriptStruct Engine.SkeletalMeshLODInfo
struct FSkeletalMeshLODInfo {
	struct Unknown ScreenSize; // 0x0 (4)
	float LODHysteresis; // 0x4 (4)
	struct TArray<Unknown> LODMaterialMap; // 0x8 (16)
	struct Unknown BuildSettings; // 0x18 (20)
	struct Unknown ReductionSettings; // 0x2C (60)
	struct TArray<Unknown> BonesToRemove; // 0x68 (16)
	struct TArray<Unknown> BonesToPrioritize; // 0x78 (16)
	float WeightOfPrioritization; // 0x88 (4)
	struct Unknown BakePose; // 0x90 (8)
	struct Unknown BakePoseOverride; // 0x98 (8)
	struct FString SourceImportFilename; // 0xA0 (16)
	enum class Unknow SkinCacheUsage; // 0xB0 (1)
	char bHasBeenSimplified : 0; // 0xB1 (1)
	char bHasPerLODVertexColors : 0; // 0xB1 (1)
	char bAllowCPUAccess : 0; // 0xB1 (1)
	char bSupportUniformlyDistributedSampling : 0; // 0xB1 (1)
};

// ScriptStruct Engine.SkeletalMeshOptimizationSettings
struct FSkeletalMeshOptimizationSettings {
	char TerminationCriterion; // 0x0 (1)
	float NumOfTrianglesPercentage; // 0x4 (4)
	float NumOfVertPercentage; // 0x8 (4)
	uint32_t MaxNumOfTriangles; // 0xC (4)
	uint32_t MaxNumOfVerts; // 0x10 (4)
	float MaxDeviationPercentage; // 0x14 (4)
	char ReductionMethod; // 0x18 (1)
	char SilhouetteImportance; // 0x19 (1)
	char TextureImportance; // 0x1A (1)
	char ShadingImportance; // 0x1B (1)
	char SkinningImportance; // 0x1C (1)
	char bRemapMorphTargets : 0; // 0x1D (1)
	char bRecalcNormals : 0; // 0x1D (1)
	float WeldingThreshold; // 0x20 (4)
	float NormalsThreshold; // 0x24 (4)
	int32_t MaxBonesPerVertex; // 0x28 (4)
	char bEnforceBoneBoundaries : 0; // 0x2C (1)
	float VolumeImportance; // 0x30 (4)
	char bLockEdges : 0; // 0x34 (1)
	char bLockColorBounaries : 0; // 0x34 (1)
	int32_t BaseLOD; // 0x38 (4)
};

// ScriptStruct Engine.SkeletalMeshClothBuildParams
struct FSkeletalMeshClothBuildParams {
	struct TWeakObjectPtr<struct Unknown> TargetAsset; // 0x0 (8)
	int32_t TargetLod; // 0x8 (4)
	char bRemapParameters : 0; // 0xC (1)
	struct FString AssetName; // 0x10 (16)
	int32_t LODIndex; // 0x20 (4)
	int32_t SourceSection; // 0x24 (4)
	char bRemoveFromMesh : 0; // 0x28 (1)
	struct Unknown PhysicsAsset; // 0x30 (40)
};

// ScriptStruct Engine.BoneMirrorExport
struct FBoneMirrorExport {
	struct FName BoneName; // 0x0 (8)
	struct FName SourceBoneName; // 0x8 (8)
	char BoneFlipAxis; // 0x10 (1)
};

// ScriptStruct Engine.BoneMirrorInfo
struct FBoneMirrorInfo {
	int32_t SourceIndex; // 0x0 (4)
	char BoneFlipAxis; // 0x4 (1)
};

// ScriptStruct Engine.SkeletalMeshLODGroupSettings
struct FSkeletalMeshLODGroupSettings {
	struct Unknown ScreenSize; // 0x0 (4)
	float LODHysteresis; // 0x4 (4)
	enum class Unknow BoneFilterActionOption; // 0x8 (1)
	struct TArray<Unknown> BoneList; // 0x10 (16)
	struct TArray<Unknown> BonesToPrioritize; // 0x20 (16)
	float WeightOfPrioritization; // 0x30 (4)
	struct Unknown BakePose; // 0x38 (8)
	struct Unknown ReductionSettings; // 0x40 (60)
};

// ScriptStruct Engine.BoneFilter
struct FBoneFilter {
	char bExcludeSelf : 0; // 0x0 (1)
	struct FName BoneName; // 0x4 (8)
};

// ScriptStruct Engine.SkeletalMeshSamplingInfo
struct FSkeletalMeshSamplingInfo {
	struct TArray<Unknown> Regions; // 0x0 (16)
	struct Unknown BuiltData; // 0x10 (32)
};

// ScriptStruct Engine.SkeletalMeshSamplingBuiltData
struct FSkeletalMeshSamplingBuiltData {
	struct TArray<Unknown> WholeMeshBuiltData; // 0x0 (16)
	struct TArray<Unknown> RegionBuiltData; // 0x10 (16)
};

// ScriptStruct Engine.SkeletalMeshSamplingRegion
struct FSkeletalMeshSamplingRegion {
	struct FName Name; // 0x0 (8)
	int32_t LODIndex; // 0x8 (4)
	char bSupportUniformlyDistributedSampling : 0; // 0xC (1)
	struct TArray<Unknown> MaterialFilters; // 0x10 (16)
	struct TArray<Unknown> BoneFilters; // 0x20 (16)
};

// ScriptStruct Engine.SkeletalMeshSamplingRegionBoneFilter
struct FSkeletalMeshSamplingRegionBoneFilter {
	struct FName BoneName; // 0x0 (8)
	char bIncludeOrExclude : 0; // 0x8 (1)
	char bApplyToChildren : 0; // 0x8 (1)
};

// ScriptStruct Engine.SkeletalMeshSamplingRegionMaterialFilter
struct FSkeletalMeshSamplingRegionMaterialFilter {
	struct FName MaterialName; // 0x0 (8)
};

// ScriptStruct Engine.VirtualBone
struct FVirtualBone {
	struct FName SourceBoneName; // 0x10 (8)
	struct FName TargetBoneName; // 0x4 (8)
	struct FName VirtualBoneName; // 0x18 (8)
};

// ScriptStruct Engine.AnimSlotGroup
struct FAnimSlotGroup {
	struct FName GroupName; // 0x18 (8)
	struct TArray<Unknown> SlotNames; // 0x8 (16)
};

// ScriptStruct Engine.RigConfiguration
struct FRigConfiguration {
	struct Unknown Rig; // 0x20 (8)
	struct TArray<Unknown> BoneMappingTable; // 0x8 (16)
};

// ScriptStruct Engine.NameMapping
struct FNameMapping {
	struct FName NodeName; // 0x4 (8)
	struct FName BoneName; // 0x10 (8)
};

// ScriptStruct Engine.BoneReductionSetting
struct FBoneReductionSetting {
	struct TArray<Unknown> BonesToRemove; // 0x8 (16)
};

// ScriptStruct Engine.ReferencePose
struct FReferencePose {
	struct FName PoseName; // 0x18 (8)
	struct TArray<Unknown> ReferencePose; // 0x8 (16)
};

// ScriptStruct Engine.BoneNode
struct FBoneNode {
	struct FName Name; // 0x4 (8)
	int32_t ParentIndex; // 0x18 (4)
	char TranslationRetargetingMode; // 0x14 (1)
};

// ScriptStruct Engine.SkeletonToMeshLinkup
struct FSkeletonToMeshLinkup {
	struct TArray<Unknown> SkeletonToMeshTable; // 0x20 (16)
	struct TArray<Unknown> MeshToSkeletonTable; // 0x8 (16)
};

// ScriptStruct Engine.SkelMeshComponentLODInfo
struct FSkelMeshComponentLODInfo {
	struct TArray<Unknown> HiddenMaterials; // 0x0 (16)
};

// ScriptStruct Engine.SkelMeshSkinWeightInfo
struct FSkelMeshSkinWeightInfo {
	int32_t Bones[0xc]; // 0x0 (48)
	char Weights[0xc]; // 0x30 (12)
};

// ScriptStruct Engine.SkinWeightProfileInfo
struct FSkinWeightProfileInfo {
	struct FName Name; // 0x0 (8)
	struct Unknown DefaultProfile; // 0x8 (1)
	struct Unknown DefaultProfileFromLODIndex; // 0xC (4)
};

// ScriptStruct Engine.TentDistribution
struct FTentDistribution {
	float TipAltitude; // 0x0 (4)
	float TipValue; // 0x4 (4)
	float Width; // 0x8 (4)
};

// ScriptStruct Engine.PrecomputedSkyLightInstanceData
struct FPrecomputedSkyLightInstanceData : FSceneComponentInstanceData {
	struct Unknown LightGuid; // 0xA8 (16)
	float AverageBrightness; // 0xB8 (4)
};

// ScriptStruct Engine.SoundAttenuationSettings
struct FSoundAttenuationSettings : FBaseAttenuationSettings {
	char bAttenuate : 0; // 0xB0 (1)
	char bSpatialize : 0; // 0xB0 (1)
	char bAttenuateWithLPF : 0; // 0xB0 (1)
	char bEnableListenerFocus : 0; // 0xB0 (1)
	char bEnableFocusInterpolation : 0; // 0xB0 (1)
	char bEnableOcclusion : 0; // 0xB0 (1)
	char bUseComplexCollisionForOcclusion : 0; // 0xB0 (1)
	char bEnableReverbSend : 0; // 0xB0 (1)
	char bEnablePriorityAttenuation : 0; // 0xB1 (1)
	char bApplyNormalizationToStereoSounds : 0; // 0xB1 (1)
	char bEnableLogFrequencyScaling : 0; // 0xB1 (1)
	char bEnableSubmixSends : 0; // 0xB1 (1)
	char SpatializationAlgorithm; // 0xB2 (1)
	float BinauralRadius; // 0xB4 (4)
	enum class Unknow AbsorptionMethod; // 0xB8 (1)
	char OcclusionTraceChannel; // 0xB9 (1)
	enum class Unknow ReverbSendMethod; // 0xBA (1)
	enum class Unknow PriorityAttenuationMethod; // 0xBB (1)
	float OmniRadius; // 0xBC (4)
	float StereoSpread; // 0xC0 (4)
	float LPFRadiusMin; // 0xC4 (4)
	float LPFRadiusMax; // 0xC8 (4)
	struct Unknown CustomLowpassAirAbsorptionCurve; // 0xD0 (136)
	struct Unknown CustomHighpassAirAbsorptionCurve; // 0x158 (136)
	float LPFFrequencyAtMin; // 0x1E0 (4)
	float LPFFrequencyAtMax; // 0x1E4 (4)
	float HPFFrequencyAtMin; // 0x1E8 (4)
	float HPFFrequencyAtMax; // 0x1EC (4)
	float FocusAzimuth; // 0x1F0 (4)
	float NonFocusAzimuth; // 0x1F4 (4)
	float FocusDistanceScale; // 0x1F8 (4)
	float NonFocusDistanceScale; // 0x1FC (4)
	float FocusPriorityScale; // 0x200 (4)
	float NonFocusPriorityScale; // 0x204 (4)
	float FocusVolumeAttenuation; // 0x208 (4)
	float NonFocusVolumeAttenuation; // 0x20C (4)
	float FocusAttackInterpSpeed; // 0x210 (4)
	float FocusReleaseInterpSpeed; // 0x214 (4)
	float OcclusionLowPassFilterFrequency; // 0x218 (4)
	float OcclusionVolumeAttenuation; // 0x21C (4)
	float OcclusionInterpolationTime; // 0x220 (4)
	float ReverbWetLevelMin; // 0x224 (4)
	float ReverbWetLevelMax; // 0x228 (4)
	float ReverbDistanceMin; // 0x22C (4)
	float ReverbDistanceMax; // 0x230 (4)
	float ManualReverbSendLevel; // 0x234 (4)
	struct Unknown CustomReverbSendCurve; // 0x238 (136)
	struct TArray<Unknown> SubmixSendSettings; // 0x2C0 (16)
	float PriorityAttenuationMin; // 0x2D0 (4)
	float PriorityAttenuationMax; // 0x2D4 (4)
	float PriorityAttenuationDistanceMin; // 0x2D8 (4)
	float PriorityAttenuationDistanceMax; // 0x2DC (4)
	float ManualPriorityAttenuation; // 0x2E0 (4)
	struct Unknown CustomPriorityAttenuationCurve; // 0x2E8 (136)
	struct Unknown PluginSettings; // 0x370 (48)
};

// ScriptStruct Engine.SoundAttenuationPluginSettings
struct FSoundAttenuationPluginSettings {
	struct TArray<Unknown> SpatializationPluginSettingsArray; // 0x0 (16)
	struct TArray<Unknown> OcclusionPluginSettingsArray; // 0x10 (16)
	struct TArray<Unknown> ReverbPluginSettingsArray; // 0x20 (16)
};

// ScriptStruct Engine.AttenuationSubmixSendSettings
struct FAttenuationSubmixSendSettings {
	struct Unknown Submix; // 0x0 (8)
	enum class Unknow SubmixSendMethod; // 0x8 (1)
	float SubmixSendLevelMin; // 0xC (4)
	float SubmixSendLevelMax; // 0x10 (4)
	float SubmixSendDistanceMin; // 0x14 (4)
	float SubmixSendDistanceMax; // 0x18 (4)
	float ManualSubmixSendLevel; // 0x1C (4)
	struct Unknown CustomSubmixSendCurve; // 0x20 (136)
};

// ScriptStruct Engine.PassiveSoundMixModifier
struct FPassiveSoundMixModifier {
	struct Unknown SoundMix; // 0x0 (8)
	float MinVolumeThreshold; // 0x8 (4)
	float MaxVolumeThreshold; // 0xC (4)
};

// ScriptStruct Engine.SoundClassProperties
struct FSoundClassProperties {
	float Volume; // 0x0 (4)
	float Pitch; // 0x4 (4)
	float LowPassFilterFrequency; // 0x8 (4)
	float AttenuationDistanceScale; // 0xC (4)
	float StereoBleed; // 0x10 (4)
	float LFEBleed; // 0x14 (4)
	float VoiceCenterChannelVolume; // 0x18 (4)
	float RadioFilterVolume; // 0x1C (4)
	float RadioFilterVolumeThreshold; // 0x20 (4)
	char bApplyEffects : 0; // 0x24 (1)
	char bAlwaysPlay : 0; // 0x24 (1)
	char bIsUISound : 0; // 0x24 (1)
	char bIsMusic : 0; // 0x24 (1)
	char bCenterChannelOnly : 0; // 0x24 (1)
	char bApplyAmbientVolumes : 0; // 0x24 (1)
	char bReverb : 0; // 0x24 (1)
	float Default2DReverbSendAmount; // 0x28 (4)
	char OutputTarget; // 0x2C (1)
	enum class Unknow LoadingBehavior; // 0x2D (1)
	struct Unknown DefaultSubmix; // 0x30 (8)
};

// ScriptStruct Engine.SoundConcurrencySettings
struct FSoundConcurrencySettings {
	int32_t MaxCount; // 0x0 (4)
	char bLimitToOwner : 0; // 0x4 (1)
	char ResolutionRule; // 0x8 (1)
	float VolumeScale; // 0xC (4)
	float VolumeScaleAttackTime; // 0x10 (4)
	char bVolumeScaleCanRelease : 0; // 0x14 (1)
	float VolumeScaleReleaseTime; // 0x18 (4)
	float VoiceStealReleaseTime; // 0x1C (4)
};

// ScriptStruct Engine.SourceEffectChainEntry
struct FSourceEffectChainEntry {
	struct Unknown Preset; // 0x0 (8)
	char bBypass : 0; // 0x8 (1)
};

// ScriptStruct Engine.SoundGroup
struct FSoundGroup {
	char SoundGroup; // 0x0 (1)
	struct FString DisplayName; // 0x8 (16)
	char bAlwaysDecompressOnLoad : 0; // 0x18 (1)
	float DecompressedDuration; // 0x1C (4)
};

// ScriptStruct Engine.SoundClassAdjuster
struct FSoundClassAdjuster {
	struct Unknown SoundClassObject; // 0x0 (8)
	float VolumeAdjuster; // 0x8 (4)
	float PitchAdjuster; // 0xC (4)
	float LowPassFilterFrequency; // 0x10 (4)
	char bApplyToChildren : 0; // 0x14 (1)
	float VoiceCenterChannelVolumeAdjuster; // 0x18 (4)
};

// ScriptStruct Engine.AudioEQEffect
struct FAudioEQEffect : FAudioEffectParameters {
	float FrequencyCenter0; // 0x10 (4)
	float Gain0; // 0x14 (4)
	float Bandwidth0; // 0x18 (4)
	float FrequencyCenter1; // 0x1C (4)
	float Gain1; // 0x20 (4)
	float Bandwidth1; // 0x24 (4)
	float FrequencyCenter2; // 0x28 (4)
	float Gain2; // 0x2C (4)
	float Bandwidth2; // 0x30 (4)
	float FrequencyCenter3; // 0x34 (4)
	float Gain3; // 0x38 (4)
	float Bandwidth3; // 0x3C (4)
};

// ScriptStruct Engine.DistanceDatum
struct FDistanceDatum {
	float FadeInDistanceStart; // 0x0 (4)
	float FadeInDistanceEnd; // 0x4 (4)
	float FadeOutDistanceStart; // 0x8 (4)
	float FadeOutDistanceEnd; // 0xC (4)
	float Volume; // 0x10 (4)
};

// ScriptStruct Engine.ModulatorContinuousParams
struct FModulatorContinuousParams {
	struct FName ParameterName; // 0x0 (8)
	float Default; // 0x8 (4)
	float MinInput; // 0xC (4)
	float MaxInput; // 0x10 (4)
	float MinOutput; // 0x14 (4)
	float MaxOutput; // 0x18 (4)
	char ParamMode; // 0x1C (1)
};

// ScriptStruct Engine.SoundSourceBusSendInfo
struct FSoundSourceBusSendInfo {
	enum class Unknow SourceBusSendLevelControlMethod; // 0x0 (1)
	struct Unknown SoundSourceBus; // 0x8 (8)
	float SendLevel; // 0x10 (4)
	float MinSendLevel; // 0x14 (4)
	float MaxSendLevel; // 0x18 (4)
	float MinSendDistance; // 0x1C (4)
	float MaxSendDistance; // 0x20 (4)
	struct Unknown CustomSendLevelCurve; // 0x28 (136)
};

// ScriptStruct Engine.SoundSubmixSendInfo
struct FSoundSubmixSendInfo {
	enum class Unknow SendLevelControlMethod; // 0x0 (1)
	struct Unknown SoundSubmix; // 0x8 (8)
	float SendLevel; // 0x10 (4)
	float MinSendLevel; // 0x14 (4)
	float MaxSendLevel; // 0x18 (4)
	float MinSendDistance; // 0x1C (4)
	float MaxSendDistance; // 0x20 (4)
	struct Unknown CustomSendLevelCurve; // 0x28 (136)
};

// ScriptStruct Engine.SoundWaveEnvelopeTimeData
struct FSoundWaveEnvelopeTimeData {
	float Amplitude; // 0x0 (4)
	float TimeSec; // 0x4 (4)
};

// ScriptStruct Engine.SoundWaveSpectralTimeData
struct FSoundWaveSpectralTimeData {
	struct TArray<Unknown> Data; // 0x0 (16)
	float TimeSec; // 0x10 (4)
};

// ScriptStruct Engine.SoundWaveSpectralDataEntry
struct FSoundWaveSpectralDataEntry {
	float Magnitude; // 0x0 (4)
	float NormalizedMagnitude; // 0x4 (4)
};

// ScriptStruct Engine.SoundWaveEnvelopeDataPerSound
struct FSoundWaveEnvelopeDataPerSound {
	float Envelope; // 0x0 (4)
	float PlaybackTime; // 0x4 (4)
	struct Unknown SoundWave; // 0x8 (8)
};

// ScriptStruct Engine.SoundWaveSpectralDataPerSound
struct FSoundWaveSpectralDataPerSound {
	struct TArray<Unknown> SpectralData; // 0x0 (16)
	float PlaybackTime; // 0x10 (4)
	struct Unknown SoundWave; // 0x18 (8)
};

// ScriptStruct Engine.SoundWaveSpectralData
struct FSoundWaveSpectralData {
	float FrequencyHz; // 0x0 (4)
	float Magnitude; // 0x4 (4)
	float NormalizedMagnitude; // 0x8 (4)
};

// ScriptStruct Engine.SplineInstanceData
struct FSplineInstanceData : FSceneComponentInstanceData {
	char bSplineHasBeenEdited : 0; // 0xA8 (1)
	struct Unknown SplineCurves; // 0xB0 (104)
	struct Unknown SplineCurvesPreUCS; // 0x118 (104)
};

// ScriptStruct Engine.SplineCurves
struct FSplineCurves {
	struct Unknown Position; // 0x0 (24)
	struct Unknown Rotation; // 0x18 (24)
	struct Unknown Scale; // 0x30 (24)
	struct Unknown ReparamTable; // 0x48 (24)
	struct Unknown MetaData; // 0x60 (8)
};

// ScriptStruct Engine.SplinePoint
struct FSplinePoint {
	float InputKey; // 0x0 (4)
	struct Unknown Position; // 0x4 (12)
	struct Unknown ArriveTangent; // 0x10 (12)
	struct Unknown LeaveTangent; // 0x1C (12)
	struct Unknown Rotation; // 0x28 (12)
	struct Unknown Scale; // 0x34 (12)
	char Type; // 0x40 (1)
};

// ScriptStruct Engine.SplineMeshInstanceData
struct FSplineMeshInstanceData : FSceneComponentInstanceData {
	struct Unknown StartPos; // 0xA8 (12)
	struct Unknown EndPos; // 0xB4 (12)
	struct Unknown StartTangent; // 0xC0 (12)
	struct Unknown EndTangent; // 0xCC (12)
};

// ScriptStruct Engine.SplineMeshParams
struct FSplineMeshParams {
	struct Unknown StartPos; // 0x0 (12)
	struct Unknown StartTangent; // 0xC (12)
	struct Unknown StartScale; // 0x18 (8)
	float StartRoll; // 0x20 (4)
	struct Unknown StartOffset; // 0x24 (8)
	struct Unknown EndPos; // 0x2C (12)
	struct Unknown EndScale; // 0x38 (8)
	struct Unknown EndTangent; // 0x40 (12)
	float EndRoll; // 0x4C (4)
	struct Unknown EndOffset; // 0x50 (8)
};

// ScriptStruct Engine.MaterialRemapIndex
struct FMaterialRemapIndex {
	uint32_t ImportVersionKey; // 0x0 (4)
	struct TArray<Unknown> MaterialRemap; // 0x8 (16)
};

// ScriptStruct Engine.StaticMaterial
struct FStaticMaterial {
	struct Unknown MaterialInterface; // 0x0 (8)
	struct FName MaterialSlotName; // 0x8 (8)
	struct FName ImportedMaterialSlotName; // 0x10 (8)
	struct Unknown UVChannelData; // 0x18 (20)
};

// ScriptStruct Engine.AssetEditorOrbitCameraPosition
struct FAssetEditorOrbitCameraPosition {
	char bIsSet : 0; // 0x0 (1)
	struct Unknown CamOrbitPoint; // 0x4 (12)
	struct Unknown CamOrbitZoom; // 0x10 (12)
	struct Unknown CamOrbitRotation; // 0x1C (12)
};

// ScriptStruct Engine.MeshSectionInfoMap
struct FMeshSectionInfoMap {
	struct TMap<Unknown, Unknown> Map; // 0x0 (80)
};

// ScriptStruct Engine.MeshSectionInfo
struct FMeshSectionInfo {
	int32_t MaterialIndex; // 0x0 (4)
	char bEnableCollision : 0; // 0x4 (1)
	char bCastShadow : 0; // 0x5 (1)
	char bForceOpaque : 0; // 0x6 (1)
	char bHidden : 0; // 0x7 (1)
};

// ScriptStruct Engine.StaticMeshSourceModel
struct FStaticMeshSourceModel {
	struct Unknown BuildSettings; // 0x0 (48)
	struct Unknown ReductionSettings; // 0x30 (36)
	float LODDistance; // 0x54 (4)
	struct Unknown ScreenSize; // 0x58 (4)
	struct FString SourceImportFilename; // 0x60 (16)
};

// ScriptStruct Engine.StaticMeshOptimizationSettings
struct FStaticMeshOptimizationSettings {
	char ReductionMethod; // 0x0 (1)
	float NumOfTrianglesPercentage; // 0x4 (4)
	float MaxDeviationPercentage; // 0x8 (4)
	float WeldingThreshold; // 0xC (4)
	char bRecalcNormals : 0; // 0x10 (1)
	float NormalsThreshold; // 0x14 (4)
	char SilhouetteImportance; // 0x18 (1)
	char TextureImportance; // 0x19 (1)
	char ShadingImportance; // 0x1A (1)
};

// ScriptStruct Engine.StaticMeshComponentInstanceData
struct FStaticMeshComponentInstanceData : FPrimitiveComponentInstanceData {
	struct Unknown StaticMesh; // 0xF0 (8)
	struct TArray<Unknown> VertexColorLODs; // 0xF8 (16)
	struct TArray<Unknown> CachedStaticLighting; // 0x108 (16)
	struct TArray<Unknown> StreamingTextureData; // 0x118 (16)
};

// ScriptStruct Engine.StreamingTextureBuildInfo
struct FStreamingTextureBuildInfo {
	uint32_t PackedRelativeBox; // 0x0 (4)
	int32_t TextureLevelIndex; // 0x4 (4)
	float TexelFactor; // 0x8 (4)
};

// ScriptStruct Engine.StaticMeshVertexColorLODData
struct FStaticMeshVertexColorLODData {
	struct TArray<Unknown> PaintedVertices; // 0x0 (16)
	struct TArray<Unknown> VertexBufferColors; // 0x10 (16)
	uint32_t LODIndex; // 0x20 (4)
};

// ScriptStruct Engine.PaintedVertex
struct FPaintedVertex {
	struct Unknown Position; // 0x0 (12)
	struct Unknown Color; // 0xC (4)
	struct Unknown Normal; // 0x10 (16)
};

// ScriptStruct Engine.StaticParameterSet
struct FStaticParameterSet {
	struct TArray<Unknown> StaticSwitchParameters; // 0x0 (16)
	struct TArray<Unknown> StaticComponentMaskParameters; // 0x10 (16)
	struct TArray<Unknown> TerrainLayerWeightParameters; // 0x20 (16)
	struct TArray<Unknown> MaterialLayersParameters; // 0x30 (16)
};

// ScriptStruct Engine.StaticParameterBase
struct FStaticParameterBase {
	struct Unknown ParameterInfo; // 0x0 (16)
	char bOverride : 0; // 0x10 (1)
	struct Unknown ExpressionGUID; // 0x14 (16)
};

// ScriptStruct Engine.StaticMaterialLayersParameter
struct FStaticMaterialLayersParameter : FStaticParameterBase {
	struct Unknown Value; // 0x28 (64)
};

// ScriptStruct Engine.StaticTerrainLayerWeightParameter
struct FStaticTerrainLayerWeightParameter : FStaticParameterBase {
	int32_t WeightmapIndex; // 0x24 (4)
	char bWeightBasedBlend : 0; // 0x28 (1)
};

// ScriptStruct Engine.StaticComponentMaskParameter
struct FStaticComponentMaskParameter : FStaticParameterBase {
	char R : 0; // 0x24 (1)
	char G : 0; // 0x25 (1)
	char B : 0; // 0x26 (1)
	char A : 0; // 0x27 (1)
};

// ScriptStruct Engine.StaticSwitchParameter
struct FStaticSwitchParameter : FStaticParameterBase {
	char Value : 0; // 0x24 (1)
};

// ScriptStruct Engine.EquirectProps
struct FEquirectProps {
	struct Unknown LeftUVRect; // 0x0 (20)
	struct Unknown RightUVRect; // 0x14 (20)
	struct Unknown LeftScale; // 0x28 (8)
	struct Unknown RightScale; // 0x30 (8)
	struct Unknown LeftBias; // 0x38 (8)
	struct Unknown RightBias; // 0x40 (8)
};

// ScriptStruct Engine.StringCurve
struct FStringCurve : FIndexedCurve {
	struct FString DefaultValue; // 0x68 (16)
	struct TArray<Unknown> Keys; // 0x78 (16)
};

// ScriptStruct Engine.StringCurveKey
struct FStringCurveKey {
	float Time; // 0x0 (4)
	struct FString Value; // 0x8 (16)
};

// ScriptStruct Engine.SubsurfaceProfileStruct
struct FSubsurfaceProfileStruct {
	struct Unknown SurfaceAlbedo; // 0x0 (16)
	struct Unknown MeanFreePathColor; // 0x10 (16)
	float MeanFreePathDistance; // 0x20 (4)
	float WorldUnitScale; // 0x24 (4)
	char bEnableBurley : 0; // 0x28 (1)
	float ScatterRadius; // 0x2C (4)
	struct Unknown SubsurfaceColor; // 0x30 (16)
	struct Unknown FalloffColor; // 0x40 (16)
	struct Unknown BoundaryColorBleed; // 0x50 (16)
	float ExtinctionScale; // 0x60 (4)
	float NormalScale; // 0x64 (4)
	float ScatteringDistribution; // 0x68 (4)
	float IOR; // 0x6C (4)
	float Roughness0; // 0x70 (4)
	float Roughness1; // 0x74 (4)
	float LobeMix; // 0x78 (4)
	struct Unknown TransmissionTintColor; // 0x7C (16)
};

// ScriptStruct Engine.TextureFormatSettings
struct FTextureFormatSettings {
	char CompressionSettings; // 0x0 (1)
	char CompressionNoAlpha : 0; // 0x1 (1)
	char CompressionNone : 0; // 0x1 (1)
	char CompressionYCoCg : 0; // 0x1 (1)
	char SRGB : 0; // 0x1 (1)
};

// ScriptStruct Engine.TextureSourceBlock
struct FTextureSourceBlock {
	int32_t BlockX; // 0x0 (4)
	int32_t BlockY; // 0x4 (4)
	int32_t SizeX; // 0x8 (4)
	int32_t SizeY; // 0xC (4)
	int32_t NumSlices; // 0x10 (4)
	int32_t NumMips; // 0x14 (4)
};

// ScriptStruct Engine.TextureLODGroup
struct FTextureLODGroup {
	char Group; // 0x0 (1)
	int32_t LODBias; // 0xC (4)
	int32_t LODBias_Smaller; // 0x10 (4)
	int32_t LODBias_Smallest; // 0x14 (4)
	int32_t NumStreamedMips; // 0x1C (4)
	char MipGenSettings; // 0x20 (1)
	int32_t MinLODSize; // 0x24 (4)
	int32_t MaxLODSize; // 0x28 (4)
	int32_t MaxLODSize_Smaller; // 0x2C (4)
	int32_t MaxLODSize_Smallest; // 0x30 (4)
	int32_t OptionalLODBias; // 0x34 (4)
	int32_t OptionalMaxLODSize; // 0x38 (4)
	struct FName MinMagFilter; // 0x40 (8)
	struct FName MipFilter; // 0x48 (8)
	enum class Unknow MipLoadOptions; // 0x50 (1)
	char DuplicateNonOptionalMips : 0; // 0x51 (1)
	char bNeedsPrimaryStreaming : 0; // 0x52 (1)
};

// ScriptStruct Engine.StreamingRenderAssetPrimitiveInfo
struct FStreamingRenderAssetPrimitiveInfo {
	struct Unknown RenderAsset; // 0x0 (8)
	struct Unknown Bounds; // 0x8 (28)
	float TexelFactor; // 0x24 (4)
	uint32_t PackedRelativeBox; // 0x28 (4)
	char bAllowInvalidTexelFactorWhenUnregistered : 0; // 0x2C (1)
};

// ScriptStruct Engine.TTTrackBase
struct FTTTrackBase {
	struct FName TrackName; // 0x8 (8)
	char bIsExternalCurve : 0; // 0x10 (1)
};

// ScriptStruct Engine.TTPropertyTrack
struct FTTPropertyTrack : FTTTrackBase {
	struct FName PropertyName; // 0x18 (8)
};

// ScriptStruct Engine.TTLinearColorTrack
struct FTTLinearColorTrack : FTTPropertyTrack {
	struct Unknown CurveLinearColor; // 0x20 (8)
};

// ScriptStruct Engine.TTVectorTrack
struct FTTVectorTrack : FTTPropertyTrack {
	struct Unknown CurveVector; // 0x20 (8)
};

// ScriptStruct Engine.TTFloatTrack
struct FTTFloatTrack : FTTPropertyTrack {
	struct Unknown CurveFloat; // 0x20 (8)
};

// ScriptStruct Engine.TTEventTrack
struct FTTEventTrack : FTTTrackBase {
	struct FName FunctionName; // 0x18 (8)
	struct Unknown CurveKeys; // 0x20 (8)
};

// ScriptStruct Engine.TimeStretchCurveInstance
struct FTimeStretchCurveInstance {
	char bHasValidData : 0; // 0x0 (1)
};

// ScriptStruct Engine.TimeStretchCurve
struct FTimeStretchCurve {
	float SamplingRate; // 0x0 (4)
	float CurveValueMinPrecision; // 0x4 (4)
	struct TArray<Unknown> Markers; // 0x8 (16)
	float Sum_dT_i_by_C_i[0x3]; // 0x18 (12)
};

// ScriptStruct Engine.TimeStretchCurveMarker
struct FTimeStretchCurveMarker {
	float Time[0x3]; // 0x0 (12)
	float ALPHA; // 0xC (4)
};

// ScriptStruct Engine.TouchInputControl
struct FTouchInputControl {
	struct Unknown Image1; // 0x0 (8)
	struct Unknown Image2; // 0x8 (8)
	struct Unknown Center; // 0x10 (8)
	struct Unknown VisualSize; // 0x18 (8)
	struct Unknown ThumbSize; // 0x20 (8)
	struct Unknown InteractionSize; // 0x28 (8)
	struct Unknown InputScale; // 0x30 (8)
	struct Unknown MainInputKey; // 0x38 (24)
	struct Unknown AltInputKey; // 0x50 (24)
};

// ScriptStruct Engine.HardwareCursorReference
struct FHardwareCursorReference {
	struct FName CursorPath; // 0x0 (8)
	struct Unknown HotSpot; // 0x8 (8)
};

// ScriptStruct Engine.VirtualTextureBuildSettings
struct FVirtualTextureBuildSettings {
	int32_t TileSize; // 0x0 (4)
	int32_t TileBorderSize; // 0x4 (4)
	char bEnableCompressCrunch : 0; // 0x8 (1)
	char bEnableCompressZlib : 0; // 0x9 (1)
};

// ScriptStruct Engine.VirtualTextureSpacePoolConfig
struct FVirtualTextureSpacePoolConfig {
	int32_t MinTileSize; // 0x0 (4)
	int32_t MaxTileSize; // 0x4 (4)
	struct TArray<Unknown> Formats; // 0x8 (16)
	int32_t SizeInMegabyte; // 0x18 (4)
	char bAllowSizeScale : 0; // 0x1C (1)
};

// ScriptStruct Engine.VoiceSettings
struct FVoiceSettings {
	struct Unknown ComponentToAttachTo; // 0x0 (8)
	struct Unknown AttenuationSettings; // 0x8 (8)
	struct Unknown SourceEffectChain; // 0x10 (8)
};

// ScriptStruct Engine.StreamingLevelsToConsider
struct FStreamingLevelsToConsider {
	struct TArray<Unknown> StreamingLevels; // 0x0 (16)
};

// ScriptStruct Engine.LevelStreamingWrapper
struct FLevelStreamingWrapper {
	struct Unknown StreamingLevel; // 0x0 (8)
};

// ScriptStruct Engine.LevelCollection
struct FLevelCollection {
	struct Unknown GameState; // 0x8 (8)
	struct Unknown NetDriver; // 0x10 (8)
	struct Unknown DemoNetDriver; // 0x18 (8)
	struct Unknown PersistentLevel; // 0x20 (8)
	struct TSet<Unknown> Levels; // 0x28 (80)
	struct TArray<Unknown> CachedLevels; // 0x78 (16)
};

// ScriptStruct Engine.LevelViewportInfo
struct FLevelViewportInfo {
	struct Unknown CamPosition; // 0x0 (12)
	struct Unknown CamRotation; // 0xC (12)
	float CamOrthoZoom; // 0x18 (4)
	char CamUpdated : 0; // 0x1C (1)
};

// ScriptStruct Engine.WorldPSCPool
struct FWorldPSCPool {
	struct TMap<Unknown, Unknown> WorldParticleSystemPools; // 0x0 (80)
};

// ScriptStruct Engine.PSCPool
struct FPSCPool {
	struct TArray<Unknown> FreeElements; // 0x0 (16)
	struct TArray<Unknown> InUseComponents_Auto; // 0x10 (16)
	struct TArray<Unknown> InUseComponents_Manual; // 0x20 (16)
};

// ScriptStruct Engine.PSCPoolElem
struct FPSCPoolElem {
	struct Unknown PSC; // 0x0 (8)
};

// ScriptStruct Engine.BroadphaseSettings
struct FBroadphaseSettings {
	char bUseMBPOnClient : 0; // 0x0 (1)
	char bUseMBPOnServer : 0; // 0x1 (1)
	char bUseMBPOuterBounds : 0; // 0x2 (1)
	struct Unknown MBPBounds; // 0x4 (28)
	struct Unknown MBPOuterBounds; // 0x20 (28)
	uint32_t MBPNumSubdivs; // 0x3C (4)
};

// ScriptStruct Engine.TileLODEntry
struct FTileLODEntry {
	int32_t LODIndex; // 0x0 (4)
	int32_t Distance; // 0x4 (4)
	struct Unknown SimplificationDetails; // 0x8 (308)
};

// ScriptStruct Engine.HierarchicalSimplification
struct FHierarchicalSimplification {
	float TransitionScreenSize; // 0x0 (4)
	float OverrideDrawDistance; // 0x4 (4)
	char bUseOverrideDrawDistance : 0; // 0x8 (1)
	char bAllowSpecificExclusion : 0; // 0x8 (1)
	char bSimplifyMesh : 0; // 0x8 (1)
	char bOnlyGenerateClustersForVolumes : 0; // 0x8 (1)
	char bReusePreviousLevelClusters : 0; // 0x8 (1)
	struct Unknown ProxySetting; // 0xC (172)
	struct Unknown MergeSetting; // 0xB8 (164)
	float DesiredBoundRadius; // 0x15C (4)
	float DesiredFillingPercentage; // 0x160 (4)
	int32_t MinNumberOfActorsToBuild; // 0x164 (4)
};

// ScriptStruct Engine.NetViewer
struct FNetViewer {
	struct Unknown Connection; // 0x0 (8)
	struct Unknown InViewer; // 0x8 (8)
	struct Unknown ViewTarget; // 0x10 (8)
	struct Unknown ViewLocation; // 0x18 (12)
	struct Unknown ViewDir; // 0x24 (12)
};

// ScriptStruct Engine.LightmassWorldInfoSettings
struct FLightmassWorldInfoSettings {
	float StaticLightingLevelScale; // 0x0 (4)
	int32_t NumIndirectLightingBounces; // 0x4 (4)
	int32_t NumSkyLightingBounces; // 0x8 (4)
	float IndirectLightingQuality; // 0xC (4)
	float IndirectLightingSmoothness; // 0x10 (4)
	struct Unknown EnvironmentColor; // 0x14 (4)
	float EnvironmentIntensity; // 0x18 (4)
	float EmissiveBoost; // 0x1C (4)
	float DiffuseBoost; // 0x20 (4)
	char VolumeLightingMethod; // 0x24 (1)
	char bUseAmbientOcclusion : 0; // 0x25 (1)
	char bGenerateAmbientOcclusionMaterialMask : 0; // 0x25 (1)
	char bVisualizeMaterialDiffuse : 0; // 0x25 (1)
	char bVisualizeAmbientOcclusion : 0; // 0x25 (1)
	char bCompressLightmaps : 0; // 0x25 (1)
	float VolumetricLightmapDetailCellSize; // 0x28 (4)
	float VolumetricLightmapMaximumBrickMemoryMb; // 0x2C (4)
	float VolumetricLightmapSphericalHarmonicSmoothing; // 0x30 (4)
	float VolumeLightSamplePlacementScale; // 0x34 (4)
	float DirectIlluminationOcclusionFraction; // 0x38 (4)
	float IndirectIlluminationOcclusionFraction; // 0x3C (4)
	float OcclusionExponent; // 0x40 (4)
	float FullyOccludedSamplesFraction; // 0x44 (4)
	float MaxOcclusionDistance; // 0x48 (4)
};

// Function Engine.ActorComponent.ToggleActive
inline void UActorComponent::ToggleActive() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ToggleActive");

	struct ToggleActive_Params {
		
	}; ToggleActive_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.SetTickGroup
inline void UActorComponent::SetTickGroup(char NewTickGroup) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetTickGroup");

	struct SetTickGroup_Params {
		char NewTickGroup;
	}; SetTickGroup_Params Params;

	Params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.SetTickableWhenPaused
inline void UActorComponent::SetTickableWhenPaused(char bTickableWhenPaused) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetTickableWhenPaused");

	struct SetTickableWhenPaused_Params {
		char bTickableWhenPaused;
	}; SetTickableWhenPaused_Params Params;

	Params.bTickableWhenPaused = bTickableWhenPaused;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.SetIsReplicated
inline void UActorComponent::SetIsReplicated(char ShouldReplicate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetIsReplicated");

	struct SetIsReplicated_Params {
		char ShouldReplicate;
	}; SetIsReplicated_Params Params;

	Params.ShouldReplicate = ShouldReplicate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.SetComponentTickInterval
inline void UActorComponent::SetComponentTickInterval(float TickInterval) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetComponentTickInterval");

	struct SetComponentTickInterval_Params {
		float TickInterval;
	}; SetComponentTickInterval_Params Params;

	Params.TickInterval = TickInterval;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.SetComponentTickEnabled
inline void UActorComponent::SetComponentTickEnabled(char bEnabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetComponentTickEnabled");

	struct SetComponentTickEnabled_Params {
		char bEnabled;
	}; SetComponentTickEnabled_Params Params;

	Params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.SetAutoActivate
inline void UActorComponent::SetAutoActivate(char bNewAutoActivate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetAutoActivate");

	struct SetAutoActivate_Params {
		char bNewAutoActivate;
	}; SetAutoActivate_Params Params;

	Params.bNewAutoActivate = bNewAutoActivate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.SetActive
inline void UActorComponent::SetActive(char bNewActive, char bReset) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetActive");

	struct SetActive_Params {
		char bNewActive;
		char bReset;
	}; SetActive_Params Params;

	Params.bNewActive = bNewActive;
	Params.bReset = bReset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.RemoveTickPrerequisiteComponent
inline void UActorComponent::RemoveTickPrerequisiteComponent(struct Unknown PrerequisiteComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.RemoveTickPrerequisiteComponent");

	struct RemoveTickPrerequisiteComponent_Params {
		struct Unknown PrerequisiteComponent;
	}; RemoveTickPrerequisiteComponent_Params Params;

	Params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.RemoveTickPrerequisiteActor
inline void UActorComponent::RemoveTickPrerequisiteActor(struct Unknown PrerequisiteActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.RemoveTickPrerequisiteActor");

	struct RemoveTickPrerequisiteActor_Params {
		struct Unknown PrerequisiteActor;
	}; RemoveTickPrerequisiteActor_Params Params;

	Params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.ReceiveTick
inline void UActorComponent::ReceiveTick(float DeltaSeconds) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ReceiveTick");

	struct ReceiveTick_Params {
		float DeltaSeconds;
	}; ReceiveTick_Params Params;

	Params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.ReceiveEndPlay
inline void UActorComponent::ReceiveEndPlay(char EndPlayReason) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ReceiveEndPlay");

	struct ReceiveEndPlay_Params {
		char EndPlayReason;
	}; ReceiveEndPlay_Params Params;

	Params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.ReceiveBeginPlay
inline void UActorComponent::ReceiveBeginPlay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ReceiveBeginPlay");

	struct ReceiveBeginPlay_Params {
		
	}; ReceiveBeginPlay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.OnRep_IsActive
inline void UActorComponent::OnRep_IsActive() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.OnRep_IsActive");

	struct OnRep_IsActive_Params {
		
	}; OnRep_IsActive_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.K2_DestroyComponent
inline void UActorComponent::K2_DestroyComponent(struct Unknown Object) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.K2_DestroyComponent");

	struct K2_DestroyComponent_Params {
		struct Unknown Object;
	}; K2_DestroyComponent_Params Params;

	Params.Object = Object;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.IsComponentTickEnabled
inline char UActorComponent::IsComponentTickEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.IsComponentTickEnabled");

	struct IsComponentTickEnabled_Params {
		
		char ReturnValue;

	}; IsComponentTickEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ActorComponent.IsBeingDestroyed
inline char UActorComponent::IsBeingDestroyed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.IsBeingDestroyed");

	struct IsBeingDestroyed_Params {
		
		char ReturnValue;

	}; IsBeingDestroyed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ActorComponent.IsActive
inline char UActorComponent::IsActive() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.IsActive");

	struct IsActive_Params {
		
		char ReturnValue;

	}; IsActive_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ActorComponent.GetOwner
inline struct Unknown UActorComponent::GetOwner() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.GetOwner");

	struct GetOwner_Params {
		
		struct Unknown ReturnValue;

	}; GetOwner_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ActorComponent.GetComponentTickInterval
inline float UActorComponent::GetComponentTickInterval() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.GetComponentTickInterval");

	struct GetComponentTickInterval_Params {
		
		float ReturnValue;

	}; GetComponentTickInterval_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ActorComponent.Deactivate
inline void UActorComponent::Deactivate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.Deactivate");

	struct Deactivate_Params {
		
	}; Deactivate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.ComponentHasTag
inline char UActorComponent::ComponentHasTag(struct FName Tag) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ComponentHasTag");

	struct ComponentHasTag_Params {
		struct FName Tag;
		char ReturnValue;

	}; ComponentHasTag_Params Params;

	Params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ActorComponent.AddTickPrerequisiteComponent
inline void UActorComponent::AddTickPrerequisiteComponent(struct Unknown PrerequisiteComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.AddTickPrerequisiteComponent");

	struct AddTickPrerequisiteComponent_Params {
		struct Unknown PrerequisiteComponent;
	}; AddTickPrerequisiteComponent_Params Params;

	Params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.AddTickPrerequisiteActor
inline void UActorComponent::AddTickPrerequisiteActor(struct Unknown PrerequisiteActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.AddTickPrerequisiteActor");

	struct AddTickPrerequisiteActor_Params {
		struct Unknown PrerequisiteActor;
	}; AddTickPrerequisiteActor_Params Params;

	Params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ActorComponent.Activate
inline void UActorComponent::Activate(char bReset) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.Activate");

	struct Activate_Params {
		char bReset;
	}; Activate_Params Params;

	Params.bReset = bReset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.ToggleVisibility
inline void USceneComponent::ToggleVisibility(char bPropagateToChildren) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.ToggleVisibility");

	struct ToggleVisibility_Params {
		char bPropagateToChildren;
	}; ToggleVisibility_Params Params;

	Params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.SnapTo
inline char USceneComponent::SnapTo(struct Unknown InParent, struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SnapTo");

	struct SnapTo_Params {
		struct Unknown InParent;
		struct FName InSocketName;
		char ReturnValue;

	}; SnapTo_Params Params;

	Params.InParent = InParent;
	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.SetWorldScale3D
inline void USceneComponent::SetWorldScale3D(struct Unknown NewScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetWorldScale3D");

	struct SetWorldScale3D_Params {
		struct Unknown NewScale;
	}; SetWorldScale3D_Params Params;

	Params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.SetVisibility
inline void USceneComponent::SetVisibility(char bNewVisibility, char bPropagateToChildren) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetVisibility");

	struct SetVisibility_Params {
		char bNewVisibility;
		char bPropagateToChildren;
	}; SetVisibility_Params Params;

	Params.bNewVisibility = bNewVisibility;
	Params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume
inline void USceneComponent::SetShouldUpdatePhysicsVolume(char bInShouldUpdatePhysicsVolume) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume");

	struct SetShouldUpdatePhysicsVolume_Params {
		char bInShouldUpdatePhysicsVolume;
	}; SetShouldUpdatePhysicsVolume_Params Params;

	Params.bInShouldUpdatePhysicsVolume = bInShouldUpdatePhysicsVolume;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.SetRelativeScale3D
inline void USceneComponent::SetRelativeScale3D(struct Unknown NewScale3D) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetRelativeScale3D");

	struct SetRelativeScale3D_Params {
		struct Unknown NewScale3D;
	}; SetRelativeScale3D_Params Params;

	Params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.SetMobility
inline void USceneComponent::SetMobility(char NewMobility) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetMobility");

	struct SetMobility_Params {
		char NewMobility;
	}; SetMobility_Params Params;

	Params.NewMobility = NewMobility;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.SetHiddenInGame
inline void USceneComponent::SetHiddenInGame(char NewHidden, char bPropagateToChildren) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetHiddenInGame");

	struct SetHiddenInGame_Params {
		char NewHidden;
		char bPropagateToChildren;
	}; SetHiddenInGame_Params Params;

	Params.NewHidden = NewHidden;
	Params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.SetAbsolute
inline void USceneComponent::SetAbsolute(char bNewAbsoluteLocation, char bNewAbsoluteRotation, char bNewAbsoluteScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetAbsolute");

	struct SetAbsolute_Params {
		char bNewAbsoluteLocation;
		char bNewAbsoluteRotation;
		char bNewAbsoluteScale;
	}; SetAbsolute_Params Params;

	Params.bNewAbsoluteLocation = bNewAbsoluteLocation;
	Params.bNewAbsoluteRotation = bNewAbsoluteRotation;
	Params.bNewAbsoluteScale = bNewAbsoluteScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.ResetRelativeTransform
inline void USceneComponent::ResetRelativeTransform() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.ResetRelativeTransform");

	struct ResetRelativeTransform_Params {
		
	}; ResetRelativeTransform_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.OnRep_Visibility
inline void USceneComponent::OnRep_Visibility(char OldValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_Visibility");

	struct OnRep_Visibility_Params {
		char OldValue;
	}; OnRep_Visibility_Params Params;

	Params.OldValue = OldValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.OnRep_Transform
inline void USceneComponent::OnRep_Transform() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_Transform");

	struct OnRep_Transform_Params {
		
	}; OnRep_Transform_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.OnRep_AttachSocketName
inline void USceneComponent::OnRep_AttachSocketName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_AttachSocketName");

	struct OnRep_AttachSocketName_Params {
		
	}; OnRep_AttachSocketName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.OnRep_AttachParent
inline void USceneComponent::OnRep_AttachParent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_AttachParent");

	struct OnRep_AttachParent_Params {
		
	}; OnRep_AttachParent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.OnRep_AttachChildren
inline void USceneComponent::OnRep_AttachChildren() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_AttachChildren");

	struct OnRep_AttachChildren_Params {
		
	}; OnRep_AttachChildren_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.K2_SetWorldTransform
inline void USceneComponent::K2_SetWorldTransform(struct Unknown& NewTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetWorldTransform");

	struct K2_SetWorldTransform_Params {
		struct Unknown& NewTransform;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_SetWorldTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewTransform = Params.NewTransform;
	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_SetWorldRotation
inline void USceneComponent::K2_SetWorldRotation(struct Unknown NewRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetWorldRotation");

	struct K2_SetWorldRotation_Params {
		struct Unknown NewRotation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_SetWorldRotation_Params Params;

	Params.NewRotation = NewRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_SetWorldLocationAndRotation
inline void USceneComponent::K2_SetWorldLocationAndRotation(struct Unknown NewLocation, struct Unknown NewRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetWorldLocationAndRotation");

	struct K2_SetWorldLocationAndRotation_Params {
		struct Unknown NewLocation;
		struct Unknown NewRotation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_SetWorldLocationAndRotation_Params Params;

	Params.NewLocation = NewLocation;
	Params.NewRotation = NewRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_SetWorldLocation
inline void USceneComponent::K2_SetWorldLocation(struct Unknown NewLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetWorldLocation");

	struct K2_SetWorldLocation_Params {
		struct Unknown NewLocation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_SetWorldLocation_Params Params;

	Params.NewLocation = NewLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_SetRelativeTransform
inline void USceneComponent::K2_SetRelativeTransform(struct Unknown& NewTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetRelativeTransform");

	struct K2_SetRelativeTransform_Params {
		struct Unknown& NewTransform;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_SetRelativeTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewTransform = Params.NewTransform;
	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_SetRelativeRotation
inline void USceneComponent::K2_SetRelativeRotation(struct Unknown NewRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetRelativeRotation");

	struct K2_SetRelativeRotation_Params {
		struct Unknown NewRotation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_SetRelativeRotation_Params Params;

	Params.NewRotation = NewRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation
inline void USceneComponent::K2_SetRelativeLocationAndRotation(struct Unknown NewLocation, struct Unknown NewRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation");

	struct K2_SetRelativeLocationAndRotation_Params {
		struct Unknown NewLocation;
		struct Unknown NewRotation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_SetRelativeLocationAndRotation_Params Params;

	Params.NewLocation = NewLocation;
	Params.NewRotation = NewRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_SetRelativeLocation
inline void USceneComponent::K2_SetRelativeLocation(struct Unknown NewLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_SetRelativeLocation");

	struct K2_SetRelativeLocation_Params {
		struct Unknown NewLocation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_SetRelativeLocation_Params Params;

	Params.NewLocation = NewLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_GetComponentToWorld
inline struct Unknown USceneComponent::K2_GetComponentToWorld() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentToWorld");

	struct K2_GetComponentToWorld_Params {
		
		struct Unknown ReturnValue;

	}; K2_GetComponentToWorld_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.K2_GetComponentScale
inline struct Unknown USceneComponent::K2_GetComponentScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentScale");

	struct K2_GetComponentScale_Params {
		
		struct Unknown ReturnValue;

	}; K2_GetComponentScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.K2_GetComponentRotation
inline struct Unknown USceneComponent::K2_GetComponentRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentRotation");

	struct K2_GetComponentRotation_Params {
		
		struct Unknown ReturnValue;

	}; K2_GetComponentRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.K2_GetComponentLocation
inline struct Unknown USceneComponent::K2_GetComponentLocation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentLocation");

	struct K2_GetComponentLocation_Params {
		
		struct Unknown ReturnValue;

	}; K2_GetComponentLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.K2_DetachFromComponent
inline void USceneComponent::K2_DetachFromComponent(enum class Unknow LocationRule, enum class Unknow RotationRule, enum class Unknow ScaleRule, char bCallModify) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_DetachFromComponent");

	struct K2_DetachFromComponent_Params {
		enum class Unknow LocationRule;
		enum class Unknow RotationRule;
		enum class Unknow ScaleRule;
		char bCallModify;
	}; K2_DetachFromComponent_Params Params;

	Params.LocationRule = LocationRule;
	Params.RotationRule = RotationRule;
	Params.ScaleRule = ScaleRule;
	Params.bCallModify = bCallModify;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneComponent.K2_AttachToComponent
inline char USceneComponent::K2_AttachToComponent(struct Unknown Parent, struct FName SocketName, enum class Unknow LocationRule, enum class Unknow RotationRule, enum class Unknow ScaleRule, char bWeldSimulatedBodies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AttachToComponent");

	struct K2_AttachToComponent_Params {
		struct Unknown Parent;
		struct FName SocketName;
		enum class Unknow LocationRule;
		enum class Unknow RotationRule;
		enum class Unknow ScaleRule;
		char bWeldSimulatedBodies;
		char ReturnValue;

	}; K2_AttachToComponent_Params Params;

	Params.Parent = Parent;
	Params.SocketName = SocketName;
	Params.LocationRule = LocationRule;
	Params.RotationRule = RotationRule;
	Params.ScaleRule = ScaleRule;
	Params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.K2_AttachTo
inline char USceneComponent::K2_AttachTo(struct Unknown InParent, struct FName InSocketName, char AttachType, char bWeldSimulatedBodies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AttachTo");

	struct K2_AttachTo_Params {
		struct Unknown InParent;
		struct FName InSocketName;
		char AttachType;
		char bWeldSimulatedBodies;
		char ReturnValue;

	}; K2_AttachTo_Params Params;

	Params.InParent = InParent;
	Params.InSocketName = InSocketName;
	Params.AttachType = AttachType;
	Params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.K2_AddWorldTransform
inline void USceneComponent::K2_AddWorldTransform(struct Unknown& DeltaTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddWorldTransform");

	struct K2_AddWorldTransform_Params {
		struct Unknown& DeltaTransform;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_AddWorldTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	DeltaTransform = Params.DeltaTransform;
	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_AddWorldRotation
inline void USceneComponent::K2_AddWorldRotation(struct Unknown DeltaRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddWorldRotation");

	struct K2_AddWorldRotation_Params {
		struct Unknown DeltaRotation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_AddWorldRotation_Params Params;

	Params.DeltaRotation = DeltaRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_AddWorldOffset
inline void USceneComponent::K2_AddWorldOffset(struct Unknown DeltaLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddWorldOffset");

	struct K2_AddWorldOffset_Params {
		struct Unknown DeltaLocation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_AddWorldOffset_Params Params;

	Params.DeltaLocation = DeltaLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_AddRelativeRotation
inline void USceneComponent::K2_AddRelativeRotation(struct Unknown DeltaRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddRelativeRotation");

	struct K2_AddRelativeRotation_Params {
		struct Unknown DeltaRotation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_AddRelativeRotation_Params Params;

	Params.DeltaRotation = DeltaRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_AddRelativeLocation
inline void USceneComponent::K2_AddRelativeLocation(struct Unknown DeltaLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddRelativeLocation");

	struct K2_AddRelativeLocation_Params {
		struct Unknown DeltaLocation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_AddRelativeLocation_Params Params;

	Params.DeltaLocation = DeltaLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_AddLocalTransform
inline void USceneComponent::K2_AddLocalTransform(struct Unknown& DeltaTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddLocalTransform");

	struct K2_AddLocalTransform_Params {
		struct Unknown& DeltaTransform;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_AddLocalTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	DeltaTransform = Params.DeltaTransform;
	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_AddLocalRotation
inline void USceneComponent::K2_AddLocalRotation(struct Unknown DeltaRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddLocalRotation");

	struct K2_AddLocalRotation_Params {
		struct Unknown DeltaRotation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_AddLocalRotation_Params Params;

	Params.DeltaRotation = DeltaRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.K2_AddLocalOffset
inline void USceneComponent::K2_AddLocalOffset(struct Unknown DeltaLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AddLocalOffset");

	struct K2_AddLocalOffset_Params {
		struct Unknown DeltaLocation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_AddLocalOffset_Params Params;

	Params.DeltaLocation = DeltaLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.SceneComponent.IsVisible
inline char USceneComponent::IsVisible() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.IsVisible");

	struct IsVisible_Params {
		
		char ReturnValue;

	}; IsVisible_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.IsSimulatingPhysics
inline char USceneComponent::IsSimulatingPhysics(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.IsSimulatingPhysics");

	struct IsSimulatingPhysics_Params {
		struct FName BoneName;
		char ReturnValue;

	}; IsSimulatingPhysics_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.IsAnySimulatingPhysics
inline char USceneComponent::IsAnySimulatingPhysics() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.IsAnySimulatingPhysics");

	struct IsAnySimulatingPhysics_Params {
		
		char ReturnValue;

	}; IsAnySimulatingPhysics_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetUpVector
inline struct Unknown USceneComponent::GetUpVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetUpVector");

	struct GetUpVector_Params {
		
		struct Unknown ReturnValue;

	}; GetUpVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetSocketTransform
inline struct Unknown USceneComponent::GetSocketTransform(struct FName InSocketName, char TransformSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketTransform");

	struct GetSocketTransform_Params {
		struct FName InSocketName;
		char TransformSpace;
		struct Unknown ReturnValue;

	}; GetSocketTransform_Params Params;

	Params.InSocketName = InSocketName;
	Params.TransformSpace = TransformSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetSocketRotation
inline struct Unknown USceneComponent::GetSocketRotation(struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketRotation");

	struct GetSocketRotation_Params {
		struct FName InSocketName;
		struct Unknown ReturnValue;

	}; GetSocketRotation_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetSocketQuaternion
inline struct Unknown USceneComponent::GetSocketQuaternion(struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketQuaternion");

	struct GetSocketQuaternion_Params {
		struct FName InSocketName;
		struct Unknown ReturnValue;

	}; GetSocketQuaternion_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetSocketLocation
inline struct Unknown USceneComponent::GetSocketLocation(struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketLocation");

	struct GetSocketLocation_Params {
		struct FName InSocketName;
		struct Unknown ReturnValue;

	}; GetSocketLocation_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume
inline char USceneComponent::GetShouldUpdatePhysicsVolume() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume");

	struct GetShouldUpdatePhysicsVolume_Params {
		
		char ReturnValue;

	}; GetShouldUpdatePhysicsVolume_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetRightVector
inline struct Unknown USceneComponent::GetRightVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetRightVector");

	struct GetRightVector_Params {
		
		struct Unknown ReturnValue;

	}; GetRightVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetRelativeTransform
inline struct Unknown USceneComponent::GetRelativeTransform() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetRelativeTransform");

	struct GetRelativeTransform_Params {
		
		struct Unknown ReturnValue;

	}; GetRelativeTransform_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetPhysicsVolume
inline struct Unknown USceneComponent::GetPhysicsVolume() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetPhysicsVolume");

	struct GetPhysicsVolume_Params {
		
		struct Unknown ReturnValue;

	}; GetPhysicsVolume_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetParentComponents
inline void USceneComponent::GetParentComponents(struct TArray<Unknown>& Parents) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetParentComponents");

	struct GetParentComponents_Params {
		struct TArray<Unknown>& Parents;
	}; GetParentComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Parents = Params.Parents;

}

// Function Engine.SceneComponent.GetNumChildrenComponents
inline int32_t USceneComponent::GetNumChildrenComponents() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetNumChildrenComponents");

	struct GetNumChildrenComponents_Params {
		
		int32_t ReturnValue;

	}; GetNumChildrenComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetForwardVector
inline struct Unknown USceneComponent::GetForwardVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetForwardVector");

	struct GetForwardVector_Params {
		
		struct Unknown ReturnValue;

	}; GetForwardVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetComponentVelocity
inline struct Unknown USceneComponent::GetComponentVelocity() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetComponentVelocity");

	struct GetComponentVelocity_Params {
		
		struct Unknown ReturnValue;

	}; GetComponentVelocity_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetChildrenComponents
inline void USceneComponent::GetChildrenComponents(char bIncludeAllDescendants, struct TArray<Unknown>& Children) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetChildrenComponents");

	struct GetChildrenComponents_Params {
		char bIncludeAllDescendants;
		struct TArray<Unknown>& Children;
	}; GetChildrenComponents_Params Params;

	Params.bIncludeAllDescendants = bIncludeAllDescendants;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Children = Params.Children;

}

// Function Engine.SceneComponent.GetChildComponent
inline struct Unknown USceneComponent::GetChildComponent(int32_t ChildIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetChildComponent");

	struct GetChildComponent_Params {
		int32_t ChildIndex;
		struct Unknown ReturnValue;

	}; GetChildComponent_Params Params;

	Params.ChildIndex = ChildIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetAttachSocketName
inline struct FName USceneComponent::GetAttachSocketName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetAttachSocketName");

	struct GetAttachSocketName_Params {
		
		struct FName ReturnValue;

	}; GetAttachSocketName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetAttachParent
inline struct Unknown USceneComponent::GetAttachParent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetAttachParent");

	struct GetAttachParent_Params {
		
		struct Unknown ReturnValue;

	}; GetAttachParent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.GetAllSocketNames
inline struct TArray<Unknown> USceneComponent::GetAllSocketNames() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetAllSocketNames");

	struct GetAllSocketNames_Params {
		
		struct TArray<Unknown> ReturnValue;

	}; GetAllSocketNames_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.DoesSocketExist
inline char USceneComponent::DoesSocketExist(struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.DoesSocketExist");

	struct DoesSocketExist_Params {
		struct FName InSocketName;
		char ReturnValue;

	}; DoesSocketExist_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneComponent.DetachFromParent
inline void USceneComponent::DetachFromParent(char bMaintainWorldPosition, char bCallModify) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.DetachFromParent");

	struct DetachFromParent_Params {
		char bMaintainWorldPosition;
		char bCallModify;
	}; DetachFromParent_Params Params;

	Params.bMaintainWorldPosition = bMaintainWorldPosition;
	Params.bCallModify = bCallModify;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MKActorEx.OnTickReplaySampleRecord
inline void UMKActorEx::OnTickReplaySampleRecord(struct Unknown DemoNetDriver, float MinRecordHz, float MaxRecordHz, char bSaveCheckpoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKActorEx.OnTickReplaySampleRecord");

	struct OnTickReplaySampleRecord_Params {
		struct Unknown DemoNetDriver;
		float MinRecordHz;
		float MaxRecordHz;
		char bSaveCheckpoint;
	}; OnTickReplaySampleRecord_Params Params;

	Params.DemoNetDriver = DemoNetDriver;
	Params.MinRecordHz = MinRecordHz;
	Params.MaxRecordHz = MaxRecordHz;
	Params.bSaveCheckpoint = bSaveCheckpoint;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MKActorEx.OnTickReplaySamplePlayback
inline void UMKActorEx::OnTickReplaySamplePlayback(struct Unknown DemoNetDriver) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKActorEx.OnTickReplaySamplePlayback");

	struct OnTickReplaySamplePlayback_Params {
		struct Unknown DemoNetDriver;
	}; OnTickReplaySamplePlayback_Params Params;

	Params.DemoNetDriver = DemoNetDriver;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MKActorEx.OnReplayPreScrub
inline void UMKActorEx::OnReplayPreScrub(struct Unknown InWorld) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKActorEx.OnReplayPreScrub");

	struct OnReplayPreScrub_Params {
		struct Unknown InWorld;
	}; OnReplayPreScrub_Params Params;

	Params.InWorld = InWorld;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MKActorEx.OnPostRecordReplay
inline void UMKActorEx::OnPostRecordReplay(struct Unknown InWorld, struct Unknown& DemoURL) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKActorEx.OnPostRecordReplay");

	struct OnPostRecordReplay_Params {
		struct Unknown InWorld;
		struct Unknown& DemoURL;
	}; OnPostRecordReplay_Params Params;

	Params.InWorld = InWorld;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	DemoURL = Params.DemoURL;

}

// Function Engine.MKActorEx.LerpReplaySampleForPlayback
inline void UMKActorEx::LerpReplaySampleForPlayback(struct Unknown DemoNetDriver, struct Unknown L, struct Unknown R, float LerpPercent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKActorEx.LerpReplaySampleForPlayback");

	struct LerpReplaySampleForPlayback_Params {
		struct Unknown DemoNetDriver;
		struct Unknown L;
		struct Unknown R;
		float LerpPercent;
	}; LerpReplaySampleForPlayback_Params Params;

	Params.DemoNetDriver = DemoNetDriver;
	Params.L = L;
	Params.R = R;
	Params.LerpPercent = LerpPercent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MKActorEx.HandleTimelineScrubbed
inline char UMKActorEx::HandleTimelineScrubbed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKActorEx.HandleTimelineScrubbed");

	struct HandleTimelineScrubbed_Params {
		
		char ReturnValue;

	}; HandleTimelineScrubbed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MKActorEx.GatherReplaySampleForRecording
inline void UMKActorEx::GatherReplaySampleForRecording(struct Unknown DemoNetDriver, float DemoCurrentTime, char bSaveCheckpoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKActorEx.GatherReplaySampleForRecording");

	struct GatherReplaySampleForRecording_Params {
		struct Unknown DemoNetDriver;
		float DemoCurrentTime;
		char bSaveCheckpoint;
	}; GatherReplaySampleForRecording_Params Params;

	Params.DemoNetDriver = DemoNetDriver;
	Params.DemoCurrentTime = DemoCurrentTime;
	Params.bSaveCheckpoint = bSaveCheckpoint;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MKActorEx.ForceReplaySamplingUpdate
inline void UMKActorEx::ForceReplaySamplingUpdate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKActorEx.ForceReplaySamplingUpdate");

	struct ForceReplaySamplingUpdate_Params {
		
	}; ForceReplaySamplingUpdate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.WasRecentlyRendered
inline char UActor::WasRecentlyRendered(float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.WasRecentlyRendered");

	struct WasRecentlyRendered_Params {
		float Tolerance;
		char ReturnValue;

	}; WasRecentlyRendered_Params Params;

	Params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.UserConstructionScript
inline void UActor::UserConstructionScript() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UserConstructionScript");

	struct UserConstructionScript_Params {
		
	}; UserConstructionScript_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.TearOff
inline void UActor::TearOff() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TearOff");

	struct TearOff_Params {
		
	}; TearOff_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SnapRootComponentTo
inline void UActor::SnapRootComponentTo(struct Unknown InParentActor, struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SnapRootComponentTo");

	struct SnapRootComponentTo_Params {
		struct Unknown InParentActor;
		struct FName InSocketName;
	}; SnapRootComponentTo_Params Params;

	Params.InParentActor = InParentActor;
	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetTickGroup
inline void UActor::SetTickGroup(char NewTickGroup) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickGroup");

	struct SetTickGroup_Params {
		char NewTickGroup;
	}; SetTickGroup_Params Params;

	Params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetTickableWhenPaused
inline void UActor::SetTickableWhenPaused(char bTickableWhenPaused) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickableWhenPaused");

	struct SetTickableWhenPaused_Params {
		char bTickableWhenPaused;
	}; SetTickableWhenPaused_Params Params;

	Params.bTickableWhenPaused = bTickableWhenPaused;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetReplicates
inline void UActor::SetReplicates(char bInReplicates) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetReplicates");

	struct SetReplicates_Params {
		char bInReplicates;
	}; SetReplicates_Params Params;

	Params.bInReplicates = bInReplicates;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetReplicateMovement
inline void UActor::SetReplicateMovement(char bInReplicateMovement) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetReplicateMovement");

	struct SetReplicateMovement_Params {
		char bInReplicateMovement;
	}; SetReplicateMovement_Params Params;

	Params.bInReplicateMovement = bInReplicateMovement;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetOwner
inline void UActor::SetOwner(struct Unknown NewOwner) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetOwner");

	struct SetOwner_Params {
		struct Unknown NewOwner;
	}; SetOwner_Params Params;

	Params.NewOwner = NewOwner;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetNetDormancy
inline void UActor::SetNetDormancy(char NewDormancy) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetNetDormancy");

	struct SetNetDormancy_Params {
		char NewDormancy;
	}; SetNetDormancy_Params Params;

	Params.NewDormancy = NewDormancy;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetLifeSpan
inline void UActor::SetLifeSpan(float InLifespan) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetLifeSpan");

	struct SetLifeSpan_Params {
		float InLifespan;
	}; SetLifeSpan_Params Params;

	Params.InLifespan = InLifespan;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetAutoDestroyWhenFinished
inline void UActor::SetAutoDestroyWhenFinished(char bVal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetAutoDestroyWhenFinished");

	struct SetAutoDestroyWhenFinished_Params {
		char bVal;
	}; SetAutoDestroyWhenFinished_Params Params;

	Params.bVal = bVal;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetActorTickInterval
inline void UActor::SetActorTickInterval(float TickInterval) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorTickInterval");

	struct SetActorTickInterval_Params {
		float TickInterval;
	}; SetActorTickInterval_Params Params;

	Params.TickInterval = TickInterval;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetActorTickEnabled
inline void UActor::SetActorTickEnabled(char bEnabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorTickEnabled");

	struct SetActorTickEnabled_Params {
		char bEnabled;
	}; SetActorTickEnabled_Params Params;

	Params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetActorScale3D
inline void UActor::SetActorScale3D(struct Unknown NewScale3D) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorScale3D");

	struct SetActorScale3D_Params {
		struct Unknown NewScale3D;
	}; SetActorScale3D_Params Params;

	Params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetActorRelativeScale3D
inline void UActor::SetActorRelativeScale3D(struct Unknown NewRelativeScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorRelativeScale3D");

	struct SetActorRelativeScale3D_Params {
		struct Unknown NewRelativeScale;
	}; SetActorRelativeScale3D_Params Params;

	Params.NewRelativeScale = NewRelativeScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetActorHiddenInGame
inline void UActor::SetActorHiddenInGame(char bNewHidden) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorHiddenInGame");

	struct SetActorHiddenInGame_Params {
		char bNewHidden;
	}; SetActorHiddenInGame_Params Params;

	Params.bNewHidden = bNewHidden;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.SetActorEnableCollision
inline void UActor::SetActorEnableCollision(char bNewActorEnableCollision) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorEnableCollision");

	struct SetActorEnableCollision_Params {
		char bNewActorEnableCollision;
	}; SetActorEnableCollision_Params Params;

	Params.bNewActorEnableCollision = bNewActorEnableCollision;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.RemoveTickPrerequisiteComponent
inline void UActor::RemoveTickPrerequisiteComponent(struct Unknown PrerequisiteComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RemoveTickPrerequisiteComponent");

	struct RemoveTickPrerequisiteComponent_Params {
		struct Unknown PrerequisiteComponent;
	}; RemoveTickPrerequisiteComponent_Params Params;

	Params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.RemoveTickPrerequisiteActor
inline void UActor::RemoveTickPrerequisiteActor(struct Unknown PrerequisiteActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RemoveTickPrerequisiteActor");

	struct RemoveTickPrerequisiteActor_Params {
		struct Unknown PrerequisiteActor;
	}; RemoveTickPrerequisiteActor_Params Params;

	Params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveTick
inline void UActor::ReceiveTick(float DeltaSeconds) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveTick");

	struct ReceiveTick_Params {
		float DeltaSeconds;
	}; ReceiveTick_Params Params;

	Params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveRadialDamage
inline void UActor::ReceiveRadialDamage(float DamageReceived, struct Unknown DamageType, struct Unknown Origin, struct Unknown& HitInfo, struct Unknown InstigatedBy, struct Unknown DamageCauser) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveRadialDamage");

	struct ReceiveRadialDamage_Params {
		float DamageReceived;
		struct Unknown DamageType;
		struct Unknown Origin;
		struct Unknown& HitInfo;
		struct Unknown InstigatedBy;
		struct Unknown DamageCauser;
	}; ReceiveRadialDamage_Params Params;

	Params.DamageReceived = DamageReceived;
	Params.DamageType = DamageType;
	Params.Origin = Origin;
	Params.InstigatedBy = InstigatedBy;
	Params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitInfo = Params.HitInfo;

}

// Function Engine.Actor.ReceivePointDamage
inline void UActor::ReceivePointDamage(float Damage, struct Unknown DamageType, struct Unknown HitLocation, struct Unknown HitNormal, struct Unknown HitComponent, struct FName BoneName, struct Unknown ShotFromDirection, struct Unknown InstigatedBy, struct Unknown DamageCauser, struct Unknown& HitInfo) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceivePointDamage");

	struct ReceivePointDamage_Params {
		float Damage;
		struct Unknown DamageType;
		struct Unknown HitLocation;
		struct Unknown HitNormal;
		struct Unknown HitComponent;
		struct FName BoneName;
		struct Unknown ShotFromDirection;
		struct Unknown InstigatedBy;
		struct Unknown DamageCauser;
		struct Unknown& HitInfo;
	}; ReceivePointDamage_Params Params;

	Params.Damage = Damage;
	Params.DamageType = DamageType;
	Params.HitLocation = HitLocation;
	Params.HitNormal = HitNormal;
	Params.HitComponent = HitComponent;
	Params.BoneName = BoneName;
	Params.ShotFromDirection = ShotFromDirection;
	Params.InstigatedBy = InstigatedBy;
	Params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitInfo = Params.HitInfo;

}

// Function Engine.Actor.ReceiveHit
inline void UActor::ReceiveHit(struct Unknown MyComp, struct Unknown Other, struct Unknown OtherComp, char bSelfMoved, struct Unknown HitLocation, struct Unknown HitNormal, struct Unknown NormalImpulse, struct Unknown& Hit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveHit");

	struct ReceiveHit_Params {
		struct Unknown MyComp;
		struct Unknown Other;
		struct Unknown OtherComp;
		char bSelfMoved;
		struct Unknown HitLocation;
		struct Unknown HitNormal;
		struct Unknown NormalImpulse;
		struct Unknown& Hit;
	}; ReceiveHit_Params Params;

	Params.MyComp = MyComp;
	Params.Other = Other;
	Params.OtherComp = OtherComp;
	Params.bSelfMoved = bSelfMoved;
	Params.HitLocation = HitLocation;
	Params.HitNormal = HitNormal;
	Params.NormalImpulse = NormalImpulse;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Hit = Params.Hit;

}

// Function Engine.Actor.ReceiveEndPlay
inline void UActor::ReceiveEndPlay(char EndPlayReason) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveEndPlay");

	struct ReceiveEndPlay_Params {
		char EndPlayReason;
	}; ReceiveEndPlay_Params Params;

	Params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveDestroyed
inline void UActor::ReceiveDestroyed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveDestroyed");

	struct ReceiveDestroyed_Params {
		
	}; ReceiveDestroyed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveBeginPlay
inline void UActor::ReceiveBeginPlay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveBeginPlay");

	struct ReceiveBeginPlay_Params {
		
	}; ReceiveBeginPlay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveAnyDamage
inline void UActor::ReceiveAnyDamage(float Damage, struct Unknown DamageType, struct Unknown InstigatedBy, struct Unknown DamageCauser) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveAnyDamage");

	struct ReceiveAnyDamage_Params {
		float Damage;
		struct Unknown DamageType;
		struct Unknown InstigatedBy;
		struct Unknown DamageCauser;
	}; ReceiveAnyDamage_Params Params;

	Params.Damage = Damage;
	Params.DamageType = DamageType;
	Params.InstigatedBy = InstigatedBy;
	Params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorOnReleased
inline void UActor::ReceiveActorOnReleased(struct Unknown ButtonReleased) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnReleased");

	struct ReceiveActorOnReleased_Params {
		struct Unknown ButtonReleased;
	}; ReceiveActorOnReleased_Params Params;

	Params.ButtonReleased = ButtonReleased;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorOnInputTouchLeave
inline void UActor::ReceiveActorOnInputTouchLeave(char FingerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchLeave");

	struct ReceiveActorOnInputTouchLeave_Params {
		char FingerIndex;
	}; ReceiveActorOnInputTouchLeave_Params Params;

	Params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorOnInputTouchEnter
inline void UActor::ReceiveActorOnInputTouchEnter(char FingerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchEnter");

	struct ReceiveActorOnInputTouchEnter_Params {
		char FingerIndex;
	}; ReceiveActorOnInputTouchEnter_Params Params;

	Params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorOnInputTouchEnd
inline void UActor::ReceiveActorOnInputTouchEnd(char FingerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchEnd");

	struct ReceiveActorOnInputTouchEnd_Params {
		char FingerIndex;
	}; ReceiveActorOnInputTouchEnd_Params Params;

	Params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorOnInputTouchBegin
inline void UActor::ReceiveActorOnInputTouchBegin(char FingerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchBegin");

	struct ReceiveActorOnInputTouchBegin_Params {
		char FingerIndex;
	}; ReceiveActorOnInputTouchBegin_Params Params;

	Params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorOnClicked
inline void UActor::ReceiveActorOnClicked(struct Unknown ButtonPressed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnClicked");

	struct ReceiveActorOnClicked_Params {
		struct Unknown ButtonPressed;
	}; ReceiveActorOnClicked_Params Params;

	Params.ButtonPressed = ButtonPressed;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorEndOverlap
inline void UActor::ReceiveActorEndOverlap(struct Unknown OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorEndOverlap");

	struct ReceiveActorEndOverlap_Params {
		struct Unknown OtherActor;
	}; ReceiveActorEndOverlap_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorEndCursorOver
inline void UActor::ReceiveActorEndCursorOver() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorEndCursorOver");

	struct ReceiveActorEndCursorOver_Params {
		
	}; ReceiveActorEndCursorOver_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorBeginOverlap
inline void UActor::ReceiveActorBeginOverlap(struct Unknown OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorBeginOverlap");

	struct ReceiveActorBeginOverlap_Params {
		struct Unknown OtherActor;
	}; ReceiveActorBeginOverlap_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.ReceiveActorBeginCursorOver
inline void UActor::ReceiveActorBeginCursorOver() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorBeginCursorOver");

	struct ReceiveActorBeginCursorOver_Params {
		
	}; ReceiveActorBeginCursorOver_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.PrestreamTextures
inline void UActor::PrestreamTextures(float Seconds, char bEnableStreaming, int32_t CinematicTextureGroups) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PrestreamTextures");

	struct PrestreamTextures_Params {
		float Seconds;
		char bEnableStreaming;
		int32_t CinematicTextureGroups;
	}; PrestreamTextures_Params Params;

	Params.Seconds = Seconds;
	Params.bEnableStreaming = bEnableStreaming;
	Params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.OnRep_ReplicateMovement
inline void UActor::OnRep_ReplicateMovement() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_ReplicateMovement");

	struct OnRep_ReplicateMovement_Params {
		
	}; OnRep_ReplicateMovement_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.OnRep_ReplicatedMovement
inline void UActor::OnRep_ReplicatedMovement() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_ReplicatedMovement");

	struct OnRep_ReplicatedMovement_Params {
		
	}; OnRep_ReplicatedMovement_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.OnRep_Owner
inline void UActor::OnRep_Owner() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_Owner");

	struct OnRep_Owner_Params {
		
	}; OnRep_Owner_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.OnRep_Instigator
inline void UActor::OnRep_Instigator() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_Instigator");

	struct OnRep_Instigator_Params {
		
	}; OnRep_Instigator_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.OnRep_AttachmentReplication
inline void UActor::OnRep_AttachmentReplication() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_AttachmentReplication");

	struct OnRep_AttachmentReplication_Params {
		
	}; OnRep_AttachmentReplication_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.MakeNoise
inline void UActor::MakeNoise(float Loudness, struct Unknown NoiseInstigator, struct Unknown NoiseLocation, float MaxRange, struct FName Tag) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MakeNoise");

	struct MakeNoise_Params {
		float Loudness;
		struct Unknown NoiseInstigator;
		struct Unknown NoiseLocation;
		float MaxRange;
		struct FName Tag;
	}; MakeNoise_Params Params;

	Params.Loudness = Loudness;
	Params.NoiseInstigator = NoiseInstigator;
	Params.NoiseLocation = NoiseLocation;
	Params.MaxRange = MaxRange;
	Params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.MakeMIDForMaterial
inline struct Unknown UActor::MakeMIDForMaterial(struct Unknown Parent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MakeMIDForMaterial");

	struct MakeMIDForMaterial_Params {
		struct Unknown Parent;
		struct Unknown ReturnValue;

	}; MakeMIDForMaterial_Params Params;

	Params.Parent = Parent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.K2_TeleportTo
inline char UActor::K2_TeleportTo(struct Unknown DestLocation, struct Unknown DestRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_TeleportTo");

	struct K2_TeleportTo_Params {
		struct Unknown DestLocation;
		struct Unknown DestRotation;
		char ReturnValue;

	}; K2_TeleportTo_Params Params;

	Params.DestLocation = DestLocation;
	Params.DestRotation = DestRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.K2_SetActorTransform
inline char UActor::K2_SetActorTransform(struct Unknown& NewTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorTransform");

	struct K2_SetActorTransform_Params {
		struct Unknown& NewTransform;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
		char ReturnValue;

	}; K2_SetActorTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewTransform = Params.NewTransform;
	SweepHitResult = Params.SweepHitResult;


	return params.ReturnValue;
}

// Function Engine.Actor.K2_SetActorRotation
inline char UActor::K2_SetActorRotation(struct Unknown NewRotation, char bTeleportPhysics) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorRotation");

	struct K2_SetActorRotation_Params {
		struct Unknown NewRotation;
		char bTeleportPhysics;
		char ReturnValue;

	}; K2_SetActorRotation_Params Params;

	Params.NewRotation = NewRotation;
	Params.bTeleportPhysics = bTeleportPhysics;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.K2_SetActorRelativeTransform
inline void UActor::K2_SetActorRelativeTransform(struct Unknown& NewRelativeTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorRelativeTransform");

	struct K2_SetActorRelativeTransform_Params {
		struct Unknown& NewRelativeTransform;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_SetActorRelativeTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewRelativeTransform = Params.NewRelativeTransform;
	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_SetActorRelativeRotation
inline void UActor::K2_SetActorRelativeRotation(struct Unknown NewRelativeRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorRelativeRotation");

	struct K2_SetActorRelativeRotation_Params {
		struct Unknown NewRelativeRotation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_SetActorRelativeRotation_Params Params;

	Params.NewRelativeRotation = NewRelativeRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_SetActorRelativeLocation
inline void UActor::K2_SetActorRelativeLocation(struct Unknown NewRelativeLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorRelativeLocation");

	struct K2_SetActorRelativeLocation_Params {
		struct Unknown NewRelativeLocation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_SetActorRelativeLocation_Params Params;

	Params.NewRelativeLocation = NewRelativeLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_SetActorLocationAndRotation
inline char UActor::K2_SetActorLocationAndRotation(struct Unknown NewLocation, struct Unknown NewRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorLocationAndRotation");

	struct K2_SetActorLocationAndRotation_Params {
		struct Unknown NewLocation;
		struct Unknown NewRotation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
		char ReturnValue;

	}; K2_SetActorLocationAndRotation_Params Params;

	Params.NewLocation = NewLocation;
	Params.NewRotation = NewRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;


	return params.ReturnValue;
}

// Function Engine.Actor.K2_SetActorLocation
inline char UActor::K2_SetActorLocation(struct Unknown NewLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorLocation");

	struct K2_SetActorLocation_Params {
		struct Unknown NewLocation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
		char ReturnValue;

	}; K2_SetActorLocation_Params Params;

	Params.NewLocation = NewLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;


	return params.ReturnValue;
}

// Function Engine.Actor.K2_OnReset
inline void UActor::K2_OnReset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_OnReset");

	struct K2_OnReset_Params {
		
	}; K2_OnReset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_OnEndViewTarget
inline void UActor::K2_OnEndViewTarget(struct Unknown PC) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_OnEndViewTarget");

	struct K2_OnEndViewTarget_Params {
		struct Unknown PC;
	}; K2_OnEndViewTarget_Params Params;

	Params.PC = PC;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_OnBecomeViewTarget
inline void UActor::K2_OnBecomeViewTarget(struct Unknown PC) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_OnBecomeViewTarget");

	struct K2_OnBecomeViewTarget_Params {
		struct Unknown PC;
	}; K2_OnBecomeViewTarget_Params Params;

	Params.PC = PC;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_GetRootComponent
inline struct Unknown UActor::K2_GetRootComponent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetRootComponent");

	struct K2_GetRootComponent_Params {
		
		struct Unknown ReturnValue;

	}; K2_GetRootComponent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.K2_GetComponentsByClass
inline struct TArray<Unknown> UActor::K2_GetComponentsByClass(struct Unknown* ComponentClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetComponentsByClass");

	struct K2_GetComponentsByClass_Params {
		struct Unknown* ComponentClass;
		struct TArray<Unknown> ReturnValue;

	}; K2_GetComponentsByClass_Params Params;

	Params.ComponentClass = ComponentClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.K2_GetActorRotation
inline struct Unknown UActor::K2_GetActorRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetActorRotation");

	struct K2_GetActorRotation_Params {
		
		struct Unknown ReturnValue;

	}; K2_GetActorRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.K2_GetActorLocation
inline struct Unknown UActor::K2_GetActorLocation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetActorLocation");

	struct K2_GetActorLocation_Params {
		
		struct Unknown ReturnValue;

	}; K2_GetActorLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.K2_DetachFromActor
inline void UActor::K2_DetachFromActor(enum class Unknow LocationRule, enum class Unknow RotationRule, enum class Unknow ScaleRule) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_DetachFromActor");

	struct K2_DetachFromActor_Params {
		enum class Unknow LocationRule;
		enum class Unknow RotationRule;
		enum class Unknow ScaleRule;
	}; K2_DetachFromActor_Params Params;

	Params.LocationRule = LocationRule;
	Params.RotationRule = RotationRule;
	Params.ScaleRule = ScaleRule;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_DestroyComponent
inline void UActor::K2_DestroyComponent(struct Unknown Component) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_DestroyComponent");

	struct K2_DestroyComponent_Params {
		struct Unknown Component;
	}; K2_DestroyComponent_Params Params;

	Params.Component = Component;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_DestroyActor
inline void UActor::K2_DestroyActor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_DestroyActor");

	struct K2_DestroyActor_Params {
		
	}; K2_DestroyActor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_AttachToComponent
inline void UActor::K2_AttachToComponent(struct Unknown Parent, struct FName SocketName, enum class Unknow LocationRule, enum class Unknow RotationRule, enum class Unknow ScaleRule, char bWeldSimulatedBodies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AttachToComponent");

	struct K2_AttachToComponent_Params {
		struct Unknown Parent;
		struct FName SocketName;
		enum class Unknow LocationRule;
		enum class Unknow RotationRule;
		enum class Unknow ScaleRule;
		char bWeldSimulatedBodies;
	}; K2_AttachToComponent_Params Params;

	Params.Parent = Parent;
	Params.SocketName = SocketName;
	Params.LocationRule = LocationRule;
	Params.RotationRule = RotationRule;
	Params.ScaleRule = ScaleRule;
	Params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_AttachToActor
inline void UActor::K2_AttachToActor(struct Unknown ParentActor, struct FName SocketName, enum class Unknow LocationRule, enum class Unknow RotationRule, enum class Unknow ScaleRule, char bWeldSimulatedBodies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AttachToActor");

	struct K2_AttachToActor_Params {
		struct Unknown ParentActor;
		struct FName SocketName;
		enum class Unknow LocationRule;
		enum class Unknow RotationRule;
		enum class Unknow ScaleRule;
		char bWeldSimulatedBodies;
	}; K2_AttachToActor_Params Params;

	Params.ParentActor = ParentActor;
	Params.SocketName = SocketName;
	Params.LocationRule = LocationRule;
	Params.RotationRule = RotationRule;
	Params.ScaleRule = ScaleRule;
	Params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_AttachRootComponentToActor
inline void UActor::K2_AttachRootComponentToActor(struct Unknown InParentActor, struct FName InSocketName, char AttachLocationType, char bWeldSimulatedBodies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AttachRootComponentToActor");

	struct K2_AttachRootComponentToActor_Params {
		struct Unknown InParentActor;
		struct FName InSocketName;
		char AttachLocationType;
		char bWeldSimulatedBodies;
	}; K2_AttachRootComponentToActor_Params Params;

	Params.InParentActor = InParentActor;
	Params.InSocketName = InSocketName;
	Params.AttachLocationType = AttachLocationType;
	Params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_AttachRootComponentTo
inline void UActor::K2_AttachRootComponentTo(struct Unknown InParent, struct FName InSocketName, char AttachLocationType, char bWeldSimulatedBodies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AttachRootComponentTo");

	struct K2_AttachRootComponentTo_Params {
		struct Unknown InParent;
		struct FName InSocketName;
		char AttachLocationType;
		char bWeldSimulatedBodies;
	}; K2_AttachRootComponentTo_Params Params;

	Params.InParent = InParent;
	Params.InSocketName = InSocketName;
	Params.AttachLocationType = AttachLocationType;
	Params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.K2_AddActorWorldTransform
inline void UActor::K2_AddActorWorldTransform(struct Unknown& DeltaTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorWorldTransform");

	struct K2_AddActorWorldTransform_Params {
		struct Unknown& DeltaTransform;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_AddActorWorldTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	DeltaTransform = Params.DeltaTransform;
	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_AddActorWorldRotation
inline void UActor::K2_AddActorWorldRotation(struct Unknown DeltaRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorWorldRotation");

	struct K2_AddActorWorldRotation_Params {
		struct Unknown DeltaRotation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_AddActorWorldRotation_Params Params;

	Params.DeltaRotation = DeltaRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_AddActorWorldOffset
inline void UActor::K2_AddActorWorldOffset(struct Unknown DeltaLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorWorldOffset");

	struct K2_AddActorWorldOffset_Params {
		struct Unknown DeltaLocation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_AddActorWorldOffset_Params Params;

	Params.DeltaLocation = DeltaLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_AddActorLocalTransform
inline void UActor::K2_AddActorLocalTransform(struct Unknown& NewTransform, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorLocalTransform");

	struct K2_AddActorLocalTransform_Params {
		struct Unknown& NewTransform;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_AddActorLocalTransform_Params Params;

	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewTransform = Params.NewTransform;
	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_AddActorLocalRotation
inline void UActor::K2_AddActorLocalRotation(struct Unknown DeltaRotation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorLocalRotation");

	struct K2_AddActorLocalRotation_Params {
		struct Unknown DeltaRotation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_AddActorLocalRotation_Params Params;

	Params.DeltaRotation = DeltaRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.K2_AddActorLocalOffset
inline void UActor::K2_AddActorLocalOffset(struct Unknown DeltaLocation, char bSweep, struct Unknown& SweepHitResult, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AddActorLocalOffset");

	struct K2_AddActorLocalOffset_Params {
		struct Unknown DeltaLocation;
		char bSweep;
		struct Unknown& SweepHitResult;
		char bTeleport;
	}; K2_AddActorLocalOffset_Params Params;

	Params.DeltaLocation = DeltaLocation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepHitResult = Params.SweepHitResult;

}

// Function Engine.Actor.IsOverlappingActor
inline char UActor::IsOverlappingActor(struct Unknown Other) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsOverlappingActor");

	struct IsOverlappingActor_Params {
		struct Unknown Other;
		char ReturnValue;

	}; IsOverlappingActor_Params Params;

	Params.Other = Other;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.IsChildActor
inline char UActor::IsChildActor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsChildActor");

	struct IsChildActor_Params {
		
		char ReturnValue;

	}; IsChildActor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.IsActorTickEnabled
inline char UActor::IsActorTickEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsActorTickEnabled");

	struct IsActorTickEnabled_Params {
		
		char ReturnValue;

	}; IsActorTickEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.IsActorBeingDestroyed
inline char UActor::IsActorBeingDestroyed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsActorBeingDestroyed");

	struct IsActorBeingDestroyed_Params {
		
		char ReturnValue;

	}; IsActorBeingDestroyed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.HasAuthority
inline char UActor::HasAuthority() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HasAuthority");

	struct HasAuthority_Params {
		
		char ReturnValue;

	}; HasAuthority_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetVerticalDistanceTo
inline float UActor::GetVerticalDistanceTo(struct Unknown OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetVerticalDistanceTo");

	struct GetVerticalDistanceTo_Params {
		struct Unknown OtherActor;
		float ReturnValue;

	}; GetVerticalDistanceTo_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetVelocity
inline struct Unknown UActor::GetVelocity() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetVelocity");

	struct GetVelocity_Params {
		
		struct Unknown ReturnValue;

	}; GetVelocity_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetTransform
inline struct Unknown UActor::GetTransform() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTransform");

	struct GetTransform_Params {
		
		struct Unknown ReturnValue;

	}; GetTransform_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetTickableWhenPaused
inline char UActor::GetTickableWhenPaused() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTickableWhenPaused");

	struct GetTickableWhenPaused_Params {
		
		char ReturnValue;

	}; GetTickableWhenPaused_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetSquaredDistanceTo
inline float UActor::GetSquaredDistanceTo(struct Unknown OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetSquaredDistanceTo");

	struct GetSquaredDistanceTo_Params {
		struct Unknown OtherActor;
		float ReturnValue;

	}; GetSquaredDistanceTo_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetRemoteRole
inline char UActor::GetRemoteRole() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetRemoteRole");

	struct GetRemoteRole_Params {
		
		char ReturnValue;

	}; GetRemoteRole_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetParentComponent
inline struct Unknown UActor::GetParentComponent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetParentComponent");

	struct GetParentComponent_Params {
		
		struct Unknown ReturnValue;

	}; GetParentComponent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetParentActor
inline struct Unknown UActor::GetParentActor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetParentActor");

	struct GetParentActor_Params {
		
		struct Unknown ReturnValue;

	}; GetParentActor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetOwner
inline struct Unknown UActor::GetOwner() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetOwner");

	struct GetOwner_Params {
		
		struct Unknown ReturnValue;

	}; GetOwner_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetOverlappingComponents
inline void UActor::GetOverlappingComponents(struct TArray<Unknown>& OverlappingComponents) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetOverlappingComponents");

	struct GetOverlappingComponents_Params {
		struct TArray<Unknown>& OverlappingComponents;
	}; GetOverlappingComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OverlappingComponents = Params.OverlappingComponents;

}

// Function Engine.Actor.GetOverlappingActors
inline void UActor::GetOverlappingActors(struct TArray<Unknown>& OverlappingActors, struct Unknown* ClassFilter) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetOverlappingActors");

	struct GetOverlappingActors_Params {
		struct TArray<Unknown>& OverlappingActors;
		struct Unknown* ClassFilter;
	}; GetOverlappingActors_Params Params;

	Params.ClassFilter = ClassFilter;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OverlappingActors = Params.OverlappingActors;

}

// Function Engine.Actor.GetLocalRole
inline char UActor::GetLocalRole() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetLocalRole");

	struct GetLocalRole_Params {
		
		char ReturnValue;

	}; GetLocalRole_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetLifeSpan
inline float UActor::GetLifeSpan() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetLifeSpan");

	struct GetLifeSpan_Params {
		
		float ReturnValue;

	}; GetLifeSpan_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetInstigatorController
inline struct Unknown UActor::GetInstigatorController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInstigatorController");

	struct GetInstigatorController_Params {
		
		struct Unknown ReturnValue;

	}; GetInstigatorController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetInstigator
inline struct Unknown UActor::GetInstigator() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInstigator");

	struct GetInstigator_Params {
		
		struct Unknown ReturnValue;

	}; GetInstigator_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetInputVectorAxisValue
inline struct Unknown UActor::GetInputVectorAxisValue(struct Unknown InputAxisKey) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInputVectorAxisValue");

	struct GetInputVectorAxisValue_Params {
		struct Unknown InputAxisKey;
		struct Unknown ReturnValue;

	}; GetInputVectorAxisValue_Params Params;

	Params.InputAxisKey = InputAxisKey;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetInputAxisValue
inline float UActor::GetInputAxisValue(struct FName InputAxisName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInputAxisValue");

	struct GetInputAxisValue_Params {
		struct FName InputAxisName;
		float ReturnValue;

	}; GetInputAxisValue_Params Params;

	Params.InputAxisName = InputAxisName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetInputAxisKeyValue
inline float UActor::GetInputAxisKeyValue(struct Unknown InputAxisKey) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInputAxisKeyValue");

	struct GetInputAxisKeyValue_Params {
		struct Unknown InputAxisKey;
		float ReturnValue;

	}; GetInputAxisKeyValue_Params Params;

	Params.InputAxisKey = InputAxisKey;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetHorizontalDotProductTo
inline float UActor::GetHorizontalDotProductTo(struct Unknown OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetHorizontalDotProductTo");

	struct GetHorizontalDotProductTo_Params {
		struct Unknown OtherActor;
		float ReturnValue;

	}; GetHorizontalDotProductTo_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetHorizontalDistanceTo
inline float UActor::GetHorizontalDistanceTo(struct Unknown OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetHorizontalDistanceTo");

	struct GetHorizontalDistanceTo_Params {
		struct Unknown OtherActor;
		float ReturnValue;

	}; GetHorizontalDistanceTo_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetGameTimeSinceCreation
inline float UActor::GetGameTimeSinceCreation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetGameTimeSinceCreation");

	struct GetGameTimeSinceCreation_Params {
		
		float ReturnValue;

	}; GetGameTimeSinceCreation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetDotProductTo
inline float UActor::GetDotProductTo(struct Unknown OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDotProductTo");

	struct GetDotProductTo_Params {
		struct Unknown OtherActor;
		float ReturnValue;

	}; GetDotProductTo_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetDistanceTo
inline float UActor::GetDistanceTo(struct Unknown OtherActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDistanceTo");

	struct GetDistanceTo_Params {
		struct Unknown OtherActor;
		float ReturnValue;

	}; GetDistanceTo_Params Params;

	Params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetComponentsByTag
inline struct TArray<Unknown> UActor::GetComponentsByTag(struct Unknown* ComponentClass, struct FName Tag) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentsByTag");

	struct GetComponentsByTag_Params {
		struct Unknown* ComponentClass;
		struct FName Tag;
		struct TArray<Unknown> ReturnValue;

	}; GetComponentsByTag_Params Params;

	Params.ComponentClass = ComponentClass;
	Params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetComponentsByInterface
inline struct TArray<Unknown> UActor::GetComponentsByInterface(struct Unknown* Interface) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentsByInterface");

	struct GetComponentsByInterface_Params {
		struct Unknown* Interface;
		struct TArray<Unknown> ReturnValue;

	}; GetComponentsByInterface_Params Params;

	Params.Interface = Interface;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetComponentByClass
inline struct Unknown UActor::GetComponentByClass(struct Unknown* ComponentClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentByClass");

	struct GetComponentByClass_Params {
		struct Unknown* ComponentClass;
		struct Unknown ReturnValue;

	}; GetComponentByClass_Params Params;

	Params.ComponentClass = ComponentClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetAttachParentSocketName
inline struct FName UActor::GetAttachParentSocketName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachParentSocketName");

	struct GetAttachParentSocketName_Params {
		
		struct FName ReturnValue;

	}; GetAttachParentSocketName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetAttachParentActors
inline void UActor::GetAttachParentActors(struct TArray<Unknown>& OutActors) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachParentActors");

	struct GetAttachParentActors_Params {
		struct TArray<Unknown>& OutActors;
	}; GetAttachParentActors_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutActors = Params.OutActors;

}

// Function Engine.Actor.GetAttachParentActorMost
inline struct Unknown UActor::GetAttachParentActorMost() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachParentActorMost");

	struct GetAttachParentActorMost_Params {
		
		struct Unknown ReturnValue;

	}; GetAttachParentActorMost_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetAttachParentActor
inline struct Unknown UActor::GetAttachParentActor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachParentActor");

	struct GetAttachParentActor_Params {
		
		struct Unknown ReturnValue;

	}; GetAttachParentActor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetAttachedActorsRecursive
inline void UActor::GetAttachedActorsRecursive(struct TArray<Unknown>& OutActors, char bIncludeChildActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachedActorsRecursive");

	struct GetAttachedActorsRecursive_Params {
		struct TArray<Unknown>& OutActors;
		char bIncludeChildActor;
	}; GetAttachedActorsRecursive_Params Params;

	Params.bIncludeChildActor = bIncludeChildActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutActors = Params.OutActors;

}

// Function Engine.Actor.GetAttachedActors
inline void UActor::GetAttachedActors(struct TArray<Unknown>& OutActors, char bResetArray, char bIncludeChildActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachedActors");

	struct GetAttachedActors_Params {
		struct TArray<Unknown>& OutActors;
		char bResetArray;
		char bIncludeChildActor;
	}; GetAttachedActors_Params Params;

	Params.bResetArray = bResetArray;
	Params.bIncludeChildActor = bIncludeChildActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutActors = Params.OutActors;

}

// Function Engine.Actor.GetAllChildActors
inline void UActor::GetAllChildActors(struct TArray<Unknown>& ChildActors, char bIncludeDescendants) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAllChildActors");

	struct GetAllChildActors_Params {
		struct TArray<Unknown>& ChildActors;
		char bIncludeDescendants;
	}; GetAllChildActors_Params Params;

	Params.bIncludeDescendants = bIncludeDescendants;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ChildActors = Params.ChildActors;

}

// Function Engine.Actor.GetActorUpVector
inline struct Unknown UActor::GetActorUpVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorUpVector");

	struct GetActorUpVector_Params {
		
		struct Unknown ReturnValue;

	}; GetActorUpVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorTimeDilation
inline float UActor::GetActorTimeDilation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorTimeDilation");

	struct GetActorTimeDilation_Params {
		
		float ReturnValue;

	}; GetActorTimeDilation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorTickInterval
inline float UActor::GetActorTickInterval() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorTickInterval");

	struct GetActorTickInterval_Params {
		
		float ReturnValue;

	}; GetActorTickInterval_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorScale3D
inline struct Unknown UActor::GetActorScale3D() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorScale3D");

	struct GetActorScale3D_Params {
		
		struct Unknown ReturnValue;

	}; GetActorScale3D_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorRightVector
inline struct Unknown UActor::GetActorRightVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorRightVector");

	struct GetActorRightVector_Params {
		
		struct Unknown ReturnValue;

	}; GetActorRightVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorRelativeScale3D
inline struct Unknown UActor::GetActorRelativeScale3D() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorRelativeScale3D");

	struct GetActorRelativeScale3D_Params {
		
		struct Unknown ReturnValue;

	}; GetActorRelativeScale3D_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorForwardVector
inline struct Unknown UActor::GetActorForwardVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorForwardVector");

	struct GetActorForwardVector_Params {
		
		struct Unknown ReturnValue;

	}; GetActorForwardVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorEyesViewPoint
inline void UActor::GetActorEyesViewPoint(struct Unknown& OutLocation, struct Unknown& OutRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorEyesViewPoint");

	struct GetActorEyesViewPoint_Params {
		struct Unknown& OutLocation;
		struct Unknown& OutRotation;
	}; GetActorEyesViewPoint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutLocation = Params.OutLocation;
	OutRotation = Params.OutRotation;

}

// Function Engine.Actor.GetActorEnableCollision
inline char UActor::GetActorEnableCollision() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorEnableCollision");

	struct GetActorEnableCollision_Params {
		
		char ReturnValue;

	}; GetActorEnableCollision_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Actor.GetActorBounds
inline void UActor::GetActorBounds(char bOnlyCollidingComponents, struct Unknown& Origin, struct Unknown& BoxExtent, char bIncludeFromChildActors) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorBounds");

	struct GetActorBounds_Params {
		char bOnlyCollidingComponents;
		struct Unknown& Origin;
		struct Unknown& BoxExtent;
		char bIncludeFromChildActors;
	}; GetActorBounds_Params Params;

	Params.bOnlyCollidingComponents = bOnlyCollidingComponents;
	Params.bIncludeFromChildActors = bIncludeFromChildActors;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Origin = Params.Origin;
	BoxExtent = Params.BoxExtent;

}

// Function Engine.Actor.ForceNetUpdate
inline void UActor::ForceNetUpdate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceNetUpdate");

	struct ForceNetUpdate_Params {
		
	}; ForceNetUpdate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.FlushNetDormancy
inline void UActor::FlushNetDormancy() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FlushNetDormancy");

	struct FlushNetDormancy_Params {
		
	}; FlushNetDormancy_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.EnableInput
inline void UActor::EnableInput(struct Unknown PlayerController) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EnableInput");

	struct EnableInput_Params {
		struct Unknown PlayerController;
	}; EnableInput_Params Params;

	Params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.DisableInput
inline void UActor::DisableInput(struct Unknown PlayerController) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DisableInput");

	struct DisableInput_Params {
		struct Unknown PlayerController;
	}; DisableInput_Params Params;

	Params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.DetachRootComponentFromParent
inline void UActor::DetachRootComponentFromParent(char bMaintainWorldPosition) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DetachRootComponentFromParent");

	struct DetachRootComponentFromParent_Params {
		char bMaintainWorldPosition;
	}; DetachRootComponentFromParent_Params Params;

	Params.bMaintainWorldPosition = bMaintainWorldPosition;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.AddTickPrerequisiteComponent
inline void UActor::AddTickPrerequisiteComponent(struct Unknown PrerequisiteComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddTickPrerequisiteComponent");

	struct AddTickPrerequisiteComponent_Params {
		struct Unknown PrerequisiteComponent;
	}; AddTickPrerequisiteComponent_Params Params;

	Params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.AddTickPrerequisiteActor
inline void UActor::AddTickPrerequisiteActor(struct Unknown PrerequisiteActor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddTickPrerequisiteActor");

	struct AddTickPrerequisiteActor_Params {
		struct Unknown PrerequisiteActor;
	}; AddTickPrerequisiteActor_Params Params;

	Params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Actor.AddComponent
inline struct Unknown UActor::AddComponent(struct FName TemplateName, char bManualAttachment, struct Unknown& RelativeTransform, struct Unknown ComponentTemplateContext) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddComponent");

	struct AddComponent_Params {
		struct FName TemplateName;
		char bManualAttachment;
		struct Unknown& RelativeTransform;
		struct Unknown ComponentTemplateContext;
		struct Unknown ReturnValue;

	}; AddComponent_Params Params;

	Params.TemplateName = TemplateName;
	Params.bManualAttachment = bManualAttachment;
	Params.ComponentTemplateContext = ComponentTemplateContext;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	RelativeTransform = Params.RelativeTransform;


	return params.ReturnValue;
}

// Function Engine.Actor.ActorHasTag
inline char UActor::ActorHasTag(struct FName Tag) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorHasTag");

	struct ActorHasTag_Params {
		struct FName Tag;
		char ReturnValue;

	}; ActorHasTag_Params Params;

	Params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
inline void ASkeletalMeshActor::OnRep_ReplicatedPhysAsset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset");

	struct OnRep_ReplicatedPhysAsset_Params {
		
	}; OnRep_ReplicatedPhysAsset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
inline void ASkeletalMeshActor::OnRep_ReplicatedMesh() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh");

	struct OnRep_ReplicatedMesh_Params {
		
	}; OnRep_ReplicatedMesh_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
inline void ASkeletalMeshActor::OnRep_ReplicatedMaterial1() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1");

	struct OnRep_ReplicatedMaterial1_Params {
		
	}; OnRep_ReplicatedMaterial1_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
inline void ASkeletalMeshActor::OnRep_ReplicatedMaterial0() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0");

	struct OnRep_ReplicatedMaterial0_Params {
		
	}; OnRep_ReplicatedMaterial0_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.WasRecentlyRendered
inline char UPrimitiveComponent::WasRecentlyRendered(float Tolerance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WasRecentlyRendered");

	struct WasRecentlyRendered_Params {
		float Tolerance;
		char ReturnValue;

	}; WasRecentlyRendered_Params Params;

	Params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.WakeRigidBody
inline void UPrimitiveComponent::WakeRigidBody(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WakeRigidBody");

	struct WakeRigidBody_Params {
		struct FName BoneName;
	}; WakeRigidBody_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.WakeAllRigidBodies
inline void UPrimitiveComponent::WakeAllRigidBodies() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WakeAllRigidBodies");

	struct WakeAllRigidBodies_Params {
		
	}; WakeAllRigidBodies_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetWalkableSlopeOverride
inline void UPrimitiveComponent::SetWalkableSlopeOverride(struct Unknown& NewOverride) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetWalkableSlopeOverride");

	struct SetWalkableSlopeOverride_Params {
		struct Unknown& NewOverride;
	}; SetWalkableSlopeOverride_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewOverride = Params.NewOverride;

}

// Function Engine.PrimitiveComponent.SetUseCCD
inline void UPrimitiveComponent::SetUseCCD(char InUseCCD, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetUseCCD");

	struct SetUseCCD_Params {
		char InUseCCD;
		struct FName BoneName;
	}; SetUseCCD_Params Params;

	Params.InUseCCD = InUseCCD;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetTranslucentSortPriority
inline void UPrimitiveComponent::SetTranslucentSortPriority(int32_t NewTranslucentSortPriority) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetTranslucentSortPriority");

	struct SetTranslucentSortPriority_Params {
		int32_t NewTranslucentSortPriority;
	}; SetTranslucentSortPriority_Params Params;

	Params.NewTranslucentSortPriority = NewTranslucentSortPriority;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights
inline void UPrimitiveComponent::SetSingleSampleShadowFromStationaryLights(char bNewSingleSampleShadowFromStationaryLights) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights");

	struct SetSingleSampleShadowFromStationaryLights_Params {
		char bNewSingleSampleShadowFromStationaryLights;
	}; SetSingleSampleShadowFromStationaryLights_Params Params;

	Params.bNewSingleSampleShadowFromStationaryLights = bNewSingleSampleShadowFromStationaryLights;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetSimulatePhysics
inline void UPrimitiveComponent::SetSimulatePhysics(char bSimulate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetSimulatePhysics");

	struct SetSimulatePhysics_Params {
		char bSimulate;
	}; SetSimulatePhysics_Params Params;

	Params.bSimulate = bSimulate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetRenderInMainPass
inline void UPrimitiveComponent::SetRenderInMainPass(char bValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRenderInMainPass");

	struct SetRenderInMainPass_Params {
		char bValue;
	}; SetRenderInMainPass_Params Params;

	Params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetRenderCustomDepth
inline void UPrimitiveComponent::SetRenderCustomDepth(char bValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRenderCustomDepth");

	struct SetRenderCustomDepth_Params {
		char bValue;
	}; SetRenderCustomDepth_Params Params;

	Params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetReceivesDecals
inline void UPrimitiveComponent::SetReceivesDecals(char bNewReceivesDecals) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetReceivesDecals");

	struct SetReceivesDecals_Params {
		char bNewReceivesDecals;
	}; SetReceivesDecals_Params Params;

	Params.bNewReceivesDecals = bNewReceivesDecals;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysMaterialOverride
inline void UPrimitiveComponent::SetPhysMaterialOverride(struct Unknown NewPhysMaterial) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysMaterialOverride");

	struct SetPhysMaterialOverride_Params {
		struct Unknown NewPhysMaterial;
	}; SetPhysMaterialOverride_Params Params;

	Params.NewPhysMaterial = NewPhysMaterial;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians
inline void UPrimitiveComponent::SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, char bAddToCurrent, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians");

	struct SetPhysicsMaxAngularVelocityInRadians_Params {
		float NewMaxAngVel;
		char bAddToCurrent;
		struct FName BoneName;
	}; SetPhysicsMaxAngularVelocityInRadians_Params Params;

	Params.NewMaxAngVel = NewMaxAngVel;
	Params.bAddToCurrent = bAddToCurrent;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees
inline void UPrimitiveComponent::SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, char bAddToCurrent, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees");

	struct SetPhysicsMaxAngularVelocityInDegrees_Params {
		float NewMaxAngVel;
		char bAddToCurrent;
		struct FName BoneName;
	}; SetPhysicsMaxAngularVelocityInDegrees_Params Params;

	Params.NewMaxAngVel = NewMaxAngVel;
	Params.bAddToCurrent = bAddToCurrent;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity
inline void UPrimitiveComponent::SetPhysicsMaxAngularVelocity(float NewMaxAngVel, char bAddToCurrent, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity");

	struct SetPhysicsMaxAngularVelocity_Params {
		float NewMaxAngVel;
		char bAddToCurrent;
		struct FName BoneName;
	}; SetPhysicsMaxAngularVelocity_Params Params;

	Params.NewMaxAngVel = NewMaxAngVel;
	Params.bAddToCurrent = bAddToCurrent;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity
inline void UPrimitiveComponent::SetPhysicsLinearVelocity(struct Unknown NewVel, char bAddToCurrent, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity");

	struct SetPhysicsLinearVelocity_Params {
		struct Unknown NewVel;
		char bAddToCurrent;
		struct FName BoneName;
	}; SetPhysicsLinearVelocity_Params Params;

	Params.NewVel = NewVel;
	Params.bAddToCurrent = bAddToCurrent;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians
inline void UPrimitiveComponent::SetPhysicsAngularVelocityInRadians(struct Unknown NewAngVel, char bAddToCurrent, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians");

	struct SetPhysicsAngularVelocityInRadians_Params {
		struct Unknown NewAngVel;
		char bAddToCurrent;
		struct FName BoneName;
	}; SetPhysicsAngularVelocityInRadians_Params Params;

	Params.NewAngVel = NewAngVel;
	Params.bAddToCurrent = bAddToCurrent;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees
inline void UPrimitiveComponent::SetPhysicsAngularVelocityInDegrees(struct Unknown NewAngVel, char bAddToCurrent, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees");

	struct SetPhysicsAngularVelocityInDegrees_Params {
		struct Unknown NewAngVel;
		char bAddToCurrent;
		struct FName BoneName;
	}; SetPhysicsAngularVelocityInDegrees_Params Params;

	Params.NewAngVel = NewAngVel;
	Params.bAddToCurrent = bAddToCurrent;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity
inline void UPrimitiveComponent::SetPhysicsAngularVelocity(struct Unknown NewAngVel, char bAddToCurrent, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity");

	struct SetPhysicsAngularVelocity_Params {
		struct Unknown NewAngVel;
		char bAddToCurrent;
		struct FName BoneName;
	}; SetPhysicsAngularVelocity_Params Params;

	Params.NewAngVel = NewAngVel;
	Params.bAddToCurrent = bAddToCurrent;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetOwnerNoSee
inline void UPrimitiveComponent::SetOwnerNoSee(char bNewOwnerNoSee) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOwnerNoSee");

	struct SetOwnerNoSee_Params {
		char bNewOwnerNoSee;
	}; SetOwnerNoSee_Params Params;

	Params.bNewOwnerNoSee = bNewOwnerNoSee;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetOnlyOwnerSee
inline void UPrimitiveComponent::SetOnlyOwnerSee(char bNewOnlyOwnerSee) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOnlyOwnerSee");

	struct SetOnlyOwnerSee_Params {
		char bNewOnlyOwnerSee;
	}; SetOnlyOwnerSee_Params Params;

	Params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
inline void UPrimitiveComponent::SetNotifyRigidBodyCollision(char bNewNotifyRigidBodyCollision) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision");

	struct SetNotifyRigidBodyCollision_Params {
		char bNewNotifyRigidBodyCollision;
	}; SetNotifyRigidBodyCollision_Params Params;

	Params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetMaterialByName
inline void UPrimitiveComponent::SetMaterialByName(struct FName MaterialSlotName, struct Unknown Material) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetMaterialByName");

	struct SetMaterialByName_Params {
		struct FName MaterialSlotName;
		struct Unknown Material;
	}; SetMaterialByName_Params Params;

	Params.MaterialSlotName = MaterialSlotName;
	Params.Material = Material;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetMaterial
inline void UPrimitiveComponent::SetMaterial(int32_t ElementIndex, struct Unknown Material) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetMaterial");

	struct SetMaterial_Params {
		int32_t ElementIndex;
		struct Unknown Material;
	}; SetMaterial_Params Params;

	Params.ElementIndex = ElementIndex;
	Params.Material = Material;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetMassScale
inline void UPrimitiveComponent::SetMassScale(struct FName BoneName, float InMassScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetMassScale");

	struct SetMassScale_Params {
		struct FName BoneName;
		float InMassScale;
	}; SetMassScale_Params Params;

	Params.BoneName = BoneName;
	Params.InMassScale = InMassScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetMassOverrideInKg
inline void UPrimitiveComponent::SetMassOverrideInKg(struct FName BoneName, float MassInKg, char bOverrideMass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetMassOverrideInKg");

	struct SetMassOverrideInKg_Params {
		struct FName BoneName;
		float MassInKg;
		char bOverrideMass;
	}; SetMassOverrideInKg_Params Params;

	Params.BoneName = BoneName;
	Params.MassInKg = MassInKg;
	Params.bOverrideMass = bOverrideMass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetLinearDamping
inline void UPrimitiveComponent::SetLinearDamping(float InDamping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLinearDamping");

	struct SetLinearDamping_Params {
		float InDamping;
	}; SetLinearDamping_Params Params;

	Params.InDamping = InDamping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetLightingChannels
inline void UPrimitiveComponent::SetLightingChannels(char bChannel0, char bChannel1, char bChannel2) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLightingChannels");

	struct SetLightingChannels_Params {
		char bChannel0;
		char bChannel1;
		char bChannel2;
	}; SetLightingChannels_Params Params;

	Params.bChannel0 = bChannel0;
	Params.bChannel1 = bChannel1;
	Params.bChannel2 = bChannel2;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup
inline void UPrimitiveComponent::SetLightAttachmentsAsGroup(char bInLightAttachmentsAsGroup) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup");

	struct SetLightAttachmentsAsGroup_Params {
		char bInLightAttachmentsAsGroup;
	}; SetLightAttachmentsAsGroup_Params Params;

	Params.bInLightAttachmentsAsGroup = bInLightAttachmentsAsGroup;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetGenerateOverlapEvents
inline void UPrimitiveComponent::SetGenerateOverlapEvents(char bInGenerateOverlapEvents) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetGenerateOverlapEvents");

	struct SetGenerateOverlapEvents_Params {
		char bInGenerateOverlapEvents;
	}; SetGenerateOverlapEvents_Params Params;

	Params.bInGenerateOverlapEvents = bInGenerateOverlapEvents;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup
inline void UPrimitiveComponent::SetExcludeFromLightAttachmentGroup(char bInExcludeFromLightAttachmentGroup) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup");

	struct SetExcludeFromLightAttachmentGroup_Params {
		char bInExcludeFromLightAttachmentGroup;
	}; SetExcludeFromLightAttachmentGroup_Params Params;

	Params.bInExcludeFromLightAttachmentGroup = bInExcludeFromLightAttachmentGroup;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetEnableGravity
inline void UPrimitiveComponent::SetEnableGravity(char bGravityEnabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetEnableGravity");

	struct SetEnableGravity_Params {
		char bGravityEnabled;
	}; SetEnableGravity_Params Params;

	Params.bGravityEnabled = bGravityEnabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4
inline void UPrimitiveComponent::SetCustomPrimitiveDataVector4(int32_t DataIndex, struct Unknown Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4");

	struct SetCustomPrimitiveDataVector4_Params {
		int32_t DataIndex;
		struct Unknown Value;
	}; SetCustomPrimitiveDataVector4_Params Params;

	Params.DataIndex = DataIndex;
	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3
inline void UPrimitiveComponent::SetCustomPrimitiveDataVector3(int32_t DataIndex, struct Unknown Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3");

	struct SetCustomPrimitiveDataVector3_Params {
		int32_t DataIndex;
		struct Unknown Value;
	}; SetCustomPrimitiveDataVector3_Params Params;

	Params.DataIndex = DataIndex;
	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2
inline void UPrimitiveComponent::SetCustomPrimitiveDataVector2(int32_t DataIndex, struct Unknown Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2");

	struct SetCustomPrimitiveDataVector2_Params {
		int32_t DataIndex;
		struct Unknown Value;
	}; SetCustomPrimitiveDataVector2_Params Params;

	Params.DataIndex = DataIndex;
	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat
inline void UPrimitiveComponent::SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat");

	struct SetCustomPrimitiveDataFloat_Params {
		int32_t DataIndex;
		float Value;
	}; SetCustomPrimitiveDataFloat_Params Params;

	Params.DataIndex = DataIndex;
	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask
inline void UPrimitiveComponent::SetCustomDepthStencilWriteMask(enum class Unknow WriteMaskBit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask");

	struct SetCustomDepthStencilWriteMask_Params {
		enum class Unknow WriteMaskBit;
	}; SetCustomDepthStencilWriteMask_Params Params;

	Params.WriteMaskBit = WriteMaskBit;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCustomDepthStencilValue
inline void UPrimitiveComponent::SetCustomDepthStencilValue(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCustomDepthStencilValue");

	struct SetCustomDepthStencilValue_Params {
		int32_t Value;
	}; SetCustomDepthStencilValue_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCullDistance
inline void UPrimitiveComponent::SetCullDistance(float NewCullDistance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCullDistance");

	struct SetCullDistance_Params {
		float NewCullDistance;
	}; SetCullDistance_Params Params;

	Params.NewCullDistance = NewCullDistance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetConstraintMode
inline void UPrimitiveComponent::SetConstraintMode(char ConstraintMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetConstraintMode");

	struct SetConstraintMode_Params {
		char ConstraintMode;
	}; SetConstraintMode_Params Params;

	Params.ConstraintMode = ConstraintMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCollisionResponseToChannel
inline void UPrimitiveComponent::SetCollisionResponseToChannel(char Channel, char NewResponse) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionResponseToChannel");

	struct SetCollisionResponseToChannel_Params {
		char Channel;
		char NewResponse;
	}; SetCollisionResponseToChannel_Params Params;

	Params.Channel = Channel;
	Params.NewResponse = NewResponse;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
inline void UPrimitiveComponent::SetCollisionResponseToAllChannels(char NewResponse) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels");

	struct SetCollisionResponseToAllChannels_Params {
		char NewResponse;
	}; SetCollisionResponseToAllChannels_Params Params;

	Params.NewResponse = NewResponse;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCollisionProfileName
inline void UPrimitiveComponent::SetCollisionProfileName(struct FName InCollisionProfileName, char bUpdateOverlaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionProfileName");

	struct SetCollisionProfileName_Params {
		struct FName InCollisionProfileName;
		char bUpdateOverlaps;
	}; SetCollisionProfileName_Params Params;

	Params.InCollisionProfileName = InCollisionProfileName;
	Params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCollisionObjectType
inline void UPrimitiveComponent::SetCollisionObjectType(char Channel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionObjectType");

	struct SetCollisionObjectType_Params {
		char Channel;
	}; SetCollisionObjectType_Params Params;

	Params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCollisionEnabled
inline void UPrimitiveComponent::SetCollisionEnabled(char NewType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionEnabled");

	struct SetCollisionEnabled_Params {
		char NewType;
	}; SetCollisionEnabled_Params Params;

	Params.NewType = NewType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCenterOfMass
inline void UPrimitiveComponent::SetCenterOfMass(struct Unknown CenterOfMassOffset, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCenterOfMass");

	struct SetCenterOfMass_Params {
		struct Unknown CenterOfMassOffset;
		struct FName BoneName;
	}; SetCenterOfMass_Params Params;

	Params.CenterOfMassOffset = CenterOfMassOffset;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCastShadow
inline void UPrimitiveComponent::SetCastShadow(char NewCastShadow) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCastShadow");

	struct SetCastShadow_Params {
		char NewCastShadow;
	}; SetCastShadow_Params Params;

	Params.NewCastShadow = NewCastShadow;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetCastInsetShadow
inline void UPrimitiveComponent::SetCastInsetShadow(char bInCastInsetShadow) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCastInsetShadow");

	struct SetCastInsetShadow_Params {
		char bInCastInsetShadow;
	}; SetCastInsetShadow_Params Params;

	Params.bInCastInsetShadow = bInCastInsetShadow;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetBoundsScale
inline void UPrimitiveComponent::SetBoundsScale(float NewBoundsScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetBoundsScale");

	struct SetBoundsScale_Params {
		float NewBoundsScale;
	}; SetBoundsScale_Params Params;

	Params.NewBoundsScale = NewBoundsScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetAngularDamping
inline void UPrimitiveComponent::SetAngularDamping(float InDamping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAngularDamping");

	struct SetAngularDamping_Params {
		float InDamping;
	}; SetAngularDamping_Params Params;

	Params.InDamping = InDamping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetAllUseCCD
inline void UPrimitiveComponent::SetAllUseCCD(char InUseCCD) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAllUseCCD");

	struct SetAllUseCCD_Params {
		char InUseCCD;
	}; SetAllUseCCD_Params Params;

	Params.InUseCCD = InUseCCD;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
inline void UPrimitiveComponent::SetAllPhysicsLinearVelocity(struct Unknown NewVel, char bAddToCurrent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity");

	struct SetAllPhysicsLinearVelocity_Params {
		struct Unknown NewVel;
		char bAddToCurrent;
	}; SetAllPhysicsLinearVelocity_Params Params;

	Params.NewVel = NewVel;
	Params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians
inline void UPrimitiveComponent::SetAllPhysicsAngularVelocityInRadians(struct Unknown& NewAngVel, char bAddToCurrent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians");

	struct SetAllPhysicsAngularVelocityInRadians_Params {
		struct Unknown& NewAngVel;
		char bAddToCurrent;
	}; SetAllPhysicsAngularVelocityInRadians_Params Params;

	Params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewAngVel = Params.NewAngVel;

}

// Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees
inline void UPrimitiveComponent::SetAllPhysicsAngularVelocityInDegrees(struct Unknown& NewAngVel, char bAddToCurrent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees");

	struct SetAllPhysicsAngularVelocityInDegrees_Params {
		struct Unknown& NewAngVel;
		char bAddToCurrent;
	}; SetAllPhysicsAngularVelocityInDegrees_Params Params;

	Params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewAngVel = Params.NewAngVel;

}

// Function Engine.PrimitiveComponent.SetAllMassScale
inline void UPrimitiveComponent::SetAllMassScale(float InMassScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAllMassScale");

	struct SetAllMassScale_Params {
		float InMassScale;
	}; SetAllMassScale_Params Params;

	Params.InMassScale = InMassScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.ScaleByMomentOfInertia
inline struct Unknown UPrimitiveComponent::ScaleByMomentOfInertia(struct Unknown InputVector, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ScaleByMomentOfInertia");

	struct ScaleByMomentOfInertia_Params {
		struct Unknown InputVector;
		struct FName BoneName;
		struct Unknown ReturnValue;

	}; ScaleByMomentOfInertia_Params Params;

	Params.InputVector = InputVector;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.PutRigidBodyToSleep
inline void UPrimitiveComponent::PutRigidBodyToSleep(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.PutRigidBodyToSleep");

	struct PutRigidBodyToSleep_Params {
		struct FName BoneName;
	}; PutRigidBodyToSleep_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.K2_SphereTraceComponent
inline char UPrimitiveComponent::K2_SphereTraceComponent(struct Unknown TraceStart, struct Unknown TraceEnd, float SphereRadius, char bTraceComplex, char bShowTrace, char bPersistentShowTrace, struct Unknown& HitLocation, struct Unknown& HitNormal, struct FName& BoneName, struct Unknown& OutHit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_SphereTraceComponent");

	struct K2_SphereTraceComponent_Params {
		struct Unknown TraceStart;
		struct Unknown TraceEnd;
		float SphereRadius;
		char bTraceComplex;
		char bShowTrace;
		char bPersistentShowTrace;
		struct Unknown& HitLocation;
		struct Unknown& HitNormal;
		struct FName& BoneName;
		struct Unknown& OutHit;
		char ReturnValue;

	}; K2_SphereTraceComponent_Params Params;

	Params.TraceStart = TraceStart;
	Params.TraceEnd = TraceEnd;
	Params.SphereRadius = SphereRadius;
	Params.bTraceComplex = bTraceComplex;
	Params.bShowTrace = bShowTrace;
	Params.bPersistentShowTrace = bPersistentShowTrace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitLocation = Params.HitLocation;
	HitNormal = Params.HitNormal;
	BoneName = Params.BoneName;
	OutHit = Params.OutHit;


	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.K2_SphereOverlapComponent
inline char UPrimitiveComponent::K2_SphereOverlapComponent(struct Unknown InSphereCentre, float InSphereRadius, char bTraceComplex, char bShowTrace, char bPersistentShowTrace, struct Unknown& HitLocation, struct Unknown& HitNormal, struct FName& BoneName, struct Unknown& OutHit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_SphereOverlapComponent");

	struct K2_SphereOverlapComponent_Params {
		struct Unknown InSphereCentre;
		float InSphereRadius;
		char bTraceComplex;
		char bShowTrace;
		char bPersistentShowTrace;
		struct Unknown& HitLocation;
		struct Unknown& HitNormal;
		struct FName& BoneName;
		struct Unknown& OutHit;
		char ReturnValue;

	}; K2_SphereOverlapComponent_Params Params;

	Params.InSphereCentre = InSphereCentre;
	Params.InSphereRadius = InSphereRadius;
	Params.bTraceComplex = bTraceComplex;
	Params.bShowTrace = bShowTrace;
	Params.bPersistentShowTrace = bPersistentShowTrace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitLocation = Params.HitLocation;
	HitNormal = Params.HitNormal;
	BoneName = Params.BoneName;
	OutHit = Params.OutHit;


	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.K2_LineTraceComponent
inline char UPrimitiveComponent::K2_LineTraceComponent(struct Unknown TraceStart, struct Unknown TraceEnd, char bTraceComplex, char bShowTrace, char bPersistentShowTrace, struct Unknown& HitLocation, struct Unknown& HitNormal, struct FName& BoneName, struct Unknown& OutHit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_LineTraceComponent");

	struct K2_LineTraceComponent_Params {
		struct Unknown TraceStart;
		struct Unknown TraceEnd;
		char bTraceComplex;
		char bShowTrace;
		char bPersistentShowTrace;
		struct Unknown& HitLocation;
		struct Unknown& HitNormal;
		struct FName& BoneName;
		struct Unknown& OutHit;
		char ReturnValue;

	}; K2_LineTraceComponent_Params Params;

	Params.TraceStart = TraceStart;
	Params.TraceEnd = TraceEnd;
	Params.bTraceComplex = bTraceComplex;
	Params.bShowTrace = bShowTrace;
	Params.bPersistentShowTrace = bPersistentShowTrace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitLocation = Params.HitLocation;
	HitNormal = Params.HitNormal;
	BoneName = Params.BoneName;
	OutHit = Params.OutHit;


	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled
inline char UPrimitiveComponent::K2_IsQueryCollisionEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled");

	struct K2_IsQueryCollisionEnabled_Params {
		
		char ReturnValue;

	}; K2_IsQueryCollisionEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled
inline char UPrimitiveComponent::K2_IsPhysicsCollisionEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled");

	struct K2_IsPhysicsCollisionEnabled_Params {
		
		char ReturnValue;

	}; K2_IsPhysicsCollisionEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.K2_IsCollisionEnabled
inline char UPrimitiveComponent::K2_IsCollisionEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_IsCollisionEnabled");

	struct K2_IsCollisionEnabled_Params {
		
		char ReturnValue;

	}; K2_IsCollisionEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.K2_BoxOverlapComponent
inline char UPrimitiveComponent::K2_BoxOverlapComponent(struct Unknown InBoxCentre, struct Unknown InBox, char bTraceComplex, char bShowTrace, char bPersistentShowTrace, struct Unknown& HitLocation, struct Unknown& HitNormal, struct FName& BoneName, struct Unknown& OutHit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_BoxOverlapComponent");

	struct K2_BoxOverlapComponent_Params {
		struct Unknown InBoxCentre;
		struct Unknown InBox;
		char bTraceComplex;
		char bShowTrace;
		char bPersistentShowTrace;
		struct Unknown& HitLocation;
		struct Unknown& HitNormal;
		struct FName& BoneName;
		struct Unknown& OutHit;
		char ReturnValue;

	}; K2_BoxOverlapComponent_Params Params;

	Params.InBoxCentre = InBoxCentre;
	Params.InBox = InBox;
	Params.bTraceComplex = bTraceComplex;
	Params.bShowTrace = bShowTrace;
	Params.bPersistentShowTrace = bPersistentShowTrace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitLocation = Params.HitLocation;
	HitNormal = Params.HitNormal;
	BoneName = Params.BoneName;
	OutHit = Params.OutHit;


	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.IsOverlappingComponent
inline char UPrimitiveComponent::IsOverlappingComponent(struct Unknown OtherComp) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IsOverlappingComponent");

	struct IsOverlappingComponent_Params {
		struct Unknown OtherComp;
		char ReturnValue;

	}; IsOverlappingComponent_Params Params;

	Params.OtherComp = OtherComp;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.IsOverlappingActor
inline char UPrimitiveComponent::IsOverlappingActor(struct Unknown Other) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IsOverlappingActor");

	struct IsOverlappingActor_Params {
		struct Unknown Other;
		char ReturnValue;

	}; IsOverlappingActor_Params Params;

	Params.Other = Other;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.IsGravityEnabled
inline char UPrimitiveComponent::IsGravityEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IsGravityEnabled");

	struct IsGravityEnabled_Params {
		
		char ReturnValue;

	}; IsGravityEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake
inline char UPrimitiveComponent::IsAnyRigidBodyAwake() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake");

	struct IsAnyRigidBodyAwake_Params {
		
		char ReturnValue;

	}; IsAnyRigidBodyAwake_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving
inline void UPrimitiveComponent::IgnoreComponentWhenMoving(struct Unknown Component, char bShouldIgnore) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving");

	struct IgnoreComponentWhenMoving_Params {
		struct Unknown Component;
		char bShouldIgnore;
	}; IgnoreComponentWhenMoving_Params Params;

	Params.Component = Component;
	Params.bShouldIgnore = bShouldIgnore;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.IgnoreActorWhenMoving
inline void UPrimitiveComponent::IgnoreActorWhenMoving(struct Unknown Actor, char bShouldIgnore) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IgnoreActorWhenMoving");

	struct IgnoreActorWhenMoving_Params {
		struct Unknown Actor;
		char bShouldIgnore;
	}; IgnoreActorWhenMoving_Params Params;

	Params.Actor = Actor;
	Params.bShouldIgnore = bShouldIgnore;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.GetWalkableSlopeOverride
inline struct Unknown UPrimitiveComponent::GetWalkableSlopeOverride() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetWalkableSlopeOverride");

	struct GetWalkableSlopeOverride_Params {
		
		struct Unknown ReturnValue;

	}; GetWalkableSlopeOverride_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
inline struct Unknown UPrimitiveComponent::GetPhysicsLinearVelocityAtPoint(struct Unknown Point, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint");

	struct GetPhysicsLinearVelocityAtPoint_Params {
		struct Unknown Point;
		struct FName BoneName;
		struct Unknown ReturnValue;

	}; GetPhysicsLinearVelocityAtPoint_Params Params;

	Params.Point = Point;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity
inline struct Unknown UPrimitiveComponent::GetPhysicsLinearVelocity(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity");

	struct GetPhysicsLinearVelocity_Params {
		struct FName BoneName;
		struct Unknown ReturnValue;

	}; GetPhysicsLinearVelocity_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians
inline struct Unknown UPrimitiveComponent::GetPhysicsAngularVelocityInRadians(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians");

	struct GetPhysicsAngularVelocityInRadians_Params {
		struct FName BoneName;
		struct Unknown ReturnValue;

	}; GetPhysicsAngularVelocityInRadians_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees
inline struct Unknown UPrimitiveComponent::GetPhysicsAngularVelocityInDegrees(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees");

	struct GetPhysicsAngularVelocityInDegrees_Params {
		struct FName BoneName;
		struct Unknown ReturnValue;

	}; GetPhysicsAngularVelocityInDegrees_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity
inline struct Unknown UPrimitiveComponent::GetPhysicsAngularVelocity(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity");

	struct GetPhysicsAngularVelocity_Params {
		struct FName BoneName;
		struct Unknown ReturnValue;

	}; GetPhysicsAngularVelocity_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetOverlappingComponents
inline void UPrimitiveComponent::GetOverlappingComponents(struct TArray<Unknown>& OutOverlappingComponents) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetOverlappingComponents");

	struct GetOverlappingComponents_Params {
		struct TArray<Unknown>& OutOverlappingComponents;
	}; GetOverlappingComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutOverlappingComponents = Params.OutOverlappingComponents;

}

// Function Engine.PrimitiveComponent.GetOverlappingActors
inline void UPrimitiveComponent::GetOverlappingActors(struct TArray<Unknown>& OverlappingActors, struct Unknown* ClassFilter) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetOverlappingActors");

	struct GetOverlappingActors_Params {
		struct TArray<Unknown>& OverlappingActors;
		struct Unknown* ClassFilter;
	}; GetOverlappingActors_Params Params;

	Params.ClassFilter = ClassFilter;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OverlappingActors = Params.OverlappingActors;

}

// Function Engine.PrimitiveComponent.GetNumMaterials
inline int32_t UPrimitiveComponent::GetNumMaterials() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetNumMaterials");

	struct GetNumMaterials_Params {
		
		int32_t ReturnValue;

	}; GetNumMaterials_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex
inline struct Unknown UPrimitiveComponent::GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex");

	struct GetMaterialFromCollisionFaceIndex_Params {
		int32_t FaceIndex;
		int32_t& SectionIndex;
		struct Unknown ReturnValue;

	}; GetMaterialFromCollisionFaceIndex_Params Params;

	Params.FaceIndex = FaceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SectionIndex = Params.SectionIndex;


	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetMaterial
inline struct Unknown UPrimitiveComponent::GetMaterial(int32_t ElementIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMaterial");

	struct GetMaterial_Params {
		int32_t ElementIndex;
		struct Unknown ReturnValue;

	}; GetMaterial_Params Params;

	Params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetMassScale
inline float UPrimitiveComponent::GetMassScale(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMassScale");

	struct GetMassScale_Params {
		struct FName BoneName;
		float ReturnValue;

	}; GetMassScale_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetMass
inline float UPrimitiveComponent::GetMass() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMass");

	struct GetMass_Params {
		
		float ReturnValue;

	}; GetMass_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetLinearDamping
inline float UPrimitiveComponent::GetLinearDamping() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetLinearDamping");

	struct GetLinearDamping_Params {
		
		float ReturnValue;

	}; GetLinearDamping_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetInertiaTensor
inline struct Unknown UPrimitiveComponent::GetInertiaTensor(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetInertiaTensor");

	struct GetInertiaTensor_Params {
		struct FName BoneName;
		struct Unknown ReturnValue;

	}; GetInertiaTensor_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetGenerateOverlapEvents
inline char UPrimitiveComponent::GetGenerateOverlapEvents() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetGenerateOverlapEvents");

	struct GetGenerateOverlapEvents_Params {
		
		char ReturnValue;

	}; GetGenerateOverlapEvents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetCollisionResponseToChannel
inline char UPrimitiveComponent::GetCollisionResponseToChannel(char Channel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCollisionResponseToChannel");

	struct GetCollisionResponseToChannel_Params {
		char Channel;
		char ReturnValue;

	}; GetCollisionResponseToChannel_Params Params;

	Params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetCollisionProfileName
inline struct FName UPrimitiveComponent::GetCollisionProfileName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCollisionProfileName");

	struct GetCollisionProfileName_Params {
		
		struct FName ReturnValue;

	}; GetCollisionProfileName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetCollisionObjectType
inline char UPrimitiveComponent::GetCollisionObjectType() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCollisionObjectType");

	struct GetCollisionObjectType_Params {
		
		char ReturnValue;

	}; GetCollisionObjectType_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetCollisionEnabled
inline char UPrimitiveComponent::GetCollisionEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCollisionEnabled");

	struct GetCollisionEnabled_Params {
		
		char ReturnValue;

	}; GetCollisionEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetClosestPointOnCollision
inline float UPrimitiveComponent::GetClosestPointOnCollision(struct Unknown& Point, struct Unknown& OutPointOnBody, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetClosestPointOnCollision");

	struct GetClosestPointOnCollision_Params {
		struct Unknown& Point;
		struct Unknown& OutPointOnBody;
		struct FName BoneName;
		float ReturnValue;

	}; GetClosestPointOnCollision_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Point = Params.Point;
	OutPointOnBody = Params.OutPointOnBody;


	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetCenterOfMass
inline struct Unknown UPrimitiveComponent::GetCenterOfMass(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCenterOfMass");

	struct GetCenterOfMass_Params {
		struct FName BoneName;
		struct Unknown ReturnValue;

	}; GetCenterOfMass_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.GetAngularDamping
inline float UPrimitiveComponent::GetAngularDamping() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetAngularDamping");

	struct GetAngularDamping_Params {
		
		float ReturnValue;

	}; GetAngularDamping_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance
inline struct Unknown UPrimitiveComponent::CreateDynamicMaterialInstance(int32_t ElementIndex, struct Unknown SourceMaterial, struct FName OptionalName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance");

	struct CreateDynamicMaterialInstance_Params {
		int32_t ElementIndex;
		struct Unknown SourceMaterial;
		struct FName OptionalName;
		struct Unknown ReturnValue;

	}; CreateDynamicMaterialInstance_Params Params;

	Params.ElementIndex = ElementIndex;
	Params.SourceMaterial = SourceMaterial;
	Params.OptionalName = OptionalName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
inline struct Unknown UPrimitiveComponent::CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, struct Unknown Parent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial");

	struct CreateAndSetMaterialInstanceDynamicFromMaterial_Params {
		int32_t ElementIndex;
		struct Unknown Parent;
		struct Unknown ReturnValue;

	}; CreateAndSetMaterialInstanceDynamicFromMaterial_Params Params;

	Params.ElementIndex = ElementIndex;
	Params.Parent = Parent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
inline struct Unknown UPrimitiveComponent::CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic");

	struct CreateAndSetMaterialInstanceDynamic_Params {
		int32_t ElementIndex;
		struct Unknown ReturnValue;

	}; CreateAndSetMaterialInstanceDynamic_Params Params;

	Params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents
inline struct TArray<Unknown> UPrimitiveComponent::CopyArrayOfMoveIgnoreComponents() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents");

	struct CopyArrayOfMoveIgnoreComponents_Params {
		
		struct TArray<Unknown> ReturnValue;

	}; CopyArrayOfMoveIgnoreComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
inline struct TArray<Unknown> UPrimitiveComponent::CopyArrayOfMoveIgnoreActors() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors");

	struct CopyArrayOfMoveIgnoreActors_Params {
		
		struct TArray<Unknown> ReturnValue;

	}; CopyArrayOfMoveIgnoreActors_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents
inline void UPrimitiveComponent::ClearMoveIgnoreComponents() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents");

	struct ClearMoveIgnoreComponents_Params {
		
	}; ClearMoveIgnoreComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.ClearMoveIgnoreActors
inline void UPrimitiveComponent::ClearMoveIgnoreActors() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ClearMoveIgnoreActors");

	struct ClearMoveIgnoreActors_Params {
		
	}; ClearMoveIgnoreActors_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.CanCharacterStepUp
inline char UPrimitiveComponent::CanCharacterStepUp(struct Unknown Pawn) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CanCharacterStepUp");

	struct CanCharacterStepUp_Params {
		struct Unknown Pawn;
		char ReturnValue;

	}; CanCharacterStepUp_Params Params;

	Params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PrimitiveComponent.AddTorqueInRadians
inline void UPrimitiveComponent::AddTorqueInRadians(struct Unknown Torque, struct FName BoneName, char bAccelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddTorqueInRadians");

	struct AddTorqueInRadians_Params {
		struct Unknown Torque;
		struct FName BoneName;
		char bAccelChange;
	}; AddTorqueInRadians_Params Params;

	Params.Torque = Torque;
	Params.BoneName = BoneName;
	Params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddTorqueInDegrees
inline void UPrimitiveComponent::AddTorqueInDegrees(struct Unknown Torque, struct FName BoneName, char bAccelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddTorqueInDegrees");

	struct AddTorqueInDegrees_Params {
		struct Unknown Torque;
		struct FName BoneName;
		char bAccelChange;
	}; AddTorqueInDegrees_Params Params;

	Params.Torque = Torque;
	Params.BoneName = BoneName;
	Params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddTorque
inline void UPrimitiveComponent::AddTorque(struct Unknown Torque, struct FName BoneName, char bAccelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddTorque");

	struct AddTorque_Params {
		struct Unknown Torque;
		struct FName BoneName;
		char bAccelChange;
	}; AddTorque_Params Params;

	Params.Torque = Torque;
	Params.BoneName = BoneName;
	Params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddRadialImpulse
inline void UPrimitiveComponent::AddRadialImpulse(struct Unknown Origin, float Radius, float Strength, char Falloff, char bVelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialImpulse");

	struct AddRadialImpulse_Params {
		struct Unknown Origin;
		float Radius;
		float Strength;
		char Falloff;
		char bVelChange;
	}; AddRadialImpulse_Params Params;

	Params.Origin = Origin;
	Params.Radius = Radius;
	Params.Strength = Strength;
	Params.Falloff = Falloff;
	Params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddRadialForce
inline void UPrimitiveComponent::AddRadialForce(struct Unknown Origin, float Radius, float Strength, char Falloff, char bAccelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialForce");

	struct AddRadialForce_Params {
		struct Unknown Origin;
		float Radius;
		float Strength;
		char Falloff;
		char bAccelChange;
	}; AddRadialForce_Params Params;

	Params.Origin = Origin;
	Params.Radius = Radius;
	Params.Strength = Strength;
	Params.Falloff = Falloff;
	Params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddImpulseAtLocation
inline void UPrimitiveComponent::AddImpulseAtLocation(struct Unknown Impulse, struct Unknown Location, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddImpulseAtLocation");

	struct AddImpulseAtLocation_Params {
		struct Unknown Impulse;
		struct Unknown Location;
		struct FName BoneName;
	}; AddImpulseAtLocation_Params Params;

	Params.Impulse = Impulse;
	Params.Location = Location;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddImpulse
inline void UPrimitiveComponent::AddImpulse(struct Unknown Impulse, struct FName BoneName, char bVelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddImpulse");

	struct AddImpulse_Params {
		struct Unknown Impulse;
		struct FName BoneName;
		char bVelChange;
	}; AddImpulse_Params Params;

	Params.Impulse = Impulse;
	Params.BoneName = BoneName;
	Params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddForceAtLocationLocal
inline void UPrimitiveComponent::AddForceAtLocationLocal(struct Unknown Force, struct Unknown Location, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddForceAtLocationLocal");

	struct AddForceAtLocationLocal_Params {
		struct Unknown Force;
		struct Unknown Location;
		struct FName BoneName;
	}; AddForceAtLocationLocal_Params Params;

	Params.Force = Force;
	Params.Location = Location;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddForceAtLocation
inline void UPrimitiveComponent::AddForceAtLocation(struct Unknown Force, struct Unknown Location, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddForceAtLocation");

	struct AddForceAtLocation_Params {
		struct Unknown Force;
		struct Unknown Location;
		struct FName BoneName;
	}; AddForceAtLocation_Params Params;

	Params.Force = Force;
	Params.Location = Location;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddForce
inline void UPrimitiveComponent::AddForce(struct Unknown Force, struct FName BoneName, char bAccelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddForce");

	struct AddForce_Params {
		struct Unknown Force;
		struct FName BoneName;
		char bAccelChange;
	}; AddForce_Params Params;

	Params.Force = Force;
	Params.BoneName = BoneName;
	Params.bAccelChange = bAccelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddAngularImpulseInRadians
inline void UPrimitiveComponent::AddAngularImpulseInRadians(struct Unknown Impulse, struct FName BoneName, char bVelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddAngularImpulseInRadians");

	struct AddAngularImpulseInRadians_Params {
		struct Unknown Impulse;
		struct FName BoneName;
		char bVelChange;
	}; AddAngularImpulseInRadians_Params Params;

	Params.Impulse = Impulse;
	Params.BoneName = BoneName;
	Params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees
inline void UPrimitiveComponent::AddAngularImpulseInDegrees(struct Unknown Impulse, struct FName BoneName, char bVelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees");

	struct AddAngularImpulseInDegrees_Params {
		struct Unknown Impulse;
		struct FName BoneName;
		char bVelChange;
	}; AddAngularImpulseInDegrees_Params Params;

	Params.Impulse = Impulse;
	Params.BoneName = BoneName;
	Params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PrimitiveComponent.AddAngularImpulse
inline void UPrimitiveComponent::AddAngularImpulse(struct Unknown Impulse, struct FName BoneName, char bVelChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddAngularImpulse");

	struct AddAngularImpulse_Params {
		struct Unknown Impulse;
		struct FName BoneName;
		char bVelChange;
	}; AddAngularImpulse_Params Params;

	Params.Impulse = Impulse;
	Params.BoneName = BoneName;
	Params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MeshComponent.SetVectorParameterValueOnMaterials
inline void UMeshComponent::SetVectorParameterValueOnMaterials(struct FName ParameterName, struct Unknown ParameterValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetVectorParameterValueOnMaterials");

	struct SetVectorParameterValueOnMaterials_Params {
		struct FName ParameterName;
		struct Unknown ParameterValue;
	}; SetVectorParameterValueOnMaterials_Params Params;

	Params.ParameterName = ParameterName;
	Params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MeshComponent.SetScalarParameterValueOnMaterials
inline void UMeshComponent::SetScalarParameterValueOnMaterials(struct FName ParameterName, float ParameterValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetScalarParameterValueOnMaterials");

	struct SetScalarParameterValueOnMaterials_Params {
		struct FName ParameterName;
		float ParameterValue;
	}; SetScalarParameterValueOnMaterials_Params Params;

	Params.ParameterName = ParameterName;
	Params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MeshComponent.SetColorParameterValueOnMaterials
inline void UMeshComponent::SetColorParameterValueOnMaterials(struct FName ParameterName, struct Unknown ParameterValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetColorParameterValueOnMaterials");

	struct SetColorParameterValueOnMaterials_Params {
		struct FName ParameterName;
		struct Unknown ParameterValue;
	}; SetColorParameterValueOnMaterials_Params Params;

	Params.ParameterName = ParameterName;
	Params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MeshComponent.PrestreamTextures
inline void UMeshComponent::PrestreamTextures(float Seconds, char bPrioritizeCharacterTextures, int32_t CinematicTextureGroups) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.PrestreamTextures");

	struct PrestreamTextures_Params {
		float Seconds;
		char bPrioritizeCharacterTextures;
		int32_t CinematicTextureGroups;
	}; PrestreamTextures_Params Params;

	Params.Seconds = Seconds;
	Params.bPrioritizeCharacterTextures = bPrioritizeCharacterTextures;
	Params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MeshComponent.IsMaterialSlotNameValid
inline char UMeshComponent::IsMaterialSlotNameValid(struct FName MaterialSlotName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.IsMaterialSlotNameValid");

	struct IsMaterialSlotNameValid_Params {
		struct FName MaterialSlotName;
		char ReturnValue;

	}; IsMaterialSlotNameValid_Params Params;

	Params.MaterialSlotName = MaterialSlotName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MeshComponent.GetMaterialSlotNames
inline struct TArray<Unknown> UMeshComponent::GetMaterialSlotNames() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetMaterialSlotNames");

	struct GetMaterialSlotNames_Params {
		
		struct TArray<Unknown> ReturnValue;

	}; GetMaterialSlotNames_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MeshComponent.GetMaterials
inline struct TArray<Unknown> UMeshComponent::GetMaterials() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetMaterials");

	struct GetMaterials_Params {
		
		struct TArray<Unknown> ReturnValue;

	}; GetMaterials_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MeshComponent.GetMaterialIndex
inline int32_t UMeshComponent::GetMaterialIndex(struct FName MaterialSlotName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetMaterialIndex");

	struct GetMaterialIndex_Params {
		struct FName MaterialSlotName;
		int32_t ReturnValue;

	}; GetMaterialIndex_Params Params;

	Params.MaterialSlotName = MaterialSlotName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile
inline void USkinnedMeshComponent::UnloadSkinWeightProfile(struct FName InProfileName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile");

	struct UnloadSkinWeightProfile_Params {
		struct FName InProfileName;
	}; UnloadSkinWeightProfile_Params Params;

	Params.InProfileName = InProfileName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.UnHideBoneByName
inline void USkinnedMeshComponent::UnHideBoneByName(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.UnHideBoneByName");

	struct UnHideBoneByName_Params {
		struct FName BoneName;
	}; UnHideBoneByName_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.TransformToBoneSpace
inline void USkinnedMeshComponent::TransformToBoneSpace(struct FName BoneName, struct Unknown InPosition, struct Unknown InRotation, struct Unknown& OutPosition, struct Unknown& OutRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.TransformToBoneSpace");

	struct TransformToBoneSpace_Params {
		struct FName BoneName;
		struct Unknown InPosition;
		struct Unknown InRotation;
		struct Unknown& OutPosition;
		struct Unknown& OutRotation;
	}; TransformToBoneSpace_Params Params;

	Params.BoneName = BoneName;
	Params.InPosition = InPosition;
	Params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutPosition = Params.OutPosition;
	OutRotation = Params.OutRotation;

}

// Function Engine.SkinnedMeshComponent.TransformFromBoneSpace
inline void USkinnedMeshComponent::TransformFromBoneSpace(struct FName BoneName, struct Unknown InPosition, struct Unknown InRotation, struct Unknown& OutPosition, struct Unknown& OutRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.TransformFromBoneSpace");

	struct TransformFromBoneSpace_Params {
		struct FName BoneName;
		struct Unknown InPosition;
		struct Unknown InRotation;
		struct Unknown& OutPosition;
		struct Unknown& OutRotation;
	}; TransformFromBoneSpace_Params Params;

	Params.BoneName = BoneName;
	Params.InPosition = InPosition;
	Params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutPosition = Params.OutPosition;
	OutRotation = Params.OutRotation;

}

// Function Engine.SkinnedMeshComponent.ShowMaterialSection
inline void USkinnedMeshComponent::ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, char bShow, int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.ShowMaterialSection");

	struct ShowMaterialSection_Params {
		int32_t MaterialID;
		int32_t SectionIndex;
		char bShow;
		int32_t LODIndex;
	}; ShowMaterialSection_Params Params;

	Params.MaterialID = MaterialID;
	Params.SectionIndex = SectionIndex;
	Params.bShow = bShow;
	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.ShowAllMaterialSections
inline void USkinnedMeshComponent::ShowAllMaterialSections(int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.ShowAllMaterialSections");

	struct ShowAllMaterialSections_Params {
		int32_t LODIndex;
	}; ShowAllMaterialSections_Params Params;

	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor
inline void USkinnedMeshComponent::SetVertexColorOverride_LinearColor(int32_t LODIndex, struct TArray<Unknown>& VertexColors) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor");

	struct SetVertexColorOverride_LinearColor_Params {
		int32_t LODIndex;
		struct TArray<Unknown>& VertexColors;
	}; SetVertexColorOverride_LinearColor_Params Params;

	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	VertexColors = Params.VertexColors;

}

// Function Engine.SkinnedMeshComponent.SetSkinWeightProfile
inline char USkinnedMeshComponent::SetSkinWeightProfile(struct FName InProfileName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetSkinWeightProfile");

	struct SetSkinWeightProfile_Params {
		struct FName InProfileName;
		char ReturnValue;

	}; SetSkinWeightProfile_Params Params;

	Params.InProfileName = InProfileName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.SetSkinWeightOverride
inline void USkinnedMeshComponent::SetSkinWeightOverride(int32_t LODIndex, struct TArray<Unknown>& SkinWeights) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetSkinWeightOverride");

	struct SetSkinWeightOverride_Params {
		int32_t LODIndex;
		struct TArray<Unknown>& SkinWeights;
	}; SetSkinWeightOverride_Params Params;

	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SkinWeights = Params.SkinWeights;

}

// Function Engine.SkinnedMeshComponent.SetSkeletalMesh
inline void USkinnedMeshComponent::SetSkeletalMesh(struct Unknown NewMesh, char bReinitPose) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetSkeletalMesh");

	struct SetSkeletalMesh_Params {
		struct Unknown NewMesh;
		char bReinitPose;
	}; SetSkeletalMesh_Params Params;

	Params.NewMesh = NewMesh;
	Params.bReinitPose = bReinitPose;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetRenderStatic
inline void USkinnedMeshComponent::SetRenderStatic(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetRenderStatic");

	struct SetRenderStatic_Params {
		char bNewValue;
	}; SetRenderStatic_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetPhysicsAsset
inline void USkinnedMeshComponent::SetPhysicsAsset(struct Unknown NewPhysicsAsset, char bForceReInit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetPhysicsAsset");

	struct SetPhysicsAsset_Params {
		struct Unknown NewPhysicsAsset;
		char bForceReInit;
	}; SetPhysicsAsset_Params Params;

	Params.NewPhysicsAsset = NewPhysicsAsset;
	Params.bForceReInit = bForceReInit;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetMinLOD
inline void USkinnedMeshComponent::SetMinLOD(int32_t InNewMinLOD) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetMinLOD");

	struct SetMinLOD_Params {
		int32_t InNewMinLOD;
	}; SetMinLOD_Params Params;

	Params.InNewMinLOD = InNewMinLOD;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetMasterPoseComponent
inline void USkinnedMeshComponent::SetMasterPoseComponent(struct Unknown NewMasterBoneComponent, char bForceUpdate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetMasterPoseComponent");

	struct SetMasterPoseComponent_Params {
		struct Unknown NewMasterBoneComponent;
		char bForceUpdate;
	}; SetMasterPoseComponent_Params Params;

	Params.NewMasterBoneComponent = NewMasterBoneComponent;
	Params.bForceUpdate = bForceUpdate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetForcedLOD
inline void USkinnedMeshComponent::SetForcedLOD(int32_t InNewForcedLOD) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetForcedLOD");

	struct SetForcedLOD_Params {
		int32_t InNewForcedLOD;
	}; SetForcedLOD_Params Params;

	Params.InNewForcedLOD = InNewForcedLOD;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow
inline void USkinnedMeshComponent::SetCastCapsuleIndirectShadow(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow");

	struct SetCastCapsuleIndirectShadow_Params {
		char bNewValue;
	}; SetCastCapsuleIndirectShadow_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow
inline void USkinnedMeshComponent::SetCastCapsuleDirectShadow(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow");

	struct SetCastCapsuleDirectShadow_Params {
		char bNewValue;
	}; SetCastCapsuleDirectShadow_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility
inline void USkinnedMeshComponent::SetCapsuleIndirectShadowMinVisibility(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility");

	struct SetCapsuleIndirectShadowMinVisibility_Params {
		float NewValue;
	}; SetCapsuleIndirectShadowMinVisibility_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile
inline char USkinnedMeshComponent::IsUsingSkinWeightProfile() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile");

	struct IsUsingSkinWeightProfile_Params {
		
		char ReturnValue;

	}; IsUsingSkinWeightProfile_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.IsMaterialSectionShown
inline char USkinnedMeshComponent::IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.IsMaterialSectionShown");

	struct IsMaterialSectionShown_Params {
		int32_t MaterialID;
		int32_t LODIndex;
		char ReturnValue;

	}; IsMaterialSectionShown_Params Params;

	Params.MaterialID = MaterialID;
	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.IsBoneHiddenByName
inline char USkinnedMeshComponent::IsBoneHiddenByName(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.IsBoneHiddenByName");

	struct IsBoneHiddenByName_Params {
		struct FName BoneName;
		char ReturnValue;

	}; IsBoneHiddenByName_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.HideBoneByName
inline void USkinnedMeshComponent::HideBoneByName(struct FName BoneName, char PhysBodyOption) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.HideBoneByName");

	struct HideBoneByName_Params {
		struct FName BoneName;
		char PhysBodyOption;
	}; HideBoneByName_Params Params;

	Params.BoneName = BoneName;
	Params.PhysBodyOption = PhysBodyOption;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose
inline char USkinnedMeshComponent::GetTwistAndSwingAngleOfDeltaRotationFromRefPose(struct FName BoneName, float& OutTwistAngle, float& OutSwingAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose");

	struct GetTwistAndSwingAngleOfDeltaRotationFromRefPose_Params {
		struct FName BoneName;
		float& OutTwistAngle;
		float& OutSwingAngle;
		char ReturnValue;

	}; GetTwistAndSwingAngleOfDeltaRotationFromRefPose_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutTwistAngle = Params.OutTwistAngle;
	OutSwingAngle = Params.OutSwingAngle;


	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetSocketBoneName
inline struct FName USkinnedMeshComponent::GetSocketBoneName(struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetSocketBoneName");

	struct GetSocketBoneName_Params {
		struct FName InSocketName;
		struct FName ReturnValue;

	}; GetSocketBoneName_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetRefPosePosition
inline struct Unknown USkinnedMeshComponent::GetRefPosePosition(int32_t BoneIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetRefPosePosition");

	struct GetRefPosePosition_Params {
		int32_t BoneIndex;
		struct Unknown ReturnValue;

	}; GetRefPosePosition_Params Params;

	Params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetParentBone
inline struct FName USkinnedMeshComponent::GetParentBone(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetParentBone");

	struct GetParentBone_Params {
		struct FName BoneName;
		struct FName ReturnValue;

	}; GetParentBone_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetNumLODs
inline int32_t USkinnedMeshComponent::GetNumLODs() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetNumLODs");

	struct GetNumLODs_Params {
		
		int32_t ReturnValue;

	}; GetNumLODs_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetNumBones
inline int32_t USkinnedMeshComponent::GetNumBones() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetNumBones");

	struct GetNumBones_Params {
		
		int32_t ReturnValue;

	}; GetNumBones_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetForcedLOD
inline int32_t USkinnedMeshComponent::GetForcedLOD() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetForcedLOD");

	struct GetForcedLOD_Params {
		
		int32_t ReturnValue;

	}; GetForcedLOD_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose
inline struct Unknown USkinnedMeshComponent::GetDeltaTransformFromRefPose(struct FName BoneName, struct FName BaseName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose");

	struct GetDeltaTransformFromRefPose_Params {
		struct FName BoneName;
		struct FName BaseName;
		struct Unknown ReturnValue;

	}; GetDeltaTransformFromRefPose_Params Params;

	Params.BoneName = BoneName;
	Params.BaseName = BaseName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName
inline struct FName USkinnedMeshComponent::GetCurrentSkinWeightProfileName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName");

	struct GetCurrentSkinWeightProfileName_Params {
		
		struct FName ReturnValue;

	}; GetCurrentSkinWeightProfileName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetBoneName
inline struct FName USkinnedMeshComponent::GetBoneName(int32_t BoneIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetBoneName");

	struct GetBoneName_Params {
		int32_t BoneIndex;
		struct FName ReturnValue;

	}; GetBoneName_Params Params;

	Params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.GetBoneIndex
inline int32_t USkinnedMeshComponent::GetBoneIndex(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetBoneIndex");

	struct GetBoneIndex_Params {
		struct FName BoneName;
		int32_t ReturnValue;

	}; GetBoneIndex_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.FindClosestBone_K2
inline struct FName USkinnedMeshComponent::FindClosestBone_K2(struct Unknown TestLocation, struct Unknown& BoneLocation, float IgnoreScale, char bRequirePhysicsAsset) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.FindClosestBone_K2");

	struct FindClosestBone_K2_Params {
		struct Unknown TestLocation;
		struct Unknown& BoneLocation;
		float IgnoreScale;
		char bRequirePhysicsAsset;
		struct FName ReturnValue;

	}; FindClosestBone_K2_Params Params;

	Params.TestLocation = TestLocation;
	Params.IgnoreScale = IgnoreScale;
	Params.bRequirePhysicsAsset = bRequirePhysicsAsset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	BoneLocation = Params.BoneLocation;


	return params.ReturnValue;
}

// Function Engine.SkinnedMeshComponent.ClearVertexColorOverride
inline void USkinnedMeshComponent::ClearVertexColorOverride(int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.ClearVertexColorOverride");

	struct ClearVertexColorOverride_Params {
		int32_t LODIndex;
	}; ClearVertexColorOverride_Params Params;

	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.ClearSkinWeightProfile
inline void USkinnedMeshComponent::ClearSkinWeightProfile() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.ClearSkinWeightProfile");

	struct ClearSkinWeightProfile_Params {
		
	}; ClearSkinWeightProfile_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride
inline void USkinnedMeshComponent::ClearSkinWeightOverride(int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride");

	struct ClearSkinWeightOverride_Params {
		int32_t LODIndex;
	}; ClearSkinWeightOverride_Params Params;

	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkinnedMeshComponent.BoneIsChildOf
inline char USkinnedMeshComponent::BoneIsChildOf(struct FName BoneName, struct FName ParentBoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.BoneIsChildOf");

	struct BoneIsChildOf_Params {
		struct FName BoneName;
		struct FName ParentBoneName;
		char ReturnValue;

	}; BoneIsChildOf_Params Params;

	Params.BoneName = BoneName;
	Params.ParentBoneName = ParentBoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.SetLODSettings
inline void USkeletalMesh::SetLODSettings(struct Unknown InLODSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.SetLODSettings");

	struct SetLODSettings_Params {
		struct Unknown InLODSettings;
	}; SetLODSettings_Params Params;

	Params.InLODSettings = InLODSettings;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMesh.NumSockets
inline int32_t USkeletalMesh::NumSockets() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.NumSockets");

	struct NumSockets_Params {
		
		int32_t ReturnValue;

	}; NumSockets_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames
inline struct TArray<Unknown> USkeletalMesh::K2_GetAllMorphTargetNames() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames");

	struct K2_GetAllMorphTargetNames_Params {
		
		struct TArray<Unknown> ReturnValue;

	}; K2_GetAllMorphTargetNames_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.IsSectionUsingCloth
inline char USkeletalMesh::IsSectionUsingCloth(int32_t InSectionIndex, char bCheckCorrespondingSections) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.IsSectionUsingCloth");

	struct IsSectionUsingCloth_Params {
		int32_t InSectionIndex;
		char bCheckCorrespondingSections;
		char ReturnValue;

	}; IsSectionUsingCloth_Params Params;

	Params.InSectionIndex = InSectionIndex;
	Params.bCheckCorrespondingSections = bCheckCorrespondingSections;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.GetSocketByIndex
inline struct Unknown USkeletalMesh::GetSocketByIndex(int32_t Index) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.GetSocketByIndex");

	struct GetSocketByIndex_Params {
		int32_t Index;
		struct Unknown ReturnValue;

	}; GetSocketByIndex_Params Params;

	Params.Index = Index;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.GetNodeMappingContainer
inline struct Unknown USkeletalMesh::GetNodeMappingContainer(struct Unknown SourceAsset) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.GetNodeMappingContainer");

	struct GetNodeMappingContainer_Params {
		struct Unknown SourceAsset;
		struct Unknown ReturnValue;

	}; GetNodeMappingContainer_Params Params;

	Params.SourceAsset = SourceAsset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.GetImportedBounds
inline struct Unknown USkeletalMesh::GetImportedBounds() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.GetImportedBounds");

	struct GetImportedBounds_Params {
		
		struct Unknown ReturnValue;

	}; GetImportedBounds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.GetBounds
inline struct Unknown USkeletalMesh::GetBounds() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.GetBounds");

	struct GetBounds_Params {
		
		struct Unknown ReturnValue;

	}; GetBounds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.FindSocketInfo
inline struct Unknown USkeletalMesh::FindSocketInfo(struct FName InSocketName, struct Unknown& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.FindSocketInfo");

	struct FindSocketInfo_Params {
		struct FName InSocketName;
		struct Unknown& OutTransform;
		int32_t& OutBoneIndex;
		int32_t& OutIndex;
		struct Unknown ReturnValue;

	}; FindSocketInfo_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutTransform = Params.OutTransform;
	OutBoneIndex = Params.OutBoneIndex;
	OutIndex = Params.OutIndex;


	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.FindSocketAndIndex
inline struct Unknown USkeletalMesh::FindSocketAndIndex(struct FName InSocketName, int32_t& OutIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.FindSocketAndIndex");

	struct FindSocketAndIndex_Params {
		struct FName InSocketName;
		int32_t& OutIndex;
		struct Unknown ReturnValue;

	}; FindSocketAndIndex_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutIndex = Params.OutIndex;


	return params.ReturnValue;
}

// Function Engine.SkeletalMesh.FindSocket
inline struct Unknown USkeletalMesh::FindSocket(struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.FindSocket");

	struct FindSocket_Params {
		struct FName InSocketName;
		struct Unknown ReturnValue;

	}; FindSocket_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMeshActor.SetMobility
inline void AStaticMeshActor::SetMobility(char InMobility) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActor.SetMobility");

	struct SetMobility_Params {
		char InMobility;
	}; SetMobility_Params Params;

	Params.InMobility = InMobility;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ShowHUD
inline void AHUD::ShowHUD() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowHUD");

	struct ShowHUD_Params {
		
	}; ShowHUD_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ShowDebugToggleSubCategory
inline void AHUD::ShowDebugToggleSubCategory(struct FName Category) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebugToggleSubCategory");

	struct ShowDebugToggleSubCategory_Params {
		struct FName Category;
	}; ShowDebugToggleSubCategory_Params Params;

	Params.Category = Category;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ShowDebugForReticleTargetToggle
inline void AHUD::ShowDebugForReticleTargetToggle(struct Unknown* DesiredClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebugForReticleTargetToggle");

	struct ShowDebugForReticleTargetToggle_Params {
		struct Unknown* DesiredClass;
	}; ShowDebugForReticleTargetToggle_Params Params;

	Params.DesiredClass = DesiredClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ShowDebug
inline void AHUD::ShowDebug(struct FName DebugType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebug");

	struct ShowDebug_Params {
		struct FName DebugType;
	}; ShowDebug_Params Params;

	Params.DebugType = DebugType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.RemoveDebugText
inline void AHUD::RemoveDebugText(struct Unknown SrcActor, char bLeaveDurationText) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.RemoveDebugText");

	struct RemoveDebugText_Params {
		struct Unknown SrcActor;
		char bLeaveDurationText;
	}; RemoveDebugText_Params Params;

	Params.SrcActor = SrcActor;
	Params.bLeaveDurationText = bLeaveDurationText;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.RemoveAllDebugStrings
inline void AHUD::RemoveAllDebugStrings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.RemoveAllDebugStrings");

	struct RemoveAllDebugStrings_Params {
		
	}; RemoveAllDebugStrings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ReceiveHitBoxRelease
inline void AHUD::ReceiveHitBoxRelease(struct FName BoxName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxRelease");

	struct ReceiveHitBoxRelease_Params {
		struct FName BoxName;
	}; ReceiveHitBoxRelease_Params Params;

	Params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ReceiveHitBoxEndCursorOver
inline void AHUD::ReceiveHitBoxEndCursorOver(struct FName BoxName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxEndCursorOver");

	struct ReceiveHitBoxEndCursorOver_Params {
		struct FName BoxName;
	}; ReceiveHitBoxEndCursorOver_Params Params;

	Params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ReceiveHitBoxClick
inline void AHUD::ReceiveHitBoxClick(struct FName BoxName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxClick");

	struct ReceiveHitBoxClick_Params {
		struct FName BoxName;
	}; ReceiveHitBoxClick_Params Params;

	Params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ReceiveHitBoxBeginCursorOver
inline void AHUD::ReceiveHitBoxBeginCursorOver(struct FName BoxName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxBeginCursorOver");

	struct ReceiveHitBoxBeginCursorOver_Params {
		struct FName BoxName;
	}; ReceiveHitBoxBeginCursorOver_Params Params;

	Params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.ReceiveDrawHUD
inline void AHUD::ReceiveDrawHUD(int32_t SizeX, int32_t SizeY) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveDrawHUD");

	struct ReceiveDrawHUD_Params {
		int32_t SizeX;
		int32_t SizeY;
	}; ReceiveDrawHUD_Params Params;

	Params.SizeX = SizeX;
	Params.SizeY = SizeY;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.Project
inline struct Unknown AHUD::Project(struct Unknown Location) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Project");

	struct Project_Params {
		struct Unknown Location;
		struct Unknown ReturnValue;

	}; Project_Params Params;

	Params.Location = Location;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.HUD.PreviousDebugTarget
inline void AHUD::PreviousDebugTarget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PreviousDebugTarget");

	struct PreviousDebugTarget_Params {
		
	}; PreviousDebugTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.NextDebugTarget
inline void AHUD::NextDebugTarget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.NextDebugTarget");

	struct NextDebugTarget_Params {
		
	}; NextDebugTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.GetTextSize
inline void AHUD::GetTextSize(struct FString Text, float& OutWidth, float& OutHeight, struct Unknown Font, float Scale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetTextSize");

	struct GetTextSize_Params {
		struct FString Text;
		float& OutWidth;
		float& OutHeight;
		struct Unknown Font;
		float Scale;
	}; GetTextSize_Params Params;

	Params.Text = Text;
	Params.Font = Font;
	Params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutWidth = Params.OutWidth;
	OutHeight = Params.OutHeight;

}

// Function Engine.HUD.GetOwningPlayerController
inline struct Unknown AHUD::GetOwningPlayerController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetOwningPlayerController");

	struct GetOwningPlayerController_Params {
		
		struct Unknown ReturnValue;

	}; GetOwningPlayerController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.HUD.GetOwningPawn
inline struct Unknown AHUD::GetOwningPawn() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetOwningPawn");

	struct GetOwningPawn_Params {
		
		struct Unknown ReturnValue;

	}; GetOwningPawn_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.HUD.GetActorsInSelectionRectangle
inline void AHUD::GetActorsInSelectionRectangle(struct Unknown* ClassFilter, struct Unknown& FirstPoint, struct Unknown& SecondPoint, struct TArray<Unknown>& OutActors, char bIncludeNonCollidingComponents, char bActorMustBeFullyEnclosed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetActorsInSelectionRectangle");

	struct GetActorsInSelectionRectangle_Params {
		struct Unknown* ClassFilter;
		struct Unknown& FirstPoint;
		struct Unknown& SecondPoint;
		struct TArray<Unknown>& OutActors;
		char bIncludeNonCollidingComponents;
		char bActorMustBeFullyEnclosed;
	}; GetActorsInSelectionRectangle_Params Params;

	Params.ClassFilter = ClassFilter;
	Params.bIncludeNonCollidingComponents = bIncludeNonCollidingComponents;
	Params.bActorMustBeFullyEnclosed = bActorMustBeFullyEnclosed;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	FirstPoint = Params.FirstPoint;
	SecondPoint = Params.SecondPoint;
	OutActors = Params.OutActors;

}

// Function Engine.HUD.DrawTextureSimple
inline void AHUD::DrawTextureSimple(struct Unknown Texture, float ScreenX, float ScreenY, float Scale, char bScalePosition) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawTextureSimple");

	struct DrawTextureSimple_Params {
		struct Unknown Texture;
		float ScreenX;
		float ScreenY;
		float Scale;
		char bScalePosition;
	}; DrawTextureSimple_Params Params;

	Params.Texture = Texture;
	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;
	Params.Scale = Scale;
	Params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.DrawTexture
inline void AHUD::DrawTexture(struct Unknown Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, struct Unknown TintColor, char BlendMode, float Scale, char bScalePosition, float Rotation, struct Unknown RotPivot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawTexture");

	struct DrawTexture_Params {
		struct Unknown Texture;
		float ScreenX;
		float ScreenY;
		float ScreenW;
		float ScreenH;
		float TextureU;
		float TextureV;
		float TextureUWidth;
		float TextureVHeight;
		struct Unknown TintColor;
		char BlendMode;
		float Scale;
		char bScalePosition;
		float Rotation;
		struct Unknown RotPivot;
	}; DrawTexture_Params Params;

	Params.Texture = Texture;
	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;
	Params.ScreenW = ScreenW;
	Params.ScreenH = ScreenH;
	Params.TextureU = TextureU;
	Params.TextureV = TextureV;
	Params.TextureUWidth = TextureUWidth;
	Params.TextureVHeight = TextureVHeight;
	Params.TintColor = TintColor;
	Params.BlendMode = BlendMode;
	Params.Scale = Scale;
	Params.bScalePosition = bScalePosition;
	Params.Rotation = Rotation;
	Params.RotPivot = RotPivot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.DrawText
inline void AHUD::DrawText(struct FString Text, struct Unknown TextColor, float ScreenX, float ScreenY, struct Unknown Font, float Scale, char bScalePosition) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawText");

	struct DrawText_Params {
		struct FString Text;
		struct Unknown TextColor;
		float ScreenX;
		float ScreenY;
		struct Unknown Font;
		float Scale;
		char bScalePosition;
	}; DrawText_Params Params;

	Params.Text = Text;
	Params.TextColor = TextColor;
	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;
	Params.Font = Font;
	Params.Scale = Scale;
	Params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.DrawRect
inline void AHUD::DrawRect(struct Unknown RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawRect");

	struct DrawRect_Params {
		struct Unknown RectColor;
		float ScreenX;
		float ScreenY;
		float ScreenW;
		float ScreenH;
	}; DrawRect_Params Params;

	Params.RectColor = RectColor;
	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;
	Params.ScreenW = ScreenW;
	Params.ScreenH = ScreenH;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.DrawMaterialTriangle
inline void AHUD::DrawMaterialTriangle(struct Unknown Material, struct Unknown V0_Pos, struct Unknown V1_Pos, struct Unknown V2_Pos, struct Unknown V0_UV, struct Unknown V1_UV, struct Unknown V2_UV, struct Unknown V0_Color, struct Unknown V1_Color, struct Unknown V2_Color) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMaterialTriangle");

	struct DrawMaterialTriangle_Params {
		struct Unknown Material;
		struct Unknown V0_Pos;
		struct Unknown V1_Pos;
		struct Unknown V2_Pos;
		struct Unknown V0_UV;
		struct Unknown V1_UV;
		struct Unknown V2_UV;
		struct Unknown V0_Color;
		struct Unknown V1_Color;
		struct Unknown V2_Color;
	}; DrawMaterialTriangle_Params Params;

	Params.Material = Material;
	Params.V0_Pos = V0_Pos;
	Params.V1_Pos = V1_Pos;
	Params.V2_Pos = V2_Pos;
	Params.V0_UV = V0_UV;
	Params.V1_UV = V1_UV;
	Params.V2_UV = V2_UV;
	Params.V0_Color = V0_Color;
	Params.V1_Color = V1_Color;
	Params.V2_Color = V2_Color;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.DrawMaterialSimple
inline void AHUD::DrawMaterialSimple(struct Unknown Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, char bScalePosition) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMaterialSimple");

	struct DrawMaterialSimple_Params {
		struct Unknown Material;
		float ScreenX;
		float ScreenY;
		float ScreenW;
		float ScreenH;
		float Scale;
		char bScalePosition;
	}; DrawMaterialSimple_Params Params;

	Params.Material = Material;
	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;
	Params.ScreenW = ScreenW;
	Params.ScreenH = ScreenH;
	Params.Scale = Scale;
	Params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.DrawMaterial
inline void AHUD::DrawMaterial(struct Unknown Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, char bScalePosition, float Rotation, struct Unknown RotPivot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMaterial");

	struct DrawMaterial_Params {
		struct Unknown Material;
		float ScreenX;
		float ScreenY;
		float ScreenW;
		float ScreenH;
		float MaterialU;
		float MaterialV;
		float MaterialUWidth;
		float MaterialVHeight;
		float Scale;
		char bScalePosition;
		float Rotation;
		struct Unknown RotPivot;
	}; DrawMaterial_Params Params;

	Params.Material = Material;
	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;
	Params.ScreenW = ScreenW;
	Params.ScreenH = ScreenH;
	Params.MaterialU = MaterialU;
	Params.MaterialV = MaterialV;
	Params.MaterialUWidth = MaterialUWidth;
	Params.MaterialVHeight = MaterialVHeight;
	Params.Scale = Scale;
	Params.bScalePosition = bScalePosition;
	Params.Rotation = Rotation;
	Params.RotPivot = RotPivot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.DrawLine
inline void AHUD::DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, struct Unknown LineColor, float LineThickness) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawLine");

	struct DrawLine_Params {
		float StartScreenX;
		float StartScreenY;
		float EndScreenX;
		float EndScreenY;
		struct Unknown LineColor;
		float LineThickness;
	}; DrawLine_Params Params;

	Params.StartScreenX = StartScreenX;
	Params.StartScreenY = StartScreenY;
	Params.EndScreenX = EndScreenX;
	Params.EndScreenY = EndScreenY;
	Params.LineColor = LineColor;
	Params.LineThickness = LineThickness;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.Deproject
inline void AHUD::Deproject(float ScreenX, float ScreenY, struct Unknown& WorldPosition, struct Unknown& WorldDirection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Deproject");

	struct Deproject_Params {
		float ScreenX;
		float ScreenY;
		struct Unknown& WorldPosition;
		struct Unknown& WorldDirection;
	}; Deproject_Params Params;

	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldPosition = Params.WorldPosition;
	WorldDirection = Params.WorldDirection;

}

// Function Engine.HUD.AddHitBox
inline void AHUD::AddHitBox(struct Unknown Position, struct Unknown Size, struct FName InName, char bConsumesInput, int32_t Priority) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddHitBox");

	struct AddHitBox_Params {
		struct Unknown Position;
		struct Unknown Size;
		struct FName InName;
		char bConsumesInput;
		int32_t Priority;
	}; AddHitBox_Params Params;

	Params.Position = Position;
	Params.Size = Size;
	Params.InName = InName;
	Params.bConsumesInput = bConsumesInput;
	Params.Priority = Priority;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.HUD.AddDebugText
inline void AHUD::AddDebugText(struct FString DebugText, struct Unknown SrcActor, float Duration, struct Unknown Offset, struct Unknown DesiredOffset, struct Unknown TextColor, char bSkipOverwriteCheck, char bAbsoluteLocation, char bKeepAttachedToActor, struct Unknown InFont, float FontScale, char bDrawShadow) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddDebugText");

	struct AddDebugText_Params {
		struct FString DebugText;
		struct Unknown SrcActor;
		float Duration;
		struct Unknown Offset;
		struct Unknown DesiredOffset;
		struct Unknown TextColor;
		char bSkipOverwriteCheck;
		char bAbsoluteLocation;
		char bKeepAttachedToActor;
		struct Unknown InFont;
		float FontScale;
		char bDrawShadow;
	}; AddDebugText_Params Params;

	Params.DebugText = DebugText;
	Params.SrcActor = SrcActor;
	Params.Duration = Duration;
	Params.Offset = Offset;
	Params.DesiredOffset = DesiredOffset;
	Params.TextColor = TextColor;
	Params.bSkipOverwriteCheck = bSkipOverwriteCheck;
	Params.bAbsoluteLocation = bAbsoluteLocation;
	Params.bKeepAttachedToActor = bKeepAttachedToActor;
	Params.InFont = InFont;
	Params.FontScale = FontScale;
	Params.bDrawShadow = bDrawShadow;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers
inline void USkeletalMeshComponent::UnlinkAnimClassLayers(struct Unknown* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers");

	struct UnlinkAnimClassLayers_Params {
		struct Unknown* InClass;
	}; UnlinkAnimClassLayers_Params Params;

	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent
inline void USkeletalMeshComponent::UnbindClothFromMasterPoseComponent(char bRestoreSimulationSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent");

	struct UnbindClothFromMasterPoseComponent_Params {
		char bRestoreSimulationSpace;
	}; UnbindClothFromMasterPoseComponent_Params Params;

	Params.bRestoreSimulationSpace = bRestoreSimulationSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint
inline void USkeletalMeshComponent::ToggleDisablePostProcessBlueprint() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint");

	struct ToggleDisablePostProcessBlueprint_Params {
		
	}; ToggleDisablePostProcessBlueprint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.TermBodiesBelow
inline void USkeletalMeshComponent::TermBodiesBelow(struct FName ParentBoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.TermBodiesBelow");

	struct TermBodiesBelow_Params {
		struct FName ParentBoneName;
	}; TermBodiesBelow_Params Params;

	Params.ParentBoneName = ParentBoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SuspendClothingSimulation
inline void USkeletalMeshComponent::SuspendClothingSimulation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SuspendClothingSimulation");

	struct SuspendClothingSimulation_Params {
		
	}; SuspendClothingSimulation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.Stop
inline void USkeletalMeshComponent::Stop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.Stop");

	struct Stop_Params {
		
	}; Stop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SnapshotPose
inline void USkeletalMeshComponent::SnapshotPose(struct Unknown& Snapshot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SnapshotPose");

	struct SnapshotPose_Params {
		struct Unknown& Snapshot;
	}; SnapshotPose_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Snapshot = Params.Snapshot;

}

// Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor
inline void USkeletalMeshComponent::SetUpdateAnimationInEditor(char NewUpdateState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor");

	struct SetUpdateAnimationInEditor_Params {
		char NewUpdateState;
	}; SetUpdateAnimationInEditor_Params Params;

	Params.NewUpdateState = NewUpdateState;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold
inline void USkeletalMeshComponent::SetTeleportRotationThreshold(float threshold) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold");

	struct SetTeleportRotationThreshold_Params {
		float threshold;
	}; SetTeleportRotationThreshold_Params Params;

	Params.threshold = threshold;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold
inline void USkeletalMeshComponent::SetTeleportDistanceThreshold(float threshold) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold");

	struct SetTeleportDistanceThreshold_Params {
		float threshold;
	}; SetTeleportDistanceThreshold_Params Params;

	Params.threshold = threshold;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetPosition
inline void USkeletalMeshComponent::SetPosition(float InPos, char bFireNotifies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPosition");

	struct SetPosition_Params {
		float InPos;
		char bFireNotifies;
	}; SetPosition_Params Params;

	Params.InPos = InPos;
	Params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetPlayRate
inline void USkeletalMeshComponent::SetPlayRate(float Rate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPlayRate");

	struct SetPlayRate_Params {
		float Rate;
	}; SetPlayRate_Params Params;

	Params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
inline void USkeletalMeshComponent::SetPhysicsBlendWeight(float PhysicsBlendWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight");

	struct SetPhysicsBlendWeight_Params {
		float PhysicsBlendWeight;
	}; SetPhysicsBlendWeight_Params Params;

	Params.PhysicsBlendWeight = PhysicsBlendWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow
inline void USkeletalMeshComponent::SetNotifyRigidBodyCollisionBelow(char bNewNotifyRigidBodyCollision, struct FName BoneName, char bIncludeSelf) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow");

	struct SetNotifyRigidBodyCollisionBelow_Params {
		char bNewNotifyRigidBodyCollision;
		struct FName BoneName;
		char bIncludeSelf;
	}; SetNotifyRigidBodyCollisionBelow_Params Params;

	Params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;
	Params.BoneName = BoneName;
	Params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetMorphTarget
inline void USkeletalMeshComponent::SetMorphTarget(struct FName MorphTargetName, float Value, char bRemoveZeroWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetMorphTarget");

	struct SetMorphTarget_Params {
		struct FName MorphTargetName;
		float Value;
		char bRemoveZeroWeight;
	}; SetMorphTarget_Params Params;

	Params.MorphTargetName = MorphTargetName;
	Params.Value = Value;
	Params.bRemoveZeroWeight = bRemoveZeroWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
inline void USkeletalMeshComponent::SetEnablePhysicsBlending(char bNewBlendPhysics) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending");

	struct SetEnablePhysicsBlending_Params {
		char bNewBlendPhysics;
	}; SetEnablePhysicsBlending_Params Params;

	Params.bNewBlendPhysics = bNewBlendPhysics;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow
inline void USkeletalMeshComponent::SetEnableGravityOnAllBodiesBelow(char bEnableGravity, struct FName BoneName, char bIncludeSelf) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow");

	struct SetEnableGravityOnAllBodiesBelow_Params {
		char bEnableGravity;
		struct FName BoneName;
		char bIncludeSelf;
	}; SetEnableGravityOnAllBodiesBelow_Params Params;

	Params.bEnableGravity = bEnableGravity;
	Params.BoneName = BoneName;
	Params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetEnableBodyGravity
inline void USkeletalMeshComponent::SetEnableBodyGravity(char bEnableGravity, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnableBodyGravity");

	struct SetEnableBodyGravity_Params {
		char bEnableGravity;
		struct FName BoneName;
	}; SetEnableBodyGravity_Params Params;

	Params.bEnableGravity = bEnableGravity;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint
inline void USkeletalMeshComponent::SetDisablePostProcessBlueprint(char bInDisablePostProcess) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint");

	struct SetDisablePostProcessBlueprint_Params {
		char bInDisablePostProcess;
	}; SetDisablePostProcessBlueprint_Params Params;

	Params.bInDisablePostProcess = bInDisablePostProcess;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetDisableAnimCurves
inline void USkeletalMeshComponent::SetDisableAnimCurves(char bInDisableAnimCurves) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetDisableAnimCurves");

	struct SetDisableAnimCurves_Params {
		char bInDisableAnimCurves;
	}; SetDisableAnimCurves_Params Params;

	Params.bInDisableAnimCurves = bInDisableAnimCurves;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll
inline void USkeletalMeshComponent::SetConstraintProfileForAll(struct FName ProfileName, char bDefaultIfNotFound) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll");

	struct SetConstraintProfileForAll_Params {
		struct FName ProfileName;
		char bDefaultIfNotFound;
	}; SetConstraintProfileForAll_Params Params;

	Params.ProfileName = ProfileName;
	Params.bDefaultIfNotFound = bDefaultIfNotFound;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetConstraintProfile
inline void USkeletalMeshComponent::SetConstraintProfile(struct FName JointName, struct FName ProfileName, char bDefaultIfNotFound) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetConstraintProfile");

	struct SetConstraintProfile_Params {
		struct FName JointName;
		struct FName ProfileName;
		char bDefaultIfNotFound;
	}; SetConstraintProfile_Params Params;

	Params.JointName = JointName;
	Params.ProfileName = ProfileName;
	Params.bDefaultIfNotFound = bDefaultIfNotFound;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
inline void USkeletalMeshComponent::SetClothMaxDistanceScale(float Scale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale");

	struct SetClothMaxDistanceScale_Params {
		float Scale;
	}; SetClothMaxDistanceScale_Params Params;

	Params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision
inline void USkeletalMeshComponent::SetBodyNotifyRigidBodyCollision(char bNewNotifyRigidBodyCollision, struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision");

	struct SetBodyNotifyRigidBodyCollision_Params {
		char bNewNotifyRigidBodyCollision;
		struct FName BoneName;
	}; SetBodyNotifyRigidBodyCollision_Params Params;

	Params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;
	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAnimClass
inline void USkeletalMeshComponent::SetAnimClass(struct Unknown* NewClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimClass");

	struct SetAnimClass_Params {
		struct Unknown* NewClass;
	}; SetAnimClass_Params Params;

	Params.NewClass = NewClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAnimationMode
inline void USkeletalMeshComponent::SetAnimationMode(char InAnimationMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimationMode");

	struct SetAnimationMode_Params {
		char InAnimationMode;
	}; SetAnimationMode_Params Params;

	Params.InAnimationMode = InAnimationMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAnimation
inline void USkeletalMeshComponent::SetAnimation(struct Unknown NewAnimToPlay) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimation");

	struct SetAnimation_Params {
		struct Unknown NewAnimToPlay;
	}; SetAnimation_Params Params;

	Params.NewAnimToPlay = NewAnimToPlay;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAngularLimits
inline void USkeletalMeshComponent::SetAngularLimits(struct FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAngularLimits");

	struct SetAngularLimits_Params {
		struct FName InBoneName;
		float Swing1LimitAngle;
		float TwistLimitAngle;
		float Swing2LimitAngle;
	}; SetAngularLimits_Params Params;

	Params.InBoneName = InBoneName;
	Params.Swing1LimitAngle = Swing1LimitAngle;
	Params.TwistLimitAngle = TwistLimitAngle;
	Params.Swing2LimitAngle = Swing2LimitAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode
inline void USkeletalMeshComponent::SetAllowRigidBodyAnimNode(char bInAllow, char bReinitAnim) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode");

	struct SetAllowRigidBodyAnimNode_Params {
		char bInAllow;
		char bReinitAnim;
	}; SetAllowRigidBodyAnimNode_Params Params;

	Params.bInAllow = bInAllow;
	Params.bReinitAnim = bReinitAnim;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation
inline void USkeletalMeshComponent::SetAllowedAnimCurvesEvaluation(struct TArray<Unknown>& List, char bAllow) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation");

	struct SetAllowedAnimCurvesEvaluation_Params {
		struct TArray<Unknown>& List;
		char bAllow;
	}; SetAllowedAnimCurvesEvaluation_Params Params;

	Params.bAllow = bAllow;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	List = Params.List;

}

// Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation
inline void USkeletalMeshComponent::SetAllowAnimCurveEvaluation(char bInAllow) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation");

	struct SetAllowAnimCurveEvaluation_Params {
		char bInAllow;
	}; SetAllowAnimCurveEvaluation_Params Params;

	Params.bInAllow = bInAllow;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
inline void USkeletalMeshComponent::SetAllMotorsAngularVelocityDrive(char bEnableSwingDrive, char bEnableTwistDrive, char bSkipCustomPhysicsType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive");

	struct SetAllMotorsAngularVelocityDrive_Params {
		char bEnableSwingDrive;
		char bEnableTwistDrive;
		char bSkipCustomPhysicsType;
	}; SetAllMotorsAngularVelocityDrive_Params Params;

	Params.bEnableSwingDrive = bEnableSwingDrive;
	Params.bEnableTwistDrive = bEnableTwistDrive;
	Params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
inline void USkeletalMeshComponent::SetAllMotorsAngularPositionDrive(char bEnableSwingDrive, char bEnableTwistDrive, char bSkipCustomPhysicsType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive");

	struct SetAllMotorsAngularPositionDrive_Params {
		char bEnableSwingDrive;
		char bEnableTwistDrive;
		char bSkipCustomPhysicsType;
	}; SetAllMotorsAngularPositionDrive_Params Params;

	Params.bEnableSwingDrive = bEnableSwingDrive;
	Params.bEnableTwistDrive = bEnableTwistDrive;
	Params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
inline void USkeletalMeshComponent::SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, char bSkipCustomPhysicsType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams");

	struct SetAllMotorsAngularDriveParams_Params {
		float InSpring;
		float InDamping;
		float InForceLimit;
		char bSkipCustomPhysicsType;
	}; SetAllMotorsAngularDriveParams_Params Params;

	Params.InSpring = InSpring;
	Params.InDamping = InDamping;
	Params.InForceLimit = InForceLimit;
	Params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
inline void USkeletalMeshComponent::SetAllBodiesSimulatePhysics(char bNewSimulate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics");

	struct SetAllBodiesSimulatePhysics_Params {
		char bNewSimulate;
	}; SetAllBodiesSimulatePhysics_Params Params;

	Params.bNewSimulate = bNewSimulate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
inline void USkeletalMeshComponent::SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, char bSkipCustomPhysicsType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight");

	struct SetAllBodiesPhysicsBlendWeight_Params {
		float PhysicsBlendWeight;
		char bSkipCustomPhysicsType;
	}; SetAllBodiesPhysicsBlendWeight_Params Params;

	Params.PhysicsBlendWeight = PhysicsBlendWeight;
	Params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
inline void USkeletalMeshComponent::SetAllBodiesBelowSimulatePhysics(struct FName& InBoneName, char bNewSimulate, char bIncludeSelf) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics");

	struct SetAllBodiesBelowSimulatePhysics_Params {
		struct FName& InBoneName;
		char bNewSimulate;
		char bIncludeSelf;
	}; SetAllBodiesBelowSimulatePhysics_Params Params;

	Params.bNewSimulate = bNewSimulate;
	Params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InBoneName = Params.InBoneName;

}

// Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
inline void USkeletalMeshComponent::SetAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float PhysicsBlendWeight, char bSkipCustomPhysicsType, char bIncludeSelf) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight");

	struct SetAllBodiesBelowPhysicsBlendWeight_Params {
		struct FName& InBoneName;
		float PhysicsBlendWeight;
		char bSkipCustomPhysicsType;
		char bIncludeSelf;
	}; SetAllBodiesBelowPhysicsBlendWeight_Params Params;

	Params.PhysicsBlendWeight = PhysicsBlendWeight;
	Params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;
	Params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InBoneName = Params.InBoneName;

}

// Function Engine.SkeletalMeshComponent.ResumeClothingSimulation
inline void USkeletalMeshComponent::ResumeClothingSimulation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResumeClothingSimulation");

	struct ResumeClothingSimulation_Params {
		
	}; ResumeClothingSimulation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.ResetClothTeleportMode
inline void USkeletalMeshComponent::ResetClothTeleportMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetClothTeleportMode");

	struct ResetClothTeleportMode_Params {
		
	}; ResetClothTeleportMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics
inline void USkeletalMeshComponent::ResetAnimInstanceDynamics(enum class Unknow InTeleportType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics");

	struct ResetAnimInstanceDynamics_Params {
		enum class Unknow InTeleportType;
	}; ResetAnimInstanceDynamics_Params Params;

	Params.InTeleportType = InTeleportType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation
inline void USkeletalMeshComponent::ResetAllowedAnimCurveEvaluation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation");

	struct ResetAllowedAnimCurveEvaluation_Params {
		
	}; ResetAllowedAnimCurveEvaluation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
inline void USkeletalMeshComponent::ResetAllBodiesSimulatePhysics() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics");

	struct ResetAllBodiesSimulatePhysics_Params {
		
	}; ResetAllBodiesSimulatePhysics_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.PlayAnimation
inline void USkeletalMeshComponent::PlayAnimation(struct Unknown NewAnimToPlay, char bLooping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayAnimation");

	struct PlayAnimation_Params {
		struct Unknown NewAnimToPlay;
		char bLooping;
	}; PlayAnimation_Params Params;

	Params.NewAnimToPlay = NewAnimToPlay;
	Params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.Play
inline void USkeletalMeshComponent::Play(char bLooping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.Play");

	struct Play_Params {
		char bLooping;
	}; Play_Params Params;

	Params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.OverrideAnimationData
inline void USkeletalMeshComponent::OverrideAnimationData(struct Unknown InAnimToPlay, char bIsLooping, char bIsPlaying, float Position, float PlayRate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.OverrideAnimationData");

	struct OverrideAnimationData_Params {
		struct Unknown InAnimToPlay;
		char bIsLooping;
		char bIsPlaying;
		float Position;
		float PlayRate;
	}; OverrideAnimationData_Params Params;

	Params.InAnimToPlay = InAnimToPlay;
	Params.bIsLooping = bIsLooping;
	Params.bIsPlaying = bIsPlaying;
	Params.Position = Position;
	Params.PlayRate = PlayRate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag
inline void USkeletalMeshComponent::LinkAnimGraphByTag(struct FName InTag, struct Unknown* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag");

	struct LinkAnimGraphByTag_Params {
		struct FName InTag;
		struct Unknown* InClass;
	}; LinkAnimGraphByTag_Params Params;

	Params.InTag = InTag;
	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.LinkAnimClassLayers
inline void USkeletalMeshComponent::LinkAnimClassLayers(struct Unknown* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.LinkAnimClassLayers");

	struct LinkAnimClassLayers_Params {
		struct Unknown* InClass;
	}; LinkAnimClassLayers_Params Params;

	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset
inline char USkeletalMeshComponent::K2_GetClosestPointOnPhysicsAsset(struct Unknown& WorldPosition, struct Unknown& ClosestWorldPosition, struct Unknown& Normal, struct FName& BoneName, float& Distance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset");

	struct K2_GetClosestPointOnPhysicsAsset_Params {
		struct Unknown& WorldPosition;
		struct Unknown& ClosestWorldPosition;
		struct Unknown& Normal;
		struct FName& BoneName;
		float& Distance;
		char ReturnValue;

	}; K2_GetClosestPointOnPhysicsAsset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldPosition = Params.WorldPosition;
	ClosestWorldPosition = Params.ClosestWorldPosition;
	Normal = Params.Normal;
	BoneName = Params.BoneName;
	Distance = Params.Distance;


	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.IsPlaying
inline char USkeletalMeshComponent::IsPlaying() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsPlaying");

	struct IsPlaying_Params {
		
		char ReturnValue;

	}; IsPlaying_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended
inline char USkeletalMeshComponent::IsClothingSimulationSuspended() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended");

	struct IsClothingSimulationSuspended_Params {
		
		char ReturnValue;

	}; IsClothingSimulationSuspended_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled
inline char USkeletalMeshComponent::IsBodyGravityEnabled(struct FName BoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled");

	struct IsBodyGravityEnabled_Params {
		struct FName BoneName;
		char ReturnValue;

	}; IsBodyGravityEnabled_Params Params;

	Params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.HasValidAnimationInstance
inline char USkeletalMeshComponent::HasValidAnimationInstance() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.HasValidAnimationInstance");

	struct HasValidAnimationInstance_Params {
		
		char ReturnValue;

	}; HasValidAnimationInstance_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold
inline float USkeletalMeshComponent::GetTeleportRotationThreshold() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold");

	struct GetTeleportRotationThreshold_Params {
		
		float ReturnValue;

	}; GetTeleportRotationThreshold_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold
inline float USkeletalMeshComponent::GetTeleportDistanceThreshold() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold");

	struct GetTeleportDistanceThreshold_Params {
		
		float ReturnValue;

	}; GetTeleportDistanceThreshold_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass
inline struct Unknown USkeletalMeshComponent::GetSkeletalCenterOfMass() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass");

	struct GetSkeletalCenterOfMass_Params {
		
		struct Unknown ReturnValue;

	}; GetSkeletalCenterOfMass_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetPostProcessInstance
inline struct Unknown USkeletalMeshComponent::GetPostProcessInstance() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetPostProcessInstance");

	struct GetPostProcessInstance_Params {
		
		struct Unknown ReturnValue;

	}; GetPostProcessInstance_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetPosition
inline float USkeletalMeshComponent::GetPosition() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetPosition");

	struct GetPosition_Params {
		
		float ReturnValue;

	}; GetPosition_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetPlayRate
inline float USkeletalMeshComponent::GetPlayRate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetPlayRate");

	struct GetPlayRate_Params {
		
		float ReturnValue;

	}; GetPlayRate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetMorphTarget
inline float USkeletalMeshComponent::GetMorphTarget(struct FName MorphTargetName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetMorphTarget");

	struct GetMorphTarget_Params {
		struct FName MorphTargetName;
		float ReturnValue;

	}; GetMorphTarget_Params Params;

	Params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup
inline struct Unknown USkeletalMeshComponent::GetLinkedAnimLayerInstanceByGroup(struct FName InGroup) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup");

	struct GetLinkedAnimLayerInstanceByGroup_Params {
		struct FName InGroup;
		struct Unknown ReturnValue;

	}; GetLinkedAnimLayerInstanceByGroup_Params Params;

	Params.InGroup = InGroup;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass
inline struct Unknown USkeletalMeshComponent::GetLinkedAnimLayerInstanceByClass(struct Unknown* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass");

	struct GetLinkedAnimLayerInstanceByClass_Params {
		struct Unknown* InClass;
		struct Unknown ReturnValue;

	}; GetLinkedAnimLayerInstanceByClass_Params Params;

	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag
inline void USkeletalMeshComponent::GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<Unknown>& OutLinkedInstances) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag");

	struct GetLinkedAnimGraphInstancesByTag_Params {
		struct FName InTag;
		struct TArray<Unknown>& OutLinkedInstances;
	}; GetLinkedAnimGraphInstancesByTag_Params Params;

	Params.InTag = InTag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutLinkedInstances = Params.OutLinkedInstances;

}

// Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag
inline struct Unknown USkeletalMeshComponent::GetLinkedAnimGraphInstanceByTag(struct FName InTag) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag");

	struct GetLinkedAnimGraphInstanceByTag_Params {
		struct FName InTag;
		struct Unknown ReturnValue;

	}; GetLinkedAnimGraphInstanceByTag_Params Params;

	Params.InTag = InTag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint
inline char USkeletalMeshComponent::GetDisablePostProcessBlueprint() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint");

	struct GetDisablePostProcessBlueprint_Params {
		
		char ReturnValue;

	}; GetDisablePostProcessBlueprint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetDisableAnimCurves
inline char USkeletalMeshComponent::GetDisableAnimCurves() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetDisableAnimCurves");

	struct GetDisableAnimCurves_Params {
		
		char ReturnValue;

	}; GetDisableAnimCurves_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetCurrentJointAngles
inline void USkeletalMeshComponent::GetCurrentJointAngles(struct FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetCurrentJointAngles");

	struct GetCurrentJointAngles_Params {
		struct FName InBoneName;
		float& Swing1Angle;
		float& TwistAngle;
		float& Swing2Angle;
	}; GetCurrentJointAngles_Params Params;

	Params.InBoneName = InBoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Swing1Angle = Params.Swing1Angle;
	TwistAngle = Params.TwistAngle;
	Swing2Angle = Params.Swing2Angle;

}

// Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
inline float USkeletalMeshComponent::GetClothMaxDistanceScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale");

	struct GetClothMaxDistanceScale_Params {
		
		float ReturnValue;

	}; GetClothMaxDistanceScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor
inline struct Unknown USkeletalMeshComponent::GetClothingSimulationInteractor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor");

	struct GetClothingSimulationInteractor_Params {
		
		struct Unknown ReturnValue;

	}; GetClothingSimulationInteractor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetBoneMass
inline float USkeletalMeshComponent::GetBoneMass(struct FName BoneName, char bScaleMass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneMass");

	struct GetBoneMass_Params {
		struct FName BoneName;
		char bScaleMass;
		float ReturnValue;

	}; GetBoneMass_Params Params;

	Params.BoneName = BoneName;
	Params.bScaleMass = bScaleMass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetAnimInstance
inline struct Unknown USkeletalMeshComponent::GetAnimInstance() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimInstance");

	struct GetAnimInstance_Params {
		
		struct Unknown ReturnValue;

	}; GetAnimInstance_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetAnimClass
inline struct Unknown* USkeletalMeshComponent::GetAnimClass() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimClass");

	struct GetAnimClass_Params {
		
		struct Unknown* ReturnValue;

	}; GetAnimClass_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetAnimationMode
inline char USkeletalMeshComponent::GetAnimationMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimationMode");

	struct GetAnimationMode_Params {
		
		char ReturnValue;

	}; GetAnimationMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode
inline char USkeletalMeshComponent::GetAllowRigidBodyAnimNode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode");

	struct GetAllowRigidBodyAnimNode_Params {
		
		char ReturnValue;

	}; GetAllowRigidBodyAnimNode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate
inline char USkeletalMeshComponent::GetAllowedAnimCurveEvaluate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate");

	struct GetAllowedAnimCurveEvaluate_Params {
		
		char ReturnValue;

	}; GetAllowedAnimCurveEvaluate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
inline void USkeletalMeshComponent::ForceClothNextUpdateTeleportAndReset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset");

	struct ForceClothNextUpdateTeleportAndReset_Params {
		
	}; ForceClothNextUpdateTeleportAndReset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
inline void USkeletalMeshComponent::ForceClothNextUpdateTeleport() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport");

	struct ForceClothNextUpdateTeleport_Params {
		
	}; ForceClothNextUpdateTeleport_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.FindConstraintBoneName
inline struct FName USkeletalMeshComponent::FindConstraintBoneName(int32_t ConstraintIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindConstraintBoneName");

	struct FindConstraintBoneName_Params {
		int32_t ConstraintIndex;
		struct FName ReturnValue;

	}; FindConstraintBoneName_Params Params;

	Params.ConstraintIndex = ConstraintIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkeletalMeshComponent.ClearMorphTargets
inline void USkeletalMeshComponent::ClearMorphTargets() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ClearMorphTargets");

	struct ClearMorphTargets_Params {
		
	}; ClearMorphTargets_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.BreakConstraint
inline void USkeletalMeshComponent::BreakConstraint(struct Unknown Impulse, struct Unknown HitLocation, struct FName InBoneName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BreakConstraint");

	struct BreakConstraint_Params {
		struct Unknown Impulse;
		struct Unknown HitLocation;
		struct FName InBoneName;
	}; BreakConstraint_Params Params;

	Params.Impulse = Impulse;
	Params.HitLocation = HitLocation;
	Params.InBoneName = InBoneName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent
inline void USkeletalMeshComponent::BindClothToMasterPoseComponent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent");

	struct BindClothToMasterPoseComponent_Params {
		
	}; BindClothToMasterPoseComponent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation
inline void USkeletalMeshComponent::AllowAnimCurveEvaluation(struct FName NameOfCurve, char bAllow) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation");

	struct AllowAnimCurveEvaluation_Params {
		struct FName NameOfCurve;
		char bAllow;
	}; AllowAnimCurveEvaluation_Params Params;

	Params.NameOfCurve = NameOfCurve;
	Params.bAllow = bAllow;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow
inline void USkeletalMeshComponent::AddImpulseToAllBodiesBelow(struct Unknown Impulse, struct FName BoneName, char bVelChange, char bIncludeSelf) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow");

	struct AddImpulseToAllBodiesBelow_Params {
		struct Unknown Impulse;
		struct FName BoneName;
		char bVelChange;
		char bIncludeSelf;
	}; AddImpulseToAllBodiesBelow_Params Params;

	Params.Impulse = Impulse;
	Params.BoneName = BoneName;
	Params.bVelChange = bVelChange;
	Params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow
inline void USkeletalMeshComponent::AddForceToAllBodiesBelow(struct Unknown Force, struct FName BoneName, char bAccelChange, char bIncludeSelf) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow");

	struct AddForceToAllBodiesBelow_Params {
		struct Unknown Force;
		struct FName BoneName;
		char bAccelChange;
		char bIncludeSelf;
	}; AddForceToAllBodiesBelow_Params Params;

	Params.Force = Force;
	Params.BoneName = BoneName;
	Params.bAccelChange = bAccelChange;
	Params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
inline void USkeletalMeshComponent::AccumulateAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float AddPhysicsBlendWeight, char bSkipCustomPhysicsType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight");

	struct AccumulateAllBodiesBelowPhysicsBlendWeight_Params {
		struct FName& InBoneName;
		float AddPhysicsBlendWeight;
		char bSkipCustomPhysicsType;
	}; AccumulateAllBodiesBelowPhysicsBlendWeight_Params Params;

	Params.AddPhysicsBlendWeight = AddPhysicsBlendWeight;
	Params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InBoneName = Params.InBoneName;

}

// Function Engine.AnimInstance.UnlockAIResources
inline void UAnimInstance::UnlockAIResources(char bUnlockMovement, char UnlockAILogic) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.UnlockAIResources");

	struct UnlockAIResources_Params {
		char bUnlockMovement;
		char UnlockAILogic;
	}; UnlockAIResources_Params Params;

	Params.bUnlockMovement = bUnlockMovement;
	Params.UnlockAILogic = UnlockAILogic;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.UnlinkAnimClassLayers
inline void UAnimInstance::UnlinkAnimClassLayers(struct Unknown* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.UnlinkAnimClassLayers");

	struct UnlinkAnimClassLayers_Params {
		struct Unknown* InClass;
	}; UnlinkAnimClassLayers_Params Params;

	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.TryGetPawnOwner
inline struct Unknown UAnimInstance::TryGetPawnOwner() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.TryGetPawnOwner");

	struct TryGetPawnOwner_Params {
		
		struct Unknown ReturnValue;

	}; TryGetPawnOwner_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.StopSlotAnimation
inline void UAnimInstance::StopSlotAnimation(float InBlendOutTime, struct FName SlotNodeName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.StopSlotAnimation");

	struct StopSlotAnimation_Params {
		float InBlendOutTime;
		struct FName SlotNodeName;
	}; StopSlotAnimation_Params Params;

	Params.InBlendOutTime = InBlendOutTime;
	Params.SlotNodeName = SlotNodeName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.SnapshotPose
inline void UAnimInstance::SnapshotPose(struct Unknown& Snapshot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SnapshotPose");

	struct SnapshotPose_Params {
		struct Unknown& Snapshot;
	}; SnapshotPose_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Snapshot = Params.Snapshot;

}

// Function Engine.AnimInstance.SetRootMotionMode
inline void UAnimInstance::SetRootMotionMode(char Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SetRootMotionMode");

	struct SetRootMotionMode_Params {
		char Value;
	}; SetRootMotionMode_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances
inline void UAnimInstance::SetReceiveNotifiesFromLinkedInstances(char bSet) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances");

	struct SetReceiveNotifiesFromLinkedInstances_Params {
		char bSet;
	}; SetReceiveNotifiesFromLinkedInstances_Params Params;

	Params.bSet = bSet;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances
inline void UAnimInstance::SetPropagateNotifiesToLinkedInstances(char bSet) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances");

	struct SetPropagateNotifiesToLinkedInstances_Params {
		char bSet;
	}; SetPropagateNotifiesToLinkedInstances_Params Params;

	Params.bSet = bSet;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.SetMorphTarget
inline void UAnimInstance::SetMorphTarget(struct FName MorphTargetName, float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SetMorphTarget");

	struct SetMorphTarget_Params {
		struct FName MorphTargetName;
		float Value;
	}; SetMorphTarget_Params Params;

	Params.MorphTargetName = MorphTargetName;
	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.SavePoseSnapshot
inline void UAnimInstance::SavePoseSnapshot(struct FName SnapshotName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SavePoseSnapshot");

	struct SavePoseSnapshot_Params {
		struct FName SnapshotName;
	}; SavePoseSnapshot_Params Params;

	Params.SnapshotName = SnapshotName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.ResetDynamics
inline void UAnimInstance::ResetDynamics(enum class Unknow InTeleportType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.ResetDynamics");

	struct ResetDynamics_Params {
		enum class Unknow InTeleportType;
	}; ResetDynamics_Params Params;

	Params.InTeleportType = InTeleportType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
inline struct Unknown UAnimInstance::PlaySlotAnimationAsDynamicMontage(struct Unknown Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage");

	struct PlaySlotAnimationAsDynamicMontage_Params {
		struct Unknown Asset;
		struct FName SlotNodeName;
		float BlendInTime;
		float BlendOutTime;
		float InPlayRate;
		int32_t LoopCount;
		float BlendOutTriggerTime;
		float InTimeToStartMontageAt;
		struct Unknown ReturnValue;

	}; PlaySlotAnimationAsDynamicMontage_Params Params;

	Params.Asset = Asset;
	Params.SlotNodeName = SlotNodeName;
	Params.BlendInTime = BlendInTime;
	Params.BlendOutTime = BlendOutTime;
	Params.InPlayRate = InPlayRate;
	Params.LoopCount = LoopCount;
	Params.BlendOutTriggerTime = BlendOutTriggerTime;
	Params.InTimeToStartMontageAt = InTimeToStartMontageAt;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.PlaySlotAnimation
inline float UAnimInstance::PlaySlotAnimation(struct Unknown Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.PlaySlotAnimation");

	struct PlaySlotAnimation_Params {
		struct Unknown Asset;
		struct FName SlotNodeName;
		float BlendInTime;
		float BlendOutTime;
		float InPlayRate;
		int32_t LoopCount;
		float ReturnValue;

	}; PlaySlotAnimation_Params Params;

	Params.Asset = Asset;
	Params.SlotNodeName = SlotNodeName;
	Params.BlendInTime = BlendInTime;
	Params.BlendOutTime = BlendOutTime;
	Params.InPlayRate = InPlayRate;
	Params.LoopCount = LoopCount;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_StopGroupByName
inline void UAnimInstance::Montage_StopGroupByName(float InBlendOutTime, struct FName GroupName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_StopGroupByName");

	struct Montage_StopGroupByName_Params {
		float InBlendOutTime;
		struct FName GroupName;
	}; Montage_StopGroupByName_Params Params;

	Params.InBlendOutTime = InBlendOutTime;
	Params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_Stop
inline void UAnimInstance::Montage_Stop(float InBlendOutTime, struct Unknown Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Stop");

	struct Montage_Stop_Params {
		float InBlendOutTime;
		struct Unknown Montage;
	}; Montage_Stop_Params Params;

	Params.InBlendOutTime = InBlendOutTime;
	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_SetPosition
inline void UAnimInstance::Montage_SetPosition(struct Unknown Montage, float NewPosition) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_SetPosition");

	struct Montage_SetPosition_Params {
		struct Unknown Montage;
		float NewPosition;
	}; Montage_SetPosition_Params Params;

	Params.Montage = Montage;
	Params.NewPosition = NewPosition;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_SetPlayRate
inline void UAnimInstance::Montage_SetPlayRate(struct Unknown Montage, float NewPlayRate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_SetPlayRate");

	struct Montage_SetPlayRate_Params {
		struct Unknown Montage;
		float NewPlayRate;
	}; Montage_SetPlayRate_Params Params;

	Params.Montage = Montage;
	Params.NewPlayRate = NewPlayRate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_SetNextSection
inline void UAnimInstance::Montage_SetNextSection(struct FName SectionNameToChange, struct FName NextSection, struct Unknown Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_SetNextSection");

	struct Montage_SetNextSection_Params {
		struct FName SectionNameToChange;
		struct FName NextSection;
		struct Unknown Montage;
	}; Montage_SetNextSection_Params Params;

	Params.SectionNameToChange = SectionNameToChange;
	Params.NextSection = NextSection;
	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_Resume
inline void UAnimInstance::Montage_Resume(struct Unknown Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Resume");

	struct Montage_Resume_Params {
		struct Unknown Montage;
	}; Montage_Resume_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_Play
inline float UAnimInstance::Montage_Play(struct Unknown MontageToPlay, float InPlayRate, enum class Unknow ReturnValueType, float InTimeToStartMontageAt, char bStopAllMontages) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Play");

	struct Montage_Play_Params {
		struct Unknown MontageToPlay;
		float InPlayRate;
		enum class Unknow ReturnValueType;
		float InTimeToStartMontageAt;
		char bStopAllMontages;
		float ReturnValue;

	}; Montage_Play_Params Params;

	Params.MontageToPlay = MontageToPlay;
	Params.InPlayRate = InPlayRate;
	Params.ReturnValueType = ReturnValueType;
	Params.InTimeToStartMontageAt = InTimeToStartMontageAt;
	Params.bStopAllMontages = bStopAllMontages;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_Pause
inline void UAnimInstance::Montage_Pause(struct Unknown Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Pause");

	struct Montage_Pause_Params {
		struct Unknown Montage;
	}; Montage_Pause_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_JumpToSectionsEnd
inline void UAnimInstance::Montage_JumpToSectionsEnd(struct FName SectionName, struct Unknown Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_JumpToSectionsEnd");

	struct Montage_JumpToSectionsEnd_Params {
		struct FName SectionName;
		struct Unknown Montage;
	}; Montage_JumpToSectionsEnd_Params Params;

	Params.SectionName = SectionName;
	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_JumpToSection
inline void UAnimInstance::Montage_JumpToSection(struct FName SectionName, struct Unknown Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_JumpToSection");

	struct Montage_JumpToSection_Params {
		struct FName SectionName;
		struct Unknown Montage;
	}; Montage_JumpToSection_Params Params;

	Params.SectionName = SectionName;
	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.Montage_IsPlaying
inline char UAnimInstance::Montage_IsPlaying(struct Unknown Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_IsPlaying");

	struct Montage_IsPlaying_Params {
		struct Unknown Montage;
		char ReturnValue;

	}; Montage_IsPlaying_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_IsActive
inline char UAnimInstance::Montage_IsActive(struct Unknown Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_IsActive");

	struct Montage_IsActive_Params {
		struct Unknown Montage;
		char ReturnValue;

	}; Montage_IsActive_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_GetPosition
inline float UAnimInstance::Montage_GetPosition(struct Unknown Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetPosition");

	struct Montage_GetPosition_Params {
		struct Unknown Montage;
		float ReturnValue;

	}; Montage_GetPosition_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_GetPlayRate
inline float UAnimInstance::Montage_GetPlayRate(struct Unknown Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetPlayRate");

	struct Montage_GetPlayRate_Params {
		struct Unknown Montage;
		float ReturnValue;

	}; Montage_GetPlayRate_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_GetIsStopped
inline char UAnimInstance::Montage_GetIsStopped(struct Unknown Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetIsStopped");

	struct Montage_GetIsStopped_Params {
		struct Unknown Montage;
		char ReturnValue;

	}; Montage_GetIsStopped_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_GetCurrentSection
inline struct FName UAnimInstance::Montage_GetCurrentSection(struct Unknown Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetCurrentSection");

	struct Montage_GetCurrentSection_Params {
		struct Unknown Montage;
		struct FName ReturnValue;

	}; Montage_GetCurrentSection_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.Montage_GetBlendTime
inline float UAnimInstance::Montage_GetBlendTime(struct Unknown Montage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetBlendTime");

	struct Montage_GetBlendTime_Params {
		struct Unknown Montage;
		float ReturnValue;

	}; Montage_GetBlendTime_Params Params;

	Params.Montage = Montage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.LockAIResources
inline void UAnimInstance::LockAIResources(char bLockMovement, char LockAILogic) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.LockAIResources");

	struct LockAIResources_Params {
		char bLockMovement;
		char LockAILogic;
	}; LockAIResources_Params Params;

	Params.bLockMovement = bLockMovement;
	Params.LockAILogic = LockAILogic;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.LinkAnimGraphByTag
inline void UAnimInstance::LinkAnimGraphByTag(struct FName InTag, struct Unknown* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.LinkAnimGraphByTag");

	struct LinkAnimGraphByTag_Params {
		struct FName InTag;
		struct Unknown* InClass;
	}; LinkAnimGraphByTag_Params Params;

	Params.InTag = InTag;
	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.LinkAnimClassLayers
inline void UAnimInstance::LinkAnimClassLayers(struct Unknown* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.LinkAnimClassLayers");

	struct LinkAnimClassLayers_Params {
		struct Unknown* InClass;
	}; LinkAnimClassLayers_Params Params;

	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.IsSyncGroupBetweenMarkers
inline char UAnimInstance::IsSyncGroupBetweenMarkers(struct FName InSyncGroupName, struct FName PreviousMarker, struct FName NextMarker, char bRespectMarkerOrder) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.IsSyncGroupBetweenMarkers");

	struct IsSyncGroupBetweenMarkers_Params {
		struct FName InSyncGroupName;
		struct FName PreviousMarker;
		struct FName NextMarker;
		char bRespectMarkerOrder;
		char ReturnValue;

	}; IsSyncGroupBetweenMarkers_Params Params;

	Params.InSyncGroupName = InSyncGroupName;
	Params.PreviousMarker = PreviousMarker;
	Params.NextMarker = NextMarker;
	Params.bRespectMarkerOrder = bRespectMarkerOrder;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.IsPlayingSlotAnimation
inline char UAnimInstance::IsPlayingSlotAnimation(struct Unknown Asset, struct FName SlotNodeName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.IsPlayingSlotAnimation");

	struct IsPlayingSlotAnimation_Params {
		struct Unknown Asset;
		struct FName SlotNodeName;
		char ReturnValue;

	}; IsPlayingSlotAnimation_Params Params;

	Params.Asset = Asset;
	Params.SlotNodeName = SlotNodeName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.IsAnyMontagePlaying
inline char UAnimInstance::IsAnyMontagePlaying() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.IsAnyMontagePlaying");

	struct IsAnyMontagePlaying_Params {
		
		char ReturnValue;

	}; IsAnyMontagePlaying_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.HasMarkerBeenHitThisFrame
inline char UAnimInstance::HasMarkerBeenHitThisFrame(struct FName SyncGroup, struct FName MarkerName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.HasMarkerBeenHitThisFrame");

	struct HasMarkerBeenHitThisFrame_Params {
		struct FName SyncGroup;
		struct FName MarkerName;
		char ReturnValue;

	}; HasMarkerBeenHitThisFrame_Params Params;

	Params.SyncGroup = SyncGroup;
	Params.MarkerName = MarkerName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetTimeToClosestMarker
inline char UAnimInstance::GetTimeToClosestMarker(struct FName SyncGroup, struct FName MarkerName, float& OutMarkerTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetTimeToClosestMarker");

	struct GetTimeToClosestMarker_Params {
		struct FName SyncGroup;
		struct FName MarkerName;
		float& OutMarkerTime;
		char ReturnValue;

	}; GetTimeToClosestMarker_Params Params;

	Params.SyncGroup = SyncGroup;
	Params.MarkerName = MarkerName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutMarkerTime = Params.OutMarkerTime;


	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetSyncGroupPosition
inline struct Unknown UAnimInstance::GetSyncGroupPosition(struct FName InSyncGroupName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetSyncGroupPosition");

	struct GetSyncGroupPosition_Params {
		struct FName InSyncGroupName;
		struct Unknown ReturnValue;

	}; GetSyncGroupPosition_Params Params;

	Params.InSyncGroupName = InSyncGroupName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
inline float UAnimInstance::GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction");

	struct GetRelevantAnimTimeRemainingFraction_Params {
		int32_t MachineIndex;
		int32_t StateIndex;
		float ReturnValue;

	}; GetRelevantAnimTimeRemainingFraction_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetRelevantAnimTimeRemaining
inline float UAnimInstance::GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimTimeRemaining");

	struct GetRelevantAnimTimeRemaining_Params {
		int32_t MachineIndex;
		int32_t StateIndex;
		float ReturnValue;

	}; GetRelevantAnimTimeRemaining_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetRelevantAnimTimeFraction
inline float UAnimInstance::GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimTimeFraction");

	struct GetRelevantAnimTimeFraction_Params {
		int32_t MachineIndex;
		int32_t StateIndex;
		float ReturnValue;

	}; GetRelevantAnimTimeFraction_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetRelevantAnimTime
inline float UAnimInstance::GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimTime");

	struct GetRelevantAnimTime_Params {
		int32_t MachineIndex;
		int32_t StateIndex;
		float ReturnValue;

	}; GetRelevantAnimTime_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetRelevantAnimLength
inline float UAnimInstance::GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetRelevantAnimLength");

	struct GetRelevantAnimLength_Params {
		int32_t MachineIndex;
		int32_t StateIndex;
		float ReturnValue;

	}; GetRelevantAnimLength_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances
inline char UAnimInstance::GetReceiveNotifiesFromLinkedInstances() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances");

	struct GetReceiveNotifiesFromLinkedInstances_Params {
		
		char ReturnValue;

	}; GetReceiveNotifiesFromLinkedInstances_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances
inline char UAnimInstance::GetPropagateNotifiesToLinkedInstances() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances");

	struct GetPropagateNotifiesToLinkedInstances_Params {
		
		char ReturnValue;

	}; GetPropagateNotifiesToLinkedInstances_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetOwningComponent
inline struct Unknown UAnimInstance::GetOwningComponent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetOwningComponent");

	struct GetOwningComponent_Params {
		
		struct Unknown ReturnValue;

	}; GetOwningComponent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetOwningActor
inline struct Unknown UAnimInstance::GetOwningActor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetOwningActor");

	struct GetOwningActor_Params {
		
		struct Unknown ReturnValue;

	}; GetOwningActor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup
inline struct Unknown UAnimInstance::GetLinkedAnimLayerInstanceByGroup(struct FName InGroup) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup");

	struct GetLinkedAnimLayerInstanceByGroup_Params {
		struct FName InGroup;
		struct Unknown ReturnValue;

	}; GetLinkedAnimLayerInstanceByGroup_Params Params;

	Params.InGroup = InGroup;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass
inline struct Unknown UAnimInstance::GetLinkedAnimLayerInstanceByClass(struct Unknown* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass");

	struct GetLinkedAnimLayerInstanceByClass_Params {
		struct Unknown* InClass;
		struct Unknown ReturnValue;

	}; GetLinkedAnimLayerInstanceByClass_Params Params;

	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag
inline void UAnimInstance::GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<Unknown>& OutLinkedInstances) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag");

	struct GetLinkedAnimGraphInstancesByTag_Params {
		struct FName InTag;
		struct TArray<Unknown>& OutLinkedInstances;
	}; GetLinkedAnimGraphInstancesByTag_Params Params;

	Params.InTag = InTag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutLinkedInstances = Params.OutLinkedInstances;

}

// Function Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag
inline struct Unknown UAnimInstance::GetLinkedAnimGraphInstanceByTag(struct FName InTag) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag");

	struct GetLinkedAnimGraphInstanceByTag_Params {
		struct FName InTag;
		struct Unknown ReturnValue;

	}; GetLinkedAnimGraphInstanceByTag_Params Params;

	Params.InTag = InTag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
inline float UAnimInstance::GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction");

	struct GetInstanceTransitionTimeElapsedFraction_Params {
		int32_t MachineIndex;
		int32_t TransitionIndex;
		float ReturnValue;

	}; GetInstanceTransitionTimeElapsedFraction_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.TransitionIndex = TransitionIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed
inline float UAnimInstance::GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed");

	struct GetInstanceTransitionTimeElapsed_Params {
		int32_t MachineIndex;
		int32_t TransitionIndex;
		float ReturnValue;

	}; GetInstanceTransitionTimeElapsed_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.TransitionIndex = TransitionIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
inline float UAnimInstance::GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration");

	struct GetInstanceTransitionCrossfadeDuration_Params {
		int32_t MachineIndex;
		int32_t TransitionIndex;
		float ReturnValue;

	}; GetInstanceTransitionCrossfadeDuration_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.TransitionIndex = TransitionIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceStateWeight
inline float UAnimInstance::GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceStateWeight");

	struct GetInstanceStateWeight_Params {
		int32_t MachineIndex;
		int32_t StateIndex;
		float ReturnValue;

	}; GetInstanceStateWeight_Params Params;

	Params.MachineIndex = MachineIndex;
	Params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceMachineWeight
inline float UAnimInstance::GetInstanceMachineWeight(int32_t MachineIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceMachineWeight");

	struct GetInstanceMachineWeight_Params {
		int32_t MachineIndex;
		float ReturnValue;

	}; GetInstanceMachineWeight_Params Params;

	Params.MachineIndex = MachineIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
inline float UAnimInstance::GetInstanceCurrentStateElapsedTime(int32_t MachineIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime");

	struct GetInstanceCurrentStateElapsedTime_Params {
		int32_t MachineIndex;
		float ReturnValue;

	}; GetInstanceCurrentStateElapsedTime_Params Params;

	Params.MachineIndex = MachineIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
inline float UAnimInstance::GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction");

	struct GetInstanceAssetPlayerTimeFromEndFraction_Params {
		int32_t AssetPlayerIndex;
		float ReturnValue;

	}; GetInstanceAssetPlayerTimeFromEndFraction_Params Params;

	Params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
inline float UAnimInstance::GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd");

	struct GetInstanceAssetPlayerTimeFromEnd_Params {
		int32_t AssetPlayerIndex;
		float ReturnValue;

	}; GetInstanceAssetPlayerTimeFromEnd_Params Params;

	Params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
inline float UAnimInstance::GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction");

	struct GetInstanceAssetPlayerTimeFraction_Params {
		int32_t AssetPlayerIndex;
		float ReturnValue;

	}; GetInstanceAssetPlayerTimeFraction_Params Params;

	Params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceAssetPlayerTime
inline float UAnimInstance::GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerTime");

	struct GetInstanceAssetPlayerTime_Params {
		int32_t AssetPlayerIndex;
		float ReturnValue;

	}; GetInstanceAssetPlayerTime_Params Params;

	Params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetInstanceAssetPlayerLength
inline float UAnimInstance::GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetInstanceAssetPlayerLength");

	struct GetInstanceAssetPlayerLength_Params {
		int32_t AssetPlayerIndex;
		float ReturnValue;

	}; GetInstanceAssetPlayerLength_Params Params;

	Params.AssetPlayerIndex = AssetPlayerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetCurveValue
inline float UAnimInstance::GetCurveValue(struct FName CurveName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetCurveValue");

	struct GetCurveValue_Params {
		struct FName CurveName;
		float ReturnValue;

	}; GetCurveValue_Params Params;

	Params.CurveName = CurveName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetCurrentStateName
inline struct FName UAnimInstance::GetCurrentStateName(int32_t MachineIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetCurrentStateName");

	struct GetCurrentStateName_Params {
		int32_t MachineIndex;
		struct FName ReturnValue;

	}; GetCurrentStateName_Params Params;

	Params.MachineIndex = MachineIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetCurrentActiveMontage
inline struct Unknown UAnimInstance::GetCurrentActiveMontage() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetCurrentActiveMontage");

	struct GetCurrentActiveMontage_Params {
		
		struct Unknown ReturnValue;

	}; GetCurrentActiveMontage_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimInstance.GetAllCurveNames
inline void UAnimInstance::GetAllCurveNames(struct TArray<Unknown>& OutNames) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetAllCurveNames");

	struct GetAllCurveNames_Params {
		struct TArray<Unknown>& OutNames;
	}; GetAllCurveNames_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutNames = Params.OutNames;

}

// Function Engine.AnimInstance.GetActiveCurveNames
inline void UAnimInstance::GetActiveCurveNames(enum class Unknow CurveType, struct TArray<Unknown>& OutNames) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetActiveCurveNames");

	struct GetActiveCurveNames_Params {
		enum class Unknow CurveType;
		struct TArray<Unknown>& OutNames;
	}; GetActiveCurveNames_Params Params;

	Params.CurveType = CurveType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutNames = Params.OutNames;

}

// Function Engine.AnimInstance.ClearMorphTargets
inline void UAnimInstance::ClearMorphTargets() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.ClearMorphTargets");

	struct ClearMorphTargets_Params {
		
	}; ClearMorphTargets_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.CalculateDirection
inline float UAnimInstance::CalculateDirection(struct Unknown& Velocity, struct Unknown& BaseRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.CalculateDirection");

	struct CalculateDirection_Params {
		struct Unknown& Velocity;
		struct Unknown& BaseRotation;
		float ReturnValue;

	}; CalculateDirection_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Velocity = Params.Velocity;
	BaseRotation = Params.BaseRotation;


	return params.ReturnValue;
}

// Function Engine.AnimInstance.BlueprintUpdateAnimation
inline void UAnimInstance::BlueprintUpdateAnimation(float DeltaTimeX) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintUpdateAnimation");

	struct BlueprintUpdateAnimation_Params {
		float DeltaTimeX;
	}; BlueprintUpdateAnimation_Params Params;

	Params.DeltaTimeX = DeltaTimeX;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.BlueprintPostEvaluateAnimation
inline void UAnimInstance::BlueprintPostEvaluateAnimation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintPostEvaluateAnimation");

	struct BlueprintPostEvaluateAnimation_Params {
		
	}; BlueprintPostEvaluateAnimation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized
inline void UAnimInstance::BlueprintLinkedAnimationLayersInitialized() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized");

	struct BlueprintLinkedAnimationLayersInitialized_Params {
		
	}; BlueprintLinkedAnimationLayersInitialized_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.BlueprintInitializeAnimation
inline void UAnimInstance::BlueprintInitializeAnimation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintInitializeAnimation");

	struct BlueprintInitializeAnimation_Params {
		
	}; BlueprintInitializeAnimation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimInstance.BlueprintBeginPlay
inline void UAnimInstance::BlueprintBeginPlay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintBeginPlay");

	struct BlueprintBeginPlay_Params {
		
	}; BlueprintBeginPlay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Exporter.ScriptRunAssetExportTask
inline char UExporter::ScriptRunAssetExportTask(struct Unknown Task) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Exporter.ScriptRunAssetExportTask");

	struct ScriptRunAssetExportTask_Params {
		struct Unknown Task;
		char ReturnValue;

	}; ScriptRunAssetExportTask_Params Params;

	Params.Task = Task;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Exporter.RunAssetExportTasks
inline char UExporter::RunAssetExportTasks(struct TArray<Unknown>& ExportTasks) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Exporter.RunAssetExportTasks");

	struct RunAssetExportTasks_Params {
		struct TArray<Unknown>& ExportTasks;
		char ReturnValue;

	}; RunAssetExportTasks_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ExportTasks = Params.ExportTasks;


	return params.ReturnValue;
}

// Function Engine.Exporter.RunAssetExportTask
inline char UExporter::RunAssetExportTask(struct Unknown Task) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Exporter.RunAssetExportTask");

	struct RunAssetExportTask_Params {
		struct Unknown Task;
		char ReturnValue;

	}; RunAssetExportTask_Params Params;

	Params.Task = Task;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelScriptActor.WorldOriginLocationChanged
inline void ALevelScriptActor::WorldOriginLocationChanged(struct Unknown OldOriginLocation, struct Unknown NewOriginLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.WorldOriginLocationChanged");

	struct WorldOriginLocationChanged_Params {
		struct Unknown OldOriginLocation;
		struct Unknown NewOriginLocation;
	}; WorldOriginLocationChanged_Params Params;

	Params.OldOriginLocation = OldOriginLocation;
	Params.NewOriginLocation = NewOriginLocation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelScriptActor.SetCinematicMode
inline void ALevelScriptActor::SetCinematicMode(char bCinematicMode, char bHidePlayer, char bAffectsHUD, char bAffectsMovement, char bAffectsTurning) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.SetCinematicMode");

	struct SetCinematicMode_Params {
		char bCinematicMode;
		char bHidePlayer;
		char bAffectsHUD;
		char bAffectsMovement;
		char bAffectsTurning;
	}; SetCinematicMode_Params Params;

	Params.bCinematicMode = bCinematicMode;
	Params.bHidePlayer = bHidePlayer;
	Params.bAffectsHUD = bAffectsHUD;
	Params.bAffectsMovement = bAffectsMovement;
	Params.bAffectsTurning = bAffectsTurning;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelScriptActor.RemoteEvent
inline char ALevelScriptActor::RemoteEvent(struct FName EventName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.RemoteEvent");

	struct RemoteEvent_Params {
		struct FName EventName;
		char ReturnValue;

	}; RemoteEvent_Params Params;

	Params.EventName = EventName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelScriptActor.LevelReset
inline void ALevelScriptActor::LevelReset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.LevelReset");

	struct LevelReset_Params {
		
	}; LevelReset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.World.K2_GetWorldSettings
inline struct Unknown UWorld::K2_GetWorldSettings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.World.K2_GetWorldSettings");

	struct K2_GetWorldSettings_Params {
		
		struct Unknown ReturnValue;

	}; K2_GetWorldSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.World.HandleTimelineScrubbed
inline void UWorld::HandleTimelineScrubbed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.World.HandleTimelineScrubbed");

	struct HandleTimelineScrubbed_Params {
		
	}; HandleTimelineScrubbed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MKPawnEx.OnChangedViewMode
inline void AMKPawnEx::OnChangedViewMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKPawnEx.OnChangedViewMode");

	struct OnChangedViewMode_Params {
		
	}; OnChangedViewMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.SpawnDefaultController
inline void APawn::SpawnDefaultController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnDefaultController");

	struct SpawnDefaultController_Params {
		
	}; SpawnDefaultController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.SetCanAffectNavigationGeneration
inline void APawn::SetCanAffectNavigationGeneration(char bNewValue, char bForceUpdate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetCanAffectNavigationGeneration");

	struct SetCanAffectNavigationGeneration_Params {
		char bNewValue;
		char bForceUpdate;
	}; SetCanAffectNavigationGeneration_Params Params;

	Params.bNewValue = bNewValue;
	Params.bForceUpdate = bForceUpdate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.ReceiveUnpossessed
inline void APawn::ReceiveUnpossessed(struct Unknown OldController) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReceiveUnpossessed");

	struct ReceiveUnpossessed_Params {
		struct Unknown OldController;
	}; ReceiveUnpossessed_Params Params;

	Params.OldController = OldController;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.ReceivePossessed
inline void APawn::ReceivePossessed(struct Unknown NewController) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReceivePossessed");

	struct ReceivePossessed_Params {
		struct Unknown NewController;
	}; ReceivePossessed_Params Params;

	Params.NewController = NewController;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.PawnMakeNoise
inline void APawn::PawnMakeNoise(float Loudness, struct Unknown NoiseLocation, char bUseNoiseMakerLocation, struct Unknown NoiseMaker) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PawnMakeNoise");

	struct PawnMakeNoise_Params {
		float Loudness;
		struct Unknown NoiseLocation;
		char bUseNoiseMakerLocation;
		struct Unknown NoiseMaker;
	}; PawnMakeNoise_Params Params;

	Params.Loudness = Loudness;
	Params.NoiseLocation = NoiseLocation;
	Params.bUseNoiseMakerLocation = bUseNoiseMakerLocation;
	Params.NoiseMaker = NoiseMaker;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.OnRep_PlayerState
inline void APawn::OnRep_PlayerState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnRep_PlayerState");

	struct OnRep_PlayerState_Params {
		
	}; OnRep_PlayerState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.OnRep_Controller
inline void APawn::OnRep_Controller() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnRep_Controller");

	struct OnRep_Controller_Params {
		
	}; OnRep_Controller_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.LaunchPawn
inline void APawn::LaunchPawn(struct Unknown LaunchVelocity, char bXYOverride, char bZOverride) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.LaunchPawn");

	struct LaunchPawn_Params {
		struct Unknown LaunchVelocity;
		char bXYOverride;
		char bZOverride;
	}; LaunchPawn_Params Params;

	Params.LaunchVelocity = LaunchVelocity;
	Params.bXYOverride = bXYOverride;
	Params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.K2_GetMovementInputVector
inline struct Unknown APawn::K2_GetMovementInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.K2_GetMovementInputVector");

	struct K2_GetMovementInputVector_Params {
		
		struct Unknown ReturnValue;

	}; K2_GetMovementInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.IsPlayerControlled
inline char APawn::IsPlayerControlled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsPlayerControlled");

	struct IsPlayerControlled_Params {
		
		char ReturnValue;

	}; IsPlayerControlled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.IsPawnControlled
inline char APawn::IsPawnControlled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsPawnControlled");

	struct IsPawnControlled_Params {
		
		char ReturnValue;

	}; IsPawnControlled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.IsMoveInputIgnored
inline char APawn::IsMoveInputIgnored() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsMoveInputIgnored");

	struct IsMoveInputIgnored_Params {
		
		char ReturnValue;

	}; IsMoveInputIgnored_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.IsLocallyControlled
inline char APawn::IsLocallyControlled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsLocallyControlled");

	struct IsLocallyControlled_Params {
		
		char ReturnValue;

	}; IsLocallyControlled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.IsControlled
inline char APawn::IsControlled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsControlled");

	struct IsControlled_Params {
		
		char ReturnValue;

	}; IsControlled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.IsBotControlled
inline char APawn::IsBotControlled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsBotControlled");

	struct IsBotControlled_Params {
		
		char ReturnValue;

	}; IsBotControlled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetPendingMovementInputVector
inline struct Unknown APawn::GetPendingMovementInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetPendingMovementInputVector");

	struct GetPendingMovementInputVector_Params {
		
		struct Unknown ReturnValue;

	}; GetPendingMovementInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetNavAgentLocation
inline struct Unknown APawn::GetNavAgentLocation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetNavAgentLocation");

	struct GetNavAgentLocation_Params {
		
		struct Unknown ReturnValue;

	}; GetNavAgentLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetMovementComponent
inline struct Unknown APawn::GetMovementComponent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetMovementComponent");

	struct GetMovementComponent_Params {
		
		struct Unknown ReturnValue;

	}; GetMovementComponent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetMovementBaseActor
inline struct Unknown APawn::GetMovementBaseActor(struct Unknown Pawn) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetMovementBaseActor");

	struct GetMovementBaseActor_Params {
		struct Unknown Pawn;
		struct Unknown ReturnValue;

	}; GetMovementBaseActor_Params Params;

	Params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetLastMovementInputVector
inline struct Unknown APawn::GetLastMovementInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetLastMovementInputVector");

	struct GetLastMovementInputVector_Params {
		
		struct Unknown ReturnValue;

	}; GetLastMovementInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetControlRotation
inline struct Unknown APawn::GetControlRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetControlRotation");

	struct GetControlRotation_Params {
		
		struct Unknown ReturnValue;

	}; GetControlRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetController
inline struct Unknown APawn::GetController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetController");

	struct GetController_Params {
		
		struct Unknown ReturnValue;

	}; GetController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.GetBaseAimRotation
inline struct Unknown APawn::GetBaseAimRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBaseAimRotation");

	struct GetBaseAimRotation_Params {
		
		struct Unknown ReturnValue;

	}; GetBaseAimRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.DetachFromControllerPendingDestroy
inline void APawn::DetachFromControllerPendingDestroy() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DetachFromControllerPendingDestroy");

	struct DetachFromControllerPendingDestroy_Params {
		
	}; DetachFromControllerPendingDestroy_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.ConsumeMovementInputVector
inline struct Unknown APawn::ConsumeMovementInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ConsumeMovementInputVector");

	struct ConsumeMovementInputVector_Params {
		
		struct Unknown ReturnValue;

	}; ConsumeMovementInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Pawn.AddMovementInput
inline void APawn::AddMovementInput(struct Unknown WorldDirection, float ScaleValue, char bForce) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddMovementInput");

	struct AddMovementInput_Params {
		struct Unknown WorldDirection;
		float ScaleValue;
		char bForce;
	}; AddMovementInput_Params Params;

	Params.WorldDirection = WorldDirection;
	Params.ScaleValue = ScaleValue;
	Params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.AddControllerYawInput
inline void APawn::AddControllerYawInput(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddControllerYawInput");

	struct AddControllerYawInput_Params {
		float Val;
	}; AddControllerYawInput_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.AddControllerRollInput
inline void APawn::AddControllerRollInput(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddControllerRollInput");

	struct AddControllerRollInput_Params {
		float Val;
	}; AddControllerRollInput_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Pawn.AddControllerPitchInput
inline void APawn::AddControllerPitchInput(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddControllerPitchInput");

	struct AddControllerPitchInput_Params {
		float Val;
	}; AddControllerPitchInput_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.UnCrouch
inline void ACharacter::UnCrouch(char bClientSimulation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.UnCrouch");

	struct UnCrouch_Params {
		char bClientSimulation;
	}; UnCrouch_Params Params;

	Params.bClientSimulation = bClientSimulation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.StopJumping
inline void ACharacter::StopJumping() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.StopJumping");

	struct StopJumping_Params {
		
	}; StopJumping_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.StopAnimMontage
inline void ACharacter::StopAnimMontage(struct Unknown AnimMontage) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.StopAnimMontage");

	struct StopAnimMontage_Params {
		struct Unknown AnimMontage;
	}; StopAnimMontage_Params Params;

	Params.AnimMontage = AnimMontage;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ServerMoveOld
inline void ACharacter::ServerMoveOld(float OldTimeStamp, struct Unknown OldAccel, struct Unknown InVel, char OldMoveFlags) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveOld");

	struct ServerMoveOld_Params {
		float OldTimeStamp;
		struct Unknown OldAccel;
		struct Unknown InVel;
		char OldMoveFlags;
	}; ServerMoveOld_Params Params;

	Params.OldTimeStamp = OldTimeStamp;
	Params.OldAccel = OldAccel;
	Params.InVel = InVel;
	Params.OldMoveFlags = OldMoveFlags;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ServerMoveNoBase
inline void ACharacter::ServerMoveNoBase(float Timestamp, struct Unknown InAccel, struct Unknown InVel, struct Unknown ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveNoBase");

	struct ServerMoveNoBase_Params {
		float Timestamp;
		struct Unknown InAccel;
		struct Unknown InVel;
		struct Unknown ClientLoc;
		char CompressedMoveFlags;
		char ClientRoll;
		uint32_t View;
		char ClientMovementMode;
	}; ServerMoveNoBase_Params Params;

	Params.Timestamp = Timestamp;
	Params.InAccel = InAccel;
	Params.InVel = InVel;
	Params.ClientLoc = ClientLoc;
	Params.CompressedMoveFlags = CompressedMoveFlags;
	Params.ClientRoll = ClientRoll;
	Params.View = View;
	Params.ClientMovementMode = ClientMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ServerMoveDualNoBase
inline void ACharacter::ServerMoveDualNoBase(float TimeStamp0, struct Unknown InAccel0, struct Unknown InVel, char PendingFlags, uint32_t View0, float Timestamp, struct Unknown InAccel, struct Unknown ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveDualNoBase");

	struct ServerMoveDualNoBase_Params {
		float TimeStamp0;
		struct Unknown InAccel0;
		struct Unknown InVel;
		char PendingFlags;
		uint32_t View0;
		float Timestamp;
		struct Unknown InAccel;
		struct Unknown ClientLoc;
		char NewFlags;
		char ClientRoll;
		uint32_t View;
		char ClientMovementMode;
	}; ServerMoveDualNoBase_Params Params;

	Params.TimeStamp0 = TimeStamp0;
	Params.InAccel0 = InAccel0;
	Params.InVel = InVel;
	Params.PendingFlags = PendingFlags;
	Params.View0 = View0;
	Params.Timestamp = Timestamp;
	Params.InAccel = InAccel;
	Params.ClientLoc = ClientLoc;
	Params.NewFlags = NewFlags;
	Params.ClientRoll = ClientRoll;
	Params.View = View;
	Params.ClientMovementMode = ClientMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ServerMoveDualHybridRootMotion
inline void ACharacter::ServerMoveDualHybridRootMotion(float TimeStamp0, struct Unknown InAccel0, struct Unknown InVel, char PendingFlags, uint32_t View0, float Timestamp, struct Unknown InAccel, struct Unknown ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct Unknown ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveDualHybridRootMotion");

	struct ServerMoveDualHybridRootMotion_Params {
		float TimeStamp0;
		struct Unknown InAccel0;
		struct Unknown InVel;
		char PendingFlags;
		uint32_t View0;
		float Timestamp;
		struct Unknown InAccel;
		struct Unknown ClientLoc;
		char NewFlags;
		char ClientRoll;
		uint32_t View;
		struct Unknown ClientMovementBase;
		struct FName ClientBaseBoneName;
		char ClientMovementMode;
	}; ServerMoveDualHybridRootMotion_Params Params;

	Params.TimeStamp0 = TimeStamp0;
	Params.InAccel0 = InAccel0;
	Params.InVel = InVel;
	Params.PendingFlags = PendingFlags;
	Params.View0 = View0;
	Params.Timestamp = Timestamp;
	Params.InAccel = InAccel;
	Params.ClientLoc = ClientLoc;
	Params.NewFlags = NewFlags;
	Params.ClientRoll = ClientRoll;
	Params.View = View;
	Params.ClientMovementBase = ClientMovementBase;
	Params.ClientBaseBoneName = ClientBaseBoneName;
	Params.ClientMovementMode = ClientMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ServerMoveDual
inline void ACharacter::ServerMoveDual(float TimeStamp0, struct Unknown InAccel0, struct Unknown InVel, char PendingFlags, uint32_t View0, float Timestamp, struct Unknown InAccel, struct Unknown ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct Unknown ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMoveDual");

	struct ServerMoveDual_Params {
		float TimeStamp0;
		struct Unknown InAccel0;
		struct Unknown InVel;
		char PendingFlags;
		uint32_t View0;
		float Timestamp;
		struct Unknown InAccel;
		struct Unknown ClientLoc;
		char NewFlags;
		char ClientRoll;
		uint32_t View;
		struct Unknown ClientMovementBase;
		struct FName ClientBaseBoneName;
		char ClientMovementMode;
	}; ServerMoveDual_Params Params;

	Params.TimeStamp0 = TimeStamp0;
	Params.InAccel0 = InAccel0;
	Params.InVel = InVel;
	Params.PendingFlags = PendingFlags;
	Params.View0 = View0;
	Params.Timestamp = Timestamp;
	Params.InAccel = InAccel;
	Params.ClientLoc = ClientLoc;
	Params.NewFlags = NewFlags;
	Params.ClientRoll = ClientRoll;
	Params.View = View;
	Params.ClientMovementBase = ClientMovementBase;
	Params.ClientBaseBoneName = ClientBaseBoneName;
	Params.ClientMovementMode = ClientMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ServerMove
inline void ACharacter::ServerMove(float Timestamp, struct Unknown InAccel, struct Unknown InVel, struct Unknown ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, struct Unknown ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ServerMove");

	struct ServerMove_Params {
		float Timestamp;
		struct Unknown InAccel;
		struct Unknown InVel;
		struct Unknown ClientLoc;
		char CompressedMoveFlags;
		char ClientRoll;
		uint32_t View;
		struct Unknown ClientMovementBase;
		struct FName ClientBaseBoneName;
		char ClientMovementMode;
	}; ServerMove_Params Params;

	Params.Timestamp = Timestamp;
	Params.InAccel = InAccel;
	Params.InVel = InVel;
	Params.ClientLoc = ClientLoc;
	Params.CompressedMoveFlags = CompressedMoveFlags;
	Params.ClientRoll = ClientRoll;
	Params.View = View;
	Params.ClientMovementBase = ClientMovementBase;
	Params.ClientBaseBoneName = ClientBaseBoneName;
	Params.ClientMovementMode = ClientMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.RootMotionDebugClientPrintOnScreen
inline void ACharacter::RootMotionDebugClientPrintOnScreen(struct FString inString) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.RootMotionDebugClientPrintOnScreen");

	struct RootMotionDebugClientPrintOnScreen_Params {
		struct FString inString;
	}; RootMotionDebugClientPrintOnScreen_Params Params;

	Params.inString = inString;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.PlayAnimMontage
inline float ACharacter::PlayAnimMontage(struct Unknown AnimMontage, float InPlayRate, struct FName StartSectionName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.PlayAnimMontage");

	struct PlayAnimMontage_Params {
		struct Unknown AnimMontage;
		float InPlayRate;
		struct FName StartSectionName;
		float ReturnValue;

	}; PlayAnimMontage_Params Params;

	Params.AnimMontage = AnimMontage;
	Params.InPlayRate = InPlayRate;
	Params.StartSectionName = StartSectionName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.OnWalkingOffLedge
inline void ACharacter::OnWalkingOffLedge(struct Unknown& PreviousFloorImpactNormal, struct Unknown& PreviousFloorContactNormal, struct Unknown& PreviousLocation, float TimeDelta) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnWalkingOffLedge");

	struct OnWalkingOffLedge_Params {
		struct Unknown& PreviousFloorImpactNormal;
		struct Unknown& PreviousFloorContactNormal;
		struct Unknown& PreviousLocation;
		float TimeDelta;
	}; OnWalkingOffLedge_Params Params;

	Params.TimeDelta = TimeDelta;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PreviousFloorImpactNormal = Params.PreviousFloorImpactNormal;
	PreviousFloorContactNormal = Params.PreviousFloorContactNormal;
	PreviousLocation = Params.PreviousLocation;

}

// Function Engine.Character.OnRep_RootMotion
inline void ACharacter::OnRep_RootMotion() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_RootMotion");

	struct OnRep_RootMotion_Params {
		
	}; OnRep_RootMotion_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.OnRep_ReplicatedBasedMovement
inline void ACharacter::OnRep_ReplicatedBasedMovement() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_ReplicatedBasedMovement");

	struct OnRep_ReplicatedBasedMovement_Params {
		
	}; OnRep_ReplicatedBasedMovement_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp
inline void ACharacter::OnRep_ReplayLastTransformUpdateTimeStamp() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp");

	struct OnRep_ReplayLastTransformUpdateTimeStamp_Params {
		
	}; OnRep_ReplayLastTransformUpdateTimeStamp_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.OnRep_IsCrouched
inline void ACharacter::OnRep_IsCrouched() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_IsCrouched");

	struct OnRep_IsCrouched_Params {
		
	}; OnRep_IsCrouched_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.OnLaunched
inline void ACharacter::OnLaunched(struct Unknown LaunchVelocity, char bXYOverride, char bZOverride) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnLaunched");

	struct OnLaunched_Params {
		struct Unknown LaunchVelocity;
		char bXYOverride;
		char bZOverride;
	}; OnLaunched_Params Params;

	Params.LaunchVelocity = LaunchVelocity;
	Params.bXYOverride = bXYOverride;
	Params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.OnLanded
inline void ACharacter::OnLanded(struct Unknown& Hit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnLanded");

	struct OnLanded_Params {
		struct Unknown& Hit;
	}; OnLanded_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Hit = Params.Hit;

}

// Function Engine.Character.OnJumped
inline void ACharacter::OnJumped() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnJumped");

	struct OnJumped_Params {
		
	}; OnJumped_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.LaunchCharacter
inline void ACharacter::LaunchCharacter(struct Unknown LaunchVelocity, char bXYOverride, char bZOverride) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.LaunchCharacter");

	struct LaunchCharacter_Params {
		struct Unknown LaunchVelocity;
		char bXYOverride;
		char bZOverride;
	}; LaunchCharacter_Params Params;

	Params.LaunchVelocity = LaunchVelocity;
	Params.bXYOverride = bXYOverride;
	Params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.K2_UpdateCustomMovement
inline void ACharacter::K2_UpdateCustomMovement(float DeltaTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_UpdateCustomMovement");

	struct K2_UpdateCustomMovement_Params {
		float DeltaTime;
	}; K2_UpdateCustomMovement_Params Params;

	Params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.K2_OnStartCrouch
inline void ACharacter::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_OnStartCrouch");

	struct K2_OnStartCrouch_Params {
		float HalfHeightAdjust;
		float ScaledHalfHeightAdjust;
	}; K2_OnStartCrouch_Params Params;

	Params.HalfHeightAdjust = HalfHeightAdjust;
	Params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.K2_OnMovementModeChanged
inline void ACharacter::K2_OnMovementModeChanged(char PrevMovementMode, char NewMovementMode, char PrevCustomMode, char NewCustomMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_OnMovementModeChanged");

	struct K2_OnMovementModeChanged_Params {
		char PrevMovementMode;
		char NewMovementMode;
		char PrevCustomMode;
		char NewCustomMode;
	}; K2_OnMovementModeChanged_Params Params;

	Params.PrevMovementMode = PrevMovementMode;
	Params.NewMovementMode = NewMovementMode;
	Params.PrevCustomMode = PrevCustomMode;
	Params.NewCustomMode = NewCustomMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.K2_OnEndCrouch
inline void ACharacter::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_OnEndCrouch");

	struct K2_OnEndCrouch_Params {
		float HalfHeightAdjust;
		float ScaledHalfHeightAdjust;
	}; K2_OnEndCrouch_Params Params;

	Params.HalfHeightAdjust = HalfHeightAdjust;
	Params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.Jump
inline void ACharacter::Jump() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.Jump");

	struct Jump_Params {
		
	}; Jump_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.IsPlayingRootMotion
inline char ACharacter::IsPlayingRootMotion() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.IsPlayingRootMotion");

	struct IsPlayingRootMotion_Params {
		
		char ReturnValue;

	}; IsPlayingRootMotion_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.IsPlayingNetworkedRootMotionMontage
inline char ACharacter::IsPlayingNetworkedRootMotionMontage() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.IsPlayingNetworkedRootMotionMontage");

	struct IsPlayingNetworkedRootMotionMontage_Params {
		
		char ReturnValue;

	}; IsPlayingNetworkedRootMotionMontage_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.IsJumpProvidingForce
inline char ACharacter::IsJumpProvidingForce() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.IsJumpProvidingForce");

	struct IsJumpProvidingForce_Params {
		
		char ReturnValue;

	}; IsJumpProvidingForce_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.HasAnyRootMotion
inline char ACharacter::HasAnyRootMotion() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.HasAnyRootMotion");

	struct HasAnyRootMotion_Params {
		
		char ReturnValue;

	}; HasAnyRootMotion_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.GetCurrentMontage
inline struct Unknown ACharacter::GetCurrentMontage() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.GetCurrentMontage");

	struct GetCurrentMontage_Params {
		
		struct Unknown ReturnValue;

	}; GetCurrentMontage_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.GetBaseTranslationOffset
inline struct Unknown ACharacter::GetBaseTranslationOffset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.GetBaseTranslationOffset");

	struct GetBaseTranslationOffset_Params {
		
		struct Unknown ReturnValue;

	}; GetBaseTranslationOffset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.GetBaseRotationOffsetRotator
inline struct Unknown ACharacter::GetBaseRotationOffsetRotator() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.GetBaseRotationOffsetRotator");

	struct GetBaseRotationOffsetRotator_Params {
		
		struct Unknown ReturnValue;

	}; GetBaseRotationOffsetRotator_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.GetAnimRootMotionTranslationScale
inline float ACharacter::GetAnimRootMotionTranslationScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.GetAnimRootMotionTranslationScale");

	struct GetAnimRootMotionTranslationScale_Params {
		
		float ReturnValue;

	}; GetAnimRootMotionTranslationScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.ForceLastAckMove
inline void ACharacter::ForceLastAckMove() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ForceLastAckMove");

	struct ForceLastAckMove_Params {
		
	}; ForceLastAckMove_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.Crouch
inline void ACharacter::Crouch(char bClientSimulation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.Crouch");

	struct Crouch_Params {
		char bClientSimulation;
	}; Crouch_Params Params;

	Params.bClientSimulation = bClientSimulation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientVeryShortAdjustPosition
inline void ACharacter::ClientVeryShortAdjustPosition(float Timestamp, struct Unknown NewLoc, struct Unknown NewBase, struct FName NewBaseBoneName, char bHasBase, char bBaseRelativePosition, char ServerMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientVeryShortAdjustPosition");

	struct ClientVeryShortAdjustPosition_Params {
		float Timestamp;
		struct Unknown NewLoc;
		struct Unknown NewBase;
		struct FName NewBaseBoneName;
		char bHasBase;
		char bBaseRelativePosition;
		char ServerMovementMode;
	}; ClientVeryShortAdjustPosition_Params Params;

	Params.Timestamp = Timestamp;
	Params.NewLoc = NewLoc;
	Params.NewBase = NewBase;
	Params.NewBaseBoneName = NewBaseBoneName;
	Params.bHasBase = bHasBase;
	Params.bBaseRelativePosition = bBaseRelativePosition;
	Params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientCheatWalk
inline void ACharacter::ClientCheatWalk() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientCheatWalk");

	struct ClientCheatWalk_Params {
		
	}; ClientCheatWalk_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientCheatGhost
inline void ACharacter::ClientCheatGhost() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientCheatGhost");

	struct ClientCheatGhost_Params {
		
	}; ClientCheatGhost_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientCheatFly
inline void ACharacter::ClientCheatFly() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientCheatFly");

	struct ClientCheatFly_Params {
		
	}; ClientCheatFly_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientAdjustRootMotionSourcePosition
inline void ACharacter::ClientAdjustRootMotionSourcePosition(float Timestamp, struct Unknown ServerRootMotion, char bHasAnimRootMotion, float ServerMontageTrackPosition, struct Unknown ServerLoc, struct Unknown ServerRotation, float ServerVelZ, struct Unknown ServerBase, struct FName ServerBoneName, char bHasBase, char bBaseRelativePosition, char ServerMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientAdjustRootMotionSourcePosition");

	struct ClientAdjustRootMotionSourcePosition_Params {
		float Timestamp;
		struct Unknown ServerRootMotion;
		char bHasAnimRootMotion;
		float ServerMontageTrackPosition;
		struct Unknown ServerLoc;
		struct Unknown ServerRotation;
		float ServerVelZ;
		struct Unknown ServerBase;
		struct FName ServerBoneName;
		char bHasBase;
		char bBaseRelativePosition;
		char ServerMovementMode;
	}; ClientAdjustRootMotionSourcePosition_Params Params;

	Params.Timestamp = Timestamp;
	Params.ServerRootMotion = ServerRootMotion;
	Params.bHasAnimRootMotion = bHasAnimRootMotion;
	Params.ServerMontageTrackPosition = ServerMontageTrackPosition;
	Params.ServerLoc = ServerLoc;
	Params.ServerRotation = ServerRotation;
	Params.ServerVelZ = ServerVelZ;
	Params.ServerBase = ServerBase;
	Params.ServerBoneName = ServerBoneName;
	Params.bHasBase = bHasBase;
	Params.bBaseRelativePosition = bBaseRelativePosition;
	Params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientAdjustRootMotionPosition
inline void ACharacter::ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, struct Unknown ServerLoc, struct Unknown ServerRotation, float ServerVelZ, struct Unknown ServerBase, struct FName ServerBoneName, char bHasBase, char bBaseRelativePosition, char ServerMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientAdjustRootMotionPosition");

	struct ClientAdjustRootMotionPosition_Params {
		float Timestamp;
		float ServerMontageTrackPosition;
		struct Unknown ServerLoc;
		struct Unknown ServerRotation;
		float ServerVelZ;
		struct Unknown ServerBase;
		struct FName ServerBoneName;
		char bHasBase;
		char bBaseRelativePosition;
		char ServerMovementMode;
	}; ClientAdjustRootMotionPosition_Params Params;

	Params.Timestamp = Timestamp;
	Params.ServerMontageTrackPosition = ServerMontageTrackPosition;
	Params.ServerLoc = ServerLoc;
	Params.ServerRotation = ServerRotation;
	Params.ServerVelZ = ServerVelZ;
	Params.ServerBase = ServerBase;
	Params.ServerBoneName = ServerBoneName;
	Params.bHasBase = bHasBase;
	Params.bBaseRelativePosition = bBaseRelativePosition;
	Params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientAdjustPosition
inline void ACharacter::ClientAdjustPosition(float Timestamp, struct Unknown NewLoc, struct Unknown NewVel, struct Unknown NewBase, struct FName NewBaseBoneName, char bHasBase, char bBaseRelativePosition, char ServerMovementMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientAdjustPosition");

	struct ClientAdjustPosition_Params {
		float Timestamp;
		struct Unknown NewLoc;
		struct Unknown NewVel;
		struct Unknown NewBase;
		struct FName NewBaseBoneName;
		char bHasBase;
		char bBaseRelativePosition;
		char ServerMovementMode;
	}; ClientAdjustPosition_Params Params;

	Params.Timestamp = Timestamp;
	Params.NewLoc = NewLoc;
	Params.NewVel = NewVel;
	Params.NewBase = NewBase;
	Params.NewBaseBoneName = NewBaseBoneName;
	Params.bHasBase = bHasBase;
	Params.bBaseRelativePosition = bBaseRelativePosition;
	Params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.ClientAckGoodMove
inline void ACharacter::ClientAckGoodMove(float Timestamp) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientAckGoodMove");

	struct ClientAckGoodMove_Params {
		float Timestamp;
	}; ClientAckGoodMove_Params Params;

	Params.Timestamp = Timestamp;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Character.CanJumpInternal
inline char ACharacter::CanJumpInternal() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.CanJumpInternal");

	struct CanJumpInternal_Params {
		
		char ReturnValue;

	}; CanJumpInternal_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.CanJump
inline char ACharacter::CanJump() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.CanJump");

	struct CanJump_Params {
		
		char ReturnValue;

	}; CanJump_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.CanCrouch
inline char ACharacter::CanCrouch() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.CanCrouch");

	struct CanCrouch_Params {
		
		char ReturnValue;

	}; CanCrouch_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Character.CacheInitialMeshOffset
inline void ACharacter::CacheInitialMeshOffset(struct Unknown MeshRelativeLocation, struct Unknown MeshRelativeRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.CacheInitialMeshOffset");

	struct CacheInitialMeshOffset_Params {
		struct Unknown MeshRelativeLocation;
		struct Unknown MeshRelativeRotation;
	}; CacheInitialMeshOffset_Params Params;

	Params.MeshRelativeLocation = MeshRelativeLocation;
	Params.MeshRelativeRotation = MeshRelativeRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.UpdateSpline
inline void USplineComponent::UpdateSpline() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.UpdateSpline");

	struct UpdateSpline_Params {
		
	}; UpdateSpline_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.SetWorldLocationAtSplinePoint
inline void USplineComponent::SetWorldLocationAtSplinePoint(int32_t PointIndex, struct Unknown& InLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetWorldLocationAtSplinePoint");

	struct SetWorldLocationAtSplinePoint_Params {
		int32_t PointIndex;
		struct Unknown& InLocation;
	}; SetWorldLocationAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InLocation = Params.InLocation;

}

// Function Engine.SplineComponent.SetUpVectorAtSplinePoint
inline void USplineComponent::SetUpVectorAtSplinePoint(int32_t PointIndex, struct Unknown& InUpVector, char CoordinateSpace, char bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetUpVectorAtSplinePoint");

	struct SetUpVectorAtSplinePoint_Params {
		int32_t PointIndex;
		struct Unknown& InUpVector;
		char CoordinateSpace;
		char bUpdateSpline;
	}; SetUpVectorAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InUpVector = Params.InUpVector;

}

// Function Engine.SplineComponent.SetUnselectedSplineSegmentColor
inline void USplineComponent::SetUnselectedSplineSegmentColor(struct Unknown& SegmentColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetUnselectedSplineSegmentColor");

	struct SetUnselectedSplineSegmentColor_Params {
		struct Unknown& SegmentColor;
	}; SetUnselectedSplineSegmentColor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SegmentColor = Params.SegmentColor;

}

// Function Engine.SplineComponent.SetTangentsAtSplinePoint
inline void USplineComponent::SetTangentsAtSplinePoint(int32_t PointIndex, struct Unknown& InArriveTangent, struct Unknown& InLeaveTangent, char CoordinateSpace, char bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetTangentsAtSplinePoint");

	struct SetTangentsAtSplinePoint_Params {
		int32_t PointIndex;
		struct Unknown& InArriveTangent;
		struct Unknown& InLeaveTangent;
		char CoordinateSpace;
		char bUpdateSpline;
	}; SetTangentsAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InArriveTangent = Params.InArriveTangent;
	InLeaveTangent = Params.InLeaveTangent;

}

// Function Engine.SplineComponent.SetTangentAtSplinePoint
inline void USplineComponent::SetTangentAtSplinePoint(int32_t PointIndex, struct Unknown& InTangent, char CoordinateSpace, char bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetTangentAtSplinePoint");

	struct SetTangentAtSplinePoint_Params {
		int32_t PointIndex;
		struct Unknown& InTangent;
		char CoordinateSpace;
		char bUpdateSpline;
	}; SetTangentAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InTangent = Params.InTangent;

}

// Function Engine.SplineComponent.SetSplineWorldPoints
inline void USplineComponent::SetSplineWorldPoints(struct TArray<Unknown>& Points) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplineWorldPoints");

	struct SetSplineWorldPoints_Params {
		struct TArray<Unknown>& Points;
	}; SetSplineWorldPoints_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Points = Params.Points;

}

// Function Engine.SplineComponent.SetSplinePointType
inline void USplineComponent::SetSplinePointType(int32_t PointIndex, char Type, char bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplinePointType");

	struct SetSplinePointType_Params {
		int32_t PointIndex;
		char Type;
		char bUpdateSpline;
	}; SetSplinePointType_Params Params;

	Params.PointIndex = PointIndex;
	Params.Type = Type;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.SetSplinePoints
inline void USplineComponent::SetSplinePoints(struct TArray<Unknown>& Points, char CoordinateSpace, char bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplinePoints");

	struct SetSplinePoints_Params {
		struct TArray<Unknown>& Points;
		char CoordinateSpace;
		char bUpdateSpline;
	}; SetSplinePoints_Params Params;

	Params.CoordinateSpace = CoordinateSpace;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Points = Params.Points;

}

// Function Engine.SplineComponent.SetSplineLocalPoints
inline void USplineComponent::SetSplineLocalPoints(struct TArray<Unknown>& Points) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplineLocalPoints");

	struct SetSplineLocalPoints_Params {
		struct TArray<Unknown>& Points;
	}; SetSplineLocalPoints_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Points = Params.Points;

}

// Function Engine.SplineComponent.SetSelectedSplineSegmentColor
inline void USplineComponent::SetSelectedSplineSegmentColor(struct Unknown& SegmentColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSelectedSplineSegmentColor");

	struct SetSelectedSplineSegmentColor_Params {
		struct Unknown& SegmentColor;
	}; SetSelectedSplineSegmentColor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SegmentColor = Params.SegmentColor;

}

// Function Engine.SplineComponent.SetLocationAtSplinePoint
inline void USplineComponent::SetLocationAtSplinePoint(int32_t PointIndex, struct Unknown& InLocation, char CoordinateSpace, char bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetLocationAtSplinePoint");

	struct SetLocationAtSplinePoint_Params {
		int32_t PointIndex;
		struct Unknown& InLocation;
		char CoordinateSpace;
		char bUpdateSpline;
	}; SetLocationAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InLocation = Params.InLocation;

}

// Function Engine.SplineComponent.SetDrawDebug
inline void USplineComponent::SetDrawDebug(char bShow) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetDrawDebug");

	struct SetDrawDebug_Params {
		char bShow;
	}; SetDrawDebug_Params Params;

	Params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.SetDefaultUpVector
inline void USplineComponent::SetDefaultUpVector(struct Unknown& UpVector, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetDefaultUpVector");

	struct SetDefaultUpVector_Params {
		struct Unknown& UpVector;
		char CoordinateSpace;
	}; SetDefaultUpVector_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	UpVector = Params.UpVector;

}

// Function Engine.SplineComponent.SetClosedLoopAtPosition
inline void USplineComponent::SetClosedLoopAtPosition(char bInClosedLoop, float Key, char bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetClosedLoopAtPosition");

	struct SetClosedLoopAtPosition_Params {
		char bInClosedLoop;
		float Key;
		char bUpdateSpline;
	}; SetClosedLoopAtPosition_Params Params;

	Params.bInClosedLoop = bInClosedLoop;
	Params.Key = Key;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.SetClosedLoop
inline void USplineComponent::SetClosedLoop(char bInClosedLoop, char bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetClosedLoop");

	struct SetClosedLoop_Params {
		char bInClosedLoop;
		char bUpdateSpline;
	}; SetClosedLoop_Params Params;

	Params.bInClosedLoop = bInClosedLoop;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.RemoveSplinePoint
inline void USplineComponent::RemoveSplinePoint(int32_t Index, char bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.RemoveSplinePoint");

	struct RemoveSplinePoint_Params {
		int32_t Index;
		char bUpdateSpline;
	}; RemoveSplinePoint_Params Params;

	Params.Index = Index;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.IsClosedLoop
inline char USplineComponent::IsClosedLoop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.IsClosedLoop");

	struct IsClosedLoop_Params {
		
		char ReturnValue;

	}; IsClosedLoop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
inline struct Unknown USplineComponent::GetWorldTangentAtDistanceAlongSpline(float Distance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline");

	struct GetWorldTangentAtDistanceAlongSpline_Params {
		float Distance;
		struct Unknown ReturnValue;

	}; GetWorldTangentAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldRotationAtTime
inline struct Unknown USplineComponent::GetWorldRotationAtTime(float Time, char bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldRotationAtTime");

	struct GetWorldRotationAtTime_Params {
		float Time;
		char bUseConstantVelocity;
		struct Unknown ReturnValue;

	}; GetWorldRotationAtTime_Params Params;

	Params.Time = Time;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
inline struct Unknown USplineComponent::GetWorldRotationAtDistanceAlongSpline(float Distance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline");

	struct GetWorldRotationAtDistanceAlongSpline_Params {
		float Distance;
		struct Unknown ReturnValue;

	}; GetWorldRotationAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldLocationAtTime
inline struct Unknown USplineComponent::GetWorldLocationAtTime(float Time, char bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldLocationAtTime");

	struct GetWorldLocationAtTime_Params {
		float Time;
		char bUseConstantVelocity;
		struct Unknown ReturnValue;

	}; GetWorldLocationAtTime_Params Params;

	Params.Time = Time;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldLocationAtSplinePoint
inline struct Unknown USplineComponent::GetWorldLocationAtSplinePoint(int32_t PointIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldLocationAtSplinePoint");

	struct GetWorldLocationAtSplinePoint_Params {
		int32_t PointIndex;
		struct Unknown ReturnValue;

	}; GetWorldLocationAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
inline struct Unknown USplineComponent::GetWorldLocationAtDistanceAlongSpline(float Distance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline");

	struct GetWorldLocationAtDistanceAlongSpline_Params {
		float Distance;
		struct Unknown ReturnValue;

	}; GetWorldLocationAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldDirectionAtTime
inline struct Unknown USplineComponent::GetWorldDirectionAtTime(float Time, char bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldDirectionAtTime");

	struct GetWorldDirectionAtTime_Params {
		float Time;
		char bUseConstantVelocity;
		struct Unknown ReturnValue;

	}; GetWorldDirectionAtTime_Params Params;

	Params.Time = Time;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
inline struct Unknown USplineComponent::GetWorldDirectionAtDistanceAlongSpline(float Distance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline");

	struct GetWorldDirectionAtDistanceAlongSpline_Params {
		float Distance;
		struct Unknown ReturnValue;

	}; GetWorldDirectionAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint
inline struct Unknown USplineComponent::GetVectorPropertyAtSplinePoint(int32_t Index, struct FName PropertyName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint");

	struct GetVectorPropertyAtSplinePoint_Params {
		int32_t Index;
		struct FName PropertyName;
		struct Unknown ReturnValue;

	}; GetVectorPropertyAtSplinePoint_Params Params;

	Params.Index = Index;
	Params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey
inline struct Unknown USplineComponent::GetVectorPropertyAtSplineInputKey(float InKey, struct FName PropertyName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey");

	struct GetVectorPropertyAtSplineInputKey_Params {
		float InKey;
		struct FName PropertyName;
		struct Unknown ReturnValue;

	}; GetVectorPropertyAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetUpVectorAtTime
inline struct Unknown USplineComponent::GetUpVectorAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetUpVectorAtTime");

	struct GetUpVectorAtTime_Params {
		float Time;
		char CoordinateSpace;
		char bUseConstantVelocity;
		struct Unknown ReturnValue;

	}; GetUpVectorAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetUpVectorAtSplinePoint
inline struct Unknown USplineComponent::GetUpVectorAtSplinePoint(int32_t PointIndex, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetUpVectorAtSplinePoint");

	struct GetUpVectorAtSplinePoint_Params {
		int32_t PointIndex;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetUpVectorAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetUpVectorAtSplineInputKey
inline struct Unknown USplineComponent::GetUpVectorAtSplineInputKey(float InKey, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetUpVectorAtSplineInputKey");

	struct GetUpVectorAtSplineInputKey_Params {
		float InKey;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetUpVectorAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
inline struct Unknown USplineComponent::GetUpVectorAtDistanceAlongSpline(float Distance, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline");

	struct GetUpVectorAtDistanceAlongSpline_Params {
		float Distance;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetUpVectorAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTransformAtTime
inline struct Unknown USplineComponent::GetTransformAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity, char bUseScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTransformAtTime");

	struct GetTransformAtTime_Params {
		float Time;
		char CoordinateSpace;
		char bUseConstantVelocity;
		char bUseScale;
		struct Unknown ReturnValue;

	}; GetTransformAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;
	Params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTransformAtSplinePoint
inline struct Unknown USplineComponent::GetTransformAtSplinePoint(int32_t PointIndex, char CoordinateSpace, char bUseScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTransformAtSplinePoint");

	struct GetTransformAtSplinePoint_Params {
		int32_t PointIndex;
		char CoordinateSpace;
		char bUseScale;
		struct Unknown ReturnValue;

	}; GetTransformAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTransformAtSplineInputKey
inline struct Unknown USplineComponent::GetTransformAtSplineInputKey(float InKey, char CoordinateSpace, char bUseScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTransformAtSplineInputKey");

	struct GetTransformAtSplineInputKey_Params {
		float InKey;
		char CoordinateSpace;
		char bUseScale;
		struct Unknown ReturnValue;

	}; GetTransformAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline
inline struct Unknown USplineComponent::GetTransformAtDistanceAlongSpline(float Distance, char CoordinateSpace, char bUseScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline");

	struct GetTransformAtDistanceAlongSpline_Params {
		float Distance;
		char CoordinateSpace;
		char bUseScale;
		struct Unknown ReturnValue;

	}; GetTransformAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTangentAtTime
inline struct Unknown USplineComponent::GetTangentAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTangentAtTime");

	struct GetTangentAtTime_Params {
		float Time;
		char CoordinateSpace;
		char bUseConstantVelocity;
		struct Unknown ReturnValue;

	}; GetTangentAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTangentAtSplinePoint
inline struct Unknown USplineComponent::GetTangentAtSplinePoint(int32_t PointIndex, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTangentAtSplinePoint");

	struct GetTangentAtSplinePoint_Params {
		int32_t PointIndex;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetTangentAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTangentAtSplineInputKey
inline struct Unknown USplineComponent::GetTangentAtSplineInputKey(float InKey, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTangentAtSplineInputKey");

	struct GetTangentAtSplineInputKey_Params {
		float InKey;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetTangentAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline
inline struct Unknown USplineComponent::GetTangentAtDistanceAlongSpline(float Distance, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline");

	struct GetTangentAtDistanceAlongSpline_Params {
		float Distance;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetTangentAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetSplinePointType
inline char USplineComponent::GetSplinePointType(int32_t PointIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetSplinePointType");

	struct GetSplinePointType_Params {
		int32_t PointIndex;
		char ReturnValue;

	}; GetSplinePointType_Params Params;

	Params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetSplineLength
inline float USplineComponent::GetSplineLength() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetSplineLength");

	struct GetSplineLength_Params {
		
		float ReturnValue;

	}; GetSplineLength_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetScaleAtTime
inline struct Unknown USplineComponent::GetScaleAtTime(float Time, char bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetScaleAtTime");

	struct GetScaleAtTime_Params {
		float Time;
		char bUseConstantVelocity;
		struct Unknown ReturnValue;

	}; GetScaleAtTime_Params Params;

	Params.Time = Time;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetScaleAtSplinePoint
inline struct Unknown USplineComponent::GetScaleAtSplinePoint(int32_t PointIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetScaleAtSplinePoint");

	struct GetScaleAtSplinePoint_Params {
		int32_t PointIndex;
		struct Unknown ReturnValue;

	}; GetScaleAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetScaleAtSplineInputKey
inline struct Unknown USplineComponent::GetScaleAtSplineInputKey(float InKey) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetScaleAtSplineInputKey");

	struct GetScaleAtSplineInputKey_Params {
		float InKey;
		struct Unknown ReturnValue;

	}; GetScaleAtSplineInputKey_Params Params;

	Params.InKey = InKey;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline
inline struct Unknown USplineComponent::GetScaleAtDistanceAlongSpline(float Distance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline");

	struct GetScaleAtDistanceAlongSpline_Params {
		float Distance;
		struct Unknown ReturnValue;

	}; GetScaleAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRotationAtTime
inline struct Unknown USplineComponent::GetRotationAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRotationAtTime");

	struct GetRotationAtTime_Params {
		float Time;
		char CoordinateSpace;
		char bUseConstantVelocity;
		struct Unknown ReturnValue;

	}; GetRotationAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRotationAtSplinePoint
inline struct Unknown USplineComponent::GetRotationAtSplinePoint(int32_t PointIndex, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRotationAtSplinePoint");

	struct GetRotationAtSplinePoint_Params {
		int32_t PointIndex;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetRotationAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRotationAtSplineInputKey
inline struct Unknown USplineComponent::GetRotationAtSplineInputKey(float InKey, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRotationAtSplineInputKey");

	struct GetRotationAtSplineInputKey_Params {
		float InKey;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetRotationAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline
inline struct Unknown USplineComponent::GetRotationAtDistanceAlongSpline(float Distance, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline");

	struct GetRotationAtDistanceAlongSpline_Params {
		float Distance;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetRotationAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRollAtTime
inline float USplineComponent::GetRollAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRollAtTime");

	struct GetRollAtTime_Params {
		float Time;
		char CoordinateSpace;
		char bUseConstantVelocity;
		float ReturnValue;

	}; GetRollAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRollAtSplinePoint
inline float USplineComponent::GetRollAtSplinePoint(int32_t PointIndex, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRollAtSplinePoint");

	struct GetRollAtSplinePoint_Params {
		int32_t PointIndex;
		char CoordinateSpace;
		float ReturnValue;

	}; GetRollAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRollAtSplineInputKey
inline float USplineComponent::GetRollAtSplineInputKey(float InKey, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRollAtSplineInputKey");

	struct GetRollAtSplineInputKey_Params {
		float InKey;
		char CoordinateSpace;
		float ReturnValue;

	}; GetRollAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRollAtDistanceAlongSpline
inline float USplineComponent::GetRollAtDistanceAlongSpline(float Distance, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRollAtDistanceAlongSpline");

	struct GetRollAtDistanceAlongSpline_Params {
		float Distance;
		char CoordinateSpace;
		float ReturnValue;

	}; GetRollAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRightVectorAtTime
inline struct Unknown USplineComponent::GetRightVectorAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRightVectorAtTime");

	struct GetRightVectorAtTime_Params {
		float Time;
		char CoordinateSpace;
		char bUseConstantVelocity;
		struct Unknown ReturnValue;

	}; GetRightVectorAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRightVectorAtSplinePoint
inline struct Unknown USplineComponent::GetRightVectorAtSplinePoint(int32_t PointIndex, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRightVectorAtSplinePoint");

	struct GetRightVectorAtSplinePoint_Params {
		int32_t PointIndex;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetRightVectorAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRightVectorAtSplineInputKey
inline struct Unknown USplineComponent::GetRightVectorAtSplineInputKey(float InKey, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRightVectorAtSplineInputKey");

	struct GetRightVectorAtSplineInputKey_Params {
		float InKey;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetRightVectorAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
inline struct Unknown USplineComponent::GetRightVectorAtDistanceAlongSpline(float Distance, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline");

	struct GetRightVectorAtDistanceAlongSpline_Params {
		float Distance;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetRightVectorAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetNumberOfSplineSegments
inline int32_t USplineComponent::GetNumberOfSplineSegments() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetNumberOfSplineSegments");

	struct GetNumberOfSplineSegments_Params {
		
		int32_t ReturnValue;

	}; GetNumberOfSplineSegments_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetNumberOfSplinePoints
inline int32_t USplineComponent::GetNumberOfSplinePoints() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetNumberOfSplinePoints");

	struct GetNumberOfSplinePoints_Params {
		
		int32_t ReturnValue;

	}; GetNumberOfSplinePoints_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetLocationAtTime
inline struct Unknown USplineComponent::GetLocationAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAtTime");

	struct GetLocationAtTime_Params {
		float Time;
		char CoordinateSpace;
		char bUseConstantVelocity;
		struct Unknown ReturnValue;

	}; GetLocationAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetLocationAtSplinePoint
inline struct Unknown USplineComponent::GetLocationAtSplinePoint(int32_t PointIndex, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAtSplinePoint");

	struct GetLocationAtSplinePoint_Params {
		int32_t PointIndex;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetLocationAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetLocationAtSplineInputKey
inline struct Unknown USplineComponent::GetLocationAtSplineInputKey(float InKey, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAtSplineInputKey");

	struct GetLocationAtSplineInputKey_Params {
		float InKey;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetLocationAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline
inline struct Unknown USplineComponent::GetLocationAtDistanceAlongSpline(float Distance, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline");

	struct GetLocationAtDistanceAlongSpline_Params {
		float Distance;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetLocationAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
inline void USplineComponent::GetLocationAndTangentAtSplinePoint(int32_t PointIndex, struct Unknown& Location, struct Unknown& Tangent, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint");

	struct GetLocationAndTangentAtSplinePoint_Params {
		int32_t PointIndex;
		struct Unknown& Location;
		struct Unknown& Tangent;
		char CoordinateSpace;
	}; GetLocationAndTangentAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Location = Params.Location;
	Tangent = Params.Tangent;

}

// Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
inline void USplineComponent::GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, struct Unknown& LocalLocation, struct Unknown& LocalTangent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint");

	struct GetLocalLocationAndTangentAtSplinePoint_Params {
		int32_t PointIndex;
		struct Unknown& LocalLocation;
		struct Unknown& LocalTangent;
	}; GetLocalLocationAndTangentAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	LocalLocation = Params.LocalLocation;
	LocalTangent = Params.LocalTangent;

}

// Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint
inline struct Unknown USplineComponent::GetLeaveTangentAtSplinePoint(int32_t PointIndex, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint");

	struct GetLeaveTangentAtSplinePoint_Params {
		int32_t PointIndex;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetLeaveTangentAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
inline float USplineComponent::GetInputKeyAtDistanceAlongSpline(float Distance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline");

	struct GetInputKeyAtDistanceAlongSpline_Params {
		float Distance;
		float ReturnValue;

	}; GetInputKeyAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint
inline float USplineComponent::GetFloatPropertyAtSplinePoint(int32_t Index, struct FName PropertyName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint");

	struct GetFloatPropertyAtSplinePoint_Params {
		int32_t Index;
		struct FName PropertyName;
		float ReturnValue;

	}; GetFloatPropertyAtSplinePoint_Params Params;

	Params.Index = Index;
	Params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey
inline float USplineComponent::GetFloatPropertyAtSplineInputKey(float InKey, struct FName PropertyName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey");

	struct GetFloatPropertyAtSplineInputKey_Params {
		float InKey;
		struct FName PropertyName;
		float ReturnValue;

	}; GetFloatPropertyAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
inline float USplineComponent::GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint");

	struct GetDistanceAlongSplineAtSplinePoint_Params {
		int32_t PointIndex;
		float ReturnValue;

	}; GetDistanceAlongSplineAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetDirectionAtTime
inline struct Unknown USplineComponent::GetDirectionAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDirectionAtTime");

	struct GetDirectionAtTime_Params {
		float Time;
		char CoordinateSpace;
		char bUseConstantVelocity;
		struct Unknown ReturnValue;

	}; GetDirectionAtTime_Params Params;

	Params.Time = Time;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetDirectionAtSplinePoint
inline struct Unknown USplineComponent::GetDirectionAtSplinePoint(int32_t PointIndex, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDirectionAtSplinePoint");

	struct GetDirectionAtSplinePoint_Params {
		int32_t PointIndex;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetDirectionAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetDirectionAtSplineInputKey
inline struct Unknown USplineComponent::GetDirectionAtSplineInputKey(float InKey, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDirectionAtSplineInputKey");

	struct GetDirectionAtSplineInputKey_Params {
		float InKey;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetDirectionAtSplineInputKey_Params Params;

	Params.InKey = InKey;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
inline struct Unknown USplineComponent::GetDirectionAtDistanceAlongSpline(float Distance, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline");

	struct GetDirectionAtDistanceAlongSpline_Params {
		float Distance;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetDirectionAtDistanceAlongSpline_Params Params;

	Params.Distance = Distance;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetDefaultUpVector
inline struct Unknown USplineComponent::GetDefaultUpVector(char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDefaultUpVector");

	struct GetDefaultUpVector_Params {
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetDefaultUpVector_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.GetArriveTangentAtSplinePoint
inline struct Unknown USplineComponent::GetArriveTangentAtSplinePoint(int32_t PointIndex, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetArriveTangentAtSplinePoint");

	struct GetArriveTangentAtSplinePoint_Params {
		int32_t PointIndex;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; GetArriveTangentAtSplinePoint_Params Params;

	Params.PointIndex = PointIndex;
	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation
inline struct Unknown USplineComponent::FindUpVectorClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation");

	struct FindUpVectorClosestToWorldLocation_Params {
		struct Unknown& WorldLocation;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; FindUpVectorClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindTransformClosestToWorldLocation
inline struct Unknown USplineComponent::FindTransformClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace, char bUseScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindTransformClosestToWorldLocation");

	struct FindTransformClosestToWorldLocation_Params {
		struct Unknown& WorldLocation;
		char CoordinateSpace;
		char bUseScale;
		struct Unknown ReturnValue;

	}; FindTransformClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;
	Params.bUseScale = bUseScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindTangentClosestToWorldLocation
inline struct Unknown USplineComponent::FindTangentClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindTangentClosestToWorldLocation");

	struct FindTangentClosestToWorldLocation_Params {
		struct Unknown& WorldLocation;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; FindTangentClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindScaleClosestToWorldLocation
inline struct Unknown USplineComponent::FindScaleClosestToWorldLocation(struct Unknown& WorldLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindScaleClosestToWorldLocation");

	struct FindScaleClosestToWorldLocation_Params {
		struct Unknown& WorldLocation;
		struct Unknown ReturnValue;

	}; FindScaleClosestToWorldLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindRotationClosestToWorldLocation
inline struct Unknown USplineComponent::FindRotationClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindRotationClosestToWorldLocation");

	struct FindRotationClosestToWorldLocation_Params {
		struct Unknown& WorldLocation;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; FindRotationClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindRollClosestToWorldLocation
inline float USplineComponent::FindRollClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindRollClosestToWorldLocation");

	struct FindRollClosestToWorldLocation_Params {
		struct Unknown& WorldLocation;
		char CoordinateSpace;
		float ReturnValue;

	}; FindRollClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation
inline struct Unknown USplineComponent::FindRightVectorClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation");

	struct FindRightVectorClosestToWorldLocation_Params {
		struct Unknown& WorldLocation;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; FindRightVectorClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindLocationClosestToWorldLocation
inline struct Unknown USplineComponent::FindLocationClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindLocationClosestToWorldLocation");

	struct FindLocationClosestToWorldLocation_Params {
		struct Unknown& WorldLocation;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; FindLocationClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation
inline float USplineComponent::FindInputKeyClosestToWorldLocation(struct Unknown& WorldLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation");

	struct FindInputKeyClosestToWorldLocation_Params {
		struct Unknown& WorldLocation;
		float ReturnValue;

	}; FindInputKeyClosestToWorldLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.FindDirectionClosestToWorldLocation
inline struct Unknown USplineComponent::FindDirectionClosestToWorldLocation(struct Unknown& WorldLocation, char CoordinateSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindDirectionClosestToWorldLocation");

	struct FindDirectionClosestToWorldLocation_Params {
		struct Unknown& WorldLocation;
		char CoordinateSpace;
		struct Unknown ReturnValue;

	}; FindDirectionClosestToWorldLocation_Params Params;

	Params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;


	return params.ReturnValue;
}

// Function Engine.SplineComponent.ClearSplinePoints
inline void USplineComponent::ClearSplinePoints(char bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.ClearSplinePoints");

	struct ClearSplinePoints_Params {
		char bUpdateSpline;
	}; ClearSplinePoints_Params Params;

	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineComponent.AddSplineWorldPoint
inline void USplineComponent::AddSplineWorldPoint(struct Unknown& Position) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddSplineWorldPoint");

	struct AddSplineWorldPoint_Params {
		struct Unknown& Position;
	}; AddSplineWorldPoint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Position = Params.Position;

}

// Function Engine.SplineComponent.AddSplinePointAtIndex
inline void USplineComponent::AddSplinePointAtIndex(struct Unknown& Position, int32_t Index, char CoordinateSpace, char bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddSplinePointAtIndex");

	struct AddSplinePointAtIndex_Params {
		struct Unknown& Position;
		int32_t Index;
		char CoordinateSpace;
		char bUpdateSpline;
	}; AddSplinePointAtIndex_Params Params;

	Params.Index = Index;
	Params.CoordinateSpace = CoordinateSpace;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Position = Params.Position;

}

// Function Engine.SplineComponent.AddSplinePoint
inline void USplineComponent::AddSplinePoint(struct Unknown& Position, char CoordinateSpace, char bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddSplinePoint");

	struct AddSplinePoint_Params {
		struct Unknown& Position;
		char CoordinateSpace;
		char bUpdateSpline;
	}; AddSplinePoint_Params Params;

	Params.CoordinateSpace = CoordinateSpace;
	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Position = Params.Position;

}

// Function Engine.SplineComponent.AddSplineLocalPoint
inline void USplineComponent::AddSplineLocalPoint(struct Unknown& Position) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddSplineLocalPoint");

	struct AddSplineLocalPoint_Params {
		struct Unknown& Position;
	}; AddSplineLocalPoint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Position = Params.Position;

}

// Function Engine.SplineComponent.AddPoints
inline void USplineComponent::AddPoints(struct TArray<Unknown>& Points, char bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddPoints");

	struct AddPoints_Params {
		struct TArray<Unknown>& Points;
		char bUpdateSpline;
	}; AddPoints_Params Params;

	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Points = Params.Points;

}

// Function Engine.SplineComponent.AddPoint
inline void USplineComponent::AddPoint(struct Unknown& Point, char bUpdateSpline) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddPoint");

	struct AddPoint_Params {
		struct Unknown& Point;
		char bUpdateSpline;
	}; AddPoint_Params Params;

	Params.bUpdateSpline = bUpdateSpline;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Point = Params.Point;

}

// Function Engine.AudioComponent.StopDelayed
inline void UAudioComponent::StopDelayed(float DelayTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.StopDelayed");

	struct StopDelayed_Params {
		float DelayTime;
	}; StopDelayed_Params Params;

	Params.DelayTime = DelayTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.Stop
inline void UAudioComponent::Stop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Stop");

	struct Stop_Params {
		
	}; Stop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetWaveParameter
inline void UAudioComponent::SetWaveParameter(struct FName InName, struct Unknown InWave) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetWaveParameter");

	struct SetWaveParameter_Params {
		struct FName InName;
		struct Unknown InWave;
	}; SetWaveParameter_Params Params;

	Params.InName = InName;
	Params.InWave = InWave;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetVolumeMultiplier
inline void UAudioComponent::SetVolumeMultiplier(float NewVolumeMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetVolumeMultiplier");

	struct SetVolumeMultiplier_Params {
		float NewVolumeMultiplier;
	}; SetVolumeMultiplier_Params Params;

	Params.NewVolumeMultiplier = NewVolumeMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetUISound
inline void UAudioComponent::SetUISound(char bInUISound) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetUISound");

	struct SetUISound_Params {
		char bInUISound;
	}; SetUISound_Params Params;

	Params.bInUISound = bInUISound;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetSubmixSend
inline void UAudioComponent::SetSubmixSend(struct Unknown Submix, float SendLevel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetSubmixSend");

	struct SetSubmixSend_Params {
		struct Unknown Submix;
		float SendLevel;
	}; SetSubmixSend_Params Params;

	Params.Submix = Submix;
	Params.SendLevel = SendLevel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetSourceBusSendPreEffect
inline void UAudioComponent::SetSourceBusSendPreEffect(struct Unknown SoundSourceBus, float SourceBusSendLevel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetSourceBusSendPreEffect");

	struct SetSourceBusSendPreEffect_Params {
		struct Unknown SoundSourceBus;
		float SourceBusSendLevel;
	}; SetSourceBusSendPreEffect_Params Params;

	Params.SoundSourceBus = SoundSourceBus;
	Params.SourceBusSendLevel = SourceBusSendLevel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetSourceBusSendPostEffect
inline void UAudioComponent::SetSourceBusSendPostEffect(struct Unknown SoundSourceBus, float SourceBusSendLevel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetSourceBusSendPostEffect");

	struct SetSourceBusSendPostEffect_Params {
		struct Unknown SoundSourceBus;
		float SourceBusSendLevel;
	}; SetSourceBusSendPostEffect_Params Params;

	Params.SoundSourceBus = SoundSourceBus;
	Params.SourceBusSendLevel = SourceBusSendLevel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetSound
inline void UAudioComponent::SetSound(struct Unknown NewSound) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetSound");

	struct SetSound_Params {
		struct Unknown NewSound;
	}; SetSound_Params Params;

	Params.NewSound = NewSound;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetPitchMultiplier
inline void UAudioComponent::SetPitchMultiplier(float NewPitchMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetPitchMultiplier");

	struct SetPitchMultiplier_Params {
		float NewPitchMultiplier;
	}; SetPitchMultiplier_Params Params;

	Params.NewPitchMultiplier = NewPitchMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetPaused
inline void UAudioComponent::SetPaused(char bPause) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetPaused");

	struct SetPaused_Params {
		char bPause;
	}; SetPaused_Params Params;

	Params.bPause = bPause;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetLowPassFilterFrequency
inline void UAudioComponent::SetLowPassFilterFrequency(float InLowPassFilterFrequency) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetLowPassFilterFrequency");

	struct SetLowPassFilterFrequency_Params {
		float InLowPassFilterFrequency;
	}; SetLowPassFilterFrequency_Params Params;

	Params.InLowPassFilterFrequency = InLowPassFilterFrequency;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetLowPassFilterEnabled
inline void UAudioComponent::SetLowPassFilterEnabled(char InLowPassFilterEnabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetLowPassFilterEnabled");

	struct SetLowPassFilterEnabled_Params {
		char InLowPassFilterEnabled;
	}; SetLowPassFilterEnabled_Params Params;

	Params.InLowPassFilterEnabled = InLowPassFilterEnabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetIntParameter
inline void UAudioComponent::SetIntParameter(struct FName InName, int32_t inInt) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetIntParameter");

	struct SetIntParameter_Params {
		struct FName InName;
		int32_t inInt;
	}; SetIntParameter_Params Params;

	Params.InName = InName;
	Params.inInt = inInt;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetFloatParameter
inline void UAudioComponent::SetFloatParameter(struct FName InName, float InFloat) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetFloatParameter");

	struct SetFloatParameter_Params {
		struct FName InName;
		float InFloat;
	}; SetFloatParameter_Params Params;

	Params.InName = InName;
	Params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.SetBoolParameter
inline void UAudioComponent::SetBoolParameter(struct FName InName, char InBool) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetBoolParameter");

	struct SetBoolParameter_Params {
		struct FName InName;
		char InBool;
	}; SetBoolParameter_Params Params;

	Params.InName = InName;
	Params.InBool = InBool;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.Play
inline void UAudioComponent::Play(float StartTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Play");

	struct Play_Params {
		float StartTime;
	}; Play_Params Params;

	Params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.IsPlaying
inline char UAudioComponent::IsPlaying() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.IsPlaying");

	struct IsPlaying_Params {
		
		char ReturnValue;

	}; IsPlaying_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AudioComponent.HasCookedFFTData
inline char UAudioComponent::HasCookedFFTData() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.HasCookedFFTData");

	struct HasCookedFFTData_Params {
		
		char ReturnValue;

	}; HasCookedFFTData_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData
inline char UAudioComponent::HasCookedAmplitudeEnvelopeData() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData");

	struct HasCookedAmplitudeEnvelopeData_Params {
		
		char ReturnValue;

	}; HasCookedAmplitudeEnvelopeData_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AudioComponent.GetPlayState
inline enum class Unknow UAudioComponent::GetPlayState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.GetPlayState");

	struct GetPlayState_Params {
		
		enum class Unknow ReturnValue;

	}; GetPlayState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds
inline char UAudioComponent::GetCookedFFTDataForAllPlayingSounds(struct TArray<Unknown>& OutSoundWaveSpectralData) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds");

	struct GetCookedFFTDataForAllPlayingSounds_Params {
		struct TArray<Unknown>& OutSoundWaveSpectralData;
		char ReturnValue;

	}; GetCookedFFTDataForAllPlayingSounds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutSoundWaveSpectralData = Params.OutSoundWaveSpectralData;


	return params.ReturnValue;
}

// Function Engine.AudioComponent.GetCookedFFTData
inline char UAudioComponent::GetCookedFFTData(struct TArray<Unknown>& FrequenciesToGet, struct TArray<Unknown>& OutSoundWaveSpectralData) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.GetCookedFFTData");

	struct GetCookedFFTData_Params {
		struct TArray<Unknown>& FrequenciesToGet;
		struct TArray<Unknown>& OutSoundWaveSpectralData;
		char ReturnValue;

	}; GetCookedFFTData_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	FrequenciesToGet = Params.FrequenciesToGet;
	OutSoundWaveSpectralData = Params.OutSoundWaveSpectralData;


	return params.ReturnValue;
}

// Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds
inline char UAudioComponent::GetCookedEnvelopeDataForAllPlayingSounds(struct TArray<Unknown>& OutEnvelopeData) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds");

	struct GetCookedEnvelopeDataForAllPlayingSounds_Params {
		struct TArray<Unknown>& OutEnvelopeData;
		char ReturnValue;

	}; GetCookedEnvelopeDataForAllPlayingSounds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutEnvelopeData = Params.OutEnvelopeData;


	return params.ReturnValue;
}

// Function Engine.AudioComponent.GetCookedEnvelopeData
inline char UAudioComponent::GetCookedEnvelopeData(float& OutEnvelopeData) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.GetCookedEnvelopeData");

	struct GetCookedEnvelopeData_Params {
		float& OutEnvelopeData;
		char ReturnValue;

	}; GetCookedEnvelopeData_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutEnvelopeData = Params.OutEnvelopeData;


	return params.ReturnValue;
}

// Function Engine.AudioComponent.FadeOut
inline void UAudioComponent::FadeOut(float FadeOutDuration, float FadeVolumeLevel, enum class Unknow FadeCurve) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeOut");

	struct FadeOut_Params {
		float FadeOutDuration;
		float FadeVolumeLevel;
		enum class Unknow FadeCurve;
	}; FadeOut_Params Params;

	Params.FadeOutDuration = FadeOutDuration;
	Params.FadeVolumeLevel = FadeVolumeLevel;
	Params.FadeCurve = FadeCurve;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.FadeIn
inline void UAudioComponent::FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, enum class Unknow FadeCurve) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeIn");

	struct FadeIn_Params {
		float FadeInDuration;
		float FadeVolumeLevel;
		float StartTime;
		enum class Unknow FadeCurve;
	}; FadeIn_Params Params;

	Params.FadeInDuration = FadeInDuration;
	Params.FadeVolumeLevel = FadeVolumeLevel;
	Params.StartTime = StartTime;
	Params.FadeCurve = FadeCurve;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply
inline char UAudioComponent::BP_GetAttenuationSettingsToApply(struct Unknown& OutAttenuationSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply");

	struct BP_GetAttenuationSettingsToApply_Params {
		struct Unknown& OutAttenuationSettings;
		char ReturnValue;

	}; BP_GetAttenuationSettingsToApply_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutAttenuationSettings = Params.OutAttenuationSettings;


	return params.ReturnValue;
}

// Function Engine.AudioComponent.AdjustVolume
inline void UAudioComponent::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, enum class Unknow FadeCurve) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.AdjustVolume");

	struct AdjustVolume_Params {
		float AdjustVolumeDuration;
		float AdjustVolumeLevel;
		enum class Unknow FadeCurve;
	}; AdjustVolume_Params Params;

	Params.AdjustVolumeDuration = AdjustVolumeDuration;
	Params.AdjustVolumeLevel = AdjustVolumeLevel;
	Params.FadeCurve = FadeCurve;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioComponent.AdjustAttenuation
inline void UAudioComponent::AdjustAttenuation(struct Unknown& InAttenuationSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.AdjustAttenuation");

	struct AdjustAttenuation_Params {
		struct Unknown& InAttenuationSettings;
	}; AdjustAttenuation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InAttenuationSettings = Params.InAttenuationSettings;

}

// Function Engine.GameModeBase.StartPlay
inline void AGameModeBase::StartPlay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.StartPlay");

	struct StartPlay_Params {
		
	}; StartPlay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.SpawnDefaultPawnFor
inline struct Unknown AGameModeBase::SpawnDefaultPawnFor(struct Unknown NewPlayer, struct Unknown StartSpot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.SpawnDefaultPawnFor");

	struct SpawnDefaultPawnFor_Params {
		struct Unknown NewPlayer;
		struct Unknown StartSpot;
		struct Unknown ReturnValue;

	}; SpawnDefaultPawnFor_Params Params;

	Params.NewPlayer = NewPlayer;
	Params.StartSpot = StartSpot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.SpawnDefaultPawnAtTransform
inline struct Unknown AGameModeBase::SpawnDefaultPawnAtTransform(struct Unknown NewPlayer, struct Unknown& SpawnTransform) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.SpawnDefaultPawnAtTransform");

	struct SpawnDefaultPawnAtTransform_Params {
		struct Unknown NewPlayer;
		struct Unknown& SpawnTransform;
		struct Unknown ReturnValue;

	}; SpawnDefaultPawnAtTransform_Params Params;

	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SpawnTransform = Params.SpawnTransform;


	return params.ReturnValue;
}

// Function Engine.GameModeBase.ShouldReset
inline char AGameModeBase::ShouldReset(struct Unknown ActorToReset) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ShouldReset");

	struct ShouldReset_Params {
		struct Unknown ActorToReset;
		char ReturnValue;

	}; ShouldReset_Params Params;

	Params.ActorToReset = ActorToReset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.ReturnToMainMenuHost
inline void AGameModeBase::ReturnToMainMenuHost() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ReturnToMainMenuHost");

	struct ReturnToMainMenuHost_Params {
		
	}; ReturnToMainMenuHost_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.RestartPlayerAtTransform
inline void AGameModeBase::RestartPlayerAtTransform(struct Unknown NewPlayer, struct Unknown& SpawnTransform) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.RestartPlayerAtTransform");

	struct RestartPlayerAtTransform_Params {
		struct Unknown NewPlayer;
		struct Unknown& SpawnTransform;
	}; RestartPlayerAtTransform_Params Params;

	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SpawnTransform = Params.SpawnTransform;

}

// Function Engine.GameModeBase.RestartPlayerAtPlayerStart
inline void AGameModeBase::RestartPlayerAtPlayerStart(struct Unknown NewPlayer, struct Unknown StartSpot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.RestartPlayerAtPlayerStart");

	struct RestartPlayerAtPlayerStart_Params {
		struct Unknown NewPlayer;
		struct Unknown StartSpot;
	}; RestartPlayerAtPlayerStart_Params Params;

	Params.NewPlayer = NewPlayer;
	Params.StartSpot = StartSpot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.RestartPlayer
inline void AGameModeBase::RestartPlayer(struct Unknown NewPlayer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.RestartPlayer");

	struct RestartPlayer_Params {
		struct Unknown NewPlayer;
	}; RestartPlayer_Params Params;

	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.ResetLevel
inline void AGameModeBase::ResetLevel() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ResetLevel");

	struct ResetLevel_Params {
		
	}; ResetLevel_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.PlayerCanRestart
inline char AGameModeBase::PlayerCanRestart(struct Unknown Player) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.PlayerCanRestart");

	struct PlayerCanRestart_Params {
		struct Unknown Player;
		char ReturnValue;

	}; PlayerCanRestart_Params Params;

	Params.Player = Player;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.MustSpectate
inline char AGameModeBase::MustSpectate(struct Unknown NewPlayerController) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.MustSpectate");

	struct MustSpectate_Params {
		struct Unknown NewPlayerController;
		char ReturnValue;

	}; MustSpectate_Params Params;

	Params.NewPlayerController = NewPlayerController;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.K2_PostLogin
inline void AGameModeBase::K2_PostLogin(struct Unknown NewPlayer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_PostLogin");

	struct K2_PostLogin_Params {
		struct Unknown NewPlayer;
	}; K2_PostLogin_Params Params;

	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.K2_OnSwapPlayerControllers
inline void AGameModeBase::K2_OnSwapPlayerControllers(struct Unknown OldPC, struct Unknown NewPC) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_OnSwapPlayerControllers");

	struct K2_OnSwapPlayerControllers_Params {
		struct Unknown OldPC;
		struct Unknown NewPC;
	}; K2_OnSwapPlayerControllers_Params Params;

	Params.OldPC = OldPC;
	Params.NewPC = NewPC;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.K2_OnRestartPlayer
inline void AGameModeBase::K2_OnRestartPlayer(struct Unknown NewPlayer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_OnRestartPlayer");

	struct K2_OnRestartPlayer_Params {
		struct Unknown NewPlayer;
	}; K2_OnRestartPlayer_Params Params;

	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.K2_OnLogout
inline void AGameModeBase::K2_OnLogout(struct Unknown ExitingController) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_OnLogout");

	struct K2_OnLogout_Params {
		struct Unknown ExitingController;
	}; K2_OnLogout_Params Params;

	Params.ExitingController = ExitingController;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.K2_OnChangeName
inline void AGameModeBase::K2_OnChangeName(struct Unknown Other, struct FString NewName, char bNameChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_OnChangeName");

	struct K2_OnChangeName_Params {
		struct Unknown Other;
		struct FString NewName;
		char bNameChange;
	}; K2_OnChangeName_Params Params;

	Params.Other = Other;
	Params.NewName = NewName;
	Params.bNameChange = bNameChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.K2_FindPlayerStart
inline struct Unknown AGameModeBase::K2_FindPlayerStart(struct Unknown Player, struct FString IncomingName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.K2_FindPlayerStart");

	struct K2_FindPlayerStart_Params {
		struct Unknown Player;
		struct FString IncomingName;
		struct Unknown ReturnValue;

	}; K2_FindPlayerStart_Params Params;

	Params.Player = Player;
	Params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.InitStartSpot
inline void AGameModeBase::InitStartSpot(struct Unknown StartSpot, struct Unknown NewPlayer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.InitStartSpot");

	struct InitStartSpot_Params {
		struct Unknown StartSpot;
		struct Unknown NewPlayer;
	}; InitStartSpot_Params Params;

	Params.StartSpot = StartSpot;
	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.InitializeHUDForPlayer
inline void AGameModeBase::InitializeHUDForPlayer(struct Unknown NewPlayer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.InitializeHUDForPlayer");

	struct InitializeHUDForPlayer_Params {
		struct Unknown NewPlayer;
	}; InitializeHUDForPlayer_Params Params;

	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.HasMatchStarted
inline char AGameModeBase::HasMatchStarted() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.HasMatchStarted");

	struct HasMatchStarted_Params {
		
		char ReturnValue;

	}; HasMatchStarted_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.HandleStartingNewPlayer
inline void AGameModeBase::HandleStartingNewPlayer(struct Unknown NewPlayer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.HandleStartingNewPlayer");

	struct HandleStartingNewPlayer_Params {
		struct Unknown NewPlayer;
	}; HandleStartingNewPlayer_Params Params;

	Params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.GetNumSpectators
inline int32_t AGameModeBase::GetNumSpectators() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.GetNumSpectators");

	struct GetNumSpectators_Params {
		
		int32_t ReturnValue;

	}; GetNumSpectators_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.GetNumPlayers
inline int32_t AGameModeBase::GetNumPlayers() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.GetNumPlayers");

	struct GetNumPlayers_Params {
		
		int32_t ReturnValue;

	}; GetNumPlayers_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.GetDefaultPawnClassForController
inline struct Unknown* AGameModeBase::GetDefaultPawnClassForController(struct Unknown InController) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.GetDefaultPawnClassForController");

	struct GetDefaultPawnClassForController_Params {
		struct Unknown InController;
		struct Unknown* ReturnValue;

	}; GetDefaultPawnClassForController_Params Params;

	Params.InController = InController;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.FindPlayerStart
inline struct Unknown AGameModeBase::FindPlayerStart(struct Unknown Player, struct FString IncomingName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.FindPlayerStart");

	struct FindPlayerStart_Params {
		struct Unknown Player;
		struct FString IncomingName;
		struct Unknown ReturnValue;

	}; FindPlayerStart_Params Params;

	Params.Player = Player;
	Params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.ChoosePlayerStart
inline struct Unknown AGameModeBase::ChoosePlayerStart(struct Unknown Player) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ChoosePlayerStart");

	struct ChoosePlayerStart_Params {
		struct Unknown Player;
		struct Unknown ReturnValue;

	}; ChoosePlayerStart_Params Params;

	Params.Player = Player;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameModeBase.ChangeName
inline void AGameModeBase::ChangeName(struct Unknown Controller, struct FString NewName, char bNameChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.ChangeName");

	struct ChangeName_Params {
		struct Unknown Controller;
		struct FString NewName;
		char bNameChange;
	}; ChangeName_Params Params;

	Params.Controller = Controller;
	Params.NewName = NewName;
	Params.bNameChange = bNameChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameModeBase.CanSpectate
inline char AGameModeBase::CanSpectate(struct Unknown Viewer, struct Unknown ViewTarget) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameModeBase.CanSpectate");

	struct CanSpectate_Params {
		struct Unknown Viewer;
		struct Unknown ViewTarget;
		char ReturnValue;

	}; CanSpectate_Params Params;

	Params.Viewer = Viewer;
	Params.ViewTarget = ViewTarget;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameMode.StartMatch
inline void AGameMode::StartMatch() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.StartMatch");

	struct StartMatch_Params {
		
	}; StartMatch_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameMode.SetBandwidthLimit
inline void AGameMode::SetBandwidthLimit(float AsyncIOBandwidthLimit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.SetBandwidthLimit");

	struct SetBandwidthLimit_Params {
		float AsyncIOBandwidthLimit;
	}; SetBandwidthLimit_Params Params;

	Params.AsyncIOBandwidthLimit = AsyncIOBandwidthLimit;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameMode.Say
inline void AGameMode::Say(struct FString Msg) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.Say");

	struct Say_Params {
		struct FString Msg;
	}; Say_Params Params;

	Params.Msg = Msg;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameMode.RestartGame
inline void AGameMode::RestartGame() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.RestartGame");

	struct RestartGame_Params {
		
	}; RestartGame_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameMode.ReadyToStartMatch
inline char AGameMode::ReadyToStartMatch() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.ReadyToStartMatch");

	struct ReadyToStartMatch_Params {
		
		char ReturnValue;

	}; ReadyToStartMatch_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameMode.ReadyToEndMatch
inline char AGameMode::ReadyToEndMatch() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.ReadyToEndMatch");

	struct ReadyToEndMatch_Params {
		
		char ReturnValue;

	}; ReadyToEndMatch_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameMode.K2_OnSetMatchState
inline void AGameMode::K2_OnSetMatchState(struct FName NewState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.K2_OnSetMatchState");

	struct K2_OnSetMatchState_Params {
		struct FName NewState;
	}; K2_OnSetMatchState_Params Params;

	Params.NewState = NewState;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameMode.IsMatchInProgress
inline char AGameMode::IsMatchInProgress() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.IsMatchInProgress");

	struct IsMatchInProgress_Params {
		
		char ReturnValue;

	}; IsMatchInProgress_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameMode.HasMatchEnded
inline char AGameMode::HasMatchEnded() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.HasMatchEnded");

	struct HasMatchEnded_Params {
		
		char ReturnValue;

	}; HasMatchEnded_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameMode.GetMatchState
inline struct FName AGameMode::GetMatchState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.GetMatchState");

	struct GetMatchState_Params {
		
		struct FName ReturnValue;

	}; GetMatchState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameMode.EndMatch
inline void AGameMode::EndMatch() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.EndMatch");

	struct EndMatch_Params {
		
	}; EndMatch_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameMode.AbortMatch
inline void AGameMode::AbortMatch() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.AbortMatch");

	struct AbortMatch_Params {
		
	}; AbortMatch_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameStateBase.OnRep_SpectatorClass
inline void AGameStateBase::OnRep_SpectatorClass() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.OnRep_SpectatorClass");

	struct OnRep_SpectatorClass_Params {
		
	}; OnRep_SpectatorClass_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds
inline void AGameStateBase::OnRep_ReplicatedWorldTimeSeconds() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds");

	struct OnRep_ReplicatedWorldTimeSeconds_Params {
		
	}; OnRep_ReplicatedWorldTimeSeconds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay
inline void AGameStateBase::OnRep_ReplicatedHasBegunPlay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay");

	struct OnRep_ReplicatedHasBegunPlay_Params {
		
	}; OnRep_ReplicatedHasBegunPlay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameStateBase.OnRep_GameModeClass
inline void AGameStateBase::OnRep_GameModeClass() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.OnRep_GameModeClass");

	struct OnRep_GameModeClass_Params {
		
	}; OnRep_GameModeClass_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameStateBase.HasMatchStarted
inline char AGameStateBase::HasMatchStarted() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.HasMatchStarted");

	struct HasMatchStarted_Params {
		
		char ReturnValue;

	}; HasMatchStarted_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameStateBase.HasBegunPlay
inline char AGameStateBase::HasBegunPlay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.HasBegunPlay");

	struct HasBegunPlay_Params {
		
		char ReturnValue;

	}; HasBegunPlay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameStateBase.GetServerWorldTimeSeconds
inline float AGameStateBase::GetServerWorldTimeSeconds() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.GetServerWorldTimeSeconds");

	struct GetServerWorldTimeSeconds_Params {
		
		float ReturnValue;

	}; GetServerWorldTimeSeconds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameStateBase.GetPlayerStartTime
inline float AGameStateBase::GetPlayerStartTime(struct Unknown Controller) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.GetPlayerStartTime");

	struct GetPlayerStartTime_Params {
		struct Unknown Controller;
		float ReturnValue;

	}; GetPlayerStartTime_Params Params;

	Params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameStateBase.GetPlayerRespawnDelay
inline float AGameStateBase::GetPlayerRespawnDelay(struct Unknown Controller) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStateBase.GetPlayerRespawnDelay");

	struct GetPlayerRespawnDelay_Params {
		struct Unknown Controller;
		float ReturnValue;

	}; GetPlayerRespawnDelay_Params Params;

	Params.Controller = Controller;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameState.OnRep_MatchState
inline void AGameState::OnRep_MatchState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameState.OnRep_MatchState");

	struct OnRep_MatchState_Params {
		
	}; OnRep_MatchState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameState.OnRep_ElapsedTime
inline void AGameState::OnRep_ElapsedTime() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameState.OnRep_ElapsedTime");

	struct OnRep_ElapsedTime_Params {
		
	}; OnRep_ElapsedTime_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.UnPossess
inline void AController::UnPossess() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.UnPossess");

	struct UnPossess_Params {
		
	}; UnPossess_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.StopMovement
inline void AController::StopMovement() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopMovement");

	struct StopMovement_Params {
		
	}; StopMovement_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.SetInitialLocationAndRotation
inline void AController::SetInitialLocationAndRotation(struct Unknown& NewLocation, struct Unknown& NewRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetInitialLocationAndRotation");

	struct SetInitialLocationAndRotation_Params {
		struct Unknown& NewLocation;
		struct Unknown& NewRotation;
	}; SetInitialLocationAndRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewLocation = Params.NewLocation;
	NewRotation = Params.NewRotation;

}

// Function Engine.Controller.SetIgnoreMoveInput
inline void AController::SetIgnoreMoveInput(char bNewMoveInput) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetIgnoreMoveInput");

	struct SetIgnoreMoveInput_Params {
		char bNewMoveInput;
	}; SetIgnoreMoveInput_Params Params;

	Params.bNewMoveInput = bNewMoveInput;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.SetIgnoreLookInput
inline void AController::SetIgnoreLookInput(char bNewLookInput) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetIgnoreLookInput");

	struct SetIgnoreLookInput_Params {
		char bNewLookInput;
	}; SetIgnoreLookInput_Params Params;

	Params.bNewLookInput = bNewLookInput;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.SetControlRotation
inline void AController::SetControlRotation(struct Unknown& NewRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetControlRotation");

	struct SetControlRotation_Params {
		struct Unknown& NewRotation;
	}; SetControlRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewRotation = Params.NewRotation;

}

// Function Engine.Controller.ResetIgnoreMoveInput
inline void AController::ResetIgnoreMoveInput() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ResetIgnoreMoveInput");

	struct ResetIgnoreMoveInput_Params {
		
	}; ResetIgnoreMoveInput_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.ResetIgnoreLookInput
inline void AController::ResetIgnoreLookInput() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ResetIgnoreLookInput");

	struct ResetIgnoreLookInput_Params {
		
	}; ResetIgnoreLookInput_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.ResetIgnoreInputFlags
inline void AController::ResetIgnoreInputFlags() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ResetIgnoreInputFlags");

	struct ResetIgnoreInputFlags_Params {
		
	}; ResetIgnoreInputFlags_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.ReceiveUnPossess
inline void AController::ReceiveUnPossess(struct Unknown UnpossessedPawn) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveUnPossess");

	struct ReceiveUnPossess_Params {
		struct Unknown UnpossessedPawn;
	}; ReceiveUnPossess_Params Params;

	Params.UnpossessedPawn = UnpossessedPawn;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.ReceivePossess
inline void AController::ReceivePossess(struct Unknown PossessedPawn) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceivePossess");

	struct ReceivePossess_Params {
		struct Unknown PossessedPawn;
	}; ReceivePossess_Params Params;

	Params.PossessedPawn = PossessedPawn;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.ReceiveInstigatedAnyDamage
inline void AController::ReceiveInstigatedAnyDamage(float Damage, struct Unknown DamageType, struct Unknown DamagedActor, struct Unknown DamageCauser) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveInstigatedAnyDamage");

	struct ReceiveInstigatedAnyDamage_Params {
		float Damage;
		struct Unknown DamageType;
		struct Unknown DamagedActor;
		struct Unknown DamageCauser;
	}; ReceiveInstigatedAnyDamage_Params Params;

	Params.Damage = Damage;
	Params.DamageType = DamageType;
	Params.DamagedActor = DamagedActor;
	Params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.Possess
inline void AController::Possess(struct Unknown InPawn) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Possess");

	struct Possess_Params {
		struct Unknown InPawn;
	}; Possess_Params Params;

	Params.InPawn = InPawn;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.OnRep_PlayerState
inline void AController::OnRep_PlayerState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnRep_PlayerState");

	struct OnRep_PlayerState_Params {
		
	}; OnRep_PlayerState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.OnRep_Pawn
inline void AController::OnRep_Pawn() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnRep_Pawn");

	struct OnRep_Pawn_Params {
		
	}; OnRep_Pawn_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.LineOfSightTo
inline char AController::LineOfSightTo(struct Unknown Other, struct Unknown ViewPoint, char bAlternateChecks) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LineOfSightTo");

	struct LineOfSightTo_Params {
		struct Unknown Other;
		struct Unknown ViewPoint;
		char bAlternateChecks;
		char ReturnValue;

	}; LineOfSightTo_Params Params;

	Params.Other = Other;
	Params.ViewPoint = ViewPoint;
	Params.bAlternateChecks = bAlternateChecks;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.K2_GetPawn
inline struct Unknown AController::K2_GetPawn() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.K2_GetPawn");

	struct K2_GetPawn_Params {
		
		struct Unknown ReturnValue;

	}; K2_GetPawn_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.IsPlayerController
inline char AController::IsPlayerController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsPlayerController");

	struct IsPlayerController_Params {
		
		char ReturnValue;

	}; IsPlayerController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.IsMoveInputIgnored
inline char AController::IsMoveInputIgnored() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsMoveInputIgnored");

	struct IsMoveInputIgnored_Params {
		
		char ReturnValue;

	}; IsMoveInputIgnored_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.IsLookInputIgnored
inline char AController::IsLookInputIgnored() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLookInputIgnored");

	struct IsLookInputIgnored_Params {
		
		char ReturnValue;

	}; IsLookInputIgnored_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.IsLocalPlayerController
inline char AController::IsLocalPlayerController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLocalPlayerController");

	struct IsLocalPlayerController_Params {
		
		char ReturnValue;

	}; IsLocalPlayerController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.IsLocalController
inline char AController::IsLocalController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLocalController");

	struct IsLocalController_Params {
		
		char ReturnValue;

	}; IsLocalController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.GetViewTarget
inline struct Unknown AController::GetViewTarget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetViewTarget");

	struct GetViewTarget_Params {
		
		struct Unknown ReturnValue;

	}; GetViewTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.GetDesiredRotation
inline struct Unknown AController::GetDesiredRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetDesiredRotation");

	struct GetDesiredRotation_Params {
		
		struct Unknown ReturnValue;

	}; GetDesiredRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.GetControlRotation
inline struct Unknown AController::GetControlRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetControlRotation");

	struct GetControlRotation_Params {
		
		struct Unknown ReturnValue;

	}; GetControlRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Controller.ClientSetRotation
inline void AController::ClientSetRotation(struct Unknown NewRotation, char bResetCamera) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetRotation");

	struct ClientSetRotation_Params {
		struct Unknown NewRotation;
		char bResetCamera;
	}; ClientSetRotation_Params Params;

	Params.NewRotation = NewRotation;
	Params.bResetCamera = bResetCamera;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.ClientSetLocation
inline void AController::ClientSetLocation(struct Unknown NewLocation, struct Unknown NewRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetLocation");

	struct ClientSetLocation_Params {
		struct Unknown NewLocation;
		struct Unknown NewRotation;
	}; ClientSetLocation_Params Params;

	Params.NewLocation = NewLocation;
	Params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Controller.CastToPlayerController
inline struct Unknown AController::CastToPlayerController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CastToPlayerController");

	struct CastToPlayerController_Params {
		
		struct Unknown ReturnValue;

	}; CastToPlayerController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.WasInputKeyJustReleased
inline char APlayerController::WasInputKeyJustReleased(struct Unknown Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.WasInputKeyJustReleased");

	struct WasInputKeyJustReleased_Params {
		struct Unknown Key;
		char ReturnValue;

	}; WasInputKeyJustReleased_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.WasInputKeyJustPressed
inline char APlayerController::WasInputKeyJustPressed(struct Unknown Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.WasInputKeyJustPressed");

	struct WasInputKeyJustPressed_Params {
		struct Unknown Key;
		char ReturnValue;

	}; WasInputKeyJustPressed_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.ToggleSpeaking
inline void APlayerController::ToggleSpeaking(char bInSpeaking) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ToggleSpeaking");

	struct ToggleSpeaking_Params {
		char bInSpeaking;
	}; ToggleSpeaking_Params Params;

	Params.bInSpeaking = bInSpeaking;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.TestServerLevelVisibilityChange
inline void APlayerController::TestServerLevelVisibilityChange(struct FName PackageName, struct FName Filename) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TestServerLevelVisibilityChange");

	struct TestServerLevelVisibilityChange_Params {
		struct FName PackageName;
		struct FName Filename;
	}; TestServerLevelVisibilityChange_Params Params;

	Params.PackageName = PackageName;
	Params.Filename = Filename;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SwitchLevel
inline void APlayerController::SwitchLevel(struct FString URL) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchLevel");

	struct SwitchLevel_Params {
		struct FString URL;
	}; SwitchLevel_Params Params;

	Params.URL = URL;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.StopHapticEffect
inline void APlayerController::StopHapticEffect(enum class Unknow Hand) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StopHapticEffect");

	struct StopHapticEffect_Params {
		enum class Unknow Hand;
	}; StopHapticEffect_Params Params;

	Params.Hand = Hand;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.StartFire
inline void APlayerController::StartFire(char FireModeNum) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StartFire");

	struct StartFire_Params {
		char FireModeNum;
	}; StartFire_Params Params;

	Params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetVirtualJoystickVisibility
inline void APlayerController::SetVirtualJoystickVisibility(char bVisible) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetVirtualJoystickVisibility");

	struct SetVirtualJoystickVisibility_Params {
		char bVisible;
	}; SetVirtualJoystickVisibility_Params Params;

	Params.bVisible = bVisible;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetViewTargetWithBlend
inline void APlayerController::SetViewTargetWithBlend(struct Unknown NewViewTarget, float BlendTime, char BlendFunc, float BlendExp, char bLockOutgoing) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetViewTargetWithBlend");

	struct SetViewTargetWithBlend_Params {
		struct Unknown NewViewTarget;
		float BlendTime;
		char BlendFunc;
		float BlendExp;
		char bLockOutgoing;
	}; SetViewTargetWithBlend_Params Params;

	Params.NewViewTarget = NewViewTarget;
	Params.BlendTime = BlendTime;
	Params.BlendFunc = BlendFunc;
	Params.BlendExp = BlendExp;
	Params.bLockOutgoing = bLockOutgoing;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetName
inline void APlayerController::SetName(struct FString S) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetName");

	struct SetName_Params {
		struct FString S;
	}; SetName_Params Params;

	Params.S = S;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetMouseLocation
inline void APlayerController::SetMouseLocation(int32_t X, int32_t Y) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetMouseLocation");

	struct SetMouseLocation_Params {
		int32_t X;
		int32_t Y;
	}; SetMouseLocation_Params Params;

	Params.X = X;
	Params.Y = Y;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetMouseCursorWidget
inline void APlayerController::SetMouseCursorWidget(char Cursor, struct Unknown CursorWidget) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetMouseCursorWidget");

	struct SetMouseCursorWidget_Params {
		char Cursor;
		struct Unknown CursorWidget;
	}; SetMouseCursorWidget_Params Params;

	Params.Cursor = Cursor;
	Params.CursorWidget = CursorWidget;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetHapticsByValue
inline void APlayerController::SetHapticsByValue(float Frequency, float Amplitude, enum class Unknow Hand) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetHapticsByValue");

	struct SetHapticsByValue_Params {
		float Frequency;
		float Amplitude;
		enum class Unknow Hand;
	}; SetHapticsByValue_Params Params;

	Params.Frequency = Frequency;
	Params.Amplitude = Amplitude;
	Params.Hand = Hand;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetDisableHaptics
inline void APlayerController::SetDisableHaptics(char bNewDisabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetDisableHaptics");

	struct SetDisableHaptics_Params {
		char bNewDisabled;
	}; SetDisableHaptics_Params Params;

	Params.bNewDisabled = bNewDisabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetControllerLightColor
inline void APlayerController::SetControllerLightColor(struct Unknown Color) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetControllerLightColor");

	struct SetControllerLightColor_Params {
		struct Unknown Color;
	}; SetControllerLightColor_Params Params;

	Params.Color = Color;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetCinematicMode
inline void APlayerController::SetCinematicMode(char bInCinematicMode, char bHidePlayer, char bAffectsHUD, char bAffectsMovement, char bAffectsTurning) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetCinematicMode");

	struct SetCinematicMode_Params {
		char bInCinematicMode;
		char bHidePlayer;
		char bAffectsHUD;
		char bAffectsMovement;
		char bAffectsTurning;
	}; SetCinematicMode_Params Params;

	Params.bInCinematicMode = bInCinematicMode;
	Params.bHidePlayer = bHidePlayer;
	Params.bAffectsHUD = bAffectsHUD;
	Params.bAffectsMovement = bAffectsMovement;
	Params.bAffectsTurning = bAffectsTurning;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetAudioListenerOverride
inline void APlayerController::SetAudioListenerOverride(struct Unknown AttachToComponent, struct Unknown Location, struct Unknown Rotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAudioListenerOverride");

	struct SetAudioListenerOverride_Params {
		struct Unknown AttachToComponent;
		struct Unknown Location;
		struct Unknown Rotation;
	}; SetAudioListenerOverride_Params Params;

	Params.AttachToComponent = AttachToComponent;
	Params.Location = Location;
	Params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SetAudioListenerAttenuationOverride
inline void APlayerController::SetAudioListenerAttenuationOverride(struct Unknown AttachToComponent, struct Unknown AttenuationLocationOVerride) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAudioListenerAttenuationOverride");

	struct SetAudioListenerAttenuationOverride_Params {
		struct Unknown AttachToComponent;
		struct Unknown AttenuationLocationOVerride;
	}; SetAudioListenerAttenuationOverride_Params Params;

	Params.AttachToComponent = AttachToComponent;
	Params.AttenuationLocationOVerride = AttenuationLocationOVerride;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerViewSelf
inline void APlayerController::ServerViewSelf(struct Unknown TransitionParams) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewSelf");

	struct ServerViewSelf_Params {
		struct Unknown TransitionParams;
	}; ServerViewSelf_Params Params;

	Params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerViewPrevPlayer
inline void APlayerController::ServerViewPrevPlayer() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewPrevPlayer");

	struct ServerViewPrevPlayer_Params {
		
	}; ServerViewPrevPlayer_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerViewNextPlayer
inline void APlayerController::ServerViewNextPlayer() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewNextPlayer");

	struct ServerViewNextPlayer_Params {
		
	}; ServerViewNextPlayer_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerVerifyViewTarget
inline void APlayerController::ServerVerifyViewTarget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerVerifyViewTarget");

	struct ServerVerifyViewTarget_Params {
		
	}; ServerVerifyViewTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility
inline void APlayerController::ServerUpdateMultipleLevelsVisibility(struct TArray<Unknown> LevelVisibilities) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility");

	struct ServerUpdateMultipleLevelsVisibility_Params {
		struct TArray<Unknown> LevelVisibilities;
	}; ServerUpdateMultipleLevelsVisibility_Params Params;

	Params.LevelVisibilities = LevelVisibilities;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerUpdateLevelVisibility
inline void APlayerController::ServerUpdateLevelVisibility(struct Unknown LevelVisibility) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateLevelVisibility");

	struct ServerUpdateLevelVisibility_Params {
		struct Unknown LevelVisibility;
	}; ServerUpdateLevelVisibility_Params Params;

	Params.LevelVisibility = LevelVisibility;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerUpdateCamera
inline void APlayerController::ServerUpdateCamera(struct Unknown CamLoc, int32_t CamPitchAndYaw) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateCamera");

	struct ServerUpdateCamera_Params {
		struct Unknown CamLoc;
		int32_t CamPitchAndYaw;
	}; ServerUpdateCamera_Params Params;

	Params.CamLoc = CamLoc;
	Params.CamPitchAndYaw = CamPitchAndYaw;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerUnmutePlayer
inline void APlayerController::ServerUnmutePlayer(struct Unknown PlayerId) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUnmutePlayer");

	struct ServerUnmutePlayer_Params {
		struct Unknown PlayerId;
	}; ServerUnmutePlayer_Params Params;

	Params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerToggleAILogging
inline void APlayerController::ServerToggleAILogging() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerToggleAILogging");

	struct ServerToggleAILogging_Params {
		
	}; ServerToggleAILogging_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerShortTimeout
inline void APlayerController::ServerShortTimeout() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerShortTimeout");

	struct ServerShortTimeout_Params {
		
	}; ServerShortTimeout_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerSetSpectatorWaiting
inline void APlayerController::ServerSetSpectatorWaiting(char bWaiting) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetSpectatorWaiting");

	struct ServerSetSpectatorWaiting_Params {
		char bWaiting;
	}; ServerSetSpectatorWaiting_Params Params;

	Params.bWaiting = bWaiting;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerSetSpectatorLocation
inline void APlayerController::ServerSetSpectatorLocation(struct Unknown NewLoc, struct Unknown NewRot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetSpectatorLocation");

	struct ServerSetSpectatorLocation_Params {
		struct Unknown NewLoc;
		struct Unknown NewRot;
	}; ServerSetSpectatorLocation_Params Params;

	Params.NewLoc = NewLoc;
	Params.NewRot = NewRot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerRestartPlayer
inline void APlayerController::ServerRestartPlayer() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRestartPlayer");

	struct ServerRestartPlayer_Params {
		
	}; ServerRestartPlayer_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerPause
inline void APlayerController::ServerPause() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerPause");

	struct ServerPause_Params {
		
	}; ServerPause_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerNotifyLoadedWorld
inline void APlayerController::ServerNotifyLoadedWorld(struct FName WorldPackageName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerNotifyLoadedWorld");

	struct ServerNotifyLoadedWorld_Params {
		struct FName WorldPackageName;
	}; ServerNotifyLoadedWorld_Params Params;

	Params.WorldPackageName = WorldPackageName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerMutePlayer
inline void APlayerController::ServerMutePlayer(struct Unknown PlayerId) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMutePlayer");

	struct ServerMutePlayer_Params {
		struct Unknown PlayerId;
	}; ServerMutePlayer_Params Params;

	Params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerExecRPC
inline void APlayerController::ServerExecRPC(struct FString Msg) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerExecRPC");

	struct ServerExecRPC_Params {
		struct FString Msg;
	}; ServerExecRPC_Params Params;

	Params.Msg = Msg;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerExec
inline void APlayerController::ServerExec(struct FString Msg) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerExec");

	struct ServerExec_Params {
		struct FString Msg;
	}; ServerExec_Params Params;

	Params.Msg = Msg;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerCheckClientPossessionReliable
inline void APlayerController::ServerCheckClientPossessionReliable() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCheckClientPossessionReliable");

	struct ServerCheckClientPossessionReliable_Params {
		
	}; ServerCheckClientPossessionReliable_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerCheckClientPossession
inline void APlayerController::ServerCheckClientPossession() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCheckClientPossession");

	struct ServerCheckClientPossession_Params {
		
	}; ServerCheckClientPossession_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerChangeName
inline void APlayerController::ServerChangeName(struct FString S) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChangeName");

	struct ServerChangeName_Params {
		struct FString S;
	}; ServerChangeName_Params Params;

	Params.S = S;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerCamera
inline void APlayerController::ServerCamera(struct FName NewMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCamera");

	struct ServerCamera_Params {
		struct FName NewMode;
	}; ServerCamera_Params Params;

	Params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ServerAcknowledgePossession
inline void APlayerController::ServerAcknowledgePossession(struct Unknown P) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerAcknowledgePossession");

	struct ServerAcknowledgePossession_Params {
		struct Unknown P;
	}; ServerAcknowledgePossession_Params Params;

	Params.P = P;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.SendToConsole
inline void APlayerController::SendToConsole(struct FString Command) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SendToConsole");

	struct SendToConsole_Params {
		struct FString Command;
	}; SendToConsole_Params Params;

	Params.Command = Command;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.RestartLevel
inline void APlayerController::RestartLevel() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RestartLevel");

	struct RestartLevel_Params {
		
	}; RestartLevel_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ResetMouseCursorWidget
inline void APlayerController::ResetMouseCursorWidget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetMouseCursorWidget");

	struct ResetMouseCursorWidget_Params {
		
	}; ResetMouseCursorWidget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ResetControllerLightColor
inline void APlayerController::ResetControllerLightColor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetControllerLightColor");

	struct ResetControllerLightColor_Params {
		
	}; ResetControllerLightColor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ProjectWorldLocationToScreen
inline char APlayerController::ProjectWorldLocationToScreen(struct Unknown WorldLocation, struct Unknown& ScreenLocation, char bPlayerViewportRelative) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProjectWorldLocationToScreen");

	struct ProjectWorldLocationToScreen_Params {
		struct Unknown WorldLocation;
		struct Unknown& ScreenLocation;
		char bPlayerViewportRelative;
		char ReturnValue;

	}; ProjectWorldLocationToScreen_Params Params;

	Params.WorldLocation = WorldLocation;
	Params.bPlayerViewportRelative = bPlayerViewportRelative;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ScreenLocation = Params.ScreenLocation;


	return params.ReturnValue;
}

// Function Engine.PlayerController.PlayHapticEffect
inline void APlayerController::PlayHapticEffect(struct Unknown HapticEffect, enum class Unknow Hand, float Scale, char bLoop) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayHapticEffect");

	struct PlayHapticEffect_Params {
		struct Unknown HapticEffect;
		enum class Unknow Hand;
		float Scale;
		char bLoop;
	}; PlayHapticEffect_Params Params;

	Params.HapticEffect = HapticEffect;
	Params.Hand = Hand;
	Params.Scale = Scale;
	Params.bLoop = bLoop;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.PlayDynamicForceFeedback
inline void APlayerController::PlayDynamicForceFeedback(float Intensity, float Duration, char bAffectsLeftLarge, char bAffectsLeftSmall, char bAffectsRightLarge, char bAffectsRightSmall, char Action, struct Unknown LatentInfo) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayDynamicForceFeedback");

	struct PlayDynamicForceFeedback_Params {
		float Intensity;
		float Duration;
		char bAffectsLeftLarge;
		char bAffectsLeftSmall;
		char bAffectsRightLarge;
		char bAffectsRightSmall;
		char Action;
		struct Unknown LatentInfo;
	}; PlayDynamicForceFeedback_Params Params;

	Params.Intensity = Intensity;
	Params.Duration = Duration;
	Params.bAffectsLeftLarge = bAffectsLeftLarge;
	Params.bAffectsLeftSmall = bAffectsLeftSmall;
	Params.bAffectsRightLarge = bAffectsRightLarge;
	Params.bAffectsRightSmall = bAffectsRightSmall;
	Params.Action = Action;
	Params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.Pause
inline void APlayerController::Pause() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Pause");

	struct Pause_Params {
		
	}; Pause_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.OnServerStartedVisualLogger
inline void APlayerController::OnServerStartedVisualLogger(char bIsLogging) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnServerStartedVisualLogger");

	struct OnServerStartedVisualLogger_Params {
		char bIsLogging;
	}; OnServerStartedVisualLogger_Params Params;

	Params.bIsLogging = bIsLogging;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.LocalTravel
inline void APlayerController::LocalTravel(struct FString URL) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LocalTravel");

	struct LocalTravel_Params {
		struct FString URL;
	}; LocalTravel_Params Params;

	Params.URL = URL;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.K2_ClientPlayForceFeedback
inline void APlayerController::K2_ClientPlayForceFeedback(struct Unknown ForceFeedbackEffect, struct FName Tag, char bLooping, char bIgnoreTimeDilation, char bPlayWhilePaused) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.K2_ClientPlayForceFeedback");

	struct K2_ClientPlayForceFeedback_Params {
		struct Unknown ForceFeedbackEffect;
		struct FName Tag;
		char bLooping;
		char bIgnoreTimeDilation;
		char bPlayWhilePaused;
	}; K2_ClientPlayForceFeedback_Params Params;

	Params.ForceFeedbackEffect = ForceFeedbackEffect;
	Params.Tag = Tag;
	Params.bLooping = bLooping;
	Params.bIgnoreTimeDilation = bIgnoreTimeDilation;
	Params.bPlayWhilePaused = bPlayWhilePaused;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.IsInputKeyDown
inline char APlayerController::IsInputKeyDown(struct Unknown Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsInputKeyDown");

	struct IsInputKeyDown_Params {
		struct Unknown Key;
		char ReturnValue;

	}; IsInputKeyDown_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.GetViewportSize
inline void APlayerController::GetViewportSize(int32_t& SizeX, int32_t& SizeY) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetViewportSize");

	struct GetViewportSize_Params {
		int32_t& SizeX;
		int32_t& SizeY;
	}; GetViewportSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SizeX = Params.SizeX;
	SizeY = Params.SizeY;

}

// Function Engine.PlayerController.GetSpectatorPawn
inline struct Unknown APlayerController::GetSpectatorPawn() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSpectatorPawn");

	struct GetSpectatorPawn_Params {
		
		struct Unknown ReturnValue;

	}; GetSpectatorPawn_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.GetMousePosition
inline char APlayerController::GetMousePosition(float& LocationX, float& LocationY) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetMousePosition");

	struct GetMousePosition_Params {
		float& LocationX;
		float& LocationY;
		char ReturnValue;

	}; GetMousePosition_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	LocationX = Params.LocationX;
	LocationY = Params.LocationY;


	return params.ReturnValue;
}

// Function Engine.PlayerController.GetInputVectorKeyState
inline struct Unknown APlayerController::GetInputVectorKeyState(struct Unknown Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputVectorKeyState");

	struct GetInputVectorKeyState_Params {
		struct Unknown Key;
		struct Unknown ReturnValue;

	}; GetInputVectorKeyState_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.GetInputTouchState
inline void APlayerController::GetInputTouchState(char FingerIndex, float& LocationX, float& LocationY, char& bIsCurrentlyPressed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputTouchState");

	struct GetInputTouchState_Params {
		char FingerIndex;
		float& LocationX;
		float& LocationY;
		char& bIsCurrentlyPressed;
	}; GetInputTouchState_Params Params;

	Params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	LocationX = Params.LocationX;
	LocationY = Params.LocationY;
	bIsCurrentlyPressed = Params.bIsCurrentlyPressed;

}

// Function Engine.PlayerController.GetInputMouseDelta
inline void APlayerController::GetInputMouseDelta(float& DeltaX, float& DeltaY) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputMouseDelta");

	struct GetInputMouseDelta_Params {
		float& DeltaX;
		float& DeltaY;
	}; GetInputMouseDelta_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	DeltaX = Params.DeltaX;
	DeltaY = Params.DeltaY;

}

// Function Engine.PlayerController.GetInputMotionState
inline void APlayerController::GetInputMotionState(struct Unknown& Tilt, struct Unknown& RotationRate, struct Unknown& Gravity, struct Unknown& Acceleration) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputMotionState");

	struct GetInputMotionState_Params {
		struct Unknown& Tilt;
		struct Unknown& RotationRate;
		struct Unknown& Gravity;
		struct Unknown& Acceleration;
	}; GetInputMotionState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Tilt = Params.Tilt;
	RotationRate = Params.RotationRate;
	Gravity = Params.Gravity;
	Acceleration = Params.Acceleration;

}

// Function Engine.PlayerController.GetInputKeyTimeDown
inline float APlayerController::GetInputKeyTimeDown(struct Unknown Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputKeyTimeDown");

	struct GetInputKeyTimeDown_Params {
		struct Unknown Key;
		float ReturnValue;

	}; GetInputKeyTimeDown_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.GetInputAnalogStickState
inline void APlayerController::GetInputAnalogStickState(char WhichStick, float& StickX, float& StickY) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputAnalogStickState");

	struct GetInputAnalogStickState_Params {
		char WhichStick;
		float& StickX;
		float& StickY;
	}; GetInputAnalogStickState_Params Params;

	Params.WhichStick = WhichStick;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	StickX = Params.StickX;
	StickY = Params.StickY;

}

// Function Engine.PlayerController.GetInputAnalogKeyState
inline float APlayerController::GetInputAnalogKeyState(struct Unknown Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputAnalogKeyState");

	struct GetInputAnalogKeyState_Params {
		struct Unknown Key;
		float ReturnValue;

	}; GetInputAnalogKeyState_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.GetHUD
inline struct Unknown APlayerController::GetHUD() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHUD");

	struct GetHUD_Params {
		
		struct Unknown ReturnValue;

	}; GetHUD_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.GetHitResultUnderFingerForObjects
inline char APlayerController::GetHitResultUnderFingerForObjects(char FingerIndex, struct TArray<Unknown>& ObjectTypes, char bTraceComplex, struct Unknown& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderFingerForObjects");

	struct GetHitResultUnderFingerForObjects_Params {
		char FingerIndex;
		struct TArray<Unknown>& ObjectTypes;
		char bTraceComplex;
		struct Unknown& HitResult;
		char ReturnValue;

	}; GetHitResultUnderFingerForObjects_Params Params;

	Params.FingerIndex = FingerIndex;
	Params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ObjectTypes = Params.ObjectTypes;
	HitResult = Params.HitResult;


	return params.ReturnValue;
}

// Function Engine.PlayerController.GetHitResultUnderFingerByChannel
inline char APlayerController::GetHitResultUnderFingerByChannel(char FingerIndex, char TraceChannel, char bTraceComplex, struct Unknown& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderFingerByChannel");

	struct GetHitResultUnderFingerByChannel_Params {
		char FingerIndex;
		char TraceChannel;
		char bTraceComplex;
		struct Unknown& HitResult;
		char ReturnValue;

	}; GetHitResultUnderFingerByChannel_Params Params;

	Params.FingerIndex = FingerIndex;
	Params.TraceChannel = TraceChannel;
	Params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitResult = Params.HitResult;


	return params.ReturnValue;
}

// Function Engine.PlayerController.GetHitResultUnderFinger
inline char APlayerController::GetHitResultUnderFinger(char FingerIndex, char TraceChannel, char bTraceComplex, struct Unknown& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderFinger");

	struct GetHitResultUnderFinger_Params {
		char FingerIndex;
		char TraceChannel;
		char bTraceComplex;
		struct Unknown& HitResult;
		char ReturnValue;

	}; GetHitResultUnderFinger_Params Params;

	Params.FingerIndex = FingerIndex;
	Params.TraceChannel = TraceChannel;
	Params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitResult = Params.HitResult;


	return params.ReturnValue;
}

// Function Engine.PlayerController.GetHitResultUnderCursorForObjects
inline char APlayerController::GetHitResultUnderCursorForObjects(struct TArray<Unknown>& ObjectTypes, char bTraceComplex, struct Unknown& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderCursorForObjects");

	struct GetHitResultUnderCursorForObjects_Params {
		struct TArray<Unknown>& ObjectTypes;
		char bTraceComplex;
		struct Unknown& HitResult;
		char ReturnValue;

	}; GetHitResultUnderCursorForObjects_Params Params;

	Params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ObjectTypes = Params.ObjectTypes;
	HitResult = Params.HitResult;


	return params.ReturnValue;
}

// Function Engine.PlayerController.GetHitResultUnderCursorByChannel
inline char APlayerController::GetHitResultUnderCursorByChannel(char TraceChannel, char bTraceComplex, struct Unknown& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderCursorByChannel");

	struct GetHitResultUnderCursorByChannel_Params {
		char TraceChannel;
		char bTraceComplex;
		struct Unknown& HitResult;
		char ReturnValue;

	}; GetHitResultUnderCursorByChannel_Params Params;

	Params.TraceChannel = TraceChannel;
	Params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitResult = Params.HitResult;


	return params.ReturnValue;
}

// Function Engine.PlayerController.GetHitResultUnderCursor
inline char APlayerController::GetHitResultUnderCursor(char TraceChannel, char bTraceComplex, struct Unknown& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderCursor");

	struct GetHitResultUnderCursor_Params {
		char TraceChannel;
		char bTraceComplex;
		struct Unknown& HitResult;
		char ReturnValue;

	}; GetHitResultUnderCursor_Params Params;

	Params.TraceChannel = TraceChannel;
	Params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitResult = Params.HitResult;


	return params.ReturnValue;
}

// Function Engine.PlayerController.GetFocalLocation
inline struct Unknown APlayerController::GetFocalLocation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetFocalLocation");

	struct GetFocalLocation_Params {
		
		struct Unknown ReturnValue;

	}; GetFocalLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.FOV
inline void APlayerController::FOV(float NewFOV) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FOV");

	struct FOV_Params {
		float NewFOV;
	}; FOV_Params Params;

	Params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.EnableCheats
inline void APlayerController::EnableCheats() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnableCheats");

	struct EnableCheats_Params {
		
	}; EnableCheats_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.DeprojectScreenPositionToWorld
inline char APlayerController::DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct Unknown& WorldLocation, struct Unknown& WorldDirection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DeprojectScreenPositionToWorld");

	struct DeprojectScreenPositionToWorld_Params {
		float ScreenX;
		float ScreenY;
		struct Unknown& WorldLocation;
		struct Unknown& WorldDirection;
		char ReturnValue;

	}; DeprojectScreenPositionToWorld_Params Params;

	Params.ScreenX = ScreenX;
	Params.ScreenY = ScreenY;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;
	WorldDirection = Params.WorldDirection;


	return params.ReturnValue;
}

// Function Engine.PlayerController.DeprojectMousePositionToWorld
inline char APlayerController::DeprojectMousePositionToWorld(struct Unknown& WorldLocation, struct Unknown& WorldDirection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DeprojectMousePositionToWorld");

	struct DeprojectMousePositionToWorld_Params {
		struct Unknown& WorldLocation;
		struct Unknown& WorldDirection;
		char ReturnValue;

	}; DeprojectMousePositionToWorld_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldLocation = Params.WorldLocation;
	WorldDirection = Params.WorldDirection;


	return params.ReturnValue;
}

// Function Engine.PlayerController.ConsoleKey
inline void APlayerController::ConsoleKey(struct Unknown Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ConsoleKey");

	struct ConsoleKey_Params {
		struct Unknown Key;
	}; ConsoleKey_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientWasKicked
inline void APlayerController::ClientWasKicked(struct FText KickReason) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWasKicked");

	struct ClientWasKicked_Params {
		struct FText KickReason;
	}; ClientWasKicked_Params Params;

	Params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientVoiceHandshakeComplete
inline void APlayerController::ClientVoiceHandshakeComplete() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientVoiceHandshakeComplete");

	struct ClientVoiceHandshakeComplete_Params {
		
	}; ClientVoiceHandshakeComplete_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus
inline void APlayerController::ClientUpdateMultipleLevelsStreamingStatus(struct TArray<Unknown> LevelStatuses) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus");

	struct ClientUpdateMultipleLevelsStreamingStatus_Params {
		struct TArray<Unknown> LevelStatuses;
	}; ClientUpdateMultipleLevelsStreamingStatus_Params Params;

	Params.LevelStatuses = LevelStatuses;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
inline void APlayerController::ClientUpdateLevelStreamingStatus(struct FName PackageName, char bNewShouldBeLoaded, char bNewShouldBeVisible, char bNewShouldBlockOnLoad, int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateLevelStreamingStatus");

	struct ClientUpdateLevelStreamingStatus_Params {
		struct FName PackageName;
		char bNewShouldBeLoaded;
		char bNewShouldBeVisible;
		char bNewShouldBlockOnLoad;
		int32_t LODIndex;
	}; ClientUpdateLevelStreamingStatus_Params Params;

	Params.PackageName = PackageName;
	Params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	Params.bNewShouldBeVisible = bNewShouldBeVisible;
	Params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;
	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientUnmutePlayer
inline void APlayerController::ClientUnmutePlayer(struct Unknown PlayerId) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUnmutePlayer");

	struct ClientUnmutePlayer_Params {
		struct Unknown PlayerId;
	}; ClientUnmutePlayer_Params Params;

	Params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientTravelInternal
inline void APlayerController::ClientTravelInternal(struct FString URL, char TravelType, char bSeamless, struct Unknown MapPackageGuid) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravelInternal");

	struct ClientTravelInternal_Params {
		struct FString URL;
		char TravelType;
		char bSeamless;
		struct Unknown MapPackageGuid;
	}; ClientTravelInternal_Params Params;

	Params.URL = URL;
	Params.TravelType = TravelType;
	Params.bSeamless = bSeamless;
	Params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientTravel
inline void APlayerController::ClientTravel(struct FString URL, char TravelType, char bSeamless, struct Unknown MapPackageGuid) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravel");

	struct ClientTravel_Params {
		struct FString URL;
		char TravelType;
		char bSeamless;
		struct Unknown MapPackageGuid;
	}; ClientTravel_Params Params;

	Params.URL = URL;
	Params.TravelType = TravelType;
	Params.bSeamless = bSeamless;
	Params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientTeamMessage
inline void APlayerController::ClientTeamMessage(struct Unknown SenderPlayerState, struct FString S, struct FName Type, float MsgLifeTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTeamMessage");

	struct ClientTeamMessage_Params {
		struct Unknown SenderPlayerState;
		struct FString S;
		struct FName Type;
		float MsgLifeTime;
	}; ClientTeamMessage_Params Params;

	Params.SenderPlayerState = SenderPlayerState;
	Params.S = S;
	Params.Type = Type;
	Params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientStopForceFeedback
inline void APlayerController::ClientStopForceFeedback(struct Unknown ForceFeedbackEffect, struct FName Tag) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopForceFeedback");

	struct ClientStopForceFeedback_Params {
		struct Unknown ForceFeedbackEffect;
		struct FName Tag;
	}; ClientStopForceFeedback_Params Params;

	Params.ForceFeedbackEffect = ForceFeedbackEffect;
	Params.Tag = Tag;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientStopCameraShakesFromSource
inline void APlayerController::ClientStopCameraShakesFromSource(struct Unknown SourceComponent, char bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraShakesFromSource");

	struct ClientStopCameraShakesFromSource_Params {
		struct Unknown SourceComponent;
		char bImmediately;
	}; ClientStopCameraShakesFromSource_Params Params;

	Params.SourceComponent = SourceComponent;
	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientStopCameraShake
inline void APlayerController::ClientStopCameraShake(struct Unknown* Shake, char bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraShake");

	struct ClientStopCameraShake_Params {
		struct Unknown* Shake;
		char bImmediately;
	}; ClientStopCameraShake_Params Params;

	Params.Shake = Shake;
	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientStopCameraAnim
inline void APlayerController::ClientStopCameraAnim(struct Unknown AnimToStop) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraAnim");

	struct ClientStopCameraAnim_Params {
		struct Unknown AnimToStop;
	}; ClientStopCameraAnim_Params Params;

	Params.AnimToStop = AnimToStop;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientStartOnlineSession
inline void APlayerController::ClientStartOnlineSession() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStartOnlineSession");

	struct ClientStartOnlineSession_Params {
		
	}; ClientStartOnlineSession_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSpawnCameraLensEffect
inline void APlayerController::ClientSpawnCameraLensEffect(struct Unknown* LensEffectEmitterClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSpawnCameraLensEffect");

	struct ClientSpawnCameraLensEffect_Params {
		struct Unknown* LensEffectEmitterClass;
	}; ClientSpawnCameraLensEffect_Params Params;

	Params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetViewTarget
inline void APlayerController::ClientSetViewTarget(struct Unknown A, struct Unknown TransitionParams) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget");

	struct ClientSetViewTarget_Params {
		struct Unknown A;
		struct Unknown TransitionParams;
	}; ClientSetViewTarget_Params Params;

	Params.A = A;
	Params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetSpectatorWaiting
inline void APlayerController::ClientSetSpectatorWaiting(char bWaiting) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetSpectatorWaiting");

	struct ClientSetSpectatorWaiting_Params {
		char bWaiting;
	}; ClientSetSpectatorWaiting_Params Params;

	Params.bWaiting = bWaiting;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetHUD
inline void APlayerController::ClientSetHUD(struct Unknown* NewHUDClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetHUD");

	struct ClientSetHUD_Params {
		struct Unknown* NewHUDClass;
	}; ClientSetHUD_Params Params;

	Params.NewHUDClass = NewHUDClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
inline void APlayerController::ClientSetForceMipLevelsToBeResident(struct Unknown Material, float ForceDuration, int32_t CinematicTextureGroups) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident");

	struct ClientSetForceMipLevelsToBeResident_Params {
		struct Unknown Material;
		float ForceDuration;
		int32_t CinematicTextureGroups;
	}; ClientSetForceMipLevelsToBeResident_Params Params;

	Params.Material = Material;
	Params.ForceDuration = ForceDuration;
	Params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetCinematicMode
inline void APlayerController::ClientSetCinematicMode(char bInCinematicMode, char bAffectsMovement, char bAffectsTurning, char bAffectsHUD) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCinematicMode");

	struct ClientSetCinematicMode_Params {
		char bInCinematicMode;
		char bAffectsMovement;
		char bAffectsTurning;
		char bAffectsHUD;
	}; ClientSetCinematicMode_Params Params;

	Params.bInCinematicMode = bInCinematicMode;
	Params.bAffectsMovement = bAffectsMovement;
	Params.bAffectsTurning = bAffectsTurning;
	Params.bAffectsHUD = bAffectsHUD;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetCameraMode
inline void APlayerController::ClientSetCameraMode(struct FName NewCamMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraMode");

	struct ClientSetCameraMode_Params {
		struct FName NewCamMode;
	}; ClientSetCameraMode_Params Params;

	Params.NewCamMode = NewCamMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetCameraFade
inline void APlayerController::ClientSetCameraFade(char bEnableFading, struct Unknown FadeColor, struct Unknown FadeAlpha, float FadeTime, char bFadeAudio) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraFade");

	struct ClientSetCameraFade_Params {
		char bEnableFading;
		struct Unknown FadeColor;
		struct Unknown FadeAlpha;
		float FadeTime;
		char bFadeAudio;
	}; ClientSetCameraFade_Params Params;

	Params.bEnableFading = bEnableFading;
	Params.FadeColor = FadeColor;
	Params.FadeAlpha = FadeAlpha;
	Params.FadeTime = FadeTime;
	Params.bFadeAudio = bFadeAudio;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
inline void APlayerController::ClientSetBlockOnAsyncLoading() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetBlockOnAsyncLoading");

	struct ClientSetBlockOnAsyncLoading_Params {
		
	}; ClientSetBlockOnAsyncLoading_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason
inline void APlayerController::ClientReturnToMainMenuWithTextReason(struct FText ReturnReason) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason");

	struct ClientReturnToMainMenuWithTextReason_Params {
		struct FText ReturnReason;
	}; ClientReturnToMainMenuWithTextReason_Params Params;

	Params.ReturnReason = ReturnReason;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientReturnToMainMenu
inline void APlayerController::ClientReturnToMainMenu(struct FString ReturnReason) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReturnToMainMenu");

	struct ClientReturnToMainMenu_Params {
		struct FString ReturnReason;
	}; ClientReturnToMainMenu_Params Params;

	Params.ReturnReason = ReturnReason;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientRetryClientRestart
inline void APlayerController::ClientRetryClientRestart(struct Unknown NewPawn) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRetryClientRestart");

	struct ClientRetryClientRestart_Params {
		struct Unknown NewPawn;
	}; ClientRetryClientRestart_Params Params;

	Params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientRestart
inline void APlayerController::ClientRestart(struct Unknown NewPawn) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRestart");

	struct ClientRestart_Params {
		struct Unknown NewPawn;
	}; ClientRestart_Params Params;

	Params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientReset
inline void APlayerController::ClientReset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReset");

	struct ClientReset_Params {
		
	}; ClientReset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientRepObjRef
inline void APlayerController::ClientRepObjRef(struct Unknown Object) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRepObjRef");

	struct ClientRepObjRef_Params {
		struct Unknown Object;
	}; ClientRepObjRef_Params Params;

	Params.Object = Object;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientReceiveLocalizedMessage
inline void APlayerController::ClientReceiveLocalizedMessage(struct Unknown* Message, int32_t Switch, struct Unknown RelatedPlayerState_2, struct Unknown RelatedPlayerState_3, struct Unknown OptionalObject) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReceiveLocalizedMessage");

	struct ClientReceiveLocalizedMessage_Params {
		struct Unknown* Message;
		int32_t Switch;
		struct Unknown RelatedPlayerState_2;
		struct Unknown RelatedPlayerState_3;
		struct Unknown OptionalObject;
	}; ClientReceiveLocalizedMessage_Params Params;

	Params.Message = Message;
	Params.Switch = Switch;
	Params.RelatedPlayerState_2 = RelatedPlayerState_2;
	Params.RelatedPlayerState_3 = RelatedPlayerState_3;
	Params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPrestreamTextures
inline void APlayerController::ClientPrestreamTextures(struct Unknown ForcedActor, float ForceDuration, char bEnableStreaming, int32_t CinematicTextureGroups) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrestreamTextures");

	struct ClientPrestreamTextures_Params {
		struct Unknown ForcedActor;
		float ForceDuration;
		char bEnableStreaming;
		int32_t CinematicTextureGroups;
	}; ClientPrestreamTextures_Params Params;

	Params.ForcedActor = ForcedActor;
	Params.ForceDuration = ForceDuration;
	Params.bEnableStreaming = bEnableStreaming;
	Params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPrepareMapChange
inline void APlayerController::ClientPrepareMapChange(struct FName LevelName, char bFirst, char bLast) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrepareMapChange");

	struct ClientPrepareMapChange_Params {
		struct FName LevelName;
		char bFirst;
		char bLast;
	}; ClientPrepareMapChange_Params Params;

	Params.LevelName = LevelName;
	Params.bFirst = bFirst;
	Params.bLast = bLast;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPlaySoundAtLocation
inline void APlayerController::ClientPlaySoundAtLocation(struct Unknown Sound, struct Unknown Location, float VolumeMultiplier, float PitchMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlaySoundAtLocation");

	struct ClientPlaySoundAtLocation_Params {
		struct Unknown Sound;
		struct Unknown Location;
		float VolumeMultiplier;
		float PitchMultiplier;
	}; ClientPlaySoundAtLocation_Params Params;

	Params.Sound = Sound;
	Params.Location = Location;
	Params.VolumeMultiplier = VolumeMultiplier;
	Params.PitchMultiplier = PitchMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPlaySound
inline void APlayerController::ClientPlaySound(struct Unknown Sound, float VolumeMultiplier, float PitchMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlaySound");

	struct ClientPlaySound_Params {
		struct Unknown Sound;
		float VolumeMultiplier;
		float PitchMultiplier;
	}; ClientPlaySound_Params Params;

	Params.Sound = Sound;
	Params.VolumeMultiplier = VolumeMultiplier;
	Params.PitchMultiplier = PitchMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPlayForceFeedback_Internal
inline void APlayerController::ClientPlayForceFeedback_Internal(struct Unknown ForceFeedbackEffect, struct Unknown Params) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayForceFeedback_Internal");

	struct ClientPlayForceFeedback_Internal_Params {
		struct Unknown ForceFeedbackEffect;
		struct Unknown Params;
	}; ClientPlayForceFeedback_Internal_Params Params;

	Params.ForceFeedbackEffect = ForceFeedbackEffect;
	Params.Params = Params;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPlayCameraShakeFromSource
inline void APlayerController::ClientPlayCameraShakeFromSource(struct Unknown* Shake, struct Unknown SourceComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraShakeFromSource");

	struct ClientPlayCameraShakeFromSource_Params {
		struct Unknown* Shake;
		struct Unknown SourceComponent;
	}; ClientPlayCameraShakeFromSource_Params Params;

	Params.Shake = Shake;
	Params.SourceComponent = SourceComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPlayCameraShake
inline void APlayerController::ClientPlayCameraShake(struct Unknown* Shake, float Scale, char PlaySpace, struct Unknown UserPlaySpaceRot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraShake");

	struct ClientPlayCameraShake_Params {
		struct Unknown* Shake;
		float Scale;
		char PlaySpace;
		struct Unknown UserPlaySpaceRot;
	}; ClientPlayCameraShake_Params Params;

	Params.Shake = Shake;
	Params.Scale = Scale;
	Params.PlaySpace = PlaySpace;
	Params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientPlayCameraAnim
inline void APlayerController::ClientPlayCameraAnim(struct Unknown AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, char bLoop, char bRandomStartTime, char Space, struct Unknown CustomPlaySpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraAnim");

	struct ClientPlayCameraAnim_Params {
		struct Unknown AnimToPlay;
		float Scale;
		float Rate;
		float BlendInTime;
		float BlendOutTime;
		char bLoop;
		char bRandomStartTime;
		char Space;
		struct Unknown CustomPlaySpace;
	}; ClientPlayCameraAnim_Params Params;

	Params.AnimToPlay = AnimToPlay;
	Params.Scale = Scale;
	Params.Rate = Rate;
	Params.BlendInTime = BlendInTime;
	Params.BlendOutTime = BlendOutTime;
	Params.bLoop = bLoop;
	Params.bRandomStartTime = bRandomStartTime;
	Params.Space = Space;
	Params.CustomPlaySpace = CustomPlaySpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientMutePlayer
inline void APlayerController::ClientMutePlayer(struct Unknown PlayerId) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMutePlayer");

	struct ClientMutePlayer_Params {
		struct Unknown PlayerId;
	}; ClientMutePlayer_Params Params;

	Params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientMessage
inline void APlayerController::ClientMessage(struct FString S, struct FName Type, float MsgLifeTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMessage");

	struct ClientMessage_Params {
		struct FString S;
		struct FName Type;
		float MsgLifeTime;
	}; ClientMessage_Params Params;

	Params.S = S;
	Params.Type = Type;
	Params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientIgnoreMoveInput
inline void APlayerController::ClientIgnoreMoveInput(char bIgnore) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreMoveInput");

	struct ClientIgnoreMoveInput_Params {
		char bIgnore;
	}; ClientIgnoreMoveInput_Params Params;

	Params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientIgnoreLookInput
inline void APlayerController::ClientIgnoreLookInput(char bIgnore) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreLookInput");

	struct ClientIgnoreLookInput_Params {
		char bIgnore;
	}; ClientIgnoreLookInput_Params Params;

	Params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientGotoState
inline void APlayerController::ClientGotoState(struct FName NewState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGotoState");

	struct ClientGotoState_Params {
		struct FName NewState;
	}; ClientGotoState_Params Params;

	Params.NewState = NewState;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientGameEnded
inline void APlayerController::ClientGameEnded(struct Unknown EndGameFocus, char bIsWinner) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGameEnded");

	struct ClientGameEnded_Params {
		struct Unknown EndGameFocus;
		char bIsWinner;
	}; ClientGameEnded_Params Params;

	Params.EndGameFocus = EndGameFocus;
	Params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientForceGarbageCollection
inline void APlayerController::ClientForceGarbageCollection() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientForceGarbageCollection");

	struct ClientForceGarbageCollection_Params {
		
	}; ClientForceGarbageCollection_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientFlushLevelStreaming
inline void APlayerController::ClientFlushLevelStreaming() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientFlushLevelStreaming");

	struct ClientFlushLevelStreaming_Params {
		
	}; ClientFlushLevelStreaming_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientEndOnlineSession
inline void APlayerController::ClientEndOnlineSession() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientEndOnlineSession");

	struct ClientEndOnlineSession_Params {
		
	}; ClientEndOnlineSession_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientEnableNetworkVoice
inline void APlayerController::ClientEnableNetworkVoice(char bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientEnableNetworkVoice");

	struct ClientEnableNetworkVoice_Params {
		char bEnable;
	}; ClientEnableNetworkVoice_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientCommitMapChange
inline void APlayerController::ClientCommitMapChange() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCommitMapChange");

	struct ClientCommitMapChange_Params {
		
	}; ClientCommitMapChange_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientClearCameraLensEffects
inline void APlayerController::ClientClearCameraLensEffects() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientClearCameraLensEffects");

	struct ClientClearCameraLensEffects_Params {
		
	}; ClientClearCameraLensEffects_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientCapBandwidth
inline void APlayerController::ClientCapBandwidth(int32_t Cap) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCapBandwidth");

	struct ClientCapBandwidth_Params {
		int32_t Cap;
	}; ClientCapBandwidth_Params Params;

	Params.Cap = Cap;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientCancelPendingMapChange
inline void APlayerController::ClientCancelPendingMapChange() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCancelPendingMapChange");

	struct ClientCancelPendingMapChange_Params {
		
	}; ClientCancelPendingMapChange_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClientAddTextureStreamingLoc
inline void APlayerController::ClientAddTextureStreamingLoc(struct Unknown InLoc, float Duration, char bOverrideLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAddTextureStreamingLoc");

	struct ClientAddTextureStreamingLoc_Params {
		struct Unknown InLoc;
		float Duration;
		char bOverrideLocation;
	}; ClientAddTextureStreamingLoc_Params Params;

	Params.InLoc = InLoc;
	Params.Duration = Duration;
	Params.bOverrideLocation = bOverrideLocation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClearAudioListenerOverride
inline void APlayerController::ClearAudioListenerOverride() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearAudioListenerOverride");

	struct ClearAudioListenerOverride_Params {
		
	}; ClearAudioListenerOverride_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ClearAudioListenerAttenuationOverride
inline void APlayerController::ClearAudioListenerAttenuationOverride() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearAudioListenerAttenuationOverride");

	struct ClearAudioListenerAttenuationOverride_Params {
		
	}; ClearAudioListenerAttenuationOverride_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.CanRestartPlayer
inline char APlayerController::CanRestartPlayer() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanRestartPlayer");

	struct CanRestartPlayer_Params {
		
		char ReturnValue;

	}; CanRestartPlayer_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerController.Camera
inline void APlayerController::Camera(struct FName NewMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Camera");

	struct Camera_Params {
		struct FName NewMode;
	}; Camera_Params Params;

	Params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.AddYawInput
inline void APlayerController::AddYawInput(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddYawInput");

	struct AddYawInput_Params {
		float Val;
	}; AddYawInput_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.AddRollInput
inline void APlayerController::AddRollInput(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddRollInput");

	struct AddRollInput_Params {
		float Val;
	}; AddRollInput_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.AddPitchInput
inline void APlayerController::AddPitchInput(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddPitchInput");

	struct AddPitchInput_Params {
		float Val;
	}; AddPitchInput_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerController.ActivateTouchInterface
inline void APlayerController::ActivateTouchInterface(struct Unknown NewTouchInterface) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ActivateTouchInterface");

	struct ActivateTouchInterface_Params {
		struct Unknown NewTouchInterface;
	}; ActivateTouchInterface_Params Params;

	Params.NewTouchInterface = NewTouchInterface;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.StopMovementImmediately
inline void UMovementComponent::StopMovementImmediately() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.StopMovementImmediately");

	struct StopMovementImmediately_Params {
		
	}; StopMovementImmediately_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.SnapUpdatedComponentToPlane
inline void UMovementComponent::SnapUpdatedComponentToPlane() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SnapUpdatedComponentToPlane");

	struct SnapUpdatedComponentToPlane_Params {
		
	}; SnapUpdatedComponentToPlane_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.SetUpdatedComponent
inline void UMovementComponent::SetUpdatedComponent(struct Unknown NewUpdatedComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetUpdatedComponent");

	struct SetUpdatedComponent_Params {
		struct Unknown NewUpdatedComponent;
	}; SetUpdatedComponent_Params Params;

	Params.NewUpdatedComponent = NewUpdatedComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.SetPlaneConstraintOrigin
inline void UMovementComponent::SetPlaneConstraintOrigin(struct Unknown PlaneOrigin) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintOrigin");

	struct SetPlaneConstraintOrigin_Params {
		struct Unknown PlaneOrigin;
	}; SetPlaneConstraintOrigin_Params Params;

	Params.PlaneOrigin = PlaneOrigin;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.SetPlaneConstraintNormal
inline void UMovementComponent::SetPlaneConstraintNormal(struct Unknown PlaneNormal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintNormal");

	struct SetPlaneConstraintNormal_Params {
		struct Unknown PlaneNormal;
	}; SetPlaneConstraintNormal_Params Params;

	Params.PlaneNormal = PlaneNormal;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.SetPlaneConstraintFromVectors
inline void UMovementComponent::SetPlaneConstraintFromVectors(struct Unknown Forward, struct Unknown Up) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintFromVectors");

	struct SetPlaneConstraintFromVectors_Params {
		struct Unknown Forward;
		struct Unknown Up;
	}; SetPlaneConstraintFromVectors_Params Params;

	Params.Forward = Forward;
	Params.Up = Up;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.SetPlaneConstraintEnabled
inline void UMovementComponent::SetPlaneConstraintEnabled(char bEnabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintEnabled");

	struct SetPlaneConstraintEnabled_Params {
		char bEnabled;
	}; SetPlaneConstraintEnabled_Params Params;

	Params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.SetPlaneConstraintAxisSetting
inline void UMovementComponent::SetPlaneConstraintAxisSetting(enum class Unknow NewAxisSetting) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintAxisSetting");

	struct SetPlaneConstraintAxisSetting_Params {
		enum class Unknow NewAxisSetting;
	}; SetPlaneConstraintAxisSetting_Params Params;

	Params.NewAxisSetting = NewAxisSetting;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.PhysicsVolumeChanged
inline void UMovementComponent::PhysicsVolumeChanged(struct Unknown NewVolume) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.PhysicsVolumeChanged");

	struct PhysicsVolumeChanged_Params {
		struct Unknown NewVolume;
	}; PhysicsVolumeChanged_Params Params;

	Params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MovementComponent.K2_MoveUpdatedComponent
inline char UMovementComponent::K2_MoveUpdatedComponent(struct Unknown Delta, struct Unknown NewRotation, struct Unknown& OutHit, char bSweep, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.K2_MoveUpdatedComponent");

	struct K2_MoveUpdatedComponent_Params {
		struct Unknown Delta;
		struct Unknown NewRotation;
		struct Unknown& OutHit;
		char bSweep;
		char bTeleport;
		char ReturnValue;

	}; K2_MoveUpdatedComponent_Params Params;

	Params.Delta = Delta;
	Params.NewRotation = NewRotation;
	Params.bSweep = bSweep;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutHit = Params.OutHit;


	return params.ReturnValue;
}

// Function Engine.MovementComponent.K2_GetModifiedMaxSpeed
inline float UMovementComponent::K2_GetModifiedMaxSpeed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.K2_GetModifiedMaxSpeed");

	struct K2_GetModifiedMaxSpeed_Params {
		
		float ReturnValue;

	}; K2_GetModifiedMaxSpeed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.K2_GetMaxSpeedModifier
inline float UMovementComponent::K2_GetMaxSpeedModifier() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.K2_GetMaxSpeedModifier");

	struct K2_GetMaxSpeedModifier_Params {
		
		float ReturnValue;

	}; K2_GetMaxSpeedModifier_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.IsExceedingMaxSpeed
inline char UMovementComponent::IsExceedingMaxSpeed(float MaxSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.IsExceedingMaxSpeed");

	struct IsExceedingMaxSpeed_Params {
		float MaxSpeed;
		char ReturnValue;

	}; IsExceedingMaxSpeed_Params Params;

	Params.MaxSpeed = MaxSpeed;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.GetPlaneConstraintOrigin
inline struct Unknown UMovementComponent::GetPlaneConstraintOrigin() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPlaneConstraintOrigin");

	struct GetPlaneConstraintOrigin_Params {
		
		struct Unknown ReturnValue;

	}; GetPlaneConstraintOrigin_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.GetPlaneConstraintNormal
inline struct Unknown UMovementComponent::GetPlaneConstraintNormal() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPlaneConstraintNormal");

	struct GetPlaneConstraintNormal_Params {
		
		struct Unknown ReturnValue;

	}; GetPlaneConstraintNormal_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.GetPlaneConstraintAxisSetting
inline enum class Unknow UMovementComponent::GetPlaneConstraintAxisSetting() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPlaneConstraintAxisSetting");

	struct GetPlaneConstraintAxisSetting_Params {
		
		enum class Unknow ReturnValue;

	}; GetPlaneConstraintAxisSetting_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.GetPhysicsVolume
inline struct Unknown UMovementComponent::GetPhysicsVolume() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPhysicsVolume");

	struct GetPhysicsVolume_Params {
		
		struct Unknown ReturnValue;

	}; GetPhysicsVolume_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.GetMaxSpeed
inline float UMovementComponent::GetMaxSpeed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetMaxSpeed");

	struct GetMaxSpeed_Params {
		
		float ReturnValue;

	}; GetMaxSpeed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.GetGravityZ
inline float UMovementComponent::GetGravityZ() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetGravityZ");

	struct GetGravityZ_Params {
		
		float ReturnValue;

	}; GetGravityZ_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.ConstrainNormalToPlane
inline struct Unknown UMovementComponent::ConstrainNormalToPlane(struct Unknown Normal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.ConstrainNormalToPlane");

	struct ConstrainNormalToPlane_Params {
		struct Unknown Normal;
		struct Unknown ReturnValue;

	}; ConstrainNormalToPlane_Params Params;

	Params.Normal = Normal;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.ConstrainLocationToPlane
inline struct Unknown UMovementComponent::ConstrainLocationToPlane(struct Unknown Location) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.ConstrainLocationToPlane");

	struct ConstrainLocationToPlane_Params {
		struct Unknown Location;
		struct Unknown ReturnValue;

	}; ConstrainLocationToPlane_Params Params;

	Params.Location = Location;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MovementComponent.ConstrainDirectionToPlane
inline struct Unknown UMovementComponent::ConstrainDirectionToPlane(struct Unknown Direction) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.ConstrainDirectionToPlane");

	struct ConstrainDirectionToPlane_Params {
		struct Unknown Direction;
		struct Unknown ReturnValue;

	}; ConstrainDirectionToPlane_Params Params;

	Params.Direction = Direction;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.NavMovementComponent.StopMovementKeepPathing
inline void UNavMovementComponent::StopMovementKeepPathing() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.StopMovementKeepPathing");

	struct StopMovementKeepPathing_Params {
		
	}; StopMovementKeepPathing_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.NavMovementComponent.StopActiveMovement
inline void UNavMovementComponent::StopActiveMovement() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.StopActiveMovement");

	struct StopActiveMovement_Params {
		
	}; StopActiveMovement_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.NavMovementComponent.IsSwimming
inline char UNavMovementComponent::IsSwimming() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsSwimming");

	struct IsSwimming_Params {
		
		char ReturnValue;

	}; IsSwimming_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.NavMovementComponent.IsMovingOnGround
inline char UNavMovementComponent::IsMovingOnGround() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsMovingOnGround");

	struct IsMovingOnGround_Params {
		
		char ReturnValue;

	}; IsMovingOnGround_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.NavMovementComponent.IsFlying
inline char UNavMovementComponent::IsFlying() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsFlying");

	struct IsFlying_Params {
		
		char ReturnValue;

	}; IsFlying_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.NavMovementComponent.IsFalling
inline char UNavMovementComponent::IsFalling() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsFalling");

	struct IsFalling_Params {
		
		char ReturnValue;

	}; IsFalling_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.NavMovementComponent.IsCrouching
inline char UNavMovementComponent::IsCrouching() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsCrouching");

	struct IsCrouching_Params {
		
		char ReturnValue;

	}; IsCrouching_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PawnMovementComponent.K2_GetInputVector
inline struct Unknown UPawnMovementComponent::K2_GetInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.K2_GetInputVector");

	struct K2_GetInputVector_Params {
		
		struct Unknown ReturnValue;

	}; K2_GetInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PawnMovementComponent.IsMoveInputIgnored
inline char UPawnMovementComponent::IsMoveInputIgnored() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.IsMoveInputIgnored");

	struct IsMoveInputIgnored_Params {
		
		char ReturnValue;

	}; IsMoveInputIgnored_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PawnMovementComponent.GetPendingInputVector
inline struct Unknown UPawnMovementComponent::GetPendingInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.GetPendingInputVector");

	struct GetPendingInputVector_Params {
		
		struct Unknown ReturnValue;

	}; GetPendingInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PawnMovementComponent.GetPawnOwner
inline struct Unknown UPawnMovementComponent::GetPawnOwner() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.GetPawnOwner");

	struct GetPawnOwner_Params {
		
		struct Unknown ReturnValue;

	}; GetPawnOwner_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PawnMovementComponent.GetLastInputVector
inline struct Unknown UPawnMovementComponent::GetLastInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.GetLastInputVector");

	struct GetLastInputVector_Params {
		
		struct Unknown ReturnValue;

	}; GetLastInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PawnMovementComponent.ConsumeInputVector
inline struct Unknown UPawnMovementComponent::ConsumeInputVector() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.ConsumeInputVector");

	struct ConsumeInputVector_Params {
		
		struct Unknown ReturnValue;

	}; ConsumeInputVector_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PawnMovementComponent.AddInputVector
inline void UPawnMovementComponent::AddInputVector(struct Unknown WorldVector, char bForce) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.AddInputVector");

	struct AddInputVector_Params {
		struct Unknown WorldVector;
		char bForce;
	}; AddInputVector_Params Params;

	Params.WorldVector = WorldVector;
	Params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.SetWalkableFloorZ
inline void UCharacterMovementComponent::SetWalkableFloorZ(float InWalkableFloorZ) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetWalkableFloorZ");

	struct SetWalkableFloorZ_Params {
		float InWalkableFloorZ;
	}; SetWalkableFloorZ_Params Params;

	Params.InWalkableFloorZ = InWalkableFloorZ;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.SetWalkableFloorAngle
inline void UCharacterMovementComponent::SetWalkableFloorAngle(float InWalkableFloorAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetWalkableFloorAngle");

	struct SetWalkableFloorAngle_Params {
		float InWalkableFloorAngle;
	}; SetWalkableFloorAngle_Params Params;

	Params.InWalkableFloorAngle = InWalkableFloorAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.SetMovementMode
inline void UCharacterMovementComponent::SetMovementMode(char NewMovementMode, char NewCustomMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetMovementMode");

	struct SetMovementMode_Params {
		char NewMovementMode;
		char NewCustomMode;
	}; SetMovementMode_Params Params;

	Params.NewMovementMode = NewMovementMode;
	Params.NewCustomMode = NewCustomMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask
inline void UCharacterMovementComponent::SetGroupsToIgnoreMask(struct Unknown& GroupMask) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask");

	struct SetGroupsToIgnoreMask_Params {
		struct Unknown& GroupMask;
	}; SetGroupsToIgnoreMask_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	GroupMask = Params.GroupMask;

}

// Function Engine.CharacterMovementComponent.SetGroupsToIgnore
inline void UCharacterMovementComponent::SetGroupsToIgnore(int32_t GroupFlags) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetGroupsToIgnore");

	struct SetGroupsToIgnore_Params {
		int32_t GroupFlags;
	}; SetGroupsToIgnore_Params Params;

	Params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask
inline void UCharacterMovementComponent::SetGroupsToAvoidMask(struct Unknown& GroupMask) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask");

	struct SetGroupsToAvoidMask_Params {
		struct Unknown& GroupMask;
	}; SetGroupsToAvoidMask_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	GroupMask = Params.GroupMask;

}

// Function Engine.CharacterMovementComponent.SetGroupsToAvoid
inline void UCharacterMovementComponent::SetGroupsToAvoid(int32_t GroupFlags) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetGroupsToAvoid");

	struct SetGroupsToAvoid_Params {
		int32_t GroupFlags;
	}; SetGroupsToAvoid_Params Params;

	Params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask
inline void UCharacterMovementComponent::SetAvoidanceGroupMask(struct Unknown& GroupMask) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask");

	struct SetAvoidanceGroupMask_Params {
		struct Unknown& GroupMask;
	}; SetAvoidanceGroupMask_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	GroupMask = Params.GroupMask;

}

// Function Engine.CharacterMovementComponent.SetAvoidanceGroup
inline void UCharacterMovementComponent::SetAvoidanceGroup(int32_t GroupFlags) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetAvoidanceGroup");

	struct SetAvoidanceGroup_Params {
		int32_t GroupFlags;
	}; SetAvoidanceGroup_Params Params;

	Params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.SetAvoidanceEnabled
inline void UCharacterMovementComponent::SetAvoidanceEnabled(char bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetAvoidanceEnabled");

	struct SetAvoidanceEnabled_Params {
		char bEnable;
	}; SetAvoidanceEnabled_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
inline float UCharacterMovementComponent::K2_GetWalkableFloorZ() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ");

	struct K2_GetWalkableFloorZ_Params {
		
		float ReturnValue;

	}; K2_GetWalkableFloorZ_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
inline float UCharacterMovementComponent::K2_GetWalkableFloorAngle() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle");

	struct K2_GetWalkableFloorAngle_Params {
		
		float ReturnValue;

	}; K2_GetWalkableFloorAngle_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration
inline float UCharacterMovementComponent::K2_GetModifiedMaxAcceleration() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration");

	struct K2_GetModifiedMaxAcceleration_Params {
		
		float ReturnValue;

	}; K2_GetModifiedMaxAcceleration_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.K2_FindFloor
inline void UCharacterMovementComponent::K2_FindFloor(struct Unknown CapsuleLocation, struct Unknown& FloorResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_FindFloor");

	struct K2_FindFloor_Params {
		struct Unknown CapsuleLocation;
		struct Unknown& FloorResult;
	}; K2_FindFloor_Params Params;

	Params.CapsuleLocation = CapsuleLocation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	FloorResult = Params.FloorResult;

}

// Function Engine.CharacterMovementComponent.K2_ComputeFloorDist
inline void UCharacterMovementComponent::K2_ComputeFloorDist(struct Unknown CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct Unknown& FloorResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_ComputeFloorDist");

	struct K2_ComputeFloorDist_Params {
		struct Unknown CapsuleLocation;
		float LineDistance;
		float SweepDistance;
		float SweepRadius;
		struct Unknown& FloorResult;
	}; K2_ComputeFloorDist_Params Params;

	Params.CapsuleLocation = CapsuleLocation;
	Params.LineDistance = LineDistance;
	Params.SweepDistance = SweepDistance;
	Params.SweepRadius = SweepRadius;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	FloorResult = Params.FloorResult;

}

// Function Engine.CharacterMovementComponent.IsWalking
inline char UCharacterMovementComponent::IsWalking() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.IsWalking");

	struct IsWalking_Params {
		
		char ReturnValue;

	}; IsWalking_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.IsWalkable
inline char UCharacterMovementComponent::IsWalkable(struct Unknown& Hit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.IsWalkable");

	struct IsWalkable_Params {
		struct Unknown& Hit;
		char ReturnValue;

	}; IsWalkable_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Hit = Params.Hit;


	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetValidPerchRadius
inline float UCharacterMovementComponent::GetValidPerchRadius() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetValidPerchRadius");

	struct GetValidPerchRadius_Params {
		
		float ReturnValue;

	}; GetValidPerchRadius_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold
inline float UCharacterMovementComponent::GetPerchRadiusThreshold() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold");

	struct GetPerchRadiusThreshold_Params {
		
		float ReturnValue;

	}; GetPerchRadiusThreshold_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetMovementBase
inline struct Unknown UCharacterMovementComponent::GetMovementBase() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMovementBase");

	struct GetMovementBase_Params {
		
		struct Unknown ReturnValue;

	}; GetMovementBase_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetMinAnalogSpeed
inline float UCharacterMovementComponent::GetMinAnalogSpeed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMinAnalogSpeed");

	struct GetMinAnalogSpeed_Params {
		
		float ReturnValue;

	}; GetMinAnalogSpeed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime
inline float UCharacterMovementComponent::GetMaxJumpHeightWithJumpTime() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime");

	struct GetMaxJumpHeightWithJumpTime_Params {
		
		float ReturnValue;

	}; GetMaxJumpHeightWithJumpTime_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetMaxJumpHeight
inline float UCharacterMovementComponent::GetMaxJumpHeight() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMaxJumpHeight");

	struct GetMaxJumpHeight_Params {
		
		float ReturnValue;

	}; GetMaxJumpHeight_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration
inline float UCharacterMovementComponent::GetMaxBrakingDeceleration() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration");

	struct GetMaxBrakingDeceleration_Params {
		
		float ReturnValue;

	}; GetMaxBrakingDeceleration_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetMaxAcceleration
inline float UCharacterMovementComponent::GetMaxAcceleration() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMaxAcceleration");

	struct GetMaxAcceleration_Params {
		
		float ReturnValue;

	}; GetMaxAcceleration_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetLastUpdateVelocity
inline struct Unknown UCharacterMovementComponent::GetLastUpdateVelocity() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetLastUpdateVelocity");

	struct GetLastUpdateVelocity_Params {
		
		struct Unknown ReturnValue;

	}; GetLastUpdateVelocity_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetLastUpdateRotation
inline struct Unknown UCharacterMovementComponent::GetLastUpdateRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetLastUpdateRotation");

	struct GetLastUpdateRotation_Params {
		
		struct Unknown ReturnValue;

	}; GetLastUpdateRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetLastUpdateLocation
inline struct Unknown UCharacterMovementComponent::GetLastUpdateLocation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetLastUpdateLocation");

	struct GetLastUpdateLocation_Params {
		
		struct Unknown ReturnValue;

	}; GetLastUpdateLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
inline struct Unknown UCharacterMovementComponent::GetImpartedMovementBaseVelocity() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity");

	struct GetImpartedMovementBaseVelocity_Params {
		
		struct Unknown ReturnValue;

	}; GetImpartedMovementBaseVelocity_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetCurrentAcceleration
inline struct Unknown UCharacterMovementComponent::GetCurrentAcceleration() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetCurrentAcceleration");

	struct GetCurrentAcceleration_Params {
		
		struct Unknown ReturnValue;

	}; GetCurrentAcceleration_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetCharacterOwner
inline struct Unknown UCharacterMovementComponent::GetCharacterOwner() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetCharacterOwner");

	struct GetCharacterOwner_Params {
		
		struct Unknown ReturnValue;

	}; GetCharacterOwner_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.GetAnalogInputModifier
inline float UCharacterMovementComponent::GetAnalogInputModifier() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetAnalogInputModifier");

	struct GetAnalogInputModifier_Params {
		
		float ReturnValue;

	}; GetAnalogInputModifier_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CharacterMovementComponent.DisableMovement
inline void UCharacterMovementComponent::DisableMovement() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.DisableMovement");

	struct DisableMovement_Params {
		
	}; DisableMovement_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.ClearAccumulatedForces
inline void UCharacterMovementComponent::ClearAccumulatedForces() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ClearAccumulatedForces");

	struct ClearAccumulatedForces_Params {
		
	}; ClearAccumulatedForces_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.CapsuleTouched
inline void UCharacterMovementComponent::CapsuleTouched(struct Unknown OverlappedComp, struct Unknown Other, struct Unknown OtherComp, int32_t OtherBodyIndex, char bFromSweep, struct Unknown& SweepResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.CapsuleTouched");

	struct CapsuleTouched_Params {
		struct Unknown OverlappedComp;
		struct Unknown Other;
		struct Unknown OtherComp;
		int32_t OtherBodyIndex;
		char bFromSweep;
		struct Unknown& SweepResult;
	}; CapsuleTouched_Params Params;

	Params.OverlappedComp = OverlappedComp;
	Params.Other = Other;
	Params.OtherComp = OtherComp;
	Params.OtherBodyIndex = OtherBodyIndex;
	Params.bFromSweep = bFromSweep;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SweepResult = Params.SweepResult;

}

// Function Engine.CharacterMovementComponent.CalcVelocity
inline void UCharacterMovementComponent::CalcVelocity(float DeltaTime, float Friction, char bFluid, float BrakingDeceleration) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.CalcVelocity");

	struct CalcVelocity_Params {
		float DeltaTime;
		float Friction;
		char bFluid;
		float BrakingDeceleration;
	}; CalcVelocity_Params Params;

	Params.DeltaTime = DeltaTime;
	Params.Friction = Friction;
	Params.bFluid = bFluid;
	Params.BrakingDeceleration = BrakingDeceleration;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.AddImpulse
inline void UCharacterMovementComponent::AddImpulse(struct Unknown Impulse, char bVelocityChange) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.AddImpulse");

	struct AddImpulse_Params {
		struct Unknown Impulse;
		char bVelocityChange;
	}; AddImpulse_Params Params;

	Params.Impulse = Impulse;
	Params.bVelocityChange = bVelocityChange;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CharacterMovementComponent.AddForce
inline void UCharacterMovementComponent::AddForce(struct Unknown Force) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.AddForce");

	struct AddForce_Params {
		struct Unknown Force;
	}; AddForce_Params Params;

	Params.Force = Force;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCapture2D.OnInterpToggle
inline void ASceneCapture2D::OnInterpToggle(char bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2D.OnInterpToggle");

	struct OnInterpToggle_Params {
		char bEnable;
	}; OnInterpToggle_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.BoxComponent.SetBoxExtent
inline void UBoxComponent::SetBoxExtent(struct Unknown InBoxExtent, char bUpdateOverlaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BoxComponent.SetBoxExtent");

	struct SetBoxExtent_Params {
		struct Unknown InBoxExtent;
		char bUpdateOverlaps;
	}; SetBoxExtent_Params Params;

	Params.InBoxExtent = InBoxExtent;
	Params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.BoxComponent.GetUnscaledBoxExtent
inline struct Unknown UBoxComponent::GetUnscaledBoxExtent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BoxComponent.GetUnscaledBoxExtent");

	struct GetUnscaledBoxExtent_Params {
		
		struct Unknown ReturnValue;

	}; GetUnscaledBoxExtent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.BoxComponent.GetScaledBoxExtent
inline struct Unknown UBoxComponent::GetScaledBoxExtent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BoxComponent.GetScaledBoxExtent");

	struct GetScaledBoxExtent_Params {
		
		struct Unknown ReturnValue;

	}; GetScaledBoxExtent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CameraComponent.SetUseFieldOfViewForLOD
inline void UCameraComponent::SetUseFieldOfViewForLOD(char bInUseFieldOfViewForLOD) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetUseFieldOfViewForLOD");

	struct SetUseFieldOfViewForLOD_Params {
		char bInUseFieldOfViewForLOD;
	}; SetUseFieldOfViewForLOD_Params Params;

	Params.bInUseFieldOfViewForLOD = bInUseFieldOfViewForLOD;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetProjectionMode
inline void UCameraComponent::SetProjectionMode(char InProjectionMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetProjectionMode");

	struct SetProjectionMode_Params {
		char InProjectionMode;
	}; SetProjectionMode_Params Params;

	Params.InProjectionMode = InProjectionMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetPostProcessBlendWeight
inline void UCameraComponent::SetPostProcessBlendWeight(float InPostProcessBlendWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetPostProcessBlendWeight");

	struct SetPostProcessBlendWeight_Params {
		float InPostProcessBlendWeight;
	}; SetPostProcessBlendWeight_Params Params;

	Params.InPostProcessBlendWeight = InPostProcessBlendWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetOrthoWidth
inline void UCameraComponent::SetOrthoWidth(float InOrthoWidth) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetOrthoWidth");

	struct SetOrthoWidth_Params {
		float InOrthoWidth;
	}; SetOrthoWidth_Params Params;

	Params.InOrthoWidth = InOrthoWidth;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetOrthoNearClipPlane
inline void UCameraComponent::SetOrthoNearClipPlane(float InOrthoNearClipPlane) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetOrthoNearClipPlane");

	struct SetOrthoNearClipPlane_Params {
		float InOrthoNearClipPlane;
	}; SetOrthoNearClipPlane_Params Params;

	Params.InOrthoNearClipPlane = InOrthoNearClipPlane;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetOrthoFarClipPlane
inline void UCameraComponent::SetOrthoFarClipPlane(float InOrthoFarClipPlane) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetOrthoFarClipPlane");

	struct SetOrthoFarClipPlane_Params {
		float InOrthoFarClipPlane;
	}; SetOrthoFarClipPlane_Params Params;

	Params.InOrthoFarClipPlane = InOrthoFarClipPlane;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetFieldOfView
inline void UCameraComponent::SetFieldOfView(float InFieldOfView) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetFieldOfView");

	struct SetFieldOfView_Params {
		float InFieldOfView;
	}; SetFieldOfView_Params Params;

	Params.InFieldOfView = InFieldOfView;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetConstraintAspectRatio
inline void UCameraComponent::SetConstraintAspectRatio(char bInConstrainAspectRatio) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetConstraintAspectRatio");

	struct SetConstraintAspectRatio_Params {
		char bInConstrainAspectRatio;
	}; SetConstraintAspectRatio_Params Params;

	Params.bInConstrainAspectRatio = bInConstrainAspectRatio;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.SetAspectRatio
inline void UCameraComponent::SetAspectRatio(float InAspectRatio) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.SetAspectRatio");

	struct SetAspectRatio_Params {
		float InAspectRatio;
	}; SetAspectRatio_Params Params;

	Params.InAspectRatio = InAspectRatio;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.RemoveBlendable
inline void UCameraComponent::RemoveBlendable(struct TScriptInterface<IUnknown> InBlendableObject) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.RemoveBlendable");

	struct RemoveBlendable_Params {
		struct TScriptInterface<IUnknown> InBlendableObject;
	}; RemoveBlendable_Params Params;

	Params.InBlendableObject = InBlendableObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.OnCameraMeshHiddenChanged
inline void UCameraComponent::OnCameraMeshHiddenChanged() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.OnCameraMeshHiddenChanged");

	struct OnCameraMeshHiddenChanged_Params {
		
	}; OnCameraMeshHiddenChanged_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraComponent.GetCameraView
inline void UCameraComponent::GetCameraView(float DeltaTime, struct Unknown& DesiredView) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.GetCameraView");

	struct GetCameraView_Params {
		float DeltaTime;
		struct Unknown& DesiredView;
	}; GetCameraView_Params Params;

	Params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	DesiredView = Params.DesiredView;

}

// Function Engine.CameraComponent.AddOrUpdateBlendable
inline void UCameraComponent::AddOrUpdateBlendable(struct TScriptInterface<IUnknown> InBlendableObject, float InWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.AddOrUpdateBlendable");

	struct AddOrUpdateBlendable_Params {
		struct TScriptInterface<IUnknown> InBlendableObject;
		float InWeight;
	}; AddOrUpdateBlendable_Params Params;

	Params.InBlendableObject = InBlendableObject;
	Params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.Walk
inline void UCheatManager::Walk() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Walk");

	struct Walk_Params {
		
	}; Walk_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ViewSelf
inline void UCheatManager::ViewSelf() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewSelf");

	struct ViewSelf_Params {
		
	}; ViewSelf_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ViewPlayer
inline void UCheatManager::ViewPlayer(struct FString S) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewPlayer");

	struct ViewPlayer_Params {
		struct FString S;
	}; ViewPlayer_Params Params;

	Params.S = S;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ViewClass
inline void UCheatManager::ViewClass(struct Unknown* DesiredClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewClass");

	struct ViewClass_Params {
		struct Unknown* DesiredClass;
	}; ViewClass_Params Params;

	Params.DesiredClass = DesiredClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ViewActor
inline void UCheatManager::ViewActor(struct FName ActorName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewActor");

	struct ViewActor_Params {
		struct FName ActorName;
	}; ViewActor_Params Params;

	Params.ActorName = ActorName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.UpdateSafeArea
inline void UCheatManager::UpdateSafeArea() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.UpdateSafeArea");

	struct UpdateSafeArea_Params {
		
	}; UpdateSafeArea_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet
inline void UCheatManager::ToggleServerStatReplicatorUpdateStatNet() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet");

	struct ToggleServerStatReplicatorUpdateStatNet_Params {
		
	}; ToggleServerStatReplicatorUpdateStatNet_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite
inline void UCheatManager::ToggleServerStatReplicatorClientOverwrite() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite");

	struct ToggleServerStatReplicatorClientOverwrite_Params {
		
	}; ToggleServerStatReplicatorClientOverwrite_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ToggleDebugCamera
inline void UCheatManager::ToggleDebugCamera() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleDebugCamera");

	struct ToggleDebugCamera_Params {
		
	}; ToggleDebugCamera_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ToggleAILogging
inline void UCheatManager::ToggleAILogging() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleAILogging");

	struct ToggleAILogging_Params {
		
	}; ToggleAILogging_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.TestCollisionDistance
inline void UCheatManager::TestCollisionDistance() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestCollisionDistance");

	struct TestCollisionDistance_Params {
		
	}; TestCollisionDistance_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.Teleport
inline void UCheatManager::Teleport() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Teleport");

	struct Teleport_Params {
		
	}; Teleport_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.Summon
inline void UCheatManager::Summon(struct FString ClassName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Summon");

	struct Summon_Params {
		struct FString ClassName;
	}; Summon_Params Params;

	Params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.StreamLevelOut
inline void UCheatManager::StreamLevelOut(struct FName PackageName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelOut");

	struct StreamLevelOut_Params {
		struct FName PackageName;
	}; StreamLevelOut_Params Params;

	Params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.StreamLevelIn
inline void UCheatManager::StreamLevelIn(struct FName PackageName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelIn");

	struct StreamLevelIn_Params {
		struct FName PackageName;
	}; StreamLevelIn_Params Params;

	Params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.SpawnServerStatReplicator
inline void UCheatManager::SpawnServerStatReplicator() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SpawnServerStatReplicator");

	struct SpawnServerStatReplicator_Params {
		
	}; SpawnServerStatReplicator_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.Slomo
inline void UCheatManager::Slomo(float NewTimeDilation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Slomo");

	struct Slomo_Params {
		float NewTimeDilation;
	}; Slomo_Params Params;

	Params.NewTimeDilation = NewTimeDilation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.SetWorldOrigin
inline void UCheatManager::SetWorldOrigin() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetWorldOrigin");

	struct SetWorldOrigin_Params {
		
	}; SetWorldOrigin_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.SetReflexLatencyGraph
inline void UCheatManager::SetReflexLatencyGraph(int32_t Type, float Min, float MAX) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetReflexLatencyGraph");

	struct SetReflexLatencyGraph_Params {
		int32_t Type;
		float Min;
		float MAX;
	}; SetReflexLatencyGraph_Params Params;

	Params.Type = Type;
	Params.Min = Min;
	Params.MAX = MAX;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.SetMouseSensitivityToDefault
inline void UCheatManager::SetMouseSensitivityToDefault() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetMouseSensitivityToDefault");

	struct SetMouseSensitivityToDefault_Params {
		
	}; SetMouseSensitivityToDefault_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ServerToggleAILogging
inline void UCheatManager::ServerToggleAILogging() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ServerToggleAILogging");

	struct ServerToggleAILogging_Params {
		
	}; ServerToggleAILogging_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ReceiveInitCheatManager
inline void UCheatManager::ReceiveInitCheatManager() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ReceiveInitCheatManager");

	struct ReceiveInitCheatManager_Params {
		
	}; ReceiveInitCheatManager_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ReceiveEndPlay
inline void UCheatManager::ReceiveEndPlay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ReceiveEndPlay");

	struct ReceiveEndPlay_Params {
		
	}; ReceiveEndPlay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.PlayersOnly
inline void UCheatManager::PlayersOnly() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.PlayersOnly");

	struct PlayersOnly_Params {
		
	}; PlayersOnly_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.OnlyLoadLevel
inline void UCheatManager::OnlyLoadLevel(struct FName PackageName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnlyLoadLevel");

	struct OnlyLoadLevel_Params {
		struct FName PackageName;
	}; OnlyLoadLevel_Params Params;

	Params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.LogLoc
inline void UCheatManager::LogLoc() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.LogLoc");

	struct LogLoc_Params {
		
	}; LogLoc_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.InvertMouse
inline void UCheatManager::InvertMouse() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.InvertMouse");

	struct InvertMouse_Params {
		
	}; InvertMouse_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.God
inline void UCheatManager::God() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.God");

	struct God_Params {
		
	}; God_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.Ghost
inline void UCheatManager::Ghost() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Ghost");

	struct Ghost_Params {
		
	}; Ghost_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.FreezeFrame
inline void UCheatManager::FreezeFrame(float Delay) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FreezeFrame");

	struct FreezeFrame_Params {
		float Delay;
	}; FreezeFrame_Params Params;

	Params.Delay = Delay;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.Fly
inline void UCheatManager::Fly() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Fly");

	struct Fly_Params {
		
	}; Fly_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.FlushLog
inline void UCheatManager::FlushLog() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FlushLog");

	struct FlushLog_Params {
		
	}; FlushLog_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.EnableDebugCamera
inline void UCheatManager::EnableDebugCamera() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.EnableDebugCamera");

	struct EnableDebugCamera_Params {
		
	}; EnableDebugCamera_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DumpVoiceMutingState
inline void UCheatManager::DumpVoiceMutingState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpVoiceMutingState");

	struct DumpVoiceMutingState_Params {
		
	}; DumpVoiceMutingState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DumpPartyState
inline void UCheatManager::DumpPartyState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpPartyState");

	struct DumpPartyState_Params {
		
	}; DumpPartyState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DumpOnlineSessionState
inline void UCheatManager::DumpOnlineSessionState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpOnlineSessionState");

	struct DumpOnlineSessionState_Params {
		
	}; DumpOnlineSessionState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DumpChatState
inline void UCheatManager::DumpChatState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpChatState");

	struct DumpChatState_Params {
		
	}; DumpChatState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DisableDebugCamera
inline void UCheatManager::DisableDebugCamera() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DisableDebugCamera");

	struct DisableDebugCamera_Params {
		
	}; DisableDebugCamera_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DestroyTarget
inline void UCheatManager::DestroyTarget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyTarget");

	struct DestroyTarget_Params {
		
	}; DestroyTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DestroyServerStatReplicator
inline void UCheatManager::DestroyServerStatReplicator() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyServerStatReplicator");

	struct DestroyServerStatReplicator_Params {
		
	}; DestroyServerStatReplicator_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DestroyPawns
inline void UCheatManager::DestroyPawns(struct Unknown* aClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyPawns");

	struct DestroyPawns_Params {
		struct Unknown* aClass;
	}; DestroyPawns_Params Params;

	Params.aClass = aClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DestroyAllPawnsExceptTarget
inline void UCheatManager::DestroyAllPawnsExceptTarget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyAllPawnsExceptTarget");

	struct DestroyAllPawnsExceptTarget_Params {
		
	}; DestroyAllPawnsExceptTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DestroyAll
inline void UCheatManager::DestroyAll(struct Unknown* aClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyAll");

	struct DestroyAll_Params {
		struct Unknown* aClass;
	}; DestroyAll_Params Params;

	Params.aClass = aClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DebugCapsuleSweepSize
inline void UCheatManager::DebugCapsuleSweepSize(float HalfHeight, float Radius) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepSize");

	struct DebugCapsuleSweepSize_Params {
		float HalfHeight;
		float Radius;
	}; DebugCapsuleSweepSize_Params Params;

	Params.HalfHeight = HalfHeight;
	Params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DebugCapsuleSweepPawn
inline void UCheatManager::DebugCapsuleSweepPawn() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepPawn");

	struct DebugCapsuleSweepPawn_Params {
		
	}; DebugCapsuleSweepPawn_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DebugCapsuleSweepComplex
inline void UCheatManager::DebugCapsuleSweepComplex(char bTraceComplex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepComplex");

	struct DebugCapsuleSweepComplex_Params {
		char bTraceComplex;
	}; DebugCapsuleSweepComplex_Params Params;

	Params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DebugCapsuleSweepClear
inline void UCheatManager::DebugCapsuleSweepClear() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepClear");

	struct DebugCapsuleSweepClear_Params {
		
	}; DebugCapsuleSweepClear_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DebugCapsuleSweepChannel
inline void UCheatManager::DebugCapsuleSweepChannel(char Channel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepChannel");

	struct DebugCapsuleSweepChannel_Params {
		char Channel;
	}; DebugCapsuleSweepChannel_Params Params;

	Params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DebugCapsuleSweepCapture
inline void UCheatManager::DebugCapsuleSweepCapture() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepCapture");

	struct DebugCapsuleSweepCapture_Params {
		
	}; DebugCapsuleSweepCapture_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DebugCapsuleSweep
inline void UCheatManager::DebugCapsuleSweep() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweep");

	struct DebugCapsuleSweep_Params {
		
	}; DebugCapsuleSweep_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.DamageTarget
inline void UCheatManager::DamageTarget(float DamageAmount) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DamageTarget");

	struct DamageTarget_Params {
		float DamageAmount;
	}; DamageTarget_Params Params;

	Params.DamageAmount = DamageAmount;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.CheatScript
inline void UCheatManager::CheatScript(struct FString ScriptName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.CheatScript");

	struct CheatScript_Params {
		struct FString ScriptName;
	}; CheatScript_Params Params;

	Params.ScriptName = ScriptName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.ChangeSize
inline void UCheatManager::ChangeSize(float F) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ChangeSize");

	struct ChangeSize_Params {
		float F;
	}; ChangeSize_Params Params;

	Params.F = F;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.BugItStringCreator
inline void UCheatManager::BugItStringCreator(struct Unknown ViewLocation, struct Unknown ViewRotation, struct FString& GoString, struct FString& LocString) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugItStringCreator");

	struct BugItStringCreator_Params {
		struct Unknown ViewLocation;
		struct Unknown ViewRotation;
		struct FString& GoString;
		struct FString& LocString;
	}; BugItStringCreator_Params Params;

	Params.ViewLocation = ViewLocation;
	Params.ViewRotation = ViewRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	GoString = Params.GoString;
	LocString = Params.LocString;

}

// Function Engine.CheatManager.BugItGo
inline void UCheatManager::BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugItGo");

	struct BugItGo_Params {
		float X;
		float Y;
		float Z;
		float Pitch;
		float Yaw;
		float Roll;
	}; BugItGo_Params Params;

	Params.X = X;
	Params.Y = Y;
	Params.Z = Z;
	Params.Pitch = Pitch;
	Params.Yaw = Yaw;
	Params.Roll = Roll;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CheatManager.BugIt
inline void UCheatManager::BugIt(struct FString ScreenShotDescription) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugIt");

	struct BugIt_Params {
		struct FString ScreenShotDescription;
	}; BugIt_Params Params;

	Params.ScreenShotDescription = ScreenShotDescription;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MKDemoNetDriverEx.SetReplaySample
inline void UMKDemoNetDriverEx::SetReplaySample(struct Unknown Target, struct Unknown ReplaySample, char bSaveCheckpoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKDemoNetDriverEx.SetReplaySample");

	struct SetReplaySample_Params {
		struct Unknown Target;
		struct Unknown ReplaySample;
		char bSaveCheckpoint;
	}; SetReplaySample_Params Params;

	Params.Target = Target;
	Params.ReplaySample = ReplaySample;
	Params.bSaveCheckpoint = bSaveCheckpoint;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MKDemoNetDriverEx.GetReplaySampleArray
inline void UMKDemoNetDriverEx::GetReplaySampleArray(struct Unknown Target, struct TArray<Unknown>& OutReplaySampleArray) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKDemoNetDriverEx.GetReplaySampleArray");

	struct GetReplaySampleArray_Params {
		struct Unknown Target;
		struct TArray<Unknown>& OutReplaySampleArray;
	}; GetReplaySampleArray_Params Params;

	Params.Target = Target;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutReplaySampleArray = Params.OutReplaySampleArray;

}

// Function Engine.StaticMeshComponent.SetStaticMesh
inline char UStaticMeshComponent::SetStaticMesh(struct Unknown NewMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetStaticMesh");

	struct SetStaticMesh_Params {
		struct Unknown NewMesh;
		char ReturnValue;

	}; SetStaticMesh_Params Params;

	Params.NewMesh = NewMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMeshComponent.SetReverseCulling
inline void UStaticMeshComponent::SetReverseCulling(char ReverseCulling) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetReverseCulling");

	struct SetReverseCulling_Params {
		char ReverseCulling;
	}; SetReverseCulling_Params Params;

	Params.ReverseCulling = ReverseCulling;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StaticMeshComponent.SetForcedLodModel
inline void UStaticMeshComponent::SetForcedLodModel(int32_t NewForcedLodModel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetForcedLodModel");

	struct SetForcedLodModel_Params {
		int32_t NewForcedLodModel;
	}; SetForcedLodModel_Params Params;

	Params.NewForcedLodModel = NewForcedLodModel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias
inline void UStaticMeshComponent::SetDistanceFieldSelfShadowBias(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias");

	struct SetDistanceFieldSelfShadowBias_Params {
		float NewValue;
	}; SetDistanceFieldSelfShadowBias_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StaticMeshComponent.OnRep_StaticMesh
inline void UStaticMeshComponent::OnRep_StaticMesh(struct Unknown OldStaticMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.OnRep_StaticMesh");

	struct OnRep_StaticMesh_Params {
		struct Unknown OldStaticMesh;
	}; OnRep_StaticMesh_Params Params;

	Params.OldStaticMesh = OldStaticMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StaticMeshComponent.GetLocalBounds
inline void UStaticMeshComponent::GetLocalBounds(struct Unknown& Min, struct Unknown& MAX) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.GetLocalBounds");

	struct GetLocalBounds_Params {
		struct Unknown& Min;
		struct Unknown& MAX;
	}; GetLocalBounds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Min = Params.Min;
	MAX = Params.MAX;

}

// Function Engine.MKGameInstanceEx.SetTargetCamera
inline void UMKGameInstanceEx::SetTargetCamera(char bKiller) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKGameInstanceEx.SetTargetCamera");

	struct SetTargetCamera_Params {
		char bKiller;
	}; SetTargetCamera_Params Params;

	Params.bKiller = bKiller;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MKGameInstanceEx.PlayReplayCommand
inline void UMKGameInstanceEx::PlayReplayCommand(struct FString DemoName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKGameInstanceEx.PlayReplayCommand");

	struct PlayReplayCommand_Params {
		struct FString DemoName;
	}; PlayReplayCommand_Params Params;

	Params.DemoName = DemoName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MKGameInstanceEx.PlayReplay
inline char UMKGameInstanceEx::PlayReplay(struct Unknown LocalPlayer, struct FString DemoName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKGameInstanceEx.PlayReplay");

	struct PlayReplay_Params {
		struct Unknown LocalPlayer;
		struct FString DemoName;
		char ReturnValue;

	}; PlayReplay_Params Params;

	Params.LocalPlayer = LocalPlayer;
	Params.DemoName = DemoName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// DelegateFunction Engine.MKGameInstanceEx.OnKeepAndDeleteOldVersionReplaysCompleteEvent__DelegateSignature
inline void UMKGameInstanceEx::OnKeepAndDeleteOldVersionReplaysCompleteEvent__DelegateSignature() {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.MKGameInstanceEx.OnKeepAndDeleteOldVersionReplaysCompleteEvent__DelegateSignature");

	struct OnKeepAndDeleteOldVersionReplaysCompleteEvent__DelegateSignature_Params {
		
	}; OnKeepAndDeleteOldVersionReplaysCompleteEvent__DelegateSignature_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// DelegateFunction Engine.MKGameInstanceEx.OnKeepAndDeleteOldestReplaysCompleteEvent__DelegateSignature
inline void UMKGameInstanceEx::OnKeepAndDeleteOldestReplaysCompleteEvent__DelegateSignature(int32_t nRemainedReplays, char bSuccess) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.MKGameInstanceEx.OnKeepAndDeleteOldestReplaysCompleteEvent__DelegateSignature");

	struct OnKeepAndDeleteOldestReplaysCompleteEvent__DelegateSignature_Params {
		int32_t nRemainedReplays;
		char bSuccess;
	}; OnKeepAndDeleteOldestReplaysCompleteEvent__DelegateSignature_Params Params;

	Params.nRemainedReplays = nRemainedReplays;
	Params.bSuccess = bSuccess;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// DelegateFunction Engine.MKGameInstanceEx.OnEnumerateStreamsCompleteEvent__DelegateSignature
inline void UMKGameInstanceEx::OnEnumerateStreamsCompleteEvent__DelegateSignature(int32_t OutPageIndex, int32_t OutPageSize) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.MKGameInstanceEx.OnEnumerateStreamsCompleteEvent__DelegateSignature");

	struct OnEnumerateStreamsCompleteEvent__DelegateSignature_Params {
		int32_t OutPageIndex;
		int32_t OutPageSize;
	}; OnEnumerateStreamsCompleteEvent__DelegateSignature_Params Params;

	Params.OutPageIndex = OutPageIndex;
	Params.OutPageSize = OutPageSize;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// DelegateFunction Engine.MKGameInstanceEx.OnDeleteStreamCompleteEvent__DelegateSignature
inline void UMKGameInstanceEx::OnDeleteStreamCompleteEvent__DelegateSignature(struct FString StreamName, char bSuccess) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.MKGameInstanceEx.OnDeleteStreamCompleteEvent__DelegateSignature");

	struct OnDeleteStreamCompleteEvent__DelegateSignature_Params {
		struct FString StreamName;
		char bSuccess;
	}; OnDeleteStreamCompleteEvent__DelegateSignature_Params Params;

	Params.StreamName = StreamName;
	Params.bSuccess = bSuccess;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MKGameInstanceEx.GetVictimNetGuid
inline struct FString UMKGameInstanceEx::GetVictimNetGuid() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKGameInstanceEx.GetVictimNetGuid");

	struct GetVictimNetGuid_Params {
		
		struct FString ReturnValue;

	}; GetVictimNetGuid_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MKGameInstanceEx.GetNumOfReplays
inline void UMKGameInstanceEx::GetNumOfReplays(int32_t& TotalReplays, int32_t& ReplaysToKeep) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKGameInstanceEx.GetNumOfReplays");

	struct GetNumOfReplays_Params {
		int32_t& TotalReplays;
		int32_t& ReplaysToKeep;
	}; GetNumOfReplays_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	TotalReplays = Params.TotalReplays;
	ReplaysToKeep = Params.ReplaysToKeep;

}

// Function Engine.MKGameInstanceEx.GetKillerNetGuid
inline struct FString UMKGameInstanceEx::GetKillerNetGuid() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKGameInstanceEx.GetKillerNetGuid");

	struct GetKillerNetGuid_Params {
		
		struct FString ReturnValue;

	}; GetKillerNetGuid_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MKGameInstanceEx.EnumerateReplayList
inline void UMKGameInstanceEx::EnumerateReplayList(int32_t PageIndex, int32_t PageSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MKGameInstanceEx.EnumerateReplayList");

	struct EnumerateReplayList_Params {
		int32_t PageIndex;
		int32_t PageSize;
	}; EnumerateReplayList_Params Params;

	Params.PageIndex = PageIndex;
	Params.PageSize = PageSize;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameInstance.ReceiveShutdown
inline void UGameInstance::ReceiveShutdown() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.ReceiveShutdown");

	struct ReceiveShutdown_Params {
		
	}; ReceiveShutdown_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameInstance.ReceiveInit
inline void UGameInstance::ReceiveInit() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.ReceiveInit");

	struct ReceiveInit_Params {
		
	}; ReceiveInit_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameInstance.HandleTravelError
inline void UGameInstance::HandleTravelError(char FailureType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.HandleTravelError");

	struct HandleTravelError_Params {
		char FailureType;
	}; HandleTravelError_Params Params;

	Params.FailureType = FailureType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameInstance.HandleNetworkError
inline void UGameInstance::HandleNetworkError(char FailureType, char bIsServer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.HandleNetworkError");

	struct HandleNetworkError_Params {
		char FailureType;
		char bIsServer;
	}; HandleNetworkError_Params Params;

	Params.FailureType = FailureType;
	Params.bIsServer = bIsServer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameInstance.DebugRemovePlayer
inline void UGameInstance::DebugRemovePlayer(int32_t ControllerId) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.DebugRemovePlayer");

	struct DebugRemovePlayer_Params {
		int32_t ControllerId;
	}; DebugRemovePlayer_Params Params;

	Params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameInstance.DebugCreatePlayer
inline void UGameInstance::DebugCreatePlayer(int32_t ControllerId) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.DebugCreatePlayer");

	struct DebugCreatePlayer_Params {
		int32_t ControllerId;
	}; DebugCreatePlayer_Params Params;

	Params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
inline char UInstancedStaticMeshComponent::UpdateInstanceTransform(int32_t InstanceIndex, struct Unknown& NewInstanceTransform, char bWorldSpace, char bMarkRenderStateDirty, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform");

	struct UpdateInstanceTransform_Params {
		int32_t InstanceIndex;
		struct Unknown& NewInstanceTransform;
		char bWorldSpace;
		char bMarkRenderStateDirty;
		char bTeleport;
		char ReturnValue;

	}; UpdateInstanceTransform_Params Params;

	Params.InstanceIndex = InstanceIndex;
	Params.bWorldSpace = bWorldSpace;
	Params.bMarkRenderStateDirty = bMarkRenderStateDirty;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewInstanceTransform = Params.NewInstanceTransform;


	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.SetCustomDataValue
inline char UInstancedStaticMeshComponent::SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, char bMarkRenderStateDirty) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.SetCustomDataValue");

	struct SetCustomDataValue_Params {
		int32_t InstanceIndex;
		int32_t CustomDataIndex;
		float CustomDataValue;
		char bMarkRenderStateDirty;
		char ReturnValue;

	}; SetCustomDataValue_Params Params;

	Params.InstanceIndex = InstanceIndex;
	Params.CustomDataIndex = CustomDataIndex;
	Params.CustomDataValue = CustomDataValue;
	Params.bMarkRenderStateDirty = bMarkRenderStateDirty;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.SetCullDistances
inline void UInstancedStaticMeshComponent::SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.SetCullDistances");

	struct SetCullDistances_Params {
		int32_t StartCullDistance;
		int32_t EndCullDistance;
	}; SetCullDistances_Params Params;

	Params.StartCullDistance = StartCullDistance;
	Params.EndCullDistance = EndCullDistance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.InstancedStaticMeshComponent.RemoveInstance
inline char UInstancedStaticMeshComponent::RemoveInstance(int32_t InstanceIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.RemoveInstance");

	struct RemoveInstance_Params {
		int32_t InstanceIndex;
		char ReturnValue;

	}; RemoveInstance_Params Params;

	Params.InstanceIndex = InstanceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.GetInstanceTransform
inline char UInstancedStaticMeshComponent::GetInstanceTransform(int32_t InstanceIndex, struct Unknown& OutInstanceTransform, char bWorldSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetInstanceTransform");

	struct GetInstanceTransform_Params {
		int32_t InstanceIndex;
		struct Unknown& OutInstanceTransform;
		char bWorldSpace;
		char ReturnValue;

	}; GetInstanceTransform_Params Params;

	Params.InstanceIndex = InstanceIndex;
	Params.bWorldSpace = bWorldSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutInstanceTransform = Params.OutInstanceTransform;


	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
inline struct TArray<Unknown> UInstancedStaticMeshComponent::GetInstancesOverlappingSphere(struct Unknown& Center, float Radius, char bSphereInWorldSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere");

	struct GetInstancesOverlappingSphere_Params {
		struct Unknown& Center;
		float Radius;
		char bSphereInWorldSpace;
		struct TArray<Unknown> ReturnValue;

	}; GetInstancesOverlappingSphere_Params Params;

	Params.Radius = Radius;
	Params.bSphereInWorldSpace = bSphereInWorldSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Center = Params.Center;


	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox
inline struct TArray<Unknown> UInstancedStaticMeshComponent::GetInstancesOverlappingBox(struct Unknown& Box, char bBoxInWorldSpace) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox");

	struct GetInstancesOverlappingBox_Params {
		struct Unknown& Box;
		char bBoxInWorldSpace;
		struct TArray<Unknown> ReturnValue;

	}; GetInstancesOverlappingBox_Params Params;

	Params.bBoxInWorldSpace = bBoxInWorldSpace;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Box = Params.Box;


	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.GetInstanceCount
inline int32_t UInstancedStaticMeshComponent::GetInstanceCount() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetInstanceCount");

	struct GetInstanceCount_Params {
		
		int32_t ReturnValue;

	}; GetInstanceCount_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.ClearInstances
inline void UInstancedStaticMeshComponent::ClearInstances(char bClearBodies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.ClearInstances");

	struct ClearInstances_Params {
		char bClearBodies;
	}; ClearInstances_Params Params;

	Params.bClearBodies = bClearBodies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms
inline char UInstancedStaticMeshComponent::BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, struct TArray<Unknown>& NewInstancesTransforms, char bWorldSpace, char bMarkRenderStateDirty, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms");

	struct BatchUpdateInstancesTransforms_Params {
		int32_t StartInstanceIndex;
		struct TArray<Unknown>& NewInstancesTransforms;
		char bWorldSpace;
		char bMarkRenderStateDirty;
		char bTeleport;
		char ReturnValue;

	}; BatchUpdateInstancesTransforms_Params Params;

	Params.StartInstanceIndex = StartInstanceIndex;
	Params.bWorldSpace = bWorldSpace;
	Params.bMarkRenderStateDirty = bMarkRenderStateDirty;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewInstancesTransforms = Params.NewInstancesTransforms;


	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform
inline char UInstancedStaticMeshComponent::BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, struct Unknown& NewInstancesTransform, char bWorldSpace, char bMarkRenderStateDirty, char bTeleport) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform");

	struct BatchUpdateInstancesTransform_Params {
		int32_t StartInstanceIndex;
		int32_t NumInstances;
		struct Unknown& NewInstancesTransform;
		char bWorldSpace;
		char bMarkRenderStateDirty;
		char bTeleport;
		char ReturnValue;

	}; BatchUpdateInstancesTransform_Params Params;

	Params.StartInstanceIndex = StartInstanceIndex;
	Params.NumInstances = NumInstances;
	Params.bWorldSpace = bWorldSpace;
	Params.bMarkRenderStateDirty = bMarkRenderStateDirty;
	Params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewInstancesTransform = Params.NewInstancesTransform;


	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
inline int32_t UInstancedStaticMeshComponent::AddInstanceWorldSpace(struct Unknown& WorldTransform) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace");

	struct AddInstanceWorldSpace_Params {
		struct Unknown& WorldTransform;
		int32_t ReturnValue;

	}; AddInstanceWorldSpace_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldTransform = Params.WorldTransform;


	return params.ReturnValue;
}

// Function Engine.InstancedStaticMeshComponent.AddInstance
inline int32_t UInstancedStaticMeshComponent::AddInstance(struct Unknown& InstanceTransform) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.AddInstance");

	struct AddInstance_Params {
		struct Unknown& InstanceTransform;
		int32_t ReturnValue;

	}; AddInstance_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InstanceTransform = Params.InstanceTransform;


	return params.ReturnValue;
}

// Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances
inline char UHierarchicalInstancedStaticMeshComponent::RemoveInstances(struct TArray<Unknown>& InstancesToRemove) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances");

	struct RemoveInstances_Params {
		struct TArray<Unknown>& InstancesToRemove;
		char ReturnValue;

	}; RemoveInstances_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InstancesToRemove = Params.InstancesToRemove;


	return params.ReturnValue;
}

// Function Engine.HierarchicalInstancedStaticMeshComponent.DisableInstance
inline char UHierarchicalInstancedStaticMeshComponent::DisableInstance(int32_t InstanceIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HierarchicalInstancedStaticMeshComponent.DisableInstance");

	struct DisableInstance_Params {
		int32_t InstanceIndex;
		char ReturnValue;

	}; DisableInstance_Params Params;

	Params.InstanceIndex = InstanceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.ToggleReplayPauseAndResume
inline void AMK3DReplayController::ToggleReplayPauseAndResume() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.ToggleReplayPauseAndResume");

	struct ToggleReplayPauseAndResume_Params {
		
	}; ToggleReplayPauseAndResume_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.TimerFuncPendingSetPlayerCameraNetGuid
inline void AMK3DReplayController::TimerFuncPendingSetPlayerCameraNetGuid() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.TimerFuncPendingSetPlayerCameraNetGuid");

	struct TimerFuncPendingSetPlayerCameraNetGuid_Params {
		
	}; TimerFuncPendingSetPlayerCameraNetGuid_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.TimerFuncPendingSetPlayerCamera
inline void AMK3DReplayController::TimerFuncPendingSetPlayerCamera() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.TimerFuncPendingSetPlayerCamera");

	struct TimerFuncPendingSetPlayerCamera_Params {
		
	}; TimerFuncPendingSetPlayerCamera_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.TimerFuncClearTimerSetPlayerCameraNetGuid
inline void AMK3DReplayController::TimerFuncClearTimerSetPlayerCameraNetGuid() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.TimerFuncClearTimerSetPlayerCameraNetGuid");

	struct TimerFuncClearTimerSetPlayerCameraNetGuid_Params {
		
	}; TimerFuncClearTimerSetPlayerCameraNetGuid_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.TimerFuncClearTimerSetPlayerCamera
inline void AMK3DReplayController::TimerFuncClearTimerSetPlayerCamera() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.TimerFuncClearTimerSetPlayerCamera");

	struct TimerFuncClearTimerSetPlayerCamera_Params {
		
	}; TimerFuncClearTimerSetPlayerCamera_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.ShowInGameReplayHUD
inline void AMK3DReplayController::ShowInGameReplayHUD() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.ShowInGameReplayHUD");

	struct ShowInGameReplayHUD_Params {
		
	}; ShowInGameReplayHUD_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.SetSpeedByIndex
inline void AMK3DReplayController::SetSpeedByIndex(int32_t WantSpeedIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.SetSpeedByIndex");

	struct SetSpeedByIndex_Params {
		int32_t WantSpeedIndex;
	}; SetSpeedByIndex_Params Params;

	Params.WantSpeedIndex = WantSpeedIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.SetSpeed
inline void AMK3DReplayController::SetSpeed(float PlayTimeDilation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.SetSpeed");

	struct SetSpeed_Params {
		float PlayTimeDilation;
	}; SetSpeed_Params Params;

	Params.PlayTimeDilation = PlayTimeDilation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.SetPlayerCamera
inline char AMK3DReplayController::SetPlayerCamera(struct FString TargetName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.SetPlayerCamera");

	struct SetPlayerCamera_Params {
		struct FString TargetName;
		char ReturnValue;

	}; SetPlayerCamera_Params Params;

	Params.TargetName = TargetName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.SetKillcamTargetCamera
inline void AMK3DReplayController::SetKillcamTargetCamera(char bKiller) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.SetKillcamTargetCamera");

	struct SetKillcamTargetCamera_Params {
		char bKiller;
	}; SetKillcamTargetCamera_Params Params;

	Params.bKiller = bKiller;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.SetFreeCamera
inline char AMK3DReplayController::SetFreeCamera(struct Unknown& Pos, struct Unknown& Rot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.SetFreeCamera");

	struct SetFreeCamera_Params {
		struct Unknown& Pos;
		struct Unknown& Rot;
		char ReturnValue;

	}; SetFreeCamera_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Pos = Params.Pos;
	Rot = Params.Rot;


	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.ResumeReplay
inline char AMK3DReplayController::ResumeReplay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.ResumeReplay");

	struct ResumeReplay_Params {
		
		char ReturnValue;

	}; ResumeReplay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.RestoreCameraLag
inline void AMK3DReplayController::RestoreCameraLag() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.RestoreCameraLag");

	struct RestoreCameraLag_Params {
		
	}; RestoreCameraLag_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.PauseReplay
inline char AMK3DReplayController::PauseReplay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.PauseReplay");

	struct PauseReplay_Params {
		
		char ReturnValue;

	}; PauseReplay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// DelegateFunction Engine.MK3DReplayController.OnSetSpeedDelegate__DelegateSignature
inline void AMK3DReplayController::OnSetSpeedDelegate__DelegateSignature() {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.MK3DReplayController.OnSetSpeedDelegate__DelegateSignature");

	struct OnSetSpeedDelegate__DelegateSignature_Params {
		
	}; OnSetSpeedDelegate__DelegateSignature_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// DelegateFunction Engine.MK3DReplayController.OnReplayPause__DelegateSignature
inline void AMK3DReplayController::OnReplayPause__DelegateSignature(char bPaused) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.MK3DReplayController.OnReplayPause__DelegateSignature");

	struct OnReplayPause__DelegateSignature_Params {
		char bPaused;
	}; OnReplayPause__DelegateSignature_Params Params;

	Params.bPaused = bPaused;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// DelegateFunction Engine.MK3DReplayController.OnReplayJumpComplete__DelegateSignature
inline void AMK3DReplayController::OnReplayJumpComplete__DelegateSignature(char bSuccess) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.MK3DReplayController.OnReplayJumpComplete__DelegateSignature");

	struct OnReplayJumpComplete__DelegateSignature_Params {
		char bSuccess;
	}; OnReplayJumpComplete__DelegateSignature_Params Params;

	Params.bSuccess = bSuccess;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// DelegateFunction Engine.MK3DReplayController.OnReplayJump__DelegateSignature
inline void AMK3DReplayController::OnReplayJump__DelegateSignature(float TimeInSec) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.MK3DReplayController.OnReplayJump__DelegateSignature");

	struct OnReplayJump__DelegateSignature_Params {
		float TimeInSec;
	}; OnReplayJump__DelegateSignature_Params Params;

	Params.TimeInSec = TimeInSec;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.OnGoToEndTime
inline void AMK3DReplayController::OnGoToEndTime() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.OnGoToEndTime");

	struct OnGoToEndTime_Params {
		
	}; OnGoToEndTime_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.OnGoToBeginTime
inline void AMK3DReplayController::OnGoToBeginTime() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.OnGoToBeginTime");

	struct OnGoToBeginTime_Params {
		
	}; OnGoToBeginTime_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.OnFreeCamera
inline void AMK3DReplayController::OnFreeCamera() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.OnFreeCamera");

	struct OnFreeCamera_Params {
		
	}; OnFreeCamera_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.OnFindActorsByCursorStop
inline void AMK3DReplayController::OnFindActorsByCursorStop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.OnFindActorsByCursorStop");

	struct OnFindActorsByCursorStop_Params {
		
	}; OnFindActorsByCursorStop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.OnFindActorsByCursorStart
inline void AMK3DReplayController::OnFindActorsByCursorStart() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.OnFindActorsByCursorStart");

	struct OnFindActorsByCursorStart_Params {
		
	}; OnFindActorsByCursorStart_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.MK3DReplayController_EnableReplayKillcamUI
inline void AMK3DReplayController::MK3DReplayController_EnableReplayKillcamUI(char bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.MK3DReplayController_EnableReplayKillcamUI");

	struct MK3DReplayController_EnableReplayKillcamUI_Params {
		char bEnable;
	}; MK3DReplayController_EnableReplayKillcamUI_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.IsReplaying
inline char AMK3DReplayController::IsReplaying() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.IsReplaying");

	struct IsReplaying_Params {
		
		char ReturnValue;

	}; IsReplaying_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.IsPlayingReplay
inline char AMK3DReplayController::IsPlayingReplay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.IsPlayingReplay");

	struct IsPlayingReplay_Params {
		
		char ReturnValue;

	}; IsPlayingReplay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.IsPlayingLiveReplay
inline char AMK3DReplayController::IsPlayingLiveReplay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.IsPlayingLiveReplay");

	struct IsPlayingLiveReplay_Params {
		
		char ReturnValue;

	}; IsPlayingLiveReplay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.IsPlayingKillcamAndBlockUI
inline char AMK3DReplayController::IsPlayingKillcamAndBlockUI() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.IsPlayingKillcamAndBlockUI");

	struct IsPlayingKillcamAndBlockUI_Params {
		
		char ReturnValue;

	}; IsPlayingKillcamAndBlockUI_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.IsPlayingKillcam
inline char AMK3DReplayController::IsPlayingKillcam() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.IsPlayingKillcam");

	struct IsPlayingKillcam_Params {
		
		char ReturnValue;

	}; IsPlayingKillcam_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.IsPlayerViewMode
inline char AMK3DReplayController::IsPlayerViewMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.IsPlayerViewMode");

	struct IsPlayerViewMode_Params {
		
		char ReturnValue;

	}; IsPlayerViewMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.IsPlayerCamera
inline char AMK3DReplayController::IsPlayerCamera() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.IsPlayerCamera");

	struct IsPlayerCamera_Params {
		
		char ReturnValue;

	}; IsPlayerCamera_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.IsPaused
inline char AMK3DReplayController::IsPaused() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.IsPaused");

	struct IsPaused_Params {
		
		char ReturnValue;

	}; IsPaused_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.IsFreeCamera
inline char AMK3DReplayController::IsFreeCamera() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.IsFreeCamera");

	struct IsFreeCamera_Params {
		
		char ReturnValue;

	}; IsFreeCamera_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.IsFollowViewMode
inline char AMK3DReplayController::IsFollowViewMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.IsFollowViewMode");

	struct IsFollowViewMode_Params {
		
		char ReturnValue;

	}; IsFollowViewMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.IncreaseSpeedByIndex
inline void AMK3DReplayController::IncreaseSpeedByIndex() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.IncreaseSpeedByIndex");

	struct IncreaseSpeedByIndex_Params {
		
	}; IncreaseSpeedByIndex_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DReplayController.GetTotalTimeInSec
inline float AMK3DReplayController::GetTotalTimeInSec() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.GetTotalTimeInSec");

	struct GetTotalTimeInSec_Params {
		
		float ReturnValue;

	}; GetTotalTimeInSec_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.GetTargetPlayer
inline struct Unknown AMK3DReplayController::GetTargetPlayer() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.GetTargetPlayer");

	struct GetTargetPlayer_Params {
		
		struct Unknown ReturnValue;

	}; GetTargetPlayer_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.GetSpeed
inline float AMK3DReplayController::GetSpeed() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.GetSpeed");

	struct GetSpeed_Params {
		
		float ReturnValue;

	}; GetSpeed_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.GetReplayJumpDelay
inline float AMK3DReplayController::GetReplayJumpDelay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.GetReplayJumpDelay");

	struct GetReplayJumpDelay_Params {
		
		float ReturnValue;

	}; GetReplayJumpDelay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.GetReplayCameraType
inline enum class Unknow AMK3DReplayController::GetReplayCameraType() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.GetReplayCameraType");

	struct GetReplayCameraType_Params {
		
		enum class Unknow ReturnValue;

	}; GetReplayCameraType_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.GetPlayerCharacter
inline struct Unknown AMK3DReplayController::GetPlayerCharacter() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.GetPlayerCharacter");

	struct GetPlayerCharacter_Params {
		
		struct Unknown ReturnValue;

	}; GetPlayerCharacter_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.GetLatestReplayCameraType
inline enum class Unknow AMK3DReplayController::GetLatestReplayCameraType() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.GetLatestReplayCameraType");

	struct GetLatestReplayCameraType_Params {
		
		enum class Unknow ReturnValue;

	}; GetLatestReplayCameraType_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.GetCurrnetSpeedIndex
inline int32_t AMK3DReplayController::GetCurrnetSpeedIndex() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.GetCurrnetSpeedIndex");

	struct GetCurrnetSpeedIndex_Params {
		
		int32_t ReturnValue;

	}; GetCurrnetSpeedIndex_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.GetCurrentTimeInSec
inline float AMK3DReplayController::GetCurrentTimeInSec() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.GetCurrentTimeInSec");

	struct GetCurrentTimeInSec_Params {
		
		float ReturnValue;

	}; GetCurrentTimeInSec_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.FindViewTargetByName
inline char AMK3DReplayController::FindViewTargetByName(struct FString TargetName, struct Unknown& OutTarget) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.FindViewTargetByName");

	struct FindViewTargetByName_Params {
		struct FString TargetName;
		struct Unknown& OutTarget;
		char ReturnValue;

	}; FindViewTargetByName_Params Params;

	Params.TargetName = TargetName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutTarget = Params.OutTarget;


	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.FindSpeedIndex
inline int32_t AMK3DReplayController::FindSpeedIndex(float fSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.FindSpeedIndex");

	struct FindSpeedIndex_Params {
		float fSpeed;
		int32_t ReturnValue;

	}; FindSpeedIndex_Params Params;

	Params.fSpeed = fSpeed;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MK3DReplayController.DecreaseSpeedByIndex
inline void AMK3DReplayController::DecreaseSpeedByIndex() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DReplayController.DecreaseSpeedByIndex");

	struct DecreaseSpeedByIndex_Params {
		
	}; DecreaseSpeedByIndex_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// DelegateFunction Engine.MK3DReplayController.ChangeViewModeDelegate__DelegateSignature
inline void AMK3DReplayController::ChangeViewModeDelegate__DelegateSignature(char ViewMode) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.MK3DReplayController.ChangeViewModeDelegate__DelegateSignature");

	struct ChangeViewModeDelegate__DelegateSignature_Params {
		char ViewMode;
	}; ChangeViewModeDelegate__DelegateSignature_Params Params;

	Params.ViewMode = ViewMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// DelegateFunction Engine.MK3DReplayController.ChangeCameraTypeDelegate__DelegateSignature
inline void AMK3DReplayController::ChangeCameraTypeDelegate__DelegateSignature(enum class Unknow CameraType, struct FString TargetPlayerName) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.MK3DReplayController.ChangeCameraTypeDelegate__DelegateSignature");

	struct ChangeCameraTypeDelegate__DelegateSignature_Params {
		enum class Unknow CameraType;
		struct FString TargetPlayerName;
	}; ChangeCameraTypeDelegate__DelegateSignature_Params Params;

	Params.CameraType = CameraType;
	Params.TargetPlayerName = TargetPlayerName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// DelegateFunction Engine.MK3DReplayController.ChangeCameraTypeByNetGuidDelegate__DelegateSignature
inline void AMK3DReplayController::ChangeCameraTypeByNetGuidDelegate__DelegateSignature(enum class Unknow CameraType, struct FString TargetPlayerNetGuid) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.MK3DReplayController.ChangeCameraTypeByNetGuidDelegate__DelegateSignature");

	struct ChangeCameraTypeByNetGuidDelegate__DelegateSignature_Params {
		enum class Unknow CameraType;
		struct FString TargetPlayerNetGuid;
	}; ChangeCameraTypeByNetGuidDelegate__DelegateSignature_Params Params;

	Params.CameraType = CameraType;
	Params.TargetPlayerNetGuid = TargetPlayerNetGuid;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DefaultPawn.TurnAtRate
inline void ADefaultPawn::TurnAtRate(float Rate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.TurnAtRate");

	struct TurnAtRate_Params {
		float Rate;
	}; TurnAtRate_Params Params;

	Params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DefaultPawn.MoveUp_World
inline void ADefaultPawn::MoveUp_World(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.MoveUp_World");

	struct MoveUp_World_Params {
		float Val;
	}; MoveUp_World_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DefaultPawn.MoveRight
inline void ADefaultPawn::MoveRight(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.MoveRight");

	struct MoveRight_Params {
		float Val;
	}; MoveRight_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DefaultPawn.MoveForward
inline void ADefaultPawn::MoveForward(float Val) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.MoveForward");

	struct MoveForward_Params {
		float Val;
	}; MoveForward_Params Params;

	Params.Val = Val;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DefaultPawn.LookUpAtRate
inline void ADefaultPawn::LookUpAtRate(float Rate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.LookUpAtRate");

	struct LookUpAtRate_Params {
		float Rate;
	}; LookUpAtRate_Params Params;

	Params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopCameraShake
inline void APlayerCameraManager::StopCameraShake(struct Unknown ShakeInstance, char bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopCameraShake");

	struct StopCameraShake_Params {
		struct Unknown ShakeInstance;
		char bImmediately;
	}; StopCameraShake_Params Params;

	Params.ShakeInstance = ShakeInstance;
	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopCameraFade
inline void APlayerCameraManager::StopCameraFade() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopCameraFade");

	struct StopCameraFade_Params {
		
	}; StopCameraFade_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopCameraAnimInst
inline void APlayerCameraManager::StopCameraAnimInst(struct Unknown AnimInst, char bImmediate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopCameraAnimInst");

	struct StopCameraAnimInst_Params {
		struct Unknown AnimInst;
		char bImmediate;
	}; StopCameraAnimInst_Params Params;

	Params.AnimInst = AnimInst;
	Params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource
inline void APlayerCameraManager::StopAllInstancesOfCameraShakeFromSource(struct Unknown SourceComponent, char bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource");

	struct StopAllInstancesOfCameraShakeFromSource_Params {
		struct Unknown SourceComponent;
		char bImmediately;
	}; StopAllInstancesOfCameraShakeFromSource_Params Params;

	Params.SourceComponent = SourceComponent;
	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
inline void APlayerCameraManager::StopAllInstancesOfCameraShake(struct Unknown* Shake, char bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake");

	struct StopAllInstancesOfCameraShake_Params {
		struct Unknown* Shake;
		char bImmediately;
	}; StopAllInstancesOfCameraShake_Params Params;

	Params.Shake = Shake;
	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim
inline void APlayerCameraManager::StopAllInstancesOfCameraAnim(struct Unknown Anim, char bImmediate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim");

	struct StopAllInstancesOfCameraAnim_Params {
		struct Unknown Anim;
		char bImmediate;
	}; StopAllInstancesOfCameraAnim_Params Params;

	Params.Anim = Anim;
	Params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopAllCameraShakes
inline void APlayerCameraManager::StopAllCameraShakes(char bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllCameraShakes");

	struct StopAllCameraShakes_Params {
		char bImmediately;
	}; StopAllCameraShakes_Params Params;

	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StopAllCameraAnims
inline void APlayerCameraManager::StopAllCameraAnims(char bImmediate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllCameraAnims");

	struct StopAllCameraAnims_Params {
		char bImmediate;
	}; StopAllCameraAnims_Params Params;

	Params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.StartCameraFade
inline void APlayerCameraManager::StartCameraFade(float FromAlpha, float ToAlpha, float Duration, struct Unknown Color, char bShouldFadeAudio, char bHoldWhenFinished) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StartCameraFade");

	struct StartCameraFade_Params {
		float FromAlpha;
		float ToAlpha;
		float Duration;
		struct Unknown Color;
		char bShouldFadeAudio;
		char bHoldWhenFinished;
	}; StartCameraFade_Params Params;

	Params.FromAlpha = FromAlpha;
	Params.ToAlpha = ToAlpha;
	Params.Duration = Duration;
	Params.Color = Color;
	Params.bShouldFadeAudio = bShouldFadeAudio;
	Params.bHoldWhenFinished = bHoldWhenFinished;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.SetManualCameraFade
inline void APlayerCameraManager::SetManualCameraFade(float InFadeAmount, struct Unknown Color, char bInFadeAudio) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.SetManualCameraFade");

	struct SetManualCameraFade_Params {
		float InFadeAmount;
		struct Unknown Color;
		char bInFadeAudio;
	}; SetManualCameraFade_Params Params;

	Params.InFadeAmount = InFadeAmount;
	Params.Color = Color;
	Params.bInFadeAudio = bInFadeAudio;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.SetGameCameraCutThisFrame
inline void APlayerCameraManager::SetGameCameraCutThisFrame() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.SetGameCameraCutThisFrame");

	struct SetGameCameraCutThisFrame_Params {
		
	}; SetGameCameraCutThisFrame_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.RemoveCameraModifier
inline char APlayerCameraManager::RemoveCameraModifier(struct Unknown ModifierToRemove) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.RemoveCameraModifier");

	struct RemoveCameraModifier_Params {
		struct Unknown ModifierToRemove;
		char ReturnValue;

	}; RemoveCameraModifier_Params Params;

	Params.ModifierToRemove = ModifierToRemove;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.RemoveCameraLensEffect
inline void APlayerCameraManager::RemoveCameraLensEffect(struct Unknown Emitter) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.RemoveCameraLensEffect");

	struct RemoveCameraLensEffect_Params {
		struct Unknown Emitter;
	}; RemoveCameraLensEffect_Params Params;

	Params.Emitter = Emitter;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.PlayCameraShakeFromSource
inline struct Unknown APlayerCameraManager::PlayCameraShakeFromSource(struct Unknown* ShakeClass, struct Unknown SourceComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.PlayCameraShakeFromSource");

	struct PlayCameraShakeFromSource_Params {
		struct Unknown* ShakeClass;
		struct Unknown SourceComponent;
		struct Unknown ReturnValue;

	}; PlayCameraShakeFromSource_Params Params;

	Params.ShakeClass = ShakeClass;
	Params.SourceComponent = SourceComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.PlayCameraShake
inline struct Unknown APlayerCameraManager::PlayCameraShake(struct Unknown* ShakeClass, float Scale, char PlaySpace, struct Unknown UserPlaySpaceRot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.PlayCameraShake");

	struct PlayCameraShake_Params {
		struct Unknown* ShakeClass;
		float Scale;
		char PlaySpace;
		struct Unknown UserPlaySpaceRot;
		struct Unknown ReturnValue;

	}; PlayCameraShake_Params Params;

	Params.ShakeClass = ShakeClass;
	Params.Scale = Scale;
	Params.PlaySpace = PlaySpace;
	Params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.PlayCameraAnim
inline struct Unknown APlayerCameraManager::PlayCameraAnim(struct Unknown Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, char bLoop, char bRandomStartTime, float Duration, char PlaySpace, struct Unknown UserPlaySpaceRot) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.PlayCameraAnim");

	struct PlayCameraAnim_Params {
		struct Unknown Anim;
		float Rate;
		float Scale;
		float BlendInTime;
		float BlendOutTime;
		char bLoop;
		char bRandomStartTime;
		float Duration;
		char PlaySpace;
		struct Unknown UserPlaySpaceRot;
		struct Unknown ReturnValue;

	}; PlayCameraAnim_Params Params;

	Params.Anim = Anim;
	Params.Rate = Rate;
	Params.Scale = Scale;
	Params.BlendInTime = BlendInTime;
	Params.BlendOutTime = BlendOutTime;
	Params.bLoop = bLoop;
	Params.bRandomStartTime = bRandomStartTime;
	Params.Duration = Duration;
	Params.PlaySpace = PlaySpace;
	Params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.PhotographyCameraModify
inline void APlayerCameraManager::PhotographyCameraModify(struct Unknown NewCameraLocation, struct Unknown PreviousCameraLocation, struct Unknown OriginalCameraLocation, struct Unknown& ResultCameraLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.PhotographyCameraModify");

	struct PhotographyCameraModify_Params {
		struct Unknown NewCameraLocation;
		struct Unknown PreviousCameraLocation;
		struct Unknown OriginalCameraLocation;
		struct Unknown& ResultCameraLocation;
	}; PhotographyCameraModify_Params Params;

	Params.NewCameraLocation = NewCameraLocation;
	Params.PreviousCameraLocation = PreviousCameraLocation;
	Params.OriginalCameraLocation = OriginalCameraLocation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ResultCameraLocation = Params.ResultCameraLocation;

}

// Function Engine.PlayerCameraManager.OnPhotographySessionStart
inline void APlayerCameraManager::OnPhotographySessionStart() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.OnPhotographySessionStart");

	struct OnPhotographySessionStart_Params {
		
	}; OnPhotographySessionStart_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.OnPhotographySessionEnd
inline void APlayerCameraManager::OnPhotographySessionEnd() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.OnPhotographySessionEnd");

	struct OnPhotographySessionEnd_Params {
		
	}; OnPhotographySessionEnd_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart
inline void APlayerCameraManager::OnPhotographyMultiPartCaptureStart() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart");

	struct OnPhotographyMultiPartCaptureStart_Params {
		
	}; OnPhotographyMultiPartCaptureStart_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd
inline void APlayerCameraManager::OnPhotographyMultiPartCaptureEnd() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd");

	struct OnPhotographyMultiPartCaptureEnd_Params {
		
	}; OnPhotographyMultiPartCaptureEnd_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.GetOwningPlayerController
inline struct Unknown APlayerCameraManager::GetOwningPlayerController() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetOwningPlayerController");

	struct GetOwningPlayerController_Params {
		
		struct Unknown ReturnValue;

	}; GetOwningPlayerController_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.GetFOVAngle
inline float APlayerCameraManager::GetFOVAngle() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetFOVAngle");

	struct GetFOVAngle_Params {
		
		float ReturnValue;

	}; GetFOVAngle_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.GetCameraRotation
inline struct Unknown APlayerCameraManager::GetCameraRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetCameraRotation");

	struct GetCameraRotation_Params {
		
		struct Unknown ReturnValue;

	}; GetCameraRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.GetCameraLocation
inline struct Unknown APlayerCameraManager::GetCameraLocation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetCameraLocation");

	struct GetCameraLocation_Params {
		
		struct Unknown ReturnValue;

	}; GetCameraLocation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.FindCameraModifierByClass
inline struct Unknown APlayerCameraManager::FindCameraModifierByClass(struct Unknown* ModifierClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.FindCameraModifierByClass");

	struct FindCameraModifierByClass_Params {
		struct Unknown* ModifierClass;
		struct Unknown ReturnValue;

	}; FindCameraModifierByClass_Params Params;

	Params.ModifierClass = ModifierClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.ClearCameraLensEffects
inline void APlayerCameraManager::ClearCameraLensEffects() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.ClearCameraLensEffects");

	struct ClearCameraLensEffects_Params {
		
	}; ClearCameraLensEffects_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerCameraManager.BlueprintUpdateCamera
inline char APlayerCameraManager::BlueprintUpdateCamera(struct Unknown CameraTarget, struct Unknown& NewCameraLocation, struct Unknown& NewCameraRotation, float& NewCameraFOV) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.BlueprintUpdateCamera");

	struct BlueprintUpdateCamera_Params {
		struct Unknown CameraTarget;
		struct Unknown& NewCameraLocation;
		struct Unknown& NewCameraRotation;
		float& NewCameraFOV;
		char ReturnValue;

	}; BlueprintUpdateCamera_Params Params;

	Params.CameraTarget = CameraTarget;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewCameraLocation = Params.NewCameraLocation;
	NewCameraRotation = Params.NewCameraRotation;
	NewCameraFOV = Params.NewCameraFOV;


	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.AddNewCameraModifier
inline struct Unknown APlayerCameraManager::AddNewCameraModifier(struct Unknown* ModifierClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.AddNewCameraModifier");

	struct AddNewCameraModifier_Params {
		struct Unknown* ModifierClass;
		struct Unknown ReturnValue;

	}; AddNewCameraModifier_Params Params;

	Params.ModifierClass = ModifierClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerCameraManager.AddCameraLensEffect
inline struct Unknown APlayerCameraManager::AddCameraLensEffect(struct Unknown* LensEffectEmitterClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.AddCameraLensEffect");

	struct AddCameraLensEffect_Params {
		struct Unknown* LensEffectEmitterClass;
		struct Unknown ReturnValue;

	}; AddCameraLensEffect_Params Params;

	Params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlayerState.ReceiveOverrideWith
inline void APlayerState::ReceiveOverrideWith(struct Unknown OldPlayerState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.ReceiveOverrideWith");

	struct ReceiveOverrideWith_Params {
		struct Unknown OldPlayerState;
	}; ReceiveOverrideWith_Params Params;

	Params.OldPlayerState = OldPlayerState;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.ReceiveCopyProperties
inline void APlayerState::ReceiveCopyProperties(struct Unknown NewPlayerState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.ReceiveCopyProperties");

	struct ReceiveCopyProperties_Params {
		struct Unknown NewPlayerState;
	}; ReceiveCopyProperties_Params Params;

	Params.NewPlayerState = NewPlayerState;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.OnRep_UniqueId
inline void APlayerState::OnRep_UniqueId() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_UniqueId");

	struct OnRep_UniqueId_Params {
		
	}; OnRep_UniqueId_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.OnRep_Score
inline void APlayerState::OnRep_Score() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_Score");

	struct OnRep_Score_Params {
		
	}; OnRep_Score_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.OnRep_PlayerName
inline void APlayerState::OnRep_PlayerName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_PlayerName");

	struct OnRep_PlayerName_Params {
		
	}; OnRep_PlayerName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.OnRep_PlayerId
inline void APlayerState::OnRep_PlayerId() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_PlayerId");

	struct OnRep_PlayerId_Params {
		
	}; OnRep_PlayerId_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.OnRep_bIsInactive
inline void APlayerState::OnRep_bIsInactive() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_bIsInactive");

	struct OnRep_bIsInactive_Params {
		
	}; OnRep_bIsInactive_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerState.GetPlayerName
inline struct FString APlayerState::GetPlayerName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.GetPlayerName");

	struct GetPlayerName_Params {
		
		struct FString ReturnValue;

	}; GetPlayerName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneCaptureComponent.ShowOnlyComponent
inline void USceneCaptureComponent::ShowOnlyComponent(struct Unknown InComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.ShowOnlyComponent");

	struct ShowOnlyComponent_Params {
		struct Unknown InComponent;
	}; ShowOnlyComponent_Params Params;

	Params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.ShowOnlyActorComponents
inline void USceneCaptureComponent::ShowOnlyActorComponents(struct Unknown InActor, char bIncludeFromChildActors) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.ShowOnlyActorComponents");

	struct ShowOnlyActorComponents_Params {
		struct Unknown InActor;
		char bIncludeFromChildActors;
	}; ShowOnlyActorComponents_Params Params;

	Params.InActor = InActor;
	Params.bIncludeFromChildActors = bIncludeFromChildActors;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.SetCaptureSortPriority
inline void USceneCaptureComponent::SetCaptureSortPriority(int32_t NewCaptureSortPriority) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.SetCaptureSortPriority");

	struct SetCaptureSortPriority_Params {
		int32_t NewCaptureSortPriority;
	}; SetCaptureSortPriority_Params Params;

	Params.NewCaptureSortPriority = NewCaptureSortPriority;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent
inline void USceneCaptureComponent::RemoveShowOnlyComponent(struct Unknown InComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent");

	struct RemoveShowOnlyComponent_Params {
		struct Unknown InComponent;
	}; RemoveShowOnlyComponent_Params Params;

	Params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents
inline void USceneCaptureComponent::RemoveShowOnlyActorComponents(struct Unknown InActor, char bIncludeFromChildActors) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents");

	struct RemoveShowOnlyActorComponents_Params {
		struct Unknown InActor;
		char bIncludeFromChildActors;
	}; RemoveShowOnlyActorComponents_Params Params;

	Params.InActor = InActor;
	Params.bIncludeFromChildActors = bIncludeFromChildActors;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.HideComponent
inline void USceneCaptureComponent::HideComponent(struct Unknown InComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.HideComponent");

	struct HideComponent_Params {
		struct Unknown InComponent;
	}; HideComponent_Params Params;

	Params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.HideActorComponents
inline void USceneCaptureComponent::HideActorComponents(struct Unknown InActor, char bIncludeFromChildActors) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.HideActorComponents");

	struct HideActorComponents_Params {
		struct Unknown InActor;
		char bIncludeFromChildActors;
	}; HideActorComponents_Params Params;

	Params.InActor = InActor;
	Params.bIncludeFromChildActors = bIncludeFromChildActors;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.ClearShowOnlyComponents
inline void USceneCaptureComponent::ClearShowOnlyComponents() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.ClearShowOnlyComponents");

	struct ClearShowOnlyComponents_Params {
		
	}; ClearShowOnlyComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent.ClearHiddenComponents
inline void USceneCaptureComponent::ClearHiddenComponents() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.ClearHiddenComponents");

	struct ClearHiddenComponents_Params {
		
	}; ClearHiddenComponents_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent2D.CaptureScene
inline void USceneCaptureComponent2D::CaptureScene() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent2D.CaptureScene");

	struct CaptureScene_Params {
		
	}; CaptureScene_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable
inline void USceneCaptureComponent2D::AddOrUpdateBlendable(struct TScriptInterface<IUnknown> InBlendableObject, float InWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable");

	struct AddOrUpdateBlendable_Params {
		struct TScriptInterface<IUnknown> InBlendableObject;
		float InWeight;
	}; AddOrUpdateBlendable_Params Params;

	Params.InBlendableObject = InBlendableObject;
	Params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ArrowComponent.SetArrowColor
inline void UArrowComponent::SetArrowColor(struct Unknown NewColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ArrowComponent.SetArrowColor");

	struct SetArrowColor_Params {
		struct Unknown NewColor;
	}; SetArrowColor_Params Params;

	Params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ProjectileMovementComponent.StopSimulating
inline void UProjectileMovementComponent::StopSimulating(struct Unknown& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.StopSimulating");

	struct StopSimulating_Params {
		struct Unknown& HitResult;
	}; StopSimulating_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitResult = Params.HitResult;

}

// Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
inline void UProjectileMovementComponent::SetVelocityInLocalSpace(struct Unknown NewVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace");

	struct SetVelocityInLocalSpace_Params {
		struct Unknown NewVelocity;
	}; SetVelocityInLocalSpace_Params Params;

	Params.NewVelocity = NewVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ProjectileMovementComponent.SetInterpolatedComponent
inline void UProjectileMovementComponent::SetInterpolatedComponent(struct Unknown Component) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.SetInterpolatedComponent");

	struct SetInterpolatedComponent_Params {
		struct Unknown Component;
	}; SetInterpolatedComponent_Params Params;

	Params.Component = Component;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ProjectileMovementComponent.ResetInterpolation
inline void UProjectileMovementComponent::ResetInterpolation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.ResetInterpolation");

	struct ResetInterpolation_Params {
		
	}; ResetInterpolation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
inline void UProjectileMovementComponent::OnProjectileStopDelegate__DelegateSignature(struct Unknown& ImpactResult) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature");

	struct OnProjectileStopDelegate__DelegateSignature_Params {
		struct Unknown& ImpactResult;
	}; OnProjectileStopDelegate__DelegateSignature_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ImpactResult = Params.ImpactResult;

}

// DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
inline void UProjectileMovementComponent::OnProjectileBounceDelegate__DelegateSignature(struct Unknown& ImpactResult, struct Unknown& ImpactVelocity) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature");

	struct OnProjectileBounceDelegate__DelegateSignature_Params {
		struct Unknown& ImpactResult;
		struct Unknown& ImpactVelocity;
	}; OnProjectileBounceDelegate__DelegateSignature_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ImpactResult = Params.ImpactResult;
	ImpactVelocity = Params.ImpactVelocity;

}

// Function Engine.ProjectileMovementComponent.MoveInterpolationTarget
inline void UProjectileMovementComponent::MoveInterpolationTarget(struct Unknown& NewLocation, struct Unknown& NewRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.MoveInterpolationTarget");

	struct MoveInterpolationTarget_Params {
		struct Unknown& NewLocation;
		struct Unknown& NewRotation;
	}; MoveInterpolationTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewLocation = Params.NewLocation;
	NewRotation = Params.NewRotation;

}

// Function Engine.ProjectileMovementComponent.LimitVelocity
inline struct Unknown UProjectileMovementComponent::LimitVelocity(struct Unknown NewVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.LimitVelocity");

	struct LimitVelocity_Params {
		struct Unknown NewVelocity;
		struct Unknown ReturnValue;

	}; LimitVelocity_Params Params;

	Params.NewVelocity = NewVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold
inline char UProjectileMovementComponent::IsVelocityUnderSimulationThreshold() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold");

	struct IsVelocityUnderSimulationThreshold_Params {
		
		char ReturnValue;

	}; IsVelocityUnderSimulationThreshold_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ProjectileMovementComponent.IsInterpolationComplete
inline char UProjectileMovementComponent::IsInterpolationComplete() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.IsInterpolationComplete");

	struct IsInterpolationComplete_Params {
		
		char ReturnValue;

	}; IsInterpolationComplete_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.ValidateSettings
inline void UGameUserSettings::ValidateSettings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ValidateSettings");

	struct ValidateSettings_Params {
		
	}; ValidateSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SupportsHDRDisplayOutput
inline char UGameUserSettings::SupportsHDRDisplayOutput() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SupportsHDRDisplayOutput");

	struct SupportsHDRDisplayOutput_Params {
		
		char ReturnValue;

	}; SupportsHDRDisplayOutput_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.SetVSyncEnabled
inline void UGameUserSettings::SetVSyncEnabled(char bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetVSyncEnabled");

	struct SetVSyncEnabled_Params {
		char bEnable;
	}; SetVSyncEnabled_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetVisualEffectQuality
inline void UGameUserSettings::SetVisualEffectQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetVisualEffectQuality");

	struct SetVisualEffectQuality_Params {
		int32_t Value;
	}; SetVisualEffectQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetViewDistanceQuality
inline void UGameUserSettings::SetViewDistanceQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetViewDistanceQuality");

	struct SetViewDistanceQuality_Params {
		int32_t Value;
	}; SetViewDistanceQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetToDefaults
inline void UGameUserSettings::SetToDefaults(char bIgnoreResolutionSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetToDefaults");

	struct SetToDefaults_Params {
		char bIgnoreResolutionSettings;
	}; SetToDefaults_Params Params;

	Params.bIgnoreResolutionSettings = bIgnoreResolutionSettings;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetTextureQuality
inline void UGameUserSettings::SetTextureQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetTextureQuality");

	struct SetTextureQuality_Params {
		int32_t Value;
	}; SetTextureQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetSmoothFrameRateEnabled
inline void UGameUserSettings::SetSmoothFrameRateEnabled(char bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetSmoothFrameRateEnabled");

	struct SetSmoothFrameRateEnabled_Params {
		char bEnable;
	}; SetSmoothFrameRateEnabled_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetShadowQuality
inline void UGameUserSettings::SetShadowQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetShadowQuality");

	struct SetShadowQuality_Params {
		int32_t Value;
	}; SetShadowQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetShadingQuality
inline void UGameUserSettings::SetShadingQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetShadingQuality");

	struct SetShadingQuality_Params {
		int32_t Value;
	}; SetShadingQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetScreenResolution
inline void UGameUserSettings::SetScreenResolution(struct Unknown Resolution) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetScreenResolution");

	struct SetScreenResolution_Params {
		struct Unknown Resolution;
	}; SetScreenResolution_Params Params;

	Params.Resolution = Resolution;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetResolutionScaleValueEx
inline void UGameUserSettings::SetResolutionScaleValueEx(float NewScaleValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetResolutionScaleValueEx");

	struct SetResolutionScaleValueEx_Params {
		float NewScaleValue;
	}; SetResolutionScaleValueEx_Params Params;

	Params.NewScaleValue = NewScaleValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetResolutionScaleValue
inline void UGameUserSettings::SetResolutionScaleValue(int32_t NewScaleValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetResolutionScaleValue");

	struct SetResolutionScaleValue_Params {
		int32_t NewScaleValue;
	}; SetResolutionScaleValue_Params Params;

	Params.NewScaleValue = NewScaleValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetResolutionScaleNormalized
inline void UGameUserSettings::SetResolutionScaleNormalized(float NewScaleNormalized) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetResolutionScaleNormalized");

	struct SetResolutionScaleNormalized_Params {
		float NewScaleNormalized;
	}; SetResolutionScaleNormalized_Params Params;

	Params.NewScaleNormalized = NewScaleNormalized;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetPostProcessingQuality
inline void UGameUserSettings::SetPostProcessingQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetPostProcessingQuality");

	struct SetPostProcessingQuality_Params {
		int32_t Value;
	}; SetPostProcessingQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetOverallScalabilityLevel
inline void UGameUserSettings::SetOverallScalabilityLevel(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetOverallScalabilityLevel");

	struct SetOverallScalabilityLevel_Params {
		int32_t Value;
	}; SetOverallScalabilityLevel_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetLobbyFrameRateLimit
inline void UGameUserSettings::SetLobbyFrameRateLimit(float NewLimit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetLobbyFrameRateLimit");

	struct SetLobbyFrameRateLimit_Params {
		float NewLimit;
	}; SetLobbyFrameRateLimit_Params Params;

	Params.NewLimit = NewLimit;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetFullscreenMode
inline void UGameUserSettings::SetFullscreenMode(char InFullscreenMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetFullscreenMode");

	struct SetFullscreenMode_Params {
		char InFullscreenMode;
	}; SetFullscreenMode_Params Params;

	Params.InFullscreenMode = InFullscreenMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetFrameRateLimit
inline void UGameUserSettings::SetFrameRateLimit(float NewLimit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetFrameRateLimit");

	struct SetFrameRateLimit_Params {
		float NewLimit;
	}; SetFrameRateLimit_Params Params;

	Params.NewLimit = NewLimit;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetFoliageQuality
inline void UGameUserSettings::SetFoliageQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetFoliageQuality");

	struct SetFoliageQuality_Params {
		int32_t Value;
	}; SetFoliageQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetDynamicResolutionEnabled
inline void UGameUserSettings::SetDynamicResolutionEnabled(char bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetDynamicResolutionEnabled");

	struct SetDynamicResolutionEnabled_Params {
		char bEnable;
	}; SetDynamicResolutionEnabled_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetBenchmarkFallbackValues
inline void UGameUserSettings::SetBenchmarkFallbackValues() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetBenchmarkFallbackValues");

	struct SetBenchmarkFallbackValues_Params {
		
	}; SetBenchmarkFallbackValues_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetAudioQualityLevel
inline void UGameUserSettings::SetAudioQualityLevel(int32_t QualityLevel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetAudioQualityLevel");

	struct SetAudioQualityLevel_Params {
		int32_t QualityLevel;
	}; SetAudioQualityLevel_Params Params;

	Params.QualityLevel = QualityLevel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SetAntiAliasingQuality
inline void UGameUserSettings::SetAntiAliasingQuality(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SetAntiAliasingQuality");

	struct SetAntiAliasingQuality_Params {
		int32_t Value;
	}; SetAntiAliasingQuality_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.SaveSettings
inline void UGameUserSettings::SaveSettings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SaveSettings");

	struct SaveSettings_Params {
		
	}; SaveSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.RunHardwareBenchmark
inline void UGameUserSettings::RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.RunHardwareBenchmark");

	struct RunHardwareBenchmark_Params {
		int32_t WorkScale;
		float CPUMultiplier;
		float GPUMultiplier;
	}; RunHardwareBenchmark_Params Params;

	Params.WorkScale = WorkScale;
	Params.CPUMultiplier = CPUMultiplier;
	Params.GPUMultiplier = GPUMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.RevertVideoMode
inline void UGameUserSettings::RevertVideoMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.RevertVideoMode");

	struct RevertVideoMode_Params {
		
	}; RevertVideoMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.ResetToCurrentSettings
inline void UGameUserSettings::ResetToCurrentSettings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ResetToCurrentSettings");

	struct ResetToCurrentSettings_Params {
		
	}; ResetToCurrentSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.LoadSettings
inline void UGameUserSettings::LoadSettings(char bForceReload) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.LoadSettings");

	struct LoadSettings_Params {
		char bForceReload;
	}; LoadSettings_Params Params;

	Params.bForceReload = bForceReload;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.IsVSyncEnabled
inline char UGameUserSettings::IsVSyncEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsVSyncEnabled");

	struct IsVSyncEnabled_Params {
		
		char ReturnValue;

	}; IsVSyncEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsVSyncDirty
inline char UGameUserSettings::IsVSyncDirty() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsVSyncDirty");

	struct IsVSyncDirty_Params {
		
		char ReturnValue;

	}; IsVSyncDirty_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsSmoothFrameRate
inline char UGameUserSettings::IsSmoothFrameRate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsSmoothFrameRate");

	struct IsSmoothFrameRate_Params {
		
		char ReturnValue;

	}; IsSmoothFrameRate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsShowingHUD
inline char UGameUserSettings::IsShowingHUD() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsShowingHUD");

	struct IsShowingHUD_Params {
		
		char ReturnValue;

	}; IsShowingHUD_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsScreenResolutionDirty
inline char UGameUserSettings::IsScreenResolutionDirty() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsScreenResolutionDirty");

	struct IsScreenResolutionDirty_Params {
		
		char ReturnValue;

	}; IsScreenResolutionDirty_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsHDREnabled
inline char UGameUserSettings::IsHDREnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsHDREnabled");

	struct IsHDREnabled_Params {
		
		char ReturnValue;

	}; IsHDREnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsFullscreenModeDirty
inline char UGameUserSettings::IsFullscreenModeDirty() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsFullscreenModeDirty");

	struct IsFullscreenModeDirty_Params {
		
		char ReturnValue;

	}; IsFullscreenModeDirty_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsDynamicResolutionEnabled
inline char UGameUserSettings::IsDynamicResolutionEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsDynamicResolutionEnabled");

	struct IsDynamicResolutionEnabled_Params {
		
		char ReturnValue;

	}; IsDynamicResolutionEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsDynamicResolutionDirty
inline char UGameUserSettings::IsDynamicResolutionDirty() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsDynamicResolutionDirty");

	struct IsDynamicResolutionDirty_Params {
		
		char ReturnValue;

	}; IsDynamicResolutionDirty_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.IsDirty
inline char UGameUserSettings::IsDirty() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.IsDirty");

	struct IsDirty_Params {
		
		char ReturnValue;

	}; IsDirty_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetVisualEffectQuality
inline int32_t UGameUserSettings::GetVisualEffectQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetVisualEffectQuality");

	struct GetVisualEffectQuality_Params {
		
		int32_t ReturnValue;

	}; GetVisualEffectQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetViewDistanceQuality
inline int32_t UGameUserSettings::GetViewDistanceQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetViewDistanceQuality");

	struct GetViewDistanceQuality_Params {
		
		int32_t ReturnValue;

	}; GetViewDistanceQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetTextureQuality
inline int32_t UGameUserSettings::GetTextureQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetTextureQuality");

	struct GetTextureQuality_Params {
		
		int32_t ReturnValue;

	}; GetTextureQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetSyncInterval
inline int32_t UGameUserSettings::GetSyncInterval() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetSyncInterval");

	struct GetSyncInterval_Params {
		
		int32_t ReturnValue;

	}; GetSyncInterval_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetShadowQuality
inline int32_t UGameUserSettings::GetShadowQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetShadowQuality");

	struct GetShadowQuality_Params {
		
		int32_t ReturnValue;

	}; GetShadowQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetShadingQuality
inline int32_t UGameUserSettings::GetShadingQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetShadingQuality");

	struct GetShadingQuality_Params {
		
		int32_t ReturnValue;

	}; GetShadingQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetScreenResolution
inline struct Unknown UGameUserSettings::GetScreenResolution() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetScreenResolution");

	struct GetScreenResolution_Params {
		
		struct Unknown ReturnValue;

	}; GetScreenResolution_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetResolutionScaleNormalized
inline float UGameUserSettings::GetResolutionScaleNormalized() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetResolutionScaleNormalized");

	struct GetResolutionScaleNormalized_Params {
		
		float ReturnValue;

	}; GetResolutionScaleNormalized_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetResolutionScaleInformationEx
inline void UGameUserSettings::GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetResolutionScaleInformationEx");

	struct GetResolutionScaleInformationEx_Params {
		float& CurrentScaleNormalized;
		float& CurrentScaleValue;
		float& MinScaleValue;
		float& MaxScaleValue;
	}; GetResolutionScaleInformationEx_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	CurrentScaleNormalized = Params.CurrentScaleNormalized;
	CurrentScaleValue = Params.CurrentScaleValue;
	MinScaleValue = Params.MinScaleValue;
	MaxScaleValue = Params.MaxScaleValue;

}

// Function Engine.GameUserSettings.GetResolutionScaleInformation
inline void UGameUserSettings::GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetResolutionScaleInformation");

	struct GetResolutionScaleInformation_Params {
		float& CurrentScaleNormalized;
		int32_t& CurrentScaleValue;
		int32_t& MinScaleValue;
		int32_t& MaxScaleValue;
	}; GetResolutionScaleInformation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	CurrentScaleNormalized = Params.CurrentScaleNormalized;
	CurrentScaleValue = Params.CurrentScaleValue;
	MinScaleValue = Params.MinScaleValue;
	MaxScaleValue = Params.MaxScaleValue;

}

// Function Engine.GameUserSettings.GetRecommendedResolutionScale
inline float UGameUserSettings::GetRecommendedResolutionScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetRecommendedResolutionScale");

	struct GetRecommendedResolutionScale_Params {
		
		float ReturnValue;

	}; GetRecommendedResolutionScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetPreferredFullscreenMode
inline char UGameUserSettings::GetPreferredFullscreenMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetPreferredFullscreenMode");

	struct GetPreferredFullscreenMode_Params {
		
		char ReturnValue;

	}; GetPreferredFullscreenMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetPostProcessingQuality
inline int32_t UGameUserSettings::GetPostProcessingQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetPostProcessingQuality");

	struct GetPostProcessingQuality_Params {
		
		int32_t ReturnValue;

	}; GetPostProcessingQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetOverallScalabilityLevel
inline int32_t UGameUserSettings::GetOverallScalabilityLevel() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetOverallScalabilityLevel");

	struct GetOverallScalabilityLevel_Params {
		
		int32_t ReturnValue;

	}; GetOverallScalabilityLevel_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetLobbyFrameRateLimit
inline float UGameUserSettings::GetLobbyFrameRateLimit() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetLobbyFrameRateLimit");

	struct GetLobbyFrameRateLimit_Params {
		
		float ReturnValue;

	}; GetLobbyFrameRateLimit_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetLastConfirmedScreenResolution
inline struct Unknown UGameUserSettings::GetLastConfirmedScreenResolution() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetLastConfirmedScreenResolution");

	struct GetLastConfirmedScreenResolution_Params {
		
		struct Unknown ReturnValue;

	}; GetLastConfirmedScreenResolution_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode
inline char UGameUserSettings::GetLastConfirmedFullscreenMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode");

	struct GetLastConfirmedFullscreenMode_Params {
		
		char ReturnValue;

	}; GetLastConfirmedFullscreenMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetGameUserSettings
inline struct Unknown UGameUserSettings::GetGameUserSettings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetGameUserSettings");

	struct GetGameUserSettings_Params {
		
		struct Unknown ReturnValue;

	}; GetGameUserSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetFullscreenMode
inline char UGameUserSettings::GetFullscreenMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetFullscreenMode");

	struct GetFullscreenMode_Params {
		
		char ReturnValue;

	}; GetFullscreenMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetFrameRateLimit
inline float UGameUserSettings::GetFrameRateLimit() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetFrameRateLimit");

	struct GetFrameRateLimit_Params {
		
		float ReturnValue;

	}; GetFrameRateLimit_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetFramePace
inline int32_t UGameUserSettings::GetFramePace() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetFramePace");

	struct GetFramePace_Params {
		
		int32_t ReturnValue;

	}; GetFramePace_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetFoliageQuality
inline int32_t UGameUserSettings::GetFoliageQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetFoliageQuality");

	struct GetFoliageQuality_Params {
		
		int32_t ReturnValue;

	}; GetFoliageQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetDesktopResolution
inline struct Unknown UGameUserSettings::GetDesktopResolution() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDesktopResolution");

	struct GetDesktopResolution_Params {
		
		struct Unknown ReturnValue;

	}; GetDesktopResolution_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetDefaultWindowPosition
inline struct Unknown UGameUserSettings::GetDefaultWindowPosition() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDefaultWindowPosition");

	struct GetDefaultWindowPosition_Params {
		
		struct Unknown ReturnValue;

	}; GetDefaultWindowPosition_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetDefaultWindowMode
inline char UGameUserSettings::GetDefaultWindowMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDefaultWindowMode");

	struct GetDefaultWindowMode_Params {
		
		char ReturnValue;

	}; GetDefaultWindowMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetDefaultResolutionScale
inline float UGameUserSettings::GetDefaultResolutionScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDefaultResolutionScale");

	struct GetDefaultResolutionScale_Params {
		
		float ReturnValue;

	}; GetDefaultResolutionScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetDefaultResolution
inline struct Unknown UGameUserSettings::GetDefaultResolution() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetDefaultResolution");

	struct GetDefaultResolution_Params {
		
		struct Unknown ReturnValue;

	}; GetDefaultResolution_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetCurrentResolutionWindowMode
inline char UGameUserSettings::GetCurrentResolutionWindowMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetCurrentResolutionWindowMode");

	struct GetCurrentResolutionWindowMode_Params {
		
		char ReturnValue;

	}; GetCurrentResolutionWindowMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetCurrentHDRDisplayNits
inline int32_t UGameUserSettings::GetCurrentHDRDisplayNits() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetCurrentHDRDisplayNits");

	struct GetCurrentHDRDisplayNits_Params {
		
		int32_t ReturnValue;

	}; GetCurrentHDRDisplayNits_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetAudioQualityLevel
inline int32_t UGameUserSettings::GetAudioQualityLevel() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetAudioQualityLevel");

	struct GetAudioQualityLevel_Params {
		
		int32_t ReturnValue;

	}; GetAudioQualityLevel_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.GetAntiAliasingQuality
inline int32_t UGameUserSettings::GetAntiAliasingQuality() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.GetAntiAliasingQuality");

	struct GetAntiAliasingQuality_Params {
		
		int32_t ReturnValue;

	}; GetAntiAliasingQuality_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameUserSettings.EnableHDRDisplayOutput
inline void UGameUserSettings::EnableHDRDisplayOutput(char bEnable, int32_t DisplayNits) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.EnableHDRDisplayOutput");

	struct EnableHDRDisplayOutput_Params {
		char bEnable;
		int32_t DisplayNits;
	}; EnableHDRDisplayOutput_Params Params;

	Params.bEnable = bEnable;
	Params.DisplayNits = DisplayNits;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.ConfirmVideoMode
inline void UGameUserSettings::ConfirmVideoMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ConfirmVideoMode");

	struct ConfirmVideoMode_Params {
		
	}; ConfirmVideoMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.ApplySettings
inline void UGameUserSettings::ApplySettings(char bCheckForCommandLineOverrides) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ApplySettings");

	struct ApplySettings_Params {
		char bCheckForCommandLineOverrides;
	}; ApplySettings_Params Params;

	Params.bCheckForCommandLineOverrides = bCheckForCommandLineOverrides;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.ApplyResolutionSettings
inline void UGameUserSettings::ApplyResolutionSettings(char bCheckForCommandLineOverrides) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ApplyResolutionSettings");

	struct ApplyResolutionSettings_Params {
		char bCheckForCommandLineOverrides;
	}; ApplyResolutionSettings_Params Params;

	Params.bCheckForCommandLineOverrides = bCheckForCommandLineOverrides;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.ApplyNonResolutionSettings
inline void UGameUserSettings::ApplyNonResolutionSettings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ApplyNonResolutionSettings");

	struct ApplyNonResolutionSettings_Params {
		
	}; ApplyNonResolutionSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults
inline void UGameUserSettings::ApplyHardwareBenchmarkResults() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults");

	struct ApplyHardwareBenchmarkResults_Params {
		
	}; ApplyHardwareBenchmarkResults_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CapsuleComponent.SetCapsuleSize
inline void UCapsuleComponent::SetCapsuleSize(float InRadius, float InHalfHeight, char bUpdateOverlaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.SetCapsuleSize");

	struct SetCapsuleSize_Params {
		float InRadius;
		float InHalfHeight;
		char bUpdateOverlaps;
	}; SetCapsuleSize_Params Params;

	Params.InRadius = InRadius;
	Params.InHalfHeight = InHalfHeight;
	Params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CapsuleComponent.SetCapsuleRadius
inline void UCapsuleComponent::SetCapsuleRadius(float Radius, char bUpdateOverlaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.SetCapsuleRadius");

	struct SetCapsuleRadius_Params {
		float Radius;
		char bUpdateOverlaps;
	}; SetCapsuleRadius_Params Params;

	Params.Radius = Radius;
	Params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CapsuleComponent.SetCapsuleHalfHeight
inline void UCapsuleComponent::SetCapsuleHalfHeight(float HalfHeight, char bUpdateOverlaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.SetCapsuleHalfHeight");

	struct SetCapsuleHalfHeight_Params {
		float HalfHeight;
		char bUpdateOverlaps;
	}; SetCapsuleHalfHeight_Params Params;

	Params.HalfHeight = HalfHeight;
	Params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere
inline void UCapsuleComponent::GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere");

	struct GetUnscaledCapsuleSize_WithoutHemisphere_Params {
		float& OutRadius;
		float& OutHalfHeightWithoutHemisphere;
	}; GetUnscaledCapsuleSize_WithoutHemisphere_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutRadius = Params.OutRadius;
	OutHalfHeightWithoutHemisphere = Params.OutHalfHeightWithoutHemisphere;

}

// Function Engine.CapsuleComponent.GetUnscaledCapsuleSize
inline void UCapsuleComponent::GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleSize");

	struct GetUnscaledCapsuleSize_Params {
		float& OutRadius;
		float& OutHalfHeight;
	}; GetUnscaledCapsuleSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutRadius = Params.OutRadius;
	OutHalfHeight = Params.OutHalfHeight;

}

// Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius
inline float UCapsuleComponent::GetUnscaledCapsuleRadius() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius");

	struct GetUnscaledCapsuleRadius_Params {
		
		float ReturnValue;

	}; GetUnscaledCapsuleRadius_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere
inline float UCapsuleComponent::GetUnscaledCapsuleHalfHeight_WithoutHemisphere() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere");

	struct GetUnscaledCapsuleHalfHeight_WithoutHemisphere_Params {
		
		float ReturnValue;

	}; GetUnscaledCapsuleHalfHeight_WithoutHemisphere_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
inline float UCapsuleComponent::GetUnscaledCapsuleHalfHeight() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight");

	struct GetUnscaledCapsuleHalfHeight_Params {
		
		float ReturnValue;

	}; GetUnscaledCapsuleHalfHeight_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CapsuleComponent.GetShapeScale
inline float UCapsuleComponent::GetShapeScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetShapeScale");

	struct GetShapeScale_Params {
		
		float ReturnValue;

	}; GetShapeScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere
inline void UCapsuleComponent::GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere");

	struct GetScaledCapsuleSize_WithoutHemisphere_Params {
		float& OutRadius;
		float& OutHalfHeightWithoutHemisphere;
	}; GetScaledCapsuleSize_WithoutHemisphere_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutRadius = Params.OutRadius;
	OutHalfHeightWithoutHemisphere = Params.OutHalfHeightWithoutHemisphere;

}

// Function Engine.CapsuleComponent.GetScaledCapsuleSize
inline void UCapsuleComponent::GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleSize");

	struct GetScaledCapsuleSize_Params {
		float& OutRadius;
		float& OutHalfHeight;
	}; GetScaledCapsuleSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutRadius = Params.OutRadius;
	OutHalfHeight = Params.OutHalfHeight;

}

// Function Engine.CapsuleComponent.GetScaledCapsuleRadius
inline float UCapsuleComponent::GetScaledCapsuleRadius() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleRadius");

	struct GetScaledCapsuleRadius_Params {
		
		float ReturnValue;

	}; GetScaledCapsuleRadius_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere
inline float UCapsuleComponent::GetScaledCapsuleHalfHeight_WithoutHemisphere() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere");

	struct GetScaledCapsuleHalfHeight_WithoutHemisphere_Params {
		
		float ReturnValue;

	}; GetScaledCapsuleHalfHeight_WithoutHemisphere_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
inline float UCapsuleComponent::GetScaledCapsuleHalfHeight() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight");

	struct GetScaledCapsuleHalfHeight_Params {
		
		float ReturnValue;

	}; GetScaledCapsuleHalfHeight_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.GameViewportClient.SSSwapControllers
inline void UGameViewportClient::SSSwapControllers() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SSSwapControllers");

	struct SSSwapControllers_Params {
		
	}; SSSwapControllers_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameViewportClient.ShowTitleSafeArea
inline void UGameViewportClient::ShowTitleSafeArea() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ShowTitleSafeArea");

	struct ShowTitleSafeArea_Params {
		
	}; ShowTitleSafeArea_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.GameViewportClient.SetConsoleTarget
inline void UGameViewportClient::SetConsoleTarget(int32_t PlayerIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetConsoleTarget");

	struct SetConsoleTarget_Params {
		int32_t PlayerIndex;
	}; SetConsoleTarget_Params Params;

	Params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.WorldSettings.OnRep_WorldGravityZ
inline void AWorldSettings::OnRep_WorldGravityZ() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldSettings.OnRep_WorldGravityZ");

	struct OnRep_WorldGravityZ_Params {
		
	}; OnRep_WorldGravityZ_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraModifier.IsDisabled
inline char UCameraModifier::IsDisabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.IsDisabled");

	struct IsDisabled_Params {
		
		char ReturnValue;

	}; IsDisabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CameraModifier.GetViewTarget
inline struct Unknown UCameraModifier::GetViewTarget() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.GetViewTarget");

	struct GetViewTarget_Params {
		
		struct Unknown ReturnValue;

	}; GetViewTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CameraModifier.EnableModifier
inline void UCameraModifier::EnableModifier() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.EnableModifier");

	struct EnableModifier_Params {
		
	}; EnableModifier_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraModifier.DisableModifier
inline void UCameraModifier::DisableModifier(char bImmediate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.DisableModifier");

	struct DisableModifier_Params {
		char bImmediate;
	}; DisableModifier_Params Params;

	Params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraModifier.BlueprintModifyPostProcess
inline void UCameraModifier::BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, struct Unknown& PostProcessSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.BlueprintModifyPostProcess");

	struct BlueprintModifyPostProcess_Params {
		float DeltaTime;
		float& PostProcessBlendWeight;
		struct Unknown& PostProcessSettings;
	}; BlueprintModifyPostProcess_Params Params;

	Params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PostProcessBlendWeight = Params.PostProcessBlendWeight;
	PostProcessSettings = Params.PostProcessSettings;

}

// Function Engine.CameraModifier.BlueprintModifyCamera
inline void UCameraModifier::BlueprintModifyCamera(float DeltaTime, struct Unknown ViewLocation, struct Unknown ViewRotation, float FOV, struct Unknown& NewViewLocation, struct Unknown& NewViewRotation, float& NewFOV) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.BlueprintModifyCamera");

	struct BlueprintModifyCamera_Params {
		float DeltaTime;
		struct Unknown ViewLocation;
		struct Unknown ViewRotation;
		float FOV;
		struct Unknown& NewViewLocation;
		struct Unknown& NewViewRotation;
		float& NewFOV;
	}; BlueprintModifyCamera_Params Params;

	Params.DeltaTime = DeltaTime;
	Params.ViewLocation = ViewLocation;
	Params.ViewRotation = ViewRotation;
	Params.FOV = FOV;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewViewLocation = Params.NewViewLocation;
	NewViewRotation = Params.NewViewRotation;
	NewFOV = Params.NewFOV;

}

// Function Engine.SkyLight.OnRep_bEnabled
inline void ASkyLight::OnRep_bEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLight.OnRep_bEnabled");

	struct OnRep_bEnabled_Params {
		
	}; OnRep_bEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MaterialInterface.SetForceMipLevelsToBeResident
inline void UMaterialInterface::SetForceMipLevelsToBeResident(char OverrideForceMiplevelsToBeResident, char bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, char bFastResponse) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.SetForceMipLevelsToBeResident");

	struct SetForceMipLevelsToBeResident_Params {
		char OverrideForceMiplevelsToBeResident;
		char bForceMiplevelsToBeResidentValue;
		float ForceDuration;
		int32_t CinematicTextureGroups;
		char bFastResponse;
	}; SetForceMipLevelsToBeResident_Params Params;

	Params.OverrideForceMiplevelsToBeResident = OverrideForceMiplevelsToBeResident;
	Params.bForceMiplevelsToBeResidentValue = bForceMiplevelsToBeResidentValue;
	Params.ForceDuration = ForceDuration;
	Params.CinematicTextureGroups = CinematicTextureGroups;
	Params.bFastResponse = bFastResponse;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MaterialInterface.GetPhysicalMaterialMask
inline struct Unknown UMaterialInterface::GetPhysicalMaterialMask() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetPhysicalMaterialMask");

	struct GetPhysicalMaterialMask_Params {
		
		struct Unknown ReturnValue;

	}; GetPhysicalMaterialMask_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialInterface.GetPhysicalMaterialFromMap
inline struct Unknown UMaterialInterface::GetPhysicalMaterialFromMap(int32_t Index) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetPhysicalMaterialFromMap");

	struct GetPhysicalMaterialFromMap_Params {
		int32_t Index;
		struct Unknown ReturnValue;

	}; GetPhysicalMaterialFromMap_Params Params;

	Params.Index = Index;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialInterface.GetPhysicalMaterial
inline struct Unknown UMaterialInterface::GetPhysicalMaterial() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetPhysicalMaterial");

	struct GetPhysicalMaterial_Params {
		
		struct Unknown ReturnValue;

	}; GetPhysicalMaterial_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialInterface.GetParameterInfo
inline struct Unknown UMaterialInterface::GetParameterInfo(char Association, struct FName ParameterName, struct Unknown LayerFunction) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetParameterInfo");

	struct GetParameterInfo_Params {
		char Association;
		struct FName ParameterName;
		struct Unknown LayerFunction;
		struct Unknown ReturnValue;

	}; GetParameterInfo_Params Params;

	Params.Association = Association;
	Params.ParameterName = ParameterName;
	Params.LayerFunction = LayerFunction;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialInterface.GetBaseMaterial
inline struct Unknown UMaterialInterface::GetBaseMaterial() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetBaseMaterial");

	struct GetBaseMaterial_Params {
		
		struct Unknown ReturnValue;

	}; GetBaseMaterial_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialInstanceConstant.K2_GetVectorParameterValue
inline struct Unknown UMaterialInstanceConstant::K2_GetVectorParameterValue(struct FName ParameterName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.K2_GetVectorParameterValue");

	struct K2_GetVectorParameterValue_Params {
		struct FName ParameterName;
		struct Unknown ReturnValue;

	}; K2_GetVectorParameterValue_Params Params;

	Params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialInstanceConstant.K2_GetTextureParameterValue
inline struct Unknown UMaterialInstanceConstant::K2_GetTextureParameterValue(struct FName ParameterName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.K2_GetTextureParameterValue");

	struct K2_GetTextureParameterValue_Params {
		struct FName ParameterName;
		struct Unknown ReturnValue;

	}; K2_GetTextureParameterValue_Params Params;

	Params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialInstanceConstant.K2_GetScalarParameterValue
inline float UMaterialInstanceConstant::K2_GetScalarParameterValue(struct FName ParameterName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.K2_GetScalarParameterValue");

	struct K2_GetScalarParameterValue_Params {
		struct FName ParameterName;
		float ReturnValue;

	}; K2_GetScalarParameterValue_Params Params;

	Params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CameraActor.GetAutoActivatePlayerIndex
inline int32_t ACameraActor::GetAutoActivatePlayerIndex() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraActor.GetAutoActivatePlayerIndex");

	struct GetAutoActivatePlayerIndex_Params {
		
		int32_t ReturnValue;

	}; GetAutoActivatePlayerIndex_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AmbientSound.Stop
inline void AAmbientSound::Stop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.Stop");

	struct Stop_Params {
		
	}; Stop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AmbientSound.Play
inline void AAmbientSound::Play(float StartTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.Play");

	struct Play_Params {
		float StartTime;
	}; Play_Params Params;

	Params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AmbientSound.FadeOut
inline void AAmbientSound::FadeOut(float FadeOutDuration, float FadeVolumeLevel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.FadeOut");

	struct FadeOut_Params {
		float FadeOutDuration;
		float FadeVolumeLevel;
	}; FadeOut_Params Params;

	Params.FadeOutDuration = FadeOutDuration;
	Params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AmbientSound.FadeIn
inline void AAmbientSound::FadeIn(float FadeInDuration, float FadeVolumeLevel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.FadeIn");

	struct FadeIn_Params {
		float FadeInDuration;
		float FadeVolumeLevel;
	}; FadeIn_Params Params;

	Params.FadeInDuration = FadeInDuration;
	Params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AmbientSound.AdjustVolume
inline void AAmbientSound::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.AdjustVolume");

	struct AdjustVolume_Params {
		float AdjustVolumeDuration;
		float AdjustVolumeLevel;
	}; AdjustVolume_Params Params;

	Params.AdjustVolumeDuration = AdjustVolumeDuration;
	Params.AdjustVolumeLevel = AdjustVolumeLevel;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSequenceBase.GetPlayLength
inline float UAnimSequenceBase::GetPlayLength() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSequenceBase.GetPlayLength");

	struct GetPlayLength_Params {
		
		float ReturnValue;

	}; GetPlayLength_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimMontage.GetDefaultBlendOutTime
inline float UAnimMontage::GetDefaultBlendOutTime() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimMontage.GetDefaultBlendOutTime");

	struct GetDefaultBlendOutTime_Params {
		
		float ReturnValue;

	}; GetDefaultBlendOutTime_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimNotifyState_Trail.OverridePSTemplate
inline struct Unknown UAnimNotifyState_Trail::OverridePSTemplate(struct Unknown MeshComp, struct Unknown Animation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotifyState_Trail.OverridePSTemplate");

	struct OverridePSTemplate_Params {
		struct Unknown MeshComp;
		struct Unknown Animation;
		struct Unknown ReturnValue;

	}; OverridePSTemplate_Params Params;

	Params.MeshComp = MeshComp;
	Params.Animation = Animation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimSingleNodeInstance.StopAnim
inline void UAnimSingleNodeInstance::StopAnim() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.StopAnim");

	struct StopAnim_Params {
		
	}; StopAnim_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.SetReverse
inline void UAnimSingleNodeInstance::SetReverse(char bInReverse) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetReverse");

	struct SetReverse_Params {
		char bInReverse;
	}; SetReverse_Params Params;

	Params.bInReverse = bInReverse;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride
inline void UAnimSingleNodeInstance::SetPreviewCurveOverride(struct FName& PoseName, float Value, char bRemoveIfZero) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride");

	struct SetPreviewCurveOverride_Params {
		struct FName& PoseName;
		float Value;
		char bRemoveIfZero;
	}; SetPreviewCurveOverride_Params Params;

	Params.Value = Value;
	Params.bRemoveIfZero = bRemoveIfZero;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PoseName = Params.PoseName;

}

// Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime
inline void UAnimSingleNodeInstance::SetPositionWithPreviousTime(float InPosition, float InPreviousTime, char bFireNotifies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime");

	struct SetPositionWithPreviousTime_Params {
		float InPosition;
		float InPreviousTime;
		char bFireNotifies;
	}; SetPositionWithPreviousTime_Params Params;

	Params.InPosition = InPosition;
	Params.InPreviousTime = InPreviousTime;
	Params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.SetPosition
inline void UAnimSingleNodeInstance::SetPosition(float InPosition, char bFireNotifies) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPosition");

	struct SetPosition_Params {
		float InPosition;
		char bFireNotifies;
	}; SetPosition_Params Params;

	Params.InPosition = InPosition;
	Params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.SetPlayRate
inline void UAnimSingleNodeInstance::SetPlayRate(float InPlayRate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPlayRate");

	struct SetPlayRate_Params {
		float InPlayRate;
	}; SetPlayRate_Params Params;

	Params.InPlayRate = InPlayRate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.SetPlaying
inline void UAnimSingleNodeInstance::SetPlaying(char bIsPlaying) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPlaying");

	struct SetPlaying_Params {
		char bIsPlaying;
	}; SetPlaying_Params Params;

	Params.bIsPlaying = bIsPlaying;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.SetLooping
inline void UAnimSingleNodeInstance::SetLooping(char bIsLooping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetLooping");

	struct SetLooping_Params {
		char bIsLooping;
	}; SetLooping_Params Params;

	Params.bIsLooping = bIsLooping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput
inline void UAnimSingleNodeInstance::SetBlendSpaceInput(struct Unknown& InBlendInput) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput");

	struct SetBlendSpaceInput_Params {
		struct Unknown& InBlendInput;
	}; SetBlendSpaceInput_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InBlendInput = Params.InBlendInput;

}

// Function Engine.AnimSingleNodeInstance.SetAnimationAsset
inline void UAnimSingleNodeInstance::SetAnimationAsset(struct Unknown NewAsset, char bIsLooping, float InPlayRate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetAnimationAsset");

	struct SetAnimationAsset_Params {
		struct Unknown NewAsset;
		char bIsLooping;
		float InPlayRate;
	}; SetAnimationAsset_Params Params;

	Params.NewAsset = NewAsset;
	Params.bIsLooping = bIsLooping;
	Params.InPlayRate = InPlayRate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.PlayAnim
inline void UAnimSingleNodeInstance::PlayAnim(char bIsLooping, float InPlayRate, float InStartPosition) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.PlayAnim");

	struct PlayAnim_Params {
		char bIsLooping;
		float InPlayRate;
		float InStartPosition;
	}; PlayAnim_Params Params;

	Params.bIsLooping = bIsLooping;
	Params.InPlayRate = InPlayRate;
	Params.InStartPosition = InStartPosition;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AnimSingleNodeInstance.GetLength
inline float UAnimSingleNodeInstance::GetLength() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.GetLength");

	struct GetLength_Params {
		
		float ReturnValue;

	}; GetLength_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AnimSingleNodeInstance.GetAnimationAsset
inline struct Unknown UAnimSingleNodeInstance::GetAnimationAsset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.GetAnimationAsset");

	struct GetAnimationAsset_Params {
		
		struct Unknown ReturnValue;

	}; GetAnimationAsset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot
inline struct Unknown UAsyncActionHandleSaveGame::AsyncSaveGameToSlot(struct Unknown WorldContextObject, struct Unknown SaveGameObject, struct FString SlotName, int32_t UserIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot");

	struct AsyncSaveGameToSlot_Params {
		struct Unknown WorldContextObject;
		struct Unknown SaveGameObject;
		struct FString SlotName;
		int32_t UserIndex;
		struct Unknown ReturnValue;

	}; AsyncSaveGameToSlot_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.SaveGameObject = SaveGameObject;
	Params.SlotName = SlotName;
	Params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot
inline struct Unknown UAsyncActionHandleSaveGame::AsyncLoadGameFromSlot(struct Unknown WorldContextObject, struct FString SlotName, int32_t UserIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot");

	struct AsyncLoadGameFromSlot_Params {
		struct Unknown WorldContextObject;
		struct FString SlotName;
		int32_t UserIndex;
		struct Unknown ReturnValue;

	}; AsyncLoadGameFromSlot_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.SlotName = SlotName;
	Params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset
inline struct Unknown UAsyncActionLoadPrimaryAsset::AsyncLoadPrimaryAsset(struct Unknown WorldContextObject, struct Unknown PrimaryAsset, struct TArray<Unknown>& LoadBundles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset");

	struct AsyncLoadPrimaryAsset_Params {
		struct Unknown WorldContextObject;
		struct Unknown PrimaryAsset;
		struct TArray<Unknown>& LoadBundles;
		struct Unknown ReturnValue;

	}; AsyncLoadPrimaryAsset_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.PrimaryAsset = PrimaryAsset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	LoadBundles = Params.LoadBundles;


	return params.ReturnValue;
}

// Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass
inline struct Unknown UAsyncActionLoadPrimaryAssetClass::AsyncLoadPrimaryAssetClass(struct Unknown WorldContextObject, struct Unknown PrimaryAsset, struct TArray<Unknown>& LoadBundles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass");

	struct AsyncLoadPrimaryAssetClass_Params {
		struct Unknown WorldContextObject;
		struct Unknown PrimaryAsset;
		struct TArray<Unknown>& LoadBundles;
		struct Unknown ReturnValue;

	}; AsyncLoadPrimaryAssetClass_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.PrimaryAsset = PrimaryAsset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	LoadBundles = Params.LoadBundles;


	return params.ReturnValue;
}

// Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList
inline struct Unknown UAsyncActionLoadPrimaryAssetList::AsyncLoadPrimaryAssetList(struct Unknown WorldContextObject, struct TArray<Unknown>& PrimaryAssetList, struct TArray<Unknown>& LoadBundles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList");

	struct AsyncLoadPrimaryAssetList_Params {
		struct Unknown WorldContextObject;
		struct TArray<Unknown>& PrimaryAssetList;
		struct TArray<Unknown>& LoadBundles;
		struct Unknown ReturnValue;

	}; AsyncLoadPrimaryAssetList_Params Params;

	Params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PrimaryAssetList = Params.PrimaryAssetList;
	LoadBundles = Params.LoadBundles;


	return params.ReturnValue;
}

// Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList
inline struct Unknown UAsyncActionLoadPrimaryAssetClassList::AsyncLoadPrimaryAssetClassList(struct Unknown WorldContextObject, struct TArray<Unknown>& PrimaryAssetList, struct TArray<Unknown>& LoadBundles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList");

	struct AsyncLoadPrimaryAssetClassList_Params {
		struct Unknown WorldContextObject;
		struct TArray<Unknown>& PrimaryAssetList;
		struct TArray<Unknown>& LoadBundles;
		struct Unknown ReturnValue;

	}; AsyncLoadPrimaryAssetClassList_Params Params;

	Params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PrimaryAssetList = Params.PrimaryAssetList;
	LoadBundles = Params.LoadBundles;


	return params.ReturnValue;
}

// Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList
inline struct Unknown UAsyncActionChangePrimaryAssetBundles::AsyncChangeBundleStateForPrimaryAssetList(struct Unknown WorldContextObject, struct TArray<Unknown>& PrimaryAssetList, struct TArray<Unknown>& AddBundles, struct TArray<Unknown>& RemoveBundles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList");

	struct AsyncChangeBundleStateForPrimaryAssetList_Params {
		struct Unknown WorldContextObject;
		struct TArray<Unknown>& PrimaryAssetList;
		struct TArray<Unknown>& AddBundles;
		struct TArray<Unknown>& RemoveBundles;
		struct Unknown ReturnValue;

	}; AsyncChangeBundleStateForPrimaryAssetList_Params Params;

	Params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PrimaryAssetList = Params.PrimaryAssetList;
	AddBundles = Params.AddBundles;
	RemoveBundles = Params.RemoveBundles;


	return params.ReturnValue;
}

// Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets
inline struct Unknown UAsyncActionChangePrimaryAssetBundles::AsyncChangeBundleStateForMatchingPrimaryAssets(struct Unknown WorldContextObject, struct TArray<Unknown>& NewBundles, struct TArray<Unknown>& OldBundles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets");

	struct AsyncChangeBundleStateForMatchingPrimaryAssets_Params {
		struct Unknown WorldContextObject;
		struct TArray<Unknown>& NewBundles;
		struct TArray<Unknown>& OldBundles;
		struct Unknown ReturnValue;

	}; AsyncChangeBundleStateForMatchingPrimaryAssets_Params Params;

	Params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewBundles = Params.NewBundles;
	OldBundles = Params.OldBundles;


	return params.ReturnValue;
}

// Function Engine.AtmosphericFogComponent.StartPrecompute
inline void UAtmosphericFogComponent::StartPrecompute() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.StartPrecompute");

	struct StartPrecompute_Params {
		
	}; StartPrecompute_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetSunMultiplier
inline void UAtmosphericFogComponent::SetSunMultiplier(float NewSunMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetSunMultiplier");

	struct SetSunMultiplier_Params {
		float NewSunMultiplier;
	}; SetSunMultiplier_Params Params;

	Params.NewSunMultiplier = NewSunMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetStartDistance
inline void UAtmosphericFogComponent::SetStartDistance(float NewStartDistance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetStartDistance");

	struct SetStartDistance_Params {
		float NewStartDistance;
	}; SetStartDistance_Params Params;

	Params.NewStartDistance = NewStartDistance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetPrecomputeParams
inline void UAtmosphericFogComponent::SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetPrecomputeParams");

	struct SetPrecomputeParams_Params {
		float DensityHeight;
		int32_t MaxScatteringOrder;
		int32_t InscatterAltitudeSampleNum;
	}; SetPrecomputeParams_Params Params;

	Params.DensityHeight = DensityHeight;
	Params.MaxScatteringOrder = MaxScatteringOrder;
	Params.InscatterAltitudeSampleNum = InscatterAltitudeSampleNum;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetFogMultiplier
inline void UAtmosphericFogComponent::SetFogMultiplier(float NewFogMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetFogMultiplier");

	struct SetFogMultiplier_Params {
		float NewFogMultiplier;
	}; SetFogMultiplier_Params Params;

	Params.NewFogMultiplier = NewFogMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetDistanceScale
inline void UAtmosphericFogComponent::SetDistanceScale(float NewDistanceScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDistanceScale");

	struct SetDistanceScale_Params {
		float NewDistanceScale;
	}; SetDistanceScale_Params Params;

	Params.NewDistanceScale = NewDistanceScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetDistanceOffset
inline void UAtmosphericFogComponent::SetDistanceOffset(float NewDistanceOffset) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDistanceOffset");

	struct SetDistanceOffset_Params {
		float NewDistanceOffset;
	}; SetDistanceOffset_Params Params;

	Params.NewDistanceOffset = NewDistanceOffset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetDensityOffset
inline void UAtmosphericFogComponent::SetDensityOffset(float NewDensityOffset) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDensityOffset");

	struct SetDensityOffset_Params {
		float NewDensityOffset;
	}; SetDensityOffset_Params Params;

	Params.NewDensityOffset = NewDensityOffset;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetDensityMultiplier
inline void UAtmosphericFogComponent::SetDensityMultiplier(float NewDensityMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDensityMultiplier");

	struct SetDensityMultiplier_Params {
		float NewDensityMultiplier;
	}; SetDensityMultiplier_Params Params;

	Params.NewDensityMultiplier = NewDensityMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetDefaultLightColor
inline void UAtmosphericFogComponent::SetDefaultLightColor(struct Unknown NewLightColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDefaultLightColor");

	struct SetDefaultLightColor_Params {
		struct Unknown NewLightColor;
	}; SetDefaultLightColor_Params Params;

	Params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetDefaultBrightness
inline void UAtmosphericFogComponent::SetDefaultBrightness(float NewBrightness) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDefaultBrightness");

	struct SetDefaultBrightness_Params {
		float NewBrightness;
	}; SetDefaultBrightness_Params Params;

	Params.NewBrightness = NewBrightness;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.SetAltitudeScale
inline void UAtmosphericFogComponent::SetAltitudeScale(float NewAltitudeScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetAltitudeScale");

	struct SetAltitudeScale_Params {
		float NewAltitudeScale;
	}; SetAltitudeScale_Params Params;

	Params.NewAltitudeScale = NewAltitudeScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.DisableSunDisk
inline void UAtmosphericFogComponent::DisableSunDisk(char NewSunDisk) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.DisableSunDisk");

	struct DisableSunDisk_Params {
		char NewSunDisk;
	}; DisableSunDisk_Params Params;

	Params.NewSunDisk = NewSunDisk;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AtmosphericFogComponent.DisableGroundScattering
inline void UAtmosphericFogComponent::DisableGroundScattering(char NewGroundScattering) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.DisableGroundScattering");

	struct DisableGroundScattering_Params {
		char NewGroundScattering;
	}; DisableGroundScattering_Params Params;

	Params.NewGroundScattering = NewGroundScattering;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioVolume.SetReverbSettings
inline void AAudioVolume::SetReverbSettings(struct Unknown& NewReverbSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.SetReverbSettings");

	struct SetReverbSettings_Params {
		struct Unknown& NewReverbSettings;
	}; SetReverbSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewReverbSettings = Params.NewReverbSettings;

}

// Function Engine.AudioVolume.SetPriority
inline void AAudioVolume::SetPriority(float NewPriority) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.SetPriority");

	struct SetPriority_Params {
		float NewPriority;
	}; SetPriority_Params Params;

	Params.NewPriority = NewPriority;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioVolume.SetInteriorSettings
inline void AAudioVolume::SetInteriorSettings(struct Unknown& NewInteriorSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.SetInteriorSettings");

	struct SetInteriorSettings_Params {
		struct Unknown& NewInteriorSettings;
	}; SetInteriorSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewInteriorSettings = Params.NewInteriorSettings;

}

// Function Engine.AudioVolume.SetEnabled
inline void AAudioVolume::SetEnabled(char bNewEnabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.SetEnabled");

	struct SetEnabled_Params {
		char bNewEnabled;
	}; SetEnabled_Params Params;

	Params.bNewEnabled = bNewEnabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AudioVolume.OnRep_bEnabled
inline void AAudioVolume::OnRep_bEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioVolume.OnRep_bEnabled");

	struct OnRep_bEnabled_Params {
		
	}; OnRep_bEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AutoDestroySubsystem.OnActorEndPlay
inline void UAutoDestroySubsystem::OnActorEndPlay(struct Unknown Actor, char EndPlayReason) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoDestroySubsystem.OnActorEndPlay");

	struct OnActorEndPlay_Params {
		struct Unknown Actor;
		char EndPlayReason;
	}; OnActorEndPlay_Params Params;

	Params.Actor = Actor;
	Params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.AvoidanceManager.RegisterMovementComponent
inline char UAvoidanceManager::RegisterMovementComponent(struct Unknown MovementComp, float AvoidanceWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.RegisterMovementComponent");

	struct RegisterMovementComponent_Params {
		struct Unknown MovementComp;
		float AvoidanceWeight;
		char ReturnValue;

	}; RegisterMovementComponent_Params Params;

	Params.MovementComp = MovementComp;
	Params.AvoidanceWeight = AvoidanceWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AvoidanceManager.GetObjectCount
inline int32_t UAvoidanceManager::GetObjectCount() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetObjectCount");

	struct GetObjectCount_Params {
		
		int32_t ReturnValue;

	}; GetObjectCount_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AvoidanceManager.GetNewAvoidanceUID
inline int32_t UAvoidanceManager::GetNewAvoidanceUID() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetNewAvoidanceUID");

	struct GetNewAvoidanceUID_Params {
		
		int32_t ReturnValue;

	}; GetNewAvoidanceUID_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
inline struct Unknown UAvoidanceManager::GetAvoidanceVelocityForComponent(struct Unknown MovementComp) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent");

	struct GetAvoidanceVelocityForComponent_Params {
		struct Unknown MovementComp;
		struct Unknown ReturnValue;

	}; GetAvoidanceVelocityForComponent_Params Params;

	Params.MovementComp = MovementComp;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.BillboardComponent.SetUV
inline void UBillboardComponent::SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BillboardComponent.SetUV");

	struct SetUV_Params {
		int32_t NewU;
		int32_t NewUL;
		int32_t NewV;
		int32_t NewVL;
	}; SetUV_Params Params;

	Params.NewU = NewU;
	Params.NewUL = NewUL;
	Params.NewV = NewV;
	Params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.BillboardComponent.SetSpriteAndUV
inline void UBillboardComponent::SetSpriteAndUV(struct Unknown NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BillboardComponent.SetSpriteAndUV");

	struct SetSpriteAndUV_Params {
		struct Unknown NewSprite;
		int32_t NewU;
		int32_t NewUL;
		int32_t NewV;
		int32_t NewVL;
	}; SetSpriteAndUV_Params Params;

	Params.NewSprite = NewSprite;
	Params.NewU = NewU;
	Params.NewUL = NewUL;
	Params.NewV = NewV;
	Params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.BillboardComponent.SetSprite
inline void UBillboardComponent::SetSprite(struct Unknown NewSprite) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BillboardComponent.SetSprite");

	struct SetSprite_Params {
		struct Unknown NewSprite;
	}; SetSprite_Params Params;

	Params.NewSprite = NewSprite;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraAnimInst.Stop
inline void UCameraAnimInst::Stop(char bImmediate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Stop");

	struct Stop_Params {
		char bImmediate;
	}; Stop_Params Params;

	Params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraAnimInst.SetScale
inline void UCameraAnimInst::SetScale(float NewDuration) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.SetScale");

	struct SetScale_Params {
		float NewDuration;
	}; SetScale_Params Params;

	Params.NewDuration = NewDuration;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraAnimInst.SetDuration
inline void UCameraAnimInst::SetDuration(float NewDuration) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.SetDuration");

	struct SetDuration_Params {
		float NewDuration;
	}; SetDuration_Params Params;

	Params.NewDuration = NewDuration;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraShake.ReceiveStopShake
inline void UCameraShake::ReceiveStopShake(char bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.ReceiveStopShake");

	struct ReceiveStopShake_Params {
		char bImmediately;
	}; ReceiveStopShake_Params Params;

	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraShake.ReceivePlayShake
inline void UCameraShake::ReceivePlayShake(float Scale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.ReceivePlayShake");

	struct ReceivePlayShake_Params {
		float Scale;
	}; ReceivePlayShake_Params Params;

	Params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraShake.ReceiveIsFinished
inline char UCameraShake::ReceiveIsFinished() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.ReceiveIsFinished");

	struct ReceiveIsFinished_Params {
		
		char ReturnValue;

	}; ReceiveIsFinished_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CameraShake.BlueprintUpdateCameraShake
inline void UCameraShake::BlueprintUpdateCameraShake(float DeltaTime, float ALPHA, struct Unknown& POV, struct Unknown& ModifiedPOV) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.BlueprintUpdateCameraShake");

	struct BlueprintUpdateCameraShake_Params {
		float DeltaTime;
		float ALPHA;
		struct Unknown& POV;
		struct Unknown& ModifiedPOV;
	}; BlueprintUpdateCameraShake_Params Params;

	Params.DeltaTime = DeltaTime;
	Params.ALPHA = ALPHA;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	POV = Params.POV;
	ModifiedPOV = Params.ModifiedPOV;

}

// Function Engine.CameraShakeSourceComponent.StopAllCameraShakes
inline void UCameraShakeSourceComponent::StopAllCameraShakes(char bImmediately) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShakeSourceComponent.StopAllCameraShakes");

	struct StopAllCameraShakes_Params {
		char bImmediately;
	}; StopAllCameraShakes_Params Params;

	Params.bImmediately = bImmediately;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraShakeSourceComponent.PlayCameraShake
inline void UCameraShakeSourceComponent::PlayCameraShake(struct Unknown* InCameraShake) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShakeSourceComponent.PlayCameraShake");

	struct PlayCameraShake_Params {
		struct Unknown* InCameraShake;
	}; PlayCameraShake_Params Params;

	Params.InCameraShake = InCameraShake;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraShakeSourceComponent.Play
inline void UCameraShakeSourceComponent::Play() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShakeSourceComponent.Play");

	struct Play_Params {
		
	}; Play_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CameraShakeSourceComponent.GetAttenuationFactor
inline float UCameraShakeSourceComponent::GetAttenuationFactor(struct Unknown& Location) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShakeSourceComponent.GetAttenuationFactor");

	struct GetAttenuationFactor_Params {
		struct Unknown& Location;
		float ReturnValue;

	}; GetAttenuationFactor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Location = Params.Location;


	return params.ReturnValue;
}

// Function Engine.Canvas.K2_TextSize
inline struct Unknown UCanvas::K2_TextSize(struct Unknown RenderFont, struct FString RenderText, struct Unknown Scale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_TextSize");

	struct K2_TextSize_Params {
		struct Unknown RenderFont;
		struct FString RenderText;
		struct Unknown Scale;
		struct Unknown ReturnValue;

	}; K2_TextSize_Params Params;

	Params.RenderFont = RenderFont;
	Params.RenderText = RenderText;
	Params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Canvas.K2_StrLen
inline struct Unknown UCanvas::K2_StrLen(struct Unknown RenderFont, struct FString RenderText) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_StrLen");

	struct K2_StrLen_Params {
		struct Unknown RenderFont;
		struct FString RenderText;
		struct Unknown ReturnValue;

	}; K2_StrLen_Params Params;

	Params.RenderFont = RenderFont;
	Params.RenderText = RenderText;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Canvas.K2_Project
inline struct Unknown UCanvas::K2_Project(struct Unknown WorldLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_Project");

	struct K2_Project_Params {
		struct Unknown WorldLocation;
		struct Unknown ReturnValue;

	}; K2_Project_Params Params;

	Params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Canvas.K2_DrawTriangle
inline void UCanvas::K2_DrawTriangle(struct Unknown RenderTexture, struct TArray<Unknown> Triangles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawTriangle");

	struct K2_DrawTriangle_Params {
		struct Unknown RenderTexture;
		struct TArray<Unknown> Triangles;
	}; K2_DrawTriangle_Params Params;

	Params.RenderTexture = RenderTexture;
	Params.Triangles = Triangles;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawTexture
inline void UCanvas::K2_DrawTexture(struct Unknown RenderTexture, struct Unknown ScreenPosition, struct Unknown ScreenSize, struct Unknown CoordinatePosition, struct Unknown CoordinateSize, struct Unknown RenderColor, char BlendMode, float Rotation, struct Unknown PivotPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawTexture");

	struct K2_DrawTexture_Params {
		struct Unknown RenderTexture;
		struct Unknown ScreenPosition;
		struct Unknown ScreenSize;
		struct Unknown CoordinatePosition;
		struct Unknown CoordinateSize;
		struct Unknown RenderColor;
		char BlendMode;
		float Rotation;
		struct Unknown PivotPoint;
	}; K2_DrawTexture_Params Params;

	Params.RenderTexture = RenderTexture;
	Params.ScreenPosition = ScreenPosition;
	Params.ScreenSize = ScreenSize;
	Params.CoordinatePosition = CoordinatePosition;
	Params.CoordinateSize = CoordinateSize;
	Params.RenderColor = RenderColor;
	Params.BlendMode = BlendMode;
	Params.Rotation = Rotation;
	Params.PivotPoint = PivotPoint;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawText
inline void UCanvas::K2_DrawText(struct Unknown RenderFont, struct FString RenderText, struct Unknown ScreenPosition, struct Unknown Scale, struct Unknown RenderColor, float Kerning, struct Unknown ShadowColor, struct Unknown ShadowOffset, char bCentreX, char bCentreY, char bOutlined, struct Unknown OutlineColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawText");

	struct K2_DrawText_Params {
		struct Unknown RenderFont;
		struct FString RenderText;
		struct Unknown ScreenPosition;
		struct Unknown Scale;
		struct Unknown RenderColor;
		float Kerning;
		struct Unknown ShadowColor;
		struct Unknown ShadowOffset;
		char bCentreX;
		char bCentreY;
		char bOutlined;
		struct Unknown OutlineColor;
	}; K2_DrawText_Params Params;

	Params.RenderFont = RenderFont;
	Params.RenderText = RenderText;
	Params.ScreenPosition = ScreenPosition;
	Params.Scale = Scale;
	Params.RenderColor = RenderColor;
	Params.Kerning = Kerning;
	Params.ShadowColor = ShadowColor;
	Params.ShadowOffset = ShadowOffset;
	Params.bCentreX = bCentreX;
	Params.bCentreY = bCentreY;
	Params.bOutlined = bOutlined;
	Params.OutlineColor = OutlineColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawPolygon
inline void UCanvas::K2_DrawPolygon(struct Unknown RenderTexture, struct Unknown ScreenPosition, struct Unknown Radius, int32_t NumberOfSides, struct Unknown RenderColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawPolygon");

	struct K2_DrawPolygon_Params {
		struct Unknown RenderTexture;
		struct Unknown ScreenPosition;
		struct Unknown Radius;
		int32_t NumberOfSides;
		struct Unknown RenderColor;
	}; K2_DrawPolygon_Params Params;

	Params.RenderTexture = RenderTexture;
	Params.ScreenPosition = ScreenPosition;
	Params.Radius = Radius;
	Params.NumberOfSides = NumberOfSides;
	Params.RenderColor = RenderColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawMaterialTriangle
inline void UCanvas::K2_DrawMaterialTriangle(struct Unknown RenderMaterial, struct TArray<Unknown> Triangles) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawMaterialTriangle");

	struct K2_DrawMaterialTriangle_Params {
		struct Unknown RenderMaterial;
		struct TArray<Unknown> Triangles;
	}; K2_DrawMaterialTriangle_Params Params;

	Params.RenderMaterial = RenderMaterial;
	Params.Triangles = Triangles;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawMaterial
inline void UCanvas::K2_DrawMaterial(struct Unknown RenderMaterial, struct Unknown ScreenPosition, struct Unknown ScreenSize, struct Unknown CoordinatePosition, struct Unknown CoordinateSize, float Rotation, struct Unknown PivotPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawMaterial");

	struct K2_DrawMaterial_Params {
		struct Unknown RenderMaterial;
		struct Unknown ScreenPosition;
		struct Unknown ScreenSize;
		struct Unknown CoordinatePosition;
		struct Unknown CoordinateSize;
		float Rotation;
		struct Unknown PivotPoint;
	}; K2_DrawMaterial_Params Params;

	Params.RenderMaterial = RenderMaterial;
	Params.ScreenPosition = ScreenPosition;
	Params.ScreenSize = ScreenSize;
	Params.CoordinatePosition = CoordinatePosition;
	Params.CoordinateSize = CoordinateSize;
	Params.Rotation = Rotation;
	Params.PivotPoint = PivotPoint;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawLine
inline void UCanvas::K2_DrawLine(struct Unknown ScreenPositionA, struct Unknown ScreenPositionB, float Thickness, struct Unknown RenderColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawLine");

	struct K2_DrawLine_Params {
		struct Unknown ScreenPositionA;
		struct Unknown ScreenPositionB;
		float Thickness;
		struct Unknown RenderColor;
	}; K2_DrawLine_Params Params;

	Params.ScreenPositionA = ScreenPositionA;
	Params.ScreenPositionB = ScreenPositionB;
	Params.Thickness = Thickness;
	Params.RenderColor = RenderColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawBox
inline void UCanvas::K2_DrawBox(struct Unknown ScreenPosition, struct Unknown ScreenSize, float Thickness, struct Unknown RenderColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawBox");

	struct K2_DrawBox_Params {
		struct Unknown ScreenPosition;
		struct Unknown ScreenSize;
		float Thickness;
		struct Unknown RenderColor;
	}; K2_DrawBox_Params Params;

	Params.ScreenPosition = ScreenPosition;
	Params.ScreenSize = ScreenSize;
	Params.Thickness = Thickness;
	Params.RenderColor = RenderColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_DrawBorder
inline void UCanvas::K2_DrawBorder(struct Unknown BorderTexture, struct Unknown BackgroundTexture, struct Unknown LeftBorderTexture, struct Unknown RightBorderTexture, struct Unknown TopBorderTexture, struct Unknown BottomBorderTexture, struct Unknown ScreenPosition, struct Unknown ScreenSize, struct Unknown CoordinatePosition, struct Unknown CoordinateSize, struct Unknown RenderColor, struct Unknown BorderScale, struct Unknown BackgroundScale, float Rotation, struct Unknown PivotPoint, struct Unknown CornerSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawBorder");

	struct K2_DrawBorder_Params {
		struct Unknown BorderTexture;
		struct Unknown BackgroundTexture;
		struct Unknown LeftBorderTexture;
		struct Unknown RightBorderTexture;
		struct Unknown TopBorderTexture;
		struct Unknown BottomBorderTexture;
		struct Unknown ScreenPosition;
		struct Unknown ScreenSize;
		struct Unknown CoordinatePosition;
		struct Unknown CoordinateSize;
		struct Unknown RenderColor;
		struct Unknown BorderScale;
		struct Unknown BackgroundScale;
		float Rotation;
		struct Unknown PivotPoint;
		struct Unknown CornerSize;
	}; K2_DrawBorder_Params Params;

	Params.BorderTexture = BorderTexture;
	Params.BackgroundTexture = BackgroundTexture;
	Params.LeftBorderTexture = LeftBorderTexture;
	Params.RightBorderTexture = RightBorderTexture;
	Params.TopBorderTexture = TopBorderTexture;
	Params.BottomBorderTexture = BottomBorderTexture;
	Params.ScreenPosition = ScreenPosition;
	Params.ScreenSize = ScreenSize;
	Params.CoordinatePosition = CoordinatePosition;
	Params.CoordinateSize = CoordinateSize;
	Params.RenderColor = RenderColor;
	Params.BorderScale = BorderScale;
	Params.BackgroundScale = BackgroundScale;
	Params.Rotation = Rotation;
	Params.PivotPoint = PivotPoint;
	Params.CornerSize = CornerSize;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Canvas.K2_Deproject
inline void UCanvas::K2_Deproject(struct Unknown ScreenPosition, struct Unknown& WorldOrigin, struct Unknown& WorldDirection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_Deproject");

	struct K2_Deproject_Params {
		struct Unknown ScreenPosition;
		struct Unknown& WorldOrigin;
		struct Unknown& WorldDirection;
	}; K2_Deproject_Params Params;

	Params.ScreenPosition = ScreenPosition;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	WorldOrigin = Params.WorldOrigin;
	WorldDirection = Params.WorldDirection;

}

// Function Engine.CanvasRenderTarget2D.UpdateResource
inline void UCanvasRenderTarget2D::UpdateResource() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.UpdateResource");

	struct UpdateResource_Params {
		
	}; UpdateResource_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CanvasRenderTarget2D.ReceiveUpdate
inline void UCanvasRenderTarget2D::ReceiveUpdate(struct Unknown Canvas, int32_t Width, int32_t Height) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.ReceiveUpdate");

	struct ReceiveUpdate_Params {
		struct Unknown Canvas;
		int32_t Width;
		int32_t Height;
	}; ReceiveUpdate_Params Params;

	Params.Canvas = Canvas;
	Params.Width = Width;
	Params.Height = Height;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CanvasRenderTarget2D.GetSize
inline void UCanvasRenderTarget2D::GetSize(int32_t& Width, int32_t& Height) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.GetSize");

	struct GetSize_Params {
		int32_t& Width;
		int32_t& Height;
	}; GetSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Width = Params.Width;
	Height = Params.Height;

}

// Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
inline struct Unknown UCanvasRenderTarget2D::CreateCanvasRenderTarget2D(struct Unknown WorldContextObject, struct Unknown* CanvasRenderTarget2DClass, int32_t Width, int32_t Height) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D");

	struct CreateCanvasRenderTarget2D_Params {
		struct Unknown WorldContextObject;
		struct Unknown* CanvasRenderTarget2DClass;
		int32_t Width;
		int32_t Height;
		struct Unknown ReturnValue;

	}; CreateCanvasRenderTarget2D_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.CanvasRenderTarget2DClass = CanvasRenderTarget2DClass;
	Params.Width = Width;
	Params.Height = Height;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ChildActorComponent.SetChildActorClass
inline void UChildActorComponent::SetChildActorClass(struct Unknown* InClass) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ChildActorComponent.SetChildActorClass");

	struct SetChildActorClass_Params {
		struct Unknown* InClass;
	}; SetChildActorClass_Params Params;

	Params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.CurveFloat.GetFloatValue
inline float UCurveFloat::GetFloatValue(float InTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveFloat.GetFloatValue");

	struct GetFloatValue_Params {
		float InTime;
		float ReturnValue;

	}; GetFloatValue_Params Params;

	Params.InTime = InTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CurveLinearColor.GetLinearColorValue
inline struct Unknown UCurveLinearColor::GetLinearColorValue(float InTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveLinearColor.GetLinearColorValue");

	struct GetLinearColorValue_Params {
		float InTime;
		struct Unknown ReturnValue;

	}; GetLinearColorValue_Params Params;

	Params.InTime = InTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CurveLinearColor.GetClampedLinearColorValue
inline struct Unknown UCurveLinearColor::GetClampedLinearColorValue(float InTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveLinearColor.GetClampedLinearColorValue");

	struct GetClampedLinearColorValue_Params {
		float InTime;
		struct Unknown ReturnValue;

	}; GetClampedLinearColorValue_Params Params;

	Params.InTime = InTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Texture2D.Blueprint_GetSizeY
inline int32_t UTexture2D::Blueprint_GetSizeY() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.Blueprint_GetSizeY");

	struct Blueprint_GetSizeY_Params {
		
		int32_t ReturnValue;

	}; Blueprint_GetSizeY_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Texture2D.Blueprint_GetSizeX
inline int32_t UTexture2D::Blueprint_GetSizeX() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.Blueprint_GetSizeX");

	struct Blueprint_GetSizeX_Params {
		
		int32_t ReturnValue;

	}; Blueprint_GetSizeX_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.CurveLinearColorAtlas.GetCurvePosition
inline char UCurveLinearColorAtlas::GetCurvePosition(struct Unknown InCurve, float& Position) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveLinearColorAtlas.GetCurvePosition");

	struct GetCurvePosition_Params {
		struct Unknown InCurve;
		float& Position;
		char ReturnValue;

	}; GetCurvePosition_Params Params;

	Params.InCurve = InCurve;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Position = Params.Position;


	return params.ReturnValue;
}

// Function Engine.CurveVector.GetVectorValue
inline struct Unknown UCurveVector::GetVectorValue(float InTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveVector.GetVectorValue");

	struct GetVectorValue_Params {
		float InTime;
		struct Unknown ReturnValue;

	}; GetVectorValue_Params Params;

	Params.InTime = InTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DebugCameraController.ToggleDisplay
inline void ADebugCameraController::ToggleDisplay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ToggleDisplay");

	struct ToggleDisplay_Params {
		
	}; ToggleDisplay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DebugCameraController.ShowDebugSelectedInfo
inline void ADebugCameraController::ShowDebugSelectedInfo() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ShowDebugSelectedInfo");

	struct ShowDebugSelectedInfo_Params {
		
	}; ShowDebugSelectedInfo_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DebugCameraController.SetPawnMovementSpeedScale
inline void ADebugCameraController::SetPawnMovementSpeedScale(float NewSpeedScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.SetPawnMovementSpeedScale");

	struct SetPawnMovementSpeedScale_Params {
		float NewSpeedScale;
	}; SetPawnMovementSpeedScale_Params Params;

	Params.NewSpeedScale = NewSpeedScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DebugCameraController.ReceiveOnDeactivate
inline void ADebugCameraController::ReceiveOnDeactivate(struct Unknown RestoredPC) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ReceiveOnDeactivate");

	struct ReceiveOnDeactivate_Params {
		struct Unknown RestoredPC;
	}; ReceiveOnDeactivate_Params Params;

	Params.RestoredPC = RestoredPC;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DebugCameraController.ReceiveOnActorSelected
inline void ADebugCameraController::ReceiveOnActorSelected(struct Unknown NewSelectedActor, struct Unknown& SelectHitLocation, struct Unknown& SelectHitNormal, struct Unknown& Hit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ReceiveOnActorSelected");

	struct ReceiveOnActorSelected_Params {
		struct Unknown NewSelectedActor;
		struct Unknown& SelectHitLocation;
		struct Unknown& SelectHitNormal;
		struct Unknown& Hit;
	}; ReceiveOnActorSelected_Params Params;

	Params.NewSelectedActor = NewSelectedActor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	SelectHitLocation = Params.SelectHitLocation;
	SelectHitNormal = Params.SelectHitNormal;
	Hit = Params.Hit;

}

// Function Engine.DebugCameraController.ReceiveOnActivate
inline void ADebugCameraController::ReceiveOnActivate(struct Unknown OriginalPC) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ReceiveOnActivate");

	struct ReceiveOnActivate_Params {
		struct Unknown OriginalPC;
	}; ReceiveOnActivate_Params Params;

	Params.OriginalPC = OriginalPC;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DebugCameraController.GetSelectedActor
inline struct Unknown ADebugCameraController::GetSelectedActor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.GetSelectedActor");

	struct GetSelectedActor_Params {
		
		struct Unknown ReturnValue;

	}; GetSelectedActor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalActor.SetDecalMaterial
inline void ADecalActor::SetDecalMaterial(struct Unknown NewDecalMaterial) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalActor.SetDecalMaterial");

	struct SetDecalMaterial_Params {
		struct Unknown NewDecalMaterial;
	}; SetDecalMaterial_Params Params;

	Params.NewDecalMaterial = NewDecalMaterial;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DecalActor.GetDecalMaterial
inline struct Unknown ADecalActor::GetDecalMaterial() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalActor.GetDecalMaterial");

	struct GetDecalMaterial_Params {
		
		struct Unknown ReturnValue;

	}; GetDecalMaterial_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalActor.CreateDynamicMaterialInstance
inline struct Unknown ADecalActor::CreateDynamicMaterialInstance() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalActor.CreateDynamicMaterialInstance");

	struct CreateDynamicMaterialInstance_Params {
		
		struct Unknown ReturnValue;

	}; CreateDynamicMaterialInstance_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalComponent.SetSortOrder
inline void UDecalComponent::SetSortOrder(int32_t Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetSortOrder");

	struct SetSortOrder_Params {
		int32_t Value;
	}; SetSortOrder_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DecalComponent.SetFadeScreenSize
inline void UDecalComponent::SetFadeScreenSize(float NewFadeScreenSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetFadeScreenSize");

	struct SetFadeScreenSize_Params {
		float NewFadeScreenSize;
	}; SetFadeScreenSize_Params Params;

	Params.NewFadeScreenSize = NewFadeScreenSize;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DecalComponent.SetFadeOut
inline void UDecalComponent::SetFadeOut(float StartDelay, float Duration, char DestroyOwnerAfterFade) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetFadeOut");

	struct SetFadeOut_Params {
		float StartDelay;
		float Duration;
		char DestroyOwnerAfterFade;
	}; SetFadeOut_Params Params;

	Params.StartDelay = StartDelay;
	Params.Duration = Duration;
	Params.DestroyOwnerAfterFade = DestroyOwnerAfterFade;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DecalComponent.SetFadeIn
inline void UDecalComponent::SetFadeIn(float StartDelay, float Duaration) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetFadeIn");

	struct SetFadeIn_Params {
		float StartDelay;
		float Duaration;
	}; SetFadeIn_Params Params;

	Params.StartDelay = StartDelay;
	Params.Duaration = Duaration;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DecalComponent.SetDecalMaterial
inline void UDecalComponent::SetDecalMaterial(struct Unknown NewDecalMaterial) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetDecalMaterial");

	struct SetDecalMaterial_Params {
		struct Unknown NewDecalMaterial;
	}; SetDecalMaterial_Params Params;

	Params.NewDecalMaterial = NewDecalMaterial;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DecalComponent.GetFadeStartDelay
inline float UDecalComponent::GetFadeStartDelay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetFadeStartDelay");

	struct GetFadeStartDelay_Params {
		
		float ReturnValue;

	}; GetFadeStartDelay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalComponent.GetFadeInStartDelay
inline float UDecalComponent::GetFadeInStartDelay() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetFadeInStartDelay");

	struct GetFadeInStartDelay_Params {
		
		float ReturnValue;

	}; GetFadeInStartDelay_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalComponent.GetFadeInDuration
inline float UDecalComponent::GetFadeInDuration() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetFadeInDuration");

	struct GetFadeInDuration_Params {
		
		float ReturnValue;

	}; GetFadeInDuration_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalComponent.GetFadeDuration
inline float UDecalComponent::GetFadeDuration() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetFadeDuration");

	struct GetFadeDuration_Params {
		
		float ReturnValue;

	}; GetFadeDuration_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalComponent.GetDecalMaterial
inline struct Unknown UDecalComponent::GetDecalMaterial() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetDecalMaterial");

	struct GetDecalMaterial_Params {
		
		struct Unknown ReturnValue;

	}; GetDecalMaterial_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.DecalComponent.CreateDynamicMaterialInstance
inline struct Unknown UDecalComponent::CreateDynamicMaterialInstance() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.CreateDynamicMaterialInstance");

	struct CreateDynamicMaterialInstance_Params {
		
		struct Unknown ReturnValue;

	}; CreateDynamicMaterialInstance_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Light.ToggleEnabled
inline void ALight::ToggleEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.ToggleEnabled");

	struct ToggleEnabled_Params {
		
	}; ToggleEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetLightFunctionScale
inline void ALight::SetLightFunctionScale(struct Unknown NewLightFunctionScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightFunctionScale");

	struct SetLightFunctionScale_Params {
		struct Unknown NewLightFunctionScale;
	}; SetLightFunctionScale_Params Params;

	Params.NewLightFunctionScale = NewLightFunctionScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetLightFunctionMaterial
inline void ALight::SetLightFunctionMaterial(struct Unknown NewLightFunctionMaterial) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightFunctionMaterial");

	struct SetLightFunctionMaterial_Params {
		struct Unknown NewLightFunctionMaterial;
	}; SetLightFunctionMaterial_Params Params;

	Params.NewLightFunctionMaterial = NewLightFunctionMaterial;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetLightFunctionFadeDistance
inline void ALight::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightFunctionFadeDistance");

	struct SetLightFunctionFadeDistance_Params {
		float NewLightFunctionFadeDistance;
	}; SetLightFunctionFadeDistance_Params Params;

	Params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetLightColor
inline void ALight::SetLightColor(struct Unknown NewLightColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightColor");

	struct SetLightColor_Params {
		struct Unknown NewLightColor;
	}; SetLightColor_Params Params;

	Params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetEnabled
inline void ALight::SetEnabled(char bSetEnabled) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetEnabled");

	struct SetEnabled_Params {
		char bSetEnabled;
	}; SetEnabled_Params Params;

	Params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetCastShadows
inline void ALight::SetCastShadows(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetCastShadows");

	struct SetCastShadows_Params {
		char bNewValue;
	}; SetCastShadows_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetBrightness
inline void ALight::SetBrightness(float NewBrightness) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetBrightness");

	struct SetBrightness_Params {
		float NewBrightness;
	}; SetBrightness_Params Params;

	Params.NewBrightness = NewBrightness;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.SetAffectTranslucentLighting
inline void ALight::SetAffectTranslucentLighting(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetAffectTranslucentLighting");

	struct SetAffectTranslucentLighting_Params {
		char bNewValue;
	}; SetAffectTranslucentLighting_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.OnRep_bEnabled
inline void ALight::OnRep_bEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.OnRep_bEnabled");

	struct OnRep_bEnabled_Params {
		
	}; OnRep_bEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Light.IsEnabled
inline char ALight::IsEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.IsEnabled");

	struct IsEnabled_Params {
		
		char ReturnValue;

	}; IsEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Light.GetLightColor
inline struct Unknown ALight::GetLightColor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.GetLightColor");

	struct GetLightColor_Params {
		
		struct Unknown ReturnValue;

	}; GetLightColor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Light.GetBrightness
inline float ALight::GetBrightness() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.GetBrightness");

	struct GetBrightness_Params {
		
		float ReturnValue;

	}; GetBrightness_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LightComponentBase.SetSamplesPerPixel
inline void ULightComponentBase::SetSamplesPerPixel(int32_t NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetSamplesPerPixel");

	struct SetSamplesPerPixel_Params {
		int32_t NewValue;
	}; SetSamplesPerPixel_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponentBase.SetCastVolumetricShadow
inline void ULightComponentBase::SetCastVolumetricShadow(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetCastVolumetricShadow");

	struct SetCastVolumetricShadow_Params {
		char bNewValue;
	}; SetCastVolumetricShadow_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponentBase.SetCastShadows
inline void ULightComponentBase::SetCastShadows(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetCastShadows");

	struct SetCastShadows_Params {
		char bNewValue;
	}; SetCastShadows_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponentBase.SetCastRaytracedShadow
inline void ULightComponentBase::SetCastRaytracedShadow(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetCastRaytracedShadow");

	struct SetCastRaytracedShadow_Params {
		char bNewValue;
	}; SetCastRaytracedShadow_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponentBase.SetCastDeepShadow
inline void ULightComponentBase::SetCastDeepShadow(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetCastDeepShadow");

	struct SetCastDeepShadow_Params {
		char bNewValue;
	}; SetCastDeepShadow_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponentBase.SetAffectReflection
inline void ULightComponentBase::SetAffectReflection(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetAffectReflection");

	struct SetAffectReflection_Params {
		char bNewValue;
	}; SetAffectReflection_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponentBase.SetAffectGlobalIllumination
inline void ULightComponentBase::SetAffectGlobalIllumination(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.SetAffectGlobalIllumination");

	struct SetAffectGlobalIllumination_Params {
		char bNewValue;
	}; SetAffectGlobalIllumination_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponentBase.GetLightColor
inline struct Unknown ULightComponentBase::GetLightColor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponentBase.GetLightColor");

	struct GetLightColor_Params {
		
		struct Unknown ReturnValue;

	}; GetLightColor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LightComponent.SetVolumetricScatteringIntensity
inline void ULightComponent::SetVolumetricScatteringIntensity(float NewIntensity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetVolumetricScatteringIntensity");

	struct SetVolumetricScatteringIntensity_Params {
		float NewIntensity;
	}; SetVolumetricScatteringIntensity_Params Params;

	Params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetUseIESBrightness
inline void ULightComponent::SetUseIESBrightness(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetUseIESBrightness");

	struct SetUseIESBrightness_Params {
		char bNewValue;
	}; SetUseIESBrightness_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetTransmission
inline void ULightComponent::SetTransmission(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetTransmission");

	struct SetTransmission_Params {
		char bNewValue;
	}; SetTransmission_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetTemperature
inline void ULightComponent::SetTemperature(float NewTemperature) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetTemperature");

	struct SetTemperature_Params {
		float NewTemperature;
	}; SetTemperature_Params Params;

	Params.NewTemperature = NewTemperature;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetSpecularScale
inline void ULightComponent::SetSpecularScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetSpecularScale");

	struct SetSpecularScale_Params {
		float NewValue;
	}; SetSpecularScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetShadowSlopeBias
inline void ULightComponent::SetShadowSlopeBias(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetShadowSlopeBias");

	struct SetShadowSlopeBias_Params {
		float NewValue;
	}; SetShadowSlopeBias_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetShadowResolutionScale
inline void ULightComponent::SetShadowResolutionScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetShadowResolutionScale");

	struct SetShadowResolutionScale_Params {
		float NewValue;
	}; SetShadowResolutionScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetShadowBias
inline void ULightComponent::SetShadowBias(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetShadowBias");

	struct SetShadowBias_Params {
		float NewValue;
	}; SetShadowBias_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetLightingChannels
inline void ULightComponent::SetLightingChannels(char bChannel0, char bChannel1, char bChannel2) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightingChannels");

	struct SetLightingChannels_Params {
		char bChannel0;
		char bChannel1;
		char bChannel2;
	}; SetLightingChannels_Params Params;

	Params.bChannel0 = bChannel0;
	Params.bChannel1 = bChannel1;
	Params.bChannel2 = bChannel2;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetLightFunctionScale
inline void ULightComponent::SetLightFunctionScale(struct Unknown NewLightFunctionScale) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionScale");

	struct SetLightFunctionScale_Params {
		struct Unknown NewLightFunctionScale;
	}; SetLightFunctionScale_Params Params;

	Params.NewLightFunctionScale = NewLightFunctionScale;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetLightFunctionMaterial
inline void ULightComponent::SetLightFunctionMaterial(struct Unknown NewLightFunctionMaterial) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionMaterial");

	struct SetLightFunctionMaterial_Params {
		struct Unknown NewLightFunctionMaterial;
	}; SetLightFunctionMaterial_Params Params;

	Params.NewLightFunctionMaterial = NewLightFunctionMaterial;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetLightFunctionFadeDistance
inline void ULightComponent::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionFadeDistance");

	struct SetLightFunctionFadeDistance_Params {
		float NewLightFunctionFadeDistance;
	}; SetLightFunctionFadeDistance_Params Params;

	Params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetLightFunctionDisabledBrightness
inline void ULightComponent::SetLightFunctionDisabledBrightness(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionDisabledBrightness");

	struct SetLightFunctionDisabledBrightness_Params {
		float NewValue;
	}; SetLightFunctionDisabledBrightness_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetLightColor
inline void ULightComponent::SetLightColor(struct Unknown NewLightColor, char bSRGB) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightColor");

	struct SetLightColor_Params {
		struct Unknown NewLightColor;
		char bSRGB;
	}; SetLightColor_Params Params;

	Params.NewLightColor = NewLightColor;
	Params.bSRGB = bSRGB;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetIntensity
inline void ULightComponent::SetIntensity(float NewIntensity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetIntensity");

	struct SetIntensity_Params {
		float NewIntensity;
	}; SetIntensity_Params Params;

	Params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetIndirectLightingIntensity
inline void ULightComponent::SetIndirectLightingIntensity(float NewIntensity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetIndirectLightingIntensity");

	struct SetIndirectLightingIntensity_Params {
		float NewIntensity;
	}; SetIndirectLightingIntensity_Params Params;

	Params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetIESTexture
inline void ULightComponent::SetIESTexture(struct Unknown NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetIESTexture");

	struct SetIESTexture_Params {
		struct Unknown NewValue;
	}; SetIESTexture_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetIESBrightnessScale
inline void ULightComponent::SetIESBrightnessScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetIESBrightnessScale");

	struct SetIESBrightnessScale_Params {
		float NewValue;
	}; SetIESBrightnessScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives
inline void ULightComponent::SetForceCachedShadowsForMovablePrimitives(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives");

	struct SetForceCachedShadowsForMovablePrimitives_Params {
		char bNewValue;
	}; SetForceCachedShadowsForMovablePrimitives_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetEnableLightShaftBloom
inline void ULightComponent::SetEnableLightShaftBloom(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetEnableLightShaftBloom");

	struct SetEnableLightShaftBloom_Params {
		char bNewValue;
	}; SetEnableLightShaftBloom_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetBloomTint
inline void ULightComponent::SetBloomTint(struct Unknown NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetBloomTint");

	struct SetBloomTint_Params {
		struct Unknown NewValue;
	}; SetBloomTint_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetBloomThreshold
inline void ULightComponent::SetBloomThreshold(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetBloomThreshold");

	struct SetBloomThreshold_Params {
		float NewValue;
	}; SetBloomThreshold_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetBloomScale
inline void ULightComponent::SetBloomScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetBloomScale");

	struct SetBloomScale_Params {
		float NewValue;
	}; SetBloomScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetBloomMaxBrightness
inline void ULightComponent::SetBloomMaxBrightness(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetBloomMaxBrightness");

	struct SetBloomMaxBrightness_Params {
		float NewValue;
	}; SetBloomMaxBrightness_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetAffectTranslucentLighting
inline void ULightComponent::SetAffectTranslucentLighting(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetAffectTranslucentLighting");

	struct SetAffectTranslucentLighting_Params {
		char bNewValue;
	}; SetAffectTranslucentLighting_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LightComponent.SetAffectDynamicIndirectLighting
inline void ULightComponent::SetAffectDynamicIndirectLighting(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetAffectDynamicIndirectLighting");

	struct SetAffectDynamicIndirectLighting_Params {
		char bNewValue;
	}; SetAffectDynamicIndirectLighting_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
inline void UDirectionalLightComponent::SetShadowDistanceFadeoutFraction(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction");

	struct SetShadowDistanceFadeoutFraction_Params {
		float NewValue;
	}; SetShadowDistanceFadeoutFraction_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetShadowAmount
inline void UDirectionalLightComponent::SetShadowAmount(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetShadowAmount");

	struct SetShadowAmount_Params {
		float NewValue;
	}; SetShadowAmount_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
inline void UDirectionalLightComponent::SetOcclusionMaskDarkness(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness");

	struct SetOcclusionMaskDarkness_Params {
		float NewValue;
	}; SetOcclusionMaskDarkness_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
inline void UDirectionalLightComponent::SetLightShaftOverrideDirection(struct Unknown NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection");

	struct SetLightShaftOverrideDirection_Params {
		struct Unknown NewValue;
	}; SetLightShaftOverrideDirection_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
inline void UDirectionalLightComponent::SetEnableLightShaftOcclusion(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion");

	struct SetEnableLightShaftOcclusion_Params {
		char bNewValue;
	}; SetEnableLightShaftOcclusion_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
inline void UDirectionalLightComponent::SetDynamicShadowDistanceStationaryLight(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight");

	struct SetDynamicShadowDistanceStationaryLight_Params {
		float NewValue;
	}; SetDynamicShadowDistanceStationaryLight_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
inline void UDirectionalLightComponent::SetDynamicShadowDistanceMovableLight(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight");

	struct SetDynamicShadowDistanceMovableLight_Params {
		float NewValue;
	}; SetDynamicShadowDistanceMovableLight_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetDynamicShadowCascades
inline void UDirectionalLightComponent::SetDynamicShadowCascades(int32_t NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetDynamicShadowCascades");

	struct SetDynamicShadowCascades_Params {
		int32_t NewValue;
	}; SetDynamicShadowCascades_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction
inline void UDirectionalLightComponent::SetCascadeTransitionFraction(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction");

	struct SetCascadeTransitionFraction_Params {
		float NewValue;
	}; SetCascadeTransitionFraction_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent
inline void UDirectionalLightComponent::SetCascadeDistributionExponent(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent");

	struct SetCascadeDistributionExponent_Params {
		float NewValue;
	}; SetCascadeDistributionExponent_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SphereComponent.SetSphereRadius
inline void USphereComponent::SetSphereRadius(float InSphereRadius, char bUpdateOverlaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.SetSphereRadius");

	struct SetSphereRadius_Params {
		float InSphereRadius;
		char bUpdateOverlaps;
	}; SetSphereRadius_Params Params;

	Params.InSphereRadius = InSphereRadius;
	Params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SphereComponent.GetUnscaledSphereRadius
inline float USphereComponent::GetUnscaledSphereRadius() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.GetUnscaledSphereRadius");

	struct GetUnscaledSphereRadius_Params {
		
		float ReturnValue;

	}; GetUnscaledSphereRadius_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SphereComponent.GetShapeScale
inline float USphereComponent::GetShapeScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.GetShapeScale");

	struct GetShapeScale_Params {
		
		float ReturnValue;

	}; GetShapeScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SphereComponent.GetScaledSphereRadius
inline float USphereComponent::GetScaledSphereRadius() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.GetScaledSphereRadius");

	struct GetScaledSphereRadius_Params {
		
		float ReturnValue;

	}; GetScaledSphereRadius_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Emitter.ToggleActive
inline void AEmitter::ToggleActive() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ToggleActive");

	struct ToggleActive_Params {
		
	}; ToggleActive_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.SetVectorParameter
inline void AEmitter::SetVectorParameter(struct FName ParameterName, struct Unknown Param) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetVectorParameter");

	struct SetVectorParameter_Params {
		struct FName ParameterName;
		struct Unknown Param;
	}; SetVectorParameter_Params Params;

	Params.ParameterName = ParameterName;
	Params.Param = Param;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.SetTemplate
inline void AEmitter::SetTemplate(struct Unknown NewTemplate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetTemplate");

	struct SetTemplate_Params {
		struct Unknown NewTemplate;
	}; SetTemplate_Params Params;

	Params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.SetMaterialParameter
inline void AEmitter::SetMaterialParameter(struct FName ParameterName, struct Unknown Param) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetMaterialParameter");

	struct SetMaterialParameter_Params {
		struct FName ParameterName;
		struct Unknown Param;
	}; SetMaterialParameter_Params Params;

	Params.ParameterName = ParameterName;
	Params.Param = Param;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.SetFloatParameter
inline void AEmitter::SetFloatParameter(struct FName ParameterName, float Param) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetFloatParameter");

	struct SetFloatParameter_Params {
		struct FName ParameterName;
		float Param;
	}; SetFloatParameter_Params Params;

	Params.ParameterName = ParameterName;
	Params.Param = Param;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.SetColorParameter
inline void AEmitter::SetColorParameter(struct FName ParameterName, struct Unknown Param) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetColorParameter");

	struct SetColorParameter_Params {
		struct FName ParameterName;
		struct Unknown Param;
	}; SetColorParameter_Params Params;

	Params.ParameterName = ParameterName;
	Params.Param = Param;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.SetActorParameter
inline void AEmitter::SetActorParameter(struct FName ParameterName, struct Unknown Param) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetActorParameter");

	struct SetActorParameter_Params {
		struct FName ParameterName;
		struct Unknown Param;
	}; SetActorParameter_Params Params;

	Params.ParameterName = ParameterName;
	Params.Param = Param;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.OnRep_bCurrentlyActive
inline void AEmitter::OnRep_bCurrentlyActive() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnRep_bCurrentlyActive");

	struct OnRep_bCurrentlyActive_Params {
		
	}; OnRep_bCurrentlyActive_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.OnParticleSystemFinished
inline void AEmitter::OnParticleSystemFinished(struct Unknown FinishedComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnParticleSystemFinished");

	struct OnParticleSystemFinished_Params {
		struct Unknown FinishedComponent;
	}; OnParticleSystemFinished_Params Params;

	Params.FinishedComponent = FinishedComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.IsActive
inline char AEmitter::IsActive() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.IsActive");

	struct IsActive_Params {
		
		char ReturnValue;

	}; IsActive_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.Emitter.Deactivate
inline void AEmitter::Deactivate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.Deactivate");

	struct Deactivate_Params {
		
	}; Deactivate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.Emitter.Activate
inline void AEmitter::Activate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.Activate");

	struct Activate_Params {
		
	}; Activate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFog.OnRep_bEnabled
inline void AExponentialHeightFog::OnRep_bEnabled() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFog.OnRep_bEnabled");

	struct OnRep_bEnabled_Params {
		
	}; OnRep_bEnabled_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution
inline void UExponentialHeightFogComponent::SetVolumetricFogScatteringDistribution(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution");

	struct SetVolumetricFogScatteringDistribution_Params {
		float NewValue;
	}; SetVolumetricFogScatteringDistribution_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale
inline void UExponentialHeightFogComponent::SetVolumetricFogExtinctionScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale");

	struct SetVolumetricFogExtinctionScale_Params {
		float NewValue;
	}; SetVolumetricFogExtinctionScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive
inline void UExponentialHeightFogComponent::SetVolumetricFogEmissive(struct Unknown NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive");

	struct SetVolumetricFogEmissive_Params {
		struct Unknown NewValue;
	}; SetVolumetricFogEmissive_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance
inline void UExponentialHeightFogComponent::SetVolumetricFogDistance(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance");

	struct SetVolumetricFogDistance_Params {
		float NewValue;
	}; SetVolumetricFogDistance_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo
inline void UExponentialHeightFogComponent::SetVolumetricFogAlbedo(struct Unknown NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo");

	struct SetVolumetricFogAlbedo_Params {
		struct Unknown NewValue;
	}; SetVolumetricFogAlbedo_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetVolumetricFog
inline void UExponentialHeightFogComponent::SetVolumetricFog(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetVolumetricFog");

	struct SetVolumetricFog_Params {
		char bNewValue;
	}; SetVolumetricFog_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetStartDistance
inline void UExponentialHeightFogComponent::SetStartDistance(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetStartDistance");

	struct SetStartDistance_Params {
		float Value;
	}; SetStartDistance_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance
inline void UExponentialHeightFogComponent::SetNonDirectionalInscatteringColorDistance(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance");

	struct SetNonDirectionalInscatteringColorDistance_Params {
		float Value;
	}; SetNonDirectionalInscatteringColorDistance_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint
inline void UExponentialHeightFogComponent::SetInscatteringTextureTint(struct Unknown Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint");

	struct SetInscatteringTextureTint_Params {
		struct Unknown Value;
	}; SetInscatteringTextureTint_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle
inline void UExponentialHeightFogComponent::SetInscatteringColorCubemapAngle(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle");

	struct SetInscatteringColorCubemapAngle_Params {
		float Value;
	}; SetInscatteringColorCubemapAngle_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap
inline void UExponentialHeightFogComponent::SetInscatteringColorCubemap(struct Unknown Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap");

	struct SetInscatteringColorCubemap_Params {
		struct Unknown Value;
	}; SetInscatteringColorCubemap_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance
inline void UExponentialHeightFogComponent::SetFullyDirectionalInscatteringColorDistance(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance");

	struct SetFullyDirectionalInscatteringColorDistance_Params {
		float Value;
	}; SetFullyDirectionalInscatteringColorDistance_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
inline void UExponentialHeightFogComponent::SetFogMaxOpacity(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity");

	struct SetFogMaxOpacity_Params {
		float Value;
	}; SetFogMaxOpacity_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
inline void UExponentialHeightFogComponent::SetFogInscatteringColor(struct Unknown Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor");

	struct SetFogInscatteringColor_Params {
		struct Unknown Value;
	}; SetFogInscatteringColor_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
inline void UExponentialHeightFogComponent::SetFogHeightFalloff(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff");

	struct SetFogHeightFalloff_Params {
		float Value;
	}; SetFogHeightFalloff_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetFogDensity
inline void UExponentialHeightFogComponent::SetFogDensity(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogDensity");

	struct SetFogDensity_Params {
		float Value;
	}; SetFogDensity_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance
inline void UExponentialHeightFogComponent::SetFogCutoffDistance(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance");

	struct SetFogCutoffDistance_Params {
		float Value;
	}; SetFogCutoffDistance_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
inline void UExponentialHeightFogComponent::SetDirectionalInscatteringStartDistance(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance");

	struct SetDirectionalInscatteringStartDistance_Params {
		float Value;
	}; SetDirectionalInscatteringStartDistance_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
inline void UExponentialHeightFogComponent::SetDirectionalInscatteringExponent(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent");

	struct SetDirectionalInscatteringExponent_Params {
		float Value;
	}; SetDirectionalInscatteringExponent_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
inline void UExponentialHeightFogComponent::SetDirectionalInscatteringColor(struct Unknown Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor");

	struct SetDirectionalInscatteringColor_Params {
		struct Unknown Value;
	}; SetDirectionalInscatteringColor_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ForceFeedbackComponent.Stop
inline void UForceFeedbackComponent::Stop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.Stop");

	struct Stop_Params {
		
	}; Stop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ForceFeedbackComponent.SetIntensityMultiplier
inline void UForceFeedbackComponent::SetIntensityMultiplier(float NewIntensityMultiplier) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.SetIntensityMultiplier");

	struct SetIntensityMultiplier_Params {
		float NewIntensityMultiplier;
	}; SetIntensityMultiplier_Params Params;

	Params.NewIntensityMultiplier = NewIntensityMultiplier;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect
inline void UForceFeedbackComponent::SetForceFeedbackEffect(struct Unknown NewForceFeedbackEffect) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect");

	struct SetForceFeedbackEffect_Params {
		struct Unknown NewForceFeedbackEffect;
	}; SetForceFeedbackEffect_Params Params;

	Params.NewForceFeedbackEffect = NewForceFeedbackEffect;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ForceFeedbackComponent.Play
inline void UForceFeedbackComponent::Play(float StartTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.Play");

	struct Play_Params {
		float StartTime;
	}; Play_Params Params;

	Params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply
inline char UForceFeedbackComponent::BP_GetAttenuationSettingsToApply(struct Unknown& OutAttenuationSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply");

	struct BP_GetAttenuationSettingsToApply_Params {
		struct Unknown& OutAttenuationSettings;
		char ReturnValue;

	}; BP_GetAttenuationSettingsToApply_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutAttenuationSettings = Params.OutAttenuationSettings;


	return params.ReturnValue;
}

// Function Engine.ForceFeedbackComponent.AdjustAttenuation
inline void UForceFeedbackComponent::AdjustAttenuation(struct Unknown& InAttenuationSettings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackComponent.AdjustAttenuation");

	struct AdjustAttenuation_Params {
		struct Unknown& InAttenuationSettings;
	}; AdjustAttenuation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InAttenuationSettings = Params.InAttenuationSettings;

}

// Function Engine.SpotLight.SetOuterConeAngle
inline void ASpotLight::SetOuterConeAngle(float NewOuterConeAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLight.SetOuterConeAngle");

	struct SetOuterConeAngle_Params {
		float NewOuterConeAngle;
	}; SetOuterConeAngle_Params Params;

	Params.NewOuterConeAngle = NewOuterConeAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SpotLight.SetInnerConeAngle
inline void ASpotLight::SetInnerConeAngle(float NewInnerConeAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLight.SetInnerConeAngle");

	struct SetInnerConeAngle_Params {
		float NewInnerConeAngle;
	}; SetInnerConeAngle_Params Params;

	Params.NewInnerConeAngle = NewInnerConeAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.InputComponent.WasControllerKeyJustReleased
inline char UInputComponent::WasControllerKeyJustReleased(struct Unknown Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.WasControllerKeyJustReleased");

	struct WasControllerKeyJustReleased_Params {
		struct Unknown Key;
		char ReturnValue;

	}; WasControllerKeyJustReleased_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InputComponent.WasControllerKeyJustPressed
inline char UInputComponent::WasControllerKeyJustPressed(struct Unknown Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.WasControllerKeyJustPressed");

	struct WasControllerKeyJustPressed_Params {
		struct Unknown Key;
		char ReturnValue;

	}; WasControllerKeyJustPressed_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InputComponent.IsControllerKeyDown
inline char UInputComponent::IsControllerKeyDown(struct Unknown Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.IsControllerKeyDown");

	struct IsControllerKeyDown_Params {
		struct Unknown Key;
		char ReturnValue;

	}; IsControllerKeyDown_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InputComponent.GetTouchState
inline void UInputComponent::GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, char& bIsCurrentlyPressed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetTouchState");

	struct GetTouchState_Params {
		int32_t FingerIndex;
		float& LocationX;
		float& LocationY;
		char& bIsCurrentlyPressed;
	}; GetTouchState_Params Params;

	Params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	LocationX = Params.LocationX;
	LocationY = Params.LocationY;
	bIsCurrentlyPressed = Params.bIsCurrentlyPressed;

}

// Function Engine.InputComponent.GetControllerVectorKeyState
inline struct Unknown UInputComponent::GetControllerVectorKeyState(struct Unknown Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerVectorKeyState");

	struct GetControllerVectorKeyState_Params {
		struct Unknown Key;
		struct Unknown ReturnValue;

	}; GetControllerVectorKeyState_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InputComponent.GetControllerMouseDelta
inline void UInputComponent::GetControllerMouseDelta(float& DeltaX, float& DeltaY) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerMouseDelta");

	struct GetControllerMouseDelta_Params {
		float& DeltaX;
		float& DeltaY;
	}; GetControllerMouseDelta_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	DeltaX = Params.DeltaX;
	DeltaY = Params.DeltaY;

}

// Function Engine.InputComponent.GetControllerKeyTimeDown
inline float UInputComponent::GetControllerKeyTimeDown(struct Unknown Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerKeyTimeDown");

	struct GetControllerKeyTimeDown_Params {
		struct Unknown Key;
		float ReturnValue;

	}; GetControllerKeyTimeDown_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InputComponent.GetControllerAnalogStickState
inline void UInputComponent::GetControllerAnalogStickState(char WhichStick, float& StickX, float& StickY) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerAnalogStickState");

	struct GetControllerAnalogStickState_Params {
		char WhichStick;
		float& StickX;
		float& StickY;
	}; GetControllerAnalogStickState_Params Params;

	Params.WhichStick = WhichStick;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	StickX = Params.StickX;
	StickY = Params.StickY;

}

// Function Engine.InputComponent.GetControllerAnalogKeyState
inline float UInputComponent::GetControllerAnalogKeyState(struct Unknown Key) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerAnalogKeyState");

	struct GetControllerAnalogKeyState_Params {
		struct Unknown Key;
		float ReturnValue;

	}; GetControllerAnalogKeyState_Params Params;

	Params.Key = Key;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InputSettings.SaveKeyMappings
inline void UInputSettings::SaveKeyMappings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.SaveKeyMappings");

	struct SaveKeyMappings_Params {
		
	}; SaveKeyMappings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.InputSettings.RemoveAxisMapping
inline void UInputSettings::RemoveAxisMapping(struct Unknown& KeyMapping, char bForceRebuildKeymaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.RemoveAxisMapping");

	struct RemoveAxisMapping_Params {
		struct Unknown& KeyMapping;
		char bForceRebuildKeymaps;
	}; RemoveAxisMapping_Params Params;

	Params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	KeyMapping = Params.KeyMapping;

}

// Function Engine.InputSettings.RemoveActionMapping
inline void UInputSettings::RemoveActionMapping(struct Unknown& KeyMapping, char bForceRebuildKeymaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.RemoveActionMapping");

	struct RemoveActionMapping_Params {
		struct Unknown& KeyMapping;
		char bForceRebuildKeymaps;
	}; RemoveActionMapping_Params Params;

	Params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	KeyMapping = Params.KeyMapping;

}

// Function Engine.InputSettings.GetInputSettings
inline struct Unknown UInputSettings::GetInputSettings() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.GetInputSettings");

	struct GetInputSettings_Params {
		
		struct Unknown ReturnValue;

	}; GetInputSettings_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.InputSettings.GetAxisNames
inline void UInputSettings::GetAxisNames(struct TArray<Unknown>& AxisNames) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.GetAxisNames");

	struct GetAxisNames_Params {
		struct TArray<Unknown>& AxisNames;
	}; GetAxisNames_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	AxisNames = Params.AxisNames;

}

// Function Engine.InputSettings.GetAxisMappingByName
inline void UInputSettings::GetAxisMappingByName(struct FName InAxisName, struct TArray<Unknown>& OutMappings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.GetAxisMappingByName");

	struct GetAxisMappingByName_Params {
		struct FName InAxisName;
		struct TArray<Unknown>& OutMappings;
	}; GetAxisMappingByName_Params Params;

	Params.InAxisName = InAxisName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutMappings = Params.OutMappings;

}

// Function Engine.InputSettings.GetActionNames
inline void UInputSettings::GetActionNames(struct TArray<Unknown>& ActionNames) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.GetActionNames");

	struct GetActionNames_Params {
		struct TArray<Unknown>& ActionNames;
	}; GetActionNames_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ActionNames = Params.ActionNames;

}

// Function Engine.InputSettings.GetActionMappingByName
inline void UInputSettings::GetActionMappingByName(struct FName InActionName, struct TArray<Unknown>& OutMappings) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.GetActionMappingByName");

	struct GetActionMappingByName_Params {
		struct FName InActionName;
		struct TArray<Unknown>& OutMappings;
	}; GetActionMappingByName_Params Params;

	Params.InActionName = InActionName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutMappings = Params.OutMappings;

}

// Function Engine.InputSettings.ForceRebuildKeymaps
inline void UInputSettings::ForceRebuildKeymaps() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.ForceRebuildKeymaps");

	struct ForceRebuildKeymaps_Params {
		
	}; ForceRebuildKeymaps_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.InputSettings.AddAxisMapping
inline void UInputSettings::AddAxisMapping(struct Unknown& KeyMapping, char bForceRebuildKeymaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.AddAxisMapping");

	struct AddAxisMapping_Params {
		struct Unknown& KeyMapping;
		char bForceRebuildKeymaps;
	}; AddAxisMapping_Params Params;

	Params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	KeyMapping = Params.KeyMapping;

}

// Function Engine.InputSettings.AddActionMapping
inline void UInputSettings::AddActionMapping(struct Unknown& KeyMapping, char bForceRebuildKeymaps) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputSettings.AddActionMapping");

	struct AddActionMapping_Params {
		struct Unknown& KeyMapping;
		char bForceRebuildKeymaps;
	}; AddActionMapping_Params Params;

	Params.bForceRebuildKeymaps = bForceRebuildKeymaps;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	KeyMapping = Params.KeyMapping;

}

// Function Engine.InterpToMovementComponent.StopSimulating
inline void UInterpToMovementComponent::StopSimulating(struct Unknown& HitResult) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpToMovementComponent.StopSimulating");

	struct StopSimulating_Params {
		struct Unknown& HitResult;
	}; StopSimulating_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	HitResult = Params.HitResult;

}

// Function Engine.InterpToMovementComponent.RestartMovement
inline void UInterpToMovementComponent::RestartMovement(float InitialDirection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpToMovementComponent.RestartMovement");

	struct RestartMovement_Params {
		float InitialDirection;
	}; RestartMovement_Params Params;

	Params.InitialDirection = InitialDirection;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature
inline void UInterpToMovementComponent::OnInterpToWaitEndDelegate__DelegateSignature(struct Unknown& ImpactResult, float Time) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature");

	struct OnInterpToWaitEndDelegate__DelegateSignature_Params {
		struct Unknown& ImpactResult;
		float Time;
	}; OnInterpToWaitEndDelegate__DelegateSignature_Params Params;

	Params.Time = Time;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ImpactResult = Params.ImpactResult;

}

// DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature
inline void UInterpToMovementComponent::OnInterpToWaitBeginDelegate__DelegateSignature(struct Unknown& ImpactResult, float Time) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature");

	struct OnInterpToWaitBeginDelegate__DelegateSignature_Params {
		struct Unknown& ImpactResult;
		float Time;
	}; OnInterpToWaitBeginDelegate__DelegateSignature_Params Params;

	Params.Time = Time;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ImpactResult = Params.ImpactResult;

}

// DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature
inline void UInterpToMovementComponent::OnInterpToStopDelegate__DelegateSignature(struct Unknown& ImpactResult, float Time) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature");

	struct OnInterpToStopDelegate__DelegateSignature_Params {
		struct Unknown& ImpactResult;
		float Time;
	}; OnInterpToStopDelegate__DelegateSignature_Params Params;

	Params.Time = Time;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ImpactResult = Params.ImpactResult;

}

// DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature
inline void UInterpToMovementComponent::OnInterpToReverseDelegate__DelegateSignature(struct Unknown& ImpactResult, float Time) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature");

	struct OnInterpToReverseDelegate__DelegateSignature_Params {
		struct Unknown& ImpactResult;
		float Time;
	}; OnInterpToReverseDelegate__DelegateSignature_Params Params;

	Params.Time = Time;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ImpactResult = Params.ImpactResult;

}

// DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature
inline void UInterpToMovementComponent::OnInterpToResetDelegate__DelegateSignature(struct Unknown& ImpactResult, float Time) {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature");

	struct OnInterpToResetDelegate__DelegateSignature_Params {
		struct Unknown& ImpactResult;
		float Time;
	}; OnInterpToResetDelegate__DelegateSignature_Params Params;

	Params.Time = Time;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	ImpactResult = Params.ImpactResult;

}

// Function Engine.InterpToMovementComponent.FinaliseControlPoints
inline void UInterpToMovementComponent::FinaliseControlPoints() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpToMovementComponent.FinaliseControlPoints");

	struct FinaliseControlPoints_Params {
		
	}; FinaliseControlPoints_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelStreaming.ShouldBeLoaded
inline char ULevelStreaming::ShouldBeLoaded() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.ShouldBeLoaded");

	struct ShouldBeLoaded_Params {
		
		char ReturnValue;

	}; ShouldBeLoaded_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreaming.SetShouldBeVisible
inline void ULevelStreaming::SetShouldBeVisible(char bInShouldBeVisible) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.SetShouldBeVisible");

	struct SetShouldBeVisible_Params {
		char bInShouldBeVisible;
	}; SetShouldBeVisible_Params Params;

	Params.bInShouldBeVisible = bInShouldBeVisible;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelStreaming.SetShouldBeLoaded
inline void ULevelStreaming::SetShouldBeLoaded(char bInShouldBeLoaded) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.SetShouldBeLoaded");

	struct SetShouldBeLoaded_Params {
		char bInShouldBeLoaded;
	}; SetShouldBeLoaded_Params Params;

	Params.bInShouldBeLoaded = bInShouldBeLoaded;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelStreaming.SetPriority
inline void ULevelStreaming::SetPriority(int32_t NewPriority) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.SetPriority");

	struct SetPriority_Params {
		int32_t NewPriority;
	}; SetPriority_Params Params;

	Params.NewPriority = NewPriority;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelStreaming.SetLevelLODIndex
inline void ULevelStreaming::SetLevelLODIndex(int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.SetLevelLODIndex");

	struct SetLevelLODIndex_Params {
		int32_t LODIndex;
	}; SetLevelLODIndex_Params Params;

	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LevelStreaming.IsStreamingStatePending
inline char ULevelStreaming::IsStreamingStatePending() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.IsStreamingStatePending");

	struct IsStreamingStatePending_Params {
		
		char ReturnValue;

	}; IsStreamingStatePending_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreaming.IsLevelVisible
inline char ULevelStreaming::IsLevelVisible() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.IsLevelVisible");

	struct IsLevelVisible_Params {
		
		char ReturnValue;

	}; IsLevelVisible_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreaming.IsLevelLoaded
inline char ULevelStreaming::IsLevelLoaded() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.IsLevelLoaded");

	struct IsLevelLoaded_Params {
		
		char ReturnValue;

	}; IsLevelLoaded_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreaming.GetWorldAssetPackageFName
inline struct FName ULevelStreaming::GetWorldAssetPackageFName() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.GetWorldAssetPackageFName");

	struct GetWorldAssetPackageFName_Params {
		
		struct FName ReturnValue;

	}; GetWorldAssetPackageFName_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreaming.GetLoadedLevel
inline struct Unknown ULevelStreaming::GetLoadedLevel() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.GetLoadedLevel");

	struct GetLoadedLevel_Params {
		
		struct Unknown ReturnValue;

	}; GetLoadedLevel_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreaming.GetLevelScriptActor
inline struct Unknown ULevelStreaming::GetLevelScriptActor() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.GetLevelScriptActor");

	struct GetLevelScriptActor_Params {
		
		struct Unknown ReturnValue;

	}; GetLevelScriptActor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreaming.CreateInstance
inline struct Unknown ULevelStreaming::CreateInstance(struct FString UniqueInstanceName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.CreateInstance");

	struct CreateInstance_Params {
		struct FString UniqueInstanceName;
		struct Unknown ReturnValue;

	}; CreateInstance_Params Params;

	Params.UniqueInstanceName = UniqueInstanceName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr
inline struct Unknown ULevelStreamingDynamic::LoadLevelInstanceBySoftObjectPtr(struct Unknown WorldContextObject, struct Unknown Level, struct Unknown Location, struct Unknown Rotation, char& bOutSuccess) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr");

	struct LoadLevelInstanceBySoftObjectPtr_Params {
		struct Unknown WorldContextObject;
		struct Unknown Level;
		struct Unknown Location;
		struct Unknown Rotation;
		char& bOutSuccess;
		struct Unknown ReturnValue;

	}; LoadLevelInstanceBySoftObjectPtr_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.Level = Level;
	Params.Location = Location;
	Params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	bOutSuccess = Params.bOutSuccess;


	return params.ReturnValue;
}

// Function Engine.LevelStreamingDynamic.LoadLevelInstance
inline struct Unknown ULevelStreamingDynamic::LoadLevelInstance(struct Unknown WorldContextObject, struct FString LevelName, struct Unknown Location, struct Unknown Rotation, char& bOutSuccess) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingDynamic.LoadLevelInstance");

	struct LoadLevelInstance_Params {
		struct Unknown WorldContextObject;
		struct FString LevelName;
		struct Unknown Location;
		struct Unknown Rotation;
		char& bOutSuccess;
		struct Unknown ReturnValue;

	}; LoadLevelInstance_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.LevelName = LevelName;
	Params.Location = Location;
	Params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	bOutSuccess = Params.bOutSuccess;


	return params.ReturnValue;
}

// Function Engine.LocalLightComponent.SetIntensityUnits
inline void ULocalLightComponent::SetIntensityUnits(enum class Unknow NewIntensityUnits) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalLightComponent.SetIntensityUnits");

	struct SetIntensityUnits_Params {
		enum class Unknow NewIntensityUnits;
	}; SetIntensityUnits_Params Params;

	Params.NewIntensityUnits = NewIntensityUnits;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LocalLightComponent.SetAttenuationRadius
inline void ULocalLightComponent::SetAttenuationRadius(float NewRadius) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalLightComponent.SetAttenuationRadius");

	struct SetAttenuationRadius_Params {
		float NewRadius;
	}; SetAttenuationRadius_Params Params;

	Params.NewRadius = NewRadius;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.LocalLightComponent.GetUnitsConversionFactor
inline float ULocalLightComponent::GetUnitsConversionFactor(enum class Unknow SrcUnits, enum class Unknow TargetUnits, float CosHalfConeAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalLightComponent.GetUnitsConversionFactor");

	struct GetUnitsConversionFactor_Params {
		enum class Unknow SrcUnits;
		enum class Unknow TargetUnits;
		float CosHalfConeAngle;
		float ReturnValue;

	}; GetUnitsConversionFactor_Params Params;

	Params.SrcUnits = SrcUnits;
	Params.TargetUnits = TargetUnits;
	Params.CosHalfConeAngle = CosHalfConeAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.MaterialBillboardComponent.SetElements
inline void UMaterialBillboardComponent::SetElements(struct TArray<Unknown>& NewElements) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialBillboardComponent.SetElements");

	struct SetElements_Params {
		struct TArray<Unknown>& NewElements;
	}; SetElements_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NewElements = Params.NewElements;

}

// Function Engine.MaterialBillboardComponent.AddElement
inline void UMaterialBillboardComponent::AddElement(struct Unknown Material, struct Unknown DistanceToOpacityCurve, char bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, struct Unknown DistanceToSizeCurve) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialBillboardComponent.AddElement");

	struct AddElement_Params {
		struct Unknown Material;
		struct Unknown DistanceToOpacityCurve;
		char bSizeIsInScreenSpace;
		float BaseSizeX;
		float BaseSizeY;
		struct Unknown DistanceToSizeCurve;
	}; AddElement_Params Params;

	Params.Material = Material;
	Params.DistanceToOpacityCurve = DistanceToOpacityCurve;
	Params.bSizeIsInScreenSpace = bSizeIsInScreenSpace;
	Params.BaseSizeX = BaseSizeX;
	Params.BaseSizeY = BaseSizeY;
	Params.DistanceToSizeCurve = DistanceToSizeCurve;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.Stop
inline void AMatineeActor::Stop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Stop");

	struct Stop_Params {
		
	}; Stop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.SetPosition
inline void AMatineeActor::SetPosition(float NewPosition, char bJump) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.SetPosition");

	struct SetPosition_Params {
		float NewPosition;
		char bJump;
	}; SetPosition_Params Params;

	Params.NewPosition = NewPosition;
	Params.bJump = bJump;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.SetLoopingState
inline void AMatineeActor::SetLoopingState(char bNewLooping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.SetLoopingState");

	struct SetLoopingState_Params {
		char bNewLooping;
	}; SetLoopingState_Params Params;

	Params.bNewLooping = bNewLooping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.Reverse
inline void AMatineeActor::Reverse() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Reverse");

	struct Reverse_Params {
		
	}; Reverse_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.Play
inline void AMatineeActor::Play() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Play");

	struct Play_Params {
		
	}; Play_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.Pause
inline void AMatineeActor::Pause() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Pause");

	struct Pause_Params {
		
	}; Pause_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.EnableGroupByName
inline void AMatineeActor::EnableGroupByName(struct FString GroupName, char bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.EnableGroupByName");

	struct EnableGroupByName_Params {
		struct FString GroupName;
		char bEnable;
	}; EnableGroupByName_Params Params;

	Params.GroupName = GroupName;
	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MatineeActor.ChangePlaybackDirection
inline void AMatineeActor::ChangePlaybackDirection() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.ChangePlaybackDirection");

	struct ChangePlaybackDirection_Params {
		
	}; ChangePlaybackDirection_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DKillcamComponent.OnJumpCompleteForKillcam
inline void UMK3DKillcamComponent::OnJumpCompleteForKillcam(char bSuccess) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DKillcamComponent.OnJumpCompleteForKillcam");

	struct OnJumpCompleteForKillcam_Params {
		char bSuccess;
	}; OnJumpCompleteForKillcam_Params Params;

	Params.bSuccess = bSuccess;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.MK3DTargetcamComponent.EnumerateMK3DTargetEvents
inline void UMK3DTargetcamComponent::EnumerateMK3DTargetEvents(struct Unknown World) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MK3DTargetcamComponent.EnumerateMK3DTargetEvents");

	struct EnumerateMK3DTargetEvents_Params {
		struct Unknown World;
	}; EnumerateMK3DTargetEvents_Params Params;

	Params.World = World;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ReplaySampleBase.MakeReplaySample
inline struct Unknown UReplaySampleBase::MakeReplaySample(struct Unknown Actor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReplaySampleBase.MakeReplaySample");

	struct MakeReplaySample_Params {
		struct Unknown Actor;
		struct Unknown ReturnValue;

	}; MakeReplaySample_Params Params;

	Params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ParticleSystem.ContainsEmitterType
inline char UParticleSystem::ContainsEmitterType(struct Unknown* TypeData) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.ContainsEmitterType");

	struct ContainsEmitterType_Params {
		struct Unknown* TypeData;
		char ReturnValue;

	}; ContainsEmitterType_Params Params;

	Params.TypeData = TypeData;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.SetTrailSourceData
inline void UParticleSystemComponent::SetTrailSourceData(struct FName InFirstSocketName, struct FName InSecondSocketName, char InWidthMode, float InWidth) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetTrailSourceData");

	struct SetTrailSourceData_Params {
		struct FName InFirstSocketName;
		struct FName InSecondSocketName;
		char InWidthMode;
		float InWidth;
	}; SetTrailSourceData_Params Params;

	Params.InFirstSocketName = InFirstSocketName;
	Params.InSecondSocketName = InSecondSocketName;
	Params.InWidthMode = InWidthMode;
	Params.InWidth = InWidth;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetTemplate
inline void UParticleSystemComponent::SetTemplate(struct Unknown NewTemplate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetTemplate");

	struct SetTemplate_Params {
		struct Unknown NewTemplate;
	}; SetTemplate_Params Params;

	Params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetMaterialParameter
inline void UParticleSystemComponent::SetMaterialParameter(struct FName ParameterName, struct Unknown Param) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetMaterialParameter");

	struct SetMaterialParameter_Params {
		struct FName ParameterName;
		struct Unknown Param;
	}; SetMaterialParameter_Params Params;

	Params.ParameterName = ParameterName;
	Params.Param = Param;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetBeamTargetTangent
inline void UParticleSystemComponent::SetBeamTargetTangent(int32_t EmitterIndex, struct Unknown NewTangentPoint, int32_t TargetIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetTangent");

	struct SetBeamTargetTangent_Params {
		int32_t EmitterIndex;
		struct Unknown NewTangentPoint;
		int32_t TargetIndex;
	}; SetBeamTargetTangent_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.NewTangentPoint = NewTangentPoint;
	Params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetBeamTargetStrength
inline void UParticleSystemComponent::SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetStrength");

	struct SetBeamTargetStrength_Params {
		int32_t EmitterIndex;
		float NewTargetStrength;
		int32_t TargetIndex;
	}; SetBeamTargetStrength_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.NewTargetStrength = NewTargetStrength;
	Params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetBeamTargetPoint
inline void UParticleSystemComponent::SetBeamTargetPoint(int32_t EmitterIndex, struct Unknown NewTargetPoint, int32_t TargetIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetPoint");

	struct SetBeamTargetPoint_Params {
		int32_t EmitterIndex;
		struct Unknown NewTargetPoint;
		int32_t TargetIndex;
	}; SetBeamTargetPoint_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.NewTargetPoint = NewTargetPoint;
	Params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetBeamSourceTangent
inline void UParticleSystemComponent::SetBeamSourceTangent(int32_t EmitterIndex, struct Unknown NewTangentPoint, int32_t SourceIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceTangent");

	struct SetBeamSourceTangent_Params {
		int32_t EmitterIndex;
		struct Unknown NewTangentPoint;
		int32_t SourceIndex;
	}; SetBeamSourceTangent_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.NewTangentPoint = NewTangentPoint;
	Params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetBeamSourceStrength
inline void UParticleSystemComponent::SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceStrength");

	struct SetBeamSourceStrength_Params {
		int32_t EmitterIndex;
		float NewSourceStrength;
		int32_t SourceIndex;
	}; SetBeamSourceStrength_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.NewSourceStrength = NewSourceStrength;
	Params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetBeamSourcePoint
inline void UParticleSystemComponent::SetBeamSourcePoint(int32_t EmitterIndex, struct Unknown NewSourcePoint, int32_t SourceIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourcePoint");

	struct SetBeamSourcePoint_Params {
		int32_t EmitterIndex;
		struct Unknown NewSourcePoint;
		int32_t SourceIndex;
	}; SetBeamSourcePoint_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.NewSourcePoint = NewSourcePoint;
	Params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetBeamEndPoint
inline void UParticleSystemComponent::SetBeamEndPoint(int32_t EmitterIndex, struct Unknown NewEndPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamEndPoint");

	struct SetBeamEndPoint_Params {
		int32_t EmitterIndex;
		struct Unknown NewEndPoint;
	}; SetBeamEndPoint_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.NewEndPoint = NewEndPoint;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.SetAutoAttachParams
inline void UParticleSystemComponent::SetAutoAttachParams(struct Unknown Parent, struct FName SocketName, char LocationType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetAutoAttachParams");

	struct SetAutoAttachParams_Params {
		struct Unknown Parent;
		struct FName SocketName;
		char LocationType;
	}; SetAutoAttachParams_Params Params;

	Params.Parent = Parent;
	Params.SocketName = SocketName;
	Params.LocationType = LocationType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.GetNumActiveParticles
inline int32_t UParticleSystemComponent::GetNumActiveParticles() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetNumActiveParticles");

	struct GetNumActiveParticles_Params {
		
		int32_t ReturnValue;

	}; GetNumActiveParticles_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetNamedMaterial
inline struct Unknown UParticleSystemComponent::GetNamedMaterial(struct FName InName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetNamedMaterial");

	struct GetNamedMaterial_Params {
		struct FName InName;
		struct Unknown ReturnValue;

	}; GetNamedMaterial_Params Params;

	Params.InName = InName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetBeamTargetTangent
inline char UParticleSystemComponent::GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, struct Unknown& OutTangentPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamTargetTangent");

	struct GetBeamTargetTangent_Params {
		int32_t EmitterIndex;
		int32_t TargetIndex;
		struct Unknown& OutTangentPoint;
		char ReturnValue;

	}; GetBeamTargetTangent_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutTangentPoint = Params.OutTangentPoint;


	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetBeamTargetStrength
inline char UParticleSystemComponent::GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamTargetStrength");

	struct GetBeamTargetStrength_Params {
		int32_t EmitterIndex;
		int32_t TargetIndex;
		float& OutTargetStrength;
		char ReturnValue;

	}; GetBeamTargetStrength_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutTargetStrength = Params.OutTargetStrength;


	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetBeamTargetPoint
inline char UParticleSystemComponent::GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, struct Unknown& OutTargetPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamTargetPoint");

	struct GetBeamTargetPoint_Params {
		int32_t EmitterIndex;
		int32_t TargetIndex;
		struct Unknown& OutTargetPoint;
		char ReturnValue;

	}; GetBeamTargetPoint_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutTargetPoint = Params.OutTargetPoint;


	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetBeamSourceTangent
inline char UParticleSystemComponent::GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, struct Unknown& OutTangentPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamSourceTangent");

	struct GetBeamSourceTangent_Params {
		int32_t EmitterIndex;
		int32_t SourceIndex;
		struct Unknown& OutTangentPoint;
		char ReturnValue;

	}; GetBeamSourceTangent_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutTangentPoint = Params.OutTangentPoint;


	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetBeamSourceStrength
inline char UParticleSystemComponent::GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamSourceStrength");

	struct GetBeamSourceStrength_Params {
		int32_t EmitterIndex;
		int32_t SourceIndex;
		float& OutSourceStrength;
		char ReturnValue;

	}; GetBeamSourceStrength_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutSourceStrength = Params.OutSourceStrength;


	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetBeamSourcePoint
inline char UParticleSystemComponent::GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, struct Unknown& OutSourcePoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamSourcePoint");

	struct GetBeamSourcePoint_Params {
		int32_t EmitterIndex;
		int32_t SourceIndex;
		struct Unknown& OutSourcePoint;
		char ReturnValue;

	}; GetBeamSourcePoint_Params Params;

	Params.EmitterIndex = EmitterIndex;
	Params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutSourcePoint = Params.OutSourcePoint;


	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GetBeamEndPoint
inline char UParticleSystemComponent::GetBeamEndPoint(int32_t EmitterIndex, struct Unknown& OutEndPoint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetBeamEndPoint");

	struct GetBeamEndPoint_Params {
		int32_t EmitterIndex;
		struct Unknown& OutEndPoint;
		char ReturnValue;

	}; GetBeamEndPoint_Params Params;

	Params.EmitterIndex = EmitterIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutEndPoint = Params.OutEndPoint;


	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.GenerateParticleEvent
inline void UParticleSystemComponent::GenerateParticleEvent(struct FName InEventName, float InEmitterTime, struct Unknown InLocation, struct Unknown InDirection, struct Unknown InVelocity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GenerateParticleEvent");

	struct GenerateParticleEvent_Params {
		struct FName InEventName;
		float InEmitterTime;
		struct Unknown InLocation;
		struct Unknown InDirection;
		struct Unknown InVelocity;
	}; GenerateParticleEvent_Params Params;

	Params.InEventName = InEventName;
	Params.InEmitterTime = InEmitterTime;
	Params.InLocation = InLocation;
	Params.InDirection = InDirection;
	Params.InVelocity = InVelocity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.EndTrails
inline void UParticleSystemComponent::EndTrails() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.EndTrails");

	struct EndTrails_Params {
		
	}; EndTrails_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
inline struct Unknown UParticleSystemComponent::CreateNamedDynamicMaterialInstance(struct FName InName, struct Unknown SourceMaterial) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance");

	struct CreateNamedDynamicMaterialInstance_Params {
		struct FName InName;
		struct Unknown SourceMaterial;
		struct Unknown ReturnValue;

	}; CreateNamedDynamicMaterialInstance_Params Params;

	Params.InName = InName;
	Params.SourceMaterial = SourceMaterial;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.ParticleSystemComponent.BeginTrails
inline void UParticleSystemComponent::BeginTrails(struct FName InFirstSocketName, struct FName InSecondSocketName, char InWidthMode, float InWidth) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.BeginTrails");

	struct BeginTrails_Params {
		struct FName InFirstSocketName;
		struct FName InSecondSocketName;
		char InWidthMode;
		float InWidth;
	}; BeginTrails_Params Params;

	Params.InFirstSocketName = InFirstSocketName;
	Params.InSecondSocketName = InSecondSocketName;
	Params.InWidthMode = InWidthMode;
	Params.InWidth = InWidth;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PawnNoiseEmitterComponent.MakeNoise
inline void UPawnNoiseEmitterComponent::MakeNoise(struct Unknown NoiseMaker, float Loudness, struct Unknown& NoiseLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnNoiseEmitterComponent.MakeNoise");

	struct MakeNoise_Params {
		struct Unknown NoiseMaker;
		float Loudness;
		struct Unknown& NoiseLocation;
	}; MakeNoise_Params Params;

	Params.NoiseMaker = NoiseMaker;
	Params.Loudness = Loudness;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	NoiseLocation = Params.NoiseLocation;

}

// Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer
inline void UPhysicalAnimationComponent::SetStrengthMultiplyer(float InStrengthMultiplyer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer");

	struct SetStrengthMultiplyer_Params {
		float InStrengthMultiplyer;
	}; SetStrengthMultiplyer_Params Params;

	Params.InStrengthMultiplyer = InStrengthMultiplyer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent
inline void UPhysicalAnimationComponent::SetSkeletalMeshComponent(struct Unknown InSkeletalMeshComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent");

	struct SetSkeletalMeshComponent_Params {
		struct Unknown InSkeletalMeshComponent;
	}; SetSkeletalMeshComponent_Params Params;

	Params.InSkeletalMeshComponent = InSkeletalMeshComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform
inline struct Unknown UPhysicalAnimationComponent::GetBodyTargetTransform(struct FName BodyName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform");

	struct GetBodyTargetTransform_Params {
		struct FName BodyName;
		struct Unknown ReturnValue;

	}; GetBodyTargetTransform_Params Params;

	Params.BodyName = BodyName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
inline void UPhysicalAnimationComponent::ApplyPhysicalAnimationSettingsBelow(struct FName BodyName, struct Unknown& PhysicalAnimationData, char bIncludeSelf) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow");

	struct ApplyPhysicalAnimationSettingsBelow_Params {
		struct FName BodyName;
		struct Unknown& PhysicalAnimationData;
		char bIncludeSelf;
	}; ApplyPhysicalAnimationSettingsBelow_Params Params;

	Params.BodyName = BodyName;
	Params.bIncludeSelf = bIncludeSelf;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PhysicalAnimationData = Params.PhysicalAnimationData;

}

// Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings
inline void UPhysicalAnimationComponent::ApplyPhysicalAnimationSettings(struct FName BodyName, struct Unknown& PhysicalAnimationData) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings");

	struct ApplyPhysicalAnimationSettings_Params {
		struct FName BodyName;
		struct Unknown& PhysicalAnimationData;
	}; ApplyPhysicalAnimationSettings_Params Params;

	Params.BodyName = BodyName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PhysicalAnimationData = Params.PhysicalAnimationData;

}

// Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
inline void UPhysicalAnimationComponent::ApplyPhysicalAnimationProfileBelow(struct FName BodyName, struct FName ProfileName, char bIncludeSelf, char bClearNotFound) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow");

	struct ApplyPhysicalAnimationProfileBelow_Params {
		struct FName BodyName;
		struct FName ProfileName;
		char bIncludeSelf;
		char bClearNotFound;
	}; ApplyPhysicalAnimationProfileBelow_Params Params;

	Params.BodyName = BodyName;
	Params.ProfileName = ProfileName;
	Params.bIncludeSelf = bIncludeSelf;
	Params.bClearNotFound = bClearNotFound;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing
inline void UPhysicsConstraintComponent::SetOrientationDriveTwistAndSwing(char bEnableTwistDrive, char bEnableSwingDrive) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing");

	struct SetOrientationDriveTwistAndSwing_Params {
		char bEnableTwistDrive;
		char bEnableSwingDrive;
	}; SetOrientationDriveTwistAndSwing_Params Params;

	Params.bEnableTwistDrive = bEnableTwistDrive;
	Params.bEnableSwingDrive = bEnableSwingDrive;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP
inline void UPhysicsConstraintComponent::SetOrientationDriveSLERP(char bEnableSLERP) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP");

	struct SetOrientationDriveSLERP_Params {
		char bEnableSLERP;
	}; SetOrientationDriveSLERP_Params Params;

	Params.bEnableSLERP = bEnableSLERP;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetLinearZLimit
inline void UPhysicsConstraintComponent::SetLinearZLimit(char ConstraintType, float LimitSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearZLimit");

	struct SetLinearZLimit_Params {
		char ConstraintType;
		float LimitSize;
	}; SetLinearZLimit_Params Params;

	Params.ConstraintType = ConstraintType;
	Params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetLinearYLimit
inline void UPhysicsConstraintComponent::SetLinearYLimit(char ConstraintType, float LimitSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearYLimit");

	struct SetLinearYLimit_Params {
		char ConstraintType;
		float LimitSize;
	}; SetLinearYLimit_Params Params;

	Params.ConstraintType = ConstraintType;
	Params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetLinearXLimit
inline void UPhysicsConstraintComponent::SetLinearXLimit(char ConstraintType, float LimitSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearXLimit");

	struct SetLinearXLimit_Params {
		char ConstraintType;
		float LimitSize;
	}; SetLinearXLimit_Params Params;

	Params.ConstraintType = ConstraintType;
	Params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
inline void UPhysicsConstraintComponent::SetLinearVelocityTarget(struct Unknown& InVelTarget) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget");

	struct SetLinearVelocityTarget_Params {
		struct Unknown& InVelTarget;
	}; SetLinearVelocityTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InVelTarget = Params.InVelTarget;

}

// Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
inline void UPhysicsConstraintComponent::SetLinearVelocityDrive(char bEnableDriveX, char bEnableDriveY, char bEnableDriveZ) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive");

	struct SetLinearVelocityDrive_Params {
		char bEnableDriveX;
		char bEnableDriveY;
		char bEnableDriveZ;
	}; SetLinearVelocityDrive_Params Params;

	Params.bEnableDriveX = bEnableDriveX;
	Params.bEnableDriveY = bEnableDriveY;
	Params.bEnableDriveZ = bEnableDriveZ;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget
inline void UPhysicsConstraintComponent::SetLinearPositionTarget(struct Unknown& InPosTarget) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget");

	struct SetLinearPositionTarget_Params {
		struct Unknown& InPosTarget;
	}; SetLinearPositionTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InPosTarget = Params.InPosTarget;

}

// Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive
inline void UPhysicsConstraintComponent::SetLinearPositionDrive(char bEnableDriveX, char bEnableDriveY, char bEnableDriveZ) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive");

	struct SetLinearPositionDrive_Params {
		char bEnableDriveX;
		char bEnableDriveY;
		char bEnableDriveZ;
	}; SetLinearPositionDrive_Params Params;

	Params.bEnableDriveX = bEnableDriveX;
	Params.bEnableDriveY = bEnableDriveY;
	Params.bEnableDriveZ = bEnableDriveZ;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetLinearDriveParams
inline void UPhysicsConstraintComponent::SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearDriveParams");

	struct SetLinearDriveParams_Params {
		float PositionStrength;
		float VelocityStrength;
		float InForceLimit;
	}; SetLinearDriveParams_Params Params;

	Params.PositionStrength = PositionStrength;
	Params.VelocityStrength = VelocityStrength;
	Params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetLinearBreakable
inline void UPhysicsConstraintComponent::SetLinearBreakable(char bLinearBreakable, float LinearBreakThreshold) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearBreakable");

	struct SetLinearBreakable_Params {
		char bLinearBreakable;
		float LinearBreakThreshold;
	}; SetLinearBreakable_Params Params;

	Params.bLinearBreakable = bLinearBreakable;
	Params.LinearBreakThreshold = LinearBreakThreshold;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetDisableCollision
inline void UPhysicsConstraintComponent::SetDisableCollision(char bDisableCollision) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetDisableCollision");

	struct SetDisableCollision_Params {
		char bDisableCollision;
	}; SetDisableCollision_Params Params;

	Params.bDisableCollision = bDisableCollision;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
inline void UPhysicsConstraintComponent::SetConstraintReferencePosition(char Frame, struct Unknown& RefPosition) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition");

	struct SetConstraintReferencePosition_Params {
		char Frame;
		struct Unknown& RefPosition;
	}; SetConstraintReferencePosition_Params Params;

	Params.Frame = Frame;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	RefPosition = Params.RefPosition;

}

// Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
inline void UPhysicsConstraintComponent::SetConstraintReferenceOrientation(char Frame, struct Unknown& PriAxis, struct Unknown& SecAxis) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation");

	struct SetConstraintReferenceOrientation_Params {
		char Frame;
		struct Unknown& PriAxis;
		struct Unknown& SecAxis;
	}; SetConstraintReferenceOrientation_Params Params;

	Params.Frame = Frame;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PriAxis = Params.PriAxis;
	SecAxis = Params.SecAxis;

}

// Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
inline void UPhysicsConstraintComponent::SetConstraintReferenceFrame(char Frame, struct Unknown& RefFrame) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame");

	struct SetConstraintReferenceFrame_Params {
		char Frame;
		struct Unknown& RefFrame;
	}; SetConstraintReferenceFrame_Params Params;

	Params.Frame = Frame;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	RefFrame = Params.RefFrame;

}

// Function Engine.PhysicsConstraintComponent.SetConstrainedComponents
inline void UPhysicsConstraintComponent::SetConstrainedComponents(struct Unknown Component1, struct FName BoneName1, struct Unknown Component2, struct FName BoneName2) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstrainedComponents");

	struct SetConstrainedComponents_Params {
		struct Unknown Component1;
		struct FName BoneName1;
		struct Unknown Component2;
		struct FName BoneName2;
	}; SetConstrainedComponents_Params Params;

	Params.Component1 = Component1;
	Params.BoneName1 = BoneName1;
	Params.Component2 = Component2;
	Params.BoneName2 = BoneName2;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
inline void UPhysicsConstraintComponent::SetAngularVelocityTarget(struct Unknown& InVelTarget) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget");

	struct SetAngularVelocityTarget_Params {
		struct Unknown& InVelTarget;
	}; SetAngularVelocityTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InVelTarget = Params.InVelTarget;

}

// Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing
inline void UPhysicsConstraintComponent::SetAngularVelocityDriveTwistAndSwing(char bEnableTwistDrive, char bEnableSwingDrive) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing");

	struct SetAngularVelocityDriveTwistAndSwing_Params {
		char bEnableTwistDrive;
		char bEnableSwingDrive;
	}; SetAngularVelocityDriveTwistAndSwing_Params Params;

	Params.bEnableTwistDrive = bEnableTwistDrive;
	Params.bEnableSwingDrive = bEnableSwingDrive;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP
inline void UPhysicsConstraintComponent::SetAngularVelocityDriveSLERP(char bEnableSLERP) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP");

	struct SetAngularVelocityDriveSLERP_Params {
		char bEnableSLERP;
	}; SetAngularVelocityDriveSLERP_Params Params;

	Params.bEnableSLERP = bEnableSLERP;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
inline void UPhysicsConstraintComponent::SetAngularVelocityDrive(char bEnableSwingDrive, char bEnableTwistDrive) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive");

	struct SetAngularVelocityDrive_Params {
		char bEnableSwingDrive;
		char bEnableTwistDrive;
	}; SetAngularVelocityDrive_Params Params;

	Params.bEnableSwingDrive = bEnableSwingDrive;
	Params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit
inline void UPhysicsConstraintComponent::SetAngularTwistLimit(char ConstraintType, float TwistLimitAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit");

	struct SetAngularTwistLimit_Params {
		char ConstraintType;
		float TwistLimitAngle;
	}; SetAngularTwistLimit_Params Params;

	Params.ConstraintType = ConstraintType;
	Params.TwistLimitAngle = TwistLimitAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
inline void UPhysicsConstraintComponent::SetAngularSwing2Limit(char MotionType, float Swing2LimitAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit");

	struct SetAngularSwing2Limit_Params {
		char MotionType;
		float Swing2LimitAngle;
	}; SetAngularSwing2Limit_Params Params;

	Params.MotionType = MotionType;
	Params.Swing2LimitAngle = Swing2LimitAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
inline void UPhysicsConstraintComponent::SetAngularSwing1Limit(char MotionType, float Swing1LimitAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit");

	struct SetAngularSwing1Limit_Params {
		char MotionType;
		float Swing1LimitAngle;
	}; SetAngularSwing1Limit_Params Params;

	Params.MotionType = MotionType;
	Params.Swing1LimitAngle = Swing1LimitAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
inline void UPhysicsConstraintComponent::SetAngularOrientationTarget(struct Unknown& InPosTarget) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget");

	struct SetAngularOrientationTarget_Params {
		struct Unknown& InPosTarget;
	}; SetAngularOrientationTarget_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InPosTarget = Params.InPosTarget;

}

// Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
inline void UPhysicsConstraintComponent::SetAngularOrientationDrive(char bEnableSwingDrive, char bEnableTwistDrive) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive");

	struct SetAngularOrientationDrive_Params {
		char bEnableSwingDrive;
		char bEnableTwistDrive;
	}; SetAngularOrientationDrive_Params Params;

	Params.bEnableSwingDrive = bEnableSwingDrive;
	Params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularDriveParams
inline void UPhysicsConstraintComponent::SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularDriveParams");

	struct SetAngularDriveParams_Params {
		float PositionStrength;
		float VelocityStrength;
		float InForceLimit;
	}; SetAngularDriveParams_Params Params;

	Params.PositionStrength = PositionStrength;
	Params.VelocityStrength = VelocityStrength;
	Params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularDriveMode
inline void UPhysicsConstraintComponent::SetAngularDriveMode(char DriveMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularDriveMode");

	struct SetAngularDriveMode_Params {
		char DriveMode;
	}; SetAngularDriveMode_Params Params;

	Params.DriveMode = DriveMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.SetAngularBreakable
inline void UPhysicsConstraintComponent::SetAngularBreakable(char bAngularBreakable, float AngularBreakThreshold) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularBreakable");

	struct SetAngularBreakable_Params {
		char bAngularBreakable;
		float AngularBreakThreshold;
	}; SetAngularBreakable_Params Params;

	Params.bAngularBreakable = bAngularBreakable;
	Params.AngularBreakThreshold = AngularBreakThreshold;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsConstraintComponent.IsBroken
inline char UPhysicsConstraintComponent::IsBroken() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.IsBroken");

	struct IsBroken_Params {
		
		char ReturnValue;

	}; IsBroken_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsConstraintComponent.GetCurrentTwist
inline float UPhysicsConstraintComponent::GetCurrentTwist() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.GetCurrentTwist");

	struct GetCurrentTwist_Params {
		
		float ReturnValue;

	}; GetCurrentTwist_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsConstraintComponent.GetCurrentSwing2
inline float UPhysicsConstraintComponent::GetCurrentSwing2() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.GetCurrentSwing2");

	struct GetCurrentSwing2_Params {
		
		float ReturnValue;

	}; GetCurrentSwing2_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsConstraintComponent.GetCurrentSwing1
inline float UPhysicsConstraintComponent::GetCurrentSwing1() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.GetCurrentSwing1");

	struct GetCurrentSwing1_Params {
		
		float ReturnValue;

	}; GetCurrentSwing1_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsConstraintComponent.GetConstraintForce
inline void UPhysicsConstraintComponent::GetConstraintForce(struct Unknown& OutLinearForce, struct Unknown& OutAngularForce) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.GetConstraintForce");

	struct GetConstraintForce_Params {
		struct Unknown& OutLinearForce;
		struct Unknown& OutAngularForce;
	}; GetConstraintForce_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OutLinearForce = Params.OutLinearForce;
	OutAngularForce = Params.OutAngularForce;

}

// Function Engine.PhysicsConstraintComponent.BreakConstraint
inline void UPhysicsConstraintComponent::BreakConstraint() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.BreakConstraint");

	struct BreakConstraint_Params {
		
	}; BreakConstraint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetTargetRotation
inline void UPhysicsHandleComponent::SetTargetRotation(struct Unknown NewRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetTargetRotation");

	struct SetTargetRotation_Params {
		struct Unknown NewRotation;
	}; SetTargetRotation_Params Params;

	Params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
inline void UPhysicsHandleComponent::SetTargetLocationAndRotation(struct Unknown NewLocation, struct Unknown NewRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation");

	struct SetTargetLocationAndRotation_Params {
		struct Unknown NewLocation;
		struct Unknown NewRotation;
	}; SetTargetLocationAndRotation_Params Params;

	Params.NewLocation = NewLocation;
	Params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetTargetLocation
inline void UPhysicsHandleComponent::SetTargetLocation(struct Unknown NewLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetTargetLocation");

	struct SetTargetLocation_Params {
		struct Unknown NewLocation;
	}; SetTargetLocation_Params Params;

	Params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetLinearStiffness
inline void UPhysicsHandleComponent::SetLinearStiffness(float NewLinearStiffness) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetLinearStiffness");

	struct SetLinearStiffness_Params {
		float NewLinearStiffness;
	}; SetLinearStiffness_Params Params;

	Params.NewLinearStiffness = NewLinearStiffness;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetLinearDamping
inline void UPhysicsHandleComponent::SetLinearDamping(float NewLinearDamping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetLinearDamping");

	struct SetLinearDamping_Params {
		float NewLinearDamping;
	}; SetLinearDamping_Params Params;

	Params.NewLinearDamping = NewLinearDamping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetInterpolationSpeed
inline void UPhysicsHandleComponent::SetInterpolationSpeed(float NewInterpolationSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetInterpolationSpeed");

	struct SetInterpolationSpeed_Params {
		float NewInterpolationSpeed;
	}; SetInterpolationSpeed_Params Params;

	Params.NewInterpolationSpeed = NewInterpolationSpeed;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetAngularStiffness
inline void UPhysicsHandleComponent::SetAngularStiffness(float NewAngularStiffness) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetAngularStiffness");

	struct SetAngularStiffness_Params {
		float NewAngularStiffness;
	}; SetAngularStiffness_Params Params;

	Params.NewAngularStiffness = NewAngularStiffness;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.SetAngularDamping
inline void UPhysicsHandleComponent::SetAngularDamping(float NewAngularDamping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetAngularDamping");

	struct SetAngularDamping_Params {
		float NewAngularDamping;
	}; SetAngularDamping_Params Params;

	Params.NewAngularDamping = NewAngularDamping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.ReleaseComponent
inline void UPhysicsHandleComponent::ReleaseComponent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.ReleaseComponent");

	struct ReleaseComponent_Params {
		
	}; ReleaseComponent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation
inline void UPhysicsHandleComponent::GrabComponentAtLocationWithRotation(struct Unknown Component, struct FName InBoneName, struct Unknown Location, struct Unknown Rotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation");

	struct GrabComponentAtLocationWithRotation_Params {
		struct Unknown Component;
		struct FName InBoneName;
		struct Unknown Location;
		struct Unknown Rotation;
	}; GrabComponentAtLocationWithRotation_Params Params;

	Params.Component = Component;
	Params.InBoneName = InBoneName;
	Params.Location = Location;
	Params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.GrabComponentAtLocation
inline void UPhysicsHandleComponent::GrabComponentAtLocation(struct Unknown Component, struct FName InBoneName, struct Unknown GrabLocation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GrabComponentAtLocation");

	struct GrabComponentAtLocation_Params {
		struct Unknown Component;
		struct FName InBoneName;
		struct Unknown GrabLocation;
	}; GrabComponentAtLocation_Params Params;

	Params.Component = Component;
	Params.InBoneName = InBoneName;
	Params.GrabLocation = GrabLocation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.GrabComponent
inline void UPhysicsHandleComponent::GrabComponent(struct Unknown Component, struct FName InBoneName, struct Unknown GrabLocation, char bConstrainRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GrabComponent");

	struct GrabComponent_Params {
		struct Unknown Component;
		struct FName InBoneName;
		struct Unknown GrabLocation;
		char bConstrainRotation;
	}; GrabComponent_Params Params;

	Params.Component = Component;
	Params.InBoneName = InBoneName;
	Params.GrabLocation = GrabLocation;
	Params.bConstrainRotation = bConstrainRotation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
inline void UPhysicsHandleComponent::GetTargetLocationAndRotation(struct Unknown& TargetLocation, struct Unknown& TargetRotation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation");

	struct GetTargetLocationAndRotation_Params {
		struct Unknown& TargetLocation;
		struct Unknown& TargetRotation;
	}; GetTargetLocationAndRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	TargetLocation = Params.TargetLocation;
	TargetRotation = Params.TargetRotation;

}

// Function Engine.PhysicsHandleComponent.GetGrabbedComponent
inline struct Unknown UPhysicsHandleComponent::GetGrabbedComponent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GetGrabbedComponent");

	struct GetGrabbedComponent_Params {
		
		struct Unknown ReturnValue;

	}; GetGrabbedComponent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsSpringComponent.GetSpringRestingPoint
inline struct Unknown UPhysicsSpringComponent::GetSpringRestingPoint() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsSpringComponent.GetSpringRestingPoint");

	struct GetSpringRestingPoint_Params {
		
		struct Unknown ReturnValue;

	}; GetSpringRestingPoint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsSpringComponent.GetSpringDirection
inline struct Unknown UPhysicsSpringComponent::GetSpringDirection() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsSpringComponent.GetSpringDirection");

	struct GetSpringDirection_Params {
		
		struct Unknown ReturnValue;

	}; GetSpringDirection_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
inline struct Unknown UPhysicsSpringComponent::GetSpringCurrentEndPoint() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint");

	struct GetSpringCurrentEndPoint_Params {
		
		struct Unknown ReturnValue;

	}; GetSpringCurrentEndPoint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
inline float UPhysicsSpringComponent::GetNormalizedCompressionScalar() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar");

	struct GetNormalizedCompressionScalar_Params {
		
		float ReturnValue;

	}; GetNormalizedCompressionScalar_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlanarReflection.OnInterpToggle
inline void APlanarReflection::OnInterpToggle(char bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlanarReflection.OnInterpToggle");

	struct OnInterpToggle_Params {
		char bEnable;
	}; OnInterpToggle_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops
inline char UPlatformEventsComponent::SupportsConvertibleLaptops() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops");

	struct SupportsConvertibleLaptops_Params {
		
		char ReturnValue;

	}; SupportsConvertibleLaptops_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature
inline void UPlatformEventsComponent::PlatformEventDelegate__DelegateSignature() {
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature");

	struct PlatformEventDelegate__DelegateSignature_Params {
		
	}; PlatformEventDelegate__DelegateSignature_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlatformEventsComponent.IsInTabletMode
inline char UPlatformEventsComponent::IsInTabletMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformEventsComponent.IsInTabletMode");

	struct IsInTabletMode_Params {
		
		char ReturnValue;

	}; IsInTabletMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlatformEventsComponent.IsInLaptopMode
inline char UPlatformEventsComponent::IsInLaptopMode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformEventsComponent.IsInLaptopMode");

	struct IsInLaptopMode_Params {
		
		char ReturnValue;

	}; IsInLaptopMode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlatformInterfaceWebResponse.GetNumHeaders
inline int32_t UPlatformInterfaceWebResponse::GetNumHeaders() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetNumHeaders");

	struct GetNumHeaders_Params {
		
		int32_t ReturnValue;

	}; GetNumHeaders_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlatformInterfaceWebResponse.GetHeaderValue
inline struct FString UPlatformInterfaceWebResponse::GetHeaderValue(struct FString HeaderName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetHeaderValue");

	struct GetHeaderValue_Params {
		struct FString HeaderName;
		struct FString ReturnValue;

	}; GetHeaderValue_Params Params;

	Params.HeaderName = HeaderName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.PlatformInterfaceWebResponse.GetHeader
inline void UPlatformInterfaceWebResponse::GetHeader(int32_t HeaderIndex, struct FString& Header, struct FString& Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetHeader");

	struct GetHeader_Params {
		int32_t HeaderIndex;
		struct FString& Header;
		struct FString& Value;
	}; GetHeader_Params Params;

	Params.HeaderIndex = HeaderIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Header = Params.Header;
	Value = Params.Value;

}

// Function Engine.PlayerInput.SetMouseSensitivity
inline void UPlayerInput::SetMouseSensitivity(float Sensitivity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetMouseSensitivity");

	struct SetMouseSensitivity_Params {
		float Sensitivity;
	}; SetMouseSensitivity_Params Params;

	Params.Sensitivity = Sensitivity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerInput.SetBind
inline void UPlayerInput::SetBind(struct FName BindName, struct FString Command) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetBind");

	struct SetBind_Params {
		struct FName BindName;
		struct FString Command;
	}; SetBind_Params Params;

	Params.BindName = BindName;
	Params.Command = Command;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerInput.InvertAxisKey
inline void UPlayerInput::InvertAxisKey(struct Unknown AxisKey) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertAxisKey");

	struct InvertAxisKey_Params {
		struct Unknown AxisKey;
	}; InvertAxisKey_Params Params;

	Params.AxisKey = AxisKey;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerInput.InvertAxis
inline void UPlayerInput::InvertAxis(struct FName AxisName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertAxis");

	struct InvertAxis_Params {
		struct FName AxisName;
	}; InvertAxis_Params Params;

	Params.AxisName = AxisName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PlayerInput.ClearSmoothing
inline void UPlayerInput::ClearSmoothing() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ClearSmoothing");

	struct ClearSmoothing_Params {
		
	}; ClearSmoothing_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PointLight.SetRadius
inline void APointLight::SetRadius(float NewRadius) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLight.SetRadius");

	struct SetRadius_Params {
		float NewRadius;
	}; SetRadius_Params Params;

	Params.NewRadius = NewRadius;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PointLight.SetLightFalloffExponent
inline void APointLight::SetLightFalloffExponent(float NewLightFalloffExponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLight.SetLightFalloffExponent");

	struct SetLightFalloffExponent_Params {
		float NewLightFalloffExponent;
	}; SetLightFalloffExponent_Params Params;

	Params.NewLightFalloffExponent = NewLightFalloffExponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PointLightComponent.SetSourceRadius
inline void UPointLightComponent::SetSourceRadius(float bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetSourceRadius");

	struct SetSourceRadius_Params {
		float bNewValue;
	}; SetSourceRadius_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PointLightComponent.SetSourceLength
inline void UPointLightComponent::SetSourceLength(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetSourceLength");

	struct SetSourceLength_Params {
		float NewValue;
	}; SetSourceLength_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PointLightComponent.SetSoftSourceRadius
inline void UPointLightComponent::SetSoftSourceRadius(float bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetSoftSourceRadius");

	struct SetSoftSourceRadius_Params {
		float bNewValue;
	}; SetSoftSourceRadius_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PointLightComponent.SetLightFalloffExponent
inline void UPointLightComponent::SetLightFalloffExponent(float NewLightFalloffExponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetLightFalloffExponent");

	struct SetLightFalloffExponent_Params {
		float NewLightFalloffExponent;
	}; SetLightFalloffExponent_Params Params;

	Params.NewLightFalloffExponent = NewLightFalloffExponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PostProcessComponent.AddOrUpdateBlendable
inline void UPostProcessComponent::AddOrUpdateBlendable(struct TScriptInterface<IUnknown> InBlendableObject, float InWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PostProcessComponent.AddOrUpdateBlendable");

	struct AddOrUpdateBlendable_Params {
		struct TScriptInterface<IUnknown> InBlendableObject;
		float InWeight;
	}; AddOrUpdateBlendable_Params Params;

	Params.InBlendableObject = InBlendableObject;
	Params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.PostProcessVolume.AddOrUpdateBlendable
inline void APostProcessVolume::AddOrUpdateBlendable(struct TScriptInterface<IUnknown> InBlendableObject, float InWeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PostProcessVolume.AddOrUpdateBlendable");

	struct AddOrUpdateBlendable_Params {
		struct TScriptInterface<IUnknown> InBlendableObject;
		float InWeight;
	}; AddOrUpdateBlendable_Params Params;

	Params.InBlendableObject = InBlendableObject;
	Params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RadialForceActor.ToggleForce
inline void ARadialForceActor::ToggleForce() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.ToggleForce");

	struct ToggleForce_Params {
		
	}; ToggleForce_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RadialForceActor.FireImpulse
inline void ARadialForceActor::FireImpulse() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.FireImpulse");

	struct FireImpulse_Params {
		
	}; FireImpulse_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RadialForceActor.EnableForce
inline void ARadialForceActor::EnableForce() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.EnableForce");

	struct EnableForce_Params {
		
	}; EnableForce_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RadialForceActor.DisableForce
inline void ARadialForceActor::DisableForce() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.DisableForce");

	struct DisableForce_Params {
		
	}; DisableForce_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RadialForceComponent.RemoveObjectTypeToAffect
inline void URadialForceComponent::RemoveObjectTypeToAffect(char ObjectType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceComponent.RemoveObjectTypeToAffect");

	struct RemoveObjectTypeToAffect_Params {
		char ObjectType;
	}; RemoveObjectTypeToAffect_Params Params;

	Params.ObjectType = ObjectType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RadialForceComponent.FireImpulse
inline void URadialForceComponent::FireImpulse() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceComponent.FireImpulse");

	struct FireImpulse_Params {
		
	}; FireImpulse_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RadialForceComponent.AddObjectTypeToAffect
inline void URadialForceComponent::AddObjectTypeToAffect(char ObjectType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceComponent.AddObjectTypeToAffect");

	struct AddObjectTypeToAffect_Params {
		char ObjectType;
	}; AddObjectTypeToAffect_Params Params;

	Params.ObjectType = ObjectType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RectLightComponent.SetSourceWidth
inline void URectLightComponent::SetSourceWidth(float bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RectLightComponent.SetSourceWidth");

	struct SetSourceWidth_Params {
		float bNewValue;
	}; SetSourceWidth_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RectLightComponent.SetSourceTexture
inline void URectLightComponent::SetSourceTexture(struct Unknown bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RectLightComponent.SetSourceTexture");

	struct SetSourceTexture_Params {
		struct Unknown bNewValue;
	}; SetSourceTexture_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RectLightComponent.SetSourceHeight
inline void URectLightComponent::SetSourceHeight(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RectLightComponent.SetSourceHeight");

	struct SetSourceHeight_Params {
		float NewValue;
	}; SetSourceHeight_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RectLightComponent.SetBarnDoorLength
inline void URectLightComponent::SetBarnDoorLength(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RectLightComponent.SetBarnDoorLength");

	struct SetBarnDoorLength_Params {
		float NewValue;
	}; SetBarnDoorLength_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RectLightComponent.SetBarnDoorAngle
inline void URectLightComponent::SetBarnDoorAngle(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RectLightComponent.SetBarnDoorAngle");

	struct SetBarnDoorAngle_Params {
		float NewValue;
	}; SetBarnDoorAngle_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.RuntimeVirtualTexture.GetTileSize
inline int32_t URuntimeVirtualTexture::GetTileSize() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RuntimeVirtualTexture.GetTileSize");

	struct GetTileSize_Params {
		
		int32_t ReturnValue;

	}; GetTileSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.RuntimeVirtualTexture.GetTileCount
inline int32_t URuntimeVirtualTexture::GetTileCount() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RuntimeVirtualTexture.GetTileCount");

	struct GetTileCount_Params {
		
		int32_t ReturnValue;

	}; GetTileCount_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.RuntimeVirtualTexture.GetTileBorderSize
inline int32_t URuntimeVirtualTexture::GetTileBorderSize() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RuntimeVirtualTexture.GetTileBorderSize");

	struct GetTileBorderSize_Params {
		
		int32_t ReturnValue;

	}; GetTileBorderSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.RuntimeVirtualTexture.GetSize
inline int32_t URuntimeVirtualTexture::GetSize() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RuntimeVirtualTexture.GetSize");

	struct GetSize_Params {
		
		int32_t ReturnValue;

	}; GetSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.RuntimeVirtualTextureComponent.GetVirtualTextureTransform
inline struct Unknown URuntimeVirtualTextureComponent::GetVirtualTextureTransform() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RuntimeVirtualTextureComponent.GetVirtualTextureTransform");

	struct GetVirtualTextureTransform_Params {
		
		struct Unknown ReturnValue;

	}; GetVirtualTextureTransform_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SceneCaptureComponentCube.CaptureScene
inline void USceneCaptureComponentCube::CaptureScene() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponentCube.CaptureScene");

	struct CaptureScene_Params {
		
	}; CaptureScene_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SceneCaptureCube.OnInterpToggle
inline void ASceneCaptureCube::OnInterpToggle(char bEnable) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureCube.OnInterpToggle");

	struct OnInterpToggle_Params {
		char bEnable;
	}; OnInterpToggle_Params Params;

	Params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation
inline void USkeletalMeshSocket::InitializeSocketFromLocation(struct Unknown SkelComp, struct Unknown WorldLocation, struct Unknown WorldNormal) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation");

	struct InitializeSocketFromLocation_Params {
		struct Unknown SkelComp;
		struct Unknown WorldLocation;
		struct Unknown WorldNormal;
	}; InitializeSocketFromLocation_Params Params;

	Params.SkelComp = SkelComp;
	Params.WorldLocation = WorldLocation;
	Params.WorldNormal = WorldNormal;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkeletalMeshSocket.GetSocketLocation
inline struct Unknown USkeletalMeshSocket::GetSocketLocation(struct Unknown SkelComp) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshSocket.GetSocketLocation");

	struct GetSocketLocation_Params {
		struct Unknown SkelComp;
		struct Unknown ReturnValue;

	}; GetSocketLocation_Params Params;

	Params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor
inline void USkyAtmosphereComponent::SetSkyLuminanceFactor(struct Unknown NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor");

	struct SetSkyLuminanceFactor_Params {
		struct Unknown NewValue;
	}; SetSkyLuminanceFactor_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale
inline void USkyAtmosphereComponent::SetRayleighScatteringScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale");

	struct SetRayleighScatteringScale_Params {
		float NewValue;
	}; SetRayleighScatteringScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetRayleighScattering
inline void USkyAtmosphereComponent::SetRayleighScattering(struct Unknown NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetRayleighScattering");

	struct SetRayleighScattering_Params {
		struct Unknown NewValue;
	}; SetRayleighScattering_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution
inline void USkyAtmosphereComponent::SetRayleighExponentialDistribution(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution");

	struct SetRayleighExponentialDistribution_Params {
		float NewValue;
	}; SetRayleighExponentialDistribution_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale
inline void USkyAtmosphereComponent::SetOtherAbsorptionScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale");

	struct SetOtherAbsorptionScale_Params {
		float NewValue;
	}; SetOtherAbsorptionScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetOtherAbsorption
inline void USkyAtmosphereComponent::SetOtherAbsorption(struct Unknown NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetOtherAbsorption");

	struct SetOtherAbsorption_Params {
		struct Unknown NewValue;
	}; SetOtherAbsorption_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetMieScatteringScale
inline void USkyAtmosphereComponent::SetMieScatteringScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetMieScatteringScale");

	struct SetMieScatteringScale_Params {
		float NewValue;
	}; SetMieScatteringScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetMieScattering
inline void USkyAtmosphereComponent::SetMieScattering(struct Unknown NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetMieScattering");

	struct SetMieScattering_Params {
		struct Unknown NewValue;
	}; SetMieScattering_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution
inline void USkyAtmosphereComponent::SetMieExponentialDistribution(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution");

	struct SetMieExponentialDistribution_Params {
		float NewValue;
	}; SetMieExponentialDistribution_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetMieAnisotropy
inline void USkyAtmosphereComponent::SetMieAnisotropy(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetMieAnisotropy");

	struct SetMieAnisotropy_Params {
		float NewValue;
	}; SetMieAnisotropy_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale
inline void USkyAtmosphereComponent::SetMieAbsorptionScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale");

	struct SetMieAbsorptionScale_Params {
		float NewValue;
	}; SetMieAbsorptionScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetMieAbsorption
inline void USkyAtmosphereComponent::SetMieAbsorption(struct Unknown NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetMieAbsorption");

	struct SetMieAbsorption_Params {
		struct Unknown NewValue;
	}; SetMieAbsorption_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetHeightFogContribution
inline void USkyAtmosphereComponent::SetHeightFogContribution(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetHeightFogContribution");

	struct SetHeightFogContribution_Params {
		float NewValue;
	}; SetHeightFogContribution_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale
inline void USkyAtmosphereComponent::SetAerialPespectiveViewDistanceScale(float NewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale");

	struct SetAerialPespectiveViewDistanceScale_Params {
		float NewValue;
	}; SetAerialPespectiveViewDistanceScale_Params Params;

	Params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection
inline void USkyAtmosphereComponent::OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, struct Unknown& LightDirection) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection");

	struct OverrideAtmosphereLightDirection_Params {
		int32_t AtmosphereLightIndex;
		struct Unknown& LightDirection;
	}; OverrideAtmosphereLightDirection_Params Params;

	Params.AtmosphereLightIndex = AtmosphereLightIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	LightDirection = Params.LightDirection;

}

// Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity
inline void USkyLightComponent::SetVolumetricScatteringIntensity(float NewIntensity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity");

	struct SetVolumetricScatteringIntensity_Params {
		float NewIntensity;
	}; SetVolumetricScatteringIntensity_Params Params;

	Params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetOcclusionTint
inline void USkyLightComponent::SetOcclusionTint(struct Unknown& InTint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetOcclusionTint");

	struct SetOcclusionTint_Params {
		struct Unknown& InTint;
	}; SetOcclusionTint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InTint = Params.InTint;

}

// Function Engine.SkyLightComponent.SetOcclusionFoliageTint
inline void USkyLightComponent::SetOcclusionFoliageTint(struct Unknown& InTint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetOcclusionFoliageTint");

	struct SetOcclusionFoliageTint_Params {
		struct Unknown& InTint;
	}; SetOcclusionFoliageTint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InTint = Params.InTint;

}

// Function Engine.SkyLightComponent.SetOcclusionExponent
inline void USkyLightComponent::SetOcclusionExponent(float InOcclusionExponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetOcclusionExponent");

	struct SetOcclusionExponent_Params {
		float InOcclusionExponent;
	}; SetOcclusionExponent_Params Params;

	Params.InOcclusionExponent = InOcclusionExponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetOcclusionContrast
inline void USkyLightComponent::SetOcclusionContrast(float InOcclusionContrast) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetOcclusionContrast");

	struct SetOcclusionContrast_Params {
		float InOcclusionContrast;
	}; SetOcclusionContrast_Params Params;

	Params.InOcclusionContrast = InOcclusionContrast;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetOcclusionBarkTint
inline void USkyLightComponent::SetOcclusionBarkTint(struct Unknown& InTint) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetOcclusionBarkTint");

	struct SetOcclusionBarkTint_Params {
		struct Unknown& InTint;
	}; SetOcclusionBarkTint_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InTint = Params.InTint;

}

// Function Engine.SkyLightComponent.SetMinOcclusion
inline void USkyLightComponent::SetMinOcclusion(float InMinOcclusion) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetMinOcclusion");

	struct SetMinOcclusion_Params {
		float InMinOcclusion;
	}; SetMinOcclusion_Params Params;

	Params.InMinOcclusion = InMinOcclusion;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetLowerHemisphereColor
inline void USkyLightComponent::SetLowerHemisphereColor(struct Unknown& InLowerHemisphereColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetLowerHemisphereColor");

	struct SetLowerHemisphereColor_Params {
		struct Unknown& InLowerHemisphereColor;
	}; SetLowerHemisphereColor_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InLowerHemisphereColor = Params.InLowerHemisphereColor;

}

// Function Engine.SkyLightComponent.SetLightColor
inline void USkyLightComponent::SetLightColor(struct Unknown NewLightColor) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetLightColor");

	struct SetLightColor_Params {
		struct Unknown NewLightColor;
	}; SetLightColor_Params Params;

	Params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetIntensity
inline void USkyLightComponent::SetIntensity(float NewIntensity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetIntensity");

	struct SetIntensity_Params {
		float NewIntensity;
	}; SetIntensity_Params Params;

	Params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetIndirectLightingIntensity
inline void USkyLightComponent::SetIndirectLightingIntensity(float NewIntensity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetIndirectLightingIntensity");

	struct SetIndirectLightingIntensity_Params {
		float NewIntensity;
	}; SetIndirectLightingIntensity_Params Params;

	Params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetCubemapBlend
inline void USkyLightComponent::SetCubemapBlend(struct Unknown SourceCubemap, struct Unknown DestinationCubemap, float InBlendFraction) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetCubemapBlend");

	struct SetCubemapBlend_Params {
		struct Unknown SourceCubemap;
		struct Unknown DestinationCubemap;
		float InBlendFraction;
	}; SetCubemapBlend_Params Params;

	Params.SourceCubemap = SourceCubemap;
	Params.DestinationCubemap = DestinationCubemap;
	Params.InBlendFraction = InBlendFraction;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetCubemap
inline void USkyLightComponent::SetCubemap(struct Unknown NewCubemap) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetCubemap");

	struct SetCubemap_Params {
		struct Unknown NewCubemap;
	}; SetCubemap_Params Params;

	Params.NewCubemap = NewCubemap;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.SetAffectDynamicIndirectLighting
inline void USkyLightComponent::SetAffectDynamicIndirectLighting(char bNewValue) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetAffectDynamicIndirectLighting");

	struct SetAffectDynamicIndirectLighting_Params {
		char bNewValue;
	}; SetAffectDynamicIndirectLighting_Params Params;

	Params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SkyLightComponent.RecaptureSky
inline void USkyLightComponent::RecaptureSky() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.RecaptureSky");

	struct RecaptureSky_Params {
		
	}; RecaptureSky_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SoundSubmix.StopRecordingOutput
inline void USoundSubmix::StopRecordingOutput(struct Unknown WorldContextObject, enum class Unknow ExportType, struct FString Name, struct FString Path, struct Unknown ExistingSoundWaveToOverwrite) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundSubmix.StopRecordingOutput");

	struct StopRecordingOutput_Params {
		struct Unknown WorldContextObject;
		enum class Unknow ExportType;
		struct FString Name;
		struct FString Path;
		struct Unknown ExistingSoundWaveToOverwrite;
	}; StopRecordingOutput_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.ExportType = ExportType;
	Params.Name = Name;
	Params.Path = Path;
	Params.ExistingSoundWaveToOverwrite = ExistingSoundWaveToOverwrite;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SoundSubmix.StopEnvelopeFollowing
inline void USoundSubmix::StopEnvelopeFollowing(struct Unknown WorldContextObject) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundSubmix.StopEnvelopeFollowing");

	struct StopEnvelopeFollowing_Params {
		struct Unknown WorldContextObject;
	}; StopEnvelopeFollowing_Params Params;

	Params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SoundSubmix.StartRecordingOutput
inline void USoundSubmix::StartRecordingOutput(struct Unknown WorldContextObject, float ExpectedDuration) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundSubmix.StartRecordingOutput");

	struct StartRecordingOutput_Params {
		struct Unknown WorldContextObject;
		float ExpectedDuration;
	}; StartRecordingOutput_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.ExpectedDuration = ExpectedDuration;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SoundSubmix.StartEnvelopeFollowing
inline void USoundSubmix::StartEnvelopeFollowing(struct Unknown WorldContextObject) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundSubmix.StartEnvelopeFollowing");

	struct StartEnvelopeFollowing_Params {
		struct Unknown WorldContextObject;
	}; StartEnvelopeFollowing_Params Params;

	Params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SoundSubmix.SetSubmixOutputVolume
inline void USoundSubmix::SetSubmixOutputVolume(struct Unknown WorldContextObject, float InOutputVolume) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundSubmix.SetSubmixOutputVolume");

	struct SetSubmixOutputVolume_Params {
		struct Unknown WorldContextObject;
		float InOutputVolume;
	}; SetSubmixOutputVolume_Params Params;

	Params.WorldContextObject = WorldContextObject;
	Params.InOutputVolume = InOutputVolume;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate
inline void USoundSubmix::AddEnvelopeFollowerDelegate(struct Unknown WorldContextObject, struct FDelegate& OnSubmixEnvelopeBP) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate");

	struct AddEnvelopeFollowerDelegate_Params {
		struct Unknown WorldContextObject;
		struct FDelegate& OnSubmixEnvelopeBP;
	}; AddEnvelopeFollowerDelegate_Params Params;

	Params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	OnSubmixEnvelopeBP = Params.OnSubmixEnvelopeBP;

}

// Function Engine.SplineMeshComponent.UpdateMesh
inline void USplineMeshComponent::UpdateMesh() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.UpdateMesh");

	struct UpdateMesh_Params {
		
	}; UpdateMesh_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetStartTangent
inline void USplineMeshComponent::SetStartTangent(struct Unknown StartTangent, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartTangent");

	struct SetStartTangent_Params {
		struct Unknown StartTangent;
		char bUpdateMesh;
	}; SetStartTangent_Params Params;

	Params.StartTangent = StartTangent;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetStartScale
inline void USplineMeshComponent::SetStartScale(struct Unknown StartScale, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartScale");

	struct SetStartScale_Params {
		struct Unknown StartScale;
		char bUpdateMesh;
	}; SetStartScale_Params Params;

	Params.StartScale = StartScale;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetStartRoll
inline void USplineMeshComponent::SetStartRoll(float StartRoll, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartRoll");

	struct SetStartRoll_Params {
		float StartRoll;
		char bUpdateMesh;
	}; SetStartRoll_Params Params;

	Params.StartRoll = StartRoll;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetStartPosition
inline void USplineMeshComponent::SetStartPosition(struct Unknown StartPos, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartPosition");

	struct SetStartPosition_Params {
		struct Unknown StartPos;
		char bUpdateMesh;
	}; SetStartPosition_Params Params;

	Params.StartPos = StartPos;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetStartOffset
inline void USplineMeshComponent::SetStartOffset(struct Unknown StartOffset, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartOffset");

	struct SetStartOffset_Params {
		struct Unknown StartOffset;
		char bUpdateMesh;
	}; SetStartOffset_Params Params;

	Params.StartOffset = StartOffset;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetStartAndEnd
inline void USplineMeshComponent::SetStartAndEnd(struct Unknown StartPos, struct Unknown StartTangent, struct Unknown EndPos, struct Unknown EndTangent, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartAndEnd");

	struct SetStartAndEnd_Params {
		struct Unknown StartPos;
		struct Unknown StartTangent;
		struct Unknown EndPos;
		struct Unknown EndTangent;
		char bUpdateMesh;
	}; SetStartAndEnd_Params Params;

	Params.StartPos = StartPos;
	Params.StartTangent = StartTangent;
	Params.EndPos = EndPos;
	Params.EndTangent = EndTangent;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetSplineUpDir
inline void USplineMeshComponent::SetSplineUpDir(struct Unknown& InSplineUpDir, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetSplineUpDir");

	struct SetSplineUpDir_Params {
		struct Unknown& InSplineUpDir;
		char bUpdateMesh;
	}; SetSplineUpDir_Params Params;

	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	InSplineUpDir = Params.InSplineUpDir;

}

// Function Engine.SplineMeshComponent.SetForwardAxis
inline void USplineMeshComponent::SetForwardAxis(char InForwardAxis, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetForwardAxis");

	struct SetForwardAxis_Params {
		char InForwardAxis;
		char bUpdateMesh;
	}; SetForwardAxis_Params Params;

	Params.InForwardAxis = InForwardAxis;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetEndTangent
inline void USplineMeshComponent::SetEndTangent(struct Unknown EndTangent, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndTangent");

	struct SetEndTangent_Params {
		struct Unknown EndTangent;
		char bUpdateMesh;
	}; SetEndTangent_Params Params;

	Params.EndTangent = EndTangent;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetEndScale
inline void USplineMeshComponent::SetEndScale(struct Unknown EndScale, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndScale");

	struct SetEndScale_Params {
		struct Unknown EndScale;
		char bUpdateMesh;
	}; SetEndScale_Params Params;

	Params.EndScale = EndScale;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetEndRoll
inline void USplineMeshComponent::SetEndRoll(float EndRoll, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndRoll");

	struct SetEndRoll_Params {
		float EndRoll;
		char bUpdateMesh;
	}; SetEndRoll_Params Params;

	Params.EndRoll = EndRoll;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetEndPosition
inline void USplineMeshComponent::SetEndPosition(struct Unknown EndPos, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndPosition");

	struct SetEndPosition_Params {
		struct Unknown EndPos;
		char bUpdateMesh;
	}; SetEndPosition_Params Params;

	Params.EndPos = EndPos;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetEndOffset
inline void USplineMeshComponent::SetEndOffset(struct Unknown EndOffset, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndOffset");

	struct SetEndOffset_Params {
		struct Unknown EndOffset;
		char bUpdateMesh;
	}; SetEndOffset_Params Params;

	Params.EndOffset = EndOffset;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetBoundaryMin
inline void USplineMeshComponent::SetBoundaryMin(float InBoundaryMin, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetBoundaryMin");

	struct SetBoundaryMin_Params {
		float InBoundaryMin;
		char bUpdateMesh;
	}; SetBoundaryMin_Params Params;

	Params.InBoundaryMin = InBoundaryMin;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.SetBoundaryMax
inline void USplineMeshComponent::SetBoundaryMax(float InBoundaryMax, char bUpdateMesh) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetBoundaryMax");

	struct SetBoundaryMax_Params {
		float InBoundaryMax;
		char bUpdateMesh;
	}; SetBoundaryMax_Params Params;

	Params.InBoundaryMax = InBoundaryMax;
	Params.bUpdateMesh = bUpdateMesh;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SplineMeshComponent.GetStartTangent
inline struct Unknown USplineMeshComponent::GetStartTangent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartTangent");

	struct GetStartTangent_Params {
		
		struct Unknown ReturnValue;

	}; GetStartTangent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetStartScale
inline struct Unknown USplineMeshComponent::GetStartScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartScale");

	struct GetStartScale_Params {
		
		struct Unknown ReturnValue;

	}; GetStartScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetStartRoll
inline float USplineMeshComponent::GetStartRoll() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartRoll");

	struct GetStartRoll_Params {
		
		float ReturnValue;

	}; GetStartRoll_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetStartPosition
inline struct Unknown USplineMeshComponent::GetStartPosition() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartPosition");

	struct GetStartPosition_Params {
		
		struct Unknown ReturnValue;

	}; GetStartPosition_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetStartOffset
inline struct Unknown USplineMeshComponent::GetStartOffset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartOffset");

	struct GetStartOffset_Params {
		
		struct Unknown ReturnValue;

	}; GetStartOffset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetSplineUpDir
inline struct Unknown USplineMeshComponent::GetSplineUpDir() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetSplineUpDir");

	struct GetSplineUpDir_Params {
		
		struct Unknown ReturnValue;

	}; GetSplineUpDir_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetForwardAxis
inline char USplineMeshComponent::GetForwardAxis() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetForwardAxis");

	struct GetForwardAxis_Params {
		
		char ReturnValue;

	}; GetForwardAxis_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetEndTangent
inline struct Unknown USplineMeshComponent::GetEndTangent() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndTangent");

	struct GetEndTangent_Params {
		
		struct Unknown ReturnValue;

	}; GetEndTangent_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetEndScale
inline struct Unknown USplineMeshComponent::GetEndScale() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndScale");

	struct GetEndScale_Params {
		
		struct Unknown ReturnValue;

	}; GetEndScale_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetEndRoll
inline float USplineMeshComponent::GetEndRoll() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndRoll");

	struct GetEndRoll_Params {
		
		float ReturnValue;

	}; GetEndRoll_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetEndPosition
inline struct Unknown USplineMeshComponent::GetEndPosition() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndPosition");

	struct GetEndPosition_Params {
		
		struct Unknown ReturnValue;

	}; GetEndPosition_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetEndOffset
inline struct Unknown USplineMeshComponent::GetEndOffset() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndOffset");

	struct GetEndOffset_Params {
		
		struct Unknown ReturnValue;

	}; GetEndOffset_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetBoundaryMin
inline float USplineMeshComponent::GetBoundaryMin() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetBoundaryMin");

	struct GetBoundaryMin_Params {
		
		float ReturnValue;

	}; GetBoundaryMin_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SplineMeshComponent.GetBoundaryMax
inline float USplineMeshComponent::GetBoundaryMax() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetBoundaryMax");

	struct GetBoundaryMax_Params {
		
		float ReturnValue;

	}; GetBoundaryMax_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SpotLightComponent.SetOuterConeAngle
inline void USpotLightComponent::SetOuterConeAngle(float NewOuterConeAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightComponent.SetOuterConeAngle");

	struct SetOuterConeAngle_Params {
		float NewOuterConeAngle;
	}; SetOuterConeAngle_Params Params;

	Params.NewOuterConeAngle = NewOuterConeAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SpotLightComponent.SetInnerConeAngle
inline void USpotLightComponent::SetInnerConeAngle(float NewInnerConeAngle) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightComponent.SetInnerConeAngle");

	struct SetInnerConeAngle_Params {
		float NewInnerConeAngle;
	}; SetInnerConeAngle_Params Params;

	Params.NewInnerConeAngle = NewInnerConeAngle;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.SpringArmComponent.IsCollisionFixApplied
inline char USpringArmComponent::IsCollisionFixApplied() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpringArmComponent.IsCollisionFixApplied");

	struct IsCollisionFixApplied_Params {
		
		char ReturnValue;

	}; IsCollisionFixApplied_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SpringArmComponent.GetUnfixedCameraPosition
inline struct Unknown USpringArmComponent::GetUnfixedCameraPosition() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpringArmComponent.GetUnfixedCameraPosition");

	struct GetUnfixedCameraPosition_Params {
		
		struct Unknown ReturnValue;

	}; GetUnfixedCameraPosition_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.SpringArmComponent.GetTargetRotation
inline struct Unknown USpringArmComponent::GetTargetRotation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpringArmComponent.GetTargetRotation");

	struct GetTargetRotation_Params {
		
		struct Unknown ReturnValue;

	}; GetTargetRotation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.RemoveSocket
inline void UStaticMesh::RemoveSocket(struct Unknown Socket) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.RemoveSocket");

	struct RemoveSocket_Params {
		struct Unknown Socket;
	}; RemoveSocket_Params Params;

	Params.Socket = Socket;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StaticMesh.GetNumTriangles
inline int32_t UStaticMesh::GetNumTriangles(int32_t LODIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetNumTriangles");

	struct GetNumTriangles_Params {
		int32_t LODIndex;
		int32_t ReturnValue;

	}; GetNumTriangles_Params Params;

	Params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.GetNumSections
inline int32_t UStaticMesh::GetNumSections(int32_t InLOD) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetNumSections");

	struct GetNumSections_Params {
		int32_t InLOD;
		int32_t ReturnValue;

	}; GetNumSections_Params Params;

	Params.InLOD = InLOD;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.GetNumMaterial
inline int32_t UStaticMesh::GetNumMaterial() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetNumMaterial");

	struct GetNumMaterial_Params {
		
		int32_t ReturnValue;

	}; GetNumMaterial_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.GetNumLODs
inline int32_t UStaticMesh::GetNumLODs() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetNumLODs");

	struct GetNumLODs_Params {
		
		int32_t ReturnValue;

	}; GetNumLODs_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.GetMinimumLODForPlatforms
inline void UStaticMesh::GetMinimumLODForPlatforms(struct TMap<Unknown, Unknown>& PlatformMinimumLODs) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetMinimumLODForPlatforms");

	struct GetMinimumLODForPlatforms_Params {
		struct TMap<Unknown;
		Unknown>& PlatformMinimumLODs;
	}; GetMinimumLODForPlatforms_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PlatformMinimumLODs = Params.PlatformMinimumLODs;

}

// Function Engine.StaticMesh.GetMinimumLODForPlatform
inline int32_t UStaticMesh::GetMinimumLODForPlatform(struct FName& PlatformName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetMinimumLODForPlatform");

	struct GetMinimumLODForPlatform_Params {
		struct FName& PlatformName;
		int32_t ReturnValue;

	}; GetMinimumLODForPlatform_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	PlatformName = Params.PlatformName;


	return params.ReturnValue;
}

// Function Engine.StaticMesh.GetMaterialIndex
inline int32_t UStaticMesh::GetMaterialIndex(struct FName MaterialSlotName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetMaterialIndex");

	struct GetMaterialIndex_Params {
		struct FName MaterialSlotName;
		int32_t ReturnValue;

	}; GetMaterialIndex_Params Params;

	Params.MaterialSlotName = MaterialSlotName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.GetMaterial
inline struct Unknown UStaticMesh::GetMaterial(int32_t MaterialIndex) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetMaterial");

	struct GetMaterial_Params {
		int32_t MaterialIndex;
		struct Unknown ReturnValue;

	}; GetMaterial_Params Params;

	Params.MaterialIndex = MaterialIndex;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.GetBounds
inline struct Unknown UStaticMesh::GetBounds() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetBounds");

	struct GetBounds_Params {
		
		struct Unknown ReturnValue;

	}; GetBounds_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.GetBoundingBox
inline struct Unknown UStaticMesh::GetBoundingBox() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.GetBoundingBox");

	struct GetBoundingBox_Params {
		
		struct Unknown ReturnValue;

	}; GetBoundingBox_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.FindSocket
inline struct Unknown UStaticMesh::FindSocket(struct FName InSocketName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.FindSocket");

	struct FindSocket_Params {
		struct FName InSocketName;
		struct Unknown ReturnValue;

	}; FindSocket_Params Params;

	Params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.CreateStaticMeshDescription
inline struct Unknown UStaticMesh::CreateStaticMeshDescription(struct Unknown Outer) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.CreateStaticMeshDescription");

	struct CreateStaticMeshDescription_Params {
		struct Unknown Outer;
		struct Unknown ReturnValue;

	}; CreateStaticMeshDescription_Params Params;

	Params.Outer = Outer;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StaticMesh.BuildFromStaticMeshDescriptions
inline void UStaticMesh::BuildFromStaticMeshDescriptions(struct TArray<Unknown>& StaticMeshDescriptions, char bBuildSimpleCollision) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.BuildFromStaticMeshDescriptions");

	struct BuildFromStaticMeshDescriptions_Params {
		struct TArray<Unknown>& StaticMeshDescriptions;
		char bBuildSimpleCollision;
	}; BuildFromStaticMeshDescriptions_Params Params;

	Params.bBuildSimpleCollision = bBuildSimpleCollision;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	StaticMeshDescriptions = Params.StaticMeshDescriptions;

}

// Function Engine.StaticMesh.AddSocket
inline void UStaticMesh::AddSocket(struct Unknown Socket) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.AddSocket");

	struct AddSocket_Params {
		struct Unknown Socket;
	}; AddSocket_Params Params;

	Params.Socket = Socket;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StaticMesh.AddMaterial
inline struct FName UStaticMesh::AddMaterial(struct Unknown Material) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMesh.AddMaterial");

	struct AddMaterial_Params {
		struct Unknown Material;
		struct FName ReturnValue;

	}; AddMaterial_Params Params;

	Params.Material = Material;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StereoLayerComponent.SetUVRect
inline void UStereoLayerComponent::SetUVRect(struct Unknown InUVRect) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetUVRect");

	struct SetUVRect_Params {
		struct Unknown InUVRect;
	}; SetUVRect_Params Params;

	Params.InUVRect = InUVRect;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerComponent.SetTexture
inline void UStereoLayerComponent::SetTexture(struct Unknown InTexture) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetTexture");

	struct SetTexture_Params {
		struct Unknown InTexture;
	}; SetTexture_Params Params;

	Params.InTexture = InTexture;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerComponent.SetQuadSize
inline void UStereoLayerComponent::SetQuadSize(struct Unknown InQuadSize) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetQuadSize");

	struct SetQuadSize_Params {
		struct Unknown InQuadSize;
	}; SetQuadSize_Params Params;

	Params.InQuadSize = InQuadSize;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerComponent.SetPriority
inline void UStereoLayerComponent::SetPriority(int32_t InPriority) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetPriority");

	struct SetPriority_Params {
		int32_t InPriority;
	}; SetPriority_Params Params;

	Params.InPriority = InPriority;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerComponent.SetLeftTexture
inline void UStereoLayerComponent::SetLeftTexture(struct Unknown InTexture) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetLeftTexture");

	struct SetLeftTexture_Params {
		struct Unknown InTexture;
	}; SetLeftTexture_Params Params;

	Params.InTexture = InTexture;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerComponent.SetEquirectProps
inline void UStereoLayerComponent::SetEquirectProps(struct Unknown InScaleBiases) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.SetEquirectProps");

	struct SetEquirectProps_Params {
		struct Unknown InScaleBiases;
	}; SetEquirectProps_Params Params;

	Params.InScaleBiases = InScaleBiases;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerComponent.MarkTextureForUpdate
inline void UStereoLayerComponent::MarkTextureForUpdate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.MarkTextureForUpdate");

	struct MarkTextureForUpdate_Params {
		
	}; MarkTextureForUpdate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerComponent.GetUVRect
inline struct Unknown UStereoLayerComponent::GetUVRect() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.GetUVRect");

	struct GetUVRect_Params {
		
		struct Unknown ReturnValue;

	}; GetUVRect_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StereoLayerComponent.GetTexture
inline struct Unknown UStereoLayerComponent::GetTexture() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.GetTexture");

	struct GetTexture_Params {
		
		struct Unknown ReturnValue;

	}; GetTexture_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StereoLayerComponent.GetQuadSize
inline struct Unknown UStereoLayerComponent::GetQuadSize() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.GetQuadSize");

	struct GetQuadSize_Params {
		
		struct Unknown ReturnValue;

	}; GetQuadSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StereoLayerComponent.GetPriority
inline int32_t UStereoLayerComponent::GetPriority() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.GetPriority");

	struct GetPriority_Params {
		
		int32_t ReturnValue;

	}; GetPriority_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StereoLayerComponent.GetLeftTexture
inline struct Unknown UStereoLayerComponent::GetLeftTexture() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerComponent.GetLeftTexture");

	struct GetLeftTexture_Params {
		
		struct Unknown ReturnValue;

	}; GetLeftTexture_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.StereoLayerShapeCylinder.SetRadius
inline void UStereoLayerShapeCylinder::SetRadius(float InRadius) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerShapeCylinder.SetRadius");

	struct SetRadius_Params {
		float InRadius;
	}; SetRadius_Params Params;

	Params.InRadius = InRadius;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerShapeCylinder.SetOverlayArc
inline void UStereoLayerShapeCylinder::SetOverlayArc(float InOverlayArc) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerShapeCylinder.SetOverlayArc");

	struct SetOverlayArc_Params {
		float InOverlayArc;
	}; SetOverlayArc_Params Params;

	Params.InOverlayArc = InOverlayArc;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerShapeCylinder.SetHeight
inline void UStereoLayerShapeCylinder::SetHeight(int32_t InHeight) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerShapeCylinder.SetHeight");

	struct SetHeight_Params {
		int32_t InHeight;
	}; SetHeight_Params Params;

	Params.InHeight = InHeight;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.StereoLayerShapeEquirect.SetEquirectProps
inline void UStereoLayerShapeEquirect::SetEquirectProps(struct Unknown InScaleBiases) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StereoLayerShapeEquirect.SetEquirectProps");

	struct SetEquirectProps_Params {
		struct Unknown InScaleBiases;
	}; SetEquirectProps_Params Params;

	Params.InScaleBiases = InScaleBiases;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimecodeProvider.GetTimecode
inline struct Unknown UTimecodeProvider::GetTimecode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimecodeProvider.GetTimecode");

	struct GetTimecode_Params {
		
		struct Unknown ReturnValue;

	}; GetTimecode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimecodeProvider.GetSynchronizationState
inline enum class Unknow UTimecodeProvider::GetSynchronizationState() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimecodeProvider.GetSynchronizationState");

	struct GetSynchronizationState_Params {
		
		enum class Unknow ReturnValue;

	}; GetSynchronizationState_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimecodeProvider.GetQualifiedFrameTime
inline struct Unknown UTimecodeProvider::GetQualifiedFrameTime() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimecodeProvider.GetQualifiedFrameTime");

	struct GetQualifiedFrameTime_Params {
		
		struct Unknown ReturnValue;

	}; GetQualifiedFrameTime_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimecodeProvider.GetFrameRate
inline struct Unknown UTimecodeProvider::GetFrameRate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimecodeProvider.GetFrameRate");

	struct GetFrameRate_Params {
		
		struct Unknown ReturnValue;

	}; GetFrameRate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimecodeProvider.GetDelayedTimecode
inline struct Unknown UTimecodeProvider::GetDelayedTimecode() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimecodeProvider.GetDelayedTimecode");

	struct GetDelayedTimecode_Params {
		
		struct Unknown ReturnValue;

	}; GetDelayedTimecode_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimecodeProvider.GetDelayedQualifiedFrameTime
inline struct Unknown UTimecodeProvider::GetDelayedQualifiedFrameTime() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimecodeProvider.GetDelayedQualifiedFrameTime");

	struct GetDelayedQualifiedFrameTime_Params {
		
		struct Unknown ReturnValue;

	}; GetDelayedQualifiedFrameTime_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TextRenderComponent.SetYScale
inline void UTextRenderComponent::SetYScale(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetYScale");

	struct SetYScale_Params {
		float Value;
	}; SetYScale_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetXScale
inline void UTextRenderComponent::SetXScale(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetXScale");

	struct SetXScale_Params {
		float Value;
	}; SetXScale_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetWorldSize
inline void UTextRenderComponent::SetWorldSize(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetWorldSize");

	struct SetWorldSize_Params {
		float Value;
	}; SetWorldSize_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetVertSpacingAdjust
inline void UTextRenderComponent::SetVertSpacingAdjust(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetVertSpacingAdjust");

	struct SetVertSpacingAdjust_Params {
		float Value;
	}; SetVertSpacingAdjust_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetVerticalAlignment
inline void UTextRenderComponent::SetVerticalAlignment(char Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetVerticalAlignment");

	struct SetVerticalAlignment_Params {
		char Value;
	}; SetVerticalAlignment_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetTextRenderColor
inline void UTextRenderComponent::SetTextRenderColor(struct Unknown Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetTextRenderColor");

	struct SetTextRenderColor_Params {
		struct Unknown Value;
	}; SetTextRenderColor_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetTextMaterial
inline void UTextRenderComponent::SetTextMaterial(struct Unknown Material) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetTextMaterial");

	struct SetTextMaterial_Params {
		struct Unknown Material;
	}; SetTextMaterial_Params Params;

	Params.Material = Material;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetText
inline void UTextRenderComponent::SetText(struct FString Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetText");

	struct SetText_Params {
		struct FString Value;
	}; SetText_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetHorizSpacingAdjust
inline void UTextRenderComponent::SetHorizSpacingAdjust(float Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetHorizSpacingAdjust");

	struct SetHorizSpacingAdjust_Params {
		float Value;
	}; SetHorizSpacingAdjust_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetHorizontalAlignment
inline void UTextRenderComponent::SetHorizontalAlignment(char Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetHorizontalAlignment");

	struct SetHorizontalAlignment_Params {
		char Value;
	}; SetHorizontalAlignment_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.SetFont
inline void UTextRenderComponent::SetFont(struct Unknown Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetFont");

	struct SetFont_Params {
		struct Unknown Value;
	}; SetFont_Params Params;

	Params.Value = Value;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TextRenderComponent.K2_SetText
inline void UTextRenderComponent::K2_SetText(struct FText& Value) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.K2_SetText");

	struct K2_SetText_Params {
		struct FText& Value;
	}; K2_SetText_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	Value = Params.Value;

}

// Function Engine.TextRenderComponent.GetTextWorldSize
inline struct Unknown UTextRenderComponent::GetTextWorldSize() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.GetTextWorldSize");

	struct GetTextWorldSize_Params {
		
		struct Unknown ReturnValue;

	}; GetTextWorldSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TextRenderComponent.GetTextLocalSize
inline struct Unknown UTextRenderComponent::GetTextLocalSize() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.GetTextLocalSize");

	struct GetTextLocalSize_Params {
		
		struct Unknown ReturnValue;

	}; GetTextLocalSize_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimelineComponent.Stop
inline void UTimelineComponent::Stop() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.Stop");

	struct Stop_Params {
		
	}; Stop_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetVectorCurve
inline void UTimelineComponent::SetVectorCurve(struct Unknown NewVectorCurve, struct FName VectorTrackName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetVectorCurve");

	struct SetVectorCurve_Params {
		struct Unknown NewVectorCurve;
		struct FName VectorTrackName;
	}; SetVectorCurve_Params Params;

	Params.NewVectorCurve = NewVectorCurve;
	Params.VectorTrackName = VectorTrackName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetTimelineLengthMode
inline void UTimelineComponent::SetTimelineLengthMode(char NewLengthMode) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetTimelineLengthMode");

	struct SetTimelineLengthMode_Params {
		char NewLengthMode;
	}; SetTimelineLengthMode_Params Params;

	Params.NewLengthMode = NewLengthMode;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetTimelineLength
inline void UTimelineComponent::SetTimelineLength(float NewLength) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetTimelineLength");

	struct SetTimelineLength_Params {
		float NewLength;
	}; SetTimelineLength_Params Params;

	Params.NewLength = NewLength;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetPlayRate
inline void UTimelineComponent::SetPlayRate(float NewRate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetPlayRate");

	struct SetPlayRate_Params {
		float NewRate;
	}; SetPlayRate_Params Params;

	Params.NewRate = NewRate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetPlaybackPosition
inline void UTimelineComponent::SetPlaybackPosition(float NewPosition, char bFireEvents, char bFireUpdate) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetPlaybackPosition");

	struct SetPlaybackPosition_Params {
		float NewPosition;
		char bFireEvents;
		char bFireUpdate;
	}; SetPlaybackPosition_Params Params;

	Params.NewPosition = NewPosition;
	Params.bFireEvents = bFireEvents;
	Params.bFireUpdate = bFireUpdate;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetNewTime
inline void UTimelineComponent::SetNewTime(float NewTime) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetNewTime");

	struct SetNewTime_Params {
		float NewTime;
	}; SetNewTime_Params Params;

	Params.NewTime = NewTime;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetLooping
inline void UTimelineComponent::SetLooping(char bNewLooping) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetLooping");

	struct SetLooping_Params {
		char bNewLooping;
	}; SetLooping_Params Params;

	Params.bNewLooping = bNewLooping;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetLinearColorCurve
inline void UTimelineComponent::SetLinearColorCurve(struct Unknown NewLinearColorCurve, struct FName LinearColorTrackName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetLinearColorCurve");

	struct SetLinearColorCurve_Params {
		struct Unknown NewLinearColorCurve;
		struct FName LinearColorTrackName;
	}; SetLinearColorCurve_Params Params;

	Params.NewLinearColorCurve = NewLinearColorCurve;
	Params.LinearColorTrackName = LinearColorTrackName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetIgnoreTimeDilation
inline void UTimelineComponent::SetIgnoreTimeDilation(char bNewIgnoreTimeDilation) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetIgnoreTimeDilation");

	struct SetIgnoreTimeDilation_Params {
		char bNewIgnoreTimeDilation;
	}; SetIgnoreTimeDilation_Params Params;

	Params.bNewIgnoreTimeDilation = bNewIgnoreTimeDilation;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.SetFloatCurve
inline void UTimelineComponent::SetFloatCurve(struct Unknown NewFloatCurve, struct FName FloatTrackName) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetFloatCurve");

	struct SetFloatCurve_Params {
		struct Unknown NewFloatCurve;
		struct FName FloatTrackName;
	}; SetFloatCurve_Params Params;

	Params.NewFloatCurve = NewFloatCurve;
	Params.FloatTrackName = FloatTrackName;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.ReverseFromEnd
inline void UTimelineComponent::ReverseFromEnd() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.ReverseFromEnd");

	struct ReverseFromEnd_Params {
		
	}; ReverseFromEnd_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.Reverse
inline void UTimelineComponent::Reverse() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.Reverse");

	struct Reverse_Params {
		
	}; Reverse_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.PlayFromStart
inline void UTimelineComponent::PlayFromStart() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.PlayFromStart");

	struct PlayFromStart_Params {
		
	}; PlayFromStart_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.Play
inline void UTimelineComponent::Play() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.Play");

	struct Play_Params {
		
	}; Play_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.OnRep_Timeline
inline void UTimelineComponent::OnRep_Timeline() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.OnRep_Timeline");

	struct OnRep_Timeline_Params {
		
	}; OnRep_Timeline_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.TimelineComponent.IsReversing
inline char UTimelineComponent::IsReversing() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.IsReversing");

	struct IsReversing_Params {
		
		char ReturnValue;

	}; IsReversing_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimelineComponent.IsPlaying
inline char UTimelineComponent::IsPlaying() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.IsPlaying");

	struct IsPlaying_Params {
		
		char ReturnValue;

	}; IsPlaying_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimelineComponent.IsLooping
inline char UTimelineComponent::IsLooping() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.IsLooping");

	struct IsLooping_Params {
		
		char ReturnValue;

	}; IsLooping_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimelineComponent.GetTimelineLength
inline float UTimelineComponent::GetTimelineLength() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetTimelineLength");

	struct GetTimelineLength_Params {
		
		float ReturnValue;

	}; GetTimelineLength_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimelineComponent.GetPlayRate
inline float UTimelineComponent::GetPlayRate() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetPlayRate");

	struct GetPlayRate_Params {
		
		float ReturnValue;

	}; GetPlayRate_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimelineComponent.GetPlaybackPosition
inline float UTimelineComponent::GetPlaybackPosition() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetPlaybackPosition");

	struct GetPlaybackPosition_Params {
		
		float ReturnValue;

	}; GetPlaybackPosition_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.TimelineComponent.GetIgnoreTimeDilation
inline char UTimelineComponent::GetIgnoreTimeDilation() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetIgnoreTimeDilation");

	struct GetIgnoreTimeDilation_Params {
		
		char ReturnValue;

	}; GetIgnoreTimeDilation_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.VectorFieldComponent.SetIntensity
inline void UVectorFieldComponent::SetIntensity(float NewIntensity) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VectorFieldComponent.SetIntensity");

	struct SetIntensity_Params {
		float NewIntensity;
	}; SetIntensity_Params Params;

	Params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.VOIPTalker.RegisterWithPlayerState
inline void UVOIPTalker::RegisterWithPlayerState(struct Unknown OwningState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VOIPTalker.RegisterWithPlayerState");

	struct RegisterWithPlayerState_Params {
		struct Unknown OwningState;
	}; RegisterWithPlayerState_Params Params;

	Params.OwningState = OwningState;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.VOIPTalker.GetVoiceLevel
inline float UVOIPTalker::GetVoiceLevel() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VOIPTalker.GetVoiceLevel");

	struct GetVoiceLevel_Params {
		
		float ReturnValue;

	}; GetVoiceLevel_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.VOIPTalker.CreateTalkerForPlayer
inline struct Unknown UVOIPTalker::CreateTalkerForPlayer(struct Unknown OwningState) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VOIPTalker.CreateTalkerForPlayer");

	struct CreateTalkerForPlayer_Params {
		struct Unknown OwningState;
		struct Unknown ReturnValue;

	}; CreateTalkerForPlayer_Params Params;

	Params.OwningState = OwningState;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;

	return params.ReturnValue;
}

// Function Engine.VOIPTalker.BPOnTalkingEnd
inline void UVOIPTalker::BPOnTalkingEnd() {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VOIPTalker.BPOnTalkingEnd");

	struct BPOnTalkingEnd_Params {
		
	}; BPOnTalkingEnd_Params Params;


	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.VOIPTalker.BPOnTalkingBegin
inline void UVOIPTalker::BPOnTalkingBegin(struct Unknown AudioComponent) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VOIPTalker.BPOnTalkingBegin");

	struct BPOnTalkingBegin_Params {
		struct Unknown AudioComponent;
	}; BPOnTalkingBegin_Params Params;

	Params.AudioComponent = AudioComponent;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.WindDirectionalSourceComponent.SetWindType
inline void UWindDirectionalSourceComponent::SetWindType(enum class Unknow InNewType) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetWindType");

	struct SetWindType_Params {
		enum class Unknow InNewType;
	}; SetWindType_Params Params;

	Params.InNewType = InNewType;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.WindDirectionalSourceComponent.SetStrength
inline void UWindDirectionalSourceComponent::SetStrength(float InNewStrength) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetStrength");

	struct SetStrength_Params {
		float InNewStrength;
	}; SetStrength_Params Params;

	Params.InNewStrength = InNewStrength;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.WindDirectionalSourceComponent.SetSpeed
inline void UWindDirectionalSourceComponent::SetSpeed(float InNewSpeed) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetSpeed");

	struct SetSpeed_Params {
		float InNewSpeed;
	}; SetSpeed_Params Params;

	Params.InNewSpeed = InNewSpeed;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.WindDirectionalSourceComponent.SetRadius
inline void UWindDirectionalSourceComponent::SetRadius(float InNewRadius) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetRadius");

	struct SetRadius_Params {
		float InNewRadius;
	}; SetRadius_Params Params;

	Params.InNewRadius = InNewRadius;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount
inline void UWindDirectionalSourceComponent::SetMinimumGustAmount(float InNewMinGust) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount");

	struct SetMinimumGustAmount_Params {
		float InNewMinGust;
	}; SetMinimumGustAmount_Params Params;

	Params.InNewMinGust = InNewMinGust;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

// Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount
inline void UWindDirectionalSourceComponent::SetMaximumGustAmount(float InNewMaxGust) {
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount");

	struct SetMaximumGustAmount_Params {
		float InNewMaxGust;
	}; SetMaximumGustAmount_Params Params;

	Params.InNewMaxGust = InNewMaxGust;

	auto flags = fn->FunctionFlags;
	UObject::ProcessEvent(fn, &Params);
	fn->FunctionFlags = flags;
}

