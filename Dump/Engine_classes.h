// Class Engine.ActorComponent
// Size: 0xb0 (Inherited: 0x28)
struct UActorComponent : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FActorComponentTickFunction PrimaryComponentTick; // 0x30(0x30)
	struct TArray<struct FName> ComponentTags; // 0x60(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x70(0x10)
	char pad_80[0x4]; // 0x80(0x04)
	int32_t UCSSerializationIndex; // 0x84(0x04)
	char pad_88_0 : 3; // 0x88(0x01)
	char bNetAddressable : 1; // 0x88(0x01)
	char bReplicates : 1; // 0x88(0x01)
	char pad_88_5 : 3; // 0x88(0x01)
	char pad_89_0 : 7; // 0x89(0x01)
	char bAutoActivate : 1; // 0x89(0x01)
	char bIsActive : 1; // 0x8a(0x01)
	char bEditableWhenInherited : 1; // 0x8a(0x01)
	char pad_8A_2 : 1; // 0x8a(0x01)
	char bCanEverAffectNavigation : 1; // 0x8a(0x01)
	char pad_8A_4 : 1; // 0x8a(0x01)
	char bIsEditorOnly : 1; // 0x8a(0x01)
	char pad_8A_6 : 2; // 0x8a(0x01)
	char pad_8B[0x1]; // 0x8b(0x01)
	enum class EComponentCreationMethod CreationMethod; // 0x8c(0x01)
	struct FMulticastSparseDelegate OnComponentActivated; // 0x8d(0x01)
	struct FMulticastSparseDelegate OnComponentDeactivated; // 0x8e(0x01)
	char pad_8F[0x1]; // 0x8f(0x01)
	struct TArray<struct FSimpleMemberReference> UCSModifiedProperties; // 0x90(0x10)
	char pad_A0[0x10]; // 0xa0(0x10)

	void ToggleActive(); // Function Engine.ActorComponent.ToggleActive // (Native|Public|BlueprintCallable) // @ game+0x337bfa0
	void SetTickGroup(enum class ETickingGroup NewTickGroup); // Function Engine.ActorComponent.SetTickGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x3c562d0
	void SetTickableWhenPaused(bool bTickableWhenPaused); // Function Engine.ActorComponent.SetTickableWhenPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x3c56350
	void SetIsReplicated(bool ShouldReplicate); // Function Engine.ActorComponent.SetIsReplicated // (Final|Native|Public|BlueprintCallable) // @ game+0x3c56240
	void SetComponentTickInterval(float TickInterval); // Function Engine.ActorComponent.SetComponentTickInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x3c561c0
	void SetComponentTickEnabled(bool bEnabled); // Function Engine.ActorComponent.SetComponentTickEnabled // (Native|Public|BlueprintCallable) // @ game+0x3c50fd0
	void SetAutoActivate(bool bNewAutoActivate); // Function Engine.ActorComponent.SetAutoActivate // (Native|Public|BlueprintCallable) // @ game+0x3c56130
	void SetActive(bool bNewActive, bool bReset); // Function Engine.ActorComponent.SetActive // (Native|Public|BlueprintCallable) // @ game+0x3c56060
	void RemoveTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.ActorComponent.RemoveTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x3c55fd0
	void RemoveTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.ActorComponent.RemoveTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x3c55f40
	void ReceiveTick(float DeltaSeconds); // Function Engine.ActorComponent.ReceiveTick // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Engine.ActorComponent.ReceiveEndPlay // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveBeginPlay(); // Function Engine.ActorComponent.ReceiveBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void OnRep_IsActive(); // Function Engine.ActorComponent.OnRep_IsActive // (Native|Public) // @ game+0x2ed3300
	void K2_DestroyComponent(struct UObject* Object); // Function Engine.ActorComponent.K2_DestroyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3c55e40
	bool IsComponentTickEnabled(); // Function Engine.ActorComponent.IsComponentTickEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c55e10
	bool IsBeingDestroyed(); // Function Engine.ActorComponent.IsBeingDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c55de0
	bool IsActive(); // Function Engine.ActorComponent.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c55db0
	struct AActor* GetOwner(); // Function Engine.ActorComponent.GetOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c55d90
	float GetComponentTickInterval(); // Function Engine.ActorComponent.GetComponentTickInterval // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c55d60
	void Deactivate(); // Function Engine.ActorComponent.Deactivate // (Native|Public|BlueprintCallable) // @ game+0x2ed32e0
	bool ComponentHasTag(struct FName Tag); // Function Engine.ActorComponent.ComponentHasTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c55b50
	void AddTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.ActorComponent.AddTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x3c55a00
	void AddTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.ActorComponent.AddTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x3c55970
	void Activate(bool bReset); // Function Engine.ActorComponent.Activate // (Native|Public|BlueprintCallable) // @ game+0x337c240
};

// Class Engine.SceneComponent
// Size: 0x220 (Inherited: 0xb0)
struct USceneComponent : UActorComponent {
	char pad_B0[0x140]; // 0xb0(0x140)
	struct TWeakObjectPtr<struct APhysicsVolume> PhysicsVolume; // 0x1f0(0x08)
	struct USceneComponent* AttachParent; // 0xe0(0x08)
	struct FName AttachSocketName; // 0x188(0x08)
	struct TArray<struct USceneComponent*> AttachChildren; // 0x158(0x10)
	struct TArray<struct USceneComponent*> ClientAttachedChildren; // 0x1b0(0x10)
	struct FVector RelativeLocation; // 0x194(0x0c)
	struct FRotator RelativeRotation; // 0xd0(0x0c)
	struct FVector RelativeScale3D; // 0xb0(0x0c)
	struct FVector ComponentVelocity; // 0x16c(0x0c)
	char pad_258_0 : 1; // 0x258(0x01)
	char bComponentToWorldUpdated : 1; // 0x1a0(0x01)
	char pad_258_2 : 1; // 0x258(0x01)
	char bAbsoluteLocation : 1; // 0x1a0(0x01)
	char bAbsoluteRotation : 1; // 0x104(0x01)
	char bAbsoluteScale : 1; // 0x150(0x01)
	char bVisible : 1; // 0x152(0x01)
	char bShouldBeAttached : 1; // 0x104(0x01)
	char pad_259_0 : 2; // 0x259(0x01)
	char bShouldSnapLocationWhenAttached : 1; // 0x204(0x01)
	char bShouldSnapRotationWhenAttached : 1; // 0x204(0x01)
	char bShouldUpdatePhysicsVolume : 1; // 0x204(0x01)
	char bHiddenInGame : 1; // 0x192(0x01)
	char bBoundsChangeTriggersStreamingDataRebuild : 1; // 0xdc(0x01)
	char bUseAttachParentBound : 1; // 0x1a0(0x01)
	enum class EComponentMobility Mobility; // 0x151(0x01)
	enum class EDetailMode DetailMode; // 0x168(0x01)
	struct FMulticastSparseDelegate PhysicsVolumeChangedDelegate; // 0x191(0x01)

	void ToggleVisibility(bool bPropagateToChildren); // Function Engine.SceneComponent.ToggleVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd5900
	bool SnapTo(struct USceneComponent* InParent, struct FName InSocketName); // Function Engine.SceneComponent.SnapTo // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd5840
	void SetWorldScale3D(struct FVector NewScale); // Function Engine.SceneComponent.SetWorldScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dd5660
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren); // Function Engine.SceneComponent.SetVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd5590
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume); // Function Engine.SceneComponent.SetShouldUpdatePhysicsVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd5500
	void SetRelativeScale3D(struct FVector NewScale3D); // Function Engine.SceneComponent.SetRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dd5470
	void SetMobility(enum class EComponentMobility NewMobility); // Function Engine.SceneComponent.SetMobility // (Native|Public|BlueprintCallable) // @ game+0x3dd53f0
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren); // Function Engine.SceneComponent.SetHiddenInGame // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd5320
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale); // Function Engine.SceneComponent.SetAbsolute // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd5180
	void ResetRelativeTransform(); // Function Engine.SceneComponent.ResetRelativeTransform // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd5160
	void OnRep_Visibility(bool OldValue); // Function Engine.SceneComponent.OnRep_Visibility // (Final|Native|Private) // @ game+0x3dd4f80
	void OnRep_Transform(); // Function Engine.SceneComponent.OnRep_Transform // (Final|Native|Private) // @ game+0x3dd4f60
	void OnRep_AttachSocketName(); // Function Engine.SceneComponent.OnRep_AttachSocketName // (Final|Native|Private) // @ game+0x3dd4f40
	void OnRep_AttachParent(); // Function Engine.SceneComponent.OnRep_AttachParent // (Final|Native|Private) // @ game+0x3dd4f40
	void OnRep_AttachChildren(); // Function Engine.SceneComponent.OnRep_AttachChildren // (Final|Native|Private) // @ game+0x3dd4f20
	void K2_SetWorldTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd4d20
	void K2_SetWorldRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd4b80
	void K2_SetWorldLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd4990
	void K2_SetWorldLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd47f0
	void K2_SetRelativeTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd45f0
	void K2_SetRelativeRotation(struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd4450
	void K2_SetRelativeLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd4260
	void K2_SetRelativeLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_SetRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd40c0
	struct FTransform K2_GetComponentToWorld(); // Function Engine.SceneComponent.K2_GetComponentToWorld // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd4060
	struct FVector K2_GetComponentScale(); // Function Engine.SceneComponent.K2_GetComponentScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd4020
	struct FRotator K2_GetComponentRotation(); // Function Engine.SceneComponent.K2_GetComponentRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd3fe0
	struct FVector K2_GetComponentLocation(); // Function Engine.SceneComponent.K2_GetComponentLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd3fa0
	void K2_DetachFromComponent(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule, bool bCallModify); // Function Engine.SceneComponent.K2_DetachFromComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd3e50
	bool K2_AttachToComponent(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachToComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd3ca0
	bool K2_AttachTo(struct USceneComponent* InParent, struct FName InSocketName, enum class EAttachLocation AttachType, bool bWeldSimulatedBodies); // Function Engine.SceneComponent.K2_AttachTo // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd3b50
	void K2_AddWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd3950
	void K2_AddWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd37b0
	void K2_AddWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddWorldOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd3610
	void K2_AddRelativeRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd3470
	void K2_AddRelativeLocation(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd32d0
	void K2_AddLocalTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd30d0
	void K2_AddLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd2f30
	void K2_AddLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.SceneComponent.K2_AddLocalOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dd2d90
	bool IsVisible(); // Function Engine.SceneComponent.IsVisible // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2d60
	bool IsSimulatingPhysics(struct FName BoneName); // Function Engine.SceneComponent.IsSimulatingPhysics // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2cc0
	bool IsAnySimulatingPhysics(); // Function Engine.SceneComponent.IsAnySimulatingPhysics // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2c90
	struct FVector GetUpVector(); // Function Engine.SceneComponent.GetUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2b00
	struct FTransform GetSocketTransform(struct FName InSocketName, enum class ERelativeTransformSpace TransformSpace); // Function Engine.SceneComponent.GetSocketTransform // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2a00
	struct FRotator GetSocketRotation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2950
	struct FQuat GetSocketQuaternion(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketQuaternion // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd28b0
	struct FVector GetSocketLocation(struct FName InSocketName); // Function Engine.SceneComponent.GetSocketLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2800
	bool GetShouldUpdatePhysicsVolume(); // Function Engine.SceneComponent.GetShouldUpdatePhysicsVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd27d0
	struct FVector GetRightVector(); // Function Engine.SceneComponent.GetRightVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2790
	struct FTransform GetRelativeTransform(); // Function Engine.SceneComponent.GetRelativeTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2730
	struct APhysicsVolume* GetPhysicsVolume(); // Function Engine.SceneComponent.GetPhysicsVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2700
	void GetParentComponents(struct TArray<struct USceneComponent*>& Parents); // Function Engine.SceneComponent.GetParentComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2650
	int32_t GetNumChildrenComponents(); // Function Engine.SceneComponent.GetNumChildrenComponents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2620
	struct FVector GetForwardVector(); // Function Engine.SceneComponent.GetForwardVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da92a0
	struct FVector GetComponentVelocity(); // Function Engine.SceneComponent.GetComponentVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd25e0
	void GetChildrenComponents(bool bIncludeAllDescendants, struct TArray<struct USceneComponent*>& Children); // Function Engine.SceneComponent.GetChildrenComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd24e0
	struct USceneComponent* GetChildComponent(int32_t ChildIndex); // Function Engine.SceneComponent.GetChildComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2450
	struct FName GetAttachSocketName(); // Function Engine.SceneComponent.GetAttachSocketName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2430
	struct USceneComponent* GetAttachParent(); // Function Engine.SceneComponent.GetAttachParent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3281570
	struct TArray<struct FName> GetAllSocketNames(); // Function Engine.SceneComponent.GetAllSocketNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd23b0
	bool DoesSocketExist(struct FName InSocketName); // Function Engine.SceneComponent.DoesSocketExist // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dd2310
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify); // Function Engine.SceneComponent.DetachFromParent // (Native|Public|BlueprintCallable) // @ game+0x3dd2240
};

// Class Engine.MKActorEx
// Size: 0x90 (Inherited: 0x28)
struct UMKActorEx : UObject {
	enum class EMKReplaySampling ReplaySamplable; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct UReplaySampleBase* ReplaySampleClass; // 0x30(0x08)
	float ReplaySamplingFrequency; // 0x38(0x04)
	uint32_t ClientReplaySamplingGUID; // 0x3c(0x04)
	char pad_40[0x4]; // 0x40(0x04)
	bool bReplayLevelAttached; // 0x44(0x01)
	char pad_45[0x23]; // 0x45(0x23)
	struct TArray<struct UReplaySampleBase*> ReplaySamplesForPlayback; // 0x68(0x10)
	char pad_78[0x10]; // 0x78(0x10)
	struct AActor* SelfActor; // 0x88(0x08)

	void OnTickReplaySampleRecord(struct UDemoNetDriver* DemoNetDriver, float MinRecordHz, float MaxRecordHz, bool bSaveCheckpoint); // Function Engine.MKActorEx.OnTickReplaySampleRecord // (Final|Native|Private) // @ game+0x3d82970
	void OnTickReplaySamplePlayback(struct UDemoNetDriver* DemoNetDriver); // Function Engine.MKActorEx.OnTickReplaySamplePlayback // (Final|Native|Private) // @ game+0x3d828f0
	void OnReplayPreScrub(struct UWorld* InWorld); // Function Engine.MKActorEx.OnReplayPreScrub // (Native|Protected) // @ game+0x2ed3070
	void OnPostRecordReplay(struct UWorld* InWorld, struct FURL& DemoURL); // Function Engine.MKActorEx.OnPostRecordReplay // (Final|Native|Private|HasOutParms) // @ game+0x3d82800
	void LerpReplaySampleForPlayback(struct UDemoNetDriver* DemoNetDriver, struct UReplaySampleBase* L, struct UReplaySampleBase* R, float LerpPercent); // Function Engine.MKActorEx.LerpReplaySampleForPlayback // (Native|Event|Protected|BlueprintEvent) // @ game+0x3d825c0
	bool HandleTimelineScrubbed(); // Function Engine.MKActorEx.HandleTimelineScrubbed // (Native|Public) // @ game+0x2ed3280
	void GatherReplaySampleForRecording(struct UDemoNetDriver* DemoNetDriver, float DemoCurrentTime, bool bSaveCheckpoint); // Function Engine.MKActorEx.GatherReplaySampleForRecording // (Native|Event|Protected|BlueprintEvent) // @ game+0x3d81740
	void ForceReplaySamplingUpdate(); // Function Engine.MKActorEx.ForceReplaySamplingUpdate // (Native|Public|BlueprintCallable) // @ game+0x3ca9e60
};

// Class Engine.Actor
// Size: 0x320 (Inherited: 0x90)
struct AActor : UMKActorEx {
	char pad_90[0xd8]; // 0x90(0xd8)
	struct FActorTickFunction PrimaryActorTick; // 0x168(0x30)
	char pad_198[0x81]; // 0x198(0x81)
	char pad_219_0 : 1; // 0x219(0x01)
	char bNetTemporary : 1; // 0x219(0x01)
	char pad_219_2 : 6; // 0x219(0x01)
	char pad_21A[0xc0]; // 0x21a(0xc0)
	char pad_2DA_0 : 1; // 0x2da(0x01)
	char bNetStartup : 1; // 0x2da(0x01)
	char bOnlyRelevantToOwner : 1; // 0x270(0x01)
	char bAlwaysRelevant : 1; // 0xe0(0x01)
	char bReplicateMovement : 1; // 0x225(0x01)
	char bHidden : 1; // 0x1f8(0x01)
	char bTearOff : 1; // 0x29c(0x01)
	char pad_2DA_7 : 1; // 0x2da(0x01)
	char pad_2DB[0x15]; // 0x2db(0x15)
	char bExchangedRoles : 1; // 0x2f0(0x01)
	char bNetLoadOnClient : 1; // 0x2d0(0x01)
	char bNetUseOwnerRelevancy : 1; // 0x2a4(0x01)
	char bRelevantForNetworkReplays : 1; // 0x23c(0x01)
	char bRelevantForLevelBounds : 1; // 0x118(0x01)
	char bReplayRewindable : 1; // 0x118(0x01)
	char bAllowTickBeforeBeginPlay : 1; // 0x280(0x01)
	char bAutoDestroyWhenFinished : 1; // 0xf8(0x01)
	char bCanBeDamaged : 1; // 0x160(0x01)
	char pad_2F1_1 : 7; // 0x2f1(0x01)
	char pad_2F2[0x17]; // 0x2f2(0x17)
	char bBlockInput : 1; // 0x309(0x01)
	char bCollideWhenPlacing : 1; // 0x198(0x01)
	char bFindCameraComponentWhenViewTarget : 1; // 0x309(0x01)
	char pad_309_3 : 1; // 0x309(0x01)
	char bGenerateOverlapEventsDuringLevelStreaming : 1; // 0xf8(0x01)
	char bIgnoresOriginShifting : 1; // 0x2da(0x01)
	char bEnableAutoLODGeneration : 1; // 0x118(0x01)
	char bIsEditorOnlyActor : 1; // 0x23c(0x01)
	char bActorSeamlessTraveled : 1; // 0xf8(0x01)
	char pad_30A_1 : 2; // 0x30a(0x01)
	char bReplicates : 1; // 0xf8(0x01)
	char pad_30A_4 : 4; // 0x30a(0x01)
	char pad_30B[0xd]; // 0x30b(0x0d)
	char bCanBeInCluster : 1; // 0x318(0x01)
	char bAllowReceiveTickEventOnDedicatedServer : 1; // 0x219(0x01)
	char bActorEnableCollision : 1; // 0xf8(0x01)
	char bActorIsBeingDestroyed : 1; // 0x292(0x01)
	enum class EActorUpdateOverlapsMethod UpdateOverlapsMethodDuringLevelStreaming; // 0x1fa(0x01)
	enum class EActorUpdateOverlapsMethod DefaultUpdateOverlapsMethodDuringLevelStreaming; // 0x91(0x01)
	enum class ENetRole RemoteRole; // 0x290(0x01)
	struct FRepMovement ReplicatedMovement; // 0xac(0x34)
	float InitialLifeSpan; // 0x240(0x04)
	float CustomTimeDilation; // 0x2b8(0x04)
	struct FRepAttachment AttachmentReplication; // 0x120(0x40)
	struct AActor* Owner; // 0xf0(0x08)
	struct FName NetDriverName; // 0x294(0x08)
	enum class ENetRole Role; // 0x258(0x01)
	enum class ENetDormancy NetDormancy; // 0x101(0x01)
	enum class ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x308(0x01)
	enum class EAutoReceiveInput AutoReceiveInput; // 0x2db(0x01)
	int32_t InputPriority; // 0x238(0x04)
	struct UInputComponent* InputComponent; // 0x278(0x08)
	float NetCullDistanceSquared; // 0x2d4(0x04)
	int32_t NetTag; // 0x2a0(0x04)
	float NetUpdateFrequency; // 0x244(0x04)
	float MinNetUpdateFrequency; // 0xfc(0x04)
	float NetPriority; // 0x1f4(0x04)
	struct APawn* Instigator; // 0x288(0x08)
	struct TArray<struct AActor*> Children; // 0x228(0x10)
	struct USceneComponent* RootComponent; // 0x200(0x08)
	struct TArray<struct AMatineeActor*> ControllingMatineeActors; // 0x260(0x10)
	struct TArray<struct FName> Layers; // 0x98(0x10)
	struct TWeakObjectPtr<struct UChildActorComponent> ParentComponent; // 0x30c(0x08)
	char bEnableRerunConstructionScript : 1; // 0x21c(0x01)
	struct TArray<struct FName> Tags; // 0x2c0(0x10)
	struct FMulticastSparseDelegate OnTakeAnyDamage; // 0x291(0x01)
	struct FMulticastSparseDelegate OnTakePointDamage; // 0x161(0x01)
	struct FMulticastSparseDelegate OnTakeRadialDamage; // 0x21a(0x01)
	struct FMulticastSparseDelegate OnActorBeginOverlap; // 0x224(0x01)
	struct FMulticastSparseDelegate OnActorEndOverlap; // 0xfb(0x01)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x21b(0x01)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0xf9(0x01)
	struct FMulticastSparseDelegate OnClicked; // 0x226(0x01)
	struct FMulticastSparseDelegate OnReleased; // 0x2a5(0x01)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x2dc(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x218(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x100(0x01)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0xfa(0x01)
	struct FMulticastSparseDelegate OnActorHit; // 0x1f0(0x01)
	struct FMulticastSparseDelegate OnDestroyed; // 0x1f9(0x01)
	struct FMulticastSparseDelegate OnEndPlay; // 0x2d9(0x01)
	struct TArray<struct UActorComponent*> InstanceComponents; // 0x2e0(0x10)
	struct TArray<struct UActorComponent*> BlueprintCreatedComponents; // 0x2f8(0x10)
	struct TArray<struct UObject*> LoadedObjects; // 0x108(0x10)

	bool WasRecentlyRendered(float Tolerance); // Function Engine.Actor.WasRecentlyRendered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c517c0
	void UserConstructionScript(); // Function Engine.Actor.UserConstructionScript // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void TearOff(); // Function Engine.Actor.TearOff // (Native|Public|BlueprintCallable) // @ game+0x3c517a0
	void SnapRootComponentTo(struct AActor* InParentActor, struct FName InSocketName); // Function Engine.Actor.SnapRootComponentTo // (Final|Native|Public|BlueprintCallable) // @ game+0x3c516e0
	void SetTickGroup(enum class ETickingGroup NewTickGroup); // Function Engine.Actor.SetTickGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x3c515d0
	void SetTickableWhenPaused(bool bTickableWhenPaused); // Function Engine.Actor.SetTickableWhenPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x3c51650
	void SetReplicates(bool bInReplicates); // Function Engine.Actor.SetReplicates // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3c51540
	void SetReplicateMovement(bool bInReplicateMovement); // Function Engine.Actor.SetReplicateMovement // (Native|Public|BlueprintCallable) // @ game+0x3c514b0
	void SetOwner(struct AActor* NewOwner); // Function Engine.Actor.SetOwner // (Native|Public|BlueprintCallable) // @ game+0x3c51420
	void SetNetDormancy(enum class ENetDormancy NewDormancy); // Function Engine.Actor.SetNetDormancy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3c513a0
	void SetLifeSpan(float InLifespan); // Function Engine.Actor.SetLifeSpan // (Native|Public|BlueprintCallable) // @ game+0x3c51320
	void SetAutoDestroyWhenFinished(bool bVal); // Function Engine.Actor.SetAutoDestroyWhenFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x3c51290
	void SetActorTickInterval(float TickInterval); // Function Engine.Actor.SetActorTickInterval // (Final|Native|Public|BlueprintCallable) // @ game+0x3c51210
	void SetActorTickEnabled(bool bEnabled); // Function Engine.Actor.SetActorTickEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3c51180
	void SetActorScale3D(struct FVector NewScale3D); // Function Engine.Actor.SetActorScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c510f0
	void SetActorRelativeScale3D(struct FVector NewRelativeScale); // Function Engine.Actor.SetActorRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c51060
	void SetActorHiddenInGame(bool bNewHidden); // Function Engine.Actor.SetActorHiddenInGame // (Native|Public|BlueprintCallable) // @ game+0x3c50fd0
	void SetActorEnableCollision(bool bNewActorEnableCollision); // Function Engine.Actor.SetActorEnableCollision // (Final|Native|Public|BlueprintCallable) // @ game+0x3c50f40
	void RemoveTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.Actor.RemoveTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x3c50eb0
	void RemoveTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.Actor.RemoveTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x3c50e20
	void ReceiveTick(float DeltaSeconds); // Function Engine.Actor.ReceiveTick // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveRadialDamage(float DamageReceived, struct UDamageType* DamageType, struct FVector Origin, struct FHitResult& HitInfo, struct AController* InstigatedBy, struct AActor* DamageCauser); // Function Engine.Actor.ReceiveRadialDamage // (BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x23a3b60
	void ReceivePointDamage(float Damage, struct UDamageType* DamageType, struct FVector HitLocation, struct FVector HitNormal, struct UPrimitiveComponent* HitComponent, struct FName BoneName, struct FVector ShotFromDirection, struct AController* InstigatedBy, struct AActor* DamageCauser, struct FHitResult& HitInfo); // Function Engine.Actor.ReceivePointDamage // (BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveHit(struct UPrimitiveComponent* MyComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, bool bSelfMoved, struct FVector HitLocation, struct FVector HitNormal, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Engine.Actor.ReceiveHit // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason); // Function Engine.Actor.ReceiveEndPlay // (Event|Protected|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveDestroyed(); // Function Engine.Actor.ReceiveDestroyed // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveBeginPlay(); // Function Engine.Actor.ReceiveBeginPlay // (Event|Protected|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveAnyDamage(float Damage, struct UDamageType* DamageType, struct AController* InstigatedBy, struct AActor* DamageCauser); // Function Engine.Actor.ReceiveAnyDamage // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveActorOnReleased(struct FKey ButtonReleased); // Function Engine.Actor.ReceiveActorOnReleased // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveActorOnInputTouchLeave(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchLeave // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveActorOnInputTouchEnter(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnter // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveActorOnInputTouchEnd(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchEnd // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveActorOnInputTouchBegin(enum class ETouchIndex FingerIndex); // Function Engine.Actor.ReceiveActorOnInputTouchBegin // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveActorOnClicked(struct FKey ButtonPressed); // Function Engine.Actor.ReceiveActorOnClicked // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveActorEndOverlap(struct AActor* OtherActor); // Function Engine.Actor.ReceiveActorEndOverlap // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveActorEndCursorOver(); // Function Engine.Actor.ReceiveActorEndCursorOver // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveActorBeginOverlap(struct AActor* OtherActor); // Function Engine.Actor.ReceiveActorBeginOverlap // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveActorBeginCursorOver(); // Function Engine.Actor.ReceiveActorBeginCursorOver // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.Actor.PrestreamTextures // (Native|Public|BlueprintCallable) // @ game+0x3c50d10
	void OnRep_ReplicateMovement(); // Function Engine.Actor.OnRep_ReplicateMovement // (Native|Public) // @ game+0x1e9d1e0
	void OnRep_ReplicatedMovement(); // Function Engine.Actor.OnRep_ReplicatedMovement // (Native|Public) // @ game+0x3c50cf0
	void OnRep_Owner(); // Function Engine.Actor.OnRep_Owner // (Native|Protected) // @ game+0x1e9cba0
	void OnRep_Instigator(); // Function Engine.Actor.OnRep_Instigator // (Native|Public) // @ game+0x3c50cd0
	void OnRep_AttachmentReplication(); // Function Engine.Actor.OnRep_AttachmentReplication // (Native|Public) // @ game+0x1e9cd40
	void MakeNoise(float Loudness, struct APawn* NoiseInstigator, struct FVector NoiseLocation, float MaxRange, struct FName Tag); // Function Engine.Actor.MakeNoise // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c50b40
	struct UMaterialInstanceDynamic* MakeMIDForMaterial(struct UMaterialInterface* Parent); // Function Engine.Actor.MakeMIDForMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x3c50ab0
	bool K2_TeleportTo(struct FVector DestLocation, struct FRotator DestRotation); // Function Engine.Actor.K2_TeleportTo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c509c0
	bool K2_SetActorTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c507c0
	bool K2_SetActorRotation(struct FRotator NewRotation, bool bTeleportPhysics); // Function Engine.Actor.K2_SetActorRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c506e0
	void K2_SetActorRelativeTransform(struct FTransform& NewRelativeTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c504e0
	void K2_SetActorRelativeRotation(struct FRotator NewRelativeRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c50340
	void K2_SetActorRelativeLocation(struct FVector NewRelativeLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorRelativeLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c501a0
	bool K2_SetActorLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c4ffa0
	bool K2_SetActorLocation(struct FVector NewLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_SetActorLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c4fdf0
	void K2_OnReset(); // Function Engine.Actor.K2_OnReset // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void K2_OnEndViewTarget(struct APlayerController* PC); // Function Engine.Actor.K2_OnEndViewTarget // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void K2_OnBecomeViewTarget(struct APlayerController* PC); // Function Engine.Actor.K2_OnBecomeViewTarget // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	struct USceneComponent* K2_GetRootComponent(); // Function Engine.Actor.K2_GetRootComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4fdd0
	struct TArray<struct UActorComponent*> K2_GetComponentsByClass(struct UActorComponent* ComponentClass); // Function Engine.Actor.K2_GetComponentsByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4fcf0
	struct FRotator K2_GetActorRotation(); // Function Engine.Actor.K2_GetActorRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4fc30
	struct FVector K2_GetActorLocation(); // Function Engine.Actor.K2_GetActorLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4fb90
	void K2_DetachFromActor(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule); // Function Engine.Actor.K2_DetachFromActor // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4fa90
	void K2_DestroyComponent(struct UActorComponent* Component); // Function Engine.Actor.K2_DestroyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4fa10
	void K2_DestroyActor(); // Function Engine.Actor.K2_DestroyActor // (Native|Public|BlueprintCallable) // @ game+0x3c4f9f0
	void K2_AttachToComponent(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4f830
	void K2_AttachToActor(struct AActor* ParentActor, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachToActor // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4f670
	void K2_AttachRootComponentToActor(struct AActor* InParentActor, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentToActor // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4f520
	void K2_AttachRootComponentTo(struct USceneComponent* InParent, struct FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies); // Function Engine.Actor.K2_AttachRootComponentTo // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4f3d0
	void K2_AddActorWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c4f1d0
	void K2_AddActorWorldRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c4f030
	void K2_AddActorWorldOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorWorldOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c4ee90
	void K2_AddActorLocalTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c4ec90
	void K2_AddActorLocalRotation(struct FRotator DeltaRotation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c4eaf0
	void K2_AddActorLocalOffset(struct FVector DeltaLocation, bool bSweep, struct FHitResult& SweepHitResult, bool bTeleport); // Function Engine.Actor.K2_AddActorLocalOffset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c4e950
	bool IsOverlappingActor(struct AActor* Other); // Function Engine.Actor.IsOverlappingActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e8c0
	bool IsChildActor(); // Function Engine.Actor.IsChildActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e890
	bool IsActorTickEnabled(); // Function Engine.Actor.IsActorTickEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e860
	bool IsActorBeingDestroyed(); // Function Engine.Actor.IsActorBeingDestroyed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e830
	bool HasAuthority(); // Function Engine.Actor.HasAuthority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e800
	float GetVerticalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetVerticalDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e760
	struct FVector GetVelocity(); // Function Engine.Actor.GetVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e720
	struct FTransform GetTransform(); // Function Engine.Actor.GetTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e6d0
	bool GetTickableWhenPaused(); // Function Engine.Actor.GetTickableWhenPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4e6a0
	float GetSquaredDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetSquaredDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e600
	enum class ENetRole GetRemoteRole(); // Function Engine.Actor.GetRemoteRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e5e0
	struct UChildActorComponent* GetParentComponent(); // Function Engine.Actor.GetParentComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e5b0
	struct AActor* GetParentActor(); // Function Engine.Actor.GetParentActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e580
	struct AActor* GetOwner(); // Function Engine.Actor.GetOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e560
	void GetOverlappingComponents(struct TArray<struct UPrimitiveComponent*>& OverlappingComponents); // Function Engine.Actor.GetOverlappingComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e4b0
	void GetOverlappingActors(struct TArray<struct AActor*>& OverlappingActors, struct AActor* ClassFilter); // Function Engine.Actor.GetOverlappingActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e3b0
	enum class ENetRole GetLocalRole(); // Function Engine.Actor.GetLocalRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e390
	float GetLifeSpan(); // Function Engine.Actor.GetLifeSpan // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e350
	struct AController* GetInstigatorController(); // Function Engine.Actor.GetInstigatorController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e320
	struct APawn* GetInstigator(); // Function Engine.Actor.GetInstigator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e2f0
	struct FVector GetInputVectorAxisValue(struct FKey InputAxisKey); // Function Engine.Actor.GetInputVectorAxisValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e1f0
	float GetInputAxisValue(struct FName InputAxisName); // Function Engine.Actor.GetInputAxisValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e150
	float GetInputAxisKeyValue(struct FKey InputAxisKey); // Function Engine.Actor.GetInputAxisKeyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4e060
	float GetHorizontalDotProductTo(struct AActor* OtherActor); // Function Engine.Actor.GetHorizontalDotProductTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4dfc0
	float GetHorizontalDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetHorizontalDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4df20
	float GetGameTimeSinceCreation(); // Function Engine.Actor.GetGameTimeSinceCreation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4def0
	float GetDotProductTo(struct AActor* OtherActor); // Function Engine.Actor.GetDotProductTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4de50
	float GetDistanceTo(struct AActor* OtherActor); // Function Engine.Actor.GetDistanceTo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4ddb0
	struct TArray<struct UActorComponent*> GetComponentsByTag(struct UActorComponent* ComponentClass, struct FName Tag); // Function Engine.Actor.GetComponentsByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4dca0
	struct TArray<struct UActorComponent*> GetComponentsByInterface(struct UInterface* Interface); // Function Engine.Actor.GetComponentsByInterface // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4dbc0
	struct UActorComponent* GetComponentByClass(struct UActorComponent* ComponentClass); // Function Engine.Actor.GetComponentByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4db30
	struct FName GetAttachParentSocketName(); // Function Engine.Actor.GetAttachParentSocketName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d8b0
	void GetAttachParentActors(struct TArray<struct AActor*>& OutActors); // Function Engine.Actor.GetAttachParentActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d800
	struct AActor* GetAttachParentActorMost(); // Function Engine.Actor.GetAttachParentActorMost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d7d0
	struct AActor* GetAttachParentActor(); // Function Engine.Actor.GetAttachParentActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d7a0
	void GetAttachedActorsRecursive(struct TArray<struct AActor*>& OutActors, bool bIncludeChildActor); // Function Engine.Actor.GetAttachedActorsRecursive // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4da30
	void GetAttachedActors(struct TArray<struct AActor*>& OutActors, bool bResetArray, bool bIncludeChildActor); // Function Engine.Actor.GetAttachedActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d8f0
	void GetAllChildActors(struct TArray<struct AActor*>& ChildActors, bool bIncludeDescendants); // Function Engine.Actor.GetAllChildActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d6a0
	struct FVector GetActorUpVector(); // Function Engine.Actor.GetActorUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d630
	float GetActorTimeDilation(); // Function Engine.Actor.GetActorTimeDilation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d600
	float GetActorTickInterval(); // Function Engine.Actor.GetActorTickInterval // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d5d0
	struct FVector GetActorScale3D(); // Function Engine.Actor.GetActorScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d590
	struct FVector GetActorRightVector(); // Function Engine.Actor.GetActorRightVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d520
	struct FVector GetActorRelativeScale3D(); // Function Engine.Actor.GetActorRelativeScale3D // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d4e0
	struct FVector GetActorForwardVector(); // Function Engine.Actor.GetActorForwardVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d470
	void GetActorEyesViewPoint(struct FVector& OutLocation, struct FRotator& OutRotation); // Function Engine.Actor.GetActorEyesViewPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d380
	bool GetActorEnableCollision(); // Function Engine.Actor.GetActorEnableCollision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d350
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector& Origin, struct FVector& BoxExtent, bool bIncludeFromChildActors); // Function Engine.Actor.GetActorBounds // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4d1d0
	void ForceNetUpdate(); // Function Engine.Actor.ForceNetUpdate // (Native|Public|BlueprintCallable) // @ game+0x3c4d1b0
	void FlushNetDormancy(); // Function Engine.Actor.FlushNetDormancy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3c4d190
	void EnableInput(struct APlayerController* PlayerController); // Function Engine.Actor.EnableInput // (Native|Public|BlueprintCallable) // @ game+0x3c4d100
	void DisableInput(struct APlayerController* PlayerController); // Function Engine.Actor.DisableInput // (Native|Public|BlueprintCallable) // @ game+0x3c4d070
	void DetachRootComponentFromParent(bool bMaintainWorldPosition); // Function Engine.Actor.DetachRootComponentFromParent // (Final|Native|Public|BlueprintCallable) // @ game+0x3c4cfe0
	void AddTickPrerequisiteComponent(struct UActorComponent* PrerequisiteComponent); // Function Engine.Actor.AddTickPrerequisiteComponent // (Native|Public|BlueprintCallable) // @ game+0x3c4cf50
	void AddTickPrerequisiteActor(struct AActor* PrerequisiteActor); // Function Engine.Actor.AddTickPrerequisiteActor // (Native|Public|BlueprintCallable) // @ game+0x3c4cec0
	struct UActorComponent* AddComponent(struct FName TemplateName, bool bManualAttachment, struct FTransform& RelativeTransform, struct UObject* ComponentTemplateContext); // Function Engine.Actor.AddComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c4cd00
	bool ActorHasTag(struct FName Tag); // Function Engine.Actor.ActorHasTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c4cc70
};

// Class Engine.SkeletalMeshActor
// Size: 0x3a8 (Inherited: 0x320)
struct ASkeletalMeshActor : AActor {
	char pad_320[0x8]; // 0x320(0x08)
	char bShouldDoAnimNotifies : 1; // 0x328(0x01)
	char bWakeOnLevelStart : 1; // 0x328(0x01)
	char pad_328_2 : 6; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0x330(0x08)
	struct USkeletalMesh* ReplicatedMesh; // 0x338(0x08)
	struct UPhysicsAsset* ReplicatedPhysAsset; // 0x340(0x08)
	struct UMaterialInterface* ReplicatedMaterial0; // 0x348(0x08)
	struct UMaterialInterface* ReplicatedMaterial1; // 0x350(0x08)
	char pad_358[0x50]; // 0x358(0x50)

	void OnRep_ReplicatedPhysAsset(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset // (Native|Public) // @ game+0x1237ce0
	void OnRep_ReplicatedMesh(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh // (Native|Public) // @ game+0x1e477f0
	void OnRep_ReplicatedMaterial1(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1 // (Native|Public) // @ game+0x1f10660
	void OnRep_ReplicatedMaterial0(); // Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0 // (Native|Public) // @ game+0x1f11ef0
};

// Class Engine.BlueprintFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintFunctionLibrary : UObject {
};

// Class Engine.PrimitiveComponent
// Size: 0x4a0 (Inherited: 0x220)
struct UPrimitiveComponent : USceneComponent {
	char pad_220[0x8]; // 0x220(0x08)
	float MinDrawDistance; // 0x228(0x04)
	float LDMaxDrawDistance; // 0x22c(0x04)
	float CachedMaxDrawDistance; // 0x230(0x04)
	enum class ESceneDepthPriorityGroup DepthPriorityGroup; // 0x234(0x01)
	enum class ESceneDepthPriorityGroup ViewOwnerDepthPriorityGroup; // 0x235(0x01)
	enum class EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x236(0x01)
	enum class ELightmapType LightmapType; // 0x237(0x01)
	char bUseMaxLODAsImposter : 1; // 0x238(0x01)
	char bBatchImpostersAsInstances : 1; // 0x238(0x01)
	char bNeverDistanceCull : 1; // 0x238(0x01)
	char pad_238_3 : 4; // 0x238(0x01)
	char bAlwaysCreatePhysicsState : 1; // 0x238(0x01)
	char bGenerateOverlapEvents : 1; // 0x239(0x01)
	char bMultiBodyOverlap : 1; // 0x239(0x01)
	char bTraceComplexOnMove : 1; // 0x239(0x01)
	char bReturnMaterialOnMove : 1; // 0x239(0x01)
	char bUseViewOwnerDepthPriorityGroup : 1; // 0x239(0x01)
	char bAllowCullDistanceVolume : 1; // 0x239(0x01)
	char bHasMotionBlurVelocityMeshes : 1; // 0x239(0x01)
	char bVisibleInReflectionCaptures : 1; // 0x239(0x01)
	char bVisibleInRayTracing : 1; // 0x23a(0x01)
	char bRenderInMainPass : 1; // 0x23a(0x01)
	char bRenderInDepthPass : 1; // 0x23a(0x01)
	char bReceivesDecals : 1; // 0x23a(0x01)
	char bOwnerNoSee : 1; // 0x23a(0x01)
	char bOnlyOwnerSee : 1; // 0x23a(0x01)
	char bIgnoreNearClippingForOcclusion : 1; // 0x23a(0x01)
	char bTreatAsBackgroundForOcclusion : 1; // 0x23a(0x01)
	char bUseAsOccluder : 1; // 0x23b(0x01)
	char bSelectable : 1; // 0x23b(0x01)
	char bForceMipStreaming : 1; // 0x23b(0x01)
	char bHasPerInstanceHitProxies : 1; // 0x23b(0x01)
	char CastShadow : 1; // 0x23b(0x01)
	char bAffectDynamicIndirectLighting : 1; // 0x23b(0x01)
	char bAffectDistanceFieldLighting : 1; // 0x23b(0x01)
	char bCastDynamicShadow : 1; // 0x23b(0x01)
	char bCastStaticShadow : 1; // 0x23c(0x01)
	char bCastDirectionalShadow : 1; // 0x23c(0x01)
	char bCastVolumetricTranslucentShadow : 1; // 0x23c(0x01)
	char bSelfShadowOnly : 1; // 0x23c(0x01)
	char bCastFarShadow : 1; // 0x23c(0x01)
	char bCastInsetShadow : 1; // 0x23c(0x01)
	char bCastCinematicShadow : 1; // 0x23c(0x01)
	char bCastHiddenShadow : 1; // 0x23c(0x01)
	char bCastShadowAsTwoSided : 1; // 0x23d(0x01)
	char bLightAsIfStatic : 1; // 0x23d(0x01)
	char bLightAttachmentsAsGroup : 1; // 0x23d(0x01)
	char bExcludeFromLightAttachmentGroup : 1; // 0x23d(0x01)
	char bReceiveMobileCSMShadows : 1; // 0x23d(0x01)
	char bSingleSampleShadowFromStationaryLights : 1; // 0x23d(0x01)
	char bIgnoreRadialImpulse : 1; // 0x23d(0x01)
	char bIgnoreRadialForce : 1; // 0x23d(0x01)
	char bApplyImpulseOnDamage : 1; // 0x23e(0x01)
	char bReplicatePhysicsToAutonomousProxy : 1; // 0x23e(0x01)
	char bFillCollisionUnderneathForNavmesh : 1; // 0x23e(0x01)
	char AlwaysLoadOnClient : 1; // 0x23e(0x01)
	char AlwaysLoadOnServer : 1; // 0x23e(0x01)
	char bUseEditorCompositing : 1; // 0x23e(0x01)
	char bRenderCustomDepth : 1; // 0x23e(0x01)
	char pad_23E_7 : 1; // 0x23e(0x01)
	char bHasNoStreamableTextures : 1; // 0x23f(0x01)
	char pad_23F_1 : 7; // 0x23f(0x01)
	enum class EHasCustomNavigableGeometry bHasCustomNavigableGeometry; // 0x240(0x01)
	char pad_241[0x1]; // 0x241(0x01)
	enum class ECanBeCharacterBase CanCharacterStepUpOn; // 0x242(0x01)
	struct FLightingChannels LightingChannels; // 0x243(0x01)
	enum class ERendererStencilMask CustomDepthStencilWriteMask; // 0x244(0x01)
	char pad_245[0x3]; // 0x245(0x03)
	int32_t CustomDepthStencilValue; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)
	struct FCustomPrimitiveData CustomPrimitiveData; // 0x250(0x10)
	struct FCustomPrimitiveData CustomPrimitiveDataInternal; // 0x260(0x10)
	int32_t TranslucencySortPriority; // 0x270(0x04)
	int32_t VisibilityId; // 0x274(0x04)
	struct TArray<struct URuntimeVirtualTexture*> RuntimeVirtualTextures; // 0x278(0x10)
	int8_t VirtualTextureLodBias; // 0x288(0x01)
	int8_t VirtualTextureCullMips; // 0x289(0x01)
	int8_t VirtualTextureMinCoverage; // 0x28a(0x01)
	enum class ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType; // 0x28b(0x01)
	char pad_28C[0x4]; // 0x28c(0x04)
	float LpvBiasMultiplier; // 0x290(0x04)
	char pad_294[0x8]; // 0x294(0x08)
	float BoundsScale; // 0x29c(0x04)
	char pad_2A0[0x10]; // 0x2a0(0x10)
	struct TArray<struct AActor*> MoveIgnoreActors; // 0x2b0(0x10)
	struct TArray<struct UPrimitiveComponent*> MoveIgnoreComponents; // 0x2c0(0x10)
	char pad_2D0[0x10]; // 0x2d0(0x10)
	struct FBodyInstance BodyInstance; // 0x2e0(0x190)
	struct FMulticastSparseDelegate OnComponentHit; // 0x470(0x01)
	struct FMulticastSparseDelegate OnComponentBeginOverlap; // 0x471(0x01)
	struct FMulticastSparseDelegate OnComponentEndOverlap; // 0x472(0x01)
	struct FMulticastSparseDelegate OnComponentWake; // 0x473(0x01)
	struct FMulticastSparseDelegate OnComponentSleep; // 0x474(0x01)
	char pad_475[0x1]; // 0x475(0x01)
	struct FMulticastSparseDelegate OnBeginCursorOver; // 0x476(0x01)
	struct FMulticastSparseDelegate OnEndCursorOver; // 0x477(0x01)
	struct FMulticastSparseDelegate OnClicked; // 0x478(0x01)
	struct FMulticastSparseDelegate OnReleased; // 0x479(0x01)
	struct FMulticastSparseDelegate OnInputTouchBegin; // 0x47a(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnd; // 0x47b(0x01)
	struct FMulticastSparseDelegate OnInputTouchEnter; // 0x47c(0x01)
	struct FMulticastSparseDelegate OnInputTouchLeave; // 0x47d(0x01)
	char pad_47E[0x1a]; // 0x47e(0x1a)
	struct UPrimitiveComponent* LODParentPrimitive; // 0x498(0x08)

	bool WasRecentlyRendered(float Tolerance); // Function Engine.PrimitiveComponent.WasRecentlyRendered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dc2c00
	void WakeRigidBody(struct FName BoneName); // Function Engine.PrimitiveComponent.WakeRigidBody // (Native|Public|BlueprintCallable) // @ game+0x3dc2b70
	void WakeAllRigidBodies(); // Function Engine.PrimitiveComponent.WakeAllRigidBodies // (Native|Public|BlueprintCallable) // @ game+0x3da1870
	void SetWalkableSlopeOverride(struct FWalkableSlopeOverride& NewOverride); // Function Engine.PrimitiveComponent.SetWalkableSlopeOverride // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3dc2ac0
	void SetUseCCD(bool InUseCCD, struct FName BoneName); // Function Engine.PrimitiveComponent.SetUseCCD // (Native|Public|BlueprintCallable) // @ game+0x3dc29f0
	void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority); // Function Engine.PrimitiveComponent.SetTranslucentSortPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc2970
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights); // Function Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc28e0
	void SetSimulatePhysics(bool bSimulate); // Function Engine.PrimitiveComponent.SetSimulatePhysics // (Native|Public|BlueprintCallable) // @ game+0x3dc2850
	void SetRenderInMainPass(bool bValue); // Function Engine.PrimitiveComponent.SetRenderInMainPass // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc27c0
	void SetRenderCustomDepth(bool bValue); // Function Engine.PrimitiveComponent.SetRenderCustomDepth // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc2730
	void SetReceivesDecals(bool bNewReceivesDecals); // Function Engine.PrimitiveComponent.SetReceivesDecals // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc26a0
	void SetPhysMaterialOverride(struct UPhysicalMaterial* NewPhysMaterial); // Function Engine.PrimitiveComponent.SetPhysMaterialOverride // (Native|Public|BlueprintCallable) // @ game+0x3dc2070
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc2590
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc2480
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc2480
	void SetPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dc2360
	void SetPhysicsAngularVelocityInRadians(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dc2240
	void SetPhysicsAngularVelocityInDegrees(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dc2100
	void SetPhysicsAngularVelocity(struct FVector NewAngVel, bool bAddToCurrent, struct FName BoneName); // Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dc2100
	void SetOwnerNoSee(bool bNewOwnerNoSee); // Function Engine.PrimitiveComponent.SetOwnerNoSee // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc1fe0
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee); // Function Engine.PrimitiveComponent.SetOnlyOwnerSee // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc1f50
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision); // Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision // (Native|Public|BlueprintCallable) // @ game+0x3dc1ec0
	void SetMaterialByName(struct FName MaterialSlotName, struct UMaterialInterface* Material); // Function Engine.PrimitiveComponent.SetMaterialByName // (Native|Public|BlueprintCallable) // @ game+0x3dc1df0
	void SetMaterial(int32_t ElementIndex, struct UMaterialInterface* Material); // Function Engine.PrimitiveComponent.SetMaterial // (Native|Public|BlueprintCallable) // @ game+0x3dc1d20
	void SetMassScale(struct FName BoneName, float InMassScale); // Function Engine.PrimitiveComponent.SetMassScale // (Native|Public|BlueprintCallable) // @ game+0x3dc1c50
	void SetMassOverrideInKg(struct FName BoneName, float MassInKg, bool bOverrideMass); // Function Engine.PrimitiveComponent.SetMassOverrideInKg // (Native|Public|BlueprintCallable) // @ game+0x3dc1b50
	void SetLinearDamping(float InDamping); // Function Engine.PrimitiveComponent.SetLinearDamping // (Native|Public|BlueprintCallable) // @ game+0x3dc1ad0
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Function Engine.PrimitiveComponent.SetLightingChannels // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc19b0
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup); // Function Engine.PrimitiveComponent.SetLightAttachmentsAsGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc1920
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents); // Function Engine.PrimitiveComponent.SetGenerateOverlapEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc1890
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup); // Function Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc1800
	void SetEnableGravity(bool bGravityEnabled); // Function Engine.PrimitiveComponent.SetEnableGravity // (Native|Public|BlueprintCallable) // @ game+0x3dc1770
	void SetCustomPrimitiveDataVector4(int32_t DataIndex, struct FVector4 Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dc16a0
	void SetCustomPrimitiveDataVector3(int32_t DataIndex, struct FVector Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dc15d0
	void SetCustomPrimitiveDataVector2(int32_t DataIndex, struct FVector2D Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dc1510
	void SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Function Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc1440
	void SetCustomDepthStencilWriteMask(enum class ERendererStencilMask WriteMaskBit); // Function Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc13c0
	void SetCustomDepthStencilValue(int32_t Value); // Function Engine.PrimitiveComponent.SetCustomDepthStencilValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc1340
	void SetCullDistance(float NewCullDistance); // Function Engine.PrimitiveComponent.SetCullDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc12c0
	void SetConstraintMode(enum class EDOFMode ConstraintMode); // Function Engine.PrimitiveComponent.SetConstraintMode // (Native|Public|BlueprintCallable) // @ game+0x3dc1240
	void SetCollisionResponseToChannel(enum class ECollisionChannel Channel, enum class ECollisionResponse NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToChannel // (Native|Public|BlueprintCallable) // @ game+0x3dc1180
	void SetCollisionResponseToAllChannels(enum class ECollisionResponse NewResponse); // Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels // (Native|Public|BlueprintCallable) // @ game+0x3dc1100
	void SetCollisionProfileName(struct FName InCollisionProfileName, bool bUpdateOverlaps); // Function Engine.PrimitiveComponent.SetCollisionProfileName // (Native|Public|BlueprintCallable) // @ game+0x3dc1030
	void SetCollisionObjectType(enum class ECollisionChannel Channel); // Function Engine.PrimitiveComponent.SetCollisionObjectType // (Native|Public|BlueprintCallable) // @ game+0x3dc0fb0
	void SetCollisionEnabled(enum class ECollisionEnabled NewType); // Function Engine.PrimitiveComponent.SetCollisionEnabled // (Native|Public|BlueprintCallable) // @ game+0x3dc0f30
	void SetCenterOfMass(struct FVector CenterOfMassOffset, struct FName BoneName); // Function Engine.PrimitiveComponent.SetCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dc0e60
	void SetCastShadow(bool NewCastShadow); // Function Engine.PrimitiveComponent.SetCastShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc0dd0
	void SetCastInsetShadow(bool bInCastInsetShadow); // Function Engine.PrimitiveComponent.SetCastInsetShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc0d40
	void SetBoundsScale(float NewBoundsScale); // Function Engine.PrimitiveComponent.SetBoundsScale // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc0cc0
	void SetAngularDamping(float InDamping); // Function Engine.PrimitiveComponent.SetAngularDamping // (Native|Public|BlueprintCallable) // @ game+0x3dc0c40
	void SetAllUseCCD(bool InUseCCD); // Function Engine.PrimitiveComponent.SetAllUseCCD // (Native|Public|BlueprintCallable) // @ game+0x3db2500
	void SetAllPhysicsLinearVelocity(struct FVector NewVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dc0b60
	void SetAllPhysicsAngularVelocityInRadians(struct FVector& NewAngVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dc0a80
	void SetAllPhysicsAngularVelocityInDegrees(struct FVector& NewAngVel, bool bAddToCurrent); // Function Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dc0960
	void SetAllMassScale(float InMassScale); // Function Engine.PrimitiveComponent.SetAllMassScale // (Native|Public|BlueprintCallable) // @ game+0x3da0730
	struct FVector ScaleByMomentOfInertia(struct FVector InputVector, struct FName BoneName); // Function Engine.PrimitiveComponent.ScaleByMomentOfInertia // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dc0860
	void PutRigidBodyToSleep(struct FName BoneName); // Function Engine.PrimitiveComponent.PutRigidBodyToSleep // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc07e0
	bool K2_SphereTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_SphereTraceComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dc0450
	bool K2_SphereOverlapComponent(struct FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_SphereOverlapComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dc0110
	bool K2_LineTraceComponent(struct FVector TraceStart, struct FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_LineTraceComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dbfdc0
	bool K2_IsQueryCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbfd80
	bool K2_IsPhysicsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbfd40
	bool K2_IsCollisionEnabled(); // Function Engine.PrimitiveComponent.K2_IsCollisionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbfd00
	bool K2_BoxOverlapComponent(struct FVector InBoxCentre, struct FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector& HitLocation, struct FVector& HitNormal, struct FName& BoneName, struct FHitResult& OutHit); // Function Engine.PrimitiveComponent.K2_BoxOverlapComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dbf9b0
	bool IsOverlappingComponent(struct UPrimitiveComponent* OtherComp); // Function Engine.PrimitiveComponent.IsOverlappingComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbf920
	bool IsOverlappingActor(struct AActor* Other); // Function Engine.PrimitiveComponent.IsOverlappingActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbf890
	bool IsGravityEnabled(); // Function Engine.PrimitiveComponent.IsGravityEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cad2a0
	bool IsAnyRigidBodyAwake(); // Function Engine.PrimitiveComponent.IsAnyRigidBodyAwake // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3dbf860
	void IgnoreComponentWhenMoving(struct UPrimitiveComponent* Component, bool bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreComponentWhenMoving // (Final|Native|Public|BlueprintCallable) // @ game+0x3dbf790
	void IgnoreActorWhenMoving(struct AActor* Actor, bool bShouldIgnore); // Function Engine.PrimitiveComponent.IgnoreActorWhenMoving // (Final|Native|Public|BlueprintCallable) // @ game+0x3dbf6c0
	struct FWalkableSlopeOverride GetWalkableSlopeOverride(); // Function Engine.PrimitiveComponent.GetWalkableSlopeOverride // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbf690
	struct FVector GetPhysicsLinearVelocityAtPoint(struct FVector Point, struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbf5a0
	struct FVector GetPhysicsLinearVelocity(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbf500
	struct FVector GetPhysicsAngularVelocityInRadians(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbf460
	struct FVector GetPhysicsAngularVelocityInDegrees(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbf390
	struct FVector GetPhysicsAngularVelocity(struct FName BoneName); // Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbf390
	void GetOverlappingComponents(struct TArray<struct UPrimitiveComponent*>& OutOverlappingComponents); // Function Engine.PrimitiveComponent.GetOverlappingComponents // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbf2e0
	void GetOverlappingActors(struct TArray<struct AActor*>& OverlappingActors, struct AActor* ClassFilter); // Function Engine.PrimitiveComponent.GetOverlappingActors // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbf1e0
	int32_t GetNumMaterials(); // Function Engine.PrimitiveComponent.GetNumMaterials // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbf1b0
	struct UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex); // Function Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbf0d0
	struct UMaterialInterface* GetMaterial(int32_t ElementIndex); // Function Engine.PrimitiveComponent.GetMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbf030
	float GetMassScale(struct FName BoneName); // Function Engine.PrimitiveComponent.GetMassScale // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbef90
	float GetMass(); // Function Engine.PrimitiveComponent.GetMass // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbef50
	float GetLinearDamping(); // Function Engine.PrimitiveComponent.GetLinearDamping // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbef10
	struct FVector GetInertiaTensor(struct FName BoneName); // Function Engine.PrimitiveComponent.GetInertiaTensor // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbee60
	bool GetGenerateOverlapEvents(); // Function Engine.PrimitiveComponent.GetGenerateOverlapEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbee30
	enum class ECollisionResponse GetCollisionResponseToChannel(enum class ECollisionChannel Channel); // Function Engine.PrimitiveComponent.GetCollisionResponseToChannel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbeda0
	struct FName GetCollisionProfileName(); // Function Engine.PrimitiveComponent.GetCollisionProfileName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbed60
	enum class ECollisionChannel GetCollisionObjectType(); // Function Engine.PrimitiveComponent.GetCollisionObjectType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbed30
	enum class ECollisionEnabled GetCollisionEnabled(); // Function Engine.PrimitiveComponent.GetCollisionEnabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbed00
	float GetClosestPointOnCollision(struct FVector& Point, struct FVector& OutPointOnBody, struct FName BoneName); // Function Engine.PrimitiveComponent.GetClosestPointOnCollision // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbebc0
	struct FVector GetCenterOfMass(struct FName BoneName); // Function Engine.PrimitiveComponent.GetCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbeb20
	float GetAngularDamping(); // Function Engine.PrimitiveComponent.GetAngularDamping // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbeae0
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32_t ElementIndex, struct UMaterialInterface* SourceMaterial, struct FName OptionalName); // Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x3dbe9d0
	struct UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, struct UMaterialInterface* Parent); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial // (Native|Public|BlueprintCallable) // @ game+0x3dbe900
	struct UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex); // Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic // (Native|Public|BlueprintCallable) // @ game+0x3dbe860
	struct TArray<struct UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x3dbe7e0
	struct TArray<struct AActor*> CopyArrayOfMoveIgnoreActors(); // Function Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors // (Final|Native|Public|BlueprintCallable) // @ game+0x3dbe760
	void ClearMoveIgnoreComponents(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x3dbe730
	void ClearMoveIgnoreActors(); // Function Engine.PrimitiveComponent.ClearMoveIgnoreActors // (Final|Native|Public|BlueprintCallable) // @ game+0x3dbe710
	bool CanCharacterStepUp(struct APawn* Pawn); // Function Engine.PrimitiveComponent.CanCharacterStepUp // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dbe670
	void AddTorqueInRadians(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbe410
	void AddTorqueInDegrees(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorqueInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbe530
	void AddTorque(struct FVector Torque, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddTorque // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbe410
	void AddRadialImpulse(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bVelChange); // Function Engine.PrimitiveComponent.AddRadialImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbe250
	void AddRadialForce(struct FVector Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bAccelChange); // Function Engine.PrimitiveComponent.AddRadialForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbe090
	void AddImpulseAtLocation(struct FVector Impulse, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddImpulseAtLocation // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbdf60
	void AddImpulse(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbde40
	void AddForceAtLocationLocal(struct FVector Force, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocationLocal // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbdd10
	void AddForceAtLocation(struct FVector Force, struct FVector Location, struct FName BoneName); // Function Engine.PrimitiveComponent.AddForceAtLocation // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbdbe0
	void AddForce(struct FVector Force, struct FName BoneName, bool bAccelChange); // Function Engine.PrimitiveComponent.AddForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbdac0
	void AddAngularImpulseInRadians(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInRadians // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbd9a0
	void AddAngularImpulseInDegrees(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulseInDegrees // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbd860
	void AddAngularImpulse(struct FVector Impulse, struct FName BoneName, bool bVelChange); // Function Engine.PrimitiveComponent.AddAngularImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dbd740
};

// Class Engine.MeshComponent
// Size: 0x4d0 (Inherited: 0x4a0)
struct UMeshComponent : UPrimitiveComponent {
	float MipStreamingScale; // 0x4a0(0x04)
	char pad_4A4[0x4]; // 0x4a4(0x04)
	struct TArray<struct UMaterialInterface*> OverrideMaterials; // 0x4a8(0x10)
	char pad_4B8[0x10]; // 0x4b8(0x10)
	char bEnableMaterialParameterCaching : 1; // 0x4c8(0x01)
	char pad_4C8_1 : 7; // 0x4c8(0x01)
	char pad_4C9[0x7]; // 0x4c9(0x07)

	void SetVectorParameterValueOnMaterials(struct FName ParameterName, struct FVector ParameterValue); // Function Engine.MeshComponent.SetVectorParameterValueOnMaterials // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d7a790
	void SetScalarParameterValueOnMaterials(struct FName ParameterName, float ParameterValue); // Function Engine.MeshComponent.SetScalarParameterValueOnMaterials // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7a6c0
	void SetColorParameterValueOnMaterials(struct FName ParameterName, struct FLinearColor ParameterValue); // Function Engine.MeshComponent.SetColorParameterValueOnMaterials // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d7a490
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups); // Function Engine.MeshComponent.PrestreamTextures // (Native|Public|BlueprintCallable) // @ game+0x3d7a380
	bool IsMaterialSlotNameValid(struct FName MaterialSlotName); // Function Engine.MeshComponent.IsMaterialSlotNameValid // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d7a2e0
	struct TArray<struct FName> GetMaterialSlotNames(); // Function Engine.MeshComponent.GetMaterialSlotNames // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d7a1e0
	struct TArray<struct UMaterialInterface*> GetMaterials(); // Function Engine.MeshComponent.GetMaterials // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d7a260
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.MeshComponent.GetMaterialIndex // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d7a140
};

// Class Engine.SkinnedMeshComponent
// Size: 0x6e0 (Inherited: 0x4d0)
struct USkinnedMeshComponent : UMeshComponent {
	struct USkeletalMesh* SkeletalMesh; // 0x4d0(0x08)
	struct TWeakObjectPtr<struct USkinnedMeshComponent> MasterPoseComponent; // 0x4d8(0x08)
	struct TArray<enum class ESkinCacheUsage> SkinCacheUsage; // 0x4e0(0x10)
	char pad_4F0[0xf8]; // 0x4f0(0xf8)
	struct UPhysicsAsset* PhysicsAssetOverride; // 0x5e8(0x08)
	int32_t ForcedLodModel; // 0x5f0(0x04)
	int32_t MinLodModel; // 0x5f4(0x04)
	char pad_5F8[0x8]; // 0x5f8(0x08)
	float StreamingDistanceMultiplier; // 0x600(0x04)
	char pad_604[0xc]; // 0x604(0x0c)
	struct TArray<struct FSkelMeshComponentLODInfo> LODInfo; // 0x610(0x10)
	char pad_620[0x24]; // 0x620(0x24)
	enum class EVisibilityBasedAnimTickOption VisibilityBasedAnimTickOption; // 0x644(0x01)
	char pad_645[0x1]; // 0x645(0x01)
	char pad_646_0 : 2; // 0x646(0x01)
	char bOverrideMinLod : 1; // 0x646(0x01)
	char bUseBoundsFromMasterPoseComponent : 1; // 0x646(0x01)
	char bForceWireframe : 1; // 0x646(0x01)
	char bDisplayBones : 1; // 0x646(0x01)
	char bDisableMorphTarget : 1; // 0x646(0x01)
	char bHideSkin : 1; // 0x646(0x01)
	char bPerBoneMotionBlur : 1; // 0x647(0x01)
	char bComponentUseFixedSkelBounds : 1; // 0x647(0x01)
	char bConsiderAllBodiesForBounds : 1; // 0x647(0x01)
	char bSyncAttachParentLOD : 1; // 0x647(0x01)
	char bCanHighlightSelectedSections : 1; // 0x647(0x01)
	char bRecentlyRendered : 1; // 0x647(0x01)
	char bCastCapsuleDirectShadow : 1; // 0x647(0x01)
	char bCastCapsuleIndirectShadow : 1; // 0x647(0x01)
	char bCPUSkinning : 1; // 0x648(0x01)
	char bEnableUpdateRateOptimizations : 1; // 0x648(0x01)
	char bDisplayDebugUpdateRateOptimizations : 1; // 0x648(0x01)
	char bRenderStatic : 1; // 0x648(0x01)
	char bIgnoreMasterPoseComponentLOD : 1; // 0x648(0x01)
	char pad_648_5 : 2; // 0x648(0x01)
	char bCachedLocalBoundsUpToDate : 1; // 0x648(0x01)
	char pad_649_0 : 1; // 0x649(0x01)
	char bForceMeshObjectUpdate : 1; // 0x649(0x01)
	char pad_649_2 : 6; // 0x649(0x01)
	char pad_64A[0x2]; // 0x64a(0x02)
	float CapsuleIndirectShadowMinVisibility; // 0x64c(0x04)
	char pad_650[0x10]; // 0x650(0x10)
	struct FBoxSphereBounds CachedWorldSpaceBounds; // 0x660(0x1c)
	char pad_67C[0x4]; // 0x67c(0x04)
	struct FMatrix CachedWorldToLocalTransform; // 0x680(0x40)
	char pad_6C0[0x20]; // 0x6c0(0x20)

	void UnloadSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.UnloadSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x3de94f0
	void UnHideBoneByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.UnHideBoneByName // (Final|Native|Public|BlueprintCallable) // @ game+0x3de9470
	void TransformToBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation); // Function Engine.SkinnedMeshComponent.TransformToBoneSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de92b0
	void TransformFromBoneSpace(struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector& OutPosition, struct FRotator& OutRotation); // Function Engine.SkinnedMeshComponent.TransformFromBoneSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3de90f0
	void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ShowMaterialSection // (Final|Native|Public|BlueprintCallable) // @ game+0x3de8fb0
	void ShowAllMaterialSections(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ShowAllMaterialSections // (Final|Native|Public|BlueprintCallable) // @ game+0x3de8f30
	void SetVertexColorOverride_LinearColor(int32_t LODIndex, struct TArray<struct FLinearColor>& VertexColors); // Function Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3de8e40
	bool SetSkinWeightProfile(struct FName InProfileName); // Function Engine.SkinnedMeshComponent.SetSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x3de8db0
	void SetSkinWeightOverride(int32_t LODIndex, struct TArray<struct FSkelMeshSkinWeightInfo>& SkinWeights); // Function Engine.SkinnedMeshComponent.SetSkinWeightOverride // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3de8cc0
	void SetSkeletalMesh(struct USkeletalMesh* NewMesh, bool bReinitPose); // Function Engine.SkinnedMeshComponent.SetSkeletalMesh // (Native|Public|BlueprintCallable) // @ game+0x3de8bf0
	void SetRenderStatic(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetRenderStatic // (Final|Native|Public|BlueprintCallable) // @ game+0x3de8b60
	void SetPhysicsAsset(struct UPhysicsAsset* NewPhysicsAsset, bool bForceReInit); // Function Engine.SkinnedMeshComponent.SetPhysicsAsset // (Native|Public|BlueprintCallable) // @ game+0x3de8a90
	void SetMinLOD(int32_t InNewMinLOD); // Function Engine.SkinnedMeshComponent.SetMinLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x3de8a10
	void SetMasterPoseComponent(struct USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate); // Function Engine.SkinnedMeshComponent.SetMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3de8940
	void SetForcedLOD(int32_t InNewForcedLOD); // Function Engine.SkinnedMeshComponent.SetForcedLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x3de88c0
	void SetCastCapsuleIndirectShadow(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x3de8830
	void SetCastCapsuleDirectShadow(bool bNewValue); // Function Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x3de87a0
	void SetCapsuleIndirectShadowMinVisibility(float NewValue); // Function Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x3de8720
	bool IsUsingSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de86f0
	bool IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex); // Function Engine.SkinnedMeshComponent.IsMaterialSectionShown // (Final|Native|Public|BlueprintCallable) // @ game+0x3de8630
	bool IsBoneHiddenByName(struct FName BoneName); // Function Engine.SkinnedMeshComponent.IsBoneHiddenByName // (Final|Native|Public|BlueprintCallable) // @ game+0x3de85a0
	void HideBoneByName(struct FName BoneName, enum class EPhysBodyOp PhysBodyOption); // Function Engine.SkinnedMeshComponent.HideBoneByName // (Final|Native|Public|BlueprintCallable) // @ game+0x3de83c0
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(struct FName BoneName, float& OutTwistAngle, float& OutSwingAngle); // Function Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de82a0
	struct FName GetSocketBoneName(struct FName InSocketName); // Function Engine.SkinnedMeshComponent.GetSocketBoneName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de8170
	struct FVector GetRefPosePosition(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetRefPosePosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3de80d0
	struct FName GetParentBone(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetParentBone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de8040
	int32_t GetNumLODs(); // Function Engine.SkinnedMeshComponent.GetNumLODs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de8010
	int32_t GetNumBones(); // Function Engine.SkinnedMeshComponent.GetNumBones // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de7fe0
	int32_t GetForcedLOD(); // Function Engine.SkinnedMeshComponent.GetForcedLOD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de7fb0
	struct FTransform GetDeltaTransformFromRefPose(struct FName BoneName, struct FName BaseName); // Function Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de7eb0
	struct FName GetCurrentSkinWeightProfileName(); // Function Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de7e90
	struct FName GetBoneName(int32_t BoneIndex); // Function Engine.SkinnedMeshComponent.GetBoneName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de7e00
	int32_t GetBoneIndex(struct FName BoneName); // Function Engine.SkinnedMeshComponent.GetBoneIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de7d70
	struct FName FindClosestBone_K2(struct FVector TestLocation, struct FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset); // Function Engine.SkinnedMeshComponent.FindClosestBone_K2 // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de7be0
	void ClearVertexColorOverride(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ClearVertexColorOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x3de7b60
	void ClearSkinWeightProfile(); // Function Engine.SkinnedMeshComponent.ClearSkinWeightProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x3de7b40
	void ClearSkinWeightOverride(int32_t LODIndex); // Function Engine.SkinnedMeshComponent.ClearSkinWeightOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x3de7ac0
	bool BoneIsChildOf(struct FName BoneName, struct FName ParentBoneName); // Function Engine.SkinnedMeshComponent.BoneIsChildOf // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de7a00
};

// Class Engine.StreamableRenderAsset
// Size: 0x40 (Inherited: 0x28)
struct UStreamableRenderAsset : UObject {
	double ForceMipLevelsToBeResidentTimestamp; // 0x28(0x08)
	int32_t NumCinematicMipLevels; // 0x30(0x04)
	int32_t StreamingIndex; // 0x34(0x04)
	int32_t CachedCombinedLODBias; // 0x38(0x04)
	char CachedNumResidentLODs; // 0x3c(0x01)
	char bCachedReadyForStreaming : 1; // 0x3d(0x01)
	char NeverStream : 1; // 0x3d(0x01)
	char bGlobalForceMipLevelsToBeResident : 1; // 0x3d(0x01)
	char bIsStreamable : 1; // 0x3d(0x01)
	char bHasStreamingUpdatePending : 1; // 0x3d(0x01)
	char bForceMiplevelsToBeResident : 1; // 0x3d(0x01)
	char bIgnoreStreamingMipBias : 1; // 0x3d(0x01)
	char bUseCinematicMipLevels : 1; // 0x3d(0x01)
	char pad_3E[0x2]; // 0x3e(0x02)
};

// Class Engine.SkeletalMesh
// Size: 0x380 (Inherited: 0x40)
struct USkeletalMesh : UStreamableRenderAsset {
	char pad_40[0x20]; // 0x40(0x20)
	struct USkeleton* Skeleton; // 0x60(0x08)
	struct FBoxSphereBounds ImportedBounds; // 0x68(0x1c)
	struct FBoxSphereBounds ExtendedBounds; // 0x84(0x1c)
	struct FVector PositiveBoundsExtension; // 0xa0(0x0c)
	struct FVector NegativeBoundsExtension; // 0xac(0x0c)
	struct TArray<struct FSkeletalMaterial> Materials; // 0xb8(0x10)
	struct TArray<struct FBoneMirrorInfo> SkelMirrorTable; // 0xc8(0x10)
	struct TArray<struct FSkeletalMeshLODInfo> LODInfo; // 0xd8(0x10)
	char pad_E8[0x50]; // 0xe8(0x50)
	struct FPerPlatformInt MinLOD; // 0x138(0x04)
	struct FPerPlatformBool DisableBelowMinLodStripping; // 0x13c(0x01)
	enum class EAxis SkelMirrorAxis; // 0x13d(0x01)
	enum class EAxis SkelMirrorFlipAxis; // 0x13e(0x01)
	char bUseFullPrecisionUVs : 1; // 0x13f(0x01)
	char bUseHighPrecisionTangentBasis : 1; // 0x13f(0x01)
	char bHasBeenSimplified : 1; // 0x13f(0x01)
	char bHasVertexColors : 1; // 0x13f(0x01)
	char pad_13F_4 : 1; // 0x13f(0x01)
	char bEnablePerPolyCollision : 1; // 0x13f(0x01)
	char pad_13F_6 : 2; // 0x13f(0x01)
	struct UBodySetup* BodySetup; // 0x140(0x08)
	struct UPhysicsAsset* PhysicsAsset; // 0x148(0x08)
	struct UPhysicsAsset* ShadowPhysicsAsset; // 0x150(0x08)
	struct TArray<struct UNodeMappingContainer*> NodeMappingData; // 0x158(0x10)
	struct TArray<struct UMorphTarget*> MorphTargets; // 0x168(0x10)
	char pad_178[0x178]; // 0x178(0x178)
	struct UAnimInstance* PostProcessAnimBlueprint; // 0x2f0(0x08)
	struct TArray<struct UClothingAssetBase*> MeshClothingAssets; // 0x2f8(0x10)
	struct FSkeletalMeshSamplingInfo SamplingInfo; // 0x308(0x30)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x338(0x10)
	char pad_348[0x8]; // 0x348(0x08)
	struct TArray<struct USkeletalMeshSocket*> Sockets; // 0x350(0x10)
	char pad_360[0x10]; // 0x360(0x10)
	struct TArray<struct FSkinWeightProfileInfo> SkinWeightProfiles; // 0x370(0x10)

	void SetLODSettings(struct USkeletalMeshLODSettings* InLODSettings); // Function Engine.SkeletalMesh.SetLODSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x16b4f10
	int32_t NumSockets(); // Function Engine.SkeletalMesh.NumSockets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddb580
	struct TArray<struct FString> K2_GetAllMorphTargetNames(); // Function Engine.SkeletalMesh.K2_GetAllMorphTargetNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddb4a0
	bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections); // Function Engine.SkeletalMesh.IsSectionUsingCloth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddb3e0
	struct USkeletalMeshSocket* GetSocketByIndex(int32_t Index); // Function Engine.SkeletalMesh.GetSocketByIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddb350
	struct UNodeMappingContainer* GetNodeMappingContainer(struct UBlueprint* SourceAsset); // Function Engine.SkeletalMesh.GetNodeMappingContainer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddb2c0
	struct FBoxSphereBounds GetImportedBounds(); // Function Engine.SkeletalMesh.GetImportedBounds // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddb270
	struct FBoxSphereBounds GetBounds(); // Function Engine.SkeletalMesh.GetBounds // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddb220
	struct USkeletalMeshSocket* FindSocketInfo(struct FName InSocketName, struct FTransform& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddb050
	struct USkeletalMeshSocket* FindSocketAndIndex(struct FName InSocketName, int32_t& OutIndex); // Function Engine.SkeletalMesh.FindSocketAndIndex // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddaf80
	struct USkeletalMeshSocket* FindSocket(struct FName InSocketName); // Function Engine.SkeletalMesh.FindSocket // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddaef0
};

// Class Engine.StaticMeshActor
// Size: 0x330 (Inherited: 0x320)
struct AStaticMeshActor : AActor {
	struct UStaticMeshComponent* StaticMeshComponent; // 0x320(0x08)
	bool bStaticMeshReplicateMovement; // 0x328(0x01)
	enum class ENavDataGatheringMode NavigationGeometryGatheringMode; // 0x329(0x01)
	char pad_32A[0x6]; // 0x32a(0x06)

	void SetMobility(enum class EComponentMobility InMobility); // Function Engine.StaticMeshActor.SetMobility // (Final|Native|Public|BlueprintCallable) // @ game+0x124d970
};

// Class Engine.Texture
// Size: 0xb8 (Inherited: 0x40)
struct UTexture : UStreamableRenderAsset {
	char pad_40[0x8]; // 0x40(0x08)
	struct FGuid LightingGuid; // 0x48(0x10)
	int32_t LODBias; // 0x58(0x04)
	enum class TextureCompressionSettings CompressionSettings; // 0x5c(0x01)
	enum class TextureFilter Filter; // 0x5d(0x01)
	enum class ETextureMipLoadOptions MipLoadOptions; // 0x5e(0x01)
	enum class TextureGroup LODGroup; // 0x5f(0x01)
	char SRGB : 1; // 0x60(0x01)
	char bNoTiling : 1; // 0x60(0x01)
	char VirtualTextureStreaming : 1; // 0x60(0x01)
	char CompressionYCoCg : 1; // 0x60(0x01)
	char bAsyncResourceReleaseHasBeenStarted : 1; // 0x60(0x01)
	char pad_60_5 : 3; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x68(0x10)
	char pad_78[0x40]; // 0x78(0x40)
};

// Class Engine.Texture2DDynamic
// Size: 0xd0 (Inherited: 0xb8)
struct UTexture2DDynamic : UTexture {
	char pad_B8[0x8]; // 0xb8(0x08)
	enum class EPixelFormat Format; // 0xc0(0x01)
	char pad_C1[0xf]; // 0xc1(0x0f)
};

// Class Engine.HUD
// Size: 0x410 (Inherited: 0x320)
struct AHUD : AActor {
	struct APlayerController* PlayerOwner; // 0x320(0x08)
	char bLostFocusPaused : 1; // 0x328(0x01)
	char bShowHUD : 1; // 0x328(0x01)
	char bShowDebugInfo : 1; // 0x328(0x01)
	char pad_328_3 : 5; // 0x328(0x01)
	char pad_329[0x3]; // 0x329(0x03)
	int32_t CurrentTargetIndex; // 0x32c(0x04)
	char bShowHitBoxDebugInfo : 1; // 0x330(0x01)
	char bShowOverlays : 1; // 0x330(0x01)
	char bEnableDebugTextShadow : 1; // 0x330(0x01)
	char pad_330_3 : 5; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)
	struct TArray<struct AActor*> PostRenderedActors; // 0x338(0x10)
	char pad_348[0x8]; // 0x348(0x08)
	struct TArray<struct FName> DebugDisplay; // 0x350(0x10)
	struct TArray<struct FName> ToggledDebugCategories; // 0x360(0x10)
	struct UCanvas* Canvas; // 0x370(0x08)
	struct UCanvas* DebugCanvas; // 0x378(0x08)
	struct TArray<struct FDebugTextInfo> DebugTextList; // 0x380(0x10)
	struct AActor* ShowDebugTargetDesiredClass; // 0x390(0x08)
	struct AActor* ShowDebugTargetActor; // 0x398(0x08)
	char pad_3A0[0x70]; // 0x3a0(0x70)

	void ShowHUD(); // Function Engine.HUD.ShowHUD // (Exec|Native|Public) // @ game+0x1e477f0
	void ShowDebugToggleSubCategory(struct FName Category); // Function Engine.HUD.ShowDebugToggleSubCategory // (Final|Exec|Native|Public) // @ game+0x3ce9590
	void ShowDebugForReticleTargetToggle(struct AActor* DesiredClass); // Function Engine.HUD.ShowDebugForReticleTargetToggle // (Final|Exec|Native|Public) // @ game+0x3ce9510
	void ShowDebug(struct FName DebugType); // Function Engine.HUD.ShowDebug // (Exec|Native|Public) // @ game+0x1e6cbd0
	void RemoveDebugText(struct AActor* SrcActor, bool bLeaveDurationText); // Function Engine.HUD.RemoveDebugText // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3ce92f0
	void RemoveAllDebugStrings(); // Function Engine.HUD.RemoveAllDebugStrings // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3ce92d0
	void ReceiveHitBoxRelease(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxRelease // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveHitBoxEndCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxEndCursorOver // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveHitBoxClick(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxClick // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveHitBoxBeginCursorOver(struct FName BoxName); // Function Engine.HUD.ReceiveHitBoxBeginCursorOver // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY); // Function Engine.HUD.ReceiveDrawHUD // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x23a3b60
	struct FVector Project(struct FVector Location); // Function Engine.HUD.Project // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce9220
	void PreviousDebugTarget(); // Function Engine.HUD.PreviousDebugTarget // (Exec|Native|Public) // @ game+0x1fa0e50
	void NextDebugTarget(); // Function Engine.HUD.NextDebugTarget // (Exec|Native|Public) // @ game+0x11cd6c0
	void GetTextSize(struct FString Text, float& OutWidth, float& OutHeight, struct UFont* Font, float Scale); // Function Engine.HUD.GetTextSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce8f20
	struct APlayerController* GetOwningPlayerController(); // Function Engine.HUD.GetOwningPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x16d2670
	struct APawn* GetOwningPawn(); // Function Engine.HUD.GetOwningPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce8ef0
	void GetActorsInSelectionRectangle(struct AActor* ClassFilter, struct FVector2D& FirstPoint, struct FVector2D& SecondPoint, struct TArray<struct AActor*>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // Function Engine.HUD.GetActorsInSelectionRectangle // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3ce8ce0
	void DrawTextureSimple(struct UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition); // Function Engine.HUD.DrawTextureSimple // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce8b50
	void DrawTexture(struct UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, struct FLinearColor TintColor, enum class EBlendMode BlendMode, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot); // Function Engine.HUD.DrawTexture // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3ce8730
	void DrawText(struct FString Text, struct FLinearColor TextColor, float ScreenX, float ScreenY, struct UFont* Font, float Scale, bool bScalePosition); // Function Engine.HUD.DrawText // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3ce8500
	void DrawRect(struct FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH); // Function Engine.HUD.DrawRect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3ce8350
	void DrawMaterialTriangle(struct UMaterialInterface* Material, struct FVector2D V0_Pos, struct FVector2D V1_Pos, struct FVector2D V2_Pos, struct FVector2D V0_UV, struct FVector2D V1_UV, struct FVector2D V2_UV, struct FLinearColor V0_Color, struct FLinearColor V1_Color, struct FLinearColor V2_Color); // Function Engine.HUD.DrawMaterialTriangle // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3ce8090
	void DrawMaterialSimple(struct UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // Function Engine.HUD.DrawMaterialSimple // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce7e90
	void DrawMaterial(struct UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, struct FVector2D RotPivot); // Function Engine.HUD.DrawMaterial // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3ce7b00
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, struct FLinearColor LineColor, float LineThickness); // Function Engine.HUD.DrawLine // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3ce7920
	void Deproject(float ScreenX, float ScreenY, struct FVector& WorldPosition, struct FVector& WorldDirection); // Function Engine.HUD.Deproject // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce7720
	void AddHitBox(struct FVector2D Position, struct FVector2D Size, struct FName InName, bool bConsumesInput, int32_t Priority); // Function Engine.HUD.AddHitBox // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3ce7590
	void AddDebugText(struct FString DebugText, struct AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, struct UFont* InFont, float FontScale, bool bDrawShadow); // Function Engine.HUD.AddDebugText // (Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x3ce71f0
};

// Class Engine.Player
// Size: 0x48 (Inherited: 0x28)
struct UPlayer : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct APlayerController* PlayerController; // 0x30(0x08)
	int32_t CurrentNetSpeed; // 0x38(0x04)
	int32_t ConfiguredInternetSpeed; // 0x3c(0x04)
	int32_t ConfiguredLanSpeed; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.MKNetConnectionEx
// Size: 0xb8 (Inherited: 0x48)
struct UMKNetConnectionEx : UPlayer {
	char pad_48[0x68]; // 0x48(0x68)
	struct UNetConnection* SelfNetConnection; // 0xb0(0x08)
};

// Class Engine.NetConnection
// Size: 0x1aa0 (Inherited: 0xb8)
struct UNetConnection : UMKNetConnectionEx {
	struct TArray<struct UChildConnection*> Children; // 0xb8(0x10)
	struct UNetDriver* Driver; // 0xc8(0x08)
	struct UPackageMap* PackageMapClass; // 0xd0(0x08)
	struct UPackageMap* PackageMap; // 0xd8(0x08)
	struct TArray<struct UChannel*> OpenChannels; // 0xe0(0x10)
	struct TArray<struct AActor*> SentTemporaries; // 0xf0(0x10)
	struct AActor* ViewTarget; // 0x100(0x08)
	struct AActor* OwningActor; // 0x108(0x08)
	int32_t MaxPacket; // 0x110(0x04)
	char InternalAck : 1; // 0x114(0x01)
	char pad_114_1 : 7; // 0x114(0x01)
	char pad_115[0xbb]; // 0x115(0xbb)
	struct FUniqueNetIdRepl PlayerId; // 0x1d0(0x28)
	char pad_1F8[0x48]; // 0x1f8(0x48)
	double LastReceiveTime; // 0x240(0x08)
	char pad_248[0x1338]; // 0x248(0x1338)
	struct TArray<struct UChannel*> ChannelsToTick; // 0x1580(0x10)
	char pad_1590[0x510]; // 0x1590(0x510)
};

// Class Engine.NetDriver
// Size: 0x748 (Inherited: 0x28)
struct UNetDriver : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FString NetConnectionClassName; // 0x30(0x10)
	struct FString ReplicationDriverClassName; // 0x40(0x10)
	int32_t MaxDownloadSize; // 0x50(0x04)
	char bClampListenServerTickRate : 1; // 0x54(0x01)
	char pad_54_1 : 7; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	int32_t NetServerMaxTickRate; // 0x58(0x04)
	int32_t MaxNetTickRate; // 0x5c(0x04)
	int32_t MaxInternetClientRate; // 0x60(0x04)
	int32_t MaxClientRate; // 0x64(0x04)
	float ServerTravelPause; // 0x68(0x04)
	float SpawnPrioritySeconds; // 0x6c(0x04)
	float RelevantTimeout; // 0x70(0x04)
	float KeepAliveTime; // 0x74(0x04)
	float InitialConnectTimeout; // 0x78(0x04)
	float ConnectionTimeout; // 0x7c(0x04)
	float TimeoutMultiplierForUnoptimizedBuilds; // 0x80(0x04)
	bool bNoTimeouts; // 0x84(0x01)
	bool bNeverApplyNetworkEmulationSettings; // 0x85(0x01)
	char pad_86[0x2]; // 0x86(0x02)
	struct UNetConnection* ServerConnection; // 0x88(0x08)
	struct TArray<struct UNetConnection*> ClientConnections; // 0x90(0x10)
	char pad_A0[0x60]; // 0xa0(0x60)
	int32_t RecentlyDisconnectedTrackingTime; // 0x100(0x04)
	char pad_104[0x3c]; // 0x104(0x3c)
	struct UWorld* World; // 0x140(0x08)
	struct UPackage* WorldPackage; // 0x148(0x08)
	char pad_150[0x20]; // 0x150(0x20)
	struct UObject* NetConnectionClass; // 0x170(0x08)
	struct UObject* ReplicationDriverClass; // 0x178(0x08)
	char pad_180[0x10]; // 0x180(0x10)
	struct FName NetDriverName; // 0x190(0x08)
	struct TArray<struct FChannelDefinition> ChannelDefinitions; // 0x198(0x10)
	struct TMap<struct FName, struct FChannelDefinition> ChannelDefinitionMap; // 0x1a8(0x50)
	struct TArray<struct UChannel*> ActorChannelPool; // 0x1f8(0x10)
	char pad_208[0x8]; // 0x208(0x08)
	float Time; // 0x210(0x04)
	char pad_214[0x4d4]; // 0x214(0x4d4)
	struct UReplicationDriver* ReplicationDriver; // 0x6e8(0x08)
	char pad_6F0[0x58]; // 0x6f0(0x58)
};

// Class Engine.BlueprintAsyncActionBase
// Size: 0x30 (Inherited: 0x28)
struct UBlueprintAsyncActionBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	void Activate(); // Function Engine.BlueprintAsyncActionBase.Activate // (Native|Public|BlueprintCallable) // @ game+0x2ed3300
};

// Class Engine.OnlineBlueprintCallProxyBase
// Size: 0x30 (Inherited: 0x30)
struct UOnlineBlueprintCallProxyBase : UBlueprintAsyncActionBase {
};

// Class Engine.OnlineEngineInterface
// Size: 0x28 (Inherited: 0x28)
struct UOnlineEngineInterface : UObject {
};

// Class Engine.DeveloperSettings
// Size: 0x38 (Inherited: 0x28)
struct UDeveloperSettings : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Engine.OnlineSession
// Size: 0x28 (Inherited: 0x28)
struct UOnlineSession : UObject {
};

// Class Engine.Engine
// Size: 0xde8 (Inherited: 0x28)
struct UEngine : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UFont* TinyFont; // 0x30(0x08)
	struct FSoftObjectPath TinyFontName; // 0x38(0x18)
	struct UFont* SmallFont; // 0x50(0x08)
	struct FSoftObjectPath SmallFontName; // 0x58(0x18)
	struct UFont* MediumFont; // 0x70(0x08)
	struct FSoftObjectPath MediumFontName; // 0x78(0x18)
	struct UFont* LargeFont; // 0x90(0x08)
	struct FSoftObjectPath LargeFontName; // 0x98(0x18)
	struct UFont* SubtitleFont; // 0xb0(0x08)
	struct FSoftObjectPath SubtitleFontName; // 0xb8(0x18)
	struct TArray<struct UFont*> AdditionalFonts; // 0xd0(0x10)
	char pad_E0[0x8]; // 0xe0(0x08)
	struct TArray<struct FString> AdditionalFontNames; // 0xe8(0x10)
	struct UConsole* ConsoleClass; // 0xf8(0x08)
	struct FSoftClassPath ConsoleClassName; // 0x100(0x18)
	struct UGameViewportClient* GameViewportClientClass; // 0x118(0x08)
	struct FSoftClassPath GameViewportClientClassName; // 0x120(0x18)
	struct ULocalPlayer* LocalPlayerClass; // 0x138(0x08)
	struct FSoftClassPath LocalPlayerClassName; // 0x140(0x18)
	struct AWorldSettings* WorldSettingsClass; // 0x158(0x08)
	struct FSoftClassPath WorldSettingsClassName; // 0x160(0x18)
	struct FSoftClassPath NavigationSystemClassName; // 0x178(0x18)
	struct UNavigationSystemBase* NavigationSystemClass; // 0x190(0x08)
	struct FSoftClassPath NavigationSystemConfigClassName; // 0x198(0x18)
	struct UNavigationSystemConfig* NavigationSystemConfigClass; // 0x1b0(0x08)
	struct FSoftClassPath AvoidanceManagerClassName; // 0x1b8(0x18)
	struct UAvoidanceManager* AvoidanceManagerClass; // 0x1d0(0x08)
	struct UPhysicsCollisionHandler* PhysicsCollisionHandlerClass; // 0x1d8(0x08)
	struct FSoftClassPath PhysicsCollisionHandlerClassName; // 0x1e0(0x18)
	struct FSoftClassPath GameUserSettingsClassName; // 0x1f8(0x18)
	struct UGameUserSettings* GameUserSettingsClass; // 0x210(0x08)
	struct FSoftClassPath AIControllerClassName; // 0x218(0x18)
	struct UGameUserSettings* GameUserSettings; // 0x230(0x08)
	struct ALevelScriptActor* LevelScriptActorClass; // 0x238(0x08)
	struct FSoftClassPath LevelScriptActorClassName; // 0x240(0x18)
	struct FSoftClassPath DefaultBlueprintBaseClassName; // 0x258(0x18)
	struct FSoftClassPath GameSingletonClassName; // 0x270(0x18)
	struct UObject* GameSingleton; // 0x288(0x08)
	struct FSoftClassPath AssetManagerClassName; // 0x290(0x18)
	struct UAssetManager* AssetManager; // 0x2a8(0x08)
	struct UTexture2D* DefaultTexture; // 0x2b0(0x08)
	struct FSoftObjectPath DefaultTextureName; // 0x2b8(0x18)
	struct UTexture* DefaultDiffuseTexture; // 0x2d0(0x08)
	struct FSoftObjectPath DefaultDiffuseTextureName; // 0x2d8(0x18)
	struct UTexture2D* DefaultBSPVertexTexture; // 0x2f0(0x08)
	struct FSoftObjectPath DefaultBSPVertexTextureName; // 0x2f8(0x18)
	struct UTexture2D* HighFrequencyNoiseTexture; // 0x310(0x08)
	struct FSoftObjectPath HighFrequencyNoiseTextureName; // 0x318(0x18)
	struct UTexture2D* DefaultBokehTexture; // 0x330(0x08)
	struct FSoftObjectPath DefaultBokehTextureName; // 0x338(0x18)
	struct UTexture2D* DefaultBloomKernelTexture; // 0x350(0x08)
	struct FSoftObjectPath DefaultBloomKernelTextureName; // 0x358(0x18)
	struct UMaterial* WireframeMaterial; // 0x370(0x08)
	struct FString WireframeMaterialName; // 0x378(0x10)
	struct UMaterial* DebugMeshMaterial; // 0x388(0x08)
	struct FSoftObjectPath DebugMeshMaterialName; // 0x390(0x18)
	struct UMaterial* EmissiveMeshMaterial; // 0x3a8(0x08)
	struct FSoftObjectPath EmissiveMeshMaterialName; // 0x3b0(0x18)
	struct UMaterial* LevelColorationLitMaterial; // 0x3c8(0x08)
	struct FString LevelColorationLitMaterialName; // 0x3d0(0x10)
	struct UMaterial* LevelColorationUnlitMaterial; // 0x3e0(0x08)
	struct FString LevelColorationUnlitMaterialName; // 0x3e8(0x10)
	struct UMaterial* LightingTexelDensityMaterial; // 0x3f8(0x08)
	struct FString LightingTexelDensityName; // 0x400(0x10)
	struct UMaterial* ShadedLevelColorationLitMaterial; // 0x410(0x08)
	struct FString ShadedLevelColorationLitMaterialName; // 0x418(0x10)
	struct UMaterial* ShadedLevelColorationUnlitMaterial; // 0x428(0x08)
	struct FString ShadedLevelColorationUnlitMaterialName; // 0x430(0x10)
	struct UMaterial* RemoveSurfaceMaterial; // 0x440(0x08)
	struct FSoftObjectPath RemoveSurfaceMaterialName; // 0x448(0x18)
	struct UMaterial* VertexColorMaterial; // 0x460(0x08)
	struct FString VertexColorMaterialName; // 0x468(0x10)
	struct UMaterial* VertexColorViewModeMaterial_ColorOnly; // 0x478(0x08)
	struct FString VertexColorViewModeMaterialName_ColorOnly; // 0x480(0x10)
	struct UMaterial* VertexColorViewModeMaterial_AlphaAsColor; // 0x490(0x08)
	struct FString VertexColorViewModeMaterialName_AlphaAsColor; // 0x498(0x10)
	struct UMaterial* VertexColorViewModeMaterial_RedOnly; // 0x4a8(0x08)
	struct FString VertexColorViewModeMaterialName_RedOnly; // 0x4b0(0x10)
	struct UMaterial* VertexColorViewModeMaterial_GreenOnly; // 0x4c0(0x08)
	struct FString VertexColorViewModeMaterialName_GreenOnly; // 0x4c8(0x10)
	struct UMaterial* VertexColorViewModeMaterial_BlueOnly; // 0x4d8(0x08)
	struct FString VertexColorViewModeMaterialName_BlueOnly; // 0x4e0(0x10)
	struct FSoftObjectPath DebugEditorMaterialName; // 0x4f0(0x18)
	struct UMaterial* ConstraintLimitMaterial; // 0x508(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialX; // 0x510(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialXAxis; // 0x518(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialY; // 0x520(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialYAxis; // 0x528(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialZ; // 0x530(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialZAxis; // 0x538(0x08)
	struct UMaterialInstanceDynamic* ConstraintLimitMaterialPrismatic; // 0x540(0x08)
	struct UMaterial* InvalidLightmapSettingsMaterial; // 0x548(0x08)
	struct FSoftObjectPath InvalidLightmapSettingsMaterialName; // 0x550(0x18)
	struct UMaterial* PreviewShadowsIndicatorMaterial; // 0x568(0x08)
	struct FSoftObjectPath PreviewShadowsIndicatorMaterialName; // 0x570(0x18)
	struct UMaterial* ArrowMaterial; // 0x588(0x08)
	struct UMaterialInstanceDynamic* ArrowMaterialYellow; // 0x590(0x08)
	struct FSoftObjectPath ArrowMaterialName; // 0x598(0x18)
	struct FLinearColor LightingOnlyBrightness; // 0x5b0(0x10)
	struct TArray<struct FLinearColor> ShaderComplexityColors; // 0x5c0(0x10)
	struct TArray<struct FLinearColor> QuadComplexityColors; // 0x5d0(0x10)
	struct TArray<struct FLinearColor> LightComplexityColors; // 0x5e0(0x10)
	struct TArray<struct FLinearColor> StationaryLightOverlapColors; // 0x5f0(0x10)
	struct TArray<struct FLinearColor> LODColorationColors; // 0x600(0x10)
	struct TArray<struct FLinearColor> HLODColorationColors; // 0x610(0x10)
	struct TArray<struct FLinearColor> StreamingAccuracyColors; // 0x620(0x10)
	float MaxPixelShaderAdditiveComplexityCount; // 0x630(0x04)
	float MaxES3PixelShaderAdditiveComplexityCount; // 0x634(0x04)
	float MinLightMapDensity; // 0x638(0x04)
	float IdealLightMapDensity; // 0x63c(0x04)
	float MaxLightMapDensity; // 0x640(0x04)
	char bRenderLightMapDensityGrayscale : 1; // 0x644(0x01)
	char pad_644_1 : 7; // 0x644(0x01)
	char pad_645[0x3]; // 0x645(0x03)
	float RenderLightMapDensityGrayscaleScale; // 0x648(0x04)
	float RenderLightMapDensityColorScale; // 0x64c(0x04)
	struct FLinearColor LightMapDensityVertexMappedColor; // 0x650(0x10)
	struct FLinearColor LightMapDensitySelectedColor; // 0x660(0x10)
	struct TArray<struct FStatColorMapping> StatColorMappings; // 0x670(0x10)
	struct UPhysicalMaterial* DefaultPhysMaterial; // 0x680(0x08)
	struct FSoftObjectPath DefaultPhysMaterialName; // 0x688(0x18)
	struct TArray<struct FGameNameRedirect> ActiveGameNameRedirects; // 0x6a0(0x10)
	struct TArray<struct FClassRedirect> ActiveClassRedirects; // 0x6b0(0x10)
	struct TArray<struct FPluginRedirect> ActivePluginRedirects; // 0x6c0(0x10)
	struct TArray<struct FStructRedirect> ActiveStructRedirects; // 0x6d0(0x10)
	struct UTexture2D* PreIntegratedSkinBRDFTexture; // 0x6e0(0x08)
	struct FSoftObjectPath PreIntegratedSkinBRDFTextureName; // 0x6e8(0x18)
	struct UTexture2D* BlueNoiseTexture; // 0x700(0x08)
	struct FSoftObjectPath BlueNoiseTextureName; // 0x708(0x18)
	struct UTexture2D* MiniFontTexture; // 0x720(0x08)
	struct FSoftObjectPath MiniFontTextureName; // 0x728(0x18)
	struct UTexture* WeightMapPlaceholderTexture; // 0x740(0x08)
	struct FSoftObjectPath WeightMapPlaceholderTextureName; // 0x748(0x18)
	struct UTexture2D* LightMapDensityTexture; // 0x760(0x08)
	struct FSoftObjectPath LightMapDensityTextureName; // 0x768(0x18)
	char pad_780[0x8]; // 0x780(0x08)
	struct UGameViewportClient* GameViewport; // 0x788(0x08)
	struct TArray<struct FString> DeferredCommands; // 0x790(0x10)
	int32_t TickCycles; // 0x7a0(0x04)
	int32_t GameCycles; // 0x7a4(0x04)
	int32_t ClientCycles; // 0x7a8(0x04)
	float NearClipPlane; // 0x7ac(0x04)
	float EditorNearClipPlane; // 0x7b0(0x04)
	bool bUseCustomAudioModule; // 0x7b4(0x01)
	char pad_7B5[0x3]; // 0x7b5(0x03)
	char bHardwareSurveyEnabled : 1; // 0x7b8(0x01)
	char bSubtitlesEnabled : 1; // 0x7b8(0x01)
	char bSubtitlesForcedOff : 1; // 0x7b8(0x01)
	char pad_7B8_3 : 5; // 0x7b8(0x01)
	char pad_7B9[0x3]; // 0x7b9(0x03)
	int32_t MaximumLoopIterationCount; // 0x7bc(0x04)
	char bCanBlueprintsTickByDefault : 1; // 0x7c0(0x01)
	char bOptimizeAnimBlueprintMemberVariableAccess : 1; // 0x7c0(0x01)
	char bAllowMultiThreadedAnimationUpdate : 1; // 0x7c0(0x01)
	char bEnableEditorPSysRealtimeLOD : 1; // 0x7c0(0x01)
	char pad_7C0_4 : 1; // 0x7c0(0x01)
	char bSmoothFrameRate : 1; // 0x7c0(0x01)
	char bUseFixedFrameRate : 1; // 0x7c0(0x01)
	char pad_7C0_7 : 1; // 0x7c0(0x01)
	char pad_7C1[0x3]; // 0x7c1(0x03)
	float FixedFrameRate; // 0x7c4(0x04)
	struct FFloatRange SmoothedFrameRateRange; // 0x7c8(0x10)
	struct UEngineCustomTimeStep* CustomTimeStep; // 0x7d8(0x08)
	char pad_7E0[0x20]; // 0x7e0(0x20)
	struct FSoftClassPath CustomTimeStepClassName; // 0x800(0x18)
	struct UTimecodeProvider* TimecodeProvider; // 0x818(0x08)
	char pad_820[0x20]; // 0x820(0x20)
	struct FSoftClassPath TimecodeProviderClassName; // 0x840(0x18)
	bool bGenerateDefaultTimecode; // 0x858(0x01)
	char pad_859[0x3]; // 0x859(0x03)
	struct FFrameRate GenerateDefaultTimecodeFrameRate; // 0x85c(0x08)
	float GenerateDefaultTimecodeFrameDelay; // 0x864(0x04)
	char bCheckForMultiplePawnsSpawnedInAFrame : 1; // 0x868(0x01)
	char pad_868_1 : 7; // 0x868(0x01)
	char pad_869[0x3]; // 0x869(0x03)
	int32_t NumPawnsAllowedToBeSpawnedInAFrame; // 0x86c(0x04)
	char bShouldGenerateLowQualityLightmaps : 1; // 0x870(0x01)
	char pad_870_1 : 7; // 0x870(0x01)
	char pad_871[0x3]; // 0x871(0x03)
	struct FColor C_WorldBox; // 0x874(0x04)
	struct FColor C_BrushWire; // 0x878(0x04)
	struct FColor C_AddWire; // 0x87c(0x04)
	struct FColor C_SubtractWire; // 0x880(0x04)
	struct FColor C_SemiSolidWire; // 0x884(0x04)
	struct FColor C_NonSolidWire; // 0x888(0x04)
	struct FColor C_WireBackground; // 0x88c(0x04)
	struct FColor C_ScaleBoxHi; // 0x890(0x04)
	struct FColor C_VolumeCollision; // 0x894(0x04)
	struct FColor C_BSPCollision; // 0x898(0x04)
	struct FColor C_OrthoBackground; // 0x89c(0x04)
	struct FColor C_Volume; // 0x8a0(0x04)
	struct FColor C_BrushShape; // 0x8a4(0x04)
	float StreamingDistanceFactor; // 0x8a8(0x04)
	char pad_8AC[0x4]; // 0x8ac(0x04)
	struct FDirectoryPath GameScreenshotSaveDirectory; // 0x8b0(0x10)
	enum class ETransitionType TransitionType; // 0x8c0(0x01)
	char pad_8C1[0x7]; // 0x8c1(0x07)
	struct FString TransitionDescription; // 0x8c8(0x10)
	struct FString TransitionGameMode; // 0x8d8(0x10)
	float MeshLODRange; // 0x8e8(0x04)
	char bAllowMatureLanguage : 1; // 0x8ec(0x01)
	char pad_8EC_1 : 7; // 0x8ec(0x01)
	char pad_8ED[0x3]; // 0x8ed(0x03)
	float CameraRotationThreshold; // 0x8f0(0x04)
	float CameraTranslationThreshold; // 0x8f4(0x04)
	float PrimitiveProbablyVisibleTime; // 0x8f8(0x04)
	float MaxOcclusionPixelsFraction; // 0x8fc(0x04)
	char bPauseOnLossOfFocus : 1; // 0x900(0x01)
	char pad_900_1 : 7; // 0x900(0x01)
	char pad_901[0x3]; // 0x901(0x03)
	int32_t MaxParticleResize; // 0x904(0x04)
	int32_t MaxParticleResizeWarn; // 0x908(0x04)
	char pad_90C[0x4]; // 0x90c(0x04)
	struct TArray<struct FDropNoteInfo> PendingDroppedNotes; // 0x910(0x10)
	float NetClientTicksPerSecond; // 0x920(0x04)
	float DisplayGamma; // 0x924(0x04)
	float MinDesiredFrameRate; // 0x928(0x04)
	struct FLinearColor DefaultSelectedMaterialColor; // 0x92c(0x10)
	struct FLinearColor SelectedMaterialColor; // 0x93c(0x10)
	struct FLinearColor SelectionOutlineColor; // 0x94c(0x10)
	struct FLinearColor SubduedSelectionOutlineColor; // 0x95c(0x10)
	struct FLinearColor SelectedMaterialColorOverride; // 0x96c(0x10)
	bool bIsOverridingSelectedColor; // 0x97c(0x01)
	char pad_97D[0x3]; // 0x97d(0x03)
	char bEnableOnScreenDebugMessages : 1; // 0x980(0x01)
	char bEnableOnScreenDebugMessagesDisplay : 1; // 0x980(0x01)
	char bSuppressMapWarnings : 1; // 0x980(0x01)
	char bDisableAILogging : 1; // 0x980(0x01)
	char pad_980_4 : 4; // 0x980(0x01)
	char pad_981[0x3]; // 0x981(0x03)
	uint32_t bEnableVisualLogRecordingOnStart; // 0x984(0x04)
	char pad_988[0x4]; // 0x988(0x04)
	int32_t ScreenSaverInhibitorSemaphore; // 0x98c(0x04)
	char bLockReadOnlyLevels : 1; // 0x990(0x01)
	char pad_990_1 : 7; // 0x990(0x01)
	char pad_991[0x7]; // 0x991(0x07)
	struct FString ParticleEventManagerClassPath; // 0x998(0x10)
	float SelectionHighlightIntensity; // 0x9a8(0x04)
	float BSPSelectionHighlightIntensity; // 0x9ac(0x04)
	float SelectionHighlightIntensityBillboards; // 0x9b0(0x04)
	char pad_9B4[0x24c]; // 0x9b4(0x24c)
	struct TArray<struct FNetDriverDefinition> NetDriverDefinitions; // 0xc00(0x10)
	struct TArray<struct FString> ServerActors; // 0xc10(0x10)
	struct TArray<struct FString> RuntimeServerActors; // 0xc20(0x10)
	float NetErrorLogInterval; // 0xc30(0x04)
	char bStartedLoadMapMovie : 1; // 0xc34(0x01)
	char pad_C34_1 : 7; // 0xc34(0x01)
	char pad_C35[0x1b]; // 0xc35(0x1b)
	int32_t NextWorldContextHandle; // 0xc50(0x04)
	char pad_C54[0x194]; // 0xc54(0x194)
};

// Class Engine.LocalPlayer
// Size: 0x258 (Inherited: 0x48)
struct ULocalPlayer : UPlayer {
	char pad_48[0x28]; // 0x48(0x28)
	struct UGameViewportClient* ViewportClient; // 0x70(0x08)
	char pad_78[0x1c]; // 0x78(0x1c)
	enum class EAspectRatioAxisConstraint AspectRatioAxisConstraint; // 0x94(0x01)
	char pad_95[0x3]; // 0x95(0x03)
	struct APlayerController* PendingLevelPlayerControllerClass; // 0x98(0x08)
	char bSentSplitJoin : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x17]; // 0xa1(0x17)
	int32_t ControllerId; // 0xb8(0x04)
	char pad_BC[0x19c]; // 0xbc(0x19c)
};

// Class Engine.Subsystem
// Size: 0x30 (Inherited: 0x28)
struct USubsystem : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.LocalPlayerSubsystem
// Size: 0x30 (Inherited: 0x30)
struct ULocalPlayerSubsystem : USubsystem {
};

// Class Engine.SkeletalMeshComponent
// Size: 0xb70 (Inherited: 0x6e0)
struct USkeletalMeshComponent : USkinnedMeshComponent {
	struct UObject* AnimBlueprintGeneratedClass; // 0x6e0(0x08)
	struct UAnimInstance* AnimClass; // 0x6e8(0x08)
	struct UAnimInstance* AnimScriptInstance; // 0x6f0(0x08)
	struct UAnimInstance* PostprocessAnimInstance; // 0x6f8(0x08)
	struct FSingleAnimationPlayData AnimationData; // 0x700(0x18)
	char pad_718[0x10]; // 0x718(0x10)
	struct FVector RootBoneTranslation; // 0x728(0x0c)
	struct FVector LineCheckBoundsScale; // 0x734(0x0c)
	char pad_740[0x20]; // 0x740(0x20)
	struct TArray<struct UAnimInstance*> LinkedInstances; // 0x760(0x10)
	struct TArray<struct FTransform> CachedBoneSpaceTransforms; // 0x770(0x10)
	struct TArray<struct FTransform> CachedComponentSpaceTransforms; // 0x780(0x10)
	char pad_790[0x20]; // 0x790(0x20)
	float GlobalAnimRateScale; // 0x7b0(0x04)
	enum class EKinematicBonesUpdateToPhysics KinematicBonesUpdateType; // 0x7b4(0x01)
	enum class EPhysicsTransformUpdateMode PhysicsTransformUpdateMode; // 0x7b5(0x01)
	char pad_7B6[0x7]; // 0x7b6(0x07)
	enum class EAnimationMode AnimationMode; // 0x7bd(0x01)
	char pad_7BE[0x1]; // 0x7be(0x01)
	char bDisablePostProcessBlueprint : 1; // 0x7bf(0x01)
	char pad_7BF_1 : 1; // 0x7bf(0x01)
	char bUpdateOverlapsOnAnimationFinalize : 1; // 0x7bf(0x01)
	char pad_7BF_3 : 1; // 0x7bf(0x01)
	char bHasValidBodies : 1; // 0x7bf(0x01)
	char pad_7BF_5 : 1; // 0x7bf(0x01)
	char bBlendPhysics : 1; // 0x7bf(0x01)
	char bEnablePhysicsOnDedicatedServer : 1; // 0x7bf(0x01)
	char bUpdateJointsFromAnimation : 1; // 0x7c0(0x01)
	char bDisableClothSimulation : 1; // 0x7c0(0x01)
	char bDisableRigidBodyAnimNode : 1; // 0x7c0(0x01)
	char bAllowAnimCurveEvaluation : 1; // 0x7c0(0x01)
	char bDisableAnimCurves : 1; // 0x7c0(0x01)
	char pad_7C0_5 : 3; // 0x7c0(0x01)
	char bCollideWithEnvironment : 1; // 0x7c1(0x01)
	char bCollideWithAttachedChildren : 1; // 0x7c1(0x01)
	char bLocalSpaceSimulation : 1; // 0x7c1(0x01)
	char bResetAfterTeleport : 1; // 0x7c1(0x01)
	char pad_7C1_4 : 1; // 0x7c1(0x01)
	char bDeferKinematicBoneUpdate : 1; // 0x7c1(0x01)
	char bNoSkeletonUpdate : 1; // 0x7c1(0x01)
	char bPauseAnims : 1; // 0x7c1(0x01)
	char bUseRefPoseOnInitAnim : 1; // 0x7c2(0x01)
	char bEnablePerPolyCollision : 1; // 0x7c2(0x01)
	char bForceRefpose : 1; // 0x7c2(0x01)
	char bOnlyAllowAutonomousTickPose : 1; // 0x7c2(0x01)
	char bIsAutonomousTickPose : 1; // 0x7c2(0x01)
	char bOldForceRefPose : 1; // 0x7c2(0x01)
	char bShowPrePhysBones : 1; // 0x7c2(0x01)
	char bRequiredBonesUpToDate : 1; // 0x7c2(0x01)
	char bAnimTreeInitialised : 1; // 0x7c3(0x01)
	char bIncludeComponentLocationIntoBounds : 1; // 0x7c3(0x01)
	char bEnableLineCheckWithBounds : 1; // 0x7c3(0x01)
	char bUseBendingElements : 1; // 0x7c3(0x01)
	char bUseTetrahedralConstraints : 1; // 0x7c3(0x01)
	char bUseThinShellVolumeConstraints : 1; // 0x7c3(0x01)
	char bUseSelfCollisions : 1; // 0x7c3(0x01)
	char bUseContinuousCollisionDetection : 1; // 0x7c3(0x01)
	char bPropagateCurvesToSlaves : 1; // 0x7c4(0x01)
	char bSkipKinematicUpdateWhenInterpolating : 1; // 0x7c4(0x01)
	char bSkipBoundsUpdateWhenInterpolating : 1; // 0x7c4(0x01)
	char pad_7C4_3 : 1; // 0x7c4(0x01)
	char bNeedsQueuedAnimEventsDispatched : 1; // 0x7c4(0x01)
	char pad_7C4_5 : 3; // 0x7c4(0x01)
	char pad_7C5[0x1]; // 0x7c5(0x01)
	uint16_t CachedAnimCurveUidVersion; // 0x7c6(0x02)
	enum class EClothMassMode MassMode; // 0x7c8(0x01)
	char pad_7C9[0x3]; // 0x7c9(0x03)
	float UniformMass; // 0x7cc(0x04)
	float TotalMass; // 0x7d0(0x04)
	float Density; // 0x7d4(0x04)
	float MinPerParticleMass; // 0x7d8(0x04)
	float ClothBlendWeight; // 0x7dc(0x04)
	float EdgeStiffness; // 0x7e0(0x04)
	float BendingStiffness; // 0x7e4(0x04)
	float AreaStiffness; // 0x7e8(0x04)
	float VolumeStiffness; // 0x7ec(0x04)
	float StrainLimitingStiffness; // 0x7f0(0x04)
	float ShapeTargetStiffness; // 0x7f4(0x04)
	struct TArray<struct FName> DisallowedAnimCurves; // 0x7f8(0x10)
	struct UBodySetup* BodySetup; // 0x808(0x08)
	char pad_810[0x8]; // 0x810(0x08)
	struct FMulticastInlineDelegate OnConstraintBroken; // 0x818(0x10)
	struct UClothingSimulationFactory* ClothingSimulationFactory; // 0x828(0x08)
	char pad_830[0xc8]; // 0x830(0xc8)
	float TeleportDistanceThreshold; // 0x8f8(0x04)
	float TeleportRotationThreshold; // 0x8fc(0x04)
	char pad_900[0x8]; // 0x900(0x08)
	uint32_t LastPoseTickFrame; // 0x908(0x04)
	char pad_90C[0x54]; // 0x90c(0x54)
	struct UClothingSimulationInteractor* ClothingInteractor; // 0x960(0x08)
	char pad_968[0xc8]; // 0x968(0xc8)
	struct FMulticastInlineDelegate OnAnimInitialized; // 0xa30(0x10)
	char pad_A40[0x130]; // 0xa40(0x130)

	void UnlinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.UnlinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x3de1080
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace); // Function Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0ff0
	void ToggleDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0fd0
	void TermBodiesBelow(struct FName ParentBoneName); // Function Engine.SkeletalMeshComponent.TermBodiesBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0f50
	void SuspendClothingSimulation(); // Function Engine.SkeletalMeshComponent.SuspendClothingSimulation // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0f30
	void Stop(); // Function Engine.SkeletalMeshComponent.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0f10
	void SnapshotPose(struct FPoseSnapshot& Snapshot); // Function Engine.SkeletalMeshComponent.SnapshotPose // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3de0e40
	void SetUpdateAnimationInEditor(bool NewUpdateState); // Function Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor // (Final|Native|Public|BlueprintCallable) // @ game+0x124d5e0
	void SetTeleportRotationThreshold(float threshold); // Function Engine.SkeletalMeshComponent.SetTeleportRotationThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0dc0
	void SetTeleportDistanceThreshold(float threshold); // Function Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0d40
	void SetPosition(float InPos, bool bFireNotifies); // Function Engine.SkeletalMeshComponent.SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0c70
	void SetPlayRate(float Rate); // Function Engine.SkeletalMeshComponent.SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0bf0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight); // Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0b70
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, struct FName BoneName, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow // (Native|Public|BlueprintCallable) // @ game+0x3de0a60
	void SetMorphTarget(struct FName MorphTargetName, float Value, bool bRemoveZeroWeight); // Function Engine.SkeletalMeshComponent.SetMorphTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0950
	void SetEnablePhysicsBlending(bool bNewBlendPhysics); // Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending // (Final|Native|Public|BlueprintCallable) // @ game+0x3de08c0
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, struct FName BoneName, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x3de07b0
	void SetEnableBodyGravity(bool bEnableGravity, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetEnableBodyGravity // (Final|Native|Public|BlueprintCallable) // @ game+0x3de06f0
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess); // Function Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0660
	void SetDisableAnimCurves(bool bInDisableAnimCurves); // Function Engine.SkeletalMeshComponent.SetDisableAnimCurves // (Final|Native|Public|BlueprintCallable) // @ game+0x3de05d0
	void SetConstraintProfileForAll(struct FName ProfileName, bool bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfileForAll // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0500
	void SetConstraintProfile(struct FName JointName, struct FName ProfileName, bool bDefaultIfNotFound); // Function Engine.SkeletalMeshComponent.SetConstraintProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x3de03f0
	void SetClothMaxDistanceScale(float Scale); // Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0370
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, struct FName BoneName); // Function Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision // (Native|Public|BlueprintCallable) // @ game+0x3de02a0
	void SetAnimClass(struct UObject* NewClass); // Function Engine.SkeletalMeshComponent.SetAnimClass // (Native|Public|BlueprintCallable) // @ game+0x3de0110
	void SetAnimationMode(enum class EAnimationMode InAnimationMode); // Function Engine.SkeletalMeshComponent.SetAnimationMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3de0220
	void SetAnimation(struct UAnimationAsset* NewAnimToPlay); // Function Engine.SkeletalMeshComponent.SetAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x3de01a0
	void SetAngularLimits(struct FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle); // Function Engine.SkeletalMeshComponent.SetAngularLimits // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddffc0
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim); // Function Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddfdf0
	void SetAllowedAnimCurvesEvaluation(struct TArray<struct FName>& List, bool bAllow); // Function Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ddfec0
	void SetAllowAnimCurveEvaluation(bool bInAllow); // Function Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddfd60
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddfc40
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddfb20
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddf9c0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate); // Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddf930
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddf860
	void SetAllBodiesBelowSimulatePhysics(struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ddf740
	void SetAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ddf5d0
	void ResumeClothingSimulation(); // Function Engine.SkeletalMeshComponent.ResumeClothingSimulation // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddf5b0
	void ResetClothTeleportMode(); // Function Engine.SkeletalMeshComponent.ResetClothTeleportMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddf590
	void ResetAnimInstanceDynamics(enum class ETeleportType InTeleportType); // Function Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddf510
	void ResetAllowedAnimCurveEvaluation(); // Function Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddf4f0
	void ResetAllBodiesSimulatePhysics(); // Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddf4d0
	void PlayAnimation(struct UAnimationAsset* NewAnimToPlay, bool bLooping); // Function Engine.SkeletalMeshComponent.PlayAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddf400
	void Play(bool bLooping); // Function Engine.SkeletalMeshComponent.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddf370
	void OverrideAnimationData(struct UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate); // Function Engine.SkeletalMeshComponent.OverrideAnimationData // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddf1d0
	void LinkAnimGraphByTag(struct FName InTag, struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimGraphByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddf110
	void LinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.LinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddf090
	bool K2_GetClosestPointOnPhysicsAsset(struct FVector& WorldPosition, struct FVector& ClosestWorldPosition, struct FVector& Normal, struct FName& BoneName, float& Distance); // Function Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddee90
	bool IsPlaying(); // Function Engine.SkeletalMeshComponent.IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddee60
	bool IsClothingSimulationSuspended(); // Function Engine.SkeletalMeshComponent.IsClothingSimulationSuspended // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddee30
	bool IsBodyGravityEnabled(struct FName BoneName); // Function Engine.SkeletalMeshComponent.IsBodyGravityEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3ddeda0
	bool HasValidAnimationInstance(); // Function Engine.SkeletalMeshComponent.HasValidAnimationInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dded70
	float GetTeleportRotationThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportRotationThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dded40
	float GetTeleportDistanceThreshold(); // Function Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dded40
	struct FVector GetSkeletalCenterOfMass(); // Function Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dded00
	struct UAnimInstance* GetPostProcessInstance(); // Function Engine.SkeletalMeshComponent.GetPostProcessInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddecd0
	float GetPosition(); // Function Engine.SkeletalMeshComponent.GetPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddeca0
	float GetPlayRate(); // Function Engine.SkeletalMeshComponent.GetPlayRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddec70
	float GetMorphTarget(struct FName MorphTargetName); // Function Engine.SkeletalMeshComponent.GetMorphTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddebd0
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddeb40
	struct UAnimInstance* GetLinkedAnimLayerInstanceByClass(struct UAnimInstance* InClass); // Function Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ddeab0
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dde9c0
	struct UAnimInstance* GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dde930
	bool GetDisablePostProcessBlueprint(); // Function Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dde900
	bool GetDisableAnimCurves(); // Function Engine.SkeletalMeshComponent.GetDisableAnimCurves // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dde8d0
	void GetCurrentJointAngles(struct FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle); // Function Engine.SkeletalMeshComponent.GetCurrentJointAngles // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3dde750
	float GetClothMaxDistanceScale(); // Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dde6f0
	struct UClothingSimulationInteractor* GetClothingSimulationInteractor(); // Function Engine.SkeletalMeshComponent.GetClothingSimulationInteractor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dde720
	float GetBoneMass(struct FName BoneName, bool bScaleMass); // Function Engine.SkeletalMeshComponent.GetBoneMass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dde620
	struct UAnimInstance* GetAnimInstance(); // Function Engine.SkeletalMeshComponent.GetAnimInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dde5c0
	struct UObject* GetAnimClass(); // Function Engine.SkeletalMeshComponent.GetAnimClass // (Final|Native|Public) // @ game+0x3dde590
	enum class EAnimationMode GetAnimationMode(); // Function Engine.SkeletalMeshComponent.GetAnimationMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dde5f0
	bool GetAllowRigidBodyAnimNode(); // Function Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dde530
	bool GetAllowedAnimCurveEvaluate(); // Function Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dde560
	void ForceClothNextUpdateTeleportAndReset(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset // (Final|Native|Public|BlueprintCallable) // @ game+0x3dde510
	void ForceClothNextUpdateTeleport(); // Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport // (Final|Native|Public|BlueprintCallable) // @ game+0x3dde4f0
	struct FName FindConstraintBoneName(int32_t ConstraintIndex); // Function Engine.SkeletalMeshComponent.FindConstraintBoneName // (Final|Native|Public|BlueprintCallable) // @ game+0x3dde460
	void ClearMorphTargets(); // Function Engine.SkeletalMeshComponent.ClearMorphTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x3dde440
	void BreakConstraint(struct FVector Impulse, struct FVector HitLocation, struct FName InBoneName); // Function Engine.SkeletalMeshComponent.BreakConstraint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dde310
	void BindClothToMasterPoseComponent(); // Function Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3dde2f0
	void AllowAnimCurveEvaluation(struct FName NameOfCurve, bool bAllow); // Function Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation // (Final|Native|Public|BlueprintCallable) // @ game+0x3dde220
	void AddImpulseToAllBodiesBelow(struct FVector Impulse, struct FName BoneName, bool bVelChange, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dde0b0
	void AddForceToAllBodiesBelow(struct FVector Force, struct FName BoneName, bool bAccelChange, bool bIncludeSelf); // Function Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dddf40
	void AccumulateAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ddde20
};

// Class Engine.AnimInstance
// Size: 0x270 (Inherited: 0x28)
struct UAnimInstance : UObject {
	struct USkeleton* CurrentSkeleton; // 0x28(0x08)
	enum class ERootMotionMode RootMotionMode; // 0x30(0x01)
	char bUseMultiThreadedAnimationUpdate : 1; // 0x31(0x01)
	char bUsingCopyPoseFromMesh : 1; // 0x31(0x01)
	char pad_31_2 : 2; // 0x31(0x01)
	char bReceiveNotifiesFromLinkedInstances : 1; // 0x31(0x01)
	char bPropagateNotifiesToLinkedInstances : 1; // 0x31(0x01)
	char bQueueMontageEvents : 1; // 0x31(0x01)
	char pad_31_7 : 1; // 0x31(0x01)
	char pad_32[0x6]; // 0x32(0x06)
	struct FMulticastInlineDelegate OnMontageBlendingOut; // 0x38(0x10)
	struct FMulticastInlineDelegate OnMontageStarted; // 0x48(0x10)
	struct FMulticastInlineDelegate OnMontageEnded; // 0x58(0x10)
	struct FMulticastInlineDelegate OnAllMontageInstancesEnded; // 0x68(0x10)
	char pad_78[0x88]; // 0x78(0x88)
	struct FAnimNotifyQueue NotifyQueue; // 0x100(0x70)
	struct TArray<struct FAnimNotifyEvent> ActiveAnimNotifyState; // 0x170(0x10)
	char pad_180[0xf0]; // 0x180(0xf0)

	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic); // Function Engine.AnimInstance.UnlockAIResources // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1ed4890
	void UnlinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.AnimInstance.UnlinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x3c61850
	struct APawn* TryGetPawnOwner(); // Function Engine.AnimInstance.TryGetPawnOwner // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c61820
	void StopSlotAnimation(float InBlendOutTime, struct FName SlotNodeName); // Function Engine.AnimInstance.StopSlotAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x3c61750
	void SnapshotPose(struct FPoseSnapshot& Snapshot); // Function Engine.AnimInstance.SnapshotPose // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c61680
	void SetRootMotionMode(enum class ERootMotionMode Value); // Function Engine.AnimInstance.SetRootMotionMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3c61600
	void SetReceiveNotifiesFromLinkedInstances(bool bSet); // Function Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances // (Final|Native|Public|BlueprintCallable) // @ game+0x3c61570
	void SetPropagateNotifiesToLinkedInstances(bool bSet); // Function Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances // (Final|Native|Public|BlueprintCallable) // @ game+0x3c614e0
	void SetMorphTarget(struct FName MorphTargetName, float Value); // Function Engine.AnimInstance.SetMorphTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x3c61410
	void SavePoseSnapshot(struct FName SnapshotName); // Function Engine.AnimInstance.SavePoseSnapshot // (Native|Public|BlueprintCallable) // @ game+0x3c61380
	void ResetDynamics(enum class ETeleportType InTeleportType); // Function Engine.AnimInstance.ResetDynamics // (Final|Native|Public|BlueprintCallable) // @ game+0x3c61300
	struct UAnimMontage* PlaySlotAnimationAsDynamicMontage(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Function Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x3c610c0
	float PlaySlotAnimation(struct UAnimSequenceBase* Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount); // Function Engine.AnimInstance.PlaySlotAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x3c60f00
	void Montage_StopGroupByName(float InBlendOutTime, struct FName GroupName); // Function Engine.AnimInstance.Montage_StopGroupByName // (Final|Native|Public|BlueprintCallable) // @ game+0x3c60e30
	void Montage_Stop(float InBlendOutTime, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x3c60d60
	void Montage_SetPosition(struct UAnimMontage* Montage, float NewPosition); // Function Engine.AnimInstance.Montage_SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x3c60c90
	void Montage_SetPlayRate(struct UAnimMontage* Montage, float NewPlayRate); // Function Engine.AnimInstance.Montage_SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x3c60bc0
	void Montage_SetNextSection(struct FName SectionNameToChange, struct FName NextSection, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_SetNextSection // (Final|Native|Public|BlueprintCallable) // @ game+0x3c60ac0
	void Montage_Resume(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Resume // (Final|Native|Public|BlueprintCallable) // @ game+0x3c60a40
	float Montage_Play(struct UAnimMontage* MontageToPlay, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Function Engine.AnimInstance.Montage_Play // (Final|Native|Public|BlueprintCallable) // @ game+0x3c608b0
	void Montage_Pause(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_Pause // (Final|Native|Public|BlueprintCallable) // @ game+0x3c60830
	void Montage_JumpToSectionsEnd(struct FName SectionName, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_JumpToSectionsEnd // (Final|Native|Public|BlueprintCallable) // @ game+0x3c60770
	void Montage_JumpToSection(struct FName SectionName, struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_JumpToSection // (Final|Native|Public|BlueprintCallable) // @ game+0x3c606b0
	bool Montage_IsPlaying(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_IsPlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60620
	bool Montage_IsActive(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60590
	float Montage_GetPosition(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c604f0
	float Montage_GetPlayRate(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetPlayRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60450
	bool Montage_GetIsStopped(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetIsStopped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c603c0
	struct FName Montage_GetCurrentSection(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetCurrentSection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60330
	float Montage_GetBlendTime(struct UAnimMontage* Montage); // Function Engine.AnimInstance.Montage_GetBlendTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60290
	void LockAIResources(bool bLockMovement, bool LockAILogic); // Function Engine.AnimInstance.LockAIResources // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1ed4890
	void LinkAnimGraphByTag(struct FName InTag, struct UAnimInstance* InClass); // Function Engine.AnimInstance.LinkAnimGraphByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x3c601d0
	void LinkAnimClassLayers(struct UAnimInstance* InClass); // Function Engine.AnimInstance.LinkAnimClassLayers // (Final|Native|Public|BlueprintCallable) // @ game+0x3c60150
	bool IsSyncGroupBetweenMarkers(struct FName InSyncGroupName, struct FName PreviousMarker, struct FName NextMarker, bool bRespectMarkerOrder); // Function Engine.AnimInstance.IsSyncGroupBetweenMarkers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c60000
	bool IsPlayingSlotAnimation(struct UAnimSequenceBase* Asset, struct FName SlotNodeName); // Function Engine.AnimInstance.IsPlayingSlotAnimation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5ff40
	bool IsAnyMontagePlaying(); // Function Engine.AnimInstance.IsAnyMontagePlaying // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5ff10
	bool HasMarkerBeenHitThisFrame(struct FName SyncGroup, struct FName MarkerName); // Function Engine.AnimInstance.HasMarkerBeenHitThisFrame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5fe50
	bool GetTimeToClosestMarker(struct FName SyncGroup, struct FName MarkerName, float& OutMarkerTime); // Function Engine.AnimInstance.GetTimeToClosestMarker // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5fd40
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(struct FName InSyncGroupName); // Function Engine.AnimInstance.GetSyncGroupPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5fca0
	float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5fbe0
	float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5fb20
	float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTimeFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5fa60
	float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5f9a0
	float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetRelevantAnimLength // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5f8e0
	bool GetReceiveNotifiesFromLinkedInstances(); // Function Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5f8b0
	bool GetPropagateNotifiesToLinkedInstances(); // Function Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5f880
	struct USkeletalMeshComponent* GetOwningComponent(); // Function Engine.AnimInstance.GetOwningComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5f850
	struct AActor* GetOwningActor(); // Function Engine.AnimInstance.GetOwningActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5f820
	struct UAnimInstance* GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5f790
	struct UAnimInstance* GetLinkedAnimLayerInstanceByClass(struct UAnimInstance* InClass); // Function Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5f700
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<struct UAnimInstance*>& OutLinkedInstances); // Function Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5f610
	struct UAnimInstance* GetLinkedAnimGraphInstanceByTag(struct FName InTag); // Function Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5f580
	float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5f4c0
	float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionTimeElapsed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5f400
	float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex); // Function Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5f340
	float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex); // Function Engine.AnimInstance.GetInstanceStateWeight // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5f280
	float GetInstanceMachineWeight(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceMachineWeight // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5f1f0
	float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex); // Function Engine.AnimInstance.GetInstanceCurrentStateElapsedTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5f160
	float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5f0d0
	float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5f040
	float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5efb0
	float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5ef20
	float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex); // Function Engine.AnimInstance.GetInstanceAssetPlayerLength // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5ee90
	float GetCurveValue(struct FName CurveName); // Function Engine.AnimInstance.GetCurveValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5edf0
	struct FName GetCurrentStateName(int32_t MachineIndex); // Function Engine.AnimInstance.GetCurrentStateName // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c5ed60
	struct UAnimMontage* GetCurrentActiveMontage(); // Function Engine.AnimInstance.GetCurrentActiveMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5ed30
	void GetAllCurveNames(struct TArray<struct FName>& OutNames); // Function Engine.AnimInstance.GetAllCurveNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5ec80
	void GetActiveCurveNames(enum class EAnimCurveType CurveType, struct TArray<struct FName>& OutNames); // Function Engine.AnimInstance.GetActiveCurveNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5eb90
	void ClearMorphTargets(); // Function Engine.AnimInstance.ClearMorphTargets // (Final|Native|Public|BlueprintCallable) // @ game+0x3c5eb70
	float CalculateDirection(struct FVector& Velocity, struct FRotator& BaseRotation); // Function Engine.AnimInstance.CalculateDirection // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c5ea70
	void BlueprintUpdateAnimation(float DeltaTimeX); // Function Engine.AnimInstance.BlueprintUpdateAnimation // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void BlueprintPostEvaluateAnimation(); // Function Engine.AnimInstance.BlueprintPostEvaluateAnimation // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void BlueprintLinkedAnimationLayersInitialized(); // Function Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void BlueprintInitializeAnimation(); // Function Engine.AnimInstance.BlueprintInitializeAnimation // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void BlueprintBeginPlay(); // Function Engine.AnimInstance.BlueprintBeginPlay // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
};

// Class Engine.ReplicationDriver
// Size: 0x28 (Inherited: 0x28)
struct UReplicationDriver : UObject {
};

// Class Engine.ReplicationConnectionDriver
// Size: 0x28 (Inherited: 0x28)
struct UReplicationConnectionDriver : UObject {
};

// Class Engine.Exporter
// Size: 0x78 (Inherited: 0x28)
struct UExporter : UObject {
	struct UObject* SupportedClass; // 0x28(0x08)
	struct UObject* ExportRootScope; // 0x30(0x08)
	struct TArray<struct FString> FormatExtension; // 0x38(0x10)
	struct TArray<struct FString> FormatDescription; // 0x48(0x10)
	int32_t PreferredFormatIndex; // 0x58(0x04)
	int32_t TextIndent; // 0x5c(0x04)
	char bText : 1; // 0x60(0x01)
	char bSelectedOnly : 1; // 0x60(0x01)
	char bForceFileOperations : 1; // 0x60(0x01)
	char pad_60_3 : 5; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct UAssetExportTask* ExportTask; // 0x68(0x08)
	char pad_70[0x8]; // 0x70(0x08)

	bool ScriptRunAssetExportTask(struct UAssetExportTask* Task); // Function Engine.Exporter.ScriptRunAssetExportTask // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	bool RunAssetExportTasks(struct TArray<struct UAssetExportTask*>& ExportTasks); // Function Engine.Exporter.RunAssetExportTasks // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cd05d0
	bool RunAssetExportTask(struct UAssetExportTask* Task); // Function Engine.Exporter.RunAssetExportTask // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x17d8920
};

// Class Engine.LevelScriptActor
// Size: 0x328 (Inherited: 0x320)
struct ALevelScriptActor : AActor {
	char bInputEnabled : 1; // 0x320(0x01)
	char pad_320_1 : 7; // 0x320(0x01)
	char pad_321[0x7]; // 0x321(0x07)

	void WorldOriginLocationChanged(struct FIntVector OldOriginLocation, struct FIntVector NewOriginLocation); // Function Engine.LevelScriptActor.WorldOriginLocationChanged // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x23a3b60
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Function Engine.LevelScriptActor.SetCinematicMode // (Native|Public|BlueprintCallable) // @ game+0x3d5a9d0
	bool RemoteEvent(struct FName EventName); // Function Engine.LevelScriptActor.RemoteEvent // (Native|Public|BlueprintCallable) // @ game+0x3d5a480
	void LevelReset(); // Function Engine.LevelScriptActor.LevelReset // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x23a3b60
};

// Class Engine.FXSystemComponent
// Size: 0x4a0 (Inherited: 0x4a0)
struct UFXSystemComponent : UPrimitiveComponent {

	void SetVectorParameter(struct FName ParameterName, struct FVector Param); // Function Engine.FXSystemComponent.SetVectorParameter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d9d120
	void SetUseAutoManageAttachment(bool bAutoManage); // Function Engine.FXSystemComponent.SetUseAutoManageAttachment // (Native|Public|BlueprintCallable) // @ game+0x3d9d090
	void SetFloatParameter(struct FName ParameterName, float Param); // Function Engine.FXSystemComponent.SetFloatParameter // (Native|Public|BlueprintCallable) // @ game+0x3d9cd30
	void SetEmitterEnable(struct FName EmitterName, bool bNewEnableState); // Function Engine.FXSystemComponent.SetEmitterEnable // (Native|Public|BlueprintCallable) // @ game+0x3d9cc60
	void SetColorParameter(struct FName ParameterName, struct FLinearColor Param); // Function Engine.FXSystemComponent.SetColorParameter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d9cb90
	void SetBoolParameter(struct FName ParameterName, bool Param); // Function Engine.FXSystemComponent.SetBoolParameter // (Native|Public|BlueprintCallable) // @ game+0x3d9cac0
	void SetAutoAttachmentParameters(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule); // Function Engine.FXSystemComponent.SetAutoAttachmentParameters // (Native|Public|BlueprintCallable) // @ game+0x3d9c230
	void SetActorParameter(struct FName ParameterName, struct AActor* Param); // Function Engine.FXSystemComponent.SetActorParameter // (Native|Public|BlueprintCallable) // @ game+0x3d9c040
	void ReleaseToPool(); // Function Engine.FXSystemComponent.ReleaseToPool // (Native|Public|BlueprintCallable) // @ game+0x3d9c020
	struct UFXSystemAsset* GetFXSystemAsset(); // Function Engine.FXSystemComponent.GetFXSystemAsset // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d9bf20
};

// Class Engine.FXSystemAsset
// Size: 0x30 (Inherited: 0x28)
struct UFXSystemAsset : UObject {
	uint32_t MaxPoolSize; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Engine.AnimNotify
// Size: 0x38 (Inherited: 0x28)
struct UAnimNotify : UObject {
	char pad_28[0x10]; // 0x28(0x10)

	bool Received_Notify(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Engine.AnimNotify.Received_Notify // (Event|Public|BlueprintEvent|Const) // @ game+0x23a3b60
	struct FString GetNotifyName(); // Function Engine.AnimNotify.GetNotifyName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x34e33c0
};

// Class Engine.AnimNotifyState
// Size: 0x30 (Inherited: 0x28)
struct UAnimNotifyState : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	bool Received_NotifyTick(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, float FrameDeltaTime); // Function Engine.AnimNotifyState.Received_NotifyTick // (Event|Public|BlueprintEvent|Const) // @ game+0x23a3b60
	bool Received_NotifyEnd(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Engine.AnimNotifyState.Received_NotifyEnd // (Event|Public|BlueprintEvent|Const) // @ game+0x23a3b60
	bool Received_NotifyBegin(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation, float TotalDuration); // Function Engine.AnimNotifyState.Received_NotifyBegin // (Event|Public|BlueprintEvent|Const) // @ game+0x23a3b60
	struct FString GetNotifyName(); // Function Engine.AnimNotifyState.GetNotifyName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x34e33c0
};

// Class Engine.Brush
// Size: 0x358 (Inherited: 0x320)
struct ABrush : AActor {
	enum class EBrushType BrushType; // 0x320(0x01)
	char pad_321[0x3]; // 0x321(0x03)
	struct FColor BrushColor; // 0x324(0x04)
	int32_t PolyFlags; // 0x328(0x04)
	char bColored : 1; // 0x32c(0x01)
	char bSolidWhenSelected : 1; // 0x32c(0x01)
	char bPlaceableFromClassBrowser : 1; // 0x32c(0x01)
	char bNotForClientOrServer : 1; // 0x32c(0x01)
	char pad_32C_4 : 4; // 0x32c(0x01)
	char pad_32D[0x3]; // 0x32d(0x03)
	struct UModel* Brush; // 0x330(0x08)
	struct UBrushComponent* BrushComponent; // 0x338(0x08)
	char bInManipulation : 1; // 0x340(0x01)
	char pad_340_1 : 7; // 0x340(0x01)
	char pad_341[0x7]; // 0x341(0x07)
	struct TArray<struct FGeomSelection> SavedSelections; // 0x348(0x10)
};

// Class Engine.Volume
// Size: 0x358 (Inherited: 0x358)
struct AVolume : ABrush {
};

// Class Engine.MKWorldEx
// Size: 0x40 (Inherited: 0x28)
struct UMKWorldEx : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct UWorld* SelfWorld; // 0x38(0x08)
};

// Class Engine.World
// Size: 0x770 (Inherited: 0x40)
struct UWorld : UMKWorldEx {
	char pad_40[0x8]; // 0x40(0x08)
	struct ULevel* PersistentLevel; // 0x48(0x08)
	struct UNetDriver* NetDriver; // 0x50(0x08)
	struct ULineBatchComponent* LineBatcher; // 0x58(0x08)
	struct ULineBatchComponent* PersistentLineBatcher; // 0x60(0x08)
	struct ULineBatchComponent* ForegroundLineBatcher; // 0x68(0x08)
	struct AGameNetworkManager* NetworkManager; // 0x70(0x08)
	struct UPhysicsCollisionHandler* PhysicsCollisionHandler; // 0x78(0x08)
	struct TArray<struct UObject*> ExtraReferencedObjects; // 0x80(0x10)
	struct TArray<struct UObject*> PerModuleDataObjects; // 0x90(0x10)
	struct TArray<struct AActor*> LevelSequenceActors; // 0xa0(0x10)
	struct TArray<struct ULevelStreaming*> StreamingLevels; // 0xb0(0x10)
	struct FStreamingLevelsToConsider StreamingLevelsToConsider; // 0xc0(0x48)
	char pad_108[0x18]; // 0x108(0x18)
	struct FString StreamingLevelsPrefix; // 0x120(0x10)
	struct ULevel* CurrentLevelPendingVisibility; // 0x130(0x08)
	struct ULevel* CurrentLevelPendingInvisibility; // 0x138(0x08)
	struct UDemoNetDriver* DemoNetDriver; // 0x140(0x08)
	struct AParticleEventManager* MyParticleEventManager; // 0x148(0x08)
	struct APhysicsVolume* DefaultPhysicsVolume; // 0x150(0x08)
	char pad_158[0x16]; // 0x158(0x16)
	char pad_16E_0 : 2; // 0x16e(0x01)
	char bAreConstraintsDirty : 1; // 0x16e(0x01)
	char pad_16E_3 : 5; // 0x16e(0x01)
	char pad_16F[0x1]; // 0x16f(0x01)
	struct UNavigationSystemBase* NavigationSystem; // 0x170(0x08)
	struct AGameModeBase* AuthorityGameMode; // 0x178(0x08)
	struct AGameStateBase* GameState; // 0x180(0x08)
	struct UAISystemBase* AISystem; // 0x188(0x08)
	struct UAvoidanceManager* AvoidanceManager; // 0x190(0x08)
	struct TArray<struct ULevel*> Levels; // 0x198(0x10)
	struct TArray<struct FLevelCollection> LevelCollections; // 0x1a8(0x10)
	char pad_1B8[0x20]; // 0x1b8(0x20)
	struct UGameInstance* OwningGameInstance; // 0x1d8(0x08)
	struct TArray<struct UMaterialParameterCollectionInstance*> ParameterCollectionInstances; // 0x1e0(0x10)
	struct UCanvas* CanvasForRenderingToTarget; // 0x1f0(0x08)
	struct UCanvas* CanvasForDrawMaterialToRenderTarget; // 0x1f8(0x08)
	char pad_200[0x50]; // 0x200(0x50)
	struct TArray<struct UActorComponent*> ComponentsThatNeedEndOfFrameUpdate; // 0x250(0x10)
	struct TArray<struct UActorComponent*> ComponentsThatNeedEndOfFrameUpdate_OnGameThread; // 0x260(0x10)
	char pad_270[0x340]; // 0x270(0x340)
	struct UWorldComposition* WorldComposition; // 0x5b0(0x08)
	char pad_5B8[0x98]; // 0x5b8(0x98)
	struct FWorldPSCPool PSCPool; // 0x650(0x58)
	char pad_6A8[0xc8]; // 0x6a8(0xc8)

	struct AWorldSettings* K2_GetWorldSettings(); // Function Engine.World.K2_GetWorldSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x3e1b100
	void HandleTimelineScrubbed(); // Function Engine.World.HandleTimelineScrubbed // (Final|Native|Public) // @ game+0x3e1b0e0
};

// Class Engine.InterpTrack
// Size: 0x70 (Inherited: 0x28)
struct UInterpTrack : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct TArray<struct UInterpTrack*> SubTracks; // 0x38(0x10)
	struct UInterpTrackInst* TrackInstClass; // 0x48(0x08)
	enum class ETrackActiveCondition ActiveCondition; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct FString TrackTitle; // 0x58(0x10)
	char bOnePerGroup : 1; // 0x68(0x01)
	char bDirGroupOnly : 1; // 0x68(0x01)
	char bDisableTrack : 1; // 0x68(0x01)
	char bIsSelected : 1; // 0x68(0x01)
	char bIsAnimControlTrack : 1; // 0x68(0x01)
	char bSubTrackOnly : 1; // 0x68(0x01)
	char bVisible : 1; // 0x68(0x01)
	char bIsRecording : 1; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.InterpTrackVectorBase
// Size: 0x90 (Inherited: 0x70)
struct UInterpTrackVectorBase : UInterpTrack {
	struct FInterpCurveVector VectorTrack; // 0x70(0x18)
	float CurveTension; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class Engine.InterpTrackFloatBase
// Size: 0x90 (Inherited: 0x70)
struct UInterpTrackFloatBase : UInterpTrack {
	struct FInterpCurveFloat FloatTrack; // 0x70(0x18)
	float CurveTension; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class Engine.InterpTrackInst
// Size: 0x28 (Inherited: 0x28)
struct UInterpTrackInst : UObject {
};

// Class Engine.DataAsset
// Size: 0x30 (Inherited: 0x28)
struct UDataAsset : UObject {
	struct UDataAsset* NativeClass; // 0x28(0x08)
};

// Class Engine.MaterialExpression
// Size: 0x40 (Inherited: 0x28)
struct UMaterialExpression : UObject {
	struct UMaterial* Material; // 0x28(0x08)
	struct UMaterialFunction* Function; // 0x30(0x08)
	char bIsParameterExpression : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.MaterialExpressionTextureBase
// Size: 0x50 (Inherited: 0x40)
struct UMaterialExpressionTextureBase : UMaterialExpression {
	struct UTexture* Texture; // 0x40(0x08)
	enum class EMaterialSamplerType SamplerType; // 0x48(0x01)
	char IsDefaultMeshpaintTexture : 1; // 0x49(0x01)
	char pad_49_1 : 7; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
};

// Class Engine.MaterialExpressionTextureSample
// Size: 0xd0 (Inherited: 0x50)
struct UMaterialExpressionTextureSample : UMaterialExpressionTextureBase {
	struct FExpressionInput Coordinates; // 0x50(0x0c)
	char pad_5C[0x8]; // 0x5c(0x08)
	struct FExpressionInput TextureObject; // 0x64(0x0c)
	char pad_70[0x8]; // 0x70(0x08)
	struct FExpressionInput MipValue; // 0x78(0x0c)
	char pad_84[0x8]; // 0x84(0x08)
	struct FExpressionInput CoordinatesDX; // 0x8c(0x0c)
	char pad_98[0x8]; // 0x98(0x08)
	struct FExpressionInput CoordinatesDY; // 0xa0(0x0c)
	char pad_AC[0x8]; // 0xac(0x08)
	struct FExpressionInput AutomaticViewMipBiasValue; // 0xb4(0x0c)
	char pad_C0[0x8]; // 0xc0(0x08)
	enum class ETextureMipValueMode MipValueMode; // 0xc8(0x01)
	enum class ESamplerSourceMode SamplerSource; // 0xc9(0x01)
	char AutomaticViewMipBias : 1; // 0xca(0x01)
	char pad_CA_1 : 7; // 0xca(0x01)
	char ConstCoordinate; // 0xcb(0x01)
	int32_t ConstMipValue; // 0xcc(0x04)
};

// Class Engine.MaterialExpressionTextureSampleParameter
// Size: 0xf0 (Inherited: 0xd0)
struct UMaterialExpressionTextureSampleParameter : UMaterialExpressionTextureSample {
	struct FName ParameterName; // 0xd0(0x08)
	struct FGuid ExpressionGUID; // 0xd8(0x10)
	struct FName Group; // 0xe8(0x08)
};

// Class Engine.MaterialExpressionTextureSampleParameter2D
// Size: 0xf0 (Inherited: 0xf0)
struct UMaterialExpressionTextureSampleParameter2D : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MKPawnEx
// Size: 0x330 (Inherited: 0x320)
struct AMKPawnEx : AActor {
	char pad_320[0x8]; // 0x320(0x08)
	struct APawn* SelfPawn; // 0x328(0x08)

	void OnChangedViewMode(); // Function Engine.MKPawnEx.OnChangedViewMode // (Native|Event|Public|BlueprintEvent) // @ game+0x1e477f0
};

// Class Engine.Pawn
// Size: 0x390 (Inherited: 0x330)
struct APawn : AMKPawnEx {
	char pad_330[0x8]; // 0x330(0x08)
	char bUseControllerRotationPitch : 1; // 0x338(0x01)
	char bUseControllerRotationYaw : 1; // 0x338(0x01)
	char bUseControllerRotationRoll : 1; // 0x338(0x01)
	char bCanAffectNavigationGeneration : 1; // 0x338(0x01)
	char pad_338_4 : 4; // 0x338(0x01)
	char pad_339[0x3]; // 0x339(0x03)
	float BaseEyeHeight; // 0x33c(0x04)
	enum class EAutoReceiveInput AutoPossessPlayer; // 0x340(0x01)
	enum class EAutoPossessAI AutoPossessAI; // 0x341(0x01)
	uint16_t RemoteViewPitch; // 0x342(0x02)
	uint16_t RemoteViewYaw; // 0x344(0x02)
	char pad_346[0x2]; // 0x346(0x02)
	struct AController* AIControllerClass; // 0x348(0x08)
	struct APlayerState* PlayerState; // 0x350(0x08)
	char pad_358[0x8]; // 0x358(0x08)
	struct AController* LastHitBy; // 0x360(0x08)
	struct AController* Controller; // 0x368(0x08)
	char pad_370[0x4]; // 0x370(0x04)
	struct FVector ControlInputVector; // 0x374(0x0c)
	struct FVector LastControlInputVector; // 0x380(0x0c)
	char pad_38C[0x4]; // 0x38c(0x04)

	void SpawnDefaultController(); // Function Engine.Pawn.SpawnDefaultController // (Native|Public|BlueprintCallable) // @ game+0x3da1870
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate); // Function Engine.Pawn.SetCanAffectNavigationGeneration // (Final|Native|Public|BlueprintCallable) // @ game+0x3da16a0
	void ReceiveUnpossessed(struct AController* OldController); // Function Engine.Pawn.ReceiveUnpossessed // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceivePossessed(struct AController* NewController); // Function Engine.Pawn.ReceivePossessed // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void PawnMakeNoise(float Loudness, struct FVector NoiseLocation, bool bUseNoiseMakerLocation, struct AActor* NoiseMaker); // Function Engine.Pawn.PawnMakeNoise // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da1530
	void OnRep_PlayerState(); // Function Engine.Pawn.OnRep_PlayerState // (Native|Public) // @ game+0x1f143b0
	void OnRep_Controller(); // Function Engine.Pawn.OnRep_Controller // (Native|Public) // @ game+0x3cad420
	void LaunchPawn(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Pawn.LaunchPawn // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da12f0
	struct FVector K2_GetMovementInputVector(); // Function Engine.Pawn.K2_GetMovementInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da1160
	bool IsPlayerControlled(); // Function Engine.Pawn.IsPlayerControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da12c0
	bool IsPawnControlled(); // Function Engine.Pawn.IsPawnControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da1290
	bool IsMoveInputIgnored(); // Function Engine.Pawn.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da1230
	bool IsLocallyControlled(); // Function Engine.Pawn.IsLocallyControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da1200
	bool IsControlled(); // Function Engine.Pawn.IsControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da11d0
	bool IsBotControlled(); // Function Engine.Pawn.IsBotControlled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da11a0
	struct FVector GetPendingMovementInputVector(); // Function Engine.Pawn.GetPendingMovementInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da1160
	struct FVector GetNavAgentLocation(); // Function Engine.Pawn.GetNavAgentLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da10a0
	struct UPawnMovementComponent* GetMovementComponent(); // Function Engine.Pawn.GetMovementComponent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da1070
	struct AActor* GetMovementBaseActor(struct APawn* Pawn); // Function Engine.Pawn.GetMovementBaseActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3da0ff0
	struct FVector GetLastMovementInputVector(); // Function Engine.Pawn.GetLastMovementInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da0fb0
	struct FRotator GetControlRotation(); // Function Engine.Pawn.GetControlRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da0f10
	struct AController* GetController(); // Function Engine.Pawn.GetController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da0f50
	struct FRotator GetBaseAimRotation(); // Function Engine.Pawn.GetBaseAimRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da0e10
	void DetachFromControllerPendingDestroy(); // Function Engine.Pawn.DetachFromControllerPendingDestroy // (Native|Public|BlueprintCallable) // @ game+0x1f204b0
	struct FVector ConsumeMovementInputVector(); // Function Engine.Pawn.ConsumeMovementInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da0dd0
	void AddMovementInput(struct FVector WorldDirection, float ScaleValue, bool bForce); // Function Engine.Pawn.AddMovementInput // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da0910
	void AddControllerYawInput(float Val); // Function Engine.Pawn.AddControllerYawInput // (Native|Public|BlueprintCallable) // @ game+0x3da07b0
	void AddControllerRollInput(float Val); // Function Engine.Pawn.AddControllerRollInput // (Native|Public|BlueprintCallable) // @ game+0x3da0730
	void AddControllerPitchInput(float Val); // Function Engine.Pawn.AddControllerPitchInput // (Native|Public|BlueprintCallable) // @ game+0x3da06b0
};

// Class Engine.MKCharacterEx
// Size: 0x3a8 (Inherited: 0x390)
struct AMKCharacterEx : APawn {
	char pad_390[0x8]; // 0x390(0x08)
	struct ACharacter* SelfCharacter; // 0x398(0x08)
	char pad_3A0[0x8]; // 0x3a0(0x08)
};

// Class Engine.Character
// Size: 0x5f0 (Inherited: 0x3a8)
struct ACharacter : AMKCharacterEx {
	struct USkeletalMeshComponent* Mesh; // 0x3a8(0x08)
	struct UCharacterMovementComponent* CharacterMovement; // 0x3b0(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x3b8(0x08)
	char pad_3C0[0x8]; // 0x3c0(0x08)
	struct FBasedMovementInfo BasedMovement; // 0x3c8(0x30)
	struct FBasedMovementInfo ReplicatedBasedMovement; // 0x3f8(0x30)
	float AnimRootMotionTranslationScale; // 0x428(0x04)
	struct FVector BaseTranslationOffset; // 0x42c(0x0c)
	char pad_438[0x8]; // 0x438(0x08)
	struct FQuat BaseRotationOffset; // 0x440(0x10)
	float ReplicatedServerLastTransformUpdateTimeStamp; // 0x450(0x04)
	float ReplayLastTransformUpdateTimeStamp; // 0x454(0x04)
	char ReplicatedMovementMode; // 0x458(0x01)
	bool bInBaseReplication; // 0x459(0x01)
	char pad_45A[0x2]; // 0x45a(0x02)
	float CrouchedEyeHeight; // 0x45c(0x04)
	char bIsCrouched : 1; // 0x460(0x01)
	char bProxyIsJumpForceApplied : 1; // 0x460(0x01)
	char bPressedJump : 1; // 0x460(0x01)
	char bClientUpdating : 1; // 0x460(0x01)
	char bClientWasFalling : 1; // 0x460(0x01)
	char bClientResimulateRootMotion : 1; // 0x460(0x01)
	char bClientResimulateRootMotionSources : 1; // 0x460(0x01)
	char bSimGravityDisabled : 1; // 0x460(0x01)
	char bClientCheckEncroachmentOnNetUpdate : 1; // 0x461(0x01)
	char bServerMoveIgnoreRootMotion : 1; // 0x461(0x01)
	char bWasJumping : 1; // 0x461(0x01)
	char pad_461_3 : 5; // 0x461(0x01)
	char pad_462[0x2]; // 0x462(0x02)
	float JumpKeyHoldTime; // 0x464(0x04)
	float JumpForceTimeRemaining; // 0x468(0x04)
	float ProxyJumpForceStartedTime; // 0x46c(0x04)
	float JumpMaxHoldTime; // 0x470(0x04)
	int32_t JumpMaxCount; // 0x474(0x04)
	int32_t JumpCurrentCount; // 0x478(0x04)
	char pad_47C[0x4]; // 0x47c(0x04)
	struct FMulticastInlineDelegate OnReachedJumpApex; // 0x480(0x10)
	char pad_490[0x10]; // 0x490(0x10)
	struct FMulticastInlineDelegate MovementModeChangedDelegate; // 0x4a0(0x10)
	struct FMulticastInlineDelegate OnCharacterMovementUpdated; // 0x4b0(0x10)
	struct FRootMotionSourceGroup SavedRootMotion; // 0x4c0(0x38)
	char pad_4F8[0x8]; // 0x4f8(0x08)
	struct FRootMotionMovementParams ClientRootMotionParams; // 0x500(0x40)
	struct TArray<struct FSimulatedRootMotionReplicatedMove> RootMotionRepMoves; // 0x540(0x10)
	struct FRepRootMotionMontage RepRootMotion; // 0x550(0x98)
	char pad_5E8[0x8]; // 0x5e8(0x08)

	void UnCrouch(bool bClientSimulation); // Function Engine.Character.UnCrouch // (Native|Public|BlueprintCallable) // @ game+0x20225f0
	void StopJumping(); // Function Engine.Character.StopJumping // (Native|Public|BlueprintCallable) // @ game+0x2023d00
	void StopAnimMontage(struct UAnimMontage* AnimMontage); // Function Engine.Character.StopAnimMontage // (Native|Public|BlueprintCallable) // @ game+0x3ca22b0
	void ServerMoveOld(float OldTimeStamp, struct FVector_NetQuantize10 OldAccel, struct FVector_NetQuantize10 InVel, char OldMoveFlags); // Function Engine.Character.ServerMoveOld // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x3ca1e40
	void ServerMoveNoBase(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize10 InVel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Function Engine.Character.ServerMoveNoBase // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x3ca1b50
	void ServerMoveDualNoBase(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, struct FVector_NetQuantize10 InVel, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Function Engine.Character.ServerMoveDualNoBase // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x3ca1710
	void ServerMoveDualHybridRootMotion(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, struct FVector_NetQuantize10 InVel, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMoveDualHybridRootMotion // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x3ca1260
	void ServerMoveDual(float TimeStamp0, struct FVector_NetQuantize10 InAccel0, struct FVector_NetQuantize10 InVel, char PendingFlags, uint32_t View0, float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMoveDual // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x3ca0db0
	void ServerMove(float Timestamp, struct FVector_NetQuantize10 InAccel, struct FVector_NetQuantize10 InVel, struct FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, struct UPrimitiveComponent* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // Function Engine.Character.ServerMove // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x3ca0a30
	void RootMotionDebugClientPrintOnScreen(struct FString inString); // Function Engine.Character.RootMotionDebugClientPrintOnScreen // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3ca0980
	float PlayAnimMontage(struct UAnimMontage* AnimMontage, float InPlayRate, struct FName StartSectionName); // Function Engine.Character.PlayAnimMontage // (Native|Public|BlueprintCallable) // @ game+0x3ca0870
	void OnWalkingOffLedge(struct FVector& PreviousFloorImpactNormal, struct FVector& PreviousFloorContactNormal, struct FVector& PreviousLocation, float TimeDelta); // Function Engine.Character.OnWalkingOffLedge // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3ca06d0
	void OnRep_RootMotion(); // Function Engine.Character.OnRep_RootMotion // (Final|Native|Public) // @ game+0x3ca06b0
	void OnRep_ReplicatedBasedMovement(); // Function Engine.Character.OnRep_ReplicatedBasedMovement // (Native|Public) // @ game+0x3ca0690
	void OnRep_ReplayLastTransformUpdateTimeStamp(); // Function Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp // (Final|Native|Public) // @ game+0x3ca0670
	void OnRep_IsCrouched(); // Function Engine.Character.OnRep_IsCrouched // (Native|Public) // @ game+0x3ca0650
	void OnLaunched(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Character.OnLaunched // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x23a3b60
	void OnLanded(struct FHitResult& Hit); // Function Engine.Character.OnLanded // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x23a3b60
	void OnJumped(); // Function Engine.Character.OnJumped // (Native|Event|Public|BlueprintEvent) // @ game+0x3ca0630
	void LaunchCharacter(struct FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Function Engine.Character.LaunchCharacter // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3ca0510
	void K2_UpdateCustomMovement(float DeltaTime); // Function Engine.Character.K2_UpdateCustomMovement // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.Character.K2_OnStartCrouch // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void K2_OnMovementModeChanged(enum class EMovementMode PrevMovementMode, enum class EMovementMode NewMovementMode, char PrevCustomMode, char NewCustomMode); // Function Engine.Character.K2_OnMovementModeChanged // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Function Engine.Character.K2_OnEndCrouch // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void Jump(); // Function Engine.Character.Jump // (Native|Public|BlueprintCallable) // @ game+0x2022680
	bool IsPlayingRootMotion(); // Function Engine.Character.IsPlayingRootMotion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca04e0
	bool IsPlayingNetworkedRootMotionMontage(); // Function Engine.Character.IsPlayingNetworkedRootMotionMontage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca04b0
	bool IsJumpProvidingForce(); // Function Engine.Character.IsJumpProvidingForce // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2022470
	bool HasAnyRootMotion(); // Function Engine.Character.HasAnyRootMotion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca0480
	struct UAnimMontage* GetCurrentMontage(); // Function Engine.Character.GetCurrentMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x3c9fdf0
	struct FVector GetBaseTranslationOffset(); // Function Engine.Character.GetBaseTranslationOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c9fdc0
	struct FRotator GetBaseRotationOffsetRotator(); // Function Engine.Character.GetBaseRotationOffsetRotator // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c9fd70
	float GetAnimRootMotionTranslationScale(); // Function Engine.Character.GetAnimRootMotionTranslationScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c9fd40
	void ForceLastAckMove(); // Function Engine.Character.ForceLastAckMove // (Net|Native|Event|Public|NetClient) // @ game+0x3c9fd20
	void Crouch(bool bClientSimulation); // Function Engine.Character.Crouch // (Native|Public|BlueprintCallable) // @ game+0x3c9fc90
	void ClientVeryShortAdjustPosition(float Timestamp, struct FVector NewLoc, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientVeryShortAdjustPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x3c9f940
	void ClientCheatWalk(); // Function Engine.Character.ClientCheatWalk // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1e9e1e0
	void ClientCheatGhost(); // Function Engine.Character.ClientCheatGhost // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x201b2e0
	void ClientCheatFly(); // Function Engine.Character.ClientCheatFly // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x33866b0
	void ClientAdjustRootMotionSourcePosition(float Timestamp, struct FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent* ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustRootMotionSourcePosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x3c9f480
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, struct FVector ServerLoc, struct FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, struct UPrimitiveComponent* ServerBase, struct FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustRootMotionPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x3c9f190
	void ClientAdjustPosition(float Timestamp, struct FVector NewLoc, struct FVector NewVel, struct UPrimitiveComponent* NewBase, struct FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Function Engine.Character.ClientAdjustPosition // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x3c9ef20
	void ClientAckGoodMove(float Timestamp); // Function Engine.Character.ClientAckGoodMove // (Net|Native|Event|Public|NetClient) // @ game+0x3c9eea0
	bool CanJumpInternal(); // Function Engine.Character.CanJumpInternal // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x3c9ee70
	bool CanJump(); // Function Engine.Character.CanJump // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c9ee40
	bool CanCrouch(); // Function Engine.Character.CanCrouch // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c9ee10
	void CacheInitialMeshOffset(struct FVector MeshRelativeLocation, struct FRotator MeshRelativeRotation); // Function Engine.Character.CacheInitialMeshOffset // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c9ed30
};

// Class Engine.SplineComponent
// Size: 0x590 (Inherited: 0x4a0)
struct USplineComponent : UPrimitiveComponent {
	struct FSplineCurves SplineCurves; // 0x4a0(0x68)
	struct FInterpCurveVector SplineInfo; // 0x508(0x18)
	struct FInterpCurveQuat SplineRotInfo; // 0x520(0x18)
	struct FInterpCurveVector SplineScaleInfo; // 0x538(0x18)
	struct FInterpCurveFloat SplineReparamTable; // 0x550(0x18)
	bool bAllowSplineEditingPerInstance; // 0x568(0x01)
	char pad_569[0x3]; // 0x569(0x03)
	int32_t ReparamStepsPerSegment; // 0x56c(0x04)
	float Duration; // 0x570(0x04)
	bool bStationaryEndpoints; // 0x574(0x01)
	bool bSplineHasBeenEdited; // 0x575(0x01)
	bool bModifiedByConstructionScript; // 0x576(0x01)
	bool bInputSplinePointsToConstructionScript; // 0x577(0x01)
	bool bDrawDebug; // 0x578(0x01)
	bool bClosedLoop; // 0x579(0x01)
	bool bLoopPositionOverride; // 0x57a(0x01)
	char pad_57B[0x1]; // 0x57b(0x01)
	float LoopPosition; // 0x57c(0x04)
	struct FVector DefaultUpVector; // 0x580(0x0c)
	char pad_58C[0x4]; // 0x58c(0x04)

	void UpdateSpline(); // Function Engine.SplineComponent.UpdateSpline // (Final|Native|Public|BlueprintCallable) // @ game+0x3dfe9e0
	void SetWorldLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation); // Function Engine.SplineComponent.SetWorldLocationAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dfe900
	void SetUpVectorAtSplinePoint(int32_t PointIndex, struct FVector& InUpVector, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetUpVectorAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dfe7a0
	void SetUnselectedSplineSegmentColor(struct FLinearColor& SegmentColor); // Function Engine.SplineComponent.SetUnselectedSplineSegmentColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dfdf90
	void SetTangentsAtSplinePoint(int32_t PointIndex, struct FVector& InArriveTangent, struct FVector& InLeaveTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetTangentsAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dfe5e0
	void SetTangentAtSplinePoint(int32_t PointIndex, struct FVector& InTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dfe480
	void SetSplineWorldPoints(struct TArray<struct FVector>& Points); // Function Engine.SplineComponent.SetSplineWorldPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3dfe3d0
	void SetSplinePointType(int32_t PointIndex, enum class ESplinePointType Type, bool bUpdateSpline); // Function Engine.SplineComponent.SetSplinePointType // (Final|Native|Public|BlueprintCallable) // @ game+0x3dfe1a0
	void SetSplinePoints(struct TArray<struct FVector>& Points, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetSplinePoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3dfe2a0
	void SetSplineLocalPoints(struct TArray<struct FVector>& Points); // Function Engine.SplineComponent.SetSplineLocalPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3dfe0f0
	void SetSelectedSplineSegmentColor(struct FLinearColor& SegmentColor); // Function Engine.SplineComponent.SetSelectedSplineSegmentColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dfdf90
	void SetLocationAtSplinePoint(int32_t PointIndex, struct FVector& InLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.SetLocationAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dfde30
	void SetDrawDebug(bool bShow); // Function Engine.SplineComponent.SetDrawDebug // (Final|Native|Public|BlueprintCallable) // @ game+0x3dfdda0
	void SetDefaultUpVector(struct FVector& UpVector, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.SetDefaultUpVector // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dfdcc0
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoopAtPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x3dfdbb0
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline); // Function Engine.SplineComponent.SetClosedLoop // (Final|Native|Public|BlueprintCallable) // @ game+0x3dfdae0
	void RemoveSplinePoint(int32_t Index, bool bUpdateSpline); // Function Engine.SplineComponent.RemoveSplinePoint // (Final|Native|Public|BlueprintCallable) // @ game+0x3dfda20
	bool IsClosedLoop(); // Function Engine.SplineComponent.IsClosedLoop // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfd9f0
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfd940
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldRotationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfd850
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfd7a0
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldLocationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfd6b0
	struct FVector GetWorldLocationAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetWorldLocationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfd600
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfd550
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetWorldDirectionAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfd460
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfd3b0
	struct FVector GetVectorPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfd2e0
	struct FVector GetVectorPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetVectorPropertyAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfd200
	struct FVector GetUpVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetUpVectorAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfd0e0
	struct FVector GetUpVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfd010
	struct FVector GetUpVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfcf30
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfce50
	struct FTransform GetTransformAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfccc0
	struct FTransform GetTransformAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfcb80
	struct FTransform GetTransformAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfca30
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.GetTransformAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfc8e0
	struct FVector GetTangentAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetTangentAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfc7c0
	struct FVector GetTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfafa0
	struct FVector GetTangentAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfc6e0
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfc600
	enum class ESplinePointType GetSplinePointType(int32_t PointIndex); // Function Engine.SplineComponent.GetSplinePointType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfc570
	float GetSplineLength(); // Function Engine.SplineComponent.GetSplineLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfc540
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetScaleAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfc3d0
	struct FVector GetScaleAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetScaleAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfc330
	struct FVector GetScaleAtSplineInputKey(float InKey); // Function Engine.SplineComponent.GetScaleAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfc290
	struct FVector GetScaleAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetScaleAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfc1f0
	struct FRotator GetRotationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRotationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfc0d0
	struct FRotator GetRotationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfc000
	struct FRotator GetRotationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfbf20
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRotationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfbe40
	float GetRollAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRollAtTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfbd30
	float GetRollAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfbc70
	float GetRollAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtSplineInputKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfbba0
	float GetRollAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRollAtDistanceAlongSpline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfbad0
	struct FVector GetRightVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetRightVectorAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfb9b0
	struct FVector GetRightVectorAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfb8e0
	struct FVector GetRightVectorAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfb800
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfb720
	int32_t GetNumberOfSplineSegments(); // Function Engine.SplineComponent.GetNumberOfSplineSegments // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfb6f0
	int32_t GetNumberOfSplinePoints(); // Function Engine.SplineComponent.GetNumberOfSplinePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfb6c0
	struct FVector GetLocationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetLocationAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfb5a0
	struct FVector GetLocationAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfb4d0
	struct FVector GetLocationAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfb3f0
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfb310
	void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& Location, struct FVector& Tangent, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLocationAndTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfb1a0
	void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, struct FVector& LocalLocation, struct FVector& LocalTangent); // Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfb070
	struct FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetLeaveTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfafa0
	float GetInputKeyAtDistanceAlongSpline(float Distance); // Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfaf10
	float GetFloatPropertyAtSplinePoint(int32_t Index, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfae50
	float GetFloatPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // Function Engine.SplineComponent.GetFloatPropertyAtSplineInputKey // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfad80
	float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex); // Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfacf0
	struct FVector GetDirectionAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity); // Function Engine.SplineComponent.GetDirectionAtTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfabd0
	struct FVector GetDirectionAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfab00
	struct FVector GetDirectionAtSplineInputKey(float InKey, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtSplineInputKey // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfaa20
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDirectionAtDistanceAlongSpline // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfa940
	struct FVector GetDefaultUpVector(enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetDefaultUpVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfa8a0
	struct FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.GetArriveTangentAtSplinePoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfa7d0
	struct FVector FindUpVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindUpVectorClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfa6e0
	struct FTransform FindTransformClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale); // Function Engine.SplineComponent.FindTransformClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfa590
	struct FVector FindTangentClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindTangentClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfa4a0
	struct FVector FindScaleClosestToWorldLocation(struct FVector& WorldLocation); // Function Engine.SplineComponent.FindScaleClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfa3f0
	struct FRotator FindRotationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRotationClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfa300
	float FindRollClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRollClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfa220
	struct FVector FindRightVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindRightVectorClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfa130
	struct FVector FindLocationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindLocationClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfa040
	float FindInputKeyClosestToWorldLocation(struct FVector& WorldLocation); // Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3df9fa0
	struct FVector FindDirectionClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace); // Function Engine.SplineComponent.FindDirectionClosestToWorldLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3df9eb0
	void ClearSplinePoints(bool bUpdateSpline); // Function Engine.SplineComponent.ClearSplinePoints // (Final|Native|Public|BlueprintCallable) // @ game+0x3df9e20
	void AddSplineWorldPoint(struct FVector& Position); // Function Engine.SplineComponent.AddSplineWorldPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3df9d80
	void AddSplinePointAtIndex(struct FVector& Position, int32_t Index, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.AddSplinePointAtIndex // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3df9c20
	void AddSplinePoint(struct FVector& Position, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline); // Function Engine.SplineComponent.AddSplinePoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3df9b10
	void AddSplineLocalPoint(struct FVector& Position); // Function Engine.SplineComponent.AddSplineLocalPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3df9a80
	void AddPoints(struct TArray<struct FSplinePoint>& Points, bool bUpdateSpline); // Function Engine.SplineComponent.AddPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3df9980
	void AddPoint(struct FSplinePoint& Point, bool bUpdateSpline); // Function Engine.SplineComponent.AddPoint // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3df9870
};

// Class Engine.Commandlet
// Size: 0x80 (Inherited: 0x28)
struct UCommandlet : UObject {
	struct FString HelpDescription; // 0x28(0x10)
	struct FString HelpUsage; // 0x38(0x10)
	struct FString HelpWebLink; // 0x48(0x10)
	struct TArray<struct FString> HelpParamNames; // 0x58(0x10)
	struct TArray<struct FString> HelpParamDescriptions; // 0x68(0x10)
	char IsServer : 1; // 0x78(0x01)
	char IsClient : 1; // 0x78(0x01)
	char IsEditor : 1; // 0x78(0x01)
	char LogToConsole : 1; // 0x78(0x01)
	char ShowErrorCount : 1; // 0x78(0x01)
	char ShowProgress : 1; // 0x78(0x01)
	char pad_78_6 : 2; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Engine.AudioComponent
// Size: 0x800 (Inherited: 0x220)
struct UAudioComponent : USceneComponent {
	struct USoundBase* Sound; // 0x220(0x08)
	struct TArray<struct FAudioComponentParam> InstanceParameters; // 0x228(0x10)
	struct USoundClass* SoundClassOverride; // 0x238(0x08)
	char bAutoDestroy : 1; // 0x240(0x01)
	char bStopWhenOwnerDestroyed : 1; // 0x240(0x01)
	char bShouldRemainActiveIfDropped : 1; // 0x240(0x01)
	char bAllowSpatialization : 1; // 0x240(0x01)
	char bOverrideAttenuation : 1; // 0x240(0x01)
	char bOverrideSubtitlePriority : 1; // 0x240(0x01)
	char bIsUISound : 1; // 0x240(0x01)
	char bEnableLowPassFilter : 1; // 0x240(0x01)
	char bOverridePriority : 1; // 0x241(0x01)
	char bSuppressSubtitles : 1; // 0x241(0x01)
	char pad_241_2 : 6; // 0x241(0x01)
	char pad_242_0 : 3; // 0x242(0x01)
	char bAutoManageAttachment : 1; // 0x242(0x01)
	char pad_242_4 : 4; // 0x242(0x01)
	char pad_243[0x5]; // 0x243(0x05)
	struct FName AudioComponentUserID; // 0x248(0x08)
	float PitchModulationMin; // 0x250(0x04)
	float PitchModulationMax; // 0x254(0x04)
	float VolumeModulationMin; // 0x258(0x04)
	float VolumeModulationMax; // 0x25c(0x04)
	float VolumeMultiplier; // 0x260(0x04)
	int32_t EnvelopeFollowerAttackTime; // 0x264(0x04)
	int32_t EnvelopeFollowerReleaseTime; // 0x268(0x04)
	float Priority; // 0x26c(0x04)
	float SubtitlePriority; // 0x270(0x04)
	char pad_274[0x4]; // 0x274(0x04)
	struct USoundEffectSourcePresetChain* SourceEffectChain; // 0x278(0x08)
	float PitchMultiplier; // 0x280(0x04)
	float LowPassFilterFrequency; // 0x284(0x04)
	char pad_288[0x8]; // 0x288(0x08)
	struct USoundAttenuation* AttenuationSettings; // 0x290(0x08)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x298(0x3a0)
	struct USoundConcurrency* ConcurrencySettings; // 0x638(0x08)
	struct TSet<struct USoundConcurrency*> ConcurrencySet; // 0x640(0x50)
	char pad_690[0xc]; // 0x690(0x0c)
	enum class EAttachmentRule AutoAttachLocationRule; // 0x69c(0x01)
	enum class EAttachmentRule AutoAttachRotationRule; // 0x69d(0x01)
	enum class EAttachmentRule AutoAttachScaleRule; // 0x69e(0x01)
	char pad_69F[0x1]; // 0x69f(0x01)
	struct FMulticastInlineDelegate OnAudioFinished; // 0x6a0(0x10)
	char pad_6B0[0x18]; // 0x6b0(0x18)
	struct FMulticastInlineDelegate OnAudioPlaybackPercent; // 0x6c8(0x10)
	char pad_6D8[0x18]; // 0x6d8(0x18)
	struct FMulticastInlineDelegate OnAudioSingleEnvelopeValue; // 0x6f0(0x10)
	char pad_700[0x18]; // 0x700(0x18)
	struct FMulticastInlineDelegate OnAudioMultiEnvelopeValue; // 0x718(0x10)
	char pad_728[0x18]; // 0x728(0x18)
	struct FSoundModulation Modulation; // 0x740(0x10)
	struct FDelegate OnQueueSubtitles; // 0x750(0x10)
	struct TWeakObjectPtr<struct USceneComponent> AutoAttachParent; // 0x760(0x08)
	struct FName AutoAttachSocketName; // 0x768(0x08)
	char pad_770[0x90]; // 0x770(0x90)

	void StopDelayed(float DelayTime); // Function Engine.AudioComponent.StopDelayed // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7e290
	void Stop(); // Function Engine.AudioComponent.Stop // (Native|Public|BlueprintCallable) // @ game+0x3c7e270
	void SetWaveParameter(struct FName InName, struct USoundWave* InWave); // Function Engine.AudioComponent.SetWaveParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7e1b0
	void SetVolumeMultiplier(float NewVolumeMultiplier); // Function Engine.AudioComponent.SetVolumeMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7e130
	void SetUISound(bool bInUISound); // Function Engine.AudioComponent.SetUISound // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7e0a0
	void SetSubmixSend(struct USoundSubmixBase* Submix, float SendLevel); // Function Engine.AudioComponent.SetSubmixSend // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7dfd0
	void SetSourceBusSendPreEffect(struct USoundSourceBus* SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPreEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7df00
	void SetSourceBusSendPostEffect(struct USoundSourceBus* SoundSourceBus, float SourceBusSendLevel); // Function Engine.AudioComponent.SetSourceBusSendPostEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7de30
	void SetSound(struct USoundBase* NewSound); // Function Engine.AudioComponent.SetSound // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7ddb0
	void SetPitchMultiplier(float NewPitchMultiplier); // Function Engine.AudioComponent.SetPitchMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7dc00
	void SetPaused(bool bPause); // Function Engine.AudioComponent.SetPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7db70
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency); // Function Engine.AudioComponent.SetLowPassFilterFrequency // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7daf0
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled); // Function Engine.AudioComponent.SetLowPassFilterEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7da60
	void SetIntParameter(struct FName InName, int32_t inInt); // Function Engine.AudioComponent.SetIntParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7d900
	void SetFloatParameter(struct FName InName, float InFloat); // Function Engine.AudioComponent.SetFloatParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7d830
	void SetBoolParameter(struct FName InName, bool InBool); // Function Engine.AudioComponent.SetBoolParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7d6d0
	void Play(float StartTime); // Function Engine.AudioComponent.Play // (Native|Public|BlueprintCallable) // @ game+0x3c7d650
	bool IsPlaying(); // Function Engine.AudioComponent.IsPlaying // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7d600
	bool HasCookedFFTData(); // Function Engine.AudioComponent.HasCookedFFTData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7d5d0
	bool HasCookedAmplitudeEnvelopeData(); // Function Engine.AudioComponent.HasCookedAmplitudeEnvelopeData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7d5a0
	enum class EAudioComponentPlayState GetPlayState(); // Function Engine.AudioComponent.GetPlayState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7d570
	bool GetCookedFFTDataForAllPlayingSounds(struct TArray<struct FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c7d490
	bool GetCookedFFTData(struct TArray<float>& FrequenciesToGet, struct TArray<struct FSoundWaveSpectralData>& OutSoundWaveSpectralData); // Function Engine.AudioComponent.GetCookedFFTData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c7d360
	bool GetCookedEnvelopeDataForAllPlayingSounds(struct TArray<struct FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c7d2a0
	bool GetCookedEnvelopeData(float& OutEnvelopeData); // Function Engine.AudioComponent.GetCookedEnvelopeData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c7d1f0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.FadeOut // (Native|Public|BlueprintCallable) // @ game+0x3c7d0e0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.FadeIn // (Native|Public|BlueprintCallable) // @ game+0x3c7cf90
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings& OutAttenuationSettings); // Function Engine.AudioComponent.BP_GetAttenuationSettingsToApply // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c7cec0
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Engine.AudioComponent.AdjustVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7cdc0
	void AdjustAttenuation(struct FSoundAttenuationSettings& InAttenuationSettings); // Function Engine.AudioComponent.AdjustAttenuation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c7ccf0
};

// Class Engine.AssetImportData
// Size: 0x28 (Inherited: 0x28)
struct UAssetImportData : UObject {
};

// Class Engine.AssetUserData
// Size: 0x28 (Inherited: 0x28)
struct UAssetUserData : UObject {
};

// Class Engine.SaveGame
// Size: 0x28 (Inherited: 0x28)
struct USaveGame : UObject {
};

// Class Engine.Info
// Size: 0x320 (Inherited: 0x320)
struct AInfo : AActor {
};

// Class Engine.GameModeBase
// Size: 0x3c0 (Inherited: 0x320)
struct AGameModeBase : AInfo {
	struct FString OptionsString; // 0x320(0x10)
	struct AGameSession* GameSessionClass; // 0x330(0x08)
	struct AGameStateBase* GameStateClass; // 0x338(0x08)
	struct APlayerController* PlayerControllerClass; // 0x340(0x08)
	struct APlayerState* PlayerStateClass; // 0x348(0x08)
	struct AHUD* HUDClass; // 0x350(0x08)
	struct APawn* DefaultPawnClass; // 0x358(0x08)
	struct ASpectatorPawn* SpectatorClass; // 0x360(0x08)
	struct APlayerController* ReplaySpectatorPlayerControllerClass; // 0x368(0x08)
	struct AServerStatReplicator* ServerStatReplicatorClass; // 0x370(0x08)
	struct AGameSession* GameSession; // 0x378(0x08)
	struct AGameStateBase* GameState; // 0x380(0x08)
	struct AServerStatReplicator* ServerStatReplicator; // 0x388(0x08)
	struct FText DefaultPlayerName; // 0x390(0x18)
	char bUseSeamlessTravel : 1; // 0x3a8(0x01)
	char bStartPlayersAsSpectators : 1; // 0x3a8(0x01)
	char bPauseable : 1; // 0x3a8(0x01)
	char pad_3A8_3 : 5; // 0x3a8(0x01)
	char pad_3A9[0x17]; // 0x3a9(0x17)

	void StartPlay(); // Function Engine.GameModeBase.StartPlay // (Native|Public|BlueprintCallable) // @ game+0x3cd45d0
	struct APawn* SpawnDefaultPawnFor(struct AController* NewPlayer, struct AActor* StartSpot); // Function Engine.GameModeBase.SpawnDefaultPawnFor // (Native|Event|Public|BlueprintEvent) // @ game+0x3cd44e0
	struct APawn* SpawnDefaultPawnAtTransform(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Engine.GameModeBase.SpawnDefaultPawnAtTransform // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3cd43c0
	bool ShouldReset(struct AActor* ActorToReset); // Function Engine.GameModeBase.ShouldReset // (Native|Event|Public|BlueprintEvent) // @ game+0x3cd4320
	void ReturnToMainMenuHost(); // Function Engine.GameModeBase.ReturnToMainMenuHost // (Native|Public|BlueprintCallable) // @ game+0x3cd41d0
	void RestartPlayerAtTransform(struct AController* NewPlayer, struct FTransform& SpawnTransform); // Function Engine.GameModeBase.RestartPlayerAtTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd40b0
	void RestartPlayerAtPlayerStart(struct AController* NewPlayer, struct AActor* StartSpot); // Function Engine.GameModeBase.RestartPlayerAtPlayerStart // (Native|Public|BlueprintCallable) // @ game+0x3cd3fe0
	void RestartPlayer(struct AController* NewPlayer); // Function Engine.GameModeBase.RestartPlayer // (Native|Public|BlueprintCallable) // @ game+0x3cd3f50
	void ResetLevel(); // Function Engine.GameModeBase.ResetLevel // (Native|Public|BlueprintCallable) // @ game+0x3cd3f10
	bool PlayerCanRestart(struct APlayerController* Player); // Function Engine.GameModeBase.PlayerCanRestart // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3cd3e10
	bool MustSpectate(struct APlayerController* NewPlayerController); // Function Engine.GameModeBase.MustSpectate // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x3cd3d70
	void K2_PostLogin(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.K2_PostLogin // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void K2_OnSwapPlayerControllers(struct APlayerController* OldPC, struct APlayerController* NewPC); // Function Engine.GameModeBase.K2_OnSwapPlayerControllers // (Event|Protected|BlueprintEvent) // @ game+0x23a3b60
	void K2_OnRestartPlayer(struct AController* NewPlayer); // Function Engine.GameModeBase.K2_OnRestartPlayer // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void K2_OnLogout(struct AController* ExitingController); // Function Engine.GameModeBase.K2_OnLogout // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void K2_OnChangeName(struct AController* Other, struct FString NewName, bool bNameChange); // Function Engine.GameModeBase.K2_OnChangeName // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	struct AActor* K2_FindPlayerStart(struct AController* Player, struct FString IncomingName); // Function Engine.GameModeBase.K2_FindPlayerStart // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cd3c80
	void InitStartSpot(struct AActor* StartSpot, struct AController* NewPlayer); // Function Engine.GameModeBase.InitStartSpot // (Native|Event|Public|BlueprintEvent) // @ game+0x3cd3b80
	void InitializeHUDForPlayer(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.InitializeHUDForPlayer // (Native|Event|Protected|BlueprintEvent) // @ game+0x3cbe9d0
	bool HasMatchStarted(); // Function Engine.GameModeBase.HasMatchStarted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cd3b50
	void HandleStartingNewPlayer(struct APlayerController* NewPlayer); // Function Engine.GameModeBase.HandleStartingNewPlayer // (Native|Event|Public|BlueprintEvent) // @ game+0x3cd3a90
	int32_t GetNumSpectators(); // Function Engine.GameModeBase.GetNumSpectators // (Native|Public|BlueprintCallable) // @ game+0x3cd3a60
	int32_t GetNumPlayers(); // Function Engine.GameModeBase.GetNumPlayers // (Native|Public|BlueprintCallable) // @ game+0x3cd3a30
	struct UObject* GetDefaultPawnClassForController(struct AController* InController); // Function Engine.GameModeBase.GetDefaultPawnClassForController // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3cd3970
	struct AActor* FindPlayerStart(struct AController* Player, struct FString IncomingName); // Function Engine.GameModeBase.FindPlayerStart // (Native|Event|Public|BlueprintEvent) // @ game+0x3cd3870
	struct AActor* ChoosePlayerStart(struct AController* Player); // Function Engine.GameModeBase.ChoosePlayerStart // (Native|Event|Public|BlueprintEvent) // @ game+0x3cd3690
	void ChangeName(struct AController* Controller, struct FString NewName, bool bNameChange); // Function Engine.GameModeBase.ChangeName // (Native|Public|BlueprintCallable) // @ game+0x3cd3560
	bool CanSpectate(struct APlayerController* Viewer, struct APlayerState* ViewTarget); // Function Engine.GameModeBase.CanSpectate // (Native|Event|Public|BlueprintEvent) // @ game+0x3cd3490
};

// Class Engine.GameMode
// Size: 0x408 (Inherited: 0x3c0)
struct AGameMode : AGameModeBase {
	struct FName MatchState; // 0x3c0(0x08)
	char bDelayedStart : 1; // 0x3c8(0x01)
	char pad_3C8_1 : 7; // 0x3c8(0x01)
	char pad_3C9[0x3]; // 0x3c9(0x03)
	int32_t NumSpectators; // 0x3cc(0x04)
	int32_t NumPlayers; // 0x3d0(0x04)
	int32_t NumBots; // 0x3d4(0x04)
	float MinRespawnDelay; // 0x3d8(0x04)
	int32_t NumTravellingPlayers; // 0x3dc(0x04)
	struct ULocalMessage* EngineMessageClass; // 0x3e0(0x08)
	struct TArray<struct APlayerState*> InactivePlayerArray; // 0x3e8(0x10)
	float InactivePlayerStateLifeSpan; // 0x3f8(0x04)
	int32_t MaxInactivePlayers; // 0x3fc(0x04)
	bool bHandleDedicatedServerReplays; // 0x400(0x01)
	char pad_401[0x7]; // 0x401(0x07)

	void StartMatch(); // Function Engine.GameMode.StartMatch // (Native|Public|BlueprintCallable) // @ game+0x3cd45b0
	void SetBandwidthLimit(float AsyncIOBandwidthLimit); // Function Engine.GameMode.SetBandwidthLimit // (Exec|Native|Public) // @ game+0x3cd42a0
	void Say(struct FString Msg); // Function Engine.GameMode.Say // (Exec|Native|Public|BlueprintCallable) // @ game+0x3cd41f0
	void RestartGame(); // Function Engine.GameMode.RestartGame // (Native|Public|BlueprintCallable) // @ game+0x3cd3f30
	bool ReadyToStartMatch(); // Function Engine.GameMode.ReadyToStartMatch // (Native|Event|Protected|BlueprintEvent) // @ game+0x3cd3ee0
	bool ReadyToEndMatch(); // Function Engine.GameMode.ReadyToEndMatch // (Native|Event|Protected|BlueprintEvent) // @ game+0x3cd3eb0
	void K2_OnSetMatchState(struct FName NewState); // Function Engine.GameMode.K2_OnSetMatchState // (Event|Protected|BlueprintEvent) // @ game+0x23a3b60
	bool IsMatchInProgress(); // Function Engine.GameMode.IsMatchInProgress // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cd3c50
	bool HasMatchEnded(); // Function Engine.GameMode.HasMatchEnded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cd3b20
	struct FName GetMatchState(); // Function Engine.GameMode.GetMatchState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cd3a10
	void EndMatch(); // Function Engine.GameMode.EndMatch // (Native|Public|BlueprintCallable) // @ game+0x3cd3850
	void AbortMatch(); // Function Engine.GameMode.AbortMatch // (Native|Public|BlueprintCallable) // @ game+0x2019cf0
};

// Class Engine.GameStateBase
// Size: 0x370 (Inherited: 0x320)
struct AGameStateBase : AInfo {
	struct AGameModeBase* GameModeClass; // 0x320(0x08)
	struct AGameModeBase* AuthorityGameMode; // 0x328(0x08)
	struct ASpectatorPawn* SpectatorClass; // 0x330(0x08)
	struct TArray<struct APlayerState*> PlayerArray; // 0x338(0x10)
	bool bReplicatedHasBegunPlay; // 0x348(0x01)
	char pad_349[0x3]; // 0x349(0x03)
	float ReplicatedWorldTimeSeconds; // 0x34c(0x04)
	float ServerWorldTimeSecondsDelta; // 0x350(0x04)
	float ServerWorldTimeSecondsUpdateFrequency; // 0x354(0x04)
	char pad_358[0x18]; // 0x358(0x18)

	void OnRep_SpectatorClass(); // Function Engine.GameStateBase.OnRep_SpectatorClass // (Native|Protected) // @ game+0x1f143b0
	void OnRep_ReplicatedWorldTimeSeconds(); // Function Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds // (Native|Protected) // @ game+0x1fa0e50
	void OnRep_ReplicatedHasBegunPlay(); // Function Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay // (Native|Protected) // @ game+0x1f143d0
	void OnRep_GameModeClass(); // Function Engine.GameStateBase.OnRep_GameModeClass // (Native|Protected) // @ game+0x3cad420
	bool HasMatchStarted(); // Function Engine.GameStateBase.HasMatchStarted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3d60
	bool HasBegunPlay(); // Function Engine.GameStateBase.HasBegunPlay // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3d30
	float GetServerWorldTimeSeconds(); // Function Engine.GameStateBase.GetServerWorldTimeSeconds // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3c60
	float GetPlayerStartTime(struct AController* Controller); // Function Engine.GameStateBase.GetPlayerStartTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3770
	float GetPlayerRespawnDelay(struct AController* Controller); // Function Engine.GameStateBase.GetPlayerRespawnDelay // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce36d0
};

// Class Engine.GameState
// Size: 0x390 (Inherited: 0x370)
struct AGameState : AGameStateBase {
	struct FName MatchState; // 0x370(0x08)
	struct FName PreviousMatchState; // 0x378(0x08)
	int32_t ElapsedTime; // 0x380(0x04)
	char pad_384[0xc]; // 0x384(0x0c)

	void OnRep_MatchState(); // Function Engine.GameState.OnRep_MatchState // (Native|Public) // @ game+0x3cd3f10
	void OnRep_ElapsedTime(); // Function Engine.GameState.OnRep_ElapsedTime // (Native|Public) // @ game+0x3cd41d0
};

// Class Engine.Controller
// Size: 0x3b8 (Inherited: 0x320)
struct AController : AActor {
	char pad_320[0x50]; // 0x320(0x50)
	struct APlayerState* PlayerState; // 0x370(0x08)
	struct FMulticastInlineDelegate OnInstigatedAnyDamage; // 0x340(0x10)
	struct FName StateName; // 0x350(0x08)
	struct APawn* Pawn; // 0x378(0x08)
	struct ACharacter* Character; // 0x380(0x08)
	struct USceneComponent* TransformComponent; // 0x368(0x08)
	struct FRotator ControlRotation; // 0x334(0x0c)
	char bAttachToPawn : 1; // 0x3b0(0x01)
	char pad_3B4_1 : 7; // 0x3b4(0x01)
	char pad_3B5[0x3]; // 0x3b5(0x03)

	void UnPossess(); // Function Engine.Controller.UnPossess // (Final|Native|Public|BlueprintCallable) // @ game+0x3cad780
	void StopMovement(); // Function Engine.Controller.StopMovement // (Native|Public|BlueprintCallable) // @ game+0x1f204b0
	void SetInitialLocationAndRotation(struct FVector& NewLocation, struct FRotator& NewRotation); // Function Engine.Controller.SetInitialLocationAndRotation // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cad690
	void SetIgnoreMoveInput(bool bNewMoveInput); // Function Engine.Controller.SetIgnoreMoveInput // (Native|Public|BlueprintCallable) // @ game+0x3cad600
	void SetIgnoreLookInput(bool bNewLookInput); // Function Engine.Controller.SetIgnoreLookInput // (Native|Public|BlueprintCallable) // @ game+0x3cad570
	void SetControlRotation(struct FRotator& NewRotation); // Function Engine.Controller.SetControlRotation // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cad4e0
	void ResetIgnoreMoveInput(); // Function Engine.Controller.ResetIgnoreMoveInput // (Native|Public|BlueprintCallable) // @ game+0x20222d0
	void ResetIgnoreLookInput(); // Function Engine.Controller.ResetIgnoreLookInput // (Native|Public|BlueprintCallable) // @ game+0x1e46620
	void ResetIgnoreInputFlags(); // Function Engine.Controller.ResetIgnoreInputFlags // (Native|Public|BlueprintCallable) // @ game+0x3cad4c0
	void ReceiveUnPossess(struct APawn* UnpossessedPawn); // Function Engine.Controller.ReceiveUnPossess // (Event|Protected|BlueprintEvent) // @ game+0x23a3b60
	void ReceivePossess(struct APawn* PossessedPawn); // Function Engine.Controller.ReceivePossess // (Event|Protected|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveInstigatedAnyDamage(float Damage, struct UDamageType* DamageType, struct AActor* DamagedActor, struct AActor* DamageCauser); // Function Engine.Controller.ReceiveInstigatedAnyDamage // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x23a3b60
	void Possess(struct APawn* InPawn); // Function Engine.Controller.Possess // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3cad440
	void OnRep_PlayerState(); // Function Engine.Controller.OnRep_PlayerState // (Native|Public) // @ game+0x3cad420
	void OnRep_Pawn(); // Function Engine.Controller.OnRep_Pawn // (Native|Public) // @ game+0x11d0250
	bool LineOfSightTo(struct AActor* Other, struct FVector ViewPoint, bool bAlternateChecks); // Function Engine.Controller.LineOfSightTo // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cad300
	struct APawn* K2_GetPawn(); // Function Engine.Controller.K2_GetPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3385750
	bool IsPlayerController(); // Function Engine.Controller.IsPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cad2d0
	bool IsMoveInputIgnored(); // Function Engine.Controller.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cad2a0
	bool IsLookInputIgnored(); // Function Engine.Controller.IsLookInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cad270
	bool IsLocalPlayerController(); // Function Engine.Controller.IsLocalPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cad220
	bool IsLocalController(); // Function Engine.Controller.IsLocalController // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cad1f0
	struct AActor* GetViewTarget(); // Function Engine.Controller.GetViewTarget // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cad1c0
	struct FRotator GetDesiredRotation(); // Function Engine.Controller.GetDesiredRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cad180
	struct FRotator GetControlRotation(); // Function Engine.Controller.GetControlRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cad140
	void ClientSetRotation(struct FRotator NewRotation, bool bResetCamera); // Function Engine.Controller.ClientSetRotation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x3cad060
	void ClientSetLocation(struct FVector NewLocation, struct FRotator NewRotation); // Function Engine.Controller.ClientSetLocation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x3cacf80
	struct APlayerController* CastToPlayerController(); // Function Engine.Controller.CastToPlayerController // (Final|Native|Public|BlueprintCallable) // @ game+0x3cacf50
};

// Class Engine.MKPlayerControllerEx
// Size: 0x3c0 (Inherited: 0x3b8)
struct AMKPlayerControllerEx : AController {
	struct APlayerController* SelfPlayerController; // 0x3b8(0x08)
};

// Class Engine.PlayerController
// Size: 0x6f8 (Inherited: 0x3c0)
struct APlayerController : AMKPlayerControllerEx {
	char pad_3C0[0xf0]; // 0x3c0(0xf0)
	struct UPlayer* Player; // 0x4b0(0x08)
	char pad_4B8[0x138]; // 0x4b8(0x138)
	struct APawn* AcknowledgedPawn; // 0x5f0(0x08)
	char pad_5F8[0xa8]; // 0x5f8(0xa8)
	struct UInterpTrackInstDirector* ControllingDirTrackInst; // 0x6a0(0x08)
	char pad_6A8[0x28]; // 0x6a8(0x28)
	struct AHUD* MyHUD; // 0x6d0(0x08)
	struct APlayerCameraManager* PlayerCameraManager; // 0x4b8(0x08)
	struct APlayerCameraManager* PlayerCameraManagerClass; // 0x550(0x08)
	bool bAutoManageActiveCameraTarget; // 0x461(0x01)
	struct FRotator TargetViewRotation; // 0x690(0x0c)
	float SmoothTargetViewRotationSpeed; // 0x580(0x04)
	struct TArray<struct AActor*> HiddenActors; // 0x478(0x10)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> HiddenPrimitiveComponents; // 0x6e8(0x10)
	float LastSpectatorStateSynchTime; // 0x590(0x04)
	struct FVector LastSpectatorSyncLocation; // 0x410(0x0c)
	struct FRotator LastSpectatorSyncRotation; // 0x514(0x0c)
	int32_t ClientCap; // 0x558(0x04)
	struct UCheatManager* CheatManager; // 0x680(0x08)
	struct UCheatManager* CheatClass; // 0x560(0x08)
	struct UPlayerInput* PlayerInput; // 0x490(0x08)
	struct TArray<struct FActiveForceFeedbackEffect> ActiveForceFeedbackEffects; // 0x468(0x10)
	char bPlayerIsWaiting : 1; // 0x520(0x01)
	char NetPlayerIndex; // 0x688(0x01)
	struct UNetConnection* PendingSwapConnection; // 0x420(0x08)
	struct UNetConnection* NetConnection; // 0x498(0x08)
	float InputYawScale; // 0x3f8(0x04)
	float InputPitchScale; // 0x444(0x04)
	float InputRollScale; // 0x488(0x04)
	char bShowMouseCursor : 1; // 0x6b8(0x01)
	char bEnableClickEvents : 1; // 0x3fc(0x01)
	char bEnableTouchEvents : 1; // 0x548(0x01)
	char bEnableMouseOverEvents : 1; // 0x520(0x01)
	char bEnableTouchOverEvents : 1; // 0x43c(0x01)
	char bForceFeedbackEnabled : 1; // 0x3e0(0x01)
	float ForceFeedbackScale; // 0x594(0x04)
	struct TArray<struct FKey> ClickEventKeys; // 0x6c0(0x10)
	enum class EMouseCursor DefaultMouseCursor; // 0x442(0x01)
	enum class EMouseCursor CurrentMouseCursor; // 0x4f8(0x01)
	enum class ECollisionChannel DefaultClickTraceChannel; // 0x3e4(0x01)
	enum class ECollisionChannel CurrentClickTraceChannel; // 0x438(0x01)
	float HitResultTraceDistance; // 0x568(0x04)
	uint16_t SeamlessTravelCount; // 0x458(0x02)
	uint16_t LastCompletedSeamlessTravelCount; // 0x440(0x02)
	struct UInputComponent* InactiveStateInputComponent; // 0x678(0x08)
	char bShouldPerformFullTickWhenPaused : 1; // 0x45c(0x01)
	struct UTouchInterface* CurrentTouchInterface; // 0x5c8(0x08)
	struct ASpectatorPawn* SpectatorPawn; // 0x450(0x08)
	bool bIsLocalPlayerController; // 0x69c(0x01)
	struct FVector SpawnLocation; // 0x500(0x0c)

	bool WasInputKeyJustReleased(struct FKey Key); // Function Engine.PlayerController.WasInputKeyJustReleased // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db47c0
	bool WasInputKeyJustPressed(struct FKey Key); // Function Engine.PlayerController.WasInputKeyJustPressed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db46d0
	void ToggleSpeaking(bool bInSpeaking); // Function Engine.PlayerController.ToggleSpeaking // (Exec|Native|Public) // @ game+0x3db4640
	void TestServerLevelVisibilityChange(struct FName PackageName, struct FName Filename); // Function Engine.PlayerController.TestServerLevelVisibilityChange // (Final|Exec|Native|Private) // @ game+0x1f65c20
	void SwitchLevel(struct FString URL); // Function Engine.PlayerController.SwitchLevel // (Exec|Native|Public) // @ game+0x3db4590
	void StopHapticEffect(enum class EControllerHand Hand); // Function Engine.PlayerController.StopHapticEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x3db4510
	void StartFire(char FireModeNum); // Function Engine.PlayerController.StartFire // (Exec|Native|Public) // @ game+0x3db4490
	void SetVirtualJoystickVisibility(bool bVisible); // Function Engine.PlayerController.SetVirtualJoystickVisibility // (Native|Public|BlueprintCallable) // @ game+0x3db4400
	void SetViewTargetWithBlend(struct AActor* NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing); // Function Engine.PlayerController.SetViewTargetWithBlend // (Native|Public|BlueprintCallable) // @ game+0x3db4280
	void SetName(struct FString S); // Function Engine.PlayerController.SetName // (Exec|Native|Public) // @ game+0x3db41d0
	void SetMouseLocation(int32_t X, int32_t Y); // Function Engine.PlayerController.SetMouseLocation // (Final|Native|Public|BlueprintCallable) // @ game+0x3db4110
	void SetMouseCursorWidget(enum class EMouseCursor Cursor, struct UUserWidget* CursorWidget); // Function Engine.PlayerController.SetMouseCursorWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x3db4050
	void SetHapticsByValue(float Frequency, float Amplitude, enum class EControllerHand Hand); // Function Engine.PlayerController.SetHapticsByValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3db3f50
	void SetDisableHaptics(bool bNewDisabled); // Function Engine.PlayerController.SetDisableHaptics // (Native|Public|BlueprintCallable) // @ game+0x3db3ec0
	void SetControllerLightColor(struct FColor Color); // Function Engine.PlayerController.SetControllerLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3db3e50
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Function Engine.PlayerController.SetCinematicMode // (Native|Public|BlueprintCallable) // @ game+0x3db3c90
	void SetAudioListenerOverride(struct USceneComponent* AttachToComponent, struct FVector Location, struct FRotator Rotation); // Function Engine.PlayerController.SetAudioListenerOverride // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3db3b70
	void SetAudioListenerAttenuationOverride(struct USceneComponent* AttachToComponent, struct FVector AttenuationLocationOVerride); // Function Engine.PlayerController.SetAudioListenerAttenuationOverride // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3db3aa0
	void ServerViewSelf(struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.ServerViewSelf // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x3db39b0
	void ServerViewPrevPlayer(); // Function Engine.PlayerController.ServerViewPrevPlayer // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x3db3960
	void ServerViewNextPlayer(); // Function Engine.PlayerController.ServerViewNextPlayer // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x3db3910
	void ServerVerifyViewTarget(); // Function Engine.PlayerController.ServerVerifyViewTarget // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db38c0
	void ServerUpdateMultipleLevelsVisibility(struct TArray<struct FUpdateLevelVisibilityLevelInfo> LevelVisibilities); // Function Engine.PlayerController.ServerUpdateMultipleLevelsVisibility // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db3800
	void ServerUpdateLevelVisibility(struct FUpdateLevelVisibilityLevelInfo LevelVisibility); // Function Engine.PlayerController.ServerUpdateLevelVisibility // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db3740
	void ServerUpdateCamera(struct FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw); // Function Engine.PlayerController.ServerUpdateCamera // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x3db3620
	void ServerUnmutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ServerUnmutePlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db34c0
	void ServerToggleAILogging(); // Function Engine.PlayerController.ServerToggleAILogging // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db3470
	void ServerShortTimeout(); // Function Engine.PlayerController.ServerShortTimeout // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db3420
	void ServerSetSpectatorWaiting(bool bWaiting); // Function Engine.PlayerController.ServerSetSpectatorWaiting // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db3360
	void ServerSetSpectatorLocation(struct FVector NewLoc, struct FRotator NewRot); // Function Engine.PlayerController.ServerSetSpectatorLocation // (Net|Native|Event|Public|NetServer|HasDefaults|NetValidate) // @ game+0x3db3230
	void ServerRestartPlayer(); // Function Engine.PlayerController.ServerRestartPlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db31e0
	void ServerPause(); // Function Engine.PlayerController.ServerPause // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db3190
	void ServerNotifyLoadedWorld(struct FName WorldPackageName); // Function Engine.PlayerController.ServerNotifyLoadedWorld // (Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db30e0
	void ServerMutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ServerMutePlayer // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db2f80
	void ServerExecRPC(struct FString Msg); // Function Engine.PlayerController.ServerExecRPC // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db2eb0
	void ServerExec(struct FString Msg); // Function Engine.PlayerController.ServerExec // (Final|Exec|Native|Public) // @ game+0x1ed32b0
	void ServerCheckClientPossessionReliable(); // Function Engine.PlayerController.ServerCheckClientPossessionReliable // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db2e60
	void ServerCheckClientPossession(); // Function Engine.PlayerController.ServerCheckClientPossession // (Net|Native|Event|Public|NetServer|NetValidate) // @ game+0x3db2e10
	void ServerChangeName(struct FString S); // Function Engine.PlayerController.ServerChangeName // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db2d40
	void ServerCamera(struct FName NewMode); // Function Engine.PlayerController.ServerCamera // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db2c80
	void ServerAcknowledgePossession(struct APawn* P); // Function Engine.PlayerController.ServerAcknowledgePossession // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3db2bc0
	void SendToConsole(struct FString Command); // Function Engine.PlayerController.SendToConsole // (Exec|Native|Public) // @ game+0x3db2b10
	void RestartLevel(); // Function Engine.PlayerController.RestartLevel // (Exec|Native|Public) // @ game+0x3db2af0
	void ResetMouseCursorWidget(); // Function Engine.PlayerController.ResetMouseCursorWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x3db2ad0
	void ResetControllerLightColor(); // Function Engine.PlayerController.ResetControllerLightColor // (Final|Native|Public|BlueprintCallable) // @ game+0x3db2ab0
	bool ProjectWorldLocationToScreen(struct FVector WorldLocation, struct FVector2D& ScreenLocation, bool bPlayerViewportRelative); // Function Engine.PlayerController.ProjectWorldLocationToScreen // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db2980
	void PlayHapticEffect(struct UHapticFeedbackEffect_Base* HapticEffect, enum class EControllerHand Hand, float Scale, bool bLoop); // Function Engine.PlayerController.PlayHapticEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x3db2830
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, enum class EDynamicForceFeedbackAction Action, struct FLatentActionInfo LatentInfo); // Function Engine.PlayerController.PlayDynamicForceFeedback // (Final|Native|Private|BlueprintCallable) // @ game+0x3db25b0
	void Pause(); // Function Engine.PlayerController.Pause // (Exec|Native|Public) // @ game+0x3db2590
	void OnServerStartedVisualLogger(bool bIsLogging); // Function Engine.PlayerController.OnServerStartedVisualLogger // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3db2500
	void LocalTravel(struct FString URL); // Function Engine.PlayerController.LocalTravel // (Exec|Native|Public) // @ game+0x3db2450
	void K2_ClientPlayForceFeedback(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused); // Function Engine.PlayerController.K2_ClientPlayForceFeedback // (Final|Native|Public|BlueprintCallable) // @ game+0x3db22a0
	bool IsInputKeyDown(struct FKey Key); // Function Engine.PlayerController.IsInputKeyDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db21b0
	void GetViewportSize(int32_t& SizeX, int32_t& SizeY); // Function Engine.PlayerController.GetViewportSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db20d0
	struct ASpectatorPawn* GetSpectatorPawn(); // Function Engine.PlayerController.GetSpectatorPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db20b0
	bool GetMousePosition(float& LocationX, float& LocationY); // Function Engine.PlayerController.GetMousePosition // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db1fc0
	struct FVector GetInputVectorKeyState(struct FKey Key); // Function Engine.PlayerController.GetInputVectorKeyState // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db1ec0
	void GetInputTouchState(enum class ETouchIndex FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Function Engine.PlayerController.GetInputTouchState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db1d40
	void GetInputMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.PlayerController.GetInputMouseDelta // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db1c60
	void GetInputMotionState(struct FVector& Tilt, struct FVector& RotationRate, struct FVector& Gravity, struct FVector& Acceleration); // Function Engine.PlayerController.GetInputMotionState // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db1ad0
	float GetInputKeyTimeDown(struct FKey Key); // Function Engine.PlayerController.GetInputKeyTimeDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db19e0
	void GetInputAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY); // Function Engine.PlayerController.GetInputAnalogStickState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db18c0
	float GetInputAnalogKeyState(struct FKey Key); // Function Engine.PlayerController.GetInputAnalogKeyState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db17d0
	struct AHUD* GetHUD(); // Function Engine.PlayerController.GetHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db0e00
	bool GetHitResultUnderFingerForObjects(enum class ETouchIndex FingerIndex, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerForObjects // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db1600
	bool GetHitResultUnderFingerByChannel(enum class ETouchIndex FingerIndex, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFingerByChannel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db1460
	bool GetHitResultUnderFinger(enum class ETouchIndex FingerIndex, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderFinger // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db12c0
	bool GetHitResultUnderCursorForObjects(struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorForObjects // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db1130
	bool GetHitResultUnderCursorByChannel(enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursorByChannel // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db0fb0
	bool GetHitResultUnderCursor(enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult& HitResult); // Function Engine.PlayerController.GetHitResultUnderCursor // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db0e30
	struct FVector GetFocalLocation(); // Function Engine.PlayerController.GetFocalLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db0dc0
	void FOV(float NewFOV); // Function Engine.PlayerController.FOV // (Exec|Native|Public) // @ game+0x3db0d40
	void EnableCheats(); // Function Engine.PlayerController.EnableCheats // (Exec|Native|Public) // @ game+0x3db0d20
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector& WorldLocation, struct FVector& WorldDirection); // Function Engine.PlayerController.DeprojectScreenPositionToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db0ba0
	bool DeprojectMousePositionToWorld(struct FVector& WorldLocation, struct FVector& WorldDirection); // Function Engine.PlayerController.DeprojectMousePositionToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db0aa0
	void ConsoleKey(struct FKey Key); // Function Engine.PlayerController.ConsoleKey // (Exec|Native|Public) // @ game+0x3db09b0
	void ClientWasKicked(struct FText KickReason); // Function Engine.PlayerController.ClientWasKicked // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3db08f0
	void ClientVoiceHandshakeComplete(); // Function Engine.PlayerController.ClientVoiceHandshakeComplete // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3db08d0
	void ClientUpdateMultipleLevelsStreamingStatus(struct TArray<struct FUpdateLevelStreamingLevelStatus> LevelStatuses); // Function Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3db0830
	void ClientUpdateLevelStreamingStatus(struct FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex); // Function Engine.PlayerController.ClientUpdateLevelStreamingStatus // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3db0680
	void ClientUnmutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ClientUnmutePlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3db0560
	void ClientTravelInternal(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid); // Function Engine.PlayerController.ClientTravelInternal // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x3db03e0
	void ClientTravel(struct FString URL, enum class ETravelType TravelType, bool bSeamless, struct FGuid MapPackageGuid); // Function Engine.PlayerController.ClientTravel // (Final|Native|Public|HasDefaults) // @ game+0x3db0270
	void ClientTeamMessage(struct APlayerState* SenderPlayerState, struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientTeamMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3db0110
	void ClientStopForceFeedback(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FName Tag); // Function Engine.PlayerController.ClientStopForceFeedback // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x3db0040
	void ClientStopCameraShakesFromSource(struct UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Function Engine.PlayerController.ClientStopCameraShakesFromSource // (Final|Native|Public|BlueprintCallable) // @ game+0x3daff70
	void ClientStopCameraShake(struct UCameraShake* Shake, bool bImmediately); // Function Engine.PlayerController.ClientStopCameraShake // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x3dafea0
	void ClientStopCameraAnim(struct UCameraAnim* AnimToStop); // Function Engine.PlayerController.ClientStopCameraAnim // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dafe10
	void ClientStartOnlineSession(); // Function Engine.PlayerController.ClientStartOnlineSession // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dafdf0
	void ClientSpawnCameraLensEffect(struct AEmitterCameraLensEffectBase* LensEffectEmitterClass); // Function Engine.PlayerController.ClientSpawnCameraLensEffect // (Net|Native|Event|Public|NetClient|BlueprintCallable) // @ game+0x3dafd60
	void ClientSetViewTarget(struct AActor* A, struct FViewTargetTransitionParams TransitionParams); // Function Engine.PlayerController.ClientSetViewTarget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dafc70
	void ClientSetSpectatorWaiting(bool bWaiting); // Function Engine.PlayerController.ClientSetSpectatorWaiting // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dafbe0
	void ClientSetHUD(struct AHUD* NewHUDClass); // Function Engine.PlayerController.ClientSetHUD // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x3dafb50
	void ClientSetForceMipLevelsToBeResident(struct UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dafa50
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD); // Function Engine.PlayerController.ClientSetCinematicMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3daf8e0
	void ClientSetCameraMode(struct FName NewCamMode); // Function Engine.PlayerController.ClientSetCameraMode // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3daf850
	void ClientSetCameraFade(bool bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime, bool bFadeAudio); // Function Engine.PlayerController.ClientSetCameraFade // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x3daf6c0
	void ClientSetBlockOnAsyncLoading(); // Function Engine.PlayerController.ClientSetBlockOnAsyncLoading // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3daf6a0
	void ClientReturnToMainMenuWithTextReason(struct FText ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenuWithTextReason // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3daf5e0
	void ClientReturnToMainMenu(struct FString ReturnReason); // Function Engine.PlayerController.ClientReturnToMainMenu // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3daf530
	void ClientRetryClientRestart(struct APawn* NewPawn); // Function Engine.PlayerController.ClientRetryClientRestart // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3daf4a0
	void ClientRestart(struct APawn* NewPawn); // Function Engine.PlayerController.ClientRestart // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3daf410
	void ClientReset(); // Function Engine.PlayerController.ClientReset // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3daf3f0
	void ClientRepObjRef(struct UObject* Object); // Function Engine.PlayerController.ClientRepObjRef // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3daf360
	void ClientReceiveLocalizedMessage(struct ULocalMessage* Message, int32_t Switch, struct APlayerState* RelatedPlayerState_2, struct APlayerState* RelatedPlayerState_3, struct UObject* OptionalObject); // Function Engine.PlayerController.ClientReceiveLocalizedMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3daf1e0
	void ClientPrestreamTextures(struct AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // Function Engine.PlayerController.ClientPrestreamTextures // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3daf090
	void ClientPrepareMapChange(struct FName LevelName, bool bFirst, bool bLast); // Function Engine.PlayerController.ClientPrepareMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3daef80
	void ClientPlaySoundAtLocation(struct USoundBase* Sound, struct FVector Location, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySoundAtLocation // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x3daee30
	void ClientPlaySound(struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier); // Function Engine.PlayerController.ClientPlaySound // (Net|Native|Event|Public|NetClient) // @ game+0x3daed30
	void ClientPlayForceFeedback_Internal(struct UForceFeedbackEffect* ForceFeedbackEffect, struct FForceFeedbackParameters Params); // Function Engine.PlayerController.ClientPlayForceFeedback_Internal // (Final|Net|Native|Event|Private|NetClient) // @ game+0x3daec40
	void ClientPlayCameraShakeFromSource(struct UCameraShake* Shake, struct UCameraShakeSourceComponent* SourceComponent); // Function Engine.PlayerController.ClientPlayCameraShakeFromSource // (Final|Native|Public|BlueprintCallable) // @ game+0x3daeb80
	void ClientPlayCameraShake(struct UCameraShake* Shake, float Scale, enum class ECameraAnimPlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerController.ClientPlayCameraShake // (Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // @ game+0x3daea20
	void ClientPlayCameraAnim(struct UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum class ECameraAnimPlaySpace Space, struct FRotator CustomPlaySpace); // Function Engine.PlayerController.ClientPlayCameraAnim // (Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable) // @ game+0x3dae780
	void ClientMutePlayer(struct FUniqueNetIdRepl PlayerId); // Function Engine.PlayerController.ClientMutePlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dae660
	void ClientMessage(struct FString S, struct FName Type, float MsgLifeTime); // Function Engine.PlayerController.ClientMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dae530
	void ClientIgnoreMoveInput(bool bIgnore); // Function Engine.PlayerController.ClientIgnoreMoveInput // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dae4a0
	void ClientIgnoreLookInput(bool bIgnore); // Function Engine.PlayerController.ClientIgnoreLookInput // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dae410
	void ClientGotoState(struct FName NewState); // Function Engine.PlayerController.ClientGotoState // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dae380
	void ClientGameEnded(struct AActor* EndGameFocus, bool bIsWinner); // Function Engine.PlayerController.ClientGameEnded // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dae2b0
	void ClientForceGarbageCollection(); // Function Engine.PlayerController.ClientForceGarbageCollection // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dae290
	void ClientFlushLevelStreaming(); // Function Engine.PlayerController.ClientFlushLevelStreaming // (Final|Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dae270
	void ClientEndOnlineSession(); // Function Engine.PlayerController.ClientEndOnlineSession // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dae250
	void ClientEnableNetworkVoice(bool bEnable); // Function Engine.PlayerController.ClientEnableNetworkVoice // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dae1c0
	void ClientCommitMapChange(); // Function Engine.PlayerController.ClientCommitMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dae1a0
	void ClientClearCameraLensEffects(); // Function Engine.PlayerController.ClientClearCameraLensEffects // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x3dae180
	void ClientCapBandwidth(int32_t Cap); // Function Engine.PlayerController.ClientCapBandwidth // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dae0f0
	void ClientCancelPendingMapChange(); // Function Engine.PlayerController.ClientCancelPendingMapChange // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x3dae0d0
	void ClientAddTextureStreamingLoc(struct FVector InLoc, float Duration, bool bOverrideLocation); // Function Engine.PlayerController.ClientAddTextureStreamingLoc // (Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x3dadfb0
	void ClearAudioListenerOverride(); // Function Engine.PlayerController.ClearAudioListenerOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x3dadf90
	void ClearAudioListenerAttenuationOverride(); // Function Engine.PlayerController.ClearAudioListenerAttenuationOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x3dadf70
	bool CanRestartPlayer(); // Function Engine.PlayerController.CanRestartPlayer // (Native|Public|BlueprintCallable) // @ game+0x3dadf40
	void Camera(struct FName NewMode); // Function Engine.PlayerController.Camera // (Exec|Native|Public) // @ game+0x3dadeb0
	void AddYawInput(float Val); // Function Engine.PlayerController.AddYawInput // (Native|Public|BlueprintCallable) // @ game+0x3dade30
	void AddRollInput(float Val); // Function Engine.PlayerController.AddRollInput // (Native|Public|BlueprintCallable) // @ game+0x3daddb0
	void AddPitchInput(float Val); // Function Engine.PlayerController.AddPitchInput // (Native|Public|BlueprintCallable) // @ game+0x3dadd30
	void ActivateTouchInterface(struct UTouchInterface* NewTouchInterface); // Function Engine.PlayerController.ActivateTouchInterface // (Native|Public|BlueprintCallable) // @ game+0x3dadca0
};

// Class Engine.ApplicationLifecycleComponent
// Size: 0x140 (Inherited: 0xb0)
struct UApplicationLifecycleComponent : UActorComponent {
	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0xb0(0x10)
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0xc0(0x10)
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0xd0(0x10)
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0xe0(0x10)
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0xf0(0x10)
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x100(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x110(0x10)
	struct FMulticastInlineDelegate OnTemperatureChangeDelegate; // 0x120(0x10)
	struct FMulticastInlineDelegate OnLowPowerModeDelegate; // 0x130(0x10)
};

// Class Engine.MovementComponent
// Size: 0xf0 (Inherited: 0xb0)
struct UMovementComponent : UActorComponent {
	struct USceneComponent* UpdatedComponent; // 0xb0(0x08)
	struct UPrimitiveComponent* UpdatedPrimitive; // 0xb8(0x08)
	char pad_C0[0x4]; // 0xc0(0x04)
	struct FVector Velocity; // 0xc4(0x0c)
	struct FVector PlaneConstraintNormal; // 0xd0(0x0c)
	struct FVector PlaneConstraintOrigin; // 0xdc(0x0c)
	char bUpdateOnlyIfRendered : 1; // 0xe8(0x01)
	char bAutoUpdateTickRegistration : 1; // 0xe8(0x01)
	char bTickBeforeOwner : 1; // 0xe8(0x01)
	char bAutoRegisterUpdatedComponent : 1; // 0xe8(0x01)
	char bConstrainToPlane : 1; // 0xe8(0x01)
	char bSnapToPlaneAtStart : 1; // 0xe8(0x01)
	char bAutoRegisterPhysicsVolumeUpdates : 1; // 0xe8(0x01)
	char bComponentShouldUpdatePhysicsVolume : 1; // 0xe8(0x01)
	char pad_E9[0x2]; // 0xe9(0x02)
	enum class EPlaneConstraintAxisSetting PlaneConstraintAxisSetting; // 0xeb(0x01)
	char pad_EC[0x4]; // 0xec(0x04)

	void StopMovementImmediately(); // Function Engine.MovementComponent.StopMovementImmediately // (Native|Public|BlueprintCallable) // @ game+0x2047010
	void SnapUpdatedComponentToPlane(); // Function Engine.MovementComponent.SnapUpdatedComponentToPlane // (Native|Public|BlueprintCallable) // @ game+0x3d875a0
	void SetUpdatedComponent(struct USceneComponent* NewUpdatedComponent); // Function Engine.MovementComponent.SetUpdatedComponent // (Native|Public|BlueprintCallable) // @ game+0x11f82d0
	void SetPlaneConstraintOrigin(struct FVector PlaneOrigin); // Function Engine.MovementComponent.SetPlaneConstraintOrigin // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d87510
	void SetPlaneConstraintNormal(struct FVector PlaneNormal); // Function Engine.MovementComponent.SetPlaneConstraintNormal // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d87480
	void SetPlaneConstraintFromVectors(struct FVector Forward, struct FVector Up); // Function Engine.MovementComponent.SetPlaneConstraintFromVectors // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d873a0
	void SetPlaneConstraintEnabled(bool bEnabled); // Function Engine.MovementComponent.SetPlaneConstraintEnabled // (Native|Public|BlueprintCallable) // @ game+0x3d87310
	void SetPlaneConstraintAxisSetting(enum class EPlaneConstraintAxisSetting NewAxisSetting); // Function Engine.MovementComponent.SetPlaneConstraintAxisSetting // (Native|Public|BlueprintCallable) // @ game+0x3d87290
	void PhysicsVolumeChanged(struct APhysicsVolume* NewVolume); // Function Engine.MovementComponent.PhysicsVolumeChanged // (Native|Public) // @ game+0x3d87200
	bool K2_MoveUpdatedComponent(struct FVector Delta, struct FRotator NewRotation, struct FHitResult& OutHit, bool bSweep, bool bTeleport); // Function Engine.MovementComponent.K2_MoveUpdatedComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d87000
	float K2_GetModifiedMaxSpeed(); // Function Engine.MovementComponent.K2_GetModifiedMaxSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d86fc0
	float K2_GetMaxSpeedModifier(); // Function Engine.MovementComponent.K2_GetMaxSpeedModifier // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d86f80
	bool IsExceedingMaxSpeed(float MaxSpeed); // Function Engine.MovementComponent.IsExceedingMaxSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d86ef0
	struct FVector GetPlaneConstraintOrigin(); // Function Engine.MovementComponent.GetPlaneConstraintOrigin // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d86eb0
	struct FVector GetPlaneConstraintNormal(); // Function Engine.MovementComponent.GetPlaneConstraintNormal // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d86e70
	enum class EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting(); // Function Engine.MovementComponent.GetPlaneConstraintAxisSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d86e50
	struct APhysicsVolume* GetPhysicsVolume(); // Function Engine.MovementComponent.GetPhysicsVolume // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d86e20
	float GetMaxSpeed(); // Function Engine.MovementComponent.GetMaxSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d86de0
	float GetGravityZ(); // Function Engine.MovementComponent.GetGravityZ // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d86da0
	struct FVector ConstrainNormalToPlane(struct FVector Normal); // Function Engine.MovementComponent.ConstrainNormalToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d86cf0
	struct FVector ConstrainLocationToPlane(struct FVector Location); // Function Engine.MovementComponent.ConstrainLocationToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d86c40
	struct FVector ConstrainDirectionToPlane(struct FVector Direction); // Function Engine.MovementComponent.ConstrainDirectionToPlane // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d86b90
};

// Class Engine.NavMovementComponent
// Size: 0x130 (Inherited: 0xf0)
struct UNavMovementComponent : UMovementComponent {
	struct FNavAgentProperties NavAgentProps; // 0xf0(0x30)
	float FixedPathBrakingDistance; // 0x120(0x04)
	char bUpdateNavAgentWithOwnersCollision : 1; // 0x124(0x01)
	char bUseAccelerationForPaths : 1; // 0x124(0x01)
	char bUseFixedBrakingDistanceForPaths : 1; // 0x124(0x01)
	char pad_124_3 : 5; // 0x124(0x01)
	struct FMovementProperties MovementState; // 0x125(0x01)
	char pad_126[0x2]; // 0x126(0x02)
	struct UObject* PathFollowingComp; // 0x128(0x08)

	void StopMovementKeepPathing(); // Function Engine.NavMovementComponent.StopMovementKeepPathing // (Final|Native|Public|BlueprintCallable) // @ game+0x3d8c2a0
	void StopActiveMovement(); // Function Engine.NavMovementComponent.StopActiveMovement // (Native|Public|BlueprintCallable) // @ game+0x3d8c280
	bool IsSwimming(); // Function Engine.NavMovementComponent.IsSwimming // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d8c0b0
	bool IsMovingOnGround(); // Function Engine.NavMovementComponent.IsMovingOnGround // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca4090
	bool IsFlying(); // Function Engine.NavMovementComponent.IsFlying // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d8c080
	bool IsFalling(); // Function Engine.NavMovementComponent.IsFalling // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d8c050
	bool IsCrouching(); // Function Engine.NavMovementComponent.IsCrouching // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c7d600
};

// Class Engine.PawnMovementComponent
// Size: 0x138 (Inherited: 0x130)
struct UPawnMovementComponent : UNavMovementComponent {
	struct APawn* PawnOwner; // 0x130(0x08)

	struct FVector K2_GetInputVector(); // Function Engine.PawnMovementComponent.K2_GetInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da1120
	bool IsMoveInputIgnored(); // Function Engine.PawnMovementComponent.IsMoveInputIgnored // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da1260
	struct FVector GetPendingInputVector(); // Function Engine.PawnMovementComponent.GetPendingInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da1120
	struct APawn* GetPawnOwner(); // Function Engine.PawnMovementComponent.GetPawnOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da10f0
	struct FVector GetLastInputVector(); // Function Engine.PawnMovementComponent.GetLastInputVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da0f70
	struct FVector ConsumeInputVector(); // Function Engine.PawnMovementComponent.ConsumeInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da0d90
	void AddInputVector(struct FVector WorldVector, bool bForce); // Function Engine.PawnMovementComponent.AddInputVector // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da0830
};

// Class Engine.CharacterMovementComponent
// Size: 0x6d0 (Inherited: 0x138)
struct UCharacterMovementComponent : UPawnMovementComponent {
	char pad_138[0x348]; // 0x138(0x348)
	struct ACharacter* CharacterOwner; // 0x480(0x08)
	char pad_488[0x120]; // 0x488(0x120)
	float GravityScale; // 0x5a8(0x04)
	float MaxStepHeight; // 0x3a0(0x04)
	float JumpZVelocity; // 0x428(0x04)
	float JumpOffJumpZFactor; // 0x3b0(0x04)
	float WalkableFloorAngle; // 0x3bc(0x04)
	float WalkableFloorZ; // 0x458(0x04)
	enum class EMovementMode MovementMode; // 0x430(0x01)
	char CustomMovementMode; // 0x2b0(0x01)
	enum class ENetworkSmoothingMode NetworkSmoothingMode; // 0x415(0x01)
	char pad_5C3[0x39]; // 0x5c3(0x39)
	float GroundFriction; // 0x5fc(0x04)
	float MaxWalkSpeed; // 0x4ec(0x04)
	float MaxWalkSpeedCrouched; // 0x3a8(0x04)
	float MaxSwimSpeed; // 0x4e4(0x04)
	float MaxFlySpeed; // 0x4a4(0x04)
	float MaxCustomMovementSpeed; // 0x564(0x04)
	float MaxAcceleration; // 0x42c(0x04)
	float MinAnalogWalkSpeed; // 0x400(0x04)
	float BrakingFrictionFactor; // 0x434(0x04)
	float BrakingFriction; // 0x438(0x04)
	char pad_624[0x50]; // 0x624(0x50)
	float BrakingSubStepTime; // 0x674(0x04)
	float BrakingDecelerationWalking; // 0x638(0x04)
	float BrakingDecelerationFalling; // 0x558(0x04)
	float BrakingDecelerationSwimming; // 0x670(0x04)
	float BrakingDecelerationFlying; // 0x418(0x04)
	float AirControl; // 0x3a4(0x04)
	float AirControlBoostMultiplier; // 0x554(0x04)
	float AirControlBoostVelocityThreshold; // 0x408(0x04)
	char pad_694[0x34]; // 0x694(0x34)
	float FallingLateralFriction; // 0x6c8(0x04)
	float CrouchedHalfHeight; // 0x490(0x04)
	float Buoyancy; // 0x4e8(0x04)
	float PerchRadiusThreshold; // 0x2cc(0x04)
	float PerchAdditionalHeight; // 0x66c(0x04)
	struct FRotator RotationRate; // 0x644(0x0c)
	char bUseSeparateBrakingFriction : 1; // 0x4fc(0x01)
	char bApplyGravityWhileJumping : 1; // 0x548(0x01)
	char bUseControllerDesiredRotation : 1; // 0x478(0x01)
	char bOrientRotationToMovement : 1; // 0x6cc(0x01)
	char bSweepWhileNavWalking : 1; // 0x41c(0x01)
	char bMovementInProgress : 1; // 0x3f0(0x01)
	char bEnableScopedMovementUpdates : 1; // 0x640(0x01)
	char bEnableServerDualMoveScopedMovementUpdates : 1; // 0x398(0x01)
	char bForceMaxAccel : 1; // 0x634(0x01)
	char bRunPhysicsWithNoController : 1; // 0x444(0x01)
	char bForceNextFloorCheck : 1; // 0x58c(0x01)
	char bShrinkProxyCapsule : 1; // 0x6cc(0x01)
	char bCanWalkOffLedges : 1; // 0x468(0x01)
	char bCanWalkOffLedgesWhenCrouching : 1; // 0x3f0(0x01)
	char bNetworkSkipProxyPredictionOnNetUpdate : 1; // 0x398(0x01)
	char bNetworkAlwaysReplicateTransformUpdateTimestamp : 1; // 0x4b0(0x01)
	char pad_6EA_0 : 1; // 0x6ea(0x01)
	char bDeferUpdateMoveComponent : 1; // 0x468(0x01)
	char bEnablePhysicsInteraction : 1; // 0x4d8(0x01)
	char bTouchForceScaledToMass : 1; // 0x3e8(0x01)
	char bPushForceScaledToMass : 1; // 0x370(0x01)
	char bPushForceUsingZOffset : 1; // 0x550(0x01)
	char bScalePushForceToVelocity : 1; // 0x398(0x01)
	struct USceneComponent* DeferredUpdatedMoveComponent; // 0x2b8(0x08)
	float MaxOutOfWaterStepHeight; // 0x45c(0x04)
	float OutofWaterZ; // 0x3e0(0x04)
	float Mass; // 0x4a8(0x04)
	float StandingDownwardForceScale; // 0x5a0(0x04)
	float InitialPushForceFactor; // 0x43c(0x04)
	float PushForceFactor; // 0x3b8(0x04)
	float PushForcePointZOffsetFactor; // 0x54c(0x04)
	float TouchForceFactor; // 0x44c(0x04)
	float MinTouchForce; // 0x500(0x04)
	float MaxTouchForce; // 0x6c4(0x04)
	float RepulsionForce; // 0x2d4(0x04)
	struct FVector Acceleration; // 0x504(0x0c)
	struct FQuat LastUpdateRotation; // 0x610(0x10)
	struct FVector LastUpdateLocation; // 0x498(0x0c)
	struct FVector LastUpdateVelocity; // 0x568(0x0c)
	float ServerLastTransformUpdateTimeStamp; // 0x524(0x04)
	float ServerLastClientGoodMoveAckTime; // 0x454(0x04)
	float ServerLastClientAdjustmentTime; // 0x560(0x04)
	struct FVector PendingImpulseToApply; // 0x594(0x0c)
	struct FVector PendingForceToApply; // 0x514(0x0c)
	float AnalogInputModifier; // 0x450(0x04)
	float MaxSimulationTimeStep; // 0x2a8(0x04)
	int32_t MaxSimulationIterations; // 0x4b4(0x04)
	int32_t MaxJumpApexAttemptsPerSimulation; // 0x63c(0x04)
	float MaxDepenetrationWithGeometry; // 0x2ac(0x04)
	float MaxDepenetrationWithGeometryAsProxy; // 0x3ec(0x04)
	float MaxDepenetrationWithPawn; // 0x510(0x04)
	float MaxDepenetrationWithPawnAsProxy; // 0x3e4(0x04)
	float NetworkSimulatedSmoothLocationTime; // 0x650(0x04)
	float NetworkSimulatedSmoothRotationTime; // 0x488(0x04)
	float ListenServerNetworkSimulatedSmoothLocationTime; // 0x6c0(0x04)
	float ListenServerNetworkSimulatedSmoothRotationTime; // 0x4dc(0x04)
	float NetProxyShrinkRadius; // 0x2d8(0x04)
	float NetProxyShrinkHalfHeight; // 0x520(0x04)
	float NetworkMaxSmoothUpdateDistance; // 0x4b8(0x04)
	float NetworkNoSmoothUpdateDistance; // 0x440(0x04)
	float NetworkMinTimeBetweenClientAckGoodMoves; // 0x410(0x04)
	float NetworkMinTimeBetweenClientAdjustments; // 0x448(0x04)
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x55c(0x04)
	float NetworkLargeClientCorrectionDistance; // 0x590(0x04)
	float LedgeCheckThreshold; // 0x574(0x04)
	float JumpOutOfWaterPitch; // 0x57c(0x04)
	struct FFindFloorResult CurrentFloor; // 0x2dc(0x94)
	enum class EMovementMode DefaultLandMovementMode; // 0x5b8(0x01)
	enum class EMovementMode DefaultWaterMovementMode; // 0x445(0x01)
	enum class EMovementMode GroundMovementMode; // 0x219(0x01)
	char bMaintainHorizontalGroundVelocity : 1; // 0x3f0(0x01)
	char bImpartBaseVelocityX : 1; // 0x3c0(0x01)
	char bImpartBaseVelocityY : 1; // 0x660(0x01)
	char bImpartBaseVelocityZ : 1; // 0x6cc(0x01)
	char bImpartBaseAngularVelocity : 1; // 0x478(0x01)
	char bJustTeleported : 1; // 0x4b0(0x01)
	char bNetworkUpdateReceived : 1; // 0x2c8(0x01)
	char bNetworkMovementModeChanged : 1; // 0x3ac(0x01)
	char bIgnoreClientMovementErrorChecksAndCorrection : 1; // 0x468(0x01)
	char bServerAcceptClientAuthoritativePosition : 1; // 0x578(0x01)
	char bNotifyApex : 1; // 0x3c0(0x01)
	char bCheatFlying : 1; // 0x446(0x01)
	char bWantsToCrouch : 1; // 0x444(0x01)
	char bCrouchMaintainsBaseLocation : 1; // 0x2d0(0x01)
	char bIgnoreBaseRotation : 1; // 0x528(0x01)
	char bFastAttachedMove : 1; // 0x460(0x01)
	char bAlwaysCheckFloor : 1; // 0x446(0x01)
	char bUseFlatBaseForFloorChecks : 1; // 0x494(0x01)
	char bPerformingJumpOff : 1; // 0x654(0x01)
	char bWantsToLeaveNavWalking : 1; // 0x218(0x01)
	char bUseRVOAvoidance : 1; // 0x41c(0x01)
	char bRequestedMoveUseAcceleration : 1; // 0x660(0x01)
	char bWasSimulatingRootMotion : 1; // 0x578(0x01)
	char bAllowPhysicsRotationDuringAnimRootMotion : 1; // 0x4b0(0x01)
	char bHasRequestedVelocity : 1; // 0x416(0x01)
	char bRequestedMoveWithMaxSpeed : 1; // 0x620(0x01)
	char bWasAvoidanceUpdated : 1; // 0x478(0x01)
	char bProjectNavMeshWalking : 1; // 0x530(0x01)
	char bProjectNavMeshOnBothWorldChannels : 1; // 0x398(0x01)
	float AvoidanceConsiderationRadius; // 0x65c(0x04)
	struct FVector RequestedVelocity; // 0x4f0(0x0c)
	int32_t AvoidanceUID; // 0x5f8(0x04)
	struct FNavAvoidanceMask AvoidanceGroup; // 0x5a4(0x04)
	struct FNavAvoidanceMask GroupsToAvoid; // 0x3b4(0x04)
	struct FNavAvoidanceMask GroupsToIgnore; // 0x658(0x04)
	float AvoidanceWeight; // 0x678(0x04)
	struct FVector PendingLaunchVelocity; // 0x3f4(0x0c)
	float NavMeshProjectionInterval; // 0x52c(0x04)
	float NavMeshProjectionTimer; // 0x40c(0x04)
	float NavMeshProjectionInterpSpeed; // 0x374(0x04)
	float NavMeshProjectionHeightScaleUp; // 0x624(0x04)
	float NavMeshProjectionHeightScaleDown; // 0x21c(0x04)
	float NavWalkingFloorDistTolerance; // 0x4e0(0x04)
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction; // 0x148(0x30)
	float MinTimeBetweenTimeStampResets; // 0x604(0x04)
	struct UPrimitiveComponent* ClientAutonomuousBase; // 0x4d0(0x08)
	struct FRootMotionSourceGroup CurrentRootMotion; // 0x5c0(0x38)
	struct FRootMotionMovementParams RootMotionParams; // 0x680(0x40)
	struct FVector AnimRootMotionVelocity; // 0x5ac(0x0c)
	float BlockingHit_SlideAccelerator; // 0x630(0x04)
	struct UPhysicalMaterial* BlockingPhysMaterial; // 0x2c0(0x08)

	void SetWalkableFloorZ(float InWalkableFloorZ); // Function Engine.CharacterMovementComponent.SetWalkableFloorZ // (Final|Native|Public|BlueprintCallable) // @ game+0x3ca49b0
	void SetWalkableFloorAngle(float InWalkableFloorAngle); // Function Engine.CharacterMovementComponent.SetWalkableFloorAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x3ca4930
	void SetMovementMode(enum class EMovementMode NewMovementMode, char NewCustomMode); // Function Engine.CharacterMovementComponent.SetMovementMode // (Native|Public|BlueprintCallable) // @ game+0x3ca4870
	void SetGroupsToIgnoreMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToIgnoreMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ca47e0
	void SetGroupsToIgnore(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToIgnore // (Final|Native|Public|BlueprintCallable) // @ game+0x3ca4760
	void SetGroupsToAvoidMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetGroupsToAvoidMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ca46d0
	void SetGroupsToAvoid(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetGroupsToAvoid // (Final|Native|Public|BlueprintCallable) // @ game+0x3ca4650
	void SetAvoidanceGroupMask(struct FNavAvoidanceMask& GroupMask); // Function Engine.CharacterMovementComponent.SetAvoidanceGroupMask // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ca45c0
	void SetAvoidanceGroup(int32_t GroupFlags); // Function Engine.CharacterMovementComponent.SetAvoidanceGroup // (Final|Native|Public|BlueprintCallable) // @ game+0x3ca4540
	void SetAvoidanceEnabled(bool bEnable); // Function Engine.CharacterMovementComponent.SetAvoidanceEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3ca44b0
	float K2_GetWalkableFloorZ(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca4480
	float K2_GetWalkableFloorAngle(); // Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca4450
	float K2_GetModifiedMaxAcceleration(); // Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca4410
	void K2_FindFloor(struct FVector CapsuleLocation, struct FFindFloorResult& FloorResult); // Function Engine.CharacterMovementComponent.K2_FindFloor // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca42c0
	void K2_ComputeFloorDist(struct FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult& FloorResult); // Function Engine.CharacterMovementComponent.K2_ComputeFloorDist // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca40c0
	bool IsWalking(); // Function Engine.CharacterMovementComponent.IsWalking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca4090
	bool IsWalkable(struct FHitResult& Hit); // Function Engine.CharacterMovementComponent.IsWalkable // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3fa0
	float GetValidPerchRadius(); // Function Engine.CharacterMovementComponent.GetValidPerchRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3f70
	float GetPerchRadiusThreshold(); // Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3f40
	struct UPrimitiveComponent* GetMovementBase(); // Function Engine.CharacterMovementComponent.GetMovementBase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3f10
	float GetMinAnalogSpeed(); // Function Engine.CharacterMovementComponent.GetMinAnalogSpeed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3ed0
	float GetMaxJumpHeightWithJumpTime(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3e90
	float GetMaxJumpHeight(); // Function Engine.CharacterMovementComponent.GetMaxJumpHeight // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1f14370
	float GetMaxBrakingDeceleration(); // Function Engine.CharacterMovementComponent.GetMaxBrakingDeceleration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3e50
	float GetMaxAcceleration(); // Function Engine.CharacterMovementComponent.GetMaxAcceleration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3e10
	struct FVector GetLastUpdateVelocity(); // Function Engine.CharacterMovementComponent.GetLastUpdateVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3de0
	struct FRotator GetLastUpdateRotation(); // Function Engine.CharacterMovementComponent.GetLastUpdateRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3d90
	struct FVector GetLastUpdateLocation(); // Function Engine.CharacterMovementComponent.GetLastUpdateLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3d60
	struct FVector GetImpartedMovementBaseVelocity(); // Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3d20
	struct FVector GetCurrentAcceleration(); // Function Engine.CharacterMovementComponent.GetCurrentAcceleration // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3ce0
	struct ACharacter* GetCharacterOwner(); // Function Engine.CharacterMovementComponent.GetCharacterOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3cc0
	float GetAnalogInputModifier(); // Function Engine.CharacterMovementComponent.GetAnalogInputModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca3c90
	void DisableMovement(); // Function Engine.CharacterMovementComponent.DisableMovement // (Native|Public|BlueprintCallable) // @ game+0x3ca3c70
	void ClearAccumulatedForces(); // Function Engine.CharacterMovementComponent.ClearAccumulatedForces // (Native|Public|BlueprintCallable) // @ game+0x3ca3c50
	void CapsuleTouched(struct UPrimitiveComponent* OverlappedComp, struct AActor* Other, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function Engine.CharacterMovementComponent.CapsuleTouched // (Native|Protected|HasOutParms) // @ game+0x3ca3a50
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration); // Function Engine.CharacterMovementComponent.CalcVelocity // (Native|Public|BlueprintCallable) // @ game+0x3ca38f0
	void AddImpulse(struct FVector Impulse, bool bVelocityChange); // Function Engine.CharacterMovementComponent.AddImpulse // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3ca3810
	void AddForce(struct FVector Force); // Function Engine.CharacterMovementComponent.AddForce // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3ca3780
};

// Class Engine.DynamicSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UDynamicSubsystem : USubsystem {
};

// Class Engine.EngineSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UEngineSubsystem : UDynamicSubsystem {
};

// Class Engine.SceneCapture
// Size: 0x330 (Inherited: 0x320)
struct ASceneCapture : AActor {
	struct UStaticMeshComponent* MeshComp; // 0x320(0x08)
	struct USceneComponent* SceneComponent; // 0x328(0x08)
};

// Class Engine.SceneCapture2D
// Size: 0x338 (Inherited: 0x330)
struct ASceneCapture2D : ASceneCapture {
	struct USceneCaptureComponent2D* CaptureComponent2D; // 0x330(0x08)

	void OnInterpToggle(bool bEnable); // Function Engine.SceneCapture2D.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x3da9380
};

// Class Engine.SoundEffectPreset
// Size: 0x40 (Inherited: 0x28)
struct USoundEffectPreset : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class Engine.SoundEffectSourcePreset
// Size: 0x40 (Inherited: 0x40)
struct USoundEffectSourcePreset : USoundEffectPreset {
};

// Class Engine.SoundEffectSubmixPreset
// Size: 0x40 (Inherited: 0x40)
struct USoundEffectSubmixPreset : USoundEffectPreset {
};

// Class Engine.TargetPoint
// Size: 0x320 (Inherited: 0x320)
struct ATargetPoint : AActor {
};

// Class Engine.AssetManager
// Size: 0x438 (Inherited: 0x28)
struct UAssetManager : UObject {
	char pad_28[0x298]; // 0x28(0x298)
	struct TArray<struct UObject*> ObjectReferenceList; // 0x2c0(0x10)
	bool bIsGlobalAsyncScanEnvironment; // 0x2d0(0x01)
	bool bShouldGuessTypeAndName; // 0x2d1(0x01)
	bool bShouldUseSynchronousLoad; // 0x2d2(0x01)
	bool bIsLoadingFromPakFiles; // 0x2d3(0x01)
	bool bShouldAcquireMissingChunksOnLoad; // 0x2d4(0x01)
	bool bOnlyCookProductionAssets; // 0x2d5(0x01)
	bool bIsBulkScanning; // 0x2d6(0x01)
	bool bIsPrimaryAssetDirectoryCurrent; // 0x2d7(0x01)
	bool bIsManagementDatabaseCurrent; // 0x2d8(0x01)
	bool bUpdateManagementDatabaseAfterScan; // 0x2d9(0x01)
	bool bIncludeOnlyOnDiskAssets; // 0x2da(0x01)
	char pad_2DB[0x1]; // 0x2db(0x01)
	int32_t NumberOfSpawnedNotifications; // 0x2dc(0x04)
	char pad_2E0[0x158]; // 0x2e0(0x158)
};

// Class Engine.ShapeComponent
// Size: 0x4c0 (Inherited: 0x4a0)
struct UShapeComponent : UPrimitiveComponent {
	struct UBodySetup* ShapeBodySetup; // 0x4a0(0x08)
	struct UNavAreaBase* AreaClass; // 0x4a8(0x08)
	struct FColor ShapeColor; // 0x4b0(0x04)
	char bDrawOnlyIfSelected : 1; // 0x4b4(0x01)
	char bShouldCollideWhenPlacing : 1; // 0x4b4(0x01)
	char bDynamicObstacle : 1; // 0x4b4(0x01)
	char pad_4B4_3 : 5; // 0x4b4(0x01)
	char pad_4B5[0xb]; // 0x4b5(0x0b)
};

// Class Engine.BoxComponent
// Size: 0x4d0 (Inherited: 0x4c0)
struct UBoxComponent : UShapeComponent {
	struct FVector BoxExtent; // 0x4b8(0x0c)
	float LineThickness; // 0x4c4(0x04)

	void SetBoxExtent(struct FVector InBoxExtent, bool bUpdateOverlaps); // Function Engine.BoxComponent.SetBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c965f0
	struct FVector GetUnscaledBoxExtent(); // Function Engine.BoxComponent.GetUnscaledBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c96410
	struct FVector GetScaledBoxExtent(); // Function Engine.BoxComponent.GetScaledBoxExtent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c963b0
};

// Class Engine.CameraComponent
// Size: 0x860 (Inherited: 0x220)
struct UCameraComponent : USceneComponent {
	float FieldOfView; // 0x220(0x04)
	float OrthoWidth; // 0x224(0x04)
	float OrthoNearClipPlane; // 0x228(0x04)
	float OrthoFarClipPlane; // 0x22c(0x04)
	float AspectRatio; // 0x230(0x04)
	char bConstrainAspectRatio : 1; // 0x234(0x01)
	char bUseFieldOfViewForLOD : 1; // 0x234(0x01)
	char pad_234_2 : 6; // 0x234(0x01)
	char pad_235[0x7]; // 0x235(0x07)
	char bLockToHmd : 1; // 0x23c(0x01)
	char bUsePawnControlRotation : 1; // 0x23c(0x01)
	char pad_23C_2 : 6; // 0x23c(0x01)
	enum class ECameraProjectionMode ProjectionMode; // 0x23d(0x01)
	char pad_23E[0x32]; // 0x23e(0x32)
	float PostProcessBlendWeight; // 0x270(0x04)
	char pad_274[0x2c]; // 0x274(0x2c)
	struct FPostProcessSettings PostProcessSettings; // 0x2a0(0x5c0)

	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD); // Function Engine.CameraComponent.SetUseFieldOfViewForLOD // (Final|Native|Public|BlueprintCallable) // @ game+0x3c96b60
	void SetProjectionMode(enum class ECameraProjectionMode InProjectionMode); // Function Engine.CameraComponent.SetProjectionMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3c96a60
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight); // Function Engine.CameraComponent.SetPostProcessBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x3c969e0
	void SetOrthoWidth(float InOrthoWidth); // Function Engine.CameraComponent.SetOrthoWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x3c96960
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane); // Function Engine.CameraComponent.SetOrthoNearClipPlane // (Final|Native|Public|BlueprintCallable) // @ game+0x3c968e0
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane); // Function Engine.CameraComponent.SetOrthoFarClipPlane // (Final|Native|Public|BlueprintCallable) // @ game+0x3c96860
	void SetFieldOfView(float InFieldOfView); // Function Engine.CameraComponent.SetFieldOfView // (Native|Public|BlueprintCallable) // @ game+0x3c967e0
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio); // Function Engine.CameraComponent.SetConstraintAspectRatio // (Final|Native|Public|BlueprintCallable) // @ game+0x3c966d0
	void SetAspectRatio(float InAspectRatio); // Function Engine.CameraComponent.SetAspectRatio // (Final|Native|Public|BlueprintCallable) // @ game+0x3c96570
	void RemoveBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject); // Function Engine.CameraComponent.RemoveBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x3c96440
	void OnCameraMeshHiddenChanged(); // Function Engine.CameraComponent.OnCameraMeshHiddenChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x151b910
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo& DesiredView); // Function Engine.CameraComponent.GetCameraView // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c96210
	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.CameraComponent.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x3c96090
};

// Class Engine.CheatManager
// Size: 0x78 (Inherited: 0x28)
struct UCheatManager : UObject {
	struct ADebugCameraController* DebugCameraControllerRef; // 0x28(0x08)
	struct ADebugCameraController* DebugCameraControllerClass; // 0x30(0x08)
	char pad_38[0x40]; // 0x38(0x40)

	void Walk(); // Function Engine.CheatManager.Walk // (Exec|Native|Public|BlueprintCallable) // @ game+0x2ed3180
	void ViewSelf(); // Function Engine.CheatManager.ViewSelf // (Exec|Native|Public) // @ game+0x1e9d2e0
	void ViewPlayer(struct FString S); // Function Engine.CheatManager.ViewPlayer // (Exec|Native|Public) // @ game+0x3caa020
	void ViewClass(struct AActor* DesiredClass); // Function Engine.CheatManager.ViewClass // (Exec|Native|Public) // @ game+0x3ca9f90
	void ViewActor(struct FName ActorName); // Function Engine.CheatManager.ViewActor // (Exec|Native|Public) // @ game+0x3ca9f00
	void UpdateSafeArea(); // Function Engine.CheatManager.UpdateSafeArea // (Final|Exec|Native|Public) // @ game+0x3ca9ee0
	void ToggleServerStatReplicatorUpdateStatNet(); // Function Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet // (Final|Exec|Native|Public) // @ game+0x3ca9ec0
	void ToggleServerStatReplicatorClientOverwrite(); // Function Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite // (Final|Exec|Native|Public) // @ game+0x3ca9ea0
	void ToggleDebugCamera(); // Function Engine.CheatManager.ToggleDebugCamera // (Exec|Native|Public) // @ game+0x3c50cd0
	void ToggleAILogging(); // Function Engine.CheatManager.ToggleAILogging // (Exec|Native|Public) // @ game+0x3ca9e80
	void TestCollisionDistance(); // Function Engine.CheatManager.TestCollisionDistance // (Exec|Native|Public) // @ game+0x1eb3130
	void Teleport(); // Function Engine.CheatManager.Teleport // (Exec|Native|Public|BlueprintCallable) // @ game+0x3ca9e60
	void Summon(struct FString ClassName); // Function Engine.CheatManager.Summon // (Exec|Native|Public) // @ game+0x3ca9db0
	void StreamLevelOut(struct FName PackageName); // Function Engine.CheatManager.StreamLevelOut // (Exec|Native|Public) // @ game+0x3ca9d20
	void StreamLevelIn(struct FName PackageName); // Function Engine.CheatManager.StreamLevelIn // (Exec|Native|Public) // @ game+0x3ca9c90
	void SpawnServerStatReplicator(); // Function Engine.CheatManager.SpawnServerStatReplicator // (Final|Exec|Native|Public) // @ game+0x3ca9c70
	void Slomo(float NewTimeDilation); // Function Engine.CheatManager.Slomo // (Exec|Native|Public|BlueprintCallable) // @ game+0x3ca9bf0
	void SetWorldOrigin(); // Function Engine.CheatManager.SetWorldOrigin // (Final|Exec|Native|Public) // @ game+0x3ca9bd0
	void SetReflexLatencyGraph(int32_t Type, float Min, float MAX); // Function Engine.CheatManager.SetReflexLatencyGraph // (Final|Exec|Native|Public) // @ game+0x3ca9ad0
	void SetMouseSensitivityToDefault(); // Function Engine.CheatManager.SetMouseSensitivityToDefault // (Exec|Native|Public) // @ game+0x3ca9ab0
	void ServerToggleAILogging(); // Function Engine.CheatManager.ServerToggleAILogging // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x3ca99d0
	void ReceiveInitCheatManager(); // Function Engine.CheatManager.ReceiveInitCheatManager // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveEndPlay(); // Function Engine.CheatManager.ReceiveEndPlay // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void PlayersOnly(); // Function Engine.CheatManager.PlayersOnly // (Exec|Native|Public|BlueprintCallable) // @ game+0x1e9caa0
	void OnlyLoadLevel(struct FName PackageName); // Function Engine.CheatManager.OnlyLoadLevel // (Exec|Native|Public) // @ game+0x3ca9940
	void LogLoc(); // Function Engine.CheatManager.LogLoc // (Exec|Native|Public) // @ game+0x3ca9920
	void InvertMouse(); // Function Engine.CheatManager.InvertMouse // (Exec|Native|Public) // @ game+0x3ca9900
	void God(); // Function Engine.CheatManager.God // (Exec|Native|Public|BlueprintCallable) // @ game+0x1e9d1e0
	void Ghost(); // Function Engine.CheatManager.Ghost // (Exec|Native|Public|BlueprintCallable) // @ game+0x3c99900
	void FreezeFrame(float Delay); // Function Engine.CheatManager.FreezeFrame // (Exec|Native|Public|BlueprintCallable) // @ game+0x3ca9880
	void Fly(); // Function Engine.CheatManager.Fly // (Exec|Native|Public|BlueprintCallable) // @ game+0x34c7e90
	void FlushLog(); // Function Engine.CheatManager.FlushLog // (Exec|Native|Public) // @ game+0x3ca9860
	void EnableDebugCamera(); // Function Engine.CheatManager.EnableDebugCamera // (Native|Protected|BlueprintCallable) // @ game+0x1e48b70
	void DumpVoiceMutingState(); // Function Engine.CheatManager.DumpVoiceMutingState // (Exec|Native|Public) // @ game+0x3ca9840
	void DumpPartyState(); // Function Engine.CheatManager.DumpPartyState // (Exec|Native|Public) // @ game+0x3ca9820
	void DumpOnlineSessionState(); // Function Engine.CheatManager.DumpOnlineSessionState // (Exec|Native|Public) // @ game+0x3ca9800
	void DumpChatState(); // Function Engine.CheatManager.DumpChatState // (Exec|Native|Public) // @ game+0x3ca97e0
	void DisableDebugCamera(); // Function Engine.CheatManager.DisableDebugCamera // (Native|Protected|BlueprintCallable) // @ game+0x11f82b0
	void DestroyTarget(); // Function Engine.CheatManager.DestroyTarget // (Exec|Native|Public|BlueprintCallable) // @ game+0x1e9d110
	void DestroyServerStatReplicator(); // Function Engine.CheatManager.DestroyServerStatReplicator // (Final|Exec|Native|Public) // @ game+0x3ca97c0
	void DestroyPawns(struct APawn* aClass); // Function Engine.CheatManager.DestroyPawns // (Exec|Native|Public) // @ game+0x3ca9730
	void DestroyAllPawnsExceptTarget(); // Function Engine.CheatManager.DestroyAllPawnsExceptTarget // (Exec|Native|Public) // @ game+0x1e9cba0
	void DestroyAll(struct AActor* aClass); // Function Engine.CheatManager.DestroyAll // (Exec|Native|Public) // @ game+0x3ca96a0
	void DebugCapsuleSweepSize(float HalfHeight, float Radius); // Function Engine.CheatManager.DebugCapsuleSweepSize // (Exec|Native|Public) // @ game+0x3ca95d0
	void DebugCapsuleSweepPawn(); // Function Engine.CheatManager.DebugCapsuleSweepPawn // (Exec|Native|Public) // @ game+0x3ca95b0
	void DebugCapsuleSweepComplex(bool bTraceComplex); // Function Engine.CheatManager.DebugCapsuleSweepComplex // (Exec|Native|Public) // @ game+0x3ca9520
	void DebugCapsuleSweepClear(); // Function Engine.CheatManager.DebugCapsuleSweepClear // (Exec|Native|Public) // @ game+0x3ca9500
	void DebugCapsuleSweepChannel(enum class ECollisionChannel Channel); // Function Engine.CheatManager.DebugCapsuleSweepChannel // (Exec|Native|Public) // @ game+0x3ca9480
	void DebugCapsuleSweepCapture(); // Function Engine.CheatManager.DebugCapsuleSweepCapture // (Exec|Native|Public) // @ game+0x3ca9460
	void DebugCapsuleSweep(); // Function Engine.CheatManager.DebugCapsuleSweep // (Exec|Native|Public) // @ game+0x3ca9440
	void DamageTarget(float DamageAmount); // Function Engine.CheatManager.DamageTarget // (Exec|Native|Public|BlueprintCallable) // @ game+0x3ca93c0
	void CheatScript(struct FString ScriptName); // Function Engine.CheatManager.CheatScript // (Final|Exec|Native|Public) // @ game+0x3ca92d0
	void ChangeSize(float F); // Function Engine.CheatManager.ChangeSize // (Exec|Native|Public|BlueprintCallable) // @ game+0x3ca9250
	void BugItStringCreator(struct FVector ViewLocation, struct FRotator ViewRotation, struct FString& GoString, struct FString& LocString); // Function Engine.CheatManager.BugItStringCreator // (Exec|Native|Public|HasOutParms|HasDefaults) // @ game+0x3ca9080
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll); // Function Engine.CheatManager.BugItGo // (Exec|Native|Public) // @ game+0x3ca8eb0
	void BugIt(struct FString ScreenShotDescription); // Function Engine.CheatManager.BugIt // (Exec|Native|Public) // @ game+0x3ca8e00
};

// Class Engine.CheatManagerEx
// Size: 0x78 (Inherited: 0x78)
struct UCheatManagerEx : UCheatManager {
};

// Class Engine.DamageType
// Size: 0x40 (Inherited: 0x28)
struct UDamageType : UObject {
	char bCausedByWorld : 1; // 0x28(0x01)
	char bScaleMomentumByMass : 1; // 0x28(0x01)
	char bRadialDamageVelChange : 1; // 0x28(0x01)
	char pad_28_3 : 5; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float DamageImpulse; // 0x2c(0x04)
	float DestructibleImpulse; // 0x30(0x04)
	float DestructibleDamageSpreadScale; // 0x34(0x04)
	float DamageFalloff; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.MKDemoNetDriverEx
// Size: 0x958 (Inherited: 0x748)
struct UMKDemoNetDriverEx : UNetDriver {
	char pad_748[0x1e0]; // 0x748(0x1e0)
	struct UObject* SpectatorControllerClass; // 0x928(0x08)
	struct UDemoNetDriver* SelfDemoNetDriver; // 0x930(0x08)
	char pad_938[0x20]; // 0x938(0x20)

	void SetReplaySample(struct AActor* Target, struct UReplaySampleBase* ReplaySample, bool bSaveCheckpoint); // Function Engine.MKDemoNetDriverEx.SetReplaySample // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3d82ca0
	void GetReplaySampleArray(struct AActor* Target, struct TArray<struct UReplaySampleBase*>& OutReplaySampleArray); // Function Engine.MKDemoNetDriverEx.GetReplaySampleArray // (Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3d81f10
};

// Class Engine.DemoNetDriver
// Size: 0x1398 (Inherited: 0x958)
struct UDemoNetDriver : UMKDemoNetDriverEx {
	char pad_958[0xf8]; // 0x958(0xf8)
	struct TMap<struct FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors; // 0xa50(0x50)
	char pad_AA0[0x42c]; // 0xaa0(0x42c)
	float CheckpointSaveMaxMSPerFrame; // 0xecc(0x04)
	char pad_ED0[0x30]; // 0xed0(0x30)
	struct TArray<struct FMulticastRecordOptions> MulticastRecordOptions; // 0xf00(0x10)
	char pad_F10[0x50]; // 0xf10(0x50)
	bool bIsLocalReplay; // 0xf60(0x01)
	char pad_F61[0x7]; // 0xf61(0x07)
	struct TArray<struct APlayerController*> SpectatorControllers; // 0xf68(0x10)
	char pad_F78[0x420]; // 0xf78(0x420)
};

// Class Engine.StaticMeshComponent
// Size: 0x540 (Inherited: 0x4d0)
struct UStaticMeshComponent : UMeshComponent {
	int32_t ForcedLodModel; // 0x4d0(0x04)
	int32_t PreviousLODLevel; // 0x4d4(0x04)
	int32_t MinLOD; // 0x4d8(0x04)
	int32_t SubDivisionStepSize; // 0x4dc(0x04)
	struct UStaticMesh* StaticMesh; // 0x4e0(0x08)
	struct FColor WireframeColorOverride; // 0x4e8(0x04)
	char bEvaluateWorldPositionOffset : 1; // 0x4ec(0x01)
	char bOverrideWireframeColor : 1; // 0x4ec(0x01)
	char bOverrideMinLod : 1; // 0x4ec(0x01)
	char bOverrideNavigationExport : 1; // 0x4ec(0x01)
	char bForceNavigationObstacle : 1; // 0x4ec(0x01)
	char bDisallowMeshPaintPerInstance : 1; // 0x4ec(0x01)
	char bIgnoreInstanceForTextureStreaming : 1; // 0x4ec(0x01)
	char bOverrideLightMapRes : 1; // 0x4ec(0x01)
	char bCastDistanceFieldIndirectShadow : 1; // 0x4ed(0x01)
	char bOverrideDistanceFieldSelfShadowBias : 1; // 0x4ed(0x01)
	char bUseSubDivisions : 1; // 0x4ed(0x01)
	char bUseDefaultCollision : 1; // 0x4ed(0x01)
	char bReverseCulling : 1; // 0x4ed(0x01)
	char pad_4ED_5 : 3; // 0x4ed(0x01)
	char pad_4EE[0x2]; // 0x4ee(0x02)
	int32_t OverriddenLightMapRes; // 0x4f0(0x04)
	float DistanceFieldIndirectShadowMinVisibility; // 0x4f4(0x04)
	float DistanceFieldSelfShadowBias; // 0x4f8(0x04)
	float StreamingDistanceMultiplier; // 0x4fc(0x04)
	struct TArray<struct FStaticMeshComponentLODInfo> LODData; // 0x500(0x10)
	struct TArray<struct FStreamingTextureBuildInfo> StreamingTextureData; // 0x510(0x10)
	struct FLightmassPrimitiveSettings LightmassSettings; // 0x520(0x18)
	char pad_538[0x8]; // 0x538(0x08)

	bool SetStaticMesh(struct UStaticMesh* NewMesh); // Function Engine.StaticMeshComponent.SetStaticMesh // (Native|Public|BlueprintCallable) // @ game+0x168e3a0
	void SetReverseCulling(bool ReverseCulling); // Function Engine.StaticMeshComponent.SetReverseCulling // (Final|Native|Public|BlueprintCallable) // @ game+0x3e07ec0
	void SetForcedLodModel(int32_t NewForcedLodModel); // Function Engine.StaticMeshComponent.SetForcedLodModel // (Final|Native|Public|BlueprintCallable) // @ game+0x3e07b40
	void SetDistanceFieldSelfShadowBias(float NewValue); // Function Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias // (Final|Native|Public|BlueprintCallable) // @ game+0x3e078c0
	void OnRep_StaticMesh(struct UStaticMesh* OldStaticMesh); // Function Engine.StaticMeshComponent.OnRep_StaticMesh // (Final|Native|Public) // @ game+0x3e07840
	void GetLocalBounds(struct FVector& Min, struct FVector& MAX); // Function Engine.StaticMeshComponent.GetLocalBounds // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e076a0
};

// Class Engine.GameEngine
// Size: 0xe38 (Inherited: 0xde8)
struct UGameEngine : UEngine {
	float MaxDeltaTime; // 0xde8(0x04)
	float ServerFlushLogInterval; // 0xdec(0x04)
	struct UGameInstance* GameInstance; // 0xdf0(0x08)
	char pad_DF8[0x40]; // 0xdf8(0x40)
};

// Class Engine.MKGameInstanceEx
// Size: 0xa8 (Inherited: 0x28)
struct UMKGameInstanceEx : UObject {
	struct TArray<struct FMKReplayListItemInfo> ReplayListItemInfos; // 0x28(0x10)
	struct FMulticastInlineDelegate OnEnumerateReplayListCompleteEvent; // 0x38(0x10)
	struct FMulticastInlineDelegate OnDeleteReplayCompleteEvent; // 0x48(0x10)
	struct FMulticastInlineDelegate OnKeepAndDeleteOldetsReplaysCompleteEvent; // 0x58(0x10)
	struct FMulticastInlineDelegate OnKeepAndDeleteOldVersionReplaysCompleteEvent; // 0x68(0x10)
	char pad_78[0x8]; // 0x78(0x08)
	struct UGameInstance* SelfGameInstance; // 0x80(0x08)
	bool bLoadingWidgetVisible; // 0x88(0x01)
	char pad_89[0x1f]; // 0x89(0x1f)

	void PlayReplayCommand(struct FString DemoName); // Function Engine.MKGameInstanceEx.PlayReplayCommand // (Final|Exec|Native|Public) // @ game+0x3d82bb0
	bool PlayReplay(struct ULocalPlayer* LocalPlayer, struct FString DemoName); // Function Engine.MKGameInstanceEx.PlayReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x3d82ac0
	void OnKeepAndDeleteOldVersionReplaysCompleteEvent__DelegateSignature(); // DelegateFunction Engine.MKGameInstanceEx.OnKeepAndDeleteOldVersionReplaysCompleteEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x23a3b60
	void OnKeepAndDeleteOldestReplaysCompleteEvent__DelegateSignature(int32_t nRemainedReplays, bool bSuccess); // DelegateFunction Engine.MKGameInstanceEx.OnKeepAndDeleteOldestReplaysCompleteEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x23a3b60
	void OnEnumerateStreamsCompleteEvent__DelegateSignature(int32_t OutPageIndex, int32_t OutPageSize); // DelegateFunction Engine.MKGameInstanceEx.OnEnumerateStreamsCompleteEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x23a3b60
	void OnDeleteStreamCompleteEvent__DelegateSignature(struct FString StreamName, bool bSuccess); // DelegateFunction Engine.MKGameInstanceEx.OnDeleteStreamCompleteEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x23a3b60
	void GetNumOfReplays(int32_t& TotalReplays, int32_t& ReplaysToKeep); // Function Engine.MKGameInstanceEx.GetNumOfReplays // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3d81e30
	void EnumerateReplayList(int32_t PageIndex, int32_t PageSize); // Function Engine.MKGameInstanceEx.EnumerateReplayList // (Final|Native|Public|BlueprintCallable) // @ game+0x3d81680
};

// Class Engine.GameInstance
// Size: 0x218 (Inherited: 0xa8)
struct UGameInstance : UMKGameInstanceEx {
	char pad_A8[0x10]; // 0xa8(0x10)
	struct TArray<struct ULocalPlayer*> LocalPlayers; // 0xb8(0x10)
	struct UOnlineSession* OnlineSession; // 0xc8(0x08)
	struct TArray<struct UObject*> ReferencedObjects; // 0xd0(0x10)
	char pad_E0[0x138]; // 0xe0(0x138)

	void ReceiveShutdown(); // Function Engine.GameInstance.ReceiveShutdown // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveInit(); // Function Engine.GameInstance.ReceiveInit // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void HandleTravelError(enum class ETravelFailure FailureType); // Function Engine.GameInstance.HandleTravelError // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void HandleNetworkError(enum class ENetworkFailure FailureType, bool bIsServer); // Function Engine.GameInstance.HandleNetworkError // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void DebugRemovePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugRemovePlayer // (Exec|Native|Public) // @ game+0x3cd37c0
	void DebugCreatePlayer(int32_t ControllerId); // Function Engine.GameInstance.DebugCreatePlayer // (Exec|Native|Public) // @ game+0x3cd3730
};

// Class Engine.GameSession
// Size: 0x338 (Inherited: 0x320)
struct AGameSession : AInfo {
	int32_t MaxSpectators; // 0x320(0x04)
	int32_t MaxPlayers; // 0x324(0x04)
	int32_t MaxPartySize; // 0x328(0x04)
	char MaxSplitscreensPerConnection; // 0x32c(0x01)
	bool bRequiresPushToTalk; // 0x32d(0x01)
	char pad_32E[0x2]; // 0x32e(0x02)
	struct FName SessionName; // 0x330(0x08)
};

// Class Engine.InstancedStaticMeshComponent
// Size: 0x600 (Inherited: 0x540)
struct UInstancedStaticMeshComponent : UStaticMeshComponent {
	struct TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData; // 0x538(0x10)
	int32_t NumCustomDataFloats; // 0x548(0x04)
	struct TArray<float> PerInstanceSMCustomData; // 0x550(0x10)
	bool bMergeCollision; // 0x560(0x01)
	int32_t InstancingRandomSeed; // 0x564(0x04)
	int32_t InstanceStartCullDistance; // 0x568(0x04)
	int32_t InstanceEndCullDistance; // 0x56c(0x04)
	int8_t CulldistanceType; // 0x570(0x01)
	char pad_572[0x2]; // 0x572(0x02)
	float MinScreenSizeScale; // 0x574(0x04)
	char InstanceBodiesSplitRatio; // 0x578(0x01)
	char pad_579[0x7]; // 0x579(0x07)
	struct TArray<int32_t> InstanceReorderTable; // 0x580(0x10)
	char pad_590[0x5c]; // 0x590(0x5c)
	int32_t NumPendingLightmaps; // 0x5ec(0x04)
	struct TArray<struct FInstancedStaticMeshMappingInfo> CachedMappings; // 0x5f0(0x10)

	bool UpdateInstanceTransform(int32_t InstanceIndex, struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cf5460
	bool SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty); // Function Engine.InstancedStaticMeshComponent.SetCustomDataValue // (Native|Public|BlueprintCallable) // @ game+0x3cf5310
	void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance); // Function Engine.InstancedStaticMeshComponent.SetCullDistances // (Final|Native|Public|BlueprintCallable) // @ game+0x3cf5250
	bool RemoveInstance(int32_t InstanceIndex); // Function Engine.InstancedStaticMeshComponent.RemoveInstance // (Native|Public|BlueprintCallable) // @ game+0x3cf51b0
	bool GetInstanceTransform(int32_t InstanceIndex, struct FTransform& OutInstanceTransform, bool bWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstanceTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cf4db0
	struct TArray<int32_t> GetInstancesOverlappingSphere(struct FVector& Center, float Radius, bool bSphereInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cf5040
	struct TArray<int32_t> GetInstancesOverlappingBox(struct FBox& Box, bool bBoxInWorldSpace); // Function Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cf4f10
	int32_t GetInstanceCount(); // Function Engine.InstancedStaticMeshComponent.GetInstanceCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cf4d80
	void ClearInstances(bool bClearBodies); // Function Engine.InstancedStaticMeshComponent.ClearInstances // (Native|Public|BlueprintCallable) // @ game+0x3cf4cf0
	bool BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, struct TArray<struct FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3cf4b00
	bool BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Function Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cf48d0
	int32_t AddInstanceWorldSpace(struct FTransform& WorldTransform); // Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cf47f0
	int32_t AddInstance(struct FTransform& InstanceTransform); // Function Engine.InstancedStaticMeshComponent.AddInstance // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cf4710
};

// Class Engine.HierarchicalInstancedStaticMeshComponent
// Size: 0x700 (Inherited: 0x600)
struct UHierarchicalInstancedStaticMeshComponent : UInstancedStaticMeshComponent {
	char pad_600[0x10]; // 0x600(0x10)
	struct TArray<int32_t> SortedInstances; // 0x610(0x10)
	int32_t NumBuiltInstances; // 0x620(0x04)
	char pad_624[0x4]; // 0x624(0x04)
	struct FBox BuiltInstanceBounds; // 0x628(0x1c)
	struct FBox UnbuiltInstanceBounds; // 0x644(0x1c)
	struct TArray<struct FBox> UnbuiltInstanceBoundsList; // 0x660(0x10)
	char bEnableDensityScaling : 1; // 0x670(0x01)
	char pad_670_1 : 7; // 0x670(0x01)
	char pad_671[0x7]; // 0x671(0x07)
	int32_t OcclusionLayerNumNodes; // 0x678(0x04)
	struct FBoxSphereBounds CacheMeshExtendedBounds; // 0x67c(0x1c)
	bool bDisableCollision; // 0x698(0x01)
	char pad_699[0x3]; // 0x699(0x03)
	int32_t InstanceCountToRender; // 0x69c(0x04)
	char pad_6A0[0x60]; // 0x6a0(0x60)

	bool RemoveInstances(struct TArray<int32_t>& InstancesToRemove); // Function Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3ce93c0
	bool DisableInstance(int32_t InstanceIndex); // Function Engine.HierarchicalInstancedStaticMeshComponent.DisableInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce7890
};

// Class Engine.MK3DReplayController
// Size: 0x930 (Inherited: 0x6f8)
struct AMK3DReplayController : APlayerController {
	struct FMulticastInlineDelegate OnReplayPauseEvent; // 0x6f8(0x10)
	struct FMulticastInlineDelegate OnReplayJumpEvent; // 0x708(0x10)
	struct FMulticastInlineDelegate OnReplayJumpCompleteEvent; // 0x718(0x10)
	char pad_728[0x88]; // 0x728(0x88)
	struct FString PlayerCameraManagerClassName; // 0x7b0(0x10)
	struct FString SpectatorPawnClassName; // 0x7c0(0x10)
	struct FMulticastInlineDelegate ChangeViewModeDelegate; // 0x7d0(0x10)
	struct FMulticastInlineDelegate ChangeCameraTypeDelegate; // 0x7e0(0x10)
	struct FMulticastInlineDelegate ChangeCameraTypeByNetGuidDelegate; // 0x7f0(0x10)
	char pad_800[0x8]; // 0x800(0x08)
	struct TArray<struct FUserWidgetInfoForReplay> WidgetInfoArray; // 0x808(0x10)
	struct TMap<struct FString, struct UUserWidget*> ReplayWidgetMap; // 0x818(0x50)
	char pad_868[0x60]; // 0x868(0x60)
	struct UMK3DKillcamComponent* KillcamComponent; // 0x8c8(0x08)
	struct UMK3DTargetcamComponent* TargetcamComponent; // 0x8d0(0x08)
	char pad_8D8[0x10]; // 0x8d8(0x10)
	struct AActor* pTargetPlayerInRecording; // 0x8e8(0x08)
	struct FString AfterKillcamHUDClassName; // 0x8f0(0x10)
	struct AHUD* AfterKillcamHUDClass; // 0x900(0x08)
	char pad_908[0x10]; // 0x908(0x10)
	struct FString ReplayHUDClassName; // 0x918(0x10)
	struct AHUD* ReplayHUDClass; // 0x928(0x08)

	void ToggleReplayPauseAndResume(); // Function Engine.MK3DReplayController.ToggleReplayPauseAndResume // (Final|Native|Protected|BlueprintCallable) // @ game+0x3d7e560
	void TimerFuncPendingSetPlayerCameraNetGuid(); // Function Engine.MK3DReplayController.TimerFuncPendingSetPlayerCameraNetGuid // (Final|Native|Private) // @ game+0x3d7e540
	void TimerFuncPendingSetPlayerCamera(); // Function Engine.MK3DReplayController.TimerFuncPendingSetPlayerCamera // (Final|Native|Private) // @ game+0x3d7e520
	void TimerFuncClearTimerSetPlayerCameraNetGuid(); // Function Engine.MK3DReplayController.TimerFuncClearTimerSetPlayerCameraNetGuid // (Final|Native|Private) // @ game+0x3d7e500
	void TimerFuncClearTimerSetPlayerCamera(); // Function Engine.MK3DReplayController.TimerFuncClearTimerSetPlayerCamera // (Final|Native|Private) // @ game+0x3d7e4e0
	void ShowInGameReplayHUD(); // Function Engine.MK3DReplayController.ShowInGameReplayHUD // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7e4c0
	void SetSpeedByIndex(int32_t WantSpeedIndex); // Function Engine.MK3DReplayController.SetSpeedByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7e440
	void SetSpeed(float PlayTimeDilation); // Function Engine.MK3DReplayController.SetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7e3c0
	bool SetPlayerCamera(struct FString TargetName); // Function Engine.MK3DReplayController.SetPlayerCamera // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7e310
	bool SetFreeCamera(struct FVector& Pos, struct FRotator& Rot); // Function Engine.MK3DReplayController.SetFreeCamera // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d7e210
	bool ResumeReplay(); // Function Engine.MK3DReplayController.ResumeReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7e1e0
	void RestoreCameraLag(); // Function Engine.MK3DReplayController.RestoreCameraLag // (Final|Native|Private) // @ game+0x3d7e1c0
	bool PauseReplay(); // Function Engine.MK3DReplayController.PauseReplay // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7e060
	void OnSetSpeedDelegate__DelegateSignature(); // DelegateFunction Engine.MK3DReplayController.OnSetSpeedDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x23a3b60
	void OnReplayPause__DelegateSignature(bool bPaused); // DelegateFunction Engine.MK3DReplayController.OnReplayPause__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x23a3b60
	void OnReplayJumpComplete__DelegateSignature(bool bSuccess); // DelegateFunction Engine.MK3DReplayController.OnReplayJumpComplete__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x23a3b60
	void OnReplayJump__DelegateSignature(float TimeInSec); // DelegateFunction Engine.MK3DReplayController.OnReplayJump__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x23a3b60
	void OnGoToEndTime(); // Function Engine.MK3DReplayController.OnGoToEndTime // (Final|Native|Public) // @ game+0x3d7dcf0
	void OnGoToBeginTime(); // Function Engine.MK3DReplayController.OnGoToBeginTime // (Final|Native|Public) // @ game+0x3d7dcd0
	void OnFreeCamera(); // Function Engine.MK3DReplayController.OnFreeCamera // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7dcb0
	void OnFindActorsByCursorStop(); // Function Engine.MK3DReplayController.OnFindActorsByCursorStop // (Final|Native|Public) // @ game+0x3d7dc90
	void OnFindActorsByCursorStart(); // Function Engine.MK3DReplayController.OnFindActorsByCursorStart // (Final|Native|Public) // @ game+0x3d7dc70
	void MK3DReplayController_EnableReplayKillcamUI(bool bEnable); // Function Engine.MK3DReplayController.MK3DReplayController_EnableReplayKillcamUI // (Final|Exec|Native|Public) // @ game+0x3d7dbe0
	bool IsReplaying(); // Function Engine.MK3DReplayController.IsReplaying // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d7dbb0
	bool IsPlayingReplay(); // Function Engine.MK3DReplayController.IsPlayingReplay // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d7db80
	bool IsPlayingLiveReplay(); // Function Engine.MK3DReplayController.IsPlayingLiveReplay // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d7db50
	bool IsPlayingKillcamAndBlockUI(); // Function Engine.MK3DReplayController.IsPlayingKillcamAndBlockUI // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d7db20
	bool IsPlayingKillcam(); // Function Engine.MK3DReplayController.IsPlayingKillcam // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d7daf0
	bool IsPlayerViewMode(); // Function Engine.MK3DReplayController.IsPlayerViewMode // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d7dac0
	bool IsPlayerCamera(); // Function Engine.MK3DReplayController.IsPlayerCamera // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d7da90
	bool IsPaused(); // Function Engine.MK3DReplayController.IsPaused // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d7da60
	bool IsFreeCamera(); // Function Engine.MK3DReplayController.IsFreeCamera // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d7da30
	bool IsFollowViewMode(); // Function Engine.MK3DReplayController.IsFollowViewMode // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d7da00
	void IncreaseSpeedByIndex(); // Function Engine.MK3DReplayController.IncreaseSpeedByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7d9e0
	float GetTotalTimeInSec(); // Function Engine.MK3DReplayController.GetTotalTimeInSec // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7d9b0
	struct APawn* GetTargetPlayer(); // Function Engine.MK3DReplayController.GetTargetPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d7d980
	float GetSpeed(); // Function Engine.MK3DReplayController.GetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7d950
	float GetReplayJumpDelay(); // Function Engine.MK3DReplayController.GetReplayJumpDelay // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7d920
	enum class ECameraType GetReplayCameraType(); // Function Engine.MK3DReplayController.GetReplayCameraType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d7d8f0
	struct ACharacter* GetPlayerCharacter(); // Function Engine.MK3DReplayController.GetPlayerCharacter // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d7d8c0
	enum class ECameraType GetLatestReplayCameraType(); // Function Engine.MK3DReplayController.GetLatestReplayCameraType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d7d890
	int32_t GetCurrnetSpeedIndex(); // Function Engine.MK3DReplayController.GetCurrnetSpeedIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7d860
	float GetCurrentTimeInSec(); // Function Engine.MK3DReplayController.GetCurrentTimeInSec // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7d830
	bool FindViewTargetByName(struct FString TargetName, struct AActor*& OutTarget); // Function Engine.MK3DReplayController.FindViewTargetByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3d7d730
	int32_t FindSpeedIndex(float fSpeed); // Function Engine.MK3DReplayController.FindSpeedIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7d6a0
	void DecreaseSpeedByIndex(); // Function Engine.MK3DReplayController.DecreaseSpeedByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7d680
	void ChangeViewModeDelegate__DelegateSignature(enum class EReplayViewMode ViewMode); // DelegateFunction Engine.MK3DReplayController.ChangeViewModeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x23a3b60
	void ChangeCameraTypeDelegate__DelegateSignature(enum class ECameraType CameraType, struct FString TargetPlayerName); // DelegateFunction Engine.MK3DReplayController.ChangeCameraTypeDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x23a3b60
	void ChangeCameraTypeByNetGuidDelegate__DelegateSignature(enum class ECameraType CameraType, struct FString TargetPlayerNetGuid); // DelegateFunction Engine.MK3DReplayController.ChangeCameraTypeByNetGuidDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x23a3b60
};

// Class Engine.DefaultPawn
// Size: 0x3b8 (Inherited: 0x390)
struct ADefaultPawn : APawn {
	float BaseTurnRate; // 0x390(0x04)
	float BaseLookUpRate; // 0x394(0x04)
	struct UPawnMovementComponent* MovementComponent; // 0x398(0x08)
	struct USphereComponent* CollisionComponent; // 0x3a0(0x08)
	struct UStaticMeshComponent* MeshComponent; // 0x3a8(0x08)
	char bAddDefaultMovementBindings : 1; // 0x3b0(0x01)
	char pad_3B0_1 : 7; // 0x3b0(0x01)
	char pad_3B1[0x7]; // 0x3b1(0x07)

	void TurnAtRate(float Rate); // Function Engine.DefaultPawn.TurnAtRate // (Native|Public|BlueprintCallable) // @ game+0x3cb6830
	void MoveUp_World(float Val); // Function Engine.DefaultPawn.MoveUp_World // (Native|Public|BlueprintCallable) // @ game+0x3cb5ec0
	void MoveRight(float Val); // Function Engine.DefaultPawn.MoveRight // (Native|Public|BlueprintCallable) // @ game+0x3cb5e40
	void MoveForward(float Val); // Function Engine.DefaultPawn.MoveForward // (Native|Public|BlueprintCallable) // @ game+0x3cb5dc0
	void LookUpAtRate(float Rate); // Function Engine.DefaultPawn.LookUpAtRate // (Native|Public|BlueprintCallable) // @ game+0x3cb5d40
};

// Class Engine.SpectatorPawn
// Size: 0x3b8 (Inherited: 0x3b8)
struct ASpectatorPawn : ADefaultPawn {
};

// Class Engine.MK3DSpectatorPawn
// Size: 0x3b8 (Inherited: 0x3b8)
struct AMK3DSpectatorPawn : ASpectatorPawn {

	void MK3DSpectatorPawn_SetMaxSpeed(float fSpeed); // Function Engine.MK3DSpectatorPawn.MK3DSpectatorPawn_SetMaxSpeed // (Final|Exec|Native|Public) // @ game+0x3d82700
	void MK3DSpectatorPawn_SetCollision(struct FString strCollision); // Function Engine.MK3DSpectatorPawn.MK3DSpectatorPawn_SetCollision // (Final|Exec|Native|Public) // @ game+0x1f64ff0
};

// Class Engine.PhysicalMaterial
// Size: 0x80 (Inherited: 0x28)
struct UPhysicalMaterial : UObject {
	float Friction; // 0x28(0x04)
	enum class EFrictionCombineMode FrictionCombineMode; // 0x2c(0x01)
	bool bOverrideFrictionCombineMode; // 0x2d(0x01)
	char pad_2E[0x2]; // 0x2e(0x02)
	float Restitution; // 0x30(0x04)
	enum class EFrictionCombineMode RestitutionCombineMode; // 0x34(0x01)
	bool bOverrideRestitutionCombineMode; // 0x35(0x01)
	char pad_36[0x2]; // 0x36(0x02)
	float Density; // 0x38(0x04)
	float RaiseMassToPower; // 0x3c(0x04)
	float DestructibleDamageThresholdScale; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct UPhysicalMaterialPropertyBase* PhysicalMaterialProperty; // 0x48(0x08)
	enum class EPhysicalSurface SurfaceType; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	float TireFrictionScale; // 0x54(0x04)
	struct TArray<struct FTireFrictionScalePair> TireFrictionScales; // 0x58(0x10)
	char pad_68[0x18]; // 0x68(0x18)
};

// Class Engine.PlayerCameraManager
// Size: 0x2b40 (Inherited: 0x320)
struct APlayerCameraManager : AActor {
	struct APlayerController* PCOwner; // 0x320(0x08)
	struct USceneComponent* TransformComponent; // 0x328(0x08)
	char pad_330[0x8]; // 0x330(0x08)
	float DefaultFOV; // 0x338(0x04)
	char pad_33C[0x4]; // 0x33c(0x04)
	float DefaultOrthoWidth; // 0x340(0x04)
	char pad_344[0x4]; // 0x344(0x04)
	float DefaultAspectRatio; // 0x348(0x04)
	char pad_34C[0x44]; // 0x34c(0x44)
	struct FCameraCacheEntry CameraCache; // 0x390(0x660)
	struct FCameraCacheEntry LastFrameCameraCache; // 0x9f0(0x660)
	struct FTViewTarget ViewTarget; // 0x1050(0x670)
	struct FTViewTarget PendingViewTarget; // 0x16c0(0x670)
	char pad_1D30[0x30]; // 0x1d30(0x30)
	struct FCameraCacheEntry CameraCachePrivate; // 0x1d60(0x660)
	struct FCameraCacheEntry LastFrameCameraCachePrivate; // 0x23c0(0x660)
	struct TArray<struct UCameraModifier*> ModifierList; // 0x2a20(0x10)
	struct TArray<struct UCameraModifier*> DefaultModifiers; // 0x2a30(0x10)
	float FreeCamDistance; // 0x2a40(0x04)
	struct FVector FreeCamOffset; // 0x2a44(0x0c)
	struct FVector ViewTargetOffset; // 0x2a50(0x0c)
	char pad_2A5C[0x14]; // 0x2a5c(0x14)
	struct TArray<struct AEmitterCameraLensEffectBase*> CameraLensEffects; // 0x2a70(0x10)
	struct UCameraModifier_CameraShake* CachedCameraShakeMod; // 0x2a80(0x08)
	struct UCameraAnimInst* AnimInstPool[0x8]; // 0x2a88(0x40)
	struct TArray<struct FPostProcessSettings> PostProcessBlendCache; // 0x2ac8(0x10)
	char pad_2AD8[0x10]; // 0x2ad8(0x10)
	struct TArray<struct UCameraAnimInst*> ActiveAnims; // 0x2ae8(0x10)
	struct TArray<struct UCameraAnimInst*> FreeAnims; // 0x2af8(0x10)
	struct ACameraActor* AnimCameraActor; // 0x2b08(0x08)
	char bIsOrthographic : 1; // 0x2b10(0x01)
	char bDefaultConstrainAspectRatio : 1; // 0x2b10(0x01)
	char pad_2B10_2 : 4; // 0x2b10(0x01)
	char bClientSimulatingViewTarget : 1; // 0x2b10(0x01)
	char bUseClientSideCameraUpdates : 1; // 0x2b10(0x01)
	char pad_2B11_0 : 2; // 0x2b11(0x01)
	char bGameCameraCutThisFrame : 1; // 0x2b11(0x01)
	char pad_2B11_3 : 5; // 0x2b11(0x01)
	char pad_2B12[0x2]; // 0x2b12(0x02)
	float ViewPitchMin; // 0x2b14(0x04)
	float ViewPitchMax; // 0x2b18(0x04)
	float ViewYawMin; // 0x2b1c(0x04)
	float ViewYawMax; // 0x2b20(0x04)
	float ViewRollMin; // 0x2b24(0x04)
	float ViewRollMax; // 0x2b28(0x04)
	char pad_2B2C[0x4]; // 0x2b2c(0x04)
	float ServerUpdateCameraTimeout; // 0x2b30(0x04)
	char pad_2B34[0xc]; // 0x2b34(0x0c)

	void StopCameraShake(struct UCameraShake* ShakeInstance, bool bImmediately); // Function Engine.PlayerCameraManager.StopCameraShake // (Native|Public|BlueprintCallable) // @ game+0x3daa2c0
	void StopCameraFade(); // Function Engine.PlayerCameraManager.StopCameraFade // (Native|Public|BlueprintCallable) // @ game+0x2023d00
	void StopCameraAnimInst(struct UCameraAnimInst* AnimInst, bool bImmediate); // Function Engine.PlayerCameraManager.StopCameraAnimInst // (Native|Public|BlueprintCallable) // @ game+0x3daa1f0
	void StopAllInstancesOfCameraShakeFromSource(struct UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource // (Native|Public|BlueprintCallable) // @ game+0x3daa120
	void StopAllInstancesOfCameraShake(struct UCameraShake* Shake, bool bImmediately); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraShake // (Native|Public|BlueprintCallable) // @ game+0x3daa050
	void StopAllInstancesOfCameraAnim(struct UCameraAnim* Anim, bool bImmediate); // Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim // (Native|Public|BlueprintCallable) // @ game+0x3da9f80
	void StopAllCameraShakes(bool bImmediately); // Function Engine.PlayerCameraManager.StopAllCameraShakes // (Native|Public|BlueprintCallable) // @ game+0x3da9ef0
	void StopAllCameraAnims(bool bImmediate); // Function Engine.PlayerCameraManager.StopAllCameraAnims // (Native|Public|BlueprintCallable) // @ game+0x3da9e60
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, struct FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished); // Function Engine.PlayerCameraManager.StartCameraFade // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da9c90
	void SetManualCameraFade(float InFadeAmount, struct FLinearColor Color, bool bInFadeAudio); // Function Engine.PlayerCameraManager.SetManualCameraFade // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da9b70
	void SetGameCameraCutThisFrame(); // Function Engine.PlayerCameraManager.SetGameCameraCutThisFrame // (Final|Native|Public|BlueprintCallable) // @ game+0x3da9b50
	bool RemoveCameraModifier(struct UCameraModifier* ModifierToRemove); // Function Engine.PlayerCameraManager.RemoveCameraModifier // (Native|Public|BlueprintCallable) // @ game+0x3da9ab0
	void RemoveCameraLensEffect(struct AEmitterCameraLensEffectBase* Emitter); // Function Engine.PlayerCameraManager.RemoveCameraLensEffect // (Native|Public|BlueprintCallable) // @ game+0x3cd3f50
	struct UCameraShake* PlayCameraShakeFromSource(struct UCameraShake* ShakeClass, struct UCameraShakeSourceComponent* SourceComponent); // Function Engine.PlayerCameraManager.PlayCameraShakeFromSource // (Native|Public|BlueprintCallable) // @ game+0x3da99e0
	struct UCameraShake* PlayCameraShake(struct UCameraShake* ShakeClass, float Scale, enum class ECameraAnimPlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.PlayCameraShake // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da9870
	struct UCameraAnimInst* PlayCameraAnim(struct UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum class ECameraAnimPlaySpace PlaySpace, struct FRotator UserPlaySpaceRot); // Function Engine.PlayerCameraManager.PlayCameraAnim // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da9590
	void PhotographyCameraModify(struct FVector NewCameraLocation, struct FVector PreviousCameraLocation, struct FVector OriginalCameraLocation, struct FVector& ResultCameraLocation); // Function Engine.PlayerCameraManager.PhotographyCameraModify // (BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3da9410
	void OnPhotographySessionStart(); // Function Engine.PlayerCameraManager.OnPhotographySessionStart // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0x1f10660
	void OnPhotographySessionEnd(); // Function Engine.PlayerCameraManager.OnPhotographySessionEnd // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0x1f11ef0
	void OnPhotographyMultiPartCaptureStart(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0x1237ce0
	void OnPhotographyMultiPartCaptureEnd(); // Function Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd // (BlueprintCosmetic|Native|Event|Public|BlueprintEvent) // @ game+0x1e477f0
	struct APlayerController* GetOwningPlayerController(); // Function Engine.PlayerCameraManager.GetOwningPlayerController // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da9230
	float GetFOVAngle(); // Function Engine.PlayerCameraManager.GetFOVAngle // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da8f60
	struct FRotator GetCameraRotation(); // Function Engine.PlayerCameraManager.GetCameraRotation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da8f20
	struct FVector GetCameraLocation(); // Function Engine.PlayerCameraManager.GetCameraLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da8ee0
	struct UCameraModifier* FindCameraModifierByClass(struct UCameraModifier* ModifierClass); // Function Engine.PlayerCameraManager.FindCameraModifierByClass // (Native|Public|BlueprintCallable) // @ game+0x3da8e40
	void ClearCameraLensEffects(); // Function Engine.PlayerCameraManager.ClearCameraLensEffects // (Native|Public|BlueprintCallable) // @ game+0x2022500
	bool BlueprintUpdateCamera(struct AActor* CameraTarget, struct FVector& NewCameraLocation, struct FRotator& NewCameraRotation, float& NewCameraFOV); // Function Engine.PlayerCameraManager.BlueprintUpdateCamera // (BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x23a3b60
	struct UCameraModifier* AddNewCameraModifier(struct UCameraModifier* ModifierClass); // Function Engine.PlayerCameraManager.AddNewCameraModifier // (Native|Public|BlueprintCallable) // @ game+0x3da8da0
	struct AEmitterCameraLensEffectBase* AddCameraLensEffect(struct AEmitterCameraLensEffectBase* LensEffectEmitterClass); // Function Engine.PlayerCameraManager.AddCameraLensEffect // (Native|Public|BlueprintCallable) // @ game+0x3da8d00
};

// Class Engine.MKPlayerStateEx
// Size: 0x328 (Inherited: 0x320)
struct AMKPlayerStateEx : AInfo {
	struct APlayerState* SelfPlayerState; // 0x320(0x08)
};

// Class Engine.PlayerState
// Size: 0x428 (Inherited: 0x328)
struct APlayerState : AMKPlayerStateEx {
	float Score; // 0x328(0x04)
	int32_t PlayerId; // 0x32c(0x04)
	char Ping; // 0x330(0x01)
	char pad_331[0x1]; // 0x331(0x01)
	char bShouldUpdateReplicatedPing : 1; // 0x332(0x01)
	char bIsSpectator : 1; // 0x332(0x01)
	char bOnlySpectator : 1; // 0x332(0x01)
	char bIsABot : 1; // 0x332(0x01)
	char pad_332_4 : 1; // 0x332(0x01)
	char bIsInactive : 1; // 0x332(0x01)
	char bFromPreviousLevel : 1; // 0x332(0x01)
	char pad_332_7 : 1; // 0x332(0x01)
	char pad_333[0x1]; // 0x333(0x01)
	int32_t StartTime; // 0x334(0x04)
	struct ULocalMessage* EngineMessageClass; // 0x338(0x08)
	char pad_340[0x8]; // 0x340(0x08)
	struct FString SavedNetworkAddress; // 0x348(0x10)
	struct FUniqueNetIdRepl UniqueID; // 0x358(0x28)
	char pad_380[0x8]; // 0x380(0x08)
	struct APawn* PawnPrivate; // 0x388(0x08)
	char pad_390[0x78]; // 0x390(0x78)
	struct FString PlayerNamePrivate; // 0x408(0x10)
	char pad_418[0x10]; // 0x418(0x10)

	void ReceiveOverrideWith(struct APlayerState* OldPlayerState); // Function Engine.PlayerState.ReceiveOverrideWith // (Event|Protected|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveCopyProperties(struct APlayerState* NewPlayerState); // Function Engine.PlayerState.ReceiveCopyProperties // (Event|Protected|BlueprintEvent) // @ game+0x23a3b60
	void OnRep_UniqueId(); // Function Engine.PlayerState.OnRep_UniqueId // (Native|Public) // @ game+0x1237f50
	void OnRep_Score(); // Function Engine.PlayerState.OnRep_Score // (Native|Public) // @ game+0x1f10660
	void OnRep_PlayerName(); // Function Engine.PlayerState.OnRep_PlayerName // (Native|Public) // @ game+0x11cd620
	void OnRep_PlayerId(); // Function Engine.PlayerState.OnRep_PlayerId // (Native|Public) // @ game+0x1237c10
	void OnRep_bIsInactive(); // Function Engine.PlayerState.OnRep_bIsInactive // (Native|Public) // @ game+0x3c7d630
	struct FString GetPlayerName(); // Function Engine.PlayerState.GetPlayerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3db9390
};

// Class Engine.MK3DReplayData
// Size: 0x30 (Inherited: 0x28)
struct UMK3DReplayData : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.MK3DEventFunction
// Size: 0x28 (Inherited: 0x28)
struct UMK3DEventFunction : UBlueprintFunctionLibrary {

	bool UpdateKillcamInfo(struct UObject* WorldContextObject, struct AActor* Recorder, struct AActor* Target, struct AActor* Killer, struct AActor* Victim, bool bUpdateTime); // Function Engine.MK3DEventFunction.UpdateKillcamInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d7e580
	void PlaybackKillcam(struct UObject* WorldContextObject, bool bAgain); // Function Engine.MK3DEventFunction.PlaybackKillcam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d7e090
	bool AddMK3DTargetEventEx(struct UObject* WorldContextObject, struct APlayerState* TargetPlayerState); // Function Engine.MK3DEventFunction.AddMK3DTargetEventEx // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d7d5c0
	bool AddMK3DKillEventExWithState(struct UObject* WorldContextObject, enum class EKillType killType, struct ACharacter* Killer, struct APlayerState* KillerState, struct ACharacter* Victim, struct APlayerState* VictimState, struct FString DamageInfo); // Function Engine.MK3DEventFunction.AddMK3DKillEventExWithState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d7d3b0
	bool AddMK3DKillEventEx(struct UObject* WorldContextObject, enum class EKillType killType, struct AActor* Murderer, struct AActor* Victim, struct FString DamageInfo); // Function Engine.MK3DEventFunction.AddMK3DKillEventEx // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d7d220
	bool AddMK3DKillEvent(struct UObject* WorldContextObject, enum class EKillType killType, struct FMK3DKillData MK3DKillData); // Function Engine.MK3DEventFunction.AddMK3DKillEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d7d010
};

// Class Engine.SceneCaptureComponent
// Size: 0x2c0 (Inherited: 0x220)
struct USceneCaptureComponent : USceneComponent {
	enum class ESceneCapturePrimitiveRenderMode PrimitiveRenderMode; // 0x220(0x01)
	char bTonemapPropagateAlpha : 1; // 0x221(0x01)
	char bUsePostProcessMaterial : 1; // 0x221(0x01)
	char bUseDirectionalLights : 1; // 0x221(0x01)
	char pad_221_3 : 5; // 0x221(0x01)
	enum class ESceneCaptureSource CaptureSource; // 0x222(0x01)
	char bCaptureEveryFrame : 1; // 0x223(0x01)
	char bCaptureOnMovement : 1; // 0x223(0x01)
	char pad_223_2 : 6; // 0x223(0x01)
	bool bAlwaysPersistRenderingState; // 0x224(0x01)
	char pad_225[0x3]; // 0x225(0x03)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> HiddenComponents; // 0x228(0x10)
	struct TArray<struct AActor*> HiddenActors; // 0x238(0x10)
	struct TArray<struct TWeakObjectPtr<struct UPrimitiveComponent>> ShowOnlyComponents; // 0x248(0x10)
	struct TArray<struct AActor*> ShowOnlyActors; // 0x258(0x10)
	float LODDistanceFactor; // 0x268(0x04)
	float MaxViewDistanceOverride; // 0x26c(0x04)
	int32_t CaptureSortPriority; // 0x270(0x04)
	bool bUseRayTracingIfEnabled; // 0x274(0x01)
	char pad_275[0x3]; // 0x275(0x03)
	struct TArray<struct FEngineShowFlagsSetting> ShowFlagSettings; // 0x278(0x10)
	char pad_288[0x10]; // 0x288(0x10)
	struct FString ProfilingEventName; // 0x298(0x10)
	char pad_2A8[0x18]; // 0x2a8(0x18)

	void ShowOnlyComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.ShowOnlyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd57c0
	void ShowOnlyActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.ShowOnlyActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd56f0
	void SetCaptureSortPriority(int32_t NewCaptureSortPriority); // Function Engine.SceneCaptureComponent.SetCaptureSortPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd52a0
	void RemoveShowOnlyComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.RemoveShowOnlyComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd50e0
	void RemoveShowOnlyActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd5010
	void HideComponent(struct UPrimitiveComponent* InComponent); // Function Engine.SceneCaptureComponent.HideComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd2c10
	void HideActorComponents(struct AActor* InActor, bool bIncludeFromChildActors); // Function Engine.SceneCaptureComponent.HideActorComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd2b40
	void ClearShowOnlyComponents(); // Function Engine.SceneCaptureComponent.ClearShowOnlyComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd2220
	void ClearHiddenComponents(); // Function Engine.SceneCaptureComponent.ClearHiddenComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd2200
};

// Class Engine.SceneCaptureComponent2D
// Size: 0x930 (Inherited: 0x2c0)
struct USceneCaptureComponent2D : USceneCaptureComponent {
	enum class ECameraProjectionMode ProjectionType; // 0x2b8(0x01)
	float FOVAngle; // 0x2bc(0x04)
	float OrthoWidth; // 0x2c0(0x04)
	struct UTextureRenderTarget2D* TextureTarget; // 0x2c8(0x08)
	enum class ESceneCaptureCompositeMode CompositeMode; // 0x2d0(0x01)
	char pad_2D2[0xe]; // 0x2d2(0x0e)
	struct FPostProcessSettings PostProcessSettings; // 0x2e0(0x5c0)
	float PostProcessBlendWeight; // 0x8a0(0x04)
	char bOverride_CustomNearClippingPlane : 1; // 0x8a4(0x01)
	char pad_8A4_1 : 7; // 0x8a4(0x01)
	char pad_8A5[0x3]; // 0x8a5(0x03)
	float CustomNearClippingPlane; // 0x8a8(0x04)
	bool bUseCustomProjectionMatrix; // 0x8ac(0x01)
	char pad_8AD[0x3]; // 0x8ad(0x03)
	struct FMatrix CustomProjectionMatrix; // 0x8b0(0x40)
	bool bEnableClipPlane; // 0x8f0(0x01)
	char pad_8F1[0x3]; // 0x8f1(0x03)
	struct FVector ClipPlaneBase; // 0x8f4(0x0c)
	struct FVector ClipPlaneNormal; // 0x900(0x0c)
	char bCameraCutThisFrame : 1; // 0x90c(0x01)
	char bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1; // 0x90c(0x01)
	char pad_90C_2 : 6; // 0x90c(0x01)
	char pad_90D[0x3]; // 0x90d(0x03)
	bool bDisableFlipCopyGLES; // 0x910(0x01)
	char pad_911[0x1f]; // 0x911(0x1f)

	void CaptureScene(); // Function Engine.SceneCaptureComponent2D.CaptureScene // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd21e0
	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.SceneCaptureComponent2D.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd2090
};

// Class Engine.ArrowComponent
// Size: 0x4b0 (Inherited: 0x4a0)
struct UArrowComponent : UPrimitiveComponent {
	struct FColor ArrowColor; // 0x4a0(0x04)
	float ArrowSize; // 0x4a4(0x04)
	float ScreenSize; // 0x4a8(0x04)
	char bIsScreenSizeScaled : 1; // 0x4ac(0x01)
	char bTreatAsASprite : 1; // 0x4ac(0x01)
	char pad_4AC_2 : 6; // 0x4ac(0x01)
	char pad_4AD[0x3]; // 0x4ad(0x03)

	void SetArrowColor(struct FLinearColor NewColor); // Function Engine.ArrowComponent.SetArrowColor // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c75c20
};

// Class Engine.NavigationObjectBase
// Size: 0x348 (Inherited: 0x320)
struct ANavigationObjectBase : AActor {
	char pad_320[0x8]; // 0x320(0x08)
	struct UCapsuleComponent* CapsuleComponent; // 0x328(0x08)
	struct UBillboardComponent* GoodSprite; // 0x330(0x08)
	struct UBillboardComponent* BadSprite; // 0x338(0x08)
	char bIsPIEPlayerStart : 1; // 0x340(0x01)
	char pad_340_1 : 7; // 0x340(0x01)
	char pad_341[0x7]; // 0x341(0x07)
};

// Class Engine.PlayerStart
// Size: 0x350 (Inherited: 0x348)
struct APlayerStart : ANavigationObjectBase {
	struct FName PlayerStartTag; // 0x348(0x08)
};

// Class Engine.ProjectileMovementComponent
// Size: 0x1d0 (Inherited: 0xf0)
struct UProjectileMovementComponent : UMovementComponent {
	float InitialSpeed; // 0xf0(0x04)
	float MaxSpeed; // 0xf4(0x04)
	char bRotationFollowsVelocity : 1; // 0xf8(0x01)
	char bRotationRemainsVertical : 1; // 0xf8(0x01)
	char bShouldBounce : 1; // 0xf8(0x01)
	char bInitialVelocityInLocalSpace : 1; // 0xf8(0x01)
	char bForceSubStepping : 1; // 0xf8(0x01)
	char bSimulationEnabled : 1; // 0xf8(0x01)
	char bSweepCollision : 1; // 0xf8(0x01)
	char bIsHomingProjectile : 1; // 0xf8(0x01)
	char bBounceAngleAffectsFriction : 1; // 0xf9(0x01)
	char bIsSliding : 1; // 0xf9(0x01)
	char bInterpMovement : 1; // 0xf9(0x01)
	char bInterpRotation : 1; // 0xf9(0x01)
	char pad_F9_4 : 4; // 0xf9(0x01)
	char pad_FA[0x2]; // 0xfa(0x02)
	float PreviousHitTime; // 0xfc(0x04)
	struct FVector PreviousHitNormal; // 0x100(0x0c)
	float ProjectileGravityScale; // 0x10c(0x04)
	float Buoyancy; // 0x110(0x04)
	float Bounciness; // 0x114(0x04)
	float Friction; // 0x118(0x04)
	float BounceVelocityStopSimulatingThreshold; // 0x11c(0x04)
	float MinFrictionFraction; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	struct FMulticastInlineDelegate OnProjectileBounce; // 0x128(0x10)
	struct FMulticastInlineDelegate OnProjectileStop; // 0x138(0x10)
	float HomingAccelerationMagnitude; // 0x148(0x04)
	struct TWeakObjectPtr<struct USceneComponent> HomingTargetComponent; // 0x14c(0x08)
	float MaxSimulationTimeStep; // 0x154(0x04)
	int32_t MaxSimulationIterations; // 0x158(0x04)
	int32_t BounceAdditionalIterations; // 0x15c(0x04)
	float InterpLocationTime; // 0x160(0x04)
	float InterpRotationTime; // 0x164(0x04)
	float InterpLocationMaxLagDistance; // 0x168(0x04)
	float InterpLocationSnapToTargetDistance; // 0x16c(0x04)
	char pad_170[0x60]; // 0x170(0x60)

	void StopSimulating(struct FHitResult& HitResult); // Function Engine.ProjectileMovementComponent.StopSimulating // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3dc5550
	void SetVelocityInLocalSpace(struct FVector NewVelocity); // Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dc54c0
	void SetInterpolatedComponent(struct USceneComponent* Component); // Function Engine.ProjectileMovementComponent.SetInterpolatedComponent // (Native|Public|BlueprintCallable) // @ game+0x3dc5330
	void ResetInterpolation(); // Function Engine.ProjectileMovementComponent.ResetInterpolation // (Native|Public|BlueprintCallable) // @ game+0x3dc5210
	void OnProjectileStopDelegate__DelegateSignature(struct FHitResult& ImpactResult); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x23a3b60
	void OnProjectileBounceDelegate__DelegateSignature(struct FHitResult& ImpactResult, struct FVector& ImpactVelocity); // DelegateFunction Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x23a3b60
	void MoveInterpolationTarget(struct FVector& NewLocation, struct FRotator& NewRotation); // Function Engine.ProjectileMovementComponent.MoveInterpolationTarget // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dc50a0
	struct FVector LimitVelocity(struct FVector NewVelocity); // Function Engine.ProjectileMovementComponent.LimitVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dc4ff0
	bool IsVelocityUnderSimulationThreshold(); // Function Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dc4f90
	bool IsInterpolationComplete(); // Function Engine.ProjectileMovementComponent.IsInterpolationComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dc4f60
};

// Class Engine.PrimaryDataAsset
// Size: 0x30 (Inherited: 0x30)
struct UPrimaryDataAsset : UDataAsset {
};

// Class Engine.GameUserSettings
// Size: 0x150 (Inherited: 0x28)
struct UGameUserSettings : UObject {
	bool bUseVSync; // 0x28(0x01)
	bool bIsSmoothFrameRate; // 0x29(0x01)
	bool bUseDynamicResolution; // 0x2a(0x01)
	char pad_2B[0x55]; // 0x2b(0x55)
	uint32_t ResolutionSizeX; // 0x80(0x04)
	uint32_t ResolutionSizeY; // 0x84(0x04)
	uint32_t LastUserConfirmedResolutionSizeX; // 0x88(0x04)
	uint32_t LastUserConfirmedResolutionSizeY; // 0x8c(0x04)
	int32_t WindowPosX; // 0x90(0x04)
	int32_t WindowPosY; // 0x94(0x04)
	int32_t FullscreenMode; // 0x98(0x04)
	int32_t LastConfirmedFullscreenMode; // 0x9c(0x04)
	int32_t PreferredFullscreenMode; // 0xa0(0x04)
	uint32_t Version; // 0xa4(0x04)
	int32_t AudioQualityLevel; // 0xa8(0x04)
	int32_t LastConfirmedAudioQualityLevel; // 0xac(0x04)
	float FrameRateLimit; // 0xb0(0x04)
	float LobbyFrameRateLimit; // 0xb4(0x04)
	char pad_B8[0x4]; // 0xb8(0x04)
	int32_t DesiredScreenWidth; // 0xbc(0x04)
	bool bUseDesiredScreenHeight; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	int32_t DesiredScreenHeight; // 0xc4(0x04)
	int32_t LastUserConfirmedDesiredScreenWidth; // 0xc8(0x04)
	int32_t LastUserConfirmedDesiredScreenHeight; // 0xcc(0x04)
	float LastRecommendedScreenWidth; // 0xd0(0x04)
	float LastRecommendedScreenHeight; // 0xd4(0x04)
	float LastCPUBenchmarkResult; // 0xd8(0x04)
	float LastGPUBenchmarkResult; // 0xdc(0x04)
	struct TArray<float> LastCPUBenchmarkSteps; // 0xe0(0x10)
	struct TArray<float> LastGPUBenchmarkSteps; // 0xf0(0x10)
	struct FString LastCPUBrand; // 0x100(0x10)
	struct FString LastGPUBrand; // 0x110(0x10)
	int32_t LastInstallStorageType; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	int64_t LastTotalGraphicsMemory; // 0x128(0x08)
	float LastGPUBenchmarkMultiplier; // 0x130(0x04)
	bool bUseHDRDisplayOutput; // 0x134(0x01)
	char pad_135[0x3]; // 0x135(0x03)
	int32_t HDRDisplayOutputNits; // 0x138(0x04)
	bool ShowHUD; // 0x13c(0x01)
	char pad_13D[0x3]; // 0x13d(0x03)
	struct FMulticastInlineDelegate OnGameUserSettingsUINeedsUpdate; // 0x140(0x10)

	void ValidateSettings(); // Function Engine.GameUserSettings.ValidateSettings // (Native|Public|BlueprintCallable) // @ game+0x2ed3180
	bool SupportsHDRDisplayOutput(); // Function Engine.GameUserSettings.SupportsHDRDisplayOutput // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce4be0
	void SetVSyncEnabled(bool bEnable); // Function Engine.GameUserSettings.SetVSyncEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce4a50
	void SetVisualEffectQuality(int32_t Value); // Function Engine.GameUserSettings.SetVisualEffectQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce4b60
	void SetViewDistanceQuality(int32_t Value); // Function Engine.GameUserSettings.SetViewDistanceQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce4ae0
	void SetToDefaults(bool bIgnoreResolutionSettings); // Function Engine.GameUserSettings.SetToDefaults // (Native|Public|BlueprintCallable) // @ game+0x3ce49c0
	void SetTextureQuality(int32_t Value); // Function Engine.GameUserSettings.SetTextureQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce4940
	void SetSmoothFrameRateEnabled(bool bEnable); // Function Engine.GameUserSettings.SetSmoothFrameRateEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce48b0
	void SetShadowQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadowQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce4830
	void SetShadingQuality(int32_t Value); // Function Engine.GameUserSettings.SetShadingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce47b0
	void SetScreenResolution(struct FIntPoint Resolution); // Function Engine.GameUserSettings.SetScreenResolution // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3ce4730
	void SetResolutionScaleValueEx(float NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValueEx // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce46b0
	void SetResolutionScaleValue(int32_t NewScaleValue); // Function Engine.GameUserSettings.SetResolutionScaleValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce4630
	void SetResolutionScaleNormalized(float NewScaleNormalized); // Function Engine.GameUserSettings.SetResolutionScaleNormalized // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce45b0
	void SetPostProcessingQuality(int32_t Value); // Function Engine.GameUserSettings.SetPostProcessingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce4530
	void SetOverallScalabilityLevel(int32_t Value); // Function Engine.GameUserSettings.SetOverallScalabilityLevel // (Native|Public|BlueprintCallable) // @ game+0x3ce44a0
	void SetLobbyFrameRateLimit(float NewLimit); // Function Engine.GameUserSettings.SetLobbyFrameRateLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce4420
	void SetFullscreenMode(enum class EWindowMode InFullscreenMode); // Function Engine.GameUserSettings.SetFullscreenMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce43a0
	void SetFrameRateLimit(float NewLimit); // Function Engine.GameUserSettings.SetFrameRateLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce4320
	void SetFoliageQuality(int32_t Value); // Function Engine.GameUserSettings.SetFoliageQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce42a0
	void SetDynamicResolutionEnabled(bool bEnable); // Function Engine.GameUserSettings.SetDynamicResolutionEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce4210
	void SetBenchmarkFallbackValues(); // Function Engine.GameUserSettings.SetBenchmarkFallbackValues // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce41f0
	void SetAudioQualityLevel(int32_t QualityLevel); // Function Engine.GameUserSettings.SetAudioQualityLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce4170
	void SetAntiAliasingQuality(int32_t Value); // Function Engine.GameUserSettings.SetAntiAliasingQuality // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce40f0
	void SaveSettings(); // Function Engine.GameUserSettings.SaveSettings // (Native|Public|BlueprintCallable) // @ game+0x1e9d1e0
	void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier); // Function Engine.GameUserSettings.RunHardwareBenchmark // (Native|Public|BlueprintCallable) // @ game+0x3ce3ff0
	void RevertVideoMode(); // Function Engine.GameUserSettings.RevertVideoMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce3fd0
	void ResetToCurrentSettings(); // Function Engine.GameUserSettings.ResetToCurrentSettings // (Native|Public|BlueprintCallable) // @ game+0x3c517a0
	void LoadSettings(bool bForceReload); // Function Engine.GameUserSettings.LoadSettings // (Native|Public|BlueprintCallable) // @ game+0x3ce3f40
	bool IsVSyncEnabled(); // Function Engine.GameUserSettings.IsVSyncEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x107ba40
	bool IsVSyncDirty(); // Function Engine.GameUserSettings.IsVSyncDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3f10
	bool IsSmoothFrameRate(); // Function Engine.GameUserSettings.IsSmoothFrameRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3ee0
	bool IsShowingHUD(); // Function Engine.GameUserSettings.IsShowingHUD // (Native|Public|BlueprintCallable) // @ game+0x3ce3eb0
	bool IsScreenResolutionDirty(); // Function Engine.GameUserSettings.IsScreenResolutionDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3e80
	bool IsHDREnabled(); // Function Engine.GameUserSettings.IsHDREnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3e50
	bool IsFullscreenModeDirty(); // Function Engine.GameUserSettings.IsFullscreenModeDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3e20
	bool IsDynamicResolutionEnabled(); // Function Engine.GameUserSettings.IsDynamicResolutionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3df0
	bool IsDynamicResolutionDirty(); // Function Engine.GameUserSettings.IsDynamicResolutionDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3dc0
	bool IsDirty(); // Function Engine.GameUserSettings.IsDirty // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3d90
	int32_t GetVisualEffectQuality(); // Function Engine.GameUserSettings.GetVisualEffectQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x107b3a0
	int32_t GetViewDistanceQuality(); // Function Engine.GameUserSettings.GetViewDistanceQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3d00
	int32_t GetTextureQuality(); // Function Engine.GameUserSettings.GetTextureQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3cd0
	int32_t GetSyncInterval(); // Function Engine.GameUserSettings.GetSyncInterval // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3ce3ca0
	int32_t GetShadowQuality(); // Function Engine.GameUserSettings.GetShadowQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x13834d0
	int32_t GetShadingQuality(); // Function Engine.GameUserSettings.GetShadingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10857c0
	struct FIntPoint GetScreenResolution(); // Function Engine.GameUserSettings.GetScreenResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3c20
	float GetResolutionScaleNormalized(); // Function Engine.GameUserSettings.GetResolutionScaleNormalized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3bf0
	void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformationEx // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3a50
	void GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue); // Function Engine.GameUserSettings.GetResolutionScaleInformation // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce38b0
	float GetRecommendedResolutionScale(); // Function Engine.GameUserSettings.GetRecommendedResolutionScale // (Native|Public|BlueprintCallable) // @ game+0x3ce3870
	enum class EWindowMode GetPreferredFullscreenMode(); // Function Engine.GameUserSettings.GetPreferredFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3840
	int32_t GetPostProcessingQuality(); // Function Engine.GameUserSettings.GetPostProcessingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3810
	int32_t GetOverallScalabilityLevel(); // Function Engine.GameUserSettings.GetOverallScalabilityLevel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce36a0
	float GetLobbyFrameRateLimit(); // Function Engine.GameUserSettings.GetLobbyFrameRateLimit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3670
	struct FIntPoint GetLastConfirmedScreenResolution(); // Function Engine.GameUserSettings.GetLastConfirmedScreenResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3630
	enum class EWindowMode GetLastConfirmedFullscreenMode(); // Function Engine.GameUserSettings.GetLastConfirmedFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3600
	struct UGameUserSettings* GetGameUserSettings(); // Function Engine.GameUserSettings.GetGameUserSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3ce35d0
	enum class EWindowMode GetFullscreenMode(); // Function Engine.GameUserSettings.GetFullscreenMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce35a0
	float GetFrameRateLimit(); // Function Engine.GameUserSettings.GetFrameRateLimit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3570
	int32_t GetFramePace(); // Function Engine.GameUserSettings.GetFramePace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3ce3540
	int32_t GetFoliageQuality(); // Function Engine.GameUserSettings.GetFoliageQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3510
	struct FIntPoint GetDesktopResolution(); // Function Engine.GameUserSettings.GetDesktopResolution // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce34d0
	struct FIntPoint GetDefaultWindowPosition(); // Function Engine.GameUserSettings.GetDefaultWindowPosition // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3ce3490
	enum class EWindowMode GetDefaultWindowMode(); // Function Engine.GameUserSettings.GetDefaultWindowMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3ce3460
	float GetDefaultResolutionScale(); // Function Engine.GameUserSettings.GetDefaultResolutionScale // (Native|Public|BlueprintCallable) // @ game+0x3ce3420
	struct FIntPoint GetDefaultResolution(); // Function Engine.GameUserSettings.GetDefaultResolution // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3ce33e0
	enum class EWindowMode GetCurrentResolutionWindowMode(); // Function Engine.GameUserSettings.GetCurrentResolutionWindowMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce33b0
	int32_t GetCurrentHDRDisplayNits(); // Function Engine.GameUserSettings.GetCurrentHDRDisplayNits // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ce3380
	int32_t GetAudioQualityLevel(); // Function Engine.GameUserSettings.GetAudioQualityLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31aed30
	int32_t GetAntiAliasingQuality(); // Function Engine.GameUserSettings.GetAntiAliasingQuality // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x106fd00
	void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits); // Function Engine.GameUserSettings.EnableHDRDisplayOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce32c0
	void ConfirmVideoMode(); // Function Engine.GameUserSettings.ConfirmVideoMode // (Native|Public|BlueprintCallable) // @ game+0x2ed32e0
	void ApplySettings(bool bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplySettings // (Native|Public|BlueprintCallable) // @ game+0x3ce3230
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides); // Function Engine.GameUserSettings.ApplyResolutionSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x3ce31a0
	void ApplyNonResolutionSettings(); // Function Engine.GameUserSettings.ApplyNonResolutionSettings // (Native|Public|BlueprintCallable) // @ game+0x2ed3320
	void ApplyHardwareBenchmarkResults(); // Function Engine.GameUserSettings.ApplyHardwareBenchmarkResults // (Native|Public|BlueprintCallable) // @ game+0x1e9d2e0
};

// Class Engine.CapsuleComponent
// Size: 0x4c0 (Inherited: 0x4c0)
struct UCapsuleComponent : UShapeComponent {
	float CapsuleHalfHeight; // 0x4b8(0x04)
	float CapsuleRadius; // 0x4bc(0x04)

	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleSize // (Final|Native|Public|BlueprintCallable) // @ game+0x3ca21a0
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x3ca20d0
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps); // Function Engine.CapsuleComponent.SetCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x3ca2000
	void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca0390
	void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetUnscaledCapsuleSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca02a0
	float GetUnscaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca0280
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca0250
	float GetUnscaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca0230
	float GetShapeScale(); // Function Engine.CapsuleComponent.GetShapeScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca0110
	void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Function Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c9fff0
	void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Function Engine.CapsuleComponent.GetScaledCapsuleSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c9fee0
	float GetScaledCapsuleRadius(); // Function Engine.CapsuleComponent.GetScaledCapsuleRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c9fea0
	float GetScaledCapsuleHalfHeight_WithoutHemisphere(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c9fe50
	float GetScaledCapsuleHalfHeight(); // Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c9fe20
};

// Class Engine.ScriptViewportClient
// Size: 0x38 (Inherited: 0x28)
struct UScriptViewportClient : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Engine.GameViewportClient
// Size: 0x330 (Inherited: 0x38)
struct UGameViewportClient : UScriptViewportClient {
	char pad_38[0x8]; // 0x38(0x08)
	struct UConsole* ViewportConsole; // 0x40(0x08)
	struct TArray<struct FDebugDisplayProperty> DebugProperties; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
	int32_t MaxSplitscreenPlayers; // 0x68(0x04)
	char pad_6C[0xc]; // 0x6c(0x0c)
	struct UWorld* World; // 0x78(0x08)
	struct UGameInstance* GameInstance; // 0x80(0x08)
	char pad_88[0x2a8]; // 0x88(0x2a8)

	void SSSwapControllers(); // Function Engine.GameViewportClient.SSSwapControllers // (Exec|Native|Public) // @ game+0x2ed3300
	void ShowTitleSafeArea(); // Function Engine.GameViewportClient.ShowTitleSafeArea // (Exec|Native|Public) // @ game+0x2ed3320
	void SetConsoleTarget(int32_t PlayerIndex); // Function Engine.GameViewportClient.SetConsoleTarget // (Exec|Native|Public) // @ game+0x3ce9480
};

// Class Engine.PhysicsVolume
// Size: 0x368 (Inherited: 0x358)
struct APhysicsVolume : AVolume {
	float TerminalVelocity; // 0x358(0x04)
	int32_t Priority; // 0x35c(0x04)
	float FluidFriction; // 0x360(0x04)
	char bWaterVolume : 1; // 0x364(0x01)
	char bPhysicsOnContact : 1; // 0x364(0x01)
	char pad_364_2 : 6; // 0x364(0x01)
	char pad_365[0x3]; // 0x365(0x03)
};

// Class Engine.WorldSettings
// Size: 0x4a8 (Inherited: 0x320)
struct AWorldSettings : AInfo {
	char pad_320[0x8]; // 0x320(0x08)
	int32_t VisibilityCellSize; // 0x328(0x04)
	enum class EVisibilityAggressiveness VisibilityAggressiveness; // 0x32c(0x01)
	char bPrecomputeVisibility : 1; // 0x32d(0x01)
	char bPlaceCellsOnlyAlongCameraTracks : 1; // 0x32d(0x01)
	char bEnableWorldBoundsChecks : 1; // 0x32d(0x01)
	char bEnableNavigationSystem : 1; // 0x32d(0x01)
	char bEnableAISystem : 1; // 0x32d(0x01)
	char bEnableWorldComposition : 1; // 0x32d(0x01)
	char bUseClientSideLevelStreamingVolumes : 1; // 0x32d(0x01)
	char bEnableWorldOriginRebasing : 1; // 0x32d(0x01)
	char bWorldGravitySet : 1; // 0x32e(0x01)
	char bGlobalGravitySet : 1; // 0x32e(0x01)
	char bMinimizeBSPSections : 1; // 0x32e(0x01)
	char bForceNoPrecomputedLighting : 1; // 0x32e(0x01)
	char bHighPriorityLoading : 1; // 0x32e(0x01)
	char bHighPriorityLoadingLocal : 1; // 0x32e(0x01)
	char bOverrideDefaultBroadphaseSettings : 1; // 0x32e(0x01)
	char pad_32E_7 : 1; // 0x32e(0x01)
	char pad_32F[0x1]; // 0x32f(0x01)
	struct UNavigationSystemConfig* NavigationSystemConfig; // 0x330(0x08)
	struct UNavigationSystemConfig* NavigationSystemConfigOverride; // 0x338(0x08)
	float WorldToMeters; // 0x340(0x04)
	float KillZ; // 0x344(0x04)
	struct UDamageType* KillZDamageType; // 0x348(0x08)
	float WorldGravityZ; // 0x350(0x04)
	float GlobalGravityZ; // 0x354(0x04)
	struct ADefaultPhysicsVolume* DefaultPhysicsVolumeClass; // 0x358(0x08)
	struct UPhysicsCollisionHandler* PhysicsCollisionHandlerClass; // 0x360(0x08)
	struct AGameModeBase* DefaultGameMode; // 0x368(0x08)
	struct AGameNetworkManager* GameNetworkManagerClass; // 0x370(0x08)
	int32_t PackedLightAndShadowMapTextureSize; // 0x378(0x04)
	struct FVector DefaultColorScale; // 0x37c(0x0c)
	float DefaultMaxDistanceFieldOcclusionDistance; // 0x388(0x04)
	float GlobalDistanceFieldViewDistance; // 0x38c(0x04)
	float DynamicIndirectShadowsSelfShadowingIntensity; // 0x390(0x04)
	char pad_394[0x4]; // 0x394(0x04)
	struct FReverbSettings DefaultReverbSettings; // 0x398(0x20)
	struct FInteriorSettings DefaultAmbientZoneSettings; // 0x3b8(0x24)
	float MonoCullingDistance; // 0x3dc(0x04)
	struct USoundMix* DefaultBaseSoundMix; // 0x3e0(0x08)
	float TimeDilation; // 0x3e8(0x04)
	float MatineeTimeDilation; // 0x3ec(0x04)
	float DemoPlayTimeDilation; // 0x3f0(0x04)
	float MinGlobalTimeDilation; // 0x3f4(0x04)
	float MaxGlobalTimeDilation; // 0x3f8(0x04)
	float MinUndilatedFrameTime; // 0x3fc(0x04)
	float MaxUndilatedFrameTime; // 0x400(0x04)
	struct FBroadphaseSettings BroadphaseSettings; // 0x404(0x40)
	char pad_444[0x4]; // 0x444(0x04)
	struct APlayerState* Pauser; // 0x448(0x08)
	struct TArray<struct FNetViewer> ReplicationViewers; // 0x450(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x460(0x10)
	struct APlayerState* PauserPlayerState; // 0x470(0x08)
	int32_t MaxNumberOfBookmarks; // 0x478(0x04)
	char pad_47C[0x4]; // 0x47c(0x04)
	struct UBookmarkBase* DefaultBookmarkClass; // 0x480(0x08)
	struct TArray<struct UBookmarkBase*> BookmarkArray; // 0x488(0x10)
	struct UBookmarkBase* LastBookmarkClass; // 0x498(0x08)
	bool bUseInstancedStaticCollision; // 0x4a0(0x01)
	char pad_4A1[0x7]; // 0x4a1(0x07)

	void OnRep_WorldGravityZ(); // Function Engine.WorldSettings.OnRep_WorldGravityZ // (Native|Public) // @ game+0x1e477f0
};

// Class Engine.CameraModifier
// Size: 0x48 (Inherited: 0x28)
struct UCameraModifier : UObject {
	char bDebug : 1; // 0x28(0x01)
	char bExclusive : 1; // 0x28(0x01)
	char pad_28_2 : 6; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	char Priority; // 0x2c(0x01)
	char pad_2D[0x3]; // 0x2d(0x03)
	struct APlayerCameraManager* CameraOwner; // 0x30(0x08)
	float AlphaInTime; // 0x38(0x04)
	float AlphaOutTime; // 0x3c(0x04)
	float ALPHA; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)

	bool IsDisabled(); // Function Engine.CameraModifier.IsDisabled // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ed3280
	struct AActor* GetViewTarget(); // Function Engine.CameraModifier.GetViewTarget // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x337ba60
	void EnableModifier(); // Function Engine.CameraModifier.EnableModifier // (Native|Public|BlueprintCallable) // @ game+0x3c99900
	void DisableModifier(bool bImmediate); // Function Engine.CameraModifier.DisableModifier // (Native|Public|BlueprintCallable) // @ game+0x3c99870
	void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, struct FPostProcessSettings& PostProcessSettings); // Function Engine.CameraModifier.BlueprintModifyPostProcess // (BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x23a3b60
	void BlueprintModifyCamera(float DeltaTime, struct FVector ViewLocation, struct FRotator ViewRotation, float FOV, struct FVector& NewViewLocation, struct FRotator& NewViewRotation, float& NewFOV); // Function Engine.CameraModifier.BlueprintModifyCamera // (BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x23a3b60
};

// Class Engine.SkyLight
// Size: 0x330 (Inherited: 0x320)
struct ASkyLight : AInfo {
	struct USkyLightComponent* LightComponent; // 0x320(0x08)
	char bEnabled : 1; // 0x328(0x01)
	char pad_328_1 : 7; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)

	void OnRep_bEnabled(); // Function Engine.SkyLight.OnRep_bEnabled // (Native|Public) // @ game+0x1e477f0
};

// Class Engine.TextureCube
// Size: 0x110 (Inherited: 0xb8)
struct UTextureCube : UTexture {
	char pad_B8[0x58]; // 0xb8(0x58)
};

// Class Engine.MaterialInterface
// Size: 0x88 (Inherited: 0x28)
struct UMaterialInterface : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct USubsurfaceProfile* SubsurfaceProfile; // 0x38(0x08)
	char pad_40[0x10]; // 0x40(0x10)
	struct FLightmassMaterialInterfaceSettings LightmassSettings; // 0x50(0x10)
	struct TArray<struct FMaterialTextureInfo> TextureStreamingData; // 0x60(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x70(0x10)
	char pad_80[0x8]; // 0x80(0x08)

	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse); // Function Engine.MaterialInterface.SetForceMipLevelsToBeResident // (RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3d761d0
	struct UPhysicalMaterialMask* GetPhysicalMaterialMask(); // Function Engine.MaterialInterface.GetPhysicalMaterialMask // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x337ba30
	struct UPhysicalMaterial* GetPhysicalMaterialFromMap(int32_t Index); // Function Engine.MaterialInterface.GetPhysicalMaterialFromMap // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d759a0
	struct UPhysicalMaterial* GetPhysicalMaterial(); // Function Engine.MaterialInterface.GetPhysicalMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x337ba60
	struct FMaterialParameterInfo GetParameterInfo(enum class EMaterialParameterAssociation Association, struct FName ParameterName, struct UMaterialFunctionInterface* LayerFunction); // Function Engine.MaterialInterface.GetParameterInfo // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d75890
	struct UMaterial* GetBaseMaterial(); // Function Engine.MaterialInterface.GetBaseMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3d75860
};

// Class Engine.MaterialInstance
// Size: 0x408 (Inherited: 0x88)
struct UMaterialInstance : UMaterialInterface {
	struct UPhysicalMaterial* PhysMaterial; // 0x88(0x08)
	struct UPhysicalMaterial* PhysicalMaterialMap[0x8]; // 0x90(0x40)
	struct UMaterialInterface* Parent; // 0xd0(0x08)
	char bHasStaticPermutationResource : 1; // 0xd8(0x01)
	char bOverrideSubsurfaceProfile : 1; // 0xd8(0x01)
	char pad_D8_2 : 6; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
	struct TArray<struct FScalarParameterValue> ScalarParameterValues; // 0xe0(0x10)
	struct TArray<struct FVectorParameterValue> VectorParameterValues; // 0xf0(0x10)
	struct TArray<struct FTextureParameterValue> TextureParameterValues; // 0x100(0x10)
	struct TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0x110(0x10)
	struct TArray<struct FFontParameterValue> FontParameterValues; // 0x120(0x10)
	struct FMaterialInstanceBasePropertyOverrides BasePropertyOverrides; // 0x130(0x08)
	char pad_138[0x10]; // 0x138(0x10)
	struct FStaticParameterSet StaticParameters; // 0x148(0x40)
	struct FMaterialCachedParameters CachedLayerParameters; // 0x188(0x1a0)
	struct TArray<struct UObject*> CachedReferencedTextures; // 0x328(0x10)
	char pad_338[0xd0]; // 0x338(0xd0)
};

// Class Engine.MaterialInstanceConstant
// Size: 0x410 (Inherited: 0x408)
struct UMaterialInstanceConstant : UMaterialInstance {
	struct UPhysicalMaterialMask* PhysMaterialMask; // 0x408(0x08)

	struct FLinearColor K2_GetVectorParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d75ed0
	struct UTexture* K2_GetTextureParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3d75d00
	float K2_GetScalarParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceConstant.K2_GetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3d75b10
};

// Class Engine.WorldSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UWorldSubsystem : USubsystem {
};

// Class Engine.MaterialExpressionCustomOutput
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionCustomOutput : UMaterialExpression {
};

// Class Engine.EngineCustomTimeStep
// Size: 0x28 (Inherited: 0x28)
struct UEngineCustomTimeStep : UObject {
};

// Class Engine.DynamicBlueprintBinding
// Size: 0x28 (Inherited: 0x28)
struct UDynamicBlueprintBinding : UObject {
};

// Class Engine.BlueprintGeneratedClass
// Size: 0x3c8 (Inherited: 0x2d0)
struct UBlueprintGeneratedClass : UClass {
	int32_t NumReplicatedProperties; // 0x2d0(0x04)
	char bHasNativizedParent : 1; // 0x2d4(0x01)
	char bHasCookedComponentInstancingData : 1; // 0x2d4(0x01)
	char pad_2D4_2 : 6; // 0x2d4(0x01)
	char pad_2D5[0x3]; // 0x2d5(0x03)
	struct TArray<struct UDynamicBlueprintBinding*> DynamicBindingObjects; // 0x2d8(0x10)
	struct TArray<struct UActorComponent*> ComponentTemplates; // 0x2e8(0x10)
	struct TArray<struct UTimelineTemplate*> Timelines; // 0x2f8(0x10)
	struct TArray<struct FBPComponentClassOverride> ComponentClassOverrides; // 0x308(0x10)
	struct USimpleConstructionScript* SimpleConstructionScript; // 0x318(0x08)
	struct UInheritableComponentHandler* InheritableComponentHandler; // 0x320(0x08)
	struct UStructProperty* UberGraphFramePointerProperty; // 0x328(0x08)
	char pad_330[0x8]; // 0x330(0x08)
	struct UFunction* UberGraphFunction; // 0x338(0x08)
	struct TMap<struct FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData; // 0x340(0x50)
	char pad_390[0x38]; // 0x390(0x38)
};

// Class Engine.CameraActor
// Size: 0x910 (Inherited: 0x320)
struct ACameraActor : AActor {
	enum class EAutoReceiveInput AutoActivateForPlayer; // 0x320(0x01)
	char pad_321[0x7]; // 0x321(0x07)
	struct UCameraComponent* CameraComponent; // 0x328(0x08)
	struct USceneComponent* SceneComponent; // 0x330(0x08)
	char pad_338[0x8]; // 0x338(0x08)
	char bConstrainAspectRatio : 1; // 0x340(0x01)
	char pad_340_1 : 7; // 0x340(0x01)
	char pad_341[0x3]; // 0x341(0x03)
	float AspectRatio; // 0x344(0x04)
	float FOVAngle; // 0x348(0x04)
	float PostProcessBlendWeight; // 0x34c(0x04)
	struct FPostProcessSettings PostProcessSettings; // 0x350(0x5c0)

	int32_t GetAutoActivatePlayerIndex(); // Function Engine.CameraActor.GetAutoActivatePlayerIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c961e0
};

// Class Engine.SoundBase
// Size: 0x160 (Inherited: 0x28)
struct USoundBase : UObject {
	struct USoundClass* SoundClassObject; // 0x28(0x08)
	char bDebug : 1; // 0x30(0x01)
	char bOverrideConcurrency : 1; // 0x30(0x01)
	char bOutputToBusOnly : 1; // 0x30(0x01)
	char bHasDelayNode : 1; // 0x30(0x01)
	char bHasConcatenatorNode : 1; // 0x30(0x01)
	char bBypassVolumeScaleForPriority : 1; // 0x30(0x01)
	char pad_30_6 : 2; // 0x30(0x01)
	enum class EVirtualizationMode VirtualizationMode; // 0x31(0x01)
	char pad_32[0x56]; // 0x32(0x56)
	struct TSet<struct USoundConcurrency*> ConcurrencySet; // 0x88(0x50)
	struct FSoundConcurrencySettings ConcurrencyOverrides; // 0xd8(0x20)
	float Duration; // 0xf8(0x04)
	float MaxDistance; // 0xfc(0x04)
	float TotalSamples; // 0x100(0x04)
	float Priority; // 0x104(0x04)
	struct USoundAttenuation* AttenuationSettings; // 0x108(0x08)
	struct FSoundModulation Modulation; // 0x110(0x10)
	struct USoundSubmixBase* SoundSubmixObject; // 0x120(0x08)
	struct TArray<struct FSoundSubmixSendInfo> SoundSubmixSends; // 0x128(0x10)
	struct USoundEffectSourcePresetChain* SourceEffectChain; // 0x138(0x08)
	struct TArray<struct FSoundSourceBusSendInfo> BusSends; // 0x140(0x10)
	struct TArray<struct FSoundSourceBusSendInfo> PreEffectBusSends; // 0x150(0x10)
};

// Class Engine.SoundWave
// Size: 0x308 (Inherited: 0x160)
struct USoundWave : USoundBase {
	int32_t CompressionQuality; // 0x160(0x04)
	int32_t StreamingPriority; // 0x164(0x04)
	enum class ESoundwaveSampleRateSettings SampleRateQuality; // 0x168(0x01)
	char pad_169[0x1]; // 0x169(0x01)
	enum class ESoundGroup SoundGroup; // 0x16a(0x01)
	char bLooping : 1; // 0x16b(0x01)
	char bStreaming : 1; // 0x16b(0x01)
	char bSeekableStreaming : 1; // 0x16b(0x01)
	char pad_16B_3 : 5; // 0x16b(0x01)
	enum class ESoundWaveLoadingBehavior LoadingBehavior; // 0x16c(0x01)
	char pad_16D_0 : 5; // 0x16d(0x01)
	char bMature : 1; // 0x16d(0x01)
	char bManualWordWrap : 1; // 0x16d(0x01)
	char bSingleLine : 1; // 0x16d(0x01)
	char bIsAmbisonics : 1; // 0x16e(0x01)
	char pad_16E_1 : 7; // 0x16e(0x01)
	char pad_16F[0x1]; // 0x16f(0x01)
	struct TArray<float> FrequenciesToAnalyze; // 0x170(0x10)
	struct TArray<struct FSoundWaveSpectralTimeData> CookedSpectralTimeData; // 0x180(0x10)
	struct TArray<struct FSoundWaveEnvelopeTimeData> CookedEnvelopeTimeData; // 0x190(0x10)
	int32_t InitialChunkSize; // 0x1a0(0x04)
	char pad_1A4[0x44]; // 0x1a4(0x44)
	struct FString SpokenText; // 0x1e8(0x10)
	float SubtitlePriority; // 0x1f8(0x04)
	float Volume; // 0x1fc(0x04)
	float Pitch; // 0x200(0x04)
	int32_t NumChannels; // 0x204(0x04)
	int32_t SampleRate; // 0x208(0x04)
	char pad_20C[0xc]; // 0x20c(0x0c)
	struct TArray<struct FSubtitleCue> Subtitles; // 0x218(0x10)
	struct UCurveTable* Curves; // 0x228(0x08)
	struct UCurveTable* InternalCurves; // 0x230(0x08)
	char pad_238[0xd0]; // 0x238(0xd0)
};

// Class Engine.SoundWaveProcedural
// Size: 0x360 (Inherited: 0x308)
struct USoundWaveProcedural : USoundWave {
	char pad_308[0x58]; // 0x308(0x58)
};

// Class Engine.BlueprintCore
// Size: 0x50 (Inherited: 0x28)
struct UBlueprintCore : UObject {
	struct UObject* SkeletonGeneratedClass; // 0x28(0x08)
	struct UObject* GeneratedClass; // 0x30(0x08)
	bool bLegacyNeedToPurgeSkelRefs; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	struct FGuid BlueprintGuid; // 0x3c(0x10)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.Blueprint
// Size: 0xa0 (Inherited: 0x50)
struct UBlueprint : UBlueprintCore {
	struct UObject* ParentClass; // 0x50(0x08)
	enum class EBlueprintType BlueprintType; // 0x58(0x01)
	char bRecompileOnLoad : 1; // 0x59(0x01)
	char bHasBeenRegenerated : 1; // 0x59(0x01)
	char bIsRegeneratingOnLoad : 1; // 0x59(0x01)
	char pad_59_3 : 5; // 0x59(0x01)
	char pad_5A[0x2]; // 0x5a(0x02)
	int32_t BlueprintSystemVersion; // 0x5c(0x04)
	struct USimpleConstructionScript* SimpleConstructionScript; // 0x60(0x08)
	struct TArray<struct UActorComponent*> ComponentTemplates; // 0x68(0x10)
	struct TArray<struct UTimelineTemplate*> Timelines; // 0x78(0x10)
	struct TArray<struct FBPComponentClassOverride> ComponentClassOverrides; // 0x88(0x10)
	struct UInheritableComponentHandler* InheritableComponentHandler; // 0x98(0x08)
};

// Class Engine.Model
// Size: 0x258 (Inherited: 0x28)
struct UModel : UObject {
	char pad_28[0x230]; // 0x28(0x230)
};

// Class Engine.MKChannelEx
// Size: 0x38 (Inherited: 0x28)
struct UMKChannelEx : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UChannel* SelfChannel; // 0x30(0x08)
};

// Class Engine.Channel
// Size: 0x80 (Inherited: 0x38)
struct UChannel : UMKChannelEx {
	struct UNetConnection* Connection; // 0x38(0x08)
	char pad_40[0x40]; // 0x40(0x40)
};

// Class Engine.MKActorChannelEx
// Size: 0xa8 (Inherited: 0x80)
struct UMKActorChannelEx : UChannel {
	char pad_80[0x20]; // 0x80(0x20)
	struct UActorChannel* SelfActorChannel; // 0xa0(0x08)
};

// Class Engine.ActorChannel
// Size: 0x2d0 (Inherited: 0xa8)
struct UActorChannel : UMKActorChannelEx {
	struct AActor* Actor; // 0xa8(0x08)
	char pad_B0[0xe8]; // 0xb0(0xe8)
	struct TArray<struct UObject*> CreateSubObjects; // 0x198(0x10)
	char pad_1A8[0x128]; // 0x1a8(0x128)
};

// Class Engine.AnimationAsset
// Size: 0x80 (Inherited: 0x28)
struct UAnimationAsset : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct USkeleton* Skeleton; // 0x38(0x08)
	char pad_40[0x20]; // 0x40(0x20)
	struct TArray<struct UAnimMetaData*> MetaData; // 0x60(0x10)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x70(0x10)
};

// Class Engine.BlendSpaceBase
// Size: 0x148 (Inherited: 0x80)
struct UBlendSpaceBase : UAnimationAsset {
	char pad_80[0x8]; // 0x80(0x08)
	bool bRotationBlendInMeshSpace; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	float AnimLength; // 0x8c(0x04)
	struct FInterpolationParameter InterpolationParam[0x3]; // 0x90(0x18)
	float TargetWeightInterpolationSpeedPerSec; // 0xa8(0x04)
	enum class ENotifyTriggerMode NotifyTriggerMode; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
	struct TArray<struct FPerBoneInterpolation> PerBoneBlend; // 0xb0(0x10)
	int32_t SampleIndexWithMarkers; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct TArray<struct FBlendSample> SampleData; // 0xc8(0x10)
	struct TArray<struct FEditorElement> GridSamples; // 0xd8(0x10)
	struct FBlendParameter BlendParameters[0x3]; // 0xe8(0x60)
};

// Class Engine.BlendSpace
// Size: 0x150 (Inherited: 0x148)
struct UBlendSpace : UBlendSpaceBase {
	enum class EBlendSpaceAxis AxisToScaleAnimation; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
};

// Class Engine.AimOffsetBlendSpace
// Size: 0x150 (Inherited: 0x150)
struct UAimOffsetBlendSpace : UBlendSpace {
};

// Class Engine.BlendSpace1D
// Size: 0x150 (Inherited: 0x148)
struct UBlendSpace1D : UBlendSpaceBase {
	bool bScaleAnimation; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
};

// Class Engine.AimOffsetBlendSpace1D
// Size: 0x150 (Inherited: 0x150)
struct UAimOffsetBlendSpace1D : UBlendSpace1D {
};

// Class Engine.AISystemBase
// Size: 0x58 (Inherited: 0x28)
struct UAISystemBase : UObject {
	struct FSoftClassPath AISystemClassName; // 0x28(0x18)
	struct FName AISystemModuleName; // 0x40(0x08)
	char pad_48[0x8]; // 0x48(0x08)
	bool bInstantiateAISystemOnClient; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Engine.AmbientSound
// Size: 0x328 (Inherited: 0x320)
struct AAmbientSound : AActor {
	struct UAudioComponent* AudioComponent; // 0x320(0x08)

	void Stop(); // Function Engine.AmbientSound.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x3c563e0
	void Play(float StartTime); // Function Engine.AmbientSound.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x3c55ec0
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeOut // (Final|Native|Public|BlueprintCallable) // @ game+0x3c55ca0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel); // Function Engine.AmbientSound.FadeIn // (Final|Native|Public|BlueprintCallable) // @ game+0x3c55be0
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel); // Function Engine.AmbientSound.AdjustVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x3c55a90
};

// Class Engine.AnimationSettings
// Size: 0x58 (Inherited: 0x38)
struct UAnimationSettings : UDeveloperSettings {
	int32_t CompressCommandletVersion; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct FString> KeyEndEffectorsMatchNameArray; // 0x40(0x10)
	bool ForceRecompression; // 0x50(0x01)
	bool bOnlyCheckForMissingSkeletalMeshes; // 0x51(0x01)
	bool bForceBelowThreshold; // 0x52(0x01)
	bool bFirstRecompressUsingCurrentOrDefault; // 0x53(0x01)
	bool bRaiseMaxErrorToExisting; // 0x54(0x01)
	bool bEnablePerformanceLog; // 0x55(0x01)
	bool bStripAnimationDataOnDedicatedServer; // 0x56(0x01)
	bool bTickAnimationOnSkeletalMeshInit; // 0x57(0x01)
};

// Class Engine.AnimBlueprint
// Size: 0xc8 (Inherited: 0xa0)
struct UAnimBlueprint : UBlueprint {
	char pad_A0[0x8]; // 0xa0(0x08)
	struct USkeleton* TargetSkeleton; // 0xa8(0x08)
	struct TArray<struct FAnimGroupInfo> Groups; // 0xb0(0x10)
	bool bUseMultiThreadedAnimationUpdate; // 0xc0(0x01)
	bool bWarnAboutBlueprintUsage; // 0xc1(0x01)
	char pad_C2[0x6]; // 0xc2(0x06)
};

// Class Engine.AnimBlueprintGeneratedClass
// Size: 0x588 (Inherited: 0x3c8)
struct UAnimBlueprintGeneratedClass : UBlueprintGeneratedClass {
	char pad_3C8[0x8]; // 0x3c8(0x08)
	struct TArray<struct FBakedAnimationStateMachine> BakedStateMachines; // 0x3d0(0x10)
	struct USkeleton* TargetSkeleton; // 0x3e0(0x08)
	struct TArray<struct FAnimNotifyEvent> AnimNotifies; // 0x3e8(0x10)
	struct TMap<struct FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x3f8(0x50)
	char pad_448[0x80]; // 0x448(0x80)
	struct TArray<struct FName> SyncGroupNames; // 0x4c8(0x10)
	struct TArray<struct FExposedValueHandler> EvaluateGraphExposedInputs; // 0x4d8(0x10)
	struct TMap<struct FName, struct FGraphAssetPlayerInformation> GraphAssetPlayerInformation; // 0x4e8(0x50)
	struct TMap<struct FName, struct FAnimGraphBlendOptions> GraphBlendOptions; // 0x538(0x50)
};

// Class Engine.AnimBoneCompressionCodec
// Size: 0x38 (Inherited: 0x28)
struct UAnimBoneCompressionCodec : UObject {
	struct FString Description; // 0x28(0x10)
};

// Class Engine.AnimBoneCompressionSettings
// Size: 0x38 (Inherited: 0x28)
struct UAnimBoneCompressionSettings : UObject {
	struct TArray<struct UAnimBoneCompressionCodec*> Codecs; // 0x28(0x10)
};

// Class Engine.AnimClassData
// Size: 0x268 (Inherited: 0x28)
struct UAnimClassData : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct FBakedAnimationStateMachine> BakedStateMachines; // 0x30(0x10)
	struct USkeleton* TargetSkeleton; // 0x40(0x08)
	struct TArray<struct FAnimNotifyEvent> AnimNotifies; // 0x48(0x10)
	struct TMap<struct FName, struct FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x58(0x50)
	struct TArray<struct FAnimBlueprintFunction> AnimBlueprintFunctions; // 0xa8(0x10)
	struct TArray<struct FAnimBlueprintFunctionData> AnimBlueprintFunctionData; // 0xb8(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> AnimNodeProperties; // 0xc8(0x10)
	char pad_D8[0x10]; // 0xd8(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> LinkedAnimGraphNodeProperties; // 0xe8(0x10)
	char pad_F8[0x10]; // 0xf8(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> LinkedAnimLayerNodeProperties; // 0x108(0x10)
	char pad_118[0x10]; // 0x118(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> PreUpdateNodeProperties; // 0x128(0x10)
	char pad_138[0x10]; // 0x138(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> DynamicResetNodeProperties; // 0x148(0x10)
	char pad_158[0x10]; // 0x158(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> StateMachineNodeProperties; // 0x168(0x10)
	char pad_178[0x10]; // 0x178(0x10)
	struct TArray<struct TFieldPath<FStructProperty>> InitializationNodeProperties; // 0x188(0x10)
	char pad_198[0x10]; // 0x198(0x10)
	struct TMap<struct FName, struct FGraphAssetPlayerInformation> GraphNameAssetPlayers; // 0x1a8(0x50)
	struct TArray<struct FName> SyncGroupNames; // 0x1f8(0x10)
	struct TArray<struct FExposedValueHandler> EvaluateGraphExposedInputs; // 0x208(0x10)
	struct TMap<struct FName, struct FAnimGraphBlendOptions> GraphBlendOptions; // 0x218(0x50)
};

// Class Engine.AnimClassInterface
// Size: 0x28 (Inherited: 0x28)
struct UAnimClassInterface : UInterface {
};

// Class Engine.AnimSequenceBase
// Size: 0xa8 (Inherited: 0x80)
struct UAnimSequenceBase : UAnimationAsset {
	struct TArray<struct FAnimNotifyEvent> Notifies; // 0x80(0x10)
	float SequenceLength; // 0x90(0x04)
	float RateScale; // 0x94(0x04)
	struct FRawCurveTracks RawCurveData; // 0x98(0x10)

	float GetPlayLength(); // Function Engine.AnimSequenceBase.GetPlayLength // (Native|Public|BlueprintCallable) // @ game+0x3c6fe50
};

// Class Engine.AnimCompositeBase
// Size: 0xa8 (Inherited: 0xa8)
struct UAnimCompositeBase : UAnimSequenceBase {
};

// Class Engine.AnimComposite
// Size: 0xb8 (Inherited: 0xa8)
struct UAnimComposite : UAnimCompositeBase {
	struct FAnimTrack AnimationTrack; // 0xa8(0x10)
};

// Class Engine.AnimCompress
// Size: 0x40 (Inherited: 0x38)
struct UAnimCompress : UAnimBoneCompressionCodec {
	char bNeedsSkeleton : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	enum class AnimationCompressionFormat TranslationCompressionFormat; // 0x3c(0x01)
	enum class AnimationCompressionFormat RotationCompressionFormat; // 0x3d(0x01)
	enum class AnimationCompressionFormat ScaleCompressionFormat; // 0x3e(0x01)
	char pad_3F[0x1]; // 0x3f(0x01)
};

// Class Engine.AnimCompress_BitwiseCompressOnly
// Size: 0x40 (Inherited: 0x40)
struct UAnimCompress_BitwiseCompressOnly : UAnimCompress {
};

// Class Engine.AnimCompress_LeastDestructive
// Size: 0x40 (Inherited: 0x40)
struct UAnimCompress_LeastDestructive : UAnimCompress_BitwiseCompressOnly {
};

// Class Engine.AnimCompress_RemoveLinearKeys
// Size: 0x60 (Inherited: 0x40)
struct UAnimCompress_RemoveLinearKeys : UAnimCompress {
	float MaxPosDiff; // 0x40(0x04)
	float MaxAngleDiff; // 0x44(0x04)
	float MaxScaleDiff; // 0x48(0x04)
	float MaxEffectorDiff; // 0x4c(0x04)
	float MinEffectorDiff; // 0x50(0x04)
	float EffectorDiffSocket; // 0x54(0x04)
	float ParentKeyScale; // 0x58(0x04)
	char bRetarget : 1; // 0x5c(0x01)
	char bActuallyFilterLinearKeys : 1; // 0x5c(0x01)
	char pad_5C_2 : 6; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
};

// Class Engine.AnimCompress_PerTrackCompression
// Size: 0xd8 (Inherited: 0x60)
struct UAnimCompress_PerTrackCompression : UAnimCompress_RemoveLinearKeys {
	float MaxZeroingThreshold; // 0x60(0x04)
	float MaxPosDiffBitwise; // 0x64(0x04)
	float MaxAngleDiffBitwise; // 0x68(0x04)
	float MaxScaleDiffBitwise; // 0x6c(0x04)
	struct TArray<enum class AnimationCompressionFormat> AllowedRotationFormats; // 0x70(0x10)
	struct TArray<enum class AnimationCompressionFormat> AllowedTranslationFormats; // 0x80(0x10)
	struct TArray<enum class AnimationCompressionFormat> AllowedScaleFormats; // 0x90(0x10)
	char bResampleAnimation : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	float ResampledFramerate; // 0xa4(0x04)
	int32_t MinKeysForResampling; // 0xa8(0x04)
	char bUseAdaptiveError : 1; // 0xac(0x01)
	char bUseOverrideForEndEffectors : 1; // 0xac(0x01)
	char pad_AC_2 : 6; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
	int32_t TrackHeightBias; // 0xb0(0x04)
	float ParentingDivisor; // 0xb4(0x04)
	float ParentingDivisorExponent; // 0xb8(0x04)
	char bUseAdaptiveError2 : 1; // 0xbc(0x01)
	char pad_BC_1 : 7; // 0xbc(0x01)
	char pad_BD[0x3]; // 0xbd(0x03)
	float RotationErrorSourceRatio; // 0xc0(0x04)
	float TranslationErrorSourceRatio; // 0xc4(0x04)
	float ScaleErrorSourceRatio; // 0xc8(0x04)
	float MaxErrorPerTrackRatio; // 0xcc(0x04)
	float PerturbationProbeSize; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)
};

// Class Engine.AnimCompress_RemoveEverySecondKey
// Size: 0x48 (Inherited: 0x40)
struct UAnimCompress_RemoveEverySecondKey : UAnimCompress {
	int32_t MinKeys; // 0x40(0x04)
	char bStartAtSecondKey : 1; // 0x44(0x01)
	char pad_44_1 : 7; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
};

// Class Engine.AnimCompress_RemoveTrivialKeys
// Size: 0x50 (Inherited: 0x40)
struct UAnimCompress_RemoveTrivialKeys : UAnimCompress {
	float MaxPosDiff; // 0x40(0x04)
	float MaxAngleDiff; // 0x44(0x04)
	float MaxScaleDiff; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.AnimCurveCompressionCodec
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec : UObject {
};

// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec_CompressedRichCurve : UAnimCurveCompressionCodec {
};

// Class Engine.AnimCurveCompressionCodec_UniformIndexable
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec_UniformIndexable : UAnimCurveCompressionCodec {
};

// Class Engine.AnimCurveCompressionCodec_UniformlySampled
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec_UniformlySampled : UAnimCurveCompressionCodec {
};

// Class Engine.AnimCurveCompressionSettings
// Size: 0x30 (Inherited: 0x28)
struct UAnimCurveCompressionSettings : UObject {
	struct UAnimCurveCompressionCodec* Codec; // 0x28(0x08)
};

// Class Engine.AnimLayerInterface
// Size: 0x28 (Inherited: 0x28)
struct UAnimLayerInterface : UInterface {
};

// Class Engine.AnimMetaData
// Size: 0x28 (Inherited: 0x28)
struct UAnimMetaData : UObject {
};

// Class Engine.AnimMontage
// Size: 0x1d0 (Inherited: 0xa8)
struct UAnimMontage : UAnimCompositeBase {
	struct FAlphaBlend BlendIn; // 0xa8(0x30)
	float BlendInTime; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
	struct FAlphaBlend BlendOut; // 0xe0(0x30)
	float BlendOutTime; // 0x110(0x04)
	float BlendOutTriggerTime; // 0x114(0x04)
	struct FName SyncGroup; // 0x118(0x08)
	int32_t SyncSlotIndex; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	struct FMarkerSyncData MarkerData; // 0x128(0x20)
	struct TArray<struct FCompositeSection> CompositeSections; // 0x148(0x10)
	struct TArray<struct FSlotAnimationTrack> SlotAnimTracks; // 0x158(0x10)
	struct TArray<struct FBranchingPoint> BranchingPoints; // 0x168(0x10)
	bool bEnableRootMotionTranslation; // 0x178(0x01)
	bool bEnableRootMotionRotation; // 0x179(0x01)
	bool bEnableAutoBlendOut; // 0x17a(0x01)
	enum class ERootMotionRootLock RootMotionRootLock; // 0x17b(0x01)
	char pad_17C[0x4]; // 0x17c(0x04)
	struct TArray<struct FBranchingPointMarker> BranchingPointMarkers; // 0x180(0x10)
	struct TArray<int32_t> BranchingPointStateNotifyIndices; // 0x190(0x10)
	struct FTimeStretchCurve TimeStretchCurve; // 0x1a0(0x28)
	struct FName TimeStretchCurveName; // 0x1c8(0x08)

	float GetDefaultBlendOutTime(); // Function Engine.AnimMontage.GetDefaultBlendOutTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3281590
};

// Class Engine.AnimNotify_PauseClothingSimulation
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_PauseClothingSimulation : UAnimNotify {
};

// Class Engine.AnimNotify_PlayParticleEffect
// Size: 0x90 (Inherited: 0x38)
struct UAnimNotify_PlayParticleEffect : UAnimNotify {
	struct UParticleSystem* PSTemplate; // 0x38(0x08)
	struct FVector LocationOffset; // 0x40(0x0c)
	struct FRotator RotationOffset; // 0x4c(0x0c)
	struct FVector Scale; // 0x58(0x0c)
	char pad_64[0x1c]; // 0x64(0x1c)
	char Attached : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	struct FName SocketName; // 0x84(0x08)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class Engine.AnimNotify_PlaySound
// Size: 0x58 (Inherited: 0x38)
struct UAnimNotify_PlaySound : UAnimNotify {
	struct USoundBase* Sound; // 0x38(0x08)
	float VolumeMultiplier; // 0x40(0x04)
	float PitchMultiplier; // 0x44(0x04)
	char bFollow : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FName AttachName; // 0x4c(0x08)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.AnimNotify_ResetClothingSimulation
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ResetClothingSimulation : UAnimNotify {
};

// Class Engine.AnimNotify_ResetDynamics
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ResetDynamics : UAnimNotify {
};

// Class Engine.AnimNotify_ResumeClothingSimulation
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ResumeClothingSimulation : UAnimNotify {
};

// Class Engine.AnimNotifyState_DisableRootMotion
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_DisableRootMotion : UAnimNotifyState {
};

// Class Engine.AnimNotifyState_TimedParticleEffect
// Size: 0x60 (Inherited: 0x30)
struct UAnimNotifyState_TimedParticleEffect : UAnimNotifyState {
	struct UParticleSystem* PSTemplate; // 0x30(0x08)
	struct FName SocketName; // 0x38(0x08)
	struct FVector LocationOffset; // 0x40(0x0c)
	struct FRotator RotationOffset; // 0x4c(0x0c)
	bool bDestroyAtEnd; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
};

// Class Engine.AnimNotifyState_Trail
// Size: 0x58 (Inherited: 0x30)
struct UAnimNotifyState_Trail : UAnimNotifyState {
	struct UParticleSystem* PSTemplate; // 0x30(0x08)
	struct FName FirstSocketName; // 0x38(0x08)
	struct FName SecondSocketName; // 0x40(0x08)
	enum class ETrailWidthMode WidthScaleMode; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	struct FName WidthScaleCurve; // 0x4c(0x08)
	char bRecycleSpawnedSystems : 1; // 0x54(0x01)
	char pad_54_1 : 7; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)

	struct UParticleSystem* OverridePSTemplate(struct USkeletalMeshComponent* MeshComp, struct UAnimSequenceBase* Animation); // Function Engine.AnimNotifyState_Trail.OverridePSTemplate // (Event|Public|BlueprintEvent|Const) // @ game+0x23a3b60
};

// Class Engine.AnimSequence
// Size: 0x1a0 (Inherited: 0xa8)
struct UAnimSequence : UAnimSequenceBase {
	int32_t NumFrames; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
	struct TArray<struct FTrackToSkeletonMap> TrackToSkeletonMapTable; // 0xb0(0x10)
	char pad_C0[0x10]; // 0xc0(0x10)
	struct UAnimBoneCompressionSettings* BoneCompressionSettings; // 0xd0(0x08)
	struct UAnimCurveCompressionSettings* CurveCompressionSettings; // 0xd8(0x08)
	char pad_E0[0x70]; // 0xe0(0x70)
	enum class EAdditiveAnimationType AdditiveAnimType; // 0x150(0x01)
	enum class EAdditiveBasePoseType RefPoseType; // 0x151(0x01)
	char pad_152[0x6]; // 0x152(0x06)
	struct UAnimSequence* RefPoseSeq; // 0x158(0x08)
	int32_t RefFrameIndex; // 0x160(0x04)
	struct FName RetargetSource; // 0x164(0x08)
	enum class EAnimInterpolationType Interpolation; // 0x16c(0x01)
	bool bEnableRootMotion; // 0x16d(0x01)
	enum class ERootMotionRootLock RootMotionRootLock; // 0x16e(0x01)
	bool bForceRootLock; // 0x16f(0x01)
	bool bUseNormalizedRootMotionScale; // 0x170(0x01)
	bool bRootMotionSettingsCopiedFromMontage; // 0x171(0x01)
	char pad_172[0x6]; // 0x172(0x06)
	struct TArray<struct FAnimSyncMarker> AuthoredSyncMarkers; // 0x178(0x10)
	char pad_188[0x18]; // 0x188(0x18)
};

// Class Engine.AnimSet
// Size: 0xf0 (Inherited: 0x28)
struct UAnimSet : UObject {
	char bAnimRotationOnly : 1; // 0x28(0x01)
	char pad_28_1 : 7; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct TArray<struct FName> TrackBoneNames; // 0x30(0x10)
	struct TArray<struct FAnimSetMeshLinkup> LinkupCache; // 0x40(0x10)
	struct TArray<char> BoneUseAnimTranslation; // 0x50(0x10)
	struct TArray<char> ForceUseMeshTranslation; // 0x60(0x10)
	struct TArray<struct FName> UseTranslationBoneNames; // 0x70(0x10)
	struct TArray<struct FName> ForceMeshTranslationBoneNames; // 0x80(0x10)
	struct FName PreviewSkelMeshName; // 0x90(0x08)
	struct FName BestRatioSkelMeshName; // 0x98(0x08)
	char pad_A0[0x50]; // 0xa0(0x50)
};

// Class Engine.AnimSingleNodeInstance
// Size: 0x280 (Inherited: 0x270)
struct UAnimSingleNodeInstance : UAnimInstance {
	struct UAnimationAsset* CurrentAsset; // 0x268(0x08)
	struct FDelegate PostEvaluateAnimEvent; // 0x270(0x10)

	void StopAnim(); // Function Engine.AnimSingleNodeInstance.StopAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x3c70660
	void SetReverse(bool bInReverse); // Function Engine.AnimSingleNodeInstance.SetReverse // (Final|Native|Public|BlueprintCallable) // @ game+0x3c705d0
	void SetPreviewCurveOverride(struct FName& PoseName, float Value, bool bRemoveIfZero); // Function Engine.AnimSingleNodeInstance.SetPreviewCurveOverride // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c704b0
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3c703a0
	void SetPosition(float InPosition, bool bFireNotifies); // Function Engine.AnimSingleNodeInstance.SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x3c702d0
	void SetPlayRate(float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetPlayRate // (Final|Native|Public|BlueprintCallable) // @ game+0x3c701c0
	void SetPlaying(bool bIsPlaying); // Function Engine.AnimSingleNodeInstance.SetPlaying // (Final|Native|Public|BlueprintCallable) // @ game+0x3c70240
	void SetLooping(bool bIsLooping); // Function Engine.AnimSingleNodeInstance.SetLooping // (Final|Native|Public|BlueprintCallable) // @ game+0x3c70130
	void SetBlendSpaceInput(struct FVector& InBlendInput); // Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c700a0
	void SetAnimationAsset(struct UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate); // Function Engine.AnimSingleNodeInstance.SetAnimationAsset // (Native|Public|BlueprintCallable) // @ game+0x3c6ff90
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition); // Function Engine.AnimSingleNodeInstance.PlayAnim // (Final|Native|Public|BlueprintCallable) // @ game+0x3c6fe90
	float GetLength(); // Function Engine.AnimSingleNodeInstance.GetLength // (Final|Native|Public|BlueprintCallable) // @ game+0x3c6fe20
	struct UAnimationAsset* GetAnimationAsset(); // Function Engine.AnimSingleNodeInstance.GetAnimationAsset // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c6fdf0
};

// Class Engine.AnimStateMachineTypes
// Size: 0x28 (Inherited: 0x28)
struct UAnimStateMachineTypes : UObject {
};

// Class Engine.AnimStreamable
// Size: 0xe0 (Inherited: 0xa8)
struct UAnimStreamable : UAnimSequenceBase {
	int32_t NumFrames; // 0xa8(0x04)
	enum class EAnimInterpolationType Interpolation; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
	struct FName RetargetSource; // 0xb0(0x08)
	char pad_B8[0x10]; // 0xb8(0x10)
	struct UAnimBoneCompressionSettings* BoneCompressionSettings; // 0xc8(0x08)
	struct UAnimCurveCompressionSettings* CurveCompressionSettings; // 0xd0(0x08)
	bool bEnableRootMotion; // 0xd8(0x01)
	enum class ERootMotionRootLock RootMotionRootLock; // 0xd9(0x01)
	bool bForceRootLock; // 0xda(0x01)
	bool bUseNormalizedRootMotionScale; // 0xdb(0x01)
	char pad_DC[0x4]; // 0xdc(0x04)
};

// Class Engine.AssetExportTask
// Size: 0x78 (Inherited: 0x28)
struct UAssetExportTask : UObject {
	struct UObject* Object; // 0x28(0x08)
	struct UExporter* Exporter; // 0x30(0x08)
	struct FString Filename; // 0x38(0x10)
	bool bSelected; // 0x48(0x01)
	bool bReplaceIdentical; // 0x49(0x01)
	bool bPrompt; // 0x4a(0x01)
	bool bAutomated; // 0x4b(0x01)
	bool bUseFileArchive; // 0x4c(0x01)
	bool bWriteEmptyFiles; // 0x4d(0x01)
	char pad_4E[0x2]; // 0x4e(0x02)
	struct TArray<struct UObject*> IgnoreObjectList; // 0x50(0x10)
	struct UObject* options; // 0x60(0x08)
	struct TArray<struct FString> Errors; // 0x68(0x10)
};

// Class Engine.AssetManagerSettings
// Size: 0x108 (Inherited: 0x38)
struct UAssetManagerSettings : UDeveloperSettings {
	struct TArray<struct FPrimaryAssetTypeInfo> PrimaryAssetTypesToScan; // 0x38(0x10)
	struct TArray<struct FDirectoryPath> DirectoriesToExclude; // 0x48(0x10)
	struct TArray<struct FPrimaryAssetRulesOverride> PrimaryAssetRules; // 0x58(0x10)
	struct TArray<struct FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules; // 0x68(0x10)
	bool bOnlyCookProductionAssets; // 0x78(0x01)
	bool bShouldManagerDetermineTypeAndName; // 0x79(0x01)
	bool bShouldGuessTypeAndNameInEditor; // 0x7a(0x01)
	bool bShouldAcquireMissingChunksOnLoad; // 0x7b(0x01)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetIdRedirects; // 0x80(0x10)
	struct TArray<struct FAssetManagerRedirect> PrimaryAssetTypeRedirects; // 0x90(0x10)
	struct TArray<struct FAssetManagerRedirect> AssetPathRedirects; // 0xa0(0x10)
	struct TSet<struct FName> MetaDataTagsForAssetRegistry; // 0xb0(0x50)
	bool bUsePathExcludedFromScan; // 0x100(0x01)
	bool bRemoveRedundantDirectroyChunks; // 0x101(0x01)
	char pad_102[0x6]; // 0x102(0x06)
};

// Class Engine.AssetMappingTable
// Size: 0x38 (Inherited: 0x28)
struct UAssetMappingTable : UObject {
	struct TArray<struct FAssetMapping> MappedAssets; // 0x28(0x10)
};

// Class Engine.AsyncActionHandleSaveGame
// Size: 0x68 (Inherited: 0x30)
struct UAsyncActionHandleSaveGame : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate Completed; // 0x30(0x10)
	char pad_40[0x20]; // 0x40(0x20)
	struct USaveGame* SaveGameObject; // 0x60(0x08)

	struct UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(struct UObject* WorldContextObject, struct USaveGame* SaveGameObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c79d80
	struct UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(struct UObject* WorldContextObject, struct FString SlotName, int32_t UserIndex); // Function Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c79720
};

// Class Engine.AsyncActionLoadPrimaryAssetBase
// Size: 0x78 (Inherited: 0x30)
struct UAsyncActionLoadPrimaryAssetBase : UBlueprintAsyncActionBase {
	char pad_30[0x48]; // 0x30(0x48)
};

// Class Engine.AsyncActionLoadPrimaryAsset
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAsset : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(struct UObject* WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c79840
};

// Class Engine.AsyncActionLoadPrimaryAssetClass
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAssetClass : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(struct UObject* WorldContextObject, struct FPrimaryAssetId PrimaryAsset, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c79980
};

// Class Engine.AsyncActionLoadPrimaryAssetList
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAssetList : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c79c20
};

// Class Engine.AsyncActionLoadPrimaryAssetClassList
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAssetClassList : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& LoadBundles); // Function Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c79ac0
};

// Class Engine.AsyncActionChangePrimaryAssetBundles
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionChangePrimaryAssetBundles : UAsyncActionLoadPrimaryAssetBase {
	struct FMulticastInlineDelegate Completed; // 0x78(0x10)

	struct UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(struct UObject* WorldContextObject, struct TArray<struct FPrimaryAssetId>& PrimaryAssetList, struct TArray<struct FName>& AddBundles, struct TArray<struct FName>& RemoveBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c79560
	struct UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(struct UObject* WorldContextObject, struct TArray<struct FName>& NewBundles, struct TArray<struct FName>& OldBundles); // Function Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c79400
};

// Class Engine.AtmosphericFog
// Size: 0x328 (Inherited: 0x320)
struct AAtmosphericFog : AInfo {
	struct UAtmosphericFogComponent* AtmosphericFogComponent; // 0x320(0x08)
};

// Class Engine.AtmosphericFogComponent
// Size: 0x310 (Inherited: 0x220)
struct UAtmosphericFogComponent : USceneComponent {
	float SunMultiplier; // 0x220(0x04)
	float FogMultiplier; // 0x224(0x04)
	float DensityMultiplier; // 0x228(0x04)
	float DensityOffset; // 0x22c(0x04)
	float DistanceScale; // 0x230(0x04)
	float AltitudeScale; // 0x234(0x04)
	float DistanceOffset; // 0x238(0x04)
	float GroundOffset; // 0x23c(0x04)
	float StartDistance; // 0x240(0x04)
	float SunDiscScale; // 0x244(0x04)
	float DefaultBrightness; // 0x248(0x04)
	struct FColor DefaultLightColor; // 0x24c(0x04)
	char bDisableSunDisk : 1; // 0x250(0x01)
	char bAtmosphereAffectsSunIlluminance : 1; // 0x250(0x01)
	char bDisableGroundScattering : 1; // 0x250(0x01)
	char pad_250_3 : 5; // 0x250(0x01)
	char pad_251[0x3]; // 0x251(0x03)
	struct FAtmospherePrecomputeParameters PrecomputeParams; // 0x254(0x2c)
	struct UTexture2D* TransmittanceTexture; // 0x280(0x08)
	struct UTexture2D* IrradianceTexture; // 0x288(0x08)
	char pad_290[0x80]; // 0x290(0x80)

	void StartPrecompute(); // Function Engine.AtmosphericFogComponent.StartPrecompute // (Final|Native|Public|BlueprintCallable) // @ game+0x151b910
	void SetSunMultiplier(float NewSunMultiplier); // Function Engine.AtmosphericFogComponent.SetSunMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3c7a580
	void SetStartDistance(float NewStartDistance); // Function Engine.AtmosphericFogComponent.SetStartDistance // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3c7a500
	void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum); // Function Engine.AtmosphericFogComponent.SetPrecomputeParams // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3c7a3f0
	void SetFogMultiplier(float NewFogMultiplier); // Function Engine.AtmosphericFogComponent.SetFogMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3c7a370
	void SetDistanceScale(float NewDistanceScale); // Function Engine.AtmosphericFogComponent.SetDistanceScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3c7a2f0
	void SetDistanceOffset(float NewDistanceOffset); // Function Engine.AtmosphericFogComponent.SetDistanceOffset // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3c7a270
	void SetDensityOffset(float NewDensityOffset); // Function Engine.AtmosphericFogComponent.SetDensityOffset // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3c7a1f0
	void SetDensityMultiplier(float NewDensityMultiplier); // Function Engine.AtmosphericFogComponent.SetDensityMultiplier // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3c7a170
	void SetDefaultLightColor(struct FLinearColor NewLightColor); // Function Engine.AtmosphericFogComponent.SetDefaultLightColor // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c7a0f0
	void SetDefaultBrightness(float NewBrightness); // Function Engine.AtmosphericFogComponent.SetDefaultBrightness // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3c7a070
	void SetAltitudeScale(float NewAltitudeScale); // Function Engine.AtmosphericFogComponent.SetAltitudeScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3c79ff0
	void DisableSunDisk(bool NewSunDisk); // Function Engine.AtmosphericFogComponent.DisableSunDisk // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3c79f60
	void DisableGroundScattering(bool NewGroundScattering); // Function Engine.AtmosphericFogComponent.DisableGroundScattering // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3c79ed0
};

// Class Engine.AudioSettings
// Size: 0x148 (Inherited: 0x38)
struct UAudioSettings : UDeveloperSettings {
	struct FSoftObjectPath DefaultSoundClassName; // 0x38(0x18)
	struct FSoftObjectPath DefaultMediaSoundClassName; // 0x50(0x18)
	struct FSoftObjectPath DefaultSoundConcurrencyName; // 0x68(0x18)
	struct FSoftObjectPath DefaultBaseSoundMix; // 0x80(0x18)
	struct FSoftObjectPath VoiPSoundClass; // 0x98(0x18)
	struct FSoftObjectPath MasterSubmix; // 0xb0(0x18)
	struct FSoftObjectPath ReverbSubmix; // 0xc8(0x18)
	struct FSoftObjectPath EQSubmix; // 0xe0(0x18)
	enum class EVoiceSampleRate VoiPSampleRate; // 0xf8(0x04)
	float DefaultReverbSendLevel; // 0xfc(0x04)
	int32_t MaximumConcurrentStreams; // 0x100(0x04)
	float GlobalMinPitchScale; // 0x104(0x04)
	float GlobalMaxPitchScale; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct TArray<struct FAudioQualitySettings> QualityLevels; // 0x110(0x10)
	char bAllowPlayWhenSilent : 1; // 0x120(0x01)
	char bDisableMasterEQ : 1; // 0x120(0x01)
	char bAllowCenterChannel3DPanning : 1; // 0x120(0x01)
	char pad_120_3 : 5; // 0x120(0x01)
	char pad_121[0x3]; // 0x121(0x03)
	uint32_t NumStoppingSources; // 0x124(0x04)
	enum class EPanningMethod PanningMethod; // 0x128(0x01)
	enum class EMonoChannelUpmixMethod MonoChannelUpmixMethod; // 0x129(0x01)
	char pad_12A[0x6]; // 0x12a(0x06)
	struct FString DialogueFilenameFormat; // 0x130(0x10)
	char pad_140[0x8]; // 0x140(0x08)
};

// Class Engine.AudioVolume
// Size: 0x3a8 (Inherited: 0x358)
struct AAudioVolume : AVolume {
	float Priority; // 0x358(0x04)
	char bEnabled : 1; // 0x35c(0x01)
	char pad_35C_1 : 7; // 0x35c(0x01)
	char pad_35D[0x3]; // 0x35d(0x03)
	struct FReverbSettings Settings; // 0x360(0x20)
	struct FInteriorSettings AmbientZoneSettings; // 0x380(0x24)
	char pad_3A4[0x4]; // 0x3a4(0x04)

	void SetReverbSettings(struct FReverbSettings& NewReverbSettings); // Function Engine.AudioVolume.SetReverbSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c7dd00
	void SetPriority(float NewPriority); // Function Engine.AudioVolume.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7dc80
	void SetInteriorSettings(struct FInteriorSettings& NewInteriorSettings); // Function Engine.AudioVolume.SetInteriorSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3c7d9c0
	void SetEnabled(bool bNewEnabled); // Function Engine.AudioVolume.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7d7a0
	void OnRep_bEnabled(); // Function Engine.AudioVolume.OnRep_bEnabled // (Final|Native|Private) // @ game+0x3c7d630
};

// Class Engine.AutoDestroySubsystem
// Size: 0x48 (Inherited: 0x30)
struct UAutoDestroySubsystem : UWorldSubsystem {
	char pad_30[0x8]; // 0x30(0x08)
	struct TArray<struct AActor*> ActorsToPoll; // 0x38(0x10)

	void OnActorEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function Engine.AutoDestroySubsystem.OnActorEndPlay // (Final|Native|Private) // @ game+0x3c84530
};

// Class Engine.AutomationTestSettings
// Size: 0x328 (Inherited: 0x28)
struct UAutomationTestSettings : UObject {
	struct TArray<struct FString> EngineTestModules; // 0x28(0x10)
	struct TArray<struct FString> EditorTestModules; // 0x38(0x10)
	struct FSoftObjectPath AutomationTestmap; // 0x48(0x18)
	struct TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps; // 0x60(0x10)
	struct TArray<struct FSoftObjectPath> AssetsToOpen; // 0x70(0x10)
	struct FBuildPromotionTestSettings BuildPromotionTest; // 0x80(0x1f0)
	struct FMaterialEditorPromotionSettings MaterialEditorPromotionTest; // 0x270(0x30)
	struct FParticleEditorPromotionSettings ParticleEditorPromotionTest; // 0x2a0(0x10)
	struct FBlueprintEditorPromotionSettings BlueprintEditorPromotionTest; // 0x2b0(0x30)
	struct TArray<struct FString> TestLevelFolders; // 0x2e0(0x10)
	struct TArray<struct FExternalToolDefinition> ExternalTools; // 0x2f0(0x10)
	struct TArray<struct FEditorImportExportTestDefinition> ImportExportTestDefinitions; // 0x300(0x10)
	struct TArray<struct FLaunchOnTestSettings> LaunchOnSettings; // 0x310(0x10)
	struct FIntPoint DefaultScreenshotResolution; // 0x320(0x08)
};

// Class Engine.AvoidanceManager
// Size: 0xe0 (Inherited: 0x28)
struct UAvoidanceManager : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	float DefaultTimeToLive; // 0x30(0x04)
	float LockTimeAfterAvoid; // 0x34(0x04)
	float LockTimeAfterClean; // 0x38(0x04)
	float DeltaTimeToPredict; // 0x3c(0x04)
	float ArtificialRadiusExpansion; // 0x40(0x04)
	float TestHeightDifference; // 0x44(0x04)
	float HeightCheckMargin; // 0x48(0x04)
	char pad_4C[0x94]; // 0x4c(0x94)

	bool RegisterMovementComponent(struct UMovementComponent* MovementComp, float AvoidanceWeight); // Function Engine.AvoidanceManager.RegisterMovementComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3c845f0
	int32_t GetObjectCount(); // Function Engine.AvoidanceManager.GetObjectCount // (Final|Native|Public|BlueprintCallable) // @ game+0x3c84500
	int32_t GetNewAvoidanceUID(); // Function Engine.AvoidanceManager.GetNewAvoidanceUID // (Final|Native|Public|BlueprintCallable) // @ game+0x3c844d0
	struct FVector GetAvoidanceVelocityForComponent(struct UMovementComponent* MovementComp); // Function Engine.AvoidanceManager.GetAvoidanceVelocityForComponent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c84430
};

// Class Engine.BandwidthTestActor
// Size: 0x340 (Inherited: 0x320)
struct ABandwidthTestActor : AActor {
	struct FBandwidthTestGenerator BandwidthGenerator; // 0x320(0x20)
};

// Class Engine.BillboardComponent
// Size: 0x4c0 (Inherited: 0x4a0)
struct UBillboardComponent : UPrimitiveComponent {
	struct UTexture2D* Sprite; // 0x4a0(0x08)
	char bIsScreenSizeScaled : 1; // 0x4a8(0x01)
	char pad_4A8_1 : 7; // 0x4a8(0x01)
	char pad_4A9[0x3]; // 0x4a9(0x03)
	float ScreenSize; // 0x4ac(0x04)
	float U; // 0x4b0(0x04)
	float UL; // 0x4b4(0x04)
	float V; // 0x4b8(0x04)
	float VL; // 0x4bc(0x04)

	void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetUV // (Native|Public|BlueprintCallable) // @ game+0x3c848d0
	void SetSpriteAndUV(struct UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Function Engine.BillboardComponent.SetSpriteAndUV // (Native|Public|BlueprintCallable) // @ game+0x3c84750
	void SetSprite(struct UTexture2D* NewSprite); // Function Engine.BillboardComponent.SetSprite // (Native|Public|BlueprintCallable) // @ game+0x3c846c0
};

// Class Engine.BlendableInterface
// Size: 0x28 (Inherited: 0x28)
struct UBlendableInterface : UInterface {
};

// Class Engine.Skeleton
// Size: 0x368 (Inherited: 0x28)
struct USkeleton : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct TArray<struct FBoneNode> BoneTree; // 0x38(0x10)
	struct TArray<struct FTransform> RefLocalPoses; // 0x48(0x10)
	char pad_58[0x118]; // 0x58(0x118)
	struct FGuid VirtualBoneGuid; // 0x170(0x10)
	struct TArray<struct FVirtualBone> VirtualBones; // 0x180(0x10)
	struct TArray<struct USkeletalMeshSocket*> Sockets; // 0x190(0x10)
	char pad_1A0[0x50]; // 0x1a0(0x50)
	struct FSmartNameContainer SmartNames; // 0x1f0(0x50)
	char pad_240[0x30]; // 0x240(0x30)
	struct TArray<struct UBlendProfile*> BlendProfiles; // 0x270(0x10)
	struct TArray<struct FAnimSlotGroup> SlotGroups; // 0x280(0x10)
	char pad_290[0xc8]; // 0x290(0xc8)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x358(0x10)
};

// Class Engine.BlendProfile
// Size: 0x48 (Inherited: 0x28)
struct UBlendProfile : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct USkeleton* OwningSkeleton; // 0x30(0x08)
	struct TArray<struct FBlendProfileBoneEntry> ProfileEntries; // 0x38(0x10)
};

// Class Engine.BlockingVolume
// Size: 0x358 (Inherited: 0x358)
struct ABlockingVolume : AVolume {
};

// Class Engine.BlueprintExtension
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintExtension : UObject {
};

// Class Engine.BlueprintMapLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintMapLibrary : UBlueprintFunctionLibrary {

	void SetMapPropertyByName(struct UObject* Object, struct FName PropertyName, struct TMap<int32_t, int32_t>& Value); // Function Engine.BlueprintMapLibrary.SetMapPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c8a1d0
	void Map_Values(struct TMap<int32_t, int32_t>& TargetMap, struct TArray<int32_t>& Values); // Function Engine.BlueprintMapLibrary.Map_Values // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c8a0d0
	bool Map_Remove(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key); // Function Engine.BlueprintMapLibrary.Map_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c89f20
	int32_t Map_Length(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c89e70
	void Map_Keys(struct TMap<int32_t, int32_t>& TargetMap, struct TArray<int32_t>& Keys); // Function Engine.BlueprintMapLibrary.Map_Keys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c89d70
	bool Map_Find(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value); // Function Engine.BlueprintMapLibrary.Map_Find // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c89ae0
	bool Map_Contains(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key); // Function Engine.BlueprintMapLibrary.Map_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c89930
	void Map_Clear(struct TMap<int32_t, int32_t>& TargetMap); // Function Engine.BlueprintMapLibrary.Map_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c89890
	void Map_Add(struct TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value); // Function Engine.BlueprintMapLibrary.Map_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c89620
};

// Class Engine.BlueprintPathsLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintPathsLibrary : UBlueprintFunctionLibrary {

	struct FString VideoCaptureDir(); // Function Engine.BlueprintPathsLibrary.VideoCaptureDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8e8c0
	void ValidatePath(struct FString InPath, bool& bDidSucceed, struct FText& OutReason); // Function Engine.BlueprintPathsLibrary.ValidatePath // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c8e740
	void Split(struct FString InPath, struct FString& PathPart, struct FString& FilenamePart, struct FString& ExtensionPart); // Function Engine.BlueprintPathsLibrary.Split // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c8e560
	struct FString SourceConfigDir(); // Function Engine.BlueprintPathsLibrary.SourceConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8db60
	bool ShouldSaveToUserDir(); // Function Engine.BlueprintPathsLibrary.ShouldSaveToUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8e530
	struct FString ShaderWorkingDir(); // Function Engine.BlueprintPathsLibrary.ShaderWorkingDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8e4b0
	void SetProjectFilePath(struct FString NewGameProjectFilePath); // Function Engine.BlueprintPathsLibrary.SetProjectFilePath // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c8e420
	struct FString SetExtension(struct FString InPath, struct FString InNewExtension); // Function Engine.BlueprintPathsLibrary.SetExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8e2e0
	struct FString ScreenShotDir(); // Function Engine.BlueprintPathsLibrary.ScreenShotDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8e260
	struct FString SandboxesDir(); // Function Engine.BlueprintPathsLibrary.SandboxesDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8e1e0
	struct FString RootDir(); // Function Engine.BlueprintPathsLibrary.RootDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8e160
	void RemoveDuplicateSlashes(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.RemoveDuplicateSlashes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c8e060
	struct FString ProjectUserDir(); // Function Engine.BlueprintPathsLibrary.ProjectUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8dfe0
	struct FString ProjectSavedDir(); // Function Engine.BlueprintPathsLibrary.ProjectSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8df60
	struct FString ProjectPluginsDir(); // Function Engine.BlueprintPathsLibrary.ProjectPluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8dee0
	struct FString ProjectPersistentDownloadDir(); // Function Engine.BlueprintPathsLibrary.ProjectPersistentDownloadDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8de60
	struct FString ProjectModsDir(); // Function Engine.BlueprintPathsLibrary.ProjectModsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8dde0
	struct FString ProjectLogDir(); // Function Engine.BlueprintPathsLibrary.ProjectLogDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8dd60
	struct FString ProjectIntermediateDir(); // Function Engine.BlueprintPathsLibrary.ProjectIntermediateDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8dce0
	struct FString ProjectDir(); // Function Engine.BlueprintPathsLibrary.ProjectDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8dc60
	struct FString ProjectContentDir(); // Function Engine.BlueprintPathsLibrary.ProjectContentDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8dbe0
	struct FString ProjectConfigDir(); // Function Engine.BlueprintPathsLibrary.ProjectConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8db60
	struct FString ProfilingDir(); // Function Engine.BlueprintPathsLibrary.ProfilingDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8dae0
	void NormalizeFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.NormalizeFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c8d9e0
	void NormalizeDirectoryName(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.NormalizeDirectoryName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c8d8e0
	struct FString MakeValidFileName(struct FString inString, struct FString InReplacementChar); // Function Engine.BlueprintPathsLibrary.MakeValidFileName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8d7a0
	void MakeStandardFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakeStandardFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c8d6a0
	void MakePlatformFilename(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakePlatformFilename // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c8d5a0
	bool MakePathRelativeTo(struct FString InPath, struct FString InRelativeTo, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.MakePathRelativeTo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c8d440
	struct FString LaunchDir(); // Function Engine.BlueprintPathsLibrary.LaunchDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8d3c0
	bool IsSamePath(struct FString PathA, struct FString PathB); // Function Engine.BlueprintPathsLibrary.IsSamePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8d2c0
	bool IsRestrictedPath(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsRestrictedPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8d220
	bool IsRelative(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsRelative // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8d180
	bool IsProjectFilePathSet(); // Function Engine.BlueprintPathsLibrary.IsProjectFilePathSet // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8d150
	bool IsDrive(struct FString InPath); // Function Engine.BlueprintPathsLibrary.IsDrive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8d0b0
	bool HasProjectPersistentDownloadDir(); // Function Engine.BlueprintPathsLibrary.HasProjectPersistentDownloadDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8d080
	struct TArray<struct FString> GetToolTipLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetToolTipLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8d040
	struct TArray<struct FString> GetRestrictedFolderNames(); // Function Engine.BlueprintPathsLibrary.GetRestrictedFolderNames // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8d000
	struct FString GetRelativePathToRoot(); // Function Engine.BlueprintPathsLibrary.GetRelativePathToRoot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8cf70
	struct TArray<struct FString> GetPropertyNameLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetPropertyNameLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8cf30
	struct FString GetProjectFilePath(); // Function Engine.BlueprintPathsLibrary.GetProjectFilePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8ceb0
	struct FString GetPath(struct FString InPath); // Function Engine.BlueprintPathsLibrary.GetPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8cdd0
	struct FString GetInvalidFileSystemChars(); // Function Engine.BlueprintPathsLibrary.GetInvalidFileSystemChars // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8cd50
	struct TArray<struct FString> GetGameLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetGameLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8cd10
	struct FString GetExtension(struct FString InPath, bool bIncludeDot); // Function Engine.BlueprintPathsLibrary.GetExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8cbe0
	struct TArray<struct FString> GetEngineLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetEngineLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8cba0
	struct TArray<struct FString> GetEditorLocalizationPaths(); // Function Engine.BlueprintPathsLibrary.GetEditorLocalizationPaths // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8cb60
	struct FString GetCleanFilename(struct FString InPath); // Function Engine.BlueprintPathsLibrary.GetCleanFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8ca80
	struct FString GetBaseFilename(struct FString InPath, bool bRemovePath); // Function Engine.BlueprintPathsLibrary.GetBaseFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c950
	struct FString GeneratedConfigDir(); // Function Engine.BlueprintPathsLibrary.GeneratedConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c8d0
	struct FString GameUserDeveloperDir(); // Function Engine.BlueprintPathsLibrary.GameUserDeveloperDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c850
	struct FString GameSourceDir(); // Function Engine.BlueprintPathsLibrary.GameSourceDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c7d0
	struct FString GameDevelopersDir(); // Function Engine.BlueprintPathsLibrary.GameDevelopersDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c750
	struct FString GameAgnosticSavedDir(); // Function Engine.BlueprintPathsLibrary.GameAgnosticSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c6d0
	bool FileExists(struct FString InPath); // Function Engine.BlueprintPathsLibrary.FileExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c630
	struct FString FeaturePackDir(); // Function Engine.BlueprintPathsLibrary.FeaturePackDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c5b0
	struct FString EnterprisePluginsDir(); // Function Engine.BlueprintPathsLibrary.EnterprisePluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c530
	struct FString EnterpriseFeaturePackDir(); // Function Engine.BlueprintPathsLibrary.EnterpriseFeaturePackDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c4b0
	struct FString EnterpriseDir(); // Function Engine.BlueprintPathsLibrary.EnterpriseDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c430
	struct FString EngineVersionAgnosticUserDir(); // Function Engine.BlueprintPathsLibrary.EngineVersionAgnosticUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c3b0
	struct FString EngineUserDir(); // Function Engine.BlueprintPathsLibrary.EngineUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c330
	struct FString EngineSourceDir(); // Function Engine.BlueprintPathsLibrary.EngineSourceDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c2b0
	struct FString EngineSavedDir(); // Function Engine.BlueprintPathsLibrary.EngineSavedDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c230
	struct FString EnginePluginsDir(); // Function Engine.BlueprintPathsLibrary.EnginePluginsDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c1b0
	struct FString EngineIntermediateDir(); // Function Engine.BlueprintPathsLibrary.EngineIntermediateDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c130
	struct FString EngineDir(); // Function Engine.BlueprintPathsLibrary.EngineDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c0b0
	struct FString EngineContentDir(); // Function Engine.BlueprintPathsLibrary.EngineContentDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8c030
	struct FString EngineConfigDir(); // Function Engine.BlueprintPathsLibrary.EngineConfigDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8bfb0
	bool DirectoryExists(struct FString InPath); // Function Engine.BlueprintPathsLibrary.DirectoryExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8bf10
	struct FString DiffDir(); // Function Engine.BlueprintPathsLibrary.DiffDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8be90
	struct FString CreateTempFilename(struct FString Path, struct FString Prefix, struct FString Extension); // Function Engine.BlueprintPathsLibrary.CreateTempFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8bcf0
	struct FString ConvertToSandboxPath(struct FString InPath, struct FString InSandboxName); // Function Engine.BlueprintPathsLibrary.ConvertToSandboxPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8bbb0
	struct FString ConvertRelativePathToFull(struct FString InPath, struct FString InBasePath); // Function Engine.BlueprintPathsLibrary.ConvertRelativePathToFull // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8ba70
	struct FString ConvertFromSandboxPath(struct FString InPath, struct FString InSandboxName); // Function Engine.BlueprintPathsLibrary.ConvertFromSandboxPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8b930
	struct FString Combine(struct TArray<struct FString>& InPaths); // Function Engine.BlueprintPathsLibrary.Combine // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c8b820
	bool CollapseRelativeDirectories(struct FString InPath, struct FString& OutPath); // Function Engine.BlueprintPathsLibrary.CollapseRelativeDirectories // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c8b710
	struct FString CloudDir(); // Function Engine.BlueprintPathsLibrary.CloudDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8b690
	struct FString ChangeExtension(struct FString InPath, struct FString InNewExtension); // Function Engine.BlueprintPathsLibrary.ChangeExtension // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8b550
	struct FString BugItDir(); // Function Engine.BlueprintPathsLibrary.BugItDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8b4d0
	struct FString AutomationTransientDir(); // Function Engine.BlueprintPathsLibrary.AutomationTransientDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8b450
	struct FString AutomationLogDir(); // Function Engine.BlueprintPathsLibrary.AutomationLogDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8b3d0
	struct FString AutomationDir(); // Function Engine.BlueprintPathsLibrary.AutomationDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c8b350
};

// Class Engine.PlatformGameInstance
// Size: 0x2e8 (Inherited: 0x218)
struct UPlatformGameInstance : UGameInstance {
	struct FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0x218(0x10)
	struct FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0x228(0x10)
	struct FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0x238(0x10)
	struct FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0x248(0x10)
	struct FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0x258(0x10)
	struct FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x268(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x278(0x10)
	struct FMulticastInlineDelegate ApplicationRegisteredForRemoteNotificationsDelegate; // 0x288(0x10)
	struct FMulticastInlineDelegate ApplicationRegisteredForUserNotificationsDelegate; // 0x298(0x10)
	struct FMulticastInlineDelegate ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x2a8(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedRemoteNotificationDelegate; // 0x2b8(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedLocalNotificationDelegate; // 0x2c8(0x10)
	struct FMulticastInlineDelegate ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x2d8(0x10)
};

// Class Engine.BlueprintPlatformLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintPlatformLibrary : UBlueprintFunctionLibrary {

	int32_t ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c90840
	void ScheduleLocalNotificationBadgeFromNow(int32_t inSecondsFromNow, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c90770
	int32_t ScheduleLocalNotificationBadgeAtTime(struct FDateTime& FireDateTime, bool LocalTime, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c90630
	int32_t ScheduleLocalNotificationAtTime(struct FDateTime& FireDateTime, bool LocalTime, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c90340
	void GetLaunchNotification(bool& NotificationLaunchedApp, struct FString& ActivationEvent, int32_t& FireDate); // Function Engine.BlueprintPlatformLibrary.GetLaunchNotification // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c901f0
	enum class EScreenOrientation GetDeviceOrientation(); // Function Engine.BlueprintPlatformLibrary.GetDeviceOrientation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3c901c0
	void ClearAllLocalNotifications(); // Function Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c901a0
	void CancelLocalNotificationById(int32_t NotificationId); // Function Engine.BlueprintPlatformLibrary.CancelLocalNotificationById // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c90130
	void CancelLocalNotification(struct FString ActivationEvent); // Function Engine.BlueprintPlatformLibrary.CancelLocalNotification // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c900a0
};

// Class Engine.BlueprintSetLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintSetLibrary : UBlueprintFunctionLibrary {

	void SetSetPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSet<int32_t>& Value); // Function Engine.BlueprintSetLibrary.SetSetPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c90ae0
	void Set_Union(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Union // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c91800
	void Set_ToArray(struct TSet<int32_t>& A, struct TArray<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_ToArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c91700
	void Set_RemoveItems(struct TSet<int32_t>& TargetSet, struct TArray<int32_t>& Items); // Function Engine.BlueprintSetLibrary.Set_RemoveItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c91600
	bool Set_Remove(struct TSet<int32_t>& TargetSet, int32_t& Item); // Function Engine.BlueprintSetLibrary.Set_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c91450
	int32_t Set_Length(struct TSet<int32_t>& TargetSet); // Function Engine.BlueprintSetLibrary.Set_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c913a0
	void Set_Intersection(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Intersection // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c91230
	void Set_Difference(struct TSet<int32_t>& A, struct TSet<int32_t>& B, struct TSet<int32_t>& Result); // Function Engine.BlueprintSetLibrary.Set_Difference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c910c0
	bool Set_Contains(struct TSet<int32_t>& TargetSet, int32_t& ItemToFind); // Function Engine.BlueprintSetLibrary.Set_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3c90f10
	void Set_Clear(struct TSet<int32_t>& TargetSet); // Function Engine.BlueprintSetLibrary.Set_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c90e70
	void Set_AddItems(struct TSet<int32_t>& TargetSet, struct TArray<int32_t>& NewItems); // Function Engine.BlueprintSetLibrary.Set_AddItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c90d70
	void Set_Add(struct TSet<int32_t>& TargetSet, int32_t& NewItem); // Function Engine.BlueprintSetLibrary.Set_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3c90bd0
};

// Class Engine.BodySetup
// Size: 0x2d0 (Inherited: 0x28)
struct UBodySetup : UObject {
	struct FKAggregateGeom AggGeom; // 0x28(0x58)
	struct FName BoneName; // 0x80(0x08)
	enum class EPhysicsType PhysicsType; // 0x88(0x01)
	char bAlwaysFullAnimWeight : 1; // 0x89(0x01)
	char bConsiderForBounds : 1; // 0x89(0x01)
	char bMeshCollideAll : 1; // 0x89(0x01)
	char bDoubleSidedGeometry : 1; // 0x89(0x01)
	char bGenerateNonMirroredCollision : 1; // 0x89(0x01)
	char bSharedCookedData : 1; // 0x89(0x01)
	char bGenerateMirroredCollision : 1; // 0x89(0x01)
	char bSupportUVsAndFaceRemap : 1; // 0x89(0x01)
	char pad_8A[0x1]; // 0x8a(0x01)
	enum class EBodyCollisionResponse CollisionReponse; // 0x8b(0x01)
	enum class ECollisionTraceFlag CollisionTraceFlag; // 0x8c(0x01)
	char pad_8D[0x3]; // 0x8d(0x03)
	struct UPhysicalMaterial* PhysMaterial; // 0x90(0x08)
	struct FWalkableSlopeOverride WalkableSlopeOverride; // 0x98(0x10)
	char pad_A8[0x78]; // 0xa8(0x78)
	struct FBodyInstance DefaultInstance; // 0x120(0x190)
	char pad_2B0[0x8]; // 0x2b0(0x08)
	struct FVector BuildScale3D; // 0x2b8(0x0c)
	char pad_2C4[0xc]; // 0x2c4(0x0c)
};

// Class Engine.BoneMaskFilter
// Size: 0x38 (Inherited: 0x28)
struct UBoneMaskFilter : UObject {
	struct TArray<struct FInputBlendPose> BlendPoses; // 0x28(0x10)
};

// Class Engine.BookmarkBase
// Size: 0x28 (Inherited: 0x28)
struct UBookmarkBase : UObject {
};

// Class Engine.BookMark
// Size: 0x50 (Inherited: 0x28)
struct UBookMark : UBookmarkBase {
	struct FVector Location; // 0x28(0x0c)
	struct FRotator Rotation; // 0x34(0x0c)
	struct TArray<struct FString> HiddenLevels; // 0x40(0x10)
};

// Class Engine.BookMark2D
// Size: 0x38 (Inherited: 0x28)
struct UBookMark2D : UBookmarkBase {
	float Zoom2D; // 0x28(0x04)
	struct FIntPoint Location; // 0x2c(0x08)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.ReflectionCapture
// Size: 0x328 (Inherited: 0x320)
struct AReflectionCapture : AActor {
	struct UReflectionCaptureComponent* CaptureComponent; // 0x320(0x08)
};

// Class Engine.BoxReflectionCapture
// Size: 0x328 (Inherited: 0x328)
struct ABoxReflectionCapture : AReflectionCapture {
};

// Class Engine.ReflectionCaptureComponent
// Size: 0x2b0 (Inherited: 0x220)
struct UReflectionCaptureComponent : USceneComponent {
	struct UStaticMeshComponent* VisualizationMesh; // 0x220(0x08)
	struct UBillboardComponent* CaptureOffsetComponent; // 0x228(0x08)
	enum class EReflectionSourceType ReflectionSourceType; // 0x230(0x01)
	char pad_231[0x7]; // 0x231(0x07)
	struct UTextureCube* Cubemap; // 0x238(0x08)
	float SourceCubemapAngle; // 0x240(0x04)
	float Brightness; // 0x244(0x04)
	float DiffuseRadiance; // 0x248(0x04)
	struct FVector CaptureOffset; // 0x24c(0x0c)
	struct FGuid MapBuildDataId; // 0x258(0x10)
	char pad_268[0x48]; // 0x268(0x48)
};

// Class Engine.BoxReflectionCaptureComponent
// Size: 0x2c0 (Inherited: 0x2b0)
struct UBoxReflectionCaptureComponent : UReflectionCaptureComponent {
	float BoxTransitionDistance; // 0x2a8(0x04)
	struct UBoxComponent* PreviewInfluenceBox; // 0x2b0(0x08)
	struct UBoxComponent* PreviewCaptureBox; // 0x2b8(0x08)
};

// Class Engine.MaterialExpressionDirectionalLightVector
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionDirectionalLightVector : UMaterialExpression {
};

// Class Engine.Breakpoint
// Size: 0x40 (Inherited: 0x28)
struct UBreakpoint : UObject {
	char bEnabled : 1; // 0x28(0x01)
	char pad_28_1 : 7; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct UEdGraphNode* Node; // 0x30(0x08)
	char bStepOnce : 1; // 0x38(0x01)
	char bStepOnce_WasPreviouslyDisabled : 1; // 0x38(0x01)
	char bStepOnce_RemoveAfterHit : 1; // 0x38(0x01)
	char pad_38_3 : 5; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.BrushBuilder
// Size: 0x80 (Inherited: 0x28)
struct UBrushBuilder : UObject {
	struct FString BitmapFilename; // 0x28(0x10)
	struct FString Tooltip; // 0x38(0x10)
	char NotifyBadParams : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct TArray<struct FVector> Vertices; // 0x50(0x10)
	struct TArray<struct FBuilderPoly> Polys; // 0x60(0x10)
	struct FName Layer; // 0x70(0x08)
	char MergeCoplanars : 1; // 0x78(0x01)
	char pad_78_1 : 7; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Engine.BrushComponent
// Size: 0x4b0 (Inherited: 0x4a0)
struct UBrushComponent : UPrimitiveComponent {
	struct UModel* Brush; // 0x4a0(0x08)
	struct UBodySetup* BrushBodySetup; // 0x4a8(0x08)
};

// Class Engine.BrushShape
// Size: 0x358 (Inherited: 0x358)
struct ABrushShape : ABrush {
};

// Class Engine.ButtonStyleAsset
// Size: 0x2a0 (Inherited: 0x28)
struct UButtonStyleAsset : UObject {
	struct FButtonStyle ButtonStyle; // 0x28(0x278)
};

// Class Engine.CameraAnim
// Size: 0x630 (Inherited: 0x28)
struct UCameraAnim : UObject {
	struct UInterpGroup* CameraInterpGroup; // 0x28(0x08)
	float AnimLength; // 0x30(0x04)
	struct FBox BoundingBox; // 0x34(0x1c)
	char bRelativeToInitialTransform : 1; // 0x50(0x01)
	char bRelativeToInitialFOV : 1; // 0x50(0x01)
	char pad_50_2 : 6; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	float BaseFOV; // 0x54(0x04)
	char pad_58[0x8]; // 0x58(0x08)
	struct FPostProcessSettings BasePostProcessSettings; // 0x60(0x5c0)
	float BasePostProcessBlendWeight; // 0x620(0x04)
	char pad_624[0xc]; // 0x624(0x0c)
};

// Class Engine.CameraAnimInst
// Size: 0x110 (Inherited: 0x28)
struct UCameraAnimInst : UObject {
	struct UCameraAnim* CamAnim; // 0x28(0x08)
	struct UInterpGroupInst* InterpGroupInst; // 0x30(0x08)
	char pad_38[0x18]; // 0x38(0x18)
	float PlayRate; // 0x50(0x04)
	char pad_54[0x14]; // 0x54(0x14)
	struct UInterpTrackMove* MoveTrack; // 0x68(0x08)
	struct UInterpTrackInstMove* MoveInst; // 0x70(0x08)
	enum class ECameraAnimPlaySpace PlaySpace; // 0x78(0x01)
	char pad_79[0x97]; // 0x79(0x97)

	void Stop(bool bImmediate); // Function Engine.CameraAnimInst.Stop // (Final|Native|Public|BlueprintCallable) // @ game+0x3c96bf0
	void SetScale(float NewDuration); // Function Engine.CameraAnimInst.SetScale // (Final|Native|Public|BlueprintCallable) // @ game+0x3c96ae0
	void SetDuration(float NewDuration); // Function Engine.CameraAnimInst.SetDuration // (Final|Native|Public|BlueprintCallable) // @ game+0x3c96760
};

// Class Engine.CameraBlockingVolume
// Size: 0x358 (Inherited: 0x358)
struct ACameraBlockingVolume : AVolume {
};

// Class Engine.CameraModifier_CameraShake
// Size: 0xb0 (Inherited: 0x48)
struct UCameraModifier_CameraShake : UCameraModifier {
	struct TArray<struct FActiveCameraShakeInfo> ActiveShakes; // 0x48(0x10)
	struct TMap<struct UCameraShake*, struct FPooledCameraShakes> ExpiredPooledShakesMap; // 0x58(0x50)
	float SplitScreenShakeScale; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Engine.CameraShake
// Size: 0x160 (Inherited: 0x28)
struct UCameraShake : UObject {
	char bSingleInstance : 1; // 0x28(0x01)
	char pad_28_1 : 7; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float OscillationDuration; // 0x2c(0x04)
	float OscillationBlendInTime; // 0x30(0x04)
	float OscillationBlendOutTime; // 0x34(0x04)
	struct FROscillator RotOscillation; // 0x38(0x24)
	struct FVOscillator LocOscillation; // 0x5c(0x24)
	struct FFOscillator FOVOscillation; // 0x80(0x0c)
	float AnimPlayRate; // 0x8c(0x04)
	float AnimScale; // 0x90(0x04)
	float AnimBlendInTime; // 0x94(0x04)
	float AnimBlendOutTime; // 0x98(0x04)
	float RandomAnimSegmentDuration; // 0x9c(0x04)
	struct UCameraAnim* Anim; // 0xa0(0x08)
	char bRandomAnimSegment : 1; // 0xa8(0x01)
	char pad_A8_1 : 7; // 0xa8(0x01)
	char pad_A9[0x17]; // 0xa9(0x17)
	struct APlayerCameraManager* CameraOwner; // 0xc0(0x08)
	char pad_C8[0x80]; // 0xc8(0x80)
	float ShakeScale; // 0x148(0x04)
	float OscillatorTimeRemaining; // 0x14c(0x04)
	struct UCameraAnimInst* AnimInst; // 0x150(0x08)
	char pad_158[0x8]; // 0x158(0x08)

	void ReceiveStopShake(bool bImmediately); // Function Engine.CameraShake.ReceiveStopShake // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceivePlayShake(float Scale); // Function Engine.CameraShake.ReceivePlayShake // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	bool ReceiveIsFinished(); // Function Engine.CameraShake.ReceiveIsFinished // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x176efd0
	void BlueprintUpdateCameraShake(float DeltaTime, float ALPHA, struct FMinimalViewInfo& POV, struct FMinimalViewInfo& ModifiedPOV); // Function Engine.CameraShake.BlueprintUpdateCameraShake // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x23a3b60
};

// Class Engine.CameraShakeSourceActor
// Size: 0x328 (Inherited: 0x320)
struct ACameraShakeSourceActor : AActor {
	struct UCameraShakeSourceComponent* CameraShakeSourceComponent; // 0x320(0x08)
};

// Class Engine.CameraShakeSourceComponent
// Size: 0x240 (Inherited: 0x220)
struct UCameraShakeSourceComponent : USceneComponent {
	enum class ECameraShakeAttenuation Attenuation; // 0x220(0x01)
	char pad_221[0x3]; // 0x221(0x03)
	float InnerAttenuationRadius; // 0x224(0x04)
	float OuterAttenuationRadius; // 0x228(0x04)
	char pad_22C[0x4]; // 0x22c(0x04)
	struct UCameraShake* CameraShake; // 0x230(0x08)
	bool bAutoPlay; // 0x238(0x01)
	char pad_239[0x7]; // 0x239(0x07)

	void StopAllCameraShakes(bool bImmediately); // Function Engine.CameraShakeSourceComponent.StopAllCameraShakes // (Final|Native|Public|BlueprintCallable) // @ game+0x3c9b140
	void PlayCameraShake(struct UCameraShake* InCameraShake); // Function Engine.CameraShakeSourceComponent.PlayCameraShake // (Final|Native|Public|BlueprintCallable) // @ game+0x3c9b0c0
	void Play(); // Function Engine.CameraShakeSourceComponent.Play // (Final|Native|Public|BlueprintCallable) // @ game+0x3c9b0a0
	float GetAttenuationFactor(struct FVector& Location); // Function Engine.CameraShakeSourceComponent.GetAttenuationFactor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3c99920
};

// Class Engine.Canvas
// Size: 0x2c0 (Inherited: 0x28)
struct UCanvas : UObject {
	float OrgX; // 0x28(0x04)
	float OrgY; // 0x2c(0x04)
	float ClipX; // 0x30(0x04)
	float ClipY; // 0x34(0x04)
	struct FColor DrawColor; // 0x38(0x04)
	char bCenterX : 1; // 0x3c(0x01)
	char bCenterY : 1; // 0x3c(0x01)
	char bNoSmooth : 1; // 0x3c(0x01)
	char pad_3C_3 : 5; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	int32_t SizeX; // 0x40(0x04)
	int32_t SizeY; // 0x44(0x04)
	char pad_48[0x8]; // 0x48(0x08)
	struct FPlane ColorModulate; // 0x50(0x10)
	struct UTexture2D* DefaultTexture; // 0x60(0x08)
	struct UTexture2D* GradientTexture0; // 0x68(0x08)
	struct UReporterGraph* ReporterGraph; // 0x70(0x08)
	char pad_78[0x248]; // 0x78(0x248)

	struct FVector2D K2_TextSize(struct UFont* RenderFont, struct FString RenderText, struct FVector2D Scale); // Function Engine.Canvas.K2_TextSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c9af70
	struct FVector2D K2_StrLen(struct UFont* RenderFont, struct FString RenderText); // Function Engine.Canvas.K2_StrLen // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c9ae80
	struct FVector K2_Project(struct FVector WorldLocation); // Function Engine.Canvas.K2_Project // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c9add0
	void K2_DrawTriangle(struct UTexture* RenderTexture, struct TArray<struct FCanvasUVTri> Triangles); // Function Engine.Canvas.K2_DrawTriangle // (Final|Native|Public|BlueprintCallable) // @ game+0x3c9acb0
	void K2_DrawTexture(struct UTexture* RenderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, enum class EBlendMode BlendMode, float Rotation, struct FVector2D PivotPoint); // Function Engine.Canvas.K2_DrawTexture // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c9aa30
	void K2_DrawText(struct UFont* RenderFont, struct FString RenderText, struct FVector2D ScreenPosition, struct FVector2D Scale, struct FLinearColor RenderColor, float Kerning, struct FLinearColor ShadowColor, struct FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, struct FLinearColor OutlineColor); // Function Engine.Canvas.K2_DrawText // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c9a690
	void K2_DrawPolygon(struct UTexture* RenderTexture, struct FVector2D ScreenPosition, struct FVector2D Radius, int32_t NumberOfSides, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawPolygon // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c9a500
	void K2_DrawMaterialTriangle(struct UMaterialInterface* RenderMaterial, struct TArray<struct FCanvasUVTri> Triangles); // Function Engine.Canvas.K2_DrawMaterialTriangle // (Final|Native|Public|BlueprintCallable) // @ game+0x3c9a3e0
	void K2_DrawMaterial(struct UMaterialInterface* RenderMaterial, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, float Rotation, struct FVector2D PivotPoint); // Function Engine.Canvas.K2_DrawMaterial // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c9a1c0
	void K2_DrawLine(struct FVector2D ScreenPositionA, struct FVector2D ScreenPositionB, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawLine // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c9a070
	void K2_DrawBox(struct FVector2D ScreenPosition, struct FVector2D ScreenSize, float Thickness, struct FLinearColor RenderColor); // Function Engine.Canvas.K2_DrawBox // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c99f20
	void K2_DrawBorder(struct UTexture* BorderTexture, struct UTexture* BackgroundTexture, struct UTexture* LeftBorderTexture, struct UTexture* RightBorderTexture, struct UTexture* TopBorderTexture, struct UTexture* BottomBorderTexture, struct FVector2D ScreenPosition, struct FVector2D ScreenSize, struct FVector2D CoordinatePosition, struct FVector2D CoordinateSize, struct FLinearColor RenderColor, struct FVector2D BorderScale, struct FVector2D BackgroundScale, float Rotation, struct FVector2D PivotPoint, struct FVector2D CornerSize); // Function Engine.Canvas.K2_DrawBorder // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3c99ae0
	void K2_Deproject(struct FVector2D ScreenPosition, struct FVector& WorldOrigin, struct FVector& WorldDirection); // Function Engine.Canvas.K2_Deproject // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3c999c0
};

// Class Engine.TextureRenderTarget
// Size: 0xc0 (Inherited: 0xb8)
struct UTextureRenderTarget : UTexture {
	float TargetGamma; // 0xb8(0x04)
	char pad_BC[0x4]; // 0xbc(0x04)
};

// Class Engine.TextureRenderTarget2D
// Size: 0xe8 (Inherited: 0xc0)
struct UTextureRenderTarget2D : UTextureRenderTarget {
	int32_t SizeX; // 0xc0(0x04)
	int32_t SizeY; // 0xc4(0x04)
	struct FLinearColor ClearColor; // 0xc8(0x10)
	enum class TextureAddress AddressX; // 0xd8(0x01)
	enum class TextureAddress AddressY; // 0xd9(0x01)
	char bForceLinearGamma : 1; // 0xda(0x01)
	char bHDR : 1; // 0xda(0x01)
	char bGPUSharedFlag : 1; // 0xda(0x01)
	char pad_DA_3 : 5; // 0xda(0x01)
	enum class ETextureRenderTargetFormat RenderTargetFormat; // 0xdb(0x01)
	char bAutoGenerateMips : 1; // 0xdc(0x01)
	char pad_DC_1 : 7; // 0xdc(0x01)
	enum class TextureFilter MipsSamplerFilter; // 0xdd(0x01)
	enum class TextureAddress MipsAddressU; // 0xde(0x01)
	enum class TextureAddress MipsAddressV; // 0xdf(0x01)
	enum class EPixelFormat OverrideFormat; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
};

// Class Engine.CanvasRenderTarget2D
// Size: 0x108 (Inherited: 0xe8)
struct UCanvasRenderTarget2D : UTextureRenderTarget2D {
	struct FMulticastInlineDelegate OnCanvasRenderTargetUpdate; // 0xe8(0x10)
	struct TWeakObjectPtr<struct UWorld> World; // 0xf8(0x08)
	bool bShouldClearRenderTargetOnReceiveUpdate; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)

	void UpdateResource(); // Function Engine.CanvasRenderTarget2D.UpdateResource // (Native|Public|BlueprintCallable) // @ game+0x3ca2340
	void ReceiveUpdate(struct UCanvas* Canvas, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.ReceiveUpdate // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void GetSize(int32_t& Width, int32_t& Height); // Function Engine.CanvasRenderTarget2D.GetSize // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3ca0150
	struct UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(struct UObject* WorldContextObject, struct UCanvasRenderTarget2D* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3c9fb60
};

// Class Engine.ChaosPhysicalMaterial
// Size: 0x48 (Inherited: 0x28)
struct UChaosPhysicalMaterial : UObject {
	float Friction; // 0x28(0x04)
	float StaticFriction; // 0x2c(0x04)
	float Restitution; // 0x30(0x04)
	float LinearEtherDrag; // 0x34(0x04)
	float AngularEtherDrag; // 0x38(0x04)
	float SleepingLinearVelocityThreshold; // 0x3c(0x04)
	float SleepingAngularVelocityThreshold; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.CheckBoxStyleAsset
// Size: 0x5a8 (Inherited: 0x28)
struct UCheckBoxStyleAsset : UObject {
	struct FCheckBoxStyle CheckBoxStyle; // 0x28(0x580)
};

// Class Engine.ChildActorComponent
// Size: 0x250 (Inherited: 0x220)
struct UChildActorComponent : USceneComponent {
	struct AActor* ChildActorClass; // 0x220(0x08)
	struct AActor* ChildActor; // 0x228(0x08)
	struct AActor* ChildActorTemplate; // 0x230(0x08)
	char pad_238[0x18]; // 0x238(0x18)

	void SetChildActorClass(struct AActor* InClass); // Function Engine.ChildActorComponent.SetChildActorClass // (Final|Native|Public|BlueprintCallable) // @ game+0x3ca9a20
};

// Class Engine.ChildConnection
// Size: 0x1aa8 (Inherited: 0x1aa0)
struct UChildConnection : UNetConnection {
	struct UNetConnection* Parent; // 0x1aa0(0x08)
};

// Class Engine.PlatformInterfaceBase
// Size: 0x38 (Inherited: 0x28)
struct UPlatformInterfaceBase : UObject {
	struct TArray<struct FDelegateArray> AllDelegates; // 0x28(0x10)
};

// Class Engine.CloudStorageBase
// Size: 0x50 (Inherited: 0x38)
struct UCloudStorageBase : UPlatformInterfaceBase {
	struct TArray<struct FString> LocalCloudFiles; // 0x38(0x10)
	char bSuppressDelegateCalls : 1; // 0x48(0x01)
	char pad_48_1 : 7; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.CollisionProfile
// Size: 0x158 (Inherited: 0x38)
struct UCollisionProfile : UDeveloperSettings {
	struct TArray<struct FCollisionResponseTemplate> Profiles; // 0x38(0x10)
	struct TArray<struct FCustomChannelSetup> DefaultChannelResponses; // 0x48(0x10)
	struct TArray<struct FCustomProfile> EditProfiles; // 0x58(0x10)
	struct TArray<struct FRedirector> ProfileRedirects; // 0x68(0x10)
	struct TArray<struct FRedirector> CollisionChannelRedirects; // 0x78(0x10)
	char pad_88[0xd0]; // 0x88(0xd0)
};

// Class Engine.ComponentDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UComponentDelegateBinding : UDynamicBlueprintBinding {
	struct TArray<struct FBlueprintComponentDelegateBinding> ComponentDelegateBindings; // 0x28(0x10)
};

// Class Engine.CurveTable
// Size: 0xa0 (Inherited: 0x28)
struct UCurveTable : UObject {
	char pad_28[0x78]; // 0x28(0x78)
};

// Class Engine.CompositeCurveTable
// Size: 0xc8 (Inherited: 0xa0)
struct UCompositeCurveTable : UCurveTable {
	struct TArray<struct UCurveTable*> ParentTables; // 0xa0(0x10)
	struct TArray<struct UCurveTable*> OldParentTables; // 0xb0(0x10)
	char pad_C0[0x8]; // 0xc0(0x08)
};

// Class Engine.DataTable
// Size: 0xc8 (Inherited: 0x28)
struct UDataTable : UObject {
	struct UScriptStruct* RowStruct; // 0x28(0x08)
	char pad_30[0x50]; // 0x30(0x50)
	char bStripFromClientBuilds : 1; // 0x80(0x01)
	char bIgnoreExtraFields : 1; // 0x80(0x01)
	char bIgnoreMissingFields : 1; // 0x80(0x01)
	char pad_80_3 : 5; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct FString ImportKeyField; // 0x88(0x10)
	char pad_98[0x30]; // 0x98(0x30)
};

// Class Engine.CompositeDataTable
// Size: 0xf0 (Inherited: 0xc8)
struct UCompositeDataTable : UDataTable {
	struct TArray<struct UDataTable*> ParentTables; // 0xc8(0x10)
	struct TArray<struct UDataTable*> OldParentTables; // 0xd8(0x10)
	char pad_E8[0x8]; // 0xe8(0x08)
};

// Class Engine.Console
// Size: 0x130 (Inherited: 0x28)
struct UConsole : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct ULocalPlayer* ConsoleTargetPlayer; // 0x38(0x08)
	struct UTexture2D* DefaultTexture_Black; // 0x40(0x08)
	struct UTexture2D* DefaultTexture_White; // 0x48(0x08)
	char pad_50[0x18]; // 0x50(0x18)
	struct TArray<struct FString> HistoryBuffer; // 0x68(0x10)
	char pad_78[0xb8]; // 0x78(0xb8)
};

// Class Engine.ControlChannel
// Size: 0x98 (Inherited: 0x80)
struct UControlChannel : UChannel {
	char pad_80[0x18]; // 0x80(0x18)
};

// Class Engine.StreamingSettings
// Size: 0x70 (Inherited: 0x38)
struct UStreamingSettings : UDeveloperSettings {
	char AsyncLoadingThreadEnabled : 1; // 0x38(0x01)
	char AsyncPostLoadEnabled : 1; // 0x38(0x01)
	char WarnIfTimeLimitExceeded : 1; // 0x38(0x01)
	char pad_38_3 : 5; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float TimeLimitExceededMultiplier; // 0x3c(0x04)
	float TimeLimitExceededMinTime; // 0x40(0x04)
	int32_t MinBulkDataSizeForAsyncLoading; // 0x44(0x04)
	char UseBackgroundLevelStreaming : 1; // 0x48(0x01)
	char AsyncLoadingUseFullTimeLimit : 1; // 0x48(0x01)
	char pad_48_2 : 6; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float AsyncLoadingTimeLimit; // 0x4c(0x04)
	float PriorityAsyncLoadingExtraTime; // 0x50(0x04)
	float LevelStreamingActorsUpdateTimeLimit; // 0x54(0x04)
	float PriorityLevelStreamingActorsUpdateExtraTime; // 0x58(0x04)
	int32_t LevelStreamingComponentsRegistrationGranularity; // 0x5c(0x04)
	float LevelStreamingUnregisterComponentsTimeLimit; // 0x60(0x04)
	int32_t LevelStreamingComponentsUnregistrationGranularity; // 0x64(0x04)
	char FlushStreamingOnExit : 1; // 0x68(0x01)
	char EventDrivenLoaderEnabled : 1; // 0x68(0x01)
	char pad_68_2 : 6; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.GarbageCollectionSettings
// Size: 0x58 (Inherited: 0x38)
struct UGarbageCollectionSettings : UDeveloperSettings {
	float TimeBetweenPurgingPendingKillObjects; // 0x38(0x04)
	char FlushStreamingOnGC : 1; // 0x3c(0x01)
	char AllowParallelGC : 1; // 0x3c(0x01)
	char IncrementalBeginDestroyEnabled : 1; // 0x3c(0x01)
	char MultithreadedDestructionEnabled : 1; // 0x3c(0x01)
	char CreateGCClusters : 1; // 0x3c(0x01)
	char AssetClusteringEnabled : 1; // 0x3c(0x01)
	char ActorClusteringEnabled : 1; // 0x3c(0x01)
	char BlueprintClusteringEnabled : 1; // 0x3c(0x01)
	char UseDisregardForGCOnDedicatedServers : 1; // 0x3d(0x01)
	char pad_3D_1 : 7; // 0x3d(0x01)
	char pad_3E[0x2]; // 0x3e(0x02)
	int32_t MinGCClusterSize; // 0x40(0x04)
	int32_t NumRetriesBeforeForcingGC; // 0x44(0x04)
	int32_t MaxObjectsNotConsideredByGC; // 0x48(0x04)
	int32_t SizeOfPermanentObjectPool; // 0x4c(0x04)
	int32_t MaxObjectsInGame; // 0x50(0x04)
	int32_t MaxObjectsInEditor; // 0x54(0x04)
};

// Class Engine.CullDistanceVolume
// Size: 0x370 (Inherited: 0x358)
struct ACullDistanceVolume : AVolume {
	struct TArray<struct FCullDistanceSizePair> CullDistances; // 0x358(0x10)
	char bEnabled : 1; // 0x368(0x01)
	char pad_368_1 : 7; // 0x368(0x01)
	char pad_369[0x7]; // 0x369(0x07)
};

// Class Engine.CurveBase
// Size: 0x30 (Inherited: 0x28)
struct UCurveBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)

	void GetValueRange(float& MinValue, float& MaxValue); // Function Engine.CurveBase.GetValueRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cb2160
	void GetTimeRange(float& MinTime, float& MaxTime); // Function Engine.CurveBase.GetTimeRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cb2080
};

// Class Engine.CurveEdPresetCurve
// Size: 0x28 (Inherited: 0x28)
struct UCurveEdPresetCurve : UObject {
};

// Class Engine.CurveFloat
// Size: 0xb8 (Inherited: 0x30)
struct UCurveFloat : UCurveBase {
	struct FRichCurve FloatCurve; // 0x30(0x80)
	bool bIsEventCurve; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)

	float GetFloatValue(float InTime); // Function Engine.CurveFloat.GetFloatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cb1f50
};

// Class Engine.CurveLinearColor
// Size: 0x250 (Inherited: 0x30)
struct UCurveLinearColor : UCurveBase {
	struct FRichCurve FloatCurves[0x4]; // 0x30(0x200)
	float AdjustHue; // 0x230(0x04)
	float AdjustSaturation; // 0x234(0x04)
	float AdjustBrightness; // 0x238(0x04)
	float AdjustBrightnessCurve; // 0x23c(0x04)
	float AdjustVibrance; // 0x240(0x04)
	float AdjustMinAlpha; // 0x244(0x04)
	float AdjustMaxAlpha; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)

	struct FLinearColor GetLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetLinearColorValue // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cb1fe0
	struct FLinearColor GetClampedLinearColorValue(float InTime); // Function Engine.CurveLinearColor.GetClampedLinearColorValue // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cb15e0
};

// Class Engine.Texture2D
// Size: 0xe8 (Inherited: 0xb8)
struct UTexture2D : UTexture {
	int32_t LevelIndex; // 0xb8(0x04)
	int32_t FirstResourceMemMip; // 0xbc(0x04)
	char bTemporarilyDisableStreaming : 1; // 0xc0(0x01)
	char pad_C0_1 : 7; // 0xc0(0x01)
	enum class TextureAddress AddressX; // 0xc1(0x01)
	enum class TextureAddress AddressY; // 0xc2(0x01)
	char pad_C3[0x1]; // 0xc3(0x01)
	struct FIntPoint ImportedSize; // 0xc4(0x08)
	char pad_CC[0x1c]; // 0xcc(0x1c)

	int32_t Blueprint_GetSizeY(); // Function Engine.Texture2D.Blueprint_GetSizeY // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e10110
	int32_t Blueprint_GetSizeX(); // Function Engine.Texture2D.Blueprint_GetSizeX // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e100e0
};

// Class Engine.CurveLinearColorAtlas
// Size: 0x100 (Inherited: 0xe8)
struct UCurveLinearColorAtlas : UTexture2D {
	uint32_t TextureSize; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TArray<struct UCurveLinearColor*> GradientCurves; // 0xf0(0x10)

	bool GetCurvePosition(struct UCurveLinearColor* InCurve, float& Position); // Function Engine.CurveLinearColorAtlas.GetCurvePosition // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3cb1680
};

// Class Engine.CurveSourceInterface
// Size: 0x28 (Inherited: 0x28)
struct UCurveSourceInterface : UInterface {

	float GetCurveValue(struct FName CurveName); // Function Engine.CurveSourceInterface.GetCurveValue // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x3cb1760
	void GetCurves(struct TArray<struct FNamedCurveValue>& OutValues); // Function Engine.CurveSourceInterface.GetCurves // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x3cb1800
	struct FName GetBindingName(); // Function Engine.CurveSourceInterface.GetBindingName // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x3cb15a0
};

// Class Engine.CurveVector
// Size: 0x1b0 (Inherited: 0x30)
struct UCurveVector : UCurveBase {
	struct FRichCurve FloatCurves[0x3]; // 0x30(0x180)

	struct FVector GetVectorValue(float InTime); // Function Engine.CurveVector.GetVectorValue // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cb2240
};

// Class Engine.DataTableFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UDataTableFunctionLibrary : UBlueprintFunctionLibrary {

	void GetDataTableRowNames(struct UDataTable* Table, struct TArray<struct FName>& OutRowNames); // Function Engine.DataTableFunctionLibrary.GetDataTableRowNames // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cb1e70
	bool GetDataTableRowFromName(struct UDataTable* Table, struct FName RowName, struct FTableRowBase& OutRow); // Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cb1a90
	int32_t GetDataTableRowCount(struct UDataTable* Table); // Function Engine.DataTableFunctionLibrary.GetDataTableRowCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cb1a10
	struct TArray<struct FString> GetDataTableColumnAsString(struct UDataTable* DataTable, struct FName PropertyName); // Function Engine.DataTableFunctionLibrary.GetDataTableColumnAsString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cb18b0
	void EvaluateCurveTableRow(struct UCurveTable* CurveTable, struct FName RowName, float InXY, enum class EEvaluateCurveTableResult& OutResult, float& OutXY, struct FString ContextString); // Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cb13b0
	bool DoesDataTableRowExist(struct UDataTable* Table, struct FName RowName); // Function Engine.DataTableFunctionLibrary.DoesDataTableRowExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cb12f0
};

// Class Engine.DebugCameraController
// Size: 0x800 (Inherited: 0x6f8)
struct ADebugCameraController : APlayerController {
	char bShowSelectedInfo : 1; // 0x6f8(0x01)
	char bIsFrozenRendering : 1; // 0x6f8(0x01)
	char bOverrideInitialMaxSpeed : 1; // 0x6f8(0x01)
	char pad_6F8_3 : 5; // 0x6f8(0x01)
	char pad_6F9[0x3]; // 0x6f9(0x03)
	float OverrideInitialMaxSpeed; // 0x6fc(0x04)
	char bIsOrbitingSelectedActor : 1; // 0x700(0x01)
	char bOrbitPivotUseCenter : 1; // 0x700(0x01)
	char bEnableBufferVisualization : 1; // 0x700(0x01)
	char bEnableBufferVisualizationFullMode : 1; // 0x700(0x01)
	char bIsBufferVisualizationInputSetup : 1; // 0x700(0x01)
	char bLastDisplayEnabled : 1; // 0x700(0x01)
	char pad_700_6 : 2; // 0x700(0x01)
	char pad_701[0x7]; // 0x701(0x07)
	struct UDrawFrustumComponent* DrawFrustum; // 0x708(0x08)
	struct AActor* SelectedActor; // 0x710(0x08)
	struct UPrimitiveComponent* SelectedComponent; // 0x718(0x08)
	struct FHitResult SelectedHitPoint; // 0x720(0x88)
	struct APlayerController* OriginalControllerRef; // 0x7a8(0x08)
	struct UPlayer* OriginalPlayer; // 0x7b0(0x08)
	float SpeedScale; // 0x7b8(0x04)
	float InitialMaxSpeed; // 0x7bc(0x04)
	float InitialAccel; // 0x7c0(0x04)
	float InitialDecel; // 0x7c4(0x04)
	char pad_7C8[0x38]; // 0x7c8(0x38)

	void ToggleDisplay(); // Function Engine.DebugCameraController.ToggleDisplay // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb2380
	void ShowDebugSelectedInfo(); // Function Engine.DebugCameraController.ShowDebugSelectedInfo // (Exec|Native|Public) // @ game+0x3cb2360
	void SetPawnMovementSpeedScale(float NewSpeedScale); // Function Engine.DebugCameraController.SetPawnMovementSpeedScale // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb22e0
	void ReceiveOnDeactivate(struct APlayerController* RestoredPC); // Function Engine.DebugCameraController.ReceiveOnDeactivate // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveOnActorSelected(struct AActor* NewSelectedActor, struct FVector& SelectHitLocation, struct FVector& SelectHitNormal, struct FHitResult& Hit); // Function Engine.DebugCameraController.ReceiveOnActorSelected // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x23a3b60
	void ReceiveOnActivate(struct APlayerController* OriginalPC); // Function Engine.DebugCameraController.ReceiveOnActivate // (Event|Public|BlueprintEvent) // @ game+0x23a3b60
	struct AActor* GetSelectedActor(); // Function Engine.DebugCameraController.GetSelectedActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e43540
};

// Class Engine.DebugCameraControllerSettings
// Size: 0x48 (Inherited: 0x38)
struct UDebugCameraControllerSettings : UDeveloperSettings {
	struct TArray<struct FDebugCameraControllerSettingsViewModeIndex> CycleViewModes; // 0x38(0x10)
};

// Class Engine.DebugCameraHUD
// Size: 0x410 (Inherited: 0x410)
struct ADebugCameraHUD : AHUD {
};

// Class Engine.DebugDrawService
// Size: 0x28 (Inherited: 0x28)
struct UDebugDrawService : UBlueprintFunctionLibrary {
};

// Class Engine.DecalActor
// Size: 0x328 (Inherited: 0x320)
struct ADecalActor : AActor {
	struct UDecalComponent* Decal; // 0x320(0x08)

	void SetDecalMaterial(struct UMaterialInterface* NewDecalMaterial); // Function Engine.DecalActor.SetDecalMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb6040
	struct UMaterialInterface* GetDecalMaterial(); // Function Engine.DecalActor.GetDecalMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cb5c20
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(); // Function Engine.DecalActor.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x3cb5bc0
};

// Class Engine.DecalComponent
// Size: 0x260 (Inherited: 0x220)
struct UDecalComponent : USceneComponent {
	struct UMaterialInterface* DecalMaterial; // 0x220(0x08)
	int32_t SortOrder; // 0x228(0x04)
	float FadeScreenSize; // 0x22c(0x04)
	float FadeStartDelay; // 0x230(0x04)
	float FadeDuration; // 0x234(0x04)
	float FadeInDuration; // 0x238(0x04)
	float FadeInStartDelay; // 0x23c(0x04)
	char bDestroyOwnerAfterFade : 1; // 0x240(0x01)
	char pad_240_1 : 7; // 0x240(0x01)
	char pad_241[0x3]; // 0x241(0x03)
	struct FVector DecalSize; // 0x244(0x0c)
	char pad_250[0x10]; // 0x250(0x10)

	void SetSortOrder(int32_t Value); // Function Engine.DecalComponent.SetSortOrder // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb67b0
	void SetFadeScreenSize(float NewFadeScreenSize); // Function Engine.DecalComponent.SetFadeScreenSize // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb6520
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade); // Function Engine.DecalComponent.SetFadeOut // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb6410
	void SetFadeIn(float StartDelay, float Duaration); // Function Engine.DecalComponent.SetFadeIn // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb6350
	void SetDecalMaterial(struct UMaterialInterface* NewDecalMaterial); // Function Engine.DecalComponent.SetDecalMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb60c0
	float GetFadeStartDelay(); // Function Engine.DecalComponent.GetFadeStartDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cb5d10
	float GetFadeInStartDelay(); // Function Engine.DecalComponent.GetFadeInStartDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cb5ce0
	float GetFadeInDuration(); // Function Engine.DecalComponent.GetFadeInDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cb5cb0
	float GetFadeDuration(); // Function Engine.DecalComponent.GetFadeDuration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cb5c80
	struct UMaterialInterface* GetDecalMaterial(); // Function Engine.DecalComponent.GetDecalMaterial // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cb5c50
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(); // Function Engine.DecalComponent.CreateDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x3cb5bf0
};

// Class Engine.DefaultPhysicsVolume
// Size: 0x368 (Inherited: 0x368)
struct ADefaultPhysicsVolume : APhysicsVolume {
};

// Class Engine.MKDemoNetConnectionEx
// Size: 0x1bf0 (Inherited: 0x1aa0)
struct UMKDemoNetConnectionEx : UNetConnection {
	char pad_1AA0[0x148]; // 0x1aa0(0x148)
	struct UDemoNetConnection* SelfDemoNetConnection; // 0x1be8(0x08)
};

// Class Engine.DemoNetConnection
// Size: 0x1c60 (Inherited: 0x1bf0)
struct UDemoNetConnection : UMKDemoNetConnectionEx {
	char pad_1BF0[0x70]; // 0x1bf0(0x70)
};

// Class Engine.PendingNetGame
// Size: 0xc8 (Inherited: 0x28)
struct UPendingNetGame : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UNetDriver* NetDriver; // 0x30(0x08)
	struct UDemoNetDriver* DemoNetDriver; // 0x38(0x08)
	char pad_40[0x88]; // 0x40(0x88)
};

// Class Engine.DemoPendingNetGame
// Size: 0xc8 (Inherited: 0xc8)
struct UDemoPendingNetGame : UPendingNetGame {
};

// Class Engine.DestructibleInterface
// Size: 0x28 (Inherited: 0x28)
struct UDestructibleInterface : UInterface {
};

// Class Engine.TextureLODSettings
// Size: 0x38 (Inherited: 0x28)
struct UTextureLODSettings : UObject {
	struct TArray<struct FTextureLODGroup> TextureLODGroups; // 0x28(0x10)
};

// Class Engine.DeviceProfile
// Size: 0x98 (Inherited: 0x38)
struct UDeviceProfile : UTextureLODSettings {
	struct FString DeviceType; // 0x38(0x10)
	struct FString BaseProfileName; // 0x48(0x10)
	struct UObject* Parent; // 0x58(0x08)
	char pad_60[0x18]; // 0x60(0x18)
	struct TArray<struct FString> CVars; // 0x78(0x10)
	char pad_88[0x10]; // 0x88(0x10)
};

// Class Engine.DeviceProfileManager
// Size: 0xb0 (Inherited: 0x28)
struct UDeviceProfileManager : UObject {
	struct TArray<struct UObject*> Profiles; // 0x28(0x10)
	char pad_38[0x78]; // 0x38(0x78)
};

// Class Engine.DialogueSoundWaveProxy
// Size: 0x178 (Inherited: 0x160)
struct UDialogueSoundWaveProxy : USoundBase {
	char pad_160[0x18]; // 0x160(0x18)
};

// Class Engine.DialogueVoice
// Size: 0x40 (Inherited: 0x28)
struct UDialogueVoice : UObject {
	enum class EGrammaticalGender gender; // 0x28(0x01)
	enum class EGrammaticalNumber Plurality; // 0x29(0x01)
	char pad_2A[0x2]; // 0x2a(0x02)
	struct FGuid LocalizationGUID; // 0x2c(0x10)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.DialogueWave
// Size: 0x70 (Inherited: 0x28)
struct UDialogueWave : UObject {
	char bMature : 1; // 0x28(0x01)
	char bOverride_SubtitleOverride : 1; // 0x28(0x01)
	char pad_28_2 : 6; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	struct FString SpokenText; // 0x30(0x10)
	struct FString SubtitleOverride; // 0x40(0x10)
	struct TArray<struct FDialogueContextMapping> ContextMappings; // 0x50(0x10)
	struct FGuid LocalizationGUID; // 0x60(0x10)
};

// Class Engine.Light
// Size: 0x330 (Inherited: 0x320)
struct ALight : AActor {
	struct ULightComponent* LightComponent; // 0x320(0x08)
	char bEnabled : 1; // 0x328(0x01)
	char pad_328_1 : 7; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)

	void ToggleEnabled(); // Function Engine.Light.ToggleEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5bb00
	void SetLightFunctionScale(struct FVector NewLightFunctionScale); // Function Engine.Light.SetLightFunctionScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d5b390
	void SetLightFunctionMaterial(struct UMaterialInterface* NewLightFunctionMaterial); // Function Engine.Light.SetLightFunctionMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b290
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.Light.SetLightFunctionFadeDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b190
	void SetLightColor(struct FLinearColor NewLightColor); // Function Engine.Light.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d5afc0
	void SetEnabled(bool bSetEnabled); // Function Engine.Light.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5ac20
	void SetCastShadows(bool bNewValue); // Function Engine.Light.SetCastShadows // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5a940
	void SetBrightness(float NewBrightness); // Function Engine.Light.SetBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5a8c0
	void SetAffectTranslucentLighting(bool bNewValue); // Function Engine.Light.SetAffectTranslucentLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5a5b0
	void OnRep_bEnabled(); // Function Engine.Light.OnRep_bEnabled // (Native|Public) // @ game+0x1e477f0
	bool IsEnabled(); // Function Engine.Light.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d59f80
	struct FLinearColor GetLightColor(); // Function Engine.Light.GetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d59ee0
	float GetBrightness(); // Function Engine.Light.GetBrightness // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d59e80
};

// Class Engine.DirectionalLight
// Size: 0x330 (Inherited: 0x330)
struct ADirectionalLight : ALight {
};

// Class Engine.LightComponentBase
// Size: 0x260 (Inherited: 0x220)
struct ULightComponentBase : USceneComponent {
	struct FGuid LightGuid; // 0x220(0x10)
	float Brightness; // 0x230(0x04)
	float Intensity; // 0x234(0x04)
	struct FColor LightColor; // 0x238(0x04)
	char bAffectsWorld : 1; // 0x23c(0x01)
	char CastShadows : 1; // 0x23c(0x01)
	char CastStaticShadows : 1; // 0x23c(0x01)
	char CastDynamicShadows : 1; // 0x23c(0x01)
	char bAffectTranslucentLighting : 1; // 0x23c(0x01)
	char bTransmission : 1; // 0x23c(0x01)
	char bCastVolumetricShadow : 1; // 0x23c(0x01)
	char bCastDeepShadow : 1; // 0x23c(0x01)
	char bCastRaytracedShadow : 1; // 0x23d(0x01)
	char bAffectReflection : 1; // 0x23d(0x01)
	char bAffectGlobalIllumination : 1; // 0x23d(0x01)
	char pad_23D_3 : 5; // 0x23d(0x01)
	char pad_23E[0x2]; // 0x23e(0x02)
	float IndirectLightingIntensity; // 0x240(0x04)
	float VolumetricScatteringIntensity; // 0x244(0x04)
	float VolumetricAttenuationScale; // 0x248(0x04)
	float VolumetricSourceRadiusScale; // 0x24c(0x04)
	int32_t SamplesPerPixel; // 0x250(0x04)
	char pad_254[0xc]; // 0x254(0x0c)

	void SetSamplesPerPixel(int32_t NewValue); // Function Engine.LightComponentBase.SetSamplesPerPixel // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5e7a0
	void SetCastVolumetricShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastVolumetricShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5e690
	void SetCastShadows(bool bNewValue); // Function Engine.LightComponentBase.SetCastShadows // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5e600
	void SetCastRaytracedShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastRaytracedShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5e570
	void SetCastDeepShadow(bool bNewValue); // Function Engine.LightComponentBase.SetCastDeepShadow // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5e4e0
	void SetAffectReflection(bool bNewValue); // Function Engine.LightComponentBase.SetAffectReflection // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5e3d0
	void SetAffectGlobalIllumination(bool bNewValue); // Function Engine.LightComponentBase.SetAffectGlobalIllumination // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5e340
	struct FLinearColor GetLightColor(); // Function Engine.LightComponentBase.GetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d5e200
};

// Class Engine.LightComponent
// Size: 0x370 (Inherited: 0x260)
struct ULightComponent : ULightComponentBase {
	float Temperature; // 0x258(0x04)
	float MaxDrawDistance; // 0x25c(0x04)
	float MaxDistanceFadeRange; // 0x260(0x04)
	char bUseTemperature : 1; // 0x264(0x01)
	int32_t ShadowMapChannel; // 0x268(0x04)
	float MinRoughness; // 0x270(0x04)
	float SpecularScale; // 0x274(0x04)
	float ShadowResolutionScale; // 0x278(0x04)
	float ShadowBias; // 0x27c(0x04)
	float ShadowSlopeBias; // 0x280(0x04)
	float ShadowSharpen; // 0x284(0x04)
	float ContactShadowLength; // 0x288(0x04)
	char ContactShadowLengthInWS : 1; // 0x28c(0x01)
	char pad_28C_2 : 6; // 0x28c(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	float ContactShadowStartDistance; // 0x290(0x04)
	float ContactShadowFadeDistance; // 0x294(0x04)
	float ShadowStrength; // 0x298(0x04)
	float TranslucentShadowDensity; // 0x29c(0x04)
	char InverseSquaredFalloff : 1; // 0x2a0(0x01)
	char CastTranslucentShadows : 1; // 0x2a0(0x01)
	char bCastShadowsFromCinematicObjectsOnly : 1; // 0x2a0(0x01)
	char bAffectDynamicIndirectLighting : 1; // 0x2a0(0x01)
	char bForceCachedShadowsFromMovablePrimitivesAsStatic : 1; // 0x2a0(0x01)
	char bForceCachedShadowsForMovablePrimitives : 1; // 0x2a0(0x01)
	char pad_2A0_6 : 2; // 0x2a0(0x01)
	char pad_2A1[0x3]; // 0x2a1(0x03)
	struct FLightingChannels LightingChannels; // 0x2a4(0x01)
	char pad_2A5[0x3]; // 0x2a5(0x03)
	struct UMaterialInterface* LightFunctionMaterial; // 0x2a8(0x08)
	struct FVector LightFunctionScale; // 0x2b0(0x0c)
	char pad_2BC[0x4]; // 0x2bc(0x04)
	struct UTextureLightProfile* IESTexture; // 0x2c0(0x08)
	char bUseIESBrightness : 1; // 0x2c8(0x01)
	char pad_2C8_1 : 7; // 0x2c8(0x01)
	char pad_2C9[0x3]; // 0x2c9(0x03)
	float IESBrightnessScale; // 0x2cc(0x04)
	float LightFunctionFadeDistance; // 0x2d0(0x04)
	float DisabledBrightness; // 0x2d4(0x04)
	char bEnableLightShaftBloom : 1; // 0x2d8(0x01)
	char pad_2D8_1 : 7; // 0x2d8(0x01)
	char pad_2D9[0x3]; // 0x2d9(0x03)
	float BloomScale; // 0x2dc(0x04)
	float BloomThreshold; // 0x2e0(0x04)
	float BloomMaxBrightness; // 0x2e4(0x04)
	struct FColor BloomTint; // 0x2e8(0x04)
	bool bUseFoliageLighting; // 0x2ec(0x01)
	bool bUseRayTracedDistanceFieldShadows; // 0x2ed(0x01)
	char pad_2EE[0x2]; // 0x2ee(0x02)
	float RayStartOffsetDepthScale; // 0x2f0(0x04)
	char pad_2F4[0x7c]; // 0x2f4(0x7c)

	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.LightComponent.SetVolumetricScatteringIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5ba80
	void SetUseIESBrightness(bool bNewValue); // Function Engine.LightComponent.SetUseIESBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b9f0
	void SetTransmission(bool bNewValue); // Function Engine.LightComponent.SetTransmission // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b960
	void SetTemperature(float NewTemperature); // Function Engine.LightComponent.SetTemperature // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b8e0
	void SetSpecularScale(float NewValue); // Function Engine.LightComponent.SetSpecularScale // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b860
	void SetShadowSlopeBias(float NewValue); // Function Engine.LightComponent.SetShadowSlopeBias // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b750
	void SetShadowResolutionScale(float NewValue); // Function Engine.LightComponent.SetShadowResolutionScale // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b6d0
	void SetShadowBias(float NewValue); // Function Engine.LightComponent.SetShadowBias // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b650
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Function Engine.LightComponent.SetLightingChannels // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b4b0
	void SetLightFunctionScale(struct FVector NewLightFunctionScale); // Function Engine.LightComponent.SetLightFunctionScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d5b420
	void SetLightFunctionMaterial(struct UMaterialInterface* NewLightFunctionMaterial); // Function Engine.LightComponent.SetLightFunctionMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b310
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Function Engine.LightComponent.SetLightFunctionFadeDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b210
	void SetLightFunctionDisabledBrightness(float NewValue); // Function Engine.LightComponent.SetLightFunctionDisabledBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b110
	void SetLightColor(struct FLinearColor NewLightColor, bool bSRGB); // Function Engine.LightComponent.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d5b040
	void SetIntensity(float NewIntensity); // Function Engine.LightComponent.SetIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5aec0
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.LightComponent.SetIndirectLightingIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5ae40
	void SetIESTexture(struct UTextureLightProfile* NewValue); // Function Engine.LightComponent.SetIESTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5adc0
	void SetIESBrightnessScale(float NewValue); // Function Engine.LightComponent.SetIESBrightnessScale // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5ad40
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue); // Function Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5acb0
	void SetEnableLightShaftBloom(bool bNewValue); // Function Engine.LightComponent.SetEnableLightShaftBloom // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5ab90
	void SetBloomTint(struct FColor NewValue); // Function Engine.LightComponent.SetBloomTint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d5a850
	void SetBloomThreshold(float NewValue); // Function Engine.LightComponent.SetBloomThreshold // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5a7d0
	void SetBloomScale(float NewValue); // Function Engine.LightComponent.SetBloomScale // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5a750
	void SetBloomMaxBrightness(float NewValue); // Function Engine.LightComponent.SetBloomMaxBrightness // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5a6d0
	void SetAffectTranslucentLighting(bool bNewValue); // Function Engine.LightComponent.SetAffectTranslucentLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5a640
	void SetAffectDynamicIndirectLighting(bool bNewValue); // Function Engine.LightComponent.SetAffectDynamicIndirectLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5a520
};

// Class Engine.DirectionalLightComponent
// Size: 0x3f0 (Inherited: 0x370)
struct UDirectionalLightComponent : ULightComponent {
	float ShadowCascadeBiasDistribution; // 0x368(0x04)
	char bEnableLightShaftOcclusion : 1; // 0x36c(0x01)
	float OcclusionMaskDarkness; // 0x370(0x04)
	float OcclusionDepthRange; // 0x374(0x04)
	struct FVector LightShaftOverrideDirection; // 0x378(0x0c)
	float WholeSceneDynamicShadowRadius; // 0x384(0x04)
	float DynamicShadowDistanceMovableLight; // 0x388(0x04)
	float DynamicShadowDistanceStationaryLight; // 0x38c(0x04)
	int32_t DynamicShadowCascades; // 0x390(0x04)
	float CascadeDistributionExponent; // 0x394(0x04)
	float CascadeTransitionFraction; // 0x398(0x04)
	float ShadowDistanceFadeoutFraction; // 0x39c(0x04)
	char bUseInsetShadowsForMovableObjects : 1; // 0x3a0(0x01)
	int32_t FarShadowCascadeCount; // 0x3a4(0x04)
	float FarShadowDistance; // 0x3a8(0x04)
	char bUseFarShadowAsStaticWorldShadow : 1; // 0x3ac(0x01)
	char pad_3AC_3 : 5; // 0x3ac(0x01)
	char pad_3AD[0x3]; // 0x3ad(0x03)
	float DistanceFieldShadowDistance; // 0x3b0(0x04)
	float LightSourceAngle; // 0x3b4(0x04)
	float LightSourceSoftAngle; // 0x3b8(0x04)
	float TraceDistance; // 0x3bc(0x04)
	struct FLightmassDirectionalLightSettings LightmassSettings; // 0x3c0(0x10)
	char bCastModulatedShadows : 1; // 0x3d0(0x01)
	char pad_3D0_1 : 7; // 0x3d0(0x01)
	char pad_3D1[0x3]; // 0x3d1(0x03)
	struct FColor ModulatedShadowColor; // 0x3d4(0x04)
	float ShadowAmount; // 0x3d8(0x04)
	char bUsedAsAtmosphereSunLight : 1; // 0x3dc(0x01)
	char pad_3DC_1 : 7; // 0x3dc(0x01)
	char pad_3DD[0x3]; // 0x3dd(0x03)
	int32_t AtmosphereSunLightIndex; // 0x3e0(0x04)
	char pad_3E4[0xc]; // 0x3e4(0x0c)

	void SetShadowDistanceFadeoutFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb6730
	void SetShadowAmount(float NewValue); // Function Engine.DirectionalLightComponent.SetShadowAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb66b0
	void SetOcclusionMaskDarkness(float NewValue); // Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb6630
	void SetLightShaftOverrideDirection(struct FVector NewValue); // Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3cb65a0
	void SetEnableLightShaftOcclusion(bool bNewValue); // Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb62c0
	void SetDynamicShadowDistanceStationaryLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb6240
	void SetDynamicShadowDistanceMovableLight(float NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb61c0
	void SetDynamicShadowCascades(int32_t NewValue); // Function Engine.DirectionalLightComponent.SetDynamicShadowCascades // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb6140
	void SetCascadeTransitionFraction(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb5fc0
	void SetCascadeDistributionExponent(float NewValue); // Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3cb5f40
};

// Class Engine.Distribution
// Size: 0x30 (Inherited: 0x28)
struct UDistribution : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.DistributionFloat
// Size: 0x38 (Inherited: 0x30)
struct UDistributionFloat : UDistribution {
	char bCanBeBaked : 1; // 0x30(0x01)
	char pad_30_1 : 1; // 0x30(0x01)
	char bBakedDataSuccesfully : 1; // 0x30(0x01)
	char pad_30_3 : 5; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.DistributionFloatConstant
// Size: 0x40 (Inherited: 0x38)
struct UDistributionFloatConstant : UDistributionFloat {
	float Constant; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.DistributionFloatConstantCurve
// Size: 0x50 (Inherited: 0x38)
struct UDistributionFloatConstantCurve : UDistributionFloat {
	struct FInterpCurveFloat ConstantCurve; // 0x38(0x18)
};

// Class Engine.DistributionFloatParameterBase
// Size: 0x60 (Inherited: 0x40)
struct UDistributionFloatParameterBase : UDistributionFloatConstant {
	struct FName ParameterName; // 0x40(0x08)
	float MinInput; // 0x48(0x04)
	float MaxInput; // 0x4c(0x04)
	float MinOutput; // 0x50(0x04)
	float MaxOutput; // 0x54(0x04)
	enum class DistributionParamMode ParamMode; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
};

// Class Engine.DistributionFloatParticleParameter
// Size: 0x60 (Inherited: 0x60)
struct UDistributionFloatParticleParameter : UDistributionFloatParameterBase {
};

// Class Engine.DistributionFloatUniform
// Size: 0x40 (Inherited: 0x38)
struct UDistributionFloatUniform : UDistributionFloat {
	float Min; // 0x38(0x04)
	float MAX; // 0x3c(0x04)
};

// Class Engine.DistributionFloatUniformCurve
// Size: 0x50 (Inherited: 0x38)
struct UDistributionFloatUniformCurve : UDistributionFloat {
	struct FInterpCurveVector2D ConstantCurve; // 0x38(0x18)
};

// Class Engine.DistributionVector
// Size: 0x38 (Inherited: 0x30)
struct UDistributionVector : UDistribution {
	char bCanBeBaked : 1; // 0x30(0x01)
	char bIsDirty : 1; // 0x30(0x01)
	char bBakedDataSuccesfully : 1; // 0x30(0x01)
	char pad_30_3 : 5; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.DistributionVectorConstant
// Size: 0x50 (Inherited: 0x38)
struct UDistributionVectorConstant : UDistributionVector {
	struct FVector Constant; // 0x38(0x0c)
	char bLockAxes : 1; // 0x44(0x01)
	char pad_44_1 : 7; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.DistributionVectorConstantCurve
// Size: 0x58 (Inherited: 0x38)
struct UDistributionVectorConstantCurve : UDistributionVector {
	struct FInterpCurveVector ConstantCurve; // 0x38(0x18)
	char bLockAxes : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.DistributionVectorParameterBase
// Size: 0x90 (Inherited: 0x50)
struct UDistributionVectorParameterBase : UDistributionVectorConstant {
	struct FName ParameterName; // 0x50(0x08)
	struct FVector MinInput; // 0x58(0x0c)
	struct FVector MaxInput; // 0x64(0x0c)
	struct FVector MinOutput; // 0x70(0x0c)
	struct FVector MaxOutput; // 0x7c(0x0c)
	enum class DistributionParamMode ParamModes[0x3]; // 0x88(0x03)
	char pad_8B[0x5]; // 0x8b(0x05)
};

// Class Engine.DistributionVectorParticleParameter
// Size: 0x90 (Inherited: 0x90)
struct UDistributionVectorParticleParameter : UDistributionVectorParameterBase {
};

// Class Engine.DistributionVectorUniform
// Size: 0x60 (Inherited: 0x38)
struct UDistributionVectorUniform : UDistributionVector {
	struct FVector MAX; // 0x38(0x0c)
	struct FVector Min; // 0x44(0x0c)
	char bLockAxes : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	enum class EDistributionVectorLockFlags LockedAxes; // 0x54(0x01)
	enum class EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x55(0x03)
	char bUseExtremes : 1; // 0x58(0x01)
	char pad_58_1 : 7; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
};

// Class Engine.DistributionVectorUniformCurve
// Size: 0x60 (Inherited: 0x38)
struct UDistributionVectorUniformCurve : UDistributionVector {
	struct FInterpCurveTwoVectors ConstantCurve; // 0x38(0x18)
	char bLockAxes1 : 1; // 0x50(0x01)
	char bLockAxes2 : 1; // 0x50(0x01)
	char pad_50_2 : 6; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	enum class EDistributionVectorLockFlags LockedAxes[0x2]; // 0x54(0x02)
	enum class EDistributionVectorMirrorFlags MirrorFlags[0x3]; // 0x56(0x03)
	char pad_59[0x3]; // 0x59(0x03)
	char bUseExtremes : 1; // 0x5c(0x01)
	char pad_5C_1 : 7; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
};

// Class Engine.DocumentationActor
// Size: 0x328 (Inherited: 0x320)
struct ADocumentationActor : AActor {
	char pad_320[0x8]; // 0x320(0x08)
};

// Class Engine.DPICustomScalingRule
// Size: 0x28 (Inherited: 0x28)
struct UDPICustomScalingRule : UObject {
};

// Class Engine.DrawFrustumComponent
// Size: 0x4c0 (Inherited: 0x4a0)
struct UDrawFrustumComponent : UPrimitiveComponent {
	struct FColor FrustumColor; // 0x4a0(0x04)
	float FrustumAngle; // 0x4a4(0x04)
	float FrustumAspectRatio; // 0x4a8(0x04)
	float FrustumStartDist; // 0x4ac(0x04)
	float FrustumEndDist; // 0x4b0(0x04)
	char pad_4B4[0x4]; // 0x4b4(0x04)
	struct UTexture* Texture; // 0x4b8(0x08)
};

// Class Engine.SphereComponent
// Size: 0x4c0 (Inherited: 0x4c0)
struct USphereComponent : UShapeComponent {
	float SphereRadius; // 0x4b8(0x04)

	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps); // Function Engine.SphereComponent.SetSphereRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x3dfe020
	float GetUnscaledSphereRadius(); // Function Engine.SphereComponent.GetUnscaledSphereRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ca0230
	float GetShapeScale(); // Function Engine.SphereComponent.GetShapeScale // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfc500
	float GetScaledSphereRadius(); // Function Engine.SphereComponent.GetScaledSphereRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dfc4b0
};

// Class Engine.DrawSphereComponent
// Size: 0x4c0 (Inherited: 0x4c0)
struct UDrawSphereComponent : USphereComponent {
};

// Class Engine.EdGraph
// Size: 0x60 (Inherited: 0x28)
struct UEdGraph : UObject {
	struct UEdGraphSchema* Schema; // 0x28(0x08)
	struct TArray<struct UEdGraphNode*> Nodes; // 0x30(0x10)
	char bEditable : 1; // 0x40(0x01)
	char bAllowDeletion : 1; // 0x40(0x01)
	char bAllowRenaming : 1; // 0x40(0x01)
	char pad_40_3 : 5; // 0x40(0x01)
	char pad_41[0x1f]; // 0x41(0x1f)
};

// Class Engine.GraphNodeContextMenuContext
// Size: 0x50 (Inherited: 0x28)
struct UGraphNodeContextMenuContext : UObject {
	struct UBlueprint* Blueprint; // 0x28(0x08)
	struct UEdGraph* Graph; // 0x30(0x08)
	struct UEdGraphNode* Node; // 0x38(0x08)
	char pad_40[0x8]; // 0x40(0x08)
	bool bIsDebugging; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
};

// Class Engine.EdGraphNode
// Size: 0x98 (Inherited: 0x28)
struct UEdGraphNode : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct TArray<struct UEdGraphPin_Deprecated*> DeprecatedPins; // 0x38(0x10)
	int32_t NodePosX; // 0x48(0x04)
	int32_t NodePosY; // 0x4c(0x04)
	int32_t NodeWidth; // 0x50(0x04)
	int32_t NodeHeight; // 0x54(0x04)
	enum class ENodeAdvancedPins AdvancedPinDisplay; // 0x58(0x01)
	enum class ENodeEnabledState EnabledState; // 0x59(0x01)
	char pad_5A[0x1]; // 0x5a(0x01)
	char pad_5B_0 : 1; // 0x5b(0x01)
	char bDisplayAsDisabled : 1; // 0x5b(0x01)
	char bUserSetEnabledState : 1; // 0x5b(0x01)
	char pad_5B_3 : 1; // 0x5b(0x01)
	char bIsNodeEnabled : 1; // 0x5b(0x01)
	char pad_5B_5 : 1; // 0x5b(0x01)
	char bHasCompilerMessage : 1; // 0x5b(0x01)
	char pad_5B_7 : 1; // 0x5b(0x01)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct FString NodeComment; // 0x60(0x10)
	int32_t ErrorType; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
	struct FString ErrorMsg; // 0x78(0x10)
	struct FGuid NodeGuid; // 0x88(0x10)
};

// Class Engine.EdGraphNode_Documentation
// Size: 0xb8 (Inherited: 0x98)
struct UEdGraphNode_Documentation : UEdGraphNode {
	struct FString Link; // 0x98(0x10)
	struct FString Excerpt; // 0xa8(0x10)
};

// Class Engine.EdGraphPin_Deprecated
// Size: 0x118 (Inherited: 0x28)
struct UEdGraphPin_Deprecated : UObject {
	struct FString PinName; // 0x28(0x10)
	struct FString PinToolTip; // 0x38(0x10)
	enum class EEdGraphPinDirection Direction; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct FEdGraphPinType PinType; // 0x50(0x58)
	struct FString DefaultValue; // 0xa8(0x10)
	struct FString AutogeneratedDefaultValue; // 0xb8(0x10)
	struct UObject* DefaultObject; // 0xc8(0x08)
	struct FText DefaultTextValue; // 0xd0(0x18)
	struct TArray<struct UEdGraphPin_Deprecated*> LinkedTo; // 0xe8(0x10)
	struct TArray<struct UEdGraphPin_Deprecated*> SubPins; // 0xf8(0x10)
	struct UEdGraphPin_Deprecated* ParentPin; // 0x108(0x08)
	struct UEdGraphPin_Deprecated* ReferencePassThroughConnection; // 0x110(0x08)
};

// Class Engine.EdGraphSchema
// Size: 0x28 (Inherited: 0x28)
struct UEdGraphSchema : UObject {
};

// Class Engine.Emitter
// Size: 0x370 (Inherited: 0x320)
struct AEmitter : AActor {
	struct UParticleSystemComponent* ParticleSystemComponent; // 0x320(0x08)
	char bDestroyOnSystemFinish : 1; // 0x328(0x01)
	char bPostUpdateTickGroup : 1; // 0x328(0x01)
	char bCurrentlyActive : 1; // 0x328(0x01)
	char pad_328_3 : 5; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)
	struct FMulticastInlineDelegate OnParticleSpawn; // 0x330(0x10)
	struct FMulticastInlineDelegate OnParticleBurst; // 0x340(0x10)
	struct FMulticastInlineDelegate OnParticleDeath; // 0x350(0x10)
	struct FMulticastInlineDelegate OnParticleCollide; // 0x360(0x10)

	void ToggleActive(); // Function Engine.Emitter.ToggleActive // (Final|Native|Public|BlueprintCallable) // @ game+0x3cbee50
	void SetVectorParameter(struct FName ParameterName, struct FVector Param); // Function Engine.Emitter.SetVectorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3cbed80
	void SetTemplate(struct UParticleSystem* NewTemplate); // Function Engine.Emitter.SetTemplate // (Native|Public|BlueprintCallable) // @ game+0x1237d00
	void SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface* Param); // Function Engine.Emitter.SetMaterialParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x3cbecc0
	void SetFloatParameter(struct FName ParameterName, float Param); // Function Engine.Emitter.SetFloatParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x3cbebf0
	void SetColorParameter(struct FName ParameterName, struct FLinearColor Param); // Function Engine.Emitter.SetColorParameter // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3cbeb20
	void SetActorParameter(struct FName ParameterName, struct AActor* Param); // Function Engine.Emitter.SetActorParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x3cbea60
	void OnRep_bCurrentlyActive(); // Function Engine.Emitter.OnRep_bCurrentlyActive // (Native|Public) // @ game+0x1237ce0
	void OnParticleSystemFinished(struct UParticleSystemComponent* FinishedComponent); // Function Engine.Emitter.OnParticleSystemFinished // (Native|Public) // @ game+0x3cbe9d0
	bool IsActive(); // Function Engine.Emitter.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cbe9a0
	void Deactivate(); // Function Engine.Emitter.Deactivate // (Final|Native|Public|BlueprintCallable) // @ game+0x3cbe980
	void Activate(); // Function Engine.Emitter.Activate // (Final|Native|Public|BlueprintCallable) // @ game+0x3cbe960
};

// Class Engine.EmitterCameraLensEffectBase
// Size: 0x3e0 (Inherited: 0x370)
struct AEmitterCameraLensEffectBase : AEmitter {
	struct UParticleSystem* PS_CameraEffect; // 0x370(0x08)
	struct UParticleSystem* PS_CameraEffectNonExtremeContent; // 0x378(0x08)
	struct APlayerCameraManager* BaseCamera; // 0x380(0x08)
	char pad_388[0x8]; // 0x388(0x08)
	struct FTransform RelativeTransform; // 0x390(0x30)
	float BaseFOV; // 0x3c0(0x04)
	char bAllowMultipleInstances : 1; // 0x3c4(0x01)
	char bResetWhenRetriggered : 1; // 0x3c4(0x01)
	char pad_3C4_2 : 6; // 0x3c4(0x01)
	char pad_3C5[0x3]; // 0x3c5(0x03)
	struct TArray<struct AEmitterCameraLensEffectBase*> EmittersToTreatAsSame; // 0x3c8(0x10)
	float DistFromCamera; // 0x3d8(0x04)
	char pad_3DC[0x4]; // 0x3dc(0x04)
};

// Class Engine.ViewModeUtils
// Size: 0x28 (Inherited: 0x28)
struct UViewModeUtils : UObject {
};

// Class Engine.EngineBaseTypes
// Size: 0x28 (Inherited: 0x28)
struct UEngineBaseTypes : UObject {
};

// Class Engine.EngineHandlerComponentFactory
// Size: 0x28 (Inherited: 0x28)
struct UEngineHandlerComponentFactory : UHandlerComponentFactory {
};

// Class Engine.LocalMessage
// Size: 0x28 (Inherited: 0x28)
struct ULocalMessage : UObject {
};

// Class Engine.EngineMessage
// Size: 0xa8 (Inherited: 0x28)
struct UEngineMessage : ULocalMessage {
	struct FString FailedPlaceMessage; // 0x28(0x10)
	struct FString MaxedOutMessage; // 0x38(0x10)
	struct FString EnteredMessage; // 0x48(0x10)
	struct FString LeftMessage; // 0x58(0x10)
	struct FString GlobalNameChange; // 0x68(0x10)
	struct FString SpecEnteredMessage; // 0x78(0x10)
	struct FString NewPlayerMessage; // 0x88(0x10)
	struct FString NewSpecMessage; // 0x98(0x10)
};

// Class Engine.EngineTypes
// Size: 0x28 (Inherited: 0x28)
struct UEngineTypes : UObject {
};

// Class Engine.ExponentialHeightFog
// Size: 0x330 (Inherited: 0x320)
struct AExponentialHeightFog : AInfo {
	struct UExponentialHeightFogComponent* Component; // 0x320(0x08)
	char bEnabled : 1; // 0x328(0x01)
	char pad_328_1 : 7; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)

	void OnRep_bEnabled(); // Function Engine.ExponentialHeightFog.OnRep_bEnabled // (Native|Public) // @ game+0x1e477f0
};

// Class Engine.ExponentialHeightFogComponent
// Size: 0x2c0 (Inherited: 0x220)
struct UExponentialHeightFogComponent : USceneComponent {
	float FogDensity; // 0x220(0x04)
	float FogHeightFalloff; // 0x224(0x04)
	struct FExponentialHeightFogData SecondFogData; // 0x228(0x0c)
	struct FLinearColor FogInscatteringColor; // 0x234(0x10)
	char pad_244[0x4]; // 0x244(0x04)
	struct UTextureCube* InscatteringColorCubemap; // 0x248(0x08)
	float InscatteringColorCubemapAngle; // 0x250(0x04)
	struct FLinearColor InscatteringTextureTint; // 0x254(0x10)
	float FullyDirectionalInscatteringColorDistance; // 0x264(0x04)
	float NonDirectionalInscatteringColorDistance; // 0x268(0x04)
	float DirectionalInscatteringExponent; // 0x26c(0x04)
	float DirectionalInscatteringStartDistance; // 0x270(0x04)
	struct FLinearColor DirectionalInscatteringColor; // 0x274(0x10)
	float FogMaxOpacity; // 0x284(0x04)
	float StartDistance; // 0x288(0x04)
	float FogCutoffDistance; // 0x28c(0x04)
	bool bEnableVolumetricFog; // 0x290(0x01)
	char pad_291[0x3]; // 0x291(0x03)
	float VolumetricFogScatteringDistribution; // 0x294(0x04)
	struct FColor VolumetricFogAlbedo; // 0x298(0x04)
	struct FLinearColor VolumetricFogEmissive; // 0x29c(0x10)
	float VolumetricFogExtinctionScale; // 0x2ac(0x04)
	float VolumetricFogDistance; // 0x2b0(0x04)
	float VolumetricFogStaticLightingScatteringIntensity; // 0x2b4(0x04)
	bool bOverrideLightColorsWithFogInscatteringColors; // 0x2b8(0x01)
	char pad_2B9[0x7]; // 0x2b9(0x07)

	void SetVolumetricFogScatteringDistribution(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd1000
	void SetVolumetricFogExtinctionScale(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd0f80
	void SetVolumetricFogEmissive(struct FLinearColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3cd0f00
	void SetVolumetricFogDistance(float NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd0e80
	void SetVolumetricFogAlbedo(struct FColor NewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3cd0e10
	void SetVolumetricFog(bool bNewValue); // Function Engine.ExponentialHeightFogComponent.SetVolumetricFog // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd0d80
	void SetStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetStartDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd0d00
	void SetNonDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd0c80
	void SetInscatteringTextureTint(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3cd0b80
	void SetInscatteringColorCubemapAngle(float Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd0b00
	void SetInscatteringColorCubemap(struct UTextureCube* Value); // Function Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd0a80
	void SetFullyDirectionalInscatteringColorDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd0a00
	void SetFogMaxOpacity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd0900
	void SetFogInscatteringColor(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3cd0880
	void SetFogHeightFalloff(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7a370
	void SetFogDensity(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogDensity // (Final|Native|Public|BlueprintCallable) // @ game+0x3c7a580
	void SetFogCutoffDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetFogCutoffDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd0800
	void SetDirectionalInscatteringStartDistance(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd0780
	void SetDirectionalInscatteringExponent(float Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd0700
	void SetDirectionalInscatteringColor(struct FLinearColor Value); // Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3cd0680
};

// Class Engine.FloatingPawnMovement
// Size: 0x150 (Inherited: 0x138)
struct UFloatingPawnMovement : UPawnMovementComponent {
	float MaxSpeed; // 0x138(0x04)
	float Acceleration; // 0x13c(0x04)
	float Deceleration; // 0x140(0x04)
	float TurningBoost; // 0x144(0x04)
	char bPositionCorrected : 1; // 0x148(0x01)
	char pad_148_1 : 7; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
};

// Class Engine.Font
// Size: 0x1d0 (Inherited: 0x28)
struct UFont : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	enum class EFontCacheType FontCacheType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct FFontCharacter> Characters; // 0x38(0x10)
	struct TArray<struct UTexture2D*> Textures; // 0x48(0x10)
	int32_t IsRemapped; // 0x58(0x04)
	float EmScale; // 0x5c(0x04)
	float Ascent; // 0x60(0x04)
	float Descent; // 0x64(0x04)
	float Leading; // 0x68(0x04)
	int32_t Kerning; // 0x6c(0x04)
	struct FFontImportOptionsData ImportOptions; // 0x70(0xb0)
	int32_t NumCharacters; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	struct TArray<int32_t> MaxCharHeight; // 0x128(0x10)
	float ScalingFactor; // 0x138(0x04)
	int32_t LegacyFontSize; // 0x13c(0x04)
	struct FName LegacyFontName; // 0x140(0x08)
	struct FCompositeFont CompositeFont; // 0x148(0x38)
	char pad_180[0x50]; // 0x180(0x50)
};

// Class Engine.FontFace
// Size: 0x58 (Inherited: 0x28)
struct UFontFace : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct FString SourceFilename; // 0x30(0x10)
	enum class EFontHinting Hinting; // 0x40(0x01)
	enum class EFontLoadingPolicy LoadingPolicy; // 0x41(0x01)
	enum class EFontLayoutMethod LayoutMethod; // 0x42(0x01)
	char pad_43[0x15]; // 0x43(0x15)
};

// Class Engine.FontImportOptions
// Size: 0xd8 (Inherited: 0x28)
struct UFontImportOptions : UObject {
	struct FFontImportOptionsData Data; // 0x28(0xb0)
};

// Class Engine.ForceFeedbackAttenuation
// Size: 0xd8 (Inherited: 0x28)
struct UForceFeedbackAttenuation : UObject {
	struct FForceFeedbackAttenuationSettings Attenuation; // 0x28(0xb0)
};

// Class Engine.ForceFeedbackComponent
// Size: 0x300 (Inherited: 0x220)
struct UForceFeedbackComponent : USceneComponent {
	struct UForceFeedbackEffect* ForceFeedbackEffect; // 0x220(0x08)
	char bAutoDestroy : 1; // 0x228(0x01)
	char bStopWhenOwnerDestroyed : 1; // 0x228(0x01)
	char bLooping : 1; // 0x228(0x01)
	char bIgnoreTimeDilation : 1; // 0x228(0x01)
	char bOverrideAttenuation : 1; // 0x228(0x01)
	char pad_228_5 : 3; // 0x228(0x01)
	char pad_229[0x3]; // 0x229(0x03)
	float IntensityMultiplier; // 0x22c(0x04)
	struct UForceFeedbackAttenuation* AttenuationSettings; // 0x230(0x08)
	struct FForceFeedbackAttenuationSettings AttenuationOverrides; // 0x238(0xb0)
	struct FMulticastInlineDelegate OnForceFeedbackFinished; // 0x2e8(0x10)
	char pad_2F8[0x8]; // 0x2f8(0x08)

	void Stop(); // Function Engine.ForceFeedbackComponent.Stop // (Native|Public|BlueprintCallable) // @ game+0x3cd1080
	void SetIntensityMultiplier(float NewIntensityMultiplier); // Function Engine.ForceFeedbackComponent.SetIntensityMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd0c00
	void SetForceFeedbackEffect(struct UForceFeedbackEffect* NewForceFeedbackEffect); // Function Engine.ForceFeedbackComponent.SetForceFeedbackEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x3cd0980
	void Play(float StartTime); // Function Engine.ForceFeedbackComponent.Play // (Native|Public|BlueprintCallable) // @ game+0x3c967e0
	bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings& OutAttenuationSettings); // Function Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cd04d0
	void AdjustAttenuation(struct FForceFeedbackAttenuationSettings& InAttenuationSettings); // Function Engine.ForceFeedbackComponent.AdjustAttenuation // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3cd03d0
};

// Class Engine.ForceFeedbackEffect
// Size: 0x40 (Inherited: 0x28)
struct UForceFeedbackEffect : UObject {
	struct TArray<struct FForceFeedbackChannelDetails> ChannelDetails; // 0x28(0x10)
	float Duration; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.GameInstanceSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UGameInstanceSubsystem : USubsystem {
};

// Class Engine.GameNetworkManager
// Size: 0x3d0 (Inherited: 0x320)
struct AGameNetworkManager : AInfo {
	float BadPacketLossThreshold; // 0x320(0x04)
	float SeverePacketLossThreshold; // 0x324(0x04)
	int32_t BadPingThreshold; // 0x328(0x04)
	int32_t SeverePingThreshold; // 0x32c(0x04)
	int32_t AdjustedNetSpeed; // 0x330(0x04)
	float LastNetSpeedUpdateTime; // 0x334(0x04)
	int32_t TotalNetBandwidth; // 0x338(0x04)
	int32_t MinDynamicBandwidth; // 0x33c(0x04)
	int32_t MaxDynamicBandwidth; // 0x340(0x04)
	char bIsStandbyCheckingEnabled : 1; // 0x344(0x01)
	char bHasStandbyCheatTriggered : 1; // 0x344(0x01)
	char pad_344_2 : 6; // 0x344(0x01)
	char pad_345[0x3]; // 0x345(0x03)
	float StandbyRxCheatTime; // 0x348(0x04)
	float StandbyTxCheatTime; // 0x34c(0x04)
	float PercentMissingForRxStandby; // 0x350(0x04)
	float PercentMissingForTxStandby; // 0x354(0x04)
	float PercentForBadPing; // 0x358(0x04)
	float JoinInProgressStandbyWaitTime; // 0x35c(0x04)
	float MoveRepSize; // 0x360(0x04)
	float MAXPOSITIONERRORSQUARED; // 0x364(0x04)
	float MAXNEARZEROVELOCITYSQUARED; // 0x368(0x04)
	float CLIENTADJUSTUPDATECOST; // 0x36c(0x04)
	float MAXCLIENTUPDATEINTERVAL; // 0x370(0x04)
	float MaxClientForcedUpdateDuration; // 0x374(0x04)
	float ServerForcedUpdateHitchThreshold; // 0x378(0x04)
	float ServerForcedUpdateHitchCooldown; // 0x37c(0x04)
	float MaxMoveDeltaTime; // 0x380(0x04)
	float MaxClientSmoothingDeltaTime; // 0x384(0x04)
	float ClientNetSendMoveDeltaTime; // 0x388(0x04)
	float ClientNetSendMoveDeltaTimeThrottled; // 0x38c(0x04)
	float ClientNetSendMoveDeltaTimeStationary; // 0x390(0x04)
	int32_t ClientNetSendMoveThrottleAtNetSpeed; // 0x394(0x04)
	int32_t ClientNetSendMoveThrottleOverPlayerCount; // 0x398(0x04)
	bool ClientAuthorativePosition; // 0x39c(0x01)
	char pad_39D[0x3]; // 0x39d(0x03)
	float ClientErrorUpdateRateLimit; // 0x3a0(0x04)
	float ClientNetCamUpdateDeltaTime; // 0x3a4(0x04)
	float ClientNetCamUpdatePositionLimit; // 0x3a8(0x04)
	bool bMovementTimeDiscrepancyDetection; // 0x3ac(0x01)
	bool bMovementTimeDiscrepancyResolution; // 0x3ad(0x01)
	char pad_3AE[0x2]; // 0x3ae(0x02)
	float MovementTimeDiscrepancyMaxTimeMargin; // 0x3b0(0x04)
	float MovementTimeDiscrepancyMinTimeMargin; // 0x3b4(0x04)
	float MovementTimeDiscrepancyResolutionRate; // 0x3b8(0x04)
	float MovementTimeDiscrepancyDriftAllowance; // 0x3bc(0x04)
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x3c0(0x01)
	bool bUseDistanceBasedRelevancy; // 0x3c1(0x01)
	char pad_3C2[0xe]; // 0x3c2(0x0e)
};

// Class Engine.GameplayStatics
// Size: 0x28 (Inherited: 0x28)
struct UGameplayStatics : UBlueprintFunctionLibrary {

	void UnloadStreamLevel(struct UObject* WorldContextObject, struct FName LevelName, struct FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // Function Engine.GameplayStatics.UnloadStreamLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3ce0760
	bool SuggestProjectileVelocity_CustomArc(struct UObject* WorldContextObject, struct FVector& OutLaunchVelocity, struct FVector StartPos, struct FVector EndPos, float OverrideGravityZ, float ArcParam); // Function Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3ce0580
	struct UAudioComponent* SpawnSoundAttached(struct USoundBase* Sound, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSoundAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3ce01f0
	struct UAudioComponent* SpawnSoundAtLocation(struct UObject* WorldContextObject, struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSoundAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3cdff20
	struct UAudioComponent* SpawnSound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnSound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3cdfcf0
	struct UObject* SpawnObject(struct UObject* ObjectClass, struct UObject* Outer); // Function Engine.GameplayStatics.SpawnObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cdfc30
	struct UForceFeedbackComponent* SpawnForceFeedbackAttached(struct UForceFeedbackEffect* ForceFeedbackEffect, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, struct UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnForceFeedbackAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3cdf8d0
	struct UForceFeedbackComponent* SpawnForceFeedbackAtLocation(struct UObject* WorldContextObject, struct UForceFeedbackEffect* ForceFeedbackEffect, struct FVector Location, struct FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, struct UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnForceFeedbackAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3cdf640
	struct UParticleSystemComponent* SpawnEmitterAttached(struct UParticleSystem* EmitterTemplate, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivate); // Function Engine.GameplayStatics.SpawnEmitterAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3cdf360
	struct UParticleSystemComponent* SpawnEmitterAtLocation(struct UObject* WorldContextObject, struct UParticleSystem* EmitterTemplate, struct FVector Location, struct FRotator Rotation, struct FVector Scale, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem); // Function Engine.GameplayStatics.SpawnEmitterAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3cdf100
	struct UAudioComponent* SpawnDialogueAttached(struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogueAttached // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cded20
	struct UAudioComponent* SpawnDialogueAtLocation(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogueAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cdea10
	struct UAudioComponent* SpawnDialogue2D(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy); // Function Engine.GameplayStatics.SpawnDialogue2D // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cde7e0
	struct UDecalComponent* SpawnDecalAttached(struct UMaterialInterface* DecalMaterial, struct FVector DecalSize, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, float LifeSpan); // Function Engine.GameplayStatics.SpawnDecalAttached // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3cde580
	struct UDecalComponent* SpawnDecalAtLocation(struct UObject* WorldContextObject, struct UMaterialInterface* DecalMaterial, struct FVector DecalSize, struct FVector Location, struct FRotator Rotation, float LifeSpan); // Function Engine.GameplayStatics.SpawnDecalAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3cde3a0
	void SetWorldOriginLocation(struct UObject* WorldContextObject, struct FIntVector NewLocation); // Function Engine.GameplayStatics.SetWorldOriginLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3cde2e0
	void SetViewportMouseCaptureMode(struct UObject* WorldContextObject, enum class EMouseCaptureMode MouseCaptureMode); // Function Engine.GameplayStatics.SetViewportMouseCaptureMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cde230
	void SetSubtitlesEnabled(bool bEnabled); // Function Engine.GameplayStatics.SetSubtitlesEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cde1b0
	void SetSoundMixClassOverride(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren); // Function Engine.GameplayStatics.SetSoundMixClassOverride // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cddfc0
	void SetSoundClassDistanceScale(struct UObject* WorldContextObject, struct USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec); // Function Engine.GameplayStatics.SetSoundClassDistanceScale // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3cdde90
	void SetPlayerControllerID(struct APlayerController* Player, int32_t ControllerId); // Function Engine.GameplayStatics.SetPlayerControllerID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cddde0
	void SetMaxAudioChannelsScaled(struct UObject* WorldContextObject, float MaxChannelCountScale); // Function Engine.GameplayStatics.SetMaxAudioChannelsScaled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cddd20
	void SetGlobalTimeDilation(struct UObject* WorldContextObject, float TimeDilation); // Function Engine.GameplayStatics.SetGlobalTimeDilation // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cddc60
	void SetGlobalPitchModulation(struct UObject* WorldContextObject, float PitchModulation, float TimeSec); // Function Engine.GameplayStatics.SetGlobalPitchModulation // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3cddb70
	void SetGlobalListenerFocusParameters(struct UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale); // Function Engine.GameplayStatics.SetGlobalListenerFocusParameters // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3cdd8f0
	bool SetGamePaused(struct UObject* WorldContextObject, bool bPaused); // Function Engine.GameplayStatics.SetGamePaused // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cdd830
	void SetForceDisableSplitscreen(struct UObject* WorldContextObject, bool bDisable); // Function Engine.GameplayStatics.SetForceDisableSplitscreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cdd770
	void SetEnableWorldRendering(struct UObject* WorldContextObject, bool bEnable); // Function Engine.GameplayStatics.SetEnableWorldRendering // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cdd6b0
	void SetBaseSoundMix(struct UObject* WorldContextObject, struct USoundMix* InSoundMix); // Function Engine.GameplayStatics.SetBaseSoundMix // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cdd600
	bool SaveGameToSlot(struct USaveGame* SaveGameObject, struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.SaveGameToSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cdd4e0
	void RemovePlayer(struct APlayerController* Player, bool bDestroyPawn); // Function Engine.GameplayStatics.RemovePlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cdd420
	struct FVector RebaseZeroOriginOntoLocal(struct UObject* WorldContextObject, struct FVector WorldLocation); // Function Engine.GameplayStatics.RebaseZeroOriginOntoLocal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cdd340
	struct FVector RebaseLocalOriginOntoZero(struct UObject* WorldContextObject, struct FVector WorldLocation); // Function Engine.GameplayStatics.RebaseLocalOriginOntoZero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cdd260
	void PushSoundMixModifier(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier); // Function Engine.GameplayStatics.PushSoundMixModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cdd1b0
	bool ProjectWorldToScreen(struct APlayerController* Player, struct FVector& WorldPosition, struct FVector2D& ScreenPosition, bool bPlayerViewportRelative); // Function Engine.GameplayStatics.ProjectWorldToScreen // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cdd060
	void PrimeSound(struct USoundBase* InSound); // Function Engine.GameplayStatics.PrimeSound // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cdcff0
	void PopSoundMixModifier(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier); // Function Engine.GameplayStatics.PopSoundMixModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cdcf40
	void PlayWorldCameraShake(struct UObject* WorldContextObject, struct UCameraShake* Shake, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter); // Function Engine.GameplayStatics.PlayWorldCameraShake // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3cdcd30
	void PlaySoundAtLocation(struct UObject* WorldContextObject, struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, struct AActor* OwningActor); // Function Engine.GameplayStatics.PlaySoundAtLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3cdca60
	void PlaySound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, struct AActor* OwningActor); // Function Engine.GameplayStatics.PlaySound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3cdc870
	void PlayDialogueAtLocation(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings); // Function Engine.GameplayStatics.PlayDialogueAtLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cdc5a0
	void PlayDialogue2D(struct UObject* WorldContextObject, struct UDialogueWave* Dialogue, struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime); // Function Engine.GameplayStatics.PlayDialogue2D // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cdc3b0
	struct FString ParseOption(struct FString options, struct FString Key); // Function Engine.GameplayStatics.ParseOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdc230
	void OpenLevel(struct UObject* WorldContextObject, struct FName LevelName, bool bAbsolute, struct FString options); // Function Engine.GameplayStatics.OpenLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cdc090
	struct FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, struct FVector Location, struct FVector ImpactPoint, struct FVector Normal, struct FVector ImpactNormal, struct UPhysicalMaterial* PhysMat, struct AActor* HitActor, struct UPrimitiveComponent* HitComponent, struct FName HitBoneName, int32_t HitItem, int32_t FaceIndex, struct FVector TraceStart, struct FVector TraceEnd); // Function Engine.GameplayStatics.MakeHitResult // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cdbb80
	void LoadStreamLevel(struct UObject* WorldContextObject, struct FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, struct FLatentActionInfo LatentInfo); // Function Engine.GameplayStatics.LoadStreamLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cdb9d0
	struct USaveGame* LoadGameFromSlot(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.LoadGameFromSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cdb8f0
	bool IsSplitscreenForceDisabled(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.IsSplitscreenForceDisabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdb870
	bool IsGamePaused(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.IsGamePaused // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdb7f0
	bool HasOption(struct FString options, struct FString InKey); // Function Engine.GameplayStatics.HasOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdb6b0
	bool HasLaunchOption(struct FString OptionToCheck); // Function Engine.GameplayStatics.HasLaunchOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdb610
	int32_t GrassOverlappingSphereCount(struct UObject* WorldContextObject, struct UStaticMesh* StaticMesh, struct FVector CenterPosition, float Radius); // Function Engine.GameplayStatics.GrassOverlappingSphereCount // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3cdb4c0
	struct FIntVector GetWorldOriginLocation(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetWorldOriginLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cdb420
	float GetWorldDeltaSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetWorldDeltaSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdb390
	void GetViewProjectionMatrix(struct FMinimalViewInfo DesiredView, struct FMatrix& ViewMatrix, struct FMatrix& ProjectionMatrix, struct FMatrix& ViewProjectionMatrix); // Function Engine.GameplayStatics.GetViewProjectionMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cdafc0
	enum class EMouseCaptureMode GetViewportMouseCaptureMode(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetViewportMouseCaptureMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdb310
	float GetUnpausedTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetUnpausedTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdaf30
	float GetTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdaea0
	enum class EPhysicalSurface GetSurfaceType(struct FHitResult& Hit); // Function Engine.GameplayStatics.GetSurfaceType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3cdadc0
	struct ULevelStreaming* GetStreamingLevel(struct UObject* WorldContextObject, struct FName PackageName); // Function Engine.GameplayStatics.GetStreamingLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdad00
	float GetRealTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetRealTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdac70
	struct APawn* GetPlayerPawn(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerPawn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdabb0
	int32_t GetPlayerControllerID(struct APlayerController* Player); // Function Engine.GameplayStatics.GetPlayerControllerID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdab30
	struct APlayerController* GetPlayerControllerFromID(struct UObject* WorldContextObject, int32_t ControllerId); // Function Engine.GameplayStatics.GetPlayerControllerFromID // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdaa70
	struct APlayerController* GetPlayerController(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cda9b0
	struct ACharacter* GetPlayerCharacter(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cda8f0
	struct APlayerCameraManager* GetPlayerCameraManager(struct UObject* WorldContextObject, int32_t PlayerIndex); // Function Engine.GameplayStatics.GetPlayerCameraManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cda830
	struct FString GetPlatformName(); // Function Engine.GameplayStatics.GetPlatformName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cda7b0
	struct UObject* GetObjectClass(struct UObject* Object); // Function Engine.GameplayStatics.GetObjectClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cda730
	int32_t GetMaxAudioChannelCount(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetMaxAudioChannelCount // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cda6b0
	void GetKeyValue(struct FString Pair, struct FString& Key, struct FString& Value); // Function Engine.GameplayStatics.GetKeyValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3cda540
	int32_t GetIntOption(struct FString options, struct FString Key, int32_t DefaultValue); // Function Engine.GameplayStatics.GetIntOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cda400
	float GetGlobalTimeDilation(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGlobalTimeDilation // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cda370
	struct AGameStateBase* GetGameState(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cda2f0
	struct AGameModeBase* GetGameMode(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cda270
	struct UGameInstance* GetGameInstance(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cda1f0
	float GetFloatOption(struct FString options, struct FString Key, float DefaultValue); // Function Engine.GameplayStatics.GetFloatOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cda0b0
	bool GetEnableWorldRendering(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetEnableWorldRendering // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cda030
	struct UReverbEffect* GetCurrentReverbEffect(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetCurrentReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cd9fb0
	struct FString GetCurrentLevelName(struct UObject* WorldContextObject, bool bRemovePrefixString); // Function Engine.GameplayStatics.GetCurrentLevelName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cd9ea0
	bool GetClosestListenerLocation(struct UObject* WorldContextObject, struct FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, struct FVector& ListenerPosition); // Function Engine.GameplayStatics.GetClosestListenerLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd9ce0
	float GetAudioTimeSeconds(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.GetAudioTimeSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cd9c50
	void GetAllActorsWithTag(struct UObject* WorldContextObject, struct FName Tag, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsWithTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cd9b30
	void GetAllActorsWithInterface(struct UObject* WorldContextObject, struct UInterface* Interface, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsWithInterface // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cd9a10
	void GetAllActorsOfClassWithTag(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FName Tag, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsOfClassWithTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cd98b0
	void GetAllActorsOfClass(struct UObject* WorldContextObject, struct AActor* ActorClass, struct TArray<struct AActor*>& OutActors); // Function Engine.GameplayStatics.GetAllActorsOfClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cd9790
	struct AActor* GetActorOfClass(struct UObject* WorldContextObject, struct AActor* ActorClass); // Function Engine.GameplayStatics.GetActorOfClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cd96d0
	void GetActorArrayBounds(struct TArray<struct AActor*>& Actors, bool bOnlyCollidingComponents, struct FVector& Center, struct FVector& BoxExtent); // Function Engine.GameplayStatics.GetActorArrayBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd9540
	struct FVector GetActorArrayAverageLocation(struct TArray<struct AActor*>& Actors); // Function Engine.GameplayStatics.GetActorArrayAverageLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd9480
	void GetAccurateRealTime(struct UObject* WorldContextObject, int32_t& Seconds, float& PartialSeconds); // Function Engine.GameplayStatics.GetAccurateRealTime // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3cd9360
	void FlushLevelStreaming(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.FlushLevelStreaming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cd92f0
	struct AActor* FinishSpawningActor(struct AActor* Actor, struct FTransform& SpawnTransform); // Function Engine.GameplayStatics.FinishSpawningActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd91d0
	bool FindCollisionUV(struct FHitResult& Hit, int32_t UVChannel, struct FVector2D& UV); // Function Engine.GameplayStatics.FindCollisionUV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cd9060
	void EnableLiveStreaming(bool Enable); // Function Engine.GameplayStatics.EnableLiveStreaming // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cd8fe0
	bool DoesSaveGameExist(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.DoesSaveGameExist // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cd8f00
	bool DeprojectScreenToWorld(struct APlayerController* Player, struct FVector2D& ScreenPosition, struct FVector& WorldPosition, struct FVector& WorldDirection); // Function Engine.GameplayStatics.DeprojectScreenToWorld // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cd8d90
	bool DeleteGameInSlot(struct FString SlotName, int32_t UserIndex); // Function Engine.GameplayStatics.DeleteGameInSlot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cd8cb0
	void DeactivateReverbEffect(struct UObject* WorldContextObject, struct FName TagName); // Function Engine.GameplayStatics.DeactivateReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cd8c00
	struct UAudioComponent* CreateSound2D(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Function Engine.GameplayStatics.CreateSound2D // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3cd89d0
	struct USaveGame* CreateSaveGameObject(struct USaveGame* SaveGameClass); // Function Engine.GameplayStatics.CreateSaveGameObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cd8950
	struct APlayerController* CreatePlayer(struct UObject* WorldContextObject, int32_t ControllerId, bool bSpawnPlayerController); // Function Engine.GameplayStatics.CreatePlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cd8860
	void ClearSoundMixModifiers(struct UObject* WorldContextObject); // Function Engine.GameplayStatics.ClearSoundMixModifiers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cd87f0
	void ClearSoundMixClassOverride(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct USoundClass* InSoundClass, float FadeOutTime); // Function Engine.GameplayStatics.ClearSoundMixClassOverride // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cd86b0
	void CancelAsyncLoading(); // Function Engine.GameplayStatics.CancelAsyncLoading // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cd8690
	void BreakHitResult(struct FHitResult& Hit, bool& bBlockingHit, bool& bInitialOverlap, float& Time, float& Distance, struct FVector& Location, struct FVector& ImpactPoint, struct FVector& Normal, struct FVector& ImpactNormal, struct UPhysicalMaterial*& PhysMat, struct AActor*& HitActor, struct UPrimitiveComponent*& HitComponent, struct FName& HitBoneName, int32_t& HitItem, int32_t& FaceIndex, struct FVector& TraceStart, struct FVector& TraceEnd); // Function Engine.GameplayStatics.BreakHitResult // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cd8060
	bool BlueprintSuggestProjectileVelocity(struct UObject* WorldContextObject, struct FVector& TossVelocity, struct FVector StartLocation, struct FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, enum class ESuggestProjVelocityTraceOption TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug); // Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd7060
	bool Blueprint_PredictProjectilePath_ByTraceChannel(struct UObject* WorldContextObject, struct FHitResult& OutHit, struct TArray<struct FVector>& OutPathPositions, struct FVector& OutLastTraceDestination, struct FVector StartPos, struct FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd7b10
	bool Blueprint_PredictProjectilePath_ByObjectType(struct UObject* WorldContextObject, struct FHitResult& OutHit, struct TArray<struct FVector>& OutPathPositions, struct FVector& OutLastTraceDestination, struct FVector StartPos, struct FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd7590
	bool Blueprint_PredictProjectilePath_Advanced(struct UObject* WorldContextObject, struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult& PredictResult); // Function Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cd7350
	struct AActor* BeginSpawningActorFromClass(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FTransform& SpawnTransform, bool bNoCollisionFail, struct AActor* Owner); // Function Engine.GameplayStatics.BeginSpawningActorFromClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd6e60
	struct AActor* BeginSpawningActorFromBlueprint(struct UObject* WorldContextObject, struct UBlueprint* Blueprint, struct FTransform& SpawnTransform, bool bNoCollisionFail); // Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd6cc0
	struct AActor* BeginDeferredActorSpawnFromClass(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct AActor* Owner); // Function Engine.GameplayStatics.BeginDeferredActorSpawnFromClass // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd6ad0
	bool AreSubtitlesEnabled(); // Function Engine.GameplayStatics.AreSubtitlesEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cd6aa0
	bool AreAnyListenersWithinRange(struct UObject* WorldContextObject, struct FVector& Location, float MaximumRange); // Function Engine.GameplayStatics.AreAnyListenersWithinRange // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd6990
	bool ApplyRadialDamageWithFalloff(struct UObject* WorldContextObject, float BaseDamage, float MinimumDamage, struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, struct UDamageType* DamageTypeClass, struct TArray<struct AActor*>& IgnoreActors, struct AActor* DamageCauser, struct AController* InstigatedByController, enum class ECollisionChannel DamagePreventionChannel); // Function Engine.GameplayStatics.ApplyRadialDamageWithFalloff // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd6610
	bool ApplyRadialDamage(struct UObject* WorldContextObject, float BaseDamage, struct FVector& Origin, float DamageRadius, struct UDamageType* DamageTypeClass, struct TArray<struct AActor*>& IgnoreActors, struct AActor* DamageCauser, struct AController* InstigatedByController, bool bDoFullDamage, enum class ECollisionChannel DamagePreventionChannel); // Function Engine.GameplayStatics.ApplyRadialDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd6320
	float ApplyPointDamage(struct AActor* DamagedActor, float BaseDamage, struct FVector& HitFromDirection, struct FHitResult& HitInfo, struct AController* EventInstigator, struct AActor* DamageCauser, struct UDamageType* DamageTypeClass); // Function Engine.GameplayStatics.ApplyPointDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3cd60c0
	float ApplyDamage(struct AActor* DamagedActor, float BaseDamage, struct AController* EventInstigator, struct AActor* DamageCauser, struct UDamageType* DamageTypeClass); // Function Engine.GameplayStatics.ApplyDamage // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x3cd5f40
	void ActivateReverbEffect(struct UObject* WorldContextObject, struct UReverbEffect* ReverbEffect, struct FName TagName, float Priority, float Volume, float FadeTime); // Function Engine.GameplayStatics.ActivateReverbEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cd5d90
};

// Class Engine.SpotLight
// Size: 0x338 (Inherited: 0x330)
struct ASpotLight : ALight {
	struct USpotLightComponent* SpotLightComponent; // 0x330(0x08)

	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLight.SetOuterConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x3e02dd0
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLight.SetInnerConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x3e02cd0
};

// Class Engine.GeneratedMeshAreaLight
// Size: 0x338 (Inherited: 0x338)
struct AGeneratedMeshAreaLight : ASpotLight {
};

// Class Engine.HapticFeedbackEffect_Base
// Size: 0x28 (Inherited: 0x28)
struct UHapticFeedbackEffect_Base : UObject {
};

// Class Engine.HapticFeedbackEffect_Buffer
// Size: 0x68 (Inherited: 0x28)
struct UHapticFeedbackEffect_Buffer : UHapticFeedbackEffect_Base {
	struct TArray<char> Amplitudes; // 0x28(0x10)
	int32_t SampleRate; // 0x38(0x04)
	char pad_3C[0x2c]; // 0x3c(0x2c)
};

// Class Engine.HapticFeedbackEffect_Curve
// Size: 0x138 (Inherited: 0x28)
struct UHapticFeedbackEffect_Curve : UHapticFeedbackEffect_Base {
	struct FHapticFeedbackDetails_Curve HapticDetails; // 0x28(0x110)
};

// Class Engine.HapticFeedbackEffect_SoundWave
// Size: 0x60 (Inherited: 0x28)
struct UHapticFeedbackEffect_SoundWave : UHapticFeedbackEffect_Base {
	struct USoundWave* SoundWave; // 0x28(0x08)
	char pad_30[0x30]; // 0x30(0x30)
};

// Class Engine.HealthSnapshotBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UHealthSnapshotBlueprintLibrary : UBlueprintFunctionLibrary {

	void StopPerformanceSnapshots(); // Function Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x3ce9630
	void StartPerformanceSnapshots(); // Function Engine.HealthSnapshotBlueprintLibrary.StartPerformanceSnapshots // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x3ce9610
	void LogPerformanceSnapshot(struct FString SnapshotTitle, bool bResetStats); // Function Engine.HealthSnapshotBlueprintLibrary.LogPerformanceSnapshot // (Final|Exec|Native|Static|Public|BlueprintCallable) // @ game+0x3ce90f0
};

// Class Engine.HLODProxy
// Size: 0x38 (Inherited: 0x28)
struct UHLODProxy : UObject {
	struct TArray<struct FHLODProxyMesh> ProxyMeshes; // 0x28(0x10)
};

// Class Engine.ImportanceSamplingLibrary
// Size: 0x28 (Inherited: 0x28)
struct UImportanceSamplingLibrary : UBlueprintFunctionLibrary {

	float RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolFloat // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3ceff70
	struct FVector RandomSobolCell3D(int32_t Index, int32_t NumCells, struct FVector cell, struct FVector Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolCell3D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cefde0
	struct FVector2D RandomSobolCell2D(int32_t Index, int32_t NumCells, struct FVector2D cell, struct FVector2D Seed); // Function Engine.ImportanceSamplingLibrary.RandomSobolCell2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cefca0
	float NextSobolFloat(int32_t Index, int32_t Dimension, float PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolFloat // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cefba0
	struct FVector NextSobolCell3D(int32_t Index, int32_t NumCells, struct FVector PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolCell3D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cefa80
	struct FVector2D NextSobolCell2D(int32_t Index, int32_t NumCells, struct FVector2D PreviousValue); // Function Engine.ImportanceSamplingLibrary.NextSobolCell2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cef980
	struct FImportanceTexture MakeImportanceTexture(struct UTexture2D* Texture, enum class EImportanceWeight WeightingFunc); // Function Engine.ImportanceSamplingLibrary.MakeImportanceTexture // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cef7b0
	void ImportanceSample(struct FImportanceTexture& Texture, struct FVector2D& Rand, int32_t Samples, float Intensity, struct FVector2D& SamplePosition, struct FLinearColor& SampleColor, float& SampleIntensity, float& SampleSize); // Function Engine.ImportanceSamplingLibrary.ImportanceSample // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cef3c0
	void BreakImportanceTexture(struct FImportanceTexture& ImportanceTexture, struct UTexture2D*& Texture, enum class EImportanceWeight& WeightingFunc); // Function Engine.ImportanceSamplingLibrary.BreakImportanceTexture // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3cee8b0
};

// Class Engine.ImportantToggleSettingInterface
// Size: 0x28 (Inherited: 0x28)
struct UImportantToggleSettingInterface : UInterface {
};

// Class Engine.InGameAdManager
// Size: 0x60 (Inherited: 0x38)
struct UInGameAdManager : UPlatformInterfaceBase {
	char bShouldPauseWhileAdOpen : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct TArray<struct FDelegate> ClickedBannerDelegates; // 0x40(0x10)
	struct TArray<struct FDelegate> ClosedAdDelegates; // 0x50(0x10)
};

// Class Engine.InheritableComponentHandler
// Size: 0x48 (Inherited: 0x28)
struct UInheritableComponentHandler : UObject {
	struct TArray<struct FComponentOverrideRecord> Records; // 0x28(0x10)
	struct TArray<struct UActorComponent*> UnnecessaryComponents; // 0x38(0x10)
};

// Class Engine.InputDelegateBinding
// Size: 0x28 (Inherited: 0x28)
struct UInputDelegateBinding : UDynamicBlueprintBinding {
};

// Class Engine.InputActionDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputActionDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputAxisDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputAxisDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputAxisKeyDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputAxisKeyDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputComponent
// Size: 0x138 (Inherited: 0xb0)
struct UInputComponent : UActorComponent {
	char pad_B0[0x70]; // 0xb0(0x70)
	struct TArray<struct FCachedKeyToActionInfo> CachedKeyToActionInfo; // 0x120(0x10)
	char pad_130[0x8]; // 0x130(0x08)

	bool WasControllerKeyJustReleased(struct FKey Key); // Function Engine.InputComponent.WasControllerKeyJustReleased // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cef6c0
	bool WasControllerKeyJustPressed(struct FKey Key); // Function Engine.InputComponent.WasControllerKeyJustPressed // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cef6c0
	bool IsControllerKeyDown(struct FKey Key); // Function Engine.InputComponent.IsControllerKeyDown // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cef6c0
	void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Function Engine.InputComponent.GetTouchState // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cef240
	struct FVector GetControllerVectorKeyState(struct FKey Key); // Function Engine.InputComponent.GetControllerVectorKeyState // (Final|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cef110
	void GetControllerMouseDelta(float& DeltaX, float& DeltaY); // Function Engine.InputComponent.GetControllerMouseDelta // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3cef030
	float GetControllerKeyTimeDown(struct FKey Key); // Function Engine.InputComponent.GetControllerKeyTimeDown // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ceee20
	void GetControllerAnalogStickState(enum class EControllerAnalogStick WhichStick, float& StickX, float& StickY); // Function Engine.InputComponent.GetControllerAnalogStickState // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ceef10
	float GetControllerAnalogKeyState(struct FKey Key); // Function Engine.InputComponent.GetControllerAnalogKeyState // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ceee20
};

// Class Engine.InputKeyDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputKeyDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputSettings
// Size: 0xf0 (Inherited: 0x28)
struct UInputSettings : UObject {
	struct TArray<struct FInputAxisConfigEntry> AxisConfig; // 0x28(0x10)
	char bAltEnterTogglesFullscreen : 1; // 0x38(0x01)
	char bF11TogglesFullscreen : 1; // 0x38(0x01)
	char bUseMouseForTouch : 1; // 0x38(0x01)
	char bEnableMouseSmoothing : 1; // 0x38(0x01)
	char bEnableFOVScaling : 1; // 0x38(0x01)
	char bCaptureMouseOnLaunch : 1; // 0x38(0x01)
	char bDefaultViewportMouseLock : 1; // 0x38(0x01)
	char bAlwaysShowTouchInterface : 1; // 0x38(0x01)
	char bShowConsoleOnFourFingerTap : 1; // 0x39(0x01)
	char bEnableGestureRecognizer : 1; // 0x39(0x01)
	char pad_39_2 : 6; // 0x39(0x01)
	bool bUseAutocorrect; // 0x3a(0x01)
	char pad_3B[0x5]; // 0x3b(0x05)
	struct TArray<struct FString> ExcludedAutocorrectOS; // 0x40(0x10)
	struct TArray<struct FString> ExcludedAutocorrectCultures; // 0x50(0x10)
	struct TArray<struct FString> ExcludedAutocorrectDeviceModels; // 0x60(0x10)
	enum class EMouseCaptureMode DefaultViewportMouseCaptureMode; // 0x70(0x01)
	enum class EMouseLockMode DefaultViewportMouseLockMode; // 0x71(0x01)
	char pad_72[0x2]; // 0x72(0x02)
	float FOVScale; // 0x74(0x04)
	float DoubleClickTime; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct TArray<struct FInputActionKeyMapping> ActionMappings; // 0x80(0x10)
	struct TArray<struct FInputAxisKeyMapping> AxisMappings; // 0x90(0x10)
	struct TArray<struct FInputActionSpeechMapping> SpeechMappings; // 0xa0(0x10)
	struct FSoftObjectPath DefaultTouchInterface; // 0xb0(0x18)
	struct FKey ConsoleKey; // 0xc8(0x18)
	struct TArray<struct FKey> ConsoleKeys; // 0xe0(0x10)

	void SaveKeyMappings(); // Function Engine.InputSettings.SaveKeyMappings // (Final|Native|Public|BlueprintCallable) // @ game+0x3cf03b0
	void RemoveAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3cf0210
	void RemoveActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.RemoveActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3cf0070
	struct UInputSettings* GetInputSettings(); // Function Engine.InputSettings.GetInputSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cef210
	void GetAxisNames(struct TArray<struct FName>& AxisNames); // Function Engine.InputSettings.GetAxisNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ceed70
	void GetAxisMappingByName(struct FName InAxisName, struct TArray<struct FInputAxisKeyMapping>& OutMappings); // Function Engine.InputSettings.GetAxisMappingByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ceec40
	void GetActionNames(struct TArray<struct FName>& ActionNames); // Function Engine.InputSettings.GetActionNames // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ceeb90
	void GetActionMappingByName(struct FName InActionName, struct TArray<struct FInputActionKeyMapping>& OutMappings); // Function Engine.InputSettings.GetActionMappingByName // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3ceea60
	void ForceRebuildKeymaps(); // Function Engine.InputSettings.ForceRebuildKeymaps // (Final|Native|Public|BlueprintCallable) // @ game+0x3ceea40
	void AddAxisMapping(struct FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.AddAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3cee710
	void AddActionMapping(struct FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Function Engine.InputSettings.AddActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3cee570
};

// Class Engine.InputTouchDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputTouchDelegateBinding : UInputDelegateBinding {
	struct TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings; // 0x28(0x10)
};

// Class Engine.InputVectorAxisDelegateBinding
// Size: 0x38 (Inherited: 0x38)
struct UInputVectorAxisDelegateBinding : UInputAxisKeyDelegateBinding {
};

// Class Engine.InstancedCollisionComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UInstancedCollisionComponent : UActorComponent {
	struct TArray<struct UStaticMeshComponent*> StaticMeshComponents; // 0xb0(0x10)
	char pad_C0[0x10]; // 0xc0(0x10)
	struct UStaticMeshComponent* StaticMeshComponent; // 0xd0(0x08)
};

// Class Engine.InstancedStaticCollisionActor
// Size: 0x370 (Inherited: 0x320)
struct AInstancedStaticCollisionActor : AActor {
	struct TMap<struct UStaticMesh*, struct UInstancedCollisionComponent*> InstancedCollisionComponentMap; // 0x320(0x50)
};

// Class Engine.Interface_AssetUserData
// Size: 0x28 (Inherited: 0x28)
struct UInterface_AssetUserData : UInterface {
};

// Class Engine.Interface_CollisionDataProvider
// Size: 0x28 (Inherited: 0x28)
struct UInterface_CollisionDataProvider : UInterface {
};

// Class Engine.Interface_PostProcessVolume
// Size: 0x28 (Inherited: 0x28)
struct UInterface_PostProcessVolume : UInterface {
};

// Class Engine.Interface_PreviewMeshProvider
// Size: 0x28 (Inherited: 0x28)
struct UInterface_PreviewMeshProvider : UInterface {
};

// Class Engine.InterpCurveEdSetup
// Size: 0x40 (Inherited: 0x28)
struct UInterpCurveEdSetup : UObject {
	struct TArray<struct FCurveEdTab> Tabs; // 0x28(0x10)
	int32_t ActiveTab; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.InterpData
// Size: 0x70 (Inherited: 0x28)
struct UInterpData : UObject {
	float InterpLength; // 0x28(0x04)
	float PathBuildTime; // 0x2c(0x04)
	struct TArray<struct UInterpGroup*> InterpGroups; // 0x30(0x10)
	struct UInterpCurveEdSetup* CurveEdSetup; // 0x40(0x08)
	float EdSectionStart; // 0x48(0x04)
	float EdSectionEnd; // 0x4c(0x04)
	char bShouldBakeAndPrune : 1; // 0x50(0x01)
	char pad_50_1 : 7; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct UInterpGroupDirector* CachedDirectorGroup; // 0x58(0x08)
	struct TArray<struct FName> AllEventNames; // 0x60(0x10)
};

// Class Engine.InterpFilter
// Size: 0x38 (Inherited: 0x28)
struct UInterpFilter : UObject {
	struct FString Caption; // 0x28(0x10)
};

// Class Engine.InterpFilter_Classes
// Size: 0x38 (Inherited: 0x38)
struct UInterpFilter_Classes : UInterpFilter {
};

// Class Engine.InterpFilter_Custom
// Size: 0x38 (Inherited: 0x38)
struct UInterpFilter_Custom : UInterpFilter {
};

// Class Engine.InterpGroup
// Size: 0x50 (Inherited: 0x28)
struct UInterpGroup : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct UInterpTrack*> InterpTracks; // 0x30(0x10)
	struct FName GroupName; // 0x40(0x08)
	struct FColor GroupColor; // 0x48(0x04)
	char bCollapsed : 1; // 0x4c(0x01)
	char bVisible : 1; // 0x4c(0x01)
	char bIsFolder : 1; // 0x4c(0x01)
	char bIsParented : 1; // 0x4c(0x01)
	char bIsSelected : 1; // 0x4c(0x01)
	char pad_4C_5 : 3; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
};

// Class Engine.InterpGroupCamera
// Size: 0x60 (Inherited: 0x50)
struct UInterpGroupCamera : UInterpGroup {
	struct UCameraAnim* CameraAnimInst; // 0x50(0x08)
	float CompressTolerance; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.InterpGroupDirector
// Size: 0x50 (Inherited: 0x50)
struct UInterpGroupDirector : UInterpGroup {
};

// Class Engine.InterpGroupInst
// Size: 0x48 (Inherited: 0x28)
struct UInterpGroupInst : UObject {
	struct UInterpGroup* Group; // 0x28(0x08)
	struct AActor* GroupActor; // 0x30(0x08)
	struct TArray<struct UInterpTrackInst*> TrackInst; // 0x38(0x10)
};

// Class Engine.InterpGroupInstCamera
// Size: 0x48 (Inherited: 0x48)
struct UInterpGroupInstCamera : UInterpGroupInst {
};

// Class Engine.InterpGroupInstDirector
// Size: 0x48 (Inherited: 0x48)
struct UInterpGroupInstDirector : UInterpGroupInst {
};

// Class Engine.InterpToMovementComponent
// Size: 0x190 (Inherited: 0xf0)
struct UInterpToMovementComponent : UMovementComponent {
	float Duration; // 0xf0(0x04)
	char bPauseOnImpact : 1; // 0xf4(0x01)
	char pad_F4_1 : 7; // 0xf4(0x01)
	char pad_F5[0x3]; // 0xf5(0x03)
	bool bSweep; // 0xf8(0x01)
	enum class ETeleportType TeleportType; // 0xf9(0x01)
	enum class EInterpToBehaviourType BehaviourType; // 0xfa(0x01)
	bool bCheckIfStillInWorld; // 0xfb(0x01)
	char bForceSubStepping : 1; // 0xfc(0x01)
	char pad_FC_1 : 7; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	struct FMulticastInlineDelegate OnInterpToReverse; // 0x100(0x10)
	struct FMulticastInlineDelegate OnInterpToStop; // 0x110(0x10)
	struct FMulticastInlineDelegate OnWaitBeginDelegate; // 0x120(0x10)
	struct FMulticastInlineDelegate OnWaitEndDelegate; // 0x130(0x10)
	struct FMulticastInlineDelegate OnResetDelegate; // 0x140(0x10)
	float MaxSimulationTimeStep; // 0x150(0x04)
	int32_t MaxSimulationIterations; // 0x154(0x04)
	struct TArray<struct FInterpControlPoint> ControlPoints; // 0x158(0x10)
	char pad_168[0x28]; // 0x168(0x28)

	void StopSimulating(struct FHitResult& HitResult); // Function Engine.InterpToMovementComponent.StopSimulating // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3cf93f0
	void RestartMovement(float InitialDirection); // Function Engine.InterpToMovementComponent.RestartMovement // (Final|Native|Public|BlueprintCallable) // @ game+0x3cf9370
	void OnInterpToWaitEndDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x23a3b60
	void OnInterpToWaitBeginDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x23a3b60
	void OnInterpToStopDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x23a3b60
	void OnInterpToReverseDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x23a3b60
	void OnInterpToResetDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time); // DelegateFunction Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x23a3b60
	void FinaliseControlPoints(); // Function Engine.InterpToMovementComponent.FinaliseControlPoints // (Final|Native|Public|BlueprintCallable) // @ game+0x3cf9350
};

// Class Engine.InterpTrackAnimControl
// Size: 0xb0 (Inherited: 0x90)
struct UInterpTrackAnimControl : UInterpTrackFloatBase {
	struct FName SlotName; // 0x90(0x08)
	struct TArray<struct FAnimControlTrackKey> AnimSeqs; // 0x98(0x10)
	char bSkipAnimNotifiers : 1; // 0xa8(0x01)
	char pad_A8_1 : 7; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
};

// Class Engine.InterpTrackAudioMaster
// Size: 0x90 (Inherited: 0x90)
struct UInterpTrackAudioMaster : UInterpTrackVectorBase {
};

// Class Engine.InterpTrackBoolProp
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackBoolProp : UInterpTrack {
	struct TArray<struct FBoolTrackKey> BoolTrack; // 0x70(0x10)
	struct FName PropertyName; // 0x80(0x08)
};

// Class Engine.InterpTrackColorProp
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackColorProp : UInterpTrackVectorBase {
	struct FName PropertyName; // 0x90(0x08)
};

// Class Engine.InterpTrackColorScale
// Size: 0x90 (Inherited: 0x90)
struct UInterpTrackColorScale : UInterpTrackVectorBase {
};

// Class Engine.InterpTrackDirector
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackDirector : UInterpTrack {
	struct TArray<struct FDirectorTrackCut> CutTrack; // 0x70(0x10)
	char bSimulateCameraCutsOnClients : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.InterpTrackEvent
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackEvent : UInterpTrack {
	struct TArray<struct FEventTrackKey> EventTrack; // 0x70(0x10)
	char bFireEventsWhenForwards : 1; // 0x80(0x01)
	char bFireEventsWhenBackwards : 1; // 0x80(0x01)
	char bFireEventsWhenJumpingForwards : 1; // 0x80(0x01)
	char bUseCustomEventName : 1; // 0x80(0x01)
	char pad_80_4 : 4; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.InterpTrackFade
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackFade : UInterpTrackFloatBase {
	char bPersistFade : 1; // 0x90(0x01)
	char bFadeAudio : 1; // 0x90(0x01)
	char pad_90_2 : 6; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	struct FLinearColor FadeColor; // 0x94(0x10)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Engine.InterpTrackFloatAnimBPParam
// Size: 0xb0 (Inherited: 0x90)
struct UInterpTrackFloatAnimBPParam : UInterpTrackFloatBase {
	struct UObject* AnimBlueprintClass; // 0x90(0x08)
	struct UAnimInstance* AnimClass; // 0x98(0x08)
	struct FName ParamName; // 0xa0(0x08)
	char pad_A8[0x8]; // 0xa8(0x08)
};

// Class Engine.InterpTrackFloatMaterialParam
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackFloatMaterialParam : UInterpTrackFloatBase {
	struct TArray<struct UMaterialInterface*> TargetMaterials; // 0x90(0x10)
	struct FName ParamName; // 0xa0(0x08)
};

// Class Engine.InterpTrackFloatParticleParam
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackFloatParticleParam : UInterpTrackFloatBase {
	struct FName ParamName; // 0x90(0x08)
};

// Class Engine.InterpTrackFloatProp
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackFloatProp : UInterpTrackFloatBase {
	struct FName PropertyName; // 0x90(0x08)
};

// Class Engine.InterpTrackInstAnimControl
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstAnimControl : UInterpTrackInst {
	float LastUpdatePosition; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Engine.InterpTrackInstAudioMaster
// Size: 0x28 (Inherited: 0x28)
struct UInterpTrackInstAudioMaster : UInterpTrackInst {
};

// Class Engine.InterpTrackInstProperty
// Size: 0x50 (Inherited: 0x28)
struct UInterpTrackInstProperty : UInterpTrackInst {
	struct TFieldPath<FProperty> InterpProperty; // 0x28(0x20)
	struct UObject* PropertyOuterObjectInst; // 0x48(0x08)
};

// Class Engine.InterpTrackInstBoolProp
// Size: 0x68 (Inherited: 0x50)
struct UInterpTrackInstBoolProp : UInterpTrackInstProperty {
	char pad_50[0x10]; // 0x50(0x10)
	bool ResetBool; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
};

// Class Engine.InterpTrackInstColorProp
// Size: 0x60 (Inherited: 0x50)
struct UInterpTrackInstColorProp : UInterpTrackInstProperty {
	char pad_50[0x8]; // 0x50(0x08)
	struct FColor ResetColor; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.InterpTrackInstColorScale
// Size: 0x28 (Inherited: 0x28)
struct UInterpTrackInstColorScale : UInterpTrackInst {
};

// Class Engine.InterpTrackInstDirector
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstDirector : UInterpTrackInst {
	struct AActor* OldViewTarget; // 0x28(0x08)
};

// Class Engine.InterpTrackInstEvent
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstEvent : UInterpTrackInst {
	float LastUpdatePosition; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Engine.InterpTrackInstFade
// Size: 0x28 (Inherited: 0x28)
struct UInterpTrackInstFade : UInterpTrackInst {
};

// Class Engine.InterpTrackInstFloatAnimBPParam
// Size: 0x40 (Inherited: 0x28)
struct UInterpTrackInstFloatAnimBPParam : UInterpTrackInst {
	struct UAnimInstance* AnimScriptInstance; // 0x28(0x08)
	float ResetFloat; // 0x30(0x04)
	char pad_34[0xc]; // 0x34(0x0c)
};

// Class Engine.InterpTrackInstFloatMaterialParam
// Size: 0x60 (Inherited: 0x28)
struct UInterpTrackInstFloatMaterialParam : UInterpTrackInst {
	struct TArray<struct UMaterialInstanceDynamic*> MaterialInstances; // 0x28(0x10)
	struct TArray<float> ResetFloats; // 0x38(0x10)
	struct TArray<struct FPrimitiveMaterialRef> PrimitiveMaterialRefs; // 0x48(0x10)
	struct UInterpTrackFloatMaterialParam* InstancedTrack; // 0x58(0x08)
};

// Class Engine.InterpTrackInstFloatParticleParam
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstFloatParticleParam : UInterpTrackInst {
	float ResetFloat; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Engine.InterpTrackInstFloatProp
// Size: 0x60 (Inherited: 0x50)
struct UInterpTrackInstFloatProp : UInterpTrackInstProperty {
	char pad_50[0x8]; // 0x50(0x08)
	float ResetFloat; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.InterpTrackInstLinearColorProp
// Size: 0x68 (Inherited: 0x50)
struct UInterpTrackInstLinearColorProp : UInterpTrackInstProperty {
	char pad_50[0x8]; // 0x50(0x08)
	struct FLinearColor ResetColor; // 0x58(0x10)
};

// Class Engine.InterpTrackInstMove
// Size: 0x40 (Inherited: 0x28)
struct UInterpTrackInstMove : UInterpTrackInst {
	struct FVector ResetLocation; // 0x28(0x0c)
	struct FRotator ResetRotation; // 0x34(0x0c)
};

// Class Engine.InterpTrackInstParticleReplay
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstParticleReplay : UInterpTrackInst {
	float LastUpdatePosition; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Engine.InterpTrackInstSlomo
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstSlomo : UInterpTrackInst {
	float OldTimeDilation; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
};

// Class Engine.InterpTrackInstSound
// Size: 0x38 (Inherited: 0x28)
struct UInterpTrackInstSound : UInterpTrackInst {
	float LastUpdatePosition; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct UAudioComponent* PlayAudioComp; // 0x30(0x08)
};

// Class Engine.InterpTrackInstToggle
// Size: 0x38 (Inherited: 0x28)
struct UInterpTrackInstToggle : UInterpTrackInst {
	enum class ETrackToggleAction Action; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float LastUpdatePosition; // 0x2c(0x04)
	char bSavedActiveState : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.InterpTrackInstVectorMaterialParam
// Size: 0x60 (Inherited: 0x28)
struct UInterpTrackInstVectorMaterialParam : UInterpTrackInst {
	struct TArray<struct UMaterialInstanceDynamic*> MaterialInstances; // 0x28(0x10)
	struct TArray<struct FVector> ResetVectors; // 0x38(0x10)
	struct TArray<struct FPrimitiveMaterialRef> PrimitiveMaterialRefs; // 0x48(0x10)
	struct UInterpTrackVectorMaterialParam* InstancedTrack; // 0x58(0x08)
};

// Class Engine.InterpTrackInstVectorProp
// Size: 0x68 (Inherited: 0x50)
struct UInterpTrackInstVectorProp : UInterpTrackInstProperty {
	char pad_50[0x8]; // 0x50(0x08)
	struct FVector ResetVector; // 0x58(0x0c)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.InterpTrackInstVisibility
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstVisibility : UInterpTrackInst {
	enum class EVisibilityTrackAction Action; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float LastUpdatePosition; // 0x2c(0x04)
};

// Class Engine.InterpTrackLinearColorBase
// Size: 0x90 (Inherited: 0x70)
struct UInterpTrackLinearColorBase : UInterpTrack {
	struct FInterpCurveLinearColor LinearColorTrack; // 0x70(0x18)
	float CurveTension; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class Engine.InterpTrackLinearColorProp
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackLinearColorProp : UInterpTrackLinearColorBase {
	struct FName PropertyName; // 0x90(0x08)
};

// Class Engine.InterpTrackMove
// Size: 0xc8 (Inherited: 0x70)
struct UInterpTrackMove : UInterpTrack {
	struct FInterpCurveVector PosTrack; // 0x70(0x18)
	struct FInterpCurveVector EulerTrack; // 0x88(0x18)
	struct FInterpLookupTrack LookupTrack; // 0xa0(0x10)
	struct FName LookAtGroupName; // 0xb0(0x08)
	float LinCurveTension; // 0xb8(0x04)
	float AngCurveTension; // 0xbc(0x04)
	char bUseQuatInterpolation : 1; // 0xc0(0x01)
	char bShowArrowAtKeys : 1; // 0xc0(0x01)
	char bDisableMovement : 1; // 0xc0(0x01)
	char bShowTranslationOnCurveEd : 1; // 0xc0(0x01)
	char bShowRotationOnCurveEd : 1; // 0xc0(0x01)
	char bHide3DTrack : 1; // 0xc0(0x01)
	char pad_C0_6 : 2; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	enum class EInterpTrackMoveRotMode RotMode; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
};

// Class Engine.InterpTrackMoveAxis
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackMoveAxis : UInterpTrackFloatBase {
	enum class EInterpMoveAxis MoveAxis; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct FInterpLookupTrack LookupTrack; // 0x98(0x10)
};

// Class Engine.InterpTrackParticleReplay
// Size: 0x80 (Inherited: 0x70)
struct UInterpTrackParticleReplay : UInterpTrack {
	struct TArray<struct FParticleReplayTrackKey> TrackKeys; // 0x70(0x10)
};

// Class Engine.InterpTrackSlomo
// Size: 0x90 (Inherited: 0x90)
struct UInterpTrackSlomo : UInterpTrackFloatBase {
};

// Class Engine.InterpTrackSound
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackSound : UInterpTrackVectorBase {
	struct TArray<struct FSoundTrackKey> Sounds; // 0x90(0x10)
	char bPlayOnReverse : 1; // 0xa0(0x01)
	char bContinueSoundOnMatineeEnd : 1; // 0xa0(0x01)
	char bSuppressSubtitles : 1; // 0xa0(0x01)
	char bTreatAsDialogue : 1; // 0xa0(0x01)
	char bAttach : 1; // 0xa0(0x01)
	char pad_A0_5 : 3; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
};

// Class Engine.InterpTrackToggle
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackToggle : UInterpTrack {
	struct TArray<struct FToggleTrackKey> ToggleTrack; // 0x70(0x10)
	char bActivateSystemEachUpdate : 1; // 0x80(0x01)
	char bActivateWithJustAttachedFlag : 1; // 0x80(0x01)
	char bFireEventsWhenForwards : 1; // 0x80(0x01)
	char bFireEventsWhenBackwards : 1; // 0x80(0x01)
	char bFireEventsWhenJumpingForwards : 1; // 0x80(0x01)
	char pad_80_5 : 3; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.InterpTrackVectorMaterialParam
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackVectorMaterialParam : UInterpTrackVectorBase {
	struct TArray<struct UMaterialInterface*> TargetMaterials; // 0x90(0x10)
	struct FName ParamName; // 0xa0(0x08)
};

// Class Engine.InterpTrackVectorProp
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackVectorProp : UInterpTrackVectorBase {
	struct FName PropertyName; // 0x90(0x08)
};

// Class Engine.InterpTrackVisibility
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackVisibility : UInterpTrack {
	struct TArray<struct FVisibilityTrackKey> VisibilityTrack; // 0x70(0x10)
	char bFireEventsWhenForwards : 1; // 0x80(0x01)
	char bFireEventsWhenBackwards : 1; // 0x80(0x01)
	char bFireEventsWhenJumpingForwards : 1; // 0x80(0x01)
	char pad_80_3 : 5; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.IntSerialization
// Size: 0x50 (Inherited: 0x28)
struct UIntSerialization : UObject {
	uint16_t UnsignedInt16Variable; // 0x28(0x02)
	char pad_2A[0x2]; // 0x2a(0x02)
	uint32_t UnsignedInt32Variable; // 0x2c(0x04)
	uint64_t UnsignedInt64Variable; // 0x30(0x08)
	int8_t SignedInt8Variable; // 0x38(0x01)
	char pad_39[0x1]; // 0x39(0x01)
	int16_t SignedInt16Variable; // 0x3a(0x02)
	char pad_3C[0x4]; // 0x3c(0x04)
	int64_t SignedInt64Variable; // 0x40(0x08)
	char UnsignedInt8Variable; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	int32_t SignedInt32Variable; // 0x4c(0x04)
};

// Class Engine.KillZVolume
// Size: 0x368 (Inherited: 0x368)
struct AKillZVolume : APhysicsVolume {
};

// Class Engine.KismetArrayLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetArrayLibrary : UBlueprintFunctionLibrary {

	void SetArrayPropertyByName(struct UObject* Object, struct FName PropertyName, struct TArray<int32_t>& Value); // Function Engine.KismetArrayLibrary.SetArrayPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cfe300
	void FilterArray(struct TArray<struct AActor*>& TargetArray, struct AActor* FilterClass, struct TArray<struct AActor*>& FilteredArray); // Function Engine.KismetArrayLibrary.FilterArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cfe1b0
	void Array_Swap(struct TArray<int32_t>& TargetArray, int32_t FirstIndex, int32_t SecondIndex); // Function Engine.KismetArrayLibrary.Array_Swap // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cfe080
	void Array_Shuffle(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Shuffle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cfdfe0
	void Array_Set(struct TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item, bool bSizeToFit); // Function Engine.KismetArrayLibrary.Array_Set // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cfddc0
	void Array_Resize(struct TArray<int32_t>& TargetArray, int32_t Size); // Function Engine.KismetArrayLibrary.Array_Resize // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cfdcd0
	bool Array_RemoveItem(struct TArray<int32_t>& TargetArray, int32_t& Item); // Function Engine.KismetArrayLibrary.Array_RemoveItem // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cfdb20
	void Array_Remove(struct TArray<int32_t>& TargetArray, int32_t IndexToRemove); // Function Engine.KismetArrayLibrary.Array_Remove // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cfda30
	int32_t Array_Length(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Length // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3cfd980
	int32_t Array_LastIndex(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_LastIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3cfd8d0
	bool Array_IsValidIndex(struct TArray<int32_t>& TargetArray, int32_t IndexToTest); // Function Engine.KismetArrayLibrary.Array_IsValidIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3cfd7e0
	void Array_Insert(struct TArray<int32_t>& TargetArray, int32_t& NewItem, int32_t Index); // Function Engine.KismetArrayLibrary.Array_Insert // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cfd600
	bool Array_Identical(struct TArray<int32_t>& ArrayA, struct TArray<int32_t>& ArrayB); // Function Engine.KismetArrayLibrary.Array_Identical // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3cfd4f0
	void Array_Get(struct TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item); // Function Engine.KismetArrayLibrary.Array_Get // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3cfd300
	int32_t Array_Find(struct TArray<int32_t>& TargetArray, int32_t& ItemToFind); // Function Engine.KismetArrayLibrary.Array_Find // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3cfd150
	bool Array_Contains(struct TArray<int32_t>& TargetArray, int32_t& ItemToFind); // Function Engine.KismetArrayLibrary.Array_Contains // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3cfcf90
	void Array_Clear(struct TArray<int32_t>& TargetArray); // Function Engine.KismetArrayLibrary.Array_Clear // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cfcef0
	void Array_Append(struct TArray<int32_t>& TargetArray, struct TArray<int32_t>& SourceArray); // Function Engine.KismetArrayLibrary.Array_Append // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cfcdf0
	int32_t Array_AddUnique(struct TArray<int32_t>& TargetArray, int32_t& NewItem); // Function Engine.KismetArrayLibrary.Array_AddUnique // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cfcc40
	int32_t Array_Add(struct TArray<int32_t>& TargetArray, int32_t& NewItem); // Function Engine.KismetArrayLibrary.Array_Add // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3cfca90
};

// Class Engine.KismetGuidLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetGuidLibrary : UBlueprintFunctionLibrary {

	void Parse_StringToGuid(struct FString GuidString, struct FGuid& OutGuid, bool& SUCCESS); // Function Engine.KismetGuidLibrary.Parse_StringToGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d01cc0
	bool NotEqual_GuidGuid(struct FGuid& A, struct FGuid& B); // Function Engine.KismetGuidLibrary.NotEqual_GuidGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d01bc0
	struct FGuid NewGuid(); // Function Engine.KismetGuidLibrary.NewGuid // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d01b80
	bool IsValid_Guid(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.IsValid_Guid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d01020
	void Invalidate_Guid(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.Invalidate_Guid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d00f90
	bool EqualEqual_GuidGuid(struct FGuid& A, struct FGuid& B); // Function Engine.KismetGuidLibrary.EqualEqual_GuidGuid // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cff680
	struct FString Conv_GuidToString(struct FGuid& InGuid); // Function Engine.KismetGuidLibrary.Conv_GuidToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3cff5a0
};

// Class Engine.KismetInputLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetInputLibrary : UBlueprintFunctionLibrary {

	bool PointerEvent_IsTouchEvent(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d02c30
	bool PointerEvent_IsMouseButtonDown(struct FPointerEvent& Input, struct FKey MouseButton); // Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d02a70
	float PointerEvent_GetWheelDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d02940
	int32_t PointerEvent_GetUserIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d02810
	int32_t PointerEvent_GetTouchpadIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d026e0
	struct FVector2D PointerEvent_GetScreenSpacePosition(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d025a0
	int32_t PointerEvent_GetPointerIndex(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d02470
	struct FVector2D PointerEvent_GetLastScreenSpacePosition(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d02330
	enum class ESlateGesture PointerEvent_GetGestureType(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetGestureType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d02200
	struct FVector2D PointerEvent_GetGestureDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d020c0
	struct FKey PointerEvent_GetEffectingButton(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d01f50
	struct FVector2D PointerEvent_GetCursorDelta(struct FPointerEvent& Input); // Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d01e10
	bool Key_IsVectorAxis(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsVectorAxis // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d01ab0
	bool Key_IsValid(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d019e0
	bool Key_IsMouseButton(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsMouseButton // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d01910
	bool Key_IsModifierKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsModifierKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d01840
	bool Key_IsKeyboardKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsKeyboardKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d01770
	bool Key_IsGamepadKey(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsGamepadKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d016a0
	bool Key_IsFloatAxis(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_IsFloatAxis // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d015d0
	enum class EUINavigation Key_GetNavigationDirectionFromKey(struct FKeyEvent& InKeyEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d014d0
	enum class EUINavigation Key_GetNavigationDirectionFromAnalog(struct FAnalogInputEvent& InAnalogEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationDirectionFromAnalog // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d013c0
	enum class EUINavigationAction Key_GetNavigationActionFromKey(struct FKeyEvent& InKeyEvent); // Function Engine.KismetInputLibrary.Key_GetNavigationActionFromKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d012c0
	enum class EUINavigationAction Key_GetNavigationAction(struct FKey& InKey); // Function Engine.KismetInputLibrary.Key_GetNavigationAction // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d011f0
	struct FText Key_GetDisplayName(struct FKey& Key); // Function Engine.KismetInputLibrary.Key_GetDisplayName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d010c0
	bool InputEvent_IsShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d00ee0
	bool InputEvent_IsRightShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d00e30
	bool InputEvent_IsRightControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d00d80
	bool InputEvent_IsRightCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d00cd0
	bool InputEvent_IsRightAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d00c20
	bool InputEvent_IsRepeat(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsRepeat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d00b70
	bool InputEvent_IsLeftShiftDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d00ac0
	bool InputEvent_IsLeftControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d00a10
	bool InputEvent_IsLeftCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d00960
	bool InputEvent_IsLeftAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d008b0
	bool InputEvent_IsControlDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsControlDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d00800
	bool InputEvent_IsCommandDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsCommandDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d00750
	bool InputEvent_IsAltDown(struct FInputEvent& Input); // Function Engine.KismetInputLibrary.InputEvent_IsAltDown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d006a0
	struct FText InputChord_GetDisplayName(struct FInputChord& Key); // Function Engine.KismetInputLibrary.InputChord_GetDisplayName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d00550
	int32_t GetUserIndex(struct FKeyEvent& Input); // Function Engine.KismetInputLibrary.GetUserIndex // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d00450
	struct FKey GetKey(struct FKeyEvent& Input); // Function Engine.KismetInputLibrary.GetKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3cffe60
	float GetAnalogValue(struct FAnalogInputEvent& Input); // Function Engine.KismetInputLibrary.GetAnalogValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3cffad0
	bool EqualEqual_KeyKey(struct FKey A, struct FKey B); // Function Engine.KismetInputLibrary.EqualEqual_KeyKey // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cff950
	bool EqualEqual_InputChordInputChord(struct FInputChord A, struct FInputChord B); // Function Engine.KismetInputLibrary.EqualEqual_InputChordInputChord // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cff780
	void CalibrateTilt(); // Function Engine.KismetInputLibrary.CalibrateTilt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cff4c0
};

// Class Engine.KismetInternationalizationLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetInternationalizationLibrary : UBlueprintFunctionLibrary {

	bool SetCurrentLocale(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLocale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d03120
	bool SetCurrentLanguageAndLocale(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d03040
	bool SetCurrentLanguage(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d02f60
	bool SetCurrentCulture(struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d02e80
	bool SetCurrentAssetGroupCulture(struct FName AssetGroup, struct FString Culture, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d02d60
	struct FString GetSuitableCulture(struct TArray<struct FString>& AvailableCultures, struct FString CultureToMatch, struct FString FallbackCulture); // Function Engine.KismetInternationalizationLibrary.GetSuitableCulture // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d00280
	struct FString GetNativeCulture(enum class ELocalizedTextSourceCategory TextCategory); // Function Engine.KismetInternationalizationLibrary.GetNativeCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d001c0
	struct TArray<struct FString> GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional); // Function Engine.KismetInternationalizationLibrary.GetLocalizedCultures // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cfffa0
	struct FString GetCurrentLocale(); // Function Engine.KismetInternationalizationLibrary.GetCurrentLocale // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cffde0
	struct FString GetCurrentLanguage(); // Function Engine.KismetInternationalizationLibrary.GetCurrentLanguage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e7cab0
	struct FString GetCurrentCulture(); // Function Engine.KismetInternationalizationLibrary.GetCurrentCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x1e7cab0
	struct FString GetCurrentAssetGroupCulture(struct FName AssetGroup); // Function Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cffd10
	struct FString GetCultureDisplayName(struct FString Culture, bool Localized); // Function Engine.KismetInternationalizationLibrary.GetCultureDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cffbe0
	void ClearCurrentAssetGroupCulture(struct FName AssetGroup, bool SaveToConfig); // Function Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3cff4e0
};

// Class Engine.KismetMaterialLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetMaterialLibrary : UBlueprintFunctionLibrary {

	void SetVectorParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName, struct FLinearColor& ParameterValue); // Function Engine.KismetMaterialLibrary.SetVectorParameterValue // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d2b0e0
	void SetScalarParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName, float ParameterValue); // Function Engine.KismetMaterialLibrary.SetScalarParameterValue // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x3d2afa0
	struct FLinearColor GetVectorParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName); // Function Engine.KismetMaterialLibrary.GetVectorParameterValue // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d18570
	float GetScalarParameterValue(struct UObject* WorldContextObject, struct UMaterialParameterCollection* Collection, struct FName ParameterName); // Function Engine.KismetMaterialLibrary.GetScalarParameterValue // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x3d17d70
	struct UMaterialInstanceDynamic* CreateDynamicMaterialInstance(struct UObject* WorldContextObject, struct UMaterialInterface* Parent, struct FName OptionalName); // Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x3d116b0
};

// Class Engine.KismetMathLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetMathLibrary : UBlueprintFunctionLibrary {

	int32_t Xor_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Xor_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d32950
	int64_t Xor_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Xor_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d32890
	struct FVector WeightedMovingAverage_FVector(struct FVector CurrentSample, struct FVector PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_FVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d32640
	struct FRotator WeightedMovingAverage_FRotator(struct FRotator CurrentSample, struct FRotator PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_FRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d32500
	float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight); // Function Engine.KismetMathLibrary.WeightedMovingAverage_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d32780
	float VSizeXYSquared(struct FVector A); // Function Engine.KismetMathLibrary.VSizeXYSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2e040
	float VSizeXY(struct FVector A); // Function Engine.KismetMathLibrary.VSizeXY // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2dfb0
	float VSizeSquared(struct FVector A); // Function Engine.KismetMathLibrary.VSizeSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2df20
	float VSize2DSquared(struct FVector2D A); // Function Engine.KismetMathLibrary.VSize2DSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2de00
	float VSize2D(struct FVector2D A); // Function Engine.KismetMathLibrary.VSize2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2dd70
	float VSize(struct FVector A); // Function Engine.KismetMathLibrary.VSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2de80
	struct FVector VLerp(struct FVector A, struct FVector B, float ALPHA); // Function Engine.KismetMathLibrary.VLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2dc40
	struct FVector VInterpTo_Constant(struct FVector Current, struct FVector Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.VInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2dac0
	struct FVector VInterpTo(struct FVector Current, struct FVector Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.VInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2d940
	struct FVector VectorSpringInterp(struct FVector Current, struct FVector Target, struct FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // Function Engine.KismetMathLibrary.VectorSpringInterp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d2f930
	struct FVector Vector_Zero(); // Function Engine.KismetMathLibrary.Vector_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d324d0
	struct FVector Vector_Up(); // Function Engine.KismetMathLibrary.Vector_Up // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d324a0
	void Vector_UnwindEuler(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_UnwindEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d32420
	struct FVector2D Vector_UnitCartesianToSpherical(struct FVector A); // Function Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d32340
	struct FVector Vector_ToRadians(struct FVector A); // Function Engine.KismetMathLibrary.Vector_ToRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d322a0
	struct FVector Vector_ToDegrees(struct FVector A); // Function Engine.KismetMathLibrary.Vector_ToDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d32200
	struct FVector Vector_SnappedToGrid(struct FVector InVect, float InGridSize); // Function Engine.KismetMathLibrary.Vector_SnappedToGrid // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d32050
	void Vector_Set(struct FVector& A, float X, float Y, float Z); // Function Engine.KismetMathLibrary.Vector_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d31f00
	struct FVector Vector_Right(); // Function Engine.KismetMathLibrary.Vector_Right // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d31ed0
	struct FVector Vector_Reciprocal(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_Reciprocal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d31de0
	struct FVector Vector_ProjectOnToNormal(struct FVector V, struct FVector InNormal); // Function Engine.KismetMathLibrary.Vector_ProjectOnToNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d31cf0
	struct FVector Vector_One(); // Function Engine.KismetMathLibrary.Vector_One // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d31cc0
	struct FVector Vector_NormalUnsafe(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_NormalUnsafe // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d319f0
	void Vector_Normalize(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_Normalize // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d31b30
	struct FVector Vector_Normal2D(struct FVector A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_Normal2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d31820
	struct FVector Vector_MirrorByPlane(struct FVector A, struct FPlane& InPlane); // Function Engine.KismetMathLibrary.Vector_MirrorByPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d316d0
	struct FVector Vector_Left(); // Function Engine.KismetMathLibrary.Vector_Left // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d316a0
	bool Vector_IsZero(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d315f0
	bool Vector_IsUnit(struct FVector& A, float SquaredLenthTolerance); // Function Engine.KismetMathLibrary.Vector_IsUnit // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d314e0
	bool Vector_IsUniform(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_IsUniform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d313c0
	bool Vector_IsNormal(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsNormal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d312f0
	bool Vector_IsNearlyZero(struct FVector& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector_IsNearlyZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d311e0
	bool Vector_IsNAN(struct FVector& A); // Function Engine.KismetMathLibrary.Vector_IsNAN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d31110
	float Vector_HeadingAngle(struct FVector A); // Function Engine.KismetMathLibrary.Vector_HeadingAngle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30fc0
	struct FVector Vector_GetSignVector(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetSignVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30f00
	struct FVector Vector_GetProjection(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetProjection // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30e60
	float Vector_GetAbsMin(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbsMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30dc0
	float Vector_GetAbsMax(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbsMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30d20
	struct FVector Vector_GetAbs(struct FVector A); // Function Engine.KismetMathLibrary.Vector_GetAbs // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30c80
	struct FVector Vector_Forward(); // Function Engine.KismetMathLibrary.Vector_Forward // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30c50
	struct FVector Vector_Down(); // Function Engine.KismetMathLibrary.Vector_Down // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30c20
	float Vector_DistanceSquared(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_DistanceSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30b40
	float Vector_Distance2DSquared(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance2DSquared // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30990
	float Vector_Distance2D(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d308c0
	float Vector_Distance(struct FVector v1, struct FVector v2); // Function Engine.KismetMathLibrary.Vector_Distance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30a60
	float Vector_CosineAngle2D(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_CosineAngle2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d306d0
	struct FVector Vector_ComponentMin(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_ComponentMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30600
	struct FVector Vector_ComponentMax(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Vector_ComponentMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30530
	struct FVector Vector_ClampSizeMax2D(struct FVector A, float MAX); // Function Engine.KismetMathLibrary.Vector_ClampSizeMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d301c0
	struct FVector Vector_ClampSizeMax(struct FVector A, float MAX); // Function Engine.KismetMathLibrary.Vector_ClampSizeMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30340
	struct FVector Vector_ClampSize2D(struct FVector A, float Min, float MAX); // Function Engine.KismetMathLibrary.Vector_ClampSize2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d30020
	struct FVector Vector_BoundedToCube(struct FVector InVect, float InRadius); // Function Engine.KismetMathLibrary.Vector_BoundedToCube // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2ff20
	struct FVector Vector_BoundedToBox(struct FVector InVect, struct FVector InBoxMin, struct FVector InBoxMax); // Function Engine.KismetMathLibrary.Vector_BoundedToBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2fdf0
	struct FVector Vector_Backward(); // Function Engine.KismetMathLibrary.Vector_Backward // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2fdc0
	void Vector_Assign(struct FVector& A, struct FVector& InVector); // Function Engine.KismetMathLibrary.Vector_Assign // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d2fce0
	void Vector_AddBounded(struct FVector& A, struct FVector InAddVect, float InRadius); // Function Engine.KismetMathLibrary.Vector_AddBounded // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d2fb80
	struct FVector4 Vector4_Zero(); // Function Engine.KismetMathLibrary.Vector4_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2f910
	float Vector4_SizeSquared3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_SizeSquared3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2f780
	float Vector4_SizeSquared(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_SizeSquared // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2f840
	float Vector4_Size3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Size3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2f5f0
	float Vector4_Size(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Size // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2f6b0
	void Vector4_Set(struct FVector4& A, float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.Vector4_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d2f450
	struct FVector4 Vector4_NormalUnsafe3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_NormalUnsafe3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2f150
	void Vector4_Normalize3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_Normalize3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d2f2a0
	struct FVector4 Vector4_Normal3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_Normal3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2efa0
	struct FVector4 Vector4_Negated(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_Negated // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2ef00
	struct FVector4 Vector4_MirrorByVector3(struct FVector4& Direction, struct FVector4& SurfaceNormal); // Function Engine.KismetMathLibrary.Vector4_MirrorByVector3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2ed70
	bool Vector4_IsZero(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsZero // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2ecb0
	bool Vector4_IsUnit3(struct FVector4& A, float SquaredLenthTolerance); // Function Engine.KismetMathLibrary.Vector4_IsUnit3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2eb90
	bool Vector4_IsNormal3(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsNormal3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2eac0
	bool Vector4_IsNearlyZero3(struct FVector4& A, float Tolerance); // Function Engine.KismetMathLibrary.Vector4_IsNearlyZero3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2e9a0
	bool Vector4_IsNAN(struct FVector4& A); // Function Engine.KismetMathLibrary.Vector4_IsNAN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2e8b0
	float Vector4_DotProduct3(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_DotProduct3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2e660
	float Vector4_DotProduct(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_DotProduct // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2e780
	struct FVector4 Vector4_CrossProduct3(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Vector4_CrossProduct3 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2e500
	void Vector4_Assign(struct FVector4& A, struct FVector4& InVector); // Function Engine.KismetMathLibrary.Vector4_Assign // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d2e410
	struct FVector2D Vector2DInterpTo_Constant(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.Vector2DInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2e220
	struct FVector2D Vector2DInterpTo(struct FVector2D Current, struct FVector2D Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.Vector2DInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2e0c0
	struct FVector2D Vector2D_Zero(); // Function Engine.KismetMathLibrary.Vector2D_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2e3e0
	struct FVector2D Vector2D_Unit45Deg(); // Function Engine.KismetMathLibrary.Vector2D_Unit45Deg // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2e3b0
	struct FVector2D Vector2D_One(); // Function Engine.KismetMathLibrary.Vector2D_One // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2e380
	struct FVector VEase(struct FVector A, struct FVector B, float ALPHA, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.VEase // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2d750
	struct FDateTime UtcNow(); // Function Engine.KismetMathLibrary.UtcNow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2d710
	struct FVector4 TransformVector4(struct FMatrix& Matrix, struct FVector4& Vec4); // Function Engine.KismetMathLibrary.TransformVector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2d510
	struct FRotator TransformRotation(struct FTransform& T, struct FRotator Rotation); // Function Engine.KismetMathLibrary.TransformRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2d3d0
	struct FVector TransformLocation(struct FTransform& T, struct FVector Location); // Function Engine.KismetMathLibrary.TransformLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2d230
	struct FVector TransformDirection(struct FTransform& T, struct FVector Direction); // Function Engine.KismetMathLibrary.TransformDirection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2d090
	float Transform_Determinant(struct FTransform& Transform); // Function Engine.KismetMathLibrary.Transform_Determinant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2d630
	struct FVector2D ToSign2D(struct FVector2D A); // Function Engine.KismetMathLibrary.ToSign2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2cf90
	struct FVector2D ToRounded2D(struct FVector2D A); // Function Engine.KismetMathLibrary.ToRounded2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2ce90
	void ToDirectionAndLength2D(struct FVector2D A, struct FVector2D& OutDir, float& OutLength); // Function Engine.KismetMathLibrary.ToDirectionAndLength2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2cd10
	struct FDateTime Today(); // Function Engine.KismetMathLibrary.Today // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2d040
	struct FTransform TLerp(struct FTransform& A, struct FTransform& B, float ALPHA, enum class ELerpInterpolationMode InterpMode); // Function Engine.KismetMathLibrary.TLerp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2c7e0
	struct FTransform TInterpTo(struct FTransform& Current, struct FTransform& Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.TInterpTo // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2c5c0
	struct FTimespan TimespanZeroValue(); // Function Engine.KismetMathLibrary.TimespanZeroValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x34f4b00
	float TimespanRatio(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.TimespanRatio // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2cc30
	struct FTimespan TimespanMinValue(); // Function Engine.KismetMathLibrary.TimespanMinValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2cc00
	struct FTimespan TimespanMaxValue(); // Function Engine.KismetMathLibrary.TimespanMaxValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2cbd0
	bool TimespanFromString(struct FString TimespanString, struct FTimespan& Result); // Function Engine.KismetMathLibrary.TimespanFromString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2ca80
	struct FTransform TEase(struct FTransform& A, struct FTransform& B, float ALPHA, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.TEase // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2c340
	float Tan(float A); // Function Engine.KismetMathLibrary.Tan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2ca00
	struct FVector Subtract_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Subtract_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2c270
	struct FVector Subtract_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2c190
	struct FVector Subtract_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Subtract_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2c0b0
	struct FVector4 Subtract_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Subtract_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2bf80
	struct FVector2D Subtract_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2bec0
	struct FVector2D Subtract_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Subtract_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2bdf0
	struct FTimespan Subtract_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Subtract_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2b770
	struct FQuat Subtract_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Subtract_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2bce0
	struct FLinearColor Subtract_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Subtract_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2bc00
	struct FIntPoint Subtract_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Subtract_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2bb30
	struct FIntPoint Subtract_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2ba60
	int32_t Subtract_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Subtract_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2b9a0
	int64_t Subtract_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Subtract_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2b8e0
	float Subtract_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Subtract_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2b820
	struct FDateTime Subtract_DateTimeTimespan(struct FDateTime A, struct FTimespan B); // Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2b770
	struct FTimespan Subtract_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Subtract_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2b770
	char Subtract_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Subtract_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2b6c0
	float Square(float A); // Function Engine.KismetMathLibrary.Square // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2b640
	float Sqrt(float A); // Function Engine.KismetMathLibrary.Sqrt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2b590
	struct FVector Spherical2DToUnitCartesian(struct FVector2D A); // Function Engine.KismetMathLibrary.Spherical2DToUnitCartesian // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2b4b0
	float Sin(float A); // Function Engine.KismetMathLibrary.Sin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2b430
	int64_t SignOfInteger64(int64_t A); // Function Engine.KismetMathLibrary.SignOfInteger64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2b2f0
	int32_t SignOfInteger(int32_t A); // Function Engine.KismetMathLibrary.SignOfInteger // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2b390
	float SignOfFloat(float A); // Function Engine.KismetMathLibrary.SignOfFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2b220
	void SetRandomStreamSeed(struct FRandomStream& Stream, int32_t NewSeed); // Function Engine.KismetMathLibrary.SetRandomStreamSeed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d2aed0
	void Set2D(struct FVector2D& A, float X, float Y); // Function Engine.KismetMathLibrary.Set2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d2adc0
	struct FVector SelectVector(struct FVector A, struct FVector B, bool bPickA); // Function Engine.KismetMathLibrary.SelectVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2a910
	struct FTransform SelectTransform(struct FTransform& A, struct FTransform& B, bool bPickA); // Function Engine.KismetMathLibrary.SelectTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2ac00
	struct FString SelectString(struct FString A, struct FString B, bool bPickA); // Function Engine.KismetMathLibrary.SelectString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2aa40
	struct FRotator SelectRotator(struct FRotator A, struct FRotator B, bool bPickA); // Function Engine.KismetMathLibrary.SelectRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2a910
	struct UObject* SelectObject(struct UObject* A, struct UObject* B, bool bSelectA); // Function Engine.KismetMathLibrary.SelectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2a510
	int32_t SelectInt(int32_t A, int32_t B, bool bPickA); // Function Engine.KismetMathLibrary.SelectInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2a820
	float SelectFloat(float A, float B, bool bPickA); // Function Engine.KismetMathLibrary.SelectFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2a710
	struct FLinearColor SelectColor(struct FLinearColor A, struct FLinearColor B, bool bPickA); // Function Engine.KismetMathLibrary.SelectColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2a600
	struct UObject* SelectClass(struct UObject* A, struct UObject* B, bool bSelectA); // Function Engine.KismetMathLibrary.SelectClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2a510
	void SeedRandomStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.SeedRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d2a490
	float SafeDivide(float A, float B); // Function Engine.KismetMathLibrary.SafeDivide // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2a3d0
	int64_t Round64(float A); // Function Engine.KismetMathLibrary.Round64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2a270
	int32_t Round(float A); // Function Engine.KismetMathLibrary.Round // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d2a340
	struct FRotator RotatorFromAxisAndAngle(struct FVector Axis, float Angle); // Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2a190
	struct FVector RotateAngleAxis(struct FVector InVect, float AngleDeg, struct FVector Axis); // Function Engine.KismetMathLibrary.RotateAngleAxis // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d2a050
	struct FRotator RLerp(struct FRotator A, struct FRotator B, float ALPHA, bool bShortestPath); // Function Engine.KismetMathLibrary.RLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d28490
	struct FRotator RInterpTo_Constant(struct FRotator Current, struct FRotator Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.RInterpTo_Constant // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d28310
	struct FRotator RInterpTo(struct FRotator Current, struct FRotator Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.RInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d28190
	void RGBToHSV_Vector(struct FLinearColor RGB, struct FLinearColor& HSV); // Function Engine.KismetMathLibrary.RGBToHSV_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d280b0
	void RGBtoHSV(struct FLinearColor InColor, float& H, float& S, float& V, float& A); // Function Engine.KismetMathLibrary.RGBtoHSV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d27ec0
	struct FLinearColor RGBLinearToHSV(struct FLinearColor RGB); // Function Engine.KismetMathLibrary.RGBLinearToHSV // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d27e30
	void ResetVectorSpringState(struct FVectorSpringState& SpringState); // Function Engine.KismetMathLibrary.ResetVectorSpringState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d29fb0
	void ResetRandomStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.ResetRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d29f30
	void ResetFloatSpringState(struct FFloatSpringState& SpringState); // Function Engine.KismetMathLibrary.ResetFloatSpringState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d29ea0
	struct FRotator REase(struct FRotator A, struct FRotator B, float ALPHA, bool bShortestPath, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.REase // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d27c00
	struct FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d29d10
	struct FVector RandomUnitVectorInEllipticalConeInRadians(struct FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d29bf0
	struct FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d29a50
	struct FVector RandomUnitVectorInEllipticalConeInDegrees(struct FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees); // Function Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d29920
	struct FVector RandomUnitVectorInConeInRadiansFromStream(struct FVector& ConeDir, float ConeHalfAngleInRadians, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d297f0
	struct FVector RandomUnitVectorInConeInRadians(struct FVector ConeDir, float ConeHalfAngleInRadians); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d29710
	struct FVector RandomUnitVectorInConeInDegreesFromStream(struct FVector& ConeDir, float ConeHalfAngleInDegrees, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d295d0
	struct FVector RandomUnitVectorInConeInDegrees(struct FVector ConeDir, float ConeHalfAngleInDegrees); // Function Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d294e0
	struct FVector RandomUnitVectorFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomUnitVectorFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d29440
	struct FVector RandomUnitVector(); // Function Engine.KismetMathLibrary.RandomUnitVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d29400
	struct FRotator RandomRotatorFromStream(bool bRoll, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomRotatorFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d29320
	struct FRotator RandomRotator(bool bRoll); // Function Engine.KismetMathLibrary.RandomRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d29280
	struct FVector RandomPointInBoundingBox(struct FVector Origin, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.RandomPointInBoundingBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d29140
	int32_t RandomIntegerInRangeFromStream(int32_t Min, int32_t MAX, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d29040
	int32_t RandomIntegerInRange(int32_t Min, int32_t MAX); // Function Engine.KismetMathLibrary.RandomIntegerInRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d28f40
	int32_t RandomIntegerFromStream(int32_t MAX, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomIntegerFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d28e70
	int64_t RandomInteger64InRange(int64_t Min, int64_t MAX); // Function Engine.KismetMathLibrary.RandomInteger64InRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d28ca0
	int64_t RandomInteger64(int64_t MAX); // Function Engine.KismetMathLibrary.RandomInteger64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d28bd0
	int32_t RandomInteger(int32_t MAX); // Function Engine.KismetMathLibrary.RandomInteger // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d28db0
	float RandomFloatInRangeFromStream(float Min, float MAX, struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d28ac0
	float RandomFloatInRange(float Min, float MAX); // Function Engine.KismetMathLibrary.RandomFloatInRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d289d0
	float RandomFloatFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomFloatFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d28940
	float RandomFloat(); // Function Engine.KismetMathLibrary.RandomFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d28900
	bool RandomBoolWithWeightFromStream(float Weight, struct FRandomStream& RandomStream); // Function Engine.KismetMathLibrary.RandomBoolWithWeightFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d28820
	bool RandomBoolWithWeight(float Weight); // Function Engine.KismetMathLibrary.RandomBoolWithWeight // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d287a0
	bool RandomBoolFromStream(struct FRandomStream& Stream); // Function Engine.KismetMathLibrary.RandomBoolFromStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d28710
	bool RandomBool(); // Function Engine.KismetMathLibrary.RandomBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d286b0
	float RadiansToDegrees(float A); // Function Engine.KismetMathLibrary.RadiansToDegrees // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d28630
	struct FVector Quat_VectorUp(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorUp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26900
	struct FVector Quat_VectorRight(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorRight // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26810
	struct FVector Quat_VectorForward(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_VectorForward // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26710
	struct FVector Quat_UnrotateVector(struct FQuat& Q, struct FVector& V); // Function Engine.KismetMathLibrary.Quat_UnrotateVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d279e0
	float Quat_SizeSquared(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_SizeSquared // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d27920
	float Quat_Size(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Size // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d27860
	void Quat_SetFromEuler(struct FQuat& Q, struct FVector& Euler); // Function Engine.KismetMathLibrary.Quat_SetFromEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d27780
	void Quat_SetComponents(struct FQuat& Q, float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.Quat_SetComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d275f0
	struct FRotator Quat_Rotator(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Rotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d27550
	struct FVector Quat_RotateVector(struct FQuat& Q, struct FVector& V); // Function Engine.KismetMathLibrary.Quat_RotateVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d27350
	struct FQuat Quat_Normalized(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_Normalized // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d27200
	void Quat_Normalize(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_Normalize // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d270c0
	struct FQuat Quat_MakeFromEuler(struct FVector& Euler); // Function Engine.KismetMathLibrary.Quat_MakeFromEuler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d27020
	struct FQuat Quat_Log(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Log // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26f80
	bool Quat_IsNormalized(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsNormalized // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26eb0
	bool Quat_IsNonFinite(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsNonFinite // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26dd0
	bool Quat_IsIdentity(struct FQuat& Q, float Tolerance); // Function Engine.KismetMathLibrary.Quat_IsIdentity // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26cb0
	bool Quat_IsFinite(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_IsFinite // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26bd0
	struct FQuat Quat_Inversed(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Inversed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26b10
	struct FQuat Quat_Identity(); // Function Engine.KismetMathLibrary.Quat_Identity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26af0
	struct FVector Quat_GetRotationAxis(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetRotationAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26a10
	struct FVector Quat_GetAxisZ(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26900
	struct FVector Quat_GetAxisY(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26810
	struct FVector Quat_GetAxisX(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAxisX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26710
	float Quat_GetAngle(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_GetAngle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26660
	struct FQuat Quat_Exp(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Exp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d265c0
	struct FVector Quat_Euler(struct FQuat& Q); // Function Engine.KismetMathLibrary.Quat_Euler // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26520
	void Quat_EnforceShortestArcWith(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Quat_EnforceShortestArcWith // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d263f0
	float Quat_AngularDistance(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Quat_AngularDistance // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d262b0
	struct FVector ProjectVectorOnToVector(struct FVector V, struct FVector Target); // Function Engine.KismetMathLibrary.ProjectVectorOnToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26140
	struct FVector ProjectVectorOnToPlane(struct FVector V, struct FVector PlaneNormal); // Function Engine.KismetMathLibrary.ProjectVectorOnToPlane // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d26020
	struct FVector ProjectPointOnToPlane(struct FVector Point, struct FVector PlaneBase, struct FVector PlaneNormal); // Function Engine.KismetMathLibrary.ProjectPointOnToPlane // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d25ec0
	bool PointsAreCoplanar(struct TArray<struct FVector>& Points, float Tolerance); // Function Engine.KismetMathLibrary.PointsAreCoplanar // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d25dc0
	float PerlinNoise1D(float Value); // Function Engine.KismetMathLibrary.PerlinNoise1D // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d25d40
	int32_t Percent_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Percent_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d25c60
	float Percent_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Percent_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d25ae0
	char Percent_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Percent_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d25a10
	int32_t Or_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Or_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d25950
	int64_t Or_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Or_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d25890
	struct FDateTime now(); // Function Engine.KismetMathLibrary.now // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d25850
	bool NotEqualExactly_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.NotEqualExactly_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d246f0
	bool NotEqualExactly_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d245c0
	bool NotEqualExactly_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d244f0
	bool NotEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d25590
	bool NotEqual_Vector4Vector4(struct FVector4& A, struct FVector4& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d25400
	bool NotEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d252e0
	bool NotEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d24a20
	bool NotEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_RotatorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d25100
	bool NotEqual_QuatQuat(struct FQuat& A, struct FQuat& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NotEqual_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d24fa0
	bool NotEqual_ObjectObject(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.NotEqual_ObjectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d24960
	bool NotEqual_NameName(struct FName A, struct FName B); // Function Engine.KismetMathLibrary.NotEqual_NameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d24960
	bool NotEqual_MatrixMatrix(struct FMatrix& A, struct FMatrix& B, float Tolerance); // Function Engine.KismetMathLibrary.NotEqual_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d24e10
	bool NotEqual_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d24d30
	bool NotEqual_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.NotEqual_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d24c60
	bool NotEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.NotEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d24ba0
	bool NotEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.NotEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d24960
	bool NotEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.NotEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d24ad0
	bool NotEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d24a20
	bool NotEqual_ClassClass(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.NotEqual_ClassClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d24960
	bool NotEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.NotEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d248a0
	bool NotEqual_BoolBool(bool A, bool B); // Function Engine.KismetMathLibrary.NotEqual_BoolBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d247d0
	bool Not_PreBool(bool A); // Function Engine.KismetMathLibrary.Not_PreBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d257d0
	int64_t Not_Int64(int64_t A); // Function Engine.KismetMathLibrary.Not_Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d256d0
	int32_t Not_Int(int32_t A); // Function Engine.KismetMathLibrary.Not_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d25750
	struct FVector2D NormalSafe2D(struct FVector2D A, float Tolerance); // Function Engine.KismetMathLibrary.NormalSafe2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d23fa0
	float NormalizeToRange(float Value, float RangeMin, float RangeMax); // Function Engine.KismetMathLibrary.NormalizeToRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d242f0
	struct FRotator NormalizedDeltaRotator(struct FRotator A, struct FRotator B); // Function Engine.KismetMathLibrary.NormalizedDeltaRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d24400
	float NormalizeAxis(float Angle); // Function Engine.KismetMathLibrary.NormalizeAxis // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d24270
	void Normalize2D(struct FVector2D& A, float Tolerance); // Function Engine.KismetMathLibrary.Normalize2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d24100
	struct FVector2D Normal2D(struct FVector2D A); // Function Engine.KismetMathLibrary.Normal2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d23cd0
	struct FVector Normal(struct FVector A, float Tolerance); // Function Engine.KismetMathLibrary.Normal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d23de0
	struct FVector NegateVector(struct FVector A); // Function Engine.KismetMathLibrary.NegateVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d23b90
	struct FRotator NegateRotator(struct FRotator A); // Function Engine.KismetMathLibrary.NegateRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d23af0
	struct FVector2D Negated2D(struct FVector2D& A); // Function Engine.KismetMathLibrary.Negated2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d23c30
	bool NearlyEqual_TransformTransform(struct FTransform& A, struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance); // Function Engine.KismetMathLibrary.NearlyEqual_TransformTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d238d0
	bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance); // Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d237c0
	float MultiplyMultiply_FloatFloat(float Base, float exp); // Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d22500
	float MultiplyByPi(float Value); // Function Engine.KismetMathLibrary.MultiplyByPi // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d22480
	struct FVector Multiply_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Multiply_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d236f0
	struct FVector Multiply_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d23280
	struct FVector Multiply_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Multiply_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d231a0
	struct FVector4 Multiply_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Multiply_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d235c0
	struct FVector2D Multiply_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Multiply_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d23500
	struct FVector2D Multiply_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Multiply_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d23430
	struct FTimespan Multiply_TimespanFloat(struct FTimespan A, float Scalar); // Function Engine.KismetMathLibrary.Multiply_TimespanFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d23360
	struct FRotator Multiply_RotatorInt(struct FRotator A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_RotatorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d23280
	struct FRotator Multiply_RotatorFloat(struct FRotator A, float B); // Function Engine.KismetMathLibrary.Multiply_RotatorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d231a0
	struct FQuat Multiply_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Multiply_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d23060
	struct FMatrix Multiply_MatrixMatrix(struct FMatrix& A, struct FMatrix& B); // Function Engine.KismetMathLibrary.Multiply_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d22e50
	struct FMatrix Multiply_MatrixFloat(struct FMatrix& A, float B); // Function Engine.KismetMathLibrary.Multiply_MatrixFloat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d22ce0
	struct FLinearColor Multiply_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d22c00
	struct FLinearColor Multiply_LinearColorFloat(struct FLinearColor A, float B); // Function Engine.KismetMathLibrary.Multiply_LinearColorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d22b40
	struct FIntPoint Multiply_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Multiply_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d22a70
	struct FIntPoint Multiply_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d22990
	int32_t Multiply_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Multiply_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d228d0
	float Multiply_IntFloat(int32_t A, float B); // Function Engine.KismetMathLibrary.Multiply_IntFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d22800
	int64_t Multiply_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Multiply_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d22740
	float Multiply_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Multiply_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d22680
	char Multiply_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Multiply_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d225c0
	struct FVector MirrorVectorByNormal(struct FVector InVect, struct FVector InNormal); // Function Engine.KismetMathLibrary.MirrorVectorByNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d179d0
	void MinOfIntArray(struct TArray<int32_t>& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue); // Function Engine.KismetMathLibrary.MinOfIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d22080
	void MinOfFloatArray(struct TArray<float>& FloatArray, int32_t& IndexOfMinValue, float& MinValue); // Function Engine.KismetMathLibrary.MinOfFloatArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d21f40
	void MinOfByteArray(struct TArray<char>& ByteArray, int32_t& IndexOfMinValue, char& MinValue); // Function Engine.KismetMathLibrary.MinOfByteArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d21e00
	int64_t MinInt64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.MinInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d21d40
	void MinimumAreaRectangle(struct UObject* WorldContextObject, struct TArray<struct FVector>& InVerts, struct FVector& SampleSurfaceNormal, struct FVector& OutRectCenter, struct FRotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw); // Function Engine.KismetMathLibrary.MinimumAreaRectangle // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d221c0
	int32_t Min(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Min // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d21c80
	void MaxOfIntArray(struct TArray<int32_t>& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue); // Function Engine.KismetMathLibrary.MaxOfIntArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d21b40
	void MaxOfFloatArray(struct TArray<float>& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue); // Function Engine.KismetMathLibrary.MaxOfFloatArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d21a00
	void MaxOfByteArray(struct TArray<char>& ByteArray, int32_t& IndexOfMaxValue, char& MaxValue); // Function Engine.KismetMathLibrary.MaxOfByteArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d218c0
	int64_t MaxInt64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.MaxInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d21800
	int32_t MAX(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.MAX // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d21740
	struct FVector4 Matrix_TransformVector4(struct FMatrix& M, struct FVector4 V); // Function Engine.KismetMathLibrary.Matrix_TransformVector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d214f0
	struct FVector4 Matrix_TransformVector(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_TransformVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d21610
	struct FVector4 Matrix_TransformPosition(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_TransformPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d213b0
	struct FQuat Matrix_ToQuat(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_ToQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d21310
	void Matrix_SetOrigin(struct FMatrix& M, struct FVector NewOrigin); // Function Engine.KismetMathLibrary.Matrix_SetOrigin // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d21230
	void Matrix_SetColumn(struct FMatrix& M, enum class EMatrixColumns Column, struct FVector Value); // Function Engine.KismetMathLibrary.Matrix_SetColumn // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d21100
	void Matrix_SetAxis(struct FMatrix& M, enum class EAxis Axis, struct FVector AxisVector); // Function Engine.KismetMathLibrary.Matrix_SetAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d20fd0
	struct FMatrix Matrix_ScaleTranslation(struct FMatrix& M, struct FVector Scale3D); // Function Engine.KismetMathLibrary.Matrix_ScaleTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d20e90
	struct FMatrix Matrix_RemoveTranslation(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_RemoveTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d20dd0
	void Matrix_RemoveScaling(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_RemoveScaling // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d20d00
	struct FMatrix Matrix_Mirror(struct FMatrix& M, enum class EAxis MirrorAxis, enum class EAxis FlipAxis); // Function Engine.KismetMathLibrary.Matrix_Mirror // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d20b90
	struct FVector Matrix_InverseTransformVector(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_InverseTransformVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d20a20
	struct FVector Matrix_InverseTransformPosition(struct FMatrix& M, struct FVector V); // Function Engine.KismetMathLibrary.Matrix_InverseTransformPosition // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d208b0
	struct FMatrix Matrix_Identity(); // Function Engine.KismetMathLibrary.Matrix_Identity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d20860
	struct FVector Matrix_GetUnitAxis(struct FMatrix& M, enum class EAxis Axis); // Function Engine.KismetMathLibrary.Matrix_GetUnitAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d20760
	void Matrix_GetUnitAxes(struct FMatrix& M, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.Matrix_GetUnitAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d205d0
	struct FMatrix Matrix_GetTransposed(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetTransposed // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d203e0
	struct FMatrix Matrix_GetTransposeAdjoint(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d20320
	struct FVector Matrix_GetScaleVector(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_GetScaleVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1ff00
	struct FVector Matrix_GetScaledAxis(struct FMatrix& M, enum class EAxis Axis); // Function Engine.KismetMathLibrary.Matrix_GetScaledAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d201b0
	void Matrix_GetScaledAxes(struct FMatrix& M, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.Matrix_GetScaledAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d20000
	float Matrix_GetRotDeterminant(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetRotDeterminant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1fdf0
	struct FRotator Matrix_GetRotator(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d10a90
	struct FVector Matrix_GetOrigin(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Matrix_GetOrigin // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1fd50
	float Matrix_GetMaximumAxisScale(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1fcc0
	struct FMatrix Matrix_GetMatrixWithoutScale(struct FMatrix& M, float Tolerance); // Function Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1fb80
	struct FMatrix Matrix_GetInverse(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetInverse // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1fac0
	bool Matrix_GetFrustumTopPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1f8d0
	bool Matrix_GetFrustumRightPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1f6e0
	bool Matrix_GetFrustumNearPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1f530
	bool Matrix_GetFrustumLeftPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1f340
	bool Matrix_GetFrustumFarPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1f150
	bool Matrix_GetFrustumBottomPlane(struct FMatrix& M, struct FPlane& OutPlane); // Function Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1ef60
	float Matrix_GetDeterminant(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_GetDeterminant // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1eed0
	struct FVector Matrix_GetColumn(struct FMatrix& M, enum class EMatrixColumns Column); // Function Engine.KismetMathLibrary.Matrix_GetColumn // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1ede0
	bool Matrix_ContainsNaN(struct FMatrix& M); // Function Engine.KismetMathLibrary.Matrix_ContainsNaN // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1ed50
	struct FMatrix Matrix_ConcatenateTranslation(struct FMatrix& M, struct FVector Translation); // Function Engine.KismetMathLibrary.Matrix_ConcatenateTranslation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1ebf0
	struct FMatrix Matrix_ApplyScale(struct FMatrix& M, float Scale); // Function Engine.KismetMathLibrary.Matrix_ApplyScale // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1e980
	float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB); // Function Engine.KismetMathLibrary.MapRangeUnclamped // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1e7e0
	float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB); // Function Engine.KismetMathLibrary.MapRangeClamped // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1e640
	struct FVector4 MakeVector4(float X, float Y, float Z, float W); // Function Engine.KismetMathLibrary.MakeVector4 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1e3d0
	struct FVector2D MakeVector2D(float X, float Y); // Function Engine.KismetMathLibrary.MakeVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1e310
	struct FVector MakeVector(float X, float Y, float Z); // Function Engine.KismetMathLibrary.MakeVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1e530
	struct FTransform MakeTransform(struct FVector Location, struct FRotator Rotation, struct FVector Scale); // Function Engine.KismetMathLibrary.MakeTransform // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1e180
	struct FTimespan MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano); // Function Engine.KismetMathLibrary.MakeTimespan2 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1de80
	struct FTimespan MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds); // Function Engine.KismetMathLibrary.MakeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1e000
	struct FRotator MakeRotFromZY(struct FVector& Z, struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromZY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1db20
	struct FRotator MakeRotFromZX(struct FVector& Z, struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromZX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1da10
	struct FRotator MakeRotFromZ(struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1d950
	struct FRotator MakeRotFromYZ(struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromYZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1d840
	struct FRotator MakeRotFromYX(struct FVector& Y, struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromYX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1d730
	struct FRotator MakeRotFromY(struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1d670
	struct FRotator MakeRotFromXZ(struct FVector& X, struct FVector& Z); // Function Engine.KismetMathLibrary.MakeRotFromXZ // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1d560
	struct FRotator MakeRotFromXY(struct FVector& X, struct FVector& Y); // Function Engine.KismetMathLibrary.MakeRotFromXY // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1d450
	struct FRotator MakeRotFromX(struct FVector& X); // Function Engine.KismetMathLibrary.MakeRotFromX // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1d390
	struct FRotator MakeRotator(float Roll, float Pitch, float Yaw); // Function Engine.KismetMathLibrary.MakeRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1dd70
	struct FRotator MakeRotationFromAxes(struct FVector Forward, struct FVector Right, struct FVector Up); // Function Engine.KismetMathLibrary.MakeRotationFromAxes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1dc30
	struct FTransform MakeRelativeTransform(struct FTransform& A, struct FTransform& RelativeTo); // Function Engine.KismetMathLibrary.MakeRelativeTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1d200
	struct FRandomStream MakeRandomStream(int32_t InitialSeed); // Function Engine.KismetMathLibrary.MakeRandomStream // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1d170
	struct FQualifiedFrameTime MakeQualifiedFrameTime(struct FFrameNumber Frame, struct FFrameRate FrameRate, float SubFrame); // Function Engine.KismetMathLibrary.MakeQualifiedFrameTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1d060
	float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase); // Function Engine.KismetMathLibrary.MakePulsatingValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1cf50
	struct FPlane MakePlaneFromPointAndNormal(struct FVector Point, struct FVector Normal); // Function Engine.KismetMathLibrary.MakePlaneFromPointAndNormal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1ce70
	struct FFrameRate MakeFrameRate(int32_t Numerator, int32_t Denominator); // Function Engine.KismetMathLibrary.MakeFrameRate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1cdb0
	struct FDateTime MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond); // Function Engine.KismetMathLibrary.MakeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1cbc0
	struct FLinearColor MakeColor(float R, float G, float B, float A); // Function Engine.KismetMathLibrary.MakeColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1ca60
	struct FBox2D MakeBox2D(struct FVector2D Min, struct FVector2D MAX); // Function Engine.KismetMathLibrary.MakeBox2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1c8b0
	struct FBox MakeBox(struct FVector Min, struct FVector MAX); // Function Engine.KismetMathLibrary.MakeBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1c980
	float Loge(float A); // Function Engine.KismetMathLibrary.Loge // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1c830
	float Log(float A, float Base); // Function Engine.KismetMathLibrary.Log // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1c770
	bool LinePlaneIntersection_OriginNormal(struct FVector& LineStart, struct FVector& LineEnd, struct FVector PlaneOrigin, struct FVector PlaneNormal, float& T, struct FVector& Intersection); // Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1b380
	bool LinePlaneIntersection(struct FVector& LineStart, struct FVector& LineEnd, struct FPlane& APlane, float& T, struct FVector& Intersection); // Function Engine.KismetMathLibrary.LinePlaneIntersection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1b190
	struct FLinearColor LinearColorLerpUsingHSV(struct FLinearColor A, struct FLinearColor B, float ALPHA); // Function Engine.KismetMathLibrary.LinearColorLerpUsingHSV // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1b6f0
	struct FLinearColor LinearColorLerp(struct FLinearColor A, struct FLinearColor B, float ALPHA); // Function Engine.KismetMathLibrary.LinearColorLerp // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1b5a0
	struct FLinearColor LinearColor_Yellow(); // Function Engine.KismetMathLibrary.LinearColor_Yellow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1c750
	struct FLinearColor LinearColor_White(); // Function Engine.KismetMathLibrary.LinearColor_White // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1c730
	struct FLinearColor LinearColor_Transparent(); // Function Engine.KismetMathLibrary.LinearColor_Transparent // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1c710
	struct FColor LinearColor_ToRGBE(struct FLinearColor InLinearColor); // Function Engine.KismetMathLibrary.LinearColor_ToRGBE // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1c680
	struct FLinearColor LinearColor_ToNewOpacity(struct FLinearColor InColor, float InOpacity); // Function Engine.KismetMathLibrary.LinearColor_ToNewOpacity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1c5a0
	void LinearColor_SetTemperature(struct FLinearColor& InOutColor, float InTemperature); // Function Engine.KismetMathLibrary.LinearColor_SetTemperature // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d1c4c0
	void LinearColor_SetRGBA(struct FLinearColor& InOutColor, float R, float G, float B, float A); // Function Engine.KismetMathLibrary.LinearColor_SetRGBA // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d1c2a0
	void LinearColor_SetRandomHue(struct FLinearColor& InOutColor); // Function Engine.KismetMathLibrary.LinearColor_SetRandomHue // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d1c430
	void LinearColor_SetFromSRGB(struct FLinearColor& InOutColor, struct FColor& InSRGB); // Function Engine.KismetMathLibrary.LinearColor_SetFromSRGB // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d1c1c0
	void LinearColor_SetFromPow22(struct FLinearColor& InOutColor, struct FColor& InColor); // Function Engine.KismetMathLibrary.LinearColor_SetFromPow22 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d1c0e0
	void LinearColor_SetFromHSV(struct FLinearColor& InOutColor, float H, float S, float V, float A); // Function Engine.KismetMathLibrary.LinearColor_SetFromHSV // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d1bf50
	void LinearColor_Set(struct FLinearColor& InOutColor, struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_Set // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d1be90
	struct FLinearColor LinearColor_Red(); // Function Engine.KismetMathLibrary.LinearColor_Red // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1be70
	struct FColor LinearColor_QuantizeRound(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_QuantizeRound // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1bde0
	struct FColor LinearColor_Quantize(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_Quantize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1bd50
	bool LinearColor_IsNearEqual(struct FLinearColor A, struct FLinearColor B, float Tolerance); // Function Engine.KismetMathLibrary.LinearColor_IsNearEqual // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1bc00
	struct FLinearColor LinearColor_Green(); // Function Engine.KismetMathLibrary.LinearColor_Green // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1bbe0
	struct FLinearColor LinearColor_Gray(); // Function Engine.KismetMathLibrary.LinearColor_Gray // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1bbc0
	float LinearColor_GetMin(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetMin // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1bb40
	float LinearColor_GetMax(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetMax // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1bac0
	float LinearColor_GetLuminance(struct FLinearColor InColor); // Function Engine.KismetMathLibrary.LinearColor_GetLuminance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1ba20
	float LinearColor_Distance(struct FLinearColor C1, struct FLinearColor C2); // Function Engine.KismetMathLibrary.LinearColor_Distance // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1b920
	struct FLinearColor LinearColor_Desaturated(struct FLinearColor InColor, float InDesaturation); // Function Engine.KismetMathLibrary.LinearColor_Desaturated // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1b850
	struct FLinearColor LinearColor_Blue(); // Function Engine.KismetMathLibrary.LinearColor_Blue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1b830
	struct FLinearColor LinearColor_Black(); // Function Engine.KismetMathLibrary.LinearColor_Black // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1b810
	struct FVector LessLess_VectorRotator(struct FVector A, struct FRotator B); // Function Engine.KismetMathLibrary.LessLess_VectorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1acf0
	bool LessEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1aa00
	bool LessEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.LessEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1ac30
	bool LessEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.LessEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1ab70
	bool LessEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.LessEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1aab0
	bool LessEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1aa00
	bool LessEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.LessEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1a940
	bool Less_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Less_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1aea0
	bool Less_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Less_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1b0d0
	bool Less_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Less_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1b010
	bool Less_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Less_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1af50
	bool Less_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Less_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1aea0
	bool Less_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Less_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1ade0
	float Lerp(float A, float B, float ALPHA); // Function Engine.KismetMathLibrary.Lerp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1a830
	bool IsZero2D(struct FVector2D& A); // Function Engine.KismetMathLibrary.IsZero2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1a780
	bool IsPointInBoxWithTransform(struct FVector Point, struct FTransform& BoxWorldTransform, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.IsPointInBoxWithTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1a5f0
	bool IsPointInBox(struct FVector Point, struct FVector BoxOrigin, struct FVector BoxExtent); // Function Engine.KismetMathLibrary.IsPointInBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1a4c0
	bool IsNearlyZero2D(struct FVector2D& A, float Tolerance); // Function Engine.KismetMathLibrary.IsNearlyZero2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1a3c0
	bool IsMorning(struct FDateTime A); // Function Engine.KismetMathLibrary.IsMorning // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1a310
	bool IsLeapYear(int32_t Year); // Function Engine.KismetMathLibrary.IsLeapYear // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d1a290
	bool IsAfternoon(struct FDateTime A); // Function Engine.KismetMathLibrary.IsAfternoon // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d1a1e0
	struct FTransform InvertTransform(struct FTransform& T); // Function Engine.KismetMathLibrary.InvertTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d19fd0
	struct FRotator InverseTransformRotation(struct FTransform& T, struct FRotator Rotation); // Function Engine.KismetMathLibrary.InverseTransformRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d19e90
	struct FVector InverseTransformLocation(struct FTransform& T, struct FVector Location); // Function Engine.KismetMathLibrary.InverseTransformLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d19ca0
	struct FVector InverseTransformDirection(struct FTransform& T, struct FVector Direction); // Function Engine.KismetMathLibrary.InverseTransformDirection // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d19b00
	struct FIntPoint IntPoint_Zero(); // Function Engine.KismetMathLibrary.IntPoint_Zero // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d19ad0
	struct FIntPoint IntPoint_Up(); // Function Engine.KismetMathLibrary.IntPoint_Up // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d19aa0
	struct FIntPoint IntPoint_Right(); // Function Engine.KismetMathLibrary.IntPoint_Right // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d19a80
	struct FIntPoint IntPoint_One(); // Function Engine.KismetMathLibrary.IntPoint_One // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d19a50
	struct FIntPoint IntPoint_Left(); // Function Engine.KismetMathLibrary.IntPoint_Left // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d19a20
	struct FIntPoint IntPoint_Down(); // Function Engine.KismetMathLibrary.IntPoint_Down // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d199f0
	bool InRange_IntInt(int32_t Value, int32_t Min, int32_t MAX, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d19870
	bool InRange_Int64Int64(int64_t Value, int64_t Min, int64_t MAX, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d196e0
	bool InRange_FloatFloat(float Value, float Min, float MAX, bool InclusiveMin, bool InclusiveMax); // Function Engine.KismetMathLibrary.InRange_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d19540
	float Hypotenuse(float Width, float Height); // Function Engine.KismetMathLibrary.Hypotenuse // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d19480
	struct FLinearColor HSVToRGBLinear(struct FLinearColor HSV); // Function Engine.KismetMathLibrary.HSVToRGBLinear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d19310
	void HSVToRGB_Vector(struct FLinearColor HSV, struct FLinearColor& RGB); // Function Engine.KismetMathLibrary.HSVToRGB_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d193a0
	struct FLinearColor HSVToRGB(float H, float S, float V, float A); // Function Engine.KismetMathLibrary.HSVToRGB // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d191a0
	float GridSnap_Float(float Location, float GridSize); // Function Engine.KismetMathLibrary.GridSnap_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d19070
	struct FVector GreaterGreater_VectorRotator(struct FVector A, struct FRotator B); // Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d18bd0
	bool GreaterEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d188e0
	bool GreaterEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.GreaterEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d18b10
	bool GreaterEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.GreaterEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d18a50
	bool GreaterEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d18990
	bool GreaterEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d188e0
	bool GreaterEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.GreaterEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d18820
	bool Greater_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Greater_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d18d80
	bool Greater_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Greater_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d18fb0
	bool Greater_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Greater_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d18ef0
	bool Greater_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Greater_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d18e30
	bool Greater_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Greater_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d18d80
	bool Greater_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Greater_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d18cc0
	int32_t GetYear(struct FDateTime A); // Function Engine.KismetMathLibrary.GetYear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d187a0
	void GetYawPitchFromVector(struct FVector InVec, float& Yaw, float& Pitch); // Function Engine.KismetMathLibrary.GetYawPitchFromVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d18670
	struct FVector GetVectorArrayAverage(struct TArray<struct FVector>& Vectors); // Function Engine.KismetMathLibrary.GetVectorArrayAverage // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d184b0
	struct FVector GetUpVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetUpVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d18410
	float GetTotalSeconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d18390
	float GetTotalMinutes(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d18310
	float GetTotalMilliseconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d18290
	float GetTotalHours(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d18210
	float GetTotalDays(struct FTimespan A); // Function Engine.KismetMathLibrary.GetTotalDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d18190
	struct FTimespan GetTimeOfDay(struct FDateTime A); // Function Engine.KismetMathLibrary.GetTimeOfDay // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d18110
	float GetTAU(); // Function Engine.KismetMathLibrary.GetTAU // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d180f0
	void GetSlopeDegreeAngles(struct FVector& MyRightYAxis, struct FVector& FloorNormal, struct FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle); // Function Engine.KismetMathLibrary.GetSlopeDegreeAngles // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17f10
	int32_t GetSeconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17e60
	int32_t GetSecond(struct FDateTime A); // Function Engine.KismetMathLibrary.GetSecond // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17e60
	struct FVector2D GetRotated2D(struct FVector2D A, float AngleDeg); // Function Engine.KismetMathLibrary.GetRotated2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17b60
	struct FVector GetRightVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetRightVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17ac0
	struct FVector GetReflectionVector(struct FVector Direction, struct FVector SurfaceNormal); // Function Engine.KismetMathLibrary.GetReflectionVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d179d0
	float GetPointDistanceToSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd); // Function Engine.KismetMathLibrary.GetPointDistanceToSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d178a0
	float GetPointDistanceToLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection); // Function Engine.KismetMathLibrary.GetPointDistanceToLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17770
	float GetPI(); // Function Engine.KismetMathLibrary.GetPI // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d17750
	int32_t GetMonth(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMonth // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d176d0
	int32_t GetMinutes(struct FTimespan A); // Function Engine.KismetMathLibrary.GetMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17620
	int32_t GetMinute(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMinute // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17620
	float GetMinElement(struct FVector A); // Function Engine.KismetMathLibrary.GetMinElement // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d175a0
	float GetMin2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetMin2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17520
	int32_t GetMilliseconds(struct FTimespan A); // Function Engine.KismetMathLibrary.GetMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17470
	int32_t GetMillisecond(struct FDateTime A); // Function Engine.KismetMathLibrary.GetMillisecond // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d173c0
	float GetMaxElement(struct FVector A); // Function Engine.KismetMathLibrary.GetMaxElement // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17340
	float GetMax2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d172c0
	int32_t GetHours(struct FTimespan A); // Function Engine.KismetMathLibrary.GetHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17210
	int32_t GetHour12(struct FDateTime A); // Function Engine.KismetMathLibrary.GetHour12 // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17190
	int32_t GetHour(struct FDateTime A); // Function Engine.KismetMathLibrary.GetHour // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17210
	struct FVector GetForwardVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.GetForwardVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d170f0
	struct FTimespan GetDuration(struct FTimespan A); // Function Engine.KismetMathLibrary.GetDuration // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d17070
	struct FVector GetDirectionUnitVector(struct FVector From, struct FVector To); // Function Engine.KismetMathLibrary.GetDirectionUnitVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d16ea0
	int32_t GetDays(struct FTimespan A); // Function Engine.KismetMathLibrary.GetDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d16e20
	int32_t GetDayOfYear(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDayOfYear // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d16da0
	int32_t GetDay(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDay // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d16d20
	struct FDateTime GetDate(struct FDateTime A); // Function Engine.KismetMathLibrary.GetDate // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d16c90
	void GetAzimuthAndElevation(struct FVector InDirection, struct FTransform& ReferenceFrame, float& Azimuth, float& Elevation); // Function Engine.KismetMathLibrary.GetAzimuthAndElevation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d16ab0
	void GetAxes(struct FRotator A, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.GetAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d16930
	float GetAbsMax2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetAbsMax2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d168a0
	struct FVector2D GetAbs2D(struct FVector2D A); // Function Engine.KismetMathLibrary.GetAbs2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d16810
	struct FIntVector FTruncVector(struct FVector& InVector); // Function Engine.KismetMathLibrary.FTruncVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d15b20
	int64_t FTrunc64(float A); // Function Engine.KismetMathLibrary.FTrunc64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d15a20
	int32_t FTrunc(float A); // Function Engine.KismetMathLibrary.FTrunc // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d15aa0
	struct FTimespan FromSeconds(float Seconds); // Function Engine.KismetMathLibrary.FromSeconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d16780
	struct FTimespan FromMinutes(float Minutes); // Function Engine.KismetMathLibrary.FromMinutes // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d166f0
	struct FTimespan FromMilliseconds(float Milliseconds); // Function Engine.KismetMathLibrary.FromMilliseconds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d16660
	struct FTimespan FromHours(float Hours); // Function Engine.KismetMathLibrary.FromHours // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d165d0
	struct FTimespan FromDays(float Days); // Function Engine.KismetMathLibrary.FromDays // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d16540
	float Fraction(float A); // Function Engine.KismetMathLibrary.Fraction // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d164b0
	int32_t FMod(float Dividend, float Divisor, float& Remainder); // Function Engine.KismetMathLibrary.FMod // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d15910
	float FMin(float A, float B); // Function Engine.KismetMathLibrary.FMin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d15850
	float FMax(float A, float B); // Function Engine.KismetMathLibrary.FMax // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d15790
	float FloatSpringInterp(float Current, float Target, struct FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // Function Engine.KismetMathLibrary.FloatSpringInterp // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d162a0
	float FixedTurn(float InCurrent, float InDesired, float InDeltaRate); // Function Engine.KismetMathLibrary.FixedTurn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d16190
	float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.FInterpTo_Constant // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d15640
	float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.FInterpTo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d154f0
	float FInterpEaseInOut(float A, float B, float ALPHA, float Exponent); // Function Engine.KismetMathLibrary.FInterpEaseInOut // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d153a0
	void FindNearestPointsOnLineSegments(struct FVector Segment1Start, struct FVector Segment1End, struct FVector Segment2Start, struct FVector Segment2End, struct FVector& Segment1Point, struct FVector& Segment2Point); // Function Engine.KismetMathLibrary.FindNearestPointsOnLineSegments // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d15f80
	struct FRotator FindLookAtRotation(struct FVector& Start, struct FVector& Target); // Function Engine.KismetMathLibrary.FindLookAtRotation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d15e40
	struct FVector FindClosestPointOnSegment(struct FVector Point, struct FVector SegmentStart, struct FVector SegmentEnd); // Function Engine.KismetMathLibrary.FindClosestPointOnSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d15d00
	struct FVector FindClosestPointOnLine(struct FVector Point, struct FVector LineOrigin, struct FVector LineDirection); // Function Engine.KismetMathLibrary.FindClosestPointOnLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d15bc0
	int64_t FFloor64(float A); // Function Engine.KismetMathLibrary.FFloor64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d15250
	int32_t FFloor(float A); // Function Engine.KismetMathLibrary.FFloor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d15310
	float FClamp(float Value, float Min, float MAX); // Function Engine.KismetMathLibrary.FClamp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d15140
	int64_t FCeil64(float A); // Function Engine.KismetMathLibrary.FCeil64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d14fe0
	int32_t FCeil(float A); // Function Engine.KismetMathLibrary.FCeil // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d150a0
	float exp(float A); // Function Engine.KismetMathLibrary.exp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d14f60
	bool EqualExactly_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.EqualExactly_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d14db0
	bool EqualExactly_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.EqualExactly_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d14c80
	bool EqualExactly_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d14bb0
	bool EqualEqual_VectorVector(struct FVector A, struct FVector B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d14a70
	bool EqualEqual_Vector4Vector4(struct FVector4& A, struct FVector4& B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d148e0
	bool EqualEqual_Vector2DVector2D(struct FVector2D A, struct FVector2D B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d147c0
	bool EqualEqual_TransformTransform(struct FTransform& A, struct FTransform& B); // Function Engine.KismetMathLibrary.EqualEqual_TransformTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d14640
	bool EqualEqual_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d13e50
	bool EqualEqual_RotatorRotator(struct FRotator A, struct FRotator B, float ErrorTolerance); // Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d14460
	bool EqualEqual_QuatQuat(struct FQuat& A, struct FQuat& B, float Tolerance); // Function Engine.KismetMathLibrary.EqualEqual_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d14300
	bool EqualEqual_ObjectObject(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.EqualEqual_ObjectObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d13d90
	bool EqualEqual_NameName(struct FName A, struct FName B); // Function Engine.KismetMathLibrary.EqualEqual_NameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d13d90
	bool EqualEqual_MatrixMatrix(struct FMatrix& A, struct FMatrix& B, float Tolerance); // Function Engine.KismetMathLibrary.EqualEqual_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d14170
	bool EqualEqual_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d14090
	bool EqualEqual_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.EqualEqual_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d13fd0
	bool EqualEqual_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.EqualEqual_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d13d90
	bool EqualEqual_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.EqualEqual_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d13f00
	bool EqualEqual_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d13e50
	bool EqualEqual_ClassClass(struct UObject* A, struct UObject* B); // Function Engine.KismetMathLibrary.EqualEqual_ClassClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d13d90
	bool EqualEqual_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.EqualEqual_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d13cd0
	bool EqualEqual_BoolBool(bool A, bool B); // Function Engine.KismetMathLibrary.EqualEqual_BoolBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d13c00
	bool Equal_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Equal_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d14e90
	float Ease(float A, float B, float ALPHA, enum class EEasingFunc EasingFunc, float BlendExp, int32_t Steps); // Function Engine.KismetMathLibrary.Ease // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d13a40
	struct FVector DynamicWeightedMovingAverage_FVector(struct FVector CurrentSample, struct FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d136f0
	struct FRotator DynamicWeightedMovingAverage_FRotator(struct FRotator CurrentSample, struct FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d13540
	float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Function Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d138a0
	float DotProduct2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.DotProduct2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d133b0
	float Dot_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Dot_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d13470
	struct FVector Divide_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Divide_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d13280
	struct FVector Divide_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Divide_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d13140
	struct FVector Divide_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Divide_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d13010
	struct FVector4 Divide_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Divide_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d12ee0
	struct FVector2D Divide_Vector2dVector2d(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Divide_Vector2dVector2d // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d12de0
	struct FVector2D Divide_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Divide_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d12cd0
	struct FTimespan Divide_TimespanFloat(struct FTimespan A, float Scalar); // Function Engine.KismetMathLibrary.Divide_TimespanFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d12c00
	struct FLinearColor Divide_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Divide_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d12b20
	struct FIntPoint Divide_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Divide_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d12a30
	struct FIntPoint Divide_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Divide_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d12940
	int32_t Divide_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Divide_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d12860
	int64_t Divide_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Divide_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d12780
	float Divide_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Divide_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d12600
	char Divide_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Divide_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d12530
	float DistanceSquared2D(struct FVector2D v1, struct FVector2D v2); // Function Engine.KismetMathLibrary.DistanceSquared2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d12460
	float Distance2D(struct FVector2D v1, struct FVector2D v2); // Function Engine.KismetMathLibrary.Distance2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d12390
	float DegTan(float A); // Function Engine.KismetMathLibrary.DegTan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d12280
	float DegSin(float A); // Function Engine.KismetMathLibrary.DegSin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d121f0
	float DegreesToRadians(float A); // Function Engine.KismetMathLibrary.DegreesToRadians // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d12310
	float DegCos(float A); // Function Engine.KismetMathLibrary.DegCos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d12160
	float DegAtan2(float Y, float X); // Function Engine.KismetMathLibrary.DegAtan2 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d12000
	float DegAtan(float A); // Function Engine.KismetMathLibrary.DegAtan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d120d0
	float DegAsin(float A); // Function Engine.KismetMathLibrary.DegAsin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d11f60
	float DegAcos(float A); // Function Engine.KismetMathLibrary.DegAcos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d11ec0
	int32_t DaysInYear(int32_t Year); // Function Engine.KismetMathLibrary.DaysInYear // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d11e40
	int32_t DaysInMonth(int32_t Year, int32_t Month); // Function Engine.KismetMathLibrary.DaysInMonth // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d11d60
	struct FDateTime DateTimeMinValue(); // Function Engine.KismetMathLibrary.DateTimeMinValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x34f4b00
	struct FDateTime DateTimeMaxValue(); // Function Engine.KismetMathLibrary.DateTimeMaxValue // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d11d30
	bool DateTimeFromString(struct FString DateTimeString, struct FDateTime& Result); // Function Engine.KismetMathLibrary.DateTimeFromString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d11be0
	bool DateTimeFromIsoString(struct FString IsoString, struct FDateTime& Result); // Function Engine.KismetMathLibrary.DateTimeFromIsoString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d11a90
	float CrossProduct2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.CrossProduct2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d118c0
	struct FVector Cross_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Cross_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d11980
	struct FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length); // Function Engine.KismetMathLibrary.CreateVectorFromYawPitch // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d117a0
	float Cos(float A); // Function Engine.KismetMathLibrary.Cos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d11630
	struct FTransform ConvertTransformToRelative(struct FTransform& Transform, struct FTransform& ParentTransform); // Function Engine.KismetMathLibrary.ConvertTransformToRelative // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d114a0
	struct FVector2D Conv_VectorToVector2D(struct FVector InVector); // Function Engine.KismetMathLibrary.Conv_VectorToVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d11420
	struct FTransform Conv_VectorToTransform(struct FVector InLocation); // Function Engine.KismetMathLibrary.Conv_VectorToTransform // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d11380
	struct FRotator Conv_VectorToRotator(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToRotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d112e0
	struct FQuat Conv_VectorToQuaterion(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToQuaterion // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d11250
	struct FLinearColor Conv_VectorToLinearColor(struct FVector InVec); // Function Engine.KismetMathLibrary.Conv_VectorToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d111c0
	struct FVector Conv_Vector4ToVector(struct FVector4& InVector4); // Function Engine.KismetMathLibrary.Conv_Vector4ToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d11110
	struct FRotator Conv_Vector4ToRotator(struct FVector4& InVec); // Function Engine.KismetMathLibrary.Conv_Vector4ToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d11060
	struct FQuat Conv_Vector4ToQuaterion(struct FVector4& InVec); // Function Engine.KismetMathLibrary.Conv_Vector4ToQuaterion // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d10fc0
	struct FVector Conv_Vector2DToVector(struct FVector2D InVector2D, float Z); // Function Engine.KismetMathLibrary.Conv_Vector2DToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d10ef0
	struct FIntPoint Conv_Vector2DToIntPoint(struct FVector2D InVector2D); // Function Engine.KismetMathLibrary.Conv_Vector2DToIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d10e40
	struct FMatrix Conv_TransformToMatrix(struct FTransform& Transform); // Function Engine.KismetMathLibrary.Conv_TransformToMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d10d30
	struct FVector Conv_RotatorToVector(struct FRotator InRot); // Function Engine.KismetMathLibrary.Conv_RotatorToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d10c90
	struct FTransform Conv_RotatorToTransform(struct FRotator& InRotator); // Function Engine.KismetMathLibrary.Conv_RotatorToTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d10be0
	struct FTransform Conv_MatrixToTransform(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Conv_MatrixToTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d10b30
	struct FRotator Conv_MatrixToRotator(struct FMatrix& InMatrix); // Function Engine.KismetMathLibrary.Conv_MatrixToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d10a90
	struct FVector Conv_LinearColorToVector(struct FLinearColor InLinearColor); // Function Engine.KismetMathLibrary.Conv_LinearColorToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d10a00
	struct FColor Conv_LinearColorToColor(struct FLinearColor InLinearColor, bool InUseSRGB); // Function Engine.KismetMathLibrary.Conv_LinearColorToColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d10920
	struct FVector Conv_IntVectorToVector(struct FIntVector& InIntVector); // Function Engine.KismetMathLibrary.Conv_IntVectorToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d10860
	struct FIntVector Conv_IntToIntVector(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToIntVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d107e0
	int64_t Conv_IntToInt64(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d10760
	float Conv_IntToFloat(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d106e0
	char Conv_IntToByte(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d10660
	bool Conv_IntToBool(int32_t inInt); // Function Engine.KismetMathLibrary.Conv_IntToBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d100a0
	struct FVector2D Conv_IntPointToVector2D(struct FIntPoint InIntPoint); // Function Engine.KismetMathLibrary.Conv_IntPointToVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d105d0
	int32_t Conv_Int64ToInt(int64_t inInt); // Function Engine.KismetMathLibrary.Conv_Int64ToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d10550
	char Conv_Int64ToByte(int64_t inInt); // Function Engine.KismetMathLibrary.Conv_Int64ToByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d104d0
	struct FVector Conv_FloatToVector(float InFloat); // Function Engine.KismetMathLibrary.Conv_FloatToVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d10440
	struct FLinearColor Conv_FloatToLinearColor(float InFloat); // Function Engine.KismetMathLibrary.Conv_FloatToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d103b0
	struct FLinearColor Conv_ColorToLinearColor(struct FColor InColor); // Function Engine.KismetMathLibrary.Conv_ColorToLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d10320
	int32_t Conv_ByteToInt(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d102b0
	float Conv_ByteToFloat(char InByte); // Function Engine.KismetMathLibrary.Conv_ByteToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d10230
	int32_t Conv_BoolToInt(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d101b0
	float Conv_BoolToFloat(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d10120
	char Conv_BoolToByte(bool InBool); // Function Engine.KismetMathLibrary.Conv_BoolToByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d100a0
	struct FTransform ComposeTransforms(struct FTransform& A, struct FTransform& B); // Function Engine.KismetMathLibrary.ComposeTransforms // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0ff10
	struct FRotator ComposeRotators(struct FRotator A, struct FRotator B); // Function Engine.KismetMathLibrary.ComposeRotators // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0fe20
	bool ClassIsChildOf(struct UObject* TestClass, struct UObject* ParentClass); // Function Engine.KismetMathLibrary.ClassIsChildOf // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0fd60
	struct FVector ClampVectorSize(struct FVector A, float Min, float MAX); // Function Engine.KismetMathLibrary.ClampVectorSize // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0fba0
	int64_t ClampInt64(int64_t Value, int64_t Min, int64_t MAX); // Function Engine.KismetMathLibrary.ClampInt64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0faa0
	float ClampAxis(float Angle); // Function Engine.KismetMathLibrary.ClampAxis // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0fa20
	struct FVector2D ClampAxes2D(struct FVector2D A, float MinAxisVal, float MaxAxisVal); // Function Engine.KismetMathLibrary.ClampAxes2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0f900
	float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees); // Function Engine.KismetMathLibrary.ClampAngle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0f7f0
	int32_t Clamp(int32_t Value, int32_t Min, int32_t MAX); // Function Engine.KismetMathLibrary.Clamp // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0f700
	struct FLinearColor CInterpTo(struct FLinearColor Current, struct FLinearColor Target, float DeltaTime, float InterpSpeed); // Function Engine.KismetMathLibrary.CInterpTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0f580
	void BreakVector4(struct FVector4& InVec, float& X, float& Y, float& Z, float& W); // Function Engine.KismetMathLibrary.BreakVector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0f220
	void BreakVector2D(struct FVector2D InVec, float& X, float& Y); // Function Engine.KismetMathLibrary.BreakVector2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0f100
	void BreakVector(struct FVector InVec, float& X, float& Y, float& Z); // Function Engine.KismetMathLibrary.BreakVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0f410
	void BreakTransform(struct FTransform& InTransform, struct FVector& Location, struct FRotator& Rotation, struct FVector& Scale); // Function Engine.KismetMathLibrary.BreakTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0eee0
	void BreakTimespan2(struct FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano); // Function Engine.KismetMathLibrary.BreakTimespan2 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0ea80
	void BreakTimespan(struct FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& Milliseconds); // Function Engine.KismetMathLibrary.BreakTimespan // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0ecb0
	void BreakRotIntoAxes(struct FRotator& InRot, struct FVector& X, struct FVector& Y, struct FVector& Z); // Function Engine.KismetMathLibrary.BreakRotIntoAxes // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0e790
	void BreakRotator(struct FRotator InRot, float& Roll, float& Pitch, float& Yaw); // Function Engine.KismetMathLibrary.BreakRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0e910
	void BreakRandomStream(struct FRandomStream& InRandomStream, int32_t& InitialSeed); // Function Engine.KismetMathLibrary.BreakRandomStream // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0e6b0
	void BreakQualifiedFrameTime(struct FQualifiedFrameTime& InFrameTime, struct FFrameNumber& Frame, struct FFrameRate& FrameRate, float& SubFrame); // Function Engine.KismetMathLibrary.BreakQualifiedFrameTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0e510
	void BreakFrameRate(struct FFrameRate& InFrameRate, int32_t& Numerator, int32_t& Denominator); // Function Engine.KismetMathLibrary.BreakFrameRate // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d0e3e0
	void BreakDateTime(struct FDateTime InDateTime, int32_t& Year, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond); // Function Engine.KismetMathLibrary.BreakDateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0e130
	void BreakColor(struct FLinearColor InColor, float& R, float& G, float& B, float& A); // Function Engine.KismetMathLibrary.BreakColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0df50
	bool BooleanXOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanXOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0de90
	bool BooleanOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0ddc0
	bool BooleanNOR(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanNOR // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0dcf0
	bool BooleanNAND(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanNAND // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0dc20
	bool BooleanAND(bool A, bool B); // Function Engine.KismetMathLibrary.BooleanAND // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0db50
	char BMin(char A, char B); // Function Engine.KismetMathLibrary.BMin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0da90
	char BMax(char A, char B); // Function Engine.KismetMathLibrary.BMax // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0d9d0
	float Atan2(float Y, float X); // Function Engine.KismetMathLibrary.Atan2 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0d890
	float Atan(float A); // Function Engine.KismetMathLibrary.Atan // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0d950
	float Asin(float A); // Function Engine.KismetMathLibrary.Asin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0d7f0
	int32_t And_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.And_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0d730
	int64_t And_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.And_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0d670
	struct FVector Add_VectorVector(struct FVector A, struct FVector B); // Function Engine.KismetMathLibrary.Add_VectorVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0d5a0
	struct FVector Add_VectorInt(struct FVector A, int32_t B); // Function Engine.KismetMathLibrary.Add_VectorInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0d4c0
	struct FVector Add_VectorFloat(struct FVector A, float B); // Function Engine.KismetMathLibrary.Add_VectorFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0d3e0
	struct FVector4 Add_Vector4Vector4(struct FVector4& A, struct FVector4& B); // Function Engine.KismetMathLibrary.Add_Vector4Vector4 // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0d2b0
	struct FVector2D Add_Vector2DVector2D(struct FVector2D A, struct FVector2D B); // Function Engine.KismetMathLibrary.Add_Vector2DVector2D // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0d1f0
	struct FVector2D Add_Vector2DFloat(struct FVector2D A, float B); // Function Engine.KismetMathLibrary.Add_Vector2DFloat // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0d120
	struct FTimespan Add_TimespanTimespan(struct FTimespan A, struct FTimespan B); // Function Engine.KismetMathLibrary.Add_TimespanTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0c910
	struct FQuat Add_QuatQuat(struct FQuat& A, struct FQuat& B); // Function Engine.KismetMathLibrary.Add_QuatQuat // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0d010
	struct FMatrix Add_MatrixMatrix(struct FMatrix& A, struct FMatrix& B); // Function Engine.KismetMathLibrary.Add_MatrixMatrix // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0ce80
	struct FLinearColor Add_LinearColorLinearColor(struct FLinearColor A, struct FLinearColor B); // Function Engine.KismetMathLibrary.Add_LinearColorLinearColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0cda0
	struct FIntPoint Add_IntPointIntPoint(struct FIntPoint A, struct FIntPoint B); // Function Engine.KismetMathLibrary.Add_IntPointIntPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0ccd0
	struct FIntPoint Add_IntPointInt(struct FIntPoint A, int32_t B); // Function Engine.KismetMathLibrary.Add_IntPointInt // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0cc00
	int32_t Add_IntInt(int32_t A, int32_t B); // Function Engine.KismetMathLibrary.Add_IntInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0cb40
	int64_t Add_Int64Int64(int64_t A, int64_t B); // Function Engine.KismetMathLibrary.Add_Int64Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0ca80
	float Add_FloatFloat(float A, float B); // Function Engine.KismetMathLibrary.Add_FloatFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0c9c0
	struct FDateTime Add_DateTimeTimespan(struct FDateTime A, struct FTimespan B); // Function Engine.KismetMathLibrary.Add_DateTimeTimespan // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0c910
	struct FDateTime Add_DateTimeDateTime(struct FDateTime A, struct FDateTime B); // Function Engine.KismetMathLibrary.Add_DateTimeDateTime // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d0c910
	char Add_ByteByte(char A, char B); // Function Engine.KismetMathLibrary.Add_ByteByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0c860
	float Acos(float A); // Function Engine.KismetMathLibrary.Acos // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0c7c0
	int64_t Abs_Int64(int64_t A); // Function Engine.KismetMathLibrary.Abs_Int64 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0c6b0
	int32_t Abs_Int(int32_t A); // Function Engine.KismetMathLibrary.Abs_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0c740
	float Abs(float A); // Function Engine.KismetMathLibrary.Abs // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d0c630
};

// Class Engine.KismetNodeHelperLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetNodeHelperLibrary : UBlueprintFunctionLibrary {

	void MarkBit(int32_t& Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.MarkBit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d393f0
	bool HasUnmarkedBit(int32_t Data, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d38840
	bool HasMarkedBit(int32_t Data, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.HasMarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d38780
	char GetValidValue(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetValidValue // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d386c0
	int32_t GetUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits, bool bRandom); // Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d38590
	int32_t GetRandomUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d38340
	int32_t GetFirstUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d38250
	char GetEnumeratorValueFromIndex(struct UEnum* Enum, char EnumeratorIndex); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d38190
	struct FString GetEnumeratorUserFriendlyName(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d38080
	struct FName GetEnumeratorName(struct UEnum* Enum, char EnumeratorValue); // Function Engine.KismetNodeHelperLibrary.GetEnumeratorName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d37fc0
	void ClearBit(int32_t& Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.ClearBit // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d35b60
	void ClearAllBits(int32_t& Data); // Function Engine.KismetNodeHelperLibrary.ClearAllBits // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x106eec0
	bool BitIsMarked(int32_t Data, int32_t Index); // Function Engine.KismetNodeHelperLibrary.BitIsMarked // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d34450
};

// Class Engine.KismetRenderingLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetRenderingLibrary : UBlueprintFunctionLibrary {

	void SetCastInsetShadowForAllAttachments(struct UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup); // Function Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x3d3a860
	struct UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(struct UTextureRenderTarget2D* RenderTarget, struct FString Name, enum class TextureCompressionSettings CompressionSettings, enum class TextureMipGenSettings MipSettings); // Function Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x3d39f20
	void ReleaseRenderTarget2D(struct UTextureRenderTarget2D* TextureRenderTarget); // Function Engine.KismetRenderingLibrary.ReleaseRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x3d39eb0
	struct FColor ReadRenderTargetUV(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // Function Engine.KismetRenderingLibrary.ReadRenderTargetUV // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d39d70
	struct FLinearColor ReadRenderTargetRawUV(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawUV // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d39c10
	struct FLinearColor ReadRenderTargetRawPixel(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // Function Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d39ac0
	struct FColor ReadRenderTargetPixel(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // Function Engine.KismetRenderingLibrary.ReadRenderTargetPixel // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d39980
	struct FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32_t Bone0, char Weight0, int32_t Bone1, char Weight1, int32_t Bone2, char Weight2, int32_t Bone3, char Weight3); // Function Engine.KismetRenderingLibrary.MakeSkinWeightInfo // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d39190
	struct UTexture2D* ImportFileAsTexture2D(struct UObject* WorldContextObject, struct FString Filename); // Function Engine.KismetRenderingLibrary.ImportFileAsTexture2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x3d389f0
	struct UTexture2D* ImportBufferAsTexture2D(struct UObject* WorldContextObject, struct TArray<char>& Buffer); // Function Engine.KismetRenderingLibrary.ImportBufferAsTexture2D // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d38900
	void ExportTexture2D(struct UObject* WorldContextObject, struct UTexture2D* Texture, struct FString FilePath, struct FString Filename); // Function Engine.KismetRenderingLibrary.ExportTexture2D // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x3d37ac0
	void ExportRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct FString FilePath, struct FString Filename); // Function Engine.KismetRenderingLibrary.ExportRenderTarget // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x3d37950
	void EndDrawCanvasToRenderTarget(struct UObject* WorldContextObject, struct FDrawToRenderTargetContext& Context); // Function Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d37640
	void DrawMaterialToRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct UMaterialInterface* Material); // Function Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x3d37550
	struct UTextureRenderTarget2D* CreateRenderTarget2D(struct UObject* WorldContextObject, int32_t Width, int32_t Height, enum class ETextureRenderTargetFormat Format, struct FLinearColor ClearColor, bool bAutoGenerateMipMaps); // Function Engine.KismetRenderingLibrary.CreateRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d37270
	void ConvertRenderTargetToTexture2DEditorOnly(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* RenderTarget, struct UTexture2D* Texture); // Function Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x3d37180
	void ClearRenderTarget2D(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct FLinearColor ClearColor); // Function Engine.KismetRenderingLibrary.ClearRenderTarget2D // (Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d35c30
	void BreakSkinWeightInfo(struct FSkelMeshSkinWeightInfo InWeight, int32_t& Bone0, char& Weight0, int32_t& Bone1, char& Weight1, int32_t& Bone2, char& Weight2, int32_t& Bone3, char& Weight3); // Function Engine.KismetRenderingLibrary.BreakSkinWeightInfo // (Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d34510
	void BeginDrawCanvasToRenderTarget(struct UObject* WorldContextObject, struct UTextureRenderTarget2D* TextureRenderTarget, struct UCanvas*& Canvas, struct FVector2D& Size, struct FDrawToRenderTargetContext& Context); // Function Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget // (Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d34290
};

// Class Engine.KismetStringLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetStringLibrary : UBlueprintFunctionLibrary {

	struct FString TrimTrailing(struct FString SourceString); // Function Engine.KismetStringLibrary.TrimTrailing // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d3b070
	struct FString Trim(struct FString SourceString); // Function Engine.KismetStringLibrary.Trim // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d3af90
	struct FString ToUpper(struct FString SourceString); // Function Engine.KismetStringLibrary.ToUpper // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d3aeb0
	struct FString ToLower(struct FString SourceString); // Function Engine.KismetStringLibrary.ToLower // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d3add0
	struct FString TimeSecondsToString(float InSeconds); // Function Engine.KismetStringLibrary.TimeSecondsToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d3ad00
	bool StartsWith(struct FString SourceString, struct FString InPrefix, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.StartsWith // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d3abc0
	bool Split(struct FString SourceString, struct FString InStr, struct FString& LeftS, struct FString& RightS, enum class ESearchCase SearchCase, enum class ESearchDir SearchDir); // Function Engine.KismetStringLibrary.Split // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d3a970
	struct FString RightPad(struct FString SourceString, int32_t ChCount); // Function Engine.KismetStringLibrary.RightPad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d3a740
	struct FString RightChop(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.RightChop // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d3a620
	struct FString Right(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.Right // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d3a500
	struct FString Reverse(struct FString SourceString); // Function Engine.KismetStringLibrary.Reverse // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d3a420
	int32_t ReplaceInline(struct FString& SourceString, struct FString SearchText, struct FString ReplacementText, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.ReplaceInline // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d3a280
	struct FString Replace(struct FString SourceString, struct FString From, struct FString To, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.Replace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d3a0b0
	struct TArray<struct FString> ParseIntoArray(struct FString SourceString, struct FString Delimiter, bool CullEmptyStrings); // Function Engine.KismetStringLibrary.ParseIntoArray // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d39800
	bool NotEqual_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.NotEqual_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d39600
	bool NotEqual_StriStri(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.NotEqual_StriStri // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d39700
	struct FString Mid(struct FString SourceString, int32_t Start, int32_t Count); // Function Engine.KismetStringLibrary.Mid // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d38430
	bool MatchesWildcard(struct FString SourceString, struct FString Wildcard, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.MatchesWildcard // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d394c0
	int32_t Len(struct FString S); // Function Engine.KismetStringLibrary.Len // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d390f0
	struct FString LeftPad(struct FString SourceString, int32_t ChCount); // Function Engine.KismetStringLibrary.LeftPad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d38fd0
	struct FString LeftChop(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.LeftChop // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d38eb0
	struct FString Left(struct FString SourceString, int32_t Count); // Function Engine.KismetStringLibrary.Left // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d38d90
	struct FString JoinStringArray(struct TArray<struct FString>& SourceArray, struct FString Separator); // Function Engine.KismetStringLibrary.JoinStringArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d38c10
	bool IsNumeric(struct FString SourceString); // Function Engine.KismetStringLibrary.IsNumeric // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d38b70
	bool IsEmpty(struct FString inString); // Function Engine.KismetStringLibrary.IsEmpty // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d38ad0
	struct FString GetSubstring(struct FString SourceString, int32_t StartIndex, int32_t Length); // Function Engine.KismetStringLibrary.GetSubstring // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d38430
	int32_t GetCharacterAsNumber(struct FString SourceString, int32_t Index); // Function Engine.KismetStringLibrary.GetCharacterAsNumber // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d37ee0
	struct TArray<struct FString> GetCharacterArrayFromString(struct FString SourceString); // Function Engine.KismetStringLibrary.GetCharacterArrayFromString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d37df0
	int32_t FindSubstring(struct FString SearchIn, struct FString Substring, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition); // Function Engine.KismetStringLibrary.FindSubstring // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d37c30
	bool EqualEqual_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.EqualEqual_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d37850
	bool EqualEqual_StriStri(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.EqualEqual_StriStri // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11f2a90
	bool EndsWith(struct FString SourceString, struct FString InSuffix, enum class ESearchCase SearchCase); // Function Engine.KismetStringLibrary.EndsWith // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d37710
	int32_t CullArray(struct FString SourceString, struct TArray<struct FString>& inArray); // Function Engine.KismetStringLibrary.CullArray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d37420
	struct FString Conv_VectorToString(struct FVector InVec); // Function Engine.KismetStringLibrary.Conv_VectorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d370b0
	struct FString Conv_Vector2dToString(struct FVector2D InVec); // Function Engine.KismetStringLibrary.Conv_Vector2dToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d36ff0
	struct FString Conv_TransformToString(struct FTransform& InTrans); // Function Engine.KismetStringLibrary.Conv_TransformToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d36ed0
	void Conv_StringToVector2D(struct FString inString, struct FVector2D& OutConvertedVector2D, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToVector2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d36c50
	void Conv_StringToVector(struct FString inString, struct FVector& OutConvertedVector, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d36d90
	void Conv_StringToRotator(struct FString inString, struct FRotator& OutConvertedRotator, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToRotator // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d36b10
	struct FName Conv_StringToName(struct FString inString); // Function Engine.KismetStringLibrary.Conv_StringToName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d36a60
	int32_t Conv_StringToInt(struct FString inString); // Function Engine.KismetStringLibrary.Conv_StringToInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d369c0
	float Conv_StringToFloat(struct FString inString); // Function Engine.KismetStringLibrary.Conv_StringToFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d36920
	void Conv_StringToColor(struct FString inString, struct FLinearColor& OutConvertedColor, bool& OutIsValid); // Function Engine.KismetStringLibrary.Conv_StringToColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d367e0
	struct FString Conv_RotatorToString(struct FRotator InRot); // Function Engine.KismetStringLibrary.Conv_RotatorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d36710
	struct FString Conv_ObjectToString(struct UObject* InObj); // Function Engine.KismetStringLibrary.Conv_ObjectToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d36640
	struct FString Conv_NameToString(struct FName InName); // Function Engine.KismetStringLibrary.Conv_NameToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x344e660
	struct FString Conv_MatrixToString(struct FMatrix& InMatrix); // Function Engine.KismetStringLibrary.Conv_MatrixToString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d36570
	struct FString Conv_IntVectorToString(struct FIntVector InIntVec); // Function Engine.KismetStringLibrary.Conv_IntVectorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d364a0
	struct FString Conv_IntToString(int32_t inInt); // Function Engine.KismetStringLibrary.Conv_IntToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d363e0
	struct FString Conv_IntPointToString(struct FIntPoint InIntPoint); // Function Engine.KismetStringLibrary.Conv_IntPointToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d36320
	struct FString Conv_FloatToString(float InFloat); // Function Engine.KismetStringLibrary.Conv_FloatToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d36250
	struct FString Conv_ColorToString(struct FLinearColor InColor); // Function Engine.KismetStringLibrary.Conv_ColorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d36180
	struct FString Conv_ByteToString(char InByte); // Function Engine.KismetStringLibrary.Conv_ByteToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d360c0
	struct FString Conv_BoolToString(bool InBool); // Function Engine.KismetStringLibrary.Conv_BoolToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d35ff0
	bool Contains(struct FString SearchIn, struct FString Substring, bool bUseCase, bool bSearchFromEnd); // Function Engine.KismetStringLibrary.Contains // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d35e70
	struct FString Concat_StrStr(struct FString A, struct FString B); // Function Engine.KismetStringLibrary.Concat_StrStr // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d35d30
	struct FString BuildString_Vector2d(struct FString AppendTo, struct FString Prefix, struct FVector2D InVector2D, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Vector2d // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d357a0
	struct FString BuildString_Vector(struct FString AppendTo, struct FString Prefix, struct FVector InVector, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Vector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d35970
	struct FString BuildString_Rotator(struct FString AppendTo, struct FString Prefix, struct FRotator InRot, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Rotator // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d355b0
	struct FString BuildString_Object(struct FString AppendTo, struct FString Prefix, struct UObject* InObj, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Object // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d353d0
	struct FString BuildString_Name(struct FString AppendTo, struct FString Prefix, struct FName InName, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Name // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d351f0
	struct FString BuildString_IntVector(struct FString AppendTo, struct FString Prefix, struct FIntVector InIntVector, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_IntVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d35000
	struct FString BuildString_Int(struct FString AppendTo, struct FString Prefix, int32_t inInt, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Int // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d34e30
	struct FString BuildString_Float(struct FString AppendTo, struct FString Prefix, float InFloat, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d34c50
	struct FString BuildString_Color(struct FString AppendTo, struct FString Prefix, struct FLinearColor InColor, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Color // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d34a70
	struct FString BuildString_Bool(struct FString AppendTo, struct FString Prefix, bool InBool, struct FString Suffix); // Function Engine.KismetStringLibrary.BuildString_Bool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d34890
};

// Class Engine.KismetStringTableLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetStringTableLibrary : UBlueprintFunctionLibrary {

	bool IsRegisteredTableId(struct FName TableID); // Function Engine.KismetStringTableLibrary.IsRegisteredTableId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48b60
	bool IsRegisteredTableEntry(struct FName TableID, struct FString Key); // Function Engine.KismetStringTableLibrary.IsRegisteredTableEntry // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48a80
	struct FString GetTableNamespace(struct FName TableID); // Function Engine.KismetStringTableLibrary.GetTableNamespace // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48730
	struct FString GetTableEntrySourceString(struct FName TableID, struct FString Key); // Function Engine.KismetStringTableLibrary.GetTableEntrySourceString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48610
	struct FString GetTableEntryMetaData(struct FName TableID, struct FString Key, struct FName MetaDataId); // Function Engine.KismetStringTableLibrary.GetTableEntryMetaData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d484b0
	struct TArray<struct FName> GetRegisteredStringTables(); // Function Engine.KismetStringTableLibrary.GetRegisteredStringTables // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d481a0
	struct TArray<struct FName> GetMetaDataIdsFromStringTableEntry(struct FName TableID, struct FString Key); // Function Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d47520
	struct TArray<struct FString> GetKeysFromStringTable(struct FName TableID); // Function Engine.KismetStringTableLibrary.GetKeysFromStringTable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d473d0
};

// Class Engine.KismetSystemLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetSystemLibrary : UBlueprintFunctionLibrary {

	void UnregisterForRemoteNotifications(); // Function Engine.KismetSystemLibrary.UnregisterForRemoteNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4da30
	void UnloadPrimaryAssetList(struct TArray<struct FPrimaryAssetId>& PrimaryAssetIdList); // Function Engine.KismetSystemLibrary.UnloadPrimaryAssetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d512d0
	void UnloadPrimaryAsset(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.UnloadPrimaryAsset // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d51250
	void TransactObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.TransactObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d43e80
	void StackTrace(); // Function Engine.KismetSystemLibrary.StackTrace // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d51230
	bool SphereTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d50db0
	bool SphereTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d50950
	bool SphereTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d504f0
	bool SphereTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d500a0
	bool SphereTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d4fc80
	bool SphereTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.SphereTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d4f860
	bool SphereOverlapComponents(struct UObject* WorldContextObject, struct FVector SpherePos, float SphereRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.SphereOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d4f5e0
	bool SphereOverlapActors(struct UObject* WorldContextObject, struct FVector SpherePos, float SphereRadius, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.SphereOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d4f360
	void SnapshotObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.SnapshotObject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d43e80
	void ShowPlatformSpecificLeaderboardScreen(struct FString CategoryName); // Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4f2d0
	void ShowPlatformSpecificAchievementsScreen(struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4f260
	void ShowInterstitialAd(); // Function Engine.KismetSystemLibrary.ShowInterstitialAd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4f240
	void ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen); // Function Engine.KismetSystemLibrary.ShowAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4f190
	void SetWindowTitle(struct FText& Title); // Function Engine.KismetSystemLibrary.SetWindowTitle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d4f0d0
	void SetVolumeButtonsHandledBySystem(bool bEnabled); // Function Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d434f0
	void SetVectorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FVector& Value); // Function Engine.KismetSystemLibrary.SetVectorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d4efd0
	void SetUserActivity(struct FUserActivity& UserActivity); // Function Engine.KismetSystemLibrary.SetUserActivity // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d4ef30
	void SetTransformPropertyByName(struct UObject* Object, struct FName PropertyName, struct FTransform& Value); // Function Engine.KismetSystemLibrary.SetTransformPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d4ede0
	void SetTextPropertyByName(struct UObject* Object, struct FName PropertyName, struct FText& Value); // Function Engine.KismetSystemLibrary.SetTextPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d4eca0
	void SetSuppressViewportTransitionMessage(struct UObject* WorldContextObject, bool bState); // Function Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4ebe0
	void SetStructurePropertyByName(struct UObject* Object, struct FName PropertyName, struct FGenericStruct& Value); // Function Engine.KismetSystemLibrary.SetStructurePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d4de50
	void SetStringPropertyByName(struct UObject* Object, struct FName PropertyName, struct FString Value); // Function Engine.KismetSystemLibrary.SetStringPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4ead0
	void SetSoftObjectPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSoftObjectPtr<UObject>& Value); // Function Engine.KismetSystemLibrary.SetSoftObjectPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d4e990
	void SetSoftClassPropertyByName(struct UObject* Object, struct FName PropertyName, struct TSoftClassPtr<UObject>& Value); // Function Engine.KismetSystemLibrary.SetSoftClassPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d4e850
	void SetRotatorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FRotator& Value); // Function Engine.KismetSystemLibrary.SetRotatorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d4e750
	void SetObjectPropertyByName(struct UObject* Object, struct FName PropertyName, struct UObject* Value); // Function Engine.KismetSystemLibrary.SetObjectPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4e660
	void SetNamePropertyByName(struct UObject* Object, struct FName PropertyName, struct FName& Value); // Function Engine.KismetSystemLibrary.SetNamePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d4e560
	void SetLinearColorPropertyByName(struct UObject* Object, struct FName PropertyName, struct FLinearColor& Value); // Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d4e460
	void SetIntPropertyByName(struct UObject* Object, struct FName PropertyName, int32_t Value); // Function Engine.KismetSystemLibrary.SetIntPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4e260
	void SetInterfacePropertyByName(struct UObject* Object, struct FName PropertyName, struct TScriptInterface<IInterface>& Value); // Function Engine.KismetSystemLibrary.SetInterfacePropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d4e350
	void SetInt64PropertyByName(struct UObject* Object, struct FName PropertyName, int64_t Value); // Function Engine.KismetSystemLibrary.SetInt64PropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4e170
	void SetGamepadsBlockDeviceFeedback(bool bBlock); // Function Engine.KismetSystemLibrary.SetGamepadsBlockDeviceFeedback // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d434f0
	void SetFloatPropertyByName(struct UObject* Object, struct FName PropertyName, float Value); // Function Engine.KismetSystemLibrary.SetFloatPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4e070
	void SetFieldPathPropertyByName(struct UObject* Object, struct FName PropertyName, struct TFieldPath<FField>& Value); // Function Engine.KismetSystemLibrary.SetFieldPathPropertyByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d4df40
	void SetCollisionProfileNameProperty(struct UObject* Object, struct FName PropertyName, struct FCollisionProfileName& Value); // Function Engine.KismetSystemLibrary.SetCollisionProfileNameProperty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d4de50
	void SetClassPropertyByName(struct UObject* Object, struct FName PropertyName, struct UObject* Value); // Function Engine.KismetSystemLibrary.SetClassPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4dd60
	void SetBytePropertyByName(struct UObject* Object, struct FName PropertyName, char Value); // Function Engine.KismetSystemLibrary.SetBytePropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4dc70
	void SetBoolPropertyByName(struct UObject* Object, struct FName PropertyName, bool Value); // Function Engine.KismetSystemLibrary.SetBoolPropertyByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4db70
	void RetriggerableDelay(struct UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.RetriggerableDelay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4da50
	void ResetGamepadAssignmentToController(int32_t ControllerId); // Function Engine.KismetSystemLibrary.ResetGamepadAssignmentToController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x185d4a0
	void ResetGamepadAssignments(); // Function Engine.KismetSystemLibrary.ResetGamepadAssignments // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x124de00
	void RegisterForRemoteNotifications(); // Function Engine.KismetSystemLibrary.RegisterForRemoteNotifications // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4da30
	void QuitGame(struct UObject* WorldContextObject, struct APlayerController* SpecificPlayer, enum class EQuitPreference QuitPreference, bool bIgnorePlatformRestrictions); // Function Engine.KismetSystemLibrary.QuitGame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4d8f0
	void PrintWarning(struct FString inString); // Function Engine.KismetSystemLibrary.PrintWarning // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x1077c60
	void PrintText(struct UObject* WorldContextObject, struct FText InText, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration); // Function Engine.KismetSystemLibrary.PrintText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d4d6b0
	void PrintString(struct UObject* WorldContextObject, struct FString inString, bool bPrintToScreen, bool bPrintToLog, struct FLinearColor TextColor, float Duration); // Function Engine.KismetSystemLibrary.PrintString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d4d4c0
	void OnAssetLoaded__DelegateSignature(struct UObject* Loaded); // DelegateFunction Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature // (Public|Delegate) // @ game+0x23a3b60
	void OnAssetClassLoaded__DelegateSignature(struct UObject* Loaded); // DelegateFunction Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature // (Public|Delegate) // @ game+0x23a3b60
	bool NotEqual_SoftObjectReference(struct TSoftObjectPtr<UObject>& A, struct TSoftObjectPtr<UObject>& B); // Function Engine.KismetSystemLibrary.NotEqual_SoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d4d370
	bool NotEqual_SoftClassReference(struct TSoftClassPtr<UObject>& A, struct TSoftClassPtr<UObject>& B); // Function Engine.KismetSystemLibrary.NotEqual_SoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d4d370
	bool NotEqual_PrimaryAssetType(struct FPrimaryAssetType A, struct FPrimaryAssetType B); // Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x344fa00
	bool NotEqual_PrimaryAssetId(struct FPrimaryAssetId A, struct FPrimaryAssetId B); // Function Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d4d290
	struct FString NormalizeFilename(struct FString InFilename); // Function Engine.KismetSystemLibrary.NormalizeFilename // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d4d1b0
	void MoveComponentTo(struct USceneComponent* Component, struct FVector TargetRelativeLocation, struct FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, enum class EMoveComponentAction MoveAction, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.MoveComponentTo // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d4cef0
	struct FSoftObjectPath MakeSoftObjectPath(struct FString PathString); // Function Engine.KismetSystemLibrary.MakeSoftObjectPath // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d4ce00
	struct FSoftClassPath MakeSoftClassPath(struct FString PathString); // Function Engine.KismetSystemLibrary.MakeSoftClassPath // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d4cd40
	struct FText MakeLiteralText(struct FText Value); // Function Engine.KismetSystemLibrary.MakeLiteralText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d4cbb0
	struct FString MakeLiteralString(struct FString Value); // Function Engine.KismetSystemLibrary.MakeLiteralString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d4ca60
	struct FName MakeLiteralName(struct FName Value); // Function Engine.KismetSystemLibrary.MakeLiteralName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d4c9e0
	int32_t MakeLiteralInt(int32_t Value); // Function Engine.KismetSystemLibrary.MakeLiteralInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x176f3c0
	float MakeLiteralFloat(float Value); // Function Engine.KismetSystemLibrary.MakeLiteralFloat // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d4c960
	char MakeLiteralByte(char Value); // Function Engine.KismetSystemLibrary.MakeLiteralByte // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d4c8f0
	bool MakeLiteralBool(bool Value); // Function Engine.KismetSystemLibrary.MakeLiteralBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d100a0
	void LoadInterstitialAd(int32_t AdIdIndex); // Function Engine.KismetSystemLibrary.LoadInterstitialAd // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4c880
	struct UObject* LoadClassAsset_Blocking(struct TSoftClassPtr<UObject> AssetClass); // Function Engine.KismetSystemLibrary.LoadClassAsset_Blocking // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4c760
	void LoadAssetClass(struct UObject* WorldContextObject, struct TSoftClassPtr<UObject> AssetClass, struct FDelegate OnLoaded, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.LoadAssetClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4c440
	struct UObject* LoadAsset_Blocking(struct TSoftObjectPtr<UObject> Asset); // Function Engine.KismetSystemLibrary.LoadAsset_Blocking // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4c640
	void LoadAsset(struct UObject* WorldContextObject, struct TSoftObjectPtr<UObject> Asset, struct FDelegate OnLoaded, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.LoadAsset // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4c240
	bool LineTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d4be00
	bool LineTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d4b9e0
	bool LineTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d4b5c0
	bool LineTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d4b1c0
	bool LineTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d4adf0
	bool LineTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.LineTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d4aa20
	void LaunchURL(struct FString URL); // Function Engine.KismetSystemLibrary.LaunchURL // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4a990
	void K2_UnPauseTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_UnPauseTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4a8e0
	void K2_UnPauseTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4a850
	void K2_UnPauseTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_UnPauseTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4a720
	bool K2_TimerExistsHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_TimerExistsHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d4a660
	bool K2_TimerExistsDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_TimerExistsDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d4a5c0
	bool K2_TimerExists(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_TimerExists // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d4a490
	struct FTimerHandle K2_SetTimerDelegate(struct FDelegate Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // Function Engine.KismetSystemLibrary.K2_SetTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4a300
	struct FTimerHandle K2_SetTimer(struct UObject* Object, struct FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // Function Engine.KismetSystemLibrary.K2_SetTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4a0c0
	void K2_PauseTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_PauseTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d4a010
	void K2_PauseTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_PauseTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d49f80
	void K2_PauseTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_PauseTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d49e50
	bool K2_IsValidTimerHandle(struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsValidTimerHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d49dd0
	bool K2_IsTimerPausedHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsTimerPausedHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d49d10
	bool K2_IsTimerPausedDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d49c70
	bool K2_IsTimerPaused(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_IsTimerPaused // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d49b40
	bool K2_IsTimerActiveHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_IsTimerActiveHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d49a80
	bool K2_IsTimerActiveDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d499e0
	bool K2_IsTimerActive(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_IsTimerActive // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d498b0
	struct FTimerHandle K2_InvalidateTimerHandle(struct FTimerHandle& Handle); // Function Engine.KismetSystemLibrary.K2_InvalidateTimerHandle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d49810
	float K2_GetTimerRemainingTimeHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d49750
	float K2_GetTimerRemainingTimeDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d496b0
	float K2_GetTimerRemainingTime(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d49580
	float K2_GetTimerElapsedTimeHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d494c0
	float K2_GetTimerElapsedTimeDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d49420
	float K2_GetTimerElapsedTime(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d492f0
	void K2_ClearTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle Handle); // Function Engine.KismetSystemLibrary.K2_ClearTimerHandle // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d49240
	void K2_ClearTimerDelegate(struct FDelegate Delegate); // Function Engine.KismetSystemLibrary.K2_ClearTimerDelegate // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d491b0
	void K2_ClearTimer(struct UObject* Object, struct FString FunctionName); // Function Engine.KismetSystemLibrary.K2_ClearTimer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d49080
	void K2_ClearAndInvalidateTimerHandle(struct UObject* WorldContextObject, struct FTimerHandle& Handle); // Function Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d48fc0
	bool IsValidSoftObjectReference(struct TSoftObjectPtr<UObject>& SoftObjectReference); // Function Engine.KismetSystemLibrary.IsValidSoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d48f00
	bool IsValidSoftClassReference(struct TSoftClassPtr<UObject>& SoftClassReference); // Function Engine.KismetSystemLibrary.IsValidSoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d48f00
	bool IsValidPrimaryAssetType(struct FPrimaryAssetType PrimaryAssetType); // Function Engine.KismetSystemLibrary.IsValidPrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x344f210
	bool IsValidPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.IsValidPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d48e70
	bool IsValidClass(struct UObject* Class); // Function Engine.KismetSystemLibrary.IsValidClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48d90
	bool IsValid(struct UObject* Object); // Function Engine.KismetSystemLibrary.IsValid // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48d90
	bool IsUnattended(); // Function Engine.KismetSystemLibrary.IsUnattended // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48d60
	bool IsStandalone(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsStandalone // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48ce0
	bool IsSplitScreen(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsSplitScreen // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48c60
	bool IsServer(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsServer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48be0
	bool IsScreensaverEnabled(); // Function Engine.KismetSystemLibrary.IsScreensaverEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10676e0
	bool IsPackagedForDistribution(); // Function Engine.KismetSystemLibrary.IsPackagedForDistribution // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x106df50
	bool IsLoggedIn(struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.IsLoggedIn // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48a00
	bool IsInterstitialAdRequested(); // Function Engine.KismetSystemLibrary.IsInterstitialAdRequested // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d489d0
	bool IsInterstitialAdAvailable(); // Function Engine.KismetSystemLibrary.IsInterstitialAdAvailable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d489a0
	bool IsDedicatedServer(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.IsDedicatedServer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48920
	bool IsControllerAssignedToGamepad(int32_t ControllerId); // Function Engine.KismetSystemLibrary.IsControllerAssignedToGamepad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d488a0
	void HideAdBanner(); // Function Engine.KismetSystemLibrary.HideAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d48880
	bool GetVolumeButtonsHandledBySystem(); // Function Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x106df50
	struct FString GetUniqueDeviceId(); // Function Engine.KismetSystemLibrary.GetUniqueDeviceId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48800
	bool GetSupportedFullscreenResolutions(struct TArray<struct FIntPoint>& Resolutions); // Function Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d48400
	struct TSoftObjectPtr<UObject> GetSoftObjectReferenceFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d48340
	struct TSoftClassPtr<UObject> GetSoftClassReferenceFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d48280
	int32_t GetRenderingMaterialQualityLevel(); // Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48250
	int32_t GetRenderingDetailMode(); // Function Engine.KismetSystemLibrary.GetRenderingDetailMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48220
	struct FString GetProjectSavedDirectory(); // Function Engine.KismetSystemLibrary.GetProjectSavedDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48120
	struct FString GetProjectDirectory(); // Function Engine.KismetSystemLibrary.GetProjectDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d480a0
	struct FString GetProjectContentDirectory(); // Function Engine.KismetSystemLibrary.GetProjectContentDirectory // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d48020
	void GetPrimaryAssetsWithBundleState(struct TArray<struct FName>& RequiredBundles, struct TArray<struct FName>& ExcludedBundles, struct TArray<struct FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, struct TArray<struct FPrimaryAssetId>& OutPrimaryAssetIdList); // Function Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d47e00
	void GetPrimaryAssetIdList(struct FPrimaryAssetType PrimaryAssetType, struct TArray<struct FPrimaryAssetId>& OutPrimaryAssetIdList); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdList // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d47d20
	struct FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(struct TSoftObjectPtr<UObject> SoftObjectReference); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d47bf0
	struct FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(struct TSoftClassPtr<UObject> SoftClassReference); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d47bf0
	struct FPrimaryAssetId GetPrimaryAssetIdFromObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d47b60
	struct FPrimaryAssetId GetPrimaryAssetIdFromClass(struct UObject* Class); // Function Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d47ad0
	struct TArray<struct FString> GetPreferredLanguages(); // Function Engine.KismetSystemLibrary.GetPreferredLanguages // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d47a50
	struct FString GetPlatformUserName(); // Function Engine.KismetSystemLibrary.GetPlatformUserName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d479d0
	struct FString GetPlatformUserDir(); // Function Engine.KismetSystemLibrary.GetPlatformUserDir // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d47950
	struct FString GetPathName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetPathName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d47880
	struct UObject* GetOuterObject(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetOuterObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d47800
	struct FString GetObjectName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetObjectName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d47730
	struct UObject* GetObjectFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d476a0
	int32_t GetMinYResolutionForUI(); // Function Engine.KismetSystemLibrary.GetMinYResolutionForUI // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d47670
	int32_t GetMinYResolutionFor3DView(); // Function Engine.KismetSystemLibrary.GetMinYResolutionFor3DView // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d47640
	struct FString GetLocalCurrencySymbol(); // Function Engine.KismetSystemLibrary.GetLocalCurrencySymbol // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d474a0
	struct FString GetLocalCurrencyCode(); // Function Engine.KismetSystemLibrary.GetLocalCurrencyCode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d474a0
	float GetGameTimeInSeconds(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.GetGameTimeInSeconds // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3cdaea0
	struct FString GetGamepadControllerName(int32_t ControllerId); // Function Engine.KismetSystemLibrary.GetGamepadControllerName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d47310
	struct FString GetGameName(); // Function Engine.KismetSystemLibrary.GetGameName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d47290
	struct FString GetGameBundleId(); // Function Engine.KismetSystemLibrary.GetGameBundleId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d47210
	int64_t GetFrameCount(); // Function Engine.KismetSystemLibrary.GetFrameCount // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d471e0
	struct FString GetEngineVersion(); // Function Engine.KismetSystemLibrary.GetEngineVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d47160
	struct FString GetDisplayName(struct UObject* Object); // Function Engine.KismetSystemLibrary.GetDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d47090
	struct FString GetDeviceId(); // Function Engine.KismetSystemLibrary.GetDeviceId // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d47010
	struct FString GetDefaultLocale(); // Function Engine.KismetSystemLibrary.GetDefaultLocale // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d46f90
	struct FString GetDefaultLanguage(); // Function Engine.KismetSystemLibrary.GetDefaultLanguage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d46f10
	bool GetCurrentBundleState(struct FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, struct TArray<struct FName>& OutBundles); // Function Engine.KismetSystemLibrary.GetCurrentBundleState // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d46dc0
	bool GetConvenientWindowedResolutions(struct TArray<struct FIntPoint>& Resolutions); // Function Engine.KismetSystemLibrary.GetConvenientWindowedResolutions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d46d10
	int32_t GetConsoleVariableIntValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableIntValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d46c70
	float GetConsoleVariableFloatValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableFloatValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d46bd0
	bool GetConsoleVariableBoolValue(struct FString VariableName); // Function Engine.KismetSystemLibrary.GetConsoleVariableBoolValue // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d46b30
	void GetComponentBounds(struct USceneComponent* Component, struct FVector& Origin, struct FVector& BoxExtent, float& SphereRadius); // Function Engine.KismetSystemLibrary.GetComponentBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d469d0
	struct FString GetCommandLine(); // Function Engine.KismetSystemLibrary.GetCommandLine // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d46950
	struct UObject* GetClassFromPrimaryAssetId(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d468b0
	struct FString GetClassDisplayName(struct UObject* Class); // Function Engine.KismetSystemLibrary.GetClassDisplayName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d467e0
	int32_t GetAdIDCount(); // Function Engine.KismetSystemLibrary.GetAdIDCount // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d467b0
	void GetActorListFromComponentList(struct TArray<struct UPrimitiveComponent*>& ComponentList, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& OutActorList); // Function Engine.KismetSystemLibrary.GetActorListFromComponentList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d46660
	void GetActorBounds(struct AActor* Actor, struct FVector& Origin, struct FVector& BoxExtent); // Function Engine.KismetSystemLibrary.GetActorBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d46550
	void ForceCloseAdBanner(); // Function Engine.KismetSystemLibrary.ForceCloseAdBanner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d46530
	void FlushPersistentDebugLines(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.FlushPersistentDebugLines // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d43e80
	void FlushDebugStrings(struct UObject* WorldContextObject); // Function Engine.KismetSystemLibrary.FlushDebugStrings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d43e80
	void ExecuteConsoleCommand(struct UObject* WorldContextObject, struct FString Command, struct APlayerController* SpecificPlayer); // Function Engine.KismetSystemLibrary.ExecuteConsoleCommand // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d46420
	bool EqualEqual_SoftObjectReference(struct TSoftObjectPtr<UObject>& A, struct TSoftObjectPtr<UObject>& B); // Function Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d462d0
	bool EqualEqual_SoftClassReference(struct TSoftClassPtr<UObject>& A, struct TSoftClassPtr<UObject>& B); // Function Engine.KismetSystemLibrary.EqualEqual_SoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d462d0
	bool EqualEqual_PrimaryAssetType(struct FPrimaryAssetType A, struct FPrimaryAssetType B); // Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x344e280
	bool EqualEqual_PrimaryAssetId(struct FPrimaryAssetId A, struct FPrimaryAssetId B); // Function Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d461f0
	int32_t EndTransaction(); // Function Engine.KismetSystemLibrary.EndTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x106ee10
	void DrawDebugString(struct UObject* WorldContextObject, struct FVector TextLocation, struct FString Text, struct AActor* TestBaseActor, struct FLinearColor TextColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d46000
	void DrawDebugSphere(struct UObject* WorldContextObject, struct FVector Center, float Radius, int32_t Segments, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugSphere // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d45df0
	void DrawDebugPoint(struct UObject* WorldContextObject, struct FVector Position, float Size, struct FLinearColor PointColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugPoint // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d45c60
	void DrawDebugPlane(struct UObject* WorldContextObject, struct FPlane& PlaneCoordinates, struct FVector Location, float Size, struct FLinearColor PlaneColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugPlane // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d45a90
	void DrawDebugLine(struct UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugLine // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d458b0
	void DrawDebugFrustum(struct UObject* WorldContextObject, struct FTransform& FrustumTransform, struct FLinearColor FrustumColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugFrustum // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d456c0
	void DrawDebugFloatHistoryTransform(struct UObject* WorldContextObject, struct FDebugFloatHistory& FloatHistory, struct FTransform& DrawTransform, struct FVector2D DrawSize, struct FLinearColor DrawColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d45460
	void DrawDebugFloatHistoryLocation(struct UObject* WorldContextObject, struct FDebugFloatHistory& FloatHistory, struct FVector DrawLocation, struct FVector2D DrawSize, struct FLinearColor DrawColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d45250
	void DrawDebugCylinder(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, int32_t Segments, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCylinder // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d45000
	void DrawDebugCoordinateSystem(struct UObject* WorldContextObject, struct FVector AxisLoc, struct FRotator AxisRot, float Scale, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d44e30
	void DrawDebugConeInDegrees(struct UObject* WorldContextObject, struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d44b50
	void DrawDebugCone(struct UObject* WorldContextObject, struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCone // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d44b50
	void DrawDebugCircle(struct UObject* WorldContextObject, struct FVector Center, float Radius, int32_t NumSegments, struct FLinearColor LineColor, float Duration, float Thickness, struct FVector YAxis, struct FVector ZAxis, bool bDrawAxis); // Function Engine.KismetSystemLibrary.DrawDebugCircle // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d44870
	void DrawDebugCapsule(struct UObject* WorldContextObject, struct FVector Center, float HalfHeight, float Radius, struct FRotator Rotation, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugCapsule // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d44610
	void DrawDebugCamera(struct ACameraActor* CameraActor, struct FLinearColor CameraColor, float Duration); // Function Engine.KismetSystemLibrary.DrawDebugCamera // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d44510
	void DrawDebugBox(struct UObject* WorldContextObject, struct FVector Center, struct FVector Extent, struct FLinearColor LineColor, struct FRotator Rotation, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d442f0
	void DrawDebugArrow(struct UObject* WorldContextObject, struct FVector LineStart, struct FVector LineEnd, float ArrowSize, struct FLinearColor LineColor, float Duration, float Thickness); // Function Engine.KismetSystemLibrary.DrawDebugArrow // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3d440d0
	bool DoesImplementInterface(struct UObject* TestObject, struct UInterface* Interface); // Function Engine.KismetSystemLibrary.DoesImplementInterface // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d44010
	void Delay(struct UObject* WorldContextObject, float Duration, struct FLatentActionInfo LatentInfo); // Function Engine.KismetSystemLibrary.Delay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d43ef0
	void CreateCopyForUndoBuffer(struct UObject* ObjectToModify); // Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d43e80
	struct FString ConvertToRelativePath(struct FString Filename); // Function Engine.KismetSystemLibrary.ConvertToRelativePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d43da0
	struct FString ConvertToAbsolutePath(struct FString Filename); // Function Engine.KismetSystemLibrary.ConvertToAbsolutePath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d43cc0
	struct TSoftObjectPtr<UObject> Conv_SoftObjPathToSoftObjRef(struct FSoftObjectPath& SoftObjectPath); // Function Engine.KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d43b20
	struct FString Conv_SoftObjectReferenceToString(struct TSoftObjectPtr<UObject>& SoftObjectReference); // Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d43a10
	struct UObject* Conv_SoftObjectReferenceToObject(struct TSoftObjectPtr<UObject>& SoftObject); // Function Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d43c00
	struct FString Conv_SoftClassReferenceToString(struct TSoftClassPtr<UObject>& SoftClassReference); // Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d43a10
	struct UObject* Conv_SoftClassReferenceToClass(struct TSoftClassPtr<UObject>& SoftClass); // Function Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d43940
	struct TSoftClassPtr<UObject> Conv_SoftClassPathToSoftClassRef(struct FSoftClassPath& SoftClassPath); // Function Engine.KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d43860
	struct FString Conv_PrimaryAssetTypeToString(struct FPrimaryAssetType PrimaryAssetType); // Function Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x344e660
	struct FString Conv_PrimaryAssetIdToString(struct FPrimaryAssetId PrimaryAssetId); // Function Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d43780
	struct TSoftObjectPtr<UObject> Conv_ObjectToSoftObjectReference(struct UObject* Object); // Function Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d436d0
	struct UObject* Conv_InterfaceToObject(struct TScriptInterface<IInterface>& Interface); // Function Engine.KismetSystemLibrary.Conv_InterfaceToObject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d43630
	struct TSoftClassPtr<UObject> Conv_ClassToSoftClassReference(struct UObject*& Class); // Function Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d43570
	void ControlScreensaver(bool bAllowScreenSaver); // Function Engine.KismetSystemLibrary.ControlScreensaver // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d434f0
	bool ComponentOverlapComponents(struct UPrimitiveComponent* Component, struct FTransform& ComponentTransform, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.ComponentOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d43260
	bool ComponentOverlapActors(struct UPrimitiveComponent* Component, struct FTransform& ComponentTransform, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.ComponentOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d42fd0
	void CollectGarbage(); // Function Engine.KismetSystemLibrary.CollectGarbage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d42fb0
	bool CapsuleTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d42af0
	bool CapsuleTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d42650
	bool CapsuleTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d421b0
	bool CapsuleTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d41d10
	bool CapsuleTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d418a0
	bool CapsuleTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.CapsuleTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d41430
	bool CapsuleOverlapComponents(struct UObject* WorldContextObject, struct FVector CapsulePos, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.CapsuleOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d41170
	bool CapsuleOverlapActors(struct UObject* WorldContextObject, struct FVector CapsulePos, float Radius, float HalfHeight, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.CapsuleOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d40eb0
	bool CanLaunchURL(struct FString URL); // Function Engine.KismetSystemLibrary.CanLaunchURL // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d40e10
	void CancelTransaction(int32_t Index); // Function Engine.KismetSystemLibrary.CancelTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x185d4a0
	void BreakSoftObjectPath(struct FSoftObjectPath InSoftObjectPath, struct FString& PathString); // Function Engine.KismetSystemLibrary.BreakSoftObjectPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d40cc0
	void BreakSoftClassPath(struct FSoftClassPath InSoftClassPath, struct FString& PathString); // Function Engine.KismetSystemLibrary.BreakSoftClassPath // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d40cc0
	bool BoxTraceSingleForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d407e0
	bool BoxTraceSingleByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingleByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d40320
	bool BoxTraceSingle(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceSingle // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d3fe60
	bool BoxTraceMultiForObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d3f9b0
	bool BoxTraceMultiByProfile(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, struct FName ProfileName, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMultiByProfile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d3f520
	bool BoxTraceMulti(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct FVector HalfSize, struct FRotator Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct TArray<struct FHitResult>& OutHits, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function Engine.KismetSystemLibrary.BoxTraceMulti // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d3f090
	bool BoxOverlapComponents(struct UObject* WorldContextObject, struct FVector BoxPos, struct FVector Extent, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ComponentClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct UPrimitiveComponent*>& OutComponents); // Function Engine.KismetSystemLibrary.BoxOverlapComponents // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d3ee00
	bool BoxOverlapActors(struct UObject* WorldContextObject, struct FVector BoxPos, struct FVector BoxExtent, struct TArray<enum class EObjectTypeQuery>& ObjectTypes, struct UObject* ActorClassFilter, struct TArray<struct AActor*>& ActorsToIgnore, struct TArray<struct AActor*>& OutActors); // Function Engine.KismetSystemLibrary.BoxOverlapActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d3eb70
	int32_t BeginTransaction(struct FString Context, struct FText Description, struct UObject* PrimaryObject); // Function Engine.KismetSystemLibrary.BeginTransaction // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d3ea00
	struct FDebugFloatHistory AddFloatHistorySample(float Value, struct FDebugFloatHistory& FloatHistory); // Function Engine.KismetSystemLibrary.AddFloatHistorySample // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3d3e8a0
};

// Class Engine.KismetTextLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetTextLibrary : UBlueprintFunctionLibrary {

	struct FText TextTrimTrailing(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimTrailing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d57c20
	struct FText TextTrimPrecedingAndTrailing(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d57af0
	struct FText TextTrimPreceding(struct FText& InText); // Function Engine.KismetTextLibrary.TextTrimPreceding // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d579c0
	struct FText TextToUpper(struct FText& InText); // Function Engine.KismetTextLibrary.TextToUpper // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d57890
	struct FText TextToLower(struct FText& InText); // Function Engine.KismetTextLibrary.TextToLower // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d57760
	bool TextIsTransient(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsTransient // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d57690
	bool TextIsFromStringTable(struct FText& Text); // Function Engine.KismetTextLibrary.TextIsFromStringTable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d575c0
	bool TextIsEmpty(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsEmpty // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d574f0
	bool TextIsCultureInvariant(struct FText& InText); // Function Engine.KismetTextLibrary.TextIsCultureInvariant // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d57420
	struct FText TextFromStringTable(struct FName TableID, struct FString Key); // Function Engine.KismetTextLibrary.TextFromStringTable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d572e0
	bool StringTableIdAndKeyFromText(struct FText Text, struct FName& OutTableId, struct FString& OutKey); // Function Engine.KismetTextLibrary.StringTableIdAndKeyFromText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d57140
	struct FText PolyglotDataToText(struct FPolyglotTextData& PolyglotData); // Function Engine.KismetTextLibrary.PolyglotDataToText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d56f10
	bool NotEqual_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.NotEqual_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d56da0
	bool NotEqual_IgnoreCase_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d56c30
	void IsPolyglotDataValid(struct FPolyglotTextData& PolyglotData, bool& IsValid, struct FText& ErrorMessage); // Function Engine.KismetTextLibrary.IsPolyglotDataValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d56970
	struct FText GetEmptyText(); // Function Engine.KismetTextLibrary.GetEmptyText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d568d0
	struct FText Format(struct FText InPattern, struct TArray<struct FFormatArgumentData> InArgs); // Function Engine.KismetTextLibrary.Format // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d566b0
	bool FindTextInLocalizationTable(struct FString Namespace, struct FString Key, struct FText& OutText); // Function Engine.KismetTextLibrary.FindTextInLocalizationTable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d56520
	bool EqualEqual_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.EqualEqual_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d563b0
	bool EqualEqual_IgnoreCase_TextText(struct FText& A, struct FText& B); // Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d56240
	struct FText Conv_VectorToText(struct FVector InVec); // Function Engine.KismetTextLibrary.Conv_VectorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d56150
	struct FText Conv_Vector2dToText(struct FVector2D InVec); // Function Engine.KismetTextLibrary.Conv_Vector2dToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d56080
	struct FText Conv_TransformToText(struct FTransform& InTrans); // Function Engine.KismetTextLibrary.Conv_TransformToText // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d55f40
	struct FString Conv_TextToString(struct FText& InText); // Function Engine.KismetTextLibrary.Conv_TextToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3d55e30
	struct FText Conv_StringToText(struct FString inString); // Function Engine.KismetTextLibrary.Conv_StringToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d55d30
	struct FText Conv_RotatorToText(struct FRotator InRot); // Function Engine.KismetTextLibrary.Conv_RotatorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d55c40
	struct FText Conv_ObjectToText(struct UObject* InObj); // Function Engine.KismetTextLibrary.Conv_ObjectToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d55b60
	struct FText Conv_NameToText(struct FName InName); // Function Engine.KismetTextLibrary.Conv_NameToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d55a80
	struct FText Conv_IntToText(int32_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Function Engine.KismetTextLibrary.Conv_IntToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d55870
	struct FText Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Function Engine.KismetTextLibrary.Conv_Int64ToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d55660
	struct FText Conv_FloatToText(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Function Engine.KismetTextLibrary.Conv_FloatToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d553c0
	struct FText Conv_ColorToText(struct FLinearColor InColor); // Function Engine.KismetTextLibrary.Conv_ColorToText // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d552e0
	struct FText Conv_ByteToText(char Value); // Function Engine.KismetTextLibrary.Conv_ByteToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d55200
	struct FText Conv_BoolToText(bool InBool); // Function Engine.KismetTextLibrary.Conv_BoolToText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d55120
	struct FText AsTimeZoneTime_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d54de0
	struct FText AsTimeZoneDateTime_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d54b20
	struct FText AsTimeZoneDate_DateTime(struct FDateTime& InDateTime, struct FString InTimeZone); // Function Engine.KismetTextLibrary.AsTimeZoneDate_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d54c80
	struct FText AsTimespan_Timespan(struct FTimespan& InTimespan); // Function Engine.KismetTextLibrary.AsTimespan_Timespan // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d55030
	struct FText AsTime_DateTime(struct FDateTime& In); // Function Engine.KismetTextLibrary.AsTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d54f40
	struct FText AsPercent_Float(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Function Engine.KismetTextLibrary.AsPercent_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d54880
	struct FText AsDateTime_DateTime(struct FDateTime& In); // Function Engine.KismetTextLibrary.AsDateTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d546a0
	struct FText AsDate_DateTime(struct FDateTime& InDateTime); // Function Engine.KismetTextLibrary.AsDate_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3d54790
	struct FText AsCurrencyBase(int32_t BaseValue, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrencyBase // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d53f60
	struct FText AsCurrency_Integer(int32_t Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrency_Integer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d543a0
	struct FText AsCurrency_Float(float Value, enum class ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, struct FString CurrencyCode); // Function Engine.KismetTextLibrary.AsCurrency_Float // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d540a0
};

// Class Engine.Layer
// Size: 0x48 (Inherited: 0x28)
struct ULayer : UObject {
	struct FName LayerName; // 0x28(0x08)
	char bIsVisible : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct FLayerActorStats> ActorStats; // 0x38(0x10)
};

// Class Engine.LevelPartitionInterface
// Size: 0x28 (Inherited: 0x28)
struct ULevelPartitionInterface : UInterface {
};

// Class Engine.Level
// Size: 0x280 (Inherited: 0x28)
struct ULevel : UObject {
	char pad_28[0x90]; // 0x28(0x90)
	struct UWorld* OwningWorld; // 0xb8(0x08)
	struct UModel* Model; // 0xc0(0x08)
	struct TArray<struct UModelComponent*> ModelComponents; // 0xc8(0x10)
	struct ULevelActorContainer* ActorCluster; // 0xd8(0x08)
	int32_t NumTextureStreamingUnbuiltComponents; // 0xe0(0x04)
	int32_t NumTextureStreamingDirtyResources; // 0xe4(0x04)
	struct ALevelScriptActor* LevelScriptActor; // 0xe8(0x08)
	struct ANavigationObjectBase* NavListStart; // 0xf0(0x08)
	struct ANavigationObjectBase* NavListEnd; // 0xf8(0x08)
	struct TArray<struct UNavigationDataChunk*> NavDataChunks; // 0x100(0x10)
	float LightmapTotalSize; // 0x110(0x04)
	float ShadowmapTotalSize; // 0x114(0x04)
	struct TArray<struct FVector> StaticNavigableGeometry; // 0x118(0x10)
	struct TArray<struct FGuid> StreamingTextureGuids; // 0x128(0x10)
	char pad_138[0x98]; // 0x138(0x98)
	struct FGuid LevelBuildDataId; // 0x1d0(0x10)
	struct UMapBuildDataRegistry* MapBuildData; // 0x1e0(0x08)
	struct FIntVector LightBuildLevelOffset; // 0x1e8(0x0c)
	char bIsLightingScenario : 1; // 0x1f4(0x01)
	char pad_1F4_1 : 2; // 0x1f4(0x01)
	char bTextureStreamingRotationChanged : 1; // 0x1f4(0x01)
	char bStaticComponentsRegisteredInStreamingManager : 1; // 0x1f4(0x01)
	char bIsVisible : 1; // 0x1f4(0x01)
	char pad_1F4_6 : 2; // 0x1f4(0x01)
	char pad_1F5[0x4b]; // 0x1f5(0x4b)
	struct AWorldSettings* WorldSettings; // 0x240(0x08)
	char pad_248[0x8]; // 0x248(0x08)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x250(0x10)
	char pad_260[0x10]; // 0x260(0x10)
	struct TArray<struct FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors; // 0x270(0x10)
};

// Class Engine.LevelActorContainer
// Size: 0x38 (Inherited: 0x28)
struct ULevelActorContainer : UObject {
	struct TArray<struct AActor*> Actors; // 0x28(0x10)
};

// Class Engine.LevelBounds
// Size: 0x330 (Inherited: 0x320)
struct ALevelBounds : AActor {
	struct UBoxComponent* BoxComponent; // 0x320(0x08)
	bool bAutoUpdateBounds; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)
};

// Class Engine.LevelScriptBlueprint
// Size: 0xa0 (Inherited: 0xa0)
struct ULevelScriptBlueprint : UBlueprint {
};

// Class Engine.LevelStreaming
// Size: 0x160 (Inherited: 0x28)
struct ULevelStreaming : UObject {
	struct TSoftObjectPtr<UWorld> WorldAsset; // 0x28(0x28)
	struct FName PackageNameToLoad; // 0x50(0x08)
	struct TArray<struct FName> LODPackageNames; // 0x58(0x10)
	char pad_68[0x18]; // 0x68(0x18)
	struct FTransform LevelTransform; // 0x80(0x30)
	int32_t LevelLODIndex; // 0xb0(0x04)
	int32_t StreamingPriority; // 0xb4(0x04)
	char pad_B8[0x8]; // 0xb8(0x08)
	char bShouldBeVisible : 1; // 0xc0(0x01)
	char bShouldBeLoaded : 1; // 0xc0(0x01)
	char bLocked : 1; // 0xc0(0x01)
	char bIsStatic : 1; // 0xc0(0x01)
	char bShouldBlockOnLoad : 1; // 0xc0(0x01)
	char bShouldBlockOnUnload : 1; // 0xc0(0x01)
	char bDisableDistanceStreaming : 1; // 0xc0(0x01)
	char bDrawOnLevelStatusMap : 1; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	struct FLinearColor LevelColor; // 0xc4(0x10)
	char pad_D4[0x4]; // 0xd4(0x04)
	struct TArray<struct ALevelStreamingVolume*> EditorStreamingVolumes; // 0xd8(0x10)
	float MinTimeBetweenVolumeUnloadRequests; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct FMulticastInlineDelegate OnLevelLoaded; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnLevelUnloaded; // 0x100(0x10)
	struct FMulticastInlineDelegate OnLevelShown; // 0x110(0x10)
	struct FMulticastInlineDelegate OnLevelHidden; // 0x120(0x10)
	struct ULevel* LoadedLevel; // 0x130(0x08)
	struct ULevel* PendingUnloadLevel; // 0x138(0x08)
	char pad_140[0x20]; // 0x140(0x20)

	bool ShouldBeLoaded(); // Function Engine.LevelStreaming.ShouldBeLoaded // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x34e57f0
	void SetShouldBeVisible(bool bInShouldBeVisible); // Function Engine.LevelStreaming.SetShouldBeVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b7d0
	void SetShouldBeLoaded(bool bInShouldBeLoaded); // Function Engine.LevelStreaming.SetShouldBeLoaded // (Native|Public|BlueprintCallable) // @ game+0x3ce3230
	void SetPriority(int32_t NewPriority); // Function Engine.LevelStreaming.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5b5d0
	void SetLevelLODIndex(int32_t LODIndex); // Function Engine.LevelStreaming.SetLevelLODIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5af40
	bool IsStreamingStatePending(); // Function Engine.LevelStreaming.IsStreamingStatePending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d5a010
	bool IsLevelVisible(); // Function Engine.LevelStreaming.IsLevelVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d59fe0
	bool IsLevelLoaded(); // Function Engine.LevelStreaming.IsLevelLoaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d59fb0
	struct FName GetWorldAssetPackageFName(); // Function Engine.LevelStreaming.GetWorldAssetPackageFName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d59f40
	struct ULevel* GetLoadedLevel(); // Function Engine.LevelStreaming.GetLoadedLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d59f20
	struct ALevelScriptActor* GetLevelScriptActor(); // Function Engine.LevelStreaming.GetLevelScriptActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d59eb0
	struct ULevelStreaming* CreateInstance(struct FString UniqueInstanceName); // Function Engine.LevelStreaming.CreateInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x3d59dd0
};

// Class Engine.LevelStreamingAlwaysLoaded
// Size: 0x160 (Inherited: 0x160)
struct ULevelStreamingAlwaysLoaded : ULevelStreaming {
};

// Class Engine.LevelStreamingDynamic
// Size: 0x160 (Inherited: 0x160)
struct ULevelStreamingDynamic : ULevelStreaming {
	char bInitiallyLoaded : 1; // 0x158(0x01)
	char bInitiallyVisible : 1; // 0x158(0x01)

	struct ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(struct UObject* WorldContextObject, struct TSoftObjectPtr<UWorld> Level, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess); // Function Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d5a250
	struct ULevelStreamingDynamic* LoadLevelInstance(struct UObject* WorldContextObject, struct FString LevelName, struct FVector Location, struct FRotator Rotation, bool& bOutSuccess); // Function Engine.LevelStreamingDynamic.LoadLevelInstance // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d5a040
};

// Class Engine.LevelStreamingPersistent
// Size: 0x160 (Inherited: 0x160)
struct ULevelStreamingPersistent : ULevelStreaming {
};

// Class Engine.LevelStreamingVolume
// Size: 0x370 (Inherited: 0x358)
struct ALevelStreamingVolume : AVolume {
	struct TArray<struct FName> StreamingLevelNames; // 0x358(0x10)
	char bEditorPreVisOnly : 1; // 0x368(0x01)
	char bDisabled : 1; // 0x368(0x01)
	char pad_368_2 : 6; // 0x368(0x01)
	char pad_369[0x3]; // 0x369(0x03)
	enum class EStreamingVolumeUsage StreamingUsage; // 0x36c(0x01)
	char pad_36D[0x3]; // 0x36d(0x03)
};

// Class Engine.LightmappedSurfaceCollection
// Size: 0x40 (Inherited: 0x28)
struct ULightmappedSurfaceCollection : UObject {
	struct UModel* SourceModel; // 0x28(0x08)
	struct TArray<int32_t> Surfaces; // 0x30(0x10)
};

// Class Engine.LightMapTexture2D
// Size: 0xf0 (Inherited: 0xe8)
struct ULightMapTexture2D : UTexture2D {
	char pad_E8[0x8]; // 0xe8(0x08)
};

// Class Engine.LightmassCharacterIndirectDetailVolume
// Size: 0x358 (Inherited: 0x358)
struct ALightmassCharacterIndirectDetailVolume : AVolume {
};

// Class Engine.LightmassImportanceVolume
// Size: 0x358 (Inherited: 0x358)
struct ALightmassImportanceVolume : AVolume {
};

// Class Engine.LightmassPortal
// Size: 0x328 (Inherited: 0x320)
struct ALightmassPortal : AActor {
	struct ULightmassPortalComponent* PortalComponent; // 0x320(0x08)
};

// Class Engine.LightmassPortalComponent
// Size: 0x230 (Inherited: 0x220)
struct ULightmassPortalComponent : USceneComponent {
	struct UBoxComponent* PreviewBox; // 0x220(0x08)
	char pad_228[0x8]; // 0x228(0x08)
};

// Class Engine.LightmassPrimitiveSettingsObject
// Size: 0x40 (Inherited: 0x28)
struct ULightmassPrimitiveSettingsObject : UObject {
	struct FLightmassPrimitiveSettings LightmassSettings; // 0x28(0x18)
};

// Class Engine.LineBatchComponent
// Size: 0x4e0 (Inherited: 0x4a0)
struct ULineBatchComponent : UPrimitiveComponent {
	char pad_4A0[0x40]; // 0x4a0(0x40)
};

// Class Engine.LocalLightComponent
// Size: 0x380 (Inherited: 0x370)
struct ULocalLightComponent : ULightComponent {
	enum class ELightUnits IntensityUnits; // 0x368(0x01)
	float Radius; // 0x36c(0x04)
	float AttenuationRadius; // 0x370(0x04)
	struct FLightmassPointLightSettings LightmassSettings; // 0x374(0x0c)

	void SetIntensityUnits(enum class ELightUnits NewIntensityUnits); // Function Engine.LocalLightComponent.SetIntensityUnits // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5e720
	void SetAttenuationRadius(float NewRadius); // Function Engine.LocalLightComponent.SetAttenuationRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x3d5e460
	float GetUnitsConversionFactor(enum class ELightUnits SrcUnits, enum class ELightUnits TargetUnits, float CosHalfConeAngle); // Function Engine.LocalLightComponent.GetUnitsConversionFactor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d5e240
};

// Class Engine.LODActor
// Size: 0x3a8 (Inherited: 0x320)
struct ALODActor : AActor {
	struct UStaticMeshComponent* StaticMeshComponent; // 0x320(0x08)
	struct TMap<struct UMaterialInterface*, struct UInstancedStaticMeshComponent*> ImpostersStaticMeshComponents; // 0x328(0x50)
	struct UHLODProxy* Proxy; // 0x378(0x08)
	struct FName Key; // 0x380(0x08)
	float LODDrawDistance; // 0x388(0x04)
	int32_t LODLevel; // 0x38c(0x04)
	struct TArray<struct AActor*> SubActors; // 0x390(0x10)
	char CachedNumHLODLevels; // 0x3a0(0x01)
	char pad_3A1[0x7]; // 0x3a1(0x07)
};

// Class Engine.MapBuildDataRegistry
// Size: 0x238 (Inherited: 0x28)
struct UMapBuildDataRegistry : UObject {
	enum class ELightingBuildQuality LevelLightingQuality; // 0x28(0x01)
	char pad_29[0x20f]; // 0x29(0x20f)
};

// Class Engine.Material
// Size: 0x4f0 (Inherited: 0x88)
struct UMaterial : UMaterialInterface {
	struct UPhysicalMaterial* PhysMaterial; // 0x88(0x08)
	struct UPhysicalMaterialMask* PhysMaterialMask; // 0x90(0x08)
	struct UPhysicalMaterial* PhysicalMaterialMap[0x8]; // 0x98(0x40)
	struct FScalarMaterialInput Metallic; // 0xd8(0x0c)
	char pad_E4[0x8]; // 0xe4(0x08)
	struct FScalarMaterialInput Specular; // 0xec(0x0c)
	char pad_F8[0x8]; // 0xf8(0x08)
	struct FScalarMaterialInput Anisotropy; // 0x100(0x0c)
	char pad_10C[0x8]; // 0x10c(0x08)
	struct FVectorMaterialInput Normal; // 0x114(0x0c)
	char pad_120[0x8]; // 0x120(0x08)
	struct FVectorMaterialInput Tangent; // 0x128(0x0c)
	char pad_134[0x8]; // 0x134(0x08)
	struct FColorMaterialInput EmissiveColor; // 0x13c(0x0c)
	char pad_148[0x8]; // 0x148(0x08)
	enum class EMaterialDomain MaterialDomain; // 0x150(0x01)
	enum class EBlendMode BlendMode; // 0x151(0x01)
	enum class EDecalBlendMode DecalBlendMode; // 0x152(0x01)
	enum class EMaterialDecalResponse MaterialDecalResponse; // 0x153(0x01)
	enum class EMaterialShadingModel ShadingModel; // 0x154(0x01)
	char bCastDynamicShadowAsMasked : 1; // 0x155(0x01)
	char pad_155_1 : 7; // 0x155(0x01)
	struct FMaterialShadingModelField ShadingModels; // 0x156(0x02)
	float OpacityMaskClipValue; // 0x158(0x04)
	struct FVectorMaterialInput WorldPositionOffset; // 0x15c(0x0c)
	char pad_168[0x8]; // 0x168(0x08)
	struct FScalarMaterialInput Refraction; // 0x170(0x0c)
	char pad_17C[0x8]; // 0x17c(0x08)
	struct FMaterialAttributesInput MaterialAttributes; // 0x184(0x10)
	char pad_194[0x8]; // 0x194(0x08)
	struct FScalarMaterialInput PixelDepthOffset; // 0x19c(0x0c)
	char pad_1A8[0x8]; // 0x1a8(0x08)
	struct FShadingModelMaterialInput ShadingModelFromMaterialExpression; // 0x1b0(0x0c)
	char pad_1BC[0x8]; // 0x1bc(0x08)
	char bEnableSeparateTranslucency : 1; // 0x1c4(0x01)
	char bEnableResponsiveAA : 1; // 0x1c4(0x01)
	char pad_1C4_2 : 6; // 0x1c4(0x01)
	char pad_1C5[0x3]; // 0x1c5(0x03)
	char bEnableTranslucentVelocity : 1; // 0x1c8(0x01)
	char pad_1C8_1 : 7; // 0x1c8(0x01)
	char pad_1C9[0x3]; // 0x1c9(0x03)
	char bScreenSpaceReflections : 1; // 0x1cc(0x01)
	char bContactShadows : 1; // 0x1cc(0x01)
	char TwoSided : 1; // 0x1cc(0x01)
	char DitheredLODTransition : 1; // 0x1cc(0x01)
	char DitherOpacityMask : 1; // 0x1cc(0x01)
	char bAllowNegativeEmissiveColor : 1; // 0x1cc(0x01)
	char pad_1CC_6 : 2; // 0x1cc(0x01)
	enum class ETranslucencyLightingMode TranslucencyLightingMode; // 0x1cd(0x01)
	char bEnableMobileSeparateTranslucency : 1; // 0x1ce(0x01)
	char pad_1CE_1 : 7; // 0x1ce(0x01)
	char pad_1CF[0x1]; // 0x1cf(0x01)
	int32_t NumCustomizedUVs; // 0x1d0(0x04)
	float TranslucencyDirectionalLightingIntensity; // 0x1d4(0x04)
	float TranslucentShadowDensityScale; // 0x1d8(0x04)
	float TranslucentSelfShadowDensityScale; // 0x1dc(0x04)
	float TranslucentSelfShadowSecondDensityScale; // 0x1e0(0x04)
	float TranslucentSelfShadowSecondOpacity; // 0x1e4(0x04)
	float TranslucentBackscatteringExponent; // 0x1e8(0x04)
	struct FLinearColor TranslucentMultipleScatteringExtinction; // 0x1ec(0x10)
	float TranslucentShadowStartOffset; // 0x1fc(0x04)
	char bDisableDepthTest : 1; // 0x200(0x01)
	char bWriteOnlyAlpha : 1; // 0x200(0x01)
	char bGenerateSphericalParticleNormals : 1; // 0x200(0x01)
	char bTangentSpaceNormal : 1; // 0x200(0x01)
	char bUseEmissiveForDynamicAreaLighting : 1; // 0x200(0x01)
	char bBlockGI : 1; // 0x200(0x01)
	char bUsedAsSpecialEngineMaterial : 1; // 0x200(0x01)
	char bUsedWithSkeletalMesh : 1; // 0x200(0x01)
	char bUsedWithEditorCompositing : 1; // 0x201(0x01)
	char bUsedWithParticleSprites : 1; // 0x201(0x01)
	char bUsedWithBeamTrails : 1; // 0x201(0x01)
	char bUsedWithMeshParticles : 1; // 0x201(0x01)
	char bUsedWithNiagaraSprites : 1; // 0x201(0x01)
	char bUsedWithNiagaraRibbons : 1; // 0x201(0x01)
	char bUsedWithNiagaraMeshParticles : 1; // 0x201(0x01)
	char bUsedWithGeometryCache : 1; // 0x201(0x01)
	char bUsedWithStaticLighting : 1; // 0x202(0x01)
	char bUsedWithMorphTargets : 1; // 0x202(0x01)
	char bUsedWithSplineMeshes : 1; // 0x202(0x01)
	char bUsedWithInstancedStaticMeshes : 1; // 0x202(0x01)
	char bUsedWithGeometryCollections : 1; // 0x202(0x01)
	char bUsesDistortion : 1; // 0x202(0x01)
	char bUsedWithClothing : 1; // 0x202(0x01)
	char pad_202_7 : 1; // 0x202(0x01)
	char pad_203[0x1]; // 0x203(0x01)
	char bUsedWithWater : 1; // 0x204(0x01)
	char bUsedWithHairStrands : 1; // 0x204(0x01)
	char bUsedWithLidarPointCloud : 1; // 0x204(0x01)
	char pad_204_3 : 5; // 0x204(0x01)
	char pad_205[0x3]; // 0x205(0x03)
	char bUsedWithUI : 1; // 0x208(0x01)
	char bAutomaticallySetUsageInEditor : 1; // 0x208(0x01)
	char bFullyRough : 1; // 0x208(0x01)
	char bUseFullPrecision : 1; // 0x208(0x01)
	char bUseLightmapDirectionality : 1; // 0x208(0x01)
	char pad_208_5 : 3; // 0x208(0x01)
	char pad_209[0x3]; // 0x209(0x03)
	char bForwardRenderUsePreintegratedGFForSimpleIBL : 1; // 0x20c(0x01)
	char pad_20C_1 : 7; // 0x20c(0x01)
	char pad_20D[0x3]; // 0x20d(0x03)
	char bUseHQForwardReflections : 1; // 0x210(0x01)
	char bUsePlanarForwardReflections : 1; // 0x210(0x01)
	char bNormalCurvatureToRoughness : 1; // 0x210(0x01)
	char pad_210_3 : 5; // 0x210(0x01)
	enum class EMaterialTessellationMode D3D11TessellationMode; // 0x211(0x01)
	char bEnableCrackFreeDisplacement : 1; // 0x212(0x01)
	char bEnableAdaptiveTessellation : 1; // 0x212(0x01)
	char AllowTranslucentCustomDepthWrites : 1; // 0x212(0x01)
	char Wireframe : 1; // 0x212(0x01)
	char bCanMaskedBeAssumedOpaque : 1; // 0x212(0x01)
	char bIsMasked : 1; // 0x212(0x01)
	char bIsPreviewMaterial : 1; // 0x212(0x01)
	char bIsFunctionPreviewMaterial : 1; // 0x212(0x01)
	char bUseMaterialAttributes : 1; // 0x213(0x01)
	char bCastRayTracedShadows : 1; // 0x213(0x01)
	char bUseTranslucencyVertexFog : 1; // 0x213(0x01)
	char bIsSky : 1; // 0x213(0x01)
	char bComputeFogPerPixel : 1; // 0x213(0x01)
	char bOutputTranslucentVelocity : 1; // 0x213(0x01)
	char bAllowDevelopmentShaderCompile : 1; // 0x213(0x01)
	char bIsMaterialEditorStatsMaterial : 1; // 0x213(0x01)
	enum class EBlendableLocation BlendableLocation; // 0x214(0x01)
	char BlendableOutputAlpha : 1; // 0x215(0x01)
	char bEnableStencilTest : 1; // 0x215(0x01)
	char pad_215_2 : 6; // 0x215(0x01)
	enum class EMaterialStencilCompare StencilCompare; // 0x216(0x01)
	char StencilRefValue; // 0x217(0x01)
	enum class ERefractionMode RefractionMode; // 0x218(0x01)
	char pad_219[0x3]; // 0x219(0x03)
	int32_t BlendablePriority; // 0x21c(0x04)
	char bIsBlendable : 1; // 0x220(0x01)
	char pad_220_1 : 7; // 0x220(0x01)
	char pad_221[0x3]; // 0x221(0x03)
	uint32_t UsageFlagWarnings; // 0x224(0x04)
	float RefractionDepthBias; // 0x228(0x04)
	struct FGuid StateID; // 0x22c(0x10)
	float MaxDisplacement; // 0x23c(0x04)
	char pad_240[0x88]; // 0x240(0x88)
	struct FMaterialCachedExpressionData CachedExpressionData; // 0x2c8(0x228)
};

// Class Engine.MaterialBillboardComponent
// Size: 0x4b0 (Inherited: 0x4a0)
struct UMaterialBillboardComponent : UPrimitiveComponent {
	struct TArray<struct FMaterialSpriteElement> Elements; // 0x4a0(0x10)

	void SetElements(struct TArray<struct FMaterialSpriteElement>& NewElements); // Function Engine.MaterialBillboardComponent.SetElements // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3d63140
	void AddElement(struct UMaterialInterface* Material, struct UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, struct UCurveFloat* DistanceToSizeCurve); // Function Engine.MaterialBillboardComponent.AddElement // (Final|Native|Public|BlueprintCallable) // @ game+0x3d62f70
};

// Class Engine.MaterialExpressionAbs
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionAbs : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionActorPositionWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionActorPositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionAdd
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionAdd : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput B; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionAntialiasedTextureMask
// Size: 0xf8 (Inherited: 0xf0)
struct UMaterialExpressionAntialiasedTextureMask : UMaterialExpressionTextureSampleParameter2D {
	float threshold; // 0xf0(0x04)
	enum class ETextureColorChannel Channel; // 0xf4(0x01)
	char pad_F5[0x3]; // 0xf5(0x03)
};

// Class Engine.MaterialExpressionAppendVector
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionAppendVector : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput B; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionArccosine
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArccosine : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionArccosineFast
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArccosineFast : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionArcsine
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArcsine : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionArcsineFast
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArcsineFast : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionArctangent
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArctangent : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionArctangent2
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionArctangent2 : UMaterialExpression {
	struct FExpressionInput Y; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput X; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionArctangent2Fast
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionArctangent2Fast : UMaterialExpression {
	struct FExpressionInput Y; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput X; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionArctangentFast
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArctangentFast : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionAtmosphericFogColor
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionAtmosphericFogColor : UMaterialExpression {
	struct FExpressionInput WorldPosition; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionAtmosphericLightColor
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionAtmosphericLightColor : UMaterialExpression {
};

// Class Engine.MaterialExpressionAtmosphericLightVector
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionAtmosphericLightVector : UMaterialExpression {
};

// Class Engine.MaterialExpressionBentNormalCustomOutput
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionBentNormalCustomOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionBlackBody
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionBlackBody : UMaterialExpression {
	struct FExpressionInput Temp; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionBlendMaterialAttributes
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionBlendMaterialAttributes : UMaterialExpression {
	struct FMaterialAttributesInput A; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)
	struct FMaterialAttributesInput B; // 0x58(0x10)
	char pad_68[0x8]; // 0x68(0x08)
	struct FExpressionInput ALPHA; // 0x70(0x0c)
	char pad_7C[0x8]; // 0x7c(0x08)
	enum class EMaterialAttributeBlend PixelAttributeBlendType; // 0x84(0x01)
	enum class EMaterialAttributeBlend VertexAttributeBlendType; // 0x85(0x01)
	char pad_86[0x2]; // 0x86(0x02)
};

// Class Engine.MaterialExpressionBreakMaterialAttributes
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionBreakMaterialAttributes : UMaterialExpression {
	struct FMaterialAttributesInput MaterialAttributes; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)
};

// Class Engine.MaterialExpressionBumpOffset
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionBumpOffset : UMaterialExpression {
	struct FExpressionInput Coordinate; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Height; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FExpressionInput HeightRatioInput; // 0x68(0x0c)
	char pad_74[0x8]; // 0x74(0x08)
	float HeightRatio; // 0x7c(0x04)
	float ReferencePlane; // 0x80(0x04)
	uint32_t ConstCoordinate; // 0x84(0x04)
};

// Class Engine.MaterialExpressionCameraPositionWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionCameraPositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionCameraVectorWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionCameraVectorWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionCeil
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionCeil : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionParameter
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionParameter : UMaterialExpression {
	struct FName ParameterName; // 0x40(0x08)
	struct FGuid ExpressionGUID; // 0x48(0x10)
};

// Class Engine.MaterialExpressionVectorParameter
// Size: 0x70 (Inherited: 0x58)
struct UMaterialExpressionVectorParameter : UMaterialExpressionParameter {
	struct FLinearColor DefaultValue; // 0x58(0x10)
	bool bUseCustomPrimitiveData; // 0x68(0x01)
	char PrimitiveDataIndex; // 0x69(0x01)
	char pad_6A[0x6]; // 0x6a(0x06)
};

// Class Engine.MaterialExpressionChannelMaskParameter
// Size: 0x88 (Inherited: 0x70)
struct UMaterialExpressionChannelMaskParameter : UMaterialExpressionVectorParameter {
	enum class EChannelMaskParameterColor MaskChannel; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	struct FExpressionInput Input; // 0x74(0x0c)
	char pad_80[0x8]; // 0x80(0x08)
};

// Class Engine.MaterialExpressionClamp
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionClamp : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Min; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FExpressionInput MAX; // 0x68(0x0c)
	char pad_74[0x8]; // 0x74(0x08)
	enum class EClampMode ClampMode; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
	float MinDefault; // 0x80(0x04)
	float MaxDefault; // 0x84(0x04)
};

// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionClearCoatNormalCustomOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionCollectionParameter
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionCollectionParameter : UMaterialExpression {
	struct UMaterialParameterCollection* Collection; // 0x40(0x08)
	struct FName ParameterName; // 0x48(0x08)
	struct FGuid ParameterId; // 0x50(0x10)
};

// Class Engine.MaterialExpressionComment
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionComment : UMaterialExpression {
	int32_t SizeX; // 0x40(0x04)
	int32_t SizeY; // 0x44(0x04)
	struct FString Text; // 0x48(0x10)
	struct FLinearColor CommentColor; // 0x58(0x10)
	int32_t FontSize; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionComponentMask
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionComponentMask : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	char R : 1; // 0x54(0x01)
	char G : 1; // 0x54(0x01)
	char B : 1; // 0x54(0x01)
	char A : 1; // 0x54(0x01)
	char pad_54_4 : 4; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.MaterialExpressionConstant
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionConstant : UMaterialExpression {
	float R; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.MaterialExpressionConstant2Vector
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionConstant2Vector : UMaterialExpression {
	float R; // 0x40(0x04)
	float G; // 0x44(0x04)
};

// Class Engine.MaterialExpressionConstant3Vector
// Size: 0x50 (Inherited: 0x40)
struct UMaterialExpressionConstant3Vector : UMaterialExpression {
	struct FLinearColor Constant; // 0x40(0x10)
};

// Class Engine.MaterialExpressionConstant4Vector
// Size: 0x50 (Inherited: 0x40)
struct UMaterialExpressionConstant4Vector : UMaterialExpression {
	struct FLinearColor Constant; // 0x40(0x10)
};

// Class Engine.MaterialExpressionConstantBiasScale
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionConstantBiasScale : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	float Bias; // 0x54(0x04)
	float Scale; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.MaterialExpressionCosine
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionCosine : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	float Period; // 0x54(0x04)
};

// Class Engine.MaterialExpressionCrossProduct
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionCrossProduct : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput B; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionScalarParameter
// Size: 0x60 (Inherited: 0x58)
struct UMaterialExpressionScalarParameter : UMaterialExpressionParameter {
	float DefaultValue; // 0x58(0x04)
	bool bUseCustomPrimitiveData; // 0x5c(0x01)
	char PrimitiveDataIndex; // 0x5d(0x01)
	char pad_5E[0x2]; // 0x5e(0x02)
};

// Class Engine.MaterialExpressionCurveAtlasRowParameter
// Size: 0x88 (Inherited: 0x60)
struct UMaterialExpressionCurveAtlasRowParameter : UMaterialExpressionScalarParameter {
	struct UCurveLinearColor* Curve; // 0x60(0x08)
	struct UCurveLinearColorAtlas* Atlas; // 0x68(0x08)
	struct FExpressionInput InputTime; // 0x70(0x0c)
	char pad_7C[0xc]; // 0x7c(0x0c)
};

// Class Engine.MaterialExpressionCustom
// Size: 0x98 (Inherited: 0x40)
struct UMaterialExpressionCustom : UMaterialExpression {
	struct FString Code; // 0x40(0x10)
	enum class ECustomMaterialOutputType OutputType; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct FString Description; // 0x58(0x10)
	struct TArray<struct FCustomInput> Inputs; // 0x68(0x10)
	struct TArray<struct FCustomDefine> AdditionalDefines; // 0x78(0x10)
	struct TArray<struct FString> IncludeFilePaths; // 0x88(0x10)
};

// Class Engine.MaterialExpressionDDX
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDDX : UMaterialExpression {
	struct FExpressionInput Value; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionDDY
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDDY : UMaterialExpression {
	struct FExpressionInput Value; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionDecalDerivative
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionDecalDerivative : UMaterialExpression {
};

// Class Engine.MaterialExpressionDecalLifetimeOpacity
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionDecalLifetimeOpacity : UMaterialExpression {
};

// Class Engine.MaterialExpressionDecalMipmapLevel
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionDecalMipmapLevel : UMaterialExpression {
	struct FExpressionInput TextureSize; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	float ConstWidth; // 0x54(0x04)
	float ConstHeight; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.MaterialExpressionDeltaTime
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionDeltaTime : UMaterialExpression {
};

// Class Engine.MaterialExpressionDepthFade
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionDepthFade : UMaterialExpression {
	struct FExpressionInput InOpacity; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput FadeDistance; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	float OpacityDefault; // 0x68(0x04)
	float FadeDistanceDefault; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionDepthOfFieldFunction
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDepthOfFieldFunction : UMaterialExpression {
	enum class EDepthOfFieldFunctionValue FunctionValue; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FExpressionInput Depth; // 0x44(0x0c)
	char pad_50[0x8]; // 0x50(0x08)
};

// Class Engine.MaterialExpressionDeriveNormalZ
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDeriveNormalZ : UMaterialExpression {
	struct FExpressionInput InXY; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionDesaturation
// Size: 0x78 (Inherited: 0x40)
struct UMaterialExpressionDesaturation : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Fraction; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FLinearColor LuminanceFactors; // 0x68(0x10)
};

// Class Engine.MaterialExpressionDistance
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionDistance : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput B; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionDistanceCullFade
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionDistanceCullFade : UMaterialExpression {
};

// Class Engine.MaterialExpressionDistanceFieldGradient
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDistanceFieldGradient : UMaterialExpression {
	struct FExpressionInput Position; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionDistanceToNearestSurface
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDistanceToNearestSurface : UMaterialExpression {
	struct FExpressionInput Position; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionDivide
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionDivide : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput B; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionDotProduct
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionDotProduct : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput B; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionDynamicParameter
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionDynamicParameter : UMaterialExpression {
	struct TArray<struct FString> ParamNames; // 0x40(0x10)
	struct FLinearColor DefaultValue; // 0x50(0x10)
	uint32_t ParameterIndex; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.MaterialExpressionEyeAdaptation
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionEyeAdaptation : UMaterialExpression {
};

// Class Engine.MaterialExpressionFeatureLevelSwitch
// Size: 0xa8 (Inherited: 0x40)
struct UMaterialExpressionFeatureLevelSwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Inputs[0x4]; // 0x54(0x30)
	char pad_84[0x24]; // 0x84(0x24)
};

// Class Engine.MaterialExpressionFloor
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionFloor : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionFmod
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionFmod : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput B; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionFontSample
// Size: 0x50 (Inherited: 0x40)
struct UMaterialExpressionFontSample : UMaterialExpression {
	struct UFont* Font; // 0x40(0x08)
	int32_t FontTexturePage; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.MaterialExpressionFontSampleParameter
// Size: 0x70 (Inherited: 0x50)
struct UMaterialExpressionFontSampleParameter : UMaterialExpressionFontSample {
	struct FName ParameterName; // 0x50(0x08)
	struct FGuid ExpressionGUID; // 0x58(0x10)
	struct FName Group; // 0x68(0x08)
};

// Class Engine.MaterialExpressionFrac
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionFrac : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionFresnel
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionFresnel : UMaterialExpression {
	struct FExpressionInput ExponentIn; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	float Exponent; // 0x54(0x04)
	struct FExpressionInput BaseReflectFractionIn; // 0x58(0x0c)
	char pad_64[0x8]; // 0x64(0x08)
	float BaseReflectFraction; // 0x6c(0x04)
	struct FExpressionInput Normal; // 0x70(0x0c)
	char pad_7C[0xc]; // 0x7c(0x0c)
};

// Class Engine.MaterialExpressionFunctionInput
// Size: 0xc0 (Inherited: 0x40)
struct UMaterialExpressionFunctionInput : UMaterialExpression {
	struct FExpressionInput Preview; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FName InputName; // 0x54(0x08)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct FString Description; // 0x60(0x10)
	struct FGuid ID; // 0x70(0x10)
	enum class EFunctionInputType InputType; // 0x80(0x01)
	char pad_81[0xf]; // 0x81(0x0f)
	struct FVector4 PreviewValue; // 0x90(0x10)
	char bUsePreviewValueAsDefault : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	int32_t SortPriority; // 0xa4(0x04)
	char bCompilingFunctionPreview : 1; // 0xa8(0x01)
	char pad_A8_1 : 7; // 0xa8(0x01)
	char pad_A9[0x17]; // 0xa9(0x17)
};

// Class Engine.MaterialExpressionFunctionOutput
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionFunctionOutput : UMaterialExpression {
	struct FName OutputName; // 0x40(0x08)
	struct FString Description; // 0x48(0x10)
	int32_t SortPriority; // 0x58(0x04)
	struct FExpressionInput A; // 0x5c(0x0c)
	char pad_68[0x8]; // 0x68(0x08)
	char bLastPreviewed : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	struct FGuid ID; // 0x74(0x10)
	char pad_84[0x4]; // 0x84(0x04)
};

// Class Engine.MaterialExpressionGetMaterialAttributes
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionGetMaterialAttributes : UMaterialExpression {
	struct FMaterialAttributesInput MaterialAttributes; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)
	struct TArray<struct FGuid> AttributeGetTypes; // 0x58(0x10)
};

// Class Engine.MaterialExpressionGIReplace
// Size: 0x80 (Inherited: 0x40)
struct UMaterialExpressionGIReplace : UMaterialExpression {
	struct FExpressionInput Default; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput StaticIndirect; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FExpressionInput DynamicIndirect; // 0x68(0x0c)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionHairAttributes
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionHairAttributes : UMaterialExpression {
};

// Class Engine.MaterialExpressionIf
// Size: 0xb0 (Inherited: 0x40)
struct UMaterialExpressionIf : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput B; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FExpressionInput AGreaterThanB; // 0x68(0x0c)
	char pad_74[0x8]; // 0x74(0x08)
	struct FExpressionInput AEqualsB; // 0x7c(0x0c)
	char pad_88[0x8]; // 0x88(0x08)
	struct FExpressionInput ALessThanB; // 0x90(0x0c)
	char pad_9C[0x8]; // 0x9c(0x08)
	float EqualsThreshold; // 0xa4(0x04)
	float ConstB; // 0xa8(0x04)
	float ConstAEqualsB; // 0xac(0x04)
};

// Class Engine.MaterialExpressionLightmapUVs
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionLightmapUVs : UMaterialExpression {
};

// Class Engine.MaterialExpressionLightmassReplace
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionLightmassReplace : UMaterialExpression {
	struct FExpressionInput Realtime; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Lightmass; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionLightVector
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionLightVector : UMaterialExpression {
};

// Class Engine.MaterialExpressionLinearInterpolate
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionLinearInterpolate : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput B; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FExpressionInput ALPHA; // 0x68(0x0c)
	char pad_74[0x8]; // 0x74(0x08)
	float ConstA; // 0x7c(0x04)
	float ConstB; // 0x80(0x04)
	float ConstAlpha; // 0x84(0x04)
};

// Class Engine.MaterialExpressionLogarithm10
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionLogarithm10 : UMaterialExpression {
	struct FExpressionInput X; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionLogarithm2
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionLogarithm2 : UMaterialExpression {
	struct FExpressionInput X; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionMakeMaterialAttributes
// Size: 0x270 (Inherited: 0x40)
struct UMaterialExpressionMakeMaterialAttributes : UMaterialExpression {
	struct FExpressionInput BaseColor; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Metallic; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FExpressionInput Specular; // 0x68(0x0c)
	char pad_74[0x8]; // 0x74(0x08)
	struct FExpressionInput Roughness; // 0x7c(0x0c)
	char pad_88[0x8]; // 0x88(0x08)
	struct FExpressionInput Anisotropy; // 0x90(0x0c)
	char pad_9C[0x8]; // 0x9c(0x08)
	struct FExpressionInput EmissiveColor; // 0xa4(0x0c)
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FExpressionInput Opacity; // 0xb8(0x0c)
	char pad_C4[0x8]; // 0xc4(0x08)
	struct FExpressionInput OpacityMask; // 0xcc(0x0c)
	char pad_D8[0x8]; // 0xd8(0x08)
	struct FExpressionInput Normal; // 0xe0(0x0c)
	char pad_EC[0x8]; // 0xec(0x08)
	struct FExpressionInput Tangent; // 0xf4(0x0c)
	char pad_100[0x8]; // 0x100(0x08)
	struct FExpressionInput WorldPositionOffset; // 0x108(0x0c)
	char pad_114[0x8]; // 0x114(0x08)
	struct FExpressionInput WorldDisplacement; // 0x11c(0x0c)
	char pad_128[0x8]; // 0x128(0x08)
	struct FExpressionInput TessellationMultiplier; // 0x130(0x0c)
	char pad_13C[0x8]; // 0x13c(0x08)
	struct FExpressionInput SubsurfaceColor; // 0x144(0x0c)
	char pad_150[0x8]; // 0x150(0x08)
	struct FExpressionInput ClearCoat; // 0x158(0x0c)
	char pad_164[0x8]; // 0x164(0x08)
	struct FExpressionInput ClearCoatRoughness; // 0x16c(0x0c)
	char pad_178[0x8]; // 0x178(0x08)
	struct FExpressionInput AmbientOcclusion; // 0x180(0x0c)
	char pad_18C[0x8]; // 0x18c(0x08)
	struct FExpressionInput Refraction; // 0x194(0x0c)
	char pad_1A0[0x8]; // 0x1a0(0x08)
	struct FExpressionInput CustomizedUVs[0x8]; // 0x1a8(0x60)
	char pad_208[0x40]; // 0x208(0x40)
	struct FExpressionInput PixelDepthOffset; // 0x248(0x0c)
	char pad_254[0x8]; // 0x254(0x08)
	struct FExpressionInput ShadingModel; // 0x25c(0x0c)
	char pad_268[0x8]; // 0x268(0x08)
};

// Class Engine.MaterialExpressionMapARPassthroughCameraUV
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionMapARPassthroughCameraUV : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionMaterialAttributeLayers
// Size: 0xe8 (Inherited: 0x40)
struct UMaterialExpressionMaterialAttributeLayers : UMaterialExpression {
	struct FName ParameterName; // 0x40(0x08)
	struct FGuid ExpressionGUID; // 0x48(0x10)
	struct FMaterialAttributesInput Input; // 0x58(0x10)
	char pad_68[0x8]; // 0x68(0x08)
	struct FMaterialLayersFunctions DefaultLayers; // 0x70(0x40)
	struct TArray<struct UMaterialExpressionMaterialFunctionCall*> LayerCallers; // 0xb0(0x10)
	int32_t NumActiveLayerCallers; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct TArray<struct UMaterialExpressionMaterialFunctionCall*> BlendCallers; // 0xc8(0x10)
	int32_t NumActiveBlendCallers; // 0xd8(0x04)
	bool bIsLayerGraphBuilt; // 0xdc(0x01)
	char pad_DD[0xb]; // 0xdd(0x0b)
};

// Class Engine.MaterialExpressionMaterialFunctionCall
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionMaterialFunctionCall : UMaterialExpression {
	struct UMaterialFunctionInterface* MaterialFunction; // 0x40(0x08)
	struct FMaterialParameterInfo FunctionParameterInfo; // 0x48(0x10)
};

// Class Engine.MaterialExpressionMaterialLayerOutput
// Size: 0x88 (Inherited: 0x88)
struct UMaterialExpressionMaterialLayerOutput : UMaterialExpressionFunctionOutput {
};

// Class Engine.MaterialExpressionMaterialProxyReplace
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionMaterialProxyReplace : UMaterialExpression {
	struct FExpressionInput Realtime; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput MaterialProxy; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionMax
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionMax : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput B; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionMin
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionMin : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput B; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionMultiply
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionMultiply : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput B; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionNoise
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionNoise : UMaterialExpression {
	struct FExpressionInput Position; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput FilterWidth; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	float Scale; // 0x68(0x04)
	int32_t Quality; // 0x6c(0x04)
	enum class ENoiseFunction NoiseFunction; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	char bTurbulence : 1; // 0x74(0x01)
	char pad_74_1 : 7; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
	int32_t Levels; // 0x78(0x04)
	float OutputMin; // 0x7c(0x04)
	float OutputMax; // 0x80(0x04)
	float LevelScale; // 0x84(0x04)
	char bTiling : 1; // 0x88(0x01)
	char pad_88_1 : 7; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	uint32_t RepeatSize; // 0x8c(0x04)
};

// Class Engine.MaterialExpressionNormalize
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionNormalize : UMaterialExpression {
	struct FExpressionInput VectorInput; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionObjectBounds
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionObjectBounds : UMaterialExpression {
};

// Class Engine.MaterialExpressionObjectOrientation
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionObjectOrientation : UMaterialExpression {
};

// Class Engine.MaterialExpressionObjectPositionWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionObjectPositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionObjectRadius
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionObjectRadius : UMaterialExpression {
};

// Class Engine.MaterialExpressionOneMinus
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionOneMinus : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionPanner
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionPanner : UMaterialExpression {
	struct FExpressionInput Coordinate; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Time; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FExpressionInput Speed; // 0x68(0x0c)
	char pad_74[0x8]; // 0x74(0x08)
	float SpeedX; // 0x7c(0x04)
	float SpeedY; // 0x80(0x04)
	uint32_t ConstCoordinate; // 0x84(0x04)
	bool bFractionalPart; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class Engine.MaterialExpressionParticleColor
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleColor : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleDirection
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleDirection : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleMacroUV
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleMacroUV : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleMotionBlurFade
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleMotionBlurFade : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticlePositionWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticlePositionWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleRadius
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleRadius : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleRandom
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleRandom : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleRelativeTime
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleRelativeTime : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleSize
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleSize : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleSpeed
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleSpeed : UMaterialExpression {
};

// Class Engine.MaterialExpressionParticleSubUV
// Size: 0xd8 (Inherited: 0xd0)
struct UMaterialExpressionParticleSubUV : UMaterialExpressionTextureSample {
	char bBlend : 1; // 0xd0(0x01)
	char pad_D0_1 : 7; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)
};

// Class Engine.MaterialExpressionParticleSubUVProperties
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleSubUVProperties : UMaterialExpression {
};

// Class Engine.MaterialExpressionPerInstanceCustomData
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionPerInstanceCustomData : UMaterialExpression {
	struct FExpressionInput DefaultValue; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	float ConstDefaultValue; // 0x54(0x04)
	uint32_t DataIndex; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Engine.MaterialExpressionPerInstanceFadeAmount
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPerInstanceFadeAmount : UMaterialExpression {
};

// Class Engine.MaterialExpressionPerInstanceRandom
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPerInstanceRandom : UMaterialExpression {
};

// Class Engine.MaterialExpressionPixelDepth
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPixelDepth : UMaterialExpression {
};

// Class Engine.MaterialExpressionPixelNormalWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPixelNormalWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionPower
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionPower : UMaterialExpression {
	struct FExpressionInput Base; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Exponent; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	float ConstExponent; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionPrecomputedAOMask
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPrecomputedAOMask : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreSkinnedLocalBounds
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPreSkinnedLocalBounds : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreSkinnedNormal
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPreSkinnedNormal : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreSkinnedPosition
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPreSkinnedPosition : UMaterialExpression {
};

// Class Engine.MaterialExpressionPreviousFrameSwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionPreviousFrameSwitch : UMaterialExpression {
	struct FExpressionInput CurrentFrame; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput PreviousFrame; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionQualitySwitch
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionQualitySwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Inputs[0x3]; // 0x54(0x24)
	char pad_78[0x18]; // 0x78(0x18)
};

// Class Engine.MaterialExpressionRayTracingQualitySwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionRayTracingQualitySwitch : UMaterialExpression {
	struct FExpressionInput Normal; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput RayTraced; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionRebaseToZeroOrigin
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionRebaseToZeroOrigin : UMaterialExpression {
	struct FExpressionInput InputVector; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionReflectionVectorWS
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionReflectionVectorWS : UMaterialExpression {
	struct FExpressionInput CustomWorldNormal; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	char bNormalizeCustomWorldNormal : 1; // 0x54(0x01)
	char pad_54_1 : 7; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.MaterialExpressionReroute
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionReroute : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionRotateAboutAxis
// Size: 0x98 (Inherited: 0x40)
struct UMaterialExpressionRotateAboutAxis : UMaterialExpression {
	struct FExpressionInput NormalizedRotationAxis; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput RotationAngle; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FExpressionInput PivotPoint; // 0x68(0x0c)
	char pad_74[0x8]; // 0x74(0x08)
	struct FExpressionInput Position; // 0x7c(0x0c)
	char pad_88[0x8]; // 0x88(0x08)
	float Period; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class Engine.MaterialExpressionRotator
// Size: 0x78 (Inherited: 0x40)
struct UMaterialExpressionRotator : UMaterialExpression {
	struct FExpressionInput Coordinate; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Time; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	float CenterX; // 0x68(0x04)
	float CenterY; // 0x6c(0x04)
	float Speed; // 0x70(0x04)
	uint32_t ConstCoordinate; // 0x74(0x04)
};

// Class Engine.MaterialExpressionRound
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionRound : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
// Size: 0xd0 (Inherited: 0x40)
struct UMaterialExpressionRuntimeVirtualTextureOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput BaseColor; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Specular; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FExpressionInput Roughness; // 0x68(0x0c)
	char pad_74[0x8]; // 0x74(0x08)
	struct FExpressionInput Normal; // 0x7c(0x0c)
	char pad_88[0x8]; // 0x88(0x08)
	struct FExpressionInput WorldHeight; // 0x90(0x0c)
	char pad_9C[0x8]; // 0x9c(0x08)
	struct FExpressionInput Opacity; // 0xa4(0x0c)
	char pad_B0[0x8]; // 0xb0(0x08)
	struct FExpressionInput Mask; // 0xb8(0x0c)
	char pad_C4[0xc]; // 0xc4(0x0c)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionRuntimeVirtualTextureReplace : UMaterialExpression {
	struct FExpressionInput Default; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput VirtualTextureOutput; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionRuntimeVirtualTextureSample : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput WorldPosition; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FExpressionInput MipValue; // 0x68(0x0c)
	char pad_74[0xc]; // 0x74(0x0c)
	struct URuntimeVirtualTexture* VirtualTexture; // 0x80(0x08)
	enum class ERuntimeVirtualTextureMaterialType MaterialType; // 0x88(0x01)
	bool bSinglePhysicalSpace; // 0x89(0x01)
	enum class ERuntimeVirtualTextureMipValueMode MipValueMode; // 0x8a(0x01)
	char pad_8B[0x5]; // 0x8b(0x05)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
// Size: 0xb0 (Inherited: 0x90)
struct UMaterialExpressionRuntimeVirtualTextureSampleParameter : UMaterialExpressionRuntimeVirtualTextureSample {
	struct FName ParameterName; // 0x90(0x08)
	struct FGuid ExpressionGUID; // 0x98(0x10)
	struct FName Group; // 0xa8(0x08)
};

// Class Engine.MaterialExpressionSaturate
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSaturate : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionSceneColor
// Size: 0x78 (Inherited: 0x40)
struct UMaterialExpressionSceneColor : UMaterialExpression {
	enum class EMaterialSceneAttributeInputMode InputMode; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FExpressionInput Input; // 0x44(0x0c)
	char pad_50[0x8]; // 0x50(0x08)
	struct FExpressionInput OffsetFraction; // 0x58(0x0c)
	char pad_64[0x8]; // 0x64(0x08)
	struct FVector2D ConstInput; // 0x6c(0x08)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class Engine.MaterialExpressionSceneDepth
// Size: 0x78 (Inherited: 0x40)
struct UMaterialExpressionSceneDepth : UMaterialExpression {
	enum class EMaterialSceneAttributeInputMode InputMode; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FExpressionInput Input; // 0x44(0x0c)
	char pad_50[0x8]; // 0x50(0x08)
	struct FExpressionInput Coordinates; // 0x58(0x0c)
	char pad_64[0x8]; // 0x64(0x08)
	struct FVector2D ConstInput; // 0x6c(0x08)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class Engine.MaterialExpressionSceneTexelSize
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionSceneTexelSize : UMaterialExpression {
};

// Class Engine.MaterialExpressionSceneTexture
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSceneTexture : UMaterialExpression {
	struct FExpressionInput Coordinates; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	enum class ESceneTextureId SceneTextureId; // 0x54(0x01)
	bool bFiltered; // 0x55(0x01)
	char pad_56[0x2]; // 0x56(0x02)
};

// Class Engine.MaterialExpressionScreenPosition
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionScreenPosition : UMaterialExpression {
};

// Class Engine.MaterialExpressionSetMaterialAttributes
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionSetMaterialAttributes : UMaterialExpression {
	struct TArray<struct FExpressionInput> Inputs; // 0x40(0x10)
	struct TArray<struct FGuid> AttributeSetTypes; // 0x50(0x10)
};

// Class Engine.MaterialExpressionShaderStageSwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionShaderStageSwitch : UMaterialExpression {
	struct FExpressionInput PixelShader; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput VertexShader; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionShadingModel
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionShadingModel : UMaterialExpression {
	enum class EMaterialShadingModel ShadingModel; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.MaterialExpressionShadingPathSwitch
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionShadingPathSwitch : UMaterialExpression {
	struct FExpressionInput Default; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Inputs[0x3]; // 0x54(0x24)
	char pad_78[0x18]; // 0x78(0x18)
};

// Class Engine.MaterialExpressionShadowReplace
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionShadowReplace : UMaterialExpression {
	struct FExpressionInput Default; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Shadow; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionSign
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSign : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionSine
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSine : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	float Period; // 0x54(0x04)
};

// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
// Size: 0x80 (Inherited: 0x40)
struct UMaterialExpressionSingleLayerWaterMaterialOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput ScatteringCoefficients; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput AbsorptionCoefficients; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FExpressionInput PhaseG; // 0x68(0x0c)
	char pad_74[0xc]; // 0x74(0x0c)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereLightDirection : UMaterialExpression {
	int32_t LightIndex; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereLightIlluminance : UMaterialExpression {
	int32_t LightIndex; // 0x40(0x04)
	struct FExpressionInput WorldPosition; // 0x44(0x0c)
	char pad_50[0x8]; // 0x50(0x08)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereLightDiskLuminance : UMaterialExpression {
	int32_t LightIndex; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereAerialPerspective : UMaterialExpression {
	struct FExpressionInput WorldPosition; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : UMaterialExpression {
};

// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereViewLuminance : UMaterialExpression {
};

// Class Engine.MaterialExpressionSobol
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionSobol : UMaterialExpression {
	struct FExpressionInput cell; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Index; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FExpressionInput Seed; // 0x68(0x0c)
	char pad_74[0x8]; // 0x74(0x08)
	uint32_t ConstIndex; // 0x7c(0x04)
	struct FVector2D ConstSeed; // 0x80(0x08)
};

// Class Engine.MaterialExpressionSpeedTree
// Size: 0xa0 (Inherited: 0x40)
struct UMaterialExpressionSpeedTree : UMaterialExpression {
	struct FExpressionInput GeometryInput; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput WindInput; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FExpressionInput LODInput; // 0x68(0x0c)
	char pad_74[0x8]; // 0x74(0x08)
	struct FExpressionInput ExtraBendWS; // 0x7c(0x0c)
	char pad_88[0x8]; // 0x88(0x08)
	enum class ESpeedTreeGeometryType GeometryType; // 0x90(0x01)
	enum class ESpeedTreeWindType WindType; // 0x91(0x01)
	enum class ESpeedTreeLODType LODType; // 0x92(0x01)
	char pad_93[0x1]; // 0x93(0x01)
	float BillboardThreshold; // 0x94(0x04)
	bool bAccurateWindVelocities; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Engine.MaterialExpressionSphereMask
// Size: 0x98 (Inherited: 0x40)
struct UMaterialExpressionSphereMask : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput B; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	struct FExpressionInput Radius; // 0x68(0x0c)
	char pad_74[0x8]; // 0x74(0x08)
	struct FExpressionInput Hardness; // 0x7c(0x0c)
	char pad_88[0x8]; // 0x88(0x08)
	float AttenuationRadius; // 0x90(0x04)
	float HardnessPercent; // 0x94(0x04)
};

// Class Engine.MaterialExpressionSphericalParticleOpacity
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSphericalParticleOpacity : UMaterialExpression {
	struct FExpressionInput Density; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	float ConstantDensity; // 0x54(0x04)
};

// Class Engine.MaterialExpressionSquareRoot
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSquareRoot : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionStaticBool
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionStaticBool : UMaterialExpression {
	char Value : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.MaterialExpressionStaticBoolParameter
// Size: 0x60 (Inherited: 0x58)
struct UMaterialExpressionStaticBoolParameter : UMaterialExpressionParameter {
	char DefaultValue : 1; // 0x58(0x01)
	char pad_58_1 : 7; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
};

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// Size: 0x70 (Inherited: 0x58)
struct UMaterialExpressionStaticComponentMaskParameter : UMaterialExpressionParameter {
	struct FExpressionInput Input; // 0x58(0x0c)
	char pad_64[0x8]; // 0x64(0x08)
	char DefaultR : 1; // 0x6c(0x01)
	char DefaultG : 1; // 0x6c(0x01)
	char DefaultB : 1; // 0x6c(0x01)
	char DefaultA : 1; // 0x6c(0x01)
	char pad_6C_4 : 4; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)
};

// Class Engine.MaterialExpressionStaticSwitch
// Size: 0x80 (Inherited: 0x40)
struct UMaterialExpressionStaticSwitch : UMaterialExpression {
	char DefaultValue : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FExpressionInput A; // 0x44(0x0c)
	char pad_50[0x8]; // 0x50(0x08)
	struct FExpressionInput B; // 0x58(0x0c)
	char pad_64[0x8]; // 0x64(0x08)
	struct FExpressionInput Value; // 0x6c(0x0c)
	char pad_78[0x8]; // 0x78(0x08)
};

// Class Engine.MaterialExpressionStaticSwitchParameter
// Size: 0x88 (Inherited: 0x60)
struct UMaterialExpressionStaticSwitchParameter : UMaterialExpressionStaticBoolParameter {
	struct FExpressionInput A; // 0x60(0x0c)
	char pad_6C[0x8]; // 0x6c(0x08)
	struct FExpressionInput B; // 0x74(0x0c)
	char pad_80[0x8]; // 0x80(0x08)
};

// Class Engine.MaterialExpressionSubtract
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionSubtract : UMaterialExpression {
	struct FExpressionInput A; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput B; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	float ConstA; // 0x68(0x04)
	float ConstB; // 0x6c(0x04)
};

// Class Engine.MaterialExpressionTangent
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTangent : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	float Period; // 0x54(0x04)
};

// Class Engine.MaterialExpressionTangentOutput
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTangentOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionTemporalSobol
// Size: 0x78 (Inherited: 0x40)
struct UMaterialExpressionTemporalSobol : UMaterialExpression {
	struct FExpressionInput Index; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Seed; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
	uint32_t ConstIndex; // 0x68(0x04)
	struct FVector2D ConstSeed; // 0x6c(0x08)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class Engine.MaterialExpressionTextureCoordinate
// Size: 0x50 (Inherited: 0x40)
struct UMaterialExpressionTextureCoordinate : UMaterialExpression {
	int32_t CoordinateIndex; // 0x40(0x04)
	float UTiling; // 0x44(0x04)
	float VTiling; // 0x48(0x04)
	char UnMirrorU : 1; // 0x4c(0x01)
	char UnMirrorV : 1; // 0x4c(0x01)
	char pad_4C_2 : 6; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
};

// Class Engine.MaterialExpressionTextureObject
// Size: 0x50 (Inherited: 0x50)
struct UMaterialExpressionTextureObject : UMaterialExpressionTextureBase {
};

// Class Engine.MaterialExpressionTextureObjectParameter
// Size: 0xf0 (Inherited: 0xf0)
struct UMaterialExpressionTextureObjectParameter : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionTextureProperty
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTextureProperty : UMaterialExpression {
	struct FExpressionInput TextureObject; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	enum class EMaterialExposedTextureProperty Property; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
};

// Class Engine.MaterialExpressionTextureSampleParameter2DArray
// Size: 0xf0 (Inherited: 0xf0)
struct UMaterialExpressionTextureSampleParameter2DArray : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionTextureSampleParameterCube
// Size: 0xf0 (Inherited: 0xf0)
struct UMaterialExpressionTextureSampleParameterCube : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// Size: 0xf8 (Inherited: 0xf0)
struct UMaterialExpressionTextureSampleParameterSubUV : UMaterialExpressionTextureSampleParameter2D {
	char bBlend : 1; // 0xf0(0x01)
	char pad_F0_1 : 7; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
};

// Class Engine.MaterialExpressionTextureSampleParameterVolume
// Size: 0xf0 (Inherited: 0xf0)
struct UMaterialExpressionTextureSampleParameterVolume : UMaterialExpressionTextureSampleParameter {
};

// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionThinTranslucentMaterialOutput : UMaterialExpressionCustomOutput {
	struct FExpressionInput TransmittanceColor; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionTime
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionTime : UMaterialExpression {
	char bIgnorePause : 1; // 0x40(0x01)
	char bOverride_Period : 1; // 0x40(0x01)
	char pad_40_2 : 6; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float Period; // 0x44(0x04)
};

// Class Engine.MaterialExpressionTransform
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTransform : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	enum class EMaterialVectorCoordTransformSource TransformSourceType; // 0x54(0x01)
	enum class EMaterialVectorCoordTransform TransformType; // 0x55(0x01)
	char pad_56[0x2]; // 0x56(0x02)
};

// Class Engine.MaterialExpressionTransformPosition
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTransformPosition : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	enum class EMaterialPositionTransformSource TransformSourceType; // 0x54(0x01)
	enum class EMaterialPositionTransformSource TransformType; // 0x55(0x01)
	char pad_56[0x2]; // 0x56(0x02)
};

// Class Engine.MaterialExpressionTruncate
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTruncate : UMaterialExpression {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0xc]; // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionTwoSidedSign
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionTwoSidedSign : UMaterialExpression {
};

// Class Engine.MaterialExpressionVectorNoise
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionVectorNoise : UMaterialExpression {
	struct FExpressionInput Position; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	enum class EVectorNoiseFunction NoiseFunction; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	int32_t Quality; // 0x58(0x04)
	char bTiling : 1; // 0x5c(0x01)
	char pad_5C_1 : 7; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	uint32_t TileSize; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class Engine.MaterialExpressionVertexColor
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionVertexColor : UMaterialExpression {
};

// Class Engine.MaterialExpressionVertexInterpolator
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionVertexInterpolator : UMaterialExpressionCustomOutput {
	struct FExpressionInput Input; // 0x40(0x0c)
	char pad_4C[0x14]; // 0x4c(0x14)
};

// Class Engine.MaterialExpressionVertexNormalWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionVertexNormalWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionVertexTangentWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionVertexTangentWS : UMaterialExpression {
};

// Class Engine.MaterialExpressionViewProperty
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionViewProperty : UMaterialExpression {
	enum class EMaterialExposedViewProperty Property; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.MaterialExpressionViewSize
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionViewSize : UMaterialExpression {
};

// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionVirtualTextureFeatureSwitch : UMaterialExpression {
	struct FExpressionInput No; // 0x40(0x0c)
	char pad_4C[0x8]; // 0x4c(0x08)
	struct FExpressionInput Yes; // 0x54(0x0c)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class Engine.MaterialExpressionWorldPosition
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionWorldPosition : UMaterialExpression {
	enum class EWorldPositionIncludedOffsets WorldPositionShaderOffset; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.MaterialFunctionInterface
// Size: 0x40 (Inherited: 0x28)
struct UMaterialFunctionInterface : UObject {
	struct FGuid StateID; // 0x28(0x10)
	enum class EMaterialFunctionUsage MaterialFunctionUsage; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.MaterialFunction
// Size: 0x58 (Inherited: 0x40)
struct UMaterialFunction : UMaterialFunctionInterface {
	struct FString Description; // 0x40(0x10)
	char bExposeToLibrary : 1; // 0x50(0x01)
	char bPrefixParameterNames : 1; // 0x50(0x01)
	char bReentrantFlag : 1; // 0x50(0x01)
	char pad_50_3 : 5; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Engine.MaterialFunctionInstance
// Size: 0xc0 (Inherited: 0x40)
struct UMaterialFunctionInstance : UMaterialFunctionInterface {
	struct UMaterialFunctionInterface* Parent; // 0x40(0x08)
	struct UMaterialFunctionInterface* Base; // 0x48(0x08)
	struct TArray<struct FScalarParameterValue> ScalarParameterValues; // 0x50(0x10)
	struct TArray<struct FVectorParameterValue> VectorParameterValues; // 0x60(0x10)
	struct TArray<struct FTextureParameterValue> TextureParameterValues; // 0x70(0x10)
	struct TArray<struct FFontParameterValue> FontParameterValues; // 0x80(0x10)
	struct TArray<struct FStaticSwitchParameter> StaticSwitchParameterValues; // 0x90(0x10)
	struct TArray<struct FStaticComponentMaskParameter> StaticComponentMaskParameterValues; // 0xa0(0x10)
	struct TArray<struct FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0xb0(0x10)
};

// Class Engine.MaterialFunctionMaterialLayer
// Size: 0x58 (Inherited: 0x58)
struct UMaterialFunctionMaterialLayer : UMaterialFunction {
};

// Class Engine.MaterialFunctionMaterialLayerInstance
// Size: 0xc0 (Inherited: 0xc0)
struct UMaterialFunctionMaterialLayerInstance : UMaterialFunctionInstance {
};

// Class Engine.MaterialFunctionMaterialLayerBlend
// Size: 0x58 (Inherited: 0x58)
struct UMaterialFunctionMaterialLayerBlend : UMaterialFunction {
};

// Class Engine.MaterialFunctionMaterialLayerBlendInstance
// Size: 0xc0 (Inherited: 0xc0)
struct UMaterialFunctionMaterialLayerBlendInstance : UMaterialFunctionInstance {
};

// Class Engine.MaterialInstanceActor
// Size: 0x330 (Inherited: 0x320)
struct AMaterialInstanceActor : AActor {
	struct TArray<struct AActor*> TargetActors; // 0x320(0x10)
};

// Class Engine.MaterialInstanceDynamic
// Size: 0x458 (Inherited: 0x408)
struct UMaterialInstanceDynamic : UMaterialInstance {
	char pad_408[0x50]; // 0x408(0x50)

	void SetVectorParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, struct FLinearColor Value); // Function Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d767b0
	void SetVectorParameterValue(struct FName ParameterName, struct FLinearColor Value); // Function Engine.MaterialInstanceDynamic.SetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d766e0
	void SetTextureParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, struct UTexture* Value); // Function Engine.MaterialInstanceDynamic.SetTextureParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3d765f0
	void SetTextureParameterValue(struct FName ParameterName, struct UTexture* Value); // Function Engine.MaterialInstanceDynamic.SetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3d76530
	void SetScalarParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo, float Value); // Function Engine.MaterialInstanceDynamic.SetScalarParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3d76440
	void SetScalarParameterValue(struct FName ParameterName, float Value); // Function Engine.MaterialInstanceDynamic.SetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3d76370
	void K2_InterpolateMaterialInstanceParams(struct UMaterialInstance* SourceA, struct UMaterialInstance* SourceB, float ALPHA); // Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams // (Final|Native|Public|BlueprintCallable) // @ game+0x3d760c0
	struct FLinearColor K2_GetVectorParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValueByInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d76010
	struct FLinearColor K2_GetVectorParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d75f70
	struct UTexture* K2_GetTextureParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3d75e20
	struct UTexture* K2_GetTextureParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3d75d90
	float K2_GetScalarParameterValueByInfo(struct FMaterialParameterInfo& ParameterInfo); // Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValueByInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3d75c50
	float K2_GetScalarParameterValue(struct FName ParameterName); // Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue // (Final|Native|Public|BlueprintCallable) // @ game+0x3d75bb0
	void K2_CopyMaterialInstanceParameters(struct UMaterialInterface* Source, bool bQuickParametersOnly); // Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters // (Final|Native|Public|BlueprintCallable) // @ game+0x3d75a40
	void CopyParameterOverrides(struct UMaterialInstance* MaterialInstance); // Function Engine.MaterialInstanceDynamic.CopyParameterOverrides // (Final|Native|Public|BlueprintCallable) // @ game+0x3d757e0
	void CopyInterpParameters(struct UMaterialInstance* Source); // Function Engine.MaterialInstanceDynamic.CopyInterpParameters // (Final|Native|Public) // @ game+0x3d75760
};

// Class Engine.MaterialParameterCollection
// Size: 0x78 (Inherited: 0x28)
struct UMaterialParameterCollection : UObject {
	struct FGuid StateID; // 0x28(0x10)
	struct TArray<struct FCollectionScalarParameter> ScalarParameters; // 0x38(0x10)
	struct TArray<struct FCollectionVectorParameter> VectorParameters; // 0x48(0x10)
	char pad_58[0x20]; // 0x58(0x20)
};

// Class Engine.MaterialParameterCollectionInstance
// Size: 0xf0 (Inherited: 0x28)
struct UMaterialParameterCollectionInstance : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct UMaterialParameterCollection* Collection; // 0x30(0x08)
	char pad_38[0xb8]; // 0x38(0xb8)
};

// Class Engine.MatineeActor
// Size: 0x3c8 (Inherited: 0x320)
struct AMatineeActor : AActor {
	struct UInterpData* MatineeData; // 0x320(0x08)
	struct FName MatineeControllerName; // 0x328(0x08)
	float PlayRate; // 0x330(0x04)
	char bPlayOnLevelLoad : 1; // 0x334(0x01)
	char bForceStartPos : 1; // 0x334(0x01)
	char pad_334_2 : 6; // 0x334(0x01)
	char pad_335[0x3]; // 0x335(0x03)
	float ForceStartPosition; // 0x338(0x04)
	char bLooping : 1; // 0x33c(0x01)
	char bRewindOnPlay : 1; // 0x33c(0x01)
	char bNoResetOnRewind : 1; // 0x33c(0x01)
	char bRewindIfAlreadyPlaying : 1; // 0x33c(0x01)
	char bDisableRadioFilter : 1; // 0x33c(0x01)
	char bClientSideOnly : 1; // 0x33c(0x01)
	char bSkipUpdateIfNotVisible : 1; // 0x33c(0x01)
	char bIsSkippable : 1; // 0x33c(0x01)
	char pad_33D[0x3]; // 0x33d(0x03)
	int32_t PreferredSplitScreenNum; // 0x340(0x04)
	char bDisableMovementInput : 1; // 0x344(0x01)
	char bDisableLookAtInput : 1; // 0x344(0x01)
	char bHidePlayer : 1; // 0x344(0x01)
	char bHideHud : 1; // 0x344(0x01)
	char pad_344_4 : 4; // 0x344(0x01)
	char pad_345[0x3]; // 0x345(0x03)
	struct TArray<struct FInterpGroupActorInfo> GroupActorInfos; // 0x348(0x10)
	char bShouldShowGore : 1; // 0x358(0x01)
	char pad_358_1 : 7; // 0x358(0x01)
	char pad_359[0x7]; // 0x359(0x07)
	struct TArray<struct UInterpGroupInst*> GroupInst; // 0x360(0x10)
	struct TArray<struct FCameraCutInfo> CameraCuts; // 0x370(0x10)
	char bIsPlaying : 1; // 0x380(0x01)
	char bReversePlayback : 1; // 0x380(0x01)
	char bPaused : 1; // 0x380(0x01)
	char bPendingStop : 1; // 0x380(0x01)
	char pad_380_4 : 4; // 0x380(0x01)
	char pad_381[0x3]; // 0x381(0x03)
	float InterpPosition; // 0x384(0x04)
	char pad_388[0x4]; // 0x388(0x04)
	char ReplicationForceIsPlaying; // 0x38c(0x01)
	char pad_38D[0x3]; // 0x38d(0x03)
	struct FMulticastInlineDelegate OnPlay; // 0x390(0x10)
	struct FMulticastInlineDelegate OnStop; // 0x3a0(0x10)
	struct FMulticastInlineDelegate OnPause; // 0x3b0(0x10)
	char pad_3C0[0x8]; // 0x3c0(0x08)

	void Stop(); // Function Engine.MatineeActor.Stop // (Native|Public|BlueprintCallable) // @ game+0x1f11ef0
	void SetPosition(float NewPosition, bool bJump); // Function Engine.MatineeActor.SetPosition // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7a5f0
	void SetLoopingState(bool bNewLooping); // Function Engine.MatineeActor.SetLoopingState // (Native|Public|BlueprintCallable) // @ game+0x3d7a560
	void Reverse(); // Function Engine.MatineeActor.Reverse // (Native|Public|BlueprintCallable) // @ game+0x1f10660
	void Play(); // Function Engine.MatineeActor.Play // (Native|Public|BlueprintCallable) // @ game+0x1237ce0
	void Pause(); // Function Engine.MatineeActor.Pause // (Native|Public|BlueprintCallable) // @ game+0x11cd620
	void EnableGroupByName(struct FString GroupName, bool bEnable); // Function Engine.MatineeActor.EnableGroupByName // (Final|Native|Public|BlueprintCallable) // @ game+0x3d7a000
	void ChangePlaybackDirection(); // Function Engine.MatineeActor.ChangePlaybackDirection // (Native|Public|BlueprintCallable) // @ game+0x3c7d630
};

// Class Engine.MatineeActorCameraAnim
// Size: 0x3d0 (Inherited: 0x3c8)
struct AMatineeActorCameraAnim : AMatineeActor {
	struct UCameraAnim* CameraAnim; // 0x3c8(0x08)
};

// Class Engine.MatineeAnimInterface
// Size: 0x28 (Inherited: 0x28)
struct UMatineeAnimInterface : UInterface {
};

// Class Engine.MatineeInterface
// Size: 0x28 (Inherited: 0x28)
struct UMatineeInterface : UInterface {
};

// Class Engine.MeshMergeCullingVolume
// Size: 0x358 (Inherited: 0x358)
struct AMeshMergeCullingVolume : AVolume {
};

// Class Engine.MeshSimplificationSettings
// Size: 0x40 (Inherited: 0x38)
struct UMeshSimplificationSettings : UDeveloperSettings {
	struct FName MeshReductionModuleName; // 0x38(0x08)
};

// Class Engine.MeshVertexPainterKismetLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMeshVertexPainterKismetLibrary : UBlueprintFunctionLibrary {

	void RemovePaintedVertices(struct UStaticMeshComponent* StaticMeshComponent); // Function Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d7e150
	void PaintVerticesSingleColor(struct UStaticMeshComponent* StaticMeshComponent, struct FLinearColor& FillColor, bool bConvertToSRGB); // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d7df50
	void PaintVerticesLerpAlongAxis(struct UStaticMeshComponent* StaticMeshComponent, struct FLinearColor& StartColor, struct FLinearColor& EndColor, enum class EVertexPaintAxis Axis, bool bConvertToSRGB); // Function Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3d7dda0
};

// Class Engine.MicroTransactionBase
// Size: 0x68 (Inherited: 0x38)
struct UMicroTransactionBase : UPlatformInterfaceBase {
	struct TArray<struct FPurchaseInfo> AvailableProducts; // 0x38(0x10)
	struct FString LastError; // 0x48(0x10)
	struct FString LastErrorSolution; // 0x58(0x10)
};

// Class Engine.MK3DKillcamComponent
// Size: 0x110 (Inherited: 0xb0)
struct UMK3DKillcamComponent : UActorComponent {
	struct FMulticastInlineDelegate OnMK3DKillcamCompleteEvent; // 0xb0(0x10)
	char pad_C0[0x18]; // 0xc0(0x18)
	struct TArray<struct FMK3DHighlightKillEvent> MK3DKillEvents; // 0xd8(0x10)
	float KillcamBeforeSec; // 0xe8(0x04)
	float KillcamAfterSec; // 0xec(0x04)
	char pad_F0[0x20]; // 0xf0(0x20)

	void OnJumpCompleteForKillcam(bool bSuccess); // Function Engine.MK3DKillcamComponent.OnJumpCompleteForKillcam // (Final|Native|Public) // @ game+0x3d7dd10
};

// Class Engine.MK3DTargetcamComponent
// Size: 0x100 (Inherited: 0xb0)
struct UMK3DTargetcamComponent : UActorComponent {
	struct FMulticastInlineDelegate OnMK3DTargetcamCompleteEvent; // 0xb0(0x10)
	char pad_C0[0x18]; // 0xc0(0x18)
	struct TArray<struct FMK3DHighlightTargetEvent> MK3DTargetEvents; // 0xd8(0x10)
	char pad_E8[0x18]; // 0xe8(0x18)

	void EnumerateMK3DTargetEvents(struct UWorld* World); // Function Engine.MK3DTargetcamComponent.EnumerateMK3DTargetEvents // (Final|Native|Public) // @ game+0x3d81600
};

// Class Engine.MKDemoActorChannel
// Size: 0x318 (Inherited: 0x2d0)
struct UMKDemoActorChannel : UActorChannel {
	char pad_2D0[0x20]; // 0x2d0(0x20)
	struct TArray<struct UObject*> PendingNetObjectsHolder; // 0x2f0(0x10)
	char pad_300[0x18]; // 0x300(0x18)
};

// Class Engine.ReplaySampleBase
// Size: 0x38 (Inherited: 0x28)
struct UReplaySampleBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	char DataVersion; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float Time; // 0x34(0x04)

	struct UReplaySampleBase* MakeReplaySample(struct AActor* Actor); // Function Engine.ReplaySampleBase.MakeReplaySample // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3d82780
};

// Class Engine.MKUtils
// Size: 0x28 (Inherited: 0x28)
struct UMKUtils : UBlueprintFunctionLibrary {

	bool IsViewTargetPawn(struct APawn* InPawn, struct APlayerController* InPC); // Function Engine.MKUtils.IsViewTargetPawn // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d82500
	bool IsReplaying(struct UObject* WorldContextObject); // Function Engine.MKUtils.IsReplaying // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d82480
	bool IsRecordingReplay(struct UObject* WorldContextObject); // Function Engine.MKUtils.IsRecordingReplay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d82400
	bool IsPlayingReplay(struct UObject* WorldContextObject); // Function Engine.MKUtils.IsPlayingReplay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d82380
	bool IsPlayingLiveReplay(struct UObject* WorldContextObject); // Function Engine.MKUtils.IsPlayingLiveReplay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d82300
	bool IsPlayingKillcam(struct UObject* WorldContextObject); // Function Engine.MKUtils.IsPlayingKillcam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d82280
	bool IsPausedReplay(struct UObject* WorldContextObject); // Function Engine.MKUtils.IsPausedReplay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d82200
	struct UWorld* GetWorld(struct UObject* WorldContextObject); // Function Engine.MKUtils.GetWorld // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d82180
	struct APawn* GetViewTargetPawn(struct UObject* WorldContextObject, struct APlayerController* InPC); // Function Engine.MKUtils.GetViewTargetPawn // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d820c0
	struct ACharacter* GetViewTargetCharacter(struct UObject* WorldContextObject, struct APlayerController* InPC); // Function Engine.MKUtils.GetViewTargetCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d82000
	struct FString GetNetGUIDForReplay(struct AActor* InActor); // Function Engine.MKUtils.GetNetGUIDForReplay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d81d60
	struct FString GetHumanReadableSizeWithPrecision(int32_t Size, int32_t Precision, bool IncludeLeadingZero); // Function Engine.MKUtils.GetHumanReadableSizeWithPrecision // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d81c30
	struct FText GetFloatAsTextWithPrecision(float TheFloat, int32_t Precision, bool IncludeLeadingZero); // Function Engine.MKUtils.GetFloatAsTextWithPrecision // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d81ad0
	struct FString GetFloatAsStringWithPrecision(float TheFloat, int32_t Precision, bool IncludeLeadingZero); // Function Engine.MKUtils.GetFloatAsStringWithPrecision // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d81990
	struct APlayerController* GetFirstPlayerController(struct UObject* WorldContextObject, struct UWorld* InWorld); // Function Engine.MKUtils.GetFirstPlayerController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d818d0
	float GetDemoCurrentTime(struct UObject* WorldContextObject); // Function Engine.MKUtils.GetDemoCurrentTime // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d81840
};

// Class Engine.ModelComponent
// Size: 0x4e0 (Inherited: 0x4a0)
struct UModelComponent : UPrimitiveComponent {
	char pad_4A0[0x18]; // 0x4a0(0x18)
	struct UBodySetup* ModelBodySetup; // 0x4b8(0x08)
	char pad_4C0[0x20]; // 0x4c0(0x20)
};

// Class Engine.MorphTarget
// Size: 0x40 (Inherited: 0x28)
struct UMorphTarget : UObject {
	struct USkeletalMesh* BaseSkelMesh; // 0x28(0x08)
	char pad_30[0x10]; // 0x30(0x10)
};

// Class Engine.NavAgentInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavAgentInterface : UInterface {
};

// Class Engine.NavAreaBase
// Size: 0x30 (Inherited: 0x28)
struct UNavAreaBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.NavCollisionBase
// Size: 0x70 (Inherited: 0x28)
struct UNavCollisionBase : UObject {
	char bIsDynamicObstacle : 1; // 0x28(0x01)
	char pad_28_1 : 7; // 0x28(0x01)
	char pad_29[0x47]; // 0x29(0x47)
};

// Class Engine.NavEdgeProviderInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavEdgeProviderInterface : UInterface {
};

// Class Engine.NavigationDataChunk
// Size: 0x30 (Inherited: 0x28)
struct UNavigationDataChunk : UObject {
	struct FName NavigationDataName; // 0x28(0x08)
};

// Class Engine.NavigationDataInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavigationDataInterface : UInterface {
};

// Class Engine.NavigationSystemBase
// Size: 0x28 (Inherited: 0x28)
struct UNavigationSystemBase : UObject {
};

// Class Engine.NavigationSystemConfig
// Size: 0x50 (Inherited: 0x28)
struct UNavigationSystemConfig : UObject {
	struct FSoftClassPath NavigationSystemClass; // 0x28(0x18)
	struct FNavAgentSelector SupportedAgentsMask; // 0x40(0x04)
	struct FName DefaultAgentName; // 0x44(0x08)
	char bIsOverriden : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
};

// Class Engine.NullNavSysConfig
// Size: 0x50 (Inherited: 0x50)
struct UNullNavSysConfig : UNavigationSystemConfig {
};

// Class Engine.NavLinkDefinition
// Size: 0x50 (Inherited: 0x28)
struct UNavLinkDefinition : UObject {
	struct TArray<struct FNavigationLink> LINKS; // 0x28(0x10)
	struct TArray<struct FNavigationSegmentLink> SegmentLinks; // 0x38(0x10)
	char pad_48[0x8]; // 0x48(0x08)
};

// Class Engine.NavPathObserverInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavPathObserverInterface : UInterface {
};

// Class Engine.NavRelevantInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavRelevantInterface : UInterface {
};

// Class Engine.SimulatedClientNetConnection
// Size: 0x1aa0 (Inherited: 0x1aa0)
struct USimulatedClientNetConnection : UNetConnection {
};

// Class Engine.NetPushModelHelpers
// Size: 0x28 (Inherited: 0x28)
struct UNetPushModelHelpers : UBlueprintFunctionLibrary {

	void MarkPropertyDirtyFromRepIndex(struct UObject* Object, int32_t RepIndex, struct FName PropertyName); // Function Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d8c190
	void MarkPropertyDirty(struct UObject* Object, struct FName PropertyName); // Function Engine.NetPushModelHelpers.MarkPropertyDirty // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d8c0e0
};

// Class Engine.NetworkPredictionInterface
// Size: 0x28 (Inherited: 0x28)
struct UNetworkPredictionInterface : UInterface {
};

// Class Engine.NetworkSettings
// Size: 0x58 (Inherited: 0x38)
struct UNetworkSettings : UDeveloperSettings {
	char bVerifyPeer : 1; // 0x38(0x01)
	char bEnableMultiplayerWorldOriginRebasing : 1; // 0x38(0x01)
	char pad_38_2 : 6; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int32_t MaxRepArraySize; // 0x3c(0x04)
	int32_t MaxRepArrayMemory; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct TArray<struct FNetworkEmulationProfileDescription> NetworkEmulationProfiles; // 0x48(0x10)
};

// Class Engine.NodeMappingContainer
// Size: 0x168 (Inherited: 0x28)
struct UNodeMappingContainer : UObject {
	struct TMap<struct FName, struct FNodeItem> SourceItems; // 0x28(0x50)
	struct TMap<struct FName, struct FNodeItem> TargetItems; // 0x78(0x50)
	struct TMap<struct FName, struct FName> SourceToTarget; // 0xc8(0x50)
	struct TSoftObjectPtr<UObject> SourceAsset; // 0x118(0x28)
	struct TSoftObjectPtr<UObject> TargetAsset; // 0x140(0x28)
};

// Class Engine.NodeMappingProviderInterface
// Size: 0x28 (Inherited: 0x28)
struct UNodeMappingProviderInterface : UInterface {
};

// Class Engine.Note
// Size: 0x320 (Inherited: 0x320)
struct ANote : AActor {
};

// Class Engine.ObjectLibrary
// Size: 0xa8 (Inherited: 0x28)
struct UObjectLibrary : UObject {
	struct UObject* ObjectBaseClass; // 0x28(0x08)
	bool bHasBlueprintClasses; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct UObject*> Objects; // 0x38(0x10)
	struct TArray<struct TWeakObjectPtr<struct UObject>> WeakObjects; // 0x48(0x10)
	bool bUseWeakReferences; // 0x58(0x01)
	bool bIsFullyLoaded; // 0x59(0x01)
	char pad_5A[0x4e]; // 0x5a(0x4e)
};

// Class Engine.ObjectReferencer
// Size: 0x38 (Inherited: 0x28)
struct UObjectReferencer : UObject {
	struct TArray<struct UObject*> ReferencedObjects; // 0x28(0x10)
};

// Class Engine.ObjectTraceWorldSubsystem
// Size: 0x38 (Inherited: 0x30)
struct UObjectTraceWorldSubsystem : UWorldSubsystem {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class Engine.PackageMapClient
// Size: 0x3f8 (Inherited: 0xe0)
struct UPackageMapClient : UPackageMap {
	char pad_E0[0x318]; // 0xe0(0x318)
};

// Class Engine.PainCausingVolume
// Size: 0x390 (Inherited: 0x368)
struct APainCausingVolume : APhysicsVolume {
	char bPainCausing : 1; // 0x368(0x01)
	char pad_368_1 : 7; // 0x368(0x01)
	char pad_369[0x3]; // 0x369(0x03)
	float DamagePerSec; // 0x36c(0x04)
	struct UDamageType* DamageType; // 0x370(0x08)
	float PainInterval; // 0x378(0x04)
	char bEntryPain : 1; // 0x37c(0x01)
	char BACKUP_bPainCausing : 1; // 0x37c(0x01)
	char pad_37C_2 : 6; // 0x37c(0x01)
	char pad_37D[0x3]; // 0x37d(0x03)
	struct AController* DamageInstigator; // 0x380(0x08)
	char pad_388[0x8]; // 0x388(0x08)
};

// Class Engine.ParticleEmitter
// Size: 0x1b8 (Inherited: 0x28)
struct UParticleEmitter : UObject {
	struct FName EmitterName; // 0x28(0x08)
	int32_t SubUVDataOffset; // 0x30(0x04)
	enum class EEmitterRenderMode EmitterRenderMode; // 0x34(0x01)
	enum class EParticleSignificanceLevel SignificanceLevel; // 0x35(0x01)
	char pad_36[0x1]; // 0x36(0x01)
	char bUseLegacySpawningBehavior : 1; // 0x37(0x01)
	char pad_37_1 : 3; // 0x37(0x01)
	char ConvertedModules : 1; // 0x37(0x01)
	char bIsSoloing : 1; // 0x37(0x01)
	char bCookedOut : 1; // 0x37(0x01)
	char bDisabledLODsKeepEmitterAlive : 1; // 0x37(0x01)
	char bDisableWhenInsignficant : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct TArray<struct UParticleLODLevel*> LODLevels; // 0x40(0x10)
	int32_t PeakActiveParticles; // 0x50(0x04)
	int32_t InitialAllocationCount; // 0x54(0x04)
	float QualityLevelSpawnRateScale; // 0x58(0x04)
	uint32_t DetailModeBitmask; // 0x5c(0x04)
	char pad_60[0x158]; // 0x60(0x158)
};

// Class Engine.ParticleEventManager
// Size: 0x320 (Inherited: 0x320)
struct AParticleEventManager : AActor {
};

// Class Engine.ParticleLODLevel
// Size: 0xb8 (Inherited: 0x28)
struct UParticleLODLevel : UObject {
	int32_t Level; // 0x28(0x04)
	char bEnabled : 1; // 0x2c(0x01)
	char pad_2C_1 : 7; // 0x2c(0x01)
	char pad_2D[0x3]; // 0x2d(0x03)
	struct UParticleModuleRequired* RequiredModule; // 0x30(0x08)
	struct TArray<struct UParticleModule*> Modules; // 0x38(0x10)
	struct UParticleModuleTypeDataBase* TypeDataModule; // 0x48(0x08)
	struct UParticleModuleSpawn* SpawnModule; // 0x50(0x08)
	struct UParticleModuleEventGenerator* EventGenerator; // 0x58(0x08)
	struct TArray<struct UParticleModuleSpawnBase*> SpawningModules; // 0x60(0x10)
	struct TArray<struct UParticleModule*> SpawnModules; // 0x70(0x10)
	struct TArray<struct UParticleModule*> UpdateModules; // 0x80(0x10)
	struct TArray<struct UParticleModuleOrbit*> OrbitModules; // 0x90(0x10)
	struct TArray<struct UParticleModuleEventReceiverBase*> EventReceiverModules; // 0xa0(0x10)
	char ConvertedModules : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	int32_t PeakActiveParticles; // 0xb4(0x04)
};

// Class Engine.ParticleModule
// Size: 0x30 (Inherited: 0x28)
struct UParticleModule : UObject {
	char bSpawnModule : 1; // 0x28(0x01)
	char bUpdateModule : 1; // 0x28(0x01)
	char bFinalUpdateModule : 1; // 0x28(0x01)
	char bUpdateForGPUEmitter : 1; // 0x28(0x01)
	char bCurvesAsColor : 1; // 0x28(0x01)
	char b3DDrawMode : 1; // 0x28(0x01)
	char bSupported3DDrawMode : 1; // 0x28(0x01)
	char bEnabled : 1; // 0x28(0x01)
	char bEditable : 1; // 0x29(0x01)
	char LODDuplicate : 1; // 0x29(0x01)
	char bSupportsRandomSeed : 1; // 0x29(0x01)
	char bRequiresLoopingNotification : 1; // 0x29(0x01)
	char pad_29_4 : 4; // 0x29(0x01)
	char LODValidity; // 0x2a(0x01)
	char pad_2B[0x5]; // 0x2b(0x05)
};

// Class Engine.ParticleModuleAccelerationBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleAccelerationBase : UParticleModule {
	char bAlwaysInWorldSpace : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleAcceleration
// Size: 0x88 (Inherited: 0x38)
struct UParticleModuleAcceleration : UParticleModuleAccelerationBase {
	struct FRawDistributionVector Acceleration; // 0x38(0x48)
	char bApplyOwnerScale : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.ParticleModuleAccelerationConstant
// Size: 0x48 (Inherited: 0x38)
struct UParticleModuleAccelerationConstant : UParticleModuleAccelerationBase {
	struct FVector Acceleration; // 0x38(0x0c)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.ParticleModuleAccelerationDrag
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleAccelerationDrag : UParticleModuleAccelerationBase {
	struct UDistributionFloat* DragCoefficient; // 0x38(0x08)
	struct FRawDistributionFloat DragCoefficientRaw; // 0x40(0x30)
};

// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleAccelerationDragScaleOverLife : UParticleModuleAccelerationBase {
	struct UDistributionFloat* DragScale; // 0x38(0x08)
	struct FRawDistributionFloat DragScaleRaw; // 0x40(0x30)
};

// Class Engine.ParticleModuleAccelerationOverLifetime
// Size: 0x80 (Inherited: 0x38)
struct UParticleModuleAccelerationOverLifetime : UParticleModuleAccelerationBase {
	struct FRawDistributionVector AccelOverLife; // 0x38(0x48)
};

// Class Engine.ParticleModuleAttractorBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleAttractorBase : UParticleModule {
};

// Class Engine.ParticleModuleAttractorLine
// Size: 0xa8 (Inherited: 0x30)
struct UParticleModuleAttractorLine : UParticleModuleAttractorBase {
	struct FVector EndPoint0; // 0x30(0x0c)
	struct FVector EndPoint1; // 0x3c(0x0c)
	struct FRawDistributionFloat Range; // 0x48(0x30)
	struct FRawDistributionFloat Strength; // 0x78(0x30)
};

// Class Engine.ParticleModuleAttractorParticle
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleAttractorParticle : UParticleModuleAttractorBase {
	struct FName EmitterName; // 0x30(0x08)
	struct FRawDistributionFloat Range; // 0x38(0x30)
	char bStrengthByDistance : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
	struct FRawDistributionFloat Strength; // 0x70(0x30)
	char bAffectBaseVelocity : 1; // 0xa0(0x01)
	char pad_A0_1 : 7; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	enum class EAttractorParticleSelectionMethod SelectionMethod; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	char bRenewSource : 1; // 0xa8(0x01)
	char bInheritSourceVel : 1; // 0xa8(0x01)
	char pad_A8_2 : 6; // 0xa8(0x01)
	char pad_A9[0x3]; // 0xa9(0x03)
	int32_t LastSelIndex; // 0xac(0x04)
};

// Class Engine.ParticleModuleAttractorPoint
// Size: 0xe0 (Inherited: 0x30)
struct UParticleModuleAttractorPoint : UParticleModuleAttractorBase {
	struct FRawDistributionVector Position; // 0x30(0x48)
	struct FRawDistributionFloat Range; // 0x78(0x30)
	struct FRawDistributionFloat Strength; // 0xa8(0x30)
	char StrengthByDistance : 1; // 0xd8(0x01)
	char bAffectBaseVelocity : 1; // 0xd8(0x01)
	char bOverrideVelocity : 1; // 0xd8(0x01)
	char bUseWorldSpacePosition : 1; // 0xd8(0x01)
	char Positive_X : 1; // 0xd8(0x01)
	char Positive_Y : 1; // 0xd8(0x01)
	char Positive_Z : 1; // 0xd8(0x01)
	char Negative_X : 1; // 0xd8(0x01)
	char Negative_Y : 1; // 0xd9(0x01)
	char Negative_Z : 1; // 0xd9(0x01)
	char pad_D9_2 : 6; // 0xd9(0x01)
	char pad_DA[0x6]; // 0xda(0x06)
};

// Class Engine.ParticleModuleAttractorPointGravity
// Size: 0x78 (Inherited: 0x30)
struct UParticleModuleAttractorPointGravity : UParticleModuleAttractorBase {
	struct FVector Position; // 0x30(0x0c)
	float Radius; // 0x3c(0x04)
	struct UDistributionFloat* Strength; // 0x40(0x08)
	struct FRawDistributionFloat StrengthRaw; // 0x48(0x30)
};

// Class Engine.ParticleModuleBeamBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleBeamBase : UParticleModule {
};

// Class Engine.ParticleModuleBeamModifier
// Size: 0x108 (Inherited: 0x30)
struct UParticleModuleBeamModifier : UParticleModuleBeamBase {
	enum class BeamModifierType ModifierType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FBeamModifierOptions PositionOptions; // 0x34(0x04)
	struct FRawDistributionVector Position; // 0x38(0x48)
	struct FBeamModifierOptions TangentOptions; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct FRawDistributionVector Tangent; // 0x88(0x48)
	char bAbsoluteTangent : 1; // 0xd0(0x01)
	char pad_D0_1 : 7; // 0xd0(0x01)
	char pad_D1[0x3]; // 0xd1(0x03)
	struct FBeamModifierOptions StrengthOptions; // 0xd4(0x04)
	struct FRawDistributionFloat Strength; // 0xd8(0x30)
};

// Class Engine.ParticleModuleBeamNoise
// Size: 0x190 (Inherited: 0x30)
struct UParticleModuleBeamNoise : UParticleModuleBeamBase {
	char bLowFreq_Enabled : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int32_t Frequency; // 0x34(0x04)
	int32_t Frequency_LowRange; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRawDistributionVector NoiseRange; // 0x40(0x48)
	struct FRawDistributionFloat NoiseRangeScale; // 0x88(0x30)
	char bNRScaleEmitterTime : 1; // 0xb8(0x01)
	char pad_B8_1 : 7; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct FRawDistributionVector NoiseSpeed; // 0xc0(0x48)
	char bSmooth : 1; // 0x108(0x01)
	char pad_108_1 : 7; // 0x108(0x01)
	char pad_109[0x3]; // 0x109(0x03)
	float NoiseLockRadius; // 0x10c(0x04)
	char bNoiseLock : 1; // 0x110(0x01)
	char bOscillate : 1; // 0x110(0x01)
	char pad_110_2 : 6; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	float NoiseLockTime; // 0x114(0x04)
	float NoiseTension; // 0x118(0x04)
	char bUseNoiseTangents : 1; // 0x11c(0x01)
	char pad_11C_1 : 7; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)
	struct FRawDistributionFloat NoiseTangentStrength; // 0x120(0x30)
	int32_t NoiseTessellation; // 0x150(0x04)
	char bTargetNoise : 1; // 0x154(0x01)
	char pad_154_1 : 7; // 0x154(0x01)
	char pad_155[0x3]; // 0x155(0x03)
	float FrequencyDistance; // 0x158(0x04)
	char bApplyNoiseScale : 1; // 0x15c(0x01)
	char pad_15C_1 : 7; // 0x15c(0x01)
	char pad_15D[0x3]; // 0x15d(0x03)
	struct FRawDistributionFloat NoiseScale; // 0x160(0x30)
};

// Class Engine.ParticleModuleBeamSource
// Size: 0x118 (Inherited: 0x30)
struct UParticleModuleBeamSource : UParticleModuleBeamBase {
	enum class Beam2SourceTargetMethod SourceMethod; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FName SourceName; // 0x34(0x08)
	char bSourceAbsolute : 1; // 0x3c(0x01)
	char pad_3C_1 : 7; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	struct FRawDistributionVector Source; // 0x40(0x48)
	char bLockSource : 1; // 0x88(0x01)
	char pad_88_1 : 7; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	enum class Beam2SourceTargetTangentMethod SourceTangentMethod; // 0x8c(0x01)
	char pad_8D[0x3]; // 0x8d(0x03)
	struct FRawDistributionVector SourceTangent; // 0x90(0x48)
	char bLockSourceTangent : 1; // 0xd8(0x01)
	char pad_D8_1 : 7; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
	struct FRawDistributionFloat SourceStrength; // 0xe0(0x30)
	char bLockSourceStength : 1; // 0x110(0x01)
	char pad_110_1 : 7; // 0x110(0x01)
	char pad_111[0x7]; // 0x111(0x07)
};

// Class Engine.ParticleModuleBeamTarget
// Size: 0x120 (Inherited: 0x30)
struct UParticleModuleBeamTarget : UParticleModuleBeamBase {
	enum class Beam2SourceTargetMethod TargetMethod; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FName TargetName; // 0x34(0x08)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRawDistributionVector Target; // 0x40(0x48)
	char bTargetAbsolute : 1; // 0x88(0x01)
	char bLockTarget : 1; // 0x88(0x01)
	char pad_88_2 : 6; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	enum class Beam2SourceTargetTangentMethod TargetTangentMethod; // 0x8c(0x01)
	char pad_8D[0x3]; // 0x8d(0x03)
	struct FRawDistributionVector TargetTangent; // 0x90(0x48)
	char bLockTargetTangent : 1; // 0xd8(0x01)
	char pad_D8_1 : 7; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
	struct FRawDistributionFloat TargetStrength; // 0xe0(0x30)
	char bLockTargetStength : 1; // 0x110(0x01)
	char pad_110_1 : 7; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	float LockRadius; // 0x114(0x04)
	char pad_118[0x8]; // 0x118(0x08)
};

// Class Engine.ParticleModuleCameraBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleCameraBase : UParticleModule {
};

// Class Engine.ParticleModuleCameraOffset
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleCameraOffset : UParticleModuleCameraBase {
	struct FRawDistributionFloat CameraOffset; // 0x30(0x30)
	char bSpawnTimeOnly : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	enum class EParticleCameraOffsetUpdateMethod UpdateMethod; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.ParticleModuleCollisionBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleCollisionBase : UParticleModule {
};

// Class Engine.ParticleModuleCollision
// Size: 0x190 (Inherited: 0x30)
struct UParticleModuleCollision : UParticleModuleCollisionBase {
	struct FRawDistributionVector DampingFactor; // 0x30(0x48)
	struct FRawDistributionVector DampingFactorRotation; // 0x78(0x48)
	struct FRawDistributionFloat MaxCollisions; // 0xc0(0x30)
	enum class EParticleCollisionComplete CollisionCompletionOption; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct TArray<enum class EObjectTypeQuery> CollisionTypes; // 0xf8(0x10)
	char pad_108[0x8]; // 0x108(0x08)
	char bApplyPhysics : 1; // 0x110(0x01)
	char bIgnoreTriggerVolumes : 1; // 0x110(0x01)
	char pad_110_2 : 6; // 0x110(0x01)
	char pad_111[0x7]; // 0x111(0x07)
	struct FRawDistributionFloat ParticleMass; // 0x118(0x30)
	float DirScalar; // 0x148(0x04)
	char bPawnsDoNotDecrementCount : 1; // 0x14c(0x01)
	char bOnlyVerticalNormalsDecrementCount : 1; // 0x14c(0x01)
	char pad_14C_2 : 6; // 0x14c(0x01)
	char pad_14D[0x3]; // 0x14d(0x03)
	float VerticalFudgeFactor; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
	struct FRawDistributionFloat DelayAmount; // 0x158(0x30)
	char bDropDetail : 1; // 0x188(0x01)
	char bCollideOnlyIfVisible : 1; // 0x188(0x01)
	char bIgnoreSourceActor : 1; // 0x188(0x01)
	char pad_188_3 : 5; // 0x188(0x01)
	char pad_189[0x3]; // 0x189(0x03)
	float MaxCollisionDistance; // 0x18c(0x04)
};

// Class Engine.ParticleModuleCollisionGPU
// Size: 0xa8 (Inherited: 0x30)
struct UParticleModuleCollisionGPU : UParticleModuleCollisionBase {
	struct FRawDistributionFloat Resilience; // 0x30(0x30)
	struct FRawDistributionFloat ResilienceScaleOverLife; // 0x60(0x30)
	float Friction; // 0x90(0x04)
	float RandomSpread; // 0x94(0x04)
	float RandomDistribution; // 0x98(0x04)
	float RadiusScale; // 0x9c(0x04)
	float RadiusBias; // 0xa0(0x04)
	enum class EParticleCollisionResponse Response; // 0xa4(0x01)
	enum class EParticleCollisionMode CollisionMode; // 0xa5(0x01)
	char pad_A6[0x2]; // 0xa6(0x02)
};

// Class Engine.ParticleModuleColorBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleColorBase : UParticleModule {
};

// Class Engine.ParticleModuleColor
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleColor : UParticleModuleColorBase {
	struct FRawDistributionVector StartColor; // 0x30(0x48)
	struct FRawDistributionFloat StartAlpha; // 0x78(0x30)
	char bClampAlpha : 1; // 0xa8(0x01)
	char pad_A8_1 : 7; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
};

// Class Engine.ParticleModuleColor_Seeded
// Size: 0xd0 (Inherited: 0xb0)
struct UParticleModuleColor_Seeded : UParticleModuleColor {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xb0(0x20)
};

// Class Engine.ParticleModuleColorOverLife
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleColorOverLife : UParticleModuleColorBase {
	struct FRawDistributionVector ColorOverLife; // 0x30(0x48)
	struct FRawDistributionFloat AlphaOverLife; // 0x78(0x30)
	char bClampAlpha : 1; // 0xa8(0x01)
	char pad_A8_1 : 7; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
};

// Class Engine.ParticleModuleColorScaleOverLife
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleColorScaleOverLife : UParticleModuleColorBase {
	struct FRawDistributionVector ColorScaleOverLife; // 0x30(0x48)
	struct FRawDistributionFloat AlphaScaleOverLife; // 0x78(0x30)
	char bEmitterTime : 1; // 0xa8(0x01)
	char pad_A8_1 : 7; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
};

// Class Engine.ParticleModuleEventBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleEventBase : UParticleModule {
};

// Class Engine.ParticleModuleEventGenerator
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleEventGenerator : UParticleModuleEventBase {
	struct TArray<struct FParticleEvent_GenerateInfo> Events; // 0x30(0x10)
};

// Class Engine.ParticleModuleEventReceiverBase
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleEventReceiverBase : UParticleModuleEventBase {
	enum class EParticleEventType EventGeneratorType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FName EventName; // 0x34(0x08)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.ParticleModuleEventReceiverKillParticles
// Size: 0x48 (Inherited: 0x40)
struct UParticleModuleEventReceiverKillParticles : UParticleModuleEventReceiverBase {
	char bStopSpawning : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
};

// Class Engine.ParticleModuleEventReceiverSpawn
// Size: 0xd8 (Inherited: 0x40)
struct UParticleModuleEventReceiverSpawn : UParticleModuleEventReceiverBase {
	struct FRawDistributionFloat SpawnCount; // 0x40(0x30)
	char bUseParticleTime : 1; // 0x70(0x01)
	char bUsePSysLocation : 1; // 0x70(0x01)
	char bInheritVelocity : 1; // 0x70(0x01)
	char pad_70_3 : 5; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct FRawDistributionVector InheritVelocityScale; // 0x78(0x48)
	struct TArray<struct UPhysicalMaterial*> PhysicalMaterials; // 0xc0(0x10)
	char bBanPhysicalMaterials : 1; // 0xd0(0x01)
	char pad_D0_1 : 7; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)
};

// Class Engine.ParticleModuleEventSendToGame
// Size: 0x28 (Inherited: 0x28)
struct UParticleModuleEventSendToGame : UObject {
};

// Class Engine.ParticleModuleKillBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleKillBase : UParticleModule {
};

// Class Engine.ParticleModuleKillBox
// Size: 0xc8 (Inherited: 0x30)
struct UParticleModuleKillBox : UParticleModuleKillBase {
	struct FRawDistributionVector LowerLeftCorner; // 0x30(0x48)
	struct FRawDistributionVector UpperRightCorner; // 0x78(0x48)
	char bAbsolute : 1; // 0xc0(0x01)
	char bKillInside : 1; // 0xc0(0x01)
	char bAxisAlignedAndFixedSize : 1; // 0xc0(0x01)
	char pad_C0_3 : 5; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)
};

// Class Engine.ParticleModuleKillHeight
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleKillHeight : UParticleModuleKillBase {
	struct FRawDistributionFloat Height; // 0x30(0x30)
	char bAbsolute : 1; // 0x60(0x01)
	char bFloor : 1; // 0x60(0x01)
	char bApplyPSysScale : 1; // 0x60(0x01)
	char pad_60_3 : 5; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
};

// Class Engine.ParticleModuleLifetimeBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleLifetimeBase : UParticleModule {
};

// Class Engine.ParticleModuleLifetime
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleLifetime : UParticleModuleLifetimeBase {
	struct FRawDistributionFloat LifeTime; // 0x30(0x30)
};

// Class Engine.ParticleModuleLifetime_Seeded
// Size: 0x80 (Inherited: 0x60)
struct UParticleModuleLifetime_Seeded : UParticleModuleLifetime {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x20)
};

// Class Engine.ParticleModuleLightBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleLightBase : UParticleModule {
};

// Class Engine.ParticleModuleLight
// Size: 0x120 (Inherited: 0x30)
struct UParticleModuleLight : UParticleModuleLightBase {
	bool bUseInverseSquaredFalloff; // 0x30(0x01)
	bool bAffectsTranslucency; // 0x31(0x01)
	bool bPreviewLightRadius; // 0x32(0x01)
	char pad_33[0x1]; // 0x33(0x01)
	float SpawnFraction; // 0x34(0x04)
	struct FRawDistributionVector ColorScaleOverLife; // 0x38(0x48)
	struct FRawDistributionFloat BrightnessOverLife; // 0x80(0x30)
	struct FRawDistributionFloat RadiusScale; // 0xb0(0x30)
	struct FRawDistributionFloat LightExponent; // 0xe0(0x30)
	struct FLightingChannels LightingChannels; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	float VolumetricScatteringIntensity; // 0x114(0x04)
	bool bHighQualityLights; // 0x118(0x01)
	bool bShadowCastingLights; // 0x119(0x01)
	char pad_11A[0x6]; // 0x11a(0x06)
};

// Class Engine.ParticleModuleLight_Seeded
// Size: 0x140 (Inherited: 0x120)
struct UParticleModuleLight_Seeded : UParticleModuleLight {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x120(0x20)
};

// Class Engine.ParticleModuleLocationBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleLocationBase : UParticleModule {
};

// Class Engine.ParticleModuleLocation
// Size: 0x80 (Inherited: 0x30)
struct UParticleModuleLocation : UParticleModuleLocationBase {
	struct FRawDistributionVector StartLocation; // 0x30(0x48)
	float DistributeOverNPoints; // 0x78(0x04)
	float DistributeThreshold; // 0x7c(0x04)
};

// Class Engine.ParticleModuleLocation_Seeded
// Size: 0xa0 (Inherited: 0x80)
struct UParticleModuleLocation_Seeded : UParticleModuleLocation {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x80(0x20)
};

// Class Engine.ParticleModuleLocationBoneSocket
// Size: 0x70 (Inherited: 0x30)
struct UParticleModuleLocationBoneSocket : UParticleModuleLocationBase {
	enum class ELocationBoneSocketSource SourceType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FVector UniversalOffset; // 0x34(0x0c)
	struct TArray<struct FLocationBoneSocketInfo> SourceLocations; // 0x40(0x10)
	enum class ELocationBoneSocketSelectionMethod SelectionMethod; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	char bUpdatePositionEachFrame : 1; // 0x54(0x01)
	char bOrientMeshEmitters : 1; // 0x54(0x01)
	char bInheritBoneVelocity : 1; // 0x54(0x01)
	char pad_54_3 : 5; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	float InheritVelocityScale; // 0x58(0x04)
	struct FName SkelMeshActorParamName; // 0x5c(0x08)
	int32_t NumPreSelectedIndices; // 0x64(0x04)
	char pad_68[0x8]; // 0x68(0x08)
};

// Class Engine.ParticleModuleLocationDirect
// Size: 0x150 (Inherited: 0x30)
struct UParticleModuleLocationDirect : UParticleModuleLocationBase {
	struct FRawDistributionVector Location; // 0x30(0x48)
	struct FRawDistributionVector LocationOffset; // 0x78(0x48)
	struct FRawDistributionVector ScaleFactor; // 0xc0(0x48)
	struct FRawDistributionVector Direction; // 0x108(0x48)
};

// Class Engine.ParticleModuleLocationEmitter
// Size: 0x50 (Inherited: 0x30)
struct UParticleModuleLocationEmitter : UParticleModuleLocationBase {
	struct FName EmitterName; // 0x30(0x08)
	enum class ELocationEmitterSelectionMethod SelectionMethod; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	char InheritSourceVelocity : 1; // 0x3c(0x01)
	char pad_3C_1 : 7; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	float InheritSourceVelocityScale; // 0x40(0x04)
	char bInheritSourceRotation : 1; // 0x44(0x01)
	char pad_44_1 : 7; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	float InheritSourceRotationScale; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Engine.ParticleModuleLocationEmitterDirect
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleLocationEmitterDirect : UParticleModuleLocationBase {
	struct FName EmitterName; // 0x30(0x08)
};

// Class Engine.ParticleModuleLocationPrimitiveBase
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleLocationPrimitiveBase : UParticleModuleLocationBase {
	char Positive_X : 1; // 0x30(0x01)
	char Positive_Y : 1; // 0x30(0x01)
	char Positive_Z : 1; // 0x30(0x01)
	char Negative_X : 1; // 0x30(0x01)
	char Negative_Y : 1; // 0x30(0x01)
	char Negative_Z : 1; // 0x30(0x01)
	char SurfaceOnly : 1; // 0x30(0x01)
	char Velocity : 1; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FRawDistributionFloat VelocityScale; // 0x38(0x30)
	struct FRawDistributionVector StartLocation; // 0x68(0x48)
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// Size: 0x120 (Inherited: 0xb0)
struct UParticleModuleLocationPrimitiveCylinder : UParticleModuleLocationPrimitiveBase {
	char RadialVelocity : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct FRawDistributionFloat StartRadius; // 0xb8(0x30)
	struct FRawDistributionFloat StartHeight; // 0xe8(0x30)
	enum class CylinderHeightAxis HeightAxis; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// Size: 0x140 (Inherited: 0x120)
struct UParticleModuleLocationPrimitiveCylinder_Seeded : UParticleModuleLocationPrimitiveCylinder {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x120(0x20)
};

// Class Engine.ParticleModuleLocationPrimitiveSphere
// Size: 0xe0 (Inherited: 0xb0)
struct UParticleModuleLocationPrimitiveSphere : UParticleModuleLocationPrimitiveBase {
	struct FRawDistributionFloat StartRadius; // 0xb0(0x30)
};

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// Size: 0x100 (Inherited: 0xe0)
struct UParticleModuleLocationPrimitiveSphere_Seeded : UParticleModuleLocationPrimitiveSphere {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xe0(0x20)
};

// Class Engine.ParticleModuleLocationPrimitiveTriangle
// Size: 0x108 (Inherited: 0x30)
struct UParticleModuleLocationPrimitiveTriangle : UParticleModuleLocationBase {
	struct FRawDistributionVector StartOffset; // 0x30(0x48)
	struct FRawDistributionFloat Height; // 0x78(0x30)
	struct FRawDistributionFloat Angle; // 0xa8(0x30)
	struct FRawDistributionFloat Thickness; // 0xd8(0x30)
};

// Class Engine.ParticleModuleLocationSkelVertSurface
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleLocationSkelVertSurface : UParticleModuleLocationBase {
	enum class ELocationSkelVertSurfaceSource SourceType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FVector UniversalOffset; // 0x34(0x0c)
	char bUpdatePositionEachFrame : 1; // 0x40(0x01)
	char bOrientMeshEmitters : 1; // 0x40(0x01)
	char bInheritBoneVelocity : 1; // 0x40(0x01)
	char pad_40_3 : 5; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	float InheritVelocityScale; // 0x44(0x04)
	struct FName SkelMeshActorParamName; // 0x48(0x08)
	struct TArray<struct FName> ValidAssociatedBones; // 0x50(0x10)
	char bEnforceNormalCheck : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	struct FVector NormalToCompare; // 0x64(0x0c)
	float NormalCheckToleranceDegrees; // 0x70(0x04)
	float NormalCheckTolerance; // 0x74(0x04)
	struct TArray<int32_t> ValidMaterialIndices; // 0x78(0x10)
	char bInheritVertexColor : 1; // 0x88(0x01)
	char bInheritUV : 1; // 0x88(0x01)
	char pad_88_2 : 6; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	uint32_t InheritUVChannel; // 0x8c(0x04)
};

// Class Engine.ParticleModuleLocationWorldOffset
// Size: 0x80 (Inherited: 0x80)
struct UParticleModuleLocationWorldOffset : UParticleModuleLocation {
};

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// Size: 0xa0 (Inherited: 0x80)
struct UParticleModuleLocationWorldOffset_Seeded : UParticleModuleLocationWorldOffset {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x80(0x20)
};

// Class Engine.ParticleModuleMaterialBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleMaterialBase : UParticleModule {
};

// Class Engine.ParticleModuleMeshMaterial
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleMeshMaterial : UParticleModuleMaterialBase {
	struct TArray<struct UMaterialInterface*> MeshMaterials; // 0x30(0x10)
};

// Class Engine.ParticleModuleRotationBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleRotationBase : UParticleModule {
};

// Class Engine.ParticleModuleMeshRotation
// Size: 0x80 (Inherited: 0x30)
struct UParticleModuleMeshRotation : UParticleModuleRotationBase {
	struct FRawDistributionVector StartRotation; // 0x30(0x48)
	char bInheritParent : 1; // 0x78(0x01)
	char pad_78_1 : 7; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Engine.ParticleModuleMeshRotation_Seeded
// Size: 0xa0 (Inherited: 0x80)
struct UParticleModuleMeshRotation_Seeded : UParticleModuleMeshRotation {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x80(0x20)
};

// Class Engine.ParticleModuleRotationRateBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleRotationRateBase : UParticleModule {
};

// Class Engine.ParticleModuleMeshRotationRate
// Size: 0x78 (Inherited: 0x30)
struct UParticleModuleMeshRotationRate : UParticleModuleRotationRateBase {
	struct FRawDistributionVector StartRotationRate; // 0x30(0x48)
};

// Class Engine.ParticleModuleMeshRotationRate_Seeded
// Size: 0x98 (Inherited: 0x78)
struct UParticleModuleMeshRotationRate_Seeded : UParticleModuleMeshRotationRate {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x78(0x20)
};

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// Size: 0x78 (Inherited: 0x30)
struct UParticleModuleMeshRotationRateMultiplyLife : UParticleModuleRotationRateBase {
	struct FRawDistributionVector LifeMultiplier; // 0x30(0x48)
};

// Class Engine.ParticleModuleMeshRotationRateOverLife
// Size: 0x80 (Inherited: 0x30)
struct UParticleModuleMeshRotationRateOverLife : UParticleModuleRotationRateBase {
	struct FRawDistributionVector RotRate; // 0x30(0x48)
	char bScaleRotRate : 1; // 0x78(0x01)
	char pad_78_1 : 7; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Engine.ParticleModuleOrbitBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleOrbitBase : UParticleModule {
	char bUseEmitterTime : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleOrbit
// Size: 0x130 (Inherited: 0x38)
struct UParticleModuleOrbit : UParticleModuleOrbitBase {
	enum class EOrbitChainMode ChainMode; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct FRawDistributionVector OffsetAmount; // 0x40(0x48)
	struct FOrbitOptions OffsetOptions; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
	struct FRawDistributionVector RotationAmount; // 0x90(0x48)
	struct FOrbitOptions RotationOptions; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
	struct FRawDistributionVector RotationRateAmount; // 0xe0(0x48)
	struct FOrbitOptions RotationRateOptions; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)
};

// Class Engine.ParticleModuleOrientationBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleOrientationBase : UParticleModule {
};

// Class Engine.ParticleModuleOrientationAxisLock
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleOrientationAxisLock : UParticleModuleOrientationBase {
	enum class EParticleAxisLock LockAxisFlags; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleParameterBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleParameterBase : UParticleModule {
};

// Class Engine.ParticleModuleParameterDynamic
// Size: 0x48 (Inherited: 0x30)
struct UParticleModuleParameterDynamic : UParticleModuleParameterBase {
	struct TArray<struct FEmitterDynamicParameter> DynamicParams; // 0x30(0x10)
	int32_t UpdateFlags; // 0x40(0x04)
	char bUsesVelocity : 1; // 0x44(0x01)
	char pad_44_1 : 7; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
};

// Class Engine.ParticleModuleParameterDynamic_Seeded
// Size: 0x68 (Inherited: 0x48)
struct UParticleModuleParameterDynamic_Seeded : UParticleModuleParameterDynamic {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x48(0x20)
};

// Class Engine.ParticleModulePivotOffset
// Size: 0x38 (Inherited: 0x30)
struct UParticleModulePivotOffset : UParticleModuleLocationBase {
	struct FVector2D PivotOffset; // 0x30(0x08)
};

// Class Engine.ParticleModuleRequired
// Size: 0x140 (Inherited: 0x30)
struct UParticleModuleRequired : UParticleModule {
	struct UMaterialInterface* Material; // 0x30(0x08)
	float MinFacingCameraBlendDistance; // 0x38(0x04)
	float MaxFacingCameraBlendDistance; // 0x3c(0x04)
	struct FVector EmitterOrigin; // 0x40(0x0c)
	struct FRotator EmitterRotation; // 0x4c(0x0c)
	enum class EParticleScreenAlignment ScreenAlignment; // 0x58(0x01)
	char bUseLocalSpace : 1; // 0x59(0x01)
	char bKillOnDeactivate : 1; // 0x59(0x01)
	char bKillOnCompleted : 1; // 0x59(0x01)
	char pad_59_3 : 5; // 0x59(0x01)
	enum class EParticleSortMode SortMode; // 0x5a(0x01)
	char bUseLegacyEmitterTime : 1; // 0x5b(0x01)
	char bRemoveHMDRoll : 1; // 0x5b(0x01)
	char bEmitterDurationUseRange : 1; // 0x5b(0x01)
	char pad_5B_3 : 5; // 0x5b(0x01)
	float EmitterDuration; // 0x5c(0x04)
	struct FRawDistributionFloat SpawnRate; // 0x60(0x30)
	struct TArray<struct FParticleBurst> BurstList; // 0x90(0x10)
	float EmitterDelay; // 0xa0(0x04)
	float EmitterDelayLow; // 0xa4(0x04)
	char bDelayFirstLoopOnly : 1; // 0xa8(0x01)
	char pad_A8_1 : 7; // 0xa8(0x01)
	enum class EParticleSubUVInterpMethod InterpolationMethod; // 0xa9(0x01)
	char bScaleUV : 1; // 0xaa(0x01)
	char bEmitterDelayUseRange : 1; // 0xaa(0x01)
	char pad_AA_2 : 6; // 0xaa(0x01)
	enum class EParticleBurstMethod ParticleBurstMethod; // 0xab(0x01)
	char bOverrideSystemMacroUV : 1; // 0xac(0x01)
	char bUseMaxDrawCount : 1; // 0xac(0x01)
	char pad_AC_2 : 6; // 0xac(0x01)
	enum class EOpacitySourceMode OpacitySourceMode; // 0xad(0x01)
	enum class EEmitterNormalsMode EmitterNormalsMode; // 0xae(0x01)
	char bOrbitModuleAffectsVelocityAlignment : 1; // 0xaf(0x01)
	char pad_AF_1 : 7; // 0xaf(0x01)
	int32_t SubImages_Horizontal; // 0xb0(0x04)
	int32_t SubImages_Vertical; // 0xb4(0x04)
	float RandomImageTime; // 0xb8(0x04)
	int32_t RandomImageChanges; // 0xbc(0x04)
	struct FVector MacroUVPosition; // 0xc0(0x0c)
	float MacroUVRadius; // 0xcc(0x04)
	enum class EParticleUVFlipMode UVFlippingMode; // 0xd0(0x01)
	enum class ESubUVBoundingVertexCount BoundingMode; // 0xd1(0x01)
	char bDurationRecalcEachLoop : 1; // 0xd2(0x01)
	char pad_D2_1 : 7; // 0xd2(0x01)
	char pad_D3[0x1]; // 0xd3(0x01)
	struct FVector NormalsSphereCenter; // 0xd4(0x0c)
	float AlphaThreshold; // 0xe0(0x04)
	int32_t EmitterLoops; // 0xe4(0x04)
	struct UTexture2D* CutoutTexture; // 0xe8(0x08)
	int32_t MaxDrawCount; // 0xf0(0x04)
	float EmitterDurationLow; // 0xf4(0x04)
	struct FVector NormalsCylinderDirection; // 0xf8(0x0c)
	char pad_104[0x4]; // 0x104(0x04)
	struct TArray<struct FName> NamedMaterialOverrides; // 0x108(0x10)
	char pad_118[0x28]; // 0x118(0x28)
};

// Class Engine.ParticleModuleRotation
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleRotation : UParticleModuleRotationBase {
	struct FRawDistributionFloat StartRotation; // 0x30(0x30)
};

// Class Engine.ParticleModuleRotation_Seeded
// Size: 0x80 (Inherited: 0x60)
struct UParticleModuleRotation_Seeded : UParticleModuleRotation {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x20)
};

// Class Engine.ParticleModuleRotationOverLifetime
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleRotationOverLifetime : UParticleModuleRotationBase {
	struct FRawDistributionFloat RotationOverLife; // 0x30(0x30)
	char Scale : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
};

// Class Engine.ParticleModuleRotationRate
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleRotationRate : UParticleModuleRotationRateBase {
	struct FRawDistributionFloat StartRotationRate; // 0x30(0x30)
};

// Class Engine.ParticleModuleRotationRate_Seeded
// Size: 0x80 (Inherited: 0x60)
struct UParticleModuleRotationRate_Seeded : UParticleModuleRotationRate {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x20)
};

// Class Engine.ParticleModuleRotationRateMultiplyLife
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleRotationRateMultiplyLife : UParticleModuleRotationRateBase {
	struct FRawDistributionFloat LifeMultiplier; // 0x30(0x30)
};

// Class Engine.ParticleModuleSizeBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleSizeBase : UParticleModule {
};

// Class Engine.ParticleModuleSize
// Size: 0x78 (Inherited: 0x30)
struct UParticleModuleSize : UParticleModuleSizeBase {
	struct FRawDistributionVector StartSize; // 0x30(0x48)
};

// Class Engine.ParticleModuleSize_Seeded
// Size: 0x98 (Inherited: 0x78)
struct UParticleModuleSize_Seeded : UParticleModuleSize {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0x78(0x20)
};

// Class Engine.ParticleModuleSizeMultiplyLife
// Size: 0x80 (Inherited: 0x30)
struct UParticleModuleSizeMultiplyLife : UParticleModuleSizeBase {
	struct FRawDistributionVector LifeMultiplier; // 0x30(0x48)
	char MultiplyX : 1; // 0x78(0x01)
	char MultiplyY : 1; // 0x78(0x01)
	char MultiplyZ : 1; // 0x78(0x01)
	char pad_78_3 : 5; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Engine.ParticleModuleSizeScale
// Size: 0x80 (Inherited: 0x30)
struct UParticleModuleSizeScale : UParticleModuleSizeBase {
	struct FRawDistributionVector SizeScale; // 0x30(0x48)
	char EnableX : 1; // 0x78(0x01)
	char EnableY : 1; // 0x78(0x01)
	char EnableZ : 1; // 0x78(0x01)
	char pad_78_3 : 5; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Engine.ParticleModuleSizeScaleBySpeed
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleSizeScaleBySpeed : UParticleModuleSizeBase {
	struct FVector2D SpeedScale; // 0x30(0x08)
	struct FVector2D MaxScale; // 0x38(0x08)
};

// Class Engine.ParticleModuleSourceMovement
// Size: 0x78 (Inherited: 0x30)
struct UParticleModuleSourceMovement : UParticleModuleLocationBase {
	struct FRawDistributionVector SourceMovementScale; // 0x30(0x48)
};

// Class Engine.ParticleModuleSpawnBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleSpawnBase : UParticleModule {
	char bProcessSpawnRate : 1; // 0x30(0x01)
	char bProcessBurstList : 1; // 0x30(0x01)
	char pad_30_2 : 6; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleSpawn
// Size: 0xe8 (Inherited: 0x38)
struct UParticleModuleSpawn : UParticleModuleSpawnBase {
	struct FRawDistributionFloat Rate; // 0x38(0x30)
	struct FRawDistributionFloat RateScale; // 0x68(0x30)
	enum class EParticleBurstMethod ParticleBurstMethod; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct TArray<struct FParticleBurst> BurstList; // 0xa0(0x10)
	struct FRawDistributionFloat BurstScale; // 0xb0(0x30)
	char bApplyGlobalSpawnRateScale : 1; // 0xe0(0x01)
	char pad_E0_1 : 7; // 0xe0(0x01)
	char pad_E1[0x7]; // 0xe1(0x07)
};

// Class Engine.ParticleModuleSpawnPerUnit
// Size: 0x78 (Inherited: 0x38)
struct UParticleModuleSpawnPerUnit : UParticleModuleSpawnBase {
	float UnitScalar; // 0x38(0x04)
	float MovementTolerance; // 0x3c(0x04)
	struct FRawDistributionFloat SpawnPerUnit; // 0x40(0x30)
	float MaxFrameDistance; // 0x70(0x04)
	char bIgnoreSpawnRateWhenMoving : 1; // 0x74(0x01)
	char bIgnoreMovementAlongX : 1; // 0x74(0x01)
	char bIgnoreMovementAlongY : 1; // 0x74(0x01)
	char bIgnoreMovementAlongZ : 1; // 0x74(0x01)
	char pad_74_4 : 4; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
};

// Class Engine.ParticleModuleSubUVBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleSubUVBase : UParticleModule {
};

// Class Engine.ParticleModuleSubUV
// Size: 0x70 (Inherited: 0x30)
struct UParticleModuleSubUV : UParticleModuleSubUVBase {
	struct USubUVAnimation* Animation; // 0x30(0x08)
	struct FRawDistributionFloat SubImageIndex; // 0x38(0x30)
	char bUseRealTime : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.ParticleModuleSubUVMovie
// Size: 0xb0 (Inherited: 0x70)
struct UParticleModuleSubUVMovie : UParticleModuleSubUV {
	char bUseEmitterTime : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct FRawDistributionFloat FrameRate; // 0x78(0x30)
	int32_t StartingFrame; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Engine.ParticleModuleTrailBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleTrailBase : UParticleModule {
};

// Class Engine.ParticleModuleTrailSource
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleTrailSource : UParticleModuleTrailBase {
	enum class ETrail2SourceMethod SourceMethod; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FName SourceName; // 0x34(0x08)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct FRawDistributionFloat SourceStrength; // 0x40(0x30)
	char bLockSourceStength : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	int32_t SourceOffsetCount; // 0x74(0x04)
	struct TArray<struct FVector> SourceOffsetDefaults; // 0x78(0x10)
	enum class EParticleSourceSelectionMethod SelectionMethod; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	char bInheritRotation : 1; // 0x8c(0x01)
	char pad_8C_1 : 7; // 0x8c(0x01)
	char pad_8D[0x3]; // 0x8d(0x03)
};

// Class Engine.ParticleModuleTypeDataBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleTypeDataBase : UParticleModule {
};

// Class Engine.ParticleModuleTypeDataAnimTrail
// Size: 0x48 (Inherited: 0x30)
struct UParticleModuleTypeDataAnimTrail : UParticleModuleTypeDataBase {
	char bDeadTrailsOnDeactivate : 1; // 0x30(0x01)
	char bEnablePreviousTangentRecalculation : 1; // 0x30(0x01)
	char bTangentRecalculationEveryFrame : 1; // 0x30(0x01)
	char pad_30_3 : 5; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float TilingDistance; // 0x34(0x04)
	float DistanceTessellationStepSize; // 0x38(0x04)
	float TangentTessellationStepSize; // 0x3c(0x04)
	float WidthTessellationStepSize; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Engine.ParticleModuleTypeDataBeam2
// Size: 0x150 (Inherited: 0x30)
struct UParticleModuleTypeDataBeam2 : UParticleModuleTypeDataBase {
	enum class EBeam2Method BeamMethod; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int32_t TextureTile; // 0x34(0x04)
	float TextureTileDistance; // 0x38(0x04)
	int32_t Sheets; // 0x3c(0x04)
	int32_t MaxBeamCount; // 0x40(0x04)
	float Speed; // 0x44(0x04)
	int32_t InterpolationPoints; // 0x48(0x04)
	char bAlwaysOn : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	int32_t UpVectorStepSize; // 0x50(0x04)
	struct FName BranchParentName; // 0x54(0x08)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct FRawDistributionFloat Distance; // 0x60(0x30)
	enum class EBeamTaperMethod TaperMethod; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct FRawDistributionFloat TaperFactor; // 0x98(0x30)
	struct FRawDistributionFloat TaperScale; // 0xc8(0x30)
	char RenderGeometry : 1; // 0xf8(0x01)
	char RenderDirectLine : 1; // 0xf8(0x01)
	char RenderLines : 1; // 0xf8(0x01)
	char RenderTessellation : 1; // 0xf8(0x01)
	char pad_F8_4 : 4; // 0xf8(0x01)
	char pad_F9[0x57]; // 0xf9(0x57)
};

// Class Engine.ParticleModuleTypeDataGpu
// Size: 0x420 (Inherited: 0x30)
struct UParticleModuleTypeDataGpu : UParticleModuleTypeDataBase {
	struct FGPUSpriteEmitterInfo EmitterInfo; // 0x30(0x280)
	struct FGPUSpriteResourceData ResourceData; // 0x2b0(0x160)
	float CameraMotionBlurAmount; // 0x410(0x04)
	char bClearExistingParticlesOnInit : 1; // 0x414(0x01)
	char pad_414_1 : 7; // 0x414(0x01)
	char pad_415[0xb]; // 0x415(0x0b)
};

// Class Engine.ParticleModuleTypeDataMesh
// Size: 0x98 (Inherited: 0x30)
struct UParticleModuleTypeDataMesh : UParticleModuleTypeDataBase {
	struct UStaticMesh* Mesh; // 0x30(0x08)
	char pad_38[0x8]; // 0x38(0x08)
	float LODSizeScale; // 0x40(0x04)
	char bUseStaticMeshLODs : 1; // 0x44(0x01)
	char CastShadows : 1; // 0x44(0x01)
	char DoCollisions : 1; // 0x44(0x01)
	char pad_44_3 : 5; // 0x44(0x01)
	enum class EMeshScreenAlignment MeshAlignment; // 0x45(0x01)
	char bOverrideMaterial : 1; // 0x46(0x01)
	char bOverrideDefaultMotionBlurSettings : 1; // 0x46(0x01)
	char bEnableMotionBlur : 1; // 0x46(0x01)
	char pad_46_3 : 5; // 0x46(0x01)
	char pad_47[0x1]; // 0x47(0x01)
	struct FRawDistributionVector RollPitchYawRange; // 0x48(0x48)
	enum class EParticleAxisLock AxisLockOption; // 0x90(0x01)
	char bCameraFacing : 1; // 0x91(0x01)
	char pad_91_1 : 7; // 0x91(0x01)
	enum class EMeshCameraFacingUpAxis CameraFacingUpAxisOption; // 0x92(0x01)
	enum class EMeshCameraFacingOptions CameraFacingOption; // 0x93(0x01)
	char bApplyParticleRotationAsSpin : 1; // 0x94(0x01)
	char bFaceCameraDirectionRatherThanPosition : 1; // 0x94(0x01)
	char bCollisionsConsiderPartilceSize : 1; // 0x94(0x01)
	char pad_94_3 : 5; // 0x94(0x01)
	char pad_95[0x3]; // 0x95(0x03)
};

// Class Engine.ParticleModuleTypeDataRibbon
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleTypeDataRibbon : UParticleModuleTypeDataBase {
	int32_t MaxTessellationBetweenParticles; // 0x30(0x04)
	int32_t SheetsPerTrail; // 0x34(0x04)
	int32_t MaxTrailCount; // 0x38(0x04)
	int32_t MaxParticleInTrailCount; // 0x3c(0x04)
	char bDeadTrailsOnDeactivate : 1; // 0x40(0x01)
	char bDeadTrailsOnSourceLoss : 1; // 0x40(0x01)
	char bClipSourceSegement : 1; // 0x40(0x01)
	char bEnablePreviousTangentRecalculation : 1; // 0x40(0x01)
	char bTangentRecalculationEveryFrame : 1; // 0x40(0x01)
	char bSpawnInitialParticle : 1; // 0x40(0x01)
	char pad_40_6 : 2; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	enum class ETrailsRenderAxisOption RenderAxis; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	float TangentSpawningScalar; // 0x48(0x04)
	char bRenderGeometry : 1; // 0x4c(0x01)
	char bRenderSpawnPoints : 1; // 0x4c(0x01)
	char bRenderTangents : 1; // 0x4c(0x01)
	char bRenderTessellation : 1; // 0x4c(0x01)
	char pad_4C_4 : 4; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float TilingDistance; // 0x50(0x04)
	float DistanceTessellationStepSize; // 0x54(0x04)
	char bEnableTangentDiffInterpScale : 1; // 0x58(0x01)
	char pad_58_1 : 7; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	float TangentTessellationScalar; // 0x5c(0x04)
};

// Class Engine.ParticleModuleVectorFieldBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleVectorFieldBase : UParticleModule {
};

// Class Engine.ParticleModuleVectorFieldGlobal
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleVectorFieldGlobal : UParticleModuleVectorFieldBase {
	char bOverrideGlobalVectorFieldTightness : 1; // 0x30(0x01)
	char pad_30_1 : 7; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float GlobalVectorFieldScale; // 0x34(0x04)
	float GlobalVectorFieldTightness; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.ParticleModuleVectorFieldLocal
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleVectorFieldLocal : UParticleModuleVectorFieldBase {
	struct UVectorField* VectorField; // 0x30(0x08)
	struct FVector RelativeTranslation; // 0x38(0x0c)
	struct FRotator RelativeRotation; // 0x44(0x0c)
	struct FVector RelativeScale3D; // 0x50(0x0c)
	float Intensity; // 0x5c(0x04)
	float Tightness; // 0x60(0x04)
	char bIgnoreComponentTransform : 1; // 0x64(0x01)
	char bTileX : 1; // 0x64(0x01)
	char bTileY : 1; // 0x64(0x01)
	char bTileZ : 1; // 0x64(0x01)
	char bUseFixDT : 1; // 0x64(0x01)
	char pad_64_5 : 3; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
};

// Class Engine.ParticleModuleVectorFieldRotation
// Size: 0x48 (Inherited: 0x30)
struct UParticleModuleVectorFieldRotation : UParticleModuleVectorFieldBase {
	struct FVector MinInitialRotation; // 0x30(0x0c)
	struct FVector MaxInitialRotation; // 0x3c(0x0c)
};

// Class Engine.ParticleModuleVectorFieldRotationRate
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleVectorFieldRotationRate : UParticleModuleVectorFieldBase {
	struct FVector RotationRate; // 0x30(0x0c)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.ParticleModuleVectorFieldScale
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleVectorFieldScale : UParticleModuleVectorFieldBase {
	struct UDistributionFloat* VectorFieldScale; // 0x30(0x08)
	struct FRawDistributionFloat VectorFieldScaleRaw; // 0x38(0x30)
};

// Class Engine.ParticleModuleVectorFieldScaleOverLife
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleVectorFieldScaleOverLife : UParticleModuleVectorFieldBase {
	struct UDistributionFloat* VectorFieldScaleOverLife; // 0x30(0x08)
	struct FRawDistributionFloat VectorFieldScaleOverLifeRaw; // 0x38(0x30)
};

// Class Engine.ParticleModuleVelocityBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleVelocityBase : UParticleModule {
	char bInWorldSpace : 1; // 0x30(0x01)
	char bApplyOwnerScale : 1; // 0x30(0x01)
	char pad_30_2 : 6; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Engine.ParticleModuleVelocity
// Size: 0xb0 (Inherited: 0x38)
struct UParticleModuleVelocity : UParticleModuleVelocityBase {
	struct FRawDistributionVector StartVelocity; // 0x38(0x48)
	struct FRawDistributionFloat StartVelocityRadial; // 0x80(0x30)
};

// Class Engine.ParticleModuleVelocity_Seeded
// Size: 0xd0 (Inherited: 0xb0)
struct UParticleModuleVelocity_Seeded : UParticleModuleVelocity {
	struct FParticleRandomSeedInfo RandomSeedInfo; // 0xb0(0x20)
};

// Class Engine.ParticleModuleVelocityCone
// Size: 0xa8 (Inherited: 0x38)
struct UParticleModuleVelocityCone : UParticleModuleVelocityBase {
	struct FRawDistributionFloat Angle; // 0x38(0x30)
	struct FRawDistributionFloat Velocity; // 0x68(0x30)
	struct FVector Direction; // 0x98(0x0c)
	char pad_A4[0x4]; // 0xa4(0x04)
};

// Class Engine.ParticleModuleVelocityInheritParent
// Size: 0x80 (Inherited: 0x38)
struct UParticleModuleVelocityInheritParent : UParticleModuleVelocityBase {
	struct FRawDistributionVector Scale; // 0x38(0x48)
};

// Class Engine.ParticleModuleVelocityOverLifetime
// Size: 0x88 (Inherited: 0x38)
struct UParticleModuleVelocityOverLifetime : UParticleModuleVelocityBase {
	struct FRawDistributionVector VelOverLife; // 0x38(0x48)
	char Absolute : 1; // 0x80(0x01)
	char pad_80_1 : 7; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
};

// Class Engine.ParticleSpriteEmitter
// Size: 0x1b8 (Inherited: 0x1b8)
struct UParticleSpriteEmitter : UParticleEmitter {
};

// Class Engine.ParticleSystem
// Size: 0x110 (Inherited: 0x30)
struct UParticleSystem : UFXSystemAsset {
	float UpdateTime_FPS; // 0x30(0x04)
	float UpdateTime_Delta; // 0x34(0x04)
	float WarmupTime; // 0x38(0x04)
	float WarmupTickRate; // 0x3c(0x04)
	struct TArray<struct UParticleEmitter*> Emitters; // 0x40(0x10)
	struct UParticleSystemComponent* PreviewComponent; // 0x50(0x08)
	struct UInterpCurveEdSetup* CurveEdSetup; // 0x58(0x08)
	float LODDistanceCheckTime; // 0x60(0x04)
	float MacroUVRadius; // 0x64(0x04)
	struct TArray<float> LODDistances; // 0x68(0x10)
	struct TArray<struct FParticleSystemLOD> LODSettings; // 0x78(0x10)
	struct FBox FixedRelativeBoundingBox; // 0x88(0x1c)
	float SecondsBeforeInactive; // 0xa4(0x04)
	float Delay; // 0xa8(0x04)
	float DelayLow; // 0xac(0x04)
	char bOrientZAxisTowardCamera : 1; // 0xb0(0x01)
	char bUseFixedRelativeBoundingBox : 1; // 0xb0(0x01)
	char bShouldResetPeakCounts : 1; // 0xb0(0x01)
	char bHasPhysics : 1; // 0xb0(0x01)
	char bUseRealtimeThumbnail : 1; // 0xb0(0x01)
	char ThumbnailImageOutOfDate : 1; // 0xb0(0x01)
	char pad_B0_6 : 2; // 0xb0(0x01)
	char bUseDelayRange : 1; // 0xb1(0x01)
	char bAllowManagedTicking : 1; // 0xb1(0x01)
	char bAutoDeactivate : 1; // 0xb1(0x01)
	char bRegenerateLODDuplicate : 1; // 0xb1(0x01)
	char pad_B1_4 : 4; // 0xb1(0x01)
	enum class EParticleSystemUpdateMode SystemUpdateMode; // 0xb2(0x01)
	enum class ParticleSystemLODMethod LODMethod; // 0xb3(0x01)
	enum class EParticleSystemInsignificanceReaction InsignificantReaction; // 0xb4(0x01)
	enum class EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod; // 0xb5(0x01)
	char pad_B6[0x1]; // 0xb6(0x01)
	enum class EParticleSignificanceLevel MaxSignificanceLevel; // 0xb7(0x01)
	uint32_t MinTimeBetweenTicks; // 0xb8(0x04)
	float InsignificanceDelay; // 0xbc(0x04)
	struct FVector MacroUVPosition; // 0xc0(0x0c)
	struct FBox CustomOcclusionBounds; // 0xcc(0x1c)
	struct TArray<struct FLODSoloTrack> SoloTracking; // 0xe8(0x10)
	struct TArray<struct FNamedEmitterMaterial> NamedMaterialSlots; // 0xf8(0x10)
	char pad_108[0x8]; // 0x108(0x08)

	bool ContainsEmitterType(struct UObject* TypeData); // Function Engine.ParticleSystem.ContainsEmitterType // (Final|Native|Public|BlueprintCallable) // @ game+0x3d9b490
};

// Class Engine.ParticleSystemComponent
// Size: 0x710 (Inherited: 0x4a0)
struct UParticleSystemComponent : UFXSystemComponent {
	struct UParticleSystem* Template; // 0x4a0(0x08)
	struct TArray<struct UMaterialInterface*> EmitterMaterials; // 0x4a8(0x10)
	struct TArray<struct USkeletalMeshComponent*> SkelMeshComponents; // 0x4b8(0x10)
	char pad_4C8[0x1]; // 0x4c8(0x01)
	char bResetOnDetach : 1; // 0x4c9(0x01)
	char bUpdateOnDedicatedServer : 1; // 0x4c9(0x01)
	char pad_4C9_2 : 2; // 0x4c9(0x01)
	char bAllowRecycling : 1; // 0x4c9(0x01)
	char bAutoManageAttachment : 1; // 0x4c9(0x01)
	char bAutoAttachWeldSimulatedBodies : 1; // 0x4c9(0x01)
	char pad_4C9_7 : 1; // 0x4c9(0x01)
	char pad_4CA_0 : 1; // 0x4ca(0x01)
	char bWarmingUp : 1; // 0x4ca(0x01)
	char bOverrideLODMethod : 1; // 0x4ca(0x01)
	char bSkipUpdateDynamicDataDuringTick : 1; // 0x4ca(0x01)
	char pad_4CA_4 : 4; // 0x4ca(0x01)
	char pad_4CB[0xa]; // 0x4cb(0x0a)
	enum class ParticleSystemLODMethod LODMethod; // 0x4d5(0x01)
	enum class EParticleSignificanceLevel RequiredSignificance; // 0x4d6(0x01)
	char pad_4D7[0x1]; // 0x4d7(0x01)
	struct TArray<struct FParticleSysParam> InstanceParameters; // 0x4d8(0x10)
	struct FMulticastInlineDelegate OnParticleSpawn; // 0x4e8(0x10)
	struct FMulticastInlineDelegate OnParticleBurst; // 0x4f8(0x10)
	struct FMulticastInlineDelegate OnParticleDeath; // 0x508(0x10)
	struct FMulticastInlineDelegate OnParticleCollide; // 0x518(0x10)
	bool bOldPositionValid; // 0x528(0x01)
	char pad_529[0x3]; // 0x529(0x03)
	struct FVector OldPosition; // 0x52c(0x0c)
	struct FVector PartSysVelocity; // 0x538(0x0c)
	float WarmupTime; // 0x544(0x04)
	float WarmupTickRate; // 0x548(0x04)
	char pad_54C[0x14]; // 0x54c(0x14)
	float SecondsBeforeInactive; // 0x560(0x04)
	char pad_564[0x4]; // 0x564(0x04)
	float MaxTimeBeforeForceUpdateTransform; // 0x568(0x04)
	char pad_56C[0x1c]; // 0x56c(0x1c)
	struct TArray<struct UParticleSystemReplay*> ReplayClips; // 0x588(0x10)
	char pad_598[0x8]; // 0x598(0x08)
	float CustomTimeDilation; // 0x5a0(0x04)
	char pad_5A4[0x54]; // 0x5a4(0x54)
	struct TWeakObjectPtr<struct USceneComponent> AutoAttachParent; // 0x5f8(0x08)
	struct FName AutoAttachSocketName; // 0x600(0x08)
	enum class EAttachmentRule AutoAttachLocationRule; // 0x608(0x01)
	enum class EAttachmentRule AutoAttachRotationRule; // 0x609(0x01)
	enum class EAttachmentRule AutoAttachScaleRule; // 0x60a(0x01)
	char pad_60B[0x2d]; // 0x60b(0x2d)
	struct FMulticastInlineDelegate OnSystemFinished; // 0x638(0x10)
	char pad_648[0xc8]; // 0x648(0xc8)

	void SetTrailSourceData(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.SetTrailSourceData // (Final|Native|Public|BlueprintCallable) // @ game+0x3d9cf40
	void SetTemplate(struct UParticleSystem* NewTemplate); // Function Engine.ParticleSystemComponent.SetTemplate // (Final|Native|Public|BlueprintCallable) // @ game+0x3d9cec0
	void SetMaterialParameter(struct FName ParameterName, struct UMaterialInterface* Param); // Function Engine.ParticleSystemComponent.SetMaterialParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x3d9ce00
	void SetBeamTargetTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetTangent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d9c9b0
	void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetStrength // (Native|Public|BlueprintCallable) // @ game+0x3d9c8b0
	void SetBeamTargetPoint(int32_t EmitterIndex, struct FVector NewTargetPoint, int32_t TargetIndex); // Function Engine.ParticleSystemComponent.SetBeamTargetPoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d9c7a0
	void SetBeamSourceTangent(int32_t EmitterIndex, struct FVector NewTangentPoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceTangent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d9c690
	void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourceStrength // (Native|Public|BlueprintCallable) // @ game+0x3d9c590
	void SetBeamSourcePoint(int32_t EmitterIndex, struct FVector NewSourcePoint, int32_t SourceIndex); // Function Engine.ParticleSystemComponent.SetBeamSourcePoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d9c480
	void SetBeamEndPoint(int32_t EmitterIndex, struct FVector NewEndPoint); // Function Engine.ParticleSystemComponent.SetBeamEndPoint // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d9c3b0
	void SetAutoAttachParams(struct USceneComponent* Parent, struct FName SocketName, enum class EAttachLocation LocationType); // Function Engine.ParticleSystemComponent.SetAutoAttachParams // (Final|Native|Public|BlueprintCallable) // @ game+0x3d9c110
	int32_t GetNumActiveParticles(); // Function Engine.ParticleSystemComponent.GetNumActiveParticles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d9bff0
	struct UMaterialInterface* GetNamedMaterial(struct FName InName); // Function Engine.ParticleSystemComponent.GetNamedMaterial // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d9bf50
	bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetTangent // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d9be10
	bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength); // Function Engine.ParticleSystemComponent.GetBeamTargetStrength // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d9bcf0
	bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, struct FVector& OutTargetPoint); // Function Engine.ParticleSystemComponent.GetBeamTargetPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d9bbe0
	bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutTangentPoint); // Function Engine.ParticleSystemComponent.GetBeamSourceTangent // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d9bad0
	bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength); // Function Engine.ParticleSystemComponent.GetBeamSourceStrength // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d9b9b0
	bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, struct FVector& OutSourcePoint); // Function Engine.ParticleSystemComponent.GetBeamSourcePoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d9b8a0
	bool GetBeamEndPoint(int32_t EmitterIndex, struct FVector& OutEndPoint); // Function Engine.ParticleSystemComponent.GetBeamEndPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3d9b7c0
	void GenerateParticleEvent(struct FName InEventName, float InEmitterTime, struct FVector InLocation, struct FVector InDirection, struct FVector InVelocity); // Function Engine.ParticleSystemComponent.GenerateParticleEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3d9b610
	void EndTrails(); // Function Engine.ParticleSystemComponent.EndTrails // (Final|Native|Public|BlueprintCallable) // @ game+0x3d9b5f0
	struct UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(struct FName InName, struct UMaterialInterface* SourceMaterial); // Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance // (Native|Public|BlueprintCallable) // @ game+0x3d9b520
	void BeginTrails(struct FName InFirstSocketName, struct FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth); // Function Engine.ParticleSystemComponent.BeginTrails // (Final|Native|Public|BlueprintCallable) // @ game+0x3d9b340
};

// Class Engine.ParticleSystemReplay
// Size: 0x40 (Inherited: 0x28)
struct UParticleSystemReplay : UObject {
	int32_t ClipIDNumber; // 0x28(0x04)
	char pad_2C[0x14]; // 0x2c(0x14)
};

// Class Engine.PathFollowingAgentInterface
// Size: 0x28 (Inherited: 0x28)
struct UPathFollowingAgentInterface : UInterface {
};

// Class Engine.PawnNoiseEmitterComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UPawnNoiseEmitterComponent : UActorComponent {
	char bAIPerceptionSystemCompatibilityMode : 1; // 0xb0(0x01)
	char pad_B0_1 : 7; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	struct FVector LastRemoteNoisePosition; // 0xb4(0x0c)
	float NoiseLifetime; // 0xc0(0x04)
	float LastRemoteNoiseVolume; // 0xc4(0x04)
	float LastRemoteNoiseTime; // 0xc8(0x04)
	float LastLocalNoiseVolume; // 0xcc(0x04)
	float LastLocalNoiseTime; // 0xd0(0x04)
	char pad_D4[0x4]; // 0xd4(0x04)

	void MakeNoise(struct AActor* NoiseMaker, float Loudness, struct FVector& NoiseLocation); // Function Engine.PawnNoiseEmitterComponent.MakeNoise // (BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3da1410
};

// Class Engine.PhysicalAnimationComponent
// Size: 0xf0 (Inherited: 0xb0)
struct UPhysicalAnimationComponent : UActorComponent {
	float StrengthMultiplyer; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0xb8(0x08)
	char pad_C0[0x30]; // 0xc0(0x30)

	void SetStrengthMultiplyer(float InStrengthMultiplyer); // Function Engine.PhysicalAnimationComponent.SetStrengthMultiplyer // (Final|Native|Public|BlueprintCallable) // @ game+0x3da17f0
	void SetSkeletalMeshComponent(struct USkeletalMeshComponent* InSkeletalMeshComponent); // Function Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3da1770
	struct FTransform GetBodyTargetTransform(struct FName BodyName); // Function Engine.PhysicalAnimationComponent.GetBodyTargetTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da0e50
	void ApplyPhysicalAnimationSettingsBelow(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3da0c60
	void ApplyPhysicalAnimationSettings(struct FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3da0b80
	void ApplyPhysicalAnimationProfileBelow(struct FName BodyName, struct FName ProfileName, bool bIncludeSelf, bool bClearNotFound); // Function Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow // (Final|Native|Public|BlueprintCallable) // @ game+0x3da0a30
};

// Class Engine.PhysicalMaterialMask
// Size: 0x30 (Inherited: 0x28)
struct UPhysicalMaterialMask : UObject {
	int32_t UVChannelIndex; // 0x28(0x04)
	enum class TextureAddress AddressX; // 0x2c(0x01)
	enum class TextureAddress AddressY; // 0x2d(0x01)
	char pad_2E[0x2]; // 0x2e(0x02)
};

// Class Engine.PhysicalMaterialPropertyBase
// Size: 0x28 (Inherited: 0x28)
struct UPhysicalMaterialPropertyBase : UObject {
};

// Class Engine.PhysicsAsset
// Size: 0x138 (Inherited: 0x28)
struct UPhysicsAsset : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<int32_t> BoundsBodies; // 0x30(0x10)
	struct TArray<struct USkeletalBodySetup*> SkeletalBodySetups; // 0x40(0x10)
	struct TArray<struct UPhysicsConstraintTemplate*> ConstraintSetup; // 0x50(0x10)
	struct FSolverIterations SolverIterations; // 0x60(0x18)
	char bNotForDedicatedServer : 1; // 0x78(0x01)
	char pad_78_1 : 7; // 0x78(0x01)
	char pad_79[0xa7]; // 0x79(0xa7)
	struct UThumbnailInfo* ThumbnailInfo; // 0x120(0x08)
	struct TArray<struct UBodySetup*> BodySetup; // 0x128(0x10)
};

// Class Engine.SkeletalBodySetup
// Size: 0x2e8 (Inherited: 0x2d0)
struct USkeletalBodySetup : UBodySetup {
	bool bSkipScaleFromAnimation; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)
	struct TArray<struct FPhysicalAnimationProfile> PhysicalAnimationData; // 0x2d8(0x10)
};

// Class Engine.PhysicsCollisionHandler
// Size: 0x40 (Inherited: 0x28)
struct UPhysicsCollisionHandler : UObject {
	float ImpactThreshold; // 0x28(0x04)
	float ImpactReFireDelay; // 0x2c(0x04)
	struct USoundBase* DefaultImpactSound; // 0x30(0x08)
	float LastImpactSoundTime; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Engine.RigidBodyBase
// Size: 0x320 (Inherited: 0x320)
struct ARigidBodyBase : AActor {
};

// Class Engine.PhysicsConstraintActor
// Size: 0x340 (Inherited: 0x320)
struct APhysicsConstraintActor : ARigidBodyBase {
	struct UPhysicsConstraintComponent* ConstraintComp; // 0x320(0x08)
	struct AActor* ConstraintActor1; // 0x328(0x08)
	struct AActor* ConstraintActor2; // 0x330(0x08)
	char bDisableCollision : 1; // 0x338(0x01)
	char pad_338_1 : 7; // 0x338(0x01)
	char pad_339[0x7]; // 0x339(0x07)
};

// Class Engine.PhysicsConstraintComponent
// Size: 0x420 (Inherited: 0x220)
struct UPhysicsConstraintComponent : USceneComponent {
	struct AActor* ConstraintActor1; // 0x220(0x08)
	struct FConstrainComponentPropName ComponentName1; // 0x228(0x08)
	struct AActor* ConstraintActor2; // 0x230(0x08)
	struct FConstrainComponentPropName ComponentName2; // 0x238(0x08)
	char pad_240[0x10]; // 0x240(0x10)
	struct UPhysicsConstraintTemplate* ConstraintSetup; // 0x250(0x08)
	struct FMulticastInlineDelegate OnConstraintBroken; // 0x258(0x10)
	struct FConstraintInstance ConstraintInstance; // 0x268(0x1b8)

	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing // (Final|Native|Public|BlueprintCallable) // @ game+0x3da5230
	void SetOrientationDriveSLERP(bool bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP // (Final|Native|Public|BlueprintCallable) // @ game+0x3da51a0
	void SetLinearZLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearZLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x3da50e0
	void SetLinearYLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearYLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x3da5020
	void SetLinearXLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize); // Function Engine.PhysicsConstraintComponent.SetLinearXLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x3da4f60
	void SetLinearVelocityTarget(struct FVector& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3da4ed0
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x3da4db0
	void SetLinearPositionTarget(struct FVector& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3da4ca0
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x3da4b80
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetLinearDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x3da4a70
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetLinearBreakable // (Final|Native|Public|BlueprintCallable) // @ game+0x3da4920
	void SetDisableCollision(bool bDisableCollision); // Function Engine.PhysicsConstraintComponent.SetDisableCollision // (Final|Native|Public|BlueprintCallable) // @ game+0x3da4810
	void SetConstraintReferencePosition(enum class EConstraintFrame Frame, struct FVector& RefPosition); // Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3da4740
	void SetConstraintReferenceOrientation(enum class EConstraintFrame Frame, struct FVector& PriAxis, struct FVector& SecAxis); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3da4620
	void SetConstraintReferenceFrame(enum class EConstraintFrame Frame, struct FTransform& RefFrame); // Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3da4500
	void SetConstrainedComponents(struct UPrimitiveComponent* Component1, struct FName BoneName1, struct UPrimitiveComponent* Component2, struct FName BoneName2); // Function Engine.PhysicsConstraintComponent.SetConstrainedComponents // (Final|Native|Public|BlueprintCallable) // @ game+0x3da43b0
	void SetAngularVelocityTarget(struct FVector& InVelTarget); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3da4320
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing // (Final|Native|Public|BlueprintCallable) // @ game+0x3da4250
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP // (Final|Native|Public|BlueprintCallable) // @ game+0x3da41c0
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x3da40f0
	void SetAngularTwistLimit(enum class EAngularConstraintMotion ConstraintType, float TwistLimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x3da4030
	void SetAngularSwing2Limit(enum class EAngularConstraintMotion MotionType, float Swing2LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit // (Final|Native|Public|BlueprintCallable) // @ game+0x3da3f70
	void SetAngularSwing1Limit(enum class EAngularConstraintMotion MotionType, float Swing1LimitAngle); // Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit // (Final|Native|Public|BlueprintCallable) // @ game+0x3da3eb0
	void SetAngularOrientationTarget(struct FRotator& InPosTarget); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3da3da0
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive // (Final|Native|Public|BlueprintCallable) // @ game+0x3da3cd0
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Function Engine.PhysicsConstraintComponent.SetAngularDriveParams // (Final|Native|Public|BlueprintCallable) // @ game+0x3da3bc0
	void SetAngularDriveMode(enum class EAngularDriveMode DriveMode); // Function Engine.PhysicsConstraintComponent.SetAngularDriveMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3da3b40
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold); // Function Engine.PhysicsConstraintComponent.SetAngularBreakable // (Final|Native|Public|BlueprintCallable) // @ game+0x3da39f0
	bool IsBroken(); // Function Engine.PhysicsConstraintComponent.IsBroken // (Final|Native|Public|BlueprintCallable) // @ game+0x3da39c0
	float GetCurrentTwist(); // Function Engine.PhysicsConstraintComponent.GetCurrentTwist // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da34d0
	float GetCurrentSwing2(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing2 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da34a0
	float GetCurrentSwing1(); // Function Engine.PhysicsConstraintComponent.GetCurrentSwing1 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da3470
	void GetConstraintForce(struct FVector& OutLinearForce, struct FVector& OutAngularForce); // Function Engine.PhysicsConstraintComponent.GetConstraintForce // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3da3390
	void BreakConstraint(); // Function Engine.PhysicsConstraintComponent.BreakConstraint // (Final|Native|Public|BlueprintCallable) // @ game+0x3da3370
};

// Class Engine.PhysicsConstraintTemplate
// Size: 0x2f8 (Inherited: 0x28)
struct UPhysicsConstraintTemplate : UObject {
	struct FConstraintInstance DefaultInstance; // 0x28(0x1b8)
	struct TArray<struct FPhysicsConstraintProfileHandle> ProfileHandles; // 0x1e0(0x10)
	struct FConstraintProfileProperties DefaultProfile; // 0x1f0(0x104)
	char pad_2F4[0x4]; // 0x2f4(0x04)
};

// Class Engine.PhysicsHandleComponent
// Size: 0x160 (Inherited: 0xb0)
struct UPhysicsHandleComponent : UActorComponent {
	struct UPrimitiveComponent* GrabbedComponent; // 0xb0(0x08)
	char pad_B8[0x8]; // 0xb8(0x08)
	char pad_C0_0 : 1; // 0xc0(0x01)
	char bSoftAngularConstraint : 1; // 0xc0(0x01)
	char bSoftLinearConstraint : 1; // 0xc0(0x01)
	char bInterpolateTarget : 1; // 0xc0(0x01)
	char pad_C0_4 : 4; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	float LinearDamping; // 0xc4(0x04)
	float LinearStiffness; // 0xc8(0x04)
	float AngularDamping; // 0xcc(0x04)
	float AngularStiffness; // 0xd0(0x04)
	char pad_D4[0x6c]; // 0xd4(0x6c)
	float InterpolationSpeed; // 0x140(0x04)
	char pad_144[0x1c]; // 0x144(0x1c)

	void SetTargetRotation(struct FRotator NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da5470
	void SetTargetLocationAndRotation(struct FVector NewLocation, struct FRotator NewRotation); // Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da5390
	void SetTargetLocation(struct FVector NewLocation); // Function Engine.PhysicsHandleComponent.SetTargetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da5300
	void SetLinearStiffness(float NewLinearStiffness); // Function Engine.PhysicsHandleComponent.SetLinearStiffness // (Final|Native|Public|BlueprintCallable) // @ game+0x3da4d30
	void SetLinearDamping(float NewLinearDamping); // Function Engine.PhysicsHandleComponent.SetLinearDamping // (Final|Native|Public|BlueprintCallable) // @ game+0x3da49f0
	void SetInterpolationSpeed(float NewInterpolationSpeed); // Function Engine.PhysicsHandleComponent.SetInterpolationSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x3da48a0
	void SetAngularStiffness(float NewAngularStiffness); // Function Engine.PhysicsHandleComponent.SetAngularStiffness // (Final|Native|Public|BlueprintCallable) // @ game+0x3da3e30
	void SetAngularDamping(float NewAngularDamping); // Function Engine.PhysicsHandleComponent.SetAngularDamping // (Final|Native|Public|BlueprintCallable) // @ game+0x3da3ac0
	void ReleaseComponent(); // Function Engine.PhysicsHandleComponent.ReleaseComponent // (Native|Public|BlueprintCallable) // @ game+0x203ef30
	void GrabComponentAtLocationWithRotation(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector Location, struct FRotator Rotation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da3840
	void GrabComponentAtLocation(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation); // Function Engine.PhysicsHandleComponent.GrabComponentAtLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da3730
	void GrabComponent(struct UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, bool bConstrainRotation); // Function Engine.PhysicsHandleComponent.GrabComponent // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3da35e0
	void GetTargetLocationAndRotation(struct FVector& TargetLocation, struct FRotator& TargetRotation); // Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da3500
	struct UPrimitiveComponent* GetGrabbedComponent(); // Function Engine.PhysicsHandleComponent.GetGrabbedComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee7620
};

// Class Engine.PhysicsSettings
// Size: 0x138 (Inherited: 0x38)
struct UPhysicsSettings : UDeveloperSettings {
	float DefaultGravityZ; // 0x38(0x04)
	float DefaultTerminalVelocity; // 0x3c(0x04)
	float DefaultFluidFriction; // 0x40(0x04)
	int32_t SimulateScratchMemorySize; // 0x44(0x04)
	int32_t RagdollAggregateThreshold; // 0x48(0x04)
	float TriangleMeshTriangleMinAreaThreshold; // 0x4c(0x04)
	bool bEnableShapeSharing; // 0x50(0x01)
	bool bEnablePCM; // 0x51(0x01)
	bool bEnableStabilization; // 0x52(0x01)
	bool bWarnMissingLocks; // 0x53(0x01)
	bool bEnable2DPhysics; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	struct FRigidBodyErrorCorrection PhysicErrorCorrection; // 0x58(0x34)
	enum class ESettingsLockedAxis LockedAxis; // 0x8c(0x01)
	enum class ESettingsDOF DefaultDegreesOfFreedom; // 0x8d(0x01)
	char pad_8E[0x2]; // 0x8e(0x02)
	float BounceThresholdVelocity; // 0x90(0x04)
	enum class EFrictionCombineMode FrictionCombineMode; // 0x94(0x01)
	enum class EFrictionCombineMode RestitutionCombineMode; // 0x95(0x01)
	char pad_96[0x2]; // 0x96(0x02)
	float MaxAngularVelocity; // 0x98(0x04)
	float MaxDepenetrationVelocity; // 0x9c(0x04)
	float ContactOffsetMultiplier; // 0xa0(0x04)
	float MinContactOffset; // 0xa4(0x04)
	float MaxContactOffset; // 0xa8(0x04)
	bool bSimulateSkeletalMeshOnDedicatedServer; // 0xac(0x01)
	enum class ECollisionTraceFlag DefaultShapeComplexity; // 0xad(0x01)
	bool bDefaultHasComplexCollision; // 0xae(0x01)
	bool bSuppressFaceRemapTable; // 0xaf(0x01)
	bool bSupportUVFromHitResults; // 0xb0(0x01)
	bool bDisableActiveActors; // 0xb1(0x01)
	bool bDisableKinematicStaticPairs; // 0xb2(0x01)
	bool bDisableKinematicKinematicPairs; // 0xb3(0x01)
	bool bDisableCCD; // 0xb4(0x01)
	bool bEnableEnhancedDeterminism; // 0xb5(0x01)
	char pad_B6[0x2]; // 0xb6(0x02)
	float AnimPhysicsMinDeltaTime; // 0xb8(0x04)
	bool bSimulateAnimPhysicsAfterReset; // 0xbc(0x01)
	char pad_BD[0x3]; // 0xbd(0x03)
	float MaxPhysicsDeltaTime; // 0xc0(0x04)
	bool bSubstepping; // 0xc4(0x01)
	bool bSubsteppingAsync; // 0xc5(0x01)
	char pad_C6[0x2]; // 0xc6(0x02)
	float MaxSubstepDeltaTime; // 0xc8(0x04)
	int32_t MaxSubsteps; // 0xcc(0x04)
	float SyncSceneSmoothingFactor; // 0xd0(0x04)
	float InitialAverageFrameRate; // 0xd4(0x04)
	int32_t PhysXTreeRebuildRate; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
	struct TArray<struct FPhysicalSurfaceName> PhysicalSurfaces; // 0xe0(0x10)
	struct FBroadphaseSettings DefaultBroadphaseSettings; // 0xf0(0x40)
	struct FChaosPhysicsSettings ChaosSettings; // 0x130(0x03)
	char pad_133[0x5]; // 0x133(0x05)
};

// Class Engine.PhysicsSpringComponent
// Size: 0x250 (Inherited: 0x220)
struct UPhysicsSpringComponent : USceneComponent {
	float SpringStiffness; // 0x220(0x04)
	float SpringDamping; // 0x224(0x04)
	float SpringLengthAtRest; // 0x228(0x04)
	float SpringRadius; // 0x22c(0x04)
	enum class ECollisionChannel SpringChannel; // 0x230(0x01)
	bool bIgnoreSelf; // 0x231(0x01)
	char pad_232[0x2]; // 0x232(0x02)
	float SpringCompression; // 0x234(0x04)
	char pad_238[0x18]; // 0x238(0x18)

	struct FVector GetSpringRestingPoint(); // Function Engine.PhysicsSpringComponent.GetSpringRestingPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da92e0
	struct FVector GetSpringDirection(); // Function Engine.PhysicsSpringComponent.GetSpringDirection // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da92a0
	struct FVector GetSpringCurrentEndPoint(); // Function Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da9260
	float GetNormalizedCompressionScalar(); // Function Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3da9200
};

// Class Engine.PhysicsThruster
// Size: 0x328 (Inherited: 0x320)
struct APhysicsThruster : ARigidBodyBase {
	struct UPhysicsThrusterComponent* ThrusterComponent; // 0x320(0x08)
};

// Class Engine.PhysicsThrusterComponent
// Size: 0x230 (Inherited: 0x220)
struct UPhysicsThrusterComponent : USceneComponent {
	float ThrustStrength; // 0x220(0x04)
	char pad_224[0xc]; // 0x224(0x0c)
};

// Class Engine.PlanarReflection
// Size: 0x340 (Inherited: 0x330)
struct APlanarReflection : ASceneCapture {
	struct UPlanarReflectionComponent* PlanarReflectionComponent; // 0x330(0x08)
	bool bShowPreviewPlane; // 0x338(0x01)
	char pad_339[0x7]; // 0x339(0x07)

	void OnInterpToggle(bool bEnable); // Function Engine.PlanarReflection.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x3da9380
};

// Class Engine.PlanarReflectionComponent
// Size: 0x3a0 (Inherited: 0x2c0)
struct UPlanarReflectionComponent : USceneCaptureComponent {
	struct UBoxComponent* PreviewBox; // 0x2b8(0x08)
	float NormalDistortionStrength; // 0x2c0(0x04)
	float PrefilterRoughness; // 0x2c4(0x04)
	float PrefilterRoughnessDistance; // 0x2c8(0x04)
	int32_t ScreenPercentage; // 0x2cc(0x04)
	float ExtraFOV; // 0x2d0(0x04)
	float DistanceFromPlaneFadeStart; // 0x2d4(0x04)
	float DistanceFromPlaneFadeEnd; // 0x2d8(0x04)
	float DistanceFromPlaneFadeoutStart; // 0x2dc(0x04)
	float DistanceFromPlaneFadeoutEnd; // 0x2e0(0x04)
	float AngleFromPlaneFadeStart; // 0x2e4(0x04)
	float AngleFromPlaneFadeEnd; // 0x2e8(0x04)
	bool bShowPreviewPlane; // 0x2ec(0x01)
	bool bRenderSceneTwoSided; // 0x2ed(0x01)
	char pad_2F6[0xaa]; // 0x2f6(0xaa)
};

// Class Engine.PlaneReflectionCapture
// Size: 0x328 (Inherited: 0x328)
struct APlaneReflectionCapture : AReflectionCapture {
};

// Class Engine.PlaneReflectionCaptureComponent
// Size: 0x2c0 (Inherited: 0x2b0)
struct UPlaneReflectionCaptureComponent : UReflectionCaptureComponent {
	float InfluenceRadiusScale; // 0x2a8(0x04)
	struct UDrawSphereComponent* PreviewInfluenceRadius; // 0x2b0(0x08)
	struct UBoxComponent* PreviewCaptureBox; // 0x2b8(0x08)
};

// Class Engine.PlatformEventsComponent
// Size: 0xd0 (Inherited: 0xb0)
struct UPlatformEventsComponent : UActorComponent {
	struct FMulticastInlineDelegate PlatformChangedToLaptopModeDelegate; // 0xb0(0x10)
	struct FMulticastInlineDelegate PlatformChangedToTabletModeDelegate; // 0xc0(0x10)

	bool SupportsConvertibleLaptops(); // Function Engine.PlatformEventsComponent.SupportsConvertibleLaptops // (Final|Native|Public|BlueprintCallable) // @ game+0x3daa390
	void PlatformEventDelegate__DelegateSignature(); // DelegateFunction Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x23a3b60
	bool IsInTabletMode(); // Function Engine.PlatformEventsComponent.IsInTabletMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3da9350
	bool IsInLaptopMode(); // Function Engine.PlatformEventsComponent.IsInLaptopMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3da9320
};

// Class Engine.PlatformInterfaceWebResponse
// Size: 0xb0 (Inherited: 0x28)
struct UPlatformInterfaceWebResponse : UObject {
	struct FString OriginalURL; // 0x28(0x10)
	int32_t responsecode; // 0x38(0x04)
	int32_t Tag; // 0x3c(0x04)
	struct FString StringResponse; // 0x40(0x10)
	struct TArray<char> BinaryResponse; // 0x50(0x10)
	char pad_60[0x50]; // 0x60(0x50)

	int32_t GetNumHeaders(); // Function Engine.PlatformInterfaceWebResponse.GetNumHeaders // (Native|Public) // @ game+0x151b8e0
	struct FString GetHeaderValue(struct FString HeaderName); // Function Engine.PlatformInterfaceWebResponse.GetHeaderValue // (Native|Public) // @ game+0x3da9110
	void GetHeader(int32_t HeaderIndex, struct FString& Header, struct FString& Value); // Function Engine.PlatformInterfaceWebResponse.GetHeader // (Native|Public|HasOutParms) // @ game+0x3da8fa0
};

// Class Engine.PlayerInput
// Size: 0x3a8 (Inherited: 0x28)
struct UPlayerInput : UObject {
	char pad_28[0xf8]; // 0x28(0xf8)
	struct TArray<struct FKeyBind> DebugExecBindings; // 0x120(0x10)
	char pad_130[0x30]; // 0x130(0x30)
	struct TArray<struct FName> InvertedAxis; // 0x160(0x10)
	char pad_170[0x238]; // 0x170(0x238)

	void SetMouseSensitivity(float Sensitivity); // Function Engine.PlayerInput.SetMouseSensitivity // (Final|Exec|Native|Public) // @ game+0x3db9c60
	void SetBind(struct FName BindName, struct FString Command); // Function Engine.PlayerInput.SetBind // (Final|Exec|Native|Public) // @ game+0x3db95f0
	void InvertAxisKey(struct FKey AxisKey); // Function Engine.PlayerInput.InvertAxisKey // (Final|Exec|Native|Public) // @ game+0x3db9490
	void InvertAxis(struct FName AxisName); // Function Engine.PlayerInput.InvertAxis // (Final|Exec|Native|Public) // @ game+0x3db9410
	void ClearSmoothing(); // Function Engine.PlayerInput.ClearSmoothing // (Final|Exec|Native|Public) // @ game+0x3db8f80
};

// Class Engine.PlayerStartPIE
// Size: 0x350 (Inherited: 0x350)
struct APlayerStartPIE : APlayerStart {
};

// Class Engine.PluginCommandlet
// Size: 0xa0 (Inherited: 0x80)
struct UPluginCommandlet : UCommandlet {
	char pad_80[0x20]; // 0x80(0x20)
};

// Class Engine.PointLight
// Size: 0x338 (Inherited: 0x330)
struct APointLight : ALight {
	struct UPointLightComponent* PointLightComponent; // 0x330(0x08)

	void SetRadius(float NewRadius); // Function Engine.PointLight.SetRadius // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3db9ce0
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLight.SetLightFalloffExponent // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3db9b60
};

// Class Engine.PointLightComponent
// Size: 0x3a0 (Inherited: 0x380)
struct UPointLightComponent : ULocalLightComponent {
	char bUseInverseSquaredFalloff : 1; // 0x380(0x01)
	char pad_380_1 : 7; // 0x380(0x01)
	char pad_381[0x3]; // 0x381(0x03)
	float LightFalloffExponent; // 0x384(0x04)
	float SourceRadius; // 0x388(0x04)
	float SoftSourceRadius; // 0x38c(0x04)
	float SourceLength; // 0x390(0x04)
	char pad_394[0xc]; // 0x394(0x0c)

	void SetSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSourceRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x3db9e60
	void SetSourceLength(float NewValue); // Function Engine.PointLightComponent.SetSourceLength // (Final|Native|Public|BlueprintCallable) // @ game+0x3db9de0
	void SetSoftSourceRadius(float bNewValue); // Function Engine.PointLightComponent.SetSoftSourceRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x3db9d60
	void SetLightFalloffExponent(float NewLightFalloffExponent); // Function Engine.PointLightComponent.SetLightFalloffExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3db9be0
};

// Class Engine.Polys
// Size: 0x38 (Inherited: 0x28)
struct UPolys : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Engine.PoseableMeshComponent
// Size: 0x840 (Inherited: 0x6e0)
struct UPoseableMeshComponent : USkinnedMeshComponent {
	char pad_6E0[0x160]; // 0x6e0(0x160)

	void SetBoneTransformByName(struct FName BoneName, struct FTransform& InTransform, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneTransformByName // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3db9a00
	void SetBoneScaleByName(struct FName BoneName, struct FVector InScale3D, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneScaleByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3db98f0
	void SetBoneRotationByName(struct FName BoneName, struct FRotator InRotation, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneRotationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3db97e0
	void SetBoneLocationByName(struct FName BoneName, struct FVector InLocation, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.SetBoneLocationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3db96d0
	void ResetBoneTransformByName(struct FName BoneName); // Function Engine.PoseableMeshComponent.ResetBoneTransformByName // (Final|Native|Public|BlueprintCallable) // @ game+0x3db9570
	struct FTransform GetBoneTransformByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneTransformByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3db9290
	struct FVector GetBoneScaleByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneScaleByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3db91c0
	struct FRotator GetBoneRotationByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneRotationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3db90f0
	struct FVector GetBoneLocationByName(struct FName BoneName, enum class EBoneSpaces BoneSpace); // Function Engine.PoseableMeshComponent.GetBoneLocationByName // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3db9020
	void CopyPoseFromSkeletalComponent(struct USkeletalMeshComponent* InComponentToCopy); // Function Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3db8fa0
};

// Class Engine.PoseAsset
// Size: 0x120 (Inherited: 0x80)
struct UPoseAsset : UAnimationAsset {
	struct FPoseDataContainer PoseContainer; // 0x80(0x90)
	bool bAdditivePose; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	int32_t BasePoseIndex; // 0x114(0x04)
	struct FName RetargetSource; // 0x118(0x08)
};

// Class Engine.PoseWatch
// Size: 0x38 (Inherited: 0x28)
struct UPoseWatch : UObject {
	struct UEdGraphNode* Node; // 0x28(0x08)
	struct FColor PoseWatchColour; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.PostProcessComponent
// Size: 0x800 (Inherited: 0x220)
struct UPostProcessComponent : USceneComponent {
	char pad_220[0x10]; // 0x220(0x10)
	struct FPostProcessSettings Settings; // 0x230(0x5c0)
	float Priority; // 0x7f0(0x04)
	float BlendRadius; // 0x7f4(0x04)
	float BlendWeight; // 0x7f8(0x04)
	char bEnabled : 1; // 0x7fc(0x01)
	char bUnbound : 1; // 0x7fc(0x01)
	char pad_7FC_2 : 6; // 0x7fc(0x01)
	char pad_7FD[0x3]; // 0x7fd(0x03)

	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.PostProcessComponent.AddOrUpdateBlendable // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3db8e30
};

// Class Engine.PostProcessVolume
// Size: 0x930 (Inherited: 0x358)
struct APostProcessVolume : AVolume {
	char pad_358[0x8]; // 0x358(0x08)
	struct FPostProcessSettings Settings; // 0x360(0x5c0)
	float Priority; // 0x920(0x04)
	float BlendRadius; // 0x924(0x04)
	float BlendWeight; // 0x928(0x04)
	char bEnabled : 1; // 0x92c(0x01)
	char bUnbound : 1; // 0x92c(0x01)
	char pad_92C_2 : 6; // 0x92c(0x01)
	char pad_92D[0x3]; // 0x92d(0x03)

	void AddOrUpdateBlendable(struct TScriptInterface<IBlendableInterface> InBlendableObject, float InWeight); // Function Engine.PostProcessVolume.AddOrUpdateBlendable // (Final|Native|Public|BlueprintCallable) // @ game+0x3db8ce0
};

// Class Engine.PrecomputedVisibilityOverrideVolume
// Size: 0x388 (Inherited: 0x358)
struct APrecomputedVisibilityOverrideVolume : AVolume {
	struct TArray<struct AActor*> OverrideVisibleActors; // 0x358(0x10)
	struct TArray<struct AActor*> OverrideInvisibleActors; // 0x368(0x10)
	struct TArray<struct FName> OverrideInvisibleLevels; // 0x378(0x10)
};

// Class Engine.PrecomputedVisibilityVolume
// Size: 0x358 (Inherited: 0x358)
struct APrecomputedVisibilityVolume : AVolume {
};

// Class Engine.PreviewCollectionInterface
// Size: 0x28 (Inherited: 0x28)
struct UPreviewCollectionInterface : UInterface {
};

// Class Engine.PreviewMeshCollection
// Size: 0x50 (Inherited: 0x30)
struct UPreviewMeshCollection : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
	struct USkeleton* Skeleton; // 0x38(0x08)
	struct TArray<struct FPreviewMeshCollectionEntry> SkeletalMeshes; // 0x40(0x10)
};

// Class Engine.PrimaryAssetLabel
// Size: 0x68 (Inherited: 0x30)
struct UPrimaryAssetLabel : UPrimaryDataAsset {
	struct FPrimaryAssetRules Rules; // 0x30(0x0c)
	char bLabelAssetsInMyDirectory : 1; // 0x3c(0x01)
	char bIsRuntimeLabel : 1; // 0x3c(0x01)
	char pad_3C_2 : 6; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	struct TArray<struct TSoftObjectPtr<UObject>> ExplicitAssets; // 0x40(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> ExplicitBlueprints; // 0x50(0x10)
	struct FCollectionReference AssetCollection; // 0x60(0x08)
};

// Class Engine.ProxyLODMeshSimplificationSettings
// Size: 0x40 (Inherited: 0x38)
struct UProxyLODMeshSimplificationSettings : UDeveloperSettings {
	struct FName ProxyLODMeshReductionModuleName; // 0x38(0x08)
};

// Class Engine.RadialForceActor
// Size: 0x328 (Inherited: 0x320)
struct ARadialForceActor : ARigidBodyBase {
	struct URadialForceComponent* ForceComponent; // 0x320(0x08)

	void ToggleForce(); // Function Engine.RadialForceActor.ToggleForce // (Native|Public|BlueprintCallable) // @ game+0x1f10660
	void FireImpulse(); // Function Engine.RadialForceActor.FireImpulse // (Native|Public|BlueprintCallable) // @ game+0x1e477f0
	void EnableForce(); // Function Engine.RadialForceActor.EnableForce // (Native|Public|BlueprintCallable) // @ game+0x1237ce0
	void DisableForce(); // Function Engine.RadialForceActor.DisableForce // (Native|Public|BlueprintCallable) // @ game+0x1f11ef0
};

// Class Engine.RadialForceComponent
// Size: 0x250 (Inherited: 0x220)
struct URadialForceComponent : USceneComponent {
	float Radius; // 0x220(0x04)
	enum class ERadialImpulseFalloff Falloff; // 0x224(0x01)
	char pad_225[0x3]; // 0x225(0x03)
	float ImpulseStrength; // 0x228(0x04)
	char bImpulseVelChange : 1; // 0x22c(0x01)
	char bIgnoreOwningActor : 1; // 0x22c(0x01)
	char pad_22C_2 : 6; // 0x22c(0x01)
	char pad_22D[0x3]; // 0x22d(0x03)
	float ForceStrength; // 0x230(0x04)
	float DestructibleDamage; // 0x234(0x04)
	struct TArray<enum class EObjectTypeQuery> ObjectTypesToAffect; // 0x238(0x10)
	char pad_248[0x8]; // 0x248(0x08)

	void RemoveObjectTypeToAffect(enum class EObjectTypeQuery ObjectType); // Function Engine.RadialForceComponent.RemoveObjectTypeToAffect // (Native|Public|BlueprintCallable) // @ game+0x3dc5190
	void FireImpulse(); // Function Engine.RadialForceComponent.FireImpulse // (Native|Public|BlueprintCallable) // @ game+0x3dc4f40
	void AddObjectTypeToAffect(enum class EObjectTypeQuery ObjectType); // Function Engine.RadialForceComponent.AddObjectTypeToAffect // (Native|Public|BlueprintCallable) // @ game+0x3dc4ec0
};

// Class Engine.RectLight
// Size: 0x338 (Inherited: 0x330)
struct ARectLight : ALight {
	struct URectLightComponent* RectLightComponent; // 0x330(0x08)
};

// Class Engine.RectLightComponent
// Size: 0x3a0 (Inherited: 0x380)
struct URectLightComponent : ULocalLightComponent {
	float SourceWidth; // 0x380(0x04)
	float SourceHeight; // 0x384(0x04)
	float BarnDoorAngle; // 0x388(0x04)
	float BarnDoorLength; // 0x38c(0x04)
	struct UTexture* SourceTexture; // 0x390(0x08)
	char pad_398[0x8]; // 0x398(0x08)

	void SetSourceWidth(float bNewValue); // Function Engine.RectLightComponent.SetSourceWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc5440
	void SetSourceTexture(struct UTexture* bNewValue); // Function Engine.RectLightComponent.SetSourceTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc53c0
	void SetSourceHeight(float NewValue); // Function Engine.RectLightComponent.SetSourceHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x3db9be0
	void SetBarnDoorLength(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorLength // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc52b0
	void SetBarnDoorAngle(float NewValue); // Function Engine.RectLightComponent.SetBarnDoorAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x3dc5230
};

// Class Engine.RendererSettings
// Size: 0xf0 (Inherited: 0x38)
struct URendererSettings : UDeveloperSettings {
	char bMobileDisableVertexFog : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int32_t MaxMobileCascades; // 0x3c(0x04)
	enum class EMobileMSAASampleCount MobileMSAASampleCount; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	char bMobileUseLegacyShadingModel : 1; // 0x44(0x01)
	char bMobileAllowDitheredLODTransition : 1; // 0x44(0x01)
	char bMobileAllowSoftwareOcclusionCulling : 1; // 0x44(0x01)
	char bMobileVirtualTextures : 1; // 0x44(0x01)
	char bDiscardUnusedQualityLevels : 1; // 0x44(0x01)
	char bOcclusionCulling : 1; // 0x44(0x01)
	char pad_44_6 : 2; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	float MinScreenRadiusForLights; // 0x48(0x04)
	float MinScreenRadiusForEarlyZPass; // 0x4c(0x04)
	float MinScreenRadiusForCSMdepth; // 0x50(0x04)
	char bPrecomputedVisibilityWarning : 1; // 0x54(0x01)
	char bUseCullDistanceVolumes : 1; // 0x54(0x01)
	char bTextureStreaming : 1; // 0x54(0x01)
	char bUseDXT5NormalMaps : 1; // 0x54(0x01)
	char bVirtualTextures : 1; // 0x54(0x01)
	char bVirtualTexturedLightmaps : 1; // 0x54(0x01)
	char pad_54_6 : 2; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	uint32_t VirtualTextureTileSize; // 0x58(0x04)
	uint32_t VirtualTextureTileBorderSize; // 0x5c(0x04)
	uint32_t VirtualTextureFeedbackFactor; // 0x60(0x04)
	char bVirtualTextureEnableCompressZlib : 1; // 0x64(0x01)
	char bVirtualTextureEnableCompressCrunch : 1; // 0x64(0x01)
	char bClearCoatEnableSecondNormal : 1; // 0x64(0x01)
	char bPreIntegratedSkinBRDF : 1; // 0x64(0x01)
	char bAnisotropicBRDF : 1; // 0x64(0x01)
	char pad_64_5 : 3; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	int32_t ReflectionCaptureResolution; // 0x68(0x04)
	char ReflectionEnvironmentLightmapMixBasedOnRoughness : 1; // 0x6c(0x01)
	char bForwardShading : 1; // 0x6c(0x01)
	char bVertexFoggingForOpaque : 1; // 0x6c(0x01)
	char bAllowStaticLighting : 1; // 0x6c(0x01)
	char bUseNormalMapsForStaticLighting : 1; // 0x6c(0x01)
	char bGenerateMeshDistanceFields : 1; // 0x6c(0x01)
	char bEightBitMeshDistanceFields : 1; // 0x6c(0x01)
	char bGenerateLandscapeGIData : 1; // 0x6c(0x01)
	char bCompressMeshDistanceFields : 1; // 0x6d(0x01)
	char pad_6D_1 : 7; // 0x6d(0x01)
	char pad_6E[0x2]; // 0x6e(0x02)
	float TessellationAdaptivePixelsPerTriangle; // 0x70(0x04)
	char bSeparateTranslucency : 1; // 0x74(0x01)
	char pad_74_1 : 7; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
	enum class ETranslucentSortPolicy TranslucentSortPolicy; // 0x78(0x01)
	char pad_79[0x3]; // 0x79(0x03)
	struct FVector TranslucentSortAxis; // 0x7c(0x0c)
	enum class ECustomDepthStencil CustomDepthStencil; // 0x88(0x01)
	char pad_89[0x3]; // 0x89(0x03)
	char bCustomDepthTaaJitter : 1; // 0x8c(0x01)
	char pad_8C_1 : 7; // 0x8c(0x01)
	char pad_8D[0x3]; // 0x8d(0x03)
	enum class EAlphaChannelMode bEnableAlphaChannelInPostProcessing; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	char bDefaultFeatureBloom : 1; // 0x94(0x01)
	char bDefaultFeatureAmbientOcclusion : 1; // 0x94(0x01)
	char bDefaultFeatureAmbientOcclusionStaticFraction : 1; // 0x94(0x01)
	char bDefaultFeatureAutoExposure : 1; // 0x94(0x01)
	char pad_94_4 : 4; // 0x94(0x01)
	char pad_95[0x3]; // 0x95(0x03)
	enum class EAutoExposureMethodUI DefaultFeatureAutoExposure; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	float DefaultFeatureAutoExposureBias; // 0x9c(0x04)
	char bExtendDefaultLuminanceRangeInAutoExposureSettings : 1; // 0xa0(0x01)
	char bUsePreExposure : 1; // 0xa0(0x01)
	char bEnablePreExposureOnlyInTheEditor : 1; // 0xa0(0x01)
	char bDefaultFeatureMotionBlur : 1; // 0xa0(0x01)
	char bDefaultFeatureLensFlare : 1; // 0xa0(0x01)
	char bTemporalUpsampling : 1; // 0xa0(0x01)
	char bSSGI : 1; // 0xa0(0x01)
	char pad_A0_7 : 1; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	enum class EAntiAliasingMethod DefaultFeatureAntiAliasing; // 0xa4(0x01)
	enum class ELightUnits DefaultLightUnits; // 0xa5(0x01)
	enum class EDefaultBackBufferPixelFormat DefaultBackBufferPixelFormat; // 0xa6(0x01)
	char pad_A7[0x1]; // 0xa7(0x01)
	char bRenderUnbuiltPreviewShadowsInGame : 1; // 0xa8(0x01)
	char bStencilForLODDither : 1; // 0xa8(0x01)
	char pad_A8_2 : 6; // 0xa8(0x01)
	char pad_A9[0x3]; // 0xa9(0x03)
	enum class EEarlyZPass EarlyZPass; // 0xac(0x01)
	char pad_AD[0x3]; // 0xad(0x03)
	char bEarlyZPassOnlyMaterialMasking : 1; // 0xb0(0x01)
	char bDBuffer : 1; // 0xb0(0x01)
	char pad_B0_2 : 6; // 0xb0(0x01)
	char pad_B1[0x3]; // 0xb1(0x03)
	enum class EClearSceneOptions ClearSceneMethod; // 0xb4(0x01)
	char pad_B5[0x3]; // 0xb5(0x03)
	char bBasePassOutputsVelocity : 1; // 0xb8(0x01)
	char bVertexDeformationOutputsVelocity : 1; // 0xb8(0x01)
	char bSelectiveBasePassOutputs : 1; // 0xb8(0x01)
	char bDefaultParticleCutouts : 1; // 0xb8(0x01)
	char pad_B8_4 : 4; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	int32_t GPUSimulationTextureSizeX; // 0xbc(0x04)
	int32_t GPUSimulationTextureSizeY; // 0xc0(0x04)
	char bGlobalClipPlane : 1; // 0xc4(0x01)
	char pad_C4_1 : 7; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	enum class EGBufferFormat GBufferFormat; // 0xc8(0x01)
	char pad_C9[0x3]; // 0xc9(0x03)
	char bUseGPUMorphTargets : 1; // 0xcc(0x01)
	char bNvidiaAftermathEnabled : 1; // 0xcc(0x01)
	char bMultiView : 1; // 0xcc(0x01)
	char bMobilePostProcessing : 1; // 0xcc(0x01)
	char bMobileMultiView : 1; // 0xcc(0x01)
	char bMobileUseHWsRGBEncoding : 1; // 0xcc(0x01)
	char bRoundRobinOcclusion : 1; // 0xcc(0x01)
	char bODSCapture : 1; // 0xcc(0x01)
	char bMeshStreaming : 1; // 0xcd(0x01)
	char pad_CD_1 : 7; // 0xcd(0x01)
	char pad_CE[0x2]; // 0xce(0x02)
	float WireframeCullThreshold; // 0xd0(0x04)
	char bEnableRayTracing : 1; // 0xd4(0x01)
	char bEnableRayTracingTextureLOD : 1; // 0xd4(0x01)
	char bSupportStationarySkylight : 1; // 0xd4(0x01)
	char bSupportLowQualityLightmaps : 1; // 0xd4(0x01)
	char bSupportPointLightWholeSceneShadows : 1; // 0xd4(0x01)
	char bSupportAtmosphericFog : 1; // 0xd4(0x01)
	char bSupportSkyAtmosphere : 1; // 0xd4(0x01)
	char bSupportSkyAtmosphereAffectsHeightFog : 1; // 0xd4(0x01)
	char bSupportSkinCacheShaders : 1; // 0xd5(0x01)
	char pad_D5_1 : 7; // 0xd5(0x01)
	char pad_D6[0x2]; // 0xd6(0x02)
	enum class ESkinCacheDefaultBehavior DefaultSkinCacheBehavior; // 0xd8(0x01)
	char pad_D9[0x3]; // 0xd9(0x03)
	float SkinCacheSceneMemoryLimitInMB; // 0xdc(0x04)
	char bMobileEnableStaticAndCSMShadowReceivers : 1; // 0xe0(0x01)
	char bMobileEnableMovableLightCSMShaderCulling : 1; // 0xe0(0x01)
	char bMobileAllowDistanceFieldShadows : 1; // 0xe0(0x01)
	char bMobileAllowMovableDirectionalLights : 1; // 0xe0(0x01)
	char pad_E0_4 : 4; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	uint32_t MobileNumDynamicPointLights; // 0xe4(0x04)
	char bMobileDynamicPointLightsUseStaticBranch : 1; // 0xe8(0x01)
	char bMobileAllowMovableSpotlights : 1; // 0xe8(0x01)
	char bSupport16BitBoneIndex : 1; // 0xe8(0x01)
	char bGPUSkinLimit2BoneInfluences : 1; // 0xe8(0x01)
	char bSupportDepthOnlyIndexBuffers : 1; // 0xe8(0x01)
	char bSupportReversedIndexBuffers : 1; // 0xe8(0x01)
	char bSupportMaterialLayers : 1; // 0xe8(0x01)
	char bLPV : 1; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
};

// Class Engine.RendererOverrideSettings
// Size: 0x40 (Inherited: 0x38)
struct URendererOverrideSettings : UDeveloperSettings {
	char bSupportAllShaderPermutations : 1; // 0x38(0x01)
	char bForceRecomputeTangents : 1; // 0x38(0x01)
	char pad_38_2 : 6; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.ReporterBase
// Size: 0x30 (Inherited: 0x28)
struct UReporterBase : UObject {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Engine.ReporterGraph
// Size: 0xa8 (Inherited: 0x30)
struct UReporterGraph : UReporterBase {
	char pad_30[0x78]; // 0x30(0x78)
};

// Class Engine.ReverbEffect
// Size: 0x58 (Inherited: 0x28)
struct UReverbEffect : UObject {
	float Density; // 0x28(0x04)
	float Diffusion; // 0x2c(0x04)
	float Gain; // 0x30(0x04)
	float GainHF; // 0x34(0x04)
	float DecayTime; // 0x38(0x04)
	float DecayHFRatio; // 0x3c(0x04)
	float ReflectionsGain; // 0x40(0x04)
	float ReflectionsDelay; // 0x44(0x04)
	float LateGain; // 0x48(0x04)
	float LateDelay; // 0x4c(0x04)
	float AirAbsorptionGainHF; // 0x50(0x04)
	float RoomRolloffFactor; // 0x54(0x04)
};

// Class Engine.Rig
// Size: 0x50 (Inherited: 0x28)
struct URig : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct FTransformBase> TransformBases; // 0x30(0x10)
	struct TArray<struct FNode> Nodes; // 0x40(0x10)
};

// Class Engine.RotatingMovementComponent
// Size: 0x110 (Inherited: 0xf0)
struct URotatingMovementComponent : UMovementComponent {
	struct FRotator RotationRate; // 0xf0(0x0c)
	struct FVector PivotTranslation; // 0xfc(0x0c)
	char bRotationInLocalSpace : 1; // 0x108(0x01)
	char pad_108_1 : 7; // 0x108(0x01)
	char pad_109[0x7]; // 0x109(0x07)
};

// Class Engine.RuntimeOptionsBase
// Size: 0x38 (Inherited: 0x28)
struct URuntimeOptionsBase : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Engine.RuntimeVirtualTexture
// Size: 0xa0 (Inherited: 0x28)
struct URuntimeVirtualTexture : UObject {
	enum class ERuntimeVirtualTextureMaterialType MaterialType; // 0x28(0x01)
	bool bCompressTextures; // 0x29(0x01)
	bool bEnable; // 0x2a(0x01)
	bool bClearTextures; // 0x2b(0x01)
	bool bSinglePhysicalSpace; // 0x2c(0x01)
	bool bPrivateSpace; // 0x2d(0x01)
	bool bEnableScalability; // 0x2e(0x01)
	char pad_2F[0x1]; // 0x2f(0x01)
	int32_t Size; // 0x30(0x04)
	int32_t TileCount; // 0x34(0x04)
	int32_t TileSize; // 0x38(0x04)
	int32_t TileBorderSize; // 0x3c(0x04)
	int32_t StreamLowMips; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct URuntimeVirtualTextureStreamingProxy* StreamingTexture; // 0x48(0x08)
	bool bEnableCompressCrunch; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	int32_t RemoveLowMips; // 0x54(0x04)
	char pad_58[0x48]; // 0x58(0x48)

	int32_t GetTileSize(); // Function Engine.RuntimeVirtualTexture.GetTileSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dcb3b0
	int32_t GetTileCount(); // Function Engine.RuntimeVirtualTexture.GetTileCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dcb370
	int32_t GetTileBorderSize(); // Function Engine.RuntimeVirtualTexture.GetTileBorderSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dcb330
	int32_t GetSize(); // Function Engine.RuntimeVirtualTexture.GetSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dcb2c0
};

// Class Engine.RuntimeVirtualTextureComponent
// Size: 0x240 (Inherited: 0x220)
struct URuntimeVirtualTextureComponent : USceneComponent {
	struct URuntimeVirtualTexture* VirtualTexture; // 0x220(0x08)
	bool bUseStreamingLowMipsInEditor; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)
	struct AActor* BoundsSourceActor; // 0x230(0x08)
	char pad_238[0x8]; // 0x238(0x08)

	struct FTransform GetVirtualTextureTransform(); // Function Engine.RuntimeVirtualTextureComponent.GetVirtualTextureTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3dcb400
};

// Class Engine.RuntimeVirtualTextureStreamingProxy
// Size: 0x100 (Inherited: 0xe8)
struct URuntimeVirtualTextureStreamingProxy : UTexture2D {
	struct FVirtualTextureBuildSettings Settings; // 0xe8(0x0c)
	bool bSinglePhysicalSpace; // 0xf4(0x01)
	char pad_F5[0x3]; // 0xf5(0x03)
	uint32_t BuildHash; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
};

// Class Engine.RuntimeVirtualTextureVolume
// Size: 0x328 (Inherited: 0x320)
struct ARuntimeVirtualTextureVolume : AActor {
	struct URuntimeVirtualTextureComponent* VirtualTextureComponent; // 0x320(0x08)
};

// Class Engine.RVOAvoidanceInterface
// Size: 0x28 (Inherited: 0x28)
struct URVOAvoidanceInterface : UInterface {
};

// Class Engine.Scene
// Size: 0x28 (Inherited: 0x28)
struct UScene : UObject {
};

// Class Engine.SceneCaptureComponentCube
// Size: 0x2f0 (Inherited: 0x2c0)
struct USceneCaptureComponentCube : USceneCaptureComponent {
	struct UTextureRenderTargetCube* TextureTarget; // 0x2b8(0x08)
	bool bCaptureRotation; // 0x2c0(0x01)
	struct UTextureRenderTargetCube* TextureTargetLeft; // 0x2c8(0x08)
	struct UTextureRenderTargetCube* TextureTargetRight; // 0x2d0(0x08)
	struct UTextureRenderTarget2D* TextureTargetODS; // 0x2d8(0x08)
	float IPD; // 0x2e0(0x04)
	char pad_2E5[0xb]; // 0x2e5(0x0b)

	void CaptureScene(); // Function Engine.SceneCaptureComponentCube.CaptureScene // (Final|Native|Public|BlueprintCallable) // @ game+0x3dd21e0
};

// Class Engine.SceneCaptureCube
// Size: 0x338 (Inherited: 0x330)
struct ASceneCaptureCube : ASceneCapture {
	struct USceneCaptureComponentCube* CaptureComponentCube; // 0x330(0x08)

	void OnInterpToggle(bool bEnable); // Function Engine.SceneCaptureCube.OnInterpToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x3da9380
};

// Class Engine.SCS_Node
// Size: 0xd8 (Inherited: 0x28)
struct USCS_Node : UObject {
	struct UObject* ComponentClass; // 0x28(0x08)
	struct UActorComponent* ComponentTemplate; // 0x30(0x08)
	struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData; // 0x38(0x48)
	struct FName AttachToName; // 0x80(0x08)
	struct FName ParentComponentOrVariableName; // 0x88(0x08)
	struct FName ParentComponentOwnerClassName; // 0x90(0x08)
	bool bIsParentComponentNative; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct TArray<struct USCS_Node*> ChildNodes; // 0xa0(0x10)
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray; // 0xb0(0x10)
	struct FGuid VariableGuid; // 0xc0(0x10)
	struct FName InternalVariableName; // 0xd0(0x08)
};

// Class Engine.Selection
// Size: 0xa0 (Inherited: 0x28)
struct USelection : UObject {
	char pad_28[0x78]; // 0x28(0x78)
};

// Class Engine.ServerStatReplicator
// Size: 0x3e8 (Inherited: 0x320)
struct AServerStatReplicator : AInfo {
	bool bUpdateStatNet; // 0x320(0x01)
	bool bOverwriteClientStats; // 0x321(0x01)
	char pad_322[0x2]; // 0x322(0x02)
	uint32_t Channels; // 0x324(0x04)
	uint32_t InRate; // 0x328(0x04)
	uint32_t OutRate; // 0x32c(0x04)
	char pad_330[0x4]; // 0x330(0x04)
	uint32_t MaxPacketOverhead; // 0x334(0x04)
	uint32_t InRateClientMax; // 0x338(0x04)
	uint32_t InRateClientMin; // 0x33c(0x04)
	uint32_t InRateClientAvg; // 0x340(0x04)
	uint32_t InPacketsClientMax; // 0x344(0x04)
	uint32_t InPacketsClientMin; // 0x348(0x04)
	uint32_t InPacketsClientAvg; // 0x34c(0x04)
	uint32_t OutRateClientMax; // 0x350(0x04)
	uint32_t OutRateClientMin; // 0x354(0x04)
	uint32_t OutRateClientAvg; // 0x358(0x04)
	uint32_t OutPacketsClientMax; // 0x35c(0x04)
	uint32_t OutPacketsClientMin; // 0x360(0x04)
	uint32_t OutPacketsClientAvg; // 0x364(0x04)
	uint32_t NetNumClients; // 0x368(0x04)
	uint32_t InPackets; // 0x36c(0x04)
	uint32_t OutPackets; // 0x370(0x04)
	uint32_t InBunches; // 0x374(0x04)
	uint32_t OutBunches; // 0x378(0x04)
	uint32_t OutLoss; // 0x37c(0x04)
	uint32_t InLoss; // 0x380(0x04)
	uint32_t VoiceBytesSent; // 0x384(0x04)
	uint32_t VoiceBytesRecv; // 0x388(0x04)
	uint32_t VoicePacketsSent; // 0x38c(0x04)
	uint32_t VoicePacketsRecv; // 0x390(0x04)
	uint32_t PercentInVoice; // 0x394(0x04)
	uint32_t PercentOutVoice; // 0x398(0x04)
	uint32_t NumActorChannels; // 0x39c(0x04)
	uint32_t NumConsideredActors; // 0x3a0(0x04)
	uint32_t PrioritizedActors; // 0x3a4(0x04)
	uint32_t NumRelevantActors; // 0x3a8(0x04)
	uint32_t NumRelevantDeletedActors; // 0x3ac(0x04)
	uint32_t NumReplicatedActorAttempts; // 0x3b0(0x04)
	uint32_t NumReplicatedActors; // 0x3b4(0x04)
	uint32_t NumActors; // 0x3b8(0x04)
	uint32_t NumNetActors; // 0x3bc(0x04)
	uint32_t NumDormantActors; // 0x3c0(0x04)
	uint32_t NumInitiallyDormantActors; // 0x3c4(0x04)
	uint32_t NumNetGUIDsAckd; // 0x3c8(0x04)
	uint32_t NumNetGUIDsPending; // 0x3cc(0x04)
	uint32_t NumNetGUIDsUnAckd; // 0x3d0(0x04)
	uint32_t ObjPathBytes; // 0x3d4(0x04)
	uint32_t NetGUIDOutRate; // 0x3d8(0x04)
	uint32_t NetGUIDInRate; // 0x3dc(0x04)
	uint32_t NetSaturated; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)
};

// Class Engine.ShadowMapTexture2D
// Size: 0xf0 (Inherited: 0xe8)
struct UShadowMapTexture2D : UTexture2D {
	enum class EShadowMapFlags ShadowmapFlags; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
};

// Class Engine.SimpleConstructionScript
// Size: 0xa0 (Inherited: 0x28)
struct USimpleConstructionScript : UObject {
	struct TArray<struct USCS_Node*> RootNodes; // 0x28(0x10)
	struct TArray<struct USCS_Node*> AllNodes; // 0x38(0x10)
	struct USCS_Node* DefaultSceneRootNode; // 0x48(0x08)
	char pad_50[0x50]; // 0x50(0x50)
};

// Class Engine.SkeletalMeshEditorData
// Size: 0x28 (Inherited: 0x28)
struct USkeletalMeshEditorData : UObject {
};

// Class Engine.SkeletalMeshLODSettings
// Size: 0x50 (Inherited: 0x30)
struct USkeletalMeshLODSettings : UDataAsset {
	struct FPerPlatformInt MinLOD; // 0x30(0x04)
	struct FPerPlatformBool DisableBelowMinLodStripping; // 0x34(0x01)
	struct FPerPlatformBool bSupportLODStreaming; // 0x35(0x01)
	char pad_36[0x2]; // 0x36(0x02)
	struct FPerPlatformInt MaxNumStreamedLODs; // 0x38(0x04)
	struct FPerPlatformInt MaxNumOptionalLODs; // 0x3c(0x04)
	struct TArray<struct FSkeletalMeshLODGroupSettings> LODGroups; // 0x40(0x10)
};

// Class Engine.SkeletalMeshSimplificationSettings
// Size: 0x40 (Inherited: 0x38)
struct USkeletalMeshSimplificationSettings : UDeveloperSettings {
	struct FName SkeletalMeshReductionModuleName; // 0x38(0x08)
};

// Class Engine.SkeletalMeshSocket
// Size: 0x60 (Inherited: 0x28)
struct USkeletalMeshSocket : UObject {
	struct FName SocketName; // 0x28(0x08)
	struct FName BoneName; // 0x30(0x08)
	struct FVector RelativeLocation; // 0x38(0x0c)
	struct FRotator RelativeRotation; // 0x44(0x0c)
	struct FVector RelativeScale; // 0x50(0x0c)
	bool bForceAlwaysAnimated; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)

	void InitializeSocketFromLocation(struct USkeletalMeshComponent* SkelComp, struct FVector WorldLocation, struct FVector WorldNormal); // Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3de8480
	struct FVector GetSocketLocation(struct USkeletalMeshComponent* SkelComp); // Function Engine.SkeletalMeshSocket.GetSocketLocation // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3de8200
};

// Class Engine.SkyAtmosphereComponent
// Size: 0x2f0 (Inherited: 0x220)
struct USkyAtmosphereComponent : USceneComponent {
	enum class ESkyAtmosphereTransformMode TransformMode; // 0x220(0x01)
	char pad_221[0x3]; // 0x221(0x03)
	float BottomRadius; // 0x224(0x04)
	struct FColor GroundAlbedo; // 0x228(0x04)
	float AtmosphereHeight; // 0x22c(0x04)
	float MultiScatteringFactor; // 0x230(0x04)
	float RayleighScatteringScale; // 0x234(0x04)
	struct FLinearColor RayleighScattering; // 0x238(0x10)
	float RayleighExponentialDistribution; // 0x248(0x04)
	float MieScatteringScale; // 0x24c(0x04)
	struct FLinearColor MieScattering; // 0x250(0x10)
	float MieAbsorptionScale; // 0x260(0x04)
	struct FLinearColor MieAbsorption; // 0x264(0x10)
	float MieAnisotropy; // 0x274(0x04)
	float MieExponentialDistribution; // 0x278(0x04)
	float OtherAbsorptionScale; // 0x27c(0x04)
	struct FLinearColor OtherAbsorption; // 0x280(0x10)
	struct FTentDistribution OtherTentDistribution; // 0x290(0x0c)
	struct FLinearColor SkyLuminanceFactor; // 0x29c(0x10)
	float AerialPespectiveViewDistanceScale; // 0x2ac(0x04)
	float HeightFogContribution; // 0x2b0(0x04)
	float TransmittanceMinLightElevationAngle; // 0x2b4(0x04)
	char pad_2B8[0x24]; // 0x2b8(0x24)
	struct FGuid bStaticLightingBuiltGUID; // 0x2dc(0x10)
	char pad_2EC[0x4]; // 0x2ec(0x04)

	void SetSkyLuminanceFactor(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dee530
	void SetRayleighScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScatteringScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3dee4b0
	void SetRayleighScattering(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighScattering // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dee430
	void SetRayleighExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3dee3b0
	void SetOtherAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3d5b650
	void SetOtherAbsorption(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetOtherAbsorption // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dee330
	void SetMieScatteringScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScatteringScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3dedf80
	void SetMieScattering(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetMieScattering // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dedf00
	void SetMieExponentialDistribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieExponentialDistribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3d5b6d0
	void SetMieAnisotropy(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAnisotropy // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3d5b860
	void SetMieAbsorptionScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorptionScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3dede80
	void SetMieAbsorption(struct FLinearColor NewValue); // Function Engine.SkyAtmosphereComponent.SetMieAbsorption // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dede00
	void SetHeightFogContribution(float NewValue); // Function Engine.SkyAtmosphereComponent.SetHeightFogContribution // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3dedb70
	void SetAerialPespectiveViewDistanceScale(float NewValue); // Function Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3ded8d0
	void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, struct FVector& LightDirection); // Function Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection // (Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3ded7e0
};

// Class Engine.SkyAtmosphere
// Size: 0x328 (Inherited: 0x320)
struct ASkyAtmosphere : AInfo {
	struct USkyAtmosphereComponent* SkyAtmosphereComponent; // 0x320(0x08)
};

// Class Engine.SkyLightComponent
// Size: 0x450 (Inherited: 0x260)
struct USkyLightComponent : ULightComponentBase {
	enum class ESkyLightSourceType SourceType; // 0x258(0x01)
	struct UTextureCube* Cubemap; // 0x260(0x08)
	float SourceCubemapAngle; // 0x268(0x04)
	int32_t CubemapResolution; // 0x26c(0x04)
	float SkyDistanceThreshold; // 0x270(0x04)
	bool bCaptureEmissiveOnly; // 0x274(0x01)
	bool bLowerHemisphereIsBlack; // 0x275(0x01)
	char pad_277[0x1]; // 0x277(0x01)
	struct FLinearColor LowerHemisphereColor; // 0x278(0x10)
	char bAffectDynamicIndirectLighting : 1; // 0x288(0x01)
	char pad_288_1 : 7; // 0x288(0x01)
	char pad_289[0x3]; // 0x289(0x03)
	float OcclusionMaxDistance; // 0x28c(0x04)
	float Contrast; // 0x290(0x04)
	float OcclusionExponent; // 0x294(0x04)
	struct FColor OcclusionFoliageTint; // 0x298(0x04)
	float MinOcclusion; // 0x29c(0x04)
	struct FColor OcclusionBarkTint; // 0x2a0(0x04)
	struct FColor OcclusionTint; // 0x2a4(0x04)
	enum class EOcclusionCombineMode OcclusionCombineMode; // 0x2a8(0x01)
	enum class ESpecularOcclusionMode SpecularOcclusionMode; // 0x2a9(0x01)
	char pad_2AA[0x2]; // 0x2aa(0x02)
	float SpecularOcclusionStrength; // 0x2ac(0x04)
	float SelfShadowBiasForObjectAO; // 0x2b0(0x04)
	float OcclusionTranslucencyForTwoSidedFoliages; // 0x2b4(0x04)
	char pad_2B8[0xc0]; // 0x2b8(0xc0)
	struct UTextureCube* BlendDestinationCubemap; // 0x378(0x08)
	char pad_380[0xd0]; // 0x380(0xd0)

	void SetVolumetricScatteringIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetVolumetricScatteringIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x3dee5b0
	void SetOcclusionTint(struct FColor& InTint); // Function Engine.SkyLightComponent.SetOcclusionTint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dee2a0
	void SetOcclusionFoliageTint(struct FColor& InTint); // Function Engine.SkyLightComponent.SetOcclusionFoliageTint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dee210
	void SetOcclusionExponent(float InOcclusionExponent); // Function Engine.SkyLightComponent.SetOcclusionExponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3dee190
	void SetOcclusionContrast(float InOcclusionContrast); // Function Engine.SkyLightComponent.SetOcclusionContrast // (Final|Native|Public|BlueprintCallable) // @ game+0x3dee110
	void SetOcclusionBarkTint(struct FColor& InTint); // Function Engine.SkyLightComponent.SetOcclusionBarkTint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dee080
	void SetMinOcclusion(float InMinOcclusion); // Function Engine.SkyLightComponent.SetMinOcclusion // (Final|Native|Public|BlueprintCallable) // @ game+0x3dee000
	void SetLowerHemisphereColor(struct FLinearColor& InLowerHemisphereColor); // Function Engine.SkyLightComponent.SetLowerHemisphereColor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3dedd70
	void SetLightColor(struct FLinearColor NewLightColor); // Function Engine.SkyLightComponent.SetLightColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3dedcf0
	void SetIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x3dedc70
	void SetIndirectLightingIntensity(float NewIntensity); // Function Engine.SkyLightComponent.SetIndirectLightingIntensity // (Final|Native|Public|BlueprintCallable) // @ game+0x3dedbf0
	void SetCubemapBlend(struct UTextureCube* SourceCubemap, struct UTextureCube* DestinationCubemap, float InBlendFraction); // Function Engine.SkyLightComponent.SetCubemapBlend // (Final|Native|Public|BlueprintCallable) // @ game+0x3deda60
	void SetCubemap(struct UTextureCube* NewCubemap); // Function Engine.SkyLightComponent.SetCubemap // (Final|Native|Public|BlueprintCallable) // @ game+0x3ded9e0
	void SetAffectDynamicIndirectLighting(bool bNewValue); // Function Engine.SkyLightComponent.SetAffectDynamicIndirectLighting // (Final|Native|Public|BlueprintCallable) // @ game+0x3ded950
	void RecaptureSky(); // Function Engine.SkyLightComponent.RecaptureSky // (Final|Native|Public|BlueprintCallable) // @ game+0x3ded8b0
};

// Class Engine.SlateBrushAsset
// Size: 0xb0 (Inherited: 0x28)
struct USlateBrushAsset : UObject {
	struct FSlateBrush Brush; // 0x28(0x88)
};

// Class Engine.SlateTextureAtlasInterface
// Size: 0x28 (Inherited: 0x28)
struct USlateTextureAtlasInterface : UInterface {
};

// Class Engine.SmokeTestCommandlet
// Size: 0x80 (Inherited: 0x80)
struct USmokeTestCommandlet : UCommandlet {
};

// Class Engine.SoundAttenuation
// Size: 0x3c8 (Inherited: 0x28)
struct USoundAttenuation : UObject {
	struct FSoundAttenuationSettings Attenuation; // 0x28(0x3a0)
};

// Class Engine.SoundClass
// Size: 0xb8 (Inherited: 0x28)
struct USoundClass : UObject {
	struct FSoundClassProperties Properties; // 0x28(0x58)
	struct TArray<struct USoundClass*> ChildClasses; // 0x80(0x10)
	struct TArray<struct FPassiveSoundMixModifier> PassiveSoundMixModifiers; // 0x90(0x10)
	struct FSoundModulation Modulation; // 0xa0(0x10)
	struct USoundClass* ParentClass; // 0xb0(0x08)
};

// Class Engine.SoundConcurrency
// Size: 0x48 (Inherited: 0x28)
struct USoundConcurrency : UObject {
	struct FSoundConcurrencySettings Concurrency; // 0x28(0x20)
};

// Class Engine.SoundCue
// Size: 0x538 (Inherited: 0x160)
struct USoundCue : USoundBase {
	char bPrimeOnLoad : 1; // 0x160(0x01)
	char pad_160_1 : 7; // 0x160(0x01)
	char pad_161[0x7]; // 0x161(0x07)
	struct USoundNode* FirstNode; // 0x168(0x08)
	float VolumeMultiplier; // 0x170(0x04)
	float PitchMultiplier; // 0x174(0x04)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x178(0x3a0)
	float SubtitlePriority; // 0x518(0x04)
	char pad_51C[0x4]; // 0x51c(0x04)
	char bOverrideAttenuation : 1; // 0x520(0x01)
	char bExcludeFromRandomNodeBranchCulling : 1; // 0x520(0x01)
	char pad_520_2 : 6; // 0x520(0x01)
	char pad_521[0x3]; // 0x521(0x03)
	int32_t CookedQualityIndex; // 0x524(0x04)
	char bHasPlayWhenSilent : 1; // 0x528(0x01)
	char pad_528_1 : 7; // 0x528(0x01)
	char pad_529[0xf]; // 0x529(0x0f)
};

// Class Engine.SoundEffectSourcePresetChain
// Size: 0x40 (Inherited: 0x28)
struct USoundEffectSourcePresetChain : UObject {
	struct TArray<struct FSourceEffectChainEntry> Chain; // 0x28(0x10)
	char bPlayEffectChainTails : 1; // 0x38(0x01)
	char pad_38_1 : 7; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Engine.SoundGroups
// Size: 0x88 (Inherited: 0x28)
struct USoundGroups : UObject {
	struct TArray<struct FSoundGroup> SoundGroupProfiles; // 0x28(0x10)
	char pad_38[0x50]; // 0x38(0x50)
};

// Class Engine.SoundMix
// Size: 0x90 (Inherited: 0x28)
struct USoundMix : UObject {
	char bApplyEQ : 1; // 0x28(0x01)
	char pad_28_1 : 7; // 0x28(0x01)
	char pad_29[0x3]; // 0x29(0x03)
	float EQPriority; // 0x2c(0x04)
	struct FAudioEQEffect EQSettings; // 0x30(0x40)
	struct TArray<struct FSoundClassAdjuster> SoundClassEffects; // 0x70(0x10)
	float InitialDelay; // 0x80(0x04)
	float FadeInTime; // 0x84(0x04)
	float Duration; // 0x88(0x04)
	float FadeOutTime; // 0x8c(0x04)
};

// Class Engine.SoundNode
// Size: 0x48 (Inherited: 0x28)
struct USoundNode : UObject {
	struct TArray<struct USoundNode*> ChildNodes; // 0x28(0x10)
	char pad_38[0x10]; // 0x38(0x10)
};

// Class Engine.SoundNodeAssetReferencer
// Size: 0x48 (Inherited: 0x48)
struct USoundNodeAssetReferencer : USoundNode {
};

// Class Engine.SoundNodeAttenuation
// Size: 0x3f8 (Inherited: 0x48)
struct USoundNodeAttenuation : USoundNode {
	struct USoundAttenuation* AttenuationSettings; // 0x48(0x08)
	struct FSoundAttenuationSettings AttenuationOverrides; // 0x50(0x3a0)
	char bOverrideAttenuation : 1; // 0x3f0(0x01)
	char pad_3F0_1 : 7; // 0x3f0(0x01)
	char pad_3F1[0x7]; // 0x3f1(0x07)
};

// Class Engine.SoundNodeBranch
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeBranch : USoundNode {
	struct FName BoolParameterName; // 0x48(0x08)
};

// Class Engine.SoundNodeConcatenator
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeConcatenator : USoundNode {
	struct TArray<float> InputVolume; // 0x48(0x10)
};

// Class Engine.SoundNodeDelay
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeDelay : USoundNode {
	float DelayMin; // 0x48(0x04)
	float DelayMax; // 0x4c(0x04)
};

// Class Engine.SoundNodeDialoguePlayer
// Size: 0x70 (Inherited: 0x48)
struct USoundNodeDialoguePlayer : USoundNode {
	struct FDialogueWaveParameter DialogueWaveParameter; // 0x48(0x20)
	char bLooping : 1; // 0x68(0x01)
	char pad_68_1 : 7; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class Engine.SoundNodeDistanceCrossFade
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeDistanceCrossFade : USoundNode {
	struct TArray<struct FDistanceDatum> CrossFadeInput; // 0x48(0x10)
};

// Class Engine.SoundNodeDoppler
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeDoppler : USoundNode {
	float DopplerIntensity; // 0x48(0x04)
	bool bUseSmoothing; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float SmoothingInterpSpeed; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.SoundNodeEnveloper
// Size: 0x190 (Inherited: 0x48)
struct USoundNodeEnveloper : USoundNode {
	float LoopStart; // 0x48(0x04)
	float LoopEnd; // 0x4c(0x04)
	float DurationAfterLoop; // 0x50(0x04)
	int32_t LoopCount; // 0x54(0x04)
	char bLoopIndefinitely : 1; // 0x58(0x01)
	char bLoop : 1; // 0x58(0x01)
	char pad_58_2 : 6; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct UDistributionFloatConstantCurve* VolumeInterpCurve; // 0x60(0x08)
	struct UDistributionFloatConstantCurve* PitchInterpCurve; // 0x68(0x08)
	struct FRuntimeFloatCurve VolumeCurve; // 0x70(0x88)
	struct FRuntimeFloatCurve PitchCurve; // 0xf8(0x88)
	float PitchMin; // 0x180(0x04)
	float PitchMax; // 0x184(0x04)
	float VolumeMin; // 0x188(0x04)
	float VolumeMax; // 0x18c(0x04)
};

// Class Engine.SoundNodeGroupControl
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeGroupControl : USoundNode {
	struct TArray<int32_t> GroupSizes; // 0x48(0x10)
};

// Class Engine.SoundNodeLooping
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeLooping : USoundNode {
	int32_t LoopCount; // 0x48(0x04)
	char bLoopIndefinitely : 1; // 0x4c(0x01)
	char pad_4C_1 : 7; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
};

// Class Engine.SoundNodeMature
// Size: 0x48 (Inherited: 0x48)
struct USoundNodeMature : USoundNode {
};

// Class Engine.SoundNodeMixer
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeMixer : USoundNode {
	struct TArray<float> InputVolume; // 0x48(0x10)
};

// Class Engine.SoundNodeModulator
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeModulator : USoundNode {
	float PitchMin; // 0x48(0x04)
	float PitchMax; // 0x4c(0x04)
	float VolumeMin; // 0x50(0x04)
	float VolumeMax; // 0x54(0x04)
};

// Class Engine.SoundNodeModulatorContinuous
// Size: 0x88 (Inherited: 0x48)
struct USoundNodeModulatorContinuous : USoundNode {
	struct FModulatorContinuousParams PitchModulationParams; // 0x48(0x20)
	struct FModulatorContinuousParams VolumeModulationParams; // 0x68(0x20)
};

// Class Engine.SoundNodeOscillator
// Size: 0x70 (Inherited: 0x48)
struct USoundNodeOscillator : USoundNode {
	char bModulateVolume : 1; // 0x48(0x01)
	char bModulatePitch : 1; // 0x48(0x01)
	char pad_48_2 : 6; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float AmplitudeMin; // 0x4c(0x04)
	float AmplitudeMax; // 0x50(0x04)
	float FrequencyMin; // 0x54(0x04)
	float FrequencyMax; // 0x58(0x04)
	float OffsetMin; // 0x5c(0x04)
	float OffsetMax; // 0x60(0x04)
	float CenterMin; // 0x64(0x04)
	float CenterMax; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Engine.SoundNodeParamCrossFade
// Size: 0x60 (Inherited: 0x58)
struct USoundNodeParamCrossFade : USoundNodeDistanceCrossFade {
	struct FName ParamName; // 0x58(0x08)
};

// Class Engine.SoundNodeQualityLevel
// Size: 0x48 (Inherited: 0x48)
struct USoundNodeQualityLevel : USoundNode {
};

// Class Engine.SoundNodeRandom
// Size: 0x78 (Inherited: 0x48)
struct USoundNodeRandom : USoundNode {
	struct TArray<float> Weights; // 0x48(0x10)
	struct TArray<bool> HasBeenUsed; // 0x58(0x10)
	int32_t NumRandomUsed; // 0x68(0x04)
	int32_t PreselectAtLevelLoad; // 0x6c(0x04)
	char bShouldExcludeFromBranchCulling : 1; // 0x70(0x01)
	char bSoundCueExcludedFromBranchCulling : 1; // 0x70(0x01)
	char bRandomizeWithoutReplacement : 1; // 0x70(0x01)
	char pad_70_3 : 5; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Engine.SoundNodeSoundClass
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeSoundClass : USoundNode {
	struct USoundClass* SoundClassOverride; // 0x48(0x08)
	char pad_50[0x8]; // 0x50(0x08)
};

// Class Engine.SoundNodeSwitch
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeSwitch : USoundNode {
	struct FName IntParameterName; // 0x48(0x08)
};

// Class Engine.SoundNodeWaveParam
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeWaveParam : USoundNode {
	struct FName WaveParameterName; // 0x48(0x08)
};

// Class Engine.SoundNodeWavePlayer
// Size: 0x80 (Inherited: 0x48)
struct USoundNodeWavePlayer : USoundNodeAssetReferencer {
	struct TSoftObjectPtr<USoundWave> SoundWaveAssetPtr; // 0x48(0x28)
	struct USoundWave* SoundWave; // 0x70(0x08)
	char pad_78_0 : 1; // 0x78(0x01)
	char bLooping : 1; // 0x78(0x01)
	char pad_78_2 : 6; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Engine.SoundSourceBus
// Size: 0x320 (Inherited: 0x308)
struct USoundSourceBus : USoundWave {
	enum class ESourceBusChannels SourceBusChannels; // 0x308(0x01)
	char pad_309[0x3]; // 0x309(0x03)
	float SourceBusDuration; // 0x30c(0x04)
	char bAutoDeactivateWhenSilent : 1; // 0x310(0x01)
	char pad_310_1 : 7; // 0x310(0x01)
	char pad_311[0xf]; // 0x311(0x0f)
};

// Class Engine.SoundSubmixBase
// Size: 0x38 (Inherited: 0x28)
struct USoundSubmixBase : UObject {
	struct TArray<struct USoundSubmixBase*> ChildSubmixes; // 0x28(0x10)
};

// Class Engine.SoundSubmixWithParentBase
// Size: 0x40 (Inherited: 0x38)
struct USoundSubmixWithParentBase : USoundSubmixBase {
	struct USoundSubmixBase* ParentSubmix; // 0x38(0x08)
};

// Class Engine.SoundSubmix
// Size: 0x88 (Inherited: 0x40)
struct USoundSubmix : USoundSubmixWithParentBase {
	char bMuteWhenBackgrounded : 1; // 0x40(0x01)
	char pad_40_1 : 7; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct TArray<struct USoundEffectSubmixPreset*> SubmixEffectChain; // 0x48(0x10)
	struct USoundfieldEncodingSettingsBase* AmbisonicsPluginSettings; // 0x58(0x08)
	int32_t EnvelopeFollowerAttackTime; // 0x60(0x04)
	int32_t EnvelopeFollowerReleaseTime; // 0x64(0x04)
	float OutputVolume; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
	struct FMulticastInlineDelegate OnSubmixRecordedFileDone; // 0x70(0x10)
	char pad_80[0x8]; // 0x80(0x08)

	void StopRecordingOutput(struct UObject* WorldContextObject, enum class EAudioRecordingExportType ExportType, struct FString Name, struct FString Path, struct USoundWave* ExistingSoundWaveToOverwrite); // Function Engine.SoundSubmix.StopRecordingOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x3df6560
	void StopEnvelopeFollowing(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StopEnvelopeFollowing // (Final|Native|Public|BlueprintCallable) // @ game+0x3df64e0
	void StartRecordingOutput(struct UObject* WorldContextObject, float ExpectedDuration); // Function Engine.SoundSubmix.StartRecordingOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x3df6410
	void StartEnvelopeFollowing(struct UObject* WorldContextObject); // Function Engine.SoundSubmix.StartEnvelopeFollowing // (Final|Native|Public|BlueprintCallable) // @ game+0x3df6390
	void SetSubmixOutputVolume(struct UObject* WorldContextObject, float InOutputVolume); // Function Engine.SoundSubmix.SetSubmixOutputVolume // (Final|Native|Public|BlueprintCallable) // @ game+0x3df62c0
	void AddEnvelopeFollowerDelegate(struct UObject* WorldContextObject, struct FDelegate& OnSubmixEnvelopeBP); // Function Engine.SoundSubmix.AddEnvelopeFollowerDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3df61d0
};

// Class Engine.SoundfieldSubmix
// Size: 0x68 (Inherited: 0x40)
struct USoundfieldSubmix : USoundSubmixWithParentBase {
	struct FName SoundfieldEncodingFormat; // 0x40(0x08)
	struct USoundfieldEncodingSettingsBase* EncodingSettings; // 0x48(0x08)
	struct TArray<struct USoundfieldEffectBase*> SoundfieldEffectChain; // 0x50(0x10)
	struct USoundfieldEncodingSettingsBase* EncodingSettingsClass; // 0x60(0x08)
};

// Class Engine.EndpointSubmix
// Size: 0x50 (Inherited: 0x38)
struct UEndpointSubmix : USoundSubmixBase {
	struct FName EndpointType; // 0x38(0x08)
	struct UAudioEndpointSettingsBase* EndpointSettingsClass; // 0x40(0x08)
	struct UAudioEndpointSettingsBase* EndpointSettings; // 0x48(0x08)
};

// Class Engine.SoundfieldEndpointSubmix
// Size: 0x70 (Inherited: 0x38)
struct USoundfieldEndpointSubmix : USoundSubmixBase {
	struct FName SoundfieldEndpointType; // 0x38(0x08)
	struct UAudioEndpointSettingsBase* EndpointSettingsClass; // 0x40(0x08)
	struct USoundfieldEndpointSettingsBase* EndpointSettings; // 0x48(0x08)
	struct USoundfieldEncodingSettingsBase* EncodingSettingsClass; // 0x50(0x08)
	struct USoundfieldEncodingSettingsBase* EncodingSettings; // 0x58(0x08)
	struct TArray<struct USoundfieldEffectBase*> SoundfieldEffectChain; // 0x60(0x10)
};

// Class Engine.SpectatorPawnMovement
// Size: 0x158 (Inherited: 0x150)
struct USpectatorPawnMovement : UFloatingPawnMovement {
	char bIgnoreTimeDilation : 1; // 0x150(0x01)
	char pad_150_1 : 7; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)
};

// Class Engine.SphereReflectionCapture
// Size: 0x330 (Inherited: 0x328)
struct ASphereReflectionCapture : AReflectionCapture {
	struct UDrawSphereComponent* DrawCaptureRadius; // 0x328(0x08)
};

// Class Engine.SphereReflectionCaptureComponent
// Size: 0x2c0 (Inherited: 0x2b0)
struct USphereReflectionCaptureComponent : UReflectionCaptureComponent {
	float InfluenceRadius; // 0x2a8(0x04)
	float CaptureDistanceScale; // 0x2ac(0x04)
	struct UDrawSphereComponent* PreviewInfluenceRadius; // 0x2b0(0x08)
};

// Class Engine.SplineMetadata
// Size: 0x28 (Inherited: 0x28)
struct USplineMetadata : UObject {
};

// Class Engine.SplineMeshActor
// Size: 0x328 (Inherited: 0x320)
struct ASplineMeshActor : AActor {
	struct USplineMeshComponent* SplineMeshComponent; // 0x320(0x08)
};

// Class Engine.SplineMeshComponent
// Size: 0x5d0 (Inherited: 0x540)
struct USplineMeshComponent : UStaticMeshComponent {
	struct FSplineMeshParams SplineParams; // 0x540(0x58)
	struct FVector SplineUpDir; // 0x598(0x0c)
	float SplineBoundaryMin; // 0x5a4(0x04)
	struct FGuid CachedMeshBodySetupGuid; // 0x5a8(0x10)
	struct UBodySetup* BodySetup; // 0x5b8(0x08)
	float SplineBoundaryMax; // 0x5c0(0x04)
	char bAllowSplineEditingPerInstance : 1; // 0x5c4(0x01)
	char bSmoothInterpRollScale : 1; // 0x5c4(0x01)
	char bMeshDirty : 1; // 0x5c4(0x01)
	char pad_5C4_3 : 5; // 0x5c4(0x01)
	enum class ESplineMeshAxis ForwardAxis; // 0x5c5(0x01)
	char pad_5C6[0x2]; // 0x5c6(0x02)
	float VirtualTextureMainPassMaxDrawDistance; // 0x5c8(0x04)
	char pad_5CC[0x4]; // 0x5cc(0x04)

	void UpdateMesh(); // Function Engine.SplineMeshComponent.UpdateMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x3e03580
	void SetStartTangent(struct FVector StartTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartTangent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3e034a0
	void SetStartScale(struct FVector2D StartScale, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3e033e0
	void SetStartRoll(float StartRoll, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartRoll // (Final|Native|Public|BlueprintCallable) // @ game+0x3e03310
	void SetStartPosition(struct FVector StartPos, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3e03230
	void SetStartOffset(struct FVector2D StartOffset, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3e03170
	void SetStartAndEnd(struct FVector StartPos, struct FVector StartTangent, struct FVector EndPos, struct FVector EndTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetStartAndEnd // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3e02fb0
	void SetSplineUpDir(struct FVector& InSplineUpDir, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetSplineUpDir // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3e02ed0
	void SetForwardAxis(enum class ESplineMeshAxis InForwardAxis, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetForwardAxis // (Final|Native|Public|BlueprintCallable) // @ game+0x3e02c00
	void SetEndTangent(struct FVector EndTangent, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndTangent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3e02b20
	void SetEndScale(struct FVector2D EndScale, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3e02a60
	void SetEndRoll(float EndRoll, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndRoll // (Final|Native|Public|BlueprintCallable) // @ game+0x3e02990
	void SetEndPosition(struct FVector EndPos, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3e028b0
	void SetEndOffset(struct FVector2D EndOffset, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetEndOffset // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3e027f0
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMin // (Final|Native|Public|BlueprintCallable) // @ game+0x3e02720
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh); // Function Engine.SplineMeshComponent.SetBoundaryMax // (Final|Native|Public|BlueprintCallable) // @ game+0x3e02650
	struct FVector GetStartTangent(); // Function Engine.SplineMeshComponent.GetStartTangent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e02560
	struct FVector2D GetStartScale(); // Function Engine.SplineMeshComponent.GetStartScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e02520
	float GetStartRoll(); // Function Engine.SplineMeshComponent.GetStartRoll // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e024f0
	struct FVector GetStartPosition(); // Function Engine.SplineMeshComponent.GetStartPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e024b0
	struct FVector2D GetStartOffset(); // Function Engine.SplineMeshComponent.GetStartOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e02470
	struct FVector GetSplineUpDir(); // Function Engine.SplineMeshComponent.GetSplineUpDir // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e02430
	enum class ESplineMeshAxis GetForwardAxis(); // Function Engine.SplineMeshComponent.GetForwardAxis // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e01f70
	struct FVector GetEndTangent(); // Function Engine.SplineMeshComponent.GetEndTangent // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e01f30
	struct FVector2D GetEndScale(); // Function Engine.SplineMeshComponent.GetEndScale // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e01ef0
	float GetEndRoll(); // Function Engine.SplineMeshComponent.GetEndRoll // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e01ec0
	struct FVector GetEndPosition(); // Function Engine.SplineMeshComponent.GetEndPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e01e80
	struct FVector2D GetEndOffset(); // Function Engine.SplineMeshComponent.GetEndOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e01e40
	float GetBoundaryMin(); // Function Engine.SplineMeshComponent.GetBoundaryMin // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e01d70
	float GetBoundaryMax(); // Function Engine.SplineMeshComponent.GetBoundaryMax // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e01d40
};

// Class Engine.SpotLightComponent
// Size: 0x3b0 (Inherited: 0x3a0)
struct USpotLightComponent : UPointLightComponent {
	float InnerConeAngle; // 0x398(0x04)
	float OuterConeAngle; // 0x39c(0x04)
	float LightShaftConeAngle; // 0x3a0(0x04)
	char bUsePCSS : 1; // 0x3a4(0x01)
	float PCSSSharpness; // 0x3a8(0x04)
	float PCSSContrast; // 0x3ac(0x04)

	void SetOuterConeAngle(float NewOuterConeAngle); // Function Engine.SpotLightComponent.SetOuterConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x3e02e50
	void SetInnerConeAngle(float NewInnerConeAngle); // Function Engine.SpotLightComponent.SetInnerConeAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x3e02d50
};

// Class Engine.SpringArmComponent
// Size: 0x2b0 (Inherited: 0x220)
struct USpringArmComponent : USceneComponent {
	float TargetArmLength; // 0x220(0x04)
	struct FVector SocketOffset; // 0x224(0x0c)
	struct FVector TargetOffset; // 0x230(0x0c)
	float ProbeSize; // 0x23c(0x04)
	enum class ECollisionChannel ProbeChannel; // 0x240(0x01)
	char pad_241[0x3]; // 0x241(0x03)
	char bDoCollisionTest : 1; // 0x244(0x01)
	char bUsePawnControlRotation : 1; // 0x244(0x01)
	char bInheritPitch : 1; // 0x244(0x01)
	char bInheritYaw : 1; // 0x244(0x01)
	char bInheritRoll : 1; // 0x244(0x01)
	char bEnableCameraLag : 1; // 0x244(0x01)
	char bEnableCameraRotationLag : 1; // 0x244(0x01)
	char bUseCameraLagSubstepping : 1; // 0x244(0x01)
	char bDrawDebugLagMarkers : 1; // 0x245(0x01)
	char pad_245_1 : 7; // 0x245(0x01)
	char pad_246[0x2]; // 0x246(0x02)
	float CameraLagSpeed; // 0x248(0x04)
	float CameraRotationLagSpeed; // 0x24c(0x04)
	float CameraLagMaxTimeStep; // 0x250(0x04)
	float CameraLagMaxDistance; // 0x254(0x04)
	char pad_258[0x58]; // 0x258(0x58)

	bool IsCollisionFixApplied(); // Function Engine.SpringArmComponent.IsCollisionFixApplied // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e02620
	struct FVector GetUnfixedCameraPosition(); // Function Engine.SpringArmComponent.GetUnfixedCameraPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e025e0
	struct FRotator GetTargetRotation(); // Function Engine.SpringArmComponent.GetTargetRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e025a0
};

// Class Engine.StaticMesh
// Size: 0x158 (Inherited: 0x40)
struct UStaticMesh : UStreamableRenderAsset {
	char pad_40[0x20]; // 0x40(0x20)
	char bUseAsOccluderForSoftwareOcclusion : 1; // 0x60(0x01)
	char pad_60_1 : 7; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	struct FName LODGroup; // 0x64(0x08)
	struct FName MeshStreamingGroup; // 0x6c(0x08)
	char pad_74[0xc]; // 0x74(0x0c)
	struct FPerPlatformInt MinLOD; // 0x80(0x04)
	float LpvBiasMultiplier; // 0x84(0x04)
	struct TArray<struct FStaticMaterial> StaticMaterials; // 0x88(0x10)
	float LightmapUVDensity; // 0x98(0x04)
	int32_t LightMapResolution; // 0x9c(0x04)
	int32_t LightMapCoordinateIndex; // 0xa0(0x04)
	float DistanceFieldSelfShadowBias; // 0xa4(0x04)
	struct UBodySetup* BodySetup; // 0xa8(0x08)
	int32_t LODForCollision; // 0xb0(0x04)
	char bGenerateMeshDistanceField : 1; // 0xb4(0x01)
	char bStripComplexCollisionForConsole : 1; // 0xb4(0x01)
	char bHasNavigationData : 1; // 0xb4(0x01)
	char bSupportUniformlyDistributedSampling : 1; // 0xb4(0x01)
	char bSupportPhysicalMaterialMasks : 1; // 0xb4(0x01)
	char bIsBuiltAtRuntime : 1; // 0xb4(0x01)
	char pad_B4_6 : 1; // 0xb4(0x01)
	char bAllowCPUAccess : 1; // 0xb4(0x01)
	char bSupportGpuUniformlyDistributedSampling : 1; // 0xb5(0x01)
	char pad_B5_1 : 7; // 0xb5(0x01)
	char pad_B6[0x22]; // 0xb6(0x22)
	struct TArray<struct UStaticMeshSocket*> Sockets; // 0xd8(0x10)
	char pad_E8[0x10]; // 0xe8(0x10)
	struct FVector PositiveBoundsExtension; // 0xf8(0x0c)
	struct FVector NegativeBoundsExtension; // 0x104(0x0c)
	struct FBoxSphereBounds ExtendedBounds; // 0x110(0x1c)
	int32_t ElementToIgnoreForTexFactor; // 0x12c(0x04)
	struct TArray<struct UAssetUserData*> AssetUserData; // 0x130(0x10)
	char pad_140[0x8]; // 0x140(0x08)
	struct UObject* EditableMesh; // 0x148(0x08)
	struct UNavCollisionBase* NavCollision; // 0x150(0x08)

	void RemoveSocket(struct UStaticMeshSocket* Socket); // Function Engine.StaticMesh.RemoveSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x1f782a0
	int32_t GetNumTriangles(int32_t LODIndex); // Function Engine.StaticMesh.GetNumTriangles // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e023a0
	int32_t GetNumSections(int32_t InLOD); // Function Engine.StaticMesh.GetNumSections // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e02310
	int32_t GetNumMaterial(); // Function Engine.StaticMesh.GetNumMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e022f0
	int32_t GetNumLODs(); // Function Engine.StaticMesh.GetNumLODs // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e022c0
	void GetMinimumLODForPlatforms(struct TMap<struct FName, int32_t>& PlatformMinimumLODs); // Function Engine.StaticMesh.GetMinimumLODForPlatforms // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e02140
	int32_t GetMinimumLODForPlatform(struct FName& PlatformName); // Function Engine.StaticMesh.GetMinimumLODForPlatform // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e020c0
	int32_t GetMaterialIndex(struct FName MaterialSlotName); // Function Engine.StaticMesh.GetMaterialIndex // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e02030
	struct UMaterialInterface* GetMaterial(int32_t MaterialIndex); // Function Engine.StaticMesh.GetMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e01fa0
	struct FBoxSphereBounds GetBounds(); // Function Engine.StaticMesh.GetBounds // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e01df0
	struct FBox GetBoundingBox(); // Function Engine.StaticMesh.GetBoundingBox // (Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e01da0
	struct UStaticMeshSocket* FindSocket(struct FName InSocketName); // Function Engine.StaticMesh.FindSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e01cb0
	struct UStaticMeshDescription* CreateStaticMeshDescription(struct UObject* Outer); // Function Engine.StaticMesh.CreateStaticMeshDescription // (Final|RequiredAPI|Native|Static|Public|BlueprintCallable) // @ game+0x3e01c30
	void BuildFromStaticMeshDescriptions(struct TArray<struct UStaticMeshDescription*>& StaticMeshDescriptions, bool bBuildSimpleCollision); // Function Engine.StaticMesh.BuildFromStaticMeshDescriptions // (Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3e01b30
	void AddSocket(struct UStaticMeshSocket* Socket); // Function Engine.StaticMesh.AddSocket // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x1f78220
	struct FName AddMaterial(struct UMaterialInterface* Material); // Function Engine.StaticMesh.AddMaterial // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e01aa0
};

// Class Engine.StaticMeshSocket
// Size: 0x68 (Inherited: 0x28)
struct UStaticMeshSocket : UObject {
	struct FName SocketName; // 0x28(0x08)
	struct FVector RelativeLocation; // 0x30(0x0c)
	struct FRotator RelativeRotation; // 0x3c(0x0c)
	struct FVector RelativeScale; // 0x48(0x0c)
	char pad_54[0x4]; // 0x54(0x04)
	struct FString Tag; // 0x58(0x10)
};

// Class Engine.StereoLayerComponent
// Size: 0x310 (Inherited: 0x220)
struct UStereoLayerComponent : USceneComponent {
	char bLiveTexture : 1; // 0x220(0x01)
	char bSupportsDepth : 1; // 0x220(0x01)
	char bNoAlphaChannel : 1; // 0x220(0x01)
	char pad_220_3 : 5; // 0x220(0x01)
	char pad_221[0x7]; // 0x221(0x07)
	struct UTexture* Texture; // 0x228(0x08)
	struct UTexture* LeftTexture; // 0x230(0x08)
	char bQuadPreserveTextureRatio : 1; // 0x238(0x01)
	char pad_238_1 : 7; // 0x238(0x01)
	char pad_239[0x3]; // 0x239(0x03)
	struct FVector2D QuadSize; // 0x23c(0x08)
	struct FBox2D UVRect; // 0x244(0x14)
	float CylinderRadius; // 0x258(0x04)
	float CylinderOverlayArc; // 0x25c(0x04)
	int32_t CylinderHeight; // 0x260(0x04)
	struct FEquirectProps EquirectProps; // 0x264(0x48)
	enum class EStereoLayerType StereoLayerType; // 0x2ac(0x01)
	enum class EStereoLayerShape StereoLayerShape; // 0x2ad(0x01)
	char pad_2AE[0x2]; // 0x2ae(0x02)
	struct UStereoLayerShape* Shape; // 0x2b0(0x08)
	int32_t Priority; // 0x2b8(0x04)
	char pad_2BC[0x54]; // 0x2bc(0x54)

	void SetUVRect(struct FBox2D InUVRect); // Function Engine.StereoLayerComponent.SetUVRect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3e08170
	void SetTexture(struct UTexture* InTexture); // Function Engine.StereoLayerComponent.SetTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x3e080f0
	void SetQuadSize(struct FVector2D InQuadSize); // Function Engine.StereoLayerComponent.SetQuadSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3e07dc0
	void SetPriority(int32_t InPriority); // Function Engine.StereoLayerComponent.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x3e07d40
	void SetLeftTexture(struct UTexture* InTexture); // Function Engine.StereoLayerComponent.SetLeftTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x3e07c40
	void SetEquirectProps(struct FEquirectProps InScaleBiases); // Function Engine.StereoLayerComponent.SetEquirectProps // (Final|Native|Public|BlueprintCallable) // @ game+0x3e07940
	void MarkTextureForUpdate(); // Function Engine.StereoLayerComponent.MarkTextureForUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x3e07820
	struct FBox2D GetUVRect(); // Function Engine.StereoLayerComponent.GetUVRect // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e077f0
	struct UTexture* GetTexture(); // Function Engine.StereoLayerComponent.GetTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e077d0
	struct FVector2D GetQuadSize(); // Function Engine.StereoLayerComponent.GetQuadSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e077a0
	int32_t GetPriority(); // Function Engine.StereoLayerComponent.GetPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e07780
	struct UTexture* GetLeftTexture(); // Function Engine.StereoLayerComponent.GetLeftTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e07680
};

// Class Engine.StereoLayerShape
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerShape : UObject {
};

// Class Engine.StereoLayerShapeQuad
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerShapeQuad : UStereoLayerShape {
};

// Class Engine.StereoLayerShapeCylinder
// Size: 0x38 (Inherited: 0x28)
struct UStereoLayerShapeCylinder : UStereoLayerShape {
	float Radius; // 0x28(0x04)
	float OverlayArc; // 0x2c(0x04)
	int32_t Height; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	void SetRadius(float InRadius); // Function Engine.StereoLayerShapeCylinder.SetRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x3e07e40
	void SetOverlayArc(float InOverlayArc); // Function Engine.StereoLayerShapeCylinder.SetOverlayArc // (Final|Native|Public|BlueprintCallable) // @ game+0x3e07cc0
	void SetHeight(int32_t InHeight); // Function Engine.StereoLayerShapeCylinder.SetHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x3e07bc0
};

// Class Engine.StereoLayerShapeCubemap
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerShapeCubemap : UStereoLayerShape {
};

// Class Engine.StereoLayerShapeEquirect
// Size: 0x70 (Inherited: 0x28)
struct UStereoLayerShapeEquirect : UStereoLayerShape {
	struct FBox2D LeftUVRect; // 0x28(0x14)
	struct FBox2D RightUVRect; // 0x3c(0x14)
	struct FVector2D LeftScale; // 0x50(0x08)
	struct FVector2D RightScale; // 0x58(0x08)
	struct FVector2D LeftBias; // 0x60(0x08)
	struct FVector2D RightBias; // 0x68(0x08)

	void SetEquirectProps(struct FEquirectProps InScaleBiases); // Function Engine.StereoLayerShapeEquirect.SetEquirectProps // (Final|Native|Public|BlueprintCallable) // @ game+0x3e07a40
};

// Class Engine.StereoLayerFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerFunctionLibrary : UBlueprintFunctionLibrary {

	void ShowSplashScreen(); // Function Engine.StereoLayerFunctionLibrary.ShowSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2f06890
	void SetSplashScreen(struct UTexture* Texture, struct FVector2D Scale, struct FVector Offset, bool bShowLoadingMovie, bool bShowOnSet); // Function Engine.StereoLayerFunctionLibrary.SetSplashScreen // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3e07f50
	void HideSplashScreen(); // Function Engine.StereoLayerFunctionLibrary.HideSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2f059a0
	void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled); // Function Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3e07600
};

// Class Engine.StringTable
// Size: 0x40 (Inherited: 0x28)
struct UStringTable : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class Engine.SubsurfaceProfile
// Size: 0xb8 (Inherited: 0x28)
struct USubsurfaceProfile : UObject {
	struct FSubsurfaceProfileStruct Settings; // 0x28(0x8c)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class Engine.SubsystemBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct USubsystemBlueprintLibrary : UBlueprintFunctionLibrary {

	struct UWorldSubsystem* GetWorldSubsystem(struct UObject* ContextObject, struct UWorldSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetWorldSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3e0c0a0
	struct ULocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(struct APlayerController* PlayerController, struct ULocalPlayerSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubSystemFromPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3e0bea0
	struct ULocalPlayerSubsystem* GetLocalPlayerSubsystem(struct UObject* ContextObject, struct ULocalPlayerSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3e0bf60
	struct UGameInstanceSubsystem* GetGameInstanceSubsystem(struct UObject* ContextObject, struct UGameInstanceSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetGameInstanceSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3e0bde0
	struct UEngineSubsystem* GetEngineSubsystem(struct UEngineSubsystem* Class); // Function Engine.SubsystemBlueprintLibrary.GetEngineSubsystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3e0bd60
};

// Class Engine.SubUVAnimation
// Size: 0x68 (Inherited: 0x28)
struct USubUVAnimation : UObject {
	struct UTexture2D* SubUVTexture; // 0x28(0x08)
	int32_t SubImages_Horizontal; // 0x30(0x04)
	int32_t SubImages_Vertical; // 0x34(0x04)
	enum class ESubUVBoundingVertexCount BoundingMode; // 0x38(0x01)
	enum class EOpacitySourceMode OpacitySourceMode; // 0x39(0x01)
	char pad_3A[0x2]; // 0x3a(0x02)
	float AlphaThreshold; // 0x3c(0x04)
	char pad_40[0x28]; // 0x40(0x28)
};

// Class Engine.TimecodeProvider
// Size: 0x30 (Inherited: 0x28)
struct UTimecodeProvider : UObject {
	float FrameDelay; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)

	struct FTimecode GetTimecode(); // Function Engine.TimecodeProvider.GetTimecode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e10300
	enum class ETimecodeProviderSynchronizationState GetSynchronizationState(); // Function Engine.TimecodeProvider.GetSynchronizationState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e102d0
	struct FQualifiedFrameTime GetQualifiedFrameTime(); // Function Engine.TimecodeProvider.GetQualifiedFrameTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e10290
	struct FFrameRate GetFrameRate(); // Function Engine.TimecodeProvider.GetFrameRate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e101c0
	struct FTimecode GetDelayedTimecode(); // Function Engine.TimecodeProvider.GetDelayedTimecode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e10180
	struct FQualifiedFrameTime GetDelayedQualifiedFrameTime(); // Function Engine.TimecodeProvider.GetDelayedQualifiedFrameTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e10140
};

// Class Engine.SystemTimeTimecodeProvider
// Size: 0x40 (Inherited: 0x30)
struct USystemTimeTimecodeProvider : UTimecodeProvider {
	struct FFrameRate FrameRate; // 0x30(0x08)
	bool bGenerateFullFrame; // 0x38(0x01)
	bool bUseHighPerformanceClock; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
};

// Class Engine.TextPropertyTestObject
// Size: 0x70 (Inherited: 0x28)
struct UTextPropertyTestObject : UObject {
	struct FText DefaultedText; // 0x28(0x18)
	struct FText UndefaultedText; // 0x40(0x18)
	struct FText TransientText; // 0x58(0x18)
};

// Class Engine.TextRenderActor
// Size: 0x328 (Inherited: 0x320)
struct ATextRenderActor : AActor {
	struct UTextRenderComponent* TextRender; // 0x320(0x08)
};

// Class Engine.TextRenderComponent
// Size: 0x4f0 (Inherited: 0x4a0)
struct UTextRenderComponent : UPrimitiveComponent {
	struct FText Text; // 0x4a0(0x18)
	struct UMaterialInterface* TextMaterial; // 0x4b8(0x08)
	struct UFont* Font; // 0x4c0(0x08)
	enum class EHorizTextAligment HorizontalAlignment; // 0x4c8(0x01)
	enum class EVerticalTextAligment VerticalAlignment; // 0x4c9(0x01)
	char pad_4CA[0x2]; // 0x4ca(0x02)
	struct FColor TextRenderColor; // 0x4cc(0x04)
	float XScale; // 0x4d0(0x04)
	float YScale; // 0x4d4(0x04)
	float WorldSize; // 0x4d8(0x04)
	float InvDefaultSize; // 0x4dc(0x04)
	float HorizSpacingAdjust; // 0x4e0(0x04)
	float VertSpacingAdjust; // 0x4e4(0x04)
	char bAlwaysRenderAsText : 1; // 0x4e8(0x01)
	char pad_4E8_1 : 7; // 0x4e8(0x01)
	char pad_4E9[0x7]; // 0x4e9(0x07)

	void SetYScale(float Value); // Function Engine.TextRenderComponent.SetYScale // (Final|Native|Public|BlueprintCallable) // @ game+0x3e0c740
	void SetXScale(float Value); // Function Engine.TextRenderComponent.SetXScale // (Final|Native|Public|BlueprintCallable) // @ game+0x3e0c6c0
	void SetWorldSize(float Value); // Function Engine.TextRenderComponent.SetWorldSize // (Final|Native|Public|BlueprintCallable) // @ game+0x3e0c640
	void SetVertSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetVertSpacingAdjust // (Final|Native|Public|BlueprintCallable) // @ game+0x3e0c540
	void SetVerticalAlignment(enum class EVerticalTextAligment Value); // Function Engine.TextRenderComponent.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3e0c5c0
	void SetTextRenderColor(struct FColor Value); // Function Engine.TextRenderComponent.SetTextRenderColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3e0c4d0
	void SetTextMaterial(struct UMaterialInterface* Material); // Function Engine.TextRenderComponent.SetTextMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x3e0c450
	void SetText(struct FString Value); // Function Engine.TextRenderComponent.SetText // (Final|Native|Public|BlueprintCallable) // @ game+0x3e0c3b0
	void SetHorizSpacingAdjust(float Value); // Function Engine.TextRenderComponent.SetHorizSpacingAdjust // (Final|Native|Public|BlueprintCallable) // @ game+0x3e0c2b0
	void SetHorizontalAlignment(enum class EHorizTextAligment Value); // Function Engine.TextRenderComponent.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3e0c330
	void SetFont(struct UFont* Value); // Function Engine.TextRenderComponent.SetFont // (Final|Native|Public|BlueprintCallable) // @ game+0x3e0c230
	void K2_SetText(struct FText& Value); // Function Engine.TextRenderComponent.K2_SetText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3e0c160
	struct FVector GetTextWorldSize(); // Function Engine.TextRenderComponent.GetTextWorldSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e0c060
	struct FVector GetTextLocalSize(); // Function Engine.TextRenderComponent.GetTextLocalSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e0c020
};

// Class Engine.Texture2DArray
// Size: 0x110 (Inherited: 0xb8)
struct UTexture2DArray : UTexture {
	char pad_B8[0x58]; // 0xb8(0x58)
};

// Class Engine.TextureLightProfile
// Size: 0xf0 (Inherited: 0xe8)
struct UTextureLightProfile : UTexture2D {
	float Brightness; // 0xe8(0x04)
	float TextureMultiplier; // 0xec(0x04)
};

// Class Engine.TextureMipDataProviderFactory
// Size: 0x28 (Inherited: 0x28)
struct UTextureMipDataProviderFactory : UAssetUserData {
};

// Class Engine.TextureRenderTargetCube
// Size: 0xd8 (Inherited: 0xc0)
struct UTextureRenderTargetCube : UTextureRenderTarget {
	int32_t SizeX; // 0xc0(0x04)
	struct FLinearColor ClearColor; // 0xc4(0x10)
	enum class EPixelFormat OverrideFormat; // 0xd4(0x01)
	char bHDR : 1; // 0xd5(0x01)
	char bForceLinearGamma : 1; // 0xd5(0x01)
	char pad_D5_2 : 6; // 0xd5(0x01)
	char pad_D6[0x2]; // 0xd6(0x02)
};

// Class Engine.ThumbnailInfo
// Size: 0x28 (Inherited: 0x28)
struct UThumbnailInfo : UObject {
};

// Class Engine.TimelineComponent
// Size: 0x150 (Inherited: 0xb0)
struct UTimelineComponent : UActorComponent {
	struct FTimeline TheTimeline; // 0xb0(0x98)
	char bIgnoreTimeDilation : 1; // 0x148(0x01)
	char pad_148_1 : 7; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)

	void Stop(); // Function Engine.TimelineComponent.Stop // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e10b10
	void SetVectorCurve(struct UCurveVector* NewVectorCurve, struct FName VectorTrackName); // Function Engine.TimelineComponent.SetVectorCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e10a50
	void SetTimelineLengthMode(enum class ETimelineLengthMode NewLengthMode); // Function Engine.TimelineComponent.SetTimelineLengthMode // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e109d0
	void SetTimelineLength(float NewLength); // Function Engine.TimelineComponent.SetTimelineLength // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e10950
	void SetPlayRate(float NewRate); // Function Engine.TimelineComponent.SetPlayRate // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e107c0
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate); // Function Engine.TimelineComponent.SetPlaybackPosition // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e10840
	void SetNewTime(float NewTime); // Function Engine.TimelineComponent.SetNewTime // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e10740
	void SetLooping(bool bNewLooping); // Function Engine.TimelineComponent.SetLooping // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e106b0
	void SetLinearColorCurve(struct UCurveLinearColor* NewLinearColorCurve, struct FName LinearColorTrackName); // Function Engine.TimelineComponent.SetLinearColorCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e105f0
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation); // Function Engine.TimelineComponent.SetIgnoreTimeDilation // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e10560
	void SetFloatCurve(struct UCurveFloat* NewFloatCurve, struct FName FloatTrackName); // Function Engine.TimelineComponent.SetFloatCurve // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e104a0
	void ReverseFromEnd(); // Function Engine.TimelineComponent.ReverseFromEnd // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e10480
	void Reverse(); // Function Engine.TimelineComponent.Reverse // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e10460
	void PlayFromStart(); // Function Engine.TimelineComponent.PlayFromStart // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e10440
	void Play(); // Function Engine.TimelineComponent.Play // (Final|RequiredAPI|Native|Public|BlueprintCallable) // @ game+0x3e10420
	void OnRep_Timeline(); // Function Engine.TimelineComponent.OnRep_Timeline // (Final|Native|Public) // @ game+0x3e10400
	bool IsReversing(); // Function Engine.TimelineComponent.IsReversing // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e103d0
	bool IsPlaying(); // Function Engine.TimelineComponent.IsPlaying // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e103a0
	bool IsLooping(); // Function Engine.TimelineComponent.IsLooping // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e10370
	float GetTimelineLength(); // Function Engine.TimelineComponent.GetTimelineLength // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e10340
	float GetPlayRate(); // Function Engine.TimelineComponent.GetPlayRate // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e10230
	float GetPlaybackPosition(); // Function Engine.TimelineComponent.GetPlaybackPosition // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e10260
	bool GetIgnoreTimeDilation(); // Function Engine.TimelineComponent.GetIgnoreTimeDilation // (Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3e10200
};

// Class Engine.TimelineTemplate
// Size: 0xb0 (Inherited: 0x28)
struct UTimelineTemplate : UObject {
	float TimelineLength; // 0x28(0x04)
	enum class ETimelineLengthMode LengthMode; // 0x2c(0x01)
	char bAutoPlay : 1; // 0x2d(0x01)
	char bLoop : 1; // 0x2d(0x01)
	char bReplicated : 1; // 0x2d(0x01)
	char bIgnoreTimeDilation : 1; // 0x2d(0x01)
	char pad_2D_4 : 4; // 0x2d(0x01)
	char pad_2E[0x2]; // 0x2e(0x02)
	struct TArray<struct FTTEventTrack> EventTracks; // 0x30(0x10)
	struct TArray<struct FTTFloatTrack> FloatTracks; // 0x40(0x10)
	struct TArray<struct FTTVectorTrack> VectorTracks; // 0x50(0x10)
	struct TArray<struct FTTLinearColorTrack> LinearColorTracks; // 0x60(0x10)
	struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray; // 0x70(0x10)
	struct FGuid TimelineGuid; // 0x80(0x10)
	struct FName VariableName; // 0x90(0x08)
	struct FName DirectionPropertyName; // 0x98(0x08)
	struct FName UpdateFunctionName; // 0xa0(0x08)
	struct FName FinishedFunctionName; // 0xa8(0x08)
};

// Class Engine.TireType
// Size: 0x38 (Inherited: 0x30)
struct UTireType : UDataAsset {
	float FrictionScale; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class Engine.TouchInterface
// Size: 0x58 (Inherited: 0x28)
struct UTouchInterface : UObject {
	struct TArray<struct FTouchInputControl> Controls; // 0x28(0x10)
	float ActiveOpacity; // 0x38(0x04)
	float InactiveOpacity; // 0x3c(0x04)
	float TimeUntilDeactive; // 0x40(0x04)
	float TimeUntilReset; // 0x44(0x04)
	float ActivationDelay; // 0x48(0x04)
	bool bPreventRecenter; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float StartupDelay; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class Engine.TriggerBase
// Size: 0x328 (Inherited: 0x320)
struct ATriggerBase : AActor {
	struct UShapeComponent* CollisionComponent; // 0x320(0x08)
};

// Class Engine.TriggerBox
// Size: 0x328 (Inherited: 0x328)
struct ATriggerBox : ATriggerBase {
};

// Class Engine.TriggerCapsule
// Size: 0x328 (Inherited: 0x328)
struct ATriggerCapsule : ATriggerBase {
};

// Class Engine.TriggerSphere
// Size: 0x328 (Inherited: 0x328)
struct ATriggerSphere : ATriggerBase {
};

// Class Engine.TriggerVolume
// Size: 0x358 (Inherited: 0x358)
struct ATriggerVolume : AVolume {
};

// Class Engine.TwitterIntegrationBase
// Size: 0x38 (Inherited: 0x38)
struct UTwitterIntegrationBase : UPlatformInterfaceBase {

	bool TwitterRequest(struct FString URL, struct TArray<struct FString>& ParamKeysAndValues, enum class ETwitterRequestMethod RequestMethod, int32_t AccountIndex); // Function Engine.TwitterIntegrationBase.TwitterRequest // (Native|Public|HasOutParms) // @ game+0x3e15000
	bool ShowTweetUI(struct FString InitialMessage, struct FString URL, struct FString Picture); // Function Engine.TwitterIntegrationBase.ShowTweetUI // (Native|Public) // @ game+0x3e14e90
	void Init(); // Function Engine.TwitterIntegrationBase.Init // (Native|Public) // @ game+0x2ed32e0
	int32_t GetNumAccounts(); // Function Engine.TwitterIntegrationBase.GetNumAccounts // (Native|Public) // @ game+0x3e14de0
	struct FString GetAccountName(int32_t AccountIndex); // Function Engine.TwitterIntegrationBase.GetAccountName // (Native|Public) // @ game+0x3e14d00
	bool CanShowTweetUI(); // Function Engine.TwitterIntegrationBase.CanShowTweetUI // (Native|Public) // @ game+0x2ed32b0
	bool AuthorizeAccounts(); // Function Engine.TwitterIntegrationBase.AuthorizeAccounts // (Native|Public) // @ game+0x3ce3d90
};

// Class Engine.UserDefinedEnum
// Size: 0xb0 (Inherited: 0x60)
struct UUserDefinedEnum : UEnum {
	struct TMap<struct FName, struct FText> DisplayNameMap; // 0x60(0x50)
};

// Class Engine.UserDefinedStruct
// Size: 0x108 (Inherited: 0xc0)
struct UUserDefinedStruct : UScriptStruct {
	enum class EUserDefinedStructureStatus status; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	struct FGuid Guid; // 0xc4(0x10)
	char pad_D4[0x34]; // 0xd4(0x34)
};

// Class Engine.UserInterfaceSettings
// Size: 0x268 (Inherited: 0x38)
struct UUserInterfaceSettings : UDeveloperSettings {
	enum class ERenderFocusRule RenderFocusRule; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct TMap<enum class EMouseCursor, struct FHardwareCursorReference> HardwareCursors; // 0x40(0x50)
	struct TMap<enum class EMouseCursor, struct FSoftClassPath> SoftwareCursors; // 0x90(0x50)
	struct FSoftClassPath DefaultCursor; // 0xe0(0x18)
	struct FSoftClassPath TextEditBeamCursor; // 0xf8(0x18)
	struct FSoftClassPath CrosshairsCursor; // 0x110(0x18)
	struct FSoftClassPath HandCursor; // 0x128(0x18)
	struct FSoftClassPath GrabHandCursor; // 0x140(0x18)
	struct FSoftClassPath GrabHandClosedCursor; // 0x158(0x18)
	struct FSoftClassPath SlashedCircleCursor; // 0x170(0x18)
	float ApplicationScale; // 0x188(0x04)
	enum class EUIScalingRule UIScaleRule; // 0x18c(0x01)
	char pad_18D[0x3]; // 0x18d(0x03)
	struct FSoftClassPath CustomScalingRuleClass; // 0x190(0x18)
	struct FRuntimeFloatCurve UIScaleCurve; // 0x1a8(0x88)
	bool bAllowHighDPIInGameMode; // 0x230(0x01)
	bool bLoadWidgetsOnDedicatedServer; // 0x231(0x01)
	char pad_232[0x6]; // 0x232(0x06)
	struct TArray<struct UObject*> CursorClasses; // 0x238(0x10)
	struct UObject* CustomScalingRuleClassInstance; // 0x248(0x08)
	struct UDPICustomScalingRule* CustomScalingRule; // 0x250(0x08)
	char pad_258[0x10]; // 0x258(0x10)
};

// Class Engine.VectorField
// Size: 0x48 (Inherited: 0x28)
struct UVectorField : UObject {
	struct FBox Bounds; // 0x28(0x1c)
	float Intensity; // 0x44(0x04)
};

// Class Engine.VectorFieldAnimated
// Size: 0x88 (Inherited: 0x48)
struct UVectorFieldAnimated : UVectorField {
	struct UTexture2D* Texture; // 0x48(0x08)
	enum class EVectorFieldConstructionOp ConstructionOp; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	int32_t VolumeSizeX; // 0x54(0x04)
	int32_t VolumeSizeY; // 0x58(0x04)
	int32_t VolumeSizeZ; // 0x5c(0x04)
	int32_t SubImagesX; // 0x60(0x04)
	int32_t SubImagesY; // 0x64(0x04)
	int32_t FrameCount; // 0x68(0x04)
	float FramesPerSecond; // 0x6c(0x04)
	char bLoop : 1; // 0x70(0x01)
	char pad_70_1 : 7; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct UVectorFieldStatic* NoiseField; // 0x78(0x08)
	float NoiseScale; // 0x80(0x04)
	float NoiseMax; // 0x84(0x04)
};

// Class Engine.VectorFieldComponent
// Size: 0x4d0 (Inherited: 0x4a0)
struct UVectorFieldComponent : UPrimitiveComponent {
	struct UVectorField* VectorField; // 0x4a0(0x08)
	float Intensity; // 0x4a8(0x04)
	float Tightness; // 0x4ac(0x04)
	char bPreviewVectorField : 1; // 0x4b0(0x01)
	char pad_4B0_1 : 7; // 0x4b0(0x01)
	char pad_4B1[0x1f]; // 0x4b1(0x1f)

	void SetIntensity(float NewIntensity); // Function Engine.VectorFieldComponent.SetIntensity // (Native|Public|BlueprintCallable) // @ game+0x3e14e10
};

// Class Engine.VectorFieldStatic
// Size: 0x90 (Inherited: 0x48)
struct UVectorFieldStatic : UVectorField {
	int32_t SizeX; // 0x48(0x04)
	int32_t SizeY; // 0x4c(0x04)
	int32_t SizeZ; // 0x50(0x04)
	bool bAllowCPUAccess; // 0x54(0x01)
	char pad_55[0x2b]; // 0x55(0x2b)
	struct TArray<struct FVector4> CPUData; // 0x80(0x10)
};

// Class Engine.VectorFieldVolume
// Size: 0x328 (Inherited: 0x320)
struct AVectorFieldVolume : AActor {
	struct UVectorFieldComponent* VectorFieldComponent; // 0x320(0x08)
};

// Class Engine.VirtualTexture
// Size: 0x28 (Inherited: 0x28)
struct UVirtualTexture : UObject {
};

// Class Engine.LightMapVirtualTexture
// Size: 0x28 (Inherited: 0x28)
struct ULightMapVirtualTexture : UVirtualTexture {
};

// Class Engine.LightMapVirtualTexture2D
// Size: 0xf8 (Inherited: 0xe8)
struct ULightMapVirtualTexture2D : UTexture2D {
	struct TArray<int8_t> TypeToLayer; // 0xe8(0x10)
};

// Class Engine.VirtualTexturePoolConfig
// Size: 0x40 (Inherited: 0x28)
struct UVirtualTexturePoolConfig : UObject {
	int32_t DefaultSizeInMegabyte; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct TArray<struct FVirtualTextureSpacePoolConfig> Pools; // 0x30(0x10)
};

// Class Engine.VisualLoggerAutomationTests
// Size: 0x28 (Inherited: 0x28)
struct UVisualLoggerAutomationTests : UObject {
};

// Class Engine.VisualLoggerDebugSnapshotInterface
// Size: 0x28 (Inherited: 0x28)
struct UVisualLoggerDebugSnapshotInterface : UInterface {
};

// Class Engine.VisualLoggerKismetLibrary
// Size: 0x28 (Inherited: 0x28)
struct UVisualLoggerKismetLibrary : UBlueprintFunctionLibrary {

	void RedirectVislog(struct UObject* SourceOwner, struct UObject* DestinationOwner); // Function Engine.VisualLoggerKismetLibrary.RedirectVislog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d8c0e0
	void LogText(struct UObject* WorldContextObject, struct FString Text, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3e1b8c0
	void LogSegment(struct UObject* WorldContextObject, struct FVector SegmentStart, struct FVector SegmentEnd, struct FString Text, struct FLinearColor ObjectColor, float Thickness, struct FName CategoryName, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogSegment // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3e1b5f0
	void LogLocation(struct UObject* WorldContextObject, struct FVector Location, struct FString Text, struct FLinearColor ObjectColor, float Radius, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogLocation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3e1b370
	void LogBox(struct UObject* WorldContextObject, struct FBox BoxShape, struct FString Text, struct FLinearColor ObjectColor, struct FName LogCategory, bool bAddToMessageLog); // Function Engine.VisualLoggerKismetLibrary.LogBox // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x3e1b130
	void EnableRecording(bool bEnabled); // Function Engine.VisualLoggerKismetLibrary.EnableRecording // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3d434f0
};

// Class Engine.VoiceChannel
// Size: 0x90 (Inherited: 0x80)
struct UVoiceChannel : UChannel {
	char pad_80[0x10]; // 0x80(0x10)
};

// Class Engine.VOIPTalker
// Size: 0xe8 (Inherited: 0xb0)
struct UVOIPTalker : UActorComponent {
	struct FVoiceSettings Settings; // 0xb0(0x18)
	char pad_C8[0x20]; // 0xc8(0x20)

	void RegisterWithPlayerState(struct APlayerState* OwningState); // Function Engine.VOIPTalker.RegisterWithPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x3e1ba60
	float GetVoiceLevel(); // Function Engine.VOIPTalker.GetVoiceLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x3e1b0b0
	struct UVOIPTalker* CreateTalkerForPlayer(struct APlayerState* OwningState); // Function Engine.VOIPTalker.CreateTalkerForPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3e1b030
	void BPOnTalkingEnd(); // Function Engine.VOIPTalker.BPOnTalkingEnd // (Native|Event|Protected|BlueprintEvent) // @ game+0x120dbb0
	void BPOnTalkingBegin(struct UAudioComponent* AudioComponent); // Function Engine.VOIPTalker.BPOnTalkingBegin // (Native|Event|Protected|BlueprintEvent) // @ game+0x3e1afa0
};

// Class Engine.VOIPStatics
// Size: 0x28 (Inherited: 0x28)
struct UVOIPStatics : UBlueprintFunctionLibrary {

	void SetMicThreshold(float InThreshold); // Function Engine.VOIPStatics.SetMicThreshold // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3e1bb60
};

// Class Engine.VolumeTexture
// Size: 0x110 (Inherited: 0xb8)
struct UVolumeTexture : UTexture {
	char pad_B8[0x58]; // 0xb8(0x58)
};

// Class Engine.VolumetricLightmapDensityVolume
// Size: 0x360 (Inherited: 0x358)
struct AVolumetricLightmapDensityVolume : AVolume {
	struct FInt32Interval AllowedMipLevelRange; // 0x358(0x08)
};

// Class Engine.WindDirectionalSource
// Size: 0x328 (Inherited: 0x320)
struct AWindDirectionalSource : AInfo {
	struct UWindDirectionalSourceComponent* Component; // 0x320(0x08)
};

// Class Engine.WindDirectionalSourceComponent
// Size: 0x240 (Inherited: 0x220)
struct UWindDirectionalSourceComponent : USceneComponent {
	float Strength; // 0x220(0x04)
	float Speed; // 0x224(0x04)
	float MinGustAmount; // 0x228(0x04)
	float MaxGustAmount; // 0x22c(0x04)
	float Radius; // 0x230(0x04)
	char bPointWind : 1; // 0x234(0x01)
	char pad_234_1 : 7; // 0x234(0x01)
	char pad_235[0xb]; // 0x235(0x0b)

	void SetWindType(enum class EWindSourceType InNewType); // Function Engine.WindDirectionalSourceComponent.SetWindType // (Final|Native|Public|BlueprintCallable) // @ game+0x3e1bdd0
	void SetStrength(float InNewStrength); // Function Engine.WindDirectionalSourceComponent.SetStrength // (Final|Native|Public|BlueprintCallable) // @ game+0x3e1bd50
	void SetSpeed(float InNewSpeed); // Function Engine.WindDirectionalSourceComponent.SetSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x3e1bcd0
	void SetRadius(float InNewRadius); // Function Engine.WindDirectionalSourceComponent.SetRadius // (Final|Native|Public|BlueprintCallable) // @ game+0x3e1bc50
	void SetMinimumGustAmount(float InNewMinGust); // Function Engine.WindDirectionalSourceComponent.SetMinimumGustAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x3e1bbd0
	void SetMaximumGustAmount(float InNewMaxGust); // Function Engine.WindDirectionalSourceComponent.SetMaximumGustAmount // (Final|Native|Public|BlueprintCallable) // @ game+0x3e1bae0
};

// Class Engine.WorldComposition
// Size: 0x170 (Inherited: 0x28)
struct UWorldComposition : UObject {
	char pad_28[0x100]; // 0x28(0x100)
	struct TArray<struct ULevelStreaming*> TilesStreaming; // 0x128(0x10)
	double TilesStreamingTimeThreshold; // 0x138(0x08)
	bool bLoadAllTilesDuringCinematic; // 0x140(0x01)
	bool bRebaseOriginIn3DSpace; // 0x141(0x01)
	char pad_142[0x2]; // 0x142(0x02)
	float RebaseOriginDistance; // 0x144(0x04)
	bool bApplyMinStreamingPriorityToLOD; // 0x148(0x01)
	bool bApplyStreamingDistanceScaleToLOD; // 0x149(0x01)
	char pad_14A[0x6]; // 0x14a(0x06)
	struct TArray<struct FString> DevFilterRule; // 0x150(0x10)
	char pad_160[0x10]; // 0x160(0x10)
};

// Class Engine.HierarchicalLODSetup
// Size: 0x60 (Inherited: 0x28)
struct UHierarchicalLODSetup : UObject {
	struct TArray<struct FHierarchicalSimplification> HierarchicalLODSetup; // 0x28(0x10)
	struct TSoftObjectPtr<UMaterialInterface> OverrideBaseMaterial; // 0x38(0x28)
};

// Class Engine.WorldTileLODSetup
// Size: 0x538 (Inherited: 0x28)
struct UWorldTileLODSetup : UObject {
	int32_t NumLOD; // 0x28(0x04)
	struct FTileLODEntry LOD1; // 0x2c(0x13c)
	struct FTileLODEntry LOD2; // 0x168(0x13c)
	struct FTileLODEntry LOD3; // 0x2a4(0x13c)
	struct FTileLODEntry LOD4; // 0x3e0(0x13c)
	char pad_51C[0x1c]; // 0x51c(0x1c)
};

