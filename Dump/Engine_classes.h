// Class Engine.ActorComponent
// Size: 0xb0 (Inherited: 0x28)
struct UActorComponent : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct FNone                                  PrimaryComponentTick;                                        // 0x30(0x30)
	struct TArray<None>                           ComponentTags;                                               // 0x60(0x10)
	struct TArray<None>                           AssetUserData;                                               // 0x70(0x10)
	char                                          UnknownData80[0x4];                                          // 0x80(0x04)
	uint32_t                                      UCSSerializationIndex;                                       // 0x84(0x04)
	char                                          bNetAddressable : 0;                                         // 0x88(0x01)
	char                                          bReplicates : 0;                                             // 0x88(0x01)
	char                                          UnknownData88[0x1];                                          // 0x88(0x01)
	char                                          bAutoActivate : 0;                                           // 0x89(0x01)
	char                                          UnknownData89[0x1];                                          // 0x89(0x01)
	char                                          bIsActive : 0;                                               // 0x8a(0x01)
	char                                          bEditableWhenInherited : 0;                                  // 0x8a(0x01)
	char                                          bCanEverAffectNavigation : 0;                                // 0x8a(0x01)
	char                                          bIsEditorOnly : 0;                                           // 0x8a(0x01)
	char                                          UnknownData8A[0x2];                                          // 0x8a(0x02)
	enum class None                               CreationMethod;                                              // 0x8c(0x01)
	struct FMulticastSparseDelegate               OnComponentActivated;                                        // 0x8d(0x01)
	struct FMulticastSparseDelegate               OnComponentDeactivated;                                      // 0x8e(0x01)
	char                                          UnknownData8F[0x1];                                          // 0x8f(0x01)
	struct TArray<None>                           UCSModifiedProperties;                                       // 0x90(0x10)
	char                                          UnknownDataA0[0x10];                                         // 0xa0(0x10)

	void ToggleActive(); // sub_0x3373b70
	void SetTickGroup(char NewTickGroup); // sub_0x3c4de40
	void SetTickableWhenPaused(char bTickableWhenPaused); // sub_0x3c4dec0
	void SetIsReplicated(char ShouldReplicate); // sub_0x3c4ddb0
	void SetComponentTickInterval(float TickInterval); // sub_0x3c4dd30
	void SetComponentTickEnabled(char bEnabled); // sub_0x3c48c10
	void SetAutoActivate(char bNewAutoActivate); // sub_0x3c4dca0
	void SetActive(char bNewActive, char bReset); // sub_0x3c4dbd0
	void RemoveTickPrerequisiteComponent(struct FNone* PrerequisiteComponent); // sub_0x3c4db40
	void RemoveTickPrerequisiteActor(struct FNone* PrerequisiteActor); // sub_0x3c4dab0
	void ReceiveTick(float DeltaSeconds); // sub_0x239bfb0
	void ReceiveEndPlay(char EndPlayReason); // sub_0x239bfb0
	void ReceiveBeginPlay(); // sub_0x239bfb0
	void OnRep_IsActive(); // sub_0x2ecb6f0
	void K2_DestroyComponent(struct FNone* Object); // sub_0x3c4d9b0
	char IsComponentTickEnabled(); // sub_0x3c4d980
	char IsBeingDestroyed(); // sub_0x3c4d950
	char IsActive(); // sub_0x3c4d920
	struct FNone* GetOwner(); // sub_0x3c4d900
	float GetComponentTickInterval(); // sub_0x3c4d8d0
	void Deactivate(); // sub_0x2ecb6d0
	char ComponentHasTag(struct FName Tag); // sub_0x3c4d6c0
	void AddTickPrerequisiteComponent(struct FNone* PrerequisiteComponent); // sub_0x3c4d570
	void AddTickPrerequisiteActor(struct FNone* PrerequisiteActor); // sub_0x3c4d4e0
	void Activate(char bReset); // sub_0x3373e10
};

// Class Engine.SceneComponent
// Size: 0x240 (Inherited: 0xb0)
struct USceneComponent : UActorComponent 
{
	char                                          UnknownDataB0[0x94];                                         // 0xb0(0x94)
	struct TWeakObjectPtr<struct FNone>           PhysicsVolume;                                               // 0x144(0x08)
	char                                          UnknownData14C[0x84];                                        // 0x14c(0x84)
	struct FNone*                                 AttachParent;                                                // 0x1d0(0x08)
	char                                          UnknownData1D8[0x4];                                         // 0x1d8(0x04)
	struct FName                                  AttachSocketName;                                            // 0x1dc(0x08)
	struct TArray<None>                           AttachChildren;                                              // 0xb8(0x10)
	struct TArray<None>                           ClientAttachedChildren;                                      // 0x190(0x10)
	char                                          UnknownData204[0x20];                                        // 0x204(0x20)
	struct FNone                                  RelativeLocation;                                            // 0x224(0x0c)
	struct FNone                                  RelativeRotation;                                            // 0x1b4(0x0c)
	struct FNone                                  RelativeScale3D;                                             // 0x1c4(0x0c)
	struct FNone                                  ComponentVelocity;                                           // 0x164(0x0c)
	char                                          bComponentToWorldUpdated : 0;                                // 0x140(0x01)
	char                                          bAbsoluteLocation : 0;                                       // 0x220(0x01)
	char                                          bAbsoluteRotation : 0;                                       // 0x1d8(0x01)
	char                                          bAbsoluteScale : 0;                                          // 0x188(0x01)
	char                                          bVisible : 0;                                                // 0xc8(0x01)
	char                                          bShouldBeAttached : 0;                                       // 0x220(0x01)
	char                                          bShouldSnapLocationWhenAttached : 0;                         // 0x1b0(0x01)
	char                                          bShouldSnapRotationWhenAttached : 0;                         // 0x188(0x01)
	char                                          bShouldUpdatePhysicsVolume : 0;                              // 0x1a0(0x01)
	char                                          bHiddenInGame : 0;                                           // 0x220(0x01)
	char                                          bBoundsChangeTriggersStreamingDataRebuild : 0;               // 0xc8(0x01)
	char                                          bUseAttachParentBound : 0;                                   // 0x1d8(0x01)
	char                                          Mobility;                                                    // 0x221(0x01)
	char                                          DetailMode;                                                  // 0x160(0x01)
	struct FMulticastSparseDelegate               PhysicsVolumeChangedDelegate;                                // 0xb0(0x01)

	void ToggleVisibility(char bPropagateToChildren); // sub_0x3dcc150
	char SnapTo(struct FNone* InParent, struct FName InSocketName); // sub_0x3dcc090
	void SetWorldScale3D(struct FNone NewScale); // sub_0x3dcbeb0
	void SetVisibility(char bNewVisibility, char bPropagateToChildren); // sub_0x3dcbde0
	void SetShouldUpdatePhysicsVolume(char bInShouldUpdatePhysicsVolume); // sub_0x3dcbd50
	void SetRelativeScale3D(struct FNone NewScale3D); // sub_0x3dcbcc0
	void SetMobility(char NewMobility); // sub_0x3dcbc40
	void SetHiddenInGame(char NewHidden, char bPropagateToChildren); // sub_0x3dcbb70
	void SetAbsolute(char bNewAbsoluteLocation, char bNewAbsoluteRotation, char bNewAbsoluteScale); // sub_0x3dcb9d0
	void ResetRelativeTransform(); // sub_0x3dcb9b0
	void OnRep_Visibility(char OldValue); // sub_0x3dcb7d0
	void OnRep_Transform(); // sub_0x3dcb7b0
	void OnRep_AttachSocketName(); // sub_0x3dcb790
	void OnRep_AttachParent(); // sub_0x3dcb790
	void OnRep_AttachChildren(); // sub_0x3dcb770
	void K2_SetWorldTransform(struct FNone& NewTransform, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dcb570
	void K2_SetWorldRotation(struct FNone NewRotation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dcb3d0
	void K2_SetWorldLocationAndRotation(struct FNone NewLocation, struct FNone NewRotation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dcb1e0
	void K2_SetWorldLocation(struct FNone NewLocation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dcb040
	void K2_SetRelativeTransform(struct FNone& NewTransform, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dcae40
	void K2_SetRelativeRotation(struct FNone NewRotation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dcaca0
	void K2_SetRelativeLocationAndRotation(struct FNone NewLocation, struct FNone NewRotation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dcaab0
	void K2_SetRelativeLocation(struct FNone NewLocation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dca910
	struct FNone K2_GetComponentToWorld(); // sub_0x3dca8b0
	struct FNone K2_GetComponentScale(); // sub_0x3dca870
	struct FNone K2_GetComponentRotation(); // sub_0x3dca830
	struct FNone K2_GetComponentLocation(); // sub_0x3dca7f0
	void K2_DetachFromComponent(enum class None LocationRule, enum class None RotationRule, enum class None ScaleRule, char bCallModify); // sub_0x3dca6a0
	char K2_AttachToComponent(struct FNone* Parent, struct FName SocketName, enum class None LocationRule, enum class None RotationRule, enum class None ScaleRule, char bWeldSimulatedBodies); // sub_0x3dca4f0
	char K2_AttachTo(struct FNone* InParent, struct FName InSocketName, char AttachType, char bWeldSimulatedBodies); // sub_0x3dca3a0
	void K2_AddWorldTransform(struct FNone& DeltaTransform, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dca1a0
	void K2_AddWorldRotation(struct FNone DeltaRotation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dca000
	void K2_AddWorldOffset(struct FNone DeltaLocation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dc9e60
	void K2_AddRelativeRotation(struct FNone DeltaRotation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dc9cc0
	void K2_AddRelativeLocation(struct FNone DeltaLocation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dc9b20
	void K2_AddLocalTransform(struct FNone& DeltaTransform, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dc9920
	void K2_AddLocalRotation(struct FNone DeltaRotation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dc9780
	void K2_AddLocalOffset(struct FNone DeltaLocation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3dc95e0
	char IsVisible(); // sub_0x3dc95b0
	char IsSimulatingPhysics(struct FName BoneName); // sub_0x3dc9510
	char IsAnySimulatingPhysics(); // sub_0x3dc94e0
	struct FNone GetUpVector(); // sub_0x3dc9350
	struct FNone GetSocketTransform(struct FName InSocketName, char TransformSpace); // sub_0x3dc9250
	struct FNone GetSocketRotation(struct FName InSocketName); // sub_0x3dc91a0
	struct FNone GetSocketQuaternion(struct FName InSocketName); // sub_0x3dc9100
	struct FNone GetSocketLocation(struct FName InSocketName); // sub_0x3dc9050
	char GetShouldUpdatePhysicsVolume(); // sub_0x3dc9020
	struct FNone GetRightVector(); // sub_0x3dc8fe0
	struct FNone GetRelativeTransform(); // sub_0x3dc8f80
	struct FNone* GetPhysicsVolume(); // sub_0x3dc8f50
	void GetParentComponents(struct TArray<None>& Parents); // sub_0x3dc8ea0
	uint32_t GetNumChildrenComponents(); // sub_0x3dc8e70
	struct FNone GetForwardVector(); // sub_0x3d9fd80
	struct FNone GetComponentVelocity(); // sub_0x3dc8e30
	void GetChildrenComponents(char bIncludeAllDescendants, struct TArray<None>& Children); // sub_0x3dc8d30
	struct FNone* GetChildComponent(uint32_t ChildIndex); // sub_0x3dc8ca0
	struct FName GetAttachSocketName(); // sub_0x3dc8c80
	struct FNone* GetAttachParent(); // sub_0x3dc8c60
	struct TArray<None> GetAllSocketNames(); // sub_0x3dc8be0
	char DoesSocketExist(struct FName InSocketName); // sub_0x3dc8b40
	void DetachFromParent(char bMaintainWorldPosition, char bCallModify); // sub_0x3dc8a70
};

// Class Engine.MKActorEx
// Size: 0x90 (Inherited: 0x28)
struct UMKActorEx : UObject 
{
	char                                          ReplaySamplable;                                             // 0x28(0x01)
	char                                          UnknownData29[0x7];                                          // 0x29(0x07)
	struct FNone*                                 ReplaySampleClass;                                           // 0x30(0x08)
	float                                         ReplaySamplingFrequency;                                     // 0x38(0x04)
	uint32_t                                      ClientReplaySamplingGUID;                                    // 0x3c(0x04)
	char                                          UnknownData40[0x4];                                          // 0x40(0x04)
	char                                          bReplayLevelAttached : 0;                                    // 0x44(0x01)
	char                                          UnknownData44[0x24];                                         // 0x44(0x24)
	struct TArray<None>                           ReplaySamplesForPlayback;                                    // 0x68(0x10)
	char                                          UnknownData78[0x10];                                         // 0x78(0x10)
	struct FNone*                                 SelfActor;                                                   // 0x88(0x08)

	void OnTickReplaySampleRecord(struct FNone* DemoNetDriver, float MinRecordHz, float MaxRecordHz, char bSaveCheckpoint); // sub_0x3d796e0
	void OnTickReplaySamplePlayback(struct FNone* DemoNetDriver); // sub_0x3d79660
	void OnReplayPreScrub(struct FNone* InWorld); // sub_0x2ecb460
	void OnPostRecordReplay(struct FNone* InWorld, struct FNone& DemoURL); // sub_0x3d79570
	void LerpReplaySampleForPlayback(struct FNone* DemoNetDriver, struct FNone* L, struct FNone* R, float LerpPercent); // sub_0x3d79330
	char HandleTimelineScrubbed(); // sub_0x2ecb670
	void GatherReplaySampleForRecording(struct FNone* DemoNetDriver, float DemoCurrentTime, char bSaveCheckpoint); // sub_0x3d784b0
	void ForceReplaySamplingUpdate(); // sub_0x3ca12c0
};

// Class Engine.Actor
// Size: 0x310 (Inherited: 0x90)
struct AActor : UMKActorEx 
{
	char                                          UnknownData90[0x148];                                        // 0x90(0x148)
	struct FNone                                  PrimaryActorTick;                                            // 0x1d8(0x30)
	char                                          UnknownData208[0x7c];                                        // 0x208(0x7c)
	char                                          bNetTemporary : 0;                                           // 0x284(0x01)
	char                                          bNetStartup : 0;                                             // 0x248(0x01)
	char                                          bOnlyRelevantToOwner : 0;                                    // 0x1c4(0x01)
	char                                          bAlwaysRelevant : 0;                                         // 0xa1(0x01)
	char                                          bReplicateMovement : 0;                                      // 0x260(0x01)
	char                                          bHidden : 0;                                                 // 0x222(0x01)
	char                                          bTearOff : 0;                                                // 0x284(0x01)
	char                                          bExchangedRoles : 0;                                         // 0x120(0x01)
	char                                          bNetLoadOnClient : 0;                                        // 0x138(0x01)
	char                                          bNetUseOwnerRelevancy : 0;                                   // 0xe8(0x01)
	char                                          bRelevantForNetworkReplays : 0;                              // 0x170(0x01)
	char                                          bRelevantForLevelBounds : 0;                                 // 0x138(0x01)
	char                                          bReplayRewindable : 0;                                       // 0x9f(0x01)
	char                                          bAllowTickBeforeBeginPlay : 0;                               // 0x1c4(0x01)
	char                                          bAutoDestroyWhenFinished : 0;                                // 0x1c4(0x01)
	char                                          bCanBeDamaged : 0;                                           // 0x1a0(0x01)
	char                                          UnknownData284[0x7f];                                        // 0x284(0x7f)
	char                                          bBlockInput : 0;                                             // 0x303(0x01)
	char                                          bCollideWhenPlacing : 0;                                     // 0x301(0x01)
	char                                          bFindCameraComponentWhenViewTarget : 0;                      // 0x251(0x01)
	char                                          UnknownData303[0xb];                                         // 0x303(0x0b)
	char                                          bGenerateOverlapEventsDuringLevelStreaming : 0;              // 0x30e(0x01)
	char                                          bIgnoresOriginShifting : 0;                                  // 0x155(0x01)
	char                                          bEnableAutoLODGeneration : 0;                                // 0x251(0x01)
	char                                          bIsEditorOnlyActor : 0;                                      // 0x120(0x01)
	char                                          bActorSeamlessTraveled : 0;                                  // 0xea(0x01)
	char                                          bReplicates : 0;                                             // 0x9d(0x01)
	char                                          bCanBeInCluster : 0;                                         // 0x90(0x01)
	char                                          bAllowReceiveTickEventOnDedicatedServer : 0;                 // 0x198(0x01)
	char                                          bActorEnableCollision : 0;                                   // 0x1b8(0x01)
	char                                          bActorIsBeingDestroyed : 0;                                  // 0x30e(0x01)
	enum class None                               UpdateOverlapsMethodDuringLevelStreaming;                    // 0x154(0x01)
	enum class None                               DefaultUpdateOverlapsMethodDuringLevelStreaming;             // 0xa3(0x01)
	char                                          RemoteRole;                                                  // 0x279(0x01)
	struct FNone                                  ReplicatedMovement;                                          // 0xec(0x34)
	float                                         InitialLifeSpan;                                             // 0x2e0(0x04)
	float                                         CustomTimeDilation;                                          // 0x308(0x04)
	struct FNone                                  AttachmentReplication;                                       // 0xa8(0x40)
	struct FNone*                                 Owner;                                                       // 0x178(0x08)
	struct FName                                  NetDriverName;                                               // 0x94(0x08)
	char                                          Role;                                                        // 0x9e(0x01)
	char                                          NetDormancy;                                                 // 0x238(0x01)
	enum class None                               SpawnCollisionHandlingMethod;                                // 0x304(0x01)
	char                                          AutoReceiveInput;                                            // 0x302(0x01)
	uint32_t                                      InputPriority;                                               // 0x150(0x04)
	struct FNone*                                 InputComponent;                                              // 0x2f8(0x08)
	float                                         NetCullDistanceSquared;                                      // 0x280(0x04)
	uint32_t                                      NetTag;                                                      // 0x24c(0x04)
	float                                         NetUpdateFrequency;                                          // 0x27c(0x04)
	float                                         MinNetUpdateFrequency;                                       // 0x288(0x04)
	float                                         NetPriority;                                                 // 0x21c(0x04)
	struct FNone*                                 Instigator;                                                  // 0x258(0x08)
	struct TArray<None>                           Children;                                                    // 0x268(0x10)
	struct FNone*                                 RootComponent;                                               // 0x158(0x08)
	struct TArray<None>                           ControllingMatineeActors;                                    // 0x208(0x10)
	struct TArray<None>                           Layers;                                                      // 0x188(0x10)
	struct TWeakObjectPtr<struct FNone>           ParentComponent;                                             // 0x1bc(0x08)
	char                                          bEnableRerunConstructionScript : 0;                          // 0x30c(0x01)
	struct TArray<None>                           Tags;                                                        // 0x140(0x10)
	struct FMulticastSparseDelegate               OnTakeAnyDamage;                                             // 0x218(0x01)
	struct FMulticastSparseDelegate               OnTakePointDamage;                                           // 0x27a(0x01)
	struct FMulticastSparseDelegate               OnTakeRadialDamage;                                          // 0x9c(0x01)
	struct FMulticastSparseDelegate               OnActorBeginOverlap;                                         // 0x27b(0x01)
	struct FMulticastSparseDelegate               OnActorEndOverlap;                                           // 0xa0(0x01)
	struct FMulticastSparseDelegate               OnBeginCursorOver;                                           // 0x221(0x01)
	struct FMulticastSparseDelegate               OnEndCursorOver;                                             // 0xe9(0x01)
	struct FMulticastSparseDelegate               OnClicked;                                                   // 0x278(0x01)
	struct FMulticastSparseDelegate               OnReleased;                                                  // 0x2e4(0x01)
	struct FMulticastSparseDelegate               OnInputTouchBegin;                                           // 0x300(0x01)
	struct FMulticastSparseDelegate               OnInputTouchEnd;                                             // 0x285(0x01)
	struct FMulticastSparseDelegate               OnInputTouchEnter;                                           // 0xa2(0x01)
	struct FMulticastSparseDelegate               OnInputTouchLeave;                                           // 0x250(0x01)
	struct FMulticastSparseDelegate               OnActorHit;                                                  // 0x180(0x01)
	struct FMulticastSparseDelegate               OnDestroyed;                                                 // 0x220(0x01)
	struct FMulticastSparseDelegate               OnEndPlay;                                                   // 0x30d(0x01)
	struct TArray<None>                           InstanceComponents;                                          // 0x128(0x10)
	struct TArray<None>                           BlueprintCreatedComponents;                                  // 0x1a8(0x10)
	struct TArray<None>                           LoadedObjects;                                               // 0x1c8(0x10)

	char WasRecentlyRendered(float Tolerance); // sub_0x3c49400
	void UserConstructionScript(); // sub_0x239bfb0
	void TearOff(); // sub_0x3c493e0
	void SnapRootComponentTo(struct FNone* InParentActor, struct FName InSocketName); // sub_0x3c49320
	void SetTickGroup(char NewTickGroup); // sub_0x3c49210
	void SetTickableWhenPaused(char bTickableWhenPaused); // sub_0x3c49290
	void SetReplicates(char bInReplicates); // sub_0x3c49180
	void SetReplicateMovement(char bInReplicateMovement); // sub_0x3c490f0
	void SetOwner(struct FNone* NewOwner); // sub_0x3c49060
	void SetNetDormancy(char NewDormancy); // sub_0x3c48fe0
	void SetLifeSpan(float InLifespan); // sub_0x3c48f60
	void SetAutoDestroyWhenFinished(char bVal); // sub_0x3c48ed0
	void SetActorTickInterval(float TickInterval); // sub_0x3c48e50
	void SetActorTickEnabled(char bEnabled); // sub_0x3c48dc0
	void SetActorScale3D(struct FNone NewScale3D); // sub_0x3c48d30
	void SetActorRelativeScale3D(struct FNone NewRelativeScale); // sub_0x3c48ca0
	void SetActorHiddenInGame(char bNewHidden); // sub_0x3c48c10
	void SetActorEnableCollision(char bNewActorEnableCollision); // sub_0x3c48b80
	void RemoveTickPrerequisiteComponent(struct FNone* PrerequisiteComponent); // sub_0x3c48af0
	void RemoveTickPrerequisiteActor(struct FNone* PrerequisiteActor); // sub_0x3c48a60
	void ReceiveTick(float DeltaSeconds); // sub_0x239bfb0
	void ReceiveRadialDamage(float DamageReceived, struct FNone* DamageType, struct FNone Origin, struct FNone& HitInfo, struct FNone* InstigatedBy, struct FNone* DamageCauser); // sub_0x239bfb0
	void ReceivePointDamage(float Damage, struct FNone* DamageType, struct FNone HitLocation, struct FNone HitNormal, struct FNone* HitComponent, struct FName BoneName, struct FNone ShotFromDirection, struct FNone* InstigatedBy, struct FNone* DamageCauser, struct FNone& HitInfo); // sub_0x239bfb0
	void ReceiveHit(struct FNone* MyComp, struct FNone* Other, struct FNone* OtherComp, char bSelfMoved, struct FNone HitLocation, struct FNone HitNormal, struct FNone NormalImpulse, struct FNone& Hit); // sub_0x239bfb0
	void ReceiveEndPlay(char EndPlayReason); // sub_0x239bfb0
	void ReceiveDestroyed(); // sub_0x239bfb0
	void ReceiveBeginPlay(); // sub_0x239bfb0
	void ReceiveAnyDamage(float Damage, struct FNone* DamageType, struct FNone* InstigatedBy, struct FNone* DamageCauser); // sub_0x239bfb0
	void ReceiveActorOnReleased(struct FNone ButtonReleased); // sub_0x239bfb0
	void ReceiveActorOnInputTouchLeave(char FingerIndex); // sub_0x239bfb0
	void ReceiveActorOnInputTouchEnter(char FingerIndex); // sub_0x239bfb0
	void ReceiveActorOnInputTouchEnd(char FingerIndex); // sub_0x239bfb0
	void ReceiveActorOnInputTouchBegin(char FingerIndex); // sub_0x239bfb0
	void ReceiveActorOnClicked(struct FNone ButtonPressed); // sub_0x239bfb0
	void ReceiveActorEndOverlap(struct FNone* OtherActor); // sub_0x239bfb0
	void ReceiveActorEndCursorOver(); // sub_0x239bfb0
	void ReceiveActorBeginOverlap(struct FNone* OtherActor); // sub_0x239bfb0
	void ReceiveActorBeginCursorOver(); // sub_0x239bfb0
	void PrestreamTextures(float Seconds, char bEnableStreaming, uint32_t CinematicTextureGroups); // sub_0x3c48950
	void OnRep_ReplicateMovement(); // sub_0x1e97ea0
	void OnRep_ReplicatedMovement(); // sub_0x3c48930
	void OnRep_Owner(); // sub_0x1e97860
	void OnRep_Instigator(); // sub_0x3c48910
	void OnRep_AttachmentReplication(); // sub_0x1e97a00
	void MakeNoise(float Loudness, struct FNone* NoiseInstigator, struct FNone NoiseLocation, float MaxRange, struct FName Tag); // sub_0x3c48780
	struct FNone* MakeMIDForMaterial(struct FNone* Parent); // sub_0x3c486f0
	char K2_TeleportTo(struct FNone DestLocation, struct FNone DestRotation); // sub_0x3c48600
	char K2_SetActorTransform(struct FNone& NewTransform, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3c48400
	char K2_SetActorRotation(struct FNone NewRotation, char bTeleportPhysics); // sub_0x3c48320
	void K2_SetActorRelativeTransform(struct FNone& NewRelativeTransform, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3c48120
	void K2_SetActorRelativeRotation(struct FNone NewRelativeRotation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3c47f80
	void K2_SetActorRelativeLocation(struct FNone NewRelativeLocation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3c47de0
	char K2_SetActorLocationAndRotation(struct FNone NewLocation, struct FNone NewRotation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3c47be0
	char K2_SetActorLocation(struct FNone NewLocation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3c47a30
	void K2_OnReset(); // sub_0x239bfb0
	void K2_OnEndViewTarget(struct FNone* PC); // sub_0x239bfb0
	void K2_OnBecomeViewTarget(struct FNone* PC); // sub_0x239bfb0
	struct FNone* K2_GetRootComponent(); // sub_0x3c47a10
	struct TArray<None> K2_GetComponentsByClass(struct FNone* ComponentClass); // sub_0x3c47930
	struct FNone K2_GetActorRotation(); // sub_0x3c47870
	struct FNone K2_GetActorLocation(); // sub_0x3c477d0
	void K2_DetachFromActor(enum class None LocationRule, enum class None RotationRule, enum class None ScaleRule); // sub_0x3c476d0
	void K2_DestroyComponent(struct FNone* Component); // sub_0x3c47650
	void K2_DestroyActor(); // sub_0x3c47630
	void K2_AttachToComponent(struct FNone* Parent, struct FName SocketName, enum class None LocationRule, enum class None RotationRule, enum class None ScaleRule, char bWeldSimulatedBodies); // sub_0x3c47470
	void K2_AttachToActor(struct FNone* ParentActor, struct FName SocketName, enum class None LocationRule, enum class None RotationRule, enum class None ScaleRule, char bWeldSimulatedBodies); // sub_0x3c472b0
	void K2_AttachRootComponentToActor(struct FNone* InParentActor, struct FName InSocketName, char AttachLocationType, char bWeldSimulatedBodies); // sub_0x3c47160
	void K2_AttachRootComponentTo(struct FNone* InParent, struct FName InSocketName, char AttachLocationType, char bWeldSimulatedBodies); // sub_0x3c47010
	void K2_AddActorWorldTransform(struct FNone& DeltaTransform, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3c46e10
	void K2_AddActorWorldRotation(struct FNone DeltaRotation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3c46c70
	void K2_AddActorWorldOffset(struct FNone DeltaLocation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3c46ad0
	void K2_AddActorLocalTransform(struct FNone& NewTransform, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3c468d0
	void K2_AddActorLocalRotation(struct FNone DeltaRotation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3c46730
	void K2_AddActorLocalOffset(struct FNone DeltaLocation, char bSweep, struct FNone& SweepHitResult, char bTeleport); // sub_0x3c46590
	char IsOverlappingActor(struct FNone* Other); // sub_0x3c46500
	char IsChildActor(); // sub_0x3c464d0
	char IsActorTickEnabled(); // sub_0x3c464a0
	char IsActorBeingDestroyed(); // sub_0x3c46470
	char HasAuthority(); // sub_0x3c46440
	float GetVerticalDistanceTo(struct FNone* OtherActor); // sub_0x3c463a0
	struct FNone GetVelocity(); // sub_0x3c46360
	struct FNone GetTransform(); // sub_0x3c46310
	char GetTickableWhenPaused(); // sub_0x3c462e0
	float GetSquaredDistanceTo(struct FNone* OtherActor); // sub_0x3c46240
	char GetRemoteRole(); // sub_0x3c46220
	struct FNone* GetParentComponent(); // sub_0x3c461f0
	struct FNone* GetParentActor(); // sub_0x3c461c0
	struct FNone* GetOwner(); // sub_0x3c461a0
	void GetOverlappingComponents(struct TArray<None>& OverlappingComponents); // sub_0x3c460f0
	void GetOverlappingActors(struct TArray<None>& OverlappingActors, struct FNone* ClassFilter); // sub_0x3c45ff0
	char GetLocalRole(); // sub_0x3c45fd0
	float GetLifeSpan(); // sub_0x3c45f90
	struct FNone* GetInstigatorController(); // sub_0x3c45f60
	struct FNone* GetInstigator(); // sub_0x3c45f30
	struct FNone GetInputVectorAxisValue(struct FNone InputAxisKey); // sub_0x3c45e30
	float GetInputAxisValue(struct FName InputAxisName); // sub_0x3c45d90
	float GetInputAxisKeyValue(struct FNone InputAxisKey); // sub_0x3c45ca0
	float GetHorizontalDotProductTo(struct FNone* OtherActor); // sub_0x3c45c00
	float GetHorizontalDistanceTo(struct FNone* OtherActor); // sub_0x3c45b60
	float GetGameTimeSinceCreation(); // sub_0x3c45b30
	float GetDotProductTo(struct FNone* OtherActor); // sub_0x3c45a90
	float GetDistanceTo(struct FNone* OtherActor); // sub_0x3c459f0
	struct TArray<None> GetComponentsByTag(struct FNone* ComponentClass, struct FName Tag); // sub_0x3c458e0
	struct TArray<None> GetComponentsByInterface(struct FNone* Interface); // sub_0x3c45800
	struct FNone* GetComponentByClass(struct FNone* ComponentClass); // sub_0x3c45770
	struct FName GetAttachParentSocketName(); // sub_0x3c454f0
	void GetAttachParentActors(struct TArray<None>& OutActors); // sub_0x3c45440
	struct FNone* GetAttachParentActorMost(); // sub_0x3c45410
	struct FNone* GetAttachParentActor(); // sub_0x3c453e0
	void GetAttachedActorsRecursive(struct TArray<None>& OutActors, char bIncludeChildActor); // sub_0x3c45670
	void GetAttachedActors(struct TArray<None>& OutActors, char bResetArray, char bIncludeChildActor); // sub_0x3c45530
	void GetAllChildActors(struct TArray<None>& ChildActors, char bIncludeDescendants); // sub_0x3c452e0
	struct FNone GetActorUpVector(); // sub_0x3c45270
	float GetActorTimeDilation(); // sub_0x3c45240
	float GetActorTickInterval(); // sub_0x3c45210
	struct FNone GetActorScale3D(); // sub_0x3c451d0
	struct FNone GetActorRightVector(); // sub_0x3c45160
	struct FNone GetActorRelativeScale3D(); // sub_0x3c45120
	struct FNone GetActorForwardVector(); // sub_0x3c450b0
	void GetActorEyesViewPoint(struct FNone& OutLocation, struct FNone& OutRotation); // sub_0x3c44fc0
	char GetActorEnableCollision(); // sub_0x3c44f90
	void GetActorBounds(char bOnlyCollidingComponents, struct FNone& Origin, struct FNone& BoxExtent, char bIncludeFromChildActors); // sub_0x3c44e10
	void ForceNetUpdate(); // sub_0x3c44df0
	void FlushNetDormancy(); // sub_0x3c44dd0
	void EnableInput(struct FNone* PlayerController); // sub_0x3c44d40
	void DisableInput(struct FNone* PlayerController); // sub_0x3c44cb0
	void DetachRootComponentFromParent(char bMaintainWorldPosition); // sub_0x3c44c20
	void AddTickPrerequisiteComponent(struct FNone* PrerequisiteComponent); // sub_0x3c44b90
	void AddTickPrerequisiteActor(struct FNone* PrerequisiteActor); // sub_0x3c44b00
	struct FNone* AddComponent(struct FName TemplateName, char bManualAttachment, struct FNone& RelativeTransform, struct FNone* ComponentTemplateContext); // sub_0x3c44940
	char ActorHasTag(struct FName Tag); // sub_0x3c448b0
};

// Class Engine.SkeletalMeshActor
// Size: 0x398 (Inherited: 0x310)
struct ASkeletalMeshActor : AActor 
{
	char                                          UnknownData310[0x8];                                         // 0x310(0x08)
	char                                          bShouldDoAnimNotifies : 0;                                   // 0x318(0x01)
	char                                          bWakeOnLevelStart : 0;                                       // 0x318(0x01)
	char                                          UnknownData318[0x8];                                         // 0x318(0x08)
	struct FNone*                                 SkeletalMeshComponent;                                       // 0x320(0x08)
	struct FNone*                                 ReplicatedMesh;                                              // 0x328(0x08)
	struct FNone*                                 ReplicatedPhysAsset;                                         // 0x330(0x08)
	struct FNone*                                 ReplicatedMaterial0;                                         // 0x338(0x08)
	struct FNone*                                 ReplicatedMaterial1;                                         // 0x340(0x08)
	char                                          UnknownData348[0x50];                                        // 0x348(0x50)

	void OnRep_ReplicatedPhysAsset(); // sub_0x1235530
	void OnRep_ReplicatedMesh(); // sub_0x1e42900
	void OnRep_ReplicatedMaterial1(); // sub_0x1f0adc0
	void OnRep_ReplicatedMaterial0(); // sub_0x1f0c650
};

// Class Engine.BlueprintFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintFunctionLibrary : UObject 
{
};

// Class Engine.PrimitiveComponent
// Size: 0x4c0 (Inherited: 0x240)
struct UPrimitiveComponent : USceneComponent 
{
	float                                         MinDrawDistance;                                             // 0x240(0x04)
	float                                         LDMaxDrawDistance;                                           // 0x244(0x04)
	float                                         CachedMaxDrawDistance;                                       // 0x248(0x04)
	char                                          DepthPriorityGroup;                                          // 0x24c(0x01)
	char                                          ViewOwnerDepthPriorityGroup;                                 // 0x24d(0x01)
	char                                          IndirectLightingCacheQuality;                                // 0x24e(0x01)
	enum class None                               LightmapType;                                                // 0x24f(0x01)
	char                                          bUseMaxLODAsImposter : 0;                                    // 0x250(0x01)
	char                                          bBatchImpostersAsInstances : 0;                              // 0x250(0x01)
	char                                          bNeverDistanceCull : 0;                                      // 0x250(0x01)
	char                                          bAlwaysCreatePhysicsState : 0;                               // 0x250(0x01)
	char                                          UnknownData250[0x1];                                         // 0x250(0x01)
	char                                          bGenerateOverlapEvents : 0;                                  // 0x251(0x01)
	char                                          bMultiBodyOverlap : 0;                                       // 0x251(0x01)
	char                                          bTraceComplexOnMove : 0;                                     // 0x251(0x01)
	char                                          bReturnMaterialOnMove : 0;                                   // 0x251(0x01)
	char                                          bUseViewOwnerDepthPriorityGroup : 0;                         // 0x251(0x01)
	char                                          bAllowCullDistanceVolume : 0;                                // 0x251(0x01)
	char                                          bHasMotionBlurVelocityMeshes : 0;                            // 0x251(0x01)
	char                                          bVisibleInReflectionCaptures : 0;                            // 0x251(0x01)
	char                                          UnknownData251[0x1];                                         // 0x251(0x01)
	char                                          bVisibleInRayTracing : 0;                                    // 0x252(0x01)
	char                                          bRenderInMainPass : 0;                                       // 0x252(0x01)
	char                                          bRenderInDepthPass : 0;                                      // 0x252(0x01)
	char                                          bReceivesDecals : 0;                                         // 0x252(0x01)
	char                                          bOwnerNoSee : 0;                                             // 0x252(0x01)
	char                                          bOnlyOwnerSee : 0;                                           // 0x252(0x01)
	char                                          bIgnoreNearClippingForOcclusion : 0;                         // 0x252(0x01)
	char                                          bTreatAsBackgroundForOcclusion : 0;                          // 0x252(0x01)
	char                                          UnknownData252[0x1];                                         // 0x252(0x01)
	char                                          bUseAsOccluder : 0;                                          // 0x253(0x01)
	char                                          bSelectable : 0;                                             // 0x253(0x01)
	char                                          bForceMipStreaming : 0;                                      // 0x253(0x01)
	char                                          bHasPerInstanceHitProxies : 0;                               // 0x253(0x01)
	char                                          CastShadow : 0;                                              // 0x253(0x01)
	char                                          bAffectDynamicIndirectLighting : 0;                          // 0x253(0x01)
	char                                          bAffectDistanceFieldLighting : 0;                            // 0x253(0x01)
	char                                          bCastDynamicShadow : 0;                                      // 0x253(0x01)
	char                                          UnknownData253[0x1];                                         // 0x253(0x01)
	char                                          bCastStaticShadow : 0;                                       // 0x254(0x01)
	char                                          bCastDirectionalShadow : 0;                                  // 0x254(0x01)
	char                                          bCastVolumetricTranslucentShadow : 0;                        // 0x254(0x01)
	char                                          bSelfShadowOnly : 0;                                         // 0x254(0x01)
	char                                          bCastFarShadow : 0;                                          // 0x254(0x01)
	char                                          bCastInsetShadow : 0;                                        // 0x254(0x01)
	char                                          bCastCinematicShadow : 0;                                    // 0x254(0x01)
	char                                          bCastHiddenShadow : 0;                                       // 0x254(0x01)
	char                                          UnknownData254[0x1];                                         // 0x254(0x01)
	char                                          bCastShadowAsTwoSided : 0;                                   // 0x255(0x01)
	char                                          bLightAsIfStatic : 0;                                        // 0x255(0x01)
	char                                          bLightAttachmentsAsGroup : 0;                                // 0x255(0x01)
	char                                          bExcludeFromLightAttachmentGroup : 0;                        // 0x255(0x01)
	char                                          bReceiveMobileCSMShadows : 0;                                // 0x255(0x01)
	char                                          bSingleSampleShadowFromStationaryLights : 0;                 // 0x255(0x01)
	char                                          bIgnoreRadialImpulse : 0;                                    // 0x255(0x01)
	char                                          bIgnoreRadialForce : 0;                                      // 0x255(0x01)
	char                                          UnknownData255[0x1];                                         // 0x255(0x01)
	char                                          bApplyImpulseOnDamage : 0;                                   // 0x256(0x01)
	char                                          bReplicatePhysicsToAutonomousProxy : 0;                      // 0x256(0x01)
	char                                          bFillCollisionUnderneathForNavmesh : 0;                      // 0x256(0x01)
	char                                          AlwaysLoadOnClient : 0;                                      // 0x256(0x01)
	char                                          AlwaysLoadOnServer : 0;                                      // 0x256(0x01)
	char                                          bUseEditorCompositing : 0;                                   // 0x256(0x01)
	char                                          bRenderCustomDepth : 0;                                      // 0x256(0x01)
	char                                          UnknownData256[0x1];                                         // 0x256(0x01)
	char                                          bHasNoStreamableTextures : 0;                                // 0x257(0x01)
	char                                          UnknownData257[0x1];                                         // 0x257(0x01)
	char                                          bHasCustomNavigableGeometry;                                 // 0x258(0x01)
	char                                          UnknownData259[0x1];                                         // 0x259(0x01)
	char                                          CanCharacterStepUpOn;                                        // 0x25a(0x01)
	struct FNone                                  LightingChannels;                                            // 0x25b(0x01)
	enum class None                               CustomDepthStencilWriteMask;                                 // 0x25c(0x01)
	char                                          UnknownData25D[0x3];                                         // 0x25d(0x03)
	uint32_t                                      CustomDepthStencilValue;                                     // 0x260(0x04)
	char                                          UnknownData264[0x4];                                         // 0x264(0x04)
	struct FNone                                  CustomPrimitiveData;                                         // 0x268(0x10)
	struct FNone                                  CustomPrimitiveDataInternal;                                 // 0x278(0x10)
	uint32_t                                      TranslucencySortPriority;                                    // 0x288(0x04)
	uint32_t                                      VisibilityId;                                                // 0x28c(0x04)
	struct TArray<None>                           RuntimeVirtualTextures;                                      // 0x290(0x10)
	uint8_t                                       VirtualTextureLodBias;                                       // 0x2a0(0x01)
	uint8_t                                       VirtualTextureCullMips;                                      // 0x2a1(0x01)
	uint8_t                                       VirtualTextureMinCoverage;                                   // 0x2a2(0x01)
	enum class None                               VirtualTextureRenderPassType;                                // 0x2a3(0x01)
	char                                          UnknownData2A4[0x4];                                         // 0x2a4(0x04)
	float                                         LpvBiasMultiplier;                                           // 0x2a8(0x04)
	char                                          UnknownData2AC[0x8];                                         // 0x2ac(0x08)
	float                                         BoundsScale;                                                 // 0x2b4(0x04)
	char                                          UnknownData2B8[0x10];                                        // 0x2b8(0x10)
	struct TArray<None>                           MoveIgnoreActors;                                            // 0x2c8(0x10)
	struct TArray<None>                           MoveIgnoreComponents;                                        // 0x2d8(0x10)
	char                                          UnknownData2E8[0x10];                                        // 0x2e8(0x10)
	struct FNone                                  BodyInstance;                                                // 0x2f8(0x190)
	struct FMulticastSparseDelegate               OnComponentHit;                                              // 0x488(0x01)
	struct FMulticastSparseDelegate               OnComponentBeginOverlap;                                     // 0x489(0x01)
	struct FMulticastSparseDelegate               OnComponentEndOverlap;                                       // 0x48a(0x01)
	struct FMulticastSparseDelegate               OnComponentWake;                                             // 0x48b(0x01)
	struct FMulticastSparseDelegate               OnComponentSleep;                                            // 0x48c(0x01)
	char                                          UnknownData48D[0x1];                                         // 0x48d(0x01)
	struct FMulticastSparseDelegate               OnBeginCursorOver;                                           // 0x48e(0x01)
	struct FMulticastSparseDelegate               OnEndCursorOver;                                             // 0x48f(0x01)
	struct FMulticastSparseDelegate               OnClicked;                                                   // 0x490(0x01)
	struct FMulticastSparseDelegate               OnReleased;                                                  // 0x491(0x01)
	struct FMulticastSparseDelegate               OnInputTouchBegin;                                           // 0x492(0x01)
	struct FMulticastSparseDelegate               OnInputTouchEnd;                                             // 0x493(0x01)
	struct FMulticastSparseDelegate               OnInputTouchEnter;                                           // 0x494(0x01)
	struct FMulticastSparseDelegate               OnInputTouchLeave;                                           // 0x495(0x01)
	char                                          UnknownData496[0x1a];                                        // 0x496(0x1a)
	struct FNone*                                 LODParentPrimitive;                                          // 0x4b0(0x08)
	char                                          UnknownData4B8[0x8];                                         // 0x4b8(0x08)

	char WasRecentlyRendered(float Tolerance); // sub_0x3db95d0
	void WakeRigidBody(struct FName BoneName); // sub_0x3db9540
	void WakeAllRigidBodies(); // sub_0x3d983a0
	void SetWalkableSlopeOverride(struct FNone& NewOverride); // sub_0x3db9490
	void SetUseCCD(char InUseCCD, struct FName BoneName); // sub_0x3db93c0
	void SetTranslucentSortPriority(uint32_t NewTranslucentSortPriority); // sub_0x3db9340
	void SetSingleSampleShadowFromStationaryLights(char bNewSingleSampleShadowFromStationaryLights); // sub_0x3db92b0
	void SetSimulatePhysics(char bSimulate); // sub_0x3db9220
	void SetRenderInMainPass(char bValue); // sub_0x3db9190
	void SetRenderCustomDepth(char bValue); // sub_0x3db9100
	void SetReceivesDecals(char bNewReceivesDecals); // sub_0x3db9070
	void SetPhysMaterialOverride(struct FNone* NewPhysMaterial); // sub_0x3db8a40
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, char bAddToCurrent, struct FName BoneName); // sub_0x3db8f60
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, char bAddToCurrent, struct FName BoneName); // sub_0x3db8e50
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, char bAddToCurrent, struct FName BoneName); // sub_0x3db8e50
	void SetPhysicsLinearVelocity(struct FNone NewVel, char bAddToCurrent, struct FName BoneName); // sub_0x3db8d30
	void SetPhysicsAngularVelocityInRadians(struct FNone NewAngVel, char bAddToCurrent, struct FName BoneName); // sub_0x3db8c10
	void SetPhysicsAngularVelocityInDegrees(struct FNone NewAngVel, char bAddToCurrent, struct FName BoneName); // sub_0x3db8ad0
	void SetPhysicsAngularVelocity(struct FNone NewAngVel, char bAddToCurrent, struct FName BoneName); // sub_0x3db8ad0
	void SetOwnerNoSee(char bNewOwnerNoSee); // sub_0x3db89b0
	void SetOnlyOwnerSee(char bNewOnlyOwnerSee); // sub_0x3db8920
	void SetNotifyRigidBodyCollision(char bNewNotifyRigidBodyCollision); // sub_0x3db8890
	void SetMaterialByName(struct FName MaterialSlotName, struct FNone* Material); // sub_0x3db87c0
	void SetMaterial(uint32_t ElementIndex, struct FNone* Material); // sub_0x3db86f0
	void SetMassScale(struct FName BoneName, float InMassScale); // sub_0x3db8620
	void SetMassOverrideInKg(struct FName BoneName, float MassInKg, char bOverrideMass); // sub_0x3db8520
	void SetLinearDamping(float InDamping); // sub_0x3db84a0
	void SetLightingChannels(char bChannel0, char bChannel1, char bChannel2); // sub_0x3db8380
	void SetLightAttachmentsAsGroup(char bInLightAttachmentsAsGroup); // sub_0x3db82f0
	void SetGenerateOverlapEvents(char bInGenerateOverlapEvents); // sub_0x3db8260
	void SetExcludeFromLightAttachmentGroup(char bInExcludeFromLightAttachmentGroup); // sub_0x3db81d0
	void SetEnableGravity(char bGravityEnabled); // sub_0x3db8140
	void SetCustomPrimitiveDataVector4(uint32_t DataIndex, struct FNone Value); // sub_0x3db8070
	void SetCustomPrimitiveDataVector3(uint32_t DataIndex, struct FNone Value); // sub_0x3db7fa0
	void SetCustomPrimitiveDataVector2(uint32_t DataIndex, struct FNone Value); // sub_0x3db7ee0
	void SetCustomPrimitiveDataFloat(uint32_t DataIndex, float Value); // sub_0x3db7e10
	void SetCustomDepthStencilWriteMask(enum class None WriteMaskBit); // sub_0x3db7d90
	void SetCustomDepthStencilValue(uint32_t Value); // sub_0x3db7d10
	void SetCullDistance(float NewCullDistance); // sub_0x3db7c90
	void SetConstraintMode(char ConstraintMode); // sub_0x3db7c10
	void SetCollisionResponseToChannel(char Channel, char NewResponse); // sub_0x3db7b50
	void SetCollisionResponseToAllChannels(char NewResponse); // sub_0x3db7ad0
	void SetCollisionProfileName(struct FName InCollisionProfileName, char bUpdateOverlaps); // sub_0x3db7a00
	void SetCollisionObjectType(char Channel); // sub_0x3db7980
	void SetCollisionEnabled(char NewType); // sub_0x3db7900
	void SetCenterOfMass(struct FNone CenterOfMassOffset, struct FName BoneName); // sub_0x3db7830
	void SetCastShadow(char NewCastShadow); // sub_0x3db77a0
	void SetCastInsetShadow(char bInCastInsetShadow); // sub_0x3db7710
	void SetBoundsScale(float NewBoundsScale); // sub_0x3db7690
	void SetAngularDamping(float InDamping); // sub_0x3db7610
	void SetAllUseCCD(char InUseCCD); // sub_0x3da8ff0
	void SetAllPhysicsLinearVelocity(struct FNone NewVel, char bAddToCurrent); // sub_0x3db7530
	void SetAllPhysicsAngularVelocityInRadians(struct FNone& NewAngVel, char bAddToCurrent); // sub_0x3db7450
	void SetAllPhysicsAngularVelocityInDegrees(struct FNone& NewAngVel, char bAddToCurrent); // sub_0x3db7330
	void SetAllMassScale(float InMassScale); // sub_0x3d97260
	struct FNone ScaleByMomentOfInertia(struct FNone InputVector, struct FName BoneName); // sub_0x3db7230
	void PutRigidBodyToSleep(struct FName BoneName); // sub_0x3db71b0
	char K2_SphereTraceComponent(struct FNone TraceStart, struct FNone TraceEnd, float SphereRadius, char bTraceComplex, char bShowTrace, char bPersistentShowTrace, struct FNone& HitLocation, struct FNone& HitNormal, struct FName& BoneName, struct FNone& OutHit); // sub_0x3db6e20
	char K2_SphereOverlapComponent(struct FNone InSphereCentre, float InSphereRadius, char bTraceComplex, char bShowTrace, char bPersistentShowTrace, struct FNone& HitLocation, struct FNone& HitNormal, struct FName& BoneName, struct FNone& OutHit); // sub_0x3db6ae0
	char K2_LineTraceComponent(struct FNone TraceStart, struct FNone TraceEnd, char bTraceComplex, char bShowTrace, char bPersistentShowTrace, struct FNone& HitLocation, struct FNone& HitNormal, struct FName& BoneName, struct FNone& OutHit); // sub_0x3db6790
	char K2_IsQueryCollisionEnabled(); // sub_0x3db6750
	char K2_IsPhysicsCollisionEnabled(); // sub_0x3db6710
	char K2_IsCollisionEnabled(); // sub_0x3db66d0
	char K2_BoxOverlapComponent(struct FNone InBoxCentre, struct FNone InBox, char bTraceComplex, char bShowTrace, char bPersistentShowTrace, struct FNone& HitLocation, struct FNone& HitNormal, struct FName& BoneName, struct FNone& OutHit); // sub_0x3db6380
	char IsOverlappingComponent(struct FNone* OtherComp); // sub_0x3db62f0
	char IsOverlappingActor(struct FNone* Other); // sub_0x3db6260
	char IsGravityEnabled(); // sub_0x3ca46a0
	char IsAnyRigidBodyAwake(); // sub_0x3db6230
	void IgnoreComponentWhenMoving(struct FNone* Component, char bShouldIgnore); // sub_0x3db6160
	void IgnoreActorWhenMoving(struct FNone* Actor, char bShouldIgnore); // sub_0x3db6090
	struct FNone GetWalkableSlopeOverride(); // sub_0x3db6060
	struct FNone GetPhysicsLinearVelocityAtPoint(struct FNone Point, struct FName BoneName); // sub_0x3db5f70
	struct FNone GetPhysicsLinearVelocity(struct FName BoneName); // sub_0x3db5ed0
	struct FNone GetPhysicsAngularVelocityInRadians(struct FName BoneName); // sub_0x3db5e30
	struct FNone GetPhysicsAngularVelocityInDegrees(struct FName BoneName); // sub_0x3db5d60
	struct FNone GetPhysicsAngularVelocity(struct FName BoneName); // sub_0x3db5d60
	void GetOverlappingComponents(struct TArray<None>& OutOverlappingComponents); // sub_0x3db5cb0
	void GetOverlappingActors(struct TArray<None>& OverlappingActors, struct FNone* ClassFilter); // sub_0x3db5bb0
	uint32_t GetNumMaterials(); // sub_0x3db5b80
	struct FNone* GetMaterialFromCollisionFaceIndex(uint32_t FaceIndex, uint32_t& SectionIndex); // sub_0x3db5aa0
	struct FNone* GetMaterial(uint32_t ElementIndex); // sub_0x3db5a00
	float GetMassScale(struct FName BoneName); // sub_0x3db5960
	float GetMass(); // sub_0x3db5920
	float GetLinearDamping(); // sub_0x3db58e0
	struct FNone GetInertiaTensor(struct FName BoneName); // sub_0x3db5830
	char GetGenerateOverlapEvents(); // sub_0x3db5800
	char GetCollisionResponseToChannel(char Channel); // sub_0x3db5770
	struct FName GetCollisionProfileName(); // sub_0x3db5730
	char GetCollisionObjectType(); // sub_0x3db5700
	char GetCollisionEnabled(); // sub_0x3db56d0
	float GetClosestPointOnCollision(struct FNone& Point, struct FNone& OutPointOnBody, struct FName BoneName); // sub_0x3db5590
	struct FNone GetCenterOfMass(struct FName BoneName); // sub_0x3db54f0
	float GetAngularDamping(); // sub_0x3db54b0
	struct FNone* CreateDynamicMaterialInstance(uint32_t ElementIndex, struct FNone* SourceMaterial, struct FName OptionalName); // sub_0x3db53a0
	struct FNone* CreateAndSetMaterialInstanceDynamicFromMaterial(uint32_t ElementIndex, struct FNone* Parent); // sub_0x3db52d0
	struct FNone* CreateAndSetMaterialInstanceDynamic(uint32_t ElementIndex); // sub_0x3db5230
	struct TArray<None> CopyArrayOfMoveIgnoreComponents(); // sub_0x3db51b0
	struct TArray<None> CopyArrayOfMoveIgnoreActors(); // sub_0x3db5130
	void ClearMoveIgnoreComponents(); // sub_0x3db5100
	void ClearMoveIgnoreActors(); // sub_0x3db50e0
	char CanCharacterStepUp(struct FNone* Pawn); // sub_0x3db5040
	void AddTorqueInRadians(struct FNone Torque, struct FName BoneName, char bAccelChange); // sub_0x3db4de0
	void AddTorqueInDegrees(struct FNone Torque, struct FName BoneName, char bAccelChange); // sub_0x3db4f00
	void AddTorque(struct FNone Torque, struct FName BoneName, char bAccelChange); // sub_0x3db4de0
	void AddRadialImpulse(struct FNone Origin, float Radius, float Strength, char Falloff, char bVelChange); // sub_0x3db4c20
	void AddRadialForce(struct FNone Origin, float Radius, float Strength, char Falloff, char bAccelChange); // sub_0x3db4a60
	void AddImpulseAtLocation(struct FNone Impulse, struct FNone Location, struct FName BoneName); // sub_0x3db4930
	void AddImpulse(struct FNone Impulse, struct FName BoneName, char bVelChange); // sub_0x3db4810
	void AddForceAtLocationLocal(struct FNone Force, struct FNone Location, struct FName BoneName); // sub_0x3db46e0
	void AddForceAtLocation(struct FNone Force, struct FNone Location, struct FName BoneName); // sub_0x3db45b0
	void AddForce(struct FNone Force, struct FName BoneName, char bAccelChange); // sub_0x3db4490
	void AddAngularImpulseInRadians(struct FNone Impulse, struct FName BoneName, char bVelChange); // sub_0x3db4370
	void AddAngularImpulseInDegrees(struct FNone Impulse, struct FName BoneName, char bVelChange); // sub_0x3db4230
	void AddAngularImpulse(struct FNone Impulse, struct FName BoneName, char bVelChange); // sub_0x3db4110
};

// Class Engine.MeshComponent
// Size: 0x4f0 (Inherited: 0x4c0)
struct UMeshComponent : UPrimitiveComponent 
{
	float                                         MipStreamingScale;                                           // 0x4b8(0x04)
	struct TArray<None>                           OverrideMaterials;                                           // 0x4c0(0x10)
	char                                          UnknownData4D4[0xc];                                         // 0x4d4(0x0c)
	char                                          bEnableMaterialParameterCaching : 0;                         // 0x4e0(0x01)
	char                                          UnknownData4E0[0x10];                                        // 0x4e0(0x10)

	void SetVectorParameterValueOnMaterials(struct FName ParameterName, struct FNone ParameterValue); // sub_0x3d71580
	void SetScalarParameterValueOnMaterials(struct FName ParameterName, float ParameterValue); // sub_0x3d714b0
	void SetColorParameterValueOnMaterials(struct FName ParameterName, struct FNone ParameterValue); // sub_0x3d71280
	void PrestreamTextures(float Seconds, char bPrioritizeCharacterTextures, uint32_t CinematicTextureGroups); // sub_0x3d71170
	char IsMaterialSlotNameValid(struct FName MaterialSlotName); // sub_0x3d710d0
	struct TArray<None> GetMaterialSlotNames(); // sub_0x3d70fd0
	struct TArray<None> GetMaterials(); // sub_0x3d71050
	uint32_t GetMaterialIndex(struct FName MaterialSlotName); // sub_0x3d70f30
};

// Class Engine.SkinnedMeshComponent
// Size: 0x700 (Inherited: 0x4f0)
struct USkinnedMeshComponent : UMeshComponent 
{
	struct FNone*                                 SkeletalMesh;                                                // 0x4e8(0x08)
	struct TWeakObjectPtr<struct FNone>           MasterPoseComponent;                                         // 0x4f0(0x08)
	struct TArray<None>                           SkinCacheUsage;                                              // 0x4f8(0x10)
	char                                          UnknownData510[0xf0];                                        // 0x510(0xf0)
	struct FNone*                                 PhysicsAssetOverride;                                        // 0x600(0x08)
	uint32_t                                      ForcedLodModel;                                              // 0x608(0x04)
	uint32_t                                      MinLodModel;                                                 // 0x60c(0x04)
	char                                          UnknownData610[0x8];                                         // 0x610(0x08)
	float                                         StreamingDistanceMultiplier;                                 // 0x618(0x04)
	char                                          UnknownData61C[0xc];                                         // 0x61c(0x0c)
	struct TArray<None>                           LODInfo;                                                     // 0x628(0x10)
	char                                          UnknownData638[0x24];                                        // 0x638(0x24)
	enum class None                               VisibilityBasedAnimTickOption;                               // 0x65c(0x01)
	char                                          UnknownData65D[0x1];                                         // 0x65d(0x01)
	char                                          bOverrideMinLod : 0;                                         // 0x65e(0x01)
	char                                          bUseBoundsFromMasterPoseComponent : 0;                       // 0x65e(0x01)
	char                                          bForceWireframe : 0;                                         // 0x65e(0x01)
	char                                          bDisplayBones : 0;                                           // 0x65e(0x01)
	char                                          bDisableMorphTarget : 0;                                     // 0x65e(0x01)
	char                                          bHideSkin : 0;                                               // 0x65e(0x01)
	char                                          UnknownData65E[0x1];                                         // 0x65e(0x01)
	char                                          bPerBoneMotionBlur : 0;                                      // 0x65f(0x01)
	char                                          bComponentUseFixedSkelBounds : 0;                            // 0x65f(0x01)
	char                                          bConsiderAllBodiesForBounds : 0;                             // 0x65f(0x01)
	char                                          bSyncAttachParentLOD : 0;                                    // 0x65f(0x01)
	char                                          bCanHighlightSelectedSections : 0;                           // 0x65f(0x01)
	char                                          bRecentlyRendered : 0;                                       // 0x65f(0x01)
	char                                          bCastCapsuleDirectShadow : 0;                                // 0x65f(0x01)
	char                                          bCastCapsuleIndirectShadow : 0;                              // 0x65f(0x01)
	char                                          UnknownData65F[0x1];                                         // 0x65f(0x01)
	char                                          bCPUSkinning : 0;                                            // 0x660(0x01)
	char                                          bEnableUpdateRateOptimizations : 0;                          // 0x660(0x01)
	char                                          bDisplayDebugUpdateRateOptimizations : 0;                    // 0x660(0x01)
	char                                          bRenderStatic : 0;                                           // 0x660(0x01)
	char                                          bIgnoreMasterPoseComponentLOD : 0;                           // 0x660(0x01)
	char                                          bCachedLocalBoundsUpToDate : 0;                              // 0x660(0x01)
	char                                          UnknownData660[0x1];                                         // 0x660(0x01)
	char                                          bForceMeshObjectUpdate : 0;                                  // 0x661(0x01)
	char                                          UnknownData661[0x3];                                         // 0x661(0x03)
	float                                         CapsuleIndirectShadowMinVisibility;                          // 0x664(0x04)
	char                                          UnknownData668[0x10];                                        // 0x668(0x10)
	struct FNone                                  CachedWorldSpaceBounds;                                      // 0x678(0x1c)
	char                                          UnknownData694[0xc];                                         // 0x694(0x0c)
	struct FNone                                  CachedWorldToLocalTransform;                                 // 0x6a0(0x40)
	char                                          UnknownData6E0[0x20];                                        // 0x6e0(0x20)

	void UnloadSkinWeightProfile(struct FName InProfileName); // sub_0x3ddfb90
	void UnHideBoneByName(struct FName BoneName); // sub_0x3ddfb10
	void TransformToBoneSpace(struct FName BoneName, struct FNone InPosition, struct FNone InRotation, struct FNone& OutPosition, struct FNone& OutRotation); // sub_0x3ddf950
	void TransformFromBoneSpace(struct FName BoneName, struct FNone InPosition, struct FNone InRotation, struct FNone& OutPosition, struct FNone& OutRotation); // sub_0x3ddf790
	void ShowMaterialSection(uint32_t MaterialID, uint32_t SectionIndex, char bShow, uint32_t LODIndex); // sub_0x3ddf650
	void ShowAllMaterialSections(uint32_t LODIndex); // sub_0x3ddf5d0
	void SetVertexColorOverride_LinearColor(uint32_t LODIndex, struct TArray<None>& VertexColors); // sub_0x3ddf4e0
	char SetSkinWeightProfile(struct FName InProfileName); // sub_0x3ddf450
	void SetSkinWeightOverride(uint32_t LODIndex, struct TArray<None>& SkinWeights); // sub_0x3ddf360
	void SetSkeletalMesh(struct FNone* NewMesh, char bReinitPose); // sub_0x3ddf290
	void SetRenderStatic(char bNewValue); // sub_0x3ddf200
	void SetPhysicsAsset(struct FNone* NewPhysicsAsset, char bForceReInit); // sub_0x3ddf130
	void SetMinLOD(uint32_t InNewMinLOD); // sub_0x3ddf0b0
	void SetMasterPoseComponent(struct FNone* NewMasterBoneComponent, char bForceUpdate); // sub_0x3ddefe0
	void SetForcedLOD(uint32_t InNewForcedLOD); // sub_0x3ddef60
	void SetCastCapsuleIndirectShadow(char bNewValue); // sub_0x3ddeed0
	void SetCastCapsuleDirectShadow(char bNewValue); // sub_0x3ddee40
	void SetCapsuleIndirectShadowMinVisibility(float NewValue); // sub_0x3ddedc0
	char IsUsingSkinWeightProfile(); // sub_0x3dded90
	char IsMaterialSectionShown(uint32_t MaterialID, uint32_t LODIndex); // sub_0x3ddecd0
	char IsBoneHiddenByName(struct FName BoneName); // sub_0x3ddec40
	void HideBoneByName(struct FName BoneName, char PhysBodyOption); // sub_0x3ddea60
	char GetTwistAndSwingAngleOfDeltaRotationFromRefPose(struct FName BoneName, float& OutTwistAngle, float& OutSwingAngle); // sub_0x3dde940
	struct FName GetSocketBoneName(struct FName InSocketName); // sub_0x3dde810
	struct FNone GetRefPosePosition(uint32_t BoneIndex); // sub_0x3dde770
	struct FName GetParentBone(struct FName BoneName); // sub_0x3dde6e0
	uint32_t GetNumLODs(); // sub_0x3dde6b0
	uint32_t GetNumBones(); // sub_0x3dde680
	uint32_t GetForcedLOD(); // sub_0x3dde650
	struct FNone GetDeltaTransformFromRefPose(struct FName BoneName, struct FName BaseName); // sub_0x3dde550
	struct FName GetCurrentSkinWeightProfileName(); // sub_0x3dde530
	struct FName GetBoneName(uint32_t BoneIndex); // sub_0x3dde4a0
	uint32_t GetBoneIndex(struct FName BoneName); // sub_0x3dde410
	struct FName FindClosestBone_K2(struct FNone TestLocation, struct FNone& BoneLocation, float IgnoreScale, char bRequirePhysicsAsset); // sub_0x3dde280
	void ClearVertexColorOverride(uint32_t LODIndex); // sub_0x3dde200
	void ClearSkinWeightProfile(); // sub_0x3dde1e0
	void ClearSkinWeightOverride(uint32_t LODIndex); // sub_0x3dde160
	char BoneIsChildOf(struct FName BoneName, struct FName ParentBoneName); // sub_0x3dde0a0
};

// Class Engine.StreamableRenderAsset
// Size: 0x40 (Inherited: 0x28)
struct UStreamableRenderAsset : UObject 
{
	double                                        ForceMipLevelsToBeResidentTimestamp;                         // 0x28(0x08)
	uint32_t                                      NumCinematicMipLevels;                                       // 0x30(0x04)
	uint32_t                                      StreamingIndex;                                              // 0x34(0x04)
	uint32_t                                      CachedCombinedLODBias;                                       // 0x38(0x04)
	char                                          CachedNumResidentLODs;                                       // 0x3c(0x01)
	char                                          bCachedReadyForStreaming : 0;                                // 0x3d(0x01)
	char                                          NeverStream : 0;                                             // 0x3d(0x01)
	char                                          bGlobalForceMipLevelsToBeResident : 0;                       // 0x3d(0x01)
	char                                          bIsStreamable : 0;                                           // 0x3d(0x01)
	char                                          bHasStreamingUpdatePending : 0;                              // 0x3d(0x01)
	char                                          bForceMiplevelsToBeResident : 0;                             // 0x3d(0x01)
	char                                          bIgnoreStreamingMipBias : 0;                                 // 0x3d(0x01)
	char                                          bUseCinematicMipLevels : 0;                                  // 0x3d(0x01)
	char                                          UnknownData3D[0x3];                                          // 0x3d(0x03)
};

// Class Engine.SkeletalMesh
// Size: 0x380 (Inherited: 0x40)
struct USkeletalMesh : UStreamableRenderAsset 
{
	char                                          UnknownData40[0x20];                                         // 0x40(0x20)
	struct FNone*                                 Skeleton;                                                    // 0x60(0x08)
	struct FNone                                  ImportedBounds;                                              // 0x68(0x1c)
	struct FNone                                  ExtendedBounds;                                              // 0x84(0x1c)
	struct FNone                                  PositiveBoundsExtension;                                     // 0xa0(0x0c)
	struct FNone                                  NegativeBoundsExtension;                                     // 0xac(0x0c)
	struct TArray<None>                           Materials;                                                   // 0xb8(0x10)
	struct TArray<None>                           SkelMirrorTable;                                             // 0xc8(0x10)
	struct TArray<None>                           LODInfo;                                                     // 0xd8(0x10)
	char                                          UnknownDataE8[0x50];                                         // 0xe8(0x50)
	struct FNone                                  MinLOD;                                                      // 0x138(0x04)
	struct FNone                                  DisableBelowMinLodStripping;                                 // 0x13c(0x01)
	char                                          SkelMirrorAxis;                                              // 0x13d(0x01)
	char                                          SkelMirrorFlipAxis;                                          // 0x13e(0x01)
	char                                          bUseFullPrecisionUVs : 0;                                    // 0x13f(0x01)
	char                                          bUseHighPrecisionTangentBasis : 0;                           // 0x13f(0x01)
	char                                          bHasBeenSimplified : 0;                                      // 0x13f(0x01)
	char                                          bHasVertexColors : 0;                                        // 0x13f(0x01)
	char                                          bEnablePerPolyCollision : 0;                                 // 0x13f(0x01)
	char                                          UnknownData13F[0x1];                                         // 0x13f(0x01)
	struct FNone*                                 BodySetup;                                                   // 0x140(0x08)
	struct FNone*                                 PhysicsAsset;                                                // 0x148(0x08)
	struct FNone*                                 ShadowPhysicsAsset;                                          // 0x150(0x08)
	struct TArray<None>                           NodeMappingData;                                             // 0x158(0x10)
	struct TArray<None>                           MorphTargets;                                                // 0x168(0x10)
	char                                          UnknownData178[0x178];                                       // 0x178(0x178)
	struct FNone*                                 PostProcessAnimBlueprint;                                    // 0x2f0(0x08)
	struct TArray<None>                           MeshClothingAssets;                                          // 0x2f8(0x10)
	struct FNone                                  SamplingInfo;                                                // 0x308(0x30)
	struct TArray<None>                           AssetUserData;                                               // 0x338(0x10)
	char                                          UnknownData348[0x8];                                         // 0x348(0x08)
	struct TArray<None>                           Sockets;                                                     // 0x350(0x10)
	char                                          UnknownData360[0x10];                                        // 0x360(0x10)
	struct TArray<None>                           SkinWeightProfiles;                                          // 0x370(0x10)

	void SetLODSettings(struct FNone* InLODSettings); // sub_0x16b20c0
	uint32_t NumSockets(); // sub_0x3dd1cc0
	struct TArray<None> K2_GetAllMorphTargetNames(); // sub_0x3dd1be0
	char IsSectionUsingCloth(uint32_t InSectionIndex, char bCheckCorrespondingSections); // sub_0x3dd1b20
	struct FNone* GetSocketByIndex(uint32_t Index); // sub_0x3dd1a90
	struct FNone* GetNodeMappingContainer(struct FNone* SourceAsset); // sub_0x3dd1a00
	struct FNone GetImportedBounds(); // sub_0x3dd19b0
	struct FNone GetBounds(); // sub_0x3dd1960
	struct FNone* FindSocketInfo(struct FName InSocketName, struct FNone& OutTransform, uint32_t& OutBoneIndex, uint32_t& OutIndex); // sub_0x3dd1790
	struct FNone* FindSocketAndIndex(struct FName InSocketName, uint32_t& OutIndex); // sub_0x3dd16c0
	struct FNone* FindSocket(struct FName InSocketName); // sub_0x3dd1630
};

// Class Engine.StaticMeshActor
// Size: 0x320 (Inherited: 0x310)
struct AStaticMeshActor : AActor 
{
	struct FNone*                                 StaticMeshComponent;                                         // 0x310(0x08)
	char                                          bStaticMeshReplicateMovement : 0;                            // 0x318(0x01)
	char                                          UnknownData318[0x1];                                         // 0x318(0x01)
	enum class None                               NavigationGeometryGatheringMode;                             // 0x319(0x01)
	char                                          UnknownData31A[0x6];                                         // 0x31a(0x06)

	void SetMobility(char InMobility); // sub_0x124b1c0
};

// Class Engine.Texture
// Size: 0xb8 (Inherited: 0x40)
struct UTexture : UStreamableRenderAsset 
{
	char                                          UnknownData40[0x8];                                          // 0x40(0x08)
	struct FNone                                  LightingGuid;                                                // 0x48(0x10)
	uint32_t                                      LODBias;                                                     // 0x58(0x04)
	char                                          CompressionSettings;                                         // 0x5c(0x01)
	char                                          Filter;                                                      // 0x5d(0x01)
	enum class None                               MipLoadOptions;                                              // 0x5e(0x01)
	char                                          LODGroup;                                                    // 0x5f(0x01)
	char                                          SRGB : 0;                                                    // 0x60(0x01)
	char                                          bNoTiling : 0;                                               // 0x60(0x01)
	char                                          VirtualTextureStreaming : 0;                                 // 0x60(0x01)
	char                                          CompressionYCoCg : 0;                                        // 0x60(0x01)
	char                                          bAsyncResourceReleaseHasBeenStarted : 0;                     // 0x60(0x01)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct TArray<None>                           AssetUserData;                                               // 0x68(0x10)
	char                                          UnknownData78[0x40];                                         // 0x78(0x40)
};

// Class Engine.Texture2DDynamic
// Size: 0xd0 (Inherited: 0xb8)
struct UTexture2DDynamic : UTexture 
{
	char                                          UnknownDataB8[0x8];                                          // 0xb8(0x08)
	char                                          Format;                                                      // 0xc0(0x01)
	char                                          UnknownDataC1[0xf];                                          // 0xc1(0x0f)
};

// Class Engine.HUD
// Size: 0x400 (Inherited: 0x310)
struct AHUD : AActor 
{
	struct FNone*                                 PlayerOwner;                                                 // 0x310(0x08)
	char                                          bLostFocusPaused : 0;                                        // 0x318(0x01)
	char                                          bShowHUD : 0;                                                // 0x318(0x01)
	char                                          bShowDebugInfo : 0;                                          // 0x318(0x01)
	char                                          UnknownData318[0x4];                                         // 0x318(0x04)
	uint32_t                                      CurrentTargetIndex;                                          // 0x31c(0x04)
	char                                          bShowHitBoxDebugInfo : 0;                                    // 0x320(0x01)
	char                                          bShowOverlays : 0;                                           // 0x320(0x01)
	char                                          bEnableDebugTextShadow : 0;                                  // 0x320(0x01)
	char                                          UnknownData320[0x8];                                         // 0x320(0x08)
	struct TArray<None>                           PostRenderedActors;                                          // 0x328(0x10)
	char                                          UnknownData338[0x8];                                         // 0x338(0x08)
	struct TArray<None>                           DebugDisplay;                                                // 0x340(0x10)
	struct TArray<None>                           ToggledDebugCategories;                                      // 0x350(0x10)
	struct FNone*                                 Canvas;                                                      // 0x360(0x08)
	struct FNone*                                 DebugCanvas;                                                 // 0x368(0x08)
	struct TArray<None>                           DebugTextList;                                               // 0x370(0x10)
	struct FNone*                                 ShowDebugTargetDesiredClass;                                 // 0x380(0x08)
	struct FNone*                                 ShowDebugTargetActor;                                        // 0x388(0x08)
	char                                          UnknownData390[0x70];                                        // 0x390(0x70)

	void ShowHUD(); // sub_0x1e42900
	void ShowDebugToggleSubCategory(struct FName Category); // sub_0x3ce06f0
	void ShowDebugForReticleTargetToggle(struct FNone* DesiredClass); // sub_0x3ce0670
	void ShowDebug(struct FName DebugType); // sub_0x1e67970
	void RemoveDebugText(struct FNone* SrcActor, char bLeaveDurationText); // sub_0x3ce0450
	void RemoveAllDebugStrings(); // sub_0x3ce0430
	void ReceiveHitBoxRelease(struct FName BoxName); // sub_0x239bfb0
	void ReceiveHitBoxEndCursorOver(struct FName BoxName); // sub_0x239bfb0
	void ReceiveHitBoxClick(struct FName BoxName); // sub_0x239bfb0
	void ReceiveHitBoxBeginCursorOver(struct FName BoxName); // sub_0x239bfb0
	void ReceiveDrawHUD(uint32_t SizeX, uint32_t SizeY); // sub_0x239bfb0
	struct FNone Project(struct FNone Location); // sub_0x3ce0380
	void PreviousDebugTarget(); // sub_0x1f9a560
	void NextDebugTarget(); // sub_0x11cafb0
	void GetTextSize(struct FString Text, float& OutWidth, float& OutHeight, struct FNone* Font, float Scale); // sub_0x3ce0080
	struct FNone* GetOwningPlayerController(); // sub_0x16cf7d0
	struct FNone* GetOwningPawn(); // sub_0x3ce0050
	void GetActorsInSelectionRectangle(struct FNone* ClassFilter, struct FNone& FirstPoint, struct FNone& SecondPoint, struct TArray<None>& OutActors, char bIncludeNonCollidingComponents, char bActorMustBeFullyEnclosed); // sub_0x3cdfe40
	void DrawTextureSimple(struct FNone* Texture, float ScreenX, float ScreenY, float Scale, char bScalePosition); // sub_0x3cdfcb0
	void DrawTexture(struct FNone* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, struct FNone TintColor, char BlendMode, float Scale, char bScalePosition, float Rotation, struct FNone RotPivot); // sub_0x3cdf890
	void DrawText(struct FString Text, struct FNone TextColor, float ScreenX, float ScreenY, struct FNone* Font, float Scale, char bScalePosition); // sub_0x3cdf660
	void DrawRect(struct FNone RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH); // sub_0x3cdf4b0
	void DrawMaterialTriangle(struct FNone* Material, struct FNone V0_Pos, struct FNone V1_Pos, struct FNone V2_Pos, struct FNone V0_UV, struct FNone V1_UV, struct FNone V2_UV, struct FNone V0_Color, struct FNone V1_Color, struct FNone V2_Color); // sub_0x3cdf1f0
	void DrawMaterialSimple(struct FNone* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, char bScalePosition); // sub_0x3cdeff0
	void DrawMaterial(struct FNone* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, char bScalePosition, float Rotation, struct FNone RotPivot); // sub_0x3cdec60
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, struct FNone LineColor, float LineThickness); // sub_0x3cdea80
	void Deproject(float ScreenX, float ScreenY, struct FNone& WorldPosition, struct FNone& WorldDirection); // sub_0x3cde880
	void AddHitBox(struct FNone Position, struct FNone Size, struct FName InName, char bConsumesInput, uint32_t Priority); // sub_0x3cde6f0
	void AddDebugText(struct FString DebugText, struct FNone* SrcActor, float Duration, struct FNone Offset, struct FNone DesiredOffset, struct FNone TextColor, char bSkipOverwriteCheck, char bAbsoluteLocation, char bKeepAttachedToActor, struct FNone* InFont, float FontScale, char bDrawShadow); // sub_0x3cde350
};

// Class Engine.Player
// Size: 0x48 (Inherited: 0x28)
struct UPlayer : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct FNone*                                 PlayerController;                                            // 0x30(0x08)
	uint32_t                                      CurrentNetSpeed;                                             // 0x38(0x04)
	uint32_t                                      ConfiguredInternetSpeed;                                     // 0x3c(0x04)
	uint32_t                                      ConfiguredLanSpeed;                                          // 0x40(0x04)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
};

// Class Engine.MKNetConnectionEx
// Size: 0xb8 (Inherited: 0x48)
struct UMKNetConnectionEx : UPlayer 
{
	char                                          UnknownData48[0x68];                                         // 0x48(0x68)
	struct FNone*                                 SelfNetConnection;                                           // 0xb0(0x08)
};

// Class Engine.NetConnection
// Size: 0x1aa0 (Inherited: 0xb8)
struct UNetConnection : UMKNetConnectionEx 
{
	struct TArray<None>                           Children;                                                    // 0xb8(0x10)
	struct FNone*                                 Driver;                                                      // 0xc8(0x08)
	struct FNone*                                 PackageMapClass;                                             // 0xd0(0x08)
	struct FNone*                                 PackageMap;                                                  // 0xd8(0x08)
	struct TArray<None>                           OpenChannels;                                                // 0xe0(0x10)
	struct TArray<None>                           SentTemporaries;                                             // 0xf0(0x10)
	struct FNone*                                 ViewTarget;                                                  // 0x100(0x08)
	struct FNone*                                 OwningActor;                                                 // 0x108(0x08)
	uint32_t                                      MaxPacket;                                                   // 0x110(0x04)
	char                                          InternalAck : 0;                                             // 0x114(0x01)
	char                                          UnknownData114[0xbc];                                        // 0x114(0xbc)
	struct FNone                                  PlayerId;                                                    // 0x1d0(0x28)
	char                                          UnknownData1F8[0x48];                                        // 0x1f8(0x48)
	double                                        LastReceiveTime;                                             // 0x240(0x08)
	char                                          UnknownData248[0x1338];                                      // 0x248(0x1338)
	struct TArray<None>                           ChannelsToTick;                                              // 0x1580(0x10)
	char                                          UnknownData1590[0x510];                                      // 0x1590(0x510)
};

// Class Engine.NetDriver
// Size: 0x748 (Inherited: 0x28)
struct UNetDriver : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct FString                                NetConnectionClassName;                                      // 0x30(0x10)
	struct FString                                ReplicationDriverClassName;                                  // 0x40(0x10)
	uint32_t                                      MaxDownloadSize;                                             // 0x50(0x04)
	char                                          bClampListenServerTickRate : 0;                              // 0x54(0x01)
	char                                          UnknownData54[0x4];                                          // 0x54(0x04)
	uint32_t                                      NetServerMaxTickRate;                                        // 0x58(0x04)
	uint32_t                                      MaxNetTickRate;                                              // 0x5c(0x04)
	uint32_t                                      MaxInternetClientRate;                                       // 0x60(0x04)
	uint32_t                                      MaxClientRate;                                               // 0x64(0x04)
	float                                         ServerTravelPause;                                           // 0x68(0x04)
	float                                         SpawnPrioritySeconds;                                        // 0x6c(0x04)
	float                                         RelevantTimeout;                                             // 0x70(0x04)
	float                                         KeepAliveTime;                                               // 0x74(0x04)
	float                                         InitialConnectTimeout;                                       // 0x78(0x04)
	float                                         ConnectionTimeout;                                           // 0x7c(0x04)
	float                                         TimeoutMultiplierForUnoptimizedBuilds;                       // 0x80(0x04)
	char                                          bNoTimeouts : 0;                                             // 0x84(0x01)
	char                                          UnknownData84[0x1];                                          // 0x84(0x01)
	char                                          bNeverApplyNetworkEmulationSettings : 0;                     // 0x85(0x01)
	char                                          UnknownData85[0x3];                                          // 0x85(0x03)
	struct FNone*                                 ServerConnection;                                            // 0x88(0x08)
	struct TArray<None>                           ClientConnections;                                           // 0x90(0x10)
	char                                          UnknownDataA0[0x60];                                         // 0xa0(0x60)
	uint32_t                                      RecentlyDisconnectedTrackingTime;                            // 0x100(0x04)
	char                                          UnknownData104[0x3c];                                        // 0x104(0x3c)
	struct FNone*                                 World;                                                       // 0x140(0x08)
	struct FNone*                                 WorldPackage;                                                // 0x148(0x08)
	char                                          UnknownData150[0x20];                                        // 0x150(0x20)
	struct FNone*                                 NetConnectionClass;                                          // 0x170(0x08)
	struct FNone*                                 ReplicationDriverClass;                                      // 0x178(0x08)
	char                                          UnknownData180[0x10];                                        // 0x180(0x10)
	struct FName                                  NetDriverName;                                               // 0x190(0x08)
	struct TArray<None>                           ChannelDefinitions;                                          // 0x198(0x10)
	struct TMap<None, None>                       ChannelDefinitionMap;                                        // 0x1a8(0x50)
	struct TArray<None>                           ActorChannelPool;                                            // 0x1f8(0x10)
	char                                          UnknownData208[0x8];                                         // 0x208(0x08)
	float                                         Time;                                                        // 0x210(0x04)
	char                                          UnknownData214[0x4d4];                                       // 0x214(0x4d4)
	struct FNone*                                 ReplicationDriver;                                           // 0x6e8(0x08)
	char                                          UnknownData6F0[0x58];                                        // 0x6f0(0x58)
};

// Class Engine.BlueprintAsyncActionBase
// Size: 0x30 (Inherited: 0x28)
struct UBlueprintAsyncActionBase : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)

	void Activate(); // sub_0x2ecb6f0
};

// Class Engine.OnlineBlueprintCallProxyBase
// Size: 0x30 (Inherited: 0x30)
struct UOnlineBlueprintCallProxyBase : UBlueprintAsyncActionBase 
{
};

// Class Engine.OnlineEngineInterface
// Size: 0x28 (Inherited: 0x28)
struct UOnlineEngineInterface : UObject 
{
};

// Class Engine.DeveloperSettings
// Size: 0x38 (Inherited: 0x28)
struct UDeveloperSettings : UObject 
{
	char                                          UnknownData28[0x10];                                         // 0x28(0x10)
};

// Class Engine.OnlineSession
// Size: 0x28 (Inherited: 0x28)
struct UOnlineSession : UObject 
{
};

// Class Engine.Engine
// Size: 0xde8 (Inherited: 0x28)
struct UEngine : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct FNone*                                 TinyFont;                                                    // 0x30(0x08)
	struct FNone                                  TinyFontName;                                                // 0x38(0x18)
	struct FNone*                                 SmallFont;                                                   // 0x50(0x08)
	struct FNone                                  SmallFontName;                                               // 0x58(0x18)
	struct FNone*                                 MediumFont;                                                  // 0x70(0x08)
	struct FNone                                  MediumFontName;                                              // 0x78(0x18)
	struct FNone*                                 LargeFont;                                                   // 0x90(0x08)
	struct FNone                                  LargeFontName;                                               // 0x98(0x18)
	struct FNone*                                 SubtitleFont;                                                // 0xb0(0x08)
	struct FNone                                  SubtitleFontName;                                            // 0xb8(0x18)
	struct TArray<None>                           AdditionalFonts;                                             // 0xd0(0x10)
	char                                          UnknownDataE0[0x8];                                          // 0xe0(0x08)
	struct TArray<None>                           AdditionalFontNames;                                         // 0xe8(0x10)
	struct FNone*                                 ConsoleClass;                                                // 0xf8(0x08)
	struct FNone                                  ConsoleClassName;                                            // 0x100(0x18)
	struct FNone*                                 GameViewportClientClass;                                     // 0x118(0x08)
	struct FNone                                  GameViewportClientClassName;                                 // 0x120(0x18)
	struct FNone*                                 LocalPlayerClass;                                            // 0x138(0x08)
	struct FNone                                  LocalPlayerClassName;                                        // 0x140(0x18)
	struct FNone*                                 WorldSettingsClass;                                          // 0x158(0x08)
	struct FNone                                  WorldSettingsClassName;                                      // 0x160(0x18)
	struct FNone                                  NavigationSystemClassName;                                   // 0x178(0x18)
	struct FNone*                                 NavigationSystemClass;                                       // 0x190(0x08)
	struct FNone                                  NavigationSystemConfigClassName;                             // 0x198(0x18)
	struct FNone*                                 NavigationSystemConfigClass;                                 // 0x1b0(0x08)
	struct FNone                                  AvoidanceManagerClassName;                                   // 0x1b8(0x18)
	struct FNone*                                 AvoidanceManagerClass;                                       // 0x1d0(0x08)
	struct FNone*                                 PhysicsCollisionHandlerClass;                                // 0x1d8(0x08)
	struct FNone                                  PhysicsCollisionHandlerClassName;                            // 0x1e0(0x18)
	struct FNone                                  GameUserSettingsClassName;                                   // 0x1f8(0x18)
	struct FNone*                                 GameUserSettingsClass;                                       // 0x210(0x08)
	struct FNone                                  AIControllerClassName;                                       // 0x218(0x18)
	struct FNone*                                 GameUserSettings;                                            // 0x230(0x08)
	struct FNone*                                 LevelScriptActorClass;                                       // 0x238(0x08)
	struct FNone                                  LevelScriptActorClassName;                                   // 0x240(0x18)
	struct FNone                                  DefaultBlueprintBaseClassName;                               // 0x258(0x18)
	struct FNone                                  GameSingletonClassName;                                      // 0x270(0x18)
	struct FNone*                                 GameSingleton;                                               // 0x288(0x08)
	struct FNone                                  AssetManagerClassName;                                       // 0x290(0x18)
	struct FNone*                                 AssetManager;                                                // 0x2a8(0x08)
	struct FNone*                                 DefaultTexture;                                              // 0x2b0(0x08)
	struct FNone                                  DefaultTextureName;                                          // 0x2b8(0x18)
	struct FNone*                                 DefaultDiffuseTexture;                                       // 0x2d0(0x08)
	struct FNone                                  DefaultDiffuseTextureName;                                   // 0x2d8(0x18)
	struct FNone*                                 DefaultBSPVertexTexture;                                     // 0x2f0(0x08)
	struct FNone                                  DefaultBSPVertexTextureName;                                 // 0x2f8(0x18)
	struct FNone*                                 HighFrequencyNoiseTexture;                                   // 0x310(0x08)
	struct FNone                                  HighFrequencyNoiseTextureName;                               // 0x318(0x18)
	struct FNone*                                 DefaultBokehTexture;                                         // 0x330(0x08)
	struct FNone                                  DefaultBokehTextureName;                                     // 0x338(0x18)
	struct FNone*                                 DefaultBloomKernelTexture;                                   // 0x350(0x08)
	struct FNone                                  DefaultBloomKernelTextureName;                               // 0x358(0x18)
	struct FNone*                                 WireframeMaterial;                                           // 0x370(0x08)
	struct FString                                WireframeMaterialName;                                       // 0x378(0x10)
	struct FNone*                                 DebugMeshMaterial;                                           // 0x388(0x08)
	struct FNone                                  DebugMeshMaterialName;                                       // 0x390(0x18)
	struct FNone*                                 EmissiveMeshMaterial;                                        // 0x3a8(0x08)
	struct FNone                                  EmissiveMeshMaterialName;                                    // 0x3b0(0x18)
	struct FNone*                                 LevelColorationLitMaterial;                                  // 0x3c8(0x08)
	struct FString                                LevelColorationLitMaterialName;                              // 0x3d0(0x10)
	struct FNone*                                 LevelColorationUnlitMaterial;                                // 0x3e0(0x08)
	struct FString                                LevelColorationUnlitMaterialName;                            // 0x3e8(0x10)
	struct FNone*                                 LightingTexelDensityMaterial;                                // 0x3f8(0x08)
	struct FString                                LightingTexelDensityName;                                    // 0x400(0x10)
	struct FNone*                                 ShadedLevelColorationLitMaterial;                            // 0x410(0x08)
	struct FString                                ShadedLevelColorationLitMaterialName;                        // 0x418(0x10)
	struct FNone*                                 ShadedLevelColorationUnlitMaterial;                          // 0x428(0x08)
	struct FString                                ShadedLevelColorationUnlitMaterialName;                      // 0x430(0x10)
	struct FNone*                                 RemoveSurfaceMaterial;                                       // 0x440(0x08)
	struct FNone                                  RemoveSurfaceMaterialName;                                   // 0x448(0x18)
	struct FNone*                                 VertexColorMaterial;                                         // 0x460(0x08)
	struct FString                                VertexColorMaterialName;                                     // 0x468(0x10)
	struct FNone*                                 VertexColorViewModeMaterial_ColorOnly;                       // 0x478(0x08)
	struct FString                                VertexColorViewModeMaterialName_ColorOnly;                   // 0x480(0x10)
	struct FNone*                                 VertexColorViewModeMaterial_AlphaAsColor;                    // 0x490(0x08)
	struct FString                                VertexColorViewModeMaterialName_AlphaAsColor;                // 0x498(0x10)
	struct FNone*                                 VertexColorViewModeMaterial_RedOnly;                         // 0x4a8(0x08)
	struct FString                                VertexColorViewModeMaterialName_RedOnly;                     // 0x4b0(0x10)
	struct FNone*                                 VertexColorViewModeMaterial_GreenOnly;                       // 0x4c0(0x08)
	struct FString                                VertexColorViewModeMaterialName_GreenOnly;                   // 0x4c8(0x10)
	struct FNone*                                 VertexColorViewModeMaterial_BlueOnly;                        // 0x4d8(0x08)
	struct FString                                VertexColorViewModeMaterialName_BlueOnly;                    // 0x4e0(0x10)
	struct FNone                                  DebugEditorMaterialName;                                     // 0x4f0(0x18)
	struct FNone*                                 ConstraintLimitMaterial;                                     // 0x508(0x08)
	struct FNone*                                 ConstraintLimitMaterialX;                                    // 0x510(0x08)
	struct FNone*                                 ConstraintLimitMaterialXAxis;                                // 0x518(0x08)
	struct FNone*                                 ConstraintLimitMaterialY;                                    // 0x520(0x08)
	struct FNone*                                 ConstraintLimitMaterialYAxis;                                // 0x528(0x08)
	struct FNone*                                 ConstraintLimitMaterialZ;                                    // 0x530(0x08)
	struct FNone*                                 ConstraintLimitMaterialZAxis;                                // 0x538(0x08)
	struct FNone*                                 ConstraintLimitMaterialPrismatic;                            // 0x540(0x08)
	struct FNone*                                 InvalidLightmapSettingsMaterial;                             // 0x548(0x08)
	struct FNone                                  InvalidLightmapSettingsMaterialName;                         // 0x550(0x18)
	struct FNone*                                 PreviewShadowsIndicatorMaterial;                             // 0x568(0x08)
	struct FNone                                  PreviewShadowsIndicatorMaterialName;                         // 0x570(0x18)
	struct FNone*                                 ArrowMaterial;                                               // 0x588(0x08)
	struct FNone*                                 ArrowMaterialYellow;                                         // 0x590(0x08)
	struct FNone                                  ArrowMaterialName;                                           // 0x598(0x18)
	struct FNone                                  LightingOnlyBrightness;                                      // 0x5b0(0x10)
	struct TArray<None>                           ShaderComplexityColors;                                      // 0x5c0(0x10)
	struct TArray<None>                           QuadComplexityColors;                                        // 0x5d0(0x10)
	struct TArray<None>                           LightComplexityColors;                                       // 0x5e0(0x10)
	struct TArray<None>                           StationaryLightOverlapColors;                                // 0x5f0(0x10)
	struct TArray<None>                           LODColorationColors;                                         // 0x600(0x10)
	struct TArray<None>                           HLODColorationColors;                                        // 0x610(0x10)
	struct TArray<None>                           StreamingAccuracyColors;                                     // 0x620(0x10)
	float                                         MaxPixelShaderAdditiveComplexityCount;                       // 0x630(0x04)
	float                                         MaxES3PixelShaderAdditiveComplexityCount;                    // 0x634(0x04)
	float                                         MinLightMapDensity;                                          // 0x638(0x04)
	float                                         IdealLightMapDensity;                                        // 0x63c(0x04)
	float                                         MaxLightMapDensity;                                          // 0x640(0x04)
	char                                          bRenderLightMapDensityGrayscale : 0;                         // 0x644(0x01)
	char                                          UnknownData644[0x4];                                         // 0x644(0x04)
	float                                         RenderLightMapDensityGrayscaleScale;                         // 0x648(0x04)
	float                                         RenderLightMapDensityColorScale;                             // 0x64c(0x04)
	struct FNone                                  LightMapDensityVertexMappedColor;                            // 0x650(0x10)
	struct FNone                                  LightMapDensitySelectedColor;                                // 0x660(0x10)
	struct TArray<None>                           StatColorMappings;                                           // 0x670(0x10)
	struct FNone*                                 DefaultPhysMaterial;                                         // 0x680(0x08)
	struct FNone                                  DefaultPhysMaterialName;                                     // 0x688(0x18)
	struct TArray<None>                           ActiveGameNameRedirects;                                     // 0x6a0(0x10)
	struct TArray<None>                           ActiveClassRedirects;                                        // 0x6b0(0x10)
	struct TArray<None>                           ActivePluginRedirects;                                       // 0x6c0(0x10)
	struct TArray<None>                           ActiveStructRedirects;                                       // 0x6d0(0x10)
	struct FNone*                                 PreIntegratedSkinBRDFTexture;                                // 0x6e0(0x08)
	struct FNone                                  PreIntegratedSkinBRDFTextureName;                            // 0x6e8(0x18)
	struct FNone*                                 BlueNoiseTexture;                                            // 0x700(0x08)
	struct FNone                                  BlueNoiseTextureName;                                        // 0x708(0x18)
	struct FNone*                                 MiniFontTexture;                                             // 0x720(0x08)
	struct FNone                                  MiniFontTextureName;                                         // 0x728(0x18)
	struct FNone*                                 WeightMapPlaceholderTexture;                                 // 0x740(0x08)
	struct FNone                                  WeightMapPlaceholderTextureName;                             // 0x748(0x18)
	struct FNone*                                 LightMapDensityTexture;                                      // 0x760(0x08)
	struct FNone                                  LightMapDensityTextureName;                                  // 0x768(0x18)
	char                                          UnknownData780[0x8];                                         // 0x780(0x08)
	struct FNone*                                 GameViewport;                                                // 0x788(0x08)
	struct TArray<None>                           DeferredCommands;                                            // 0x790(0x10)
	uint32_t                                      TickCycles;                                                  // 0x7a0(0x04)
	uint32_t                                      GameCycles;                                                  // 0x7a4(0x04)
	uint32_t                                      ClientCycles;                                                // 0x7a8(0x04)
	float                                         NearClipPlane;                                               // 0x7ac(0x04)
	float                                         EditorNearClipPlane;                                         // 0x7b0(0x04)
	char                                          bUseCustomAudioModule : 0;                                   // 0x7b4(0x01)
	char                                          UnknownData7B4[0x4];                                         // 0x7b4(0x04)
	char                                          bHardwareSurveyEnabled : 0;                                  // 0x7b8(0x01)
	char                                          bSubtitlesEnabled : 0;                                       // 0x7b8(0x01)
	char                                          bSubtitlesForcedOff : 0;                                     // 0x7b8(0x01)
	char                                          UnknownData7B8[0x4];                                         // 0x7b8(0x04)
	uint32_t                                      MaximumLoopIterationCount;                                   // 0x7bc(0x04)
	char                                          bCanBlueprintsTickByDefault : 0;                             // 0x7c0(0x01)
	char                                          bOptimizeAnimBlueprintMemberVariableAccess : 0;              // 0x7c0(0x01)
	char                                          bAllowMultiThreadedAnimationUpdate : 0;                      // 0x7c0(0x01)
	char                                          bEnableEditorPSysRealtimeLOD : 0;                            // 0x7c0(0x01)
	char                                          bSmoothFrameRate : 0;                                        // 0x7c0(0x01)
	char                                          bUseFixedFrameRate : 0;                                      // 0x7c0(0x01)
	char                                          UnknownData7C0[0x4];                                         // 0x7c0(0x04)
	float                                         FixedFrameRate;                                              // 0x7c4(0x04)
	struct FNone                                  SmoothedFrameRateRange;                                      // 0x7c8(0x10)
	struct FNone*                                 CustomTimeStep;                                              // 0x7d8(0x08)
	char                                          UnknownData7E0[0x20];                                        // 0x7e0(0x20)
	struct FNone                                  CustomTimeStepClassName;                                     // 0x800(0x18)
	struct FNone*                                 TimecodeProvider;                                            // 0x818(0x08)
	char                                          UnknownData820[0x20];                                        // 0x820(0x20)
	struct FNone                                  TimecodeProviderClassName;                                   // 0x840(0x18)
	char                                          bGenerateDefaultTimecode : 0;                                // 0x858(0x01)
	char                                          UnknownData858[0x4];                                         // 0x858(0x04)
	struct FNone                                  GenerateDefaultTimecodeFrameRate;                            // 0x85c(0x08)
	float                                         GenerateDefaultTimecodeFrameDelay;                           // 0x864(0x04)
	char                                          bCheckForMultiplePawnsSpawnedInAFrame : 0;                   // 0x868(0x01)
	char                                          UnknownData868[0x4];                                         // 0x868(0x04)
	uint32_t                                      NumPawnsAllowedToBeSpawnedInAFrame;                          // 0x86c(0x04)
	char                                          bShouldGenerateLowQualityLightmaps : 0;                      // 0x870(0x01)
	char                                          UnknownData870[0x4];                                         // 0x870(0x04)
	struct FNone                                  C_WorldBox;                                                  // 0x874(0x04)
	struct FNone                                  C_BrushWire;                                                 // 0x878(0x04)
	struct FNone                                  C_AddWire;                                                   // 0x87c(0x04)
	struct FNone                                  C_SubtractWire;                                              // 0x880(0x04)
	struct FNone                                  C_SemiSolidWire;                                             // 0x884(0x04)
	struct FNone                                  C_NonSolidWire;                                              // 0x888(0x04)
	struct FNone                                  C_WireBackground;                                            // 0x88c(0x04)
	struct FNone                                  C_ScaleBoxHi;                                                // 0x890(0x04)
	struct FNone                                  C_VolumeCollision;                                           // 0x894(0x04)
	struct FNone                                  C_BSPCollision;                                              // 0x898(0x04)
	struct FNone                                  C_OrthoBackground;                                           // 0x89c(0x04)
	struct FNone                                  C_Volume;                                                    // 0x8a0(0x04)
	struct FNone                                  C_BrushShape;                                                // 0x8a4(0x04)
	float                                         StreamingDistanceFactor;                                     // 0x8a8(0x04)
	char                                          UnknownData8AC[0x4];                                         // 0x8ac(0x04)
	struct FNone                                  GameScreenshotSaveDirectory;                                 // 0x8b0(0x10)
	enum class None                               TransitionType;                                              // 0x8c0(0x01)
	char                                          UnknownData8C1[0x7];                                         // 0x8c1(0x07)
	struct FString                                TransitionDescription;                                       // 0x8c8(0x10)
	struct FString                                TransitionGameMode;                                          // 0x8d8(0x10)
	float                                         MeshLODRange;                                                // 0x8e8(0x04)
	char                                          bAllowMatureLanguage : 0;                                    // 0x8ec(0x01)
	char                                          UnknownData8EC[0x4];                                         // 0x8ec(0x04)
	float                                         CameraRotationThreshold;                                     // 0x8f0(0x04)
	float                                         CameraTranslationThreshold;                                  // 0x8f4(0x04)
	float                                         PrimitiveProbablyVisibleTime;                                // 0x8f8(0x04)
	float                                         MaxOcclusionPixelsFraction;                                  // 0x8fc(0x04)
	char                                          bPauseOnLossOfFocus : 0;                                     // 0x900(0x01)
	char                                          UnknownData900[0x4];                                         // 0x900(0x04)
	uint32_t                                      MaxParticleResize;                                           // 0x904(0x04)
	uint32_t                                      MaxParticleResizeWarn;                                       // 0x908(0x04)
	char                                          UnknownData90C[0x4];                                         // 0x90c(0x04)
	struct TArray<None>                           PendingDroppedNotes;                                         // 0x910(0x10)
	float                                         NetClientTicksPerSecond;                                     // 0x920(0x04)
	float                                         DisplayGamma;                                                // 0x924(0x04)
	float                                         MinDesiredFrameRate;                                         // 0x928(0x04)
	struct FNone                                  DefaultSelectedMaterialColor;                                // 0x92c(0x10)
	struct FNone                                  SelectedMaterialColor;                                       // 0x93c(0x10)
	struct FNone                                  SelectionOutlineColor;                                       // 0x94c(0x10)
	struct FNone                                  SubduedSelectionOutlineColor;                                // 0x95c(0x10)
	struct FNone                                  SelectedMaterialColorOverride;                               // 0x96c(0x10)
	char                                          bIsOverridingSelectedColor : 0;                              // 0x97c(0x01)
	char                                          UnknownData97C[0x4];                                         // 0x97c(0x04)
	char                                          bEnableOnScreenDebugMessages : 0;                            // 0x980(0x01)
	char                                          bEnableOnScreenDebugMessagesDisplay : 0;                     // 0x980(0x01)
	char                                          bSuppressMapWarnings : 0;                                    // 0x980(0x01)
	char                                          bDisableAILogging : 0;                                       // 0x980(0x01)
	char                                          UnknownData980[0x4];                                         // 0x980(0x04)
	uint32_t                                      bEnableVisualLogRecordingOnStart;                            // 0x984(0x04)
	char                                          UnknownData988[0x4];                                         // 0x988(0x04)
	uint32_t                                      ScreenSaverInhibitorSemaphore;                               // 0x98c(0x04)
	char                                          bLockReadOnlyLevels : 0;                                     // 0x990(0x01)
	char                                          UnknownData990[0x8];                                         // 0x990(0x08)
	struct FString                                ParticleEventManagerClassPath;                               // 0x998(0x10)
	float                                         SelectionHighlightIntensity;                                 // 0x9a8(0x04)
	float                                         BSPSelectionHighlightIntensity;                              // 0x9ac(0x04)
	float                                         SelectionHighlightIntensityBillboards;                       // 0x9b0(0x04)
	char                                          UnknownData9B4[0x24c];                                       // 0x9b4(0x24c)
	struct TArray<None>                           NetDriverDefinitions;                                        // 0xc00(0x10)
	struct TArray<None>                           ServerActors;                                                // 0xc10(0x10)
	struct TArray<None>                           RuntimeServerActors;                                         // 0xc20(0x10)
	float                                         NetErrorLogInterval;                                         // 0xc30(0x04)
	char                                          bStartedLoadMapMovie : 0;                                    // 0xc34(0x01)
	char                                          UnknownDataC34[0x1c];                                        // 0xc34(0x1c)
	uint32_t                                      NextWorldContextHandle;                                      // 0xc50(0x04)
	char                                          UnknownDataC54[0x194];                                       // 0xc54(0x194)
};

// Class Engine.LocalPlayer
// Size: 0x258 (Inherited: 0x48)
struct ULocalPlayer : UPlayer 
{
	char                                          UnknownData48[0x28];                                         // 0x48(0x28)
	struct FNone*                                 ViewportClient;                                              // 0x70(0x08)
	char                                          UnknownData78[0x1c];                                         // 0x78(0x1c)
	char                                          AspectRatioAxisConstraint;                                   // 0x94(0x01)
	char                                          UnknownData95[0x3];                                          // 0x95(0x03)
	struct FNone*                                 PendingLevelPlayerControllerClass;                           // 0x98(0x08)
	char                                          bSentSplitJoin : 0;                                          // 0xa0(0x01)
	char                                          UnknownDataA0[0x18];                                         // 0xa0(0x18)
	uint32_t                                      ControllerId;                                                // 0xb8(0x04)
	char                                          UnknownDataBC[0x19c];                                        // 0xbc(0x19c)
};

// Class Engine.Subsystem
// Size: 0x30 (Inherited: 0x28)
struct USubsystem : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
};

// Class Engine.LocalPlayerSubsystem
// Size: 0x30 (Inherited: 0x30)
struct ULocalPlayerSubsystem : USubsystem 
{
};

// Class Engine.SkeletalMeshComponent
// Size: 0xb90 (Inherited: 0x700)
struct USkeletalMeshComponent : USkinnedMeshComponent 
{
	struct FNone*                                 AnimBlueprintGeneratedClass;                                 // 0x700(0x08)
	struct FNone*                                 AnimClass;                                                   // 0x708(0x08)
	struct FNone*                                 AnimScriptInstance;                                          // 0x710(0x08)
	struct FT_SM-Concrete_Sewerage01_HLOD_SgBakedMaterial_LOD1_0_Normal.T_SM-Concrete_Sewerage01_HLOD_SgBakedMaterial_4784237* PostprocessAnimInstance;                                     // 0x718(0x08)
	struct FNone                                  AnimationData;                                               // 0x720(0x18)
	char                                          UnknownData738[0x10];                                        // 0x738(0x10)
	struct FNone                                  RootBoneTranslation;                                         // 0x748(0x0c)
	struct FNone                                  LineCheckBoundsScale;                                        // 0x754(0x0c)
	char                                          UnknownData760[0x20];                                        // 0x760(0x20)
	struct TArray<None>                           LinkedInstances;                                             // 0x780(0x10)
	struct TArray<None>                           CachedBoneSpaceTransforms;                                   // 0x790(0x10)
	struct TArray<None>                           CachedComponentSpaceTransforms;                              // 0x7a0(0x10)
	char                                          UnknownData7B0[0x20];                                        // 0x7b0(0x20)
	float                                         GlobalAnimRateScale;                                         // 0x7d0(0x04)
	char                                          KinematicBonesUpdateType;                                    // 0x7d4(0x01)
	char                                          PhysicsTransformUpdateMode;                                  // 0x7d5(0x01)
	char                                          UnknownData7D6[0x7];                                         // 0x7d6(0x07)
	char                                          AnimationMode;                                               // 0x7dd(0x01)
	char                                          UnknownData7DE[0x1];                                         // 0x7de(0x01)
	char                                          bDisablePostProcessBlueprint : 0;                            // 0x7df(0x01)
	char                                          bUpdateOverlapsOnAnimationFinalize : 0;                      // 0x7df(0x01)
	char                                          bHasValidBodies : 0;                                         // 0x7df(0x01)
	char                                          bBlendPhysics : 0;                                           // 0x7df(0x01)
	char                                          bEnablePhysicsOnDedicatedServer : 0;                         // 0x7df(0x01)
	char                                          UnknownData7DF[0x1];                                         // 0x7df(0x01)
	char                                          bUpdateJointsFromAnimation : 0;                              // 0x7e0(0x01)
	char                                          bDisableClothSimulation : 0;                                 // 0x7e0(0x01)
	char                                          bDisableRigidBodyAnimNode : 0;                               // 0x7e0(0x01)
	char                                          bAllowAnimCurveEvaluation : 0;                               // 0x7e0(0x01)
	char                                          bDisableAnimCurves : 0;                                      // 0x7e0(0x01)
	char                                          UnknownData7E0[0x1];                                         // 0x7e0(0x01)
	char                                          bCollideWithEnvironment : 0;                                 // 0x7e1(0x01)
	char                                          bCollideWithAttachedChildren : 0;                            // 0x7e1(0x01)
	char                                          bLocalSpaceSimulation : 0;                                   // 0x7e1(0x01)
	char                                          bResetAfterTeleport : 0;                                     // 0x7e1(0x01)
	char                                          bDeferKinematicBoneUpdate : 0;                               // 0x7e1(0x01)
	char                                          bNoSkeletonUpdate : 0;                                       // 0x7e1(0x01)
	char                                          bPauseAnims : 0;                                             // 0x7e1(0x01)
	char                                          UnknownData7E1[0x1];                                         // 0x7e1(0x01)
	char                                          bUseRefPoseOnInitAnim : 0;                                   // 0x7e2(0x01)
	char                                          bEnablePerPolyCollision : 0;                                 // 0x7e2(0x01)
	char                                          bForceRefpose : 0;                                           // 0x7e2(0x01)
	char                                          bOnlyAllowAutonomousTickPose : 0;                            // 0x7e2(0x01)
	char                                          bIsAutonomousTickPose : 0;                                   // 0x7e2(0x01)
	char                                          bOldForceRefPose : 0;                                        // 0x7e2(0x01)
	char                                          bShowPrePhysBones : 0;                                       // 0x7e2(0x01)
	char                                          bRequiredBonesUpToDate : 0;                                  // 0x7e2(0x01)
	char                                          UnknownData7E2[0x1];                                         // 0x7e2(0x01)
	char                                          bAnimTreeInitialised : 0;                                    // 0x7e3(0x01)
	char                                          bIncludeComponentLocationIntoBounds : 0;                     // 0x7e3(0x01)
	char                                          bEnableLineCheckWithBounds : 0;                              // 0x7e3(0x01)
	char                                          bUseBendingElements : 0;                                     // 0x7e3(0x01)
	char                                          bUseTetrahedralConstraints : 0;                              // 0x7e3(0x01)
	char                                          bUseThinShellVolumeConstraints : 0;                          // 0x7e3(0x01)
	char                                          bUseSelfCollisions : 0;                                      // 0x7e3(0x01)
	char                                          bUseContinuousCollisionDetection : 0;                        // 0x7e3(0x01)
	char                                          UnknownData7E3[0x1];                                         // 0x7e3(0x01)
	char                                          bPropagateCurvesToSlaves : 0;                                // 0x7e4(0x01)
	char                                          bSkipKinematicUpdateWhenInterpolating : 0;                   // 0x7e4(0x01)
	char                                          bSkipBoundsUpdateWhenInterpolating : 0;                      // 0x7e4(0x01)
	char                                          bNeedsQueuedAnimEventsDispatched : 0;                        // 0x7e4(0x01)
	char                                          UnknownData7E4[0x2];                                         // 0x7e4(0x02)
	uint16_t                                      CachedAnimCurveUidVersion;                                   // 0x7e6(0x02)
	enum class None                               MassMode;                                                    // 0x7e8(0x01)
	char                                          UnknownData7E9[0x3];                                         // 0x7e9(0x03)
	float                                         UniformMass;                                                 // 0x7ec(0x04)
	float                                         TotalMass;                                                   // 0x7f0(0x04)
	float                                         Density;                                                     // 0x7f4(0x04)
	float                                         MinPerParticleMass;                                          // 0x7f8(0x04)
	float                                         ClothBlendWeight;                                            // 0x7fc(0x04)
	float                                         EdgeStiffness;                                               // 0x800(0x04)
	float                                         BendingStiffness;                                            // 0x804(0x04)
	float                                         AreaStiffness;                                               // 0x808(0x04)
	float                                         VolumeStiffness;                                             // 0x80c(0x04)
	float                                         StrainLimitingStiffness;                                     // 0x810(0x04)
	float                                         ShapeTargetStiffness;                                        // 0x814(0x04)
	struct TArray<None>                           DisallowedAnimCurves;                                        // 0x818(0x10)
	struct FNone*                                 BodySetup;                                                   // 0x828(0x08)
	char                                          UnknownData830[0x8];                                         // 0x830(0x08)
	struct FMulticastInlineDelegate               OnConstraintBroken;                                          // 0x838(0x10)
	struct FNone*                                 ClothingSimulationFactory;                                   // 0x848(0x08)
	char                                          UnknownData850[0xc8];                                        // 0x850(0xc8)
	float                                         TeleportDistanceThreshold;                                   // 0x918(0x04)
	float                                         TeleportRotationThreshold;                                   // 0x91c(0x04)
	char                                          UnknownData920[0x8];                                         // 0x920(0x08)
	uint32_t                                      LastPoseTickFrame;                                           // 0x928(0x04)
	char                                          UnknownData92C[0x54];                                        // 0x92c(0x54)
	struct FNone*                                 ClothingInteractor;                                          // 0x980(0x08)
	char                                          UnknownData988[0xc8];                                        // 0x988(0xc8)
	struct FMulticastInlineDelegate               OnAnimInitialized;                                           // 0xa50(0x10)
	char                                          UnknownDataA60[0x130];                                       // 0xa60(0x130)

	void UnlinkAnimClassLayers(struct FNone* InClass); // sub_0x3dd7780
	void UnbindClothFromMasterPoseComponent(char bRestoreSimulationSpace); // sub_0x3dd76f0
	void ToggleDisablePostProcessBlueprint(); // sub_0x3dd76d0
	void TermBodiesBelow(struct FName ParentBoneName); // sub_0x3dd7650
	void SuspendClothingSimulation(); // sub_0x3dd7630
	void Stop(); // sub_0x3dd7610
	void SnapshotPose(struct FNone& Snapshot); // sub_0x3dd7540
	void SetUpdateAnimationInEditor(char NewUpdateState); // sub_0x124ae30
	void SetTeleportRotationThreshold(float threshold); // sub_0x3dd74c0
	void SetTeleportDistanceThreshold(float threshold); // sub_0x3dd7440
	void SetPosition(float InPos, char bFireNotifies); // sub_0x3dd7370
	void SetPlayRate(float Rate); // sub_0x3dd72f0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight); // sub_0x3dd7270
	void SetNotifyRigidBodyCollisionBelow(char bNewNotifyRigidBodyCollision, struct FName BoneName, char bIncludeSelf); // sub_0x3dd7160
	void SetMorphTarget(struct FName MorphTargetName, float Value, char bRemoveZeroWeight); // sub_0x3dd7050
	void SetEnablePhysicsBlending(char bNewBlendPhysics); // sub_0x3dd6fc0
	void SetEnableGravityOnAllBodiesBelow(char bEnableGravity, struct FName BoneName, char bIncludeSelf); // sub_0x3dd6eb0
	void SetEnableBodyGravity(char bEnableGravity, struct FName BoneName); // sub_0x3dd6df0
	void SetDisablePostProcessBlueprint(char bInDisablePostProcess); // sub_0x3dd6d60
	void SetDisableAnimCurves(char bInDisableAnimCurves); // sub_0x3dd6cd0
	void SetConstraintProfileForAll(struct FName ProfileName, char bDefaultIfNotFound); // sub_0x3dd6c00
	void SetConstraintProfile(struct FName JointName, struct FName ProfileName, char bDefaultIfNotFound); // sub_0x3dd6af0
	void SetClothMaxDistanceScale(float Scale); // sub_0x3dd6a70
	void SetBodyNotifyRigidBodyCollision(char bNewNotifyRigidBodyCollision, struct FName BoneName); // sub_0x3dd69a0
	void SetAnimClass(struct FNone* NewClass); // sub_0x3dd6810
	void SetAnimationMode(char InAnimationMode); // sub_0x3dd6920
	void SetAnimation(struct FNone* NewAnimToPlay); // sub_0x3dd68a0
	void SetAngularLimits(struct FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle); // sub_0x3dd66c0
	void SetAllowRigidBodyAnimNode(char bInAllow, char bReinitAnim); // sub_0x3dd64f0
	void SetAllowedAnimCurvesEvaluation(struct TArray<None>& List, char bAllow); // sub_0x3dd65c0
	void SetAllowAnimCurveEvaluation(char bInAllow); // sub_0x3dd6460
	void SetAllMotorsAngularVelocityDrive(char bEnableSwingDrive, char bEnableTwistDrive, char bSkipCustomPhysicsType); // sub_0x3dd6340
	void SetAllMotorsAngularPositionDrive(char bEnableSwingDrive, char bEnableTwistDrive, char bSkipCustomPhysicsType); // sub_0x3dd6220
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, char bSkipCustomPhysicsType); // sub_0x3dd60c0
	void SetAllBodiesSimulatePhysics(char bNewSimulate); // sub_0x3dd6030
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, char bSkipCustomPhysicsType); // sub_0x3dd5f60
	void SetAllBodiesBelowSimulatePhysics(struct FName& InBoneName, char bNewSimulate, char bIncludeSelf); // sub_0x3dd5e40
	void SetAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float PhysicsBlendWeight, char bSkipCustomPhysicsType, char bIncludeSelf); // sub_0x3dd5cd0
	void ResumeClothingSimulation(); // sub_0x3dd5cb0
	void ResetClothTeleportMode(); // sub_0x3dd5c90
	void ResetAnimInstanceDynamics(enum class None InTeleportType); // sub_0x3dd5c10
	void ResetAllowedAnimCurveEvaluation(); // sub_0x3dd5bf0
	void ResetAllBodiesSimulatePhysics(); // sub_0x3dd5bd0
	void PlayAnimation(struct FNone* NewAnimToPlay, char bLooping); // sub_0x3dd5b00
	void Play(char bLooping); // sub_0x3dd5a70
	void OverrideAnimationData(struct FNone* InAnimToPlay, char bIsLooping, char bIsPlaying, float Position, float PlayRate); // sub_0x3dd58d0
	void LinkAnimGraphByTag(struct FName InTag, struct FNone* InClass); // sub_0x3dd5810
	void LinkAnimClassLayers(struct FNone* InClass); // sub_0x3dd5790
	char K2_GetClosestPointOnPhysicsAsset(struct FNone& WorldPosition, struct FNone& ClosestWorldPosition, struct FNone& Normal, struct FName& BoneName, float& Distance); // sub_0x3dd5590
	char IsPlaying(); // sub_0x3dd5560
	char IsClothingSimulationSuspended(); // sub_0x3dd5530
	char IsBodyGravityEnabled(struct FName BoneName); // sub_0x3dd54a0
	char HasValidAnimationInstance(); // sub_0x3dd5470
	float GetTeleportRotationThreshold(); // sub_0x3dd5440
	float GetTeleportDistanceThreshold(); // sub_0x3dd5440
	struct FNone GetSkeletalCenterOfMass(); // sub_0x3dd5400
	struct FNone* GetPostProcessInstance(); // sub_0x1e41830
	float GetPosition(); // sub_0x3dd53d0
	float GetPlayRate(); // sub_0x3dd53a0
	float GetMorphTarget(struct FName MorphTargetName); // sub_0x3dd5300
	struct FNone* GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // sub_0x3dd5270
	struct FNone* GetLinkedAnimLayerInstanceByClass(struct FNone* InClass); // sub_0x3dd51e0
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<None>& OutLinkedInstances); // sub_0x3dd50f0
	struct FNone* GetLinkedAnimGraphInstanceByTag(struct FName InTag); // sub_0x3dd5060
	char GetDisablePostProcessBlueprint(); // sub_0x3dd5030
	char GetDisableAnimCurves(); // sub_0x3dd5000
	void GetCurrentJointAngles(struct FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle); // sub_0x3dd4e80
	float GetClothMaxDistanceScale(); // sub_0x3dd4e20
	struct FNone* GetClothingSimulationInteractor(); // sub_0x3dd4e50
	float GetBoneMass(struct FName BoneName, char bScaleMass); // sub_0x3dd4d50
	struct FNone* GetAnimInstance(); // sub_0x3dd4cf0
	struct FNone* GetAnimClass(); // sub_0x3dd4cc0
	char GetAnimationMode(); // sub_0x3dd4d20
	char GetAllowRigidBodyAnimNode(); // sub_0x3dd4c60
	char GetAllowedAnimCurveEvaluate(); // sub_0x3dd4c90
	void ForceClothNextUpdateTeleportAndReset(); // sub_0x3dd4c40
	void ForceClothNextUpdateTeleport(); // sub_0x3dd4c20
	struct FName FindConstraintBoneName(uint32_t ConstraintIndex); // sub_0x3dd4b90
	void ClearMorphTargets(); // sub_0x3dd4b70
	void BreakConstraint(struct FNone Impulse, struct FNone HitLocation, struct FName InBoneName); // sub_0x3dd4a40
	void BindClothToMasterPoseComponent(); // sub_0x3dd4a20
	void AllowAnimCurveEvaluation(struct FName NameOfCurve, char bAllow); // sub_0x3dd4950
	void AddImpulseToAllBodiesBelow(struct FNone Impulse, struct FName BoneName, char bVelChange, char bIncludeSelf); // sub_0x3dd47e0
	void AddForceToAllBodiesBelow(struct FNone Force, struct FName BoneName, char bAccelChange, char bIncludeSelf); // sub_0x3dd4670
	void AccumulateAllBodiesBelowPhysicsBlendWeight(struct FName& InBoneName, float AddPhysicsBlendWeight, char bSkipCustomPhysicsType); // sub_0x3dd4550
};

// Class Engine.AnimInstance
// Size: 0x270 (Inherited: 0x28)
struct UAnimInstance : UObject 
{
	struct FNone*                                 CurrentSkeleton;                                             // 0x28(0x08)
	char                                          RootMotionMode;                                              // 0x30(0x01)
	char                                          bUseMultiThreadedAnimationUpdate : 0;                        // 0x31(0x01)
	char                                          bUsingCopyPoseFromMesh : 0;                                  // 0x31(0x01)
	char                                          bReceiveNotifiesFromLinkedInstances : 0;                     // 0x31(0x01)
	char                                          bPropagateNotifiesToLinkedInstances : 0;                     // 0x31(0x01)
	char                                          bQueueMontageEvents : 0;                                     // 0x31(0x01)
	char                                          UnknownData31[0x7];                                          // 0x31(0x07)
	struct FMulticastInlineDelegate               OnMontageBlendingOut;                                        // 0x38(0x10)
	struct FMulticastInlineDelegate               OnMontageStarted;                                            // 0x48(0x10)
	struct FMulticastInlineDelegate               OnMontageEnded;                                              // 0x58(0x10)
	struct FMulticastInlineDelegate               OnAllMontageInstancesEnded;                                  // 0x68(0x10)
	char                                          UnknownData78[0x88];                                         // 0x78(0x88)
	struct FNone                                  NotifyQueue;                                                 // 0x100(0x70)
	struct TArray<None>                           ActiveAnimNotifyState;                                       // 0x170(0x10)
	char                                          UnknownData180[0xf0];                                        // 0x180(0xf0)

	void UnlockAIResources(char bUnlockMovement, char UnlockAILogic); // sub_0x1ecf4b0
	void UnlinkAnimClassLayers(struct FNone* InClass); // sub_0x3c59280
	struct FNone* TryGetPawnOwner(); // sub_0x3c59250
	void StopSlotAnimation(float InBlendOutTime, struct FName SlotNodeName); // sub_0x3c59180
	void SnapshotPose(struct FNone& Snapshot); // sub_0x3c590b0
	void SetRootMotionMode(char Value); // sub_0x3c59030
	void SetReceiveNotifiesFromLinkedInstances(char bSet); // sub_0x3c58fa0
	void SetPropagateNotifiesToLinkedInstances(char bSet); // sub_0x3c58f10
	void SetMorphTarget(struct FName MorphTargetName, float Value); // sub_0x3c58e40
	void SavePoseSnapshot(struct FName SnapshotName); // sub_0x3c58db0
	void ResetDynamics(enum class None InTeleportType); // sub_0x3c58d30
	struct FNone* PlaySlotAnimationAsDynamicMontage(struct FNone* Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, uint32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // sub_0x3c58af0
	float PlaySlotAnimation(struct FNone* Asset, struct FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, uint32_t LoopCount); // sub_0x3c58930
	void Montage_StopGroupByName(float InBlendOutTime, struct FName GroupName); // sub_0x3c58860
	void Montage_Stop(float InBlendOutTime, struct FNone* Montage); // sub_0x3c58790
	void Montage_SetPosition(struct FNone* Montage, float NewPosition); // sub_0x3c586c0
	void Montage_SetPlayRate(struct FNone* Montage, float NewPlayRate); // sub_0x3c585f0
	void Montage_SetNextSection(struct FName SectionNameToChange, struct FName NextSection, struct FNone* Montage); // sub_0x3c584f0
	void Montage_Resume(struct FNone* Montage); // sub_0x3c58470
	float Montage_Play(struct FNone* MontageToPlay, float InPlayRate, enum class None ReturnValueType, float InTimeToStartMontageAt, char bStopAllMontages); // sub_0x3c582e0
	void Montage_Pause(struct FNone* Montage); // sub_0x3c58260
	void Montage_JumpToSectionsEnd(struct FName SectionName, struct FNone* Montage); // sub_0x3c581a0
	void Montage_JumpToSection(struct FName SectionName, struct FNone* Montage); // sub_0x3c580e0
	char Montage_IsPlaying(struct FNone* Montage); // sub_0x3c58050
	char Montage_IsActive(struct FNone* Montage); // sub_0x3c57fc0
	float Montage_GetPosition(struct FNone* Montage); // sub_0x3c57f20
	float Montage_GetPlayRate(struct FNone* Montage); // sub_0x3c57e80
	char Montage_GetIsStopped(struct FNone* Montage); // sub_0x3c57df0
	struct FName Montage_GetCurrentSection(struct FNone* Montage); // sub_0x3c57d60
	float Montage_GetBlendTime(struct FNone* Montage); // sub_0x3c57cc0
	void LockAIResources(char bLockMovement, char LockAILogic); // sub_0x1ecf4b0
	void LinkAnimGraphByTag(struct FName InTag, struct FNone* InClass); // sub_0x3c57c00
	void LinkAnimClassLayers(struct FNone* InClass); // sub_0x3c57b80
	char IsSyncGroupBetweenMarkers(struct FName InSyncGroupName, struct FName PreviousMarker, struct FName NextMarker, char bRespectMarkerOrder); // sub_0x3c57a30
	char IsPlayingSlotAnimation(struct FNone* Asset, struct FName SlotNodeName); // sub_0x3c57970
	char IsAnyMontagePlaying(); // sub_0x3c57940
	char HasMarkerBeenHitThisFrame(struct FName SyncGroup, struct FName MarkerName); // sub_0x3c57880
	char GetTimeToClosestMarker(struct FName SyncGroup, struct FName MarkerName, float& OutMarkerTime); // sub_0x3c57770
	struct FNone GetSyncGroupPosition(struct FName InSyncGroupName); // sub_0x3c576d0
	float GetRelevantAnimTimeRemainingFraction(uint32_t MachineIndex, uint32_t StateIndex); // sub_0x3c57610
	float GetRelevantAnimTimeRemaining(uint32_t MachineIndex, uint32_t StateIndex); // sub_0x3c57550
	float GetRelevantAnimTimeFraction(uint32_t MachineIndex, uint32_t StateIndex); // sub_0x3c57490
	float GetRelevantAnimTime(uint32_t MachineIndex, uint32_t StateIndex); // sub_0x3c573d0
	float GetRelevantAnimLength(uint32_t MachineIndex, uint32_t StateIndex); // sub_0x3c57310
	char GetReceiveNotifiesFromLinkedInstances(); // sub_0x3c572e0
	char GetPropagateNotifiesToLinkedInstances(); // sub_0x3c572b0
	struct FNone* GetOwningComponent(); // sub_0x3c57280
	struct FNone* GetOwningActor(); // sub_0x3c57250
	struct FNone* GetLinkedAnimLayerInstanceByGroup(struct FName InGroup); // sub_0x3c571c0
	struct FNone* GetLinkedAnimLayerInstanceByClass(struct FNone* InClass); // sub_0x3c57130
	void GetLinkedAnimGraphInstancesByTag(struct FName InTag, struct TArray<None>& OutLinkedInstances); // sub_0x3c57040
	struct FNone* GetLinkedAnimGraphInstanceByTag(struct FName InTag); // sub_0x3c56fb0
	float GetInstanceTransitionTimeElapsedFraction(uint32_t MachineIndex, uint32_t TransitionIndex); // sub_0x3c56ef0
	float GetInstanceTransitionTimeElapsed(uint32_t MachineIndex, uint32_t TransitionIndex); // sub_0x3c56e30
	float GetInstanceTransitionCrossfadeDuration(uint32_t MachineIndex, uint32_t TransitionIndex); // sub_0x3c56d70
	float GetInstanceStateWeight(uint32_t MachineIndex, uint32_t StateIndex); // sub_0x3c56cb0
	float GetInstanceMachineWeight(uint32_t MachineIndex); // sub_0x3c56c20
	float GetInstanceCurrentStateElapsedTime(uint32_t MachineIndex); // sub_0x3c56b90
	float GetInstanceAssetPlayerTimeFromEndFraction(uint32_t AssetPlayerIndex); // sub_0x3c56b00
	float GetInstanceAssetPlayerTimeFromEnd(uint32_t AssetPlayerIndex); // sub_0x3c56a70
	float GetInstanceAssetPlayerTimeFraction(uint32_t AssetPlayerIndex); // sub_0x3c569e0
	float GetInstanceAssetPlayerTime(uint32_t AssetPlayerIndex); // sub_0x3c56950
	float GetInstanceAssetPlayerLength(uint32_t AssetPlayerIndex); // sub_0x3c568c0
	float GetCurveValue(struct FName CurveName); // sub_0x3c56820
	struct FName GetCurrentStateName(uint32_t MachineIndex); // sub_0x3c56790
	struct FNone* GetCurrentActiveMontage(); // sub_0x3c56760
	void GetAllCurveNames(struct TArray<None>& OutNames); // sub_0x3c566b0
	void GetActiveCurveNames(enum class None CurveType, struct TArray<None>& OutNames); // sub_0x3c565c0
	void ClearMorphTargets(); // sub_0x3c565a0
	float CalculateDirection(struct FNone& Velocity, struct FNone& BaseRotation); // sub_0x3c564a0
	void BlueprintUpdateAnimation(float DeltaTimeX); // sub_0x239bfb0
	void BlueprintPostEvaluateAnimation(); // sub_0x239bfb0
	void BlueprintLinkedAnimationLayersInitialized(); // sub_0x239bfb0
	void BlueprintInitializeAnimation(); // sub_0x239bfb0
	void BlueprintBeginPlay(); // sub_0x239bfb0
};

// Class Engine.ReplicationDriver
// Size: 0x28 (Inherited: 0x28)
struct UReplicationDriver : UObject 
{
};

// Class Engine.ReplicationConnectionDriver
// Size: 0x28 (Inherited: 0x28)
struct UReplicationConnectionDriver : UObject 
{
};

// Class Engine.Exporter
// Size: 0x78 (Inherited: 0x28)
struct UExporter : UObject 
{
	struct FNone*                                 SupportedClass;                                              // 0x28(0x08)
	struct FNone*                                 ExportRootScope;                                             // 0x30(0x08)
	struct TArray<None>                           FormatExtension;                                             // 0x38(0x10)
	struct TArray<None>                           FormatDescription;                                           // 0x48(0x10)
	uint32_t                                      PreferredFormatIndex;                                        // 0x58(0x04)
	uint32_t                                      TextIndent;                                                  // 0x5c(0x04)
	char                                          bText : 0;                                                   // 0x60(0x01)
	char                                          bSelectedOnly : 0;                                           // 0x60(0x01)
	char                                          bForceFileOperations : 0;                                    // 0x60(0x01)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone*                                 ExportTask;                                                  // 0x68(0x08)
	char                                          UnknownData70[0x8];                                          // 0x70(0x08)

	char ScriptRunAssetExportTask(struct FNone* Task); // sub_0x239bfb0
	char RunAssetExportTasks(struct TArray<None>& ExportTasks); // sub_0x3cc7790
	char RunAssetExportTask(struct FNone* Task); // sub_0x17d5930
};

// Class Engine.LevelScriptActor
// Size: 0x318 (Inherited: 0x310)
struct ALevelScriptActor : AActor 
{
	char                                          bInputEnabled : 0;                                           // 0x310(0x01)
	char                                          UnknownData310[0x8];                                         // 0x310(0x08)

	void WorldOriginLocationChanged(struct FNone OldOriginLocation, struct FNone NewOriginLocation); // sub_0x239bfb0
	void SetCinematicMode(char bCinematicMode, char bHidePlayer, char bAffectsHUD, char bAffectsMovement, char bAffectsTurning); // sub_0x3d51900
	char RemoteEvent(struct FName EventName); // sub_0x3d513b0
	void LevelReset(); // sub_0x239bfb0
};

// Class Engine.FXSystemComponent
// Size: 0x4c0 (Inherited: 0x4c0)
struct UFXSystemComponent : UPrimitiveComponent 
{

	void SetVectorParameter(struct FName ParameterName, struct FNone Param); // sub_0x3d93ca0
	void SetUseAutoManageAttachment(char bAutoManage); // sub_0x3d93c10
	void SetFloatParameter(struct FName ParameterName, float Param); // sub_0x3d938b0
	void SetEmitterEnable(struct FName EmitterName, char bNewEnableState); // sub_0x3d937e0
	void SetColorParameter(struct FName ParameterName, struct FNone Param); // sub_0x3d93710
	void SetBoolParameter(struct FName ParameterName, char Param); // sub_0x3d93640
	void SetAutoAttachmentParameters(struct FNone* Parent, struct FName SocketName, enum class None LocationRule, enum class None RotationRule, enum class None ScaleRule); // sub_0x3d92db0
	void SetActorParameter(struct FName ParameterName, struct FNone* Param); // sub_0x3d92bc0
	void ReleaseToPool(); // sub_0x3d92ba0
	struct FNone* GetFXSystemAsset(); // sub_0x3d92aa0
};

// Class Engine.FXSystemAsset
// Size: 0x30 (Inherited: 0x28)
struct UFXSystemAsset : UObject 
{
	uint32_t                                      MaxPoolSize;                                                 // 0x28(0x04)
	char                                          UnknownData2C[0x4];                                          // 0x2c(0x04)
};

// Class Engine.AnimNotify
// Size: 0x38 (Inherited: 0x28)
struct UAnimNotify : UObject 
{
	char                                          UnknownData28[0x10];                                         // 0x28(0x10)

	char Received_Notify(struct FNone* MeshComp, struct FNone* Animation); // sub_0x239bfb0
	struct FString GetNotifyName(); // sub_0x34daea0
};

// Class Engine.AnimNotifyState
// Size: 0x30 (Inherited: 0x28)
struct UAnimNotifyState : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)

	char Received_NotifyTick(struct FNone* MeshComp, struct FNone* Animation, float FrameDeltaTime); // sub_0x239bfb0
	char Received_NotifyEnd(struct FNone* MeshComp, struct FNone* Animation); // sub_0x239bfb0
	char Received_NotifyBegin(struct FNone* MeshComp, struct FNone* Animation, float TotalDuration); // sub_0x239bfb0
	struct FString GetNotifyName(); // sub_0x34daea0
};

// Class Engine.Brush
// Size: 0x348 (Inherited: 0x310)
struct ABrush : AActor 
{
	char                                          BrushType;                                                   // 0x310(0x01)
	char                                          UnknownData311[0x3];                                         // 0x311(0x03)
	struct FNone                                  BrushColor;                                                  // 0x314(0x04)
	uint32_t                                      PolyFlags;                                                   // 0x318(0x04)
	char                                          bColored : 0;                                                // 0x31c(0x01)
	char                                          bSolidWhenSelected : 0;                                      // 0x31c(0x01)
	char                                          bPlaceableFromClassBrowser : 0;                              // 0x31c(0x01)
	char                                          bNotForClientOrServer : 0;                                   // 0x31c(0x01)
	char                                          UnknownData31C[0x4];                                         // 0x31c(0x04)
	struct FNone*                                 Brush;                                                       // 0x320(0x08)
	struct FNone*                                 BrushComponent;                                              // 0x328(0x08)
	char                                          bInManipulation : 0;                                         // 0x330(0x01)
	char                                          UnknownData330[0x8];                                         // 0x330(0x08)
	struct TArray<None>                           SavedSelections;                                             // 0x338(0x10)
};

// Class Engine.Volume
// Size: 0x348 (Inherited: 0x348)
struct AVolume : ABrush 
{
};

// Class Engine.MKWorldEx
// Size: 0x40 (Inherited: 0x28)
struct UMKWorldEx : UObject 
{
	char                                          UnknownData28[0x10];                                         // 0x28(0x10)
	struct FNone*                                 SelfWorld;                                                   // 0x38(0x08)
};

// Class Engine.World
// Size: 0x770 (Inherited: 0x40)
struct UWorld : UMKWorldEx 
{
	char                                          UnknownData40[0x8];                                          // 0x40(0x08)
	struct FNone*                                 PersistentLevel;                                             // 0x48(0x08)
	struct FNone*                                 NetDriver;                                                   // 0x50(0x08)
	struct FNone*                                 LineBatcher;                                                 // 0x58(0x08)
	struct FNone*                                 PersistentLineBatcher;                                       // 0x60(0x08)
	struct FNone*                                 ForegroundLineBatcher;                                       // 0x68(0x08)
	struct FNone*                                 NetworkManager;                                              // 0x70(0x08)
	struct FNone*                                 PhysicsCollisionHandler;                                     // 0x78(0x08)
	struct TArray<None>                           ExtraReferencedObjects;                                      // 0x80(0x10)
	struct TArray<None>                           PerModuleDataObjects;                                        // 0x90(0x10)
	struct TArray<None>                           LevelSequenceActors;                                         // 0xa0(0x10)
	struct TArray<None>                           StreamingLevels;                                             // 0xb0(0x10)
	struct FNone                                  StreamingLevelsToConsider;                                   // 0xc0(0x48)
	char                                          UnknownData108[0x18];                                        // 0x108(0x18)
	struct FString                                StreamingLevelsPrefix;                                       // 0x120(0x10)
	struct FNone*                                 CurrentLevelPendingVisibility;                               // 0x130(0x08)
	struct FNone*                                 CurrentLevelPendingInvisibility;                             // 0x138(0x08)
	struct FNone*                                 DemoNetDriver;                                               // 0x140(0x08)
	struct FNone*                                 MyParticleEventManager;                                      // 0x148(0x08)
	struct FNone*                                 DefaultPhysicsVolume;                                        // 0x150(0x08)
	char                                          UnknownData158[0x16];                                        // 0x158(0x16)
	char                                          bAreConstraintsDirty : 0;                                    // 0x16e(0x01)
	char                                          UnknownData16E[0x2];                                         // 0x16e(0x02)
	struct FNone*                                 NavigationSystem;                                            // 0x170(0x08)
	struct FNone*                                 AuthorityGameMode;                                           // 0x178(0x08)
	struct FNone*                                 GameState;                                                   // 0x180(0x08)
	struct FNone*                                 AISystem;                                                    // 0x188(0x08)
	struct FNone*                                 AvoidanceManager;                                            // 0x190(0x08)
	struct TArray<None>                           Levels;                                                      // 0x198(0x10)
	struct TArray<None>                           LevelCollections;                                            // 0x1a8(0x10)
	char                                          UnknownData1B8[0x20];                                        // 0x1b8(0x20)
	struct FNone*                                 OwningGameInstance;                                          // 0x1d8(0x08)
	struct TArray<None>                           ParameterCollectionInstances;                                // 0x1e0(0x10)
	struct FNone*                                 CanvasForRenderingToTarget;                                  // 0x1f0(0x08)
	struct FNone*                                 CanvasForDrawMaterialToRenderTarget;                         // 0x1f8(0x08)
	char                                          UnknownData200[0x50];                                        // 0x200(0x50)
	struct TArray<None>                           ComponentsThatNeedEndOfFrameUpdate;                          // 0x250(0x10)
	struct TArray<None>                           ComponentsThatNeedEndOfFrameUpdate_OnGameThread;             // 0x260(0x10)
	char                                          UnknownData270[0x340];                                       // 0x270(0x340)
	struct FNone*                                 WorldComposition;                                            // 0x5b0(0x08)
	char                                          UnknownData5B8[0x98];                                        // 0x5b8(0x98)
	struct FNone                                  PSCPool;                                                     // 0x650(0x58)
	char                                          UnknownData6A8[0xc8];                                        // 0x6a8(0xc8)

	struct FNone* K2_GetWorldSettings(); // sub_0x3e11320
	void HandleTimelineScrubbed(); // sub_0x3e11300
};

// Class Engine.InterpTrack
// Size: 0x70 (Inherited: 0x28)
struct UInterpTrack : UObject 
{
	char                                          UnknownData28[0x10];                                         // 0x28(0x10)
	struct TArray<None>                           SubTracks;                                                   // 0x38(0x10)
	struct FNone*                                 TrackInstClass;                                              // 0x48(0x08)
	char                                          ActiveCondition;                                             // 0x50(0x01)
	char                                          UnknownData51[0x7];                                          // 0x51(0x07)
	struct FString                                TrackTitle;                                                  // 0x58(0x10)
	char                                          bOnePerGroup : 0;                                            // 0x68(0x01)
	char                                          bDirGroupOnly : 0;                                           // 0x68(0x01)
	char                                          bDisableTrack : 0;                                           // 0x68(0x01)
	char                                          bIsSelected : 0;                                             // 0x68(0x01)
	char                                          bIsAnimControlTrack : 0;                                     // 0x68(0x01)
	char                                          bSubTrackOnly : 0;                                           // 0x68(0x01)
	char                                          bVisible : 0;                                                // 0x68(0x01)
	char                                          bIsRecording : 0;                                            // 0x68(0x01)
	char                                          UnknownData68[0x8];                                          // 0x68(0x08)
};

// Class Engine.InterpTrackVectorBase
// Size: 0x90 (Inherited: 0x70)
struct UInterpTrackVectorBase : UInterpTrack 
{
	struct FNone                                  VectorTrack;                                                 // 0x70(0x18)
	float                                         CurveTension;                                                // 0x88(0x04)
	char                                          UnknownData8C[0x4];                                          // 0x8c(0x04)
};

// Class Engine.InterpTrackFloatBase
// Size: 0x90 (Inherited: 0x70)
struct UInterpTrackFloatBase : UInterpTrack 
{
	struct FNone                                  FloatTrack;                                                  // 0x70(0x18)
	float                                         CurveTension;                                                // 0x88(0x04)
	char                                          UnknownData8C[0x4];                                          // 0x8c(0x04)
};

// Class Engine.InterpTrackInst
// Size: 0x28 (Inherited: 0x28)
struct UInterpTrackInst : UObject 
{
};

// Class Engine.DataAsset
// Size: 0x30 (Inherited: 0x28)
struct UDataAsset : UObject 
{
	struct FNone*                                 NativeClass;                                                 // 0x28(0x08)
};

// Class Engine.MaterialExpression
// Size: 0x40 (Inherited: 0x28)
struct UMaterialExpression : UObject 
{
	struct FNone*                                 Material;                                                    // 0x28(0x08)
	struct FNone*                                 Function;                                                    // 0x30(0x08)
	char                                          bIsParameterExpression : 0;                                  // 0x38(0x01)
	char                                          UnknownData38[0x8];                                          // 0x38(0x08)
};

// Class Engine.MaterialExpressionTextureBase
// Size: 0x50 (Inherited: 0x40)
struct UMaterialExpressionTextureBase : UMaterialExpression 
{
	struct FNone*                                 Texture;                                                     // 0x40(0x08)
	char                                          SamplerType;                                                 // 0x48(0x01)
	char                                          IsDefaultMeshpaintTexture : 0;                               // 0x49(0x01)
	char                                          UnknownData49[0x7];                                          // 0x49(0x07)
};

// Class Engine.MaterialExpressionTextureSample
// Size: 0xd0 (Inherited: 0x50)
struct UMaterialExpressionTextureSample : UMaterialExpressionTextureBase 
{
	struct FNone                                  Coordinates;                                                 // 0x50(0x0c)
	char                                          UnknownData5C[0x8];                                          // 0x5c(0x08)
	struct FNone                                  TextureObject;                                               // 0x64(0x0c)
	char                                          UnknownData70[0x8];                                          // 0x70(0x08)
	struct FNone                                  MipValue;                                                    // 0x78(0x0c)
	char                                          UnknownData84[0x8];                                          // 0x84(0x08)
	struct FNone                                  CoordinatesDX;                                               // 0x8c(0x0c)
	char                                          UnknownData98[0x8];                                          // 0x98(0x08)
	struct FNone                                  CoordinatesDY;                                               // 0xa0(0x0c)
	char                                          UnknownDataAC[0x8];                                          // 0xac(0x08)
	struct FNone                                  AutomaticViewMipBiasValue;                                   // 0xb4(0x0c)
	char                                          UnknownDataC0[0x8];                                          // 0xc0(0x08)
	char                                          MipValueMode;                                                // 0xc8(0x01)
	char                                          SamplerSource;                                               // 0xc9(0x01)
	char                                          AutomaticViewMipBias : 0;                                    // 0xca(0x01)
	char                                          UnknownDataCA[0x1];                                          // 0xca(0x01)
	char                                          ConstCoordinate;                                             // 0xcb(0x01)
	uint32_t                                      ConstMipValue;                                               // 0xcc(0x04)
};

// Class Engine.MaterialExpressionTextureSampleParameter
// Size: 0xf0 (Inherited: 0xd0)
struct UMaterialExpressionTextureSampleParameter : UMaterialExpressionTextureSample 
{
	struct FName                                  ParameterName;                                               // 0xd0(0x08)
	struct FNone                                  ExpressionGUID;                                              // 0xd8(0x10)
	struct FName                                  Group;                                                       // 0xe8(0x08)
};

// Class Engine.MaterialExpressionTextureSampleParameter2D
// Size: 0xf0 (Inherited: 0xf0)
struct UMaterialExpressionTextureSampleParameter2D : UMaterialExpressionTextureSampleParameter 
{
};

// Class Engine.MKPawnEx
// Size: 0x320 (Inherited: 0x310)
struct AMKPawnEx : AActor 
{
	char                                          UnknownData310[0x8];                                         // 0x310(0x08)
	struct FNone*                                 SelfPawn;                                                    // 0x318(0x08)

	void OnChangedViewMode(); // sub_0x1e42900
};

// Class Engine.Pawn
// Size: 0x380 (Inherited: 0x320)
struct APawn : AMKPawnEx 
{
	char                                          UnknownData320[0x8];                                         // 0x320(0x08)
	char                                          bUseControllerRotationPitch : 0;                             // 0x328(0x01)
	char                                          bUseControllerRotationYaw : 0;                               // 0x328(0x01)
	char                                          bUseControllerRotationRoll : 0;                              // 0x328(0x01)
	char                                          bCanAffectNavigationGeneration : 0;                          // 0x328(0x01)
	char                                          UnknownData328[0x4];                                         // 0x328(0x04)
	float                                         BaseEyeHeight;                                               // 0x32c(0x04)
	char                                          AutoPossessPlayer;                                           // 0x330(0x01)
	enum class None                               AutoPossessAI;                                               // 0x331(0x01)
	uint16_t                                      RemoteViewPitch;                                             // 0x332(0x02)
	uint16_t                                      RemoteViewYaw;                                               // 0x334(0x02)
	char                                          UnknownData336[0x2];                                         // 0x336(0x02)
	struct FNone*                                 AIControllerClass;                                           // 0x338(0x08)
	struct FNone*                                 PlayerState;                                                 // 0x340(0x08)
	char                                          UnknownData348[0x8];                                         // 0x348(0x08)
	struct FNone*                                 LastHitBy;                                                   // 0x350(0x08)
	struct FNone*                                 Controller;                                                  // 0x358(0x08)
	char                                          UnknownData360[0x4];                                         // 0x360(0x04)
	struct FNone                                  ControlInputVector;                                          // 0x364(0x0c)
	struct FNone                                  LastControlInputVector;                                      // 0x370(0x0c)
	char                                          UnknownData37C[0x4];                                         // 0x37c(0x04)

	void SpawnDefaultController(); // sub_0x3d983a0
	void SetCanAffectNavigationGeneration(char bNewValue, char bForceUpdate); // sub_0x3d981d0
	void ReceiveUnpossessed(struct FNone* OldController); // sub_0x239bfb0
	void ReceivePossessed(struct FNone* NewController); // sub_0x239bfb0
	void PawnMakeNoise(float Loudness, struct FNone NoiseLocation, char bUseNoiseMakerLocation, struct FNone* NoiseMaker); // sub_0x3d98060
	void OnRep_PlayerState(); // sub_0x1f0eb10
	void OnRep_Controller(); // sub_0x3ca4850
	void LaunchPawn(struct FNone LaunchVelocity, char bXYOverride, char bZOverride); // sub_0x3d97e20
	struct FNone K2_GetMovementInputVector(); // sub_0x3d97c90
	char IsPlayerControlled(); // sub_0x3d97df0
	char IsPawnControlled(); // sub_0x3d97dc0
	char IsMoveInputIgnored(); // sub_0x3d97d60
	char IsLocallyControlled(); // sub_0x3d97d30
	char IsControlled(); // sub_0x3d97d00
	char IsBotControlled(); // sub_0x3d97cd0
	struct FNone GetPendingMovementInputVector(); // sub_0x3d97c90
	struct FNone GetNavAgentLocation(); // sub_0x3d97bd0
	struct FNone* GetMovementComponent(); // sub_0x3d97ba0
	struct FNone* GetMovementBaseActor(struct FNone* Pawn); // sub_0x3d97b20
	struct FNone GetLastMovementInputVector(); // sub_0x3d97ae0
	struct FNone GetControlRotation(); // sub_0x3d97a40
	struct FNone* GetController(); // sub_0x3d97a80
	struct FNone GetBaseAimRotation(); // sub_0x3d97940
	void DetachFromControllerPendingDestroy(); // sub_0x1f1ab10
	struct FNone ConsumeMovementInputVector(); // sub_0x3d97900
	void AddMovementInput(struct FNone WorldDirection, float ScaleValue, char bForce); // sub_0x3d97440
	void AddControllerYawInput(float Val); // sub_0x3d972e0
	void AddControllerRollInput(float Val); // sub_0x3d97260
	void AddControllerPitchInput(float Val); // sub_0x3d971e0
};

// Class Engine.MKCharacterEx
// Size: 0x398 (Inherited: 0x380)
struct AMKCharacterEx : APawn 
{
	char                                          UnknownData380[0x8];                                         // 0x380(0x08)
	struct FNone*                                 SelfCharacter;                                               // 0x388(0x08)
	char                                          UnknownData390[0x8];                                         // 0x390(0x08)
};

// Class Engine.Character
// Size: 0x5e0 (Inherited: 0x398)
struct ACharacter : AMKCharacterEx 
{
	struct FNone*                                 Mesh;                                                        // 0x398(0x08)
	struct FNone*                                 CharacterMovement;                                           // 0x3a0(0x08)
	struct FNone*                                 CapsuleComponent;                                            // 0x3a8(0x08)
	char                                          UnknownData3B0[0x8];                                         // 0x3b0(0x08)
	struct FNone                                  BasedMovement;                                               // 0x3b8(0x30)
	struct FNone                                  ReplicatedBasedMovement;                                     // 0x3e8(0x30)
	float                                         AnimRootMotionTranslationScale;                              // 0x418(0x04)
	struct FNone                                  BaseTranslationOffset;                                       // 0x41c(0x0c)
	char                                          UnknownData428[0x8];                                         // 0x428(0x08)
	struct FNone                                  BaseRotationOffset;                                          // 0x430(0x10)
	float                                         ReplicatedServerLastTransformUpdateTimeStamp;                // 0x440(0x04)
	float                                         ReplayLastTransformUpdateTimeStamp;                          // 0x444(0x04)
	char                                          ReplicatedMovementMode;                                      // 0x448(0x01)
	char                                          bInBaseReplication : 0;                                      // 0x449(0x01)
	char                                          UnknownData449[0x3];                                         // 0x449(0x03)
	float                                         CrouchedEyeHeight;                                           // 0x44c(0x04)
	char                                          bIsCrouched : 0;                                             // 0x450(0x01)
	char                                          bProxyIsJumpForceApplied : 0;                                // 0x450(0x01)
	char                                          bPressedJump : 0;                                            // 0x450(0x01)
	char                                          bClientUpdating : 0;                                         // 0x450(0x01)
	char                                          bClientWasFalling : 0;                                       // 0x450(0x01)
	char                                          bClientResimulateRootMotion : 0;                             // 0x450(0x01)
	char                                          bClientResimulateRootMotionSources : 0;                      // 0x450(0x01)
	char                                          bSimGravityDisabled : 0;                                     // 0x450(0x01)
	char                                          UnknownData450[0x1];                                         // 0x450(0x01)
	char                                          bClientCheckEncroachmentOnNetUpdate : 0;                     // 0x451(0x01)
	char                                          bServerMoveIgnoreRootMotion : 0;                             // 0x451(0x01)
	char                                          bWasJumping : 0;                                             // 0x451(0x01)
	char                                          UnknownData451[0x3];                                         // 0x451(0x03)
	float                                         JumpKeyHoldTime;                                             // 0x454(0x04)
	float                                         JumpForceTimeRemaining;                                      // 0x458(0x04)
	float                                         ProxyJumpForceStartedTime;                                   // 0x45c(0x04)
	float                                         JumpMaxHoldTime;                                             // 0x460(0x04)
	uint32_t                                      JumpMaxCount;                                                // 0x464(0x04)
	uint32_t                                      JumpCurrentCount;                                            // 0x468(0x04)
	char                                          UnknownData46C[0x4];                                         // 0x46c(0x04)
	struct FMulticastInlineDelegate               OnReachedJumpApex;                                           // 0x470(0x10)
	char                                          UnknownData480[0x10];                                        // 0x480(0x10)
	struct FMulticastInlineDelegate               MovementModeChangedDelegate;                                 // 0x490(0x10)
	struct FMulticastInlineDelegate               OnCharacterMovementUpdated;                                  // 0x4a0(0x10)
	struct FNone                                  SavedRootMotion;                                             // 0x4b0(0x38)
	char                                          UnknownData4E8[0x8];                                         // 0x4e8(0x08)
	struct FNone                                  ClientRootMotionParams;                                      // 0x4f0(0x40)
	struct TArray<None>                           RootMotionRepMoves;                                          // 0x530(0x10)
	struct FNone                                  RepRootMotion;                                               // 0x540(0x98)
	char                                          UnknownData5D8[0x8];                                         // 0x5d8(0x08)

	void UnCrouch(char bClientSimulation); // sub_0x201b240
	void StopJumping(); // sub_0x201c950
	void StopAnimMontage(struct FNone* AnimMontage); // sub_0x3c997d0
	void ServerMoveOld(float OldTimeStamp, struct FNone OldAccel, struct FNone InVel, char OldMoveFlags); // sub_0x3c99360
	void ServerMoveNoBase(float Timestamp, struct FNone InAccel, struct FNone InVel, struct FNone ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // sub_0x3c99070
	void ServerMoveDualNoBase(float TimeStamp0, struct FNone InAccel0, struct FNone InVel, char PendingFlags, uint32_t View0, float Timestamp, struct FNone InAccel, struct FNone ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // sub_0x3c98c30
	void ServerMoveDualHybridRootMotion(float TimeStamp0, struct FNone InAccel0, struct FNone InVel, char PendingFlags, uint32_t View0, float Timestamp, struct FNone InAccel, struct FNone ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct FNone* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // sub_0x3c98780
	void ServerMoveDual(float TimeStamp0, struct FNone InAccel0, struct FNone InVel, char PendingFlags, uint32_t View0, float Timestamp, struct FNone InAccel, struct FNone ClientLoc, char NewFlags, char ClientRoll, uint32_t View, struct FNone* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // sub_0x3c982d0
	void ServerMove(float Timestamp, struct FNone InAccel, struct FNone InVel, struct FNone ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, struct FNone* ClientMovementBase, struct FName ClientBaseBoneName, char ClientMovementMode); // sub_0x3c97f50
	void RootMotionDebugClientPrintOnScreen(struct FString inString); // sub_0x3c97ea0
	float PlayAnimMontage(struct FNone* AnimMontage, float InPlayRate, struct FName StartSectionName); // sub_0x3c97d90
	void OnWalkingOffLedge(struct FNone& PreviousFloorImpactNormal, struct FNone& PreviousFloorContactNormal, struct FNone& PreviousLocation, float TimeDelta); // sub_0x3c97bf0
	void OnRep_RootMotion(); // sub_0x3c97bd0
	void OnRep_ReplicatedBasedMovement(); // sub_0x3c97bb0
	void OnRep_ReplayLastTransformUpdateTimeStamp(); // sub_0x3c97b90
	void OnRep_IsCrouched(); // sub_0x3c97b70
	void OnLaunched(struct FNone LaunchVelocity, char bXYOverride, char bZOverride); // sub_0x239bfb0
	void OnLanded(struct FNone& Hit); // sub_0x239bfb0
	void OnJumped(); // sub_0x3c97b50
	void LaunchCharacter(struct FNone LaunchVelocity, char bXYOverride, char bZOverride); // sub_0x3c97a30
	void K2_UpdateCustomMovement(float DeltaTime); // sub_0x239bfb0
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // sub_0x239bfb0
	void K2_OnMovementModeChanged(char PrevMovementMode, char NewMovementMode, char PrevCustomMode, char NewCustomMode); // sub_0x239bfb0
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // sub_0x239bfb0
	void Jump(); // sub_0x201b2d0
	char IsPlayingRootMotion(); // sub_0x3c97a00
	char IsPlayingNetworkedRootMotionMontage(); // sub_0x3c979d0
	char IsJumpProvidingForce(); // sub_0x201b0c0
	char HasAnyRootMotion(); // sub_0x3c979a0
	struct FNone* GetCurrentMontage(); // sub_0x3c97310
	struct FNone GetBaseTranslationOffset(); // sub_0x3c972e0
	struct FNone GetBaseRotationOffsetRotator(); // sub_0x3c97290
	float GetAnimRootMotionTranslationScale(); // sub_0x3c97260
	void ForceLastAckMove(); // sub_0x3c97240
	void Crouch(char bClientSimulation); // sub_0x3c971b0
	void ClientVeryShortAdjustPosition(float Timestamp, struct FNone NewLoc, struct FNone* NewBase, struct FName NewBaseBoneName, char bHasBase, char bBaseRelativePosition, char ServerMovementMode); // sub_0x3c96e60
	void ClientCheatWalk(); // sub_0x1e98e80
	void ClientCheatGhost(); // sub_0x2013f90
	void ClientCheatFly(); // sub_0x337e300
	void ClientAdjustRootMotionSourcePosition(float Timestamp, struct FNone ServerRootMotion, char bHasAnimRootMotion, float ServerMontageTrackPosition, struct FNone ServerLoc, struct FNone ServerRotation, float ServerVelZ, struct FNone* ServerBase, struct FName ServerBoneName, char bHasBase, char bBaseRelativePosition, char ServerMovementMode); // sub_0x3c969a0
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, struct FNone ServerLoc, struct FNone ServerRotation, float ServerVelZ, struct FNone* ServerBase, struct FName ServerBoneName, char bHasBase, char bBaseRelativePosition, char ServerMovementMode); // sub_0x3c966b0
	void ClientAdjustPosition(float Timestamp, struct FNone NewLoc, struct FNone NewVel, struct FNone* NewBase, struct FName NewBaseBoneName, char bHasBase, char bBaseRelativePosition, char ServerMovementMode); // sub_0x3c96440
	void ClientAckGoodMove(float Timestamp); // sub_0x3c963c0
	char CanJumpInternal(); // sub_0x3c96390
	char CanJump(); // sub_0x3c96360
	char CanCrouch(); // sub_0x3c96330
	void CacheInitialMeshOffset(struct FNone MeshRelativeLocation, struct FNone MeshRelativeRotation); // sub_0x3c96250
};

// Class Engine.SplineComponent
// Size: 0x5b0 (Inherited: 0x4c0)
struct USplineComponent : UPrimitiveComponent 
{
	struct FNone                                  SplineCurves;                                                // 0x4b8(0x68)
	struct FNone                                  SplineInfo;                                                  // 0x520(0x18)
	struct FNone                                  SplineRotInfo;                                               // 0x538(0x18)
	struct FNone                                  SplineScaleInfo;                                             // 0x550(0x18)
	struct FNone                                  SplineReparamTable;                                          // 0x568(0x18)
	char                                          bAllowSplineEditingPerInstance : 0;                          // 0x580(0x01)
	uint32_t                                      ReparamStepsPerSegment;                                      // 0x584(0x04)
	float                                         Duration;                                                    // 0x588(0x04)
	char                                          bStationaryEndpoints : 0;                                    // 0x58c(0x01)
	char                                          bSplineHasBeenEdited : 0;                                    // 0x58d(0x01)
	char                                          bModifiedByConstructionScript : 0;                           // 0x58e(0x01)
	char                                          bInputSplinePointsToConstructionScript : 0;                  // 0x58f(0x01)
	char                                          bDrawDebug : 0;                                              // 0x590(0x01)
	char                                          UnknownData590[0x1];                                         // 0x590(0x01)
	char                                          bClosedLoop : 0;                                             // 0x591(0x01)
	char                                          UnknownData591[0x1];                                         // 0x591(0x01)
	char                                          bLoopPositionOverride : 0;                                   // 0x592(0x01)
	char                                          UnknownData592[0x2];                                         // 0x592(0x02)
	float                                         LoopPosition;                                                // 0x594(0x04)
	struct FNone                                  DefaultUpVector;                                             // 0x598(0x0c)
	char                                          UnknownData5A4[0xc];                                         // 0x5a4(0x0c)

	void UpdateSpline(); // sub_0x3df4ee0
	void SetWorldLocationAtSplinePoint(uint32_t PointIndex, struct FNone& InLocation); // sub_0x3df4e00
	void SetUpVectorAtSplinePoint(uint32_t PointIndex, struct FNone& InUpVector, char CoordinateSpace, char bUpdateSpline); // sub_0x3df4ca0
	void SetUnselectedSplineSegmentColor(struct FNone& SegmentColor); // sub_0x3df4490
	void SetTangentsAtSplinePoint(uint32_t PointIndex, struct FNone& InArriveTangent, struct FNone& InLeaveTangent, char CoordinateSpace, char bUpdateSpline); // sub_0x3df4ae0
	void SetTangentAtSplinePoint(uint32_t PointIndex, struct FNone& InTangent, char CoordinateSpace, char bUpdateSpline); // sub_0x3df4980
	void SetSplineWorldPoints(struct TArray<None>& Points); // sub_0x3df48d0
	void SetSplinePointType(uint32_t PointIndex, char Type, char bUpdateSpline); // sub_0x3df46a0
	void SetSplinePoints(struct TArray<None>& Points, char CoordinateSpace, char bUpdateSpline); // sub_0x3df47a0
	void SetSplineLocalPoints(struct TArray<None>& Points); // sub_0x3df45f0
	void SetSelectedSplineSegmentColor(struct FNone& SegmentColor); // sub_0x3df4490
	void SetLocationAtSplinePoint(uint32_t PointIndex, struct FNone& InLocation, char CoordinateSpace, char bUpdateSpline); // sub_0x3df4330
	void SetDrawDebug(char bShow); // sub_0x3df42a0
	void SetDefaultUpVector(struct FNone& UpVector, char CoordinateSpace); // sub_0x3df41c0
	void SetClosedLoopAtPosition(char bInClosedLoop, float Key, char bUpdateSpline); // sub_0x3df40b0
	void SetClosedLoop(char bInClosedLoop, char bUpdateSpline); // sub_0x3df3fe0
	void RemoveSplinePoint(uint32_t Index, char bUpdateSpline); // sub_0x3df3f20
	char IsClosedLoop(); // sub_0x3df3ef0
	struct FNone GetWorldTangentAtDistanceAlongSpline(float Distance); // sub_0x3df3e40
	struct FNone GetWorldRotationAtTime(float Time, char bUseConstantVelocity); // sub_0x3df3d50
	struct FNone GetWorldRotationAtDistanceAlongSpline(float Distance); // sub_0x3df3ca0
	struct FNone GetWorldLocationAtTime(float Time, char bUseConstantVelocity); // sub_0x3df3bb0
	struct FNone GetWorldLocationAtSplinePoint(uint32_t PointIndex); // sub_0x3df3b00
	struct FNone GetWorldLocationAtDistanceAlongSpline(float Distance); // sub_0x3df3a50
	struct FNone GetWorldDirectionAtTime(float Time, char bUseConstantVelocity); // sub_0x3df3960
	struct FNone GetWorldDirectionAtDistanceAlongSpline(float Distance); // sub_0x3df38b0
	struct FNone GetVectorPropertyAtSplinePoint(uint32_t Index, struct FName PropertyName); // sub_0x3df37e0
	struct FNone GetVectorPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // sub_0x3df3700
	struct FNone GetUpVectorAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity); // sub_0x3df35e0
	struct FNone GetUpVectorAtSplinePoint(uint32_t PointIndex, char CoordinateSpace); // sub_0x3df3510
	struct FNone GetUpVectorAtSplineInputKey(float InKey, char CoordinateSpace); // sub_0x3df3430
	struct FNone GetUpVectorAtDistanceAlongSpline(float Distance, char CoordinateSpace); // sub_0x3df3350
	struct FNone GetTransformAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity, char bUseScale); // sub_0x3df31c0
	struct FNone GetTransformAtSplinePoint(uint32_t PointIndex, char CoordinateSpace, char bUseScale); // sub_0x3df3080
	struct FNone GetTransformAtSplineInputKey(float InKey, char CoordinateSpace, char bUseScale); // sub_0x3df2f30
	struct FNone GetTransformAtDistanceAlongSpline(float Distance, char CoordinateSpace, char bUseScale); // sub_0x3df2de0
	struct FNone GetTangentAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity); // sub_0x3df2cc0
	struct FNone GetTangentAtSplinePoint(uint32_t PointIndex, char CoordinateSpace); // sub_0x3df14a0
	struct FNone GetTangentAtSplineInputKey(float InKey, char CoordinateSpace); // sub_0x3df2be0
	struct FNone GetTangentAtDistanceAlongSpline(float Distance, char CoordinateSpace); // sub_0x3df2b00
	char GetSplinePointType(uint32_t PointIndex); // sub_0x3df2a70
	float GetSplineLength(); // sub_0x3df2a40
	struct FNone GetScaleAtTime(float Time, char bUseConstantVelocity); // sub_0x3df28d0
	struct FNone GetScaleAtSplinePoint(uint32_t PointIndex); // sub_0x3df2830
	struct FNone GetScaleAtSplineInputKey(float InKey); // sub_0x3df2790
	struct FNone GetScaleAtDistanceAlongSpline(float Distance); // sub_0x3df26f0
	struct FNone GetRotationAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity); // sub_0x3df25d0
	struct FNone GetRotationAtSplinePoint(uint32_t PointIndex, char CoordinateSpace); // sub_0x3df2500
	struct FNone GetRotationAtSplineInputKey(float InKey, char CoordinateSpace); // sub_0x3df2420
	struct FNone GetRotationAtDistanceAlongSpline(float Distance, char CoordinateSpace); // sub_0x3df2340
	float GetRollAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity); // sub_0x3df2230
	float GetRollAtSplinePoint(uint32_t PointIndex, char CoordinateSpace); // sub_0x3df2170
	float GetRollAtSplineInputKey(float InKey, char CoordinateSpace); // sub_0x3df20a0
	float GetRollAtDistanceAlongSpline(float Distance, char CoordinateSpace); // sub_0x3df1fd0
	struct FNone GetRightVectorAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity); // sub_0x3df1eb0
	struct FNone GetRightVectorAtSplinePoint(uint32_t PointIndex, char CoordinateSpace); // sub_0x3df1de0
	struct FNone GetRightVectorAtSplineInputKey(float InKey, char CoordinateSpace); // sub_0x3df1d00
	struct FNone GetRightVectorAtDistanceAlongSpline(float Distance, char CoordinateSpace); // sub_0x3df1c20
	uint32_t GetNumberOfSplineSegments(); // sub_0x3df1bf0
	uint32_t GetNumberOfSplinePoints(); // sub_0x3df1bc0
	struct FNone GetLocationAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity); // sub_0x3df1aa0
	struct FNone GetLocationAtSplinePoint(uint32_t PointIndex, char CoordinateSpace); // sub_0x3df19d0
	struct FNone GetLocationAtSplineInputKey(float InKey, char CoordinateSpace); // sub_0x3df18f0
	struct FNone GetLocationAtDistanceAlongSpline(float Distance, char CoordinateSpace); // sub_0x3df1810
	void GetLocationAndTangentAtSplinePoint(uint32_t PointIndex, struct FNone& Location, struct FNone& Tangent, char CoordinateSpace); // sub_0x3df16a0
	void GetLocalLocationAndTangentAtSplinePoint(uint32_t PointIndex, struct FNone& LocalLocation, struct FNone& LocalTangent); // sub_0x3df1570
	struct FNone GetLeaveTangentAtSplinePoint(uint32_t PointIndex, char CoordinateSpace); // sub_0x3df14a0
	float GetInputKeyAtDistanceAlongSpline(float Distance); // sub_0x3df1410
	float GetFloatPropertyAtSplinePoint(uint32_t Index, struct FName PropertyName); // sub_0x3df1350
	float GetFloatPropertyAtSplineInputKey(float InKey, struct FName PropertyName); // sub_0x3df1280
	float GetDistanceAlongSplineAtSplinePoint(uint32_t PointIndex); // sub_0x3df11f0
	struct FNone GetDirectionAtTime(float Time, char CoordinateSpace, char bUseConstantVelocity); // sub_0x3df10d0
	struct FNone GetDirectionAtSplinePoint(uint32_t PointIndex, char CoordinateSpace); // sub_0x3df1000
	struct FNone GetDirectionAtSplineInputKey(float InKey, char CoordinateSpace); // sub_0x3df0f20
	struct FNone GetDirectionAtDistanceAlongSpline(float Distance, char CoordinateSpace); // sub_0x3df0e40
	struct FNone GetDefaultUpVector(char CoordinateSpace); // sub_0x3df0da0
	struct FNone GetArriveTangentAtSplinePoint(uint32_t PointIndex, char CoordinateSpace); // sub_0x3df0cd0
	struct FNone FindUpVectorClosestToWorldLocation(struct FNone& WorldLocation, char CoordinateSpace); // sub_0x3df0be0
	struct FNone FindTransformClosestToWorldLocation(struct FNone& WorldLocation, char CoordinateSpace, char bUseScale); // sub_0x3df0a90
	struct FNone FindTangentClosestToWorldLocation(struct FNone& WorldLocation, char CoordinateSpace); // sub_0x3df09a0
	struct FNone FindScaleClosestToWorldLocation(struct FNone& WorldLocation); // sub_0x3df08f0
	struct FNone FindRotationClosestToWorldLocation(struct FNone& WorldLocation, char CoordinateSpace); // sub_0x3df0800
	float FindRollClosestToWorldLocation(struct FNone& WorldLocation, char CoordinateSpace); // sub_0x3df0720
	struct FNone FindRightVectorClosestToWorldLocation(struct FNone& WorldLocation, char CoordinateSpace); // sub_0x3df0630
	struct FNone FindLocationClosestToWorldLocation(struct FNone& WorldLocation, char CoordinateSpace); // sub_0x3df0540
	float FindInputKeyClosestToWorldLocation(struct FNone& WorldLocation); // sub_0x3df04a0
	struct FNone FindDirectionClosestToWorldLocation(struct FNone& WorldLocation, char CoordinateSpace); // sub_0x3df03b0
	void ClearSplinePoints(char bUpdateSpline); // sub_0x3df0320
	void AddSplineWorldPoint(struct FNone& Position); // sub_0x3df0280
	void AddSplinePointAtIndex(struct FNone& Position, uint32_t Index, char CoordinateSpace, char bUpdateSpline); // sub_0x3df0120
	void AddSplinePoint(struct FNone& Position, char CoordinateSpace, char bUpdateSpline); // sub_0x3df0010
	void AddSplineLocalPoint(struct FNone& Position); // sub_0x3deff80
	void AddPoints(struct TArray<None>& Points, char bUpdateSpline); // sub_0x3defe80
	void AddPoint(struct FNone& Point, char bUpdateSpline); // sub_0x3defd70
};

// Class Engine.Commandlet
// Size: 0x80 (Inherited: 0x28)
struct UCommandlet : UObject 
{
	struct FString                                HelpDescription;                                             // 0x28(0x10)
	struct FString                                HelpUsage;                                                   // 0x38(0x10)
	struct FString                                HelpWebLink;                                                 // 0x48(0x10)
	struct TArray<None>                           HelpParamNames;                                              // 0x58(0x10)
	struct TArray<None>                           HelpParamDescriptions;                                       // 0x68(0x10)
	char                                          IsServer : 0;                                                // 0x78(0x01)
	char                                          IsClient : 0;                                                // 0x78(0x01)
	char                                          IsEditor : 0;                                                // 0x78(0x01)
	char                                          LogToConsole : 0;                                            // 0x78(0x01)
	char                                          ShowErrorCount : 0;                                          // 0x78(0x01)
	char                                          ShowProgress : 0;                                            // 0x78(0x01)
	char                                          UnknownData78[0x8];                                          // 0x78(0x08)
};

// Class Engine.AudioComponent
// Size: 0x820 (Inherited: 0x240)
struct UAudioComponent : USceneComponent 
{
	struct FNone*                                 Sound;                                                       // 0x238(0x08)
	struct TArray<None>                           InstanceParameters;                                          // 0x240(0x10)
	struct FNone*                                 SoundClassOverride;                                          // 0x250(0x08)
	char                                          bAutoDestroy : 0;                                            // 0x258(0x01)
	char                                          bStopWhenOwnerDestroyed : 0;                                 // 0x258(0x01)
	char                                          bShouldRemainActiveIfDropped : 0;                            // 0x258(0x01)
	char                                          bAllowSpatialization : 0;                                    // 0x258(0x01)
	char                                          bOverrideAttenuation : 0;                                    // 0x258(0x01)
	char                                          bOverrideSubtitlePriority : 0;                               // 0x258(0x01)
	char                                          bIsUISound : 0;                                              // 0x258(0x01)
	char                                          bEnableLowPassFilter : 0;                                    // 0x258(0x01)
	char                                          bOverridePriority : 0;                                       // 0x259(0x01)
	char                                          bSuppressSubtitles : 0;                                      // 0x259(0x01)
	char                                          bAutoManageAttachment : 0;                                   // 0x25a(0x01)
	struct FName                                  AudioComponentUserID;                                        // 0x260(0x08)
	float                                         PitchModulationMin;                                          // 0x268(0x04)
	float                                         PitchModulationMax;                                          // 0x26c(0x04)
	float                                         VolumeModulationMin;                                         // 0x270(0x04)
	float                                         VolumeModulationMax;                                         // 0x274(0x04)
	float                                         VolumeMultiplier;                                            // 0x278(0x04)
	uint32_t                                      EnvelopeFollowerAttackTime;                                  // 0x27c(0x04)
	uint32_t                                      EnvelopeFollowerReleaseTime;                                 // 0x280(0x04)
	float                                         Priority;                                                    // 0x284(0x04)
	float                                         SubtitlePriority;                                            // 0x288(0x04)
	char                                          UnknownData28C[0x4];                                         // 0x28c(0x04)
	struct FNone*                                 SourceEffectChain;                                           // 0x290(0x08)
	float                                         PitchMultiplier;                                             // 0x298(0x04)
	float                                         LowPassFilterFrequency;                                      // 0x29c(0x04)
	char                                          UnknownData2A0[0x8];                                         // 0x2a0(0x08)
	struct FNone*                                 AttenuationSettings;                                         // 0x2a8(0x08)
	struct FNone                                  AttenuationOverrides;                                        // 0x2b0(0x3a0)
	struct FNone*                                 ConcurrencySettings;                                         // 0x650(0x08)
	struct TSet<None>                             ConcurrencySet;                                              // 0x658(0x50)
	char                                          UnknownData6A8[0xc];                                         // 0x6a8(0x0c)
	enum class None                               AutoAttachLocationRule;                                      // 0x6b4(0x01)
	enum class None                               AutoAttachRotationRule;                                      // 0x6b5(0x01)
	enum class None                               AutoAttachScaleRule;                                         // 0x6b6(0x01)
	char                                          UnknownData6B7[0x1];                                         // 0x6b7(0x01)
	struct FMulticastInlineDelegate               OnAudioFinished;                                             // 0x6b8(0x10)
	char                                          UnknownData6C8[0x18];                                        // 0x6c8(0x18)
	struct FMulticastInlineDelegate               OnAudioPlaybackPercent;                                      // 0x6e0(0x10)
	char                                          UnknownData6F0[0x18];                                        // 0x6f0(0x18)
	struct FMulticastInlineDelegate               OnAudioSingleEnvelopeValue;                                  // 0x708(0x10)
	char                                          UnknownData718[0x18];                                        // 0x718(0x18)
	struct FMulticastInlineDelegate               OnAudioMultiEnvelopeValue;                                   // 0x730(0x10)
	char                                          UnknownData740[0x18];                                        // 0x740(0x18)
	struct FNone                                  Modulation;                                                  // 0x758(0x10)
	struct FDelegate                              OnQueueSubtitles;                                            // 0x768(0x10)
	struct TWeakObjectPtr<struct FNone>           AutoAttachParent;                                            // 0x778(0x08)
	struct FName                                  AutoAttachSocketName;                                        // 0x780(0x08)
	char                                          UnknownData788[0x98];                                        // 0x788(0x98)

	void StopDelayed(float DelayTime); // sub_0x3c759a0
	void Stop(); // sub_0x3c75980
	void SetWaveParameter(struct FName InName, struct FNone* InWave); // sub_0x3c758c0
	void SetVolumeMultiplier(float NewVolumeMultiplier); // sub_0x3c75840
	void SetUISound(char bInUISound); // sub_0x3c757b0
	void SetSubmixSend(struct FNone* Submix, float SendLevel); // sub_0x3c756e0
	void SetSourceBusSendPreEffect(struct FNone* SoundSourceBus, float SourceBusSendLevel); // sub_0x3c75610
	void SetSourceBusSendPostEffect(struct FNone* SoundSourceBus, float SourceBusSendLevel); // sub_0x3c75540
	void SetSound(struct FNone* NewSound); // sub_0x3c754c0
	void SetPitchMultiplier(float NewPitchMultiplier); // sub_0x3c75310
	void SetPaused(char bPause); // sub_0x3c75280
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency); // sub_0x3c75200
	void SetLowPassFilterEnabled(char InLowPassFilterEnabled); // sub_0x3c75170
	void SetIntParameter(struct FName InName, uint32_t inInt); // sub_0x3c75010
	void SetFloatParameter(struct FName InName, float InFloat); // sub_0x3c74f40
	void SetBoolParameter(struct FName InName, char InBool); // sub_0x3c74de0
	void Play(float StartTime); // sub_0x3c74d60
	char IsPlaying(); // sub_0x3c74d10
	char HasCookedFFTData(); // sub_0x3c74ce0
	char HasCookedAmplitudeEnvelopeData(); // sub_0x3c74cb0
	enum class None GetPlayState(); // sub_0x3c74c80
	char GetCookedFFTDataForAllPlayingSounds(struct TArray<None>& OutSoundWaveSpectralData); // sub_0x3c74ba0
	char GetCookedFFTData(struct TArray<None>& FrequenciesToGet, struct TArray<None>& OutSoundWaveSpectralData); // sub_0x3c74a70
	char GetCookedEnvelopeDataForAllPlayingSounds(struct TArray<None>& OutEnvelopeData); // sub_0x3c749b0
	char GetCookedEnvelopeData(float& OutEnvelopeData); // sub_0x3c74900
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, enum class None FadeCurve); // sub_0x3c747f0
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, enum class None FadeCurve); // sub_0x3c746a0
	char BP_GetAttenuationSettingsToApply(struct FNone& OutAttenuationSettings); // sub_0x3c745d0
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, enum class None FadeCurve); // sub_0x3c744d0
	void AdjustAttenuation(struct FNone& InAttenuationSettings); // sub_0x3c74400
};

// Class Engine.AssetImportData
// Size: 0x28 (Inherited: 0x28)
struct UAssetImportData : UObject 
{
};

// Class Engine.AssetUserData
// Size: 0x28 (Inherited: 0x28)
struct UAssetUserData : UObject 
{
};

// Class Engine.SaveGame
// Size: 0x28 (Inherited: 0x28)
struct USaveGame : UObject 
{
};

// Class Engine.Info
// Size: 0x310 (Inherited: 0x310)
struct AInfo : AActor 
{
};

// Class Engine.GameModeBase
// Size: 0x3b0 (Inherited: 0x310)
struct AGameModeBase : AInfo 
{
	struct FString                                OptionsString;                                               // 0x310(0x10)
	struct FNone*                                 GameSessionClass;                                            // 0x320(0x08)
	struct FNone*                                 GameStateClass;                                              // 0x328(0x08)
	struct FNone*                                 PlayerControllerClass;                                       // 0x330(0x08)
	struct FNone*                                 PlayerStateClass;                                            // 0x338(0x08)
	struct FNone*                                 HUDClass;                                                    // 0x340(0x08)
	struct FNone*                                 DefaultPawnClass;                                            // 0x348(0x08)
	struct FNone*                                 SpectatorClass;                                              // 0x350(0x08)
	struct FNone*                                 ReplaySpectatorPlayerControllerClass;                        // 0x358(0x08)
	struct FNone*                                 ServerStatReplicatorClass;                                   // 0x360(0x08)
	struct FNone*                                 GameSession;                                                 // 0x368(0x08)
	struct FNone*                                 GameState;                                                   // 0x370(0x08)
	struct FNone*                                 ServerStatReplicator;                                        // 0x378(0x08)
	struct FText                                  DefaultPlayerName;                                           // 0x380(0x18)
	char                                          bUseSeamlessTravel : 0;                                      // 0x398(0x01)
	char                                          bStartPlayersAsSpectators : 0;                               // 0x398(0x01)
	char                                          bPauseable : 0;                                              // 0x398(0x01)
	char                                          UnknownData398[0x18];                                        // 0x398(0x18)

	void StartPlay(); // sub_0x3ccb780
	struct FNone* SpawnDefaultPawnFor(struct FNone* NewPlayer, struct FNone* StartSpot); // sub_0x3ccb690
	struct FNone* SpawnDefaultPawnAtTransform(struct FNone* NewPlayer, struct FNone& SpawnTransform); // sub_0x3ccb570
	char ShouldReset(struct FNone* ActorToReset); // sub_0x3ccb4d0
	void ReturnToMainMenuHost(); // sub_0x3ccb380
	void RestartPlayerAtTransform(struct FNone* NewPlayer, struct FNone& SpawnTransform); // sub_0x3ccb260
	void RestartPlayerAtPlayerStart(struct FNone* NewPlayer, struct FNone* StartSpot); // sub_0x3ccb190
	void RestartPlayer(struct FNone* NewPlayer); // sub_0x3ccb100
	void ResetLevel(); // sub_0x3ccb0c0
	char PlayerCanRestart(struct FNone* Player); // sub_0x3ccafc0
	char MustSpectate(struct FNone* NewPlayerController); // sub_0x3ccaf20
	void K2_PostLogin(struct FNone* NewPlayer); // sub_0x239bfb0
	void K2_OnSwapPlayerControllers(struct FNone* OldPC, struct FNone* NewPC); // sub_0x239bfb0
	void K2_OnRestartPlayer(struct FNone* NewPlayer); // sub_0x239bfb0
	void K2_OnLogout(struct FNone* ExitingController); // sub_0x239bfb0
	void K2_OnChangeName(struct FNone* Other, struct FString NewName, char bNameChange); // sub_0x239bfb0
	struct FNone* K2_FindPlayerStart(struct FNone* Player, struct FString IncomingName); // sub_0x3ccae30
	void InitStartSpot(struct FNone* StartSpot, struct FNone* NewPlayer); // sub_0x3ccad30
	void InitializeHUDForPlayer(struct FNone* NewPlayer); // sub_0x3cb5c50
	char HasMatchStarted(); // sub_0x3ccad00
	void HandleStartingNewPlayer(struct FNone* NewPlayer); // sub_0x3ccac40
	uint32_t GetNumSpectators(); // sub_0x3ccac10
	uint32_t GetNumPlayers(); // sub_0x3ccabe0
	struct FNone* GetDefaultPawnClassForController(struct FNone* InController); // sub_0x3ccab20
	struct FNone* FindPlayerStart(struct FNone* Player, struct FString IncomingName); // sub_0x3ccaa20
	struct FNone* ChoosePlayerStart(struct FNone* Player); // sub_0x3cca840
	void ChangeName(struct FNone* Controller, struct FString NewName, char bNameChange); // sub_0x3cca710
	char CanSpectate(struct FNone* Viewer, struct FNone* ViewTarget); // sub_0x3cca640
};

// Class Engine.GameMode
// Size: 0x3f8 (Inherited: 0x3b0)
struct AGameMode : AGameModeBase 
{
	struct FName                                  MatchState;                                                  // 0x3b0(0x08)
	char                                          bDelayedStart : 0;                                           // 0x3b8(0x01)
	char                                          UnknownData3B8[0x4];                                         // 0x3b8(0x04)
	uint32_t                                      NumSpectators;                                               // 0x3bc(0x04)
	uint32_t                                      NumPlayers;                                                  // 0x3c0(0x04)
	uint32_t                                      NumBots;                                                     // 0x3c4(0x04)
	float                                         MinRespawnDelay;                                             // 0x3c8(0x04)
	uint32_t                                      NumTravellingPlayers;                                        // 0x3cc(0x04)
	struct FNone*                                 EngineMessageClass;                                          // 0x3d0(0x08)
	struct TArray<None>                           InactivePlayerArray;                                         // 0x3d8(0x10)
	float                                         InactivePlayerStateLifeSpan;                                 // 0x3e8(0x04)
	uint32_t                                      MaxInactivePlayers;                                          // 0x3ec(0x04)
	char                                          bHandleDedicatedServerReplays : 0;                           // 0x3f0(0x01)
	char                                          UnknownData3F0[0x8];                                         // 0x3f0(0x08)

	void StartMatch(); // sub_0x3ccb760
	void SetBandwidthLimit(float AsyncIOBandwidthLimit); // sub_0x3ccb450
	void Say(struct FString Msg); // sub_0x3ccb3a0
	void RestartGame(); // sub_0x3ccb0e0
	char ReadyToStartMatch(); // sub_0x3ccb090
	char ReadyToEndMatch(); // sub_0x3ccb060
	void K2_OnSetMatchState(struct FName NewState); // sub_0x239bfb0
	char IsMatchInProgress(); // sub_0x3ccae00
	char HasMatchEnded(); // sub_0x3ccacd0
	struct FName GetMatchState(); // sub_0x3ccabc0
	void EndMatch(); // sub_0x3ccaa00
	void AbortMatch(); // sub_0x20129a0
};

// Class Engine.GameStateBase
// Size: 0x360 (Inherited: 0x310)
struct AGameStateBase : AInfo 
{
	struct FNone*                                 GameModeClass;                                               // 0x310(0x08)
	struct FNone*                                 AuthorityGameMode;                                           // 0x318(0x08)
	struct FNone*                                 SpectatorClass;                                              // 0x320(0x08)
	struct TArray<None>                           PlayerArray;                                                 // 0x328(0x10)
	char                                          bReplicatedHasBegunPlay : 0;                                 // 0x338(0x01)
	char                                          UnknownData338[0x4];                                         // 0x338(0x04)
	float                                         ReplicatedWorldTimeSeconds;                                  // 0x33c(0x04)
	float                                         ServerWorldTimeSecondsDelta;                                 // 0x340(0x04)
	float                                         ServerWorldTimeSecondsUpdateFrequency;                       // 0x344(0x04)
	char                                          UnknownData348[0x18];                                        // 0x348(0x18)

	void OnRep_SpectatorClass(); // sub_0x1f0eb10
	void OnRep_ReplicatedWorldTimeSeconds(); // sub_0x1f9a560
	void OnRep_ReplicatedHasBegunPlay(); // sub_0x1f0eb30
	void OnRep_GameModeClass(); // sub_0x3ca4850
	char HasMatchStarted(); // sub_0x3cdaef0
	char HasBegunPlay(); // sub_0x3cdaec0
	float GetServerWorldTimeSeconds(); // sub_0x3cdadf0
	float GetPlayerStartTime(struct FNone* Controller); // sub_0x3cda900
	float GetPlayerRespawnDelay(struct FNone* Controller); // sub_0x3cda860
};

// Class Engine.GameState
// Size: 0x380 (Inherited: 0x360)
struct AGameState : AGameStateBase 
{
	struct FName                                  MatchState;                                                  // 0x360(0x08)
	struct FName                                  PreviousMatchState;                                          // 0x368(0x08)
	uint32_t                                      ElapsedTime;                                                 // 0x370(0x04)
	char                                          UnknownData374[0xc];                                         // 0x374(0x0c)

	void OnRep_MatchState(); // sub_0x3ccb0c0
	void OnRep_ElapsedTime(); // sub_0x3ccb380
};

// Class Engine.Controller
// Size: 0x3b0 (Inherited: 0x310)
struct AController : AActor 
{
	char                                          UnknownData310[0x38];                                        // 0x310(0x38)
	struct FNone*                                 PlayerState;                                                 // 0x348(0x08)
	char                                          UnknownData350[0x38];                                        // 0x350(0x38)
	struct FMulticastInlineDelegate               OnInstigatedAnyDamage;                                       // 0x388(0x10)
	struct FName                                  StateName;                                                   // 0x324(0x08)
	struct FNone*                                 Pawn;                                                        // 0x378(0x08)
	struct FNone*                                 Character;                                                   // 0x338(0x08)
	struct FNone*                                 TransformComponent;                                          // 0x330(0x08)
	struct FNone                                  ControlRotation;                                             // 0x39c(0x0c)
	char                                          bAttachToPawn : 0;                                           // 0x32c(0x01)

	void UnPossess(); // sub_0x3ca4bb0
	void StopMovement(); // sub_0x1f1ab10
	void SetInitialLocationAndRotation(struct FNone& NewLocation, struct FNone& NewRotation); // sub_0x3ca4ac0
	void SetIgnoreMoveInput(char bNewMoveInput); // sub_0x3ca4a30
	void SetIgnoreLookInput(char bNewLookInput); // sub_0x3ca49a0
	void SetControlRotation(struct FNone& NewRotation); // sub_0x3ca4910
	void ResetIgnoreMoveInput(); // sub_0x201af20
	void ResetIgnoreLookInput(); // sub_0x1e41730
	void ResetIgnoreInputFlags(); // sub_0x3ca48f0
	void ReceiveUnPossess(struct FNone* UnpossessedPawn); // sub_0x239bfb0
	void ReceivePossess(struct FNone* PossessedPawn); // sub_0x239bfb0
	void ReceiveInstigatedAnyDamage(float Damage, struct FNone* DamageType, struct FNone* DamagedActor, struct FNone* DamageCauser); // sub_0x239bfb0
	void Possess(struct FNone* InPawn); // sub_0x3ca4870
	void OnRep_PlayerState(); // sub_0x3ca4850
	void OnRep_Pawn(); // sub_0x11cdb40
	char LineOfSightTo(struct FNone* Other, struct FNone ViewPoint, char bAlternateChecks); // sub_0x3ca4730
	struct FNone* K2_GetPawn(); // sub_0x3ca4700
	char IsPlayerController(); // sub_0x3ca46d0
	char IsMoveInputIgnored(); // sub_0x3ca46a0
	char IsLookInputIgnored(); // sub_0x3ca4670
	char IsLocalPlayerController(); // sub_0x3ca4620
	char IsLocalController(); // sub_0x3ca45f0
	struct FNone* GetViewTarget(); // sub_0x3ca45c0
	struct FNone GetDesiredRotation(); // sub_0x3ca4580
	struct FNone GetControlRotation(); // sub_0x3ca4540
	void ClientSetRotation(struct FNone NewRotation, char bResetCamera); // sub_0x3ca4460
	void ClientSetLocation(struct FNone NewLocation, struct FNone NewRotation); // sub_0x3ca4380
	struct FNone* CastToPlayerController(); // sub_0x3ca4350
};

// Class Engine.MKPlayerControllerEx
// Size: 0x3b8 (Inherited: 0x3b0)
struct AMKPlayerControllerEx : AController 
{
	struct FNone*                                 SelfPlayerController;                                        // 0x3b0(0x08)
};

// Class Engine.PlayerController
// Size: 0x6f0 (Inherited: 0x3b8)
struct APlayerController : AMKPlayerControllerEx 
{
	char                                          UnknownData3B8[0x158];                                       // 0x3b8(0x158)
	struct FNone*                                 Player;                                                      // 0x510(0x08)
	struct FNone*                                 AcknowledgedPawn;                                            // 0x428(0x08)
	struct FNone*                                 ControllingDirTrackInst;                                     // 0x4f8(0x08)
	char                                          UnknownData528[0xc0];                                        // 0x528(0xc0)
	struct FNone*                                 MyHUD;                                                       // 0x5e8(0x08)
	struct FNone*                                 PlayerCameraManager;                                         // 0x438(0x08)
	struct FNone*                                 PlayerCameraManagerClass;                                    // 0x480(0x08)
	char                                          UnknownData600[0xe4];                                        // 0x600(0xe4)
	char                                          bAutoManageActiveCameraTarget : 0;                           // 0x6e4(0x01)
	struct FNone                                  TargetViewRotation;                                          // 0x664(0x0c)
	float                                         SmoothTargetViewRotationSpeed;                               // 0x640(0x04)
	struct TArray<None>                           HiddenActors;                                                // 0x5b8(0x10)
	struct TArray<None>                           HiddenPrimitiveComponents;                                   // 0x4d0(0x10)
	float                                         LastSpectatorStateSynchTime;                                 // 0x674(0x04)
	struct FNone                                  LastSpectatorSyncLocation;                                   // 0x558(0x0c)
	struct FNone                                  LastSpectatorSyncRotation;                                   // 0x45c(0x0c)
	uint32_t                                      ClientCap;                                                   // 0x478(0x04)
	struct FNone*                                 CheatManager;                                                // 0x568(0x08)
	struct FNone*                                 CheatClass;                                                  // 0x590(0x08)
	struct FNone*                                 PlayerInput;                                                 // 0x518(0x08)
	struct TArray<None>                           ActiveForceFeedbackEffects;                                  // 0x580(0x10)
	char                                          bPlayerIsWaiting : 0;                                        // 0x498(0x01)
	char                                          NetPlayerIndex;                                              // 0x4bc(0x01)
	struct FNone*                                 PendingSwapConnection;                                       // 0x468(0x08)
	struct FNone*                                 NetConnection;                                               // 0x3e0(0x08)
	float                                         InputYawScale;                                               // 0x5e0(0x04)
	float                                         InputPitchScale;                                             // 0x5a8(0x04)
	float                                         InputRollScale;                                              // 0x578(0x04)
	char                                          bShowMouseCursor : 0;                                        // 0x670(0x01)
	char                                          bEnableClickEvents : 0;                                      // 0x5b4(0x01)
	char                                          bEnableTouchEvents : 0;                                      // 0x4e0(0x01)
	char                                          bEnableMouseOverEvents : 0;                                  // 0x670(0x01)
	char                                          bEnableTouchOverEvents : 0;                                  // 0x670(0x01)
	char                                          bForceFeedbackEnabled : 0;                                   // 0x57c(0x01)
	float                                         ForceFeedbackScale;                                          // 0x488(0x04)
	struct TArray<None>                           ClickEventKeys;                                              // 0x4a0(0x10)
	char                                          DefaultMouseCursor;                                          // 0x618(0x01)
	char                                          CurrentMouseCursor;                                          // 0x5e4(0x01)
	char                                          DefaultClickTraceChannel;                                    // 0x47c(0x01)
	char                                          CurrentClickTraceChannel;                                    // 0x48c(0x01)
	float                                         HitResultTraceDistance;                                      // 0x3ec(0x04)
	uint16_t                                      SeamlessTravelCount;                                         // 0x5ac(0x02)
	uint16_t                                      LastCompletedSeamlessTravelCount;                            // 0x540(0x02)
	struct FNone*                                 InactiveStateInputComponent;                                 // 0x490(0x08)
	char                                          bShouldPerformFullTickWhenPaused : 0;                        // 0x570(0x01)
	struct FNone*                                 CurrentTouchInterface;                                       // 0x550(0x08)
	struct FNone*                                 SpectatorPawn;                                               // 0x470(0x08)
	char                                          bIsLocalPlayerController : 0;                                // 0x5c8(0x01)
	struct FNone                                  SpawnLocation;                                               // 0x61c(0x0c)

	char WasInputKeyJustReleased(struct FNone Key); // sub_0x3dab2b0
	char WasInputKeyJustPressed(struct FNone Key); // sub_0x3dab1c0
	void ToggleSpeaking(char bInSpeaking); // sub_0x3dab130
	void TestServerLevelVisibilityChange(struct FName PackageName, struct FName Filename); // sub_0x1f5f6f0
	void SwitchLevel(struct FString URL); // sub_0x3dab080
	void StopHapticEffect(enum class None Hand); // sub_0x3dab000
	void StartFire(char FireModeNum); // sub_0x3daaf80
	void SetVirtualJoystickVisibility(char bVisible); // sub_0x3daaef0
	void SetViewTargetWithBlend(struct FNone* NewViewTarget, float BlendTime, char BlendFunc, float BlendExp, char bLockOutgoing); // sub_0x3daad70
	void SetName(struct FString S); // sub_0x3daacc0
	void SetMouseLocation(uint32_t X, uint32_t Y); // sub_0x3daac00
	void SetMouseCursorWidget(char Cursor, struct FNone* CursorWidget); // sub_0x3daab40
	void SetHapticsByValue(float Frequency, float Amplitude, enum class None Hand); // sub_0x3daaa40
	void SetDisableHaptics(char bNewDisabled); // sub_0x3daa9b0
	void SetControllerLightColor(struct FNone Color); // sub_0x3daa940
	void SetCinematicMode(char bInCinematicMode, char bHidePlayer, char bAffectsHUD, char bAffectsMovement, char bAffectsTurning); // sub_0x3daa780
	void SetAudioListenerOverride(struct FNone* AttachToComponent, struct FNone Location, struct FNone Rotation); // sub_0x3daa660
	void SetAudioListenerAttenuationOverride(struct FNone* AttachToComponent, struct FNone AttenuationLocationOVerride); // sub_0x3daa590
	void ServerViewSelf(struct FNone TransitionParams); // sub_0x3daa4a0
	void ServerViewPrevPlayer(); // sub_0x3daa450
	void ServerViewNextPlayer(); // sub_0x3daa400
	void ServerVerifyViewTarget(); // sub_0x3daa3b0
	void ServerUpdateMultipleLevelsVisibility(struct TArray<None> LevelVisibilities); // sub_0x3daa2f0
	void ServerUpdateLevelVisibility(struct FNone LevelVisibility); // sub_0x3daa230
	void ServerUpdateCamera(struct FNone CamLoc, uint32_t CamPitchAndYaw); // sub_0x3daa110
	void ServerUnmutePlayer(struct FNone PlayerId); // sub_0x3da9fb0
	void ServerToggleAILogging(); // sub_0x3da9f60
	void ServerShortTimeout(); // sub_0x3da9f10
	void ServerSetSpectatorWaiting(char bWaiting); // sub_0x3da9e50
	void ServerSetSpectatorLocation(struct FNone NewLoc, struct FNone NewRot); // sub_0x3da9d20
	void ServerRestartPlayer(); // sub_0x3da9cd0
	void ServerPause(); // sub_0x3da9c80
	void ServerNotifyLoadedWorld(struct FName WorldPackageName); // sub_0x3da9bd0
	void ServerMutePlayer(struct FNone PlayerId); // sub_0x3da9a70
	void ServerExecRPC(struct FString Msg); // sub_0x3da99a0
	void ServerExec(struct FString Msg); // sub_0x1ecded0
	void ServerCheckClientPossessionReliable(); // sub_0x3da9950
	void ServerCheckClientPossession(); // sub_0x3da9900
	void ServerChangeName(struct FString S); // sub_0x3da9830
	void ServerCamera(struct FName NewMode); // sub_0x3da9770
	void ServerAcknowledgePossession(struct FNone* P); // sub_0x3da96b0
	void SendToConsole(struct FString Command); // sub_0x3da9600
	void RestartLevel(); // sub_0x3da95e0
	void ResetMouseCursorWidget(); // sub_0x3da95c0
	void ResetControllerLightColor(); // sub_0x3da95a0
	char ProjectWorldLocationToScreen(struct FNone WorldLocation, struct FNone& ScreenLocation, char bPlayerViewportRelative); // sub_0x3da9470
	void PlayHapticEffect(struct FNone* HapticEffect, enum class None Hand, float Scale, char bLoop); // sub_0x3da9320
	void PlayDynamicForceFeedback(float Intensity, float Duration, char bAffectsLeftLarge, char bAffectsLeftSmall, char bAffectsRightLarge, char bAffectsRightSmall, char Action, struct FNone LatentInfo); // sub_0x3da90a0
	void Pause(); // sub_0x3da9080
	void OnServerStartedVisualLogger(char bIsLogging); // sub_0x3da8ff0
	void LocalTravel(struct FString URL); // sub_0x3da8f40
	void K2_ClientPlayForceFeedback(struct FNone* ForceFeedbackEffect, struct FName Tag, char bLooping, char bIgnoreTimeDilation, char bPlayWhilePaused); // sub_0x3da8d90
	char IsInputKeyDown(struct FNone Key); // sub_0x3da8ca0
	void GetViewportSize(uint32_t& SizeX, uint32_t& SizeY); // sub_0x3da8bc0
	struct FNone* GetSpectatorPawn(); // sub_0x3da8ba0
	char GetMousePosition(float& LocationX, float& LocationY); // sub_0x3da8ab0
	struct FNone GetInputVectorKeyState(struct FNone Key); // sub_0x3da89b0
	void GetInputTouchState(char FingerIndex, float& LocationX, float& LocationY, char& bIsCurrentlyPressed); // sub_0x3da8830
	void GetInputMouseDelta(float& DeltaX, float& DeltaY); // sub_0x3da8750
	void GetInputMotionState(struct FNone& Tilt, struct FNone& RotationRate, struct FNone& Gravity, struct FNone& Acceleration); // sub_0x3da85c0
	float GetInputKeyTimeDown(struct FNone Key); // sub_0x3da84d0
	void GetInputAnalogStickState(char WhichStick, float& StickX, float& StickY); // sub_0x3da83b0
	float GetInputAnalogKeyState(struct FNone Key); // sub_0x3da82c0
	struct FNone* GetHUD(); // sub_0x3da78f0
	char GetHitResultUnderFingerForObjects(char FingerIndex, struct TArray<None>& ObjectTypes, char bTraceComplex, struct FNone& HitResult); // sub_0x3da80f0
	char GetHitResultUnderFingerByChannel(char FingerIndex, char TraceChannel, char bTraceComplex, struct FNone& HitResult); // sub_0x3da7f50
	char GetHitResultUnderFinger(char FingerIndex, char TraceChannel, char bTraceComplex, struct FNone& HitResult); // sub_0x3da7db0
	char GetHitResultUnderCursorForObjects(struct TArray<None>& ObjectTypes, char bTraceComplex, struct FNone& HitResult); // sub_0x3da7c20
	char GetHitResultUnderCursorByChannel(char TraceChannel, char bTraceComplex, struct FNone& HitResult); // sub_0x3da7aa0
	char GetHitResultUnderCursor(char TraceChannel, char bTraceComplex, struct FNone& HitResult); // sub_0x3da7920
	struct FNone GetFocalLocation(); // sub_0x3da78b0
	void FOV(float NewFOV); // sub_0x3da7830
	void EnableCheats(); // sub_0x3da7810
	char DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FNone& WorldLocation, struct FNone& WorldDirection); // sub_0x3da7690
	char DeprojectMousePositionToWorld(struct FNone& WorldLocation, struct FNone& WorldDirection); // sub_0x3da7590
	void ConsoleKey(struct FNone Key); // sub_0x3da74a0
	void ClientWasKicked(struct FText KickReason); // sub_0x3da73e0
	void ClientVoiceHandshakeComplete(); // sub_0x3da73c0
	void ClientUpdateMultipleLevelsStreamingStatus(struct TArray<None> LevelStatuses); // sub_0x3da7320
	void ClientUpdateLevelStreamingStatus(struct FName PackageName, char bNewShouldBeLoaded, char bNewShouldBeVisible, char bNewShouldBlockOnLoad, uint32_t LODIndex); // sub_0x3da7170
	void ClientUnmutePlayer(struct FNone PlayerId); // sub_0x3da7050
	void ClientTravelInternal(struct FString URL, char TravelType, char bSeamless, struct FNone MapPackageGuid); // sub_0x3da6ed0
	void ClientTravel(struct FString URL, char TravelType, char bSeamless, struct FNone MapPackageGuid); // sub_0x3da6d60
	void ClientTeamMessage(struct FNone* SenderPlayerState, struct FString S, struct FName Type, float MsgLifeTime); // sub_0x3da6c00
	void ClientStopForceFeedback(struct FNone* ForceFeedbackEffect, struct FName Tag); // sub_0x3da6b30
	void ClientStopCameraShakesFromSource(struct FNone* SourceComponent, char bImmediately); // sub_0x3da6a60
	void ClientStopCameraShake(struct FNone* Shake, char bImmediately); // sub_0x3da6990
	void ClientStopCameraAnim(struct FNone* AnimToStop); // sub_0x3da6900
	void ClientStartOnlineSession(); // sub_0x3da68e0
	void ClientSpawnCameraLensEffect(struct FNone* LensEffectEmitterClass); // sub_0x3da6850
	void ClientSetViewTarget(struct FNone* A, struct FNone TransitionParams); // sub_0x3da6760
	void ClientSetSpectatorWaiting(char bWaiting); // sub_0x3da66d0
	void ClientSetHUD(struct FNone* NewHUDClass); // sub_0x3da6640
	void ClientSetForceMipLevelsToBeResident(struct FNone* Material, float ForceDuration, uint32_t CinematicTextureGroups); // sub_0x3da6540
	void ClientSetCinematicMode(char bInCinematicMode, char bAffectsMovement, char bAffectsTurning, char bAffectsHUD); // sub_0x3da63d0
	void ClientSetCameraMode(struct FName NewCamMode); // sub_0x3da6340
	void ClientSetCameraFade(char bEnableFading, struct FNone FadeColor, struct FNone FadeAlpha, float FadeTime, char bFadeAudio); // sub_0x3da61b0
	void ClientSetBlockOnAsyncLoading(); // sub_0x3da6190
	void ClientReturnToMainMenuWithTextReason(struct FText ReturnReason); // sub_0x3da60d0
	void ClientReturnToMainMenu(struct FString ReturnReason); // sub_0x3da6020
	void ClientRetryClientRestart(struct FNone* NewPawn); // sub_0x3da5f90
	void ClientRestart(struct FNone* NewPawn); // sub_0x3da5f00
	void ClientReset(); // sub_0x3da5ee0
	void ClientRepObjRef(struct FNone* Object); // sub_0x3da5e50
	void ClientReceiveLocalizedMessage(struct FNone* Message, uint32_t Switch, struct FNone* RelatedPlayerState_2, struct FNone* RelatedPlayerState_3, struct FNone* OptionalObject); // sub_0x3da5cd0
	void ClientPrestreamTextures(struct FNone* ForcedActor, float ForceDuration, char bEnableStreaming, uint32_t CinematicTextureGroups); // sub_0x3da5b80
	void ClientPrepareMapChange(struct FName LevelName, char bFirst, char bLast); // sub_0x3da5a70
	void ClientPlaySoundAtLocation(struct FNone* Sound, struct FNone Location, float VolumeMultiplier, float PitchMultiplier); // sub_0x3da5920
	void ClientPlaySound(struct FNone* Sound, float VolumeMultiplier, float PitchMultiplier); // sub_0x3da5820
	void ClientPlayForceFeedback_Internal(struct FNone* ForceFeedbackEffect, struct FNone Params); // sub_0x3da5730
	void ClientPlayCameraShakeFromSource(struct FNone* Shake, struct FNone* SourceComponent); // sub_0x3da5670
	void ClientPlayCameraShake(struct FNone* Shake, float Scale, char PlaySpace, struct FNone UserPlaySpaceRot); // sub_0x3da5510
	void ClientPlayCameraAnim(struct FNone* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, char bLoop, char bRandomStartTime, char Space, struct FNone CustomPlaySpace); // sub_0x3da5270
	void ClientMutePlayer(struct FNone PlayerId); // sub_0x3da5150
	void ClientMessage(struct FString S, struct FName Type, float MsgLifeTime); // sub_0x3da5020
	void ClientIgnoreMoveInput(char bIgnore); // sub_0x3da4f90
	void ClientIgnoreLookInput(char bIgnore); // sub_0x3da4f00
	void ClientGotoState(struct FName NewState); // sub_0x3da4e70
	void ClientGameEnded(struct FNone* EndGameFocus, char bIsWinner); // sub_0x3da4da0
	void ClientForceGarbageCollection(); // sub_0x3da4d80
	void ClientFlushLevelStreaming(); // sub_0x3da4d60
	void ClientEndOnlineSession(); // sub_0x3da4d40
	void ClientEnableNetworkVoice(char bEnable); // sub_0x3da4cb0
	void ClientCommitMapChange(); // sub_0x3da4c90
	void ClientClearCameraLensEffects(); // sub_0x3da4c70
	void ClientCapBandwidth(uint32_t Cap); // sub_0x3da4be0
	void ClientCancelPendingMapChange(); // sub_0x3da4bc0
	void ClientAddTextureStreamingLoc(struct FNone InLoc, float Duration, char bOverrideLocation); // sub_0x3da4aa0
	void ClearAudioListenerOverride(); // sub_0x3da4a80
	void ClearAudioListenerAttenuationOverride(); // sub_0x3da4a60
	char CanRestartPlayer(); // sub_0x3da4a30
	void Camera(struct FName NewMode); // sub_0x3da49a0
	void AddYawInput(float Val); // sub_0x3da4920
	void AddRollInput(float Val); // sub_0x3da48a0
	void AddPitchInput(float Val); // sub_0x3da4820
	void ActivateTouchInterface(struct FNone* NewTouchInterface); // sub_0x3da4790
};

// Class Engine.ApplicationLifecycleComponent
// Size: 0x140 (Inherited: 0xb0)
struct UApplicationLifecycleComponent : UActorComponent 
{
	struct FMulticastInlineDelegate               ApplicationWillDeactivateDelegate;                           // 0xb0(0x10)
	struct FMulticastInlineDelegate               ApplicationHasReactivatedDelegate;                           // 0xc0(0x10)
	struct FMulticastInlineDelegate               ApplicationWillEnterBackgroundDelegate;                      // 0xd0(0x10)
	struct FMulticastInlineDelegate               ApplicationHasEnteredForegroundDelegate;                     // 0xe0(0x10)
	struct FMulticastInlineDelegate               ApplicationWillTerminateDelegate;                            // 0xf0(0x10)
	struct FMulticastInlineDelegate               ApplicationShouldUnloadResourcesDelegate;                    // 0x100(0x10)
	struct FMulticastInlineDelegate               ApplicationReceivedStartupArgumentsDelegate;                 // 0x110(0x10)
	struct FMulticastInlineDelegate               OnTemperatureChangeDelegate;                                 // 0x120(0x10)
	struct FMulticastInlineDelegate               OnLowPowerModeDelegate;                                      // 0x130(0x10)
};

// Class Engine.MovementComponent
// Size: 0xf0 (Inherited: 0xb0)
struct UMovementComponent : UActorComponent 
{
	struct FNone*                                 UpdatedComponent;                                            // 0xb0(0x08)
	struct FNone*                                 UpdatedPrimitive;                                            // 0xb8(0x08)
	char                                          UnknownDataC0[0x4];                                          // 0xc0(0x04)
	struct FNone                                  Velocity;                                                    // 0xc4(0x0c)
	struct FNone                                  PlaneConstraintNormal;                                       // 0xd0(0x0c)
	struct FNone                                  PlaneConstraintOrigin;                                       // 0xdc(0x0c)
	char                                          bUpdateOnlyIfRendered : 0;                                   // 0xe8(0x01)
	char                                          bAutoUpdateTickRegistration : 0;                             // 0xe8(0x01)
	char                                          bTickBeforeOwner : 0;                                        // 0xe8(0x01)
	char                                          bAutoRegisterUpdatedComponent : 0;                           // 0xe8(0x01)
	char                                          bConstrainToPlane : 0;                                       // 0xe8(0x01)
	char                                          bSnapToPlaneAtStart : 0;                                     // 0xe8(0x01)
	char                                          bAutoRegisterPhysicsVolumeUpdates : 0;                       // 0xe8(0x01)
	char                                          bComponentShouldUpdatePhysicsVolume : 0;                     // 0xe8(0x01)
	char                                          UnknownDataE8[0x3];                                          // 0xe8(0x03)
	enum class None                               PlaneConstraintAxisSetting;                                  // 0xeb(0x01)
	char                                          UnknownDataEC[0x4];                                          // 0xec(0x04)

	void StopMovementImmediately(); // sub_0x203f6b0
	void SnapUpdatedComponentToPlane(); // sub_0x3d7e260
	void SetUpdatedComponent(struct FNone* NewUpdatedComponent); // sub_0x11f5b50
	void SetPlaneConstraintOrigin(struct FNone PlaneOrigin); // sub_0x3d7e1d0
	void SetPlaneConstraintNormal(struct FNone PlaneNormal); // sub_0x3d7e140
	void SetPlaneConstraintFromVectors(struct FNone Forward, struct FNone Up); // sub_0x3d7e060
	void SetPlaneConstraintEnabled(char bEnabled); // sub_0x3d7dfd0
	void SetPlaneConstraintAxisSetting(enum class None NewAxisSetting); // sub_0x3d7df50
	void PhysicsVolumeChanged(struct FNone* NewVolume); // sub_0x3d7dec0
	char K2_MoveUpdatedComponent(struct FNone Delta, struct FNone NewRotation, struct FNone& OutHit, char bSweep, char bTeleport); // sub_0x3d7dcc0
	float K2_GetModifiedMaxSpeed(); // sub_0x3d7dc80
	float K2_GetMaxSpeedModifier(); // sub_0x3d7dc40
	char IsExceedingMaxSpeed(float MaxSpeed); // sub_0x3d7dbb0
	struct FNone GetPlaneConstraintOrigin(); // sub_0x3d7db70
	struct FNone GetPlaneConstraintNormal(); // sub_0x3d7db30
	enum class None GetPlaneConstraintAxisSetting(); // sub_0x3d7db10
	struct FNone* GetPhysicsVolume(); // sub_0x3d7dae0
	float GetMaxSpeed(); // sub_0x3d7daa0
	float GetGravityZ(); // sub_0x3d7da60
	struct FNone ConstrainNormalToPlane(struct FNone Normal); // sub_0x3d7d9b0
	struct FNone ConstrainLocationToPlane(struct FNone Location); // sub_0x3d7d900
	struct FNone ConstrainDirectionToPlane(struct FNone Direction); // sub_0x3d7d850
};

// Class Engine.NavMovementComponent
// Size: 0x130 (Inherited: 0xf0)
struct UNavMovementComponent : UMovementComponent 
{
	struct FNone                                  NavAgentProps;                                               // 0xf0(0x30)
	float                                         FixedPathBrakingDistance;                                    // 0x120(0x04)
	char                                          bUpdateNavAgentWithOwnersCollision : 0;                      // 0x124(0x01)
	char                                          bUseAccelerationForPaths : 0;                                // 0x124(0x01)
	char                                          bUseFixedBrakingDistanceForPaths : 0;                        // 0x124(0x01)
	char                                          UnknownData124[0x1];                                         // 0x124(0x01)
	struct FNone                                  MovementState;                                               // 0x125(0x01)
	char                                          UnknownData126[0x2];                                         // 0x126(0x02)
	struct FNone*                                 PathFollowingComp;                                           // 0x128(0x08)

	void StopMovementKeepPathing(); // sub_0x3d82ed0
	void StopActiveMovement(); // sub_0x3d82eb0
	char IsSwimming(); // sub_0x3d82ce0
	char IsMovingOnGround(); // sub_0x3c9b580
	char IsFlying(); // sub_0x3d82cb0
	char IsFalling(); // sub_0x3d82c80
	char IsCrouching(); // sub_0x3c74d10
};

// Class Engine.PawnMovementComponent
// Size: 0x138 (Inherited: 0x130)
struct UPawnMovementComponent : UNavMovementComponent 
{
	struct FNone*                                 PawnOwner;                                                   // 0x130(0x08)

	struct FNone K2_GetInputVector(); // sub_0x3d97c50
	char IsMoveInputIgnored(); // sub_0x3d97d90
	struct FNone GetPendingInputVector(); // sub_0x3d97c50
	struct FNone* GetPawnOwner(); // sub_0x3d97c20
	struct FNone GetLastInputVector(); // sub_0x3d97aa0
	struct FNone ConsumeInputVector(); // sub_0x3d978c0
	void AddInputVector(struct FNone WorldVector, char bForce); // sub_0x3d97360
};

// Class Engine.CharacterMovementComponent
// Size: 0x6f0 (Inherited: 0x138)
struct UCharacterMovementComponent : UPawnMovementComponent 
{
	char                                          UnknownData138[0x178];                                       // 0x138(0x178)
	struct FNone*                                 CharacterOwner;                                              // 0x2b0(0x08)
	char                                          UnknownData2B8[0x34];                                        // 0x2b8(0x34)
	float                                         GravityScale;                                                // 0x2ec(0x04)
	char                                          UnknownData2F0[0x178];                                       // 0x2f0(0x178)
	float                                         MaxStepHeight;                                               // 0x468(0x04)
	char                                          UnknownData46C[0x8];                                         // 0x46c(0x08)
	float                                         JumpZVelocity;                                               // 0x474(0x04)
	char                                          UnknownData478[0x250];                                       // 0x478(0x250)
	float                                         JumpOffJumpZFactor;                                          // 0x6c8(0x04)
	float                                         WalkableFloorAngle;                                          // 0x4f8(0x04)
	float                                         WalkableFloorZ;                                              // 0x488(0x04)
	char                                          MovementMode;                                                // 0x438(0x01)
	char                                          CustomMovementMode;                                          // 0x56c(0x01)
	enum class None                               NetworkSmoothingMode;                                        // 0x280(0x01)
	float                                         GroundFriction;                                              // 0x470(0x04)
	float                                         MaxWalkSpeed;                                                // 0x300(0x04)
	char                                          UnknownData6DF[0x1];                                         // 0x6df(0x01)
	float                                         MaxWalkSpeedCrouched;                                        // 0x6e0(0x04)
	float                                         MaxSwimSpeed;                                                // 0x548(0x04)
	float                                         MaxFlySpeed;                                                 // 0x4e8(0x04)
	float                                         MaxCustomMovementSpeed;                                      // 0x460(0x04)
	float                                         MaxAcceleration;                                             // 0x484(0x04)
	float                                         MinAnalogWalkSpeed;                                          // 0x4e0(0x04)
	float                                         BrakingFrictionFactor;                                       // 0x2a0(0x04)
	float                                         BrakingFriction;                                             // 0x54c(0x04)
	float                                         BrakingSubStepTime;                                          // 0x6bc(0x04)
	float                                         BrakingDecelerationWalking;                                  // 0x554(0x04)
	float                                         BrakingDecelerationFalling;                                  // 0x51c(0x04)
	float                                         BrakingDecelerationSwimming;                                 // 0x414(0x04)
	float                                         BrakingDecelerationFlying;                                   // 0x568(0x04)
	float                                         AirControl;                                                  // 0x544(0x04)
	float                                         AirControlBoostMultiplier;                                   // 0x308(0x04)
	float                                         AirControlBoostVelocityThreshold;                            // 0x3f4(0x04)
	float                                         FallingLateralFriction;                                      // 0x3f0(0x04)
	float                                         CrouchedHalfHeight;                                          // 0x264(0x04)
	float                                         Buoyancy;                                                    // 0x40c(0x04)
	float                                         PerchRadiusThreshold;                                        // 0x244(0x04)
	float                                         PerchAdditionalHeight;                                       // 0x248(0x04)
	struct FNone                                  RotationRate;                                                // 0x520(0x0c)
	char                                          bUseSeparateBrakingFriction : 0;                             // 0x298(0x01)
	char                                          bApplyGravityWhileJumping : 0;                               // 0x2d4(0x01)
	char                                          bUseControllerDesiredRotation : 0;                           // 0x2e4(0x01)
	char                                          bOrientRotationToMovement : 0;                               // 0x550(0x01)
	char                                          bSweepWhileNavWalking : 0;                                   // 0x620(0x01)
	char                                          bMovementInProgress : 0;                                     // 0x3c0(0x01)
	char                                          bEnableScopedMovementUpdates : 0;                            // 0x5d0(0x01)
	char                                          bEnableServerDualMoveScopedMovementUpdates : 0;              // 0x4e4(0x01)
	char                                          bForceMaxAccel : 0;                                          // 0x4b8(0x01)
	char                                          bRunPhysicsWithNoController : 0;                             // 0x2f3(0x01)
	char                                          bForceNextFloorCheck : 0;                                    // 0x490(0x01)
	char                                          bShrinkProxyCapsule : 0;                                     // 0x2fc(0x01)
	char                                          bCanWalkOffLedges : 0;                                       // 0x2e4(0x01)
	char                                          bCanWalkOffLedgesWhenCrouching : 0;                          // 0x44c(0x01)
	char                                          bNetworkSkipProxyPredictionOnNetUpdate : 0;                  // 0x490(0x01)
	char                                          bNetworkAlwaysReplicateTransformUpdateTimestamp : 0;         // 0x490(0x01)
	char                                          bDeferUpdateMoveComponent : 0;                               // 0x510(0x01)
	char                                          bEnablePhysicsInteraction : 0;                               // 0x4dc(0x01)
	char                                          bTouchForceScaledToMass : 0;                                 // 0x304(0x01)
	char                                          bPushForceScaledToMass : 0;                                  // 0x540(0x01)
	char                                          bPushForceUsingZOffset : 0;                                  // 0x5ac(0x01)
	char                                          bScalePushForceToVelocity : 0;                               // 0x6dc(0x01)
	struct FNone*                                 DeferredUpdatedMoveComponent;                                // 0x3e8(0x08)
	float                                         MaxOutOfWaterStepHeight;                                     // 0x240(0x04)
	float                                         OutofWaterZ;                                                 // 0x22c(0x04)
	float                                         Mass;                                                        // 0x23c(0x04)
	float                                         StandingDownwardForceScale;                                  // 0x4c8(0x04)
	float                                         InitialPushForceFactor;                                      // 0x294(0x04)
	float                                         PushForceFactor;                                             // 0x2c0(0x04)
	float                                         PushForcePointZOffsetFactor;                                 // 0x2d0(0x04)
	float                                         TouchForceFactor;                                            // 0x434(0x04)
	float                                         MinTouchForce;                                               // 0x3a8(0x04)
	float                                         MaxTouchForce;                                               // 0x5a8(0x04)
	float                                         RepulsionForce;                                              // 0x3ac(0x04)
	struct FNone                                  Acceleration;                                                // 0x6d0(0x0c)
	struct FNone                                  LastUpdateRotation;                                          // 0x270(0x10)
	struct FNone                                  LastUpdateLocation;                                          // 0x288(0x0c)
	struct FNone                                  LastUpdateVelocity;                                          // 0x2d8(0x0c)
	float                                         ServerLastTransformUpdateTimeStamp;                          // 0x310(0x04)
	float                                         ServerLastClientGoodMoveAckTime;                             // 0x50c(0x04)
	float                                         ServerLastClientAdjustmentTime;                              // 0x4bc(0x04)
	struct FNone                                  PendingImpulseToApply;                                       // 0x21c(0x0c)
	struct FNone                                  PendingForceToApply;                                         // 0x5c4(0x0c)
	float                                         AnalogInputModifier;                                         // 0x4d4(0x04)
	float                                         MaxSimulationTimeStep;                                       // 0x2f4(0x04)
	uint32_t                                      MaxSimulationIterations;                                     // 0x444(0x04)
	uint32_t                                      MaxJumpApexAttemptsPerSimulation;                            // 0x47c(0x04)
	float                                         MaxDepenetrationWithGeometry;                                // 0x4ac(0x04)
	float                                         MaxDepenetrationWithGeometryAsProxy;                         // 0x494(0x04)
	float                                         MaxDepenetrationWithPawn;                                    // 0x25c(0x04)
	float                                         MaxDepenetrationWithPawnAsProxy;                             // 0x564(0x04)
	float                                         NetworkSimulatedSmoothLocationTime;                          // 0x3f8(0x04)
	float                                         NetworkSimulatedSmoothRotationTime;                          // 0x6cc(0x04)
	float                                         ListenServerNetworkSimulatedSmoothLocationTime;              // 0x62c(0x04)
	float                                         ListenServerNetworkSimulatedSmoothRotationTime;              // 0x3e4(0x04)
	float                                         NetProxyShrinkRadius;                                        // 0x6c4(0x04)
	float                                         NetProxyShrinkHalfHeight;                                    // 0x440(0x04)
	float                                         NetworkMaxSmoothUpdateDistance;                              // 0x258(0x04)
	float                                         NetworkNoSmoothUpdateDistance;                               // 0x4d8(0x04)
	float                                         NetworkMinTimeBetweenClientAckGoodMoves;                     // 0x530(0x04)
	float                                         NetworkMinTimeBetweenClientAdjustments;                      // 0x284(0x04)
	float                                         NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;       // 0x2e8(0x04)
	float                                         NetworkLargeClientCorrectionDistance;                        // 0x410(0x04)
	float                                         LedgeCheckThreshold;                                         // 0x514(0x04)
	float                                         JumpOutOfWaterPitch;                                         // 0x4cc(0x04)
	struct FNone                                  CurrentFloor;                                                // 0x314(0x94)
	char                                          DefaultLandMovementMode;                                     // 0x3fc(0x01)
	char                                          DefaultWaterMovementMode;                                    // 0x2f2(0x01)
	char                                          GroundMovementMode;                                          // 0x305(0x01)
	char                                          bMaintainHorizontalGroundVelocity : 0;                       // 0x518(0x01)
	char                                          bImpartBaseVelocityX : 0;                                    // 0x5c0(0x01)
	char                                          bImpartBaseVelocityY : 0;                                    // 0x2fc(0x01)
	char                                          bImpartBaseVelocityZ : 0;                                    // 0x4c0(0x01)
	char                                          bImpartBaseAngularVelocity : 0;                              // 0x518(0x01)
	char                                          bJustTeleported : 0;                                         // 0x44c(0x01)
	char                                          bNetworkUpdateReceived : 0;                                  // 0x2fc(0x01)
	char                                          bNetworkMovementModeChanged : 0;                             // 0x230(0x01)
	char                                          bIgnoreClientMovementErrorChecksAndCorrection : 0;           // 0x6c0(0x01)
	char                                          bServerAcceptClientAuthoritativePosition : 0;                // 0x480(0x01)
	char                                          bNotifyApex : 0;                                             // 0x464(0x01)
	char                                          bCheatFlying : 0;                                            // 0x24c(0x01)
	char                                          bWantsToCrouch : 0;                                          // 0x4b8(0x01)
	char                                          bCrouchMaintainsBaseLocation : 0;                            // 0x2b8(0x01)
	char                                          bIgnoreBaseRotation : 0;                                     // 0x538(0x01)
	char                                          bFastAttachedMove : 0;                                       // 0x218(0x01)
	char                                          bAlwaysCheckFloor : 0;                                       // 0x430(0x01)
	char                                          bUseFlatBaseForFloorChecks : 0;                              // 0x238(0x01)
	char                                          bPerformingJumpOff : 0;                                      // 0x2f1(0x01)
	char                                          bWantsToLeaveNavWalking : 0;                                 // 0x46c(0x01)
	char                                          bUseRVOAvoidance : 0;                                        // 0x6c0(0x01)
	char                                          bRequestedMoveUseAcceleration : 0;                           // 0x498(0x01)
	char                                          bWasSimulatingRootMotion : 0;                                // 0x478(0x01)
	char                                          bAllowPhysicsRotationDuringAnimRootMotion : 0;               // 0x44c(0x01)
	char                                          bHasRequestedVelocity : 0;                                   // 0x304(0x01)
	char                                          bRequestedMoveWithMaxSpeed : 0;                              // 0x52c(0x01)
	char                                          bWasAvoidanceUpdated : 0;                                    // 0x2fc(0x01)
	char                                          bProjectNavMeshWalking : 0;                                  // 0x508(0x01)
	char                                          bProjectNavMeshOnBothWorldChannels : 0;                      // 0x228(0x01)
	float                                         AvoidanceConsiderationRadius;                                // 0x448(0x04)
	struct FNone                                  RequestedVelocity;                                           // 0x4a0(0x0c)
	uint32_t                                      AvoidanceUID;                                                // 0x250(0x04)
	struct FNone                                  AvoidanceGroup;                                              // 0x48c(0x04)
	struct FNone                                  GroupsToAvoid;                                               // 0x2bc(0x04)
	struct FNone                                  GroupsToIgnore;                                              // 0x4c4(0x04)
	float                                         AvoidanceWeight;                                             // 0x2a8(0x04)
	struct FNone                                  PendingLaunchVelocity;                                       // 0x558(0x0c)
	float                                         NavMeshProjectionInterval;                                   // 0x2a4(0x04)
	float                                         NavMeshProjectionTimer;                                      // 0x30c(0x04)
	float                                         NavMeshProjectionInterpSpeed;                                // 0x254(0x04)
	float                                         NavMeshProjectionHeightScaleUp;                              // 0x234(0x04)
	float                                         NavMeshProjectionHeightScaleDown;                            // 0x408(0x04)
	float                                         NavWalkingFloorDistTolerance;                                // 0x2f8(0x04)
	struct FNone                                  PostPhysicsTickFunction;                                     // 0x148(0x30)
	float                                         MinTimeBetweenTimeStampResets;                               // 0x5b0(0x04)
	struct FNone*                                 ClientAutonomuousBase;                                       // 0x4f0(0x08)
	struct FNone                                  CurrentRootMotion;                                           // 0x570(0x38)
	struct FNone                                  RootMotionParams;                                            // 0x5e0(0x40)
	struct FNone                                  AnimRootMotionVelocity;                                      // 0x2c4(0x0c)
	float                                         BlockingHit_SlideAccelerator;                                // 0x628(0x04)
	struct FNone*                                 BlockingPhysMaterial;                                        // 0x4b0(0x08)

	void SetWalkableFloorZ(float InWalkableFloorZ); // sub_0x3c9be70
	void SetWalkableFloorAngle(float InWalkableFloorAngle); // sub_0x3c9bdf0
	void SetMovementMode(char NewMovementMode, char NewCustomMode); // sub_0x3c9bd30
	void SetGroupsToIgnoreMask(struct FNone& GroupMask); // sub_0x3c9bca0
	void SetGroupsToIgnore(uint32_t GroupFlags); // sub_0x3c9bc20
	void SetGroupsToAvoidMask(struct FNone& GroupMask); // sub_0x3c9bb90
	void SetGroupsToAvoid(uint32_t GroupFlags); // sub_0x3c9bb10
	void SetAvoidanceGroupMask(struct FNone& GroupMask); // sub_0x3c9ba80
	void SetAvoidanceGroup(uint32_t GroupFlags); // sub_0x3c9ba00
	void SetAvoidanceEnabled(char bEnable); // sub_0x3c9b970
	float K2_GetWalkableFloorZ(); // sub_0x3c9b940
	float K2_GetWalkableFloorAngle(); // sub_0x168b110
	float K2_GetModifiedMaxAcceleration(); // sub_0x3c9b900
	void K2_FindFloor(struct FNone CapsuleLocation, struct FNone& FloorResult); // sub_0x3c9b7b0
	void K2_ComputeFloorDist(struct FNone CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FNone& FloorResult); // sub_0x3c9b5b0
	char IsWalking(); // sub_0x3c9b580
	char IsWalkable(struct FNone& Hit); // sub_0x3c9b490
	float GetValidPerchRadius(); // sub_0x3c9b460
	float GetPerchRadiusThreshold(); // sub_0x3c9b430
	struct FNone* GetMovementBase(); // sub_0x3c9b400
	float GetMinAnalogSpeed(); // sub_0x3c9b3c0
	float GetMaxJumpHeightWithJumpTime(); // sub_0x3c9b380
	float GetMaxJumpHeight(); // sub_0x1f0ead0
	float GetMaxBrakingDeceleration(); // sub_0x3c9b340
	float GetMaxAcceleration(); // sub_0x3c9b300
	struct FNone GetLastUpdateVelocity(); // sub_0x3c9b2d0
	struct FNone GetLastUpdateRotation(); // sub_0x3c9b280
	struct FNone GetLastUpdateLocation(); // sub_0x3c9b250
	struct FNone GetImpartedMovementBaseVelocity(); // sub_0x3c9b210
	struct FNone GetCurrentAcceleration(); // sub_0x3c9b1d0
	struct FNone* GetCharacterOwner(); // sub_0x3c9b1b0
	float GetAnalogInputModifier(); // sub_0x3c9b180
	void DisableMovement(); // sub_0x3c9b160
	void ClearAccumulatedForces(); // sub_0x3c9b140
	void CapsuleTouched(struct FNone* OverlappedComp, struct FNone* Other, struct FNone* OtherComp, uint32_t OtherBodyIndex, char bFromSweep, struct FNone& SweepResult); // sub_0x3c9af40
	void CalcVelocity(float DeltaTime, float Friction, char bFluid, float BrakingDeceleration); // sub_0x3c9ade0
	void AddImpulse(struct FNone Impulse, char bVelocityChange); // sub_0x3c9ad00
	void AddForce(struct FNone Force); // sub_0x3c9ac70
};

// Class Engine.DynamicSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UDynamicSubsystem : USubsystem 
{
};

// Class Engine.EngineSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UEngineSubsystem : UDynamicSubsystem 
{
};

// Class Engine.SceneCapture
// Size: 0x320 (Inherited: 0x310)
struct ASceneCapture : AActor 
{
	struct FNone*                                 MeshComp;                                                    // 0x310(0x08)
	struct FNone*                                 SceneComponent;                                              // 0x318(0x08)
};

// Class Engine.SceneCapture2D
// Size: 0x328 (Inherited: 0x320)
struct ASceneCapture2D : ASceneCapture 
{
	struct FNone*                                 CaptureComponent2D;                                          // 0x320(0x08)

	void OnInterpToggle(char bEnable); // sub_0x3d9fe60
};

// Class Engine.SoundEffectPreset
// Size: 0x40 (Inherited: 0x28)
struct USoundEffectPreset : UObject 
{
	char                                          UnknownData28[0x18];                                         // 0x28(0x18)
};

// Class Engine.SoundEffectSourcePreset
// Size: 0x40 (Inherited: 0x40)
struct USoundEffectSourcePreset : USoundEffectPreset 
{
};

// Class Engine.SoundEffectSubmixPreset
// Size: 0x40 (Inherited: 0x40)
struct USoundEffectSubmixPreset : USoundEffectPreset 
{
};

// Class Engine.TargetPoint
// Size: 0x310 (Inherited: 0x310)
struct ATargetPoint : AActor 
{
};

// Class Engine.AssetManager
// Size: 0x438 (Inherited: 0x28)
struct UAssetManager : UObject 
{
	char                                          UnknownData28[0x298];                                        // 0x28(0x298)
	struct TArray<None>                           ObjectReferenceList;                                         // 0x2c0(0x10)
	char                                          bIsGlobalAsyncScanEnvironment : 0;                           // 0x2d0(0x01)
	char                                          UnknownData2D0[0x1];                                         // 0x2d0(0x01)
	char                                          bShouldGuessTypeAndName : 0;                                 // 0x2d1(0x01)
	char                                          UnknownData2D1[0x1];                                         // 0x2d1(0x01)
	char                                          bShouldUseSynchronousLoad : 0;                               // 0x2d2(0x01)
	char                                          UnknownData2D2[0x1];                                         // 0x2d2(0x01)
	char                                          bIsLoadingFromPakFiles : 0;                                  // 0x2d3(0x01)
	char                                          UnknownData2D3[0x1];                                         // 0x2d3(0x01)
	char                                          bShouldAcquireMissingChunksOnLoad : 0;                       // 0x2d4(0x01)
	char                                          UnknownData2D4[0x1];                                         // 0x2d4(0x01)
	char                                          bOnlyCookProductionAssets : 0;                               // 0x2d5(0x01)
	char                                          UnknownData2D5[0x1];                                         // 0x2d5(0x01)
	char                                          bIsBulkScanning : 0;                                         // 0x2d6(0x01)
	char                                          UnknownData2D6[0x1];                                         // 0x2d6(0x01)
	char                                          bIsPrimaryAssetDirectoryCurrent : 0;                         // 0x2d7(0x01)
	char                                          UnknownData2D7[0x1];                                         // 0x2d7(0x01)
	char                                          bIsManagementDatabaseCurrent : 0;                            // 0x2d8(0x01)
	char                                          UnknownData2D8[0x1];                                         // 0x2d8(0x01)
	char                                          bUpdateManagementDatabaseAfterScan : 0;                      // 0x2d9(0x01)
	char                                          UnknownData2D9[0x1];                                         // 0x2d9(0x01)
	char                                          bIncludeOnlyOnDiskAssets : 0;                                // 0x2da(0x01)
	char                                          UnknownData2DA[0x2];                                         // 0x2da(0x02)
	uint32_t                                      NumberOfSpawnedNotifications;                                // 0x2dc(0x04)
	char                                          UnknownData2E0[0x158];                                       // 0x2e0(0x158)
};

// Class Engine.ShapeComponent
// Size: 0x4d0 (Inherited: 0x4c0)
struct UShapeComponent : UPrimitiveComponent 
{
	struct FNone*                                 ShapeBodySetup;                                              // 0x4b8(0x08)
	struct FNone*                                 AreaClass;                                                   // 0x4c0(0x08)
	struct FNone                                  ShapeColor;                                                  // 0x4c8(0x04)
	char                                          bDrawOnlyIfSelected : 0;                                     // 0x4cc(0x01)
	char                                          bShouldCollideWhenPlacing : 0;                               // 0x4cc(0x01)
	char                                          bDynamicObstacle : 0;                                        // 0x4cc(0x01)
};

// Class Engine.BoxComponent
// Size: 0x4e0 (Inherited: 0x4d0)
struct UBoxComponent : UShapeComponent 
{
	struct FNone                                  BoxExtent;                                                   // 0x4d0(0x0c)
	float                                         LineThickness;                                               // 0x4dc(0x04)

	void SetBoxExtent(struct FNone InBoxExtent, char bUpdateOverlaps); // sub_0x3c8db60
	struct FNone GetUnscaledBoxExtent(); // sub_0x3c8d980
	struct FNone GetScaledBoxExtent(); // sub_0x3c8d920
};

// Class Engine.CameraComponent
// Size: 0x880 (Inherited: 0x240)
struct UCameraComponent : USceneComponent 
{
	float                                         FieldOfView;                                                 // 0x238(0x04)
	float                                         OrthoWidth;                                                  // 0x23c(0x04)
	float                                         OrthoNearClipPlane;                                          // 0x240(0x04)
	float                                         OrthoFarClipPlane;                                           // 0x244(0x04)
	float                                         AspectRatio;                                                 // 0x248(0x04)
	char                                          bConstrainAspectRatio : 0;                                   // 0x24c(0x01)
	char                                          bUseFieldOfViewForLOD : 0;                                   // 0x24c(0x01)
	char                                          bLockToHmd : 0;                                              // 0x254(0x01)
	char                                          bUsePawnControlRotation : 0;                                 // 0x254(0x01)
	char                                          UnknownData254[0x1];                                         // 0x254(0x01)
	char                                          ProjectionMode;                                              // 0x255(0x01)
	char                                          UnknownData256[0x3a];                                        // 0x256(0x3a)
	float                                         PostProcessBlendWeight;                                      // 0x290(0x04)
	char                                          UnknownData294[0x2c];                                        // 0x294(0x2c)
	struct FNone                                  PostProcessSettings;                                         // 0x2c0(0x5c0)

	void SetUseFieldOfViewForLOD(char bInUseFieldOfViewForLOD); // sub_0x3c8e0d0
	void SetProjectionMode(char InProjectionMode); // sub_0x3c8dfd0
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight); // sub_0x3c8df50
	void SetOrthoWidth(float InOrthoWidth); // sub_0x3c8ded0
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane); // sub_0x3c8de50
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane); // sub_0x3c8ddd0
	void SetFieldOfView(float InFieldOfView); // sub_0x3c8dd50
	void SetConstraintAspectRatio(char bInConstrainAspectRatio); // sub_0x3c8dc40
	void SetAspectRatio(float InAspectRatio); // sub_0x3c8dae0
	void RemoveBlendable(struct TScriptInterface<INone> InBlendableObject); // sub_0x3c8d9b0
	void OnCameraMeshHiddenChanged(); // sub_0x1518fe0
	void GetCameraView(float DeltaTime, struct FNone& DesiredView); // sub_0x3c8d780
	void AddOrUpdateBlendable(struct TScriptInterface<INone> InBlendableObject, float InWeight); // sub_0x3c8d600
};

// Class Engine.CheatManager
// Size: 0x78 (Inherited: 0x28)
struct UCheatManager : UObject 
{
	struct FNone*                                 DebugCameraControllerRef;                                    // 0x28(0x08)
	struct FNone*                                 DebugCameraControllerClass;                                  // 0x30(0x08)
	char                                          UnknownData38[0x40];                                         // 0x38(0x40)

	void Walk(); // sub_0x2ecb570
	void ViewSelf(); // sub_0x1e97fa0
	void ViewPlayer(struct FString S); // sub_0x3ca1480
	void ViewClass(struct FNone* DesiredClass); // sub_0x3ca13f0
	void ViewActor(struct FName ActorName); // sub_0x3ca1360
	void UpdateSafeArea(); // sub_0x3ca1340
	void ToggleServerStatReplicatorUpdateStatNet(); // sub_0x3ca1320
	void ToggleServerStatReplicatorClientOverwrite(); // sub_0x3ca1300
	void ToggleDebugCamera(); // sub_0x3c48910
	void ToggleAILogging(); // sub_0x3ca12e0
	void TestCollisionDistance(); // sub_0x1eadd60
	void Teleport(); // sub_0x3ca12c0
	void Summon(struct FString ClassName); // sub_0x3ca1210
	void StreamLevelOut(struct FName PackageName); // sub_0x3ca1180
	void StreamLevelIn(struct FName PackageName); // sub_0x3ca10f0
	void SpawnServerStatReplicator(); // sub_0x3ca10d0
	void Slomo(float NewTimeDilation); // sub_0x3ca1050
	void SetWorldOrigin(); // sub_0x3ca1030
	void SetReflexLatencyGraph(uint32_t Type, float Min, float MAX); // sub_0x3ca0f30
	void SetMouseSensitivityToDefault(); // sub_0x3ca0f10
	void ServerToggleAILogging(); // sub_0x3ca0e30
	void ReceiveInitCheatManager(); // sub_0x239bfb0
	void ReceiveEndPlay(); // sub_0x239bfb0
	void PlayersOnly(); // sub_0x1e97760
	void OnlyLoadLevel(struct FName PackageName); // sub_0x3ca0da0
	void LogLoc(); // sub_0x3ca0d80
	void InvertMouse(); // sub_0x3ca0d60
	void God(); // sub_0x1e97ea0
	void Ghost(); // sub_0x3c90e30
	void FreezeFrame(float Delay); // sub_0x3ca0ce0
	void Fly(); // sub_0x34bf990
	void FlushLog(); // sub_0x3ca0cc0
	void EnableDebugCamera(); // sub_0x1e43c50
	void DumpVoiceMutingState(); // sub_0x3ca0ca0
	void DumpPartyState(); // sub_0x3ca0c80
	void DumpOnlineSessionState(); // sub_0x3ca0c60
	void DumpChatState(); // sub_0x3ca0c40
	void DisableDebugCamera(); // sub_0x11f5b30
	void DestroyTarget(); // sub_0x1e97dd0
	void DestroyServerStatReplicator(); // sub_0x3ca0c20
	void DestroyPawns(struct FNone* aClass); // sub_0x3ca0b90
	void DestroyAllPawnsExceptTarget(); // sub_0x1e97860
	void DestroyAll(struct FNone* aClass); // sub_0x3ca0b00
	void DebugCapsuleSweepSize(float HalfHeight, float Radius); // sub_0x3ca0a30
	void DebugCapsuleSweepPawn(); // sub_0x3ca0a10
	void DebugCapsuleSweepComplex(char bTraceComplex); // sub_0x3ca0980
	void DebugCapsuleSweepClear(); // sub_0x3ca0960
	void DebugCapsuleSweepChannel(char Channel); // sub_0x3ca08e0
	void DebugCapsuleSweepCapture(); // sub_0x3ca08c0
	void DebugCapsuleSweep(); // sub_0x3ca08a0
	void DamageTarget(float DamageAmount); // sub_0x3ca0820
	void CheatScript(struct FString ScriptName); // sub_0x3ca0730
	void ChangeSize(float F); // sub_0x3ca06b0
	void BugItStringCreator(struct FNone ViewLocation, struct FNone ViewRotation, struct FString& GoString, struct FString& LocString); // sub_0x3ca04e0
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll); // sub_0x3ca0310
	void BugIt(struct FString ScreenShotDescription); // sub_0x3ca0260
};

// Class Engine.CheatManagerEx
// Size: 0x78 (Inherited: 0x78)
struct UCheatManagerEx : UCheatManager 
{
};

// Class Engine.DamageType
// Size: 0x40 (Inherited: 0x28)
struct UDamageType : UObject 
{
	char                                          bCausedByWorld : 0;                                          // 0x28(0x01)
	char                                          bScaleMomentumByMass : 0;                                    // 0x28(0x01)
	char                                          bRadialDamageVelChange : 0;                                  // 0x28(0x01)
	char                                          UnknownData28[0x4];                                          // 0x28(0x04)
	float                                         DamageImpulse;                                               // 0x2c(0x04)
	float                                         DestructibleImpulse;                                         // 0x30(0x04)
	float                                         DestructibleDamageSpreadScale;                               // 0x34(0x04)
	float                                         DamageFalloff;                                               // 0x38(0x04)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
};

// Class Engine.MKDemoNetDriverEx
// Size: 0x958 (Inherited: 0x748)
struct UMKDemoNetDriverEx : UNetDriver 
{
	char                                          UnknownData748[0x1e0];                                       // 0x748(0x1e0)
	struct FNone*                                 SpectatorControllerClass;                                    // 0x928(0x08)
	struct FNone*                                 SelfDemoNetDriver;                                           // 0x930(0x08)
	char                                          UnknownData938[0x20];                                        // 0x938(0x20)

	void SetReplaySample(struct FNone* Target, struct FNone* ReplaySample, char bSaveCheckpoint); // sub_0x3d79a10
	void GetReplaySampleArray(struct FNone* Target, struct TArray<None>& OutReplaySampleArray); // sub_0x3d78c80
};

// Class Engine.DemoNetDriver
// Size: 0x1398 (Inherited: 0x958)
struct UDemoNetDriver : UMKDemoNetDriverEx 
{
	char                                          UnknownData958[0xf8];                                        // 0x958(0xf8)
	struct TMap<None, None>                       RollbackNetStartupActors;                                    // 0xa50(0x50)
	char                                          UnknownDataAA0[0x42c];                                       // 0xaa0(0x42c)
	float                                         CheckpointSaveMaxMSPerFrame;                                 // 0xecc(0x04)
	char                                          UnknownDataED0[0x30];                                        // 0xed0(0x30)
	struct TArray<None>                           MulticastRecordOptions;                                      // 0xf00(0x10)
	char                                          UnknownDataF10[0x50];                                        // 0xf10(0x50)
	char                                          bIsLocalReplay : 0;                                          // 0xf60(0x01)
	char                                          UnknownDataF60[0x8];                                         // 0xf60(0x08)
	struct TArray<None>                           SpectatorControllers;                                        // 0xf68(0x10)
	char                                          UnknownDataF78[0x420];                                       // 0xf78(0x420)
};

// Class Engine.StaticMeshComponent
// Size: 0x550 (Inherited: 0x4f0)
struct UStaticMeshComponent : UMeshComponent 
{
	uint32_t                                      ForcedLodModel;                                              // 0x4e8(0x04)
	uint32_t                                      PreviousLODLevel;                                            // 0x4ec(0x04)
	uint32_t                                      MinLOD;                                                      // 0x4f0(0x04)
	uint32_t                                      SubDivisionStepSize;                                         // 0x4f4(0x04)
	struct FNone*                                 StaticMesh;                                                  // 0x4f8(0x08)
	struct FNone                                  WireframeColorOverride;                                      // 0x500(0x04)
	char                                          bEvaluateWorldPositionOffset : 0;                            // 0x504(0x01)
	char                                          bOverrideWireframeColor : 0;                                 // 0x504(0x01)
	char                                          UnknownData50C_0 : 7;                                        // 0x50c(0x01)
	char                                          bOverrideMinLod : 1;                                         // 0x504(0x01)
	char                                          bOverrideNavigationExport : 0;                               // 0x504(0x01)
	char                                          bForceNavigationObstacle : 0;                                // 0x504(0x01)
	char                                          bDisallowMeshPaintPerInstance : 0;                           // 0x504(0x01)
	char                                          bIgnoreInstanceForTextureStreaming : 0;                      // 0x504(0x01)
	char                                          bOverrideLightMapRes : 0;                                    // 0x504(0x01)
	char                                          bCastDistanceFieldIndirectShadow : 0;                        // 0x505(0x01)
	char                                          bOverrideDistanceFieldSelfShadowBias : 0;                    // 0x505(0x01)
	char                                          bUseSubDivisions : 0;                                        // 0x505(0x01)
	char                                          bUseDefaultCollision : 0;                                    // 0x505(0x01)
	char                                          bReverseCulling : 0;                                         // 0x505(0x01)
	uint32_t                                      OverriddenLightMapRes;                                       // 0x508(0x04)
	float                                         DistanceFieldIndirectShadowMinVisibility;                    // 0x50c(0x04)
	float                                         DistanceFieldSelfShadowBias;                                 // 0x510(0x04)
	float                                         StreamingDistanceMultiplier;                                 // 0x514(0x04)
	struct TArray<None>                           LODData;                                                     // 0x518(0x10)
	struct TArray<None>                           StreamingTextureData;                                        // 0x528(0x10)
	struct FNone                                  LightmassSettings;                                           // 0x538(0x18)

	char SetStaticMesh(struct FNone* NewMesh); // sub_0x168b600
	void SetReverseCulling(char ReverseCulling); // sub_0x3dfe310
	void SetForcedLodModel(uint32_t NewForcedLodModel); // sub_0x3dfdf90
	void SetDistanceFieldSelfShadowBias(float NewValue); // sub_0x3dfdd10
	void OnRep_StaticMesh(struct FNone* OldStaticMesh); // sub_0x3dfdc90
	void GetLocalBounds(struct FNone& Min, struct FNone& MAX); // sub_0x3dfdaf0
};

// Class Engine.GameEngine
// Size: 0xe38 (Inherited: 0xde8)
struct UGameEngine : UEngine 
{
	float                                         MaxDeltaTime;                                                // 0xde8(0x04)
	float                                         ServerFlushLogInterval;                                      // 0xdec(0x04)
	struct FNone*                                 GameInstance;                                                // 0xdf0(0x08)
	char                                          UnknownDataDF8[0x40];                                        // 0xdf8(0x40)
};

// Class Engine.MKGameInstanceEx
// Size: 0xa8 (Inherited: 0x28)
struct UMKGameInstanceEx : UObject 
{
	struct TArray<None>                           ReplayListItemInfos;                                         // 0x28(0x10)
	struct FMulticastInlineDelegate               OnEnumerateReplayListCompleteEvent;                          // 0x38(0x10)
	struct FMulticastInlineDelegate               OnDeleteReplayCompleteEvent;                                 // 0x48(0x10)
	struct FMulticastInlineDelegate               OnKeepAndDeleteOldetsReplaysCompleteEvent;                   // 0x58(0x10)
	struct FMulticastInlineDelegate               OnKeepAndDeleteOldVersionReplaysCompleteEvent;               // 0x68(0x10)
	char                                          UnknownData78[0x8];                                          // 0x78(0x08)
	struct FNone*                                 SelfGameInstance;                                            // 0x80(0x08)
	char                                          bLoadingWidgetVisible : 0;                                   // 0x88(0x01)
	char                                          UnknownData88[0x20];                                         // 0x88(0x20)

	void PlayReplayCommand(struct FString DemoName); // sub_0x3d79920
	char PlayReplay(struct FNone* LocalPlayer, struct FString DemoName); // sub_0x3d79830
	void OnKeepAndDeleteOldVersionReplaysCompleteEvent__DelegateSignature(); // sub_0x239bfb0
	void OnKeepAndDeleteOldestReplaysCompleteEvent__DelegateSignature(uint32_t nRemainedReplays, char bSuccess); // sub_0x239bfb0
	void OnEnumerateStreamsCompleteEvent__DelegateSignature(uint32_t OutPageIndex, uint32_t OutPageSize); // sub_0x239bfb0
	void OnDeleteStreamCompleteEvent__DelegateSignature(struct FString StreamName, char bSuccess); // sub_0x239bfb0
	void GetNumOfReplays(uint32_t& TotalReplays, uint32_t& ReplaysToKeep); // sub_0x3d78ba0
	void EnumerateReplayList(uint32_t PageIndex, uint32_t PageSize); // sub_0x3d783f0
};

// Class Engine.GameInstance
// Size: 0x218 (Inherited: 0xa8)
struct UGameInstance : UMKGameInstanceEx 
{
	char                                          UnknownDataA8[0x10];                                         // 0xa8(0x10)
	struct TArray<None>                           LocalPlayers;                                                // 0xb8(0x10)
	struct FNone*                                 OnlineSession;                                               // 0xc8(0x08)
	struct TArray<None>                           ReferencedObjects;                                           // 0xd0(0x10)
	char                                          UnknownDataE0[0x138];                                        // 0xe0(0x138)

	void ReceiveShutdown(); // sub_0x239bfb0
	void ReceiveInit(); // sub_0x239bfb0
	void HandleTravelError(char FailureType); // sub_0x239bfb0
	void HandleNetworkError(char FailureType, char bIsServer); // sub_0x239bfb0
	void DebugRemovePlayer(uint32_t ControllerId); // sub_0x3cca970
	void DebugCreatePlayer(uint32_t ControllerId); // sub_0x3cca8e0
};

// Class Engine.GameSession
// Size: 0x328 (Inherited: 0x310)
struct AGameSession : AInfo 
{
	uint32_t                                      MaxSpectators;                                               // 0x310(0x04)
	uint32_t                                      MaxPlayers;                                                  // 0x314(0x04)
	uint32_t                                      MaxPartySize;                                                // 0x318(0x04)
	char                                          MaxSplitscreensPerConnection;                                // 0x31c(0x01)
	char                                          bRequiresPushToTalk : 0;                                     // 0x31d(0x01)
	char                                          UnknownData31D[0x3];                                         // 0x31d(0x03)
	struct FName                                  SessionName;                                                 // 0x320(0x08)
};

// Class Engine.InstancedStaticMeshComponent
// Size: 0x620 (Inherited: 0x550)
struct UInstancedStaticMeshComponent : UStaticMeshComponent 
{
	struct TArray<None>                           PerInstanceSMData;                                           // 0x550(0x10)
	uint32_t                                      NumCustomDataFloats;                                         // 0x560(0x04)
	char                                          UnknownData564[0x4];                                         // 0x564(0x04)
	struct TArray<None>                           PerInstanceSMCustomData;                                     // 0x568(0x10)
	char                                          bMergeCollision : 0;                                         // 0x578(0x01)
	char                                          UnknownData578[0x4];                                         // 0x578(0x04)
	uint32_t                                      InstancingRandomSeed;                                        // 0x57c(0x04)
	uint32_t                                      InstanceStartCullDistance;                                   // 0x580(0x04)
	uint32_t                                      InstanceEndCullDistance;                                     // 0x584(0x04)
	uint8_t                                       CulldistanceType;                                            // 0x588(0x01)
	char                                          UnknownData589[0x3];                                         // 0x589(0x03)
	float                                         MinScreenSizeScale;                                          // 0x58c(0x04)
	char                                          InstanceBodiesSplitRatio;                                    // 0x590(0x01)
	char                                          UnknownData591[0x7];                                         // 0x591(0x07)
	struct TArray<None>                           InstanceReorderTable;                                        // 0x598(0x10)
	char                                          UnknownData5A8[0x5c];                                        // 0x5a8(0x5c)
	uint32_t                                      NumPendingLightmaps;                                         // 0x604(0x04)
	struct TArray<None>                           CachedMappings;                                              // 0x608(0x10)
	char                                          UnknownData618[0x8];                                         // 0x618(0x08)

	char UpdateInstanceTransform(uint32_t InstanceIndex, struct FNone& NewInstanceTransform, char bWorldSpace, char bMarkRenderStateDirty, char bTeleport); // sub_0x3cec510
	char SetCustomDataValue(uint32_t InstanceIndex, uint32_t CustomDataIndex, float CustomDataValue, char bMarkRenderStateDirty); // sub_0x3cec3c0
	void SetCullDistances(uint32_t StartCullDistance, uint32_t EndCullDistance); // sub_0x3cec300
	char RemoveInstance(uint32_t InstanceIndex); // sub_0x3cec260
	char GetInstanceTransform(uint32_t InstanceIndex, struct FNone& OutInstanceTransform, char bWorldSpace); // sub_0x3cebe60
	struct TArray<None> GetInstancesOverlappingSphere(struct FNone& Center, float Radius, char bSphereInWorldSpace); // sub_0x3cec0f0
	struct TArray<None> GetInstancesOverlappingBox(struct FNone& Box, char bBoxInWorldSpace); // sub_0x3cebfc0
	uint32_t GetInstanceCount(); // sub_0x3cebe30
	void ClearInstances(char bClearBodies); // sub_0x3cebda0
	char BatchUpdateInstancesTransforms(uint32_t StartInstanceIndex, struct TArray<None>& NewInstancesTransforms, char bWorldSpace, char bMarkRenderStateDirty, char bTeleport); // sub_0x3cebbb0
	char BatchUpdateInstancesTransform(uint32_t StartInstanceIndex, uint32_t NumInstances, struct FNone& NewInstancesTransform, char bWorldSpace, char bMarkRenderStateDirty, char bTeleport); // sub_0x3ceb980
	uint32_t AddInstanceWorldSpace(struct FNone& WorldTransform); // sub_0x3ceb8a0
	uint32_t AddInstance(struct FNone& InstanceTransform); // sub_0x3ceb7c0
};

// Class Engine.HierarchicalInstancedStaticMeshComponent
// Size: 0x720 (Inherited: 0x620)
struct UHierarchicalInstancedStaticMeshComponent : UInstancedStaticMeshComponent 
{
	char                                          UnknownData620[0x8];                                         // 0x620(0x08)
	struct TArray<None>                           SortedInstances;                                             // 0x628(0x10)
	uint32_t                                      NumBuiltInstances;                                           // 0x638(0x04)
	char                                          UnknownData63C[0x4];                                         // 0x63c(0x04)
	struct FNone                                  BuiltInstanceBounds;                                         // 0x640(0x1c)
	struct FNone                                  UnbuiltInstanceBounds;                                       // 0x65c(0x1c)
	struct TArray<None>                           UnbuiltInstanceBoundsList;                                   // 0x678(0x10)
	char                                          bEnableDensityScaling : 0;                                   // 0x688(0x01)
	char                                          UnknownData688[0x8];                                         // 0x688(0x08)
	uint32_t                                      OcclusionLayerNumNodes;                                      // 0x690(0x04)
	struct FNone                                  CacheMeshExtendedBounds;                                     // 0x694(0x1c)
	char                                          bDisableCollision : 0;                                       // 0x6b0(0x01)
	char                                          UnknownData6B0[0x4];                                         // 0x6b0(0x04)
	uint32_t                                      InstanceCountToRender;                                       // 0x6b4(0x04)
	char                                          UnknownData6B8[0x68];                                        // 0x6b8(0x68)

	char RemoveInstances(struct TArray<None>& InstancesToRemove); // sub_0x3ce0520
	char DisableInstance(uint32_t InstanceIndex); // sub_0x3cde9f0
};

// Class Engine.MK3DReplayController
// Size: 0x928 (Inherited: 0x6f0)
struct AMK3DReplayController : APlayerController 
{
	struct FMulticastInlineDelegate               OnReplayPauseEvent;                                          // 0x6f0(0x10)
	struct FMulticastInlineDelegate               OnReplayJumpEvent;                                           // 0x700(0x10)
	struct FMulticastInlineDelegate               OnReplayJumpCompleteEvent;                                   // 0x710(0x10)
	char                                          UnknownData720[0x88];                                        // 0x720(0x88)
	struct FString                                PlayerCameraManagerClassName;                                // 0x7a8(0x10)
	struct FString                                SpectatorPawnClassName;                                      // 0x7b8(0x10)
	struct FMulticastInlineDelegate               ChangeViewModeDelegate;                                      // 0x7c8(0x10)
	struct FMulticastInlineDelegate               ChangeCameraTypeDelegate;                                    // 0x7d8(0x10)
	struct FMulticastInlineDelegate               ChangeCameraTypeByNetGuidDelegate;                           // 0x7e8(0x10)
	char                                          UnknownData7F8[0x8];                                         // 0x7f8(0x08)
	struct TArray<None>                           WidgetInfoArray;                                             // 0x800(0x10)
	struct TMap<None, None>                       ReplayWidgetMap;                                             // 0x810(0x50)
	char                                          UnknownData860[0x60];                                        // 0x860(0x60)
	struct FNone*                                 KillcamComponent;                                            // 0x8c0(0x08)
	struct FNone*                                 TargetcamComponent;                                          // 0x8c8(0x08)
	char                                          UnknownData8D0[0x10];                                        // 0x8d0(0x10)
	struct FNone*                                 pTargetPlayerInRecording;                                    // 0x8e0(0x08)
	struct FString                                AfterKillcamHUDClassName;                                    // 0x8e8(0x10)
	struct FNone*                                 AfterKillcamHUDClass;                                        // 0x8f8(0x08)
	char                                          UnknownData900[0x10];                                        // 0x900(0x10)
	struct FString                                ReplayHUDClassName;                                          // 0x910(0x10)
	struct FNone*                                 ReplayHUDClass;                                              // 0x920(0x08)

	void ToggleReplayPauseAndResume(); // sub_0x3d752f0
	void TimerFuncPendingSetPlayerCameraNetGuid(); // sub_0x3d752d0
	void TimerFuncPendingSetPlayerCamera(); // sub_0x3d752b0
	void TimerFuncClearTimerSetPlayerCameraNetGuid(); // sub_0x3d75290
	void TimerFuncClearTimerSetPlayerCamera(); // sub_0x3d75270
	void ShowInGameReplayHUD(); // sub_0x3d75250
	void SetSpeedByIndex(uint32_t WantSpeedIndex); // sub_0x3d751d0
	void SetSpeed(float PlayTimeDilation); // sub_0x3d75150
	char SetPlayerCamera(struct FString TargetName); // sub_0x3d750a0
	char SetFreeCamera(struct FNone& Pos, struct FNone& Rot); // sub_0x3d74fa0
	char ResumeReplay(); // sub_0x3d74f70
	void RestoreCameraLag(); // sub_0x3d74f50
	char PauseReplay(); // sub_0x3d74df0
	void OnSetSpeedDelegate__DelegateSignature(); // sub_0x239bfb0
	void OnReplayPause__DelegateSignature(char bPaused); // sub_0x239bfb0
	void OnReplayJumpComplete__DelegateSignature(char bSuccess); // sub_0x239bfb0
	void OnReplayJump__DelegateSignature(float TimeInSec); // sub_0x239bfb0
	void OnGoToEndTime(); // sub_0x3d74a80
	void OnGoToBeginTime(); // sub_0x3d74a60
	void OnFreeCamera(); // sub_0x3d74a40
	void OnFindActorsByCursorStop(); // sub_0x3d74a20
	void OnFindActorsByCursorStart(); // sub_0x3d74a00
	void MK3DReplayController_EnableReplayKillcamUI(char bEnable); // sub_0x3d74970
	char IsReplaying(); // sub_0x3d74940
	char IsPlayingReplay(); // sub_0x3d74910
	char IsPlayingLiveReplay(); // sub_0x3d748e0
	char IsPlayingKillcamAndBlockUI(); // sub_0x3d748b0
	char IsPlayingKillcam(); // sub_0x3d74880
	char IsPlayerViewMode(); // sub_0x3d74850
	char IsPlayerCamera(); // sub_0x3d74820
	char IsPaused(); // sub_0x3d747f0
	char IsFreeCamera(); // sub_0x3d747c0
	char IsFollowViewMode(); // sub_0x3d74790
	void IncreaseSpeedByIndex(); // sub_0x3d74770
	float GetTotalTimeInSec(); // sub_0x3d74740
	struct FNone* GetTargetPlayer(); // sub_0x3d74710
	float GetSpeed(); // sub_0x3d746e0
	float GetReplayJumpDelay(); // sub_0x3d746b0
	enum class None GetReplayCameraType(); // sub_0x3d74680
	struct FNone* GetPlayerCharacter(); // sub_0x3d74650
	enum class None GetLatestReplayCameraType(); // sub_0x3d74620
	uint32_t GetCurrnetSpeedIndex(); // sub_0x3d745f0
	float GetCurrentTimeInSec(); // sub_0x3d745c0
	char FindViewTargetByName(struct FString TargetName, struct FNone*& OutTarget); // sub_0x3d744c0
	uint32_t FindSpeedIndex(float fSpeed); // sub_0x3d74430
	void DecreaseSpeedByIndex(); // sub_0x3d74410
	void ChangeViewModeDelegate__DelegateSignature(char ViewMode); // sub_0x239bfb0
	void ChangeCameraTypeDelegate__DelegateSignature(enum class None CameraType, struct FString TargetPlayerName); // sub_0x239bfb0
	void ChangeCameraTypeByNetGuidDelegate__DelegateSignature(enum class None CameraType, struct FString TargetPlayerNetGuid); // sub_0x239bfb0
};

// Class Engine.DefaultPawn
// Size: 0x3a8 (Inherited: 0x380)
struct ADefaultPawn : APawn 
{
	float                                         BaseTurnRate;                                                // 0x380(0x04)
	float                                         BaseLookUpRate;                                              // 0x384(0x04)
	struct FNone*                                 MovementComponent;                                           // 0x388(0x08)
	struct FNone*                                 CollisionComponent;                                          // 0x390(0x08)
	struct FNone*                                 MeshComponent;                                               // 0x398(0x08)
	char                                          bAddDefaultMovementBindings : 0;                             // 0x3a0(0x01)
	char                                          UnknownData3A0[0x8];                                         // 0x3a0(0x08)

	void TurnAtRate(float Rate); // sub_0x3cadbf0
	void MoveUp_World(float Val); // sub_0x3cad280
	void MoveRight(float Val); // sub_0x3cad200
	void MoveForward(float Val); // sub_0x3cad180
	void LookUpAtRate(float Rate); // sub_0x3cad100
};

// Class Engine.SpectatorPawn
// Size: 0x3a8 (Inherited: 0x3a8)
struct ASpectatorPawn : ADefaultPawn 
{
};

// Class Engine.MK3DSpectatorPawn
// Size: 0x3a8 (Inherited: 0x3a8)
struct AMK3DSpectatorPawn : ASpectatorPawn 
{

	void MK3DSpectatorPawn_SetMaxSpeed(float fSpeed); // sub_0x3d79470
	void MK3DSpectatorPawn_SetCollision(struct FString strCollision); // sub_0x1f5ead0
};

// Class Engine.PhysicalMaterial
// Size: 0x80 (Inherited: 0x28)
struct UPhysicalMaterial : UObject 
{
	float                                         Friction;                                                    // 0x28(0x04)
	char                                          FrictionCombineMode;                                         // 0x2c(0x01)
	char                                          bOverrideFrictionCombineMode : 0;                            // 0x2d(0x01)
	char                                          UnknownData2D[0x3];                                          // 0x2d(0x03)
	float                                         Restitution;                                                 // 0x30(0x04)
	char                                          RestitutionCombineMode;                                      // 0x34(0x01)
	char                                          bOverrideRestitutionCombineMode : 0;                         // 0x35(0x01)
	char                                          UnknownData35[0x3];                                          // 0x35(0x03)
	float                                         Density;                                                     // 0x38(0x04)
	float                                         RaiseMassToPower;                                            // 0x3c(0x04)
	float                                         DestructibleDamageThresholdScale;                            // 0x40(0x04)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
	struct FNone*                                 PhysicalMaterialProperty;                                    // 0x48(0x08)
	char                                          SurfaceType;                                                 // 0x50(0x01)
	char                                          UnknownData51[0x3];                                          // 0x51(0x03)
	float                                         TireFrictionScale;                                           // 0x54(0x04)
	struct TArray<None>                           TireFrictionScales;                                          // 0x58(0x10)
	char                                          UnknownData68[0x18];                                         // 0x68(0x18)
};

// Class Engine.PlayerCameraManager
// Size: 0x2b30 (Inherited: 0x310)
struct APlayerCameraManager : AActor 
{
	struct FNone*                                 PCOwner;                                                     // 0x310(0x08)
	struct FNone*                                 TransformComponent;                                          // 0x318(0x08)
	char                                          UnknownData320[0x8];                                         // 0x320(0x08)
	float                                         DefaultFOV;                                                  // 0x328(0x04)
	char                                          UnknownData32C[0x4];                                         // 0x32c(0x04)
	float                                         DefaultOrthoWidth;                                           // 0x330(0x04)
	char                                          UnknownData334[0x4];                                         // 0x334(0x04)
	float                                         DefaultAspectRatio;                                          // 0x338(0x04)
	char                                          UnknownData33C[0x44];                                        // 0x33c(0x44)
	struct FNone                                  CameraCache;                                                 // 0x380(0x660)
	struct FNone                                  LastFrameCameraCache;                                        // 0x9e0(0x660)
	struct FNone                                  ViewTarget;                                                  // 0x1040(0x670)
	struct FNone                                  PendingViewTarget;                                           // 0x16b0(0x670)
	char                                          UnknownData1D20[0x30];                                       // 0x1d20(0x30)
	struct FNone                                  CameraCachePrivate;                                          // 0x1d50(0x660)
	struct FNone                                  LastFrameCameraCachePrivate;                                 // 0x23b0(0x660)
	struct TArray<None>                           ModifierList;                                                // 0x2a10(0x10)
	struct TArray<None>                           DefaultModifiers;                                            // 0x2a20(0x10)
	float                                         FreeCamDistance;                                             // 0x2a30(0x04)
	struct FNone                                  FreeCamOffset;                                               // 0x2a34(0x0c)
	struct FNone                                  ViewTargetOffset;                                            // 0x2a40(0x0c)
	char                                          UnknownData2A4C[0x14];                                       // 0x2a4c(0x14)
	struct TArray<None>                           CameraLensEffects;                                           // 0x2a60(0x10)
	struct FNone*                                 CachedCameraShakeMod;                                        // 0x2a70(0x08)
	struct FNone*                                 AnimInstPool[0x8];                                           // 0x2a78(0x40)
	struct TArray<None>                           PostProcessBlendCache;                                       // 0x2ab8(0x10)
	char                                          UnknownData2AC8[0x10];                                       // 0x2ac8(0x10)
	struct TArray<None>                           ActiveAnims;                                                 // 0x2ad8(0x10)
	struct TArray<None>                           FreeAnims;                                                   // 0x2ae8(0x10)
	struct FNone*                                 AnimCameraActor;                                             // 0x2af8(0x08)
	char                                          bIsOrthographic : 0;                                         // 0x2b00(0x01)
	char                                          bDefaultConstrainAspectRatio : 0;                            // 0x2b00(0x01)
	char                                          bClientSimulatingViewTarget : 0;                             // 0x2b00(0x01)
	char                                          bUseClientSideCameraUpdates : 0;                             // 0x2b00(0x01)
	char                                          UnknownData2B00[0x1];                                        // 0x2b00(0x01)
	char                                          bGameCameraCutThisFrame : 0;                                 // 0x2b01(0x01)
	char                                          UnknownData2B01[0x3];                                        // 0x2b01(0x03)
	float                                         ViewPitchMin;                                                // 0x2b04(0x04)
	float                                         ViewPitchMax;                                                // 0x2b08(0x04)
	float                                         ViewYawMin;                                                  // 0x2b0c(0x04)
	float                                         ViewYawMax;                                                  // 0x2b10(0x04)
	float                                         ViewRollMin;                                                 // 0x2b14(0x04)
	float                                         ViewRollMax;                                                 // 0x2b18(0x04)
	char                                          UnknownData2B1C[0x4];                                        // 0x2b1c(0x04)
	float                                         ServerUpdateCameraTimeout;                                   // 0x2b20(0x04)
	char                                          UnknownData2B24[0xc];                                        // 0x2b24(0x0c)

	void StopCameraShake(struct FNone* ShakeInstance, char bImmediately); // sub_0x3da0da0
	void StopCameraFade(); // sub_0x201c950
	void StopCameraAnimInst(struct FNone* AnimInst, char bImmediate); // sub_0x3da0cd0
	void StopAllInstancesOfCameraShakeFromSource(struct FNone* SourceComponent, char bImmediately); // sub_0x3da0c00
	void StopAllInstancesOfCameraShake(struct FNone* Shake, char bImmediately); // sub_0x3da0b30
	void StopAllInstancesOfCameraAnim(struct FNone* Anim, char bImmediate); // sub_0x3da0a60
	void StopAllCameraShakes(char bImmediately); // sub_0x3da09d0
	void StopAllCameraAnims(char bImmediate); // sub_0x3da0940
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, struct FNone Color, char bShouldFadeAudio, char bHoldWhenFinished); // sub_0x3da0770
	void SetManualCameraFade(float InFadeAmount, struct FNone Color, char bInFadeAudio); // sub_0x3da0650
	void SetGameCameraCutThisFrame(); // sub_0x3da0630
	char RemoveCameraModifier(struct FNone* ModifierToRemove); // sub_0x3da0590
	void RemoveCameraLensEffect(struct FNone* Emitter); // sub_0x3ccb100
	struct FNone* PlayCameraShakeFromSource(struct FNone* ShakeClass, struct FNone* SourceComponent); // sub_0x3da04c0
	struct FNone* PlayCameraShake(struct FNone* ShakeClass, float Scale, char PlaySpace, struct FNone UserPlaySpaceRot); // sub_0x3da0350
	struct FNone* PlayCameraAnim(struct FNone* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, char bLoop, char bRandomStartTime, float Duration, char PlaySpace, struct FNone UserPlaySpaceRot); // sub_0x3da0070
	void PhotographyCameraModify(struct FNone NewCameraLocation, struct FNone PreviousCameraLocation, struct FNone OriginalCameraLocation, struct FNone& ResultCameraLocation); // sub_0x3d9fef0
	void OnPhotographySessionStart(); // sub_0x1f0adc0
	void OnPhotographySessionEnd(); // sub_0x1f0c650
	void OnPhotographyMultiPartCaptureStart(); // sub_0x1235530
	void OnPhotographyMultiPartCaptureEnd(); // sub_0x1e42900
	struct FNone* GetOwningPlayerController(); // sub_0x3d9fd10
	float GetFOVAngle(); // sub_0x3d9fa40
	struct FNone GetCameraRotation(); // sub_0x3d9fa00
	struct FNone GetCameraLocation(); // sub_0x3d9f9c0
	struct FNone* FindCameraModifierByClass(struct FNone* ModifierClass); // sub_0x3d9f920
	void ClearCameraLensEffects(); // sub_0x201b150
	char BlueprintUpdateCamera(struct FNone* CameraTarget, struct FNone& NewCameraLocation, struct FNone& NewCameraRotation, float& NewCameraFOV); // sub_0x239bfb0
	struct FNone* AddNewCameraModifier(struct FNone* ModifierClass); // sub_0x3d9f880
	struct FNone* AddCameraLensEffect(struct FNone* LensEffectEmitterClass); // sub_0x3d9f7e0
};

// Class Engine.MKPlayerStateEx
// Size: 0x318 (Inherited: 0x310)
struct AMKPlayerStateEx : AInfo 
{
	struct FNone*                                 SelfPlayerState;                                             // 0x310(0x08)
};

// Class Engine.PlayerState
// Size: 0x418 (Inherited: 0x318)
struct APlayerState : AMKPlayerStateEx 
{
	float                                         Score;                                                       // 0x318(0x04)
	uint32_t                                      PlayerId;                                                    // 0x31c(0x04)
	char                                          Ping;                                                        // 0x320(0x01)
	char                                          UnknownData321[0x1];                                         // 0x321(0x01)
	char                                          bShouldUpdateReplicatedPing : 0;                             // 0x322(0x01)
	char                                          bIsSpectator : 0;                                            // 0x322(0x01)
	char                                          bOnlySpectator : 0;                                          // 0x322(0x01)
	char                                          bIsABot : 0;                                                 // 0x322(0x01)
	char                                          bIsInactive : 0;                                             // 0x322(0x01)
	char                                          bFromPreviousLevel : 0;                                      // 0x322(0x01)
	char                                          UnknownData322[0x2];                                         // 0x322(0x02)
	uint32_t                                      StartTime;                                                   // 0x324(0x04)
	struct FNone*                                 EngineMessageClass;                                          // 0x328(0x08)
	char                                          UnknownData330[0x8];                                         // 0x330(0x08)
	struct FString                                SavedNetworkAddress;                                         // 0x338(0x10)
	struct FNone                                  UniqueID;                                                    // 0x348(0x28)
	char                                          UnknownData370[0x8];                                         // 0x370(0x08)
	struct FNone*                                 PawnPrivate;                                                 // 0x378(0x08)
	char                                          UnknownData380[0x78];                                        // 0x380(0x78)
	struct FString                                PlayerNamePrivate;                                           // 0x3f8(0x10)
	char                                          UnknownData408[0x10];                                        // 0x408(0x10)

	void ReceiveOverrideWith(struct FNone* OldPlayerState); // sub_0x239bfb0
	void ReceiveCopyProperties(struct FNone* NewPlayerState); // sub_0x239bfb0
	void OnRep_UniqueId(); // sub_0x12357a0
	void OnRep_Score(); // sub_0x1f0adc0
	void OnRep_PlayerName(); // sub_0x11caf10
	void OnRep_PlayerId(); // sub_0x1235460
	void OnRep_bIsInactive(); // sub_0x3c74d40
	struct FString GetPlayerName(); // sub_0x3dafdb0
};

// Class Engine.MK3DReplayData
// Size: 0x30 (Inherited: 0x28)
struct UMK3DReplayData : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
};

// Class Engine.MK3DEventFunction
// Size: 0x28 (Inherited: 0x28)
struct UMK3DEventFunction : UBlueprintFunctionLibrary 
{

	char UpdateKillcamInfo(struct FNone* WorldContextObject, struct FNone* Recorder, struct FNone* Target, struct FNone* Killer, struct FNone* Victim, char bUpdateTime); // sub_0x3d75310
	void PlaybackKillcam(struct FNone* WorldContextObject, char bAgain); // sub_0x3d74e20
	char AddMK3DTargetEventEx(struct FNone* WorldContextObject, struct FNone* TargetPlayerState); // sub_0x3d74350
	char AddMK3DKillEventExWithState(struct FNone* WorldContextObject, enum class None killType, struct FNone* Killer, struct FNone* KillerState, struct FNone* Victim, struct FNone* VictimState, struct FString DamageInfo); // sub_0x3d74140
	char AddMK3DKillEventEx(struct FNone* WorldContextObject, enum class None killType, struct FNone* Murderer, struct FNone* Victim, struct FString DamageInfo); // sub_0x3d73fb0
	char AddMK3DKillEvent(struct FNone* WorldContextObject, enum class None killType, struct FNone MK3DKillData); // sub_0x3d73da0
};

// Class Engine.SceneCaptureComponent
// Size: 0x2d0 (Inherited: 0x240)
struct USceneCaptureComponent : USceneComponent 
{
	enum class None                               PrimitiveRenderMode;                                         // 0x238(0x01)
	char                                          bTonemapPropagateAlpha : 0;                                  // 0x239(0x01)
	char                                          bUsePostProcessMaterial : 0;                                 // 0x239(0x01)
	char                                          bUseDirectionalLights : 0;                                   // 0x239(0x01)
	char                                          CaptureSource;                                               // 0x23a(0x01)
	char                                          bCaptureEveryFrame : 0;                                      // 0x23b(0x01)
	char                                          bCaptureOnMovement : 0;                                      // 0x23b(0x01)
	char                                          bAlwaysPersistRenderingState : 0;                            // 0x23c(0x01)
	struct TArray<None>                           HiddenComponents;                                            // 0x240(0x10)
	struct TArray<None>                           HiddenActors;                                                // 0x250(0x10)
	struct TArray<None>                           ShowOnlyComponents;                                          // 0x260(0x10)
	struct TArray<None>                           ShowOnlyActors;                                              // 0x270(0x10)
	float                                         LODDistanceFactor;                                           // 0x280(0x04)
	float                                         MaxViewDistanceOverride;                                     // 0x284(0x04)
	uint32_t                                      CaptureSortPriority;                                         // 0x288(0x04)
	char                                          bUseRayTracingIfEnabled : 0;                                 // 0x28c(0x01)
	char                                          UnknownData28E[0x2];                                         // 0x28e(0x02)
	struct TArray<None>                           ShowFlagSettings;                                            // 0x290(0x10)
	char                                          UnknownData2A0[0x10];                                        // 0x2a0(0x10)
	struct FString                                ProfilingEventName;                                          // 0x2b0(0x10)
	char                                          UnknownData2C0[0x10];                                        // 0x2c0(0x10)

	void ShowOnlyComponent(struct FNone* InComponent); // sub_0x3dcc010
	void ShowOnlyActorComponents(struct FNone* InActor, char bIncludeFromChildActors); // sub_0x3dcbf40
	void SetCaptureSortPriority(uint32_t NewCaptureSortPriority); // sub_0x3dcbaf0
	void RemoveShowOnlyComponent(struct FNone* InComponent); // sub_0x3dcb930
	void RemoveShowOnlyActorComponents(struct FNone* InActor, char bIncludeFromChildActors); // sub_0x3dcb860
	void HideComponent(struct FNone* InComponent); // sub_0x3dc9460
	void HideActorComponents(struct FNone* InActor, char bIncludeFromChildActors); // sub_0x3dc9390
	void ClearShowOnlyComponents(); // sub_0x3dc8a50
	void ClearHiddenComponents(); // sub_0x3dc8a30
};

// Class Engine.SceneCaptureComponent2D
// Size: 0x940 (Inherited: 0x2d0)
struct USceneCaptureComponent2D : USceneCaptureComponent 
{
	char                                          ProjectionType;                                              // 0x2d0(0x01)
	char                                          UnknownData2D1[0x3];                                         // 0x2d1(0x03)
	float                                         FOVAngle;                                                    // 0x2d4(0x04)
	float                                         OrthoWidth;                                                  // 0x2d8(0x04)
	char                                          UnknownData2DC[0x4];                                         // 0x2dc(0x04)
	struct FNone*                                 TextureTarget;                                               // 0x2e0(0x08)
	char                                          CompositeMode;                                               // 0x2e8(0x01)
	char                                          UnknownData2E9[0x7];                                         // 0x2e9(0x07)
	struct FNone                                  PostProcessSettings;                                         // 0x2f0(0x5c0)
	float                                         PostProcessBlendWeight;                                      // 0x8b0(0x04)
	char                                          bOverride_CustomNearClippingPlane : 0;                       // 0x8b4(0x01)
	char                                          UnknownData8B4[0x4];                                         // 0x8b4(0x04)
	float                                         CustomNearClippingPlane;                                     // 0x8b8(0x04)
	char                                          bUseCustomProjectionMatrix : 0;                              // 0x8bc(0x01)
	char                                          UnknownData8BC[0x4];                                         // 0x8bc(0x04)
	struct FNone                                  CustomProjectionMatrix;                                      // 0x8c0(0x40)
	char                                          bEnableClipPlane : 0;                                        // 0x900(0x01)
	char                                          UnknownData900[0x4];                                         // 0x900(0x04)
	struct FNone                                  ClipPlaneBase;                                               // 0x904(0x0c)
	struct FNone                                  ClipPlaneNormal;                                             // 0x910(0x0c)
	char                                          bCameraCutThisFrame : 0;                                     // 0x91c(0x01)
	char                                          bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 0;        // 0x91c(0x01)
	char                                          UnknownData91C[0x4];                                         // 0x91c(0x04)
	char                                          bDisableFlipCopyGLES : 0;                                    // 0x920(0x01)
	char                                          UnknownData920[0x20];                                        // 0x920(0x20)

	void CaptureScene(); // sub_0x3dc8a10
	void AddOrUpdateBlendable(struct TScriptInterface<INone> InBlendableObject, float InWeight); // sub_0x3dc88c0
};

// Class Engine.ArrowComponent
// Size: 0x4d0 (Inherited: 0x4c0)
struct UArrowComponent : UPrimitiveComponent 
{
	struct FNone                                  ArrowColor;                                                  // 0x4b8(0x04)
	float                                         ArrowSize;                                                   // 0x4bc(0x04)
	float                                         ScreenSize;                                                  // 0x4c0(0x04)
	char                                          bIsScreenSizeScaled : 0;                                     // 0x4c4(0x01)
	char                                          bTreatAsASprite : 0;                                         // 0x4c4(0x01)
	char                                          UnknownData4CC[0x4];                                         // 0x4cc(0x04)

	void SetArrowColor(struct FNone NewColor); // sub_0x3c6d390
};

// Class Engine.NavigationObjectBase
// Size: 0x338 (Inherited: 0x310)
struct ANavigationObjectBase : AActor 
{
	char                                          UnknownData310[0x8];                                         // 0x310(0x08)
	struct FNone*                                 CapsuleComponent;                                            // 0x318(0x08)
	struct FNone*                                 GoodSprite;                                                  // 0x320(0x08)
	struct FNone*                                 BadSprite;                                                   // 0x328(0x08)
	char                                          bIsPIEPlayerStart : 0;                                       // 0x330(0x01)
	char                                          UnknownData330[0x8];                                         // 0x330(0x08)
};

// Class Engine.PlayerStart
// Size: 0x340 (Inherited: 0x338)
struct APlayerStart : ANavigationObjectBase 
{
	struct FName                                  PlayerStartTag;                                              // 0x338(0x08)
};

// Class Engine.ProjectileMovementComponent
// Size: 0x1d0 (Inherited: 0xf0)
struct UProjectileMovementComponent : UMovementComponent 
{
	float                                         InitialSpeed;                                                // 0xf0(0x04)
	float                                         MaxSpeed;                                                    // 0xf4(0x04)
	char                                          bRotationFollowsVelocity : 0;                                // 0xf8(0x01)
	char                                          bRotationRemainsVertical : 0;                                // 0xf8(0x01)
	char                                          bShouldBounce : 0;                                           // 0xf8(0x01)
	char                                          bInitialVelocityInLocalSpace : 0;                            // 0xf8(0x01)
	char                                          bForceSubStepping : 0;                                       // 0xf8(0x01)
	char                                          bSimulationEnabled : 0;                                      // 0xf8(0x01)
	char                                          bSweepCollision : 0;                                         // 0xf8(0x01)
	char                                          bIsHomingProjectile : 0;                                     // 0xf8(0x01)
	char                                          UnknownDataF8[0x1];                                          // 0xf8(0x01)
	char                                          bBounceAngleAffectsFriction : 0;                             // 0xf9(0x01)
	char                                          bIsSliding : 0;                                              // 0xf9(0x01)
	char                                          bInterpMovement : 0;                                         // 0xf9(0x01)
	char                                          bInterpRotation : 0;                                         // 0xf9(0x01)
	char                                          UnknownDataF9[0x3];                                          // 0xf9(0x03)
	float                                         PreviousHitTime;                                             // 0xfc(0x04)
	struct FNone                                  PreviousHitNormal;                                           // 0x100(0x0c)
	float                                         ProjectileGravityScale;                                      // 0x10c(0x04)
	float                                         Buoyancy;                                                    // 0x110(0x04)
	float                                         Bounciness;                                                  // 0x114(0x04)
	float                                         Friction;                                                    // 0x118(0x04)
	float                                         BounceVelocityStopSimulatingThreshold;                       // 0x11c(0x04)
	float                                         MinFrictionFraction;                                         // 0x120(0x04)
	char                                          UnknownData124[0x4];                                         // 0x124(0x04)
	struct FMulticastInlineDelegate               OnProjectileBounce;                                          // 0x128(0x10)
	struct FMulticastInlineDelegate               OnProjectileStop;                                            // 0x138(0x10)
	float                                         HomingAccelerationMagnitude;                                 // 0x148(0x04)
	struct TWeakObjectPtr<struct FNone>           HomingTargetComponent;                                       // 0x14c(0x08)
	float                                         MaxSimulationTimeStep;                                       // 0x154(0x04)
	uint32_t                                      MaxSimulationIterations;                                     // 0x158(0x04)
	uint32_t                                      BounceAdditionalIterations;                                  // 0x15c(0x04)
	float                                         InterpLocationTime;                                          // 0x160(0x04)
	float                                         InterpRotationTime;                                          // 0x164(0x04)
	float                                         InterpLocationMaxLagDistance;                                // 0x168(0x04)
	float                                         InterpLocationSnapToTargetDistance;                          // 0x16c(0x04)
	char                                          UnknownData170[0x60];                                        // 0x170(0x60)

	void StopSimulating(struct FNone& HitResult); // sub_0x3dbbf60
	void SetVelocityInLocalSpace(struct FNone NewVelocity); // sub_0x3dbbed0
	void SetInterpolatedComponent(struct FNone* Component); // sub_0x3dbbd40
	void ResetInterpolation(); // sub_0x3dbbc20
	void OnProjectileStopDelegate__DelegateSignature(struct FNone& ImpactResult); // sub_0x239bfb0
	void OnProjectileBounceDelegate__DelegateSignature(struct FNone& ImpactResult, struct FNone& ImpactVelocity); // sub_0x239bfb0
	void MoveInterpolationTarget(struct FNone& NewLocation, struct FNone& NewRotation); // sub_0x3dbbab0
	struct FNone LimitVelocity(struct FNone NewVelocity); // sub_0x3dbba00
	char IsVelocityUnderSimulationThreshold(); // sub_0x3dbb9a0
	char IsInterpolationComplete(); // sub_0x3dbb970
};

// Class Engine.PrimaryDataAsset
// Size: 0x30 (Inherited: 0x30)
struct UPrimaryDataAsset : UDataAsset 
{
};

// Class Engine.GameUserSettings
// Size: 0x150 (Inherited: 0x28)
struct UGameUserSettings : UObject 
{
	char                                          bUseVSync : 0;                                               // 0x28(0x01)
	char                                          UnknownData28[0x1];                                          // 0x28(0x01)
	char                                          bIsSmoothFrameRate : 0;                                      // 0x29(0x01)
	char                                          UnknownData29[0x1];                                          // 0x29(0x01)
	char                                          bUseDynamicResolution : 0;                                   // 0x2a(0x01)
	char                                          UnknownData2A[0x56];                                         // 0x2a(0x56)
	uint32_t                                      ResolutionSizeX;                                             // 0x80(0x04)
	uint32_t                                      ResolutionSizeY;                                             // 0x84(0x04)
	uint32_t                                      LastUserConfirmedResolutionSizeX;                            // 0x88(0x04)
	uint32_t                                      LastUserConfirmedResolutionSizeY;                            // 0x8c(0x04)
	uint32_t                                      WindowPosX;                                                  // 0x90(0x04)
	uint32_t                                      WindowPosY;                                                  // 0x94(0x04)
	uint32_t                                      FullscreenMode;                                              // 0x98(0x04)
	uint32_t                                      LastConfirmedFullscreenMode;                                 // 0x9c(0x04)
	uint32_t                                      PreferredFullscreenMode;                                     // 0xa0(0x04)
	uint32_t                                      Version;                                                     // 0xa4(0x04)
	uint32_t                                      AudioQualityLevel;                                           // 0xa8(0x04)
	uint32_t                                      LastConfirmedAudioQualityLevel;                              // 0xac(0x04)
	float                                         FrameRateLimit;                                              // 0xb0(0x04)
	float                                         LobbyFrameRateLimit;                                         // 0xb4(0x04)
	char                                          UnknownDataB8[0x4];                                          // 0xb8(0x04)
	uint32_t                                      DesiredScreenWidth;                                          // 0xbc(0x04)
	char                                          bUseDesiredScreenHeight : 0;                                 // 0xc0(0x01)
	char                                          UnknownDataC0[0x4];                                          // 0xc0(0x04)
	uint32_t                                      DesiredScreenHeight;                                         // 0xc4(0x04)
	uint32_t                                      LastUserConfirmedDesiredScreenWidth;                         // 0xc8(0x04)
	uint32_t                                      LastUserConfirmedDesiredScreenHeight;                        // 0xcc(0x04)
	float                                         LastRecommendedScreenWidth;                                  // 0xd0(0x04)
	float                                         LastRecommendedScreenHeight;                                 // 0xd4(0x04)
	float                                         LastCPUBenchmarkResult;                                      // 0xd8(0x04)
	float                                         LastGPUBenchmarkResult;                                      // 0xdc(0x04)
	struct TArray<None>                           LastCPUBenchmarkSteps;                                       // 0xe0(0x10)
	struct TArray<None>                           LastGPUBenchmarkSteps;                                       // 0xf0(0x10)
	struct FString                                LastCPUBrand;                                                // 0x100(0x10)
	struct FString                                LastGPUBrand;                                                // 0x110(0x10)
	uint32_t                                      LastInstallStorageType;                                      // 0x120(0x04)
	char                                          UnknownData124[0x4];                                         // 0x124(0x04)
	uint64_t                                      LastTotalGraphicsMemory;                                     // 0x128(0x08)
	float                                         LastGPUBenchmarkMultiplier;                                  // 0x130(0x04)
	char                                          bUseHDRDisplayOutput : 0;                                    // 0x134(0x01)
	char                                          UnknownData134[0x4];                                         // 0x134(0x04)
	uint32_t                                      HDRDisplayOutputNits;                                        // 0x138(0x04)
	char                                          ShowHUD : 0;                                                 // 0x13c(0x01)
	char                                          UnknownData13C[0x4];                                         // 0x13c(0x04)
	struct FMulticastInlineDelegate               OnGameUserSettingsUINeedsUpdate;                             // 0x140(0x10)

	void ValidateSettings(); // sub_0x2ecb570
	char SupportsHDRDisplayOutput(); // sub_0x3cdbd70
	void SetVSyncEnabled(char bEnable); // sub_0x3cdbbe0
	void SetVisualEffectQuality(uint32_t Value); // sub_0x3cdbcf0
	void SetViewDistanceQuality(uint32_t Value); // sub_0x3cdbc70
	void SetToDefaults(char bIgnoreResolutionSettings); // sub_0x3cdbb50
	void SetTextureQuality(uint32_t Value); // sub_0x3cdbad0
	void SetSmoothFrameRateEnabled(char bEnable); // sub_0x3cdba40
	void SetShadowQuality(uint32_t Value); // sub_0x3cdb9c0
	void SetShadingQuality(uint32_t Value); // sub_0x3cdb940
	void SetScreenResolution(struct FNone Resolution); // sub_0x3cdb8c0
	void SetResolutionScaleValueEx(float NewScaleValue); // sub_0x3cdb840
	void SetResolutionScaleValue(uint32_t NewScaleValue); // sub_0x3cdb7c0
	void SetResolutionScaleNormalized(float NewScaleNormalized); // sub_0x3cdb740
	void SetPostProcessingQuality(uint32_t Value); // sub_0x3cdb6c0
	void SetOverallScalabilityLevel(uint32_t Value); // sub_0x3cdb630
	void SetLobbyFrameRateLimit(float NewLimit); // sub_0x3cdb5b0
	void SetFullscreenMode(char InFullscreenMode); // sub_0x3cdb530
	void SetFrameRateLimit(float NewLimit); // sub_0x3cdb4b0
	void SetFoliageQuality(uint32_t Value); // sub_0x3cdb430
	void SetDynamicResolutionEnabled(char bEnable); // sub_0x3cdb3a0
	void SetBenchmarkFallbackValues(); // sub_0x3cdb380
	void SetAudioQualityLevel(uint32_t QualityLevel); // sub_0x3cdb300
	void SetAntiAliasingQuality(uint32_t Value); // sub_0x3cdb280
	void SaveSettings(); // sub_0x1e97ea0
	void RunHardwareBenchmark(uint32_t WorkScale, float CPUMultiplier, float GPUMultiplier); // sub_0x3cdb180
	void RevertVideoMode(); // sub_0x3cdb160
	void ResetToCurrentSettings(); // sub_0x3c493e0
	void LoadSettings(char bForceReload); // sub_0x3cdb0d0
	char IsVSyncEnabled(); // sub_0x1079450
	char IsVSyncDirty(); // sub_0x3cdb0a0
	char IsSmoothFrameRate(); // sub_0x3cdb070
	char IsShowingHUD(); // sub_0x3cdb040
	char IsScreenResolutionDirty(); // sub_0x3cdb010
	char IsHDREnabled(); // sub_0x3cdafe0
	char IsFullscreenModeDirty(); // sub_0x3cdafb0
	char IsDynamicResolutionEnabled(); // sub_0x3cdaf80
	char IsDynamicResolutionDirty(); // sub_0x3cdaf50
	char IsDirty(); // sub_0x3cdaf20
	uint32_t GetVisualEffectQuality(); // sub_0x1078db0
	uint32_t GetViewDistanceQuality(); // sub_0x3cdae90
	uint32_t GetTextureQuality(); // sub_0x3cdae60
	uint32_t GetSyncInterval(); // sub_0x3cdae30
	uint32_t GetShadowQuality(); // sub_0x1380c60
	uint32_t GetShadingQuality(); // sub_0x10831d0
	struct FNone GetScreenResolution(); // sub_0x3cdadb0
	float GetResolutionScaleNormalized(); // sub_0x3cdad80
	void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // sub_0x3cdabe0
	void GetResolutionScaleInformation(float& CurrentScaleNormalized, uint32_t& CurrentScaleValue, uint32_t& MinScaleValue, uint32_t& MaxScaleValue); // sub_0x3cdaa40
	float GetRecommendedResolutionScale(); // sub_0x3cdaa00
	char GetPreferredFullscreenMode(); // sub_0x3cda9d0
	uint32_t GetPostProcessingQuality(); // sub_0x3cda9a0
	uint32_t GetOverallScalabilityLevel(); // sub_0x3cda830
	float GetLobbyFrameRateLimit(); // sub_0x3cda800
	struct FNone GetLastConfirmedScreenResolution(); // sub_0x3cda7c0
	char GetLastConfirmedFullscreenMode(); // sub_0x3cda790
	struct FNone* GetGameUserSettings(); // sub_0x3cda760
	char GetFullscreenMode(); // sub_0x3cda730
	float GetFrameRateLimit(); // sub_0x3cda700
	uint32_t GetFramePace(); // sub_0x3cda6d0
	uint32_t GetFoliageQuality(); // sub_0x3cda6a0
	struct FNone GetDesktopResolution(); // sub_0x3cda660
	struct FNone GetDefaultWindowPosition(); // sub_0x3cda620
	char GetDefaultWindowMode(); // sub_0x3cda5f0
	float GetDefaultResolutionScale(); // sub_0x3cda5b0
	struct FNone GetDefaultResolution(); // sub_0x3cda570
	char GetCurrentResolutionWindowMode(); // sub_0x3cda540
	uint32_t GetCurrentHDRDisplayNits(); // sub_0x3cda510
	uint32_t GetAudioQualityLevel(); // sub_0x31a6de0
	uint32_t GetAntiAliasingQuality(); // sub_0x106d710
	void EnableHDRDisplayOutput(char bEnable, uint32_t DisplayNits); // sub_0x3cda450
	void ConfirmVideoMode(); // sub_0x2ecb6d0
	void ApplySettings(char bCheckForCommandLineOverrides); // sub_0x3cda3c0
	void ApplyResolutionSettings(char bCheckForCommandLineOverrides); // sub_0x3cda330
	void ApplyNonResolutionSettings(); // sub_0x2ecb710
	void ApplyHardwareBenchmarkResults(); // sub_0x1e97fa0
};

// Class Engine.CapsuleComponent
// Size: 0x4e0 (Inherited: 0x4d0)
struct UCapsuleComponent : UShapeComponent 
{
	float                                         CapsuleHalfHeight;                                           // 0x4d0(0x04)
	float                                         CapsuleRadius;                                               // 0x4d4(0x04)
	char                                          UnknownData4D8[0x8];                                         // 0x4d8(0x08)

	void SetCapsuleSize(float InRadius, float InHalfHeight, char bUpdateOverlaps); // sub_0x3c996c0
	void SetCapsuleRadius(float Radius, char bUpdateOverlaps); // sub_0x3c995f0
	void SetCapsuleHalfHeight(float HalfHeight, char bUpdateOverlaps); // sub_0x3c99520
	void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // sub_0x3c978b0
	void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // sub_0x3c977c0
	float GetUnscaledCapsuleRadius(); // sub_0x3c977a0
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere(); // sub_0x3c97770
	float GetUnscaledCapsuleHalfHeight(); // sub_0x3c97750
	float GetShapeScale(); // sub_0x3c97630
	void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // sub_0x3c97510
	void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // sub_0x3c97400
	float GetScaledCapsuleRadius(); // sub_0x3c973c0
	float GetScaledCapsuleHalfHeight_WithoutHemisphere(); // sub_0x3c97370
	float GetScaledCapsuleHalfHeight(); // sub_0x3c97340
};

// Class Engine.ScriptViewportClient
// Size: 0x38 (Inherited: 0x28)
struct UScriptViewportClient : UObject 
{
	char                                          UnknownData28[0x10];                                         // 0x28(0x10)
};

// Class Engine.GameViewportClient
// Size: 0x330 (Inherited: 0x38)
struct UGameViewportClient : UScriptViewportClient 
{
	char                                          UnknownData38[0x8];                                          // 0x38(0x08)
	struct FNone*                                 ViewportConsole;                                             // 0x40(0x08)
	struct TArray<None>                           DebugProperties;                                             // 0x48(0x10)
	char                                          UnknownData58[0x10];                                         // 0x58(0x10)
	uint32_t                                      MaxSplitscreenPlayers;                                       // 0x68(0x04)
	char                                          UnknownData6C[0xc];                                          // 0x6c(0x0c)
	struct FNone*                                 World;                                                       // 0x78(0x08)
	struct FNone*                                 GameInstance;                                                // 0x80(0x08)
	char                                          UnknownData88[0x2a8];                                        // 0x88(0x2a8)

	void SSSwapControllers(); // sub_0x2ecb6f0
	void ShowTitleSafeArea(); // sub_0x2ecb710
	void SetConsoleTarget(uint32_t PlayerIndex); // sub_0x3ce05e0
};

// Class Engine.PhysicsVolume
// Size: 0x358 (Inherited: 0x348)
struct APhysicsVolume : AVolume 
{
	float                                         TerminalVelocity;                                            // 0x348(0x04)
	uint32_t                                      Priority;                                                    // 0x34c(0x04)
	float                                         FluidFriction;                                               // 0x350(0x04)
	char                                          bWaterVolume : 0;                                            // 0x354(0x01)
	char                                          bPhysicsOnContact : 0;                                       // 0x354(0x01)
	char                                          UnknownData354[0x4];                                         // 0x354(0x04)
};

// Class Engine.WorldSettings
// Size: 0x498 (Inherited: 0x310)
struct AWorldSettings : AInfo 
{
	char                                          UnknownData310[0x8];                                         // 0x310(0x08)
	uint32_t                                      VisibilityCellSize;                                          // 0x318(0x04)
	char                                          VisibilityAggressiveness;                                    // 0x31c(0x01)
	char                                          bPrecomputeVisibility : 0;                                   // 0x31d(0x01)
	char                                          bPlaceCellsOnlyAlongCameraTracks : 0;                        // 0x31d(0x01)
	char                                          bEnableWorldBoundsChecks : 0;                                // 0x31d(0x01)
	char                                          bEnableNavigationSystem : 0;                                 // 0x31d(0x01)
	char                                          bEnableAISystem : 0;                                         // 0x31d(0x01)
	char                                          bEnableWorldComposition : 0;                                 // 0x31d(0x01)
	char                                          bUseClientSideLevelStreamingVolumes : 0;                     // 0x31d(0x01)
	char                                          bEnableWorldOriginRebasing : 0;                              // 0x31d(0x01)
	char                                          UnknownData31D[0x1];                                         // 0x31d(0x01)
	char                                          bWorldGravitySet : 0;                                        // 0x31e(0x01)
	char                                          bGlobalGravitySet : 0;                                       // 0x31e(0x01)
	char                                          bMinimizeBSPSections : 0;                                    // 0x31e(0x01)
	char                                          bForceNoPrecomputedLighting : 0;                             // 0x31e(0x01)
	char                                          bHighPriorityLoading : 0;                                    // 0x31e(0x01)
	char                                          bHighPriorityLoadingLocal : 0;                               // 0x31e(0x01)
	char                                          bOverrideDefaultBroadphaseSettings : 0;                      // 0x31e(0x01)
	char                                          UnknownData31E[0x2];                                         // 0x31e(0x02)
	struct FNone*                                 NavigationSystemConfig;                                      // 0x320(0x08)
	struct FNone*                                 NavigationSystemConfigOverride;                              // 0x328(0x08)
	float                                         WorldToMeters;                                               // 0x330(0x04)
	float                                         KillZ;                                                       // 0x334(0x04)
	struct FNone*                                 KillZDamageType;                                             // 0x338(0x08)
	float                                         WorldGravityZ;                                               // 0x340(0x04)
	float                                         GlobalGravityZ;                                              // 0x344(0x04)
	struct FNone*                                 DefaultPhysicsVolumeClass;                                   // 0x348(0x08)
	struct FNone*                                 PhysicsCollisionHandlerClass;                                // 0x350(0x08)
	struct FNone*                                 DefaultGameMode;                                             // 0x358(0x08)
	struct FNone*                                 GameNetworkManagerClass;                                     // 0x360(0x08)
	uint32_t                                      PackedLightAndShadowMapTextureSize;                          // 0x368(0x04)
	struct FNone                                  DefaultColorScale;                                           // 0x36c(0x0c)
	float                                         DefaultMaxDistanceFieldOcclusionDistance;                    // 0x378(0x04)
	float                                         GlobalDistanceFieldViewDistance;                             // 0x37c(0x04)
	float                                         DynamicIndirectShadowsSelfShadowingIntensity;                // 0x380(0x04)
	char                                          UnknownData384[0x4];                                         // 0x384(0x04)
	struct FNone                                  DefaultReverbSettings;                                       // 0x388(0x20)
	struct FNone                                  DefaultAmbientZoneSettings;                                  // 0x3a8(0x24)
	float                                         MonoCullingDistance;                                         // 0x3cc(0x04)
	struct FNone*                                 DefaultBaseSoundMix;                                         // 0x3d0(0x08)
	float                                         TimeDilation;                                                // 0x3d8(0x04)
	float                                         MatineeTimeDilation;                                         // 0x3dc(0x04)
	float                                         DemoPlayTimeDilation;                                        // 0x3e0(0x04)
	float                                         MinGlobalTimeDilation;                                       // 0x3e4(0x04)
	float                                         MaxGlobalTimeDilation;                                       // 0x3e8(0x04)
	float                                         MinUndilatedFrameTime;                                       // 0x3ec(0x04)
	float                                         MaxUndilatedFrameTime;                                       // 0x3f0(0x04)
	struct FNone                                  BroadphaseSettings;                                          // 0x3f4(0x40)
	char                                          UnknownData434[0x4];                                         // 0x434(0x04)
	struct FNone*                                 Pauser;                                                      // 0x438(0x08)
	struct TArray<None>                           ReplicationViewers;                                          // 0x440(0x10)
	struct TArray<None>                           AssetUserData;                                               // 0x450(0x10)
	struct FNone*                                 PauserPlayerState;                                           // 0x460(0x08)
	uint32_t                                      MaxNumberOfBookmarks;                                        // 0x468(0x04)
	char                                          UnknownData46C[0x4];                                         // 0x46c(0x04)
	struct FNone*                                 DefaultBookmarkClass;                                        // 0x470(0x08)
	struct TArray<None>                           BookmarkArray;                                               // 0x478(0x10)
	struct FNone*                                 LastBookmarkClass;                                           // 0x488(0x08)
	char                                          bUseInstancedStaticCollision : 0;                            // 0x490(0x01)
	char                                          UnknownData490[0x8];                                         // 0x490(0x08)

	void OnRep_WorldGravityZ(); // sub_0x1e42900
};

// Class Engine.CameraModifier
// Size: 0x48 (Inherited: 0x28)
struct UCameraModifier : UObject 
{
	char                                          bDebug : 0;                                                  // 0x28(0x01)
	char                                          bExclusive : 0;                                              // 0x28(0x01)
	char                                          UnknownData28[0x4];                                          // 0x28(0x04)
	char                                          Priority;                                                    // 0x2c(0x01)
	char                                          UnknownData2D[0x3];                                          // 0x2d(0x03)
	struct FNone*                                 CameraOwner;                                                 // 0x30(0x08)
	float                                         AlphaInTime;                                                 // 0x38(0x04)
	float                                         AlphaOutTime;                                                // 0x3c(0x04)
	float                                         ALPHA;                                                       // 0x40(0x04)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)

	char IsDisabled(); // sub_0x2ecb670
	struct FNone* GetViewTarget(); // sub_0x3373630
	void EnableModifier(); // sub_0x3c90e30
	void DisableModifier(char bImmediate); // sub_0x3c90da0
	void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, struct FNone& PostProcessSettings); // sub_0x239bfb0
	void BlueprintModifyCamera(float DeltaTime, struct FNone ViewLocation, struct FNone ViewRotation, float FOV, struct FNone& NewViewLocation, struct FNone& NewViewRotation, float& NewFOV); // sub_0x239bfb0
};

// Class Engine.SkyLight
// Size: 0x320 (Inherited: 0x310)
struct ASkyLight : AInfo 
{
	struct FNone*                                 LightComponent;                                              // 0x310(0x08)
	char                                          bEnabled : 0;                                                // 0x318(0x01)
	char                                          UnknownData318[0x8];                                         // 0x318(0x08)

	void OnRep_bEnabled(); // sub_0x1e42900
};

// Class Engine.TextureCube
// Size: 0x110 (Inherited: 0xb8)
struct UTextureCube : UTexture 
{
	char                                          UnknownDataB8[0x58];                                         // 0xb8(0x58)
};

// Class Engine.MaterialInterface
// Size: 0x88 (Inherited: 0x28)
struct UMaterialInterface : UObject 
{
	char                                          UnknownData28[0x10];                                         // 0x28(0x10)
	struct FNone*                                 SubsurfaceProfile;                                           // 0x38(0x08)
	char                                          UnknownData40[0x10];                                         // 0x40(0x10)
	struct FNone                                  LightmassSettings;                                           // 0x50(0x10)
	struct TArray<None>                           TextureStreamingData;                                        // 0x60(0x10)
	struct TArray<None>                           AssetUserData;                                               // 0x70(0x10)
	char                                          UnknownData80[0x8];                                          // 0x80(0x08)

	void SetForceMipLevelsToBeResident(char OverrideForceMiplevelsToBeResident, char bForceMiplevelsToBeResidentValue, float ForceDuration, uint32_t CinematicTextureGroups, char bFastResponse); // sub_0x3d6d020
	struct FNone* GetPhysicalMaterialMask(); // sub_0x3373600
	struct FNone* GetPhysicalMaterialFromMap(uint32_t Index); // sub_0x3d6c7f0
	struct FNone* GetPhysicalMaterial(); // sub_0x3373630
	struct FNone GetParameterInfo(char Association, struct FName ParameterName, struct FNone* LayerFunction); // sub_0x3d6c6e0
	struct FNone* GetBaseMaterial(); // sub_0x3d6c6b0
};

// Class Engine.MaterialInstance
// Size: 0x408 (Inherited: 0x88)
struct UMaterialInstance : UMaterialInterface 
{
	struct FNone*                                 PhysMaterial;                                                // 0x88(0x08)
	struct FNone*                                 PhysicalMaterialMap[0x8];                                    // 0x90(0x40)
	struct FNone*                                 Parent;                                                      // 0xd0(0x08)
	char                                          bHasStaticPermutationResource : 0;                           // 0xd8(0x01)
	char                                          bOverrideSubsurfaceProfile : 0;                              // 0xd8(0x01)
	char                                          UnknownDataD8[0x8];                                          // 0xd8(0x08)
	struct TArray<None>                           ScalarParameterValues;                                       // 0xe0(0x10)
	struct TArray<None>                           VectorParameterValues;                                       // 0xf0(0x10)
	struct TArray<None>                           TextureParameterValues;                                      // 0x100(0x10)
	struct TArray<None>                           RuntimeVirtualTextureParameterValues;                        // 0x110(0x10)
	struct TArray<None>                           FontParameterValues;                                         // 0x120(0x10)
	struct FNone                                  BasePropertyOverrides;                                       // 0x130(0x08)
	char                                          UnknownData138[0x10];                                        // 0x138(0x10)
	struct FNone                                  StaticParameters;                                            // 0x148(0x40)
	struct FNone                                  CachedLayerParameters;                                       // 0x188(0x1a0)
	struct TArray<None>                           CachedReferencedTextures;                                    // 0x328(0x10)
	char                                          UnknownData338[0xd0];                                        // 0x338(0xd0)
};

// Class Engine.MaterialInstanceConstant
// Size: 0x410 (Inherited: 0x408)
struct UMaterialInstanceConstant : UMaterialInstance 
{
	struct FNone*                                 PhysMaterialMask;                                            // 0x408(0x08)

	struct FNone K2_GetVectorParameterValue(struct FName ParameterName); // sub_0x3d6cd20
	struct FNone* K2_GetTextureParameterValue(struct FName ParameterName); // sub_0x3d6cb50
	float K2_GetScalarParameterValue(struct FName ParameterName); // sub_0x3d6c960
};

// Class Engine.WorldSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UWorldSubsystem : USubsystem 
{
};

// Class Engine.MaterialExpressionCustomOutput
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionCustomOutput : UMaterialExpression 
{
};

// Class Engine.EngineCustomTimeStep
// Size: 0x28 (Inherited: 0x28)
struct UEngineCustomTimeStep : UObject 
{
};

// Class Engine.DynamicBlueprintBinding
// Size: 0x28 (Inherited: 0x28)
struct UDynamicBlueprintBinding : UObject 
{
};

// Class Engine.BlueprintGeneratedClass
// Size: 0x3c8 (Inherited: 0x2d0)
struct UBlueprintGeneratedClass : UClass 
{
	uint32_t                                      NumReplicatedProperties;                                     // 0x2d0(0x04)
	char                                          bHasNativizedParent : 0;                                     // 0x2d4(0x01)
	char                                          bHasCookedComponentInstancingData : 0;                       // 0x2d4(0x01)
	char                                          UnknownData2D4[0x4];                                         // 0x2d4(0x04)
	struct TArray<None>                           DynamicBindingObjects;                                       // 0x2d8(0x10)
	struct TArray<None>                           ComponentTemplates;                                          // 0x2e8(0x10)
	struct TArray<None>                           Timelines;                                                   // 0x2f8(0x10)
	struct TArray<None>                           ComponentClassOverrides;                                     // 0x308(0x10)
	struct FNone*                                 SimpleConstructionScript;                                    // 0x318(0x08)
	struct FNone*                                 InheritableComponentHandler;                                 // 0x320(0x08)
	struct FNone*                                 UberGraphFramePointerProperty;                               // 0x328(0x08)
	char                                          UnknownData330[0x8];                                         // 0x330(0x08)
	struct FNone*                                 UberGraphFunction;                                           // 0x338(0x08)
	struct TMap<None, None>                       CookedComponentInstancingData;                               // 0x340(0x50)
	char                                          UnknownData390[0x38];                                        // 0x390(0x38)
};

// Class Engine.CameraActor
// Size: 0x900 (Inherited: 0x310)
struct ACameraActor : AActor 
{
	char                                          AutoActivateForPlayer;                                       // 0x310(0x01)
	char                                          UnknownData311[0x7];                                         // 0x311(0x07)
	struct FNone*                                 CameraComponent;                                             // 0x318(0x08)
	struct FNone*                                 SceneComponent;                                              // 0x320(0x08)
	char                                          UnknownData328[0x8];                                         // 0x328(0x08)
	char                                          bConstrainAspectRatio : 0;                                   // 0x330(0x01)
	char                                          UnknownData330[0x4];                                         // 0x330(0x04)
	float                                         AspectRatio;                                                 // 0x334(0x04)
	float                                         FOVAngle;                                                    // 0x338(0x04)
	float                                         PostProcessBlendWeight;                                      // 0x33c(0x04)
	struct FNone                                  PostProcessSettings;                                         // 0x340(0x5c0)

	uint32_t GetAutoActivatePlayerIndex(); // sub_0x3c8d750
};

// Class Engine.SoundBase
// Size: 0x160 (Inherited: 0x28)
struct USoundBase : UObject 
{
	struct FNone*                                 SoundClassObject;                                            // 0x28(0x08)
	char                                          bDebug : 0;                                                  // 0x30(0x01)
	char                                          bOverrideConcurrency : 0;                                    // 0x30(0x01)
	char                                          bOutputToBusOnly : 0;                                        // 0x30(0x01)
	char                                          bHasDelayNode : 0;                                           // 0x30(0x01)
	char                                          bHasConcatenatorNode : 0;                                    // 0x30(0x01)
	char                                          bBypassVolumeScaleForPriority : 0;                           // 0x30(0x01)
	char                                          UnknownData30[0x1];                                          // 0x30(0x01)
	enum class None                               VirtualizationMode;                                          // 0x31(0x01)
	char                                          UnknownData32[0x56];                                         // 0x32(0x56)
	struct TSet<None>                             ConcurrencySet;                                              // 0x88(0x50)
	struct FNone                                  ConcurrencyOverrides;                                        // 0xd8(0x20)
	float                                         Duration;                                                    // 0xf8(0x04)
	float                                         MaxDistance;                                                 // 0xfc(0x04)
	float                                         TotalSamples;                                                // 0x100(0x04)
	float                                         Priority;                                                    // 0x104(0x04)
	struct FNone*                                 AttenuationSettings;                                         // 0x108(0x08)
	struct FNone                                  Modulation;                                                  // 0x110(0x10)
	struct FNone*                                 SoundSubmixObject;                                           // 0x120(0x08)
	struct TArray<None>                           SoundSubmixSends;                                            // 0x128(0x10)
	struct FNone*                                 SourceEffectChain;                                           // 0x138(0x08)
	struct TArray<None>                           BusSends;                                                    // 0x140(0x10)
	struct TArray<None>                           PreEffectBusSends;                                           // 0x150(0x10)
};

// Class Engine.SoundWave
// Size: 0x308 (Inherited: 0x160)
struct USoundWave : USoundBase 
{
	uint32_t                                      CompressionQuality;                                          // 0x160(0x04)
	uint32_t                                      StreamingPriority;                                           // 0x164(0x04)
	enum class None                               SampleRateQuality;                                           // 0x168(0x01)
	char                                          UnknownData169[0x1];                                         // 0x169(0x01)
	char                                          SoundGroup;                                                  // 0x16a(0x01)
	char                                          bLooping : 0;                                                // 0x16b(0x01)
	char                                          bStreaming : 0;                                              // 0x16b(0x01)
	char                                          bSeekableStreaming : 0;                                      // 0x16b(0x01)
	char                                          UnknownData16B[0x1];                                         // 0x16b(0x01)
	enum class None                               LoadingBehavior;                                             // 0x16c(0x01)
	char                                          bMature : 0;                                                 // 0x16d(0x01)
	char                                          bManualWordWrap : 0;                                         // 0x16d(0x01)
	char                                          bSingleLine : 0;                                             // 0x16d(0x01)
	char                                          UnknownData16D[0x1];                                         // 0x16d(0x01)
	char                                          bIsAmbisonics : 0;                                           // 0x16e(0x01)
	char                                          UnknownData16E[0x2];                                         // 0x16e(0x02)
	struct TArray<None>                           FrequenciesToAnalyze;                                        // 0x170(0x10)
	struct TArray<None>                           CookedSpectralTimeData;                                      // 0x180(0x10)
	struct TArray<None>                           CookedEnvelopeTimeData;                                      // 0x190(0x10)
	uint32_t                                      InitialChunkSize;                                            // 0x1a0(0x04)
	char                                          UnknownData1A4[0x44];                                        // 0x1a4(0x44)
	struct FString                                SpokenText;                                                  // 0x1e8(0x10)
	float                                         SubtitlePriority;                                            // 0x1f8(0x04)
	float                                         Volume;                                                      // 0x1fc(0x04)
	float                                         Pitch;                                                       // 0x200(0x04)
	uint32_t                                      NumChannels;                                                 // 0x204(0x04)
	uint32_t                                      SampleRate;                                                  // 0x208(0x04)
	char                                          UnknownData20C[0xc];                                         // 0x20c(0x0c)
	struct TArray<None>                           Subtitles;                                                   // 0x218(0x10)
	struct FNone*                                 Curves;                                                      // 0x228(0x08)
	struct FNone*                                 InternalCurves;                                              // 0x230(0x08)
	char                                          UnknownData238[0xd0];                                        // 0x238(0xd0)
};

// Class Engine.SoundWaveProcedural
// Size: 0x360 (Inherited: 0x308)
struct USoundWaveProcedural : USoundWave 
{
	char                                          UnknownData308[0x58];                                        // 0x308(0x58)
};

// Class Engine.BlueprintCore
// Size: 0x50 (Inherited: 0x28)
struct UBlueprintCore : UObject 
{
	struct FNone*                                 SkeletonGeneratedClass;                                      // 0x28(0x08)
	struct FNone*                                 GeneratedClass;                                              // 0x30(0x08)
	char                                          bLegacyNeedToPurgeSkelRefs : 0;                              // 0x38(0x01)
	char                                          UnknownData38[0x4];                                          // 0x38(0x04)
	struct FNone                                  BlueprintGuid;                                               // 0x3c(0x10)
	char                                          UnknownData4C[0x4];                                          // 0x4c(0x04)
};

// Class Engine.Blueprint
// Size: 0xa0 (Inherited: 0x50)
struct UBlueprint : UBlueprintCore 
{
	struct FNone*                                 ParentClass;                                                 // 0x50(0x08)
	char                                          BlueprintType;                                               // 0x58(0x01)
	char                                          bRecompileOnLoad : 0;                                        // 0x59(0x01)
	char                                          bHasBeenRegenerated : 0;                                     // 0x59(0x01)
	char                                          bIsRegeneratingOnLoad : 0;                                   // 0x59(0x01)
	char                                          UnknownData59[0x3];                                          // 0x59(0x03)
	uint32_t                                      BlueprintSystemVersion;                                      // 0x5c(0x04)
	struct FNone*                                 SimpleConstructionScript;                                    // 0x60(0x08)
	struct TArray<None>                           ComponentTemplates;                                          // 0x68(0x10)
	struct TArray<None>                           Timelines;                                                   // 0x78(0x10)
	struct TArray<None>                           ComponentClassOverrides;                                     // 0x88(0x10)
	struct FNone*                                 InheritableComponentHandler;                                 // 0x98(0x08)
};

// Class Engine.Model
// Size: 0x258 (Inherited: 0x28)
struct UModel : UObject 
{
	char                                          UnknownData28[0x230];                                        // 0x28(0x230)
};

// Class Engine.MKChannelEx
// Size: 0x38 (Inherited: 0x28)
struct UMKChannelEx : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct FNone*                                 SelfChannel;                                                 // 0x30(0x08)
};

// Class Engine.Channel
// Size: 0x80 (Inherited: 0x38)
struct UChannel : UMKChannelEx 
{
	struct FNone*                                 Connection;                                                  // 0x38(0x08)
	char                                          UnknownData40[0x40];                                         // 0x40(0x40)
};

// Class Engine.MKActorChannelEx
// Size: 0xa8 (Inherited: 0x80)
struct UMKActorChannelEx : UChannel 
{
	char                                          UnknownData80[0x20];                                         // 0x80(0x20)
	struct FNone*                                 SelfActorChannel;                                            // 0xa0(0x08)
};

// Class Engine.ActorChannel
// Size: 0x2d0 (Inherited: 0xa8)
struct UActorChannel : UMKActorChannelEx 
{
	struct FNone*                                 Actor;                                                       // 0xa8(0x08)
	char                                          UnknownDataB0[0xe8];                                         // 0xb0(0xe8)
	struct TArray<None>                           CreateSubObjects;                                            // 0x198(0x10)
	char                                          UnknownData1A8[0x128];                                       // 0x1a8(0x128)
};

// Class Engine.AnimationAsset
// Size: 0x80 (Inherited: 0x28)
struct UAnimationAsset : UObject 
{
	char                                          UnknownData28[0x10];                                         // 0x28(0x10)
	struct FNone*                                 Skeleton;                                                    // 0x38(0x08)
	char                                          UnknownData40[0x20];                                         // 0x40(0x20)
	struct TArray<None>                           MetaData;                                                    // 0x60(0x10)
	struct TArray<None>                           AssetUserData;                                               // 0x70(0x10)
};

// Class Engine.BlendSpaceBase
// Size: 0x148 (Inherited: 0x80)
struct UBlendSpaceBase : UAnimationAsset 
{
	char                                          UnknownData80[0x8];                                          // 0x80(0x08)
	char                                          bRotationBlendInMeshSpace : 0;                               // 0x88(0x01)
	char                                          UnknownData88[0x4];                                          // 0x88(0x04)
	float                                         AnimLength;                                                  // 0x8c(0x04)
	struct FNone                                  InterpolationParam[0x3];                                     // 0x90(0x18)
	float                                         TargetWeightInterpolationSpeedPerSec;                        // 0xa8(0x04)
	char                                          NotifyTriggerMode;                                           // 0xac(0x01)
	char                                          UnknownDataAD[0x3];                                          // 0xad(0x03)
	struct TArray<None>                           PerBoneBlend;                                                // 0xb0(0x10)
	uint32_t                                      SampleIndexWithMarkers;                                      // 0xc0(0x04)
	char                                          UnknownDataC4[0x4];                                          // 0xc4(0x04)
	struct TArray<None>                           SampleData;                                                  // 0xc8(0x10)
	struct TArray<None>                           GridSamples;                                                 // 0xd8(0x10)
	struct FNone                                  BlendParameters[0x3];                                        // 0xe8(0x60)
};

// Class Engine.BlendSpace
// Size: 0x150 (Inherited: 0x148)
struct UBlendSpace : UBlendSpaceBase 
{
	char                                          AxisToScaleAnimation;                                        // 0x148(0x01)
	char                                          UnknownData149[0x7];                                         // 0x149(0x07)
};

// Class Engine.AimOffsetBlendSpace
// Size: 0x150 (Inherited: 0x150)
struct UAimOffsetBlendSpace : UBlendSpace 
{
};

// Class Engine.BlendSpace1D
// Size: 0x150 (Inherited: 0x148)
struct UBlendSpace1D : UBlendSpaceBase 
{
	char                                          bScaleAnimation : 0;                                         // 0x148(0x01)
	char                                          UnknownData148[0x8];                                         // 0x148(0x08)
};

// Class Engine.AimOffsetBlendSpace1D
// Size: 0x150 (Inherited: 0x150)
struct UAimOffsetBlendSpace1D : UBlendSpace1D 
{
};

// Class Engine.AISystemBase
// Size: 0x58 (Inherited: 0x28)
struct UAISystemBase : UObject 
{
	struct FNone                                  AISystemClassName;                                           // 0x28(0x18)
	struct FName                                  AISystemModuleName;                                          // 0x40(0x08)
	char                                          UnknownData48[0x8];                                          // 0x48(0x08)
	char                                          bInstantiateAISystemOnClient : 0;                            // 0x50(0x01)
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
};

// Class Engine.AmbientSound
// Size: 0x318 (Inherited: 0x310)
struct AAmbientSound : AActor 
{
	struct FNone*                                 AudioComponent;                                              // 0x310(0x08)

	void Stop(); // sub_0x3c4df50
	void Play(float StartTime); // sub_0x3c4da30
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel); // sub_0x3c4d810
	void FadeIn(float FadeInDuration, float FadeVolumeLevel); // sub_0x3c4d750
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel); // sub_0x3c4d600
};

// Class Engine.AnimationSettings
// Size: 0x58 (Inherited: 0x38)
struct UAnimationSettings : UDeveloperSettings 
{
	uint32_t                                      CompressCommandletVersion;                                   // 0x38(0x04)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
	struct TArray<None>                           KeyEndEffectorsMatchNameArray;                               // 0x40(0x10)
	char                                          ForceRecompression : 0;                                      // 0x50(0x01)
	char                                          UnknownData50[0x1];                                          // 0x50(0x01)
	char                                          bOnlyCheckForMissingSkeletalMeshes : 0;                      // 0x51(0x01)
	char                                          UnknownData51[0x1];                                          // 0x51(0x01)
	char                                          bForceBelowThreshold : 0;                                    // 0x52(0x01)
	char                                          UnknownData52[0x1];                                          // 0x52(0x01)
	char                                          bFirstRecompressUsingCurrentOrDefault : 0;                   // 0x53(0x01)
	char                                          UnknownData53[0x1];                                          // 0x53(0x01)
	char                                          bRaiseMaxErrorToExisting : 0;                                // 0x54(0x01)
	char                                          UnknownData54[0x1];                                          // 0x54(0x01)
	char                                          bEnablePerformanceLog : 0;                                   // 0x55(0x01)
	char                                          UnknownData55[0x1];                                          // 0x55(0x01)
	char                                          bStripAnimationDataOnDedicatedServer : 0;                    // 0x56(0x01)
	char                                          UnknownData56[0x1];                                          // 0x56(0x01)
	char                                          bTickAnimationOnSkeletalMeshInit : 0;                        // 0x57(0x01)
	char                                          UnknownData57[0x1];                                          // 0x57(0x01)
};

// Class Engine.AnimBlueprint
// Size: 0xc8 (Inherited: 0xa0)
struct UAnimBlueprint : UBlueprint 
{
	char                                          UnknownDataA0[0x8];                                          // 0xa0(0x08)
	struct FNone*                                 TargetSkeleton;                                              // 0xa8(0x08)
	struct TArray<None>                           Groups;                                                      // 0xb0(0x10)
	char                                          bUseMultiThreadedAnimationUpdate : 0;                        // 0xc0(0x01)
	char                                          UnknownDataC0[0x1];                                          // 0xc0(0x01)
	char                                          bWarnAboutBlueprintUsage : 0;                                // 0xc1(0x01)
	char                                          UnknownDataC1[0x7];                                          // 0xc1(0x07)
};

// Class Engine.AnimBlueprintGeneratedClass
// Size: 0x588 (Inherited: 0x3c8)
struct UAnimBlueprintGeneratedClass : UBlueprintGeneratedClass 
{
	char                                          UnknownData3C8[0x8];                                         // 0x3c8(0x08)
	struct TArray<None>                           BakedStateMachines;                                          // 0x3d0(0x10)
	struct FNone*                                 TargetSkeleton;                                              // 0x3e0(0x08)
	struct TArray<None>                           AnimNotifies;                                                // 0x3e8(0x10)
	struct TMap<None, None>                       OrderedSavedPoseIndicesMap;                                  // 0x3f8(0x50)
	char                                          UnknownData448[0x80];                                        // 0x448(0x80)
	struct TArray<None>                           SyncGroupNames;                                              // 0x4c8(0x10)
	struct TArray<None>                           EvaluateGraphExposedInputs;                                  // 0x4d8(0x10)
	struct TMap<None, None>                       GraphAssetPlayerInformation;                                 // 0x4e8(0x50)
	struct TMap<None, None>                       GraphBlendOptions;                                           // 0x538(0x50)
};

// Class Engine.AnimBoneCompressionCodec
// Size: 0x38 (Inherited: 0x28)
struct UAnimBoneCompressionCodec : UObject 
{
	struct FString                                Description;                                                 // 0x28(0x10)
};

// Class Engine.AnimBoneCompressionSettings
// Size: 0x38 (Inherited: 0x28)
struct UAnimBoneCompressionSettings : UObject 
{
	struct TArray<None>                           Codecs;                                                      // 0x28(0x10)
};

// Class Engine.AnimClassData
// Size: 0x268 (Inherited: 0x28)
struct UAnimClassData : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct TArray<None>                           BakedStateMachines;                                          // 0x30(0x10)
	struct FNone*                                 TargetSkeleton;                                              // 0x40(0x08)
	struct TArray<None>                           AnimNotifies;                                                // 0x48(0x10)
	struct TMap<None, None>                       OrderedSavedPoseIndicesMap;                                  // 0x58(0x50)
	struct TArray<None>                           AnimBlueprintFunctions;                                      // 0xa8(0x10)
	struct TArray<None>                           AnimBlueprintFunctionData;                                   // 0xb8(0x10)
	struct TArray<None>                           AnimNodeProperties;                                          // 0xc8(0x10)
	char                                          UnknownDataD8[0x10];                                         // 0xd8(0x10)
	struct TArray<None>                           LinkedAnimGraphNodeProperties;                               // 0xe8(0x10)
	char                                          UnknownDataF8[0x10];                                         // 0xf8(0x10)
	struct TArray<None>                           LinkedAnimLayerNodeProperties;                               // 0x108(0x10)
	char                                          UnknownData118[0x10];                                        // 0x118(0x10)
	struct TArray<None>                           PreUpdateNodeProperties;                                     // 0x128(0x10)
	char                                          UnknownData138[0x10];                                        // 0x138(0x10)
	struct TArray<None>                           DynamicResetNodeProperties;                                  // 0x148(0x10)
	char                                          UnknownData158[0x10];                                        // 0x158(0x10)
	struct TArray<None>                           StateMachineNodeProperties;                                  // 0x168(0x10)
	char                                          UnknownData178[0x10];                                        // 0x178(0x10)
	struct TArray<None>                           InitializationNodeProperties;                                // 0x188(0x10)
	char                                          UnknownData198[0x10];                                        // 0x198(0x10)
	struct TMap<None, None>                       GraphNameAssetPlayers;                                       // 0x1a8(0x50)
	struct TArray<None>                           SyncGroupNames;                                              // 0x1f8(0x10)
	struct TArray<None>                           EvaluateGraphExposedInputs;                                  // 0x208(0x10)
	struct TMap<None, None>                       GraphBlendOptions;                                           // 0x218(0x50)
};

// Class Engine.AnimClassInterface
// Size: 0x28 (Inherited: 0x28)
struct UAnimClassInterface : UInterface 
{
};

// Class Engine.AnimSequenceBase
// Size: 0xa8 (Inherited: 0x80)
struct UAnimSequenceBase : UAnimationAsset 
{
	struct TArray<None>                           Notifies;                                                    // 0x80(0x10)
	float                                         SequenceLength;                                              // 0x90(0x04)
	float                                         RateScale;                                                   // 0x94(0x04)
	struct FNone                                  RawCurveData;                                                // 0x98(0x10)

	float GetPlayLength(); // sub_0x3c67680
};

// Class Engine.AnimCompositeBase
// Size: 0xa8 (Inherited: 0xa8)
struct UAnimCompositeBase : UAnimSequenceBase 
{
};

// Class Engine.AnimComposite
// Size: 0xb8 (Inherited: 0xa8)
struct UAnimComposite : UAnimCompositeBase 
{
	struct FNone                                  AnimationTrack;                                              // 0xa8(0x10)
};

// Class Engine.AnimCompress
// Size: 0x40 (Inherited: 0x38)
struct UAnimCompress : UAnimBoneCompressionCodec 
{
	char                                          bNeedsSkeleton : 0;                                          // 0x38(0x01)
	char                                          UnknownData38[0x4];                                          // 0x38(0x04)
	char                                          TranslationCompressionFormat;                                // 0x3c(0x01)
	char                                          RotationCompressionFormat;                                   // 0x3d(0x01)
	char                                          ScaleCompressionFormat;                                      // 0x3e(0x01)
	char                                          UnknownData3F[0x1];                                          // 0x3f(0x01)
};

// Class Engine.AnimCompress_BitwiseCompressOnly
// Size: 0x40 (Inherited: 0x40)
struct UAnimCompress_BitwiseCompressOnly : UAnimCompress 
{
};

// Class Engine.AnimCompress_LeastDestructive
// Size: 0x40 (Inherited: 0x40)
struct UAnimCompress_LeastDestructive : UAnimCompress_BitwiseCompressOnly 
{
};

// Class Engine.AnimCompress_RemoveLinearKeys
// Size: 0x60 (Inherited: 0x40)
struct UAnimCompress_RemoveLinearKeys : UAnimCompress 
{
	float                                         MaxPosDiff;                                                  // 0x40(0x04)
	float                                         MaxAngleDiff;                                                // 0x44(0x04)
	float                                         MaxScaleDiff;                                                // 0x48(0x04)
	float                                         MaxEffectorDiff;                                             // 0x4c(0x04)
	float                                         MinEffectorDiff;                                             // 0x50(0x04)
	float                                         EffectorDiffSocket;                                          // 0x54(0x04)
	float                                         ParentKeyScale;                                              // 0x58(0x04)
	char                                          bRetarget : 0;                                               // 0x5c(0x01)
	char                                          bActuallyFilterLinearKeys : 0;                               // 0x5c(0x01)
	char                                          UnknownData5C[0x4];                                          // 0x5c(0x04)
};

// Class Engine.AnimCompress_PerTrackCompression
// Size: 0xd8 (Inherited: 0x60)
struct UAnimCompress_PerTrackCompression : UAnimCompress_RemoveLinearKeys 
{
	float                                         MaxZeroingThreshold;                                         // 0x60(0x04)
	float                                         MaxPosDiffBitwise;                                           // 0x64(0x04)
	float                                         MaxAngleDiffBitwise;                                         // 0x68(0x04)
	float                                         MaxScaleDiffBitwise;                                         // 0x6c(0x04)
	struct TArray<None>                           AllowedRotationFormats;                                      // 0x70(0x10)
	struct TArray<None>                           AllowedTranslationFormats;                                   // 0x80(0x10)
	struct TArray<None>                           AllowedScaleFormats;                                         // 0x90(0x10)
	char                                          bResampleAnimation : 0;                                      // 0xa0(0x01)
	char                                          UnknownDataA0[0x4];                                          // 0xa0(0x04)
	float                                         ResampledFramerate;                                          // 0xa4(0x04)
	uint32_t                                      MinKeysForResampling;                                        // 0xa8(0x04)
	char                                          bUseAdaptiveError : 0;                                       // 0xac(0x01)
	char                                          bUseOverrideForEndEffectors : 0;                             // 0xac(0x01)
	char                                          UnknownDataAC[0x4];                                          // 0xac(0x04)
	uint32_t                                      TrackHeightBias;                                             // 0xb0(0x04)
	float                                         ParentingDivisor;                                            // 0xb4(0x04)
	float                                         ParentingDivisorExponent;                                    // 0xb8(0x04)
	char                                          bUseAdaptiveError2 : 0;                                      // 0xbc(0x01)
	char                                          UnknownDataBC[0x4];                                          // 0xbc(0x04)
	float                                         RotationErrorSourceRatio;                                    // 0xc0(0x04)
	float                                         TranslationErrorSourceRatio;                                 // 0xc4(0x04)
	float                                         ScaleErrorSourceRatio;                                       // 0xc8(0x04)
	float                                         MaxErrorPerTrackRatio;                                       // 0xcc(0x04)
	float                                         PerturbationProbeSize;                                       // 0xd0(0x04)
	char                                          UnknownDataD4[0x4];                                          // 0xd4(0x04)
};

// Class Engine.AnimCompress_RemoveEverySecondKey
// Size: 0x48 (Inherited: 0x40)
struct UAnimCompress_RemoveEverySecondKey : UAnimCompress 
{
	uint32_t                                      MinKeys;                                                     // 0x40(0x04)
	char                                          bStartAtSecondKey : 0;                                       // 0x44(0x01)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
};

// Class Engine.AnimCompress_RemoveTrivialKeys
// Size: 0x50 (Inherited: 0x40)
struct UAnimCompress_RemoveTrivialKeys : UAnimCompress 
{
	float                                         MaxPosDiff;                                                  // 0x40(0x04)
	float                                         MaxAngleDiff;                                                // 0x44(0x04)
	float                                         MaxScaleDiff;                                                // 0x48(0x04)
	char                                          UnknownData4C[0x4];                                          // 0x4c(0x04)
};

// Class Engine.AnimCurveCompressionCodec
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec : UObject 
{
};

// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec_CompressedRichCurve : UAnimCurveCompressionCodec 
{
};

// Class Engine.AnimCurveCompressionCodec_UniformIndexable
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec_UniformIndexable : UAnimCurveCompressionCodec 
{
};

// Class Engine.AnimCurveCompressionCodec_UniformlySampled
// Size: 0x28 (Inherited: 0x28)
struct UAnimCurveCompressionCodec_UniformlySampled : UAnimCurveCompressionCodec 
{
};

// Class Engine.AnimCurveCompressionSettings
// Size: 0x30 (Inherited: 0x28)
struct UAnimCurveCompressionSettings : UObject 
{
	struct FNone*                                 Codec;                                                       // 0x28(0x08)
};

// Class Engine.AnimLayerInterface
// Size: 0x28 (Inherited: 0x28)
struct UAnimLayerInterface : UInterface 
{
};

// Class Engine.AnimMetaData
// Size: 0x28 (Inherited: 0x28)
struct UAnimMetaData : UObject 
{
};

// Class Engine.AnimMontage
// Size: 0x1d0 (Inherited: 0xa8)
struct UAnimMontage : UAnimCompositeBase 
{
	struct FNone                                  BlendIn;                                                     // 0xa8(0x30)
	float                                         BlendInTime;                                                 // 0xd8(0x04)
	char                                          UnknownDataDC[0x4];                                          // 0xdc(0x04)
	struct FNone                                  BlendOut;                                                    // 0xe0(0x30)
	float                                         BlendOutTime;                                                // 0x110(0x04)
	float                                         BlendOutTriggerTime;                                         // 0x114(0x04)
	struct FName                                  SyncGroup;                                                   // 0x118(0x08)
	uint32_t                                      SyncSlotIndex;                                               // 0x120(0x04)
	char                                          UnknownData124[0x4];                                         // 0x124(0x04)
	struct FNone                                  MarkerData;                                                  // 0x128(0x20)
	struct TArray<None>                           CompositeSections;                                           // 0x148(0x10)
	struct TArray<None>                           SlotAnimTracks;                                              // 0x158(0x10)
	struct TArray<None>                           BranchingPoints;                                             // 0x168(0x10)
	char                                          bEnableRootMotionTranslation : 0;                            // 0x178(0x01)
	char                                          UnknownData178[0x1];                                         // 0x178(0x01)
	char                                          bEnableRootMotionRotation : 0;                               // 0x179(0x01)
	char                                          UnknownData179[0x1];                                         // 0x179(0x01)
	char                                          bEnableAutoBlendOut : 0;                                     // 0x17a(0x01)
	char                                          UnknownData17A[0x1];                                         // 0x17a(0x01)
	char                                          RootMotionRootLock;                                          // 0x17b(0x01)
	char                                          UnknownData17C[0x4];                                         // 0x17c(0x04)
	struct TArray<None>                           BranchingPointMarkers;                                       // 0x180(0x10)
	struct TArray<None>                           BranchingPointStateNotifyIndices;                            // 0x190(0x10)
	struct FNone                                  TimeStretchCurve;                                            // 0x1a0(0x28)
	struct FName                                  TimeStretchCurveName;                                        // 0x1c8(0x08)

	float GetDefaultBlendOutTime(); // sub_0x3279220
};

// Class Engine.AnimNotify_PauseClothingSimulation
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_PauseClothingSimulation : UAnimNotify 
{
};

// Class Engine.AnimNotify_PlayParticleEffect
// Size: 0x90 (Inherited: 0x38)
struct UAnimNotify_PlayParticleEffect : UAnimNotify 
{
	struct FNone*                                 PSTemplate;                                                  // 0x38(0x08)
	struct FNone                                  LocationOffset;                                              // 0x40(0x0c)
	struct FNone                                  RotationOffset;                                              // 0x4c(0x0c)
	struct FNone                                  Scale;                                                       // 0x58(0x0c)
	char                                          UnknownData64[0x1c];                                         // 0x64(0x1c)
	char                                          Attached : 0;                                                // 0x80(0x01)
	char                                          UnknownData80[0x4];                                          // 0x80(0x04)
	struct FName                                  SocketName;                                                  // 0x84(0x08)
	char                                          UnknownData8C[0x4];                                          // 0x8c(0x04)
};

// Class Engine.AnimNotify_PlaySound
// Size: 0x58 (Inherited: 0x38)
struct UAnimNotify_PlaySound : UAnimNotify 
{
	struct FNone*                                 Sound;                                                       // 0x38(0x08)
	float                                         VolumeMultiplier;                                            // 0x40(0x04)
	float                                         PitchMultiplier;                                             // 0x44(0x04)
	char                                          bFollow : 0;                                                 // 0x48(0x01)
	char                                          UnknownData48[0x4];                                          // 0x48(0x04)
	struct FName                                  AttachName;                                                  // 0x4c(0x08)
	char                                          UnknownData54[0x4];                                          // 0x54(0x04)
};

// Class Engine.AnimNotify_ResetClothingSimulation
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ResetClothingSimulation : UAnimNotify 
{
};

// Class Engine.AnimNotify_ResetDynamics
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ResetDynamics : UAnimNotify 
{
};

// Class Engine.AnimNotify_ResumeClothingSimulation
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotify_ResumeClothingSimulation : UAnimNotify 
{
};

// Class Engine.AnimNotifyState_DisableRootMotion
// Size: 0x30 (Inherited: 0x30)
struct UAnimNotifyState_DisableRootMotion : UAnimNotifyState 
{
};

// Class Engine.AnimNotifyState_TimedParticleEffect
// Size: 0x60 (Inherited: 0x30)
struct UAnimNotifyState_TimedParticleEffect : UAnimNotifyState 
{
	struct FNone*                                 PSTemplate;                                                  // 0x30(0x08)
	struct FName                                  SocketName;                                                  // 0x38(0x08)
	struct FNone                                  LocationOffset;                                              // 0x40(0x0c)
	struct FNone                                  RotationOffset;                                              // 0x4c(0x0c)
	char                                          bDestroyAtEnd : 0;                                           // 0x58(0x01)
	char                                          UnknownData58[0x8];                                          // 0x58(0x08)
};

// Class Engine.AnimNotifyState_Trail
// Size: 0x58 (Inherited: 0x30)
struct UAnimNotifyState_Trail : UAnimNotifyState 
{
	struct FNone*                                 PSTemplate;                                                  // 0x30(0x08)
	struct FName                                  FirstSocketName;                                             // 0x38(0x08)
	struct FName                                  SecondSocketName;                                            // 0x40(0x08)
	char                                          WidthScaleMode;                                              // 0x48(0x01)
	char                                          UnknownData49[0x3];                                          // 0x49(0x03)
	struct FName                                  WidthScaleCurve;                                             // 0x4c(0x08)
	char                                          bRecycleSpawnedSystems : 0;                                  // 0x54(0x01)
	char                                          UnknownData54[0x4];                                          // 0x54(0x04)

	struct FNone* OverridePSTemplate(struct FNone* MeshComp, struct FNone* Animation); // sub_0x239bfb0
};

// Class Engine.AnimSequence
// Size: 0x1a0 (Inherited: 0xa8)
struct UAnimSequence : UAnimSequenceBase 
{
	uint32_t                                      NumFrames;                                                   // 0xa8(0x04)
	char                                          UnknownDataAC[0x4];                                          // 0xac(0x04)
	struct TArray<None>                           TrackToSkeletonMapTable;                                     // 0xb0(0x10)
	char                                          UnknownDataC0[0x10];                                         // 0xc0(0x10)
	struct FNone*                                 BoneCompressionSettings;                                     // 0xd0(0x08)
	struct FNone*                                 CurveCompressionSettings;                                    // 0xd8(0x08)
	char                                          UnknownDataE0[0x70];                                         // 0xe0(0x70)
	char                                          AdditiveAnimType;                                            // 0x150(0x01)
	char                                          RefPoseType;                                                 // 0x151(0x01)
	char                                          UnknownData152[0x6];                                         // 0x152(0x06)
	struct FNone*                                 RefPoseSeq;                                                  // 0x158(0x08)
	uint32_t                                      RefFrameIndex;                                               // 0x160(0x04)
	struct FName                                  RetargetSource;                                              // 0x164(0x08)
	enum class None                               Interpolation;                                               // 0x16c(0x01)
	char                                          bEnableRootMotion : 0;                                       // 0x16d(0x01)
	char                                          UnknownData16D[0x1];                                         // 0x16d(0x01)
	char                                          RootMotionRootLock;                                          // 0x16e(0x01)
	char                                          bForceRootLock : 0;                                          // 0x16f(0x01)
	char                                          UnknownData16F[0x1];                                         // 0x16f(0x01)
	char                                          bUseNormalizedRootMotionScale : 0;                           // 0x170(0x01)
	char                                          UnknownData170[0x1];                                         // 0x170(0x01)
	char                                          bRootMotionSettingsCopiedFromMontage : 0;                    // 0x171(0x01)
	char                                          UnknownData171[0x7];                                         // 0x171(0x07)
	struct TArray<None>                           AuthoredSyncMarkers;                                         // 0x178(0x10)
	char                                          UnknownData188[0x18];                                        // 0x188(0x18)
};

// Class Engine.AnimSet
// Size: 0xf0 (Inherited: 0x28)
struct UAnimSet : UObject 
{
	char                                          bAnimRotationOnly : 0;                                       // 0x28(0x01)
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct TArray<None>                           TrackBoneNames;                                              // 0x30(0x10)
	struct TArray<None>                           LinkupCache;                                                 // 0x40(0x10)
	struct TArray<None>                           BoneUseAnimTranslation;                                      // 0x50(0x10)
	struct TArray<None>                           ForceUseMeshTranslation;                                     // 0x60(0x10)
	struct TArray<None>                           UseTranslationBoneNames;                                     // 0x70(0x10)
	struct TArray<None>                           ForceMeshTranslationBoneNames;                               // 0x80(0x10)
	struct FName                                  PreviewSkelMeshName;                                         // 0x90(0x08)
	struct FName                                  BestRatioSkelMeshName;                                       // 0x98(0x08)
	char                                          UnknownDataA0[0x50];                                         // 0xa0(0x50)
};

// Class Engine.AnimSingleNodeInstance
// Size: 0x280 (Inherited: 0x270)
struct UAnimSingleNodeInstance : UAnimInstance 
{
	struct FNone*                                 CurrentAsset;                                                // 0x268(0x08)
	struct FDelegate                              PostEvaluateAnimEvent;                                       // 0x270(0x10)

	void StopAnim(); // sub_0x3c67e90
	void SetReverse(char bInReverse); // sub_0x3c67e00
	void SetPreviewCurveOverride(struct FName& PoseName, float Value, char bRemoveIfZero); // sub_0x3c67ce0
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, char bFireNotifies); // sub_0x3c67bd0
	void SetPosition(float InPosition, char bFireNotifies); // sub_0x3c67b00
	void SetPlayRate(float InPlayRate); // sub_0x3c679f0
	void SetPlaying(char bIsPlaying); // sub_0x3c67a70
	void SetLooping(char bIsLooping); // sub_0x3c67960
	void SetBlendSpaceInput(struct FNone& InBlendInput); // sub_0x3c678d0
	void SetAnimationAsset(struct FNone* NewAsset, char bIsLooping, float InPlayRate); // sub_0x3c677c0
	void PlayAnim(char bIsLooping, float InPlayRate, float InStartPosition); // sub_0x3c676c0
	float GetLength(); // sub_0x3c67650
	struct FNone* GetAnimationAsset(); // sub_0x3c67620
};

// Class Engine.AnimStateMachineTypes
// Size: 0x28 (Inherited: 0x28)
struct UAnimStateMachineTypes : UObject 
{
};

// Class Engine.AnimStreamable
// Size: 0xe0 (Inherited: 0xa8)
struct UAnimStreamable : UAnimSequenceBase 
{
	uint32_t                                      NumFrames;                                                   // 0xa8(0x04)
	enum class None                               Interpolation;                                               // 0xac(0x01)
	char                                          UnknownDataAD[0x3];                                          // 0xad(0x03)
	struct FName                                  RetargetSource;                                              // 0xb0(0x08)
	char                                          UnknownDataB8[0x10];                                         // 0xb8(0x10)
	struct FNone*                                 BoneCompressionSettings;                                     // 0xc8(0x08)
	struct FNone*                                 CurveCompressionSettings;                                    // 0xd0(0x08)
	char                                          bEnableRootMotion : 0;                                       // 0xd8(0x01)
	char                                          UnknownDataD8[0x1];                                          // 0xd8(0x01)
	char                                          RootMotionRootLock;                                          // 0xd9(0x01)
	char                                          bForceRootLock : 0;                                          // 0xda(0x01)
	char                                          UnknownDataDA[0x1];                                          // 0xda(0x01)
	char                                          bUseNormalizedRootMotionScale : 0;                           // 0xdb(0x01)
	char                                          UnknownDataDB[0x5];                                          // 0xdb(0x05)
};

// Class Engine.AssetExportTask
// Size: 0x78 (Inherited: 0x28)
struct UAssetExportTask : UObject 
{
	struct FNone*                                 Object;                                                      // 0x28(0x08)
	struct FNone*                                 Exporter;                                                    // 0x30(0x08)
	struct FString                                Filename;                                                    // 0x38(0x10)
	char                                          bSelected : 0;                                               // 0x48(0x01)
	char                                          UnknownData48[0x1];                                          // 0x48(0x01)
	char                                          bReplaceIdentical : 0;                                       // 0x49(0x01)
	char                                          UnknownData49[0x1];                                          // 0x49(0x01)
	char                                          bPrompt : 0;                                                 // 0x4a(0x01)
	char                                          UnknownData4A[0x1];                                          // 0x4a(0x01)
	char                                          bAutomated : 0;                                              // 0x4b(0x01)
	char                                          UnknownData4B[0x1];                                          // 0x4b(0x01)
	char                                          bUseFileArchive : 0;                                         // 0x4c(0x01)
	char                                          UnknownData4C[0x1];                                          // 0x4c(0x01)
	char                                          bWriteEmptyFiles : 0;                                        // 0x4d(0x01)
	char                                          UnknownData4D[0x3];                                          // 0x4d(0x03)
	struct TArray<None>                           IgnoreObjectList;                                            // 0x50(0x10)
	struct FNone*                                 options;                                                     // 0x60(0x08)
	struct TArray<None>                           Errors;                                                      // 0x68(0x10)
};

// Class Engine.AssetManagerSettings
// Size: 0x108 (Inherited: 0x38)
struct UAssetManagerSettings : UDeveloperSettings 
{
	struct TArray<None>                           PrimaryAssetTypesToScan;                                     // 0x38(0x10)
	struct TArray<None>                           DirectoriesToExclude;                                        // 0x48(0x10)
	struct TArray<None>                           PrimaryAssetRules;                                           // 0x58(0x10)
	struct TArray<None>                           CustomPrimaryAssetRules;                                     // 0x68(0x10)
	char                                          bOnlyCookProductionAssets : 0;                               // 0x78(0x01)
	char                                          UnknownData78[0x1];                                          // 0x78(0x01)
	char                                          bShouldManagerDetermineTypeAndName : 0;                      // 0x79(0x01)
	char                                          UnknownData79[0x1];                                          // 0x79(0x01)
	char                                          bShouldGuessTypeAndNameInEditor : 0;                         // 0x7a(0x01)
	char                                          UnknownData7A[0x1];                                          // 0x7a(0x01)
	char                                          bShouldAcquireMissingChunksOnLoad : 0;                       // 0x7b(0x01)
	char                                          UnknownData7B[0x5];                                          // 0x7b(0x05)
	struct TArray<None>                           PrimaryAssetIdRedirects;                                     // 0x80(0x10)
	struct TArray<None>                           PrimaryAssetTypeRedirects;                                   // 0x90(0x10)
	struct TArray<None>                           AssetPathRedirects;                                          // 0xa0(0x10)
	struct TSet<None>                             MetaDataTagsForAssetRegistry;                                // 0xb0(0x50)
	char                                          bUsePathExcludedFromScan : 0;                                // 0x100(0x01)
	char                                          UnknownData100[0x1];                                         // 0x100(0x01)
	char                                          bRemoveRedundantDirectroyChunks : 0;                         // 0x101(0x01)
	char                                          UnknownData101[0x7];                                         // 0x101(0x07)
};

// Class Engine.AssetMappingTable
// Size: 0x38 (Inherited: 0x28)
struct UAssetMappingTable : UObject 
{
	struct TArray<None>                           MappedAssets;                                                // 0x28(0x10)
};

// Class Engine.AsyncActionHandleSaveGame
// Size: 0x68 (Inherited: 0x30)
struct UAsyncActionHandleSaveGame : UBlueprintAsyncActionBase 
{
	struct FMulticastInlineDelegate               Completed;                                                   // 0x30(0x10)
	char                                          UnknownData40[0x20];                                         // 0x40(0x20)
	struct FNone*                                 SaveGameObject;                                              // 0x60(0x08)

	struct FNone* AsyncSaveGameToSlot(struct FNone* WorldContextObject, struct FNone* SaveGameObject, struct FString SlotName, uint32_t UserIndex); // sub_0x3c714d0
	struct FNone* AsyncLoadGameFromSlot(struct FNone* WorldContextObject, struct FString SlotName, uint32_t UserIndex); // sub_0x3c70e70
};

// Class Engine.AsyncActionLoadPrimaryAssetBase
// Size: 0x78 (Inherited: 0x30)
struct UAsyncActionLoadPrimaryAssetBase : UBlueprintAsyncActionBase 
{
	char                                          UnknownData30[0x48];                                         // 0x30(0x48)
};

// Class Engine.AsyncActionLoadPrimaryAsset
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAsset : UAsyncActionLoadPrimaryAssetBase 
{
	struct FMulticastInlineDelegate               Completed;                                                   // 0x78(0x10)

	struct FNone* AsyncLoadPrimaryAsset(struct FNone* WorldContextObject, struct FNone PrimaryAsset, struct TArray<None>& LoadBundles); // sub_0x3c70f90
};

// Class Engine.AsyncActionLoadPrimaryAssetClass
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAssetClass : UAsyncActionLoadPrimaryAssetBase 
{
	struct FMulticastInlineDelegate               Completed;                                                   // 0x78(0x10)

	struct FNone* AsyncLoadPrimaryAssetClass(struct FNone* WorldContextObject, struct FNone PrimaryAsset, struct TArray<None>& LoadBundles); // sub_0x3c710d0
};

// Class Engine.AsyncActionLoadPrimaryAssetList
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAssetList : UAsyncActionLoadPrimaryAssetBase 
{
	struct FMulticastInlineDelegate               Completed;                                                   // 0x78(0x10)

	struct FNone* AsyncLoadPrimaryAssetList(struct FNone* WorldContextObject, struct TArray<None>& PrimaryAssetList, struct TArray<None>& LoadBundles); // sub_0x3c71370
};

// Class Engine.AsyncActionLoadPrimaryAssetClassList
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionLoadPrimaryAssetClassList : UAsyncActionLoadPrimaryAssetBase 
{
	struct FMulticastInlineDelegate               Completed;                                                   // 0x78(0x10)

	struct FNone* AsyncLoadPrimaryAssetClassList(struct FNone* WorldContextObject, struct TArray<None>& PrimaryAssetList, struct TArray<None>& LoadBundles); // sub_0x3c71210
};

// Class Engine.AsyncActionChangePrimaryAssetBundles
// Size: 0x88 (Inherited: 0x78)
struct UAsyncActionChangePrimaryAssetBundles : UAsyncActionLoadPrimaryAssetBase 
{
	struct FMulticastInlineDelegate               Completed;                                                   // 0x78(0x10)

	struct FNone* AsyncChangeBundleStateForPrimaryAssetList(struct FNone* WorldContextObject, struct TArray<None>& PrimaryAssetList, struct TArray<None>& AddBundles, struct TArray<None>& RemoveBundles); // sub_0x3c70cb0
	struct FNone* AsyncChangeBundleStateForMatchingPrimaryAssets(struct FNone* WorldContextObject, struct TArray<None>& NewBundles, struct TArray<None>& OldBundles); // sub_0x3c70b50
};

// Class Engine.AtmosphericFog
// Size: 0x318 (Inherited: 0x310)
struct AAtmosphericFog : AInfo 
{
	struct FNone*                                 AtmosphericFogComponent;                                     // 0x310(0x08)
};

// Class Engine.AtmosphericFogComponent
// Size: 0x330 (Inherited: 0x240)
struct UAtmosphericFogComponent : USceneComponent 
{
	float                                         SunMultiplier;                                               // 0x238(0x04)
	float                                         FogMultiplier;                                               // 0x23c(0x04)
	float                                         DensityMultiplier;                                           // 0x240(0x04)
	float                                         DensityOffset;                                               // 0x244(0x04)
	float                                         DistanceScale;                                               // 0x248(0x04)
	float                                         AltitudeScale;                                               // 0x24c(0x04)
	float                                         DistanceOffset;                                              // 0x250(0x04)
	float                                         GroundOffset;                                                // 0x254(0x04)
	float                                         StartDistance;                                               // 0x258(0x04)
	float                                         SunDiscScale;                                                // 0x25c(0x04)
	float                                         DefaultBrightness;                                           // 0x260(0x04)
	struct FNone                                  DefaultLightColor;                                           // 0x264(0x04)
	char                                          bDisableSunDisk : 0;                                         // 0x268(0x01)
	char                                          bAtmosphereAffectsSunIlluminance : 0;                        // 0x268(0x01)
	char                                          bDisableGroundScattering : 0;                                // 0x268(0x01)
	struct FNone                                  PrecomputeParams;                                            // 0x26c(0x2c)
	struct FNone*                                 TransmittanceTexture;                                        // 0x298(0x08)
	struct FNone*                                 IrradianceTexture;                                           // 0x2a0(0x08)
	char                                          UnknownData2AC[0x84];                                        // 0x2ac(0x84)

	void StartPrecompute(); // sub_0x1518fe0
	void SetSunMultiplier(float NewSunMultiplier); // sub_0x3c71cd0
	void SetStartDistance(float NewStartDistance); // sub_0x3c71c50
	void SetPrecomputeParams(float DensityHeight, uint32_t MaxScatteringOrder, uint32_t InscatterAltitudeSampleNum); // sub_0x3c71b40
	void SetFogMultiplier(float NewFogMultiplier); // sub_0x3c71ac0
	void SetDistanceScale(float NewDistanceScale); // sub_0x3c71a40
	void SetDistanceOffset(float NewDistanceOffset); // sub_0x3c719c0
	void SetDensityOffset(float NewDensityOffset); // sub_0x3c71940
	void SetDensityMultiplier(float NewDensityMultiplier); // sub_0x3c718c0
	void SetDefaultLightColor(struct FNone NewLightColor); // sub_0x3c71840
	void SetDefaultBrightness(float NewBrightness); // sub_0x3c717c0
	void SetAltitudeScale(float NewAltitudeScale); // sub_0x3c71740
	void DisableSunDisk(char NewSunDisk); // sub_0x3c716b0
	void DisableGroundScattering(char NewGroundScattering); // sub_0x3c71620
};

// Class Engine.AudioSettings
// Size: 0x148 (Inherited: 0x38)
struct UAudioSettings : UDeveloperSettings 
{
	struct FNone                                  DefaultSoundClassName;                                       // 0x38(0x18)
	struct FNone                                  DefaultMediaSoundClassName;                                  // 0x50(0x18)
	struct FNone                                  DefaultSoundConcurrencyName;                                 // 0x68(0x18)
	struct FNone                                  DefaultBaseSoundMix;                                         // 0x80(0x18)
	struct FNone                                  VoiPSoundClass;                                              // 0x98(0x18)
	struct FNone                                  MasterSubmix;                                                // 0xb0(0x18)
	struct FNone                                  ReverbSubmix;                                                // 0xc8(0x18)
	struct FNone                                  EQSubmix;                                                    // 0xe0(0x18)
	enum class None                               VoiPSampleRate;                                              // 0xf8(0x04)
	float                                         DefaultReverbSendLevel;                                      // 0xfc(0x04)
	uint32_t                                      MaximumConcurrentStreams;                                    // 0x100(0x04)
	float                                         GlobalMinPitchScale;                                         // 0x104(0x04)
	float                                         GlobalMaxPitchScale;                                         // 0x108(0x04)
	char                                          UnknownData10C[0x4];                                         // 0x10c(0x04)
	struct TArray<None>                           QualityLevels;                                               // 0x110(0x10)
	char                                          bAllowPlayWhenSilent : 0;                                    // 0x120(0x01)
	char                                          bDisableMasterEQ : 0;                                        // 0x120(0x01)
	char                                          bAllowCenterChannel3DPanning : 0;                            // 0x120(0x01)
	char                                          UnknownData120[0x4];                                         // 0x120(0x04)
	uint32_t                                      NumStoppingSources;                                          // 0x124(0x04)
	enum class None                               PanningMethod;                                               // 0x128(0x01)
	enum class None                               MonoChannelUpmixMethod;                                      // 0x129(0x01)
	char                                          UnknownData12A[0x6];                                         // 0x12a(0x06)
	struct FString                                DialogueFilenameFormat;                                      // 0x130(0x10)
	char                                          UnknownData140[0x8];                                         // 0x140(0x08)
};

// Class Engine.AudioVolume
// Size: 0x398 (Inherited: 0x348)
struct AAudioVolume : AVolume 
{
	float                                         Priority;                                                    // 0x348(0x04)
	char                                          bEnabled : 0;                                                // 0x34c(0x01)
	char                                          UnknownData34C[0x4];                                         // 0x34c(0x04)
	struct FNone                                  Settings;                                                    // 0x350(0x20)
	struct FNone                                  AmbientZoneSettings;                                         // 0x370(0x24)
	char                                          UnknownData394[0x4];                                         // 0x394(0x04)

	void SetReverbSettings(struct FNone& NewReverbSettings); // sub_0x3c75410
	void SetPriority(float NewPriority); // sub_0x3c75390
	void SetInteriorSettings(struct FNone& NewInteriorSettings); // sub_0x3c750d0
	void SetEnabled(char bNewEnabled); // sub_0x3c74eb0
	void OnRep_bEnabled(); // sub_0x3c74d40
};

// Class Engine.AutoDestroySubsystem
// Size: 0x48 (Inherited: 0x30)
struct UAutoDestroySubsystem : UWorldSubsystem 
{
	char                                          UnknownData30[0x8];                                          // 0x30(0x08)
	struct TArray<None>                           ActorsToPoll;                                                // 0x38(0x10)

	void OnActorEndPlay(struct FNone* Actor, char EndPlayReason); // sub_0x3c7bbf0
};

// Class Engine.AutomationTestSettings
// Size: 0x328 (Inherited: 0x28)
struct UAutomationTestSettings : UObject 
{
	struct TArray<None>                           EngineTestModules;                                           // 0x28(0x10)
	struct TArray<None>                           EditorTestModules;                                           // 0x38(0x10)
	struct FNone                                  AutomationTestmap;                                           // 0x48(0x18)
	struct TArray<None>                           EditorPerformanceTestMaps;                                   // 0x60(0x10)
	struct TArray<None>                           AssetsToOpen;                                                // 0x70(0x10)
	struct FNone                                  BuildPromotionTest;                                          // 0x80(0x1f0)
	struct FNone                                  MaterialEditorPromotionTest;                                 // 0x270(0x30)
	struct FNone                                  ParticleEditorPromotionTest;                                 // 0x2a0(0x10)
	struct FNone                                  BlueprintEditorPromotionTest;                                // 0x2b0(0x30)
	struct TArray<None>                           TestLevelFolders;                                            // 0x2e0(0x10)
	struct TArray<None>                           ExternalTools;                                               // 0x2f0(0x10)
	struct TArray<None>                           ImportExportTestDefinitions;                                 // 0x300(0x10)
	struct TArray<None>                           LaunchOnSettings;                                            // 0x310(0x10)
	struct FNone                                  DefaultScreenshotResolution;                                 // 0x320(0x08)
};

// Class Engine.AvoidanceManager
// Size: 0xe0 (Inherited: 0x28)
struct UAvoidanceManager : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	float                                         DefaultTimeToLive;                                           // 0x30(0x04)
	float                                         LockTimeAfterAvoid;                                          // 0x34(0x04)
	float                                         LockTimeAfterClean;                                          // 0x38(0x04)
	float                                         DeltaTimeToPredict;                                          // 0x3c(0x04)
	float                                         ArtificialRadiusExpansion;                                   // 0x40(0x04)
	float                                         TestHeightDifference;                                        // 0x44(0x04)
	float                                         HeightCheckMargin;                                           // 0x48(0x04)
	char                                          UnknownData4C[0x94];                                         // 0x4c(0x94)

	char RegisterMovementComponent(struct FNone* MovementComp, float AvoidanceWeight); // sub_0x3c7bcb0
	uint32_t GetObjectCount(); // sub_0x3c7bbc0
	uint32_t GetNewAvoidanceUID(); // sub_0x3c7bb90
	struct FNone GetAvoidanceVelocityForComponent(struct FNone* MovementComp); // sub_0x3c7baf0
};

// Class Engine.BandwidthTestActor
// Size: 0x330 (Inherited: 0x310)
struct ABandwidthTestActor : AActor 
{
	struct FNone                                  BandwidthGenerator;                                          // 0x310(0x20)
};

// Class Engine.BillboardComponent
// Size: 0x4e0 (Inherited: 0x4c0)
struct UBillboardComponent : UPrimitiveComponent 
{
	struct FNone*                                 Sprite;                                                      // 0x4b8(0x08)
	char                                          bIsScreenSizeScaled : 0;                                     // 0x4c0(0x01)
	float                                         ScreenSize;                                                  // 0x4c4(0x04)
	float                                         U;                                                           // 0x4c8(0x04)
	float                                         UL;                                                          // 0x4cc(0x04)
	float                                         V;                                                           // 0x4d0(0x04)
	float                                         VL;                                                          // 0x4d4(0x04)
	char                                          UnknownData4DC[0x4];                                         // 0x4dc(0x04)

	void SetUV(uint32_t NewU, uint32_t NewUL, uint32_t NewV, uint32_t NewVL); // sub_0x3c7bf90
	void SetSpriteAndUV(struct FNone* NewSprite, uint32_t NewU, uint32_t NewUL, uint32_t NewV, uint32_t NewVL); // sub_0x3c7be10
	void SetSprite(struct FNone* NewSprite); // sub_0x3c7bd80
};

// Class Engine.BlendableInterface
// Size: 0x28 (Inherited: 0x28)
struct UBlendableInterface : UInterface 
{
};

// Class Engine.Skeleton
// Size: 0x368 (Inherited: 0x28)
struct USkeleton : UObject 
{
	char                                          UnknownData28[0x10];                                         // 0x28(0x10)
	struct TArray<None>                           BoneTree;                                                    // 0x38(0x10)
	struct TArray<None>                           RefLocalPoses;                                               // 0x48(0x10)
	char                                          UnknownData58[0x118];                                        // 0x58(0x118)
	struct FNone                                  VirtualBoneGuid;                                             // 0x170(0x10)
	struct TArray<None>                           VirtualBones;                                                // 0x180(0x10)
	struct TArray<None>                           Sockets;                                                     // 0x190(0x10)
	char                                          UnknownData1A0[0x50];                                        // 0x1a0(0x50)
	struct FNone                                  SmartNames;                                                  // 0x1f0(0x50)
	char                                          UnknownData240[0x30];                                        // 0x240(0x30)
	struct TArray<None>                           BlendProfiles;                                               // 0x270(0x10)
	struct TArray<None>                           SlotGroups;                                                  // 0x280(0x10)
	char                                          UnknownData290[0xc8];                                        // 0x290(0xc8)
	struct TArray<None>                           AssetUserData;                                               // 0x358(0x10)
};

// Class Engine.BlendProfile
// Size: 0x48 (Inherited: 0x28)
struct UBlendProfile : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct FNone*                                 OwningSkeleton;                                              // 0x30(0x08)
	struct TArray<None>                           ProfileEntries;                                              // 0x38(0x10)
};

// Class Engine.BlockingVolume
// Size: 0x348 (Inherited: 0x348)
struct ABlockingVolume : AVolume 
{
};

// Class Engine.BlueprintExtension
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintExtension : UObject 
{
};

// Class Engine.BlueprintMapLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintMapLibrary : UBlueprintFunctionLibrary 
{

	void SetMapPropertyByName(struct FNone* Object, struct FName PropertyName, struct TMap<None, None>& Value); // sub_0x3c81810
	void Map_Values(struct TMap<None, None>& TargetMap, struct TArray<None>& Values); // sub_0x3c81710
	char Map_Remove(struct TMap<None, None>& TargetMap, uint32_t& Key); // sub_0x3c81560
	uint32_t Map_Length(struct TMap<None, None>& TargetMap); // sub_0x3c814b0
	void Map_Keys(struct TMap<None, None>& TargetMap, struct TArray<None>& Keys); // sub_0x3c813b0
	char Map_Find(struct TMap<None, None>& TargetMap, uint32_t& Key, uint32_t& Value); // sub_0x3c81120
	char Map_Contains(struct TMap<None, None>& TargetMap, uint32_t& Key); // sub_0x3c80f70
	void Map_Clear(struct TMap<None, None>& TargetMap); // sub_0x3c80ed0
	void Map_Add(struct TMap<None, None>& TargetMap, uint32_t& Key, uint32_t& Value); // sub_0x3c80c60
};

// Class Engine.BlueprintPathsLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintPathsLibrary : UBlueprintFunctionLibrary 
{

	struct FString VideoCaptureDir(); // sub_0x3c85f00
	void ValidatePath(struct FString InPath, char& bDidSucceed, struct FText& OutReason); // sub_0x3c85d80
	void Split(struct FString InPath, struct FString& PathPart, struct FString& FilenamePart, struct FString& ExtensionPart); // sub_0x3c85ba0
	struct FString SourceConfigDir(); // sub_0x3c851a0
	char ShouldSaveToUserDir(); // sub_0x3c85b70
	struct FString ShaderWorkingDir(); // sub_0x3c85af0
	void SetProjectFilePath(struct FString NewGameProjectFilePath); // sub_0x3c85a60
	struct FString SetExtension(struct FString InPath, struct FString InNewExtension); // sub_0x3c85920
	struct FString ScreenShotDir(); // sub_0x3c858a0
	struct FString SandboxesDir(); // sub_0x3c85820
	struct FString RootDir(); // sub_0x3c857a0
	void RemoveDuplicateSlashes(struct FString InPath, struct FString& OutPath); // sub_0x3c856a0
	struct FString ProjectUserDir(); // sub_0x3c85620
	struct FString ProjectSavedDir(); // sub_0x3c855a0
	struct FString ProjectPluginsDir(); // sub_0x3c85520
	struct FString ProjectPersistentDownloadDir(); // sub_0x3c854a0
	struct FString ProjectModsDir(); // sub_0x3c85420
	struct FString ProjectLogDir(); // sub_0x3c853a0
	struct FString ProjectIntermediateDir(); // sub_0x3c85320
	struct FString ProjectDir(); // sub_0x3c852a0
	struct FString ProjectContentDir(); // sub_0x3c85220
	struct FString ProjectConfigDir(); // sub_0x3c851a0
	struct FString ProfilingDir(); // sub_0x3c85120
	void NormalizeFilename(struct FString InPath, struct FString& OutPath); // sub_0x3c85020
	void NormalizeDirectoryName(struct FString InPath, struct FString& OutPath); // sub_0x3c84f20
	struct FString MakeValidFileName(struct FString inString, struct FString InReplacementChar); // sub_0x3c84de0
	void MakeStandardFilename(struct FString InPath, struct FString& OutPath); // sub_0x3c84ce0
	void MakePlatformFilename(struct FString InPath, struct FString& OutPath); // sub_0x3c84be0
	char MakePathRelativeTo(struct FString InPath, struct FString InRelativeTo, struct FString& OutPath); // sub_0x3c84a80
	struct FString LaunchDir(); // sub_0x3c84a00
	char IsSamePath(struct FString PathA, struct FString PathB); // sub_0x3c84900
	char IsRestrictedPath(struct FString InPath); // sub_0x3c84860
	char IsRelative(struct FString InPath); // sub_0x3c847c0
	char IsProjectFilePathSet(); // sub_0x3c84790
	char IsDrive(struct FString InPath); // sub_0x3c846f0
	char HasProjectPersistentDownloadDir(); // sub_0x3c846c0
	struct TArray<None> GetToolTipLocalizationPaths(); // sub_0x3c84680
	struct TArray<None> GetRestrictedFolderNames(); // sub_0x3c84640
	struct FString GetRelativePathToRoot(); // sub_0x3c845b0
	struct TArray<None> GetPropertyNameLocalizationPaths(); // sub_0x3c84570
	struct FString GetProjectFilePath(); // sub_0x3c844f0
	struct FString GetPath(struct FString InPath); // sub_0x3c84410
	struct FString GetInvalidFileSystemChars(); // sub_0x3c84390
	struct TArray<None> GetGameLocalizationPaths(); // sub_0x3c84350
	struct FString GetExtension(struct FString InPath, char bIncludeDot); // sub_0x3c84220
	struct TArray<None> GetEngineLocalizationPaths(); // sub_0x3c841e0
	struct TArray<None> GetEditorLocalizationPaths(); // sub_0x3c841a0
	struct FString GetCleanFilename(struct FString InPath); // sub_0x3c840c0
	struct FString GetBaseFilename(struct FString InPath, char bRemovePath); // sub_0x3c83f90
	struct FString GeneratedConfigDir(); // sub_0x3c83f10
	struct FString GameUserDeveloperDir(); // sub_0x3c83e90
	struct FString GameSourceDir(); // sub_0x3c83e10
	struct FString GameDevelopersDir(); // sub_0x3c83d90
	struct FString GameAgnosticSavedDir(); // sub_0x3c83d10
	char FileExists(struct FString InPath); // sub_0x3c83c70
	struct FString FeaturePackDir(); // sub_0x3c83bf0
	struct FString EnterprisePluginsDir(); // sub_0x3c83b70
	struct FString EnterpriseFeaturePackDir(); // sub_0x3c83af0
	struct FString EnterpriseDir(); // sub_0x3c83a70
	struct FString EngineVersionAgnosticUserDir(); // sub_0x3c839f0
	struct FString EngineUserDir(); // sub_0x3c83970
	struct FString EngineSourceDir(); // sub_0x3c838f0
	struct FString EngineSavedDir(); // sub_0x3c83870
	struct FString EnginePluginsDir(); // sub_0x3c837f0
	struct FString EngineIntermediateDir(); // sub_0x3c83770
	struct FString EngineDir(); // sub_0x3c836f0
	struct FString EngineContentDir(); // sub_0x3c83670
	struct FString EngineConfigDir(); // sub_0x3c835f0
	char DirectoryExists(struct FString InPath); // sub_0x3c83550
	struct FString DiffDir(); // sub_0x3c834d0
	struct FString CreateTempFilename(struct FString Path, struct FString Prefix, struct FString Extension); // sub_0x3c83330
	struct FString ConvertToSandboxPath(struct FString InPath, struct FString InSandboxName); // sub_0x3c831f0
	struct FString ConvertRelativePathToFull(struct FString InPath, struct FString InBasePath); // sub_0x3c830b0
	struct FString ConvertFromSandboxPath(struct FString InPath, struct FString InSandboxName); // sub_0x3c82f70
	struct FString Combine(struct TArray<None>& InPaths); // sub_0x3c82e60
	char CollapseRelativeDirectories(struct FString InPath, struct FString& OutPath); // sub_0x3c82d50
	struct FString CloudDir(); // sub_0x3c82cd0
	struct FString ChangeExtension(struct FString InPath, struct FString InNewExtension); // sub_0x3c82b90
	struct FString BugItDir(); // sub_0x3c82b10
	struct FString AutomationTransientDir(); // sub_0x3c82a90
	struct FString AutomationLogDir(); // sub_0x3c82a10
	struct FString AutomationDir(); // sub_0x3c82990
};

// Class Engine.PlatformGameInstance
// Size: 0x2e8 (Inherited: 0x218)
struct UPlatformGameInstance : UGameInstance 
{
	struct FMulticastInlineDelegate               ApplicationWillDeactivateDelegate;                           // 0x218(0x10)
	struct FMulticastInlineDelegate               ApplicationHasReactivatedDelegate;                           // 0x228(0x10)
	struct FMulticastInlineDelegate               ApplicationWillEnterBackgroundDelegate;                      // 0x238(0x10)
	struct FMulticastInlineDelegate               ApplicationHasEnteredForegroundDelegate;                     // 0x248(0x10)
	struct FMulticastInlineDelegate               ApplicationWillTerminateDelegate;                            // 0x258(0x10)
	struct FMulticastInlineDelegate               ApplicationShouldUnloadResourcesDelegate;                    // 0x268(0x10)
	struct FMulticastInlineDelegate               ApplicationReceivedStartupArgumentsDelegate;                 // 0x278(0x10)
	struct FMulticastInlineDelegate               ApplicationRegisteredForRemoteNotificationsDelegate;         // 0x288(0x10)
	struct FMulticastInlineDelegate               ApplicationRegisteredForUserNotificationsDelegate;           // 0x298(0x10)
	struct FMulticastInlineDelegate               ApplicationFailedToRegisterForRemoteNotificationsDelegate;   // 0x2a8(0x10)
	struct FMulticastInlineDelegate               ApplicationReceivedRemoteNotificationDelegate;               // 0x2b8(0x10)
	struct FMulticastInlineDelegate               ApplicationReceivedLocalNotificationDelegate;                // 0x2c8(0x10)
	struct FMulticastInlineDelegate               ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x2d8(0x10)
};

// Class Engine.BlueprintPlatformLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintPlatformLibrary : UBlueprintFunctionLibrary 
{

	uint32_t ScheduleLocalNotificationFromNow(uint32_t inSecondsFromNow, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // sub_0x3c87e60
	void ScheduleLocalNotificationBadgeFromNow(uint32_t inSecondsFromNow, struct FString ActivationEvent); // sub_0x3c87d90
	uint32_t ScheduleLocalNotificationBadgeAtTime(struct FNone& FireDateTime, char LocalTime, struct FString ActivationEvent); // sub_0x3c87c50
	uint32_t ScheduleLocalNotificationAtTime(struct FNone& FireDateTime, char LocalTime, struct FText& Title, struct FText& Body, struct FText& Action, struct FString ActivationEvent); // sub_0x3c87960
	void GetLaunchNotification(char& NotificationLaunchedApp, struct FString& ActivationEvent, uint32_t& FireDate); // sub_0x3c87810
	char GetDeviceOrientation(); // sub_0x3c877e0
	void ClearAllLocalNotifications(); // sub_0x3c877c0
	void CancelLocalNotificationById(uint32_t NotificationId); // sub_0x3c87750
	void CancelLocalNotification(struct FString ActivationEvent); // sub_0x3c876c0
};

// Class Engine.BlueprintSetLibrary
// Size: 0x28 (Inherited: 0x28)
struct UBlueprintSetLibrary : UBlueprintFunctionLibrary 
{

	void SetSetPropertyByName(struct FNone* Object, struct FName PropertyName, struct TSet<None>& Value); // sub_0x3c88100
	void Set_Union(struct TSet<None>& A, struct TSet<None>& B, struct TSet<None>& Result); // sub_0x3c88e20
	void Set_ToArray(struct TSet<None>& A, struct TArray<None>& Result); // sub_0x3c88d20
	void Set_RemoveItems(struct TSet<None>& TargetSet, struct TArray<None>& Items); // sub_0x3c88c20
	char Set_Remove(struct TSet<None>& TargetSet, uint32_t& Item); // sub_0x3c88a70
	uint32_t Set_Length(struct TSet<None>& TargetSet); // sub_0x3c889c0
	void Set_Intersection(struct TSet<None>& A, struct TSet<None>& B, struct TSet<None>& Result); // sub_0x3c88850
	void Set_Difference(struct TSet<None>& A, struct TSet<None>& B, struct TSet<None>& Result); // sub_0x3c886e0
	char Set_Contains(struct TSet<None>& TargetSet, uint32_t& ItemToFind); // sub_0x3c88530
	void Set_Clear(struct TSet<None>& TargetSet); // sub_0x3c88490
	void Set_AddItems(struct TSet<None>& TargetSet, struct TArray<None>& NewItems); // sub_0x3c88390
	void Set_Add(struct TSet<None>& TargetSet, uint32_t& NewItem); // sub_0x3c881f0
};

// Class Engine.BodySetup
// Size: 0x2d0 (Inherited: 0x28)
struct UBodySetup : UObject 
{
	struct FNone                                  AggGeom;                                                     // 0x28(0x58)
	struct FName                                  BoneName;                                                    // 0x80(0x08)
	char                                          PhysicsType;                                                 // 0x88(0x01)
	char                                          bAlwaysFullAnimWeight : 0;                                   // 0x89(0x01)
	char                                          bConsiderForBounds : 0;                                      // 0x89(0x01)
	char                                          bMeshCollideAll : 0;                                         // 0x89(0x01)
	char                                          bDoubleSidedGeometry : 0;                                    // 0x89(0x01)
	char                                          bGenerateNonMirroredCollision : 0;                           // 0x89(0x01)
	char                                          bSharedCookedData : 0;                                       // 0x89(0x01)
	char                                          bGenerateMirroredCollision : 0;                              // 0x89(0x01)
	char                                          bSupportUVsAndFaceRemap : 0;                                 // 0x89(0x01)
	char                                          UnknownData89[0x2];                                          // 0x89(0x02)
	char                                          CollisionReponse;                                            // 0x8b(0x01)
	char                                          CollisionTraceFlag;                                          // 0x8c(0x01)
	char                                          UnknownData8D[0x3];                                          // 0x8d(0x03)
	struct FNone*                                 PhysMaterial;                                                // 0x90(0x08)
	struct FNone                                  WalkableSlopeOverride;                                       // 0x98(0x10)
	char                                          UnknownDataA8[0x78];                                         // 0xa8(0x78)
	struct FNone                                  DefaultInstance;                                             // 0x120(0x190)
	char                                          UnknownData2B0[0x8];                                         // 0x2b0(0x08)
	struct FNone                                  BuildScale3D;                                                // 0x2b8(0x0c)
	char                                          UnknownData2C4[0xc];                                         // 0x2c4(0x0c)
};

// Class Engine.BoneMaskFilter
// Size: 0x38 (Inherited: 0x28)
struct UBoneMaskFilter : UObject 
{
	struct TArray<None>                           BlendPoses;                                                  // 0x28(0x10)
};

// Class Engine.BookmarkBase
// Size: 0x28 (Inherited: 0x28)
struct UBookmarkBase : UObject 
{
};

// Class Engine.BookMark
// Size: 0x50 (Inherited: 0x28)
struct UBookMark : UBookmarkBase 
{
	struct FNone                                  Location;                                                    // 0x28(0x0c)
	struct FNone                                  Rotation;                                                    // 0x34(0x0c)
	struct TArray<None>                           HiddenLevels;                                                // 0x40(0x10)
};

// Class Engine.BookMark2D
// Size: 0x38 (Inherited: 0x28)
struct UBookMark2D : UBookmarkBase 
{
	float                                         Zoom2D;                                                      // 0x28(0x04)
	struct FNone                                  Location;                                                    // 0x2c(0x08)
	char                                          UnknownData34[0x4];                                          // 0x34(0x04)
};

// Class Engine.ReflectionCapture
// Size: 0x318 (Inherited: 0x310)
struct AReflectionCapture : AActor 
{
	struct FNone*                                 CaptureComponent;                                            // 0x310(0x08)
};

// Class Engine.BoxReflectionCapture
// Size: 0x318 (Inherited: 0x318)
struct ABoxReflectionCapture : AReflectionCapture 
{
};

// Class Engine.ReflectionCaptureComponent
// Size: 0x2c0 (Inherited: 0x240)
struct UReflectionCaptureComponent : USceneComponent 
{
	struct FNone*                                 VisualizationMesh;                                           // 0x238(0x08)
	struct FNone*                                 CaptureOffsetComponent;                                      // 0x240(0x08)
	enum class None                               ReflectionSourceType;                                        // 0x248(0x01)
	struct FNone*                                 Cubemap;                                                     // 0x250(0x08)
	float                                         SourceCubemapAngle;                                          // 0x258(0x04)
	float                                         Brightness;                                                  // 0x25c(0x04)
	float                                         DiffuseRadiance;                                             // 0x260(0x04)
	struct FNone                                  CaptureOffset;                                               // 0x264(0x0c)
	struct FNone                                  MapBuildDataId;                                              // 0x270(0x10)
	char                                          UnknownData281[0x3f];                                        // 0x281(0x3f)
};

// Class Engine.BoxReflectionCaptureComponent
// Size: 0x2e0 (Inherited: 0x2c0)
struct UBoxReflectionCaptureComponent : UReflectionCaptureComponent 
{
	float                                         BoxTransitionDistance;                                       // 0x2c0(0x04)
	char                                          UnknownData2C4[0x4];                                         // 0x2c4(0x04)
	struct FNone*                                 PreviewInfluenceBox;                                         // 0x2c8(0x08)
	struct FNone*                                 PreviewCaptureBox;                                           // 0x2d0(0x08)
	char                                          UnknownData2D8[0x8];                                         // 0x2d8(0x08)
};

// Class Engine.MaterialExpressionDirectionalLightVector
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionDirectionalLightVector : UMaterialExpression 
{
};

// Class Engine.Breakpoint
// Size: 0x40 (Inherited: 0x28)
struct UBreakpoint : UObject 
{
	char                                          bEnabled : 0;                                                // 0x28(0x01)
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct FNone*                                 Node;                                                        // 0x30(0x08)
	char                                          bStepOnce : 0;                                               // 0x38(0x01)
	char                                          bStepOnce_WasPreviouslyDisabled : 0;                         // 0x38(0x01)
	char                                          bStepOnce_RemoveAfterHit : 0;                                // 0x38(0x01)
	char                                          UnknownData38[0x8];                                          // 0x38(0x08)
};

// Class Engine.BrushBuilder
// Size: 0x80 (Inherited: 0x28)
struct UBrushBuilder : UObject 
{
	struct FString                                BitmapFilename;                                              // 0x28(0x10)
	struct FString                                Tooltip;                                                     // 0x38(0x10)
	char                                          NotifyBadParams : 0;                                         // 0x48(0x01)
	char                                          UnknownData48[0x8];                                          // 0x48(0x08)
	struct TArray<None>                           Vertices;                                                    // 0x50(0x10)
	struct TArray<None>                           Polys;                                                       // 0x60(0x10)
	struct FName                                  Layer;                                                       // 0x70(0x08)
	char                                          MergeCoplanars : 0;                                          // 0x78(0x01)
	char                                          UnknownData78[0x8];                                          // 0x78(0x08)
};

// Class Engine.BrushComponent
// Size: 0x4d0 (Inherited: 0x4c0)
struct UBrushComponent : UPrimitiveComponent 
{
	struct FNone*                                 Brush;                                                       // 0x4b8(0x08)
	struct FNone*                                 BrushBodySetup;                                              // 0x4c0(0x08)
};

// Class Engine.BrushShape
// Size: 0x348 (Inherited: 0x348)
struct ABrushShape : ABrush 
{
};

// Class Engine.ButtonStyleAsset
// Size: 0x2a0 (Inherited: 0x28)
struct UButtonStyleAsset : UObject 
{
	struct FNone                                  ButtonStyle;                                                 // 0x28(0x278)
};

// Class Engine.CameraAnim
// Size: 0x630 (Inherited: 0x28)
struct UCameraAnim : UObject 
{
	struct FNone*                                 CameraInterpGroup;                                           // 0x28(0x08)
	float                                         AnimLength;                                                  // 0x30(0x04)
	struct FNone                                  BoundingBox;                                                 // 0x34(0x1c)
	char                                          bRelativeToInitialTransform : 0;                             // 0x50(0x01)
	char                                          bRelativeToInitialFOV : 0;                                   // 0x50(0x01)
	char                                          UnknownData50[0x4];                                          // 0x50(0x04)
	float                                         BaseFOV;                                                     // 0x54(0x04)
	char                                          UnknownData58[0x8];                                          // 0x58(0x08)
	struct FNone                                  BasePostProcessSettings;                                     // 0x60(0x5c0)
	float                                         BasePostProcessBlendWeight;                                  // 0x620(0x04)
	char                                          UnknownData624[0xc];                                         // 0x624(0x0c)
};

// Class Engine.CameraAnimInst
// Size: 0x110 (Inherited: 0x28)
struct UCameraAnimInst : UObject 
{
	struct FNone*                                 CamAnim;                                                     // 0x28(0x08)
	struct FNone*                                 InterpGroupInst;                                             // 0x30(0x08)
	char                                          UnknownData38[0x18];                                         // 0x38(0x18)
	float                                         PlayRate;                                                    // 0x50(0x04)
	char                                          UnknownData54[0x14];                                         // 0x54(0x14)
	struct FNone*                                 MoveTrack;                                                   // 0x68(0x08)
	struct FNone*                                 MoveInst;                                                    // 0x70(0x08)
	char                                          PlaySpace;                                                   // 0x78(0x01)
	char                                          UnknownData79[0x97];                                         // 0x79(0x97)

	void Stop(char bImmediate); // sub_0x3c8e160
	void SetScale(float NewDuration); // sub_0x3c8e050
	void SetDuration(float NewDuration); // sub_0x3c8dcd0
};

// Class Engine.CameraBlockingVolume
// Size: 0x348 (Inherited: 0x348)
struct ACameraBlockingVolume : AVolume 
{
};

// Class Engine.CameraModifier_CameraShake
// Size: 0xb0 (Inherited: 0x48)
struct UCameraModifier_CameraShake : UCameraModifier 
{
	struct TArray<None>                           ActiveShakes;                                                // 0x48(0x10)
	struct TMap<None, None>                       ExpiredPooledShakesMap;                                      // 0x58(0x50)
	float                                         SplitScreenShakeScale;                                       // 0xa8(0x04)
	char                                          UnknownDataAC[0x4];                                          // 0xac(0x04)
};

// Class Engine.CameraShake
// Size: 0x160 (Inherited: 0x28)
struct UCameraShake : UObject 
{
	char                                          bSingleInstance : 0;                                         // 0x28(0x01)
	char                                          UnknownData28[0x4];                                          // 0x28(0x04)
	float                                         OscillationDuration;                                         // 0x2c(0x04)
	float                                         OscillationBlendInTime;                                      // 0x30(0x04)
	float                                         OscillationBlendOutTime;                                     // 0x34(0x04)
	struct FNone                                  RotOscillation;                                              // 0x38(0x24)
	struct FNone                                  LocOscillation;                                              // 0x5c(0x24)
	struct FNone                                  FOVOscillation;                                              // 0x80(0x0c)
	float                                         AnimPlayRate;                                                // 0x8c(0x04)
	float                                         AnimScale;                                                   // 0x90(0x04)
	float                                         AnimBlendInTime;                                             // 0x94(0x04)
	float                                         AnimBlendOutTime;                                            // 0x98(0x04)
	float                                         RandomAnimSegmentDuration;                                   // 0x9c(0x04)
	struct FNone*                                 Anim;                                                        // 0xa0(0x08)
	char                                          bRandomAnimSegment : 0;                                      // 0xa8(0x01)
	char                                          UnknownDataA8[0x18];                                         // 0xa8(0x18)
	struct FNone*                                 CameraOwner;                                                 // 0xc0(0x08)
	char                                          UnknownDataC8[0x80];                                         // 0xc8(0x80)
	float                                         ShakeScale;                                                  // 0x148(0x04)
	float                                         OscillatorTimeRemaining;                                     // 0x14c(0x04)
	struct FNone*                                 AnimInst;                                                    // 0x150(0x08)
	char                                          UnknownData158[0x8];                                         // 0x158(0x08)

	void ReceiveStopShake(char bImmediately); // sub_0x239bfb0
	void ReceivePlayShake(float Scale); // sub_0x239bfb0
	char ReceiveIsFinished(); // sub_0x176c110
	void BlueprintUpdateCameraShake(float DeltaTime, float ALPHA, struct FNone& POV, struct FNone& ModifiedPOV); // sub_0x239bfb0
};

// Class Engine.CameraShakeSourceActor
// Size: 0x318 (Inherited: 0x310)
struct ACameraShakeSourceActor : AActor 
{
	struct FNone*                                 CameraShakeSourceComponent;                                  // 0x310(0x08)
};

// Class Engine.CameraShakeSourceComponent
// Size: 0x260 (Inherited: 0x240)
struct UCameraShakeSourceComponent : USceneComponent 
{
	enum class None                               Attenuation;                                                 // 0x238(0x01)
	float                                         InnerAttenuationRadius;                                      // 0x23c(0x04)
	float                                         OuterAttenuationRadius;                                      // 0x240(0x04)
	struct FNone*                                 CameraShake;                                                 // 0x248(0x08)
	char                                          bAutoPlay : 0;                                               // 0x250(0x01)
	char                                          UnknownData251[0xf];                                         // 0x251(0x0f)

	void StopAllCameraShakes(char bImmediately); // sub_0x3c92670
	void PlayCameraShake(struct FNone* InCameraShake); // sub_0x3c925f0
	void Play(); // sub_0x3c925d0
	float GetAttenuationFactor(struct FNone& Location); // sub_0x3c90e50
};

// Class Engine.Canvas
// Size: 0x2c0 (Inherited: 0x28)
struct UCanvas : UObject 
{
	float                                         OrgX;                                                        // 0x28(0x04)
	float                                         OrgY;                                                        // 0x2c(0x04)
	float                                         ClipX;                                                       // 0x30(0x04)
	float                                         ClipY;                                                       // 0x34(0x04)
	struct FNone                                  DrawColor;                                                   // 0x38(0x04)
	char                                          bCenterX : 0;                                                // 0x3c(0x01)
	char                                          bCenterY : 0;                                                // 0x3c(0x01)
	char                                          bNoSmooth : 0;                                               // 0x3c(0x01)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
	uint32_t                                      SizeX;                                                       // 0x40(0x04)
	uint32_t                                      SizeY;                                                       // 0x44(0x04)
	char                                          UnknownData48[0x8];                                          // 0x48(0x08)
	struct FNone                                  ColorModulate;                                               // 0x50(0x10)
	struct FNone*                                 DefaultTexture;                                              // 0x60(0x08)
	struct FNone*                                 GradientTexture0;                                            // 0x68(0x08)
	struct FNone*                                 ReporterGraph;                                               // 0x70(0x08)
	char                                          UnknownData78[0x248];                                        // 0x78(0x248)

	struct FNone K2_TextSize(struct FNone* RenderFont, struct FString RenderText, struct FNone Scale); // sub_0x3c924a0
	struct FNone K2_StrLen(struct FNone* RenderFont, struct FString RenderText); // sub_0x3c923b0
	struct FNone K2_Project(struct FNone WorldLocation); // sub_0x3c92300
	void K2_DrawTriangle(struct FNone* RenderTexture, struct TArray<None> Triangles); // sub_0x3c921e0
	void K2_DrawTexture(struct FNone* RenderTexture, struct FNone ScreenPosition, struct FNone ScreenSize, struct FNone CoordinatePosition, struct FNone CoordinateSize, struct FNone RenderColor, char BlendMode, float Rotation, struct FNone PivotPoint); // sub_0x3c91f60
	void K2_DrawText(struct FNone* RenderFont, struct FString RenderText, struct FNone ScreenPosition, struct FNone Scale, struct FNone RenderColor, float Kerning, struct FNone ShadowColor, struct FNone ShadowOffset, char bCentreX, char bCentreY, char bOutlined, struct FNone OutlineColor); // sub_0x3c91bc0
	void K2_DrawPolygon(struct FNone* RenderTexture, struct FNone ScreenPosition, struct FNone Radius, uint32_t NumberOfSides, struct FNone RenderColor); // sub_0x3c91a30
	void K2_DrawMaterialTriangle(struct FNone* RenderMaterial, struct TArray<None> Triangles); // sub_0x3c91910
	void K2_DrawMaterial(struct FNone* RenderMaterial, struct FNone ScreenPosition, struct FNone ScreenSize, struct FNone CoordinatePosition, struct FNone CoordinateSize, float Rotation, struct FNone PivotPoint); // sub_0x3c916f0
	void K2_DrawLine(struct FNone ScreenPositionA, struct FNone ScreenPositionB, float Thickness, struct FNone RenderColor); // sub_0x3c915a0
	void K2_DrawBox(struct FNone ScreenPosition, struct FNone ScreenSize, float Thickness, struct FNone RenderColor); // sub_0x3c91450
	void K2_DrawBorder(struct FNone* BorderTexture, struct FNone* BackgroundTexture, struct FNone* LeftBorderTexture, struct FNone* RightBorderTexture, struct FNone* TopBorderTexture, struct FNone* BottomBorderTexture, struct FNone ScreenPosition, struct FNone ScreenSize, struct FNone CoordinatePosition, struct FNone CoordinateSize, struct FNone RenderColor, struct FNone BorderScale, struct FNone BackgroundScale, float Rotation, struct FNone PivotPoint, struct FNone CornerSize); // sub_0x3c91010
	void K2_Deproject(struct FNone ScreenPosition, struct FNone& WorldOrigin, struct FNone& WorldDirection); // sub_0x3c90ef0
};

// Class Engine.TextureRenderTarget
// Size: 0xc0 (Inherited: 0xb8)
struct UTextureRenderTarget : UTexture 
{
	float                                         TargetGamma;                                                 // 0xb8(0x04)
	char                                          UnknownDataBC[0x4];                                          // 0xbc(0x04)
};

// Class Engine.TextureRenderTarget2D
// Size: 0xe8 (Inherited: 0xc0)
struct UTextureRenderTarget2D : UTextureRenderTarget 
{
	uint32_t                                      SizeX;                                                       // 0xc0(0x04)
	uint32_t                                      SizeY;                                                       // 0xc4(0x04)
	struct FNone                                  ClearColor;                                                  // 0xc8(0x10)
	char                                          AddressX;                                                    // 0xd8(0x01)
	char                                          AddressY;                                                    // 0xd9(0x01)
	char                                          bForceLinearGamma : 0;                                       // 0xda(0x01)
	char                                          bHDR : 0;                                                    // 0xda(0x01)
	char                                          bGPUSharedFlag : 0;                                          // 0xda(0x01)
	char                                          UnknownDataDA[0x1];                                          // 0xda(0x01)
	char                                          RenderTargetFormat;                                          // 0xdb(0x01)
	char                                          bAutoGenerateMips : 0;                                       // 0xdc(0x01)
	char                                          UnknownDataDC[0x1];                                          // 0xdc(0x01)
	char                                          MipsSamplerFilter;                                           // 0xdd(0x01)
	char                                          MipsAddressU;                                                // 0xde(0x01)
	char                                          MipsAddressV;                                                // 0xdf(0x01)
	char                                          OverrideFormat;                                              // 0xe0(0x01)
	char                                          UnknownDataE1[0x7];                                          // 0xe1(0x07)
};

// Class Engine.CanvasRenderTarget2D
// Size: 0x108 (Inherited: 0xe8)
struct UCanvasRenderTarget2D : UTextureRenderTarget2D 
{
	struct FMulticastInlineDelegate               OnCanvasRenderTargetUpdate;                                  // 0xe8(0x10)
	struct TWeakObjectPtr<struct FNone>           World;                                                       // 0xf8(0x08)
	char                                          bShouldClearRenderTargetOnReceiveUpdate : 0;                 // 0x100(0x01)
	char                                          UnknownData100[0x8];                                         // 0x100(0x08)

	void UpdateResource(); // sub_0x3c99860
	void ReceiveUpdate(struct FNone* Canvas, uint32_t Width, uint32_t Height); // sub_0x239bfb0
	void GetSize(uint32_t& Width, uint32_t& Height); // sub_0x3c97670
	struct FNone* CreateCanvasRenderTarget2D(struct FNone* WorldContextObject, struct FNone* CanvasRenderTarget2DClass, uint32_t Width, uint32_t Height); // sub_0x3c97080
};

// Class Engine.ChaosPhysicalMaterial
// Size: 0x48 (Inherited: 0x28)
struct UChaosPhysicalMaterial : UObject 
{
	float                                         Friction;                                                    // 0x28(0x04)
	float                                         StaticFriction;                                              // 0x2c(0x04)
	float                                         Restitution;                                                 // 0x30(0x04)
	float                                         LinearEtherDrag;                                             // 0x34(0x04)
	float                                         AngularEtherDrag;                                            // 0x38(0x04)
	float                                         SleepingLinearVelocityThreshold;                             // 0x3c(0x04)
	float                                         SleepingAngularVelocityThreshold;                            // 0x40(0x04)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
};

// Class Engine.CheckBoxStyleAsset
// Size: 0x5a8 (Inherited: 0x28)
struct UCheckBoxStyleAsset : UObject 
{
	struct FNone                                  CheckBoxStyle;                                               // 0x28(0x580)
};

// Class Engine.ChildActorComponent
// Size: 0x270 (Inherited: 0x240)
struct UChildActorComponent : USceneComponent 
{
	struct FNone*                                 ChildActorClass;                                             // 0x238(0x08)
	struct FNone*                                 ChildActor;                                                  // 0x240(0x08)
	struct FNone*                                 ChildActorTemplate;                                          // 0x248(0x08)
	char                                          UnknownData258[0x18];                                        // 0x258(0x18)

	void SetChildActorClass(struct FNone* InClass); // sub_0x3ca0e80
};

// Class Engine.ChildConnection
// Size: 0x1aa8 (Inherited: 0x1aa0)
struct UChildConnection : UNetConnection 
{
	struct FNone*                                 Parent;                                                      // 0x1aa0(0x08)
};

// Class Engine.PlatformInterfaceBase
// Size: 0x38 (Inherited: 0x28)
struct UPlatformInterfaceBase : UObject 
{
	struct TArray<None>                           AllDelegates;                                                // 0x28(0x10)
};

// Class Engine.CloudStorageBase
// Size: 0x50 (Inherited: 0x38)
struct UCloudStorageBase : UPlatformInterfaceBase 
{
	struct TArray<None>                           LocalCloudFiles;                                             // 0x38(0x10)
	char                                          bSuppressDelegateCalls : 0;                                  // 0x48(0x01)
	char                                          UnknownData48[0x8];                                          // 0x48(0x08)
};

// Class Engine.CollisionProfile
// Size: 0x158 (Inherited: 0x38)
struct UCollisionProfile : UDeveloperSettings 
{
	struct TArray<None>                           Profiles;                                                    // 0x38(0x10)
	struct TArray<None>                           DefaultChannelResponses;                                     // 0x48(0x10)
	struct TArray<None>                           EditProfiles;                                                // 0x58(0x10)
	struct TArray<None>                           ProfileRedirects;                                            // 0x68(0x10)
	struct TArray<None>                           CollisionChannelRedirects;                                   // 0x78(0x10)
	char                                          UnknownData88[0xd0];                                         // 0x88(0xd0)
};

// Class Engine.ComponentDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UComponentDelegateBinding : UDynamicBlueprintBinding 
{
	struct TArray<None>                           ComponentDelegateBindings;                                   // 0x28(0x10)
};

// Class Engine.CurveTable
// Size: 0xa0 (Inherited: 0x28)
struct UCurveTable : UObject 
{
	char                                          UnknownData28[0x78];                                         // 0x28(0x78)
};

// Class Engine.CompositeCurveTable
// Size: 0xc8 (Inherited: 0xa0)
struct UCompositeCurveTable : UCurveTable 
{
	struct TArray<None>                           ParentTables;                                                // 0xa0(0x10)
	struct TArray<None>                           OldParentTables;                                             // 0xb0(0x10)
	char                                          UnknownDataC0[0x8];                                          // 0xc0(0x08)
};

// Class Engine.DataTable
// Size: 0xc8 (Inherited: 0x28)
struct UDataTable : UObject 
{
	struct FNone*                                 RowStruct;                                                   // 0x28(0x08)
	char                                          UnknownData30[0x50];                                         // 0x30(0x50)
	char                                          bStripFromClientBuilds : 0;                                  // 0x80(0x01)
	char                                          bIgnoreExtraFields : 0;                                      // 0x80(0x01)
	char                                          bIgnoreMissingFields : 0;                                    // 0x80(0x01)
	char                                          UnknownData80[0x8];                                          // 0x80(0x08)
	struct FString                                ImportKeyField;                                              // 0x88(0x10)
	char                                          UnknownData98[0x30];                                         // 0x98(0x30)
};

// Class Engine.CompositeDataTable
// Size: 0xf0 (Inherited: 0xc8)
struct UCompositeDataTable : UDataTable 
{
	struct TArray<None>                           ParentTables;                                                // 0xc8(0x10)
	struct TArray<None>                           OldParentTables;                                             // 0xd8(0x10)
	char                                          UnknownDataE8[0x8];                                          // 0xe8(0x08)
};

// Class Engine.Console
// Size: 0x130 (Inherited: 0x28)
struct UConsole : UObject 
{
	char                                          UnknownData28[0x10];                                         // 0x28(0x10)
	struct FNone*                                 ConsoleTargetPlayer;                                         // 0x38(0x08)
	struct FNone*                                 DefaultTexture_Black;                                        // 0x40(0x08)
	struct FNone*                                 DefaultTexture_White;                                        // 0x48(0x08)
	char                                          UnknownData50[0x18];                                         // 0x50(0x18)
	struct TArray<None>                           HistoryBuffer;                                               // 0x68(0x10)
	char                                          UnknownData78[0xb8];                                         // 0x78(0xb8)
};

// Class Engine.ControlChannel
// Size: 0x98 (Inherited: 0x80)
struct UControlChannel : UChannel 
{
	char                                          UnknownData80[0x18];                                         // 0x80(0x18)
};

// Class Engine.StreamingSettings
// Size: 0x70 (Inherited: 0x38)
struct UStreamingSettings : UDeveloperSettings 
{
	char                                          AsyncLoadingThreadEnabled : 0;                               // 0x38(0x01)
	char                                          AsyncPostLoadEnabled : 0;                                    // 0x38(0x01)
	char                                          WarnIfTimeLimitExceeded : 0;                                 // 0x38(0x01)
	char                                          UnknownData38[0x4];                                          // 0x38(0x04)
	float                                         TimeLimitExceededMultiplier;                                 // 0x3c(0x04)
	float                                         TimeLimitExceededMinTime;                                    // 0x40(0x04)
	uint32_t                                      MinBulkDataSizeForAsyncLoading;                              // 0x44(0x04)
	char                                          UseBackgroundLevelStreaming : 0;                             // 0x48(0x01)
	char                                          AsyncLoadingUseFullTimeLimit : 0;                            // 0x48(0x01)
	char                                          UnknownData48[0x4];                                          // 0x48(0x04)
	float                                         AsyncLoadingTimeLimit;                                       // 0x4c(0x04)
	float                                         PriorityAsyncLoadingExtraTime;                               // 0x50(0x04)
	float                                         LevelStreamingActorsUpdateTimeLimit;                         // 0x54(0x04)
	float                                         PriorityLevelStreamingActorsUpdateExtraTime;                 // 0x58(0x04)
	uint32_t                                      LevelStreamingComponentsRegistrationGranularity;             // 0x5c(0x04)
	float                                         LevelStreamingUnregisterComponentsTimeLimit;                 // 0x60(0x04)
	uint32_t                                      LevelStreamingComponentsUnregistrationGranularity;           // 0x64(0x04)
	char                                          FlushStreamingOnExit : 0;                                    // 0x68(0x01)
	char                                          EventDrivenLoaderEnabled : 0;                                // 0x68(0x01)
	char                                          UnknownData68[0x8];                                          // 0x68(0x08)
};

// Class Engine.GarbageCollectionSettings
// Size: 0x58 (Inherited: 0x38)
struct UGarbageCollectionSettings : UDeveloperSettings 
{
	float                                         TimeBetweenPurgingPendingKillObjects;                        // 0x38(0x04)
	char                                          FlushStreamingOnGC : 0;                                      // 0x3c(0x01)
	char                                          AllowParallelGC : 0;                                         // 0x3c(0x01)
	char                                          IncrementalBeginDestroyEnabled : 0;                          // 0x3c(0x01)
	char                                          MultithreadedDestructionEnabled : 0;                         // 0x3c(0x01)
	char                                          CreateGCClusters : 0;                                        // 0x3c(0x01)
	char                                          AssetClusteringEnabled : 0;                                  // 0x3c(0x01)
	char                                          ActorClusteringEnabled : 0;                                  // 0x3c(0x01)
	char                                          BlueprintClusteringEnabled : 0;                              // 0x3c(0x01)
	char                                          UnknownData3C[0x1];                                          // 0x3c(0x01)
	char                                          UseDisregardForGCOnDedicatedServers : 0;                     // 0x3d(0x01)
	char                                          UnknownData3D[0x3];                                          // 0x3d(0x03)
	uint32_t                                      MinGCClusterSize;                                            // 0x40(0x04)
	uint32_t                                      NumRetriesBeforeForcingGC;                                   // 0x44(0x04)
	uint32_t                                      MaxObjectsNotConsideredByGC;                                 // 0x48(0x04)
	uint32_t                                      SizeOfPermanentObjectPool;                                   // 0x4c(0x04)
	uint32_t                                      MaxObjectsInGame;                                            // 0x50(0x04)
	uint32_t                                      MaxObjectsInEditor;                                          // 0x54(0x04)
};

// Class Engine.CullDistanceVolume
// Size: 0x360 (Inherited: 0x348)
struct ACullDistanceVolume : AVolume 
{
	struct TArray<None>                           CullDistances;                                               // 0x348(0x10)
	char                                          bEnabled : 0;                                                // 0x358(0x01)
	char                                          UnknownData358[0x8];                                         // 0x358(0x08)
};

// Class Engine.CurveBase
// Size: 0x30 (Inherited: 0x28)
struct UCurveBase : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)

	void GetValueRange(float& MinValue, float& MaxValue); // sub_0x3ca9560
	void GetTimeRange(float& MinTime, float& MaxTime); // sub_0x3ca9480
};

// Class Engine.CurveEdPresetCurve
// Size: 0x28 (Inherited: 0x28)
struct UCurveEdPresetCurve : UObject 
{
};

// Class Engine.CurveFloat
// Size: 0xb8 (Inherited: 0x30)
struct UCurveFloat : UCurveBase 
{
	struct FNone                                  FloatCurve;                                                  // 0x30(0x80)
	char                                          bIsEventCurve : 0;                                           // 0xb0(0x01)
	char                                          UnknownDataB0[0x8];                                          // 0xb0(0x08)

	float GetFloatValue(float InTime); // sub_0x3ca9320
};

// Class Engine.CurveLinearColor
// Size: 0x250 (Inherited: 0x30)
struct UCurveLinearColor : UCurveBase 
{
	struct FNone                                  FloatCurves[0x4];                                            // 0x30(0x200)
	float                                         AdjustHue;                                                   // 0x230(0x04)
	float                                         AdjustSaturation;                                            // 0x234(0x04)
	float                                         AdjustBrightness;                                            // 0x238(0x04)
	float                                         AdjustBrightnessCurve;                                       // 0x23c(0x04)
	float                                         AdjustVibrance;                                              // 0x240(0x04)
	float                                         AdjustMinAlpha;                                              // 0x244(0x04)
	float                                         AdjustMaxAlpha;                                              // 0x248(0x04)
	char                                          UnknownData24C[0x4];                                         // 0x24c(0x04)

	struct FNone GetLinearColorValue(float InTime); // sub_0x3ca93b0
	struct FNone GetClampedLinearColorValue(float InTime); // sub_0x3ca89b0
};

// Class Engine.Texture2D
// Size: 0xe8 (Inherited: 0xb8)
struct UTexture2D : UTexture 
{
	uint32_t                                      LevelIndex;                                                  // 0xb8(0x04)
	uint32_t                                      FirstResourceMemMip;                                         // 0xbc(0x04)
	char                                          bTemporarilyDisableStreaming : 0;                            // 0xc0(0x01)
	char                                          UnknownDataC0[0x1];                                          // 0xc0(0x01)
	char                                          AddressX;                                                    // 0xc1(0x01)
	char                                          AddressY;                                                    // 0xc2(0x01)
	char                                          UnknownDataC3[0x1];                                          // 0xc3(0x01)
	struct FNone                                  ImportedSize;                                                // 0xc4(0x08)
	char                                          UnknownDataCC[0x1c];                                         // 0xcc(0x1c)

	uint32_t Blueprint_GetSizeY(); // sub_0x3e06490
	uint32_t Blueprint_GetSizeX(); // sub_0x3e06460
};

// Class Engine.CurveLinearColorAtlas
// Size: 0x100 (Inherited: 0xe8)
struct UCurveLinearColorAtlas : UTexture2D 
{
	uint32_t                                      TextureSize;                                                 // 0xe8(0x04)
	char                                          UnknownDataEC[0x4];                                          // 0xec(0x04)
	struct TArray<None>                           GradientCurves;                                              // 0xf0(0x10)

	char GetCurvePosition(struct FNone* InCurve, float& Position); // sub_0x3ca8a50
};

// Class Engine.CurveSourceInterface
// Size: 0x28 (Inherited: 0x28)
struct UCurveSourceInterface : UInterface 
{

	float GetCurveValue(struct FName CurveName); // sub_0x3ca8b30
	void GetCurves(struct TArray<None>& OutValues); // sub_0x3ca8bd0
	struct FName GetBindingName(); // sub_0x3ca8970
};

// Class Engine.CurveVector
// Size: 0x1b0 (Inherited: 0x30)
struct UCurveVector : UCurveBase 
{
	struct FNone                                  FloatCurves[0x3];                                            // 0x30(0x180)

	struct FNone GetVectorValue(float InTime); // sub_0x3ca9640
};

// Class Engine.DataTableFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UDataTableFunctionLibrary : UBlueprintFunctionLibrary 
{

	void GetDataTableRowNames(struct FNone* Table, struct TArray<None>& OutRowNames); // sub_0x3ca9240
	char GetDataTableRowFromName(struct FNone* Table, struct FName RowName, struct FNone& OutRow); // sub_0x3ca8e60
	uint32_t GetDataTableRowCount(struct FNone* Table); // sub_0x3ca8de0
	struct TArray<None> GetDataTableColumnAsString(struct FNone* DataTable, struct FName PropertyName); // sub_0x3ca8c80
	void EvaluateCurveTableRow(struct FNone* CurveTable, struct FName RowName, float InXY, char& OutResult, float& OutXY, struct FString ContextString); // sub_0x3ca8780
	char DoesDataTableRowExist(struct FNone* Table, struct FName RowName); // sub_0x3ca86c0
};

// Class Engine.DebugCameraController
// Size: 0x7f8 (Inherited: 0x6f0)
struct ADebugCameraController : APlayerController 
{
	char                                          bShowSelectedInfo : 0;                                       // 0x6f0(0x01)
	char                                          bIsFrozenRendering : 0;                                      // 0x6f0(0x01)
	char                                          bOverrideInitialMaxSpeed : 0;                                // 0x6f0(0x01)
	char                                          UnknownData6F0[0x4];                                         // 0x6f0(0x04)
	float                                         OverrideInitialMaxSpeed;                                     // 0x6f4(0x04)
	char                                          bIsOrbitingSelectedActor : 0;                                // 0x6f8(0x01)
	char                                          bOrbitPivotUseCenter : 0;                                    // 0x6f8(0x01)
	char                                          bEnableBufferVisualization : 0;                              // 0x6f8(0x01)
	char                                          bEnableBufferVisualizationFullMode : 0;                      // 0x6f8(0x01)
	char                                          bIsBufferVisualizationInputSetup : 0;                        // 0x6f8(0x01)
	char                                          bLastDisplayEnabled : 0;                                     // 0x6f8(0x01)
	char                                          UnknownData6F8[0x8];                                         // 0x6f8(0x08)
	struct FNone*                                 DrawFrustum;                                                 // 0x700(0x08)
	struct FNone*                                 SelectedActor;                                               // 0x708(0x08)
	struct FNone*                                 SelectedComponent;                                           // 0x710(0x08)
	struct FNone                                  SelectedHitPoint;                                            // 0x718(0x88)
	struct FNone*                                 OriginalControllerRef;                                       // 0x7a0(0x08)
	struct FNone*                                 OriginalPlayer;                                              // 0x7a8(0x08)
	float                                         SpeedScale;                                                  // 0x7b0(0x04)
	float                                         InitialMaxSpeed;                                             // 0x7b4(0x04)
	float                                         InitialAccel;                                                // 0x7b8(0x04)
	float                                         InitialDecel;                                                // 0x7bc(0x04)
	char                                          UnknownData7C0[0x38];                                        // 0x7c0(0x38)

	void ToggleDisplay(); // sub_0x3ca9780
	void ShowDebugSelectedInfo(); // sub_0x3ca9760
	void SetPawnMovementSpeedScale(float NewSpeedScale); // sub_0x3ca96e0
	void ReceiveOnDeactivate(struct FNone* RestoredPC); // sub_0x239bfb0
	void ReceiveOnActorSelected(struct FNone* NewSelectedActor, struct FNone& SelectHitLocation, struct FNone& SelectHitNormal, struct FNone& Hit); // sub_0x239bfb0
	void ReceiveOnActivate(struct FNone* OriginalPC); // sub_0x239bfb0
	struct FNone* GetSelectedActor(); // sub_0x3ca9450
};

// Class Engine.DebugCameraControllerSettings
// Size: 0x48 (Inherited: 0x38)
struct UDebugCameraControllerSettings : UDeveloperSettings 
{
	struct TArray<None>                           CycleViewModes;                                              // 0x38(0x10)
};

// Class Engine.DebugCameraHUD
// Size: 0x400 (Inherited: 0x400)
struct ADebugCameraHUD : AHUD 
{
};

// Class Engine.DebugDrawService
// Size: 0x28 (Inherited: 0x28)
struct UDebugDrawService : UBlueprintFunctionLibrary 
{
};

// Class Engine.DecalActor
// Size: 0x318 (Inherited: 0x310)
struct ADecalActor : AActor 
{
	struct FNone*                                 Decal;                                                       // 0x310(0x08)

	void SetDecalMaterial(struct FNone* NewDecalMaterial); // sub_0x3cad400
	struct FNone* GetDecalMaterial(); // sub_0x3cacfe0
	struct FNone* CreateDynamicMaterialInstance(); // sub_0x3cacf80
};

// Class Engine.DecalComponent
// Size: 0x280 (Inherited: 0x240)
struct UDecalComponent : USceneComponent 
{
	struct FNone*                                 DecalMaterial;                                               // 0x238(0x08)
	uint32_t                                      SortOrder;                                                   // 0x240(0x04)
	float                                         FadeScreenSize;                                              // 0x244(0x04)
	float                                         FadeStartDelay;                                              // 0x248(0x04)
	float                                         FadeDuration;                                                // 0x24c(0x04)
	float                                         FadeInDuration;                                              // 0x250(0x04)
	float                                         FadeInStartDelay;                                            // 0x254(0x04)
	char                                          bDestroyOwnerAfterFade : 0;                                  // 0x258(0x01)
	struct FNone                                  DecalSize;                                                   // 0x25c(0x0c)
	char                                          UnknownData26C[0x14];                                        // 0x26c(0x14)

	void SetSortOrder(uint32_t Value); // sub_0x3cadb70
	void SetFadeScreenSize(float NewFadeScreenSize); // sub_0x3cad8e0
	void SetFadeOut(float StartDelay, float Duration, char DestroyOwnerAfterFade); // sub_0x3cad7d0
	void SetFadeIn(float StartDelay, float Duaration); // sub_0x3cad710
	void SetDecalMaterial(struct FNone* NewDecalMaterial); // sub_0x3cad480
	float GetFadeStartDelay(); // sub_0x3cad0d0
	float GetFadeInStartDelay(); // sub_0x3cad0a0
	float GetFadeInDuration(); // sub_0x3cad070
	float GetFadeDuration(); // sub_0x3cad040
	struct FNone* GetDecalMaterial(); // sub_0x3cad010
	struct FNone* CreateDynamicMaterialInstance(); // sub_0x3cacfb0
};

// Class Engine.DefaultPhysicsVolume
// Size: 0x358 (Inherited: 0x358)
struct ADefaultPhysicsVolume : APhysicsVolume 
{
};

// Class Engine.MKDemoNetConnectionEx
// Size: 0x1bf0 (Inherited: 0x1aa0)
struct UMKDemoNetConnectionEx : UNetConnection 
{
	char                                          UnknownData1AA0[0x148];                                      // 0x1aa0(0x148)
	struct FNone*                                 SelfDemoNetConnection;                                       // 0x1be8(0x08)
};

// Class Engine.DemoNetConnection
// Size: 0x1c60 (Inherited: 0x1bf0)
struct UDemoNetConnection : UMKDemoNetConnectionEx 
{
	char                                          UnknownData1BF0[0x70];                                       // 0x1bf0(0x70)
};

// Class Engine.PendingNetGame
// Size: 0xc8 (Inherited: 0x28)
struct UPendingNetGame : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct FNone*                                 NetDriver;                                                   // 0x30(0x08)
	struct FNone*                                 DemoNetDriver;                                               // 0x38(0x08)
	char                                          UnknownData40[0x88];                                         // 0x40(0x88)
};

// Class Engine.DemoPendingNetGame
// Size: 0xc8 (Inherited: 0xc8)
struct UDemoPendingNetGame : UPendingNetGame 
{
};

// Class Engine.DestructibleInterface
// Size: 0x28 (Inherited: 0x28)
struct UDestructibleInterface : UInterface 
{
};

// Class Engine.TextureLODSettings
// Size: 0x38 (Inherited: 0x28)
struct UTextureLODSettings : UObject 
{
	struct TArray<None>                           TextureLODGroups;                                            // 0x28(0x10)
};

// Class Engine.DeviceProfile
// Size: 0x98 (Inherited: 0x38)
struct UDeviceProfile : UTextureLODSettings 
{
	struct FString                                DeviceType;                                                  // 0x38(0x10)
	struct FString                                BaseProfileName;                                             // 0x48(0x10)
	struct FNone*                                 Parent;                                                      // 0x58(0x08)
	char                                          UnknownData60[0x18];                                         // 0x60(0x18)
	struct TArray<None>                           CVars;                                                       // 0x78(0x10)
	char                                          UnknownData88[0x10];                                         // 0x88(0x10)
};

// Class Engine.DeviceProfileManager
// Size: 0xb0 (Inherited: 0x28)
struct UDeviceProfileManager : UObject 
{
	struct TArray<None>                           Profiles;                                                    // 0x28(0x10)
	char                                          UnknownData38[0x78];                                         // 0x38(0x78)
};

// Class Engine.DialogueSoundWaveProxy
// Size: 0x178 (Inherited: 0x160)
struct UDialogueSoundWaveProxy : USoundBase 
{
	char                                          UnknownData160[0x18];                                        // 0x160(0x18)
};

// Class Engine.DialogueVoice
// Size: 0x40 (Inherited: 0x28)
struct UDialogueVoice : UObject 
{
	enum class None                               gender;                                                      // 0x28(0x01)
	char                                          Plurality;                                                   // 0x29(0x01)
	char                                          UnknownData2A[0x2];                                          // 0x2a(0x02)
	struct FNone                                  LocalizationGUID;                                            // 0x2c(0x10)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
};

// Class Engine.DialogueWave
// Size: 0x70 (Inherited: 0x28)
struct UDialogueWave : UObject 
{
	char                                          bMature : 0;                                                 // 0x28(0x01)
	char                                          bOverride_SubtitleOverride : 0;                              // 0x28(0x01)
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct FString                                SpokenText;                                                  // 0x30(0x10)
	struct FString                                SubtitleOverride;                                            // 0x40(0x10)
	struct TArray<None>                           ContextMappings;                                             // 0x50(0x10)
	struct FNone                                  LocalizationGUID;                                            // 0x60(0x10)
};

// Class Engine.Light
// Size: 0x320 (Inherited: 0x310)
struct ALight : AActor 
{
	struct FNone*                                 LightComponent;                                              // 0x310(0x08)
	char                                          bEnabled : 0;                                                // 0x318(0x01)
	char                                          UnknownData318[0x8];                                         // 0x318(0x08)

	void ToggleEnabled(); // sub_0x3d52a30
	void SetLightFunctionScale(struct FNone NewLightFunctionScale); // sub_0x3d522c0
	void SetLightFunctionMaterial(struct FNone* NewLightFunctionMaterial); // sub_0x3d521c0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // sub_0x3d520c0
	void SetLightColor(struct FNone NewLightColor); // sub_0x3d51ef0
	void SetEnabled(char bSetEnabled); // sub_0x3d51b50
	void SetCastShadows(char bNewValue); // sub_0x3d51870
	void SetBrightness(float NewBrightness); // sub_0x3d517f0
	void SetAffectTranslucentLighting(char bNewValue); // sub_0x3d514e0
	void OnRep_bEnabled(); // sub_0x1e42900
	char IsEnabled(); // sub_0x3d50eb0
	struct FNone GetLightColor(); // sub_0x3d50e10
	float GetBrightness(); // sub_0x3d50db0
};

// Class Engine.DirectionalLight
// Size: 0x320 (Inherited: 0x320)
struct ADirectionalLight : ALight 
{
};

// Class Engine.LightComponentBase
// Size: 0x270 (Inherited: 0x240)
struct ULightComponentBase : USceneComponent 
{
	struct FNone                                  LightGuid;                                                   // 0x238(0x10)
	float                                         Brightness;                                                  // 0x248(0x04)
	float                                         Intensity;                                                   // 0x24c(0x04)
	struct FNone                                  LightColor;                                                  // 0x250(0x04)
	char                                          bAffectsWorld : 0;                                           // 0x254(0x01)
	char                                          CastShadows : 0;                                             // 0x254(0x01)
	char                                          CastStaticShadows : 0;                                       // 0x254(0x01)
	char                                          CastDynamicShadows : 0;                                      // 0x254(0x01)
	char                                          bAffectTranslucentLighting : 0;                              // 0x254(0x01)
	char                                          bTransmission : 0;                                           // 0x254(0x01)
	char                                          bCastVolumetricShadow : 0;                                   // 0x254(0x01)
	char                                          bCastDeepShadow : 0;                                         // 0x254(0x01)
	char                                          bCastRaytracedShadow : 0;                                    // 0x255(0x01)
	char                                          bAffectReflection : 0;                                       // 0x255(0x01)
	char                                          bAffectGlobalIllumination : 0;                               // 0x255(0x01)
	float                                         IndirectLightingIntensity;                                   // 0x258(0x04)
	float                                         VolumetricScatteringIntensity;                               // 0x25c(0x04)
	float                                         VolumetricAttenuationScale;                                  // 0x260(0x04)
	float                                         VolumetricSourceRadiusScale;                                 // 0x264(0x04)
	uint32_t                                      SamplesPerPixel;                                             // 0x268(0x04)

	void SetSamplesPerPixel(uint32_t NewValue); // sub_0x3d55680
	void SetCastVolumetricShadow(char bNewValue); // sub_0x3d55570
	void SetCastShadows(char bNewValue); // sub_0x3d554e0
	void SetCastRaytracedShadow(char bNewValue); // sub_0x3d55450
	void SetCastDeepShadow(char bNewValue); // sub_0x3d553c0
	void SetAffectReflection(char bNewValue); // sub_0x3d552b0
	void SetAffectGlobalIllumination(char bNewValue); // sub_0x3d55220
	struct FNone GetLightColor(); // sub_0x3d550e0
};

// Class Engine.LightComponent
// Size: 0x380 (Inherited: 0x270)
struct ULightComponent : ULightComponentBase 
{
	float                                         Temperature;                                                 // 0x270(0x04)
	float                                         MaxDrawDistance;                                             // 0x274(0x04)
	float                                         MaxDistanceFadeRange;                                        // 0x278(0x04)
	char                                          bUseTemperature : 0;                                         // 0x27c(0x01)
	char                                          UnknownData27C[0x4];                                         // 0x27c(0x04)
	uint32_t                                      ShadowMapChannel;                                            // 0x280(0x04)
	char                                          UnknownData284[0x4];                                         // 0x284(0x04)
	float                                         MinRoughness;                                                // 0x288(0x04)
	float                                         SpecularScale;                                               // 0x28c(0x04)
	float                                         ShadowResolutionScale;                                       // 0x290(0x04)
	float                                         ShadowBias;                                                  // 0x294(0x04)
	float                                         ShadowSlopeBias;                                             // 0x298(0x04)
	float                                         ShadowSharpen;                                               // 0x29c(0x04)
	float                                         ContactShadowLength;                                         // 0x2a0(0x04)
	char                                          ContactShadowLengthInWS : 0;                                 // 0x2a4(0x01)
	char                                          UnknownData2A4[0x4];                                         // 0x2a4(0x04)
	float                                         ContactShadowStartDistance;                                  // 0x2a8(0x04)
	float                                         ContactShadowFadeDistance;                                   // 0x2ac(0x04)
	float                                         ShadowStrength;                                              // 0x2b0(0x04)
	float                                         TranslucentShadowDensity;                                    // 0x2b4(0x04)
	char                                          InverseSquaredFalloff : 0;                                   // 0x2b8(0x01)
	char                                          CastTranslucentShadows : 0;                                  // 0x2b8(0x01)
	char                                          bCastShadowsFromCinematicObjectsOnly : 0;                    // 0x2b8(0x01)
	char                                          bAffectDynamicIndirectLighting : 0;                          // 0x2b8(0x01)
	char                                          bForceCachedShadowsFromMovablePrimitivesAsStatic : 0;        // 0x2b8(0x01)
	char                                          bForceCachedShadowsForMovablePrimitives : 0;                 // 0x2b8(0x01)
	char                                          UnknownData2B8[0x4];                                         // 0x2b8(0x04)
	struct FNone                                  LightingChannels;                                            // 0x2bc(0x01)
	char                                          UnknownData2BD[0x3];                                         // 0x2bd(0x03)
	struct FNone*                                 LightFunctionMaterial;                                       // 0x2c0(0x08)
	struct FNone                                  LightFunctionScale;                                          // 0x2c8(0x0c)
	char                                          UnknownData2D4[0x4];                                         // 0x2d4(0x04)
	struct FNone*                                 IESTexture;                                                  // 0x2d8(0x08)
	char                                          bUseIESBrightness : 0;                                       // 0x2e0(0x01)
	char                                          UnknownData2E0[0x4];                                         // 0x2e0(0x04)
	float                                         IESBrightnessScale;                                          // 0x2e4(0x04)
	float                                         LightFunctionFadeDistance;                                   // 0x2e8(0x04)
	float                                         DisabledBrightness;                                          // 0x2ec(0x04)
	char                                          bEnableLightShaftBloom : 0;                                  // 0x2f0(0x01)
	char                                          UnknownData2F0[0x4];                                         // 0x2f0(0x04)
	float                                         BloomScale;                                                  // 0x2f4(0x04)
	float                                         BloomThreshold;                                              // 0x2f8(0x04)
	float                                         BloomMaxBrightness;                                          // 0x2fc(0x04)
	struct FNone                                  BloomTint;                                                   // 0x300(0x04)
	char                                          bUseFoliageLighting : 0;                                     // 0x304(0x01)
	char                                          UnknownData304[0x1];                                         // 0x304(0x01)
	char                                          bUseRayTracedDistanceFieldShadows : 0;                       // 0x305(0x01)
	char                                          UnknownData305[0x3];                                         // 0x305(0x03)
	float                                         RayStartOffsetDepthScale;                                    // 0x308(0x04)
	char                                          UnknownData30C[0x74];                                        // 0x30c(0x74)

	void SetVolumetricScatteringIntensity(float NewIntensity); // sub_0x3d529b0
	void SetUseIESBrightness(char bNewValue); // sub_0x3d52920
	void SetTransmission(char bNewValue); // sub_0x3d52890
	void SetTemperature(float NewTemperature); // sub_0x3d52810
	void SetSpecularScale(float NewValue); // sub_0x3d52790
	void SetShadowSlopeBias(float NewValue); // sub_0x3d52680
	void SetShadowResolutionScale(float NewValue); // sub_0x3d52600
	void SetShadowBias(float NewValue); // sub_0x3d52580
	void SetLightingChannels(char bChannel0, char bChannel1, char bChannel2); // sub_0x3d523e0
	void SetLightFunctionScale(struct FNone NewLightFunctionScale); // sub_0x3d52350
	void SetLightFunctionMaterial(struct FNone* NewLightFunctionMaterial); // sub_0x3d52240
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // sub_0x3d52140
	void SetLightFunctionDisabledBrightness(float NewValue); // sub_0x3d52040
	void SetLightColor(struct FNone NewLightColor, char bSRGB); // sub_0x3d51f70
	void SetIntensity(float NewIntensity); // sub_0x3d51df0
	void SetIndirectLightingIntensity(float NewIntensity); // sub_0x3d51d70
	void SetIESTexture(struct FNone* NewValue); // sub_0x3d51cf0
	void SetIESBrightnessScale(float NewValue); // sub_0x3d51c70
	void SetForceCachedShadowsForMovablePrimitives(char bNewValue); // sub_0x3d51be0
	void SetEnableLightShaftBloom(char bNewValue); // sub_0x3d51ac0
	void SetBloomTint(struct FNone NewValue); // sub_0x3d51780
	void SetBloomThreshold(float NewValue); // sub_0x3d51700
	void SetBloomScale(float NewValue); // sub_0x3d51680
	void SetBloomMaxBrightness(float NewValue); // sub_0x3d51600
	void SetAffectTranslucentLighting(char bNewValue); // sub_0x3d51570
	void SetAffectDynamicIndirectLighting(char bNewValue); // sub_0x3d51450
};

// Class Engine.DirectionalLightComponent
// Size: 0x400 (Inherited: 0x380)
struct UDirectionalLightComponent : ULightComponent 
{
	float                                         ShadowCascadeBiasDistribution;                               // 0x380(0x04)
	char                                          bEnableLightShaftOcclusion : 0;                              // 0x384(0x01)
	char                                          UnknownData384[0x4];                                         // 0x384(0x04)
	float                                         OcclusionMaskDarkness;                                       // 0x388(0x04)
	float                                         OcclusionDepthRange;                                         // 0x38c(0x04)
	struct FNone                                  LightShaftOverrideDirection;                                 // 0x390(0x0c)
	float                                         WholeSceneDynamicShadowRadius;                               // 0x39c(0x04)
	float                                         DynamicShadowDistanceMovableLight;                           // 0x3a0(0x04)
	float                                         DynamicShadowDistanceStationaryLight;                        // 0x3a4(0x04)
	uint32_t                                      DynamicShadowCascades;                                       // 0x3a8(0x04)
	float                                         CascadeDistributionExponent;                                 // 0x3ac(0x04)
	float                                         CascadeTransitionFraction;                                   // 0x3b0(0x04)
	float                                         ShadowDistanceFadeoutFraction;                               // 0x3b4(0x04)
	char                                          bUseInsetShadowsForMovableObjects : 0;                       // 0x3b8(0x01)
	char                                          UnknownData3B8[0x4];                                         // 0x3b8(0x04)
	uint32_t                                      FarShadowCascadeCount;                                       // 0x3bc(0x04)
	float                                         FarShadowDistance;                                           // 0x3c0(0x04)
	char                                          bUseFarShadowAsStaticWorldShadow : 0;                        // 0x3c4(0x01)
	char                                          UnknownData3C4[0x4];                                         // 0x3c4(0x04)
	float                                         DistanceFieldShadowDistance;                                 // 0x3c8(0x04)
	float                                         LightSourceAngle;                                            // 0x3cc(0x04)
	float                                         LightSourceSoftAngle;                                        // 0x3d0(0x04)
	float                                         TraceDistance;                                               // 0x3d4(0x04)
	struct FNone                                  LightmassSettings;                                           // 0x3d8(0x10)
	char                                          bCastModulatedShadows : 0;                                   // 0x3e8(0x01)
	char                                          UnknownData3E8[0x4];                                         // 0x3e8(0x04)
	struct FNone                                  ModulatedShadowColor;                                        // 0x3ec(0x04)
	float                                         ShadowAmount;                                                // 0x3f0(0x04)
	char                                          bUsedAsAtmosphereSunLight : 0;                               // 0x3f4(0x01)
	char                                          UnknownData3F4[0x4];                                         // 0x3f4(0x04)
	uint32_t                                      AtmosphereSunLightIndex;                                     // 0x3f8(0x04)
	char                                          UnknownData3FC[0x4];                                         // 0x3fc(0x04)

	void SetShadowDistanceFadeoutFraction(float NewValue); // sub_0x3cadaf0
	void SetShadowAmount(float NewValue); // sub_0x3cada70
	void SetOcclusionMaskDarkness(float NewValue); // sub_0x3cad9f0
	void SetLightShaftOverrideDirection(struct FNone NewValue); // sub_0x3cad960
	void SetEnableLightShaftOcclusion(char bNewValue); // sub_0x3cad680
	void SetDynamicShadowDistanceStationaryLight(float NewValue); // sub_0x3cad600
	void SetDynamicShadowDistanceMovableLight(float NewValue); // sub_0x3cad580
	void SetDynamicShadowCascades(uint32_t NewValue); // sub_0x3cad500
	void SetCascadeTransitionFraction(float NewValue); // sub_0x3cad380
	void SetCascadeDistributionExponent(float NewValue); // sub_0x3cad300
};

// Class Engine.Distribution
// Size: 0x30 (Inherited: 0x28)
struct UDistribution : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
};

// Class Engine.DistributionFloat
// Size: 0x38 (Inherited: 0x30)
struct UDistributionFloat : UDistribution 
{
	char                                          bCanBeBaked : 0;                                             // 0x30(0x01)
	char                                          bBakedDataSuccesfully : 0;                                   // 0x30(0x01)
	char                                          UnknownData30[0x8];                                          // 0x30(0x08)
};

// Class Engine.DistributionFloatConstant
// Size: 0x40 (Inherited: 0x38)
struct UDistributionFloatConstant : UDistributionFloat 
{
	float                                         Constant;                                                    // 0x38(0x04)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
};

// Class Engine.DistributionFloatConstantCurve
// Size: 0x50 (Inherited: 0x38)
struct UDistributionFloatConstantCurve : UDistributionFloat 
{
	struct FNone                                  ConstantCurve;                                               // 0x38(0x18)
};

// Class Engine.DistributionFloatParameterBase
// Size: 0x60 (Inherited: 0x40)
struct UDistributionFloatParameterBase : UDistributionFloatConstant 
{
	struct FName                                  ParameterName;                                               // 0x40(0x08)
	float                                         MinInput;                                                    // 0x48(0x04)
	float                                         MaxInput;                                                    // 0x4c(0x04)
	float                                         MinOutput;                                                   // 0x50(0x04)
	float                                         MaxOutput;                                                   // 0x54(0x04)
	char                                          ParamMode;                                                   // 0x58(0x01)
	char                                          UnknownData59[0x7];                                          // 0x59(0x07)
};

// Class Engine.DistributionFloatParticleParameter
// Size: 0x60 (Inherited: 0x60)
struct UDistributionFloatParticleParameter : UDistributionFloatParameterBase 
{
};

// Class Engine.DistributionFloatUniform
// Size: 0x40 (Inherited: 0x38)
struct UDistributionFloatUniform : UDistributionFloat 
{
	float                                         Min;                                                         // 0x38(0x04)
	float                                         MAX;                                                         // 0x3c(0x04)
};

// Class Engine.DistributionFloatUniformCurve
// Size: 0x50 (Inherited: 0x38)
struct UDistributionFloatUniformCurve : UDistributionFloat 
{
	struct FNone                                  ConstantCurve;                                               // 0x38(0x18)
};

// Class Engine.DistributionVector
// Size: 0x38 (Inherited: 0x30)
struct UDistributionVector : UDistribution 
{
	char                                          bCanBeBaked : 0;                                             // 0x30(0x01)
	char                                          bIsDirty : 0;                                                // 0x30(0x01)
	char                                          bBakedDataSuccesfully : 0;                                   // 0x30(0x01)
	char                                          UnknownData30[0x8];                                          // 0x30(0x08)
};

// Class Engine.DistributionVectorConstant
// Size: 0x50 (Inherited: 0x38)
struct UDistributionVectorConstant : UDistributionVector 
{
	struct FNone                                  Constant;                                                    // 0x38(0x0c)
	char                                          bLockAxes : 0;                                               // 0x44(0x01)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
	char                                          LockedAxes;                                                  // 0x48(0x01)
	char                                          UnknownData49[0x7];                                          // 0x49(0x07)
};

// Class Engine.DistributionVectorConstantCurve
// Size: 0x58 (Inherited: 0x38)
struct UDistributionVectorConstantCurve : UDistributionVector 
{
	struct FNone                                  ConstantCurve;                                               // 0x38(0x18)
	char                                          bLockAxes : 0;                                               // 0x50(0x01)
	char                                          UnknownData50[0x4];                                          // 0x50(0x04)
	char                                          LockedAxes;                                                  // 0x54(0x01)
	char                                          UnknownData55[0x3];                                          // 0x55(0x03)
};

// Class Engine.DistributionVectorParameterBase
// Size: 0x90 (Inherited: 0x50)
struct UDistributionVectorParameterBase : UDistributionVectorConstant 
{
	struct FName                                  ParameterName;                                               // 0x50(0x08)
	struct FNone                                  MinInput;                                                    // 0x58(0x0c)
	struct FNone                                  MaxInput;                                                    // 0x64(0x0c)
	struct FNone                                  MinOutput;                                                   // 0x70(0x0c)
	struct FNone                                  MaxOutput;                                                   // 0x7c(0x0c)
	char                                          ParamModes[0x3];                                             // 0x88(0x03)
	char                                          UnknownData8B[0x5];                                          // 0x8b(0x05)
};

// Class Engine.DistributionVectorParticleParameter
// Size: 0x90 (Inherited: 0x90)
struct UDistributionVectorParticleParameter : UDistributionVectorParameterBase 
{
};

// Class Engine.DistributionVectorUniform
// Size: 0x60 (Inherited: 0x38)
struct UDistributionVectorUniform : UDistributionVector 
{
	struct FNone                                  MAX;                                                         // 0x38(0x0c)
	struct FNone                                  Min;                                                         // 0x44(0x0c)
	char                                          bLockAxes : 0;                                               // 0x50(0x01)
	char                                          UnknownData50[0x4];                                          // 0x50(0x04)
	char                                          LockedAxes;                                                  // 0x54(0x01)
	char                                          MirrorFlags[0x3];                                            // 0x55(0x03)
	char                                          bUseExtremes : 0;                                            // 0x58(0x01)
	char                                          UnknownData58[0x8];                                          // 0x58(0x08)
};

// Class Engine.DistributionVectorUniformCurve
// Size: 0x60 (Inherited: 0x38)
struct UDistributionVectorUniformCurve : UDistributionVector 
{
	struct FNone                                  ConstantCurve;                                               // 0x38(0x18)
	char                                          bLockAxes1 : 0;                                              // 0x50(0x01)
	char                                          bLockAxes2 : 0;                                              // 0x50(0x01)
	char                                          UnknownData50[0x4];                                          // 0x50(0x04)
	char                                          LockedAxes[0x2];                                             // 0x54(0x02)
	char                                          MirrorFlags[0x3];                                            // 0x56(0x03)
	char                                          UnknownData59[0x3];                                          // 0x59(0x03)
	char                                          bUseExtremes : 0;                                            // 0x5c(0x01)
	char                                          UnknownData5C[0x4];                                          // 0x5c(0x04)
};

// Class Engine.DocumentationActor
// Size: 0x318 (Inherited: 0x310)
struct ADocumentationActor : AActor 
{
	char                                          UnknownData310[0x8];                                         // 0x310(0x08)
};

// Class Engine.DPICustomScalingRule
// Size: 0x28 (Inherited: 0x28)
struct UDPICustomScalingRule : UObject 
{
};

// Class Engine.DrawFrustumComponent
// Size: 0x4e0 (Inherited: 0x4c0)
struct UDrawFrustumComponent : UPrimitiveComponent 
{
	struct FNone                                  FrustumColor;                                                // 0x4b8(0x04)
	float                                         FrustumAngle;                                                // 0x4bc(0x04)
	float                                         FrustumAspectRatio;                                          // 0x4c0(0x04)
	float                                         FrustumStartDist;                                            // 0x4c4(0x04)
	float                                         FrustumEndDist;                                              // 0x4c8(0x04)
	struct FNone*                                 Texture;                                                     // 0x4d0(0x08)
	char                                          UnknownData4DC[0x4];                                         // 0x4dc(0x04)
};

// Class Engine.SphereComponent
// Size: 0x4e0 (Inherited: 0x4d0)
struct USphereComponent : UShapeComponent 
{
	float                                         SphereRadius;                                                // 0x4d0(0x04)
	char                                          UnknownData4D4[0xc];                                         // 0x4d4(0x0c)

	void SetSphereRadius(float InSphereRadius, char bUpdateOverlaps); // sub_0x3df4520
	float GetUnscaledSphereRadius(); // sub_0x3c97750
	float GetShapeScale(); // sub_0x3df2a00
	float GetScaledSphereRadius(); // sub_0x3df29b0
};

// Class Engine.DrawSphereComponent
// Size: 0x4e0 (Inherited: 0x4e0)
struct UDrawSphereComponent : USphereComponent 
{
};

// Class Engine.EdGraph
// Size: 0x60 (Inherited: 0x28)
struct UEdGraph : UObject 
{
	struct FNone*                                 Schema;                                                      // 0x28(0x08)
	struct TArray<None>                           Nodes;                                                       // 0x30(0x10)
	char                                          bEditable : 0;                                               // 0x40(0x01)
	char                                          bAllowDeletion : 0;                                          // 0x40(0x01)
	char                                          bAllowRenaming : 0;                                          // 0x40(0x01)
	char                                          UnknownData40[0x20];                                         // 0x40(0x20)
};

// Class Engine.GraphNodeContextMenuContext
// Size: 0x50 (Inherited: 0x28)
struct UGraphNodeContextMenuContext : UObject 
{
	struct FNone*                                 Blueprint;                                                   // 0x28(0x08)
	struct FNone*                                 Graph;                                                       // 0x30(0x08)
	struct FNone*                                 Node;                                                        // 0x38(0x08)
	char                                          UnknownData40[0x8];                                          // 0x40(0x08)
	char                                          bIsDebugging : 0;                                            // 0x48(0x01)
	char                                          UnknownData48[0x8];                                          // 0x48(0x08)
};

// Class Engine.EdGraphNode
// Size: 0x98 (Inherited: 0x28)
struct UEdGraphNode : UObject 
{
	char                                          UnknownData28[0x10];                                         // 0x28(0x10)
	struct TArray<None>                           DeprecatedPins;                                              // 0x38(0x10)
	uint32_t                                      NodePosX;                                                    // 0x48(0x04)
	uint32_t                                      NodePosY;                                                    // 0x4c(0x04)
	uint32_t                                      NodeWidth;                                                   // 0x50(0x04)
	uint32_t                                      NodeHeight;                                                  // 0x54(0x04)
	char                                          AdvancedPinDisplay;                                          // 0x58(0x01)
	enum class None                               EnabledState;                                                // 0x59(0x01)
	char                                          UnknownData5A[0x1];                                          // 0x5a(0x01)
	char                                          bDisplayAsDisabled : 0;                                      // 0x5b(0x01)
	char                                          bUserSetEnabledState : 0;                                    // 0x5b(0x01)
	char                                          bIsNodeEnabled : 0;                                          // 0x5b(0x01)
	char                                          bHasCompilerMessage : 0;                                     // 0x5b(0x01)
	char                                          UnknownData5B[0x5];                                          // 0x5b(0x05)
	struct FString                                NodeComment;                                                 // 0x60(0x10)
	uint32_t                                      ErrorType;                                                   // 0x70(0x04)
	char                                          UnknownData74[0x4];                                          // 0x74(0x04)
	struct FString                                ErrorMsg;                                                    // 0x78(0x10)
	struct FNone                                  NodeGuid;                                                    // 0x88(0x10)
};

// Class Engine.EdGraphNode_Documentation
// Size: 0xb8 (Inherited: 0x98)
struct UEdGraphNode_Documentation : UEdGraphNode 
{
	struct FString                                Link;                                                        // 0x98(0x10)
	struct FString                                Excerpt;                                                     // 0xa8(0x10)
};

// Class Engine.EdGraphPin_Deprecated
// Size: 0x118 (Inherited: 0x28)
struct UEdGraphPin_Deprecated : UObject 
{
	struct FString                                PinName;                                                     // 0x28(0x10)
	struct FString                                PinToolTip;                                                  // 0x38(0x10)
	char                                          Direction;                                                   // 0x48(0x01)
	char                                          UnknownData49[0x7];                                          // 0x49(0x07)
	struct FNone                                  PinType;                                                     // 0x50(0x58)
	struct FString                                DefaultValue;                                                // 0xa8(0x10)
	struct FString                                AutogeneratedDefaultValue;                                   // 0xb8(0x10)
	struct FNone*                                 DefaultObject;                                               // 0xc8(0x08)
	struct FText                                  DefaultTextValue;                                            // 0xd0(0x18)
	struct TArray<None>                           LinkedTo;                                                    // 0xe8(0x10)
	struct TArray<None>                           SubPins;                                                     // 0xf8(0x10)
	struct FNone*                                 ParentPin;                                                   // 0x108(0x08)
	struct FNone*                                 ReferencePassThroughConnection;                              // 0x110(0x08)
};

// Class Engine.EdGraphSchema
// Size: 0x28 (Inherited: 0x28)
struct UEdGraphSchema : UObject 
{
};

// Class Engine.Emitter
// Size: 0x360 (Inherited: 0x310)
struct AEmitter : AActor 
{
	struct FNone*                                 ParticleSystemComponent;                                     // 0x310(0x08)
	char                                          bDestroyOnSystemFinish : 0;                                  // 0x318(0x01)
	char                                          bPostUpdateTickGroup : 0;                                    // 0x318(0x01)
	char                                          bCurrentlyActive : 0;                                        // 0x318(0x01)
	char                                          UnknownData318[0x8];                                         // 0x318(0x08)
	struct FMulticastInlineDelegate               OnParticleSpawn;                                             // 0x320(0x10)
	struct FMulticastInlineDelegate               OnParticleBurst;                                             // 0x330(0x10)
	struct FMulticastInlineDelegate               OnParticleDeath;                                             // 0x340(0x10)
	struct FMulticastInlineDelegate               OnParticleCollide;                                           // 0x350(0x10)

	void ToggleActive(); // sub_0x3cb60d0
	void SetVectorParameter(struct FName ParameterName, struct FNone Param); // sub_0x3cb6000
	void SetTemplate(struct FNone* NewTemplate); // sub_0x1235550
	void SetMaterialParameter(struct FName ParameterName, struct FNone* Param); // sub_0x3cb5f40
	void SetFloatParameter(struct FName ParameterName, float Param); // sub_0x3cb5e70
	void SetColorParameter(struct FName ParameterName, struct FNone Param); // sub_0x3cb5da0
	void SetActorParameter(struct FName ParameterName, struct FNone* Param); // sub_0x3cb5ce0
	void OnRep_bCurrentlyActive(); // sub_0x1235530
	void OnParticleSystemFinished(struct FNone* FinishedComponent); // sub_0x3cb5c50
	char IsActive(); // sub_0x3cb5c20
	void Deactivate(); // sub_0x3cb5c00
	void Activate(); // sub_0x3cb5be0
};

// Class Engine.EmitterCameraLensEffectBase
// Size: 0x3d0 (Inherited: 0x360)
struct AEmitterCameraLensEffectBase : AEmitter 
{
	struct FNone*                                 PS_CameraEffect;                                             // 0x360(0x08)
	struct FNone*                                 PS_CameraEffectNonExtremeContent;                            // 0x368(0x08)
	struct FNone*                                 BaseCamera;                                                  // 0x370(0x08)
	char                                          UnknownData378[0x8];                                         // 0x378(0x08)
	struct FNone                                  RelativeTransform;                                           // 0x380(0x30)
	float                                         BaseFOV;                                                     // 0x3b0(0x04)
	char                                          bAllowMultipleInstances : 0;                                 // 0x3b4(0x01)
	char                                          bResetWhenRetriggered : 0;                                   // 0x3b4(0x01)
	char                                          UnknownData3B4[0x4];                                         // 0x3b4(0x04)
	struct TArray<None>                           EmittersToTreatAsSame;                                       // 0x3b8(0x10)
	float                                         DistFromCamera;                                              // 0x3c8(0x04)
	char                                          UnknownData3CC[0x4];                                         // 0x3cc(0x04)
};

// Class Engine.ViewModeUtils
// Size: 0x28 (Inherited: 0x28)
struct UViewModeUtils : UObject 
{
};

// Class Engine.EngineBaseTypes
// Size: 0x28 (Inherited: 0x28)
struct UEngineBaseTypes : UObject 
{
};

// Class Engine.EngineHandlerComponentFactory
// Size: 0x28 (Inherited: 0x28)
struct UEngineHandlerComponentFactory : UHandlerComponentFactory 
{
};

// Class Engine.LocalMessage
// Size: 0x28 (Inherited: 0x28)
struct ULocalMessage : UObject 
{
};

// Class Engine.EngineMessage
// Size: 0xa8 (Inherited: 0x28)
struct UEngineMessage : ULocalMessage 
{
	struct FString                                FailedPlaceMessage;                                          // 0x28(0x10)
	struct FString                                MaxedOutMessage;                                             // 0x38(0x10)
	struct FString                                EnteredMessage;                                              // 0x48(0x10)
	struct FString                                LeftMessage;                                                 // 0x58(0x10)
	struct FString                                GlobalNameChange;                                            // 0x68(0x10)
	struct FString                                SpecEnteredMessage;                                          // 0x78(0x10)
	struct FString                                NewPlayerMessage;                                            // 0x88(0x10)
	struct FString                                NewSpecMessage;                                              // 0x98(0x10)
};

// Class Engine.EngineTypes
// Size: 0x28 (Inherited: 0x28)
struct UEngineTypes : UObject 
{
};

// Class Engine.ExponentialHeightFog
// Size: 0x320 (Inherited: 0x310)
struct AExponentialHeightFog : AInfo 
{
	struct FNone*                                 Component;                                                   // 0x310(0x08)
	char                                          bEnabled : 0;                                                // 0x318(0x01)
	char                                          UnknownData318[0x8];                                         // 0x318(0x08)

	void OnRep_bEnabled(); // sub_0x1e42900
};

// Class Engine.ExponentialHeightFogComponent
// Size: 0x2e0 (Inherited: 0x240)
struct UExponentialHeightFogComponent : USceneComponent 
{
	float                                         FogDensity;                                                  // 0x238(0x04)
	float                                         FogHeightFalloff;                                            // 0x23c(0x04)
	struct FNone                                  SecondFogData;                                               // 0x240(0x0c)
	struct FNone                                  FogInscatteringColor;                                        // 0x24c(0x10)
	struct FNone*                                 InscatteringColorCubemap;                                    // 0x260(0x08)
	float                                         InscatteringColorCubemapAngle;                               // 0x268(0x04)
	struct FNone                                  InscatteringTextureTint;                                     // 0x26c(0x10)
	float                                         FullyDirectionalInscatteringColorDistance;                   // 0x27c(0x04)
	float                                         NonDirectionalInscatteringColorDistance;                     // 0x280(0x04)
	float                                         DirectionalInscatteringExponent;                             // 0x284(0x04)
	float                                         DirectionalInscatteringStartDistance;                        // 0x288(0x04)
	struct FNone                                  DirectionalInscatteringColor;                                // 0x28c(0x10)
	float                                         FogMaxOpacity;                                               // 0x29c(0x04)
	float                                         StartDistance;                                               // 0x2a0(0x04)
	float                                         FogCutoffDistance;                                           // 0x2a4(0x04)
	char                                          bEnableVolumetricFog : 0;                                    // 0x2a8(0x01)
	float                                         VolumetricFogScatteringDistribution;                         // 0x2ac(0x04)
	struct FNone                                  VolumetricFogAlbedo;                                         // 0x2b0(0x04)
	struct FNone                                  VolumetricFogEmissive;                                       // 0x2b4(0x10)
	float                                         VolumetricFogExtinctionScale;                                // 0x2c4(0x04)
	float                                         VolumetricFogDistance;                                       // 0x2c8(0x04)
	float                                         VolumetricFogStaticLightingScatteringIntensity;              // 0x2cc(0x04)
	char                                          bOverrideLightColorsWithFogInscatteringColors : 0;           // 0x2d0(0x01)
	char                                          UnknownData2D0[0x10];                                        // 0x2d0(0x10)

	void SetVolumetricFogScatteringDistribution(float NewValue); // sub_0x3cc81c0
	void SetVolumetricFogExtinctionScale(float NewValue); // sub_0x3cc8140
	void SetVolumetricFogEmissive(struct FNone NewValue); // sub_0x3cc80c0
	void SetVolumetricFogDistance(float NewValue); // sub_0x3cc8040
	void SetVolumetricFogAlbedo(struct FNone NewValue); // sub_0x3cc7fd0
	void SetVolumetricFog(char bNewValue); // sub_0x3cc7f40
	void SetStartDistance(float Value); // sub_0x3cc7ec0
	void SetNonDirectionalInscatteringColorDistance(float Value); // sub_0x3cc7e40
	void SetInscatteringTextureTint(struct FNone Value); // sub_0x3cc7d40
	void SetInscatteringColorCubemapAngle(float Value); // sub_0x3cc7cc0
	void SetInscatteringColorCubemap(struct FNone* Value); // sub_0x3cc7c40
	void SetFullyDirectionalInscatteringColorDistance(float Value); // sub_0x3cc7bc0
	void SetFogMaxOpacity(float Value); // sub_0x3cc7ac0
	void SetFogInscatteringColor(struct FNone Value); // sub_0x3cc7a40
	void SetFogHeightFalloff(float Value); // sub_0x3c71ac0
	void SetFogDensity(float Value); // sub_0x3c71cd0
	void SetFogCutoffDistance(float Value); // sub_0x3cc79c0
	void SetDirectionalInscatteringStartDistance(float Value); // sub_0x3cc7940
	void SetDirectionalInscatteringExponent(float Value); // sub_0x3cc78c0
	void SetDirectionalInscatteringColor(struct FNone Value); // sub_0x3cc7840
};

// Class Engine.FloatingPawnMovement
// Size: 0x150 (Inherited: 0x138)
struct UFloatingPawnMovement : UPawnMovementComponent 
{
	float                                         MaxSpeed;                                                    // 0x138(0x04)
	float                                         Acceleration;                                                // 0x13c(0x04)
	float                                         Deceleration;                                                // 0x140(0x04)
	float                                         TurningBoost;                                                // 0x144(0x04)
	char                                          bPositionCorrected : 0;                                      // 0x148(0x01)
	char                                          UnknownData148[0x8];                                         // 0x148(0x08)
};

// Class Engine.Font
// Size: 0x1d0 (Inherited: 0x28)
struct UFont : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	enum class None                               FontCacheType;                                               // 0x30(0x01)
	char                                          UnknownData31[0x7];                                          // 0x31(0x07)
	struct TArray<None>                           Characters;                                                  // 0x38(0x10)
	struct TArray<None>                           Textures;                                                    // 0x48(0x10)
	uint32_t                                      IsRemapped;                                                  // 0x58(0x04)
	float                                         EmScale;                                                     // 0x5c(0x04)
	float                                         Ascent;                                                      // 0x60(0x04)
	float                                         Descent;                                                     // 0x64(0x04)
	float                                         Leading;                                                     // 0x68(0x04)
	uint32_t                                      Kerning;                                                     // 0x6c(0x04)
	struct FNone                                  ImportOptions;                                               // 0x70(0xb0)
	uint32_t                                      NumCharacters;                                               // 0x120(0x04)
	char                                          UnknownData124[0x4];                                         // 0x124(0x04)
	struct TArray<None>                           MaxCharHeight;                                               // 0x128(0x10)
	float                                         ScalingFactor;                                               // 0x138(0x04)
	uint32_t                                      LegacyFontSize;                                              // 0x13c(0x04)
	struct FName                                  LegacyFontName;                                              // 0x140(0x08)
	struct FNone                                  CompositeFont;                                               // 0x148(0x38)
	char                                          UnknownData180[0x50];                                        // 0x180(0x50)
};

// Class Engine.FontFace
// Size: 0x58 (Inherited: 0x28)
struct UFontFace : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct FString                                SourceFilename;                                              // 0x30(0x10)
	enum class None                               Hinting;                                                     // 0x40(0x01)
	enum class None                               LoadingPolicy;                                               // 0x41(0x01)
	enum class None                               LayoutMethod;                                                // 0x42(0x01)
	char                                          UnknownData43[0x15];                                         // 0x43(0x15)
};

// Class Engine.FontImportOptions
// Size: 0xd8 (Inherited: 0x28)
struct UFontImportOptions : UObject 
{
	struct FNone                                  Data;                                                        // 0x28(0xb0)
};

// Class Engine.ForceFeedbackAttenuation
// Size: 0xd8 (Inherited: 0x28)
struct UForceFeedbackAttenuation : UObject 
{
	struct FNone                                  Attenuation;                                                 // 0x28(0xb0)
};

// Class Engine.ForceFeedbackComponent
// Size: 0x320 (Inherited: 0x240)
struct UForceFeedbackComponent : USceneComponent 
{
	struct FNone*                                 ForceFeedbackEffect;                                         // 0x238(0x08)
	char                                          bAutoDestroy : 0;                                            // 0x240(0x01)
	char                                          bStopWhenOwnerDestroyed : 0;                                 // 0x240(0x01)
	char                                          bLooping : 0;                                                // 0x240(0x01)
	char                                          bIgnoreTimeDilation : 0;                                     // 0x240(0x01)
	char                                          bOverrideAttenuation : 0;                                    // 0x240(0x01)
	float                                         IntensityMultiplier;                                         // 0x244(0x04)
	struct FNone*                                 AttenuationSettings;                                         // 0x248(0x08)
	struct FNone                                  AttenuationOverrides;                                        // 0x250(0xb0)
	struct FMulticastInlineDelegate               OnForceFeedbackFinished;                                     // 0x300(0x10)
	char                                          UnknownData314[0xc];                                         // 0x314(0x0c)

	void Stop(); // sub_0x3cc8240
	void SetIntensityMultiplier(float NewIntensityMultiplier); // sub_0x3cc7dc0
	void SetForceFeedbackEffect(struct FNone* NewForceFeedbackEffect); // sub_0x3cc7b40
	void Play(float StartTime); // sub_0x3c8dd50
	char BP_GetAttenuationSettingsToApply(struct FNone& OutAttenuationSettings); // sub_0x3cc7690
	void AdjustAttenuation(struct FNone& InAttenuationSettings); // sub_0x3cc7590
};

// Class Engine.ForceFeedbackEffect
// Size: 0x40 (Inherited: 0x28)
struct UForceFeedbackEffect : UObject 
{
	struct TArray<None>                           ChannelDetails;                                              // 0x28(0x10)
	float                                         Duration;                                                    // 0x38(0x04)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
};

// Class Engine.GameInstanceSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UGameInstanceSubsystem : USubsystem 
{
};

// Class Engine.GameNetworkManager
// Size: 0x3c0 (Inherited: 0x310)
struct AGameNetworkManager : AInfo 
{
	float                                         BadPacketLossThreshold;                                      // 0x310(0x04)
	float                                         SeverePacketLossThreshold;                                   // 0x314(0x04)
	uint32_t                                      BadPingThreshold;                                            // 0x318(0x04)
	uint32_t                                      SeverePingThreshold;                                         // 0x31c(0x04)
	uint32_t                                      AdjustedNetSpeed;                                            // 0x320(0x04)
	float                                         LastNetSpeedUpdateTime;                                      // 0x324(0x04)
	uint32_t                                      TotalNetBandwidth;                                           // 0x328(0x04)
	uint32_t                                      MinDynamicBandwidth;                                         // 0x32c(0x04)
	uint32_t                                      MaxDynamicBandwidth;                                         // 0x330(0x04)
	char                                          bIsStandbyCheckingEnabled : 0;                               // 0x334(0x01)
	char                                          bHasStandbyCheatTriggered : 0;                               // 0x334(0x01)
	char                                          UnknownData334[0x4];                                         // 0x334(0x04)
	float                                         StandbyRxCheatTime;                                          // 0x338(0x04)
	float                                         StandbyTxCheatTime;                                          // 0x33c(0x04)
	float                                         PercentMissingForRxStandby;                                  // 0x340(0x04)
	float                                         PercentMissingForTxStandby;                                  // 0x344(0x04)
	float                                         PercentForBadPing;                                           // 0x348(0x04)
	float                                         JoinInProgressStandbyWaitTime;                               // 0x34c(0x04)
	float                                         MoveRepSize;                                                 // 0x350(0x04)
	float                                         MAXPOSITIONERRORSQUARED;                                     // 0x354(0x04)
	float                                         MAXNEARZEROVELOCITYSQUARED;                                  // 0x358(0x04)
	float                                         CLIENTADJUSTUPDATECOST;                                      // 0x35c(0x04)
	float                                         MAXCLIENTUPDATEINTERVAL;                                     // 0x360(0x04)
	float                                         MaxClientForcedUpdateDuration;                               // 0x364(0x04)
	float                                         ServerForcedUpdateHitchThreshold;                            // 0x368(0x04)
	float                                         ServerForcedUpdateHitchCooldown;                             // 0x36c(0x04)
	float                                         MaxMoveDeltaTime;                                            // 0x370(0x04)
	float                                         MaxClientSmoothingDeltaTime;                                 // 0x374(0x04)
	float                                         ClientNetSendMoveDeltaTime;                                  // 0x378(0x04)
	float                                         ClientNetSendMoveDeltaTimeThrottled;                         // 0x37c(0x04)
	float                                         ClientNetSendMoveDeltaTimeStationary;                        // 0x380(0x04)
	uint32_t                                      ClientNetSendMoveThrottleAtNetSpeed;                         // 0x384(0x04)
	uint32_t                                      ClientNetSendMoveThrottleOverPlayerCount;                    // 0x388(0x04)
	char                                          ClientAuthorativePosition : 0;                               // 0x38c(0x01)
	char                                          UnknownData38C[0x4];                                         // 0x38c(0x04)
	float                                         ClientErrorUpdateRateLimit;                                  // 0x390(0x04)
	float                                         ClientNetCamUpdateDeltaTime;                                 // 0x394(0x04)
	float                                         ClientNetCamUpdatePositionLimit;                             // 0x398(0x04)
	char                                          bMovementTimeDiscrepancyDetection : 0;                       // 0x39c(0x01)
	char                                          UnknownData39C[0x1];                                         // 0x39c(0x01)
	char                                          bMovementTimeDiscrepancyResolution : 0;                      // 0x39d(0x01)
	char                                          UnknownData39D[0x3];                                         // 0x39d(0x03)
	float                                         MovementTimeDiscrepancyMaxTimeMargin;                        // 0x3a0(0x04)
	float                                         MovementTimeDiscrepancyMinTimeMargin;                        // 0x3a4(0x04)
	float                                         MovementTimeDiscrepancyResolutionRate;                       // 0x3a8(0x04)
	float                                         MovementTimeDiscrepancyDriftAllowance;                       // 0x3ac(0x04)
	char                                          bMovementTimeDiscrepancyForceCorrectionsDuringResolution : 0; // 0x3b0(0x01)
	char                                          UnknownData3B0[0x1];                                         // 0x3b0(0x01)
	char                                          bUseDistanceBasedRelevancy : 0;                              // 0x3b1(0x01)
	char                                          UnknownData3B1[0xf];                                         // 0x3b1(0x0f)
};

// Class Engine.GameplayStatics
// Size: 0x28 (Inherited: 0x28)
struct UGameplayStatics : UBlueprintFunctionLibrary 
{

	void UnloadStreamLevel(struct FNone* WorldContextObject, struct FName LevelName, struct FNone LatentInfo, char bShouldBlockOnUnload); // sub_0x3cd7910
	char SuggestProjectileVelocity_CustomArc(struct FNone* WorldContextObject, struct FNone& OutLaunchVelocity, struct FNone StartPos, struct FNone EndPos, float OverrideGravityZ, float ArcParam); // sub_0x3cd7730
	struct FNone* SpawnSoundAttached(struct FNone* Sound, struct FNone* AttachToComponent, struct FName AttachPointName, struct FNone Location, struct FNone Rotation, char LocationType, char bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct FNone* AttenuationSettings, struct FNone* ConcurrencySettings, char bAutoDestroy); // sub_0x3cd73a0
	struct FNone* SpawnSoundAtLocation(struct FNone* WorldContextObject, struct FNone* Sound, struct FNone Location, struct FNone Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct FNone* AttenuationSettings, struct FNone* ConcurrencySettings, char bAutoDestroy); // sub_0x3cd70d0
	struct FNone* SpawnSound2D(struct FNone* WorldContextObject, struct FNone* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct FNone* ConcurrencySettings, char bPersistAcrossLevelTransition, char bAutoDestroy); // sub_0x3cd6ea0
	struct FNone* SpawnObject(struct FNone* ObjectClass, struct FNone* Outer); // sub_0x3cd6de0
	struct FNone* SpawnForceFeedbackAttached(struct FNone* ForceFeedbackEffect, struct FNone* AttachToComponent, struct FName AttachPointName, struct FNone Location, struct FNone Rotation, char LocationType, char bStopWhenAttachedToDestroyed, char bLooping, float IntensityMultiplier, float StartTime, struct FNone* AttenuationSettings, char bAutoDestroy); // sub_0x3cd6a80
	struct FNone* SpawnForceFeedbackAtLocation(struct FNone* WorldContextObject, struct FNone* ForceFeedbackEffect, struct FNone Location, struct FNone Rotation, char bLooping, float IntensityMultiplier, float StartTime, struct FNone* AttenuationSettings, char bAutoDestroy); // sub_0x3cd67f0
	struct FNone* SpawnEmitterAttached(struct FNone* EmitterTemplate, struct FNone* AttachToComponent, struct FName AttachPointName, struct FNone Location, struct FNone Rotation, struct FNone Scale, char LocationType, char bAutoDestroy, enum class None PoolingMethod, char bAutoActivate); // sub_0x3cd6510
	struct FNone* SpawnEmitterAtLocation(struct FNone* WorldContextObject, struct FNone* EmitterTemplate, struct FNone Location, struct FNone Rotation, struct FNone Scale, char bAutoDestroy, enum class None PoolingMethod, char bAutoActivateSystem); // sub_0x3cd62b0
	struct FNone* SpawnDialogueAttached(struct FNone* Dialogue, struct FNone& Context, struct FNone* AttachToComponent, struct FName AttachPointName, struct FNone Location, struct FNone Rotation, char LocationType, char bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct FNone* AttenuationSettings, char bAutoDestroy); // sub_0x3cd5ed0
	struct FNone* SpawnDialogueAtLocation(struct FNone* WorldContextObject, struct FNone* Dialogue, struct FNone& Context, struct FNone Location, struct FNone Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct FNone* AttenuationSettings, char bAutoDestroy); // sub_0x3cd5bc0
	struct FNone* SpawnDialogue2D(struct FNone* WorldContextObject, struct FNone* Dialogue, struct FNone& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, char bAutoDestroy); // sub_0x3cd5990
	struct FNone* SpawnDecalAttached(struct FNone* DecalMaterial, struct FNone DecalSize, struct FNone* AttachToComponent, struct FName AttachPointName, struct FNone Location, struct FNone Rotation, char LocationType, float LifeSpan); // sub_0x3cd5730
	struct FNone* SpawnDecalAtLocation(struct FNone* WorldContextObject, struct FNone* DecalMaterial, struct FNone DecalSize, struct FNone Location, struct FNone Rotation, float LifeSpan); // sub_0x3cd5550
	void SetWorldOriginLocation(struct FNone* WorldContextObject, struct FNone NewLocation); // sub_0x3cd5490
	void SetViewportMouseCaptureMode(struct FNone* WorldContextObject, enum class None MouseCaptureMode); // sub_0x3cd53e0
	void SetSubtitlesEnabled(char bEnabled); // sub_0x3cd5360
	void SetSoundMixClassOverride(struct FNone* WorldContextObject, struct FNone* InSoundMixModifier, struct FNone* InSoundClass, float Volume, float Pitch, float FadeInTime, char bApplyToChildren); // sub_0x3cd5170
	void SetSoundClassDistanceScale(struct FNone* WorldContextObject, struct FNone* SoundClass, float DistanceAttenuationScale, float TimeSec); // sub_0x3cd5040
	void SetPlayerControllerID(struct FNone* Player, uint32_t ControllerId); // sub_0x3cd4f90
	void SetMaxAudioChannelsScaled(struct FNone* WorldContextObject, float MaxChannelCountScale); // sub_0x3cd4ed0
	void SetGlobalTimeDilation(struct FNone* WorldContextObject, float TimeDilation); // sub_0x3cd4e10
	void SetGlobalPitchModulation(struct FNone* WorldContextObject, float PitchModulation, float TimeSec); // sub_0x3cd4d20
	void SetGlobalListenerFocusParameters(struct FNone* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale); // sub_0x3cd4aa0
	char SetGamePaused(struct FNone* WorldContextObject, char bPaused); // sub_0x3cd49e0
	void SetForceDisableSplitscreen(struct FNone* WorldContextObject, char bDisable); // sub_0x3cd4920
	void SetEnableWorldRendering(struct FNone* WorldContextObject, char bEnable); // sub_0x3cd4860
	void SetBaseSoundMix(struct FNone* WorldContextObject, struct FNone* InSoundMix); // sub_0x3cd47b0
	char SaveGameToSlot(struct FNone* SaveGameObject, struct FString SlotName, uint32_t UserIndex); // sub_0x3cd4690
	void RemovePlayer(struct FNone* Player, char bDestroyPawn); // sub_0x3cd45d0
	struct FNone RebaseZeroOriginOntoLocal(struct FNone* WorldContextObject, struct FNone WorldLocation); // sub_0x3cd44f0
	struct FNone RebaseLocalOriginOntoZero(struct FNone* WorldContextObject, struct FNone WorldLocation); // sub_0x3cd4410
	void PushSoundMixModifier(struct FNone* WorldContextObject, struct FNone* InSoundMixModifier); // sub_0x3cd4360
	char ProjectWorldToScreen(struct FNone* Player, struct FNone& WorldPosition, struct FNone& ScreenPosition, char bPlayerViewportRelative); // sub_0x3cd4210
	void PrimeSound(struct FNone* InSound); // sub_0x3cd41a0
	void PopSoundMixModifier(struct FNone* WorldContextObject, struct FNone* InSoundMixModifier); // sub_0x3cd40f0
	void PlayWorldCameraShake(struct FNone* WorldContextObject, struct FNone* Shake, struct FNone Epicenter, float InnerRadius, float OuterRadius, float Falloff, char bOrientShakeTowardsEpicenter); // sub_0x3cd3ee0
	void PlaySoundAtLocation(struct FNone* WorldContextObject, struct FNone* Sound, struct FNone Location, struct FNone Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct FNone* AttenuationSettings, struct FNone* ConcurrencySettings, struct FNone* OwningActor); // sub_0x3cd3c10
	void PlaySound2D(struct FNone* WorldContextObject, struct FNone* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct FNone* ConcurrencySettings, struct FNone* OwningActor); // sub_0x3cd3a20
	void PlayDialogueAtLocation(struct FNone* WorldContextObject, struct FNone* Dialogue, struct FNone& Context, struct FNone Location, struct FNone Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct FNone* AttenuationSettings); // sub_0x3cd3750
	void PlayDialogue2D(struct FNone* WorldContextObject, struct FNone* Dialogue, struct FNone& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime); // sub_0x3cd3560
	struct FString ParseOption(struct FString options, struct FString Key); // sub_0x3cd33e0
	void OpenLevel(struct FNone* WorldContextObject, struct FName LevelName, char bAbsolute, struct FString options); // sub_0x3cd3240
	struct FNone MakeHitResult(char bBlockingHit, char bInitialOverlap, float Time, float Distance, struct FNone Location, struct FNone ImpactPoint, struct FNone Normal, struct FNone ImpactNormal, struct FNone* PhysMat, struct FNone* HitActor, struct FNone* HitComponent, struct FName HitBoneName, uint32_t HitItem, uint32_t FaceIndex, struct FNone TraceStart, struct FNone TraceEnd); // sub_0x3cd2d30
	void LoadStreamLevel(struct FNone* WorldContextObject, struct FName LevelName, char bMakeVisibleAfterLoad, char bShouldBlockOnLoad, struct FNone LatentInfo); // sub_0x3cd2b80
	struct FNone* LoadGameFromSlot(struct FString SlotName, uint32_t UserIndex); // sub_0x3cd2aa0
	char IsSplitscreenForceDisabled(struct FNone* WorldContextObject); // sub_0x3cd2a20
	char IsGamePaused(struct FNone* WorldContextObject); // sub_0x3cd29a0
	char HasOption(struct FString options, struct FString InKey); // sub_0x3cd2860
	char HasLaunchOption(struct FString OptionToCheck); // sub_0x3cd27c0
	uint32_t GrassOverlappingSphereCount(struct FNone* WorldContextObject, struct FNone* StaticMesh, struct FNone CenterPosition, float Radius); // sub_0x3cd2670
	struct FNone GetWorldOriginLocation(struct FNone* WorldContextObject); // sub_0x3cd25d0
	float GetWorldDeltaSeconds(struct FNone* WorldContextObject); // sub_0x3cd2540
	void GetViewProjectionMatrix(struct FNone DesiredView, struct FNone& ViewMatrix, struct FNone& ProjectionMatrix, struct FNone& ViewProjectionMatrix); // sub_0x3cd2170
	enum class None GetViewportMouseCaptureMode(struct FNone* WorldContextObject); // sub_0x3cd24c0
	float GetUnpausedTimeSeconds(struct FNone* WorldContextObject); // sub_0x3cd20e0
	float GetTimeSeconds(struct FNone* WorldContextObject); // sub_0x3cd2050
	char GetSurfaceType(struct FNone& Hit); // sub_0x3cd1f70
	struct FNone* GetStreamingLevel(struct FNone* WorldContextObject, struct FName PackageName); // sub_0x3cd1eb0
	float GetRealTimeSeconds(struct FNone* WorldContextObject); // sub_0x3cd1e20
	struct FNone* GetPlayerPawn(struct FNone* WorldContextObject, uint32_t PlayerIndex); // sub_0x3cd1d60
	uint32_t GetPlayerControllerID(struct FNone* Player); // sub_0x3cd1ce0
	struct FNone* GetPlayerControllerFromID(struct FNone* WorldContextObject, uint32_t ControllerId); // sub_0x3cd1c20
	struct FNone* GetPlayerController(struct FNone* WorldContextObject, uint32_t PlayerIndex); // sub_0x3cd1b60
	struct FNone* GetPlayerCharacter(struct FNone* WorldContextObject, uint32_t PlayerIndex); // sub_0x3cd1aa0
	struct FNone* GetPlayerCameraManager(struct FNone* WorldContextObject, uint32_t PlayerIndex); // sub_0x3cd19e0
	struct FString GetPlatformName(); // sub_0x3cd1960
	struct FNone* GetObjectClass(struct FNone* Object); // sub_0x3cd18e0
	uint32_t GetMaxAudioChannelCount(struct FNone* WorldContextObject); // sub_0x3cd1860
	void GetKeyValue(struct FString Pair, struct FString& Key, struct FString& Value); // sub_0x3cd16f0
	uint32_t GetIntOption(struct FString options, struct FString Key, uint32_t DefaultValue); // sub_0x3cd15b0
	float GetGlobalTimeDilation(struct FNone* WorldContextObject); // sub_0x3cd1520
	struct FNone* GetGameState(struct FNone* WorldContextObject); // sub_0x3cd14a0
	struct FNone* GetGameMode(struct FNone* WorldContextObject); // sub_0x3cd1420
	struct FNone* GetGameInstance(struct FNone* WorldContextObject); // sub_0x3cd13a0
	float GetFloatOption(struct FString options, struct FString Key, float DefaultValue); // sub_0x3cd1260
	char GetEnableWorldRendering(struct FNone* WorldContextObject); // sub_0x3cd11e0
	struct FNone* GetCurrentReverbEffect(struct FNone* WorldContextObject); // sub_0x3cd1160
	struct FString GetCurrentLevelName(struct FNone* WorldContextObject, char bRemovePrefixString); // sub_0x3cd1050
	char GetClosestListenerLocation(struct FNone* WorldContextObject, struct FNone& Location, float MaximumRange, char bAllowAttenuationOverride, struct FNone& ListenerPosition); // sub_0x3cd0e90
	float GetAudioTimeSeconds(struct FNone* WorldContextObject); // sub_0x3cd0e00
	void GetAllActorsWithTag(struct FNone* WorldContextObject, struct FName Tag, struct TArray<None>& OutActors); // sub_0x3cd0ce0
	void GetAllActorsWithInterface(struct FNone* WorldContextObject, struct FNone* Interface, struct TArray<None>& OutActors); // sub_0x3cd0bc0
	void GetAllActorsOfClassWithTag(struct FNone* WorldContextObject, struct FNone* ActorClass, struct FName Tag, struct TArray<None>& OutActors); // sub_0x3cd0a60
	void GetAllActorsOfClass(struct FNone* WorldContextObject, struct FNone* ActorClass, struct TArray<None>& OutActors); // sub_0x3cd0940
	struct FNone* GetActorOfClass(struct FNone* WorldContextObject, struct FNone* ActorClass); // sub_0x3cd0880
	void GetActorArrayBounds(struct TArray<None>& Actors, char bOnlyCollidingComponents, struct FNone& Center, struct FNone& BoxExtent); // sub_0x3cd06f0
	struct FNone GetActorArrayAverageLocation(struct TArray<None>& Actors); // sub_0x3cd0630
	void GetAccurateRealTime(struct FNone* WorldContextObject, uint32_t& Seconds, float& PartialSeconds); // sub_0x3cd0510
	void FlushLevelStreaming(struct FNone* WorldContextObject); // sub_0x3cd04a0
	struct FNone* FinishSpawningActor(struct FNone* Actor, struct FNone& SpawnTransform); // sub_0x3cd0380
	char FindCollisionUV(struct FNone& Hit, uint32_t UVChannel, struct FNone& UV); // sub_0x3cd0210
	void EnableLiveStreaming(char Enable); // sub_0x3cd0190
	char DoesSaveGameExist(struct FString SlotName, uint32_t UserIndex); // sub_0x3cd00b0
	char DeprojectScreenToWorld(struct FNone* Player, struct FNone& ScreenPosition, struct FNone& WorldPosition, struct FNone& WorldDirection); // sub_0x3ccff40
	char DeleteGameInSlot(struct FString SlotName, uint32_t UserIndex); // sub_0x3ccfe60
	void DeactivateReverbEffect(struct FNone* WorldContextObject, struct FName TagName); // sub_0x3ccfdb0
	struct FNone* CreateSound2D(struct FNone* WorldContextObject, struct FNone* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct FNone* ConcurrencySettings, char bPersistAcrossLevelTransition, char bAutoDestroy); // sub_0x3ccfb80
	struct FNone* CreateSaveGameObject(struct FNone* SaveGameClass); // sub_0x3ccfb00
	struct FNone* CreatePlayer(struct FNone* WorldContextObject, uint32_t ControllerId, char bSpawnPlayerController); // sub_0x3ccfa10
	void ClearSoundMixModifiers(struct FNone* WorldContextObject); // sub_0x3ccf9a0
	void ClearSoundMixClassOverride(struct FNone* WorldContextObject, struct FNone* InSoundMixModifier, struct FNone* InSoundClass, float FadeOutTime); // sub_0x3ccf860
	void CancelAsyncLoading(); // sub_0x3ccf840
	void BreakHitResult(struct FNone& Hit, char& bBlockingHit, char& bInitialOverlap, float& Time, float& Distance, struct FNone& Location, struct FNone& ImpactPoint, struct FNone& Normal, struct FNone& ImpactNormal, struct FNone*& PhysMat, struct FNone*& HitActor, struct FNone*& HitComponent, struct FName& HitBoneName, uint32_t& HitItem, uint32_t& FaceIndex, struct FNone& TraceStart, struct FNone& TraceEnd); // sub_0x3ccf210
	char BlueprintSuggestProjectileVelocity(struct FNone* WorldContextObject, struct FNone& TossVelocity, struct FNone StartLocation, struct FNone EndLocation, float LaunchSpeed, float OverrideGravityZ, char TraceOption, float CollisionRadius, char bFavorHighArc, char bDrawDebug); // sub_0x3cce210
	char Blueprint_PredictProjectilePath_ByTraceChannel(struct FNone* WorldContextObject, struct FNone& OutHit, struct TArray<None>& OutPathPositions, struct FNone& OutLastTraceDestination, struct FNone StartPos, struct FNone LaunchVelocity, char bTracePath, float ProjectileRadius, char TraceChannel, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // sub_0x3ccecc0
	char Blueprint_PredictProjectilePath_ByObjectType(struct FNone* WorldContextObject, struct FNone& OutHit, struct TArray<None>& OutPathPositions, struct FNone& OutLastTraceDestination, struct FNone StartPos, struct FNone LaunchVelocity, char bTracePath, float ProjectileRadius, struct TArray<None>& ObjectTypes, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // sub_0x3cce740
	char Blueprint_PredictProjectilePath_Advanced(struct FNone* WorldContextObject, struct FNone& PredictParams, struct FNone& PredictResult); // sub_0x3cce500
	struct FNone* BeginSpawningActorFromClass(struct FNone* WorldContextObject, struct FNone* ActorClass, struct FNone& SpawnTransform, char bNoCollisionFail, struct FNone* Owner); // sub_0x3cce010
	struct FNone* BeginSpawningActorFromBlueprint(struct FNone* WorldContextObject, struct FNone* Blueprint, struct FNone& SpawnTransform, char bNoCollisionFail); // sub_0x3ccde70
	struct FNone* BeginDeferredActorSpawnFromClass(struct FNone* WorldContextObject, struct FNone* ActorClass, struct FNone& SpawnTransform, enum class None CollisionHandlingOverride, struct FNone* Owner); // sub_0x3ccdc80
	char AreSubtitlesEnabled(); // sub_0x3ccdc50
	char AreAnyListenersWithinRange(struct FNone* WorldContextObject, struct FNone& Location, float MaximumRange); // sub_0x3ccdb40
	char ApplyRadialDamageWithFalloff(struct FNone* WorldContextObject, float BaseDamage, float MinimumDamage, struct FNone& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, struct FNone* DamageTypeClass, struct TArray<None>& IgnoreActors, struct FNone* DamageCauser, struct FNone* InstigatedByController, char DamagePreventionChannel); // sub_0x3ccd7c0
	char ApplyRadialDamage(struct FNone* WorldContextObject, float BaseDamage, struct FNone& Origin, float DamageRadius, struct FNone* DamageTypeClass, struct TArray<None>& IgnoreActors, struct FNone* DamageCauser, struct FNone* InstigatedByController, char bDoFullDamage, char DamagePreventionChannel); // sub_0x3ccd4d0
	float ApplyPointDamage(struct FNone* DamagedActor, float BaseDamage, struct FNone& HitFromDirection, struct FNone& HitInfo, struct FNone* EventInstigator, struct FNone* DamageCauser, struct FNone* DamageTypeClass); // sub_0x3ccd270
	float ApplyDamage(struct FNone* DamagedActor, float BaseDamage, struct FNone* EventInstigator, struct FNone* DamageCauser, struct FNone* DamageTypeClass); // sub_0x3ccd0f0
	void ActivateReverbEffect(struct FNone* WorldContextObject, struct FNone* ReverbEffect, struct FName TagName, float Priority, float Volume, float FadeTime); // sub_0x3cccf40
};

// Class Engine.SpotLight
// Size: 0x328 (Inherited: 0x320)
struct ASpotLight : ALight 
{
	struct FNone*                                 SpotLightComponent;                                          // 0x320(0x08)

	void SetOuterConeAngle(float NewOuterConeAngle); // sub_0x3df9270
	void SetInnerConeAngle(float NewInnerConeAngle); // sub_0x3df9170
};

// Class Engine.GeneratedMeshAreaLight
// Size: 0x328 (Inherited: 0x328)
struct AGeneratedMeshAreaLight : ASpotLight 
{
};

// Class Engine.HapticFeedbackEffect_Base
// Size: 0x28 (Inherited: 0x28)
struct UHapticFeedbackEffect_Base : UObject 
{
};

// Class Engine.HapticFeedbackEffect_Buffer
// Size: 0x68 (Inherited: 0x28)
struct UHapticFeedbackEffect_Buffer : UHapticFeedbackEffect_Base 
{
	struct TArray<None>                           Amplitudes;                                                  // 0x28(0x10)
	uint32_t                                      SampleRate;                                                  // 0x38(0x04)
	char                                          UnknownData3C[0x2c];                                         // 0x3c(0x2c)
};

// Class Engine.HapticFeedbackEffect_Curve
// Size: 0x138 (Inherited: 0x28)
struct UHapticFeedbackEffect_Curve : UHapticFeedbackEffect_Base 
{
	struct FNone                                  HapticDetails;                                               // 0x28(0x110)
};

// Class Engine.HapticFeedbackEffect_SoundWave
// Size: 0x60 (Inherited: 0x28)
struct UHapticFeedbackEffect_SoundWave : UHapticFeedbackEffect_Base 
{
	struct FNone*                                 SoundWave;                                                   // 0x28(0x08)
	char                                          UnknownData30[0x30];                                         // 0x30(0x30)
};

// Class Engine.HealthSnapshotBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UHealthSnapshotBlueprintLibrary : UBlueprintFunctionLibrary 
{

	void StopPerformanceSnapshots(); // sub_0x3ce0790
	void StartPerformanceSnapshots(); // sub_0x3ce0770
	void LogPerformanceSnapshot(struct FString SnapshotTitle, char bResetStats); // sub_0x3ce0250
};

// Class Engine.HLODProxy
// Size: 0x38 (Inherited: 0x28)
struct UHLODProxy : UObject 
{
	struct TArray<None>                           ProxyMeshes;                                                 // 0x28(0x10)
};

// Class Engine.ImportanceSamplingLibrary
// Size: 0x28 (Inherited: 0x28)
struct UImportanceSamplingLibrary : UBlueprintFunctionLibrary 
{

	float RandomSobolFloat(uint32_t Index, uint32_t Dimension, float Seed); // sub_0x3ce7050
	struct FNone RandomSobolCell3D(uint32_t Index, uint32_t NumCells, struct FNone cell, struct FNone Seed); // sub_0x3ce6ec0
	struct FNone RandomSobolCell2D(uint32_t Index, uint32_t NumCells, struct FNone cell, struct FNone Seed); // sub_0x3ce6d80
	float NextSobolFloat(uint32_t Index, uint32_t Dimension, float PreviousValue); // sub_0x3ce6c80
	struct FNone NextSobolCell3D(uint32_t Index, uint32_t NumCells, struct FNone PreviousValue); // sub_0x3ce6b60
	struct FNone NextSobolCell2D(uint32_t Index, uint32_t NumCells, struct FNone PreviousValue); // sub_0x3ce6a60
	struct FNone MakeImportanceTexture(struct FNone* Texture, char WeightingFunc); // sub_0x3ce6890
	void ImportanceSample(struct FNone& Texture, struct FNone& Rand, uint32_t Samples, float Intensity, struct FNone& SamplePosition, struct FNone& SampleColor, float& SampleIntensity, float& SampleSize); // sub_0x3ce64a0
	void BreakImportanceTexture(struct FNone& ImportanceTexture, struct FNone*& Texture, char& WeightingFunc); // sub_0x3ce5990
};

// Class Engine.ImportantToggleSettingInterface
// Size: 0x28 (Inherited: 0x28)
struct UImportantToggleSettingInterface : UInterface 
{
};

// Class Engine.InGameAdManager
// Size: 0x60 (Inherited: 0x38)
struct UInGameAdManager : UPlatformInterfaceBase 
{
	char                                          bShouldPauseWhileAdOpen : 0;                                 // 0x38(0x01)
	char                                          UnknownData38[0x8];                                          // 0x38(0x08)
	struct TArray<None>                           ClickedBannerDelegates;                                      // 0x40(0x10)
	struct TArray<None>                           ClosedAdDelegates;                                           // 0x50(0x10)
};

// Class Engine.InheritableComponentHandler
// Size: 0x48 (Inherited: 0x28)
struct UInheritableComponentHandler : UObject 
{
	struct TArray<None>                           Records;                                                     // 0x28(0x10)
	struct TArray<None>                           UnnecessaryComponents;                                       // 0x38(0x10)
};

// Class Engine.InputDelegateBinding
// Size: 0x28 (Inherited: 0x28)
struct UInputDelegateBinding : UDynamicBlueprintBinding 
{
};

// Class Engine.InputActionDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputActionDelegateBinding : UInputDelegateBinding 
{
	struct TArray<None>                           InputActionDelegateBindings;                                 // 0x28(0x10)
};

// Class Engine.InputAxisDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputAxisDelegateBinding : UInputDelegateBinding 
{
	struct TArray<None>                           InputAxisDelegateBindings;                                   // 0x28(0x10)
};

// Class Engine.InputAxisKeyDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputAxisKeyDelegateBinding : UInputDelegateBinding 
{
	struct TArray<None>                           InputAxisKeyDelegateBindings;                                // 0x28(0x10)
};

// Class Engine.InputComponent
// Size: 0x138 (Inherited: 0xb0)
struct UInputComponent : UActorComponent 
{
	char                                          UnknownDataB0[0x70];                                         // 0xb0(0x70)
	struct TArray<None>                           CachedKeyToActionInfo;                                       // 0x120(0x10)
	char                                          UnknownData130[0x8];                                         // 0x130(0x08)

	char WasControllerKeyJustReleased(struct FNone Key); // sub_0x3ce67a0
	char WasControllerKeyJustPressed(struct FNone Key); // sub_0x3ce67a0
	char IsControllerKeyDown(struct FNone Key); // sub_0x3ce67a0
	void GetTouchState(uint32_t FingerIndex, float& LocationX, float& LocationY, char& bIsCurrentlyPressed); // sub_0x3ce6320
	struct FNone GetControllerVectorKeyState(struct FNone Key); // sub_0x3ce61f0
	void GetControllerMouseDelta(float& DeltaX, float& DeltaY); // sub_0x3ce6110
	float GetControllerKeyTimeDown(struct FNone Key); // sub_0x3ce5f00
	void GetControllerAnalogStickState(char WhichStick, float& StickX, float& StickY); // sub_0x3ce5ff0
	float GetControllerAnalogKeyState(struct FNone Key); // sub_0x3ce5f00
};

// Class Engine.InputKeyDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputKeyDelegateBinding : UInputDelegateBinding 
{
	struct TArray<None>                           InputKeyDelegateBindings;                                    // 0x28(0x10)
};

// Class Engine.InputSettings
// Size: 0xf0 (Inherited: 0x28)
struct UInputSettings : UObject 
{
	struct TArray<None>                           AxisConfig;                                                  // 0x28(0x10)
	char                                          bAltEnterTogglesFullscreen : 0;                              // 0x38(0x01)
	char                                          bF11TogglesFullscreen : 0;                                   // 0x38(0x01)
	char                                          bUseMouseForTouch : 0;                                       // 0x38(0x01)
	char                                          bEnableMouseSmoothing : 0;                                   // 0x38(0x01)
	char                                          bEnableFOVScaling : 0;                                       // 0x38(0x01)
	char                                          bCaptureMouseOnLaunch : 0;                                   // 0x38(0x01)
	char                                          bDefaultViewportMouseLock : 0;                               // 0x38(0x01)
	char                                          bAlwaysShowTouchInterface : 0;                               // 0x38(0x01)
	char                                          UnknownData38[0x1];                                          // 0x38(0x01)
	char                                          bShowConsoleOnFourFingerTap : 0;                             // 0x39(0x01)
	char                                          bEnableGestureRecognizer : 0;                                // 0x39(0x01)
	char                                          UnknownData39[0x1];                                          // 0x39(0x01)
	char                                          bUseAutocorrect : 0;                                         // 0x3a(0x01)
	char                                          UnknownData3A[0x6];                                          // 0x3a(0x06)
	struct TArray<None>                           ExcludedAutocorrectOS;                                       // 0x40(0x10)
	struct TArray<None>                           ExcludedAutocorrectCultures;                                 // 0x50(0x10)
	struct TArray<None>                           ExcludedAutocorrectDeviceModels;                             // 0x60(0x10)
	enum class None                               DefaultViewportMouseCaptureMode;                             // 0x70(0x01)
	enum class None                               DefaultViewportMouseLockMode;                                // 0x71(0x01)
	char                                          UnknownData72[0x2];                                          // 0x72(0x02)
	float                                         FOVScale;                                                    // 0x74(0x04)
	float                                         DoubleClickTime;                                             // 0x78(0x04)
	char                                          UnknownData7C[0x4];                                          // 0x7c(0x04)
	struct TArray<None>                           ActionMappings;                                              // 0x80(0x10)
	struct TArray<None>                           AxisMappings;                                                // 0x90(0x10)
	struct TArray<None>                           SpeechMappings;                                              // 0xa0(0x10)
	struct FNone                                  DefaultTouchInterface;                                       // 0xb0(0x18)
	struct FNone                                  ConsoleKey;                                                  // 0xc8(0x18)
	struct TArray<None>                           ConsoleKeys;                                                 // 0xe0(0x10)

	void SaveKeyMappings(); // sub_0x3ce7490
	void RemoveAxisMapping(struct FNone& KeyMapping, char bForceRebuildKeymaps); // sub_0x3ce72f0
	void RemoveActionMapping(struct FNone& KeyMapping, char bForceRebuildKeymaps); // sub_0x3ce7150
	struct FNone* GetInputSettings(); // sub_0x3ce62f0
	void GetAxisNames(struct TArray<None>& AxisNames); // sub_0x3ce5e50
	void GetAxisMappingByName(struct FName InAxisName, struct TArray<None>& OutMappings); // sub_0x3ce5d20
	void GetActionNames(struct TArray<None>& ActionNames); // sub_0x3ce5c70
	void GetActionMappingByName(struct FName InActionName, struct TArray<None>& OutMappings); // sub_0x3ce5b40
	void ForceRebuildKeymaps(); // sub_0x3ce5b20
	void AddAxisMapping(struct FNone& KeyMapping, char bForceRebuildKeymaps); // sub_0x3ce57f0
	void AddActionMapping(struct FNone& KeyMapping, char bForceRebuildKeymaps); // sub_0x3ce5650
};

// Class Engine.InputTouchDelegateBinding
// Size: 0x38 (Inherited: 0x28)
struct UInputTouchDelegateBinding : UInputDelegateBinding 
{
	struct TArray<None>                           InputTouchDelegateBindings;                                  // 0x28(0x10)
};

// Class Engine.InputVectorAxisDelegateBinding
// Size: 0x38 (Inherited: 0x38)
struct UInputVectorAxisDelegateBinding : UInputAxisKeyDelegateBinding 
{
};

// Class Engine.InstancedCollisionComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UInstancedCollisionComponent : UActorComponent 
{
	struct TArray<None>                           StaticMeshComponents;                                        // 0xb0(0x10)
	char                                          UnknownDataC0[0x10];                                         // 0xc0(0x10)
	struct FNone*                                 StaticMeshComponent;                                         // 0xd0(0x08)
};

// Class Engine.InstancedStaticCollisionActor
// Size: 0x360 (Inherited: 0x310)
struct AInstancedStaticCollisionActor : AActor 
{
	struct TMap<None, None>                       InstancedCollisionComponentMap;                              // 0x310(0x50)
};

// Class Engine.Interface_AssetUserData
// Size: 0x28 (Inherited: 0x28)
struct UInterface_AssetUserData : UInterface 
{
};

// Class Engine.Interface_CollisionDataProvider
// Size: 0x28 (Inherited: 0x28)
struct UInterface_CollisionDataProvider : UInterface 
{
};

// Class Engine.Interface_PostProcessVolume
// Size: 0x28 (Inherited: 0x28)
struct UInterface_PostProcessVolume : UInterface 
{
};

// Class Engine.Interface_PreviewMeshProvider
// Size: 0x28 (Inherited: 0x28)
struct UInterface_PreviewMeshProvider : UInterface 
{
};

// Class Engine.InterpCurveEdSetup
// Size: 0x40 (Inherited: 0x28)
struct UInterpCurveEdSetup : UObject 
{
	struct TArray<None>                           Tabs;                                                        // 0x28(0x10)
	uint32_t                                      ActiveTab;                                                   // 0x38(0x04)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
};

// Class Engine.InterpData
// Size: 0x70 (Inherited: 0x28)
struct UInterpData : UObject 
{
	float                                         InterpLength;                                                // 0x28(0x04)
	float                                         PathBuildTime;                                               // 0x2c(0x04)
	struct TArray<None>                           InterpGroups;                                                // 0x30(0x10)
	struct FNone*                                 CurveEdSetup;                                                // 0x40(0x08)
	float                                         EdSectionStart;                                              // 0x48(0x04)
	float                                         EdSectionEnd;                                                // 0x4c(0x04)
	char                                          bShouldBakeAndPrune : 0;                                     // 0x50(0x01)
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
	struct FNone*                                 CachedDirectorGroup;                                         // 0x58(0x08)
	struct TArray<None>                           AllEventNames;                                               // 0x60(0x10)
};

// Class Engine.InterpFilter
// Size: 0x38 (Inherited: 0x28)
struct UInterpFilter : UObject 
{
	struct FString                                Caption;                                                     // 0x28(0x10)
};

// Class Engine.InterpFilter_Classes
// Size: 0x38 (Inherited: 0x38)
struct UInterpFilter_Classes : UInterpFilter 
{
};

// Class Engine.InterpFilter_Custom
// Size: 0x38 (Inherited: 0x38)
struct UInterpFilter_Custom : UInterpFilter 
{
};

// Class Engine.InterpGroup
// Size: 0x50 (Inherited: 0x28)
struct UInterpGroup : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct TArray<None>                           InterpTracks;                                                // 0x30(0x10)
	struct FName                                  GroupName;                                                   // 0x40(0x08)
	struct FNone                                  GroupColor;                                                  // 0x48(0x04)
	char                                          bCollapsed : 0;                                              // 0x4c(0x01)
	char                                          bVisible : 0;                                                // 0x4c(0x01)
	char                                          bIsFolder : 0;                                               // 0x4c(0x01)
	char                                          bIsParented : 0;                                             // 0x4c(0x01)
	char                                          bIsSelected : 0;                                             // 0x4c(0x01)
	char                                          UnknownData4C[0x4];                                          // 0x4c(0x04)
};

// Class Engine.InterpGroupCamera
// Size: 0x60 (Inherited: 0x50)
struct UInterpGroupCamera : UInterpGroup 
{
	struct FNone*                                 CameraAnimInst;                                              // 0x50(0x08)
	float                                         CompressTolerance;                                           // 0x58(0x04)
	char                                          UnknownData5C[0x4];                                          // 0x5c(0x04)
};

// Class Engine.InterpGroupDirector
// Size: 0x50 (Inherited: 0x50)
struct UInterpGroupDirector : UInterpGroup 
{
};

// Class Engine.InterpGroupInst
// Size: 0x48 (Inherited: 0x28)
struct UInterpGroupInst : UObject 
{
	struct FNone*                                 Group;                                                       // 0x28(0x08)
	struct FNone*                                 GroupActor;                                                  // 0x30(0x08)
	struct TArray<None>                           TrackInst;                                                   // 0x38(0x10)
};

// Class Engine.InterpGroupInstCamera
// Size: 0x48 (Inherited: 0x48)
struct UInterpGroupInstCamera : UInterpGroupInst 
{
};

// Class Engine.InterpGroupInstDirector
// Size: 0x48 (Inherited: 0x48)
struct UInterpGroupInstDirector : UInterpGroupInst 
{
};

// Class Engine.InterpToMovementComponent
// Size: 0x190 (Inherited: 0xf0)
struct UInterpToMovementComponent : UMovementComponent 
{
	float                                         Duration;                                                    // 0xf0(0x04)
	char                                          bPauseOnImpact : 0;                                          // 0xf4(0x01)
	char                                          UnknownDataF4[0x4];                                          // 0xf4(0x04)
	char                                          bSweep : 0;                                                  // 0xf8(0x01)
	char                                          UnknownDataF8[0x1];                                          // 0xf8(0x01)
	enum class None                               TeleportType;                                                // 0xf9(0x01)
	enum class None                               BehaviourType;                                               // 0xfa(0x01)
	char                                          bCheckIfStillInWorld : 0;                                    // 0xfb(0x01)
	char                                          UnknownDataFB[0x1];                                          // 0xfb(0x01)
	char                                          bForceSubStepping : 0;                                       // 0xfc(0x01)
	char                                          UnknownDataFC[0x4];                                          // 0xfc(0x04)
	struct FMulticastInlineDelegate               OnInterpToReverse;                                           // 0x100(0x10)
	struct FMulticastInlineDelegate               OnInterpToStop;                                              // 0x110(0x10)
	struct FMulticastInlineDelegate               OnWaitBeginDelegate;                                         // 0x120(0x10)
	struct FMulticastInlineDelegate               OnWaitEndDelegate;                                           // 0x130(0x10)
	struct FMulticastInlineDelegate               OnResetDelegate;                                             // 0x140(0x10)
	float                                         MaxSimulationTimeStep;                                       // 0x150(0x04)
	uint32_t                                      MaxSimulationIterations;                                     // 0x154(0x04)
	struct TArray<None>                           ControlPoints;                                               // 0x158(0x10)
	char                                          UnknownData168[0x28];                                        // 0x168(0x28)

	void StopSimulating(struct FNone& HitResult); // sub_0x3cf0430
	void RestartMovement(float InitialDirection); // sub_0x3cf03b0
	void OnInterpToWaitEndDelegate__DelegateSignature(struct FNone& ImpactResult, float Time); // sub_0x239bfb0
	void OnInterpToWaitBeginDelegate__DelegateSignature(struct FNone& ImpactResult, float Time); // sub_0x239bfb0
	void OnInterpToStopDelegate__DelegateSignature(struct FNone& ImpactResult, float Time); // sub_0x239bfb0
	void OnInterpToReverseDelegate__DelegateSignature(struct FNone& ImpactResult, float Time); // sub_0x239bfb0
	void OnInterpToResetDelegate__DelegateSignature(struct FNone& ImpactResult, float Time); // sub_0x239bfb0
	void FinaliseControlPoints(); // sub_0x3cf0390
};

// Class Engine.InterpTrackAnimControl
// Size: 0xb0 (Inherited: 0x90)
struct UInterpTrackAnimControl : UInterpTrackFloatBase 
{
	struct FName                                  SlotName;                                                    // 0x90(0x08)
	struct TArray<None>                           AnimSeqs;                                                    // 0x98(0x10)
	char                                          bSkipAnimNotifiers : 0;                                      // 0xa8(0x01)
	char                                          UnknownDataA8[0x8];                                          // 0xa8(0x08)
};

// Class Engine.InterpTrackAudioMaster
// Size: 0x90 (Inherited: 0x90)
struct UInterpTrackAudioMaster : UInterpTrackVectorBase 
{
};

// Class Engine.InterpTrackBoolProp
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackBoolProp : UInterpTrack 
{
	struct TArray<None>                           BoolTrack;                                                   // 0x70(0x10)
	struct FName                                  PropertyName;                                                // 0x80(0x08)
};

// Class Engine.InterpTrackColorProp
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackColorProp : UInterpTrackVectorBase 
{
	struct FName                                  PropertyName;                                                // 0x90(0x08)
};

// Class Engine.InterpTrackColorScale
// Size: 0x90 (Inherited: 0x90)
struct UInterpTrackColorScale : UInterpTrackVectorBase 
{
};

// Class Engine.InterpTrackDirector
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackDirector : UInterpTrack 
{
	struct TArray<None>                           CutTrack;                                                    // 0x70(0x10)
	char                                          bSimulateCameraCutsOnClients : 0;                            // 0x80(0x01)
	char                                          UnknownData80[0x8];                                          // 0x80(0x08)
};

// Class Engine.InterpTrackEvent
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackEvent : UInterpTrack 
{
	struct TArray<None>                           EventTrack;                                                  // 0x70(0x10)
	char                                          bFireEventsWhenForwards : 0;                                 // 0x80(0x01)
	char                                          bFireEventsWhenBackwards : 0;                                // 0x80(0x01)
	char                                          bFireEventsWhenJumpingForwards : 0;                          // 0x80(0x01)
	char                                          bUseCustomEventName : 0;                                     // 0x80(0x01)
	char                                          UnknownData80[0x8];                                          // 0x80(0x08)
};

// Class Engine.InterpTrackFade
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackFade : UInterpTrackFloatBase 
{
	char                                          bPersistFade : 0;                                            // 0x90(0x01)
	char                                          bFadeAudio : 0;                                              // 0x90(0x01)
	char                                          UnknownData90[0x4];                                          // 0x90(0x04)
	struct FNone                                  FadeColor;                                                   // 0x94(0x10)
	char                                          UnknownDataA4[0x4];                                          // 0xa4(0x04)
};

// Class Engine.InterpTrackFloatAnimBPParam
// Size: 0xb0 (Inherited: 0x90)
struct UInterpTrackFloatAnimBPParam : UInterpTrackFloatBase 
{
	struct FNone*                                 AnimBlueprintClass;                                          // 0x90(0x08)
	struct FNone*                                 AnimClass;                                                   // 0x98(0x08)
	struct FName                                  ParamName;                                                   // 0xa0(0x08)
	char                                          UnknownDataA8[0x8];                                          // 0xa8(0x08)
};

// Class Engine.InterpTrackFloatMaterialParam
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackFloatMaterialParam : UInterpTrackFloatBase 
{
	struct TArray<None>                           TargetMaterials;                                             // 0x90(0x10)
	struct FName                                  ParamName;                                                   // 0xa0(0x08)
};

// Class Engine.InterpTrackFloatParticleParam
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackFloatParticleParam : UInterpTrackFloatBase 
{
	struct FName                                  ParamName;                                                   // 0x90(0x08)
};

// Class Engine.InterpTrackFloatProp
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackFloatProp : UInterpTrackFloatBase 
{
	struct FName                                  PropertyName;                                                // 0x90(0x08)
};

// Class Engine.InterpTrackInstAnimControl
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstAnimControl : UInterpTrackInst 
{
	float                                         LastUpdatePosition;                                          // 0x28(0x04)
	char                                          UnknownData2C[0x4];                                          // 0x2c(0x04)
};

// Class Engine.InterpTrackInstAudioMaster
// Size: 0x28 (Inherited: 0x28)
struct UInterpTrackInstAudioMaster : UInterpTrackInst 
{
};

// Class Engine.InterpTrackInstProperty
// Size: 0x50 (Inherited: 0x28)
struct UInterpTrackInstProperty : UInterpTrackInst 
{
	struct TFieldPath<FNone>                      InterpProperty;                                              // 0x28(0x20)
	struct FNone*                                 PropertyOuterObjectInst;                                     // 0x48(0x08)
};

// Class Engine.InterpTrackInstBoolProp
// Size: 0x68 (Inherited: 0x50)
struct UInterpTrackInstBoolProp : UInterpTrackInstProperty 
{
	char                                          UnknownData50[0x10];                                         // 0x50(0x10)
	char                                          ResetBool : 0;                                               // 0x60(0x01)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.InterpTrackInstColorProp
// Size: 0x60 (Inherited: 0x50)
struct UInterpTrackInstColorProp : UInterpTrackInstProperty 
{
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
	struct FNone                                  ResetColor;                                                  // 0x58(0x04)
	char                                          UnknownData5C[0x4];                                          // 0x5c(0x04)
};

// Class Engine.InterpTrackInstColorScale
// Size: 0x28 (Inherited: 0x28)
struct UInterpTrackInstColorScale : UInterpTrackInst 
{
};

// Class Engine.InterpTrackInstDirector
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstDirector : UInterpTrackInst 
{
	struct FNone*                                 OldViewTarget;                                               // 0x28(0x08)
};

// Class Engine.InterpTrackInstEvent
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstEvent : UInterpTrackInst 
{
	float                                         LastUpdatePosition;                                          // 0x28(0x04)
	char                                          UnknownData2C[0x4];                                          // 0x2c(0x04)
};

// Class Engine.InterpTrackInstFade
// Size: 0x28 (Inherited: 0x28)
struct UInterpTrackInstFade : UInterpTrackInst 
{
};

// Class Engine.InterpTrackInstFloatAnimBPParam
// Size: 0x40 (Inherited: 0x28)
struct UInterpTrackInstFloatAnimBPParam : UInterpTrackInst 
{
	struct FNone*                                 AnimScriptInstance;                                          // 0x28(0x08)
	float                                         ResetFloat;                                                  // 0x30(0x04)
	char                                          UnknownData34[0xc];                                          // 0x34(0x0c)
};

// Class Engine.InterpTrackInstFloatMaterialParam
// Size: 0x60 (Inherited: 0x28)
struct UInterpTrackInstFloatMaterialParam : UInterpTrackInst 
{
	struct TArray<None>                           MaterialInstances;                                           // 0x28(0x10)
	struct TArray<None>                           ResetFloats;                                                 // 0x38(0x10)
	struct TArray<None>                           PrimitiveMaterialRefs;                                       // 0x48(0x10)
	struct FNone*                                 InstancedTrack;                                              // 0x58(0x08)
};

// Class Engine.InterpTrackInstFloatParticleParam
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstFloatParticleParam : UInterpTrackInst 
{
	float                                         ResetFloat;                                                  // 0x28(0x04)
	char                                          UnknownData2C[0x4];                                          // 0x2c(0x04)
};

// Class Engine.InterpTrackInstFloatProp
// Size: 0x60 (Inherited: 0x50)
struct UInterpTrackInstFloatProp : UInterpTrackInstProperty 
{
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
	float                                         ResetFloat;                                                  // 0x58(0x04)
	char                                          UnknownData5C[0x4];                                          // 0x5c(0x04)
};

// Class Engine.InterpTrackInstLinearColorProp
// Size: 0x68 (Inherited: 0x50)
struct UInterpTrackInstLinearColorProp : UInterpTrackInstProperty 
{
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
	struct FNone                                  ResetColor;                                                  // 0x58(0x10)
};

// Class Engine.InterpTrackInstMove
// Size: 0x40 (Inherited: 0x28)
struct UInterpTrackInstMove : UInterpTrackInst 
{
	struct FNone                                  ResetLocation;                                               // 0x28(0x0c)
	struct FNone                                  ResetRotation;                                               // 0x34(0x0c)
};

// Class Engine.InterpTrackInstParticleReplay
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstParticleReplay : UInterpTrackInst 
{
	float                                         LastUpdatePosition;                                          // 0x28(0x04)
	char                                          UnknownData2C[0x4];                                          // 0x2c(0x04)
};

// Class Engine.InterpTrackInstSlomo
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstSlomo : UInterpTrackInst 
{
	float                                         OldTimeDilation;                                             // 0x28(0x04)
	char                                          UnknownData2C[0x4];                                          // 0x2c(0x04)
};

// Class Engine.InterpTrackInstSound
// Size: 0x38 (Inherited: 0x28)
struct UInterpTrackInstSound : UInterpTrackInst 
{
	float                                         LastUpdatePosition;                                          // 0x28(0x04)
	char                                          UnknownData2C[0x4];                                          // 0x2c(0x04)
	struct FNone*                                 PlayAudioComp;                                               // 0x30(0x08)
};

// Class Engine.InterpTrackInstToggle
// Size: 0x38 (Inherited: 0x28)
struct UInterpTrackInstToggle : UInterpTrackInst 
{
	char                                          Action;                                                      // 0x28(0x01)
	char                                          UnknownData29[0x3];                                          // 0x29(0x03)
	float                                         LastUpdatePosition;                                          // 0x2c(0x04)
	char                                          bSavedActiveState : 0;                                       // 0x30(0x01)
	char                                          UnknownData30[0x8];                                          // 0x30(0x08)
};

// Class Engine.InterpTrackInstVectorMaterialParam
// Size: 0x60 (Inherited: 0x28)
struct UInterpTrackInstVectorMaterialParam : UInterpTrackInst 
{
	struct TArray<None>                           MaterialInstances;                                           // 0x28(0x10)
	struct TArray<None>                           ResetVectors;                                                // 0x38(0x10)
	struct TArray<None>                           PrimitiveMaterialRefs;                                       // 0x48(0x10)
	struct FNone*                                 InstancedTrack;                                              // 0x58(0x08)
};

// Class Engine.InterpTrackInstVectorProp
// Size: 0x68 (Inherited: 0x50)
struct UInterpTrackInstVectorProp : UInterpTrackInstProperty 
{
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
	struct FNone                                  ResetVector;                                                 // 0x58(0x0c)
	char                                          UnknownData64[0x4];                                          // 0x64(0x04)
};

// Class Engine.InterpTrackInstVisibility
// Size: 0x30 (Inherited: 0x28)
struct UInterpTrackInstVisibility : UInterpTrackInst 
{
	char                                          Action;                                                      // 0x28(0x01)
	char                                          UnknownData29[0x3];                                          // 0x29(0x03)
	float                                         LastUpdatePosition;                                          // 0x2c(0x04)
};

// Class Engine.InterpTrackLinearColorBase
// Size: 0x90 (Inherited: 0x70)
struct UInterpTrackLinearColorBase : UInterpTrack 
{
	struct FNone                                  LinearColorTrack;                                            // 0x70(0x18)
	float                                         CurveTension;                                                // 0x88(0x04)
	char                                          UnknownData8C[0x4];                                          // 0x8c(0x04)
};

// Class Engine.InterpTrackLinearColorProp
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackLinearColorProp : UInterpTrackLinearColorBase 
{
	struct FName                                  PropertyName;                                                // 0x90(0x08)
};

// Class Engine.InterpTrackMove
// Size: 0xc8 (Inherited: 0x70)
struct UInterpTrackMove : UInterpTrack 
{
	struct FNone                                  PosTrack;                                                    // 0x70(0x18)
	struct FNone                                  EulerTrack;                                                  // 0x88(0x18)
	struct FNone                                  LookupTrack;                                                 // 0xa0(0x10)
	struct FName                                  LookAtGroupName;                                             // 0xb0(0x08)
	float                                         LinCurveTension;                                             // 0xb8(0x04)
	float                                         AngCurveTension;                                             // 0xbc(0x04)
	char                                          bUseQuatInterpolation : 0;                                   // 0xc0(0x01)
	char                                          bShowArrowAtKeys : 0;                                        // 0xc0(0x01)
	char                                          bDisableMovement : 0;                                        // 0xc0(0x01)
	char                                          bShowTranslationOnCurveEd : 0;                               // 0xc0(0x01)
	char                                          bShowRotationOnCurveEd : 0;                                  // 0xc0(0x01)
	char                                          bHide3DTrack : 0;                                            // 0xc0(0x01)
	char                                          UnknownDataC0[0x4];                                          // 0xc0(0x04)
	char                                          RotMode;                                                     // 0xc4(0x01)
	char                                          UnknownDataC5[0x3];                                          // 0xc5(0x03)
};

// Class Engine.InterpTrackMoveAxis
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackMoveAxis : UInterpTrackFloatBase 
{
	char                                          MoveAxis;                                                    // 0x90(0x01)
	char                                          UnknownData91[0x7];                                          // 0x91(0x07)
	struct FNone                                  LookupTrack;                                                 // 0x98(0x10)
};

// Class Engine.InterpTrackParticleReplay
// Size: 0x80 (Inherited: 0x70)
struct UInterpTrackParticleReplay : UInterpTrack 
{
	struct TArray<None>                           TrackKeys;                                                   // 0x70(0x10)
};

// Class Engine.InterpTrackSlomo
// Size: 0x90 (Inherited: 0x90)
struct UInterpTrackSlomo : UInterpTrackFloatBase 
{
};

// Class Engine.InterpTrackSound
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackSound : UInterpTrackVectorBase 
{
	struct TArray<None>                           Sounds;                                                      // 0x90(0x10)
	char                                          bPlayOnReverse : 0;                                          // 0xa0(0x01)
	char                                          bContinueSoundOnMatineeEnd : 0;                              // 0xa0(0x01)
	char                                          bSuppressSubtitles : 0;                                      // 0xa0(0x01)
	char                                          bTreatAsDialogue : 0;                                        // 0xa0(0x01)
	char                                          bAttach : 0;                                                 // 0xa0(0x01)
	char                                          UnknownDataA0[0x8];                                          // 0xa0(0x08)
};

// Class Engine.InterpTrackToggle
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackToggle : UInterpTrack 
{
	struct TArray<None>                           ToggleTrack;                                                 // 0x70(0x10)
	char                                          bActivateSystemEachUpdate : 0;                               // 0x80(0x01)
	char                                          bActivateWithJustAttachedFlag : 0;                           // 0x80(0x01)
	char                                          bFireEventsWhenForwards : 0;                                 // 0x80(0x01)
	char                                          bFireEventsWhenBackwards : 0;                                // 0x80(0x01)
	char                                          bFireEventsWhenJumpingForwards : 0;                          // 0x80(0x01)
	char                                          UnknownData80[0x8];                                          // 0x80(0x08)
};

// Class Engine.InterpTrackVectorMaterialParam
// Size: 0xa8 (Inherited: 0x90)
struct UInterpTrackVectorMaterialParam : UInterpTrackVectorBase 
{
	struct TArray<None>                           TargetMaterials;                                             // 0x90(0x10)
	struct FName                                  ParamName;                                                   // 0xa0(0x08)
};

// Class Engine.InterpTrackVectorProp
// Size: 0x98 (Inherited: 0x90)
struct UInterpTrackVectorProp : UInterpTrackVectorBase 
{
	struct FName                                  PropertyName;                                                // 0x90(0x08)
};

// Class Engine.InterpTrackVisibility
// Size: 0x88 (Inherited: 0x70)
struct UInterpTrackVisibility : UInterpTrack 
{
	struct TArray<None>                           VisibilityTrack;                                             // 0x70(0x10)
	char                                          bFireEventsWhenForwards : 0;                                 // 0x80(0x01)
	char                                          bFireEventsWhenBackwards : 0;                                // 0x80(0x01)
	char                                          bFireEventsWhenJumpingForwards : 0;                          // 0x80(0x01)
	char                                          UnknownData80[0x8];                                          // 0x80(0x08)
};

// Class Engine.IntSerialization
// Size: 0x50 (Inherited: 0x28)
struct UIntSerialization : UObject 
{
	uint16_t                                      UnsignedInt16Variable;                                       // 0x28(0x02)
	char                                          UnknownData2A[0x2];                                          // 0x2a(0x02)
	uint32_t                                      UnsignedInt32Variable;                                       // 0x2c(0x04)
	uint64_t                                      UnsignedInt64Variable;                                       // 0x30(0x08)
	uint8_t                                       SignedInt8Variable;                                          // 0x38(0x01)
	char                                          UnknownData39[0x1];                                          // 0x39(0x01)
	uint16_t                                      SignedInt16Variable;                                         // 0x3a(0x02)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
	uint64_t                                      SignedInt64Variable;                                         // 0x40(0x08)
	char                                          UnsignedInt8Variable;                                        // 0x48(0x01)
	char                                          UnknownData49[0x3];                                          // 0x49(0x03)
	uint32_t                                      SignedInt32Variable;                                         // 0x4c(0x04)
};

// Class Engine.KillZVolume
// Size: 0x358 (Inherited: 0x358)
struct AKillZVolume : APhysicsVolume 
{
};

// Class Engine.KismetArrayLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetArrayLibrary : UBlueprintFunctionLibrary 
{

	void SetArrayPropertyByName(struct FNone* Object, struct FName PropertyName, struct TArray<None>& Value); // sub_0x3cf52d0
	void FilterArray(struct TArray<None>& TargetArray, struct FNone* FilterClass, struct TArray<None>& FilteredArray); // sub_0x3cf5180
	void Array_Swap(struct TArray<None>& TargetArray, uint32_t FirstIndex, uint32_t SecondIndex); // sub_0x3cf5050
	void Array_Shuffle(struct TArray<None>& TargetArray); // sub_0x3cf4fb0
	void Array_Set(struct TArray<None>& TargetArray, uint32_t Index, uint32_t& Item, char bSizeToFit); // sub_0x3cf4d90
	void Array_Resize(struct TArray<None>& TargetArray, uint32_t Size); // sub_0x3cf4ca0
	char Array_RemoveItem(struct TArray<None>& TargetArray, uint32_t& Item); // sub_0x3cf4af0
	void Array_Remove(struct TArray<None>& TargetArray, uint32_t IndexToRemove); // sub_0x3cf4a00
	uint32_t Array_Length(struct TArray<None>& TargetArray); // sub_0x3cf4950
	uint32_t Array_LastIndex(struct TArray<None>& TargetArray); // sub_0x3cf48a0
	char Array_IsValidIndex(struct TArray<None>& TargetArray, uint32_t IndexToTest); // sub_0x3cf47b0
	void Array_Insert(struct TArray<None>& TargetArray, uint32_t& NewItem, uint32_t Index); // sub_0x3cf45d0
	char Array_Identical(struct TArray<None>& ArrayA, struct TArray<None>& ArrayB); // sub_0x3cf44c0
	void Array_Get(struct TArray<None>& TargetArray, uint32_t Index, uint32_t& Item); // sub_0x3cf42d0
	uint32_t Array_Find(struct TArray<None>& TargetArray, uint32_t& ItemToFind); // sub_0x3cf4120
	char Array_Contains(struct TArray<None>& TargetArray, uint32_t& ItemToFind); // sub_0x3cf3f60
	void Array_Clear(struct TArray<None>& TargetArray); // sub_0x3cf3ec0
	void Array_Append(struct TArray<None>& TargetArray, struct TArray<None>& SourceArray); // sub_0x3cf3dc0
	uint32_t Array_AddUnique(struct TArray<None>& TargetArray, uint32_t& NewItem); // sub_0x3cf3c10
	uint32_t Array_Add(struct TArray<None>& TargetArray, uint32_t& NewItem); // sub_0x3cf3a60
};

// Class Engine.KismetGuidLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetGuidLibrary : UBlueprintFunctionLibrary 
{

	void Parse_StringToGuid(struct FString GuidString, struct FNone& OutGuid, char& SUCCESS); // sub_0x3cf8c90
	char NotEqual_GuidGuid(struct FNone& A, struct FNone& B); // sub_0x3cf8b90
	struct FNone NewGuid(); // sub_0x3cf8b50
	char IsValid_Guid(struct FNone& InGuid); // sub_0x3cf7ff0
	void Invalidate_Guid(struct FNone& InGuid); // sub_0x3cf7f60
	char EqualEqual_GuidGuid(struct FNone& A, struct FNone& B); // sub_0x3cf6650
	struct FString Conv_GuidToString(struct FNone& InGuid); // sub_0x3cf6570
};

// Class Engine.KismetInputLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetInputLibrary : UBlueprintFunctionLibrary 
{

	char PointerEvent_IsTouchEvent(struct FNone& Input); // sub_0x3cf9c00
	char PointerEvent_IsMouseButtonDown(struct FNone& Input, struct FNone MouseButton); // sub_0x3cf9a40
	float PointerEvent_GetWheelDelta(struct FNone& Input); // sub_0x3cf9910
	uint32_t PointerEvent_GetUserIndex(struct FNone& Input); // sub_0x3cf97e0
	uint32_t PointerEvent_GetTouchpadIndex(struct FNone& Input); // sub_0x3cf96b0
	struct FNone PointerEvent_GetScreenSpacePosition(struct FNone& Input); // sub_0x3cf9570
	uint32_t PointerEvent_GetPointerIndex(struct FNone& Input); // sub_0x3cf9440
	struct FNone PointerEvent_GetLastScreenSpacePosition(struct FNone& Input); // sub_0x3cf9300
	enum class None PointerEvent_GetGestureType(struct FNone& Input); // sub_0x3cf91d0
	struct FNone PointerEvent_GetGestureDelta(struct FNone& Input); // sub_0x3cf9090
	struct FNone PointerEvent_GetEffectingButton(struct FNone& Input); // sub_0x3cf8f20
	struct FNone PointerEvent_GetCursorDelta(struct FNone& Input); // sub_0x3cf8de0
	char Key_IsVectorAxis(struct FNone& Key); // sub_0x3cf8a80
	char Key_IsValid(struct FNone& Key); // sub_0x3cf89b0
	char Key_IsMouseButton(struct FNone& Key); // sub_0x3cf88e0
	char Key_IsModifierKey(struct FNone& Key); // sub_0x3cf8810
	char Key_IsKeyboardKey(struct FNone& Key); // sub_0x3cf8740
	char Key_IsGamepadKey(struct FNone& Key); // sub_0x3cf8670
	char Key_IsFloatAxis(struct FNone& Key); // sub_0x3cf85a0
	enum class None Key_GetNavigationDirectionFromKey(struct FNone& InKeyEvent); // sub_0x3cf84a0
	enum class None Key_GetNavigationDirectionFromAnalog(struct FNone& InAnalogEvent); // sub_0x3cf8390
	enum class None Key_GetNavigationActionFromKey(struct FNone& InKeyEvent); // sub_0x3cf8290
	enum class None Key_GetNavigationAction(struct FNone& InKey); // sub_0x3cf81c0
	struct FText Key_GetDisplayName(struct FNone& Key); // sub_0x3cf8090
	char InputEvent_IsShiftDown(struct FNone& Input); // sub_0x3cf7eb0
	char InputEvent_IsRightShiftDown(struct FNone& Input); // sub_0x3cf7e00
	char InputEvent_IsRightControlDown(struct FNone& Input); // sub_0x3cf7d50
	char InputEvent_IsRightCommandDown(struct FNone& Input); // sub_0x3cf7ca0
	char InputEvent_IsRightAltDown(struct FNone& Input); // sub_0x3cf7bf0
	char InputEvent_IsRepeat(struct FNone& Input); // sub_0x3cf7b40
	char InputEvent_IsLeftShiftDown(struct FNone& Input); // sub_0x3cf7a90
	char InputEvent_IsLeftControlDown(struct FNone& Input); // sub_0x3cf79e0
	char InputEvent_IsLeftCommandDown(struct FNone& Input); // sub_0x3cf7930
	char InputEvent_IsLeftAltDown(struct FNone& Input); // sub_0x3cf7880
	char InputEvent_IsControlDown(struct FNone& Input); // sub_0x3cf77d0
	char InputEvent_IsCommandDown(struct FNone& Input); // sub_0x3cf7720
	char InputEvent_IsAltDown(struct FNone& Input); // sub_0x3cf7670
	struct FText InputChord_GetDisplayName(struct FNone& Key); // sub_0x3cf7520
	uint32_t GetUserIndex(struct FNone& Input); // sub_0x3cf7420
	struct FNone GetKey(struct FNone& Input); // sub_0x3cf6e30
	float GetAnalogValue(struct FNone& Input); // sub_0x3cf6aa0
	char EqualEqual_KeyKey(struct FNone A, struct FNone B); // sub_0x3cf6920
	char EqualEqual_InputChordInputChord(struct FNone A, struct FNone B); // sub_0x3cf6750
	void CalibrateTilt(); // sub_0x3cf6490
};

// Class Engine.KismetInternationalizationLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetInternationalizationLibrary : UBlueprintFunctionLibrary 
{

	char SetCurrentLocale(struct FString Culture, char SaveToConfig); // sub_0x3cfa0f0
	char SetCurrentLanguageAndLocale(struct FString Culture, char SaveToConfig); // sub_0x3cfa010
	char SetCurrentLanguage(struct FString Culture, char SaveToConfig); // sub_0x3cf9f30
	char SetCurrentCulture(struct FString Culture, char SaveToConfig); // sub_0x3cf9e50
	char SetCurrentAssetGroupCulture(struct FName AssetGroup, struct FString Culture, char SaveToConfig); // sub_0x3cf9d30
	struct FString GetSuitableCulture(struct TArray<None>& AvailableCultures, struct FString CultureToMatch, struct FString FallbackCulture); // sub_0x3cf7250
	struct FString GetNativeCulture(enum class None TextCategory); // sub_0x3cf7190
	struct TArray<None> GetLocalizedCultures(char IncludeGame, char IncludeEngine, char IncludeEditor, char IncludeAdditional); // sub_0x3cf6f70
	struct FString GetCurrentLocale(); // sub_0x3cf6db0
	struct FString GetCurrentLanguage(); // sub_0x1e777f0
	struct FString GetCurrentCulture(); // sub_0x1e777f0
	struct FString GetCurrentAssetGroupCulture(struct FName AssetGroup); // sub_0x3cf6ce0
	struct FString GetCultureDisplayName(struct FString Culture, char Localized); // sub_0x3cf6bb0
	void ClearCurrentAssetGroupCulture(struct FName AssetGroup, char SaveToConfig); // sub_0x3cf64b0
};

// Class Engine.KismetMaterialLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetMaterialLibrary : UBlueprintFunctionLibrary 
{

	void SetVectorParameterValue(struct FNone* WorldContextObject, struct FNone* Collection, struct FName ParameterName, struct FNone& ParameterValue); // sub_0x3d22090
	void SetScalarParameterValue(struct FNone* WorldContextObject, struct FNone* Collection, struct FName ParameterName, float ParameterValue); // sub_0x3d21f50
	struct FNone GetVectorParameterValue(struct FNone* WorldContextObject, struct FNone* Collection, struct FName ParameterName); // sub_0x3d0f520
	float GetScalarParameterValue(struct FNone* WorldContextObject, struct FNone* Collection, struct FName ParameterName); // sub_0x3d0ed20
	struct FNone* CreateDynamicMaterialInstance(struct FNone* WorldContextObject, struct FNone* Parent, struct FName OptionalName); // sub_0x3d08660
};

// Class Engine.KismetMathLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetMathLibrary : UBlueprintFunctionLibrary 
{

	uint32_t Xor_IntInt(uint32_t A, uint32_t B); // sub_0x3d29900
	uint64_t Xor_Int64Int64(uint64_t A, uint64_t B); // sub_0x3d29840
	struct FNone WeightedMovingAverage_FVector(struct FNone CurrentSample, struct FNone PreviousSample, float Weight); // sub_0x3d295f0
	struct FNone WeightedMovingAverage_FRotator(struct FNone CurrentSample, struct FNone PreviousSample, float Weight); // sub_0x3d294b0
	float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight); // sub_0x3d29730
	float VSizeXYSquared(struct FNone A); // sub_0x3d24ff0
	float VSizeXY(struct FNone A); // sub_0x3d24f60
	float VSizeSquared(struct FNone A); // sub_0x3d24ed0
	float VSize2DSquared(struct FNone A); // sub_0x3d24db0
	float VSize2D(struct FNone A); // sub_0x3d24d20
	float VSize(struct FNone A); // sub_0x3d24e30
	struct FNone VLerp(struct FNone A, struct FNone B, float ALPHA); // sub_0x3d24bf0
	struct FNone VInterpTo_Constant(struct FNone Current, struct FNone Target, float DeltaTime, float InterpSpeed); // sub_0x3d24a70
	struct FNone VInterpTo(struct FNone Current, struct FNone Target, float DeltaTime, float InterpSpeed); // sub_0x3d248f0
	struct FNone VectorSpringInterp(struct FNone Current, struct FNone Target, struct FNone& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // sub_0x3d268e0
	struct FNone Vector_Zero(); // sub_0x3d29480
	struct FNone Vector_Up(); // sub_0x3d29450
	void Vector_UnwindEuler(struct FNone& A); // sub_0x3d293d0
	struct FNone Vector_UnitCartesianToSpherical(struct FNone A); // sub_0x3d292f0
	struct FNone Vector_ToRadians(struct FNone A); // sub_0x3d29250
	struct FNone Vector_ToDegrees(struct FNone A); // sub_0x3d291b0
	struct FNone Vector_SnappedToGrid(struct FNone InVect, float InGridSize); // sub_0x3d29000
	void Vector_Set(struct FNone& A, float X, float Y, float Z); // sub_0x3d28eb0
	struct FNone Vector_Right(); // sub_0x3d28e80
	struct FNone Vector_Reciprocal(struct FNone& A); // sub_0x3d28d90
	struct FNone Vector_ProjectOnToNormal(struct FNone V, struct FNone InNormal); // sub_0x3d28ca0
	struct FNone Vector_One(); // sub_0x3d28c70
	struct FNone Vector_NormalUnsafe(struct FNone& A); // sub_0x3d289a0
	void Vector_Normalize(struct FNone& A, float Tolerance); // sub_0x3d28ae0
	struct FNone Vector_Normal2D(struct FNone A, float Tolerance); // sub_0x3d287d0
	struct FNone Vector_MirrorByPlane(struct FNone A, struct FNone& InPlane); // sub_0x3d28680
	struct FNone Vector_Left(); // sub_0x3d28650
	char Vector_IsZero(struct FNone& A); // sub_0x3d285a0
	char Vector_IsUnit(struct FNone& A, float SquaredLenthTolerance); // sub_0x3d28490
	char Vector_IsUniform(struct FNone& A, float Tolerance); // sub_0x3d28370
	char Vector_IsNormal(struct FNone& A); // sub_0x3d282a0
	char Vector_IsNearlyZero(struct FNone& A, float Tolerance); // sub_0x3d28190
	char Vector_IsNAN(struct FNone& A); // sub_0x3d280c0
	float Vector_HeadingAngle(struct FNone A); // sub_0x3d27f70
	struct FNone Vector_GetSignVector(struct FNone A); // sub_0x3d27eb0
	struct FNone Vector_GetProjection(struct FNone A); // sub_0x3d27e10
	float Vector_GetAbsMin(struct FNone A); // sub_0x3d27d70
	float Vector_GetAbsMax(struct FNone A); // sub_0x3d27cd0
	struct FNone Vector_GetAbs(struct FNone A); // sub_0x3d27c30
	struct FNone Vector_Forward(); // sub_0x3d27c00
	struct FNone Vector_Down(); // sub_0x3d27bd0
	float Vector_DistanceSquared(struct FNone v1, struct FNone v2); // sub_0x3d27af0
	float Vector_Distance2DSquared(struct FNone v1, struct FNone v2); // sub_0x3d27940
	float Vector_Distance2D(struct FNone v1, struct FNone v2); // sub_0x3d27870
	float Vector_Distance(struct FNone v1, struct FNone v2); // sub_0x3d27a10
	float Vector_CosineAngle2D(struct FNone A, struct FNone B); // sub_0x3d27680
	struct FNone Vector_ComponentMin(struct FNone A, struct FNone B); // sub_0x3d275b0
	struct FNone Vector_ComponentMax(struct FNone A, struct FNone B); // sub_0x3d274e0
	struct FNone Vector_ClampSizeMax2D(struct FNone A, float MAX); // sub_0x3d27170
	struct FNone Vector_ClampSizeMax(struct FNone A, float MAX); // sub_0x3d272f0
	struct FNone Vector_ClampSize2D(struct FNone A, float Min, float MAX); // sub_0x3d26fd0
	struct FNone Vector_BoundedToCube(struct FNone InVect, float InRadius); // sub_0x3d26ed0
	struct FNone Vector_BoundedToBox(struct FNone InVect, struct FNone InBoxMin, struct FNone InBoxMax); // sub_0x3d26da0
	struct FNone Vector_Backward(); // sub_0x3d26d70
	void Vector_Assign(struct FNone& A, struct FNone& InVector); // sub_0x3d26c90
	void Vector_AddBounded(struct FNone& A, struct FNone InAddVect, float InRadius); // sub_0x3d26b30
	struct FNone Vector4_Zero(); // sub_0x3d268c0
	float Vector4_SizeSquared3(struct FNone& A); // sub_0x3d26730
	float Vector4_SizeSquared(struct FNone& A); // sub_0x3d267f0
	float Vector4_Size3(struct FNone& A); // sub_0x3d265a0
	float Vector4_Size(struct FNone& A); // sub_0x3d26660
	void Vector4_Set(struct FNone& A, float X, float Y, float Z, float W); // sub_0x3d26400
	struct FNone Vector4_NormalUnsafe3(struct FNone& A); // sub_0x3d26100
	void Vector4_Normalize3(struct FNone& A, float Tolerance); // sub_0x3d26250
	struct FNone Vector4_Normal3(struct FNone& A, float Tolerance); // sub_0x3d25f50
	struct FNone Vector4_Negated(struct FNone& A); // sub_0x3d25eb0
	struct FNone Vector4_MirrorByVector3(struct FNone& Direction, struct FNone& SurfaceNormal); // sub_0x3d25d20
	char Vector4_IsZero(struct FNone& A); // sub_0x3d25c60
	char Vector4_IsUnit3(struct FNone& A, float SquaredLenthTolerance); // sub_0x3d25b40
	char Vector4_IsNormal3(struct FNone& A); // sub_0x3d25a70
	char Vector4_IsNearlyZero3(struct FNone& A, float Tolerance); // sub_0x3d25950
	char Vector4_IsNAN(struct FNone& A); // sub_0x3d25860
	float Vector4_DotProduct3(struct FNone& A, struct FNone& B); // sub_0x3d25610
	float Vector4_DotProduct(struct FNone& A, struct FNone& B); // sub_0x3d25730
	struct FNone Vector4_CrossProduct3(struct FNone& A, struct FNone& B); // sub_0x3d254b0
	void Vector4_Assign(struct FNone& A, struct FNone& InVector); // sub_0x3d253c0
	struct FNone Vector2DInterpTo_Constant(struct FNone Current, struct FNone Target, float DeltaTime, float InterpSpeed); // sub_0x3d251d0
	struct FNone Vector2DInterpTo(struct FNone Current, struct FNone Target, float DeltaTime, float InterpSpeed); // sub_0x3d25070
	struct FNone Vector2D_Zero(); // sub_0x3d25390
	struct FNone Vector2D_Unit45Deg(); // sub_0x3d25360
	struct FNone Vector2D_One(); // sub_0x3d25330
	struct FNone VEase(struct FNone A, struct FNone B, float ALPHA, char EasingFunc, float BlendExp, uint32_t Steps); // sub_0x3d24700
	struct FNone UtcNow(); // sub_0x3d246c0
	struct FNone TransformVector4(struct FNone& Matrix, struct FNone& Vec4); // sub_0x3d244c0
	struct FNone TransformRotation(struct FNone& T, struct FNone Rotation); // sub_0x3d24380
	struct FNone TransformLocation(struct FNone& T, struct FNone Location); // sub_0x3d241e0
	struct FNone TransformDirection(struct FNone& T, struct FNone Direction); // sub_0x3d24040
	float Transform_Determinant(struct FNone& Transform); // sub_0x3d245e0
	struct FNone ToSign2D(struct FNone A); // sub_0x3d23f40
	struct FNone ToRounded2D(struct FNone A); // sub_0x3d23e40
	void ToDirectionAndLength2D(struct FNone A, struct FNone& OutDir, float& OutLength); // sub_0x3d23cc0
	struct FNone Today(); // sub_0x3d23ff0
	struct FNone TLerp(struct FNone& A, struct FNone& B, float ALPHA, char InterpMode); // sub_0x3d23790
	struct FNone TInterpTo(struct FNone& Current, struct FNone& Target, float DeltaTime, float InterpSpeed); // sub_0x3d23570
	struct FNone TimespanZeroValue(); // sub_0x34ec5d0
	float TimespanRatio(struct FNone A, struct FNone B); // sub_0x3d23be0
	struct FNone TimespanMinValue(); // sub_0x3d23bb0
	struct FNone TimespanMaxValue(); // sub_0x3d23b80
	char TimespanFromString(struct FString TimespanString, struct FNone& Result); // sub_0x3d23a30
	struct FNone TEase(struct FNone& A, struct FNone& B, float ALPHA, char EasingFunc, float BlendExp, uint32_t Steps); // sub_0x3d232f0
	float Tan(float A); // sub_0x3d239b0
	struct FNone Subtract_VectorVector(struct FNone A, struct FNone B); // sub_0x3d23220
	struct FNone Subtract_VectorInt(struct FNone A, uint32_t B); // sub_0x3d23140
	struct FNone Subtract_VectorFloat(struct FNone A, float B); // sub_0x3d23060
	struct FNone Subtract_Vector4Vector4(struct FNone& A, struct FNone& B); // sub_0x3d22f30
	struct FNone Subtract_Vector2DVector2D(struct FNone A, struct FNone B); // sub_0x3d22e70
	struct FNone Subtract_Vector2DFloat(struct FNone A, float B); // sub_0x3d22da0
	struct FNone Subtract_TimespanTimespan(struct FNone A, struct FNone B); // sub_0x3d22720
	struct FNone Subtract_QuatQuat(struct FNone& A, struct FNone& B); // sub_0x3d22c90
	struct FNone Subtract_LinearColorLinearColor(struct FNone A, struct FNone B); // sub_0x3d22bb0
	struct FNone Subtract_IntPointIntPoint(struct FNone A, struct FNone B); // sub_0x3d22ae0
	struct FNone Subtract_IntPointInt(struct FNone A, uint32_t B); // sub_0x3d22a10
	uint32_t Subtract_IntInt(uint32_t A, uint32_t B); // sub_0x3d22950
	uint64_t Subtract_Int64Int64(uint64_t A, uint64_t B); // sub_0x3d22890
	float Subtract_FloatFloat(float A, float B); // sub_0x3d227d0
	struct FNone Subtract_DateTimeTimespan(struct FNone A, struct FNone B); // sub_0x3d22720
	struct FNone Subtract_DateTimeDateTime(struct FNone A, struct FNone B); // sub_0x3d22720
	char Subtract_ByteByte(char A, char B); // sub_0x3d22670
	float Square(float A); // sub_0x3d225f0
	float Sqrt(float A); // sub_0x3d22540
	struct FNone Spherical2DToUnitCartesian(struct FNone A); // sub_0x3d22460
	float Sin(float A); // sub_0x3d223e0
	uint64_t SignOfInteger64(uint64_t A); // sub_0x3d222a0
	uint32_t SignOfInteger(uint32_t A); // sub_0x3d22340
	float SignOfFloat(float A); // sub_0x3d221d0
	void SetRandomStreamSeed(struct FNone& Stream, uint32_t NewSeed); // sub_0x3d21e80
	void Set2D(struct FNone& A, float X, float Y); // sub_0x3d21d70
	struct FNone SelectVector(struct FNone A, struct FNone B, char bPickA); // sub_0x3d218c0
	struct FNone SelectTransform(struct FNone& A, struct FNone& B, char bPickA); // sub_0x3d21bb0
	struct FString SelectString(struct FString A, struct FString B, char bPickA); // sub_0x3d219f0
	struct FNone SelectRotator(struct FNone A, struct FNone B, char bPickA); // sub_0x3d218c0
	struct FNone* SelectObject(struct FNone* A, struct FNone* B, char bSelectA); // sub_0x3d214c0
	uint32_t SelectInt(uint32_t A, uint32_t B, char bPickA); // sub_0x3d217d0
	float SelectFloat(float A, float B, char bPickA); // sub_0x3d216c0
	struct FNone SelectColor(struct FNone A, struct FNone B, char bPickA); // sub_0x3d215b0
	struct FNone* SelectClass(struct FNone* A, struct FNone* B, char bSelectA); // sub_0x3d214c0
	void SeedRandomStream(struct FNone& Stream); // sub_0x3d21440
	float SafeDivide(float A, float B); // sub_0x3d21380
	uint64_t Round64(float A); // sub_0x3d21220
	uint32_t Round(float A); // sub_0x3d212f0
	struct FNone RotatorFromAxisAndAngle(struct FNone Axis, float Angle); // sub_0x3d21140
	struct FNone RotateAngleAxis(struct FNone InVect, float AngleDeg, struct FNone Axis); // sub_0x3d21000
	struct FNone RLerp(struct FNone A, struct FNone B, float ALPHA, char bShortestPath); // sub_0x3d1f440
	struct FNone RInterpTo_Constant(struct FNone Current, struct FNone Target, float DeltaTime, float InterpSpeed); // sub_0x3d1f2c0
	struct FNone RInterpTo(struct FNone Current, struct FNone Target, float DeltaTime, float InterpSpeed); // sub_0x3d1f140
	void RGBToHSV_Vector(struct FNone RGB, struct FNone& HSV); // sub_0x3d1f060
	void RGBtoHSV(struct FNone InColor, float& H, float& S, float& V, float& A); // sub_0x3d1ee70
	struct FNone RGBLinearToHSV(struct FNone RGB); // sub_0x3d1ede0
	void ResetVectorSpringState(struct FNone& SpringState); // sub_0x3d20f60
	void ResetRandomStream(struct FNone& Stream); // sub_0x3d20ee0
	void ResetFloatSpringState(struct FNone& SpringState); // sub_0x3d20e50
	struct FNone REase(struct FNone A, struct FNone B, float ALPHA, char bShortestPath, char EasingFunc, float BlendExp, uint32_t Steps); // sub_0x3d1ebb0
	struct FNone RandomUnitVectorInEllipticalConeInRadiansFromStream(struct FNone& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, struct FNone& Stream); // sub_0x3d20cc0
	struct FNone RandomUnitVectorInEllipticalConeInRadians(struct FNone ConeDir, float MaxYawInRadians, float MaxPitchInRadians); // sub_0x3d20ba0
	struct FNone RandomUnitVectorInEllipticalConeInDegreesFromStream(struct FNone& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, struct FNone& Stream); // sub_0x3d20a00
	struct FNone RandomUnitVectorInEllipticalConeInDegrees(struct FNone ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees); // sub_0x3d208d0
	struct FNone RandomUnitVectorInConeInRadiansFromStream(struct FNone& ConeDir, float ConeHalfAngleInRadians, struct FNone& Stream); // sub_0x3d207a0
	struct FNone RandomUnitVectorInConeInRadians(struct FNone ConeDir, float ConeHalfAngleInRadians); // sub_0x3d206c0
	struct FNone RandomUnitVectorInConeInDegreesFromStream(struct FNone& ConeDir, float ConeHalfAngleInDegrees, struct FNone& Stream); // sub_0x3d20580
	struct FNone RandomUnitVectorInConeInDegrees(struct FNone ConeDir, float ConeHalfAngleInDegrees); // sub_0x3d20490
	struct FNone RandomUnitVectorFromStream(struct FNone& Stream); // sub_0x3d203f0
	struct FNone RandomUnitVector(); // sub_0x3d203b0
	struct FNone RandomRotatorFromStream(char bRoll, struct FNone& Stream); // sub_0x3d202d0
	struct FNone RandomRotator(char bRoll); // sub_0x3d20230
	struct FNone RandomPointInBoundingBox(struct FNone Origin, struct FNone BoxExtent); // sub_0x3d200f0
	uint32_t RandomIntegerInRangeFromStream(uint32_t Min, uint32_t MAX, struct FNone& Stream); // sub_0x3d1fff0
	uint32_t RandomIntegerInRange(uint32_t Min, uint32_t MAX); // sub_0x3d1fef0
	uint32_t RandomIntegerFromStream(uint32_t MAX, struct FNone& Stream); // sub_0x3d1fe20
	uint64_t RandomInteger64InRange(uint64_t Min, uint64_t MAX); // sub_0x3d1fc50
	uint64_t RandomInteger64(uint64_t MAX); // sub_0x3d1fb80
	uint32_t RandomInteger(uint32_t MAX); // sub_0x3d1fd60
	float RandomFloatInRangeFromStream(float Min, float MAX, struct FNone& Stream); // sub_0x3d1fa70
	float RandomFloatInRange(float Min, float MAX); // sub_0x3d1f980
	float RandomFloatFromStream(struct FNone& Stream); // sub_0x3d1f8f0
	float RandomFloat(); // sub_0x3d1f8b0
	char RandomBoolWithWeightFromStream(float Weight, struct FNone& RandomStream); // sub_0x3d1f7d0
	char RandomBoolWithWeight(float Weight); // sub_0x3d1f750
	char RandomBoolFromStream(struct FNone& Stream); // sub_0x3d1f6c0
	char RandomBool(); // sub_0x3d1f660
	float RadiansToDegrees(float A); // sub_0x3d1f5e0
	struct FNone Quat_VectorUp(struct FNone& Q); // sub_0x3d1d8b0
	struct FNone Quat_VectorRight(struct FNone& Q); // sub_0x3d1d7c0
	struct FNone Quat_VectorForward(struct FNone& Q); // sub_0x3d1d6c0
	struct FNone Quat_UnrotateVector(struct FNone& Q, struct FNone& V); // sub_0x3d1e990
	float Quat_SizeSquared(struct FNone& Q); // sub_0x3d1e8d0
	float Quat_Size(struct FNone& Q); // sub_0x3d1e810
	void Quat_SetFromEuler(struct FNone& Q, struct FNone& Euler); // sub_0x3d1e730
	void Quat_SetComponents(struct FNone& Q, float X, float Y, float Z, float W); // sub_0x3d1e5a0
	struct FNone Quat_Rotator(struct FNone& Q); // sub_0x3d1e500
	struct FNone Quat_RotateVector(struct FNone& Q, struct FNone& V); // sub_0x3d1e300
	struct FNone Quat_Normalized(struct FNone& Q, float Tolerance); // sub_0x3d1e1b0
	void Quat_Normalize(struct FNone& Q, float Tolerance); // sub_0x3d1e070
	struct FNone Quat_MakeFromEuler(struct FNone& Euler); // sub_0x3d1dfd0
	struct FNone Quat_Log(struct FNone& Q); // sub_0x3d1df30
	char Quat_IsNormalized(struct FNone& Q); // sub_0x3d1de60
	char Quat_IsNonFinite(struct FNone& Q); // sub_0x3d1dd80
	char Quat_IsIdentity(struct FNone& Q, float Tolerance); // sub_0x3d1dc60
	char Quat_IsFinite(struct FNone& Q); // sub_0x3d1db80
	struct FNone Quat_Inversed(struct FNone& Q); // sub_0x3d1dac0
	struct FNone Quat_Identity(); // sub_0x3d1daa0
	struct FNone Quat_GetRotationAxis(struct FNone& Q); // sub_0x3d1d9c0
	struct FNone Quat_GetAxisZ(struct FNone& Q); // sub_0x3d1d8b0
	struct FNone Quat_GetAxisY(struct FNone& Q); // sub_0x3d1d7c0
	struct FNone Quat_GetAxisX(struct FNone& Q); // sub_0x3d1d6c0
	float Quat_GetAngle(struct FNone& Q); // sub_0x3d1d610
	struct FNone Quat_Exp(struct FNone& Q); // sub_0x3d1d570
	struct FNone Quat_Euler(struct FNone& Q); // sub_0x3d1d4d0
	void Quat_EnforceShortestArcWith(struct FNone& A, struct FNone& B); // sub_0x3d1d3a0
	float Quat_AngularDistance(struct FNone& A, struct FNone& B); // sub_0x3d1d260
	struct FNone ProjectVectorOnToVector(struct FNone V, struct FNone Target); // sub_0x3d1d0f0
	struct FNone ProjectVectorOnToPlane(struct FNone V, struct FNone PlaneNormal); // sub_0x3d1cfd0
	struct FNone ProjectPointOnToPlane(struct FNone Point, struct FNone PlaneBase, struct FNone PlaneNormal); // sub_0x3d1ce70
	char PointsAreCoplanar(struct TArray<None>& Points, float Tolerance); // sub_0x3d1cd70
	float PerlinNoise1D(float Value); // sub_0x3d1ccf0
	uint32_t Percent_IntInt(uint32_t A, uint32_t B); // sub_0x3d1cc10
	float Percent_FloatFloat(float A, float B); // sub_0x3d1ca90
	char Percent_ByteByte(char A, char B); // sub_0x3d1c9c0
	uint32_t Or_IntInt(uint32_t A, uint32_t B); // sub_0x3d1c900
	uint64_t Or_Int64Int64(uint64_t A, uint64_t B); // sub_0x3d1c840
	struct FNone now(); // sub_0x3d1c800
	char NotEqualExactly_VectorVector(struct FNone A, struct FNone B); // sub_0x3d1b6a0
	char NotEqualExactly_Vector4Vector4(struct FNone& A, struct FNone& B); // sub_0x3d1b570
	char NotEqualExactly_Vector2DVector2D(struct FNone A, struct FNone B); // sub_0x3d1b4a0
	char NotEqual_VectorVector(struct FNone A, struct FNone B, float ErrorTolerance); // sub_0x3d1c540
	char NotEqual_Vector4Vector4(struct FNone& A, struct FNone& B, float ErrorTolerance); // sub_0x3d1c3b0
	char NotEqual_Vector2DVector2D(struct FNone A, struct FNone B, float ErrorTolerance); // sub_0x3d1c290
	char NotEqual_TimespanTimespan(struct FNone A, struct FNone B); // sub_0x3d1b9d0
	char NotEqual_RotatorRotator(struct FNone A, struct FNone B, float ErrorTolerance); // sub_0x3d1c0b0
	char NotEqual_QuatQuat(struct FNone& A, struct FNone& B, float ErrorTolerance); // sub_0x3d1bf50
	char NotEqual_ObjectObject(struct FNone* A, struct FNone* B); // sub_0x3d1b910
	char NotEqual_NameName(struct FName A, struct FName B); // sub_0x3d1b910
	char NotEqual_MatrixMatrix(struct FNone& A, struct FNone& B, float Tolerance); // sub_0x3d1bdc0
	char NotEqual_LinearColorLinearColor(struct FNone A, struct FNone B); // sub_0x3d1bce0
	char NotEqual_IntPointIntPoint(struct FNone A, struct FNone B); // sub_0x3d1bc10
	char NotEqual_IntInt(uint32_t A, uint32_t B); // sub_0x3d1bb50
	char NotEqual_Int64Int64(uint64_t A, uint64_t B); // sub_0x3d1b910
	char NotEqual_FloatFloat(float A, float B); // sub_0x3d1ba80
	char NotEqual_DateTimeDateTime(struct FNone A, struct FNone B); // sub_0x3d1b9d0
	char NotEqual_ClassClass(struct FNone* A, struct FNone* B); // sub_0x3d1b910
	char NotEqual_ByteByte(char A, char B); // sub_0x3d1b850
	char NotEqual_BoolBool(char A, char B); // sub_0x3d1b780
	char Not_PreBool(char A); // sub_0x3d1c780
	uint64_t Not_Int64(uint64_t A); // sub_0x3d1c680
	uint32_t Not_Int(uint32_t A); // sub_0x3d1c700
	struct FNone NormalSafe2D(struct FNone A, float Tolerance); // sub_0x3d1af50
	float NormalizeToRange(float Value, float RangeMin, float RangeMax); // sub_0x3d1b2a0
	struct FNone NormalizedDeltaRotator(struct FNone A, struct FNone B); // sub_0x3d1b3b0
	float NormalizeAxis(float Angle); // sub_0x3d1b220
	void Normalize2D(struct FNone& A, float Tolerance); // sub_0x3d1b0b0
	struct FNone Normal2D(struct FNone A); // sub_0x3d1ac80
	struct FNone Normal(struct FNone A, float Tolerance); // sub_0x3d1ad90
	struct FNone NegateVector(struct FNone A); // sub_0x3d1ab40
	struct FNone NegateRotator(struct FNone A); // sub_0x3d1aaa0
	struct FNone Negated2D(struct FNone& A); // sub_0x3d1abe0
	char NearlyEqual_TransformTransform(struct FNone& A, struct FNone& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance); // sub_0x3d1a880
	char NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance); // sub_0x3d1a770
	float MultiplyMultiply_FloatFloat(float Base, float exp); // sub_0x3d194b0
	float MultiplyByPi(float Value); // sub_0x3d19430
	struct FNone Multiply_VectorVector(struct FNone A, struct FNone B); // sub_0x3d1a6a0
	struct FNone Multiply_VectorInt(struct FNone A, uint32_t B); // sub_0x3d1a230
	struct FNone Multiply_VectorFloat(struct FNone A, float B); // sub_0x3d1a150
	struct FNone Multiply_Vector4Vector4(struct FNone& A, struct FNone& B); // sub_0x3d1a570
	struct FNone Multiply_Vector2DVector2D(struct FNone A, struct FNone B); // sub_0x3d1a4b0
	struct FNone Multiply_Vector2DFloat(struct FNone A, float B); // sub_0x3d1a3e0
	struct FNone Multiply_TimespanFloat(struct FNone A, float Scalar); // sub_0x3d1a310
	struct FNone Multiply_RotatorInt(struct FNone A, uint32_t B); // sub_0x3d1a230
	struct FNone Multiply_RotatorFloat(struct FNone A, float B); // sub_0x3d1a150
	struct FNone Multiply_QuatQuat(struct FNone& A, struct FNone& B); // sub_0x3d1a010
	struct FNone Multiply_MatrixMatrix(struct FNone& A, struct FNone& B); // sub_0x3d19e00
	struct FNone Multiply_MatrixFloat(struct FNone& A, float B); // sub_0x3d19c90
	struct FNone Multiply_LinearColorLinearColor(struct FNone A, struct FNone B); // sub_0x3d19bb0
	struct FNone Multiply_LinearColorFloat(struct FNone A, float B); // sub_0x3d19af0
	struct FNone Multiply_IntPointIntPoint(struct FNone A, struct FNone B); // sub_0x3d19a20
	struct FNone Multiply_IntPointInt(struct FNone A, uint32_t B); // sub_0x3d19940
	uint32_t Multiply_IntInt(uint32_t A, uint32_t B); // sub_0x3d19880
	float Multiply_IntFloat(uint32_t A, float B); // sub_0x3d197b0
	uint64_t Multiply_Int64Int64(uint64_t A, uint64_t B); // sub_0x3d196f0
	float Multiply_FloatFloat(float A, float B); // sub_0x3d19630
	char Multiply_ByteByte(char A, char B); // sub_0x3d19570
	struct FNone MirrorVectorByNormal(struct FNone InVect, struct FNone InNormal); // sub_0x3d0e980
	void MinOfIntArray(struct TArray<None>& IntArray, uint32_t& IndexOfMinValue, uint32_t& MinValue); // sub_0x3d19030
	void MinOfFloatArray(struct TArray<None>& FloatArray, uint32_t& IndexOfMinValue, float& MinValue); // sub_0x3d18ef0
	void MinOfByteArray(struct TArray<None>& ByteArray, uint32_t& IndexOfMinValue, char& MinValue); // sub_0x3d18db0
	uint64_t MinInt64(uint64_t A, uint64_t B); // sub_0x3d18cf0
	void MinimumAreaRectangle(struct FNone* WorldContextObject, struct TArray<None>& InVerts, struct FNone& SampleSurfaceNormal, struct FNone& OutRectCenter, struct FNone& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, char bDebugDraw); // sub_0x3d19170
	uint32_t Min(uint32_t A, uint32_t B); // sub_0x3d18c30
	void MaxOfIntArray(struct TArray<None>& IntArray, uint32_t& IndexOfMaxValue, uint32_t& MaxValue); // sub_0x3d18af0
	void MaxOfFloatArray(struct TArray<None>& FloatArray, uint32_t& IndexOfMaxValue, float& MaxValue); // sub_0x3d189b0
	void MaxOfByteArray(struct TArray<None>& ByteArray, uint32_t& IndexOfMaxValue, char& MaxValue); // sub_0x3d18870
	uint64_t MaxInt64(uint64_t A, uint64_t B); // sub_0x3d187b0
	uint32_t MAX(uint32_t A, uint32_t B); // sub_0x3d186f0
	struct FNone Matrix_TransformVector4(struct FNone& M, struct FNone V); // sub_0x3d184a0
	struct FNone Matrix_TransformVector(struct FNone& M, struct FNone V); // sub_0x3d185c0
	struct FNone Matrix_TransformPosition(struct FNone& M, struct FNone V); // sub_0x3d18360
	struct FNone Matrix_ToQuat(struct FNone& M); // sub_0x3d182c0
	void Matrix_SetOrigin(struct FNone& M, struct FNone NewOrigin); // sub_0x3d181e0
	void Matrix_SetColumn(struct FNone& M, char Column, struct FNone Value); // sub_0x3d180b0
	void Matrix_SetAxis(struct FNone& M, char Axis, struct FNone AxisVector); // sub_0x3d17f80
	struct FNone Matrix_ScaleTranslation(struct FNone& M, struct FNone Scale3D); // sub_0x3d17e40
	struct FNone Matrix_RemoveTranslation(struct FNone& M); // sub_0x3d17d80
	void Matrix_RemoveScaling(struct FNone& M, float Tolerance); // sub_0x3d17cb0
	struct FNone Matrix_Mirror(struct FNone& M, char MirrorAxis, char FlipAxis); // sub_0x3d17b40
	struct FNone Matrix_InverseTransformVector(struct FNone& M, struct FNone V); // sub_0x3d179d0
	struct FNone Matrix_InverseTransformPosition(struct FNone& M, struct FNone V); // sub_0x3d17860
	struct FNone Matrix_Identity(); // sub_0x3d17810
	struct FNone Matrix_GetUnitAxis(struct FNone& M, char Axis); // sub_0x3d17710
	void Matrix_GetUnitAxes(struct FNone& M, struct FNone& X, struct FNone& Y, struct FNone& Z); // sub_0x3d17580
	struct FNone Matrix_GetTransposed(struct FNone& M); // sub_0x3d17390
	struct FNone Matrix_GetTransposeAdjoint(struct FNone& M); // sub_0x3d172d0
	struct FNone Matrix_GetScaleVector(struct FNone& M, float Tolerance); // sub_0x3d16eb0
	struct FNone Matrix_GetScaledAxis(struct FNone& M, char Axis); // sub_0x3d17160
	void Matrix_GetScaledAxes(struct FNone& M, struct FNone& X, struct FNone& Y, struct FNone& Z); // sub_0x3d16fb0
	float Matrix_GetRotDeterminant(struct FNone& M); // sub_0x3d16da0
	struct FNone Matrix_GetRotator(struct FNone& M); // sub_0x3d07a40
	struct FNone Matrix_GetOrigin(struct FNone& InMatrix); // sub_0x3d16d00
	float Matrix_GetMaximumAxisScale(struct FNone& M); // sub_0x3d16c70
	struct FNone Matrix_GetMatrixWithoutScale(struct FNone& M, float Tolerance); // sub_0x3d16b30
	struct FNone Matrix_GetInverse(struct FNone& M); // sub_0x3d16a70
	char Matrix_GetFrustumTopPlane(struct FNone& M, struct FNone& OutPlane); // sub_0x3d16880
	char Matrix_GetFrustumRightPlane(struct FNone& M, struct FNone& OutPlane); // sub_0x3d16690
	char Matrix_GetFrustumNearPlane(struct FNone& M, struct FNone& OutPlane); // sub_0x3d164e0
	char Matrix_GetFrustumLeftPlane(struct FNone& M, struct FNone& OutPlane); // sub_0x3d162f0
	char Matrix_GetFrustumFarPlane(struct FNone& M, struct FNone& OutPlane); // sub_0x3d16100
	char Matrix_GetFrustumBottomPlane(struct FNone& M, struct FNone& OutPlane); // sub_0x3d15f10
	float Matrix_GetDeterminant(struct FNone& M); // sub_0x3d15e80
	struct FNone Matrix_GetColumn(struct FNone& M, char Column); // sub_0x3d15d90
	char Matrix_ContainsNaN(struct FNone& M); // sub_0x3d15d00
	struct FNone Matrix_ConcatenateTranslation(struct FNone& M, struct FNone Translation); // sub_0x3d15ba0
	struct FNone Matrix_ApplyScale(struct FNone& M, float Scale); // sub_0x3d15930
	float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB); // sub_0x3d15790
	float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB); // sub_0x3d155f0
	struct FNone MakeVector4(float X, float Y, float Z, float W); // sub_0x3d15380
	struct FNone MakeVector2D(float X, float Y); // sub_0x3d152c0
	struct FNone MakeVector(float X, float Y, float Z); // sub_0x3d154e0
	struct FNone MakeTransform(struct FNone Location, struct FNone Rotation, struct FNone Scale); // sub_0x3d15130
	struct FNone MakeTimespan2(uint32_t Days, uint32_t Hours, uint32_t Minutes, uint32_t Seconds, uint32_t FractionNano); // sub_0x3d14e30
	struct FNone MakeTimespan(uint32_t Days, uint32_t Hours, uint32_t Minutes, uint32_t Seconds, uint32_t Milliseconds); // sub_0x3d14fb0
	struct FNone MakeRotFromZY(struct FNone& Z, struct FNone& Y); // sub_0x3d14ad0
	struct FNone MakeRotFromZX(struct FNone& Z, struct FNone& X); // sub_0x3d149c0
	struct FNone MakeRotFromZ(struct FNone& Z); // sub_0x3d14900
	struct FNone MakeRotFromYZ(struct FNone& Y, struct FNone& Z); // sub_0x3d147f0
	struct FNone MakeRotFromYX(struct FNone& Y, struct FNone& X); // sub_0x3d146e0
	struct FNone MakeRotFromY(struct FNone& Y); // sub_0x3d14620
	struct FNone MakeRotFromXZ(struct FNone& X, struct FNone& Z); // sub_0x3d14510
	struct FNone MakeRotFromXY(struct FNone& X, struct FNone& Y); // sub_0x3d14400
	struct FNone MakeRotFromX(struct FNone& X); // sub_0x3d14340
	struct FNone MakeRotator(float Roll, float Pitch, float Yaw); // sub_0x3d14d20
	struct FNone MakeRotationFromAxes(struct FNone Forward, struct FNone Right, struct FNone Up); // sub_0x3d14be0
	struct FNone MakeRelativeTransform(struct FNone& A, struct FNone& RelativeTo); // sub_0x3d141b0
	struct FNone MakeRandomStream(uint32_t InitialSeed); // sub_0x3d14120
	struct FNone MakeQualifiedFrameTime(struct FNone Frame, struct FNone FrameRate, float SubFrame); // sub_0x3d14010
	float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase); // sub_0x3d13f00
	struct FNone MakePlaneFromPointAndNormal(struct FNone Point, struct FNone Normal); // sub_0x3d13e20
	struct FNone MakeFrameRate(uint32_t Numerator, uint32_t Denominator); // sub_0x3d13d60
	struct FNone MakeDateTime(uint32_t Year, uint32_t Month, uint32_t Day, uint32_t Hour, uint32_t Minute, uint32_t Second, uint32_t Millisecond); // sub_0x3d13b70
	struct FNone MakeColor(float R, float G, float B, float A); // sub_0x3d13a10
	struct FNone MakeBox2D(struct FNone Min, struct FNone MAX); // sub_0x3d13860
	struct FNone MakeBox(struct FNone Min, struct FNone MAX); // sub_0x3d13930
	float Loge(float A); // sub_0x3d137e0
	float Log(float A, float Base); // sub_0x3d13720
	char LinePlaneIntersection_OriginNormal(struct FNone& LineStart, struct FNone& LineEnd, struct FNone PlaneOrigin, struct FNone PlaneNormal, float& T, struct FNone& Intersection); // sub_0x3d12330
	char LinePlaneIntersection(struct FNone& LineStart, struct FNone& LineEnd, struct FNone& APlane, float& T, struct FNone& Intersection); // sub_0x3d12140
	struct FNone LinearColorLerpUsingHSV(struct FNone A, struct FNone B, float ALPHA); // sub_0x3d126a0
	struct FNone LinearColorLerp(struct FNone A, struct FNone B, float ALPHA); // sub_0x3d12550
	struct FNone LinearColor_Yellow(); // sub_0x3d13700
	struct FNone LinearColor_White(); // sub_0x3d136e0
	struct FNone LinearColor_Transparent(); // sub_0x3d136c0
	struct FNone LinearColor_ToRGBE(struct FNone InLinearColor); // sub_0x3d13630
	struct FNone LinearColor_ToNewOpacity(struct FNone InColor, float InOpacity); // sub_0x3d13550
	void LinearColor_SetTemperature(struct FNone& InOutColor, float InTemperature); // sub_0x3d13470
	void LinearColor_SetRGBA(struct FNone& InOutColor, float R, float G, float B, float A); // sub_0x3d13250
	void LinearColor_SetRandomHue(struct FNone& InOutColor); // sub_0x3d133e0
	void LinearColor_SetFromSRGB(struct FNone& InOutColor, struct FNone& InSRGB); // sub_0x3d13170
	void LinearColor_SetFromPow22(struct FNone& InOutColor, struct FNone& InColor); // sub_0x3d13090
	void LinearColor_SetFromHSV(struct FNone& InOutColor, float H, float S, float V, float A); // sub_0x3d12f00
	void LinearColor_Set(struct FNone& InOutColor, struct FNone InColor); // sub_0x3d12e40
	struct FNone LinearColor_Red(); // sub_0x3d12e20
	struct FNone LinearColor_QuantizeRound(struct FNone InColor); // sub_0x3d12d90
	struct FNone LinearColor_Quantize(struct FNone InColor); // sub_0x3d12d00
	char LinearColor_IsNearEqual(struct FNone A, struct FNone B, float Tolerance); // sub_0x3d12bb0
	struct FNone LinearColor_Green(); // sub_0x3d12b90
	struct FNone LinearColor_Gray(); // sub_0x3d12b70
	float LinearColor_GetMin(struct FNone InColor); // sub_0x3d12af0
	float LinearColor_GetMax(struct FNone InColor); // sub_0x3d12a70
	float LinearColor_GetLuminance(struct FNone InColor); // sub_0x3d129d0
	float LinearColor_Distance(struct FNone C1, struct FNone C2); // sub_0x3d128d0
	struct FNone LinearColor_Desaturated(struct FNone InColor, float InDesaturation); // sub_0x3d12800
	struct FNone LinearColor_Blue(); // sub_0x3d127e0
	struct FNone LinearColor_Black(); // sub_0x3d127c0
	struct FNone LessLess_VectorRotator(struct FNone A, struct FNone B); // sub_0x3d11ca0
	char LessEqual_TimespanTimespan(struct FNone A, struct FNone B); // sub_0x3d119b0
	char LessEqual_IntInt(uint32_t A, uint32_t B); // sub_0x3d11be0
	char LessEqual_Int64Int64(uint64_t A, uint64_t B); // sub_0x3d11b20
	char LessEqual_FloatFloat(float A, float B); // sub_0x3d11a60
	char LessEqual_DateTimeDateTime(struct FNone A, struct FNone B); // sub_0x3d119b0
	char LessEqual_ByteByte(char A, char B); // sub_0x3d118f0
	char Less_TimespanTimespan(struct FNone A, struct FNone B); // sub_0x3d11e50
	char Less_IntInt(uint32_t A, uint32_t B); // sub_0x3d12080
	char Less_Int64Int64(uint64_t A, uint64_t B); // sub_0x3d11fc0
	char Less_FloatFloat(float A, float B); // sub_0x3d11f00
	char Less_DateTimeDateTime(struct FNone A, struct FNone B); // sub_0x3d11e50
	char Less_ByteByte(char A, char B); // sub_0x3d11d90
	float Lerp(float A, float B, float ALPHA); // sub_0x3d117e0
	char IsZero2D(struct FNone& A); // sub_0x3d11730
	char IsPointInBoxWithTransform(struct FNone Point, struct FNone& BoxWorldTransform, struct FNone BoxExtent); // sub_0x3d115a0
	char IsPointInBox(struct FNone Point, struct FNone BoxOrigin, struct FNone BoxExtent); // sub_0x3d11470
	char IsNearlyZero2D(struct FNone& A, float Tolerance); // sub_0x3d11370
	char IsMorning(struct FNone A); // sub_0x3d112c0
	char IsLeapYear(uint32_t Year); // sub_0x3d11240
	char IsAfternoon(struct FNone A); // sub_0x3d11190
	struct FNone InvertTransform(struct FNone& T); // sub_0x3d10f80
	struct FNone InverseTransformRotation(struct FNone& T, struct FNone Rotation); // sub_0x3d10e40
	struct FNone InverseTransformLocation(struct FNone& T, struct FNone Location); // sub_0x3d10c50
	struct FNone InverseTransformDirection(struct FNone& T, struct FNone Direction); // sub_0x3d10ab0
	struct FNone IntPoint_Zero(); // sub_0x3d10a80
	struct FNone IntPoint_Up(); // sub_0x3d10a50
	struct FNone IntPoint_Right(); // sub_0x3d10a30
	struct FNone IntPoint_One(); // sub_0x3d10a00
	struct FNone IntPoint_Left(); // sub_0x3d109d0
	struct FNone IntPoint_Down(); // sub_0x3d109a0
	char InRange_IntInt(uint32_t Value, uint32_t Min, uint32_t MAX, char InclusiveMin, char InclusiveMax); // sub_0x3d10820
	char InRange_Int64Int64(uint64_t Value, uint64_t Min, uint64_t MAX, char InclusiveMin, char InclusiveMax); // sub_0x3d10690
	char InRange_FloatFloat(float Value, float Min, float MAX, char InclusiveMin, char InclusiveMax); // sub_0x3d104f0
	float Hypotenuse(float Width, float Height); // sub_0x3d10430
	struct FNone HSVToRGBLinear(struct FNone HSV); // sub_0x3d102c0
	void HSVToRGB_Vector(struct FNone HSV, struct FNone& RGB); // sub_0x3d10350
	struct FNone HSVToRGB(float H, float S, float V, float A); // sub_0x3d10150
	float GridSnap_Float(float Location, float GridSize); // sub_0x3d10020
	struct FNone GreaterGreater_VectorRotator(struct FNone A, struct FNone B); // sub_0x3d0fb80
	char GreaterEqual_TimespanTimespan(struct FNone A, struct FNone B); // sub_0x3d0f890
	char GreaterEqual_IntInt(uint32_t A, uint32_t B); // sub_0x3d0fac0
	char GreaterEqual_Int64Int64(uint64_t A, uint64_t B); // sub_0x3d0fa00
	char GreaterEqual_FloatFloat(float A, float B); // sub_0x3d0f940
	char GreaterEqual_DateTimeDateTime(struct FNone A, struct FNone B); // sub_0x3d0f890
	char GreaterEqual_ByteByte(char A, char B); // sub_0x3d0f7d0
	char Greater_TimespanTimespan(struct FNone A, struct FNone B); // sub_0x3d0fd30
	char Greater_IntInt(uint32_t A, uint32_t B); // sub_0x3d0ff60
	char Greater_Int64Int64(uint64_t A, uint64_t B); // sub_0x3d0fea0
	char Greater_FloatFloat(float A, float B); // sub_0x3d0fde0
	char Greater_DateTimeDateTime(struct FNone A, struct FNone B); // sub_0x3d0fd30
	char Greater_ByteByte(char A, char B); // sub_0x3d0fc70
	uint32_t GetYear(struct FNone A); // sub_0x3d0f750
	void GetYawPitchFromVector(struct FNone InVec, float& Yaw, float& Pitch); // sub_0x3d0f620
	struct FNone GetVectorArrayAverage(struct TArray<None>& Vectors); // sub_0x3d0f460
	struct FNone GetUpVector(struct FNone InRot); // sub_0x3d0f3c0
	float GetTotalSeconds(struct FNone A); // sub_0x3d0f340
	float GetTotalMinutes(struct FNone A); // sub_0x3d0f2c0
	float GetTotalMilliseconds(struct FNone A); // sub_0x3d0f240
	float GetTotalHours(struct FNone A); // sub_0x3d0f1c0
	float GetTotalDays(struct FNone A); // sub_0x3d0f140
	struct FNone GetTimeOfDay(struct FNone A); // sub_0x3d0f0c0
	float GetTAU(); // sub_0x3d0f0a0
	void GetSlopeDegreeAngles(struct FNone& MyRightYAxis, struct FNone& FloorNormal, struct FNone& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle); // sub_0x3d0eec0
	uint32_t GetSeconds(struct FNone A); // sub_0x3d0ee10
	uint32_t GetSecond(struct FNone A); // sub_0x3d0ee10
	struct FNone GetRotated2D(struct FNone A, float AngleDeg); // sub_0x3d0eb10
	struct FNone GetRightVector(struct FNone InRot); // sub_0x3d0ea70
	struct FNone GetReflectionVector(struct FNone Direction, struct FNone SurfaceNormal); // sub_0x3d0e980
	float GetPointDistanceToSegment(struct FNone Point, struct FNone SegmentStart, struct FNone SegmentEnd); // sub_0x3d0e850
	float GetPointDistanceToLine(struct FNone Point, struct FNone LineOrigin, struct FNone LineDirection); // sub_0x3d0e720
	float GetPI(); // sub_0x3d0e700
	uint32_t GetMonth(struct FNone A); // sub_0x3d0e680
	uint32_t GetMinutes(struct FNone A); // sub_0x3d0e5d0
	uint32_t GetMinute(struct FNone A); // sub_0x3d0e5d0
	float GetMinElement(struct FNone A); // sub_0x3d0e550
	float GetMin2D(struct FNone A); // sub_0x3d0e4d0
	uint32_t GetMilliseconds(struct FNone A); // sub_0x3d0e420
	uint32_t GetMillisecond(struct FNone A); // sub_0x3d0e370
	float GetMaxElement(struct FNone A); // sub_0x3d0e2f0
	float GetMax2D(struct FNone A); // sub_0x3d0e270
	uint32_t GetHours(struct FNone A); // sub_0x3d0e1c0
	uint32_t GetHour12(struct FNone A); // sub_0x3d0e140
	uint32_t GetHour(struct FNone A); // sub_0x3d0e1c0
	struct FNone GetForwardVector(struct FNone InRot); // sub_0x3d0e0a0
	struct FNone GetDuration(struct FNone A); // sub_0x3d0e020
	struct FNone GetDirectionUnitVector(struct FNone From, struct FNone To); // sub_0x3d0de50
	uint32_t GetDays(struct FNone A); // sub_0x3d0ddd0
	uint32_t GetDayOfYear(struct FNone A); // sub_0x3d0dd50
	uint32_t GetDay(struct FNone A); // sub_0x3d0dcd0
	struct FNone GetDate(struct FNone A); // sub_0x3d0dc40
	void GetAzimuthAndElevation(struct FNone InDirection, struct FNone& ReferenceFrame, float& Azimuth, float& Elevation); // sub_0x3d0da60
	void GetAxes(struct FNone A, struct FNone& X, struct FNone& Y, struct FNone& Z); // sub_0x3d0d8e0
	float GetAbsMax2D(struct FNone A); // sub_0x3d0d850
	struct FNone GetAbs2D(struct FNone A); // sub_0x3d0d7c0
	struct FNone FTruncVector(struct FNone& InVector); // sub_0x3d0cad0
	uint64_t FTrunc64(float A); // sub_0x3d0c9d0
	uint32_t FTrunc(float A); // sub_0x3d0ca50
	struct FNone FromSeconds(float Seconds); // sub_0x3d0d730
	struct FNone FromMinutes(float Minutes); // sub_0x3d0d6a0
	struct FNone FromMilliseconds(float Milliseconds); // sub_0x3d0d610
	struct FNone FromHours(float Hours); // sub_0x3d0d580
	struct FNone FromDays(float Days); // sub_0x3d0d4f0
	float Fraction(float A); // sub_0x3d0d460
	uint32_t FMod(float Dividend, float Divisor, float& Remainder); // sub_0x3d0c8c0
	float FMin(float A, float B); // sub_0x3d0c800
	float FMax(float A, float B); // sub_0x3d0c740
	float FloatSpringInterp(float Current, float Target, struct FNone& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // sub_0x3d0d250
	float FixedTurn(float InCurrent, float InDesired, float InDeltaRate); // sub_0x3d0d140
	float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed); // sub_0x3d0c5f0
	float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed); // sub_0x3d0c4a0
	float FInterpEaseInOut(float A, float B, float ALPHA, float Exponent); // sub_0x3d0c350
	void FindNearestPointsOnLineSegments(struct FNone Segment1Start, struct FNone Segment1End, struct FNone Segment2Start, struct FNone Segment2End, struct FNone& Segment1Point, struct FNone& Segment2Point); // sub_0x3d0cf30
	struct FNone FindLookAtRotation(struct FNone& Start, struct FNone& Target); // sub_0x3d0cdf0
	struct FNone FindClosestPointOnSegment(struct FNone Point, struct FNone SegmentStart, struct FNone SegmentEnd); // sub_0x3d0ccb0
	struct FNone FindClosestPointOnLine(struct FNone Point, struct FNone LineOrigin, struct FNone LineDirection); // sub_0x3d0cb70
	uint64_t FFloor64(float A); // sub_0x3d0c200
	uint32_t FFloor(float A); // sub_0x3d0c2c0
	float FClamp(float Value, float Min, float MAX); // sub_0x3d0c0f0
	uint64_t FCeil64(float A); // sub_0x3d0bf90
	uint32_t FCeil(float A); // sub_0x3d0c050
	float exp(float A); // sub_0x3d0bf10
	char EqualExactly_VectorVector(struct FNone A, struct FNone B); // sub_0x3d0bd60
	char EqualExactly_Vector4Vector4(struct FNone& A, struct FNone& B); // sub_0x3d0bc30
	char EqualExactly_Vector2DVector2D(struct FNone A, struct FNone B); // sub_0x3d0bb60
	char EqualEqual_VectorVector(struct FNone A, struct FNone B, float ErrorTolerance); // sub_0x3d0ba20
	char EqualEqual_Vector4Vector4(struct FNone& A, struct FNone& B, float ErrorTolerance); // sub_0x3d0b890
	char EqualEqual_Vector2DVector2D(struct FNone A, struct FNone B, float ErrorTolerance); // sub_0x3d0b770
	char EqualEqual_TransformTransform(struct FNone& A, struct FNone& B); // sub_0x3d0b5f0
	char EqualEqual_TimespanTimespan(struct FNone A, struct FNone B); // sub_0x3d0ae00
	char EqualEqual_RotatorRotator(struct FNone A, struct FNone B, float ErrorTolerance); // sub_0x3d0b410
	char EqualEqual_QuatQuat(struct FNone& A, struct FNone& B, float Tolerance); // sub_0x3d0b2b0
	char EqualEqual_ObjectObject(struct FNone* A, struct FNone* B); // sub_0x3d0ad40
	char EqualEqual_NameName(struct FName A, struct FName B); // sub_0x3d0ad40
	char EqualEqual_MatrixMatrix(struct FNone& A, struct FNone& B, float Tolerance); // sub_0x3d0b120
	char EqualEqual_LinearColorLinearColor(struct FNone A, struct FNone B); // sub_0x3d0b040
	char EqualEqual_IntInt(uint32_t A, uint32_t B); // sub_0x3d0af80
	char EqualEqual_Int64Int64(uint64_t A, uint64_t B); // sub_0x3d0ad40
	char EqualEqual_FloatFloat(float A, float B); // sub_0x3d0aeb0
	char EqualEqual_DateTimeDateTime(struct FNone A, struct FNone B); // sub_0x3d0ae00
	char EqualEqual_ClassClass(struct FNone* A, struct FNone* B); // sub_0x3d0ad40
	char EqualEqual_ByteByte(char A, char B); // sub_0x3d0ac80
	char EqualEqual_BoolBool(char A, char B); // sub_0x3d0abb0
	char Equal_IntPointIntPoint(struct FNone A, struct FNone B); // sub_0x3d0be40
	float Ease(float A, float B, float ALPHA, char EasingFunc, float BlendExp, uint32_t Steps); // sub_0x3d0a9f0
	struct FNone DynamicWeightedMovingAverage_FVector(struct FNone CurrentSample, struct FNone PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // sub_0x3d0a6a0
	struct FNone DynamicWeightedMovingAverage_FRotator(struct FNone CurrentSample, struct FNone PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // sub_0x3d0a4f0
	float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // sub_0x3d0a850
	float DotProduct2D(struct FNone A, struct FNone B); // sub_0x3d0a360
	float Dot_VectorVector(struct FNone A, struct FNone B); // sub_0x3d0a420
	struct FNone Divide_VectorVector(struct FNone A, struct FNone B); // sub_0x3d0a230
	struct FNone Divide_VectorInt(struct FNone A, uint32_t B); // sub_0x3d0a0f0
	struct FNone Divide_VectorFloat(struct FNone A, float B); // sub_0x3d09fc0
	struct FNone Divide_Vector4Vector4(struct FNone& A, struct FNone& B); // sub_0x3d09e90
	struct FNone Divide_Vector2dVector2d(struct FNone A, struct FNone B); // sub_0x3d09d90
	struct FNone Divide_Vector2DFloat(struct FNone A, float B); // sub_0x3d09c80
	struct FNone Divide_TimespanFloat(struct FNone A, float Scalar); // sub_0x3d09bb0
	struct FNone Divide_LinearColorLinearColor(struct FNone A, struct FNone B); // sub_0x3d09ad0
	struct FNone Divide_IntPointIntPoint(struct FNone A, struct FNone B); // sub_0x3d099e0
	struct FNone Divide_IntPointInt(struct FNone A, uint32_t B); // sub_0x3d098f0
	uint32_t Divide_IntInt(uint32_t A, uint32_t B); // sub_0x3d09810
	uint64_t Divide_Int64Int64(uint64_t A, uint64_t B); // sub_0x3d09730
	float Divide_FloatFloat(float A, float B); // sub_0x3d095b0
	char Divide_ByteByte(char A, char B); // sub_0x3d094e0
	float DistanceSquared2D(struct FNone v1, struct FNone v2); // sub_0x3d09410
	float Distance2D(struct FNone v1, struct FNone v2); // sub_0x3d09340
	float DegTan(float A); // sub_0x3d09230
	float DegSin(float A); // sub_0x3d091a0
	float DegreesToRadians(float A); // sub_0x3d092c0
	float DegCos(float A); // sub_0x3d09110
	float DegAtan2(float Y, float X); // sub_0x3d08fb0
	float DegAtan(float A); // sub_0x3d09080
	float DegAsin(float A); // sub_0x3d08f10
	float DegAcos(float A); // sub_0x3d08e70
	uint32_t DaysInYear(uint32_t Year); // sub_0x3d08df0
	uint32_t DaysInMonth(uint32_t Year, uint32_t Month); // sub_0x3d08d10
	struct FNone DateTimeMinValue(); // sub_0x34ec5d0
	struct FNone DateTimeMaxValue(); // sub_0x3d08ce0
	char DateTimeFromString(struct FString DateTimeString, struct FNone& Result); // sub_0x3d08b90
	char DateTimeFromIsoString(struct FString IsoString, struct FNone& Result); // sub_0x3d08a40
	float CrossProduct2D(struct FNone A, struct FNone B); // sub_0x3d08870
	struct FNone Cross_VectorVector(struct FNone A, struct FNone B); // sub_0x3d08930
	struct FNone CreateVectorFromYawPitch(float Yaw, float Pitch, float Length); // sub_0x3d08750
	float Cos(float A); // sub_0x3d085e0
	struct FNone ConvertTransformToRelative(struct FNone& Transform, struct FNone& ParentTransform); // sub_0x3d08450
	struct FNone Conv_VectorToVector2D(struct FNone InVector); // sub_0x3d083d0
	struct FNone Conv_VectorToTransform(struct FNone InLocation); // sub_0x3d08330
	struct FNone Conv_VectorToRotator(struct FNone InVec); // sub_0x3d08290
	struct FNone Conv_VectorToQuaterion(struct FNone InVec); // sub_0x3d08200
	struct FNone Conv_VectorToLinearColor(struct FNone InVec); // sub_0x3d08170
	struct FNone Conv_Vector4ToVector(struct FNone& InVector4); // sub_0x3d080c0
	struct FNone Conv_Vector4ToRotator(struct FNone& InVec); // sub_0x3d08010
	struct FNone Conv_Vector4ToQuaterion(struct FNone& InVec); // sub_0x3d07f70
	struct FNone Conv_Vector2DToVector(struct FNone InVector2D, float Z); // sub_0x3d07ea0
	struct FNone Conv_Vector2DToIntPoint(struct FNone InVector2D); // sub_0x3d07df0
	struct FNone Conv_TransformToMatrix(struct FNone& Transform); // sub_0x3d07ce0
	struct FNone Conv_RotatorToVector(struct FNone InRot); // sub_0x3d07c40
	struct FNone Conv_RotatorToTransform(struct FNone& InRotator); // sub_0x3d07b90
	struct FNone Conv_MatrixToTransform(struct FNone& InMatrix); // sub_0x3d07ae0
	struct FNone Conv_MatrixToRotator(struct FNone& InMatrix); // sub_0x3d07a40
	struct FNone Conv_LinearColorToVector(struct FNone InLinearColor); // sub_0x3d079b0
	struct FNone Conv_LinearColorToColor(struct FNone InLinearColor, char InUseSRGB); // sub_0x3d078d0
	struct FNone Conv_IntVectorToVector(struct FNone& InIntVector); // sub_0x3d07810
	struct FNone Conv_IntToIntVector(uint32_t inInt); // sub_0x3d07790
	uint64_t Conv_IntToInt64(uint32_t inInt); // sub_0x3d07710
	float Conv_IntToFloat(uint32_t inInt); // sub_0x3d07690
	char Conv_IntToByte(uint32_t inInt); // sub_0x3d07610
	char Conv_IntToBool(uint32_t inInt); // sub_0x3d07050
	struct FNone Conv_IntPointToVector2D(struct FNone InIntPoint); // sub_0x3d07580
	uint32_t Conv_Int64ToInt(uint64_t inInt); // sub_0x3d07500
	char Conv_Int64ToByte(uint64_t inInt); // sub_0x3d07480
	struct FNone Conv_FloatToVector(float InFloat); // sub_0x3d073f0
	struct FNone Conv_FloatToLinearColor(float InFloat); // sub_0x3d07360
	struct FNone Conv_ColorToLinearColor(struct FNone InColor); // sub_0x3d072d0
	uint32_t Conv_ByteToInt(char InByte); // sub_0x3d07260
	float Conv_ByteToFloat(char InByte); // sub_0x3d071e0
	uint32_t Conv_BoolToInt(char InBool); // sub_0x3d07160
	float Conv_BoolToFloat(char InBool); // sub_0x3d070d0
	char Conv_BoolToByte(char InBool); // sub_0x3d07050
	struct FNone ComposeTransforms(struct FNone& A, struct FNone& B); // sub_0x3d06ec0
	struct FNone ComposeRotators(struct FNone A, struct FNone B); // sub_0x3d06dd0
	char ClassIsChildOf(struct FNone* TestClass, struct FNone* ParentClass); // sub_0x3d06d10
	struct FNone ClampVectorSize(struct FNone A, float Min, float MAX); // sub_0x3d06b50
	uint64_t ClampInt64(uint64_t Value, uint64_t Min, uint64_t MAX); // sub_0x3d06a50
	float ClampAxis(float Angle); // sub_0x3d069d0
	struct FNone ClampAxes2D(struct FNone A, float MinAxisVal, float MaxAxisVal); // sub_0x3d068b0
	float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees); // sub_0x3d067a0
	uint32_t Clamp(uint32_t Value, uint32_t Min, uint32_t MAX); // sub_0x3d066b0
	struct FNone CInterpTo(struct FNone Current, struct FNone Target, float DeltaTime, float InterpSpeed); // sub_0x3d06530
	void BreakVector4(struct FNone& InVec, float& X, float& Y, float& Z, float& W); // sub_0x3d061d0
	void BreakVector2D(struct FNone InVec, float& X, float& Y); // sub_0x3d060b0
	void BreakVector(struct FNone InVec, float& X, float& Y, float& Z); // sub_0x3d063c0
	void BreakTransform(struct FNone& InTransform, struct FNone& Location, struct FNone& Rotation, struct FNone& Scale); // sub_0x3d05e90
	void BreakTimespan2(struct FNone InTimespan, uint32_t& Days, uint32_t& Hours, uint32_t& Minutes, uint32_t& Seconds, uint32_t& FractionNano); // sub_0x3d05a30
	void BreakTimespan(struct FNone InTimespan, uint32_t& Days, uint32_t& Hours, uint32_t& Minutes, uint32_t& Seconds, uint32_t& Milliseconds); // sub_0x3d05c60
	void BreakRotIntoAxes(struct FNone& InRot, struct FNone& X, struct FNone& Y, struct FNone& Z); // sub_0x3d05740
	void BreakRotator(struct FNone InRot, float& Roll, float& Pitch, float& Yaw); // sub_0x3d058c0
	void BreakRandomStream(struct FNone& InRandomStream, uint32_t& InitialSeed); // sub_0x3d05660
	void BreakQualifiedFrameTime(struct FNone& InFrameTime, struct FNone& Frame, struct FNone& FrameRate, float& SubFrame); // sub_0x3d054c0
	void BreakFrameRate(struct FNone& InFrameRate, uint32_t& Numerator, uint32_t& Denominator); // sub_0x3d05390
	void BreakDateTime(struct FNone InDateTime, uint32_t& Year, uint32_t& Month, uint32_t& Day, uint32_t& Hour, uint32_t& Minute, uint32_t& Second, uint32_t& Millisecond); // sub_0x3d050e0
	void BreakColor(struct FNone InColor, float& R, float& G, float& B, float& A); // sub_0x3d04f00
	char BooleanXOR(char A, char B); // sub_0x3d04e40
	char BooleanOR(char A, char B); // sub_0x3d04d70
	char BooleanNOR(char A, char B); // sub_0x3d04ca0
	char BooleanNAND(char A, char B); // sub_0x3d04bd0
	char BooleanAND(char A, char B); // sub_0x3d04b00
	char BMin(char A, char B); // sub_0x3d04a40
	char BMax(char A, char B); // sub_0x3d04980
	float Atan2(float Y, float X); // sub_0x3d04840
	float Atan(float A); // sub_0x3d04900
	float Asin(float A); // sub_0x3d047a0
	uint32_t And_IntInt(uint32_t A, uint32_t B); // sub_0x3d046e0
	uint64_t And_Int64Int64(uint64_t A, uint64_t B); // sub_0x3d04620
	struct FNone Add_VectorVector(struct FNone A, struct FNone B); // sub_0x3d04550
	struct FNone Add_VectorInt(struct FNone A, uint32_t B); // sub_0x3d04470
	struct FNone Add_VectorFloat(struct FNone A, float B); // sub_0x3d04390
	struct FNone Add_Vector4Vector4(struct FNone& A, struct FNone& B); // sub_0x3d04260
	struct FNone Add_Vector2DVector2D(struct FNone A, struct FNone B); // sub_0x3d041a0
	struct FNone Add_Vector2DFloat(struct FNone A, float B); // sub_0x3d040d0
	struct FNone Add_TimespanTimespan(struct FNone A, struct FNone B); // sub_0x3d038c0
	struct FNone Add_QuatQuat(struct FNone& A, struct FNone& B); // sub_0x3d03fc0
	struct FNone Add_MatrixMatrix(struct FNone& A, struct FNone& B); // sub_0x3d03e30
	struct FNone Add_LinearColorLinearColor(struct FNone A, struct FNone B); // sub_0x3d03d50
	struct FNone Add_IntPointIntPoint(struct FNone A, struct FNone B); // sub_0x3d03c80
	struct FNone Add_IntPointInt(struct FNone A, uint32_t B); // sub_0x3d03bb0
	uint32_t Add_IntInt(uint32_t A, uint32_t B); // sub_0x3d03af0
	uint64_t Add_Int64Int64(uint64_t A, uint64_t B); // sub_0x3d03a30
	float Add_FloatFloat(float A, float B); // sub_0x3d03970
	struct FNone Add_DateTimeTimespan(struct FNone A, struct FNone B); // sub_0x3d038c0
	struct FNone Add_DateTimeDateTime(struct FNone A, struct FNone B); // sub_0x3d038c0
	char Add_ByteByte(char A, char B); // sub_0x3d03810
	float Acos(float A); // sub_0x3d03770
	uint64_t Abs_Int64(uint64_t A); // sub_0x3d03660
	uint32_t Abs_Int(uint32_t A); // sub_0x3d036f0
	float Abs(float A); // sub_0x3d035e0
};

// Class Engine.KismetNodeHelperLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetNodeHelperLibrary : UBlueprintFunctionLibrary 
{

	void MarkBit(uint32_t& Data, uint32_t Index); // sub_0x3d30390
	char HasUnmarkedBit(uint32_t Data, uint32_t NumBits); // sub_0x3d2f7e0
	char HasMarkedBit(uint32_t Data, uint32_t NumBits); // sub_0x3d2f720
	char GetValidValue(struct FNone* Enum, char EnumeratorValue); // sub_0x3d2f660
	uint32_t GetUnmarkedBit(uint32_t Data, uint32_t StartIdx, uint32_t NumBits, char bRandom); // sub_0x3d2f530
	uint32_t GetRandomUnmarkedBit(uint32_t Data, uint32_t StartIdx, uint32_t NumBits); // sub_0x3d2f2e0
	uint32_t GetFirstUnmarkedBit(uint32_t Data, uint32_t StartIdx, uint32_t NumBits); // sub_0x3d2f1f0
	char GetEnumeratorValueFromIndex(struct FNone* Enum, char EnumeratorIndex); // sub_0x3d2f130
	struct FString GetEnumeratorUserFriendlyName(struct FNone* Enum, char EnumeratorValue); // sub_0x3d2f020
	struct FName GetEnumeratorName(struct FNone* Enum, char EnumeratorValue); // sub_0x3d2ef60
	void ClearBit(uint32_t& Data, uint32_t Index); // sub_0x3d2cb00
	void ClearAllBits(uint32_t& Data); // sub_0x106c8d0
	char BitIsMarked(uint32_t Data, uint32_t Index); // sub_0x3d2b3f0
};

// Class Engine.KismetRenderingLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetRenderingLibrary : UBlueprintFunctionLibrary 
{

	void SetCastInsetShadowForAllAttachments(struct FNone* PrimitiveComponent, char bCastInsetShadow, char bLightAttachmentsAsGroup); // sub_0x3d31800
	struct FNone* RenderTargetCreateStaticTexture2DEditorOnly(struct FNone* RenderTarget, struct FString Name, char CompressionSettings, char MipSettings); // sub_0x3d30ec0
	void ReleaseRenderTarget2D(struct FNone* TextureRenderTarget); // sub_0x3d30e50
	struct FNone ReadRenderTargetUV(struct FNone* WorldContextObject, struct FNone* TextureRenderTarget, float U, float V); // sub_0x3d30d10
	struct FNone ReadRenderTargetRawUV(struct FNone* WorldContextObject, struct FNone* TextureRenderTarget, float U, float V); // sub_0x3d30bb0
	struct FNone ReadRenderTargetRawPixel(struct FNone* WorldContextObject, struct FNone* TextureRenderTarget, uint32_t X, uint32_t Y); // sub_0x3d30a60
	struct FNone ReadRenderTargetPixel(struct FNone* WorldContextObject, struct FNone* TextureRenderTarget, uint32_t X, uint32_t Y); // sub_0x3d30920
	struct FNone MakeSkinWeightInfo(uint32_t Bone0, char Weight0, uint32_t Bone1, char Weight1, uint32_t Bone2, char Weight2, uint32_t Bone3, char Weight3); // sub_0x3d30130
	struct FNone* ImportFileAsTexture2D(struct FNone* WorldContextObject, struct FString Filename); // sub_0x3d2f990
	struct FNone* ImportBufferAsTexture2D(struct FNone* WorldContextObject, struct TArray<None>& Buffer); // sub_0x3d2f8a0
	void ExportTexture2D(struct FNone* WorldContextObject, struct FNone* Texture, struct FString FilePath, struct FString Filename); // sub_0x3d2ea60
	void ExportRenderTarget(struct FNone* WorldContextObject, struct FNone* TextureRenderTarget, struct FString FilePath, struct FString Filename); // sub_0x3d2e8f0
	void EndDrawCanvasToRenderTarget(struct FNone* WorldContextObject, struct FNone& Context); // sub_0x3d2e5e0
	void DrawMaterialToRenderTarget(struct FNone* WorldContextObject, struct FNone* TextureRenderTarget, struct FNone* Material); // sub_0x3d2e4f0
	struct FNone* CreateRenderTarget2D(struct FNone* WorldContextObject, uint32_t Width, uint32_t Height, char Format, struct FNone ClearColor, char bAutoGenerateMipMaps); // sub_0x3d2e210
	void ConvertRenderTargetToTexture2DEditorOnly(struct FNone* WorldContextObject, struct FNone* RenderTarget, struct FNone* Texture); // sub_0x3d2e120
	void ClearRenderTarget2D(struct FNone* WorldContextObject, struct FNone* TextureRenderTarget, struct FNone ClearColor); // sub_0x3d2cbd0
	void BreakSkinWeightInfo(struct FNone InWeight, uint32_t& Bone0, char& Weight0, uint32_t& Bone1, char& Weight1, uint32_t& Bone2, char& Weight2, uint32_t& Bone3, char& Weight3); // sub_0x3d2b4b0
	void BeginDrawCanvasToRenderTarget(struct FNone* WorldContextObject, struct FNone* TextureRenderTarget, struct FNone*& Canvas, struct FNone& Size, struct FNone& Context); // sub_0x3d2b230
};

// Class Engine.KismetStringLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetStringLibrary : UBlueprintFunctionLibrary 
{

	struct FString TrimTrailing(struct FString SourceString); // sub_0x3d32010
	struct FString Trim(struct FString SourceString); // sub_0x3d31f30
	struct FString ToUpper(struct FString SourceString); // sub_0x3d31e50
	struct FString ToLower(struct FString SourceString); // sub_0x3d31d70
	struct FString TimeSecondsToString(float InSeconds); // sub_0x3d31ca0
	char StartsWith(struct FString SourceString, struct FString InPrefix, char SearchCase); // sub_0x3d31b60
	char Split(struct FString SourceString, struct FString InStr, struct FString& LeftS, struct FString& RightS, char SearchCase, char SearchDir); // sub_0x3d31910
	struct FString RightPad(struct FString SourceString, uint32_t ChCount); // sub_0x3d316e0
	struct FString RightChop(struct FString SourceString, uint32_t Count); // sub_0x3d315c0
	struct FString Right(struct FString SourceString, uint32_t Count); // sub_0x3d314a0
	struct FString Reverse(struct FString SourceString); // sub_0x3d313c0
	uint32_t ReplaceInline(struct FString& SourceString, struct FString SearchText, struct FString ReplacementText, char SearchCase); // sub_0x3d31220
	struct FString Replace(struct FString SourceString, struct FString From, struct FString To, char SearchCase); // sub_0x3d31050
	struct TArray<None> ParseIntoArray(struct FString SourceString, struct FString Delimiter, char CullEmptyStrings); // sub_0x3d307a0
	char NotEqual_StrStr(struct FString A, struct FString B); // sub_0x3d305a0
	char NotEqual_StriStri(struct FString A, struct FString B); // sub_0x3d306a0
	struct FString Mid(struct FString SourceString, uint32_t Start, uint32_t Count); // sub_0x3d2f3d0
	char MatchesWildcard(struct FString SourceString, struct FString Wildcard, char SearchCase); // sub_0x3d30460
	uint32_t Len(struct FString S); // sub_0x3d30090
	struct FString LeftPad(struct FString SourceString, uint32_t ChCount); // sub_0x3d2ff70
	struct FString LeftChop(struct FString SourceString, uint32_t Count); // sub_0x3d2fe50
	struct FString Left(struct FString SourceString, uint32_t Count); // sub_0x3d2fd30
	struct FString JoinStringArray(struct TArray<None>& SourceArray, struct FString Separator); // sub_0x3d2fbb0
	char IsNumeric(struct FString SourceString); // sub_0x3d2fb10
	char IsEmpty(struct FString inString); // sub_0x3d2fa70
	struct FString GetSubstring(struct FString SourceString, uint32_t StartIndex, uint32_t Length); // sub_0x3d2f3d0
	uint32_t GetCharacterAsNumber(struct FString SourceString, uint32_t Index); // sub_0x3d2ee80
	struct TArray<None> GetCharacterArrayFromString(struct FString SourceString); // sub_0x3d2ed90
	uint32_t FindSubstring(struct FString SearchIn, struct FString Substring, char bUseCase, char bSearchFromEnd, uint32_t StartPosition); // sub_0x3d2ebd0
	char EqualEqual_StrStr(struct FString A, struct FString B); // sub_0x3d2e7f0
	char EqualEqual_StriStri(struct FString A, struct FString B); // sub_0x11f0360
	char EndsWith(struct FString SourceString, struct FString InSuffix, char SearchCase); // sub_0x3d2e6b0
	uint32_t CullArray(struct FString SourceString, struct TArray<None>& inArray); // sub_0x3d2e3c0
	struct FString Conv_VectorToString(struct FNone InVec); // sub_0x3d2e050
	struct FString Conv_Vector2dToString(struct FNone InVec); // sub_0x3d2df90
	struct FString Conv_TransformToString(struct FNone& InTrans); // sub_0x3d2de70
	void Conv_StringToVector2D(struct FString inString, struct FNone& OutConvertedVector2D, char& OutIsValid); // sub_0x3d2dbf0
	void Conv_StringToVector(struct FString inString, struct FNone& OutConvertedVector, char& OutIsValid); // sub_0x3d2dd30
	void Conv_StringToRotator(struct FString inString, struct FNone& OutConvertedRotator, char& OutIsValid); // sub_0x3d2dab0
	struct FName Conv_StringToName(struct FString inString); // sub_0x3d2da00
	uint32_t Conv_StringToInt(struct FString inString); // sub_0x3d2d960
	float Conv_StringToFloat(struct FString inString); // sub_0x3d2d8c0
	void Conv_StringToColor(struct FString inString, struct FNone& OutConvertedColor, char& OutIsValid); // sub_0x3d2d780
	struct FString Conv_RotatorToString(struct FNone InRot); // sub_0x3d2d6b0
	struct FString Conv_ObjectToString(struct FNone* InObj); // sub_0x3d2d5e0
	struct FString Conv_NameToString(struct FName InName); // sub_0x34461d0
	struct FString Conv_MatrixToString(struct FNone& InMatrix); // sub_0x3d2d510
	struct FString Conv_IntVectorToString(struct FNone InIntVec); // sub_0x3d2d440
	struct FString Conv_IntToString(uint32_t inInt); // sub_0x3d2d380
	struct FString Conv_IntPointToString(struct FNone InIntPoint); // sub_0x3d2d2c0
	struct FString Conv_FloatToString(float InFloat); // sub_0x3d2d1f0
	struct FString Conv_ColorToString(struct FNone InColor); // sub_0x3d2d120
	struct FString Conv_ByteToString(char InByte); // sub_0x3d2d060
	struct FString Conv_BoolToString(char InBool); // sub_0x3d2cf90
	char Contains(struct FString SearchIn, struct FString Substring, char bUseCase, char bSearchFromEnd); // sub_0x3d2ce10
	struct FString Concat_StrStr(struct FString A, struct FString B); // sub_0x3d2ccd0
	struct FString BuildString_Vector2d(struct FString AppendTo, struct FString Prefix, struct FNone InVector2D, struct FString Suffix); // sub_0x3d2c740
	struct FString BuildString_Vector(struct FString AppendTo, struct FString Prefix, struct FNone InVector, struct FString Suffix); // sub_0x3d2c910
	struct FString BuildString_Rotator(struct FString AppendTo, struct FString Prefix, struct FNone InRot, struct FString Suffix); // sub_0x3d2c550
	struct FString BuildString_Object(struct FString AppendTo, struct FString Prefix, struct FNone* InObj, struct FString Suffix); // sub_0x3d2c370
	struct FString BuildString_Name(struct FString AppendTo, struct FString Prefix, struct FName InName, struct FString Suffix); // sub_0x3d2c190
	struct FString BuildString_IntVector(struct FString AppendTo, struct FString Prefix, struct FNone InIntVector, struct FString Suffix); // sub_0x3d2bfa0
	struct FString BuildString_Int(struct FString AppendTo, struct FString Prefix, uint32_t inInt, struct FString Suffix); // sub_0x3d2bdd0
	struct FString BuildString_Float(struct FString AppendTo, struct FString Prefix, float InFloat, struct FString Suffix); // sub_0x3d2bbf0
	struct FString BuildString_Color(struct FString AppendTo, struct FString Prefix, struct FNone InColor, struct FString Suffix); // sub_0x3d2ba10
	struct FString BuildString_Bool(struct FString AppendTo, struct FString Prefix, char InBool, struct FString Suffix); // sub_0x3d2b830
};

// Class Engine.KismetStringTableLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetStringTableLibrary : UBlueprintFunctionLibrary 
{

	char IsRegisteredTableId(struct FName TableID); // sub_0x3d3faf0
	char IsRegisteredTableEntry(struct FName TableID, struct FString Key); // sub_0x3d3fa10
	struct FString GetTableNamespace(struct FName TableID); // sub_0x3d3f6c0
	struct FString GetTableEntrySourceString(struct FName TableID, struct FString Key); // sub_0x3d3f5a0
	struct FString GetTableEntryMetaData(struct FName TableID, struct FString Key, struct FName MetaDataId); // sub_0x3d3f440
	struct TArray<None> GetRegisteredStringTables(); // sub_0x3d3f130
	struct TArray<None> GetMetaDataIdsFromStringTableEntry(struct FName TableID, struct FString Key); // sub_0x3d3e4b0
	struct TArray<None> GetKeysFromStringTable(struct FName TableID); // sub_0x3d3e360
};

// Class Engine.KismetSystemLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetSystemLibrary : UBlueprintFunctionLibrary 
{

	void UnregisterForRemoteNotifications(); // sub_0x3d449c0
	void UnloadPrimaryAssetList(struct TArray<None>& PrimaryAssetIdList); // sub_0x3d48260
	void UnloadPrimaryAsset(struct FNone PrimaryAssetId); // sub_0x3d481e0
	void TransactObject(struct FNone* Object); // sub_0x3d3ae10
	void StackTrace(); // sub_0x3d481c0
	char SphereTraceSingleForObjects(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, float Radius, struct TArray<None>& ObjectTypes, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct FNone& OutHit, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d47d40
	char SphereTraceSingleByProfile(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, float Radius, struct FName ProfileName, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct FNone& OutHit, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d478e0
	char SphereTraceSingle(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, float Radius, char TraceChannel, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct FNone& OutHit, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d47480
	char SphereTraceMultiForObjects(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, float Radius, struct TArray<None>& ObjectTypes, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct TArray<None>& OutHits, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d47030
	char SphereTraceMultiByProfile(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, float Radius, struct FName ProfileName, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct TArray<None>& OutHits, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d46c10
	char SphereTraceMulti(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, float Radius, char TraceChannel, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct TArray<None>& OutHits, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d467f0
	char SphereOverlapComponents(struct FNone* WorldContextObject, struct FNone SpherePos, float SphereRadius, struct TArray<None>& ObjectTypes, struct FNone* ComponentClassFilter, struct TArray<None>& ActorsToIgnore, struct TArray<None>& OutComponents); // sub_0x3d46570
	char SphereOverlapActors(struct FNone* WorldContextObject, struct FNone SpherePos, float SphereRadius, struct TArray<None>& ObjectTypes, struct FNone* ActorClassFilter, struct TArray<None>& ActorsToIgnore, struct TArray<None>& OutActors); // sub_0x3d462f0
	void SnapshotObject(struct FNone* Object); // sub_0x3d3ae10
	void ShowPlatformSpecificLeaderboardScreen(struct FString CategoryName); // sub_0x3d46260
	void ShowPlatformSpecificAchievementsScreen(struct FNone* SpecificPlayer); // sub_0x3d461f0
	void ShowInterstitialAd(); // sub_0x3d461d0
	void ShowAdBanner(uint32_t AdIdIndex, char bShowOnBottomOfScreen); // sub_0x3d46120
	void SetWindowTitle(struct FText& Title); // sub_0x3d46060
	void SetVolumeButtonsHandledBySystem(char bEnabled); // sub_0x3d3a480
	void SetVectorPropertyByName(struct FNone* Object, struct FName PropertyName, struct FNone& Value); // sub_0x3d45f60
	void SetUserActivity(struct FNone& UserActivity); // sub_0x3d45ec0
	void SetTransformPropertyByName(struct FNone* Object, struct FName PropertyName, struct FNone& Value); // sub_0x3d45d70
	void SetTextPropertyByName(struct FNone* Object, struct FName PropertyName, struct FText& Value); // sub_0x3d45c30
	void SetSuppressViewportTransitionMessage(struct FNone* WorldContextObject, char bState); // sub_0x3d45b70
	void SetStructurePropertyByName(struct FNone* Object, struct FName PropertyName, struct FNone& Value); // sub_0x3d44de0
	void SetStringPropertyByName(struct FNone* Object, struct FName PropertyName, struct FString Value); // sub_0x3d45a60
	void SetSoftObjectPropertyByName(struct FNone* Object, struct FName PropertyName, struct TSoftObjectPtr<FNone>& Value); // sub_0x3d45920
	void SetSoftClassPropertyByName(struct FNone* Object, struct FName PropertyName, struct TSoftClassPtr<UObject>& Value); // sub_0x3d457e0
	void SetRotatorPropertyByName(struct FNone* Object, struct FName PropertyName, struct FNone& Value); // sub_0x3d456e0
	void SetObjectPropertyByName(struct FNone* Object, struct FName PropertyName, struct FNone* Value); // sub_0x3d455f0
	void SetNamePropertyByName(struct FNone* Object, struct FName PropertyName, struct FName& Value); // sub_0x3d454f0
	void SetLinearColorPropertyByName(struct FNone* Object, struct FName PropertyName, struct FNone& Value); // sub_0x3d453f0
	void SetIntPropertyByName(struct FNone* Object, struct FName PropertyName, uint32_t Value); // sub_0x3d451f0
	void SetInterfacePropertyByName(struct FNone* Object, struct FName PropertyName, struct TScriptInterface<INone>& Value); // sub_0x3d452e0
	void SetInt64PropertyByName(struct FNone* Object, struct FName PropertyName, uint64_t Value); // sub_0x3d45100
	void SetGamepadsBlockDeviceFeedback(char bBlock); // sub_0x3d3a480
	void SetFloatPropertyByName(struct FNone* Object, struct FName PropertyName, float Value); // sub_0x3d45000
	void SetFieldPathPropertyByName(struct FNone* Object, struct FName PropertyName, struct TFieldPath<FNone>& Value); // sub_0x3d44ed0
	void SetCollisionProfileNameProperty(struct FNone* Object, struct FName PropertyName, struct FNone& Value); // sub_0x3d44de0
	void SetClassPropertyByName(struct FNone* Object, struct FName PropertyName, struct FNone* Value); // sub_0x3d44cf0
	void SetBytePropertyByName(struct FNone* Object, struct FName PropertyName, char Value); // sub_0x3d44c00
	void SetBoolPropertyByName(struct FNone* Object, struct FName PropertyName, char Value); // sub_0x3d44b00
	void RetriggerableDelay(struct FNone* WorldContextObject, float Duration, struct FNone LatentInfo); // sub_0x3d449e0
	void ResetGamepadAssignmentToController(uint32_t ControllerId); // sub_0x185a490
	void ResetGamepadAssignments(); // sub_0x124b650
	void RegisterForRemoteNotifications(); // sub_0x3d449c0
	void QuitGame(struct FNone* WorldContextObject, struct FNone* SpecificPlayer, char QuitPreference, char bIgnorePlatformRestrictions); // sub_0x3d44880
	void PrintWarning(struct FString inString); // sub_0x1075670
	void PrintText(struct FNone* WorldContextObject, struct FText InText, char bPrintToScreen, char bPrintToLog, struct FNone TextColor, float Duration); // sub_0x3d44640
	void PrintString(struct FNone* WorldContextObject, struct FString inString, char bPrintToScreen, char bPrintToLog, struct FNone TextColor, float Duration); // sub_0x3d44450
	void OnAssetLoaded__DelegateSignature(struct FNone* Loaded); // sub_0x239bfb0
	void OnAssetClassLoaded__DelegateSignature(struct FNone* Loaded); // sub_0x239bfb0
	char NotEqual_SoftObjectReference(struct TSoftObjectPtr<FNone>& A, struct TSoftObjectPtr<FNone>& B); // sub_0x3d44300
	char NotEqual_SoftClassReference(struct TSoftClassPtr<UObject>& A, struct TSoftClassPtr<UObject>& B); // sub_0x3d44300
	char NotEqual_PrimaryAssetType(struct FNone A, struct FNone B); // sub_0x3447570
	char NotEqual_PrimaryAssetId(struct FNone A, struct FNone B); // sub_0x3d44220
	struct FString NormalizeFilename(struct FString InFilename); // sub_0x3d44140
	void MoveComponentTo(struct FNone* Component, struct FNone TargetRelativeLocation, struct FNone TargetRelativeRotation, char bEaseOut, char bEaseIn, float OverTime, char bForceShortestRotationPath, char MoveAction, struct FNone LatentInfo); // sub_0x3d43e80
	struct FNone MakeSoftObjectPath(struct FString PathString); // sub_0x3d43d90
	struct FNone MakeSoftClassPath(struct FString PathString); // sub_0x3d43cd0
	struct FText MakeLiteralText(struct FText Value); // sub_0x3d43b40
	struct FString MakeLiteralString(struct FString Value); // sub_0x3d439f0
	struct FName MakeLiteralName(struct FName Value); // sub_0x3d43970
	uint32_t MakeLiteralInt(uint32_t Value); // sub_0x176c500
	float MakeLiteralFloat(float Value); // sub_0x3d438f0
	char MakeLiteralByte(char Value); // sub_0x3d43880
	char MakeLiteralBool(char Value); // sub_0x3d07050
	void LoadInterstitialAd(uint32_t AdIdIndex); // sub_0x3d43810
	struct FNone* LoadClassAsset_Blocking(struct TSoftClassPtr<UObject> AssetClass); // sub_0x3d436f0
	void LoadAssetClass(struct FNone* WorldContextObject, struct TSoftClassPtr<UObject> AssetClass, struct FDelegate OnLoaded, struct FNone LatentInfo); // sub_0x3d433d0
	struct FNone* LoadAsset_Blocking(struct TSoftObjectPtr<FNone> Asset); // sub_0x3d435d0
	void LoadAsset(struct FNone* WorldContextObject, struct TSoftObjectPtr<FNone> Asset, struct FDelegate OnLoaded, struct FNone LatentInfo); // sub_0x3d431d0
	char LineTraceSingleForObjects(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, struct TArray<None>& ObjectTypes, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct FNone& OutHit, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d42d90
	char LineTraceSingleByProfile(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, struct FName ProfileName, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct FNone& OutHit, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d42970
	char LineTraceSingle(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, char TraceChannel, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct FNone& OutHit, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d42550
	char LineTraceMultiForObjects(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, struct TArray<None>& ObjectTypes, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct TArray<None>& OutHits, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d42150
	char LineTraceMultiByProfile(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, struct FName ProfileName, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct TArray<None>& OutHits, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d41d80
	char LineTraceMulti(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, char TraceChannel, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct TArray<None>& OutHits, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d419b0
	void LaunchURL(struct FString URL); // sub_0x3d41920
	void K2_UnPauseTimerHandle(struct FNone* WorldContextObject, struct FNone Handle); // sub_0x3d41870
	void K2_UnPauseTimerDelegate(struct FDelegate Delegate); // sub_0x3d417e0
	void K2_UnPauseTimer(struct FNone* Object, struct FString FunctionName); // sub_0x3d416b0
	char K2_TimerExistsHandle(struct FNone* WorldContextObject, struct FNone Handle); // sub_0x3d415f0
	char K2_TimerExistsDelegate(struct FDelegate Delegate); // sub_0x3d41550
	char K2_TimerExists(struct FNone* Object, struct FString FunctionName); // sub_0x3d41420
	struct FNone K2_SetTimerDelegate(struct FDelegate Delegate, float Time, char bLooping, float InitialStartDelay, float InitialStartDelayVariance); // sub_0x3d41290
	struct FNone K2_SetTimer(struct FNone* Object, struct FString FunctionName, float Time, char bLooping, float InitialStartDelay, float InitialStartDelayVariance); // sub_0x3d41050
	void K2_PauseTimerHandle(struct FNone* WorldContextObject, struct FNone Handle); // sub_0x3d40fa0
	void K2_PauseTimerDelegate(struct FDelegate Delegate); // sub_0x3d40f10
	void K2_PauseTimer(struct FNone* Object, struct FString FunctionName); // sub_0x3d40de0
	char K2_IsValidTimerHandle(struct FNone Handle); // sub_0x3d40d60
	char K2_IsTimerPausedHandle(struct FNone* WorldContextObject, struct FNone Handle); // sub_0x3d40ca0
	char K2_IsTimerPausedDelegate(struct FDelegate Delegate); // sub_0x3d40c00
	char K2_IsTimerPaused(struct FNone* Object, struct FString FunctionName); // sub_0x3d40ad0
	char K2_IsTimerActiveHandle(struct FNone* WorldContextObject, struct FNone Handle); // sub_0x3d40a10
	char K2_IsTimerActiveDelegate(struct FDelegate Delegate); // sub_0x3d40970
	char K2_IsTimerActive(struct FNone* Object, struct FString FunctionName); // sub_0x3d40840
	struct FNone K2_InvalidateTimerHandle(struct FNone& Handle); // sub_0x3d407a0
	float K2_GetTimerRemainingTimeHandle(struct FNone* WorldContextObject, struct FNone Handle); // sub_0x3d406e0
	float K2_GetTimerRemainingTimeDelegate(struct FDelegate Delegate); // sub_0x3d40640
	float K2_GetTimerRemainingTime(struct FNone* Object, struct FString FunctionName); // sub_0x3d40510
	float K2_GetTimerElapsedTimeHandle(struct FNone* WorldContextObject, struct FNone Handle); // sub_0x3d40450
	float K2_GetTimerElapsedTimeDelegate(struct FDelegate Delegate); // sub_0x3d403b0
	float K2_GetTimerElapsedTime(struct FNone* Object, struct FString FunctionName); // sub_0x3d40280
	void K2_ClearTimerHandle(struct FNone* WorldContextObject, struct FNone Handle); // sub_0x3d401d0
	void K2_ClearTimerDelegate(struct FDelegate Delegate); // sub_0x3d40140
	void K2_ClearTimer(struct FNone* Object, struct FString FunctionName); // sub_0x3d40010
	void K2_ClearAndInvalidateTimerHandle(struct FNone* WorldContextObject, struct FNone& Handle); // sub_0x3d3ff50
	char IsValidSoftObjectReference(struct TSoftObjectPtr<FNone>& SoftObjectReference); // sub_0x3d3fe90
	char IsValidSoftClassReference(struct TSoftClassPtr<UObject>& SoftClassReference); // sub_0x3d3fe90
	char IsValidPrimaryAssetType(struct FNone PrimaryAssetType); // sub_0x3446d80
	char IsValidPrimaryAssetId(struct FNone PrimaryAssetId); // sub_0x3d3fe00
	char IsValidClass(struct FNone* Class); // sub_0x3d3fd20
	char IsValid(struct FNone* Object); // sub_0x3d3fd20
	char IsUnattended(); // sub_0x3d3fcf0
	char IsStandalone(struct FNone* WorldContextObject); // sub_0x3d3fc70
	char IsSplitScreen(struct FNone* WorldContextObject); // sub_0x3d3fbf0
	char IsServer(struct FNone* WorldContextObject); // sub_0x3d3fb70
	char IsScreensaverEnabled(); // sub_0x10650f0
	char IsPackagedForDistribution(); // sub_0x106b960
	char IsLoggedIn(struct FNone* SpecificPlayer); // sub_0x3d3f990
	char IsInterstitialAdRequested(); // sub_0x3d3f960
	char IsInterstitialAdAvailable(); // sub_0x3d3f930
	char IsDedicatedServer(struct FNone* WorldContextObject); // sub_0x3d3f8b0
	char IsControllerAssignedToGamepad(uint32_t ControllerId); // sub_0x3d3f830
	void HideAdBanner(); // sub_0x3d3f810
	char GetVolumeButtonsHandledBySystem(); // sub_0x106b960
	struct FString GetUniqueDeviceId(); // sub_0x3d3f790
	char GetSupportedFullscreenResolutions(struct TArray<None>& Resolutions); // sub_0x3d3f390
	struct TSoftObjectPtr<FNone> GetSoftObjectReferenceFromPrimaryAssetId(struct FNone PrimaryAssetId); // sub_0x3d3f2d0
	struct TSoftClassPtr<UObject> GetSoftClassReferenceFromPrimaryAssetId(struct FNone PrimaryAssetId); // sub_0x3d3f210
	uint32_t GetRenderingMaterialQualityLevel(); // sub_0x3d3f1e0
	uint32_t GetRenderingDetailMode(); // sub_0x3d3f1b0
	struct FString GetProjectSavedDirectory(); // sub_0x3d3f0b0
	struct FString GetProjectDirectory(); // sub_0x3d3f030
	struct FString GetProjectContentDirectory(); // sub_0x3d3efb0
	void GetPrimaryAssetsWithBundleState(struct TArray<None>& RequiredBundles, struct TArray<None>& ExcludedBundles, struct TArray<None>& ValidTypes, char bForceCurrentState, struct TArray<None>& OutPrimaryAssetIdList); // sub_0x3d3ed90
	void GetPrimaryAssetIdList(struct FNone PrimaryAssetType, struct TArray<None>& OutPrimaryAssetIdList); // sub_0x3d3ecb0
	struct FNone GetPrimaryAssetIdFromSoftObjectReference(struct TSoftObjectPtr<FNone> SoftObjectReference); // sub_0x3d3eb80
	struct FNone GetPrimaryAssetIdFromSoftClassReference(struct TSoftClassPtr<UObject> SoftClassReference); // sub_0x3d3eb80
	struct FNone GetPrimaryAssetIdFromObject(struct FNone* Object); // sub_0x3d3eaf0
	struct FNone GetPrimaryAssetIdFromClass(struct FNone* Class); // sub_0x3d3ea60
	struct TArray<None> GetPreferredLanguages(); // sub_0x3d3e9e0
	struct FString GetPlatformUserName(); // sub_0x3d3e960
	struct FString GetPlatformUserDir(); // sub_0x3d3e8e0
	struct FString GetPathName(struct FNone* Object); // sub_0x3d3e810
	struct FNone* GetOuterObject(struct FNone* Object); // sub_0x3d3e790
	struct FString GetObjectName(struct FNone* Object); // sub_0x3d3e6c0
	struct FNone* GetObjectFromPrimaryAssetId(struct FNone PrimaryAssetId); // sub_0x3d3e630
	uint32_t GetMinYResolutionForUI(); // sub_0x3d3e600
	uint32_t GetMinYResolutionFor3DView(); // sub_0x3d3e5d0
	struct FString GetLocalCurrencySymbol(); // sub_0x3d3e430
	struct FString GetLocalCurrencyCode(); // sub_0x3d3e430
	float GetGameTimeInSeconds(struct FNone* WorldContextObject); // sub_0x3cd2050
	struct FString GetGamepadControllerName(uint32_t ControllerId); // sub_0x3d3e2a0
	struct FString GetGameName(); // sub_0x3d3e220
	struct FString GetGameBundleId(); // sub_0x3d3e1a0
	uint64_t GetFrameCount(); // sub_0x3d3e170
	struct FString GetEngineVersion(); // sub_0x3d3e0f0
	struct FString GetDisplayName(struct FNone* Object); // sub_0x3d3e020
	struct FString GetDeviceId(); // sub_0x3d3dfa0
	struct FString GetDefaultLocale(); // sub_0x3d3df20
	struct FString GetDefaultLanguage(); // sub_0x3d3dea0
	char GetCurrentBundleState(struct FNone PrimaryAssetId, char bForceCurrentState, struct TArray<None>& OutBundles); // sub_0x3d3dd50
	char GetConvenientWindowedResolutions(struct TArray<None>& Resolutions); // sub_0x3d3dca0
	uint32_t GetConsoleVariableIntValue(struct FString VariableName); // sub_0x3d3dc00
	float GetConsoleVariableFloatValue(struct FString VariableName); // sub_0x3d3db60
	char GetConsoleVariableBoolValue(struct FString VariableName); // sub_0x3d3dac0
	void GetComponentBounds(struct FNone* Component, struct FNone& Origin, struct FNone& BoxExtent, float& SphereRadius); // sub_0x3d3d960
	struct FString GetCommandLine(); // sub_0x3d3d8e0
	struct FNone* GetClassFromPrimaryAssetId(struct FNone PrimaryAssetId); // sub_0x3d3d840
	struct FString GetClassDisplayName(struct FNone* Class); // sub_0x3d3d770
	uint32_t GetAdIDCount(); // sub_0x3d3d740
	void GetActorListFromComponentList(struct TArray<None>& ComponentList, struct FNone* ActorClassFilter, struct TArray<None>& OutActorList); // sub_0x3d3d5f0
	void GetActorBounds(struct FNone* Actor, struct FNone& Origin, struct FNone& BoxExtent); // sub_0x3d3d4e0
	void ForceCloseAdBanner(); // sub_0x3d3d4c0
	void FlushPersistentDebugLines(struct FNone* WorldContextObject); // sub_0x3d3ae10
	void FlushDebugStrings(struct FNone* WorldContextObject); // sub_0x3d3ae10
	void ExecuteConsoleCommand(struct FNone* WorldContextObject, struct FString Command, struct FNone* SpecificPlayer); // sub_0x3d3d3b0
	char EqualEqual_SoftObjectReference(struct TSoftObjectPtr<FNone>& A, struct TSoftObjectPtr<FNone>& B); // sub_0x3d3d260
	char EqualEqual_SoftClassReference(struct TSoftClassPtr<UObject>& A, struct TSoftClassPtr<UObject>& B); // sub_0x3d3d260
	char EqualEqual_PrimaryAssetType(struct FNone A, struct FNone B); // sub_0x3445df0
	char EqualEqual_PrimaryAssetId(struct FNone A, struct FNone B); // sub_0x3d3d180
	uint32_t EndTransaction(); // sub_0x106c820
	void DrawDebugString(struct FNone* WorldContextObject, struct FNone TextLocation, struct FString Text, struct FNone* TestBaseActor, struct FNone TextColor, float Duration); // sub_0x3d3cf90
	void DrawDebugSphere(struct FNone* WorldContextObject, struct FNone Center, float Radius, uint32_t Segments, struct FNone LineColor, float Duration, float Thickness); // sub_0x3d3cd80
	void DrawDebugPoint(struct FNone* WorldContextObject, struct FNone Position, float Size, struct FNone PointColor, float Duration); // sub_0x3d3cbf0
	void DrawDebugPlane(struct FNone* WorldContextObject, struct FNone& PlaneCoordinates, struct FNone Location, float Size, struct FNone PlaneColor, float Duration); // sub_0x3d3ca20
	void DrawDebugLine(struct FNone* WorldContextObject, struct FNone LineStart, struct FNone LineEnd, struct FNone LineColor, float Duration, float Thickness); // sub_0x3d3c840
	void DrawDebugFrustum(struct FNone* WorldContextObject, struct FNone& FrustumTransform, struct FNone FrustumColor, float Duration, float Thickness); // sub_0x3d3c650
	void DrawDebugFloatHistoryTransform(struct FNone* WorldContextObject, struct FNone& FloatHistory, struct FNone& DrawTransform, struct FNone DrawSize, struct FNone DrawColor, float Duration); // sub_0x3d3c3f0
	void DrawDebugFloatHistoryLocation(struct FNone* WorldContextObject, struct FNone& FloatHistory, struct FNone DrawLocation, struct FNone DrawSize, struct FNone DrawColor, float Duration); // sub_0x3d3c1e0
	void DrawDebugCylinder(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, float Radius, uint32_t Segments, struct FNone LineColor, float Duration, float Thickness); // sub_0x3d3bf90
	void DrawDebugCoordinateSystem(struct FNone* WorldContextObject, struct FNone AxisLoc, struct FNone AxisRot, float Scale, float Duration, float Thickness); // sub_0x3d3bdc0
	void DrawDebugConeInDegrees(struct FNone* WorldContextObject, struct FNone Origin, struct FNone Direction, float Length, float AngleWidth, float AngleHeight, uint32_t NumSides, struct FNone LineColor, float Duration, float Thickness); // sub_0x3d3bae0
	void DrawDebugCone(struct FNone* WorldContextObject, struct FNone Origin, struct FNone Direction, float Length, float AngleWidth, float AngleHeight, uint32_t NumSides, struct FNone LineColor, float Duration, float Thickness); // sub_0x3d3bae0
	void DrawDebugCircle(struct FNone* WorldContextObject, struct FNone Center, float Radius, uint32_t NumSegments, struct FNone LineColor, float Duration, float Thickness, struct FNone YAxis, struct FNone ZAxis, char bDrawAxis); // sub_0x3d3b800
	void DrawDebugCapsule(struct FNone* WorldContextObject, struct FNone Center, float HalfHeight, float Radius, struct FNone Rotation, struct FNone LineColor, float Duration, float Thickness); // sub_0x3d3b5a0
	void DrawDebugCamera(struct FNone* CameraActor, struct FNone CameraColor, float Duration); // sub_0x3d3b4a0
	void DrawDebugBox(struct FNone* WorldContextObject, struct FNone Center, struct FNone Extent, struct FNone LineColor, struct FNone Rotation, float Duration, float Thickness); // sub_0x3d3b280
	void DrawDebugArrow(struct FNone* WorldContextObject, struct FNone LineStart, struct FNone LineEnd, float ArrowSize, struct FNone LineColor, float Duration, float Thickness); // sub_0x3d3b060
	char DoesImplementInterface(struct FNone* TestObject, struct FNone* Interface); // sub_0x3d3afa0
	void Delay(struct FNone* WorldContextObject, float Duration, struct FNone LatentInfo); // sub_0x3d3ae80
	void CreateCopyForUndoBuffer(struct FNone* ObjectToModify); // sub_0x3d3ae10
	struct FString ConvertToRelativePath(struct FString Filename); // sub_0x3d3ad30
	struct FString ConvertToAbsolutePath(struct FString Filename); // sub_0x3d3ac50
	struct TSoftObjectPtr<FNone> Conv_SoftObjPathToSoftObjRef(struct FNone& SoftObjectPath); // sub_0x3d3aab0
	struct FString Conv_SoftObjectReferenceToString(struct TSoftObjectPtr<FNone>& SoftObjectReference); // sub_0x3d3a9a0
	struct FNone* Conv_SoftObjectReferenceToObject(struct TSoftObjectPtr<FNone>& SoftObject); // sub_0x3d3ab90
	struct FString Conv_SoftClassReferenceToString(struct TSoftClassPtr<UObject>& SoftClassReference); // sub_0x3d3a9a0
	struct FNone* Conv_SoftClassReferenceToClass(struct TSoftClassPtr<UObject>& SoftClass); // sub_0x3d3a8d0
	struct TSoftClassPtr<UObject> Conv_SoftClassPathToSoftClassRef(struct FNone& SoftClassPath); // sub_0x3d3a7f0
	struct FString Conv_PrimaryAssetTypeToString(struct FNone PrimaryAssetType); // sub_0x34461d0
	struct FString Conv_PrimaryAssetIdToString(struct FNone PrimaryAssetId); // sub_0x3d3a710
	struct TSoftObjectPtr<FNone> Conv_ObjectToSoftObjectReference(struct FNone* Object); // sub_0x3d3a660
	struct FNone* Conv_InterfaceToObject(struct TScriptInterface<INone>& Interface); // sub_0x3d3a5c0
	struct TSoftClassPtr<UObject> Conv_ClassToSoftClassReference(struct FNone*& Class); // sub_0x3d3a500
	void ControlScreensaver(char bAllowScreenSaver); // sub_0x3d3a480
	char ComponentOverlapComponents(struct FNone* Component, struct FNone& ComponentTransform, struct TArray<None>& ObjectTypes, struct FNone* ComponentClassFilter, struct TArray<None>& ActorsToIgnore, struct TArray<None>& OutComponents); // sub_0x3d3a1f0
	char ComponentOverlapActors(struct FNone* Component, struct FNone& ComponentTransform, struct TArray<None>& ObjectTypes, struct FNone* ActorClassFilter, struct TArray<None>& ActorsToIgnore, struct TArray<None>& OutActors); // sub_0x3d39f60
	void CollectGarbage(); // sub_0x3d39f40
	char CapsuleTraceSingleForObjects(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, float Radius, float HalfHeight, struct TArray<None>& ObjectTypes, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct FNone& OutHit, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d39a80
	char CapsuleTraceSingleByProfile(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, float Radius, float HalfHeight, struct FName ProfileName, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct FNone& OutHit, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d395e0
	char CapsuleTraceSingle(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, float Radius, float HalfHeight, char TraceChannel, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct FNone& OutHit, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d39140
	char CapsuleTraceMultiForObjects(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, float Radius, float HalfHeight, struct TArray<None>& ObjectTypes, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct TArray<None>& OutHits, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d38ca0
	char CapsuleTraceMultiByProfile(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, float Radius, float HalfHeight, struct FName ProfileName, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct TArray<None>& OutHits, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d38830
	char CapsuleTraceMulti(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, float Radius, float HalfHeight, char TraceChannel, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct TArray<None>& OutHits, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d383c0
	char CapsuleOverlapComponents(struct FNone* WorldContextObject, struct FNone CapsulePos, float Radius, float HalfHeight, struct TArray<None>& ObjectTypes, struct FNone* ComponentClassFilter, struct TArray<None>& ActorsToIgnore, struct TArray<None>& OutComponents); // sub_0x3d38100
	char CapsuleOverlapActors(struct FNone* WorldContextObject, struct FNone CapsulePos, float Radius, float HalfHeight, struct TArray<None>& ObjectTypes, struct FNone* ActorClassFilter, struct TArray<None>& ActorsToIgnore, struct TArray<None>& OutActors); // sub_0x3d37e40
	char CanLaunchURL(struct FString URL); // sub_0x3d37da0
	void CancelTransaction(uint32_t Index); // sub_0x185a490
	void BreakSoftObjectPath(struct FNone InSoftObjectPath, struct FString& PathString); // sub_0x3d37c50
	void BreakSoftClassPath(struct FNone InSoftClassPath, struct FString& PathString); // sub_0x3d37c50
	char BoxTraceSingleForObjects(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, struct FNone HalfSize, struct FNone Orientation, struct TArray<None>& ObjectTypes, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct FNone& OutHit, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d37770
	char BoxTraceSingleByProfile(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, struct FNone HalfSize, struct FNone Orientation, struct FName ProfileName, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct FNone& OutHit, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d372b0
	char BoxTraceSingle(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, struct FNone HalfSize, struct FNone Orientation, char TraceChannel, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct FNone& OutHit, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d36df0
	char BoxTraceMultiForObjects(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, struct FNone HalfSize, struct FNone Orientation, struct TArray<None>& ObjectTypes, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct TArray<None>& OutHits, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d36940
	char BoxTraceMultiByProfile(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, struct FNone HalfSize, struct FNone Orientation, struct FName ProfileName, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct TArray<None>& OutHits, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d364b0
	char BoxTraceMulti(struct FNone* WorldContextObject, struct FNone Start, struct FNone End, struct FNone HalfSize, struct FNone Orientation, char TraceChannel, char bTraceComplex, struct TArray<None>& ActorsToIgnore, char DrawDebugType, struct TArray<None>& OutHits, char bIgnoreSelf, struct FNone TraceColor, struct FNone TraceHitColor, float DrawTime); // sub_0x3d36020
	char BoxOverlapComponents(struct FNone* WorldContextObject, struct FNone BoxPos, struct FNone Extent, struct TArray<None>& ObjectTypes, struct FNone* ComponentClassFilter, struct TArray<None>& ActorsToIgnore, struct TArray<None>& OutComponents); // sub_0x3d35d90
	char BoxOverlapActors(struct FNone* WorldContextObject, struct FNone BoxPos, struct FNone BoxExtent, struct TArray<None>& ObjectTypes, struct FNone* ActorClassFilter, struct TArray<None>& ActorsToIgnore, struct TArray<None>& OutActors); // sub_0x3d35b00
	uint32_t BeginTransaction(struct FString Context, struct FText Description, struct FNone* PrimaryObject); // sub_0x3d35990
	struct FNone AddFloatHistorySample(float Value, struct FNone& FloatHistory); // sub_0x3d35830
};

// Class Engine.KismetTextLibrary
// Size: 0x28 (Inherited: 0x28)
struct UKismetTextLibrary : UBlueprintFunctionLibrary 
{

	struct FText TextTrimTrailing(struct FText& InText); // sub_0x3d4eb50
	struct FText TextTrimPrecedingAndTrailing(struct FText& InText); // sub_0x3d4ea20
	struct FText TextTrimPreceding(struct FText& InText); // sub_0x3d4e8f0
	struct FText TextToUpper(struct FText& InText); // sub_0x3d4e7c0
	struct FText TextToLower(struct FText& InText); // sub_0x3d4e690
	char TextIsTransient(struct FText& InText); // sub_0x3d4e5c0
	char TextIsFromStringTable(struct FText& Text); // sub_0x3d4e4f0
	char TextIsEmpty(struct FText& InText); // sub_0x3d4e420
	char TextIsCultureInvariant(struct FText& InText); // sub_0x3d4e350
	struct FText TextFromStringTable(struct FName TableID, struct FString Key); // sub_0x3d4e210
	char StringTableIdAndKeyFromText(struct FText Text, struct FName& OutTableId, struct FString& OutKey); // sub_0x3d4e070
	struct FText PolyglotDataToText(struct FNone& PolyglotData); // sub_0x3d4de40
	char NotEqual_TextText(struct FText& A, struct FText& B); // sub_0x3d4dcd0
	char NotEqual_IgnoreCase_TextText(struct FText& A, struct FText& B); // sub_0x3d4db60
	void IsPolyglotDataValid(struct FNone& PolyglotData, char& IsValid, struct FText& ErrorMessage); // sub_0x3d4d8a0
	struct FText GetEmptyText(); // sub_0x3d4d800
	struct FText Format(struct FText InPattern, struct TArray<None> InArgs); // sub_0x3d4d5e0
	char FindTextInLocalizationTable(struct FString Namespace, struct FString Key, struct FText& OutText); // sub_0x3d4d450
	char EqualEqual_TextText(struct FText& A, struct FText& B); // sub_0x3d4d2e0
	char EqualEqual_IgnoreCase_TextText(struct FText& A, struct FText& B); // sub_0x3d4d170
	struct FText Conv_VectorToText(struct FNone InVec); // sub_0x3d4d080
	struct FText Conv_Vector2dToText(struct FNone InVec); // sub_0x3d4cfb0
	struct FText Conv_TransformToText(struct FNone& InTrans); // sub_0x3d4ce70
	struct FString Conv_TextToString(struct FText& InText); // sub_0x3d4cd60
	struct FText Conv_StringToText(struct FString inString); // sub_0x3d4cc60
	struct FText Conv_RotatorToText(struct FNone InRot); // sub_0x3d4cb70
	struct FText Conv_ObjectToText(struct FNone* InObj); // sub_0x3d4ca90
	struct FText Conv_NameToText(struct FName InName); // sub_0x3d4c9b0
	struct FText Conv_IntToText(uint32_t Value, char bAlwaysSign, char bUseGrouping, uint32_t MinimumIntegralDigits, uint32_t MaximumIntegralDigits); // sub_0x3d4c7a0
	struct FText Conv_Int64ToText(uint64_t Value, char bAlwaysSign, char bUseGrouping, uint32_t MinimumIntegralDigits, uint32_t MaximumIntegralDigits); // sub_0x3d4c590
	struct FText Conv_FloatToText(float Value, char RoundingMode, char bAlwaysSign, char bUseGrouping, uint32_t MinimumIntegralDigits, uint32_t MaximumIntegralDigits, uint32_t MinimumFractionalDigits, uint32_t MaximumFractionalDigits); // sub_0x3d4c2f0
	struct FText Conv_ColorToText(struct FNone InColor); // sub_0x3d4c210
	struct FText Conv_ByteToText(char Value); // sub_0x3d4c130
	struct FText Conv_BoolToText(char InBool); // sub_0x3d4c050
	struct FText AsTimeZoneTime_DateTime(struct FNone& InDateTime, struct FString InTimeZone); // sub_0x3d4bd10
	struct FText AsTimeZoneDateTime_DateTime(struct FNone& InDateTime, struct FString InTimeZone); // sub_0x3d4ba50
	struct FText AsTimeZoneDate_DateTime(struct FNone& InDateTime, struct FString InTimeZone); // sub_0x3d4bbb0
	struct FText AsTimespan_Timespan(struct FNone& InTimespan); // sub_0x3d4bf60
	struct FText AsTime_DateTime(struct FNone& In); // sub_0x3d4be70
	struct FText AsPercent_Float(float Value, char RoundingMode, char bAlwaysSign, char bUseGrouping, uint32_t MinimumIntegralDigits, uint32_t MaximumIntegralDigits, uint32_t MinimumFractionalDigits, uint32_t MaximumFractionalDigits); // sub_0x3d4b7b0
	struct FText AsDateTime_DateTime(struct FNone& In); // sub_0x3d4b5d0
	struct FText AsDate_DateTime(struct FNone& InDateTime); // sub_0x3d4b6c0
	struct FText AsCurrencyBase(uint32_t BaseValue, struct FString CurrencyCode); // sub_0x3d4ae90
	struct FText AsCurrency_Integer(uint32_t Value, char RoundingMode, char bAlwaysSign, char bUseGrouping, uint32_t MinimumIntegralDigits, uint32_t MaximumIntegralDigits, uint32_t MinimumFractionalDigits, uint32_t MaximumFractionalDigits, struct FString CurrencyCode); // sub_0x3d4b2d0
	struct FText AsCurrency_Float(float Value, char RoundingMode, char bAlwaysSign, char bUseGrouping, uint32_t MinimumIntegralDigits, uint32_t MaximumIntegralDigits, uint32_t MinimumFractionalDigits, uint32_t MaximumFractionalDigits, struct FString CurrencyCode); // sub_0x3d4afd0
};

// Class Engine.Layer
// Size: 0x48 (Inherited: 0x28)
struct ULayer : UObject 
{
	struct FName                                  LayerName;                                                   // 0x28(0x08)
	char                                          bIsVisible : 0;                                              // 0x30(0x01)
	char                                          UnknownData30[0x8];                                          // 0x30(0x08)
	struct TArray<None>                           ActorStats;                                                  // 0x38(0x10)
};

// Class Engine.LevelPartitionInterface
// Size: 0x28 (Inherited: 0x28)
struct ULevelPartitionInterface : UInterface 
{
};

// Class Engine.Level
// Size: 0x280 (Inherited: 0x28)
struct ULevel : UObject 
{
	char                                          UnknownData28[0x90];                                         // 0x28(0x90)
	struct FNone*                                 OwningWorld;                                                 // 0xb8(0x08)
	struct FNone*                                 Model;                                                       // 0xc0(0x08)
	struct TArray<None>                           ModelComponents;                                             // 0xc8(0x10)
	struct FNone*                                 ActorCluster;                                                // 0xd8(0x08)
	uint32_t                                      NumTextureStreamingUnbuiltComponents;                        // 0xe0(0x04)
	uint32_t                                      NumTextureStreamingDirtyResources;                           // 0xe4(0x04)
	struct FNone*                                 LevelScriptActor;                                            // 0xe8(0x08)
	struct FNone*                                 NavListStart;                                                // 0xf0(0x08)
	struct FNone*                                 NavListEnd;                                                  // 0xf8(0x08)
	struct TArray<None>                           NavDataChunks;                                               // 0x100(0x10)
	float                                         LightmapTotalSize;                                           // 0x110(0x04)
	float                                         ShadowmapTotalSize;                                          // 0x114(0x04)
	struct TArray<None>                           StaticNavigableGeometry;                                     // 0x118(0x10)
	struct TArray<None>                           StreamingTextureGuids;                                       // 0x128(0x10)
	char                                          UnknownData138[0x98];                                        // 0x138(0x98)
	struct FNone                                  LevelBuildDataId;                                            // 0x1d0(0x10)
	struct FNone*                                 MapBuildData;                                                // 0x1e0(0x08)
	struct FNone                                  LightBuildLevelOffset;                                       // 0x1e8(0x0c)
	char                                          bIsLightingScenario : 0;                                     // 0x1f4(0x01)
	char                                          bTextureStreamingRotationChanged : 0;                        // 0x1f4(0x01)
	char                                          bStaticComponentsRegisteredInStreamingManager : 0;           // 0x1f4(0x01)
	char                                          bIsVisible : 0;                                              // 0x1f4(0x01)
	char                                          UnknownData1F4[0x4c];                                        // 0x1f4(0x4c)
	struct FNone*                                 WorldSettings;                                               // 0x240(0x08)
	char                                          UnknownData248[0x8];                                         // 0x248(0x08)
	struct TArray<None>                           AssetUserData;                                               // 0x250(0x10)
	char                                          UnknownData260[0x10];                                        // 0x260(0x10)
	struct TArray<None>                           DestroyedReplicatedStaticActors;                             // 0x270(0x10)
};

// Class Engine.LevelActorContainer
// Size: 0x38 (Inherited: 0x28)
struct ULevelActorContainer : UObject 
{
	struct TArray<None>                           Actors;                                                      // 0x28(0x10)
};

// Class Engine.LevelBounds
// Size: 0x320 (Inherited: 0x310)
struct ALevelBounds : AActor 
{
	struct FNone*                                 BoxComponent;                                                // 0x310(0x08)
	char                                          bAutoUpdateBounds : 0;                                       // 0x318(0x01)
	char                                          UnknownData318[0x8];                                         // 0x318(0x08)
};

// Class Engine.LevelScriptBlueprint
// Size: 0xa0 (Inherited: 0xa0)
struct ULevelScriptBlueprint : UBlueprint 
{
};

// Class Engine.LevelStreaming
// Size: 0x160 (Inherited: 0x28)
struct ULevelStreaming : UObject 
{
	struct TSoftObjectPtr<FNone>                  WorldAsset;                                                  // 0x28(0x28)
	struct FName                                  PackageNameToLoad;                                           // 0x50(0x08)
	struct TArray<None>                           LODPackageNames;                                             // 0x58(0x10)
	char                                          UnknownData68[0x18];                                         // 0x68(0x18)
	struct FNone                                  LevelTransform;                                              // 0x80(0x30)
	uint32_t                                      LevelLODIndex;                                               // 0xb0(0x04)
	uint32_t                                      StreamingPriority;                                           // 0xb4(0x04)
	char                                          UnknownDataB8[0x8];                                          // 0xb8(0x08)
	char                                          bShouldBeVisible : 0;                                        // 0xc0(0x01)
	char                                          bShouldBeLoaded : 0;                                         // 0xc0(0x01)
	char                                          bLocked : 0;                                                 // 0xc0(0x01)
	char                                          bIsStatic : 0;                                               // 0xc0(0x01)
	char                                          bShouldBlockOnLoad : 0;                                      // 0xc0(0x01)
	char                                          bShouldBlockOnUnload : 0;                                    // 0xc0(0x01)
	char                                          bDisableDistanceStreaming : 0;                               // 0xc0(0x01)
	char                                          bDrawOnLevelStatusMap : 0;                                   // 0xc0(0x01)
	char                                          UnknownDataC0[0x4];                                          // 0xc0(0x04)
	struct FNone                                  LevelColor;                                                  // 0xc4(0x10)
	char                                          UnknownDataD4[0x4];                                          // 0xd4(0x04)
	struct TArray<None>                           EditorStreamingVolumes;                                      // 0xd8(0x10)
	float                                         MinTimeBetweenVolumeUnloadRequests;                          // 0xe8(0x04)
	char                                          UnknownDataEC[0x4];                                          // 0xec(0x04)
	struct FMulticastInlineDelegate               OnLevelLoaded;                                               // 0xf0(0x10)
	struct FMulticastInlineDelegate               OnLevelUnloaded;                                             // 0x100(0x10)
	struct FMulticastInlineDelegate               OnLevelShown;                                                // 0x110(0x10)
	struct FMulticastInlineDelegate               OnLevelHidden;                                               // 0x120(0x10)
	struct FNone*                                 LoadedLevel;                                                 // 0x130(0x08)
	struct FNone*                                 PendingUnloadLevel;                                          // 0x138(0x08)
	char                                          UnknownData140[0x20];                                        // 0x140(0x20)

	char ShouldBeLoaded(); // sub_0x34dd2d0
	void SetShouldBeVisible(char bInShouldBeVisible); // sub_0x3d52700
	void SetShouldBeLoaded(char bInShouldBeLoaded); // sub_0x3cda3c0
	void SetPriority(uint32_t NewPriority); // sub_0x3d52500
	void SetLevelLODIndex(uint32_t LODIndex); // sub_0x3d51e70
	char IsStreamingStatePending(); // sub_0x3d50f40
	char IsLevelVisible(); // sub_0x3d50f10
	char IsLevelLoaded(); // sub_0x3d50ee0
	struct FName GetWorldAssetPackageFName(); // sub_0x3d50e70
	struct FNone* GetLoadedLevel(); // sub_0x3d50e50
	struct FNone* GetLevelScriptActor(); // sub_0x3d50de0
	struct FNone* CreateInstance(struct FString UniqueInstanceName); // sub_0x3d50d00
};

// Class Engine.LevelStreamingAlwaysLoaded
// Size: 0x160 (Inherited: 0x160)
struct ULevelStreamingAlwaysLoaded : ULevelStreaming 
{
};

// Class Engine.LevelStreamingDynamic
// Size: 0x160 (Inherited: 0x160)
struct ULevelStreamingDynamic : ULevelStreaming 
{
	char                                          bInitiallyLoaded : 0;                                        // 0x158(0x01)
	char                                          bInitiallyVisible : 0;                                       // 0x158(0x01)

	struct FNone* LoadLevelInstanceBySoftObjectPtr(struct FNone* WorldContextObject, struct TSoftObjectPtr<FNone> Level, struct FNone Location, struct FNone Rotation, char& bOutSuccess); // sub_0x3d51180
	struct FNone* LoadLevelInstance(struct FNone* WorldContextObject, struct FString LevelName, struct FNone Location, struct FNone Rotation, char& bOutSuccess); // sub_0x3d50f70
};

// Class Engine.LevelStreamingPersistent
// Size: 0x160 (Inherited: 0x160)
struct ULevelStreamingPersistent : ULevelStreaming 
{
};

// Class Engine.LevelStreamingVolume
// Size: 0x360 (Inherited: 0x348)
struct ALevelStreamingVolume : AVolume 
{
	struct TArray<None>                           StreamingLevelNames;                                         // 0x348(0x10)
	char                                          bEditorPreVisOnly : 0;                                       // 0x358(0x01)
	char                                          bDisabled : 0;                                               // 0x358(0x01)
	char                                          UnknownData358[0x4];                                         // 0x358(0x04)
	char                                          StreamingUsage;                                              // 0x35c(0x01)
	char                                          UnknownData35D[0x3];                                         // 0x35d(0x03)
};

// Class Engine.LightmappedSurfaceCollection
// Size: 0x40 (Inherited: 0x28)
struct ULightmappedSurfaceCollection : UObject 
{
	struct FNone*                                 SourceModel;                                                 // 0x28(0x08)
	struct TArray<None>                           Surfaces;                                                    // 0x30(0x10)
};

// Class Engine.LightMapTexture2D
// Size: 0xf0 (Inherited: 0xe8)
struct ULightMapTexture2D : UTexture2D 
{
	char                                          UnknownDataE8[0x8];                                          // 0xe8(0x08)
};

// Class Engine.LightmassCharacterIndirectDetailVolume
// Size: 0x348 (Inherited: 0x348)
struct ALightmassCharacterIndirectDetailVolume : AVolume 
{
};

// Class Engine.LightmassImportanceVolume
// Size: 0x348 (Inherited: 0x348)
struct ALightmassImportanceVolume : AVolume 
{
};

// Class Engine.LightmassPortal
// Size: 0x318 (Inherited: 0x310)
struct ALightmassPortal : AActor 
{
	struct FNone*                                 PortalComponent;                                             // 0x310(0x08)
};

// Class Engine.LightmassPortalComponent
// Size: 0x240 (Inherited: 0x240)
struct ULightmassPortalComponent : USceneComponent 
{
	struct FNone*                                 PreviewBox;                                                  // 0x238(0x08)
};

// Class Engine.LightmassPrimitiveSettingsObject
// Size: 0x40 (Inherited: 0x28)
struct ULightmassPrimitiveSettingsObject : UObject 
{
	struct FNone                                  LightmassSettings;                                           // 0x28(0x18)
};

// Class Engine.LineBatchComponent
// Size: 0x500 (Inherited: 0x4c0)
struct ULineBatchComponent : UPrimitiveComponent 
{
	char                                          UnknownData4C0[0x40];                                        // 0x4c0(0x40)
};

// Class Engine.LocalLightComponent
// Size: 0x3a0 (Inherited: 0x380)
struct ULocalLightComponent : ULightComponent 
{
	enum class None                               IntensityUnits;                                              // 0x380(0x01)
	char                                          UnknownData381[0x3];                                         // 0x381(0x03)
	float                                         Radius;                                                      // 0x384(0x04)
	float                                         AttenuationRadius;                                           // 0x388(0x04)
	struct FNone                                  LightmassSettings;                                           // 0x38c(0x0c)
	char                                          UnknownData398[0x8];                                         // 0x398(0x08)

	void SetIntensityUnits(enum class None NewIntensityUnits); // sub_0x3d55600
	void SetAttenuationRadius(float NewRadius); // sub_0x3d55340
	float GetUnitsConversionFactor(enum class None SrcUnits, enum class None TargetUnits, float CosHalfConeAngle); // sub_0x3d55120
};

// Class Engine.LODActor
// Size: 0x398 (Inherited: 0x310)
struct ALODActor : AActor 
{
	struct FNone*                                 StaticMeshComponent;                                         // 0x310(0x08)
	struct TMap<None, None>                       ImpostersStaticMeshComponents;                               // 0x318(0x50)
	struct FNone*                                 Proxy;                                                       // 0x368(0x08)
	struct FName                                  Key;                                                         // 0x370(0x08)
	float                                         LODDrawDistance;                                             // 0x378(0x04)
	uint32_t                                      LODLevel;                                                    // 0x37c(0x04)
	struct TArray<None>                           SubActors;                                                   // 0x380(0x10)
	char                                          CachedNumHLODLevels;                                         // 0x390(0x01)
	char                                          UnknownData391[0x7];                                         // 0x391(0x07)
};

// Class Engine.MapBuildDataRegistry
// Size: 0x238 (Inherited: 0x28)
struct UMapBuildDataRegistry : UObject 
{
	char                                          LevelLightingQuality;                                        // 0x28(0x01)
	char                                          UnknownData29[0x20f];                                        // 0x29(0x20f)
};

// Class Engine.Material
// Size: 0x4f0 (Inherited: 0x88)
struct UMaterial : UMaterialInterface 
{
	struct FNone*                                 PhysMaterial;                                                // 0x88(0x08)
	struct FNone*                                 PhysMaterialMask;                                            // 0x90(0x08)
	struct FNone*                                 PhysicalMaterialMap[0x8];                                    // 0x98(0x40)
	struct FNone                                  Metallic;                                                    // 0xd8(0x0c)
	char                                          UnknownDataE4[0x8];                                          // 0xe4(0x08)
	struct FNone                                  Specular;                                                    // 0xec(0x0c)
	char                                          UnknownDataF8[0x8];                                          // 0xf8(0x08)
	struct FNone                                  Anisotropy;                                                  // 0x100(0x0c)
	char                                          UnknownData10C[0x8];                                         // 0x10c(0x08)
	struct FNone                                  Normal;                                                      // 0x114(0x0c)
	char                                          UnknownData120[0x8];                                         // 0x120(0x08)
	struct FNone                                  Tangent;                                                     // 0x128(0x0c)
	char                                          UnknownData134[0x8];                                         // 0x134(0x08)
	struct FNone                                  EmissiveColor;                                               // 0x13c(0x0c)
	char                                          UnknownData148[0x8];                                         // 0x148(0x08)
	char                                          MaterialDomain;                                              // 0x150(0x01)
	char                                          BlendMode;                                                   // 0x151(0x01)
	char                                          DecalBlendMode;                                              // 0x152(0x01)
	char                                          MaterialDecalResponse;                                       // 0x153(0x01)
	char                                          ShadingModel;                                                // 0x154(0x01)
	char                                          bCastDynamicShadowAsMasked : 0;                              // 0x155(0x01)
	char                                          UnknownData155[0x1];                                         // 0x155(0x01)
	struct FNone                                  ShadingModels;                                               // 0x156(0x02)
	float                                         OpacityMaskClipValue;                                        // 0x158(0x04)
	struct FNone                                  WorldPositionOffset;                                         // 0x15c(0x0c)
	char                                          UnknownData168[0x8];                                         // 0x168(0x08)
	struct FNone                                  Refraction;                                                  // 0x170(0x0c)
	char                                          UnknownData17C[0x8];                                         // 0x17c(0x08)
	struct FNone                                  MaterialAttributes;                                          // 0x184(0x10)
	char                                          UnknownData194[0x8];                                         // 0x194(0x08)
	struct FNone                                  PixelDepthOffset;                                            // 0x19c(0x0c)
	char                                          UnknownData1A8[0x8];                                         // 0x1a8(0x08)
	struct FNone                                  ShadingModelFromMaterialExpression;                          // 0x1b0(0x0c)
	char                                          UnknownData1BC[0x8];                                         // 0x1bc(0x08)
	char                                          bEnableSeparateTranslucency : 0;                             // 0x1c4(0x01)
	char                                          bEnableResponsiveAA : 0;                                     // 0x1c4(0x01)
	char                                          UnknownData1C4[0x4];                                         // 0x1c4(0x04)
	char                                          bEnableTranslucentVelocity : 0;                              // 0x1c8(0x01)
	char                                          UnknownData1C8[0x4];                                         // 0x1c8(0x04)
	char                                          bScreenSpaceReflections : 0;                                 // 0x1cc(0x01)
	char                                          bContactShadows : 0;                                         // 0x1cc(0x01)
	char                                          TwoSided : 0;                                                // 0x1cc(0x01)
	char                                          DitheredLODTransition : 0;                                   // 0x1cc(0x01)
	char                                          DitherOpacityMask : 0;                                       // 0x1cc(0x01)
	char                                          bAllowNegativeEmissiveColor : 0;                             // 0x1cc(0x01)
	char                                          UnknownData1CC[0x1];                                         // 0x1cc(0x01)
	char                                          TranslucencyLightingMode;                                    // 0x1cd(0x01)
	char                                          bEnableMobileSeparateTranslucency : 0;                       // 0x1ce(0x01)
	char                                          UnknownData1CE[0x2];                                         // 0x1ce(0x02)
	uint32_t                                      NumCustomizedUVs;                                            // 0x1d0(0x04)
	float                                         TranslucencyDirectionalLightingIntensity;                    // 0x1d4(0x04)
	float                                         TranslucentShadowDensityScale;                               // 0x1d8(0x04)
	float                                         TranslucentSelfShadowDensityScale;                           // 0x1dc(0x04)
	float                                         TranslucentSelfShadowSecondDensityScale;                     // 0x1e0(0x04)
	float                                         TranslucentSelfShadowSecondOpacity;                          // 0x1e4(0x04)
	float                                         TranslucentBackscatteringExponent;                           // 0x1e8(0x04)
	struct FNone                                  TranslucentMultipleScatteringExtinction;                     // 0x1ec(0x10)
	float                                         TranslucentShadowStartOffset;                                // 0x1fc(0x04)
	char                                          bDisableDepthTest : 0;                                       // 0x200(0x01)
	char                                          bWriteOnlyAlpha : 0;                                         // 0x200(0x01)
	char                                          bGenerateSphericalParticleNormals : 0;                       // 0x200(0x01)
	char                                          bTangentSpaceNormal : 0;                                     // 0x200(0x01)
	char                                          bUseEmissiveForDynamicAreaLighting : 0;                      // 0x200(0x01)
	char                                          bBlockGI : 0;                                                // 0x200(0x01)
	char                                          bUsedAsSpecialEngineMaterial : 0;                            // 0x200(0x01)
	char                                          bUsedWithSkeletalMesh : 0;                                   // 0x200(0x01)
	char                                          UnknownData200[0x1];                                         // 0x200(0x01)
	char                                          bUsedWithEditorCompositing : 0;                              // 0x201(0x01)
	char                                          bUsedWithParticleSprites : 0;                                // 0x201(0x01)
	char                                          bUsedWithBeamTrails : 0;                                     // 0x201(0x01)
	char                                          bUsedWithMeshParticles : 0;                                  // 0x201(0x01)
	char                                          bUsedWithNiagaraSprites : 0;                                 // 0x201(0x01)
	char                                          bUsedWithNiagaraRibbons : 0;                                 // 0x201(0x01)
	char                                          bUsedWithNiagaraMeshParticles : 0;                           // 0x201(0x01)
	char                                          bUsedWithGeometryCache : 0;                                  // 0x201(0x01)
	char                                          UnknownData201[0x1];                                         // 0x201(0x01)
	char                                          bUsedWithStaticLighting : 0;                                 // 0x202(0x01)
	char                                          bUsedWithMorphTargets : 0;                                   // 0x202(0x01)
	char                                          bUsedWithSplineMeshes : 0;                                   // 0x202(0x01)
	char                                          bUsedWithInstancedStaticMeshes : 0;                          // 0x202(0x01)
	char                                          bUsedWithGeometryCollections : 0;                            // 0x202(0x01)
	char                                          bUsesDistortion : 0;                                         // 0x202(0x01)
	char                                          bUsedWithClothing : 0;                                       // 0x202(0x01)
	char                                          UnknownData202[0x2];                                         // 0x202(0x02)
	char                                          bUsedWithWater : 0;                                          // 0x204(0x01)
	char                                          bUsedWithHairStrands : 0;                                    // 0x204(0x01)
	char                                          bUsedWithLidarPointCloud : 0;                                // 0x204(0x01)
	char                                          UnknownData204[0x4];                                         // 0x204(0x04)
	char                                          bUsedWithUI : 0;                                             // 0x208(0x01)
	char                                          bAutomaticallySetUsageInEditor : 0;                          // 0x208(0x01)
	char                                          bFullyRough : 0;                                             // 0x208(0x01)
	char                                          bUseFullPrecision : 0;                                       // 0x208(0x01)
	char                                          bUseLightmapDirectionality : 0;                              // 0x208(0x01)
	char                                          UnknownData208[0x4];                                         // 0x208(0x04)
	char                                          bForwardRenderUsePreintegratedGFForSimpleIBL : 0;            // 0x20c(0x01)
	char                                          UnknownData20C[0x4];                                         // 0x20c(0x04)
	char                                          bUseHQForwardReflections : 0;                                // 0x210(0x01)
	char                                          bUsePlanarForwardReflections : 0;                            // 0x210(0x01)
	char                                          bNormalCurvatureToRoughness : 0;                             // 0x210(0x01)
	char                                          UnknownData210[0x1];                                         // 0x210(0x01)
	char                                          D3D11TessellationMode;                                       // 0x211(0x01)
	char                                          bEnableCrackFreeDisplacement : 0;                            // 0x212(0x01)
	char                                          bEnableAdaptiveTessellation : 0;                             // 0x212(0x01)
	char                                          AllowTranslucentCustomDepthWrites : 0;                       // 0x212(0x01)
	char                                          Wireframe : 0;                                               // 0x212(0x01)
	char                                          bCanMaskedBeAssumedOpaque : 0;                               // 0x212(0x01)
	char                                          bIsMasked : 0;                                               // 0x212(0x01)
	char                                          bIsPreviewMaterial : 0;                                      // 0x212(0x01)
	char                                          bIsFunctionPreviewMaterial : 0;                              // 0x212(0x01)
	char                                          UnknownData212[0x1];                                         // 0x212(0x01)
	char                                          bUseMaterialAttributes : 0;                                  // 0x213(0x01)
	char                                          bCastRayTracedShadows : 0;                                   // 0x213(0x01)
	char                                          bUseTranslucencyVertexFog : 0;                               // 0x213(0x01)
	char                                          bIsSky : 0;                                                  // 0x213(0x01)
	char                                          bComputeFogPerPixel : 0;                                     // 0x213(0x01)
	char                                          bOutputTranslucentVelocity : 0;                              // 0x213(0x01)
	char                                          bAllowDevelopmentShaderCompile : 0;                          // 0x213(0x01)
	char                                          bIsMaterialEditorStatsMaterial : 0;                          // 0x213(0x01)
	char                                          UnknownData213[0x1];                                         // 0x213(0x01)
	char                                          BlendableLocation;                                           // 0x214(0x01)
	char                                          BlendableOutputAlpha : 0;                                    // 0x215(0x01)
	char                                          bEnableStencilTest : 0;                                      // 0x215(0x01)
	char                                          UnknownData215[0x1];                                         // 0x215(0x01)
	char                                          StencilCompare;                                              // 0x216(0x01)
	char                                          StencilRefValue;                                             // 0x217(0x01)
	char                                          RefractionMode;                                              // 0x218(0x01)
	char                                          UnknownData219[0x3];                                         // 0x219(0x03)
	uint32_t                                      BlendablePriority;                                           // 0x21c(0x04)
	char                                          bIsBlendable : 0;                                            // 0x220(0x01)
	char                                          UnknownData220[0x4];                                         // 0x220(0x04)
	uint32_t                                      UsageFlagWarnings;                                           // 0x224(0x04)
	float                                         RefractionDepthBias;                                         // 0x228(0x04)
	struct FNone                                  StateID;                                                     // 0x22c(0x10)
	float                                         MaxDisplacement;                                             // 0x23c(0x04)
	char                                          UnknownData240[0x88];                                        // 0x240(0x88)
	struct FNone                                  CachedExpressionData;                                        // 0x2c8(0x228)
};

// Class Engine.MaterialBillboardComponent
// Size: 0x4d0 (Inherited: 0x4c0)
struct UMaterialBillboardComponent : UPrimitiveComponent 
{
	struct TArray<None>                           Elements;                                                    // 0x4b8(0x10)

	void SetElements(struct TArray<None>& NewElements); // sub_0x3d5a010
	void AddElement(struct FNone* Material, struct FNone* DistanceToOpacityCurve, char bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, struct FNone* DistanceToSizeCurve); // sub_0x3d59e40
};

// Class Engine.MaterialExpressionAbs
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionAbs : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionActorPositionWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionActorPositionWS : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionAdd
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionAdd : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  B;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	float                                         ConstA;                                                      // 0x68(0x04)
	float                                         ConstB;                                                      // 0x6c(0x04)
};

// Class Engine.MaterialExpressionAntialiasedTextureMask
// Size: 0xf8 (Inherited: 0xf0)
struct UMaterialExpressionAntialiasedTextureMask : UMaterialExpressionTextureSampleParameter2D 
{
	float                                         threshold;                                                   // 0xf0(0x04)
	char                                          Channel;                                                     // 0xf4(0x01)
	char                                          UnknownDataF5[0x3];                                          // 0xf5(0x03)
};

// Class Engine.MaterialExpressionAppendVector
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionAppendVector : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  B;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionArccosine
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArccosine : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionArccosineFast
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArccosineFast : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionArcsine
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArcsine : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionArcsineFast
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArcsineFast : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionArctangent
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArctangent : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionArctangent2
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionArctangent2 : UMaterialExpression 
{
	struct FNone                                  Y;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  X;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionArctangent2Fast
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionArctangent2Fast : UMaterialExpression 
{
	struct FNone                                  Y;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  X;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionArctangentFast
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionArctangentFast : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionAtmosphericFogColor
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionAtmosphericFogColor : UMaterialExpression 
{
	struct FNone                                  WorldPosition;                                               // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionAtmosphericLightColor
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionAtmosphericLightColor : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionAtmosphericLightVector
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionAtmosphericLightVector : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionBentNormalCustomOutput
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionBentNormalCustomOutput : UMaterialExpressionCustomOutput 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionBlackBody
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionBlackBody : UMaterialExpression 
{
	struct FNone                                  Temp;                                                        // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionBlendMaterialAttributes
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionBlendMaterialAttributes : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x10)
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
	struct FNone                                  B;                                                           // 0x58(0x10)
	char                                          UnknownData68[0x8];                                          // 0x68(0x08)
	struct FNone                                  ALPHA;                                                       // 0x70(0x0c)
	char                                          UnknownData7C[0x8];                                          // 0x7c(0x08)
	char                                          PixelAttributeBlendType;                                     // 0x84(0x01)
	char                                          VertexAttributeBlendType;                                    // 0x85(0x01)
	char                                          UnknownData86[0x2];                                          // 0x86(0x02)
};

// Class Engine.MaterialExpressionBreakMaterialAttributes
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionBreakMaterialAttributes : UMaterialExpression 
{
	struct FNone                                  MaterialAttributes;                                          // 0x40(0x10)
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
};

// Class Engine.MaterialExpressionBumpOffset
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionBumpOffset : UMaterialExpression 
{
	struct FNone                                  Coordinate;                                                  // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Height;                                                      // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone                                  HeightRatioInput;                                            // 0x68(0x0c)
	char                                          UnknownData74[0x8];                                          // 0x74(0x08)
	float                                         HeightRatio;                                                 // 0x7c(0x04)
	float                                         ReferencePlane;                                              // 0x80(0x04)
	uint32_t                                      ConstCoordinate;                                             // 0x84(0x04)
};

// Class Engine.MaterialExpressionCameraPositionWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionCameraPositionWS : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionCameraVectorWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionCameraVectorWS : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionCeil
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionCeil : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionParameter
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionParameter : UMaterialExpression 
{
	struct FName                                  ParameterName;                                               // 0x40(0x08)
	struct FNone                                  ExpressionGUID;                                              // 0x48(0x10)
};

// Class Engine.MaterialExpressionVectorParameter
// Size: 0x70 (Inherited: 0x58)
struct UMaterialExpressionVectorParameter : UMaterialExpressionParameter 
{
	struct FNone                                  DefaultValue;                                                // 0x58(0x10)
	char                                          bUseCustomPrimitiveData : 0;                                 // 0x68(0x01)
	char                                          UnknownData68[0x1];                                          // 0x68(0x01)
	char                                          PrimitiveDataIndex;                                          // 0x69(0x01)
	char                                          UnknownData6A[0x6];                                          // 0x6a(0x06)
};

// Class Engine.MaterialExpressionChannelMaskParameter
// Size: 0x88 (Inherited: 0x70)
struct UMaterialExpressionChannelMaskParameter : UMaterialExpressionVectorParameter 
{
	char                                          MaskChannel;                                                 // 0x70(0x01)
	char                                          UnknownData71[0x3];                                          // 0x71(0x03)
	struct FNone                                  Input;                                                       // 0x74(0x0c)
	char                                          UnknownData80[0x8];                                          // 0x80(0x08)
};

// Class Engine.MaterialExpressionClamp
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionClamp : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Min;                                                         // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FStrProperty                           MAX;                                                         // 0x68(0x0c)
	char                                          UnknownData74[0x8];                                          // 0x74(0x08)
	char                                          ClampMode;                                                   // 0x7c(0x01)
	char                                          UnknownData7D[0x3];                                          // 0x7d(0x03)
	float                                         MinDefault;                                                  // 0x80(0x04)
	float                                         MaxDefault;                                                  // 0x84(0x04)
};

// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionClearCoatNormalCustomOutput : UMaterialExpressionCustomOutput 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionCollectionParameter
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionCollectionParameter : UMaterialExpression 
{
	struct FNone*                                 Collection;                                                  // 0x40(0x08)
	struct FName                                  ParameterName;                                               // 0x48(0x08)
	struct FNone                                  ParameterId;                                                 // 0x50(0x10)
};

// Class Engine.MaterialExpressionComment
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionComment : UMaterialExpression 
{
	uint32_t                                      SizeX;                                                       // 0x40(0x04)
	uint32_t                                      SizeY;                                                       // 0x44(0x04)
	struct FString                                Text;                                                        // 0x48(0x10)
	struct FNone                                  CommentColor;                                                // 0x58(0x10)
	uint32_t                                      FontSize;                                                    // 0x68(0x04)
	char                                          UnknownData6C[0x4];                                          // 0x6c(0x04)
};

// Class Engine.MaterialExpressionComponentMask
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionComponentMask : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	char                                          R : 0;                                                       // 0x54(0x01)
	char                                          G : 0;                                                       // 0x54(0x01)
	char                                          B : 0;                                                       // 0x54(0x01)
	char                                          A : 0;                                                       // 0x54(0x01)
	char                                          UnknownData54[0x4];                                          // 0x54(0x04)
};

// Class Engine.MaterialExpressionConstant
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionConstant : UMaterialExpression 
{
	float                                         R;                                                           // 0x40(0x04)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
};

// Class Engine.MaterialExpressionConstant2Vector
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionConstant2Vector : UMaterialExpression 
{
	float                                         R;                                                           // 0x40(0x04)
	float                                         G;                                                           // 0x44(0x04)
};

// Class Engine.MaterialExpressionConstant3Vector
// Size: 0x50 (Inherited: 0x40)
struct UMaterialExpressionConstant3Vector : UMaterialExpression 
{
	struct FNone                                  Constant;                                                    // 0x40(0x10)
};

// Class Engine.MaterialExpressionConstant4Vector
// Size: 0x50 (Inherited: 0x40)
struct UMaterialExpressionConstant4Vector : UMaterialExpression 
{
	struct FNone                                  Constant;                                                    // 0x40(0x10)
};

// Class Engine.MaterialExpressionConstantBiasScale
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionConstantBiasScale : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	float                                         Bias;                                                        // 0x54(0x04)
	float                                         Scale;                                                       // 0x58(0x04)
	char                                          UnknownData5C[0x4];                                          // 0x5c(0x04)
};

// Class Engine.MaterialExpressionCosine
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionCosine : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	float                                         Period;                                                      // 0x54(0x04)
};

// Class Engine.MaterialExpressionCrossProduct
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionCrossProduct : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  B;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionScalarParameter
// Size: 0x60 (Inherited: 0x58)
struct UMaterialExpressionScalarParameter : UMaterialExpressionParameter 
{
	float                                         DefaultValue;                                                // 0x58(0x04)
	char                                          bUseCustomPrimitiveData : 0;                                 // 0x5c(0x01)
	char                                          UnknownData5C[0x1];                                          // 0x5c(0x01)
	char                                          PrimitiveDataIndex;                                          // 0x5d(0x01)
	char                                          UnknownData5E[0x2];                                          // 0x5e(0x02)
};

// Class Engine.MaterialExpressionCurveAtlasRowParameter
// Size: 0x88 (Inherited: 0x60)
struct UMaterialExpressionCurveAtlasRowParameter : UMaterialExpressionScalarParameter 
{
	struct FNone*                                 Curve;                                                       // 0x60(0x08)
	struct FNone*                                 Atlas;                                                       // 0x68(0x08)
	struct FNone                                  InputTime;                                                   // 0x70(0x0c)
	char                                          UnknownData7C[0xc];                                          // 0x7c(0x0c)
};

// Class Engine.MaterialExpressionCustom
// Size: 0x98 (Inherited: 0x40)
struct UMaterialExpressionCustom : UMaterialExpression 
{
	struct FString                                Code;                                                        // 0x40(0x10)
	char                                          OutputType;                                                  // 0x50(0x01)
	char                                          UnknownData51[0x7];                                          // 0x51(0x07)
	struct FString                                Description;                                                 // 0x58(0x10)
	struct TArray<None>                           Inputs;                                                      // 0x68(0x10)
	struct TArray<None>                           AdditionalDefines;                                           // 0x78(0x10)
	struct TArray<None>                           IncludeFilePaths;                                            // 0x88(0x10)
};

// Class Engine.MaterialExpressionDDX
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDDX : UMaterialExpression 
{
	struct FNone                                  Value;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionDDY
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDDY : UMaterialExpression 
{
	struct FNone                                  Value;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionDecalDerivative
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionDecalDerivative : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionDecalLifetimeOpacity
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionDecalLifetimeOpacity : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionDecalMipmapLevel
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionDecalMipmapLevel : UMaterialExpression 
{
	struct FNone                                  TextureSize;                                                 // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	float                                         ConstWidth;                                                  // 0x54(0x04)
	float                                         ConstHeight;                                                 // 0x58(0x04)
	char                                          UnknownData5C[0x4];                                          // 0x5c(0x04)
};

// Class Engine.MaterialExpressionDeltaTime
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionDeltaTime : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionDepthFade
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionDepthFade : UMaterialExpression 
{
	struct FNone                                  InOpacity;                                                   // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  FadeDistance;                                                // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	float                                         OpacityDefault;                                              // 0x68(0x04)
	float                                         FadeDistanceDefault;                                         // 0x6c(0x04)
};

// Class Engine.MaterialExpressionDepthOfFieldFunction
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDepthOfFieldFunction : UMaterialExpression 
{
	char                                          FunctionValue;                                               // 0x40(0x01)
	char                                          UnknownData41[0x3];                                          // 0x41(0x03)
	struct FNone                                  Depth;                                                       // 0x44(0x0c)
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
};

// Class Engine.MaterialExpressionDeriveNormalZ
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDeriveNormalZ : UMaterialExpression 
{
	struct FNone                                  InXY;                                                        // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionDesaturation
// Size: 0x78 (Inherited: 0x40)
struct UMaterialExpressionDesaturation : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Fraction;                                                    // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone                                  LuminanceFactors;                                            // 0x68(0x10)
};

// Class Engine.MaterialExpressionDistance
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionDistance : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  B;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionDistanceCullFade
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionDistanceCullFade : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionDistanceFieldGradient
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDistanceFieldGradient : UMaterialExpression 
{
	struct FNone                                  Position;                                                    // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionDistanceToNearestSurface
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionDistanceToNearestSurface : UMaterialExpression 
{
	struct FNone                                  Position;                                                    // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionDivide
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionDivide : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  B;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	float                                         ConstA;                                                      // 0x68(0x04)
	float                                         ConstB;                                                      // 0x6c(0x04)
};

// Class Engine.MaterialExpressionDotProduct
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionDotProduct : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  B;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionDynamicParameter
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionDynamicParameter : UMaterialExpression 
{
	struct TArray<None>                           ParamNames;                                                  // 0x40(0x10)
	struct FNone                                  DefaultValue;                                                // 0x50(0x10)
	uint32_t                                      ParameterIndex;                                              // 0x60(0x04)
	char                                          UnknownData64[0x4];                                          // 0x64(0x04)
};

// Class Engine.MaterialExpressionEyeAdaptation
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionEyeAdaptation : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionFeatureLevelSwitch
// Size: 0xa8 (Inherited: 0x40)
struct UMaterialExpressionFeatureLevelSwitch : UMaterialExpression 
{
	struct FNone                                  Default;                                                     // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Inputs[0x4];                                                 // 0x54(0x30)
	char                                          UnknownData84[0x24];                                         // 0x84(0x24)
};

// Class Engine.MaterialExpressionFloor
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionFloor : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionFmod
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionFmod : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  B;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionFontSample
// Size: 0x50 (Inherited: 0x40)
struct UMaterialExpressionFontSample : UMaterialExpression 
{
	struct FNone*                                 Font;                                                        // 0x40(0x08)
	uint32_t                                      FontTexturePage;                                             // 0x48(0x04)
	char                                          UnknownData4C[0x4];                                          // 0x4c(0x04)
};

// Class Engine.MaterialExpressionFontSampleParameter
// Size: 0x70 (Inherited: 0x50)
struct UMaterialExpressionFontSampleParameter : UMaterialExpressionFontSample 
{
	struct FName                                  ParameterName;                                               // 0x50(0x08)
	struct FNone                                  ExpressionGUID;                                              // 0x58(0x10)
	struct FName                                  Group;                                                       // 0x68(0x08)
};

// Class Engine.MaterialExpressionFrac
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionFrac : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionFresnel
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionFresnel : UMaterialExpression 
{
	struct FNone                                  ExponentIn;                                                  // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	float                                         Exponent;                                                    // 0x54(0x04)
	struct FNone                                  BaseReflectFractionIn;                                       // 0x58(0x0c)
	char                                          UnknownData64[0x8];                                          // 0x64(0x08)
	float                                         BaseReflectFraction;                                         // 0x6c(0x04)
	struct FNone                                  Normal;                                                      // 0x70(0x0c)
	char                                          UnknownData7C[0xc];                                          // 0x7c(0x0c)
};

// Class Engine.MaterialExpressionFunctionInput
// Size: 0xc0 (Inherited: 0x40)
struct UMaterialExpressionFunctionInput : UMaterialExpression 
{
	struct FNone                                  Preview;                                                     // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FName                                  InputName;                                                   // 0x54(0x08)
	char                                          UnknownData5C[0x4];                                          // 0x5c(0x04)
	struct FString                                Description;                                                 // 0x60(0x10)
	struct FNone                                  ID;                                                          // 0x70(0x10)
	char                                          InputType;                                                   // 0x80(0x01)
	char                                          UnknownData81[0xf];                                          // 0x81(0x0f)
	struct FNone                                  PreviewValue;                                                // 0x90(0x10)
	char                                          bUsePreviewValueAsDefault : 0;                               // 0xa0(0x01)
	char                                          UnknownDataA0[0x4];                                          // 0xa0(0x04)
	uint32_t                                      SortPriority;                                                // 0xa4(0x04)
	char                                          bCompilingFunctionPreview : 0;                               // 0xa8(0x01)
	char                                          UnknownDataA8[0x18];                                         // 0xa8(0x18)
};

// Class Engine.MaterialExpressionFunctionOutput
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionFunctionOutput : UMaterialExpression 
{
	struct FName                                  OutputName;                                                  // 0x40(0x08)
	struct FString                                Description;                                                 // 0x48(0x10)
	uint32_t                                      SortPriority;                                                // 0x58(0x04)
	struct FNone                                  A;                                                           // 0x5c(0x0c)
	char                                          UnknownData68[0x8];                                          // 0x68(0x08)
	char                                          bLastPreviewed : 0;                                          // 0x70(0x01)
	char                                          UnknownData70[0x4];                                          // 0x70(0x04)
	struct FNone                                  ID;                                                          // 0x74(0x10)
	char                                          UnknownData84[0x4];                                          // 0x84(0x04)
};

// Class Engine.MaterialExpressionGetMaterialAttributes
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionGetMaterialAttributes : UMaterialExpression 
{
	struct FNone                                  MaterialAttributes;                                          // 0x40(0x10)
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
	struct TArray<None>                           AttributeGetTypes;                                           // 0x58(0x10)
};

// Class Engine.MaterialExpressionGIReplace
// Size: 0x80 (Inherited: 0x40)
struct UMaterialExpressionGIReplace : UMaterialExpression 
{
	struct FNone                                  Default;                                                     // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  StaticIndirect;                                              // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone                                  DynamicIndirect;                                             // 0x68(0x0c)
	char                                          UnknownData74[0xc];                                          // 0x74(0x0c)
};

// Class Engine.MaterialExpressionHairAttributes
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionHairAttributes : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionIf
// Size: 0xb0 (Inherited: 0x40)
struct UMaterialExpressionIf : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  B;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone                                  AGreaterThanB;                                               // 0x68(0x0c)
	char                                          UnknownData74[0x8];                                          // 0x74(0x08)
	struct FNone                                  AEqualsB;                                                    // 0x7c(0x0c)
	char                                          UnknownData88[0x8];                                          // 0x88(0x08)
	struct FNone                                  ALessThanB;                                                  // 0x90(0x0c)
	char                                          UnknownData9C[0x8];                                          // 0x9c(0x08)
	float                                         EqualsThreshold;                                             // 0xa4(0x04)
	float                                         ConstB;                                                      // 0xa8(0x04)
	float                                         ConstAEqualsB;                                               // 0xac(0x04)
};

// Class Engine.MaterialExpressionLightmapUVs
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionLightmapUVs : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionLightmassReplace
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionLightmassReplace : UMaterialExpression 
{
	struct FNone                                  Realtime;                                                    // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Lightmass;                                                   // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionLightVector
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionLightVector : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionLinearInterpolate
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionLinearInterpolate : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  B;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone                                  ALPHA;                                                       // 0x68(0x0c)
	char                                          UnknownData74[0x8];                                          // 0x74(0x08)
	float                                         ConstA;                                                      // 0x7c(0x04)
	float                                         ConstB;                                                      // 0x80(0x04)
	float                                         ConstAlpha;                                                  // 0x84(0x04)
};

// Class Engine.MaterialExpressionLogarithm10
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionLogarithm10 : UMaterialExpression 
{
	struct FNone                                  X;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionLogarithm2
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionLogarithm2 : UMaterialExpression 
{
	struct FNone                                  X;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionMakeMaterialAttributes
// Size: 0x270 (Inherited: 0x40)
struct UMaterialExpressionMakeMaterialAttributes : UMaterialExpression 
{
	struct FNone                                  BaseColor;                                                   // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Metallic;                                                    // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone                                  Specular;                                                    // 0x68(0x0c)
	char                                          UnknownData74[0x8];                                          // 0x74(0x08)
	struct FNone                                  Roughness;                                                   // 0x7c(0x0c)
	char                                          UnknownData88[0x8];                                          // 0x88(0x08)
	struct FNone                                  Anisotropy;                                                  // 0x90(0x0c)
	char                                          UnknownData9C[0x8];                                          // 0x9c(0x08)
	struct FNone                                  EmissiveColor;                                               // 0xa4(0x0c)
	char                                          UnknownDataB0[0x8];                                          // 0xb0(0x08)
	struct FNone                                  Opacity;                                                     // 0xb8(0x0c)
	char                                          UnknownDataC4[0x8];                                          // 0xc4(0x08)
	struct FNone                                  OpacityMask;                                                 // 0xcc(0x0c)
	char                                          UnknownDataD8[0x8];                                          // 0xd8(0x08)
	struct FNone                                  Normal;                                                      // 0xe0(0x0c)
	char                                          UnknownDataEC[0x8];                                          // 0xec(0x08)
	struct FNone                                  Tangent;                                                     // 0xf4(0x0c)
	char                                          UnknownData100[0x8];                                         // 0x100(0x08)
	struct FNone                                  WorldPositionOffset;                                         // 0x108(0x0c)
	char                                          UnknownData114[0x8];                                         // 0x114(0x08)
	struct FNone                                  WorldDisplacement;                                           // 0x11c(0x0c)
	char                                          UnknownData128[0x8];                                         // 0x128(0x08)
	struct FNone                                  TessellationMultiplier;                                      // 0x130(0x0c)
	char                                          UnknownData13C[0x8];                                         // 0x13c(0x08)
	struct FNone                                  SubsurfaceColor;                                             // 0x144(0x0c)
	char                                          UnknownData150[0x8];                                         // 0x150(0x08)
	struct FNone                                  ClearCoat;                                                   // 0x158(0x0c)
	char                                          UnknownData164[0x8];                                         // 0x164(0x08)
	struct FNone                                  ClearCoatRoughness;                                          // 0x16c(0x0c)
	char                                          UnknownData178[0x8];                                         // 0x178(0x08)
	struct FNone                                  AmbientOcclusion;                                            // 0x180(0x0c)
	char                                          UnknownData18C[0x8];                                         // 0x18c(0x08)
	struct FNone                                  Refraction;                                                  // 0x194(0x0c)
	char                                          UnknownData1A0[0x8];                                         // 0x1a0(0x08)
	struct FNone                                  CustomizedUVs[0x8];                                          // 0x1a8(0x60)
	char                                          UnknownData208[0x40];                                        // 0x208(0x40)
	struct FNone                                  PixelDepthOffset;                                            // 0x248(0x0c)
	char                                          UnknownData254[0x8];                                         // 0x254(0x08)
	struct FNone                                  ShadingModel;                                                // 0x25c(0x0c)
	char                                          UnknownData268[0x8];                                         // 0x268(0x08)
};

// Class Engine.MaterialExpressionMapARPassthroughCameraUV
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionMapARPassthroughCameraUV : UMaterialExpression 
{
	struct FNone                                  Coordinates;                                                 // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionMaterialAttributeLayers
// Size: 0xe8 (Inherited: 0x40)
struct UMaterialExpressionMaterialAttributeLayers : UMaterialExpression 
{
	struct FName                                  ParameterName;                                               // 0x40(0x08)
	struct FNone                                  ExpressionGUID;                                              // 0x48(0x10)
	struct FNone                                  Input;                                                       // 0x58(0x10)
	char                                          UnknownData68[0x8];                                          // 0x68(0x08)
	struct FNone                                  DefaultLayers;                                               // 0x70(0x40)
	struct TArray<None>                           LayerCallers;                                                // 0xb0(0x10)
	uint32_t                                      NumActiveLayerCallers;                                       // 0xc0(0x04)
	char                                          UnknownDataC4[0x4];                                          // 0xc4(0x04)
	struct TArray<None>                           BlendCallers;                                                // 0xc8(0x10)
	uint32_t                                      NumActiveBlendCallers;                                       // 0xd8(0x04)
	char                                          bIsLayerGraphBuilt : 0;                                      // 0xdc(0x01)
	char                                          UnknownDataDC[0xc];                                          // 0xdc(0x0c)
};

// Class Engine.MaterialExpressionMaterialFunctionCall
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionMaterialFunctionCall : UMaterialExpression 
{
	struct FNone*                                 MaterialFunction;                                            // 0x40(0x08)
	struct FNone                                  FunctionParameterInfo;                                       // 0x48(0x10)
};

// Class Engine.MaterialExpressionMaterialLayerOutput
// Size: 0x88 (Inherited: 0x88)
struct UMaterialExpressionMaterialLayerOutput : UMaterialExpressionFunctionOutput 
{
};

// Class Engine.MaterialExpressionMaterialProxyReplace
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionMaterialProxyReplace : UMaterialExpression 
{
	struct FNone                                  Realtime;                                                    // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  MaterialProxy;                                               // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionMax
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionMax : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  B;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	float                                         ConstA;                                                      // 0x68(0x04)
	float                                         ConstB;                                                      // 0x6c(0x04)
};

// Class Engine.MaterialExpressionMin
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionMin : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  B;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	float                                         ConstA;                                                      // 0x68(0x04)
	float                                         ConstB;                                                      // 0x6c(0x04)
};

// Class Engine.MaterialExpressionMultiply
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionMultiply : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  B;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	float                                         ConstA;                                                      // 0x68(0x04)
	float                                         ConstB;                                                      // 0x6c(0x04)
};

// Class Engine.MaterialExpressionNoise
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionNoise : UMaterialExpression 
{
	struct FNone                                  Position;                                                    // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  FilterWidth;                                                 // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	float                                         Scale;                                                       // 0x68(0x04)
	uint32_t                                      Quality;                                                     // 0x6c(0x04)
	char                                          NoiseFunction;                                               // 0x70(0x01)
	char                                          UnknownData71[0x3];                                          // 0x71(0x03)
	char                                          bTurbulence : 0;                                             // 0x74(0x01)
	char                                          UnknownData74[0x4];                                          // 0x74(0x04)
	uint32_t                                      Levels;                                                      // 0x78(0x04)
	float                                         OutputMin;                                                   // 0x7c(0x04)
	float                                         OutputMax;                                                   // 0x80(0x04)
	float                                         LevelScale;                                                  // 0x84(0x04)
	char                                          bTiling : 0;                                                 // 0x88(0x01)
	char                                          UnknownData88[0x4];                                          // 0x88(0x04)
	uint32_t                                      RepeatSize;                                                  // 0x8c(0x04)
};

// Class Engine.MaterialExpressionNormalize
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionNormalize : UMaterialExpression 
{
	struct FNone                                  VectorInput;                                                 // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionObjectBounds
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionObjectBounds : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionObjectOrientation
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionObjectOrientation : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionObjectPositionWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionObjectPositionWS : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionObjectRadius
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionObjectRadius : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionOneMinus
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionOneMinus : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionPanner
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionPanner : UMaterialExpression 
{
	struct FNone                                  Coordinate;                                                  // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Time;                                                        // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone                                  Speed;                                                       // 0x68(0x0c)
	char                                          UnknownData74[0x8];                                          // 0x74(0x08)
	float                                         SpeedX;                                                      // 0x7c(0x04)
	float                                         SpeedY;                                                      // 0x80(0x04)
	uint32_t                                      ConstCoordinate;                                             // 0x84(0x04)
	char                                          bFractionalPart : 0;                                         // 0x88(0x01)
	char                                          UnknownData88[0x8];                                          // 0x88(0x08)
};

// Class Engine.MaterialExpressionParticleColor
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleColor : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionParticleDirection
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleDirection : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionParticleMacroUV
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleMacroUV : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionParticleMotionBlurFade
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleMotionBlurFade : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionParticlePositionWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticlePositionWS : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionParticleRadius
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleRadius : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionParticleRandom
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleRandom : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionParticleRelativeTime
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleRelativeTime : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionParticleSize
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleSize : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionParticleSpeed
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleSpeed : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionParticleSubUV
// Size: 0xd8 (Inherited: 0xd0)
struct UMaterialExpressionParticleSubUV : UMaterialExpressionTextureSample 
{
	char                                          bBlend : 0;                                                  // 0xd0(0x01)
	char                                          UnknownDataD0[0x8];                                          // 0xd0(0x08)
};

// Class Engine.MaterialExpressionParticleSubUVProperties
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionParticleSubUVProperties : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionPerInstanceCustomData
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionPerInstanceCustomData : UMaterialExpression 
{
	struct FNone                                  DefaultValue;                                                // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	float                                         ConstDefaultValue;                                           // 0x54(0x04)
	uint32_t                                      DataIndex;                                                   // 0x58(0x04)
	char                                          UnknownData5C[0x4];                                          // 0x5c(0x04)
};

// Class Engine.MaterialExpressionPerInstanceFadeAmount
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPerInstanceFadeAmount : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionPerInstanceRandom
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPerInstanceRandom : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionPixelDepth
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPixelDepth : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionPixelNormalWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPixelNormalWS : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionPower
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionPower : UMaterialExpression 
{
	struct FNone                                  Base;                                                        // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Exponent;                                                    // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	float                                         ConstExponent;                                               // 0x68(0x04)
	char                                          UnknownData6C[0x4];                                          // 0x6c(0x04)
};

// Class Engine.MaterialExpressionPrecomputedAOMask
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPrecomputedAOMask : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionPreSkinnedLocalBounds
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPreSkinnedLocalBounds : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionPreSkinnedNormal
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPreSkinnedNormal : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionPreSkinnedPosition
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionPreSkinnedPosition : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionPreviousFrameSwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionPreviousFrameSwitch : UMaterialExpression 
{
	struct FNone                                  CurrentFrame;                                                // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  PreviousFrame;                                               // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionQualitySwitch
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionQualitySwitch : UMaterialExpression 
{
	struct FNone                                  Default;                                                     // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Inputs[0x3];                                                 // 0x54(0x24)
	char                                          UnknownData78[0x18];                                         // 0x78(0x18)
};

// Class Engine.MaterialExpressionRayTracingQualitySwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionRayTracingQualitySwitch : UMaterialExpression 
{
	struct FNone                                  Normal;                                                      // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  RayTraced;                                                   // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionRebaseToZeroOrigin
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionRebaseToZeroOrigin : UMaterialExpression 
{
	struct FNone                                  InputVector;                                                 // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionReflectionVectorWS
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionReflectionVectorWS : UMaterialExpression 
{
	struct FNone                                  CustomWorldNormal;                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	char                                          bNormalizeCustomWorldNormal : 0;                             // 0x54(0x01)
	char                                          UnknownData54[0x4];                                          // 0x54(0x04)
};

// Class Engine.MaterialExpressionReroute
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionReroute : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionRotateAboutAxis
// Size: 0x98 (Inherited: 0x40)
struct UMaterialExpressionRotateAboutAxis : UMaterialExpression 
{
	struct FNone                                  NormalizedRotationAxis;                                      // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  RotationAngle;                                               // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone                                  PivotPoint;                                                  // 0x68(0x0c)
	char                                          UnknownData74[0x8];                                          // 0x74(0x08)
	struct FNone                                  Position;                                                    // 0x7c(0x0c)
	char                                          UnknownData88[0x8];                                          // 0x88(0x08)
	float                                         Period;                                                      // 0x90(0x04)
	char                                          UnknownData94[0x4];                                          // 0x94(0x04)
};

// Class Engine.MaterialExpressionRotator
// Size: 0x78 (Inherited: 0x40)
struct UMaterialExpressionRotator : UMaterialExpression 
{
	struct FNone                                  Coordinate;                                                  // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Time;                                                        // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	float                                         CenterX;                                                     // 0x68(0x04)
	float                                         CenterY;                                                     // 0x6c(0x04)
	float                                         Speed;                                                       // 0x70(0x04)
	uint32_t                                      ConstCoordinate;                                             // 0x74(0x04)
};

// Class Engine.MaterialExpressionRound
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionRound : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
// Size: 0xd0 (Inherited: 0x40)
struct UMaterialExpressionRuntimeVirtualTextureOutput : UMaterialExpressionCustomOutput 
{
	struct FNone                                  BaseColor;                                                   // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Specular;                                                    // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone                                  Roughness;                                                   // 0x68(0x0c)
	char                                          UnknownData74[0x8];                                          // 0x74(0x08)
	struct FNone                                  Normal;                                                      // 0x7c(0x0c)
	char                                          UnknownData88[0x8];                                          // 0x88(0x08)
	struct FNone                                  WorldHeight;                                                 // 0x90(0x0c)
	char                                          UnknownData9C[0x8];                                          // 0x9c(0x08)
	struct FNone                                  Opacity;                                                     // 0xa4(0x0c)
	char                                          UnknownDataB0[0x8];                                          // 0xb0(0x08)
	struct FNone                                  Mask;                                                        // 0xb8(0x0c)
	char                                          UnknownDataC4[0xc];                                          // 0xc4(0x0c)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionRuntimeVirtualTextureReplace : UMaterialExpression 
{
	struct FNone                                  Default;                                                     // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  VirtualTextureOutput;                                        // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionRuntimeVirtualTextureSample : UMaterialExpression 
{
	struct FNone                                  Coordinates;                                                 // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  WorldPosition;                                               // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone                                  MipValue;                                                    // 0x68(0x0c)
	char                                          UnknownData74[0xc];                                          // 0x74(0x0c)
	struct FNone*                                 VirtualTexture;                                              // 0x80(0x08)
	enum class None                               MaterialType;                                                // 0x88(0x01)
	char                                          bSinglePhysicalSpace : 0;                                    // 0x89(0x01)
	char                                          UnknownData89[0x1];                                          // 0x89(0x01)
	char                                          MipValueMode;                                                // 0x8a(0x01)
	char                                          UnknownData8B[0x5];                                          // 0x8b(0x05)
};

// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
// Size: 0xb0 (Inherited: 0x90)
struct UMaterialExpressionRuntimeVirtualTextureSampleParameter : UMaterialExpressionRuntimeVirtualTextureSample 
{
	struct FName                                  ParameterName;                                               // 0x90(0x08)
	struct FNone                                  ExpressionGUID;                                              // 0x98(0x10)
	struct FName                                  Group;                                                       // 0xa8(0x08)
};

// Class Engine.MaterialExpressionSaturate
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSaturate : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionSceneColor
// Size: 0x78 (Inherited: 0x40)
struct UMaterialExpressionSceneColor : UMaterialExpression 
{
	char                                          InputMode;                                                   // 0x40(0x01)
	char                                          UnknownData41[0x3];                                          // 0x41(0x03)
	struct FNone                                  Input;                                                       // 0x44(0x0c)
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
	struct FNone                                  OffsetFraction;                                              // 0x58(0x0c)
	char                                          UnknownData64[0x8];                                          // 0x64(0x08)
	struct FNone                                  ConstInput;                                                  // 0x6c(0x08)
	char                                          UnknownData74[0x4];                                          // 0x74(0x04)
};

// Class Engine.MaterialExpressionSceneDepth
// Size: 0x78 (Inherited: 0x40)
struct UMaterialExpressionSceneDepth : UMaterialExpression 
{
	char                                          InputMode;                                                   // 0x40(0x01)
	char                                          UnknownData41[0x3];                                          // 0x41(0x03)
	struct FNone                                  Input;                                                       // 0x44(0x0c)
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
	struct FNone                                  Coordinates;                                                 // 0x58(0x0c)
	char                                          UnknownData64[0x8];                                          // 0x64(0x08)
	struct FNone                                  ConstInput;                                                  // 0x6c(0x08)
	char                                          UnknownData74[0x4];                                          // 0x74(0x04)
};

// Class Engine.MaterialExpressionSceneTexelSize
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionSceneTexelSize : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionSceneTexture
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSceneTexture : UMaterialExpression 
{
	struct FNone                                  Coordinates;                                                 // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	char                                          SceneTextureId;                                              // 0x54(0x01)
	char                                          bFiltered : 0;                                               // 0x55(0x01)
	char                                          UnknownData55[0x3];                                          // 0x55(0x03)
};

// Class Engine.MaterialExpressionScreenPosition
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionScreenPosition : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionSetMaterialAttributes
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionSetMaterialAttributes : UMaterialExpression 
{
	struct TArray<None>                           Inputs;                                                      // 0x40(0x10)
	struct TArray<None>                           AttributeSetTypes;                                           // 0x50(0x10)
};

// Class Engine.MaterialExpressionShaderStageSwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionShaderStageSwitch : UMaterialExpression 
{
	struct FNone                                  PixelShader;                                                 // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  VertexShader;                                                // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionShadingModel
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionShadingModel : UMaterialExpression 
{
	char                                          ShadingModel;                                                // 0x40(0x01)
	char                                          UnknownData41[0x7];                                          // 0x41(0x07)
};

// Class Engine.MaterialExpressionShadingPathSwitch
// Size: 0x90 (Inherited: 0x40)
struct UMaterialExpressionShadingPathSwitch : UMaterialExpression 
{
	struct FNone                                  Default;                                                     // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Inputs[0x3];                                                 // 0x54(0x24)
	char                                          UnknownData78[0x18];                                         // 0x78(0x18)
};

// Class Engine.MaterialExpressionShadowReplace
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionShadowReplace : UMaterialExpression 
{
	struct FNone                                  Default;                                                     // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Shadow;                                                      // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionSign
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSign : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionSine
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSine : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	float                                         Period;                                                      // 0x54(0x04)
};

// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
// Size: 0x80 (Inherited: 0x40)
struct UMaterialExpressionSingleLayerWaterMaterialOutput : UMaterialExpressionCustomOutput 
{
	struct FNone                                  ScatteringCoefficients;                                      // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  AbsorptionCoefficients;                                      // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone                                  PhaseG;                                                      // 0x68(0x0c)
	char                                          UnknownData74[0xc];                                          // 0x74(0x0c)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereLightDirection : UMaterialExpression 
{
	uint32_t                                      LightIndex;                                                  // 0x40(0x04)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereLightIlluminance : UMaterialExpression 
{
	uint32_t                                      LightIndex;                                                  // 0x40(0x04)
	struct FNone                                  WorldPosition;                                               // 0x44(0x0c)
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
};

// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereLightDiskLuminance : UMaterialExpression 
{
	uint32_t                                      LightIndex;                                                  // 0x40(0x04)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
};

// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereAerialPerspective : UMaterialExpression 
{
	struct FNone                                  WorldPosition;                                               // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionSkyAtmosphereViewLuminance : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionSobol
// Size: 0x88 (Inherited: 0x40)
struct UMaterialExpressionSobol : UMaterialExpression 
{
	struct FStrProperty                           cell;                                                        // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Index;                                                       // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone                                  Seed;                                                        // 0x68(0x0c)
	char                                          UnknownData74[0x8];                                          // 0x74(0x08)
	uint32_t                                      ConstIndex;                                                  // 0x7c(0x04)
	struct FNone                                  ConstSeed;                                                   // 0x80(0x08)
};

// Class Engine.MaterialExpressionSpeedTree
// Size: 0xa0 (Inherited: 0x40)
struct UMaterialExpressionSpeedTree : UMaterialExpression 
{
	struct FNone                                  GeometryInput;                                               // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  WindInput;                                                   // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone                                  LODInput;                                                    // 0x68(0x0c)
	char                                          UnknownData74[0x8];                                          // 0x74(0x08)
	struct FNone                                  ExtraBendWS;                                                 // 0x7c(0x0c)
	char                                          UnknownData88[0x8];                                          // 0x88(0x08)
	char                                          GeometryType;                                                // 0x90(0x01)
	char                                          WindType;                                                    // 0x91(0x01)
	char                                          LODType;                                                     // 0x92(0x01)
	char                                          UnknownData93[0x1];                                          // 0x93(0x01)
	float                                         BillboardThreshold;                                          // 0x94(0x04)
	char                                          bAccurateWindVelocities : 0;                                 // 0x98(0x01)
	char                                          UnknownData98[0x8];                                          // 0x98(0x08)
};

// Class Engine.MaterialExpressionSphereMask
// Size: 0x98 (Inherited: 0x40)
struct UMaterialExpressionSphereMask : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  B;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	struct FNone                                  Radius;                                                      // 0x68(0x0c)
	char                                          UnknownData74[0x8];                                          // 0x74(0x08)
	struct FNone                                  Hardness;                                                    // 0x7c(0x0c)
	char                                          UnknownData88[0x8];                                          // 0x88(0x08)
	float                                         AttenuationRadius;                                           // 0x90(0x04)
	float                                         HardnessPercent;                                             // 0x94(0x04)
};

// Class Engine.MaterialExpressionSphericalParticleOpacity
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSphericalParticleOpacity : UMaterialExpression 
{
	struct FNone                                  Density;                                                     // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	float                                         ConstantDensity;                                             // 0x54(0x04)
};

// Class Engine.MaterialExpressionSquareRoot
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionSquareRoot : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionStaticBool
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionStaticBool : UMaterialExpression 
{
	char                                          Value : 0;                                                   // 0x40(0x01)
	char                                          UnknownData40[0x8];                                          // 0x40(0x08)
};

// Class Engine.MaterialExpressionStaticBoolParameter
// Size: 0x60 (Inherited: 0x58)
struct UMaterialExpressionStaticBoolParameter : UMaterialExpressionParameter 
{
	char                                          DefaultValue : 0;                                            // 0x58(0x01)
	char                                          UnknownData58[0x8];                                          // 0x58(0x08)
};

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// Size: 0x70 (Inherited: 0x58)
struct UMaterialExpressionStaticComponentMaskParameter : UMaterialExpressionParameter 
{
	struct FNone                                  Input;                                                       // 0x58(0x0c)
	char                                          UnknownData64[0x8];                                          // 0x64(0x08)
	char                                          DefaultR : 0;                                                // 0x6c(0x01)
	char                                          DefaultG : 0;                                                // 0x6c(0x01)
	char                                          DefaultB : 0;                                                // 0x6c(0x01)
	char                                          DefaultA : 0;                                                // 0x6c(0x01)
	char                                          UnknownData6C[0x4];                                          // 0x6c(0x04)
};

// Class Engine.MaterialExpressionStaticSwitch
// Size: 0x80 (Inherited: 0x40)
struct UMaterialExpressionStaticSwitch : UMaterialExpression 
{
	char                                          DefaultValue : 0;                                            // 0x40(0x01)
	char                                          UnknownData40[0x4];                                          // 0x40(0x04)
	struct FNone                                  A;                                                           // 0x44(0x0c)
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
	struct FNone                                  B;                                                           // 0x58(0x0c)
	char                                          UnknownData64[0x8];                                          // 0x64(0x08)
	struct FNone                                  Value;                                                       // 0x6c(0x0c)
	char                                          UnknownData78[0x8];                                          // 0x78(0x08)
};

// Class Engine.MaterialExpressionStaticSwitchParameter
// Size: 0x88 (Inherited: 0x60)
struct UMaterialExpressionStaticSwitchParameter : UMaterialExpressionStaticBoolParameter 
{
	struct FNone                                  A;                                                           // 0x60(0x0c)
	char                                          UnknownData6C[0x8];                                          // 0x6c(0x08)
	struct FNone                                  B;                                                           // 0x74(0x0c)
	char                                          UnknownData80[0x8];                                          // 0x80(0x08)
};

// Class Engine.MaterialExpressionSubtract
// Size: 0x70 (Inherited: 0x40)
struct UMaterialExpressionSubtract : UMaterialExpression 
{
	struct FNone                                  A;                                                           // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  B;                                                           // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	float                                         ConstA;                                                      // 0x68(0x04)
	float                                         ConstB;                                                      // 0x6c(0x04)
};

// Class Engine.MaterialExpressionTangent
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTangent : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	float                                         Period;                                                      // 0x54(0x04)
};

// Class Engine.MaterialExpressionTangentOutput
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTangentOutput : UMaterialExpressionCustomOutput 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionTemporalSobol
// Size: 0x78 (Inherited: 0x40)
struct UMaterialExpressionTemporalSobol : UMaterialExpression 
{
	struct FNone                                  Index;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Seed;                                                        // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
	uint32_t                                      ConstIndex;                                                  // 0x68(0x04)
	struct FNone                                  ConstSeed;                                                   // 0x6c(0x08)
	char                                          UnknownData74[0x4];                                          // 0x74(0x04)
};

// Class Engine.MaterialExpressionTextureCoordinate
// Size: 0x50 (Inherited: 0x40)
struct UMaterialExpressionTextureCoordinate : UMaterialExpression 
{
	uint32_t                                      CoordinateIndex;                                             // 0x40(0x04)
	float                                         UTiling;                                                     // 0x44(0x04)
	float                                         VTiling;                                                     // 0x48(0x04)
	char                                          UnMirrorU : 0;                                               // 0x4c(0x01)
	char                                          UnMirrorV : 0;                                               // 0x4c(0x01)
	char                                          UnknownData4C[0x4];                                          // 0x4c(0x04)
};

// Class Engine.MaterialExpressionTextureObject
// Size: 0x50 (Inherited: 0x50)
struct UMaterialExpressionTextureObject : UMaterialExpressionTextureBase 
{
};

// Class Engine.MaterialExpressionTextureObjectParameter
// Size: 0xf0 (Inherited: 0xf0)
struct UMaterialExpressionTextureObjectParameter : UMaterialExpressionTextureSampleParameter 
{
};

// Class Engine.MaterialExpressionTextureProperty
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTextureProperty : UMaterialExpression 
{
	struct FNone                                  TextureObject;                                               // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	char                                          Property;                                                    // 0x54(0x01)
	char                                          UnknownData55[0x3];                                          // 0x55(0x03)
};

// Class Engine.MaterialExpressionTextureSampleParameter2DArray
// Size: 0xf0 (Inherited: 0xf0)
struct UMaterialExpressionTextureSampleParameter2DArray : UMaterialExpressionTextureSampleParameter 
{
};

// Class Engine.MaterialExpressionTextureSampleParameterCube
// Size: 0xf0 (Inherited: 0xf0)
struct UMaterialExpressionTextureSampleParameterCube : UMaterialExpressionTextureSampleParameter 
{
};

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// Size: 0xf8 (Inherited: 0xf0)
struct UMaterialExpressionTextureSampleParameterSubUV : UMaterialExpressionTextureSampleParameter2D 
{
	char                                          bBlend : 0;                                                  // 0xf0(0x01)
	char                                          UnknownDataF0[0x8];                                          // 0xf0(0x08)
};

// Class Engine.MaterialExpressionTextureSampleParameterVolume
// Size: 0xf0 (Inherited: 0xf0)
struct UMaterialExpressionTextureSampleParameterVolume : UMaterialExpressionTextureSampleParameter 
{
};

// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionThinTranslucentMaterialOutput : UMaterialExpressionCustomOutput 
{
	struct FNone                                  TransmittanceColor;                                          // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionTime
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionTime : UMaterialExpression 
{
	char                                          bIgnorePause : 0;                                            // 0x40(0x01)
	char                                          bOverride_Period : 0;                                        // 0x40(0x01)
	char                                          UnknownData40[0x4];                                          // 0x40(0x04)
	float                                         Period;                                                      // 0x44(0x04)
};

// Class Engine.MaterialExpressionTransform
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTransform : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	char                                          TransformSourceType;                                         // 0x54(0x01)
	char                                          TransformType;                                               // 0x55(0x01)
	char                                          UnknownData56[0x2];                                          // 0x56(0x02)
};

// Class Engine.MaterialExpressionTransformPosition
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTransformPosition : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	char                                          TransformSourceType;                                         // 0x54(0x01)
	char                                          TransformType;                                               // 0x55(0x01)
	char                                          UnknownData56[0x2];                                          // 0x56(0x02)
};

// Class Engine.MaterialExpressionTruncate
// Size: 0x58 (Inherited: 0x40)
struct UMaterialExpressionTruncate : UMaterialExpression 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0xc];                                          // 0x4c(0x0c)
};

// Class Engine.MaterialExpressionTwoSidedSign
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionTwoSidedSign : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionVectorNoise
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionVectorNoise : UMaterialExpression 
{
	struct FNone                                  Position;                                                    // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	char                                          NoiseFunction;                                               // 0x54(0x01)
	char                                          UnknownData55[0x3];                                          // 0x55(0x03)
	uint32_t                                      Quality;                                                     // 0x58(0x04)
	char                                          bTiling : 0;                                                 // 0x5c(0x01)
	char                                          UnknownData5C[0x4];                                          // 0x5c(0x04)
	uint32_t                                      TileSize;                                                    // 0x60(0x04)
	char                                          UnknownData64[0x4];                                          // 0x64(0x04)
};

// Class Engine.MaterialExpressionVertexColor
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionVertexColor : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionVertexInterpolator
// Size: 0x60 (Inherited: 0x40)
struct UMaterialExpressionVertexInterpolator : UMaterialExpressionCustomOutput 
{
	struct FNone                                  Input;                                                       // 0x40(0x0c)
	char                                          UnknownData4C[0x14];                                         // 0x4c(0x14)
};

// Class Engine.MaterialExpressionVertexNormalWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionVertexNormalWS : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionVertexTangentWS
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionVertexTangentWS : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionViewProperty
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionViewProperty : UMaterialExpression 
{
	char                                          Property;                                                    // 0x40(0x01)
	char                                          UnknownData41[0x7];                                          // 0x41(0x07)
};

// Class Engine.MaterialExpressionViewSize
// Size: 0x40 (Inherited: 0x40)
struct UMaterialExpressionViewSize : UMaterialExpression 
{
};

// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
// Size: 0x68 (Inherited: 0x40)
struct UMaterialExpressionVirtualTextureFeatureSwitch : UMaterialExpression 
{
	struct FNone                                  No;                                                          // 0x40(0x0c)
	char                                          UnknownData4C[0x8];                                          // 0x4c(0x08)
	struct FNone                                  Yes;                                                         // 0x54(0x0c)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.MaterialExpressionWorldPosition
// Size: 0x48 (Inherited: 0x40)
struct UMaterialExpressionWorldPosition : UMaterialExpression 
{
	char                                          WorldPositionShaderOffset;                                   // 0x40(0x01)
	char                                          UnknownData41[0x7];                                          // 0x41(0x07)
};

// Class Engine.MaterialFunctionInterface
// Size: 0x40 (Inherited: 0x28)
struct UMaterialFunctionInterface : UObject 
{
	struct FNone                                  StateID;                                                     // 0x28(0x10)
	enum class None                               MaterialFunctionUsage;                                       // 0x38(0x01)
	char                                          UnknownData39[0x7];                                          // 0x39(0x07)
};

// Class Engine.MaterialFunction
// Size: 0x58 (Inherited: 0x40)
struct UMaterialFunction : UMaterialFunctionInterface 
{
	struct FString                                Description;                                                 // 0x40(0x10)
	char                                          bExposeToLibrary : 0;                                        // 0x50(0x01)
	char                                          bPrefixParameterNames : 0;                                   // 0x50(0x01)
	char                                          bReentrantFlag : 0;                                          // 0x50(0x01)
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
};

// Class Engine.MaterialFunctionInstance
// Size: 0xc0 (Inherited: 0x40)
struct UMaterialFunctionInstance : UMaterialFunctionInterface 
{
	struct FNone*                                 Parent;                                                      // 0x40(0x08)
	struct FNone*                                 Base;                                                        // 0x48(0x08)
	struct TArray<None>                           ScalarParameterValues;                                       // 0x50(0x10)
	struct TArray<None>                           VectorParameterValues;                                       // 0x60(0x10)
	struct TArray<None>                           TextureParameterValues;                                      // 0x70(0x10)
	struct TArray<None>                           FontParameterValues;                                         // 0x80(0x10)
	struct TArray<None>                           StaticSwitchParameterValues;                                 // 0x90(0x10)
	struct TArray<None>                           StaticComponentMaskParameterValues;                          // 0xa0(0x10)
	struct TArray<None>                           RuntimeVirtualTextureParameterValues;                        // 0xb0(0x10)
};

// Class Engine.MaterialFunctionMaterialLayer
// Size: 0x58 (Inherited: 0x58)
struct UMaterialFunctionMaterialLayer : UMaterialFunction 
{
};

// Class Engine.MaterialFunctionMaterialLayerInstance
// Size: 0xc0 (Inherited: 0xc0)
struct UMaterialFunctionMaterialLayerInstance : UMaterialFunctionInstance 
{
};

// Class Engine.MaterialFunctionMaterialLayerBlend
// Size: 0x58 (Inherited: 0x58)
struct UMaterialFunctionMaterialLayerBlend : UMaterialFunction 
{
};

// Class Engine.MaterialFunctionMaterialLayerBlendInstance
// Size: 0xc0 (Inherited: 0xc0)
struct UMaterialFunctionMaterialLayerBlendInstance : UMaterialFunctionInstance 
{
};

// Class Engine.MaterialInstanceActor
// Size: 0x320 (Inherited: 0x310)
struct AMaterialInstanceActor : AActor 
{
	struct TArray<None>                           TargetActors;                                                // 0x310(0x10)
};

// Class Engine.MaterialInstanceDynamic
// Size: 0x458 (Inherited: 0x408)
struct UMaterialInstanceDynamic : UMaterialInstance 
{
	char                                          UnknownData408[0x50];                                        // 0x408(0x50)

	void SetVectorParameterValueByInfo(struct FNone& ParameterInfo, struct FNone Value); // sub_0x3d6d600
	void SetVectorParameterValue(struct FName ParameterName, struct FNone Value); // sub_0x3d6d530
	void SetTextureParameterValueByInfo(struct FNone& ParameterInfo, struct FNone* Value); // sub_0x3d6d440
	void SetTextureParameterValue(struct FName ParameterName, struct FNone* Value); // sub_0x3d6d380
	void SetScalarParameterValueByInfo(struct FNone& ParameterInfo, float Value); // sub_0x3d6d290
	void SetScalarParameterValue(struct FName ParameterName, float Value); // sub_0x3d6d1c0
	void K2_InterpolateMaterialInstanceParams(struct FNone* SourceA, struct FNone* SourceB, float ALPHA); // sub_0x3d6cf10
	struct FNone K2_GetVectorParameterValueByInfo(struct FNone& ParameterInfo); // sub_0x3d6ce60
	struct FNone K2_GetVectorParameterValue(struct FName ParameterName); // sub_0x3d6cdc0
	struct FNone* K2_GetTextureParameterValueByInfo(struct FNone& ParameterInfo); // sub_0x3d6cc70
	struct FNone* K2_GetTextureParameterValue(struct FName ParameterName); // sub_0x3d6cbe0
	float K2_GetScalarParameterValueByInfo(struct FNone& ParameterInfo); // sub_0x3d6caa0
	float K2_GetScalarParameterValue(struct FName ParameterName); // sub_0x3d6ca00
	void K2_CopyMaterialInstanceParameters(struct FNone* Source, char bQuickParametersOnly); // sub_0x3d6c890
	void CopyParameterOverrides(struct FNone* MaterialInstance); // sub_0x3d6c630
	void CopyInterpParameters(struct FNone* Source); // sub_0x3d6c5b0
};

// Class Engine.MaterialParameterCollection
// Size: 0x78 (Inherited: 0x28)
struct UMaterialParameterCollection : UObject 
{
	struct FNone                                  StateID;                                                     // 0x28(0x10)
	struct TArray<None>                           ScalarParameters;                                            // 0x38(0x10)
	struct TArray<None>                           VectorParameters;                                            // 0x48(0x10)
	char                                          UnknownData58[0x20];                                         // 0x58(0x20)
};

// Class Engine.MaterialParameterCollectionInstance
// Size: 0xf0 (Inherited: 0x28)
struct UMaterialParameterCollectionInstance : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct FNone*                                 Collection;                                                  // 0x30(0x08)
	char                                          UnknownData38[0xb8];                                         // 0x38(0xb8)
};

// Class Engine.MatineeActor
// Size: 0x3b8 (Inherited: 0x310)
struct AMatineeActor : AActor 
{
	struct FNone*                                 MatineeData;                                                 // 0x310(0x08)
	struct FName                                  MatineeControllerName;                                       // 0x318(0x08)
	float                                         PlayRate;                                                    // 0x320(0x04)
	char                                          bPlayOnLevelLoad : 0;                                        // 0x324(0x01)
	char                                          bForceStartPos : 0;                                          // 0x324(0x01)
	char                                          UnknownData324[0x4];                                         // 0x324(0x04)
	float                                         ForceStartPosition;                                          // 0x328(0x04)
	char                                          bLooping : 0;                                                // 0x32c(0x01)
	char                                          bRewindOnPlay : 0;                                           // 0x32c(0x01)
	char                                          bNoResetOnRewind : 0;                                        // 0x32c(0x01)
	char                                          bRewindIfAlreadyPlaying : 0;                                 // 0x32c(0x01)
	char                                          bDisableRadioFilter : 0;                                     // 0x32c(0x01)
	char                                          bClientSideOnly : 0;                                         // 0x32c(0x01)
	char                                          bSkipUpdateIfNotVisible : 0;                                 // 0x32c(0x01)
	char                                          bIsSkippable : 0;                                            // 0x32c(0x01)
	char                                          UnknownData32C[0x4];                                         // 0x32c(0x04)
	uint32_t                                      PreferredSplitScreenNum;                                     // 0x330(0x04)
	char                                          bDisableMovementInput : 0;                                   // 0x334(0x01)
	char                                          bDisableLookAtInput : 0;                                     // 0x334(0x01)
	char                                          bHidePlayer : 0;                                             // 0x334(0x01)
	char                                          bHideHud : 0;                                                // 0x334(0x01)
	char                                          UnknownData334[0x4];                                         // 0x334(0x04)
	struct TArray<None>                           GroupActorInfos;                                             // 0x338(0x10)
	char                                          bShouldShowGore : 0;                                         // 0x348(0x01)
	char                                          UnknownData348[0x8];                                         // 0x348(0x08)
	struct TArray<None>                           GroupInst;                                                   // 0x350(0x10)
	struct TArray<None>                           CameraCuts;                                                  // 0x360(0x10)
	char                                          bIsPlaying : 0;                                              // 0x370(0x01)
	char                                          bReversePlayback : 0;                                        // 0x370(0x01)
	char                                          bPaused : 0;                                                 // 0x370(0x01)
	char                                          bPendingStop : 0;                                            // 0x370(0x01)
	char                                          UnknownData370[0x4];                                         // 0x370(0x04)
	float                                         InterpPosition;                                              // 0x374(0x04)
	char                                          UnknownData378[0x4];                                         // 0x378(0x04)
	char                                          ReplicationForceIsPlaying;                                   // 0x37c(0x01)
	char                                          UnknownData37D[0x3];                                         // 0x37d(0x03)
	struct FMulticastInlineDelegate               OnPlay;                                                      // 0x380(0x10)
	struct FMulticastInlineDelegate               OnStop;                                                      // 0x390(0x10)
	struct FMulticastInlineDelegate               OnPause;                                                     // 0x3a0(0x10)
	char                                          UnknownData3B0[0x8];                                         // 0x3b0(0x08)

	void Stop(); // sub_0x1f0c650
	void SetPosition(float NewPosition, char bJump); // sub_0x3d713e0
	void SetLoopingState(char bNewLooping); // sub_0x3d71350
	void Reverse(); // sub_0x1f0adc0
	void Play(); // sub_0x1235530
	void Pause(); // sub_0x11caf10
	void EnableGroupByName(struct FString GroupName, char bEnable); // sub_0x3d70df0
	void ChangePlaybackDirection(); // sub_0x3c74d40
};

// Class Engine.MatineeActorCameraAnim
// Size: 0x3c0 (Inherited: 0x3b8)
struct AMatineeActorCameraAnim : AMatineeActor 
{
	struct FNone*                                 CameraAnim;                                                  // 0x3b8(0x08)
};

// Class Engine.MatineeAnimInterface
// Size: 0x28 (Inherited: 0x28)
struct UMatineeAnimInterface : UInterface 
{
};

// Class Engine.MatineeInterface
// Size: 0x28 (Inherited: 0x28)
struct UMatineeInterface : UInterface 
{
};

// Class Engine.MeshMergeCullingVolume
// Size: 0x348 (Inherited: 0x348)
struct AMeshMergeCullingVolume : AVolume 
{
};

// Class Engine.MeshSimplificationSettings
// Size: 0x40 (Inherited: 0x38)
struct UMeshSimplificationSettings : UDeveloperSettings 
{
	struct FName                                  MeshReductionModuleName;                                     // 0x38(0x08)
};

// Class Engine.MeshVertexPainterKismetLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMeshVertexPainterKismetLibrary : UBlueprintFunctionLibrary 
{

	void RemovePaintedVertices(struct FNone* StaticMeshComponent); // sub_0x3d74ee0
	void PaintVerticesSingleColor(struct FNone* StaticMeshComponent, struct FNone& FillColor, char bConvertToSRGB); // sub_0x3d74ce0
	void PaintVerticesLerpAlongAxis(struct FNone* StaticMeshComponent, struct FNone& StartColor, struct FNone& EndColor, enum class None Axis, char bConvertToSRGB); // sub_0x3d74b30
};

// Class Engine.MicroTransactionBase
// Size: 0x68 (Inherited: 0x38)
struct UMicroTransactionBase : UPlatformInterfaceBase 
{
	struct TArray<None>                           AvailableProducts;                                           // 0x38(0x10)
	struct FString                                LastError;                                                   // 0x48(0x10)
	struct FString                                LastErrorSolution;                                           // 0x58(0x10)
};

// Class Engine.MK3DKillcamComponent
// Size: 0x110 (Inherited: 0xb0)
struct UMK3DKillcamComponent : UActorComponent 
{
	struct FMulticastInlineDelegate               OnMK3DKillcamCompleteEvent;                                  // 0xb0(0x10)
	char                                          UnknownDataC0[0x18];                                         // 0xc0(0x18)
	struct TArray<None>                           MK3DKillEvents;                                              // 0xd8(0x10)
	float                                         KillcamBeforeSec;                                            // 0xe8(0x04)
	float                                         KillcamAfterSec;                                             // 0xec(0x04)
	char                                          UnknownDataF0[0x20];                                         // 0xf0(0x20)

	void OnJumpCompleteForKillcam(char bSuccess); // sub_0x3d74aa0
};

// Class Engine.MK3DTargetcamComponent
// Size: 0x100 (Inherited: 0xb0)
struct UMK3DTargetcamComponent : UActorComponent 
{
	struct FMulticastInlineDelegate               OnMK3DTargetcamCompleteEvent;                                // 0xb0(0x10)
	char                                          UnknownDataC0[0x18];                                         // 0xc0(0x18)
	struct TArray<None>                           MK3DTargetEvents;                                            // 0xd8(0x10)
	char                                          UnknownDataE8[0x18];                                         // 0xe8(0x18)

	void EnumerateMK3DTargetEvents(struct FNone* World); // sub_0x3d78370
};

// Class Engine.MKDemoActorChannel
// Size: 0x318 (Inherited: 0x2d0)
struct UMKDemoActorChannel : UActorChannel 
{
	char                                          UnknownData2D0[0x20];                                        // 0x2d0(0x20)
	struct TArray<None>                           PendingNetObjectsHolder;                                     // 0x2f0(0x10)
	char                                          UnknownData300[0x18];                                        // 0x300(0x18)
};

// Class Engine.ReplaySampleBase
// Size: 0x38 (Inherited: 0x28)
struct UReplaySampleBase : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	char                                          DataVersion;                                                 // 0x30(0x01)
	char                                          UnknownData31[0x3];                                          // 0x31(0x03)
	float                                         Time;                                                        // 0x34(0x04)

	struct FNone* MakeReplaySample(struct FNone* Actor); // sub_0x3d794f0
};

// Class Engine.MKUtils
// Size: 0x28 (Inherited: 0x28)
struct UMKUtils : UBlueprintFunctionLibrary 
{

	char IsViewTargetPawn(struct FNone* InPawn, struct FNone* InPC); // sub_0x3d79270
	char IsReplaying(struct FNone* WorldContextObject); // sub_0x3d791f0
	char IsRecordingReplay(struct FNone* WorldContextObject); // sub_0x3d79170
	char IsPlayingReplay(struct FNone* WorldContextObject); // sub_0x3d790f0
	char IsPlayingLiveReplay(struct FNone* WorldContextObject); // sub_0x3d79070
	char IsPlayingKillcam(struct FNone* WorldContextObject); // sub_0x3d78ff0
	char IsPausedReplay(struct FNone* WorldContextObject); // sub_0x3d78f70
	struct FNone* GetWorld(struct FNone* WorldContextObject); // sub_0x3d78ef0
	struct FNone* GetViewTargetPawn(struct FNone* WorldContextObject, struct FNone* InPC); // sub_0x3d78e30
	struct FNone* GetViewTargetCharacter(struct FNone* WorldContextObject, struct FNone* InPC); // sub_0x3d78d70
	struct FString GetNetGUIDForReplay(struct FNone* InActor); // sub_0x3d78ad0
	struct FString GetHumanReadableSizeWithPrecision(uint32_t Size, uint32_t Precision, char IncludeLeadingZero); // sub_0x3d789a0
	struct FText GetFloatAsTextWithPrecision(float TheFloat, uint32_t Precision, char IncludeLeadingZero); // sub_0x3d78840
	struct FString GetFloatAsStringWithPrecision(float TheFloat, uint32_t Precision, char IncludeLeadingZero); // sub_0x3d78700
	struct FNone* GetFirstPlayerController(struct FNone* WorldContextObject, struct FNone* InWorld); // sub_0x3d78640
	float GetDemoCurrentTime(struct FNone* WorldContextObject); // sub_0x3d785b0
};

// Class Engine.ModelComponent
// Size: 0x500 (Inherited: 0x4c0)
struct UModelComponent : UPrimitiveComponent 
{
	char                                          UnknownData4C0[0x10];                                        // 0x4c0(0x10)
	struct FNone*                                 ModelBodySetup;                                              // 0x4d0(0x08)
	char                                          UnknownData4D8[0x28];                                        // 0x4d8(0x28)
};

// Class Engine.MorphTarget
// Size: 0x40 (Inherited: 0x28)
struct UMorphTarget : UObject 
{
	struct FNone*                                 BaseSkelMesh;                                                // 0x28(0x08)
	char                                          UnknownData30[0x10];                                         // 0x30(0x10)
};

// Class Engine.NavAgentInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavAgentInterface : UInterface 
{
};

// Class Engine.NavAreaBase
// Size: 0x30 (Inherited: 0x28)
struct UNavAreaBase : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
};

// Class Engine.NavCollisionBase
// Size: 0x70 (Inherited: 0x28)
struct UNavCollisionBase : UObject 
{
	char                                          bIsDynamicObstacle : 0;                                      // 0x28(0x01)
	char                                          UnknownData28[0x48];                                         // 0x28(0x48)
};

// Class Engine.NavEdgeProviderInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavEdgeProviderInterface : UInterface 
{
};

// Class Engine.NavigationDataChunk
// Size: 0x30 (Inherited: 0x28)
struct UNavigationDataChunk : UObject 
{
	struct FName                                  NavigationDataName;                                          // 0x28(0x08)
};

// Class Engine.NavigationDataInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavigationDataInterface : UInterface 
{
};

// Class Engine.NavigationSystemBase
// Size: 0x28 (Inherited: 0x28)
struct UNavigationSystemBase : UObject 
{
};

// Class Engine.NavigationSystemConfig
// Size: 0x50 (Inherited: 0x28)
struct UNavigationSystemConfig : UObject 
{
	struct FNone                                  NavigationSystemClass;                                       // 0x28(0x18)
	struct FNone                                  SupportedAgentsMask;                                         // 0x40(0x04)
	struct FName                                  DefaultAgentName;                                            // 0x44(0x08)
	char                                          bIsOverriden : 0;                                            // 0x4c(0x01)
	char                                          UnknownData4C[0x4];                                          // 0x4c(0x04)
};

// Class Engine.NullNavSysConfig
// Size: 0x50 (Inherited: 0x50)
struct UNullNavSysConfig : UNavigationSystemConfig 
{
};

// Class Engine.NavLinkDefinition
// Size: 0x50 (Inherited: 0x28)
struct UNavLinkDefinition : UObject 
{
	struct TArray<None>                           LINKS;                                                       // 0x28(0x10)
	struct TArray<None>                           SegmentLinks;                                                // 0x38(0x10)
	char                                          UnknownData48[0x8];                                          // 0x48(0x08)
};

// Class Engine.NavPathObserverInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavPathObserverInterface : UInterface 
{
};

// Class Engine.NavRelevantInterface
// Size: 0x28 (Inherited: 0x28)
struct UNavRelevantInterface : UInterface 
{
};

// Class Engine.SimulatedClientNetConnection
// Size: 0x1aa0 (Inherited: 0x1aa0)
struct USimulatedClientNetConnection : UNetConnection 
{
};

// Class Engine.NetPushModelHelpers
// Size: 0x28 (Inherited: 0x28)
struct UNetPushModelHelpers : UBlueprintFunctionLibrary 
{

	void MarkPropertyDirtyFromRepIndex(struct FNone* Object, uint32_t RepIndex, struct FName PropertyName); // sub_0x3d82dc0
	void MarkPropertyDirty(struct FNone* Object, struct FName PropertyName); // sub_0x3d82d10
};

// Class Engine.NetworkPredictionInterface
// Size: 0x28 (Inherited: 0x28)
struct UNetworkPredictionInterface : UInterface 
{
};

// Class Engine.NetworkSettings
// Size: 0x58 (Inherited: 0x38)
struct UNetworkSettings : UDeveloperSettings 
{
	char                                          bVerifyPeer : 0;                                             // 0x38(0x01)
	char                                          bEnableMultiplayerWorldOriginRebasing : 0;                   // 0x38(0x01)
	char                                          UnknownData38[0x4];                                          // 0x38(0x04)
	uint32_t                                      MaxRepArraySize;                                             // 0x3c(0x04)
	uint32_t                                      MaxRepArrayMemory;                                           // 0x40(0x04)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
	struct TArray<None>                           NetworkEmulationProfiles;                                    // 0x48(0x10)
};

// Class Engine.NodeMappingContainer
// Size: 0x168 (Inherited: 0x28)
struct UNodeMappingContainer : UObject 
{
	struct TMap<None, None>                       SourceItems;                                                 // 0x28(0x50)
	struct TMap<None, None>                       TargetItems;                                                 // 0x78(0x50)
	struct TMap<None, None>                       SourceToTarget;                                              // 0xc8(0x50)
	struct TSoftObjectPtr<FNone>                  SourceAsset;                                                 // 0x118(0x28)
	struct TSoftObjectPtr<FNone>                  TargetAsset;                                                 // 0x140(0x28)
};

// Class Engine.NodeMappingProviderInterface
// Size: 0x28 (Inherited: 0x28)
struct UNodeMappingProviderInterface : UInterface 
{
};

// Class Engine.Note
// Size: 0x310 (Inherited: 0x310)
struct ANote : AActor 
{
};

// Class Engine.ObjectLibrary
// Size: 0xa8 (Inherited: 0x28)
struct UObjectLibrary : UObject 
{
	struct FNone*                                 ObjectBaseClass;                                             // 0x28(0x08)
	char                                          bHasBlueprintClasses : 0;                                    // 0x30(0x01)
	char                                          UnknownData30[0x8];                                          // 0x30(0x08)
	struct TArray<None>                           Objects;                                                     // 0x38(0x10)
	struct TArray<None>                           WeakObjects;                                                 // 0x48(0x10)
	char                                          bUseWeakReferences : 0;                                      // 0x58(0x01)
	char                                          UnknownData58[0x1];                                          // 0x58(0x01)
	char                                          bIsFullyLoaded : 0;                                          // 0x59(0x01)
	char                                          UnknownData59[0x4f];                                         // 0x59(0x4f)
};

// Class Engine.ObjectReferencer
// Size: 0x38 (Inherited: 0x28)
struct UObjectReferencer : UObject 
{
	struct TArray<None>                           ReferencedObjects;                                           // 0x28(0x10)
};

// Class Engine.ObjectTraceWorldSubsystem
// Size: 0x38 (Inherited: 0x30)
struct UObjectTraceWorldSubsystem : UWorldSubsystem 
{
	char                                          UnknownData30[0x8];                                          // 0x30(0x08)
};

// Class Engine.PackageMapClient
// Size: 0x3f8 (Inherited: 0xe0)
struct UPackageMapClient : UPackageMap 
{
	char                                          UnknownDataE0[0x318];                                        // 0xe0(0x318)
};

// Class Engine.PainCausingVolume
// Size: 0x380 (Inherited: 0x358)
struct APainCausingVolume : APhysicsVolume 
{
	char                                          bPainCausing : 0;                                            // 0x358(0x01)
	char                                          UnknownData358[0x4];                                         // 0x358(0x04)
	float                                         DamagePerSec;                                                // 0x35c(0x04)
	struct FNone*                                 DamageType;                                                  // 0x360(0x08)
	float                                         PainInterval;                                                // 0x368(0x04)
	char                                          bEntryPain : 0;                                              // 0x36c(0x01)
	char                                          BACKUP_bPainCausing : 0;                                     // 0x36c(0x01)
	char                                          UnknownData36C[0x4];                                         // 0x36c(0x04)
	struct FNone*                                 DamageInstigator;                                            // 0x370(0x08)
	char                                          UnknownData378[0x8];                                         // 0x378(0x08)
};

// Class Engine.ParticleEmitter
// Size: 0x1b8 (Inherited: 0x28)
struct UParticleEmitter : UObject 
{
	struct FName                                  EmitterName;                                                 // 0x28(0x08)
	uint32_t                                      SubUVDataOffset;                                             // 0x30(0x04)
	char                                          EmitterRenderMode;                                           // 0x34(0x01)
	enum class None                               SignificanceLevel;                                           // 0x35(0x01)
	char                                          UnknownData36[0x1];                                          // 0x36(0x01)
	char                                          bUseLegacySpawningBehavior : 0;                              // 0x37(0x01)
	char                                          ConvertedModules : 0;                                        // 0x37(0x01)
	char                                          bIsSoloing : 0;                                              // 0x37(0x01)
	char                                          bCookedOut : 0;                                              // 0x37(0x01)
	char                                          bDisabledLODsKeepEmitterAlive : 0;                           // 0x37(0x01)
	char                                          UnknownData37[0x1];                                          // 0x37(0x01)
	char                                          bDisableWhenInsignficant : 0;                                // 0x38(0x01)
	char                                          UnknownData38[0x8];                                          // 0x38(0x08)
	struct TArray<None>                           LODLevels;                                                   // 0x40(0x10)
	uint32_t                                      PeakActiveParticles;                                         // 0x50(0x04)
	uint32_t                                      InitialAllocationCount;                                      // 0x54(0x04)
	float                                         QualityLevelSpawnRateScale;                                  // 0x58(0x04)
	uint32_t                                      DetailModeBitmask;                                           // 0x5c(0x04)
	char                                          UnknownData60[0x158];                                        // 0x60(0x158)
};

// Class Engine.ParticleEventManager
// Size: 0x310 (Inherited: 0x310)
struct AParticleEventManager : AActor 
{
};

// Class Engine.ParticleLODLevel
// Size: 0xb8 (Inherited: 0x28)
struct UParticleLODLevel : UObject 
{
	uint32_t                                      Level;                                                       // 0x28(0x04)
	char                                          bEnabled : 0;                                                // 0x2c(0x01)
	char                                          UnknownData2C[0x4];                                          // 0x2c(0x04)
	struct FNone*                                 RequiredModule;                                              // 0x30(0x08)
	struct TArray<None>                           Modules;                                                     // 0x38(0x10)
	struct FNone*                                 TypeDataModule;                                              // 0x48(0x08)
	struct FNone*                                 SpawnModule;                                                 // 0x50(0x08)
	struct FNone*                                 EventGenerator;                                              // 0x58(0x08)
	struct TArray<None>                           SpawningModules;                                             // 0x60(0x10)
	struct TArray<None>                           SpawnModules;                                                // 0x70(0x10)
	struct TArray<None>                           UpdateModules;                                               // 0x80(0x10)
	struct TArray<None>                           OrbitModules;                                                // 0x90(0x10)
	struct TArray<None>                           EventReceiverModules;                                        // 0xa0(0x10)
	char                                          ConvertedModules : 0;                                        // 0xb0(0x01)
	char                                          UnknownDataB0[0x4];                                          // 0xb0(0x04)
	uint32_t                                      PeakActiveParticles;                                         // 0xb4(0x04)
};

// Class Engine.ParticleModule
// Size: 0x30 (Inherited: 0x28)
struct UParticleModule : UObject 
{
	char                                          bSpawnModule : 0;                                            // 0x28(0x01)
	char                                          bUpdateModule : 0;                                           // 0x28(0x01)
	char                                          bFinalUpdateModule : 0;                                      // 0x28(0x01)
	char                                          bUpdateForGPUEmitter : 0;                                    // 0x28(0x01)
	char                                          bCurvesAsColor : 0;                                          // 0x28(0x01)
	char                                          b3DDrawMode : 0;                                             // 0x28(0x01)
	char                                          bSupported3DDrawMode : 0;                                    // 0x28(0x01)
	char                                          bEnabled : 0;                                                // 0x28(0x01)
	char                                          UnknownData28[0x1];                                          // 0x28(0x01)
	char                                          bEditable : 0;                                               // 0x29(0x01)
	char                                          LODDuplicate : 0;                                            // 0x29(0x01)
	char                                          bSupportsRandomSeed : 0;                                     // 0x29(0x01)
	char                                          bRequiresLoopingNotification : 0;                            // 0x29(0x01)
	char                                          UnknownData29[0x1];                                          // 0x29(0x01)
	char                                          LODValidity;                                                 // 0x2a(0x01)
	char                                          UnknownData2B[0x5];                                          // 0x2b(0x05)
};

// Class Engine.ParticleModuleAccelerationBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleAccelerationBase : UParticleModule 
{
	char                                          bAlwaysInWorldSpace : 0;                                     // 0x30(0x01)
	char                                          UnknownData30[0x8];                                          // 0x30(0x08)
};

// Class Engine.ParticleModuleAcceleration
// Size: 0x88 (Inherited: 0x38)
struct UParticleModuleAcceleration : UParticleModuleAccelerationBase 
{
	struct FNone                                  Acceleration;                                                // 0x38(0x48)
	char                                          bApplyOwnerScale : 0;                                        // 0x80(0x01)
	char                                          UnknownData80[0x8];                                          // 0x80(0x08)
};

// Class Engine.ParticleModuleAccelerationConstant
// Size: 0x48 (Inherited: 0x38)
struct UParticleModuleAccelerationConstant : UParticleModuleAccelerationBase 
{
	struct FNone                                  Acceleration;                                                // 0x38(0x0c)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
};

// Class Engine.ParticleModuleAccelerationDrag
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleAccelerationDrag : UParticleModuleAccelerationBase 
{
	struct FNone*                                 DragCoefficient;                                             // 0x38(0x08)
	struct FNone                                  DragCoefficientRaw;                                          // 0x40(0x30)
};

// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// Size: 0x70 (Inherited: 0x38)
struct UParticleModuleAccelerationDragScaleOverLife : UParticleModuleAccelerationBase 
{
	struct FNone*                                 DragScale;                                                   // 0x38(0x08)
	struct FNone                                  DragScaleRaw;                                                // 0x40(0x30)
};

// Class Engine.ParticleModuleAccelerationOverLifetime
// Size: 0x80 (Inherited: 0x38)
struct UParticleModuleAccelerationOverLifetime : UParticleModuleAccelerationBase 
{
	struct FNone                                  AccelOverLife;                                               // 0x38(0x48)
};

// Class Engine.ParticleModuleAttractorBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleAttractorBase : UParticleModule 
{
};

// Class Engine.ParticleModuleAttractorLine
// Size: 0xa8 (Inherited: 0x30)
struct UParticleModuleAttractorLine : UParticleModuleAttractorBase 
{
	struct FNone                                  EndPoint0;                                                   // 0x30(0x0c)
	struct FNone                                  EndPoint1;                                                   // 0x3c(0x0c)
	struct FNone                                  Range;                                                       // 0x48(0x30)
	struct FNone                                  Strength;                                                    // 0x78(0x30)
};

// Class Engine.ParticleModuleAttractorParticle
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleAttractorParticle : UParticleModuleAttractorBase 
{
	struct FName                                  EmitterName;                                                 // 0x30(0x08)
	struct FNone                                  Range;                                                       // 0x38(0x30)
	char                                          bStrengthByDistance : 0;                                     // 0x68(0x01)
	char                                          UnknownData68[0x8];                                          // 0x68(0x08)
	struct FNone                                  Strength;                                                    // 0x70(0x30)
	char                                          bAffectBaseVelocity : 0;                                     // 0xa0(0x01)
	char                                          UnknownDataA0[0x4];                                          // 0xa0(0x04)
	char                                          SelectionMethod;                                             // 0xa4(0x01)
	char                                          UnknownDataA5[0x3];                                          // 0xa5(0x03)
	char                                          bRenewSource : 0;                                            // 0xa8(0x01)
	char                                          bInheritSourceVel : 0;                                       // 0xa8(0x01)
	char                                          UnknownDataA8[0x4];                                          // 0xa8(0x04)
	uint32_t                                      LastSelIndex;                                                // 0xac(0x04)
};

// Class Engine.ParticleModuleAttractorPoint
// Size: 0xe0 (Inherited: 0x30)
struct UParticleModuleAttractorPoint : UParticleModuleAttractorBase 
{
	struct FNone                                  Position;                                                    // 0x30(0x48)
	struct FNone                                  Range;                                                       // 0x78(0x30)
	struct FNone                                  Strength;                                                    // 0xa8(0x30)
	char                                          StrengthByDistance : 0;                                      // 0xd8(0x01)
	char                                          bAffectBaseVelocity : 0;                                     // 0xd8(0x01)
	char                                          bOverrideVelocity : 0;                                       // 0xd8(0x01)
	char                                          bUseWorldSpacePosition : 0;                                  // 0xd8(0x01)
	char                                          Positive_X : 0;                                              // 0xd8(0x01)
	char                                          Positive_Y : 0;                                              // 0xd8(0x01)
	char                                          Positive_Z : 0;                                              // 0xd8(0x01)
	char                                          Negative_X : 0;                                              // 0xd8(0x01)
	char                                          UnknownDataD8[0x1];                                          // 0xd8(0x01)
	char                                          Negative_Y : 0;                                              // 0xd9(0x01)
	char                                          Negative_Z : 0;                                              // 0xd9(0x01)
	char                                          UnknownDataD9[0x7];                                          // 0xd9(0x07)
};

// Class Engine.ParticleModuleAttractorPointGravity
// Size: 0x78 (Inherited: 0x30)
struct UParticleModuleAttractorPointGravity : UParticleModuleAttractorBase 
{
	struct FNone                                  Position;                                                    // 0x30(0x0c)
	float                                         Radius;                                                      // 0x3c(0x04)
	struct FNone*                                 Strength;                                                    // 0x40(0x08)
	struct FNone                                  StrengthRaw;                                                 // 0x48(0x30)
};

// Class Engine.ParticleModuleBeamBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleBeamBase : UParticleModule 
{
};

// Class Engine.ParticleModuleBeamModifier
// Size: 0x108 (Inherited: 0x30)
struct UParticleModuleBeamModifier : UParticleModuleBeamBase 
{
	char                                          ModifierType;                                                // 0x30(0x01)
	char                                          UnknownData31[0x3];                                          // 0x31(0x03)
	struct FNone                                  PositionOptions;                                             // 0x34(0x04)
	struct FNone                                  Position;                                                    // 0x38(0x48)
	struct FNone                                  TangentOptions;                                              // 0x80(0x04)
	char                                          UnknownData84[0x4];                                          // 0x84(0x04)
	struct FNone                                  Tangent;                                                     // 0x88(0x48)
	char                                          bAbsoluteTangent : 0;                                        // 0xd0(0x01)
	char                                          UnknownDataD0[0x4];                                          // 0xd0(0x04)
	struct FNone                                  StrengthOptions;                                             // 0xd4(0x04)
	struct FNone                                  Strength;                                                    // 0xd8(0x30)
};

// Class Engine.ParticleModuleBeamNoise
// Size: 0x190 (Inherited: 0x30)
struct UParticleModuleBeamNoise : UParticleModuleBeamBase 
{
	char                                          bLowFreq_Enabled : 0;                                        // 0x30(0x01)
	char                                          UnknownData30[0x4];                                          // 0x30(0x04)
	uint32_t                                      Frequency;                                                   // 0x34(0x04)
	uint32_t                                      Frequency_LowRange;                                          // 0x38(0x04)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
	struct FNone                                  NoiseRange;                                                  // 0x40(0x48)
	struct FNone                                  NoiseRangeScale;                                             // 0x88(0x30)
	char                                          bNRScaleEmitterTime : 0;                                     // 0xb8(0x01)
	char                                          UnknownDataB8[0x8];                                          // 0xb8(0x08)
	struct FNone                                  NoiseSpeed;                                                  // 0xc0(0x48)
	char                                          bSmooth : 0;                                                 // 0x108(0x01)
	char                                          UnknownData108[0x4];                                         // 0x108(0x04)
	float                                         NoiseLockRadius;                                             // 0x10c(0x04)
	char                                          bNoiseLock : 0;                                              // 0x110(0x01)
	char                                          bOscillate : 0;                                              // 0x110(0x01)
	char                                          UnknownData110[0x4];                                         // 0x110(0x04)
	float                                         NoiseLockTime;                                               // 0x114(0x04)
	float                                         NoiseTension;                                                // 0x118(0x04)
	char                                          bUseNoiseTangents : 0;                                       // 0x11c(0x01)
	char                                          UnknownData11C[0x4];                                         // 0x11c(0x04)
	struct FNone                                  NoiseTangentStrength;                                        // 0x120(0x30)
	uint32_t                                      NoiseTessellation;                                           // 0x150(0x04)
	char                                          bTargetNoise : 0;                                            // 0x154(0x01)
	char                                          UnknownData154[0x4];                                         // 0x154(0x04)
	float                                         FrequencyDistance;                                           // 0x158(0x04)
	char                                          bApplyNoiseScale : 0;                                        // 0x15c(0x01)
	char                                          UnknownData15C[0x4];                                         // 0x15c(0x04)
	struct FNone                                  NoiseScale;                                                  // 0x160(0x30)
};

// Class Engine.ParticleModuleBeamSource
// Size: 0x118 (Inherited: 0x30)
struct UParticleModuleBeamSource : UParticleModuleBeamBase 
{
	char                                          SourceMethod;                                                // 0x30(0x01)
	char                                          UnknownData31[0x3];                                          // 0x31(0x03)
	struct FName                                  SourceName;                                                  // 0x34(0x08)
	char                                          bSourceAbsolute : 0;                                         // 0x3c(0x01)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
	struct FNone                                  Source;                                                      // 0x40(0x48)
	char                                          bLockSource : 0;                                             // 0x88(0x01)
	char                                          UnknownData88[0x4];                                          // 0x88(0x04)
	char                                          SourceTangentMethod;                                         // 0x8c(0x01)
	char                                          UnknownData8D[0x3];                                          // 0x8d(0x03)
	struct FNone                                  SourceTangent;                                               // 0x90(0x48)
	char                                          bLockSourceTangent : 0;                                      // 0xd8(0x01)
	char                                          UnknownDataD8[0x8];                                          // 0xd8(0x08)
	struct FNone                                  SourceStrength;                                              // 0xe0(0x30)
	char                                          bLockSourceStength : 0;                                      // 0x110(0x01)
	char                                          UnknownData110[0x8];                                         // 0x110(0x08)
};

// Class Engine.ParticleModuleBeamTarget
// Size: 0x120 (Inherited: 0x30)
struct UParticleModuleBeamTarget : UParticleModuleBeamBase 
{
	char                                          TargetMethod;                                                // 0x30(0x01)
	char                                          UnknownData31[0x3];                                          // 0x31(0x03)
	struct FName                                  TargetName;                                                  // 0x34(0x08)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
	struct FNone                                  Target;                                                      // 0x40(0x48)
	char                                          bTargetAbsolute : 0;                                         // 0x88(0x01)
	char                                          bLockTarget : 0;                                             // 0x88(0x01)
	char                                          UnknownData88[0x4];                                          // 0x88(0x04)
	char                                          TargetTangentMethod;                                         // 0x8c(0x01)
	char                                          UnknownData8D[0x3];                                          // 0x8d(0x03)
	struct FNone                                  TargetTangent;                                               // 0x90(0x48)
	char                                          bLockTargetTangent : 0;                                      // 0xd8(0x01)
	char                                          UnknownDataD8[0x8];                                          // 0xd8(0x08)
	struct FNone                                  TargetStrength;                                              // 0xe0(0x30)
	char                                          bLockTargetStength : 0;                                      // 0x110(0x01)
	char                                          UnknownData110[0x4];                                         // 0x110(0x04)
	float                                         LockRadius;                                                  // 0x114(0x04)
	char                                          UnknownData118[0x8];                                         // 0x118(0x08)
};

// Class Engine.ParticleModuleCameraBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleCameraBase : UParticleModule 
{
};

// Class Engine.ParticleModuleCameraOffset
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleCameraOffset : UParticleModuleCameraBase 
{
	struct FNone                                  CameraOffset;                                                // 0x30(0x30)
	char                                          bSpawnTimeOnly : 0;                                          // 0x60(0x01)
	char                                          UnknownData60[0x4];                                          // 0x60(0x04)
	char                                          UpdateMethod;                                                // 0x64(0x01)
	char                                          UnknownData65[0x3];                                          // 0x65(0x03)
};

// Class Engine.ParticleModuleCollisionBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleCollisionBase : UParticleModule 
{
};

// Class Engine.ParticleModuleCollision
// Size: 0x190 (Inherited: 0x30)
struct UParticleModuleCollision : UParticleModuleCollisionBase 
{
	struct FNone                                  DampingFactor;                                               // 0x30(0x48)
	struct FNone                                  DampingFactorRotation;                                       // 0x78(0x48)
	struct FNone                                  MaxCollisions;                                               // 0xc0(0x30)
	char                                          CollisionCompletionOption;                                   // 0xf0(0x01)
	char                                          UnknownDataF1[0x7];                                          // 0xf1(0x07)
	struct TArray<None>                           CollisionTypes;                                              // 0xf8(0x10)
	char                                          UnknownData108[0x8];                                         // 0x108(0x08)
	char                                          bApplyPhysics : 0;                                           // 0x110(0x01)
	char                                          bIgnoreTriggerVolumes : 0;                                   // 0x110(0x01)
	char                                          UnknownData110[0x8];                                         // 0x110(0x08)
	struct FNone                                  ParticleMass;                                                // 0x118(0x30)
	float                                         DirScalar;                                                   // 0x148(0x04)
	char                                          bPawnsDoNotDecrementCount : 0;                               // 0x14c(0x01)
	char                                          bOnlyVerticalNormalsDecrementCount : 0;                      // 0x14c(0x01)
	char                                          UnknownData14C[0x4];                                         // 0x14c(0x04)
	float                                         VerticalFudgeFactor;                                         // 0x150(0x04)
	char                                          UnknownData154[0x4];                                         // 0x154(0x04)
	struct FNone                                  DelayAmount;                                                 // 0x158(0x30)
	char                                          bDropDetail : 0;                                             // 0x188(0x01)
	char                                          bCollideOnlyIfVisible : 0;                                   // 0x188(0x01)
	char                                          bIgnoreSourceActor : 0;                                      // 0x188(0x01)
	char                                          UnknownData188[0x4];                                         // 0x188(0x04)
	float                                         MaxCollisionDistance;                                        // 0x18c(0x04)
};

// Class Engine.ParticleModuleCollisionGPU
// Size: 0xa8 (Inherited: 0x30)
struct UParticleModuleCollisionGPU : UParticleModuleCollisionBase 
{
	struct FNone                                  Resilience;                                                  // 0x30(0x30)
	struct FNone                                  ResilienceScaleOverLife;                                     // 0x60(0x30)
	float                                         Friction;                                                    // 0x90(0x04)
	float                                         RandomSpread;                                                // 0x94(0x04)
	float                                         RandomDistribution;                                          // 0x98(0x04)
	float                                         RadiusScale;                                                 // 0x9c(0x04)
	float                                         RadiusBias;                                                  // 0xa0(0x04)
	char                                          Response;                                                    // 0xa4(0x01)
	char                                          CollisionMode;                                               // 0xa5(0x01)
	char                                          UnknownDataA6[0x2];                                          // 0xa6(0x02)
};

// Class Engine.ParticleModuleColorBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleColorBase : UParticleModule 
{
};

// Class Engine.ParticleModuleColor
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleColor : UParticleModuleColorBase 
{
	struct FNone                                  StartColor;                                                  // 0x30(0x48)
	struct FNone                                  StartAlpha;                                                  // 0x78(0x30)
	char                                          bClampAlpha : 0;                                             // 0xa8(0x01)
	char                                          UnknownDataA8[0x8];                                          // 0xa8(0x08)
};

// Class Engine.ParticleModuleColor_Seeded
// Size: 0xd0 (Inherited: 0xb0)
struct UParticleModuleColor_Seeded : UParticleModuleColor 
{
	struct FNone                                  RandomSeedInfo;                                              // 0xb0(0x20)
};

// Class Engine.ParticleModuleColorOverLife
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleColorOverLife : UParticleModuleColorBase 
{
	struct FNone                                  ColorOverLife;                                               // 0x30(0x48)
	struct FNone                                  AlphaOverLife;                                               // 0x78(0x30)
	char                                          bClampAlpha : 0;                                             // 0xa8(0x01)
	char                                          UnknownDataA8[0x8];                                          // 0xa8(0x08)
};

// Class Engine.ParticleModuleColorScaleOverLife
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleColorScaleOverLife : UParticleModuleColorBase 
{
	struct FNone                                  ColorScaleOverLife;                                          // 0x30(0x48)
	struct FNone                                  AlphaScaleOverLife;                                          // 0x78(0x30)
	char                                          bEmitterTime : 0;                                            // 0xa8(0x01)
	char                                          UnknownDataA8[0x8];                                          // 0xa8(0x08)
};

// Class Engine.ParticleModuleEventBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleEventBase : UParticleModule 
{
};

// Class Engine.ParticleModuleEventGenerator
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleEventGenerator : UParticleModuleEventBase 
{
	struct TArray<None>                           Events;                                                      // 0x30(0x10)
};

// Class Engine.ParticleModuleEventReceiverBase
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleEventReceiverBase : UParticleModuleEventBase 
{
	char                                          EventGeneratorType;                                          // 0x30(0x01)
	char                                          UnknownData31[0x3];                                          // 0x31(0x03)
	struct FName                                  EventName;                                                   // 0x34(0x08)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
};

// Class Engine.ParticleModuleEventReceiverKillParticles
// Size: 0x48 (Inherited: 0x40)
struct UParticleModuleEventReceiverKillParticles : UParticleModuleEventReceiverBase 
{
	char                                          bStopSpawning : 0;                                           // 0x40(0x01)
	char                                          UnknownData40[0x8];                                          // 0x40(0x08)
};

// Class Engine.ParticleModuleEventReceiverSpawn
// Size: 0xd8 (Inherited: 0x40)
struct UParticleModuleEventReceiverSpawn : UParticleModuleEventReceiverBase 
{
	struct FNone                                  SpawnCount;                                                  // 0x40(0x30)
	char                                          bUseParticleTime : 0;                                        // 0x70(0x01)
	char                                          bUsePSysLocation : 0;                                        // 0x70(0x01)
	char                                          bInheritVelocity : 0;                                        // 0x70(0x01)
	char                                          UnknownData70[0x8];                                          // 0x70(0x08)
	struct FNone                                  InheritVelocityScale;                                        // 0x78(0x48)
	struct TArray<None>                           PhysicalMaterials;                                           // 0xc0(0x10)
	char                                          bBanPhysicalMaterials : 0;                                   // 0xd0(0x01)
	char                                          UnknownDataD0[0x8];                                          // 0xd0(0x08)
};

// Class Engine.ParticleModuleEventSendToGame
// Size: 0x28 (Inherited: 0x28)
struct UParticleModuleEventSendToGame : UObject 
{
};

// Class Engine.ParticleModuleKillBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleKillBase : UParticleModule 
{
};

// Class Engine.ParticleModuleKillBox
// Size: 0xc8 (Inherited: 0x30)
struct UParticleModuleKillBox : UParticleModuleKillBase 
{
	struct FNone                                  LowerLeftCorner;                                             // 0x30(0x48)
	struct FNone                                  UpperRightCorner;                                            // 0x78(0x48)
	char                                          bAbsolute : 0;                                               // 0xc0(0x01)
	char                                          bKillInside : 0;                                             // 0xc0(0x01)
	char                                          bAxisAlignedAndFixedSize : 0;                                // 0xc0(0x01)
	char                                          UnknownDataC0[0x8];                                          // 0xc0(0x08)
};

// Class Engine.ParticleModuleKillHeight
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleKillHeight : UParticleModuleKillBase 
{
	struct FNone                                  Height;                                                      // 0x30(0x30)
	char                                          bAbsolute : 0;                                               // 0x60(0x01)
	char                                          bFloor : 0;                                                  // 0x60(0x01)
	char                                          bApplyPSysScale : 0;                                         // 0x60(0x01)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.ParticleModuleLifetimeBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleLifetimeBase : UParticleModule 
{
};

// Class Engine.ParticleModuleLifetime
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleLifetime : UParticleModuleLifetimeBase 
{
	struct FNone                                  LifeTime;                                                    // 0x30(0x30)
};

// Class Engine.ParticleModuleLifetime_Seeded
// Size: 0x80 (Inherited: 0x60)
struct UParticleModuleLifetime_Seeded : UParticleModuleLifetime 
{
	struct FNone                                  RandomSeedInfo;                                              // 0x60(0x20)
};

// Class Engine.ParticleModuleLightBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleLightBase : UParticleModule 
{
};

// Class Engine.ParticleModuleLight
// Size: 0x120 (Inherited: 0x30)
struct UParticleModuleLight : UParticleModuleLightBase 
{
	char                                          bUseInverseSquaredFalloff : 0;                               // 0x30(0x01)
	char                                          UnknownData30[0x1];                                          // 0x30(0x01)
	char                                          bAffectsTranslucency : 0;                                    // 0x31(0x01)
	char                                          UnknownData31[0x1];                                          // 0x31(0x01)
	char                                          bPreviewLightRadius : 0;                                     // 0x32(0x01)
	char                                          UnknownData32[0x2];                                          // 0x32(0x02)
	float                                         SpawnFraction;                                               // 0x34(0x04)
	struct FNone                                  ColorScaleOverLife;                                          // 0x38(0x48)
	struct FNone                                  BrightnessOverLife;                                          // 0x80(0x30)
	struct FNone                                  RadiusScale;                                                 // 0xb0(0x30)
	struct FNone                                  LightExponent;                                               // 0xe0(0x30)
	struct FNone                                  LightingChannels;                                            // 0x110(0x01)
	char                                          UnknownData111[0x3];                                         // 0x111(0x03)
	float                                         VolumetricScatteringIntensity;                               // 0x114(0x04)
	char                                          bHighQualityLights : 0;                                      // 0x118(0x01)
	char                                          UnknownData118[0x1];                                         // 0x118(0x01)
	char                                          bShadowCastingLights : 0;                                    // 0x119(0x01)
	char                                          UnknownData119[0x7];                                         // 0x119(0x07)
};

// Class Engine.ParticleModuleLight_Seeded
// Size: 0x140 (Inherited: 0x120)
struct UParticleModuleLight_Seeded : UParticleModuleLight 
{
	struct FNone                                  RandomSeedInfo;                                              // 0x120(0x20)
};

// Class Engine.ParticleModuleLocationBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleLocationBase : UParticleModule 
{
};

// Class Engine.ParticleModuleLocation
// Size: 0x80 (Inherited: 0x30)
struct UParticleModuleLocation : UParticleModuleLocationBase 
{
	struct FNone                                  StartLocation;                                               // 0x30(0x48)
	float                                         DistributeOverNPoints;                                       // 0x78(0x04)
	float                                         DistributeThreshold;                                         // 0x7c(0x04)
};

// Class Engine.ParticleModuleLocation_Seeded
// Size: 0xa0 (Inherited: 0x80)
struct UParticleModuleLocation_Seeded : UParticleModuleLocation 
{
	struct FNone                                  RandomSeedInfo;                                              // 0x80(0x20)
};

// Class Engine.ParticleModuleLocationBoneSocket
// Size: 0x70 (Inherited: 0x30)
struct UParticleModuleLocationBoneSocket : UParticleModuleLocationBase 
{
	char                                          SourceType;                                                  // 0x30(0x01)
	char                                          UnknownData31[0x3];                                          // 0x31(0x03)
	struct FNone                                  UniversalOffset;                                             // 0x34(0x0c)
	struct TArray<None>                           SourceLocations;                                             // 0x40(0x10)
	char                                          SelectionMethod;                                             // 0x50(0x01)
	char                                          UnknownData51[0x3];                                          // 0x51(0x03)
	char                                          bUpdatePositionEachFrame : 0;                                // 0x54(0x01)
	char                                          bOrientMeshEmitters : 0;                                     // 0x54(0x01)
	char                                          bInheritBoneVelocity : 0;                                    // 0x54(0x01)
	char                                          UnknownData54[0x4];                                          // 0x54(0x04)
	float                                         InheritVelocityScale;                                        // 0x58(0x04)
	struct FName                                  SkelMeshActorParamName;                                      // 0x5c(0x08)
	uint32_t                                      NumPreSelectedIndices;                                       // 0x64(0x04)
	char                                          UnknownData68[0x8];                                          // 0x68(0x08)
};

// Class Engine.ParticleModuleLocationDirect
// Size: 0x150 (Inherited: 0x30)
struct UParticleModuleLocationDirect : UParticleModuleLocationBase 
{
	struct FNone                                  Location;                                                    // 0x30(0x48)
	struct FNone                                  LocationOffset;                                              // 0x78(0x48)
	struct FNone                                  ScaleFactor;                                                 // 0xc0(0x48)
	struct FNone                                  Direction;                                                   // 0x108(0x48)
};

// Class Engine.ParticleModuleLocationEmitter
// Size: 0x50 (Inherited: 0x30)
struct UParticleModuleLocationEmitter : UParticleModuleLocationBase 
{
	struct FName                                  EmitterName;                                                 // 0x30(0x08)
	char                                          SelectionMethod;                                             // 0x38(0x01)
	char                                          UnknownData39[0x3];                                          // 0x39(0x03)
	char                                          InheritSourceVelocity : 0;                                   // 0x3c(0x01)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
	float                                         InheritSourceVelocityScale;                                  // 0x40(0x04)
	char                                          bInheritSourceRotation : 0;                                  // 0x44(0x01)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
	float                                         InheritSourceRotationScale;                                  // 0x48(0x04)
	char                                          UnknownData4C[0x4];                                          // 0x4c(0x04)
};

// Class Engine.ParticleModuleLocationEmitterDirect
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleLocationEmitterDirect : UParticleModuleLocationBase 
{
	struct FName                                  EmitterName;                                                 // 0x30(0x08)
};

// Class Engine.ParticleModuleLocationPrimitiveBase
// Size: 0xb0 (Inherited: 0x30)
struct UParticleModuleLocationPrimitiveBase : UParticleModuleLocationBase 
{
	char                                          Positive_X : 0;                                              // 0x30(0x01)
	char                                          Positive_Y : 0;                                              // 0x30(0x01)
	char                                          Positive_Z : 0;                                              // 0x30(0x01)
	char                                          Negative_X : 0;                                              // 0x30(0x01)
	char                                          Negative_Y : 0;                                              // 0x30(0x01)
	char                                          Negative_Z : 0;                                              // 0x30(0x01)
	char                                          SurfaceOnly : 0;                                             // 0x30(0x01)
	char                                          Velocity : 0;                                                // 0x30(0x01)
	char                                          UnknownData30[0x8];                                          // 0x30(0x08)
	struct FNone                                  VelocityScale;                                               // 0x38(0x30)
	struct FNone                                  StartLocation;                                               // 0x68(0x48)
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// Size: 0x120 (Inherited: 0xb0)
struct UParticleModuleLocationPrimitiveCylinder : UParticleModuleLocationPrimitiveBase 
{
	char                                          RadialVelocity : 0;                                          // 0xb0(0x01)
	char                                          UnknownDataB0[0x8];                                          // 0xb0(0x08)
	struct FNone                                  StartRadius;                                                 // 0xb8(0x30)
	struct FNone                                  StartHeight;                                                 // 0xe8(0x30)
	char                                          HeightAxis;                                                  // 0x118(0x01)
	char                                          UnknownData119[0x7];                                         // 0x119(0x07)
};

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// Size: 0x140 (Inherited: 0x120)
struct UParticleModuleLocationPrimitiveCylinder_Seeded : UParticleModuleLocationPrimitiveCylinder 
{
	struct FNone                                  RandomSeedInfo;                                              // 0x120(0x20)
};

// Class Engine.ParticleModuleLocationPrimitiveSphere
// Size: 0xe0 (Inherited: 0xb0)
struct UParticleModuleLocationPrimitiveSphere : UParticleModuleLocationPrimitiveBase 
{
	struct FNone                                  StartRadius;                                                 // 0xb0(0x30)
};

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// Size: 0x100 (Inherited: 0xe0)
struct UParticleModuleLocationPrimitiveSphere_Seeded : UParticleModuleLocationPrimitiveSphere 
{
	struct FNone                                  RandomSeedInfo;                                              // 0xe0(0x20)
};

// Class Engine.ParticleModuleLocationPrimitiveTriangle
// Size: 0x108 (Inherited: 0x30)
struct UParticleModuleLocationPrimitiveTriangle : UParticleModuleLocationBase 
{
	struct FNone                                  StartOffset;                                                 // 0x30(0x48)
	struct FNone                                  Height;                                                      // 0x78(0x30)
	struct FNone                                  Angle;                                                       // 0xa8(0x30)
	struct FNone                                  Thickness;                                                   // 0xd8(0x30)
};

// Class Engine.ParticleModuleLocationSkelVertSurface
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleLocationSkelVertSurface : UParticleModuleLocationBase 
{
	char                                          SourceType;                                                  // 0x30(0x01)
	char                                          UnknownData31[0x3];                                          // 0x31(0x03)
	struct FNone                                  UniversalOffset;                                             // 0x34(0x0c)
	char                                          bUpdatePositionEachFrame : 0;                                // 0x40(0x01)
	char                                          bOrientMeshEmitters : 0;                                     // 0x40(0x01)
	char                                          bInheritBoneVelocity : 0;                                    // 0x40(0x01)
	char                                          UnknownData40[0x4];                                          // 0x40(0x04)
	float                                         InheritVelocityScale;                                        // 0x44(0x04)
	struct FName                                  SkelMeshActorParamName;                                      // 0x48(0x08)
	struct TArray<None>                           ValidAssociatedBones;                                        // 0x50(0x10)
	char                                          bEnforceNormalCheck : 0;                                     // 0x60(0x01)
	char                                          UnknownData60[0x4];                                          // 0x60(0x04)
	struct FNone                                  NormalToCompare;                                             // 0x64(0x0c)
	float                                         NormalCheckToleranceDegrees;                                 // 0x70(0x04)
	float                                         NormalCheckTolerance;                                        // 0x74(0x04)
	struct TArray<None>                           ValidMaterialIndices;                                        // 0x78(0x10)
	char                                          bInheritVertexColor : 0;                                     // 0x88(0x01)
	char                                          bInheritUV : 0;                                              // 0x88(0x01)
	char                                          UnknownData88[0x4];                                          // 0x88(0x04)
	uint32_t                                      InheritUVChannel;                                            // 0x8c(0x04)
};

// Class Engine.ParticleModuleLocationWorldOffset
// Size: 0x80 (Inherited: 0x80)
struct UParticleModuleLocationWorldOffset : UParticleModuleLocation 
{
};

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// Size: 0xa0 (Inherited: 0x80)
struct UParticleModuleLocationWorldOffset_Seeded : UParticleModuleLocationWorldOffset 
{
	struct FNone                                  RandomSeedInfo;                                              // 0x80(0x20)
};

// Class Engine.ParticleModuleMaterialBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleMaterialBase : UParticleModule 
{
};

// Class Engine.ParticleModuleMeshMaterial
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleMeshMaterial : UParticleModuleMaterialBase 
{
	struct TArray<None>                           MeshMaterials;                                               // 0x30(0x10)
};

// Class Engine.ParticleModuleRotationBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleRotationBase : UParticleModule 
{
};

// Class Engine.ParticleModuleMeshRotation
// Size: 0x80 (Inherited: 0x30)
struct UParticleModuleMeshRotation : UParticleModuleRotationBase 
{
	struct FNone                                  StartRotation;                                               // 0x30(0x48)
	char                                          bInheritParent : 0;                                          // 0x78(0x01)
	char                                          UnknownData78[0x8];                                          // 0x78(0x08)
};

// Class Engine.ParticleModuleMeshRotation_Seeded
// Size: 0xa0 (Inherited: 0x80)
struct UParticleModuleMeshRotation_Seeded : UParticleModuleMeshRotation 
{
	struct FNone                                  RandomSeedInfo;                                              // 0x80(0x20)
};

// Class Engine.ParticleModuleRotationRateBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleRotationRateBase : UParticleModule 
{
};

// Class Engine.ParticleModuleMeshRotationRate
// Size: 0x78 (Inherited: 0x30)
struct UParticleModuleMeshRotationRate : UParticleModuleRotationRateBase 
{
	struct FNone                                  StartRotationRate;                                           // 0x30(0x48)
};

// Class Engine.ParticleModuleMeshRotationRate_Seeded
// Size: 0x98 (Inherited: 0x78)
struct UParticleModuleMeshRotationRate_Seeded : UParticleModuleMeshRotationRate 
{
	struct FNone                                  RandomSeedInfo;                                              // 0x78(0x20)
};

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// Size: 0x78 (Inherited: 0x30)
struct UParticleModuleMeshRotationRateMultiplyLife : UParticleModuleRotationRateBase 
{
	struct FNone                                  LifeMultiplier;                                              // 0x30(0x48)
};

// Class Engine.ParticleModuleMeshRotationRateOverLife
// Size: 0x80 (Inherited: 0x30)
struct UParticleModuleMeshRotationRateOverLife : UParticleModuleRotationRateBase 
{
	struct FNone                                  RotRate;                                                     // 0x30(0x48)
	char                                          bScaleRotRate : 0;                                           // 0x78(0x01)
	char                                          UnknownData78[0x8];                                          // 0x78(0x08)
};

// Class Engine.ParticleModuleOrbitBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleOrbitBase : UParticleModule 
{
	char                                          bUseEmitterTime : 0;                                         // 0x30(0x01)
	char                                          UnknownData30[0x8];                                          // 0x30(0x08)
};

// Class Engine.ParticleModuleOrbit
// Size: 0x130 (Inherited: 0x38)
struct UParticleModuleOrbit : UParticleModuleOrbitBase 
{
	char                                          ChainMode;                                                   // 0x38(0x01)
	char                                          UnknownData39[0x7];                                          // 0x39(0x07)
	struct FNone                                  OffsetAmount;                                                // 0x40(0x48)
	struct FNone                                  OffsetOptions;                                               // 0x88(0x04)
	char                                          UnknownData8C[0x4];                                          // 0x8c(0x04)
	struct FNone                                  RotationAmount;                                              // 0x90(0x48)
	struct FNone                                  RotationOptions;                                             // 0xd8(0x04)
	char                                          UnknownDataDC[0x4];                                          // 0xdc(0x04)
	struct FNone                                  RotationRateAmount;                                          // 0xe0(0x48)
	struct FNone                                  RotationRateOptions;                                         // 0x128(0x04)
	char                                          UnknownData12C[0x4];                                         // 0x12c(0x04)
};

// Class Engine.ParticleModuleOrientationBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleOrientationBase : UParticleModule 
{
};

// Class Engine.ParticleModuleOrientationAxisLock
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleOrientationAxisLock : UParticleModuleOrientationBase 
{
	char                                          LockAxisFlags;                                               // 0x30(0x01)
	char                                          UnknownData31[0x7];                                          // 0x31(0x07)
};

// Class Engine.ParticleModuleParameterBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleParameterBase : UParticleModule 
{
};

// Class Engine.ParticleModuleParameterDynamic
// Size: 0x48 (Inherited: 0x30)
struct UParticleModuleParameterDynamic : UParticleModuleParameterBase 
{
	struct TArray<None>                           DynamicParams;                                               // 0x30(0x10)
	uint32_t                                      UpdateFlags;                                                 // 0x40(0x04)
	char                                          bUsesVelocity : 0;                                           // 0x44(0x01)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
};

// Class Engine.ParticleModuleParameterDynamic_Seeded
// Size: 0x68 (Inherited: 0x48)
struct UParticleModuleParameterDynamic_Seeded : UParticleModuleParameterDynamic 
{
	struct FNone                                  RandomSeedInfo;                                              // 0x48(0x20)
};

// Class Engine.ParticleModulePivotOffset
// Size: 0x38 (Inherited: 0x30)
struct UParticleModulePivotOffset : UParticleModuleLocationBase 
{
	struct FNone                                  PivotOffset;                                                 // 0x30(0x08)
};

// Class Engine.ParticleModuleRequired
// Size: 0x140 (Inherited: 0x30)
struct UParticleModuleRequired : UParticleModule 
{
	struct FNone*                                 Material;                                                    // 0x30(0x08)
	float                                         MinFacingCameraBlendDistance;                                // 0x38(0x04)
	float                                         MaxFacingCameraBlendDistance;                                // 0x3c(0x04)
	struct FNone                                  EmitterOrigin;                                               // 0x40(0x0c)
	struct FNone                                  EmitterRotation;                                             // 0x4c(0x0c)
	char                                          ScreenAlignment;                                             // 0x58(0x01)
	char                                          bUseLocalSpace : 0;                                          // 0x59(0x01)
	char                                          bKillOnDeactivate : 0;                                       // 0x59(0x01)
	char                                          bKillOnCompleted : 0;                                        // 0x59(0x01)
	char                                          UnknownData59[0x1];                                          // 0x59(0x01)
	char                                          SortMode;                                                    // 0x5a(0x01)
	char                                          bUseLegacyEmitterTime : 0;                                   // 0x5b(0x01)
	char                                          bRemoveHMDRoll : 0;                                          // 0x5b(0x01)
	char                                          bEmitterDurationUseRange : 0;                                // 0x5b(0x01)
	char                                          UnknownData5B[0x1];                                          // 0x5b(0x01)
	float                                         EmitterDuration;                                             // 0x5c(0x04)
	struct FNone                                  SpawnRate;                                                   // 0x60(0x30)
	struct TArray<None>                           BurstList;                                                   // 0x90(0x10)
	float                                         EmitterDelay;                                                // 0xa0(0x04)
	float                                         EmitterDelayLow;                                             // 0xa4(0x04)
	char                                          bDelayFirstLoopOnly : 0;                                     // 0xa8(0x01)
	char                                          UnknownDataA8[0x1];                                          // 0xa8(0x01)
	char                                          InterpolationMethod;                                         // 0xa9(0x01)
	char                                          bScaleUV : 0;                                                // 0xaa(0x01)
	char                                          bEmitterDelayUseRange : 0;                                   // 0xaa(0x01)
	char                                          UnknownDataAA[0x1];                                          // 0xaa(0x01)
	char                                          ParticleBurstMethod;                                         // 0xab(0x01)
	char                                          bOverrideSystemMacroUV : 0;                                  // 0xac(0x01)
	char                                          bUseMaxDrawCount : 0;                                        // 0xac(0x01)
	char                                          UnknownDataAC[0x1];                                          // 0xac(0x01)
	char                                          OpacitySourceMode;                                           // 0xad(0x01)
	char                                          EmitterNormalsMode;                                          // 0xae(0x01)
	char                                          bOrbitModuleAffectsVelocityAlignment : 0;                    // 0xaf(0x01)
	char                                          UnknownDataAF[0x1];                                          // 0xaf(0x01)
	uint32_t                                      SubImages_Horizontal;                                        // 0xb0(0x04)
	uint32_t                                      SubImages_Vertical;                                          // 0xb4(0x04)
	float                                         RandomImageTime;                                             // 0xb8(0x04)
	uint32_t                                      RandomImageChanges;                                          // 0xbc(0x04)
	struct FNone                                  MacroUVPosition;                                             // 0xc0(0x0c)
	float                                         MacroUVRadius;                                               // 0xcc(0x04)
	enum class None                               UVFlippingMode;                                              // 0xd0(0x01)
	char                                          BoundingMode;                                                // 0xd1(0x01)
	char                                          bDurationRecalcEachLoop : 0;                                 // 0xd2(0x01)
	char                                          UnknownDataD2[0x2];                                          // 0xd2(0x02)
	struct FNone                                  NormalsSphereCenter;                                         // 0xd4(0x0c)
	float                                         AlphaThreshold;                                              // 0xe0(0x04)
	uint32_t                                      EmitterLoops;                                                // 0xe4(0x04)
	struct FNone*                                 CutoutTexture;                                               // 0xe8(0x08)
	uint32_t                                      MaxDrawCount;                                                // 0xf0(0x04)
	float                                         EmitterDurationLow;                                          // 0xf4(0x04)
	struct FNone                                  NormalsCylinderDirection;                                    // 0xf8(0x0c)
	char                                          UnknownData104[0x4];                                         // 0x104(0x04)
	struct TArray<None>                           NamedMaterialOverrides;                                      // 0x108(0x10)
	char                                          UnknownData118[0x28];                                        // 0x118(0x28)
};

// Class Engine.ParticleModuleRotation
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleRotation : UParticleModuleRotationBase 
{
	struct FNone                                  StartRotation;                                               // 0x30(0x30)
};

// Class Engine.ParticleModuleRotation_Seeded
// Size: 0x80 (Inherited: 0x60)
struct UParticleModuleRotation_Seeded : UParticleModuleRotation 
{
	struct FNone                                  RandomSeedInfo;                                              // 0x60(0x20)
};

// Class Engine.ParticleModuleRotationOverLifetime
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleRotationOverLifetime : UParticleModuleRotationBase 
{
	struct FNone                                  RotationOverLife;                                            // 0x30(0x30)
	char                                          Scale : 0;                                                   // 0x60(0x01)
	char                                          UnknownData60[0x8];                                          // 0x60(0x08)
};

// Class Engine.ParticleModuleRotationRate
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleRotationRate : UParticleModuleRotationRateBase 
{
	struct FNone                                  StartRotationRate;                                           // 0x30(0x30)
};

// Class Engine.ParticleModuleRotationRate_Seeded
// Size: 0x80 (Inherited: 0x60)
struct UParticleModuleRotationRate_Seeded : UParticleModuleRotationRate 
{
	struct FNone                                  RandomSeedInfo;                                              // 0x60(0x20)
};

// Class Engine.ParticleModuleRotationRateMultiplyLife
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleRotationRateMultiplyLife : UParticleModuleRotationRateBase 
{
	struct FNone                                  LifeMultiplier;                                              // 0x30(0x30)
};

// Class Engine.ParticleModuleSizeBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleSizeBase : UParticleModule 
{
};

// Class Engine.ParticleModuleSize
// Size: 0x78 (Inherited: 0x30)
struct UParticleModuleSize : UParticleModuleSizeBase 
{
	struct FNone                                  StartSize;                                                   // 0x30(0x48)
};

// Class Engine.ParticleModuleSize_Seeded
// Size: 0x98 (Inherited: 0x78)
struct UParticleModuleSize_Seeded : UParticleModuleSize 
{
	struct FNone                                  RandomSeedInfo;                                              // 0x78(0x20)
};

// Class Engine.ParticleModuleSizeMultiplyLife
// Size: 0x80 (Inherited: 0x30)
struct UParticleModuleSizeMultiplyLife : UParticleModuleSizeBase 
{
	struct FNone                                  LifeMultiplier;                                              // 0x30(0x48)
	char                                          MultiplyX : 0;                                               // 0x78(0x01)
	char                                          MultiplyY : 0;                                               // 0x78(0x01)
	char                                          MultiplyZ : 0;                                               // 0x78(0x01)
	char                                          UnknownData78[0x8];                                          // 0x78(0x08)
};

// Class Engine.ParticleModuleSizeScale
// Size: 0x80 (Inherited: 0x30)
struct UParticleModuleSizeScale : UParticleModuleSizeBase 
{
	struct FNone                                  SizeScale;                                                   // 0x30(0x48)
	char                                          EnableX : 0;                                                 // 0x78(0x01)
	char                                          EnableY : 0;                                                 // 0x78(0x01)
	char                                          EnableZ : 0;                                                 // 0x78(0x01)
	char                                          UnknownData78[0x8];                                          // 0x78(0x08)
};

// Class Engine.ParticleModuleSizeScaleBySpeed
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleSizeScaleBySpeed : UParticleModuleSizeBase 
{
	struct FNone                                  SpeedScale;                                                  // 0x30(0x08)
	struct FNone                                  MaxScale;                                                    // 0x38(0x08)
};

// Class Engine.ParticleModuleSourceMovement
// Size: 0x78 (Inherited: 0x30)
struct UParticleModuleSourceMovement : UParticleModuleLocationBase 
{
	struct FNone                                  SourceMovementScale;                                         // 0x30(0x48)
};

// Class Engine.ParticleModuleSpawnBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleSpawnBase : UParticleModule 
{
	char                                          bProcessSpawnRate : 0;                                       // 0x30(0x01)
	char                                          bProcessBurstList : 0;                                       // 0x30(0x01)
	char                                          UnknownData30[0x8];                                          // 0x30(0x08)
};

// Class Engine.ParticleModuleSpawn
// Size: 0xe8 (Inherited: 0x38)
struct UParticleModuleSpawn : UParticleModuleSpawnBase 
{
	struct FNone                                  Rate;                                                        // 0x38(0x30)
	struct FNone                                  RateScale;                                                   // 0x68(0x30)
	char                                          ParticleBurstMethod;                                         // 0x98(0x01)
	char                                          UnknownData99[0x7];                                          // 0x99(0x07)
	struct TArray<None>                           BurstList;                                                   // 0xa0(0x10)
	struct FNone                                  BurstScale;                                                  // 0xb0(0x30)
	char                                          bApplyGlobalSpawnRateScale : 0;                              // 0xe0(0x01)
	char                                          UnknownDataE0[0x8];                                          // 0xe0(0x08)
};

// Class Engine.ParticleModuleSpawnPerUnit
// Size: 0x78 (Inherited: 0x38)
struct UParticleModuleSpawnPerUnit : UParticleModuleSpawnBase 
{
	float                                         UnitScalar;                                                  // 0x38(0x04)
	float                                         MovementTolerance;                                           // 0x3c(0x04)
	struct FNone                                  SpawnPerUnit;                                                // 0x40(0x30)
	float                                         MaxFrameDistance;                                            // 0x70(0x04)
	char                                          bIgnoreSpawnRateWhenMoving : 0;                              // 0x74(0x01)
	char                                          bIgnoreMovementAlongX : 0;                                   // 0x74(0x01)
	char                                          bIgnoreMovementAlongY : 0;                                   // 0x74(0x01)
	char                                          bIgnoreMovementAlongZ : 0;                                   // 0x74(0x01)
	char                                          UnknownData74[0x4];                                          // 0x74(0x04)
};

// Class Engine.ParticleModuleSubUVBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleSubUVBase : UParticleModule 
{
};

// Class Engine.ParticleModuleSubUV
// Size: 0x70 (Inherited: 0x30)
struct UParticleModuleSubUV : UParticleModuleSubUVBase 
{
	struct FNone*                                 Animation;                                                   // 0x30(0x08)
	struct FNone                                  SubImageIndex;                                               // 0x38(0x30)
	char                                          bUseRealTime : 0;                                            // 0x68(0x01)
	char                                          UnknownData68[0x8];                                          // 0x68(0x08)
};

// Class Engine.ParticleModuleSubUVMovie
// Size: 0xb0 (Inherited: 0x70)
struct UParticleModuleSubUVMovie : UParticleModuleSubUV 
{
	char                                          bUseEmitterTime : 0;                                         // 0x70(0x01)
	char                                          UnknownData70[0x8];                                          // 0x70(0x08)
	struct FNone                                  FrameRate;                                                   // 0x78(0x30)
	uint32_t                                      StartingFrame;                                               // 0xa8(0x04)
	char                                          UnknownDataAC[0x4];                                          // 0xac(0x04)
};

// Class Engine.ParticleModuleTrailBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleTrailBase : UParticleModule 
{
};

// Class Engine.ParticleModuleTrailSource
// Size: 0x90 (Inherited: 0x30)
struct UParticleModuleTrailSource : UParticleModuleTrailBase 
{
	char                                          SourceMethod;                                                // 0x30(0x01)
	char                                          UnknownData31[0x3];                                          // 0x31(0x03)
	struct FName                                  SourceName;                                                  // 0x34(0x08)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
	struct FNone                                  SourceStrength;                                              // 0x40(0x30)
	char                                          bLockSourceStength : 0;                                      // 0x70(0x01)
	char                                          UnknownData70[0x4];                                          // 0x70(0x04)
	uint32_t                                      SourceOffsetCount;                                           // 0x74(0x04)
	struct TArray<None>                           SourceOffsetDefaults;                                        // 0x78(0x10)
	char                                          SelectionMethod;                                             // 0x88(0x01)
	char                                          UnknownData89[0x3];                                          // 0x89(0x03)
	char                                          bInheritRotation : 0;                                        // 0x8c(0x01)
	char                                          UnknownData8C[0x4];                                          // 0x8c(0x04)
};

// Class Engine.ParticleModuleTypeDataBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleTypeDataBase : UParticleModule 
{
};

// Class Engine.ParticleModuleTypeDataAnimTrail
// Size: 0x48 (Inherited: 0x30)
struct UParticleModuleTypeDataAnimTrail : UParticleModuleTypeDataBase 
{
	char                                          bDeadTrailsOnDeactivate : 0;                                 // 0x30(0x01)
	char                                          bEnablePreviousTangentRecalculation : 0;                     // 0x30(0x01)
	char                                          bTangentRecalculationEveryFrame : 0;                         // 0x30(0x01)
	char                                          UnknownData30[0x4];                                          // 0x30(0x04)
	float                                         TilingDistance;                                              // 0x34(0x04)
	float                                         DistanceTessellationStepSize;                                // 0x38(0x04)
	float                                         TangentTessellationStepSize;                                 // 0x3c(0x04)
	float                                         WidthTessellationStepSize;                                   // 0x40(0x04)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
};

// Class Engine.ParticleModuleTypeDataBeam2
// Size: 0x150 (Inherited: 0x30)
struct UParticleModuleTypeDataBeam2 : UParticleModuleTypeDataBase 
{
	char                                          BeamMethod;                                                  // 0x30(0x01)
	char                                          UnknownData31[0x3];                                          // 0x31(0x03)
	uint32_t                                      TextureTile;                                                 // 0x34(0x04)
	float                                         TextureTileDistance;                                         // 0x38(0x04)
	uint32_t                                      Sheets;                                                      // 0x3c(0x04)
	uint32_t                                      MaxBeamCount;                                                // 0x40(0x04)
	float                                         Speed;                                                       // 0x44(0x04)
	uint32_t                                      InterpolationPoints;                                         // 0x48(0x04)
	char                                          bAlwaysOn : 0;                                               // 0x4c(0x01)
	char                                          UnknownData4C[0x4];                                          // 0x4c(0x04)
	uint32_t                                      UpVectorStepSize;                                            // 0x50(0x04)
	struct FName                                  BranchParentName;                                            // 0x54(0x08)
	char                                          UnknownData5C[0x4];                                          // 0x5c(0x04)
	struct FNone                                  Distance;                                                    // 0x60(0x30)
	char                                          TaperMethod;                                                 // 0x90(0x01)
	char                                          UnknownData91[0x7];                                          // 0x91(0x07)
	struct FNone                                  TaperFactor;                                                 // 0x98(0x30)
	struct FNone                                  TaperScale;                                                  // 0xc8(0x30)
	char                                          RenderGeometry : 0;                                          // 0xf8(0x01)
	char                                          RenderDirectLine : 0;                                        // 0xf8(0x01)
	char                                          RenderLines : 0;                                             // 0xf8(0x01)
	char                                          RenderTessellation : 0;                                      // 0xf8(0x01)
	char                                          UnknownDataF8[0x58];                                         // 0xf8(0x58)
};

// Class Engine.ParticleModuleTypeDataGpu
// Size: 0x420 (Inherited: 0x30)
struct UParticleModuleTypeDataGpu : UParticleModuleTypeDataBase 
{
	struct FNone                                  EmitterInfo;                                                 // 0x30(0x280)
	struct FNone                                  ResourceData;                                                // 0x2b0(0x160)
	float                                         CameraMotionBlurAmount;                                      // 0x410(0x04)
	char                                          bClearExistingParticlesOnInit : 0;                           // 0x414(0x01)
	char                                          UnknownData414[0xc];                                         // 0x414(0x0c)
};

// Class Engine.ParticleModuleTypeDataMesh
// Size: 0x98 (Inherited: 0x30)
struct UParticleModuleTypeDataMesh : UParticleModuleTypeDataBase 
{
	struct FNone*                                 Mesh;                                                        // 0x30(0x08)
	char                                          UnknownData38[0x8];                                          // 0x38(0x08)
	float                                         LODSizeScale;                                                // 0x40(0x04)
	char                                          bUseStaticMeshLODs : 0;                                      // 0x44(0x01)
	char                                          CastShadows : 0;                                             // 0x44(0x01)
	char                                          DoCollisions : 0;                                            // 0x44(0x01)
	char                                          UnknownData44[0x1];                                          // 0x44(0x01)
	char                                          MeshAlignment;                                               // 0x45(0x01)
	char                                          bOverrideMaterial : 0;                                       // 0x46(0x01)
	char                                          bOverrideDefaultMotionBlurSettings : 0;                      // 0x46(0x01)
	char                                          bEnableMotionBlur : 0;                                       // 0x46(0x01)
	char                                          UnknownData46[0x2];                                          // 0x46(0x02)
	struct FNone                                  RollPitchYawRange;                                           // 0x48(0x48)
	char                                          AxisLockOption;                                              // 0x90(0x01)
	char                                          bCameraFacing : 0;                                           // 0x91(0x01)
	char                                          UnknownData91[0x1];                                          // 0x91(0x01)
	char                                          CameraFacingUpAxisOption;                                    // 0x92(0x01)
	char                                          CameraFacingOption;                                          // 0x93(0x01)
	char                                          bApplyParticleRotationAsSpin : 0;                            // 0x94(0x01)
	char                                          bFaceCameraDirectionRatherThanPosition : 0;                  // 0x94(0x01)
	char                                          bCollisionsConsiderPartilceSize : 0;                         // 0x94(0x01)
	char                                          UnknownData94[0x4];                                          // 0x94(0x04)
};

// Class Engine.ParticleModuleTypeDataRibbon
// Size: 0x60 (Inherited: 0x30)
struct UParticleModuleTypeDataRibbon : UParticleModuleTypeDataBase 
{
	uint32_t                                      MaxTessellationBetweenParticles;                             // 0x30(0x04)
	uint32_t                                      SheetsPerTrail;                                              // 0x34(0x04)
	uint32_t                                      MaxTrailCount;                                               // 0x38(0x04)
	uint32_t                                      MaxParticleInTrailCount;                                     // 0x3c(0x04)
	char                                          bDeadTrailsOnDeactivate : 0;                                 // 0x40(0x01)
	char                                          bDeadTrailsOnSourceLoss : 0;                                 // 0x40(0x01)
	char                                          bClipSourceSegement : 0;                                     // 0x40(0x01)
	char                                          bEnablePreviousTangentRecalculation : 0;                     // 0x40(0x01)
	char                                          bTangentRecalculationEveryFrame : 0;                         // 0x40(0x01)
	char                                          bSpawnInitialParticle : 0;                                   // 0x40(0x01)
	char                                          UnknownData40[0x4];                                          // 0x40(0x04)
	char                                          RenderAxis;                                                  // 0x44(0x01)
	char                                          UnknownData45[0x3];                                          // 0x45(0x03)
	float                                         TangentSpawningScalar;                                       // 0x48(0x04)
	char                                          bRenderGeometry : 0;                                         // 0x4c(0x01)
	char                                          bRenderSpawnPoints : 0;                                      // 0x4c(0x01)
	char                                          bRenderTangents : 0;                                         // 0x4c(0x01)
	char                                          bRenderTessellation : 0;                                     // 0x4c(0x01)
	char                                          UnknownData4C[0x4];                                          // 0x4c(0x04)
	float                                         TilingDistance;                                              // 0x50(0x04)
	float                                         DistanceTessellationStepSize;                                // 0x54(0x04)
	char                                          bEnableTangentDiffInterpScale : 0;                           // 0x58(0x01)
	char                                          UnknownData58[0x4];                                          // 0x58(0x04)
	float                                         TangentTessellationScalar;                                   // 0x5c(0x04)
};

// Class Engine.ParticleModuleVectorFieldBase
// Size: 0x30 (Inherited: 0x30)
struct UParticleModuleVectorFieldBase : UParticleModule 
{
};

// Class Engine.ParticleModuleVectorFieldGlobal
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleVectorFieldGlobal : UParticleModuleVectorFieldBase 
{
	char                                          bOverrideGlobalVectorFieldTightness : 0;                     // 0x30(0x01)
	char                                          UnknownData30[0x4];                                          // 0x30(0x04)
	float                                         GlobalVectorFieldScale;                                      // 0x34(0x04)
	float                                         GlobalVectorFieldTightness;                                  // 0x38(0x04)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
};

// Class Engine.ParticleModuleVectorFieldLocal
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleVectorFieldLocal : UParticleModuleVectorFieldBase 
{
	struct FNone*                                 VectorField;                                                 // 0x30(0x08)
	struct FNone                                  RelativeTranslation;                                         // 0x38(0x0c)
	struct FNone                                  RelativeRotation;                                            // 0x44(0x0c)
	struct FNone                                  RelativeScale3D;                                             // 0x50(0x0c)
	float                                         Intensity;                                                   // 0x5c(0x04)
	float                                         Tightness;                                                   // 0x60(0x04)
	char                                          bIgnoreComponentTransform : 0;                               // 0x64(0x01)
	char                                          bTileX : 0;                                                  // 0x64(0x01)
	char                                          bTileY : 0;                                                  // 0x64(0x01)
	char                                          bTileZ : 0;                                                  // 0x64(0x01)
	char                                          bUseFixDT : 0;                                               // 0x64(0x01)
	char                                          UnknownData64[0x4];                                          // 0x64(0x04)
};

// Class Engine.ParticleModuleVectorFieldRotation
// Size: 0x48 (Inherited: 0x30)
struct UParticleModuleVectorFieldRotation : UParticleModuleVectorFieldBase 
{
	struct FNone                                  MinInitialRotation;                                          // 0x30(0x0c)
	struct FNone                                  MaxInitialRotation;                                          // 0x3c(0x0c)
};

// Class Engine.ParticleModuleVectorFieldRotationRate
// Size: 0x40 (Inherited: 0x30)
struct UParticleModuleVectorFieldRotationRate : UParticleModuleVectorFieldBase 
{
	struct FNone                                  RotationRate;                                                // 0x30(0x0c)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
};

// Class Engine.ParticleModuleVectorFieldScale
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleVectorFieldScale : UParticleModuleVectorFieldBase 
{
	struct FNone*                                 VectorFieldScale;                                            // 0x30(0x08)
	struct FNone                                  VectorFieldScaleRaw;                                         // 0x38(0x30)
};

// Class Engine.ParticleModuleVectorFieldScaleOverLife
// Size: 0x68 (Inherited: 0x30)
struct UParticleModuleVectorFieldScaleOverLife : UParticleModuleVectorFieldBase 
{
	struct FNone*                                 VectorFieldScaleOverLife;                                    // 0x30(0x08)
	struct FNone                                  VectorFieldScaleOverLifeRaw;                                 // 0x38(0x30)
};

// Class Engine.ParticleModuleVelocityBase
// Size: 0x38 (Inherited: 0x30)
struct UParticleModuleVelocityBase : UParticleModule 
{
	char                                          bInWorldSpace : 0;                                           // 0x30(0x01)
	char                                          bApplyOwnerScale : 0;                                        // 0x30(0x01)
	char                                          UnknownData30[0x8];                                          // 0x30(0x08)
};

// Class Engine.ParticleModuleVelocity
// Size: 0xb0 (Inherited: 0x38)
struct UParticleModuleVelocity : UParticleModuleVelocityBase 
{
	struct FNone                                  StartVelocity;                                               // 0x38(0x48)
	struct FNone                                  StartVelocityRadial;                                         // 0x80(0x30)
};

// Class Engine.ParticleModuleVelocity_Seeded
// Size: 0xd0 (Inherited: 0xb0)
struct UParticleModuleVelocity_Seeded : UParticleModuleVelocity 
{
	struct FNone                                  RandomSeedInfo;                                              // 0xb0(0x20)
};

// Class Engine.ParticleModuleVelocityCone
// Size: 0xa8 (Inherited: 0x38)
struct UParticleModuleVelocityCone : UParticleModuleVelocityBase 
{
	struct FNone                                  Angle;                                                       // 0x38(0x30)
	struct FNone                                  Velocity;                                                    // 0x68(0x30)
	struct FNone                                  Direction;                                                   // 0x98(0x0c)
	char                                          UnknownDataA4[0x4];                                          // 0xa4(0x04)
};

// Class Engine.ParticleModuleVelocityInheritParent
// Size: 0x80 (Inherited: 0x38)
struct UParticleModuleVelocityInheritParent : UParticleModuleVelocityBase 
{
	struct FNone                                  Scale;                                                       // 0x38(0x48)
};

// Class Engine.ParticleModuleVelocityOverLifetime
// Size: 0x88 (Inherited: 0x38)
struct UParticleModuleVelocityOverLifetime : UParticleModuleVelocityBase 
{
	struct FNone                                  VelOverLife;                                                 // 0x38(0x48)
	char                                          Absolute : 0;                                                // 0x80(0x01)
	char                                          UnknownData80[0x8];                                          // 0x80(0x08)
};

// Class Engine.ParticleSpriteEmitter
// Size: 0x1b8 (Inherited: 0x1b8)
struct UParticleSpriteEmitter : UParticleEmitter 
{
};

// Class Engine.ParticleSystem
// Size: 0x110 (Inherited: 0x30)
struct UParticleSystem : UFXSystemAsset 
{
	float                                         UpdateTime_FPS;                                              // 0x30(0x04)
	float                                         UpdateTime_Delta;                                            // 0x34(0x04)
	float                                         WarmupTime;                                                  // 0x38(0x04)
	float                                         WarmupTickRate;                                              // 0x3c(0x04)
	struct TArray<None>                           Emitters;                                                    // 0x40(0x10)
	struct FNone*                                 PreviewComponent;                                            // 0x50(0x08)
	struct FNone*                                 CurveEdSetup;                                                // 0x58(0x08)
	float                                         LODDistanceCheckTime;                                        // 0x60(0x04)
	float                                         MacroUVRadius;                                               // 0x64(0x04)
	struct TArray<None>                           LODDistances;                                                // 0x68(0x10)
	struct TArray<None>                           LODSettings;                                                 // 0x78(0x10)
	struct FNone                                  FixedRelativeBoundingBox;                                    // 0x88(0x1c)
	float                                         SecondsBeforeInactive;                                       // 0xa4(0x04)
	float                                         Delay;                                                       // 0xa8(0x04)
	float                                         DelayLow;                                                    // 0xac(0x04)
	char                                          bOrientZAxisTowardCamera : 0;                                // 0xb0(0x01)
	char                                          bUseFixedRelativeBoundingBox : 0;                            // 0xb0(0x01)
	char                                          bShouldResetPeakCounts : 0;                                  // 0xb0(0x01)
	char                                          bHasPhysics : 0;                                             // 0xb0(0x01)
	char                                          bUseRealtimeThumbnail : 0;                                   // 0xb0(0x01)
	char                                          ThumbnailImageOutOfDate : 0;                                 // 0xb0(0x01)
	char                                          UnknownDataB0[0x1];                                          // 0xb0(0x01)
	char                                          bUseDelayRange : 0;                                          // 0xb1(0x01)
	char                                          bAllowManagedTicking : 0;                                    // 0xb1(0x01)
	char                                          bAutoDeactivate : 0;                                         // 0xb1(0x01)
	char                                          bRegenerateLODDuplicate : 0;                                 // 0xb1(0x01)
	char                                          UnknownDataB1[0x1];                                          // 0xb1(0x01)
	char                                          SystemUpdateMode;                                            // 0xb2(0x01)
	char                                          LODMethod;                                                   // 0xb3(0x01)
	enum class None                               InsignificantReaction;                                       // 0xb4(0x01)
	char                                          OcclusionBoundsMethod;                                       // 0xb5(0x01)
	char                                          UnknownDataB6[0x1];                                          // 0xb6(0x01)
	enum class None                               MaxSignificanceLevel;                                        // 0xb7(0x01)
	uint32_t                                      MinTimeBetweenTicks;                                         // 0xb8(0x04)
	float                                         InsignificanceDelay;                                         // 0xbc(0x04)
	struct FNone                                  MacroUVPosition;                                             // 0xc0(0x0c)
	struct FNone                                  CustomOcclusionBounds;                                       // 0xcc(0x1c)
	struct TArray<None>                           SoloTracking;                                                // 0xe8(0x10)
	struct TArray<None>                           NamedMaterialSlots;                                          // 0xf8(0x10)
	char                                          UnknownData108[0x8];                                         // 0x108(0x08)

	char ContainsEmitterType(struct FNone* TypeData); // sub_0x3d92010
};

// Class Engine.ParticleSystemComponent
// Size: 0x730 (Inherited: 0x4c0)
struct UParticleSystemComponent : UFXSystemComponent 
{
	struct FNone*                                 Template;                                                    // 0x4b8(0x08)
	struct TArray<None>                           EmitterMaterials;                                            // 0x4c0(0x10)
	struct TArray<None>                           SkelMeshComponents;                                          // 0x4d0(0x10)
	char                                          bResetOnDetach : 0;                                          // 0x4e1(0x01)
	char                                          bUpdateOnDedicatedServer : 0;                                // 0x4e1(0x01)
	char                                          bAllowRecycling : 0;                                         // 0x4e1(0x01)
	char                                          bAutoManageAttachment : 0;                                   // 0x4e1(0x01)
	char                                          bAutoAttachWeldSimulatedBodies : 0;                          // 0x4e1(0x01)
	char                                          bWarmingUp : 0;                                              // 0x4e2(0x01)
	char                                          bOverrideLODMethod : 0;                                      // 0x4e2(0x01)
	char                                          bSkipUpdateDynamicDataDuringTick : 0;                        // 0x4e2(0x01)
	char                                          UnknownData4E8[0x5];                                         // 0x4e8(0x05)
	char                                          LODMethod;                                                   // 0x4ed(0x01)
	enum class None                               RequiredSignificance;                                        // 0x4ee(0x01)
	char                                          UnknownData4EF[0x1];                                         // 0x4ef(0x01)
	struct TArray<None>                           InstanceParameters;                                          // 0x4f0(0x10)
	struct FMulticastInlineDelegate               OnParticleSpawn;                                             // 0x500(0x10)
	struct FMulticastInlineDelegate               OnParticleBurst;                                             // 0x510(0x10)
	struct FMulticastInlineDelegate               OnParticleDeath;                                             // 0x520(0x10)
	struct FMulticastInlineDelegate               OnParticleCollide;                                           // 0x530(0x10)
	char                                          bOldPositionValid : 0;                                       // 0x540(0x01)
	char                                          UnknownData540[0x4];                                         // 0x540(0x04)
	struct FNone                                  OldPosition;                                                 // 0x544(0x0c)
	struct FNone                                  PartSysVelocity;                                             // 0x550(0x0c)
	float                                         WarmupTime;                                                  // 0x55c(0x04)
	float                                         WarmupTickRate;                                              // 0x560(0x04)
	char                                          UnknownData564[0x14];                                        // 0x564(0x14)
	float                                         SecondsBeforeInactive;                                       // 0x578(0x04)
	char                                          UnknownData57C[0x4];                                         // 0x57c(0x04)
	float                                         MaxTimeBeforeForceUpdateTransform;                           // 0x580(0x04)
	char                                          UnknownData584[0x1c];                                        // 0x584(0x1c)
	struct TArray<None>                           ReplayClips;                                                 // 0x5a0(0x10)
	char                                          UnknownData5B0[0x8];                                         // 0x5b0(0x08)
	float                                         CustomTimeDilation;                                          // 0x5b8(0x04)
	char                                          UnknownData5BC[0x54];                                        // 0x5bc(0x54)
	struct TWeakObjectPtr<struct FNone>           AutoAttachParent;                                            // 0x610(0x08)
	struct FName                                  AutoAttachSocketName;                                        // 0x618(0x08)
	enum class None                               AutoAttachLocationRule;                                      // 0x620(0x01)
	enum class None                               AutoAttachRotationRule;                                      // 0x621(0x01)
	enum class None                               AutoAttachScaleRule;                                         // 0x622(0x01)
	char                                          UnknownData623[0x2d];                                        // 0x623(0x2d)
	struct FMulticastInlineDelegate               OnSystemFinished;                                            // 0x650(0x10)
	char                                          UnknownData660[0xd0];                                        // 0x660(0xd0)

	void SetTrailSourceData(struct FName InFirstSocketName, struct FName InSecondSocketName, char InWidthMode, float InWidth); // sub_0x3d93ac0
	void SetTemplate(struct FNone* NewTemplate); // sub_0x3d93a40
	void SetMaterialParameter(struct FName ParameterName, struct FNone* Param); // sub_0x3d93980
	void SetBeamTargetTangent(uint32_t EmitterIndex, struct FNone NewTangentPoint, uint32_t TargetIndex); // sub_0x3d93530
	void SetBeamTargetStrength(uint32_t EmitterIndex, float NewTargetStrength, uint32_t TargetIndex); // sub_0x3d93430
	void SetBeamTargetPoint(uint32_t EmitterIndex, struct FNone NewTargetPoint, uint32_t TargetIndex); // sub_0x3d93320
	void SetBeamSourceTangent(uint32_t EmitterIndex, struct FNone NewTangentPoint, uint32_t SourceIndex); // sub_0x3d93210
	void SetBeamSourceStrength(uint32_t EmitterIndex, float NewSourceStrength, uint32_t SourceIndex); // sub_0x3d93110
	void SetBeamSourcePoint(uint32_t EmitterIndex, struct FNone NewSourcePoint, uint32_t SourceIndex); // sub_0x3d93000
	void SetBeamEndPoint(uint32_t EmitterIndex, struct FNone NewEndPoint); // sub_0x3d92f30
	void SetAutoAttachParams(struct FNone* Parent, struct FName SocketName, char LocationType); // sub_0x3d92c90
	uint32_t GetNumActiveParticles(); // sub_0x3d92b70
	struct FNone* GetNamedMaterial(struct FName InName); // sub_0x3d92ad0
	char GetBeamTargetTangent(uint32_t EmitterIndex, uint32_t TargetIndex, struct FNone& OutTangentPoint); // sub_0x3d92990
	char GetBeamTargetStrength(uint32_t EmitterIndex, uint32_t TargetIndex, float& OutTargetStrength); // sub_0x3d92870
	char GetBeamTargetPoint(uint32_t EmitterIndex, uint32_t TargetIndex, struct FNone& OutTargetPoint); // sub_0x3d92760
	char GetBeamSourceTangent(uint32_t EmitterIndex, uint32_t SourceIndex, struct FNone& OutTangentPoint); // sub_0x3d92650
	char GetBeamSourceStrength(uint32_t EmitterIndex, uint32_t SourceIndex, float& OutSourceStrength); // sub_0x3d92530
	char GetBeamSourcePoint(uint32_t EmitterIndex, uint32_t SourceIndex, struct FNone& OutSourcePoint); // sub_0x3d92420
	char GetBeamEndPoint(uint32_t EmitterIndex, struct FNone& OutEndPoint); // sub_0x3d92340
	void GenerateParticleEvent(struct FName InEventName, float InEmitterTime, struct FNone InLocation, struct FNone InDirection, struct FNone InVelocity); // sub_0x3d92190
	void EndTrails(); // sub_0x3d92170
	struct FNone* CreateNamedDynamicMaterialInstance(struct FName InName, struct FNone* SourceMaterial); // sub_0x3d920a0
	void BeginTrails(struct FName InFirstSocketName, struct FName InSecondSocketName, char InWidthMode, float InWidth); // sub_0x3d91ec0
};

// Class Engine.ParticleSystemReplay
// Size: 0x40 (Inherited: 0x28)
struct UParticleSystemReplay : UObject 
{
	uint32_t                                      ClipIDNumber;                                                // 0x28(0x04)
	char                                          UnknownData2C[0x14];                                         // 0x2c(0x14)
};

// Class Engine.PathFollowingAgentInterface
// Size: 0x28 (Inherited: 0x28)
struct UPathFollowingAgentInterface : UInterface 
{
};

// Class Engine.PawnNoiseEmitterComponent
// Size: 0xd8 (Inherited: 0xb0)
struct UPawnNoiseEmitterComponent : UActorComponent 
{
	char                                          bAIPerceptionSystemCompatibilityMode : 0;                    // 0xb0(0x01)
	char                                          UnknownDataB0[0x4];                                          // 0xb0(0x04)
	struct FNone                                  LastRemoteNoisePosition;                                     // 0xb4(0x0c)
	float                                         NoiseLifetime;                                               // 0xc0(0x04)
	float                                         LastRemoteNoiseVolume;                                       // 0xc4(0x04)
	float                                         LastRemoteNoiseTime;                                         // 0xc8(0x04)
	float                                         LastLocalNoiseVolume;                                        // 0xcc(0x04)
	float                                         LastLocalNoiseTime;                                          // 0xd0(0x04)
	char                                          UnknownDataD4[0x4];                                          // 0xd4(0x04)

	void MakeNoise(struct FNone* NoiseMaker, float Loudness, struct FNone& NoiseLocation); // sub_0x3d97f40
};

// Class Engine.PhysicalAnimationComponent
// Size: 0xf0 (Inherited: 0xb0)
struct UPhysicalAnimationComponent : UActorComponent 
{
	float                                         StrengthMultiplyer;                                          // 0xb0(0x04)
	char                                          UnknownDataB4[0x4];                                          // 0xb4(0x04)
	struct FNone*                                 SkeletalMeshComponent;                                       // 0xb8(0x08)
	char                                          UnknownDataC0[0x30];                                         // 0xc0(0x30)

	void SetStrengthMultiplyer(float InStrengthMultiplyer); // sub_0x3d98320
	void SetSkeletalMeshComponent(struct FNone* InSkeletalMeshComponent); // sub_0x3d982a0
	struct FNone GetBodyTargetTransform(struct FName BodyName); // sub_0x3d97980
	void ApplyPhysicalAnimationSettingsBelow(struct FName BodyName, struct FNone& PhysicalAnimationData, char bIncludeSelf); // sub_0x3d97790
	void ApplyPhysicalAnimationSettings(struct FName BodyName, struct FNone& PhysicalAnimationData); // sub_0x3d976b0
	void ApplyPhysicalAnimationProfileBelow(struct FName BodyName, struct FName ProfileName, char bIncludeSelf, char bClearNotFound); // sub_0x3d97560
};

// Class Engine.PhysicalMaterialMask
// Size: 0x30 (Inherited: 0x28)
struct UPhysicalMaterialMask : UObject 
{
	uint32_t                                      UVChannelIndex;                                              // 0x28(0x04)
	char                                          AddressX;                                                    // 0x2c(0x01)
	char                                          AddressY;                                                    // 0x2d(0x01)
	char                                          UnknownData2E[0x2];                                          // 0x2e(0x02)
};

// Class Engine.PhysicalMaterialPropertyBase
// Size: 0x28 (Inherited: 0x28)
struct UPhysicalMaterialPropertyBase : UObject 
{
};

// Class Engine.PhysicsAsset
// Size: 0x138 (Inherited: 0x28)
struct UPhysicsAsset : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct TArray<None>                           BoundsBodies;                                                // 0x30(0x10)
	struct TArray<None>                           SkeletalBodySetups;                                          // 0x40(0x10)
	struct TArray<None>                           ConstraintSetup;                                             // 0x50(0x10)
	struct FNone                                  SolverIterations;                                            // 0x60(0x18)
	char                                          bNotForDedicatedServer : 0;                                  // 0x78(0x01)
	char                                          UnknownData78[0xa8];                                         // 0x78(0xa8)
	struct FNone*                                 ThumbnailInfo;                                               // 0x120(0x08)
	struct TArray<None>                           BodySetup;                                                   // 0x128(0x10)
};

// Class Engine.SkeletalBodySetup
// Size: 0x2e8 (Inherited: 0x2d0)
struct USkeletalBodySetup : UBodySetup 
{
	char                                          bSkipScaleFromAnimation : 0;                                 // 0x2d0(0x01)
	char                                          UnknownData2D0[0x8];                                         // 0x2d0(0x08)
	struct TArray<None>                           PhysicalAnimationData;                                       // 0x2d8(0x10)
};

// Class Engine.PhysicsCollisionHandler
// Size: 0x40 (Inherited: 0x28)
struct UPhysicsCollisionHandler : UObject 
{
	float                                         ImpactThreshold;                                             // 0x28(0x04)
	float                                         ImpactReFireDelay;                                           // 0x2c(0x04)
	struct FNone*                                 DefaultImpactSound;                                          // 0x30(0x08)
	float                                         LastImpactSoundTime;                                         // 0x38(0x04)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
};

// Class Engine.RigidBodyBase
// Size: 0x310 (Inherited: 0x310)
struct ARigidBodyBase : AActor 
{
};

// Class Engine.PhysicsConstraintActor
// Size: 0x330 (Inherited: 0x310)
struct APhysicsConstraintActor : ARigidBodyBase 
{
	struct FNone*                                 ConstraintComp;                                              // 0x310(0x08)
	struct FNone*                                 ConstraintActor1;                                            // 0x318(0x08)
	struct FNone*                                 ConstraintActor2;                                            // 0x320(0x08)
	char                                          bDisableCollision : 0;                                       // 0x328(0x01)
	char                                          UnknownData328[0x8];                                         // 0x328(0x08)
};

// Class Engine.PhysicsConstraintComponent
// Size: 0x440 (Inherited: 0x240)
struct UPhysicsConstraintComponent : USceneComponent 
{
	struct FNone*                                 ConstraintActor1;                                            // 0x238(0x08)
	struct FNone                                  ComponentName1;                                              // 0x240(0x08)
	struct FNone*                                 ConstraintActor2;                                            // 0x248(0x08)
	struct FNone                                  ComponentName2;                                              // 0x250(0x08)
	char                                          UnknownData260[0x8];                                         // 0x260(0x08)
	struct FNone*                                 ConstraintSetup;                                             // 0x268(0x08)
	struct FMulticastInlineDelegate               OnConstraintBroken;                                          // 0x270(0x10)
	struct FNone                                  ConstraintInstance;                                          // 0x280(0x1b8)
	char                                          UnknownData438[0x8];                                         // 0x438(0x08)

	void SetOrientationDriveTwistAndSwing(char bEnableTwistDrive, char bEnableSwingDrive); // sub_0x3d9bd50
	void SetOrientationDriveSLERP(char bEnableSLERP); // sub_0x3d9bcc0
	void SetLinearZLimit(char ConstraintType, float LimitSize); // sub_0x3d9bc00
	void SetLinearYLimit(char ConstraintType, float LimitSize); // sub_0x3d9bb40
	void SetLinearXLimit(char ConstraintType, float LimitSize); // sub_0x3d9ba80
	void SetLinearVelocityTarget(struct FNone& InVelTarget); // sub_0x3d9b9f0
	void SetLinearVelocityDrive(char bEnableDriveX, char bEnableDriveY, char bEnableDriveZ); // sub_0x3d9b8d0
	void SetLinearPositionTarget(struct FNone& InPosTarget); // sub_0x3d9b7c0
	void SetLinearPositionDrive(char bEnableDriveX, char bEnableDriveY, char bEnableDriveZ); // sub_0x3d9b6a0
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // sub_0x3d9b590
	void SetLinearBreakable(char bLinearBreakable, float LinearBreakThreshold); // sub_0x3d9b440
	void SetDisableCollision(char bDisableCollision); // sub_0x3d9b330
	void SetConstraintReferencePosition(char Frame, struct FNone& RefPosition); // sub_0x3d9b260
	void SetConstraintReferenceOrientation(char Frame, struct FNone& PriAxis, struct FNone& SecAxis); // sub_0x3d9b140
	void SetConstraintReferenceFrame(char Frame, struct FNone& RefFrame); // sub_0x3d9b020
	void SetConstrainedComponents(struct FNone* Component1, struct FName BoneName1, struct FNone* Component2, struct FName BoneName2); // sub_0x3d9aed0
	void SetAngularVelocityTarget(struct FNone& InVelTarget); // sub_0x3d9ae40
	void SetAngularVelocityDriveTwistAndSwing(char bEnableTwistDrive, char bEnableSwingDrive); // sub_0x3d9ad70
	void SetAngularVelocityDriveSLERP(char bEnableSLERP); // sub_0x3d9ace0
	void SetAngularVelocityDrive(char bEnableSwingDrive, char bEnableTwistDrive); // sub_0x3d9ac10
	void SetAngularTwistLimit(char ConstraintType, float TwistLimitAngle); // sub_0x3d9ab50
	void SetAngularSwing2Limit(char MotionType, float Swing2LimitAngle); // sub_0x3d9aa90
	void SetAngularSwing1Limit(char MotionType, float Swing1LimitAngle); // sub_0x3d9a9d0
	void SetAngularOrientationTarget(struct FNone& InPosTarget); // sub_0x3d9a8c0
	void SetAngularOrientationDrive(char bEnableSwingDrive, char bEnableTwistDrive); // sub_0x3d9a7f0
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // sub_0x3d9a6e0
	void SetAngularDriveMode(char DriveMode); // sub_0x3d9a660
	void SetAngularBreakable(char bAngularBreakable, float AngularBreakThreshold); // sub_0x3d9a510
	char IsBroken(); // sub_0x3d9a4e0
	float GetCurrentTwist(); // sub_0x3d99ff0
	float GetCurrentSwing2(); // sub_0x3d99fc0
	float GetCurrentSwing1(); // sub_0x3d99f90
	void GetConstraintForce(struct FNone& OutLinearForce, struct FNone& OutAngularForce); // sub_0x3d99eb0
	void BreakConstraint(); // sub_0x3d99e90
};

// Class Engine.PhysicsConstraintTemplate
// Size: 0x2f8 (Inherited: 0x28)
struct UPhysicsConstraintTemplate : UObject 
{
	struct FNone                                  DefaultInstance;                                             // 0x28(0x1b8)
	struct TArray<None>                           ProfileHandles;                                              // 0x1e0(0x10)
	struct FNone                                  DefaultProfile;                                              // 0x1f0(0x104)
	char                                          UnknownData2F4[0x4];                                         // 0x2f4(0x04)
};

// Class Engine.PhysicsHandleComponent
// Size: 0x160 (Inherited: 0xb0)
struct UPhysicsHandleComponent : UActorComponent 
{
	struct FNone*                                 GrabbedComponent;                                            // 0xb0(0x08)
	char                                          UnknownDataB8[0x8];                                          // 0xb8(0x08)
	char                                          bSoftAngularConstraint : 0;                                  // 0xc0(0x01)
	char                                          bSoftLinearConstraint : 0;                                   // 0xc0(0x01)
	char                                          bInterpolateTarget : 0;                                      // 0xc0(0x01)
	char                                          UnknownDataC0[0x4];                                          // 0xc0(0x04)
	float                                         LinearDamping;                                               // 0xc4(0x04)
	float                                         LinearStiffness;                                             // 0xc8(0x04)
	float                                         AngularDamping;                                              // 0xcc(0x04)
	float                                         AngularStiffness;                                            // 0xd0(0x04)
	char                                          UnknownDataD4[0x6c];                                         // 0xd4(0x6c)
	float                                         InterpolationSpeed;                                          // 0x140(0x04)
	char                                          UnknownData144[0x1c];                                        // 0x144(0x1c)

	void SetTargetRotation(struct FNone NewRotation); // sub_0x3d9bf90
	void SetTargetLocationAndRotation(struct FNone NewLocation, struct FNone NewRotation); // sub_0x3d9beb0
	void SetTargetLocation(struct FNone NewLocation); // sub_0x3d9be20
	void SetLinearStiffness(float NewLinearStiffness); // sub_0x3d9b850
	void SetLinearDamping(float NewLinearDamping); // sub_0x3d9b510
	void SetInterpolationSpeed(float NewInterpolationSpeed); // sub_0x3d9b3c0
	void SetAngularStiffness(float NewAngularStiffness); // sub_0x3d9a950
	void SetAngularDamping(float NewAngularDamping); // sub_0x3d9a5e0
	void ReleaseComponent(); // sub_0x2037600
	void GrabComponentAtLocationWithRotation(struct FNone* Component, struct FName InBoneName, struct FNone Location, struct FNone Rotation); // sub_0x3d9a360
	void GrabComponentAtLocation(struct FNone* Component, struct FName InBoneName, struct FNone GrabLocation); // sub_0x3d9a250
	void GrabComponent(struct FNone* Component, struct FName InBoneName, struct FNone GrabLocation, char bConstrainRotation); // sub_0x3d9a100
	void GetTargetLocationAndRotation(struct FNone& TargetLocation, struct FNone& TargetRotation); // sub_0x3d9a020
	struct FNone* GetGrabbedComponent(); // sub_0x2edfa00
};

// Class Engine.PhysicsSettings
// Size: 0x138 (Inherited: 0x38)
struct UPhysicsSettings : UDeveloperSettings 
{
	float                                         DefaultGravityZ;                                             // 0x38(0x04)
	float                                         DefaultTerminalVelocity;                                     // 0x3c(0x04)
	float                                         DefaultFluidFriction;                                        // 0x40(0x04)
	uint32_t                                      SimulateScratchMemorySize;                                   // 0x44(0x04)
	uint32_t                                      RagdollAggregateThreshold;                                   // 0x48(0x04)
	float                                         TriangleMeshTriangleMinAreaThreshold;                        // 0x4c(0x04)
	char                                          bEnableShapeSharing : 0;                                     // 0x50(0x01)
	char                                          UnknownData50[0x1];                                          // 0x50(0x01)
	char                                          bEnablePCM : 0;                                              // 0x51(0x01)
	char                                          UnknownData51[0x1];                                          // 0x51(0x01)
	char                                          bEnableStabilization : 0;                                    // 0x52(0x01)
	char                                          UnknownData52[0x1];                                          // 0x52(0x01)
	char                                          bWarnMissingLocks : 0;                                       // 0x53(0x01)
	char                                          UnknownData53[0x1];                                          // 0x53(0x01)
	char                                          bEnable2DPhysics : 0;                                        // 0x54(0x01)
	char                                          UnknownData54[0x4];                                          // 0x54(0x04)
	struct FNone                                  PhysicErrorCorrection;                                       // 0x58(0x34)
	char                                          LockedAxis;                                                  // 0x8c(0x01)
	char                                          DefaultDegreesOfFreedom;                                     // 0x8d(0x01)
	char                                          UnknownData8E[0x2];                                          // 0x8e(0x02)
	float                                         BounceThresholdVelocity;                                     // 0x90(0x04)
	char                                          FrictionCombineMode;                                         // 0x94(0x01)
	char                                          RestitutionCombineMode;                                      // 0x95(0x01)
	char                                          UnknownData96[0x2];                                          // 0x96(0x02)
	float                                         MaxAngularVelocity;                                          // 0x98(0x04)
	float                                         MaxDepenetrationVelocity;                                    // 0x9c(0x04)
	float                                         ContactOffsetMultiplier;                                     // 0xa0(0x04)
	float                                         MinContactOffset;                                            // 0xa4(0x04)
	float                                         MaxContactOffset;                                            // 0xa8(0x04)
	char                                          bSimulateSkeletalMeshOnDedicatedServer : 0;                  // 0xac(0x01)
	char                                          UnknownDataAC[0x1];                                          // 0xac(0x01)
	char                                          DefaultShapeComplexity;                                      // 0xad(0x01)
	char                                          bDefaultHasComplexCollision : 0;                             // 0xae(0x01)
	char                                          UnknownDataAE[0x1];                                          // 0xae(0x01)
	char                                          bSuppressFaceRemapTable : 0;                                 // 0xaf(0x01)
	char                                          UnknownDataAF[0x1];                                          // 0xaf(0x01)
	char                                          bSupportUVFromHitResults : 0;                                // 0xb0(0x01)
	char                                          UnknownDataB0[0x1];                                          // 0xb0(0x01)
	char                                          bDisableActiveActors : 0;                                    // 0xb1(0x01)
	char                                          UnknownDataB1[0x1];                                          // 0xb1(0x01)
	char                                          bDisableKinematicStaticPairs : 0;                            // 0xb2(0x01)
	char                                          UnknownDataB2[0x1];                                          // 0xb2(0x01)
	char                                          bDisableKinematicKinematicPairs : 0;                         // 0xb3(0x01)
	char                                          UnknownDataB3[0x1];                                          // 0xb3(0x01)
	char                                          bDisableCCD : 0;                                             // 0xb4(0x01)
	char                                          UnknownDataB4[0x1];                                          // 0xb4(0x01)
	char                                          bEnableEnhancedDeterminism : 0;                              // 0xb5(0x01)
	char                                          UnknownDataB5[0x3];                                          // 0xb5(0x03)
	float                                         AnimPhysicsMinDeltaTime;                                     // 0xb8(0x04)
	char                                          bSimulateAnimPhysicsAfterReset : 0;                          // 0xbc(0x01)
	char                                          UnknownDataBC[0x4];                                          // 0xbc(0x04)
	float                                         MaxPhysicsDeltaTime;                                         // 0xc0(0x04)
	char                                          bSubstepping : 0;                                            // 0xc4(0x01)
	char                                          UnknownDataC4[0x1];                                          // 0xc4(0x01)
	char                                          bSubsteppingAsync : 0;                                       // 0xc5(0x01)
	char                                          UnknownDataC5[0x3];                                          // 0xc5(0x03)
	float                                         MaxSubstepDeltaTime;                                         // 0xc8(0x04)
	uint32_t                                      MaxSubsteps;                                                 // 0xcc(0x04)
	float                                         SyncSceneSmoothingFactor;                                    // 0xd0(0x04)
	float                                         InitialAverageFrameRate;                                     // 0xd4(0x04)
	uint32_t                                      PhysXTreeRebuildRate;                                        // 0xd8(0x04)
	char                                          UnknownDataDC[0x4];                                          // 0xdc(0x04)
	struct TArray<None>                           PhysicalSurfaces;                                            // 0xe0(0x10)
	struct FNone                                  DefaultBroadphaseSettings;                                   // 0xf0(0x40)
	struct FNone                                  ChaosSettings;                                               // 0x130(0x03)
	char                                          UnknownData133[0x5];                                         // 0x133(0x05)
};

// Class Engine.PhysicsSpringComponent
// Size: 0x260 (Inherited: 0x240)
struct UPhysicsSpringComponent : USceneComponent 
{
	float                                         SpringStiffness;                                             // 0x238(0x04)
	float                                         SpringDamping;                                               // 0x23c(0x04)
	float                                         SpringLengthAtRest;                                          // 0x240(0x04)
	float                                         SpringRadius;                                                // 0x244(0x04)
	char                                          SpringChannel;                                               // 0x248(0x01)
	char                                          bIgnoreSelf : 0;                                             // 0x249(0x01)
	float                                         SpringCompression;                                           // 0x24c(0x04)
	char                                          UnknownData255[0xb];                                         // 0x255(0x0b)

	struct FNone GetSpringRestingPoint(); // sub_0x3d9fdc0
	struct FNone GetSpringDirection(); // sub_0x3d9fd80
	struct FNone GetSpringCurrentEndPoint(); // sub_0x3d9fd40
	float GetNormalizedCompressionScalar(); // sub_0x3d9fce0
};

// Class Engine.PhysicsThruster
// Size: 0x318 (Inherited: 0x310)
struct APhysicsThruster : ARigidBodyBase 
{
	struct FNone*                                 ThrusterComponent;                                           // 0x310(0x08)
};

// Class Engine.PhysicsThrusterComponent
// Size: 0x240 (Inherited: 0x240)
struct UPhysicsThrusterComponent : USceneComponent 
{
	float                                         ThrustStrength;                                              // 0x238(0x04)
};

// Class Engine.PlanarReflection
// Size: 0x330 (Inherited: 0x320)
struct APlanarReflection : ASceneCapture 
{
	struct FNone*                                 PlanarReflectionComponent;                                   // 0x320(0x08)
	char                                          bShowPreviewPlane : 0;                                       // 0x328(0x01)
	char                                          UnknownData328[0x8];                                         // 0x328(0x08)

	void OnInterpToggle(char bEnable); // sub_0x3d9fe60
};

// Class Engine.PlanarReflectionComponent
// Size: 0x3c0 (Inherited: 0x2d0)
struct UPlanarReflectionComponent : USceneCaptureComponent 
{
	struct FNone*                                 PreviewBox;                                                  // 0x2d0(0x08)
	float                                         NormalDistortionStrength;                                    // 0x2d8(0x04)
	float                                         PrefilterRoughness;                                          // 0x2dc(0x04)
	float                                         PrefilterRoughnessDistance;                                  // 0x2e0(0x04)
	uint32_t                                      ScreenPercentage;                                            // 0x2e4(0x04)
	float                                         ExtraFOV;                                                    // 0x2e8(0x04)
	float                                         DistanceFromPlaneFadeStart;                                  // 0x2ec(0x04)
	float                                         DistanceFromPlaneFadeEnd;                                    // 0x2f0(0x04)
	float                                         DistanceFromPlaneFadeoutStart;                               // 0x2f4(0x04)
	float                                         DistanceFromPlaneFadeoutEnd;                                 // 0x2f8(0x04)
	float                                         AngleFromPlaneFadeStart;                                     // 0x2fc(0x04)
	float                                         AngleFromPlaneFadeEnd;                                       // 0x300(0x04)
	char                                          bShowPreviewPlane : 0;                                       // 0x304(0x01)
	char                                          UnknownData304[0x1];                                         // 0x304(0x01)
	char                                          bRenderSceneTwoSided : 0;                                    // 0x305(0x01)
	char                                          UnknownData305[0xbb];                                        // 0x305(0xbb)
};

// Class Engine.PlaneReflectionCapture
// Size: 0x318 (Inherited: 0x318)
struct APlaneReflectionCapture : AReflectionCapture 
{
};

// Class Engine.PlaneReflectionCaptureComponent
// Size: 0x2e0 (Inherited: 0x2c0)
struct UPlaneReflectionCaptureComponent : UReflectionCaptureComponent 
{
	float                                         InfluenceRadiusScale;                                        // 0x2c0(0x04)
	char                                          UnknownData2C4[0x4];                                         // 0x2c4(0x04)
	struct FNone*                                 PreviewInfluenceRadius;                                      // 0x2c8(0x08)
	struct FNone*                                 PreviewCaptureBox;                                           // 0x2d0(0x08)
	char                                          UnknownData2D8[0x8];                                         // 0x2d8(0x08)
};

// Class Engine.PlatformEventsComponent
// Size: 0xd0 (Inherited: 0xb0)
struct UPlatformEventsComponent : UActorComponent 
{
	struct FMulticastInlineDelegate               PlatformChangedToLaptopModeDelegate;                         // 0xb0(0x10)
	struct FMulticastInlineDelegate               PlatformChangedToTabletModeDelegate;                         // 0xc0(0x10)

	char SupportsConvertibleLaptops(); // sub_0x3da0e70
	void PlatformEventDelegate__DelegateSignature(); // sub_0x239bfb0
	char IsInTabletMode(); // sub_0x3d9fe30
	char IsInLaptopMode(); // sub_0x3d9fe00
};

// Class Engine.PlatformInterfaceWebResponse
// Size: 0xb0 (Inherited: 0x28)
struct UPlatformInterfaceWebResponse : UObject 
{
	struct FString                                OriginalURL;                                                 // 0x28(0x10)
	uint32_t                                      responsecode;                                                // 0x38(0x04)
	uint32_t                                      Tag;                                                         // 0x3c(0x04)
	struct FString                                StringResponse;                                              // 0x40(0x10)
	struct TArray<None>                           BinaryResponse;                                              // 0x50(0x10)
	char                                          UnknownData60[0x50];                                         // 0x60(0x50)

	uint32_t GetNumHeaders(); // sub_0x1518fb0
	struct FString GetHeaderValue(struct FString HeaderName); // sub_0x3d9fbf0
	void GetHeader(uint32_t HeaderIndex, struct FString& Header, struct FString& Value); // sub_0x3d9fa80
};

// Class Engine.PlayerInput
// Size: 0x3a8 (Inherited: 0x28)
struct UPlayerInput : UObject 
{
	char                                          UnknownData28[0xf8];                                         // 0x28(0xf8)
	struct TArray<None>                           DebugExecBindings;                                           // 0x120(0x10)
	char                                          UnknownData130[0x30];                                        // 0x130(0x30)
	struct TArray<None>                           InvertedAxis;                                                // 0x160(0x10)
	char                                          UnknownData170[0x238];                                       // 0x170(0x238)

	void SetMouseSensitivity(float Sensitivity); // sub_0x3db0680
	void SetBind(struct FName BindName, struct FString Command); // sub_0x3db0010
	void InvertAxisKey(struct FNone AxisKey); // sub_0x3dafeb0
	void InvertAxis(struct FName AxisName); // sub_0x3dafe30
	void ClearSmoothing(); // sub_0x3daf9a0
};

// Class Engine.PlayerStartPIE
// Size: 0x340 (Inherited: 0x340)
struct APlayerStartPIE : APlayerStart 
{
};

// Class Engine.PluginCommandlet
// Size: 0xa0 (Inherited: 0x80)
struct UPluginCommandlet : UCommandlet 
{
	char                                          UnknownData80[0x20];                                         // 0x80(0x20)
};

// Class Engine.PointLight
// Size: 0x328 (Inherited: 0x320)
struct APointLight : ALight 
{
	struct FNone*                                 PointLightComponent;                                         // 0x320(0x08)

	void SetRadius(float NewRadius); // sub_0x3db0700
	void SetLightFalloffExponent(float NewLightFalloffExponent); // sub_0x3db0580
};

// Class Engine.PointLightComponent
// Size: 0x3b0 (Inherited: 0x3a0)
struct UPointLightComponent : ULocalLightComponent 
{
	char                                          bUseInverseSquaredFalloff : 0;                               // 0x398(0x01)
	float                                         LightFalloffExponent;                                        // 0x39c(0x04)
	float                                         SourceRadius;                                                // 0x3a0(0x04)
	float                                         SoftSourceRadius;                                            // 0x3a4(0x04)
	float                                         SourceLength;                                                // 0x3a8(0x04)

	void SetSourceRadius(float bNewValue); // sub_0x3db0880
	void SetSourceLength(float NewValue); // sub_0x3db0800
	void SetSoftSourceRadius(float bNewValue); // sub_0x3db0780
	void SetLightFalloffExponent(float NewLightFalloffExponent); // sub_0x3db0600
};

// Class Engine.Polys
// Size: 0x38 (Inherited: 0x28)
struct UPolys : UObject 
{
	char                                          UnknownData28[0x10];                                         // 0x28(0x10)
};

// Class Engine.PoseableMeshComponent
// Size: 0x860 (Inherited: 0x700)
struct UPoseableMeshComponent : USkinnedMeshComponent 
{
	char                                          UnknownData700[0x160];                                       // 0x700(0x160)

	void SetBoneTransformByName(struct FName BoneName, struct FNone& InTransform, char BoneSpace); // sub_0x3db0420
	void SetBoneScaleByName(struct FName BoneName, struct FNone InScale3D, char BoneSpace); // sub_0x3db0310
	void SetBoneRotationByName(struct FName BoneName, struct FNone InRotation, char BoneSpace); // sub_0x3db0200
	void SetBoneLocationByName(struct FName BoneName, struct FNone InLocation, char BoneSpace); // sub_0x3db00f0
	void ResetBoneTransformByName(struct FName BoneName); // sub_0x3daff90
	struct FNone GetBoneTransformByName(struct FName BoneName, char BoneSpace); // sub_0x3dafcb0
	struct FNone GetBoneScaleByName(struct FName BoneName, char BoneSpace); // sub_0x3dafbe0
	struct FNone GetBoneRotationByName(struct FName BoneName, char BoneSpace); // sub_0x3dafb10
	struct FNone GetBoneLocationByName(struct FName BoneName, char BoneSpace); // sub_0x3dafa40
	void CopyPoseFromSkeletalComponent(struct FNone* InComponentToCopy); // sub_0x3daf9c0
};

// Class Engine.PoseAsset
// Size: 0x120 (Inherited: 0x80)
struct UPoseAsset : UAnimationAsset 
{
	struct FNone                                  PoseContainer;                                               // 0x80(0x90)
	char                                          bAdditivePose : 0;                                           // 0x110(0x01)
	char                                          UnknownData110[0x4];                                         // 0x110(0x04)
	uint32_t                                      BasePoseIndex;                                               // 0x114(0x04)
	struct FName                                  RetargetSource;                                              // 0x118(0x08)
};

// Class Engine.PoseWatch
// Size: 0x38 (Inherited: 0x28)
struct UPoseWatch : UObject 
{
	struct FNone*                                 Node;                                                        // 0x28(0x08)
	struct FNone                                  PoseWatchColour;                                             // 0x30(0x04)
	char                                          UnknownData34[0x4];                                          // 0x34(0x04)
};

// Class Engine.PostProcessComponent
// Size: 0x810 (Inherited: 0x240)
struct UPostProcessComponent : USceneComponent 
{
	struct FNone                                  Settings;                                                    // 0x240(0x5c0)
	float                                         Priority;                                                    // 0x800(0x04)
	float                                         BlendRadius;                                                 // 0x804(0x04)
	float                                         BlendWeight;                                                 // 0x808(0x04)
	char                                          bEnabled : 0;                                                // 0x80c(0x01)
	char                                          bUnbound : 0;                                                // 0x80c(0x01)
	char                                          UnknownData80C[0x4];                                         // 0x80c(0x04)

	void AddOrUpdateBlendable(struct TScriptInterface<INone> InBlendableObject, float InWeight); // sub_0x3daf850
};

// Class Engine.PostProcessVolume
// Size: 0x920 (Inherited: 0x348)
struct APostProcessVolume : AVolume 
{
	char                                          UnknownData348[0x8];                                         // 0x348(0x08)
	struct FNone                                  Settings;                                                    // 0x350(0x5c0)
	float                                         Priority;                                                    // 0x910(0x04)
	float                                         BlendRadius;                                                 // 0x914(0x04)
	float                                         BlendWeight;                                                 // 0x918(0x04)
	char                                          bEnabled : 0;                                                // 0x91c(0x01)
	char                                          bUnbound : 0;                                                // 0x91c(0x01)
	char                                          UnknownData91C[0x4];                                         // 0x91c(0x04)

	void AddOrUpdateBlendable(struct TScriptInterface<INone> InBlendableObject, float InWeight); // sub_0x3daf700
};

// Class Engine.PrecomputedVisibilityOverrideVolume
// Size: 0x378 (Inherited: 0x348)
struct APrecomputedVisibilityOverrideVolume : AVolume 
{
	struct TArray<None>                           OverrideVisibleActors;                                       // 0x348(0x10)
	struct TArray<None>                           OverrideInvisibleActors;                                     // 0x358(0x10)
	struct TArray<None>                           OverrideInvisibleLevels;                                     // 0x368(0x10)
};

// Class Engine.PrecomputedVisibilityVolume
// Size: 0x348 (Inherited: 0x348)
struct APrecomputedVisibilityVolume : AVolume 
{
};

// Class Engine.PreviewCollectionInterface
// Size: 0x28 (Inherited: 0x28)
struct UPreviewCollectionInterface : UInterface 
{
};

// Class Engine.PreviewMeshCollection
// Size: 0x50 (Inherited: 0x30)
struct UPreviewMeshCollection : UDataAsset 
{
	char                                          UnknownData30[0x8];                                          // 0x30(0x08)
	struct FNone*                                 Skeleton;                                                    // 0x38(0x08)
	struct TArray<None>                           SkeletalMeshes;                                              // 0x40(0x10)
};

// Class Engine.PrimaryAssetLabel
// Size: 0x68 (Inherited: 0x30)
struct UPrimaryAssetLabel : UPrimaryDataAsset 
{
	struct FNone                                  Rules;                                                       // 0x30(0x0c)
	char                                          bLabelAssetsInMyDirectory : 0;                               // 0x3c(0x01)
	char                                          bIsRuntimeLabel : 0;                                         // 0x3c(0x01)
	char                                          UnknownData3C[0x4];                                          // 0x3c(0x04)
	struct TArray<None>                           ExplicitAssets;                                              // 0x40(0x10)
	struct TArray<None>                           ExplicitBlueprints;                                          // 0x50(0x10)
	struct FNone                                  AssetCollection;                                             // 0x60(0x08)
};

// Class Engine.ProxyLODMeshSimplificationSettings
// Size: 0x40 (Inherited: 0x38)
struct UProxyLODMeshSimplificationSettings : UDeveloperSettings 
{
	struct FName                                  ProxyLODMeshReductionModuleName;                             // 0x38(0x08)
};

// Class Engine.RadialForceActor
// Size: 0x318 (Inherited: 0x310)
struct ARadialForceActor : ARigidBodyBase 
{
	struct FNone*                                 ForceComponent;                                              // 0x310(0x08)

	void ToggleForce(); // sub_0x1f0adc0
	void FireImpulse(); // sub_0x1e42900
	void EnableForce(); // sub_0x1235530
	void DisableForce(); // sub_0x1f0c650
};

// Class Engine.RadialForceComponent
// Size: 0x270 (Inherited: 0x240)
struct URadialForceComponent : USceneComponent 
{
	float                                         Radius;                                                      // 0x238(0x04)
	char                                          Falloff;                                                     // 0x23c(0x01)
	float                                         ImpulseStrength;                                             // 0x240(0x04)
	char                                          bImpulseVelChange : 0;                                       // 0x244(0x01)
	char                                          bIgnoreOwningActor : 0;                                      // 0x244(0x01)
	float                                         ForceStrength;                                               // 0x248(0x04)
	float                                         DestructibleDamage;                                          // 0x24c(0x04)
	struct TArray<None>                           ObjectTypesToAffect;                                         // 0x250(0x10)
	char                                          UnknownData261[0xf];                                         // 0x261(0x0f)

	void RemoveObjectTypeToAffect(char ObjectType); // sub_0x3dbbba0
	void FireImpulse(); // sub_0x3dbb950
	void AddObjectTypeToAffect(char ObjectType); // sub_0x3dbb8d0
};

// Class Engine.RectLight
// Size: 0x328 (Inherited: 0x320)
struct ARectLight : ALight 
{
	struct FNone*                                 RectLightComponent;                                          // 0x320(0x08)
};

// Class Engine.RectLightComponent
// Size: 0x3c0 (Inherited: 0x3a0)
struct URectLightComponent : ULocalLightComponent 
{
	float                                         SourceWidth;                                                 // 0x398(0x04)
	float                                         SourceHeight;                                                // 0x39c(0x04)
	float                                         BarnDoorAngle;                                               // 0x3a0(0x04)
	float                                         BarnDoorLength;                                              // 0x3a4(0x04)
	struct FNone*                                 SourceTexture;                                               // 0x3a8(0x08)
	char                                          UnknownData3B8[0x8];                                         // 0x3b8(0x08)

	void SetSourceWidth(float bNewValue); // sub_0x3dbbe50
	void SetSourceTexture(struct FNone* bNewValue); // sub_0x3dbbdd0
	void SetSourceHeight(float NewValue); // sub_0x3db0600
	void SetBarnDoorLength(float NewValue); // sub_0x3dbbcc0
	void SetBarnDoorAngle(float NewValue); // sub_0x3dbbc40
};

// Class Engine.RendererSettings
// Size: 0xf0 (Inherited: 0x38)
struct URendererSettings : UDeveloperSettings 
{
	char                                          bMobileDisableVertexFog : 0;                                 // 0x38(0x01)
	char                                          UnknownData38[0x4];                                          // 0x38(0x04)
	uint32_t                                      MaxMobileCascades;                                           // 0x3c(0x04)
	char                                          MobileMSAASampleCount;                                       // 0x40(0x01)
	char                                          UnknownData41[0x3];                                          // 0x41(0x03)
	char                                          bMobileUseLegacyShadingModel : 0;                            // 0x44(0x01)
	char                                          bMobileAllowDitheredLODTransition : 0;                       // 0x44(0x01)
	char                                          bMobileAllowSoftwareOcclusionCulling : 0;                    // 0x44(0x01)
	char                                          bMobileVirtualTextures : 0;                                  // 0x44(0x01)
	char                                          bDiscardUnusedQualityLevels : 0;                             // 0x44(0x01)
	char                                          bOcclusionCulling : 0;                                       // 0x44(0x01)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
	float                                         MinScreenRadiusForLights;                                    // 0x48(0x04)
	float                                         MinScreenRadiusForEarlyZPass;                                // 0x4c(0x04)
	float                                         MinScreenRadiusForCSMdepth;                                  // 0x50(0x04)
	char                                          bPrecomputedVisibilityWarning : 0;                           // 0x54(0x01)
	char                                          bUseCullDistanceVolumes : 0;                                 // 0x54(0x01)
	char                                          bTextureStreaming : 0;                                       // 0x54(0x01)
	char                                          bUseDXT5NormalMaps : 0;                                      // 0x54(0x01)
	char                                          bVirtualTextures : 0;                                        // 0x54(0x01)
	char                                          bVirtualTexturedLightmaps : 0;                               // 0x54(0x01)
	char                                          UnknownData54[0x4];                                          // 0x54(0x04)
	uint32_t                                      VirtualTextureTileSize;                                      // 0x58(0x04)
	uint32_t                                      VirtualTextureTileBorderSize;                                // 0x5c(0x04)
	uint32_t                                      VirtualTextureFeedbackFactor;                                // 0x60(0x04)
	char                                          bVirtualTextureEnableCompressZlib : 0;                       // 0x64(0x01)
	char                                          bVirtualTextureEnableCompressCrunch : 0;                     // 0x64(0x01)
	char                                          bClearCoatEnableSecondNormal : 0;                            // 0x64(0x01)
	char                                          bPreIntegratedSkinBRDF : 0;                                  // 0x64(0x01)
	char                                          bAnisotropicBRDF : 0;                                        // 0x64(0x01)
	char                                          UnknownData64[0x4];                                          // 0x64(0x04)
	uint32_t                                      ReflectionCaptureResolution;                                 // 0x68(0x04)
	char                                          ReflectionEnvironmentLightmapMixBasedOnRoughness : 0;        // 0x6c(0x01)
	char                                          bForwardShading : 0;                                         // 0x6c(0x01)
	char                                          bVertexFoggingForOpaque : 0;                                 // 0x6c(0x01)
	char                                          bAllowStaticLighting : 0;                                    // 0x6c(0x01)
	char                                          bUseNormalMapsForStaticLighting : 0;                         // 0x6c(0x01)
	char                                          bGenerateMeshDistanceFields : 0;                             // 0x6c(0x01)
	char                                          bEightBitMeshDistanceFields : 0;                             // 0x6c(0x01)
	char                                          bGenerateLandscapeGIData : 0;                                // 0x6c(0x01)
	char                                          UnknownData6C[0x1];                                          // 0x6c(0x01)
	char                                          bCompressMeshDistanceFields : 0;                             // 0x6d(0x01)
	char                                          UnknownData6D[0x3];                                          // 0x6d(0x03)
	float                                         TessellationAdaptivePixelsPerTriangle;                       // 0x70(0x04)
	char                                          bSeparateTranslucency : 0;                                   // 0x74(0x01)
	char                                          UnknownData74[0x4];                                          // 0x74(0x04)
	char                                          TranslucentSortPolicy;                                       // 0x78(0x01)
	char                                          UnknownData79[0x3];                                          // 0x79(0x03)
	struct FNone                                  TranslucentSortAxis;                                         // 0x7c(0x0c)
	char                                          CustomDepthStencil;                                          // 0x88(0x01)
	char                                          UnknownData89[0x3];                                          // 0x89(0x03)
	char                                          bCustomDepthTaaJitter : 0;                                   // 0x8c(0x01)
	char                                          UnknownData8C[0x4];                                          // 0x8c(0x04)
	char                                          bEnableAlphaChannelInPostProcessing;                         // 0x90(0x01)
	char                                          UnknownData91[0x3];                                          // 0x91(0x03)
	char                                          bDefaultFeatureBloom : 0;                                    // 0x94(0x01)
	char                                          bDefaultFeatureAmbientOcclusion : 0;                         // 0x94(0x01)
	char                                          bDefaultFeatureAmbientOcclusionStaticFraction : 0;           // 0x94(0x01)
	char                                          bDefaultFeatureAutoExposure : 0;                             // 0x94(0x01)
	char                                          UnknownData94[0x4];                                          // 0x94(0x04)
	char                                          DefaultFeatureAutoExposure;                                  // 0x98(0x01)
	char                                          UnknownData99[0x3];                                          // 0x99(0x03)
	float                                         DefaultFeatureAutoExposureBias;                              // 0x9c(0x04)
	char                                          bExtendDefaultLuminanceRangeInAutoExposureSettings : 0;      // 0xa0(0x01)
	char                                          bUsePreExposure : 0;                                         // 0xa0(0x01)
	char                                          bEnablePreExposureOnlyInTheEditor : 0;                       // 0xa0(0x01)
	char                                          bDefaultFeatureMotionBlur : 0;                               // 0xa0(0x01)
	char                                          bDefaultFeatureLensFlare : 0;                                // 0xa0(0x01)
	char                                          bTemporalUpsampling : 0;                                     // 0xa0(0x01)
	char                                          bSSGI : 0;                                                   // 0xa0(0x01)
	char                                          UnknownDataA0[0x4];                                          // 0xa0(0x04)
	char                                          DefaultFeatureAntiAliasing;                                  // 0xa4(0x01)
	enum class None                               DefaultLightUnits;                                           // 0xa5(0x01)
	char                                          DefaultBackBufferPixelFormat;                                // 0xa6(0x01)
	char                                          UnknownDataA7[0x1];                                          // 0xa7(0x01)
	char                                          bRenderUnbuiltPreviewShadowsInGame : 0;                      // 0xa8(0x01)
	char                                          bStencilForLODDither : 0;                                    // 0xa8(0x01)
	char                                          UnknownDataA8[0x4];                                          // 0xa8(0x04)
	char                                          EarlyZPass;                                                  // 0xac(0x01)
	char                                          UnknownDataAD[0x3];                                          // 0xad(0x03)
	char                                          bEarlyZPassOnlyMaterialMasking : 0;                          // 0xb0(0x01)
	char                                          bDBuffer : 0;                                                // 0xb0(0x01)
	char                                          UnknownDataB0[0x4];                                          // 0xb0(0x04)
	char                                          ClearSceneMethod;                                            // 0xb4(0x01)
	char                                          UnknownDataB5[0x3];                                          // 0xb5(0x03)
	char                                          bBasePassOutputsVelocity : 0;                                // 0xb8(0x01)
	char                                          bVertexDeformationOutputsVelocity : 0;                       // 0xb8(0x01)
	char                                          bSelectiveBasePassOutputs : 0;                               // 0xb8(0x01)
	char                                          bDefaultParticleCutouts : 0;                                 // 0xb8(0x01)
	char                                          UnknownDataB8[0x4];                                          // 0xb8(0x04)
	uint32_t                                      GPUSimulationTextureSizeX;                                   // 0xbc(0x04)
	uint32_t                                      GPUSimulationTextureSizeY;                                   // 0xc0(0x04)
	char                                          bGlobalClipPlane : 0;                                        // 0xc4(0x01)
	char                                          UnknownDataC4[0x4];                                          // 0xc4(0x04)
	char                                          GBufferFormat;                                               // 0xc8(0x01)
	char                                          UnknownDataC9[0x3];                                          // 0xc9(0x03)
	char                                          bUseGPUMorphTargets : 0;                                     // 0xcc(0x01)
	char                                          bNvidiaAftermathEnabled : 0;                                 // 0xcc(0x01)
	char                                          bMultiView : 0;                                              // 0xcc(0x01)
	char                                          bMobilePostProcessing : 0;                                   // 0xcc(0x01)
	char                                          bMobileMultiView : 0;                                        // 0xcc(0x01)
	char                                          bMobileUseHWsRGBEncoding : 0;                                // 0xcc(0x01)
	char                                          bRoundRobinOcclusion : 0;                                    // 0xcc(0x01)
	char                                          bODSCapture : 0;                                             // 0xcc(0x01)
	char                                          UnknownDataCC[0x1];                                          // 0xcc(0x01)
	char                                          bMeshStreaming : 0;                                          // 0xcd(0x01)
	char                                          UnknownDataCD[0x3];                                          // 0xcd(0x03)
	float                                         WireframeCullThreshold;                                      // 0xd0(0x04)
	char                                          bEnableRayTracing : 0;                                       // 0xd4(0x01)
	char                                          bEnableRayTracingTextureLOD : 0;                             // 0xd4(0x01)
	char                                          bSupportStationarySkylight : 0;                              // 0xd4(0x01)
	char                                          bSupportLowQualityLightmaps : 0;                             // 0xd4(0x01)
	char                                          bSupportPointLightWholeSceneShadows : 0;                     // 0xd4(0x01)
	char                                          bSupportAtmosphericFog : 0;                                  // 0xd4(0x01)
	char                                          bSupportSkyAtmosphere : 0;                                   // 0xd4(0x01)
	char                                          bSupportSkyAtmosphereAffectsHeightFog : 0;                   // 0xd4(0x01)
	char                                          UnknownDataD4[0x1];                                          // 0xd4(0x01)
	char                                          bSupportSkinCacheShaders : 0;                                // 0xd5(0x01)
	char                                          UnknownDataD5[0x3];                                          // 0xd5(0x03)
	enum class None                               DefaultSkinCacheBehavior;                                    // 0xd8(0x01)
	char                                          UnknownDataD9[0x3];                                          // 0xd9(0x03)
	float                                         SkinCacheSceneMemoryLimitInMB;                               // 0xdc(0x04)
	char                                          bMobileEnableStaticAndCSMShadowReceivers : 0;                // 0xe0(0x01)
	char                                          bMobileEnableMovableLightCSMShaderCulling : 0;               // 0xe0(0x01)
	char                                          bMobileAllowDistanceFieldShadows : 0;                        // 0xe0(0x01)
	char                                          bMobileAllowMovableDirectionalLights : 0;                    // 0xe0(0x01)
	char                                          UnknownDataE0[0x4];                                          // 0xe0(0x04)
	uint32_t                                      MobileNumDynamicPointLights;                                 // 0xe4(0x04)
	char                                          bMobileDynamicPointLightsUseStaticBranch : 0;                // 0xe8(0x01)
	char                                          bMobileAllowMovableSpotlights : 0;                           // 0xe8(0x01)
	char                                          bSupport16BitBoneIndex : 0;                                  // 0xe8(0x01)
	char                                          bGPUSkinLimit2BoneInfluences : 0;                            // 0xe8(0x01)
	char                                          bSupportDepthOnlyIndexBuffers : 0;                           // 0xe8(0x01)
	char                                          bSupportReversedIndexBuffers : 0;                            // 0xe8(0x01)
	char                                          bSupportMaterialLayers : 0;                                  // 0xe8(0x01)
	char                                          bLPV : 0;                                                    // 0xe8(0x01)
	char                                          UnknownDataE8[0x8];                                          // 0xe8(0x08)
};

// Class Engine.RendererOverrideSettings
// Size: 0x40 (Inherited: 0x38)
struct URendererOverrideSettings : UDeveloperSettings 
{
	char                                          bSupportAllShaderPermutations : 0;                           // 0x38(0x01)
	char                                          bForceRecomputeTangents : 0;                                 // 0x38(0x01)
	char                                          UnknownData38[0x8];                                          // 0x38(0x08)
};

// Class Engine.ReporterBase
// Size: 0x30 (Inherited: 0x28)
struct UReporterBase : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
};

// Class Engine.ReporterGraph
// Size: 0xa8 (Inherited: 0x30)
struct UReporterGraph : UReporterBase 
{
	char                                          UnknownData30[0x78];                                         // 0x30(0x78)
};

// Class Engine.ReverbEffect
// Size: 0x58 (Inherited: 0x28)
struct UReverbEffect : UObject 
{
	float                                         Density;                                                     // 0x28(0x04)
	float                                         Diffusion;                                                   // 0x2c(0x04)
	float                                         Gain;                                                        // 0x30(0x04)
	float                                         GainHF;                                                      // 0x34(0x04)
	float                                         DecayTime;                                                   // 0x38(0x04)
	float                                         DecayHFRatio;                                                // 0x3c(0x04)
	float                                         ReflectionsGain;                                             // 0x40(0x04)
	float                                         ReflectionsDelay;                                            // 0x44(0x04)
	float                                         LateGain;                                                    // 0x48(0x04)
	float                                         LateDelay;                                                   // 0x4c(0x04)
	float                                         AirAbsorptionGainHF;                                         // 0x50(0x04)
	float                                         RoomRolloffFactor;                                           // 0x54(0x04)
};

// Class Engine.Rig
// Size: 0x50 (Inherited: 0x28)
struct URig : UObject 
{
	char                                          UnknownData28[0x8];                                          // 0x28(0x08)
	struct TArray<None>                           TransformBases;                                              // 0x30(0x10)
	struct TArray<None>                           Nodes;                                                       // 0x40(0x10)
};

// Class Engine.RotatingMovementComponent
// Size: 0x110 (Inherited: 0xf0)
struct URotatingMovementComponent : UMovementComponent 
{
	struct FNone                                  RotationRate;                                                // 0xf0(0x0c)
	struct FNone                                  PivotTranslation;                                            // 0xfc(0x0c)
	char                                          bRotationInLocalSpace : 0;                                   // 0x108(0x01)
	char                                          UnknownData108[0x8];                                         // 0x108(0x08)
};

// Class Engine.RuntimeOptionsBase
// Size: 0x38 (Inherited: 0x28)
struct URuntimeOptionsBase : UObject 
{
	char                                          UnknownData28[0x10];                                         // 0x28(0x10)
};

// Class Engine.RuntimeVirtualTexture
// Size: 0xa0 (Inherited: 0x28)
struct URuntimeVirtualTexture : UObject 
{
	enum class None                               MaterialType;                                                // 0x28(0x01)
	char                                          bCompressTextures : 0;                                       // 0x29(0x01)
	char                                          UnknownData29[0x1];                                          // 0x29(0x01)
	char                                          bEnable : 0;                                                 // 0x2a(0x01)
	char                                          UnknownData2A[0x1];                                          // 0x2a(0x01)
	char                                          bClearTextures : 0;                                          // 0x2b(0x01)
	char                                          UnknownData2B[0x1];                                          // 0x2b(0x01)
	char                                          bSinglePhysicalSpace : 0;                                    // 0x2c(0x01)
	char                                          UnknownData2C[0x1];                                          // 0x2c(0x01)
	char                                          bPrivateSpace : 0;                                           // 0x2d(0x01)
	char                                          UnknownData2D[0x1];                                          // 0x2d(0x01)
	char                                          bEnableScalability : 0;                                      // 0x2e(0x01)
	char                                          UnknownData2E[0x2];                                          // 0x2e(0x02)
	uint32_t                                      Size;                                                        // 0x30(0x04)
	uint32_t                                      TileCount;                                                   // 0x34(0x04)
	uint32_t                                      TileSize;                                                    // 0x38(0x04)
	uint32_t                                      TileBorderSize;                                              // 0x3c(0x04)
	uint32_t                                      StreamLowMips;                                               // 0x40(0x04)
	char                                          UnknownData44[0x4];                                          // 0x44(0x04)
	struct FNone*                                 StreamingTexture;                                            // 0x48(0x08)
	char                                          bEnableCompressCrunch : 0;                                   // 0x50(0x01)
	char                                          UnknownData50[0x4];                                          // 0x50(0x04)
	uint32_t                                      RemoveLowMips;                                               // 0x54(0x04)
	char                                          UnknownData58[0x48];                                         // 0x58(0x48)

	uint32_t GetTileSize(); // sub_0x3dc1d20
	uint32_t GetTileCount(); // sub_0x3dc1ce0
	uint32_t GetTileBorderSize(); // sub_0x3dc1ca0
	uint32_t GetSize(); // sub_0x3dc1c30
};

// Class Engine.RuntimeVirtualTextureComponent
// Size: 0x260 (Inherited: 0x240)
struct URuntimeVirtualTextureComponent : USceneComponent 
{
	struct FNone*                                 VirtualTexture;                                              // 0x238(0x08)
	char                                          bUseStreamingLowMipsInEditor : 0;                            // 0x240(0x01)
	struct FNone*                                 BoundsSourceActor;                                           // 0x248(0x08)
	char                                          UnknownData250[0x10];                                        // 0x250(0x10)

	struct FNone GetVirtualTextureTransform(); // sub_0x3dc1d70
};

// Class Engine.RuntimeVirtualTextureStreamingProxy
// Size: 0x100 (Inherited: 0xe8)
struct URuntimeVirtualTextureStreamingProxy : UTexture2D 
{
	struct FNone                                  Settings;                                                    // 0xe8(0x0c)
	char                                          bSinglePhysicalSpace : 0;                                    // 0xf4(0x01)
	char                                          UnknownDataF4[0x4];                                          // 0xf4(0x04)
	uint32_t                                      BuildHash;                                                   // 0xf8(0x04)
	char                                          UnknownDataFC[0x4];                                          // 0xfc(0x04)
};

// Class Engine.RuntimeVirtualTextureVolume
// Size: 0x318 (Inherited: 0x310)
struct ARuntimeVirtualTextureVolume : AActor 
{
	struct FNone*                                 VirtualTextureComponent;                                     // 0x310(0x08)
};

// Class Engine.RVOAvoidanceInterface
// Size: 0x28 (Inherited: 0x28)
struct URVOAvoidanceInterface : UInterface 
{
};

// Class Engine.Scene
// Size: 0x28 (Inherited: 0x28)
struct UScene : UObject 
{
};

// Class Engine.SceneCaptureComponentCube
// Size: 0x300 (Inherited: 0x2d0)
struct USceneCaptureComponentCube : USceneCaptureComponent 
{
	struct FNone*                                 TextureTarget;                                               // 0x2d0(0x08)
	char                                          bCaptureRotation : 0;                                        // 0x2d8(0x01)
	char                                          UnknownData2D8[0x8];                                         // 0x2d8(0x08)
	struct FNone*                                 TextureTargetLeft;                                           // 0x2e0(0x08)
	struct FNone*                                 TextureTargetRight;                                          // 0x2e8(0x08)
	struct FNone*                                 TextureTargetODS;                                            // 0x2f0(0x08)
	float                                         IPD;                                                         // 0x2f8(0x04)
	char                                          UnknownData2FC[0x4];                                         // 0x2fc(0x04)

	void CaptureScene(); // sub_0x3dc8a10
};

// Class Engine.SceneCaptureCube
// Size: 0x328 (Inherited: 0x320)
struct ASceneCaptureCube : ASceneCapture 
{
	struct FNone*                                 CaptureComponentCube;                                        // 0x320(0x08)

	void OnInterpToggle(char bEnable); // sub_0x3d9fe60
};

// Class Engine.SCS_Node
// Size: 0xd8 (Inherited: 0x28)
struct USCS_Node : UObject 
{
	struct FNone*                                 ComponentClass;                                              // 0x28(0x08)
	struct FNone*                                 ComponentTemplate;                                           // 0x30(0x08)
	struct FNone                                  CookedComponentInstancingData;                               // 0x38(0x48)
	struct FName                                  AttachToName;                                                // 0x80(0x08)
	struct FName                                  ParentComponentOrVariableName;                               // 0x88(0x08)
	struct FName                                  ParentComponentOwnerClassName;                               // 0x90(0x08)
	char                                          bIsParentComponentNative : 0;                                // 0x98(0x01)
	char                                          UnknownData98[0x8];                                          // 0x98(0x08)
	struct TArray<None>                           ChildNodes;                                                  // 0xa0(0x10)
	struct TArray<None>                           MetaDataArray;                                               // 0xb0(0x10)
	struct FNone                                  VariableGuid;                                                // 0xc0(0x10)
	struct FName                                  InternalVariableName;                                        // 0xd0(0x08)
};

// Class Engine.Selection
// Size: 0xa0 (Inherited: 0x28)
struct USelection : UObject 
{
	char                                          UnknownData28[0x78];                                         // 0x28(0x78)
};

// Class Engine.ServerStatReplicator
// Size: 0x3d8 (Inherited: 0x310)
struct AServerStatReplicator : AInfo 
{
	char                                          bUpdateStatNet : 0;                                          // 0x310(0x01)
	char                                          UnknownData310[0x1];                                         // 0x310(0x01)
	char                                          bOverwriteClientStats : 0;                                   // 0x311(0x01)
	char                                          UnknownData311[0x3];                                         // 0x311(0x03)
	uint32_t                                      Channels;                                                    // 0x314(0x04)
	uint32_t                                      InRate;                                                      // 0x318(0x04)
	uint32_t                                      OutRate;                                                     // 0x31c(0x04)
	char                                          UnknownData320[0x4];                                         // 0x320(0x04)
	uint32_t                                      MaxPacketOverhead;                                           // 0x324(0x04)
	uint32_t                                      InRateClientMax;                                             // 0x328(0x04)
	uint32_t                                      InRateClientMin;                                             // 0x32c(0x04)
	uint32_t                                      InRateClientAvg;                                             // 0x330(0x04)
	uint32_t                                      InPacketsClientMax;                                          // 0x334(0x04)
	uint32_t                                      InPacketsClientMin;                                          // 0x338(0x04)
	uint32_t                                      InPacketsClientAvg;                                          // 0x33c(0x04)
	uint32_t                                      OutRateClientMax;                                            // 0x340(0x04)
	uint32_t                                      OutRateClientMin;                                            // 0x344(0x04)
	uint32_t                                      OutRateClientAvg;                                            // 0x348(0x04)
	uint32_t                                      OutPacketsClientMax;                                         // 0x34c(0x04)
	uint32_t                                      OutPacketsClientMin;                                         // 0x350(0x04)
	uint32_t                                      OutPacketsClientAvg;                                         // 0x354(0x04)
	uint32_t                                      NetNumClients;                                               // 0x358(0x04)
	uint32_t                                      InPackets;                                                   // 0x35c(0x04)
	uint32_t                                      OutPackets;                                                  // 0x360(0x04)
	uint32_t                                      InBunches;                                                   // 0x364(0x04)
	uint32_t                                      OutBunches;                                                  // 0x368(0x04)
	uint32_t                                      OutLoss;                                                     // 0x36c(0x04)
	uint32_t                                      InLoss;                                                      // 0x370(0x04)
	uint32_t                                      VoiceBytesSent;                                              // 0x374(0x04)
	uint32_t                                      VoiceBytesRecv;                                              // 0x378(0x04)
	uint32_t                                      VoicePacketsSent;                                            // 0x37c(0x04)
	uint32_t                                      VoicePacketsRecv;                                            // 0x380(0x04)
	uint32_t                                      PercentInVoice;                                              // 0x384(0x04)
	uint32_t                                      PercentOutVoice;                                             // 0x388(0x04)
	uint32_t                                      NumActorChannels;                                            // 0x38c(0x04)
	uint32_t                                      NumConsideredActors;                                         // 0x390(0x04)
	uint32_t                                      PrioritizedActors;                                           // 0x394(0x04)
	uint32_t                                      NumRelevantActors;                                           // 0x398(0x04)
	uint32_t                                      NumRelevantDeletedActors;                                    // 0x39c(0x04)
	uint32_t                                      NumReplicatedActorAttempts;                                  // 0x3a0(0x04)
	uint32_t                                      NumReplicatedActors;                                         // 0x3a4(0x04)
	uint32_t                                      NumActors;                                                   // 0x3a8(0x04)
	uint32_t                                      NumNetActors;                                                // 0x3ac(0x04)
	uint32_t                                      NumDormantActors;                                            // 0x3b0(0x04)
	uint32_t                                      NumInitiallyDormantActors;                                   // 0x3b4(0x04)
	uint32_t                                      NumNetGUIDsAckd;                                             // 0x3b8(0x04)
	uint32_t                                      NumNetGUIDsPending;                                          // 0x3bc(0x04)
	uint32_t                                      NumNetGUIDsUnAckd;                                           // 0x3c0(0x04)
	uint32_t                                      ObjPathBytes;                                                // 0x3c4(0x04)
	uint32_t                                      NetGUIDOutRate;                                              // 0x3c8(0x04)
	uint32_t                                      NetGUIDInRate;                                               // 0x3cc(0x04)
	uint32_t                                      NetSaturated;                                                // 0x3d0(0x04)
	char                                          UnknownData3D4[0x4];                                         // 0x3d4(0x04)
};

// Class Engine.ShadowMapTexture2D
// Size: 0xf0 (Inherited: 0xe8)
struct UShadowMapTexture2D : UTexture2D 
{
	char                                          ShadowmapFlags;                                              // 0xe8(0x01)
	char                                          UnknownDataE9[0x7];                                          // 0xe9(0x07)
};

// Class Engine.SimpleConstructionScript
// Size: 0xa0 (Inherited: 0x28)
struct USimpleConstructionScript : UObject 
{
	struct TArray<None>                           RootNodes;                                                   // 0x28(0x10)
	struct TArray<None>                           AllNodes;                                                    // 0x38(0x10)
	struct FNone*                                 DefaultSceneRootNode;                                        // 0x48(0x08)
	char                                          UnknownData50[0x50];                                         // 0x50(0x50)
};

// Class Engine.SkeletalMeshEditorData
// Size: 0x28 (Inherited: 0x28)
struct USkeletalMeshEditorData : UObject 
{
};

// Class Engine.SkeletalMeshLODSettings
// Size: 0x50 (Inherited: 0x30)
struct USkeletalMeshLODSettings : UDataAsset 
{
	struct FNone                                  MinLOD;                                                      // 0x30(0x04)
	struct FNone                                  DisableBelowMinLodStripping;                                 // 0x34(0x01)
	struct FNone                                  bSupportLODStreaming;                                        // 0x35(0x01)
	char                                          UnknownData36[0x2];                                          // 0x36(0x02)
	struct FNone                                  MaxNumStreamedLODs;                                          // 0x38(0x04)
	struct FNone                                  MaxNumOptionalLODs;                                          // 0x3c(0x04)
	struct TArray<None>                           LODGroups;                                                   // 0x40(0x10)
};

// Class Engine.SkeletalMeshSimplificationSettings
// Size: 0x40 (Inherited: 0x38)
struct USkeletalMeshSimplificationSettings : UDeveloperSettings 
{
	struct FName                                  SkeletalMeshReductionModuleName;                             // 0x38(0x08)
};

// Class Engine.SkeletalMeshSocket
// Size: 0x60 (Inherited: 0x28)
struct USkeletalMeshSocket : UObject 
{
	struct FName                                  SocketName;                                                  // 0x28(0x08)
	struct FName                                  BoneName;                                                    // 0x30(0x08)
	struct FNone                                  RelativeLocation;                                            // 0x38(0x0c)
	struct FNone                                  RelativeRotation;                                            // 0x44(0x0c)
	struct FNone                                  RelativeScale;                                               // 0x50(0x0c)
	char                                          bForceAlwaysAnimated : 0;                                    // 0x5c(0x01)
	char                                          UnknownData5C[0x4];                                          // 0x5c(0x04)

	void InitializeSocketFromLocation(struct FNone* SkelComp, struct FNone WorldLocation, struct FNone WorldNormal); // sub_0x3ddeb20
	struct FNone GetSocketLocation(struct FNone* SkelComp); // sub_0x3dde8a0
};

// Class Engine.SkyAtmosphereComponent
// Size: 0x310 (Inherited: 0x240)
struct USkyAtmosphereComponent : USceneComponent 
{
	enum class None                               TransformMode;                                               // 0x238(0x01)
	float                                         BottomRadius;                                                // 0x23c(0x04)
	struct FNone                                  GroundAlbedo;                                                // 0x240(0x04)
	float                                         AtmosphereHeight;                                            // 0x244(0x04)
	float                                         MultiScatteringFactor;                                       // 0x248(0x04)
	float                                         RayleighScatteringScale;                                     // 0x24c(0x04)
	struct FNone                                  RayleighScattering;                                          // 0x250(0x10)
	float                                         RayleighExponentialDistribution;                             // 0x260(0x04)
	float                                         MieScatteringScale;                                          // 0x264(0x04)
	struct FNone                                  MieScattering;                                               // 0x268(0x10)
	float                                         MieAbsorptionScale;                                          // 0x278(0x04)
	struct FNone                                  MieAbsorption;                                               // 0x27c(0x10)
	float                                         MieAnisotropy;                                               // 0x28c(0x04)
	float                                         MieExponentialDistribution;                                  // 0x290(0x04)
	float                                         OtherAbsorptionScale;                                        // 0x294(0x04)
	struct FNone                                  OtherAbsorption;                                             // 0x298(0x10)
	struct FNone                                  OtherTentDistribution;                                       // 0x2a8(0x0c)
	struct FNone                                  SkyLuminanceFactor;                                          // 0x2b4(0x10)
	float                                         AerialPespectiveViewDistanceScale;                           // 0x2c4(0x04)
	float                                         HeightFogContribution;                                       // 0x2c8(0x04)
	float                                         TransmittanceMinLightElevationAngle;                         // 0x2cc(0x04)
	char                                          UnknownData2D5[0x1f];                                        // 0x2d5(0x1f)
	struct FNone                                  bStaticLightingBuiltGUID;                                    // 0x2f4(0x10)
	char                                          UnknownData304[0xc];                                         // 0x304(0x0c)

	void SetSkyLuminanceFactor(struct FNone NewValue); // sub_0x3de4b50
	void SetRayleighScatteringScale(float NewValue); // sub_0x3de4ad0
	void SetRayleighScattering(struct FNone NewValue); // sub_0x3de4a50
	void SetRayleighExponentialDistribution(float NewValue); // sub_0x3de49d0
	void SetOtherAbsorptionScale(float NewValue); // sub_0x3d52580
	void SetOtherAbsorption(struct FNone NewValue); // sub_0x3de4950
	void SetMieScatteringScale(float NewValue); // sub_0x3de45a0
	void SetMieScattering(struct FNone NewValue); // sub_0x3de4520
	void SetMieExponentialDistribution(float NewValue); // sub_0x3d52600
	void SetMieAnisotropy(float NewValue); // sub_0x3d52790
	void SetMieAbsorptionScale(float NewValue); // sub_0x3de44a0
	void SetMieAbsorption(struct FNone NewValue); // sub_0x3de4420
	void SetHeightFogContribution(float NewValue); // sub_0x3de4190
	void SetAerialPespectiveViewDistanceScale(float NewValue); // sub_0x3de3ef0
	void OverrideAtmosphereLightDirection(uint32_t AtmosphereLightIndex, struct FNone& LightDirection); // sub_0x3de3e00
};

// Class Engine.SkyAtmosphere
// Size: 0x318 (Inherited: 0x310)
struct ASkyAtmosphere : AInfo 
{
	struct FNone*                                 SkyAtmosphereComponent;                                      // 0x310(0x08)
};

// Class Engine.SkyLightComponent
// Size: 0x460 (Inherited: 0x270)
struct USkyLightComponent : ULightComponentBase 
{
	char                                          SourceType;                                                  // 0x270(0x01)
	char                                          UnknownData271[0x7];                                         // 0x271(0x07)
	struct FNone*                                 Cubemap;                                                     // 0x278(0x08)
	float                                         SourceCubemapAngle;                                          // 0x280(0x04)
	uint32_t                                      CubemapResolution;                                           // 0x284(0x04)
	float                                         SkyDistanceThreshold;                                        // 0x288(0x04)
	char                                          bCaptureEmissiveOnly : 0;                                    // 0x28c(0x01)
	char                                          UnknownData28C[0x1];                                         // 0x28c(0x01)
	char                                          bLowerHemisphereIsBlack : 0;                                 // 0x28d(0x01)
	char                                          UnknownData28D[0x3];                                         // 0x28d(0x03)
	struct FNone                                  LowerHemisphereColor;                                        // 0x290(0x10)
	char                                          bAffectDynamicIndirectLighting : 0;                          // 0x2a0(0x01)
	char                                          UnknownData2A0[0x4];                                         // 0x2a0(0x04)
	float                                         OcclusionMaxDistance;                                        // 0x2a4(0x04)
	float                                         Contrast;                                                    // 0x2a8(0x04)
	float                                         OcclusionExponent;                                           // 0x2ac(0x04)
	struct FNone                                  OcclusionFoliageTint;                                        // 0x2b0(0x04)
	float                                         MinOcclusion;                                                // 0x2b4(0x04)
	struct FNone                                  OcclusionBarkTint;                                           // 0x2b8(0x04)
	struct FNone                                  OcclusionTint;                                               // 0x2bc(0x04)
	char                                          OcclusionCombineMode;                                        // 0x2c0(0x01)
	char                                          SpecularOcclusionMode;                                       // 0x2c1(0x01)
	char                                          UnknownData2C2[0x2];                                         // 0x2c2(0x02)
	float                                         SpecularOcclusionStrength;                                   // 0x2c4(0x04)
	float                                         SelfShadowBiasForObjectAO;                                   // 0x2c8(0x04)
	float                                         OcclusionTranslucencyForTwoSidedFoliages;                    // 0x2cc(0x04)
	char                                          UnknownData2D0[0xb8];                                        // 0x2d0(0xb8)
	struct FNone*                                 BlendDestinationCubemap;                                     // 0x388(0x08)
	char                                          UnknownData390[0xd0];                                        // 0x390(0xd0)

	void SetVolumetricScatteringIntensity(float NewIntensity); // sub_0x3de4bd0
	void SetOcclusionTint(struct FNone& InTint); // sub_0x3de48c0
	void SetOcclusionFoliageTint(struct FNone& InTint); // sub_0x3de4830
	void SetOcclusionExponent(float InOcclusionExponent); // sub_0x3de47b0
	void SetOcclusionContrast(float InOcclusionContrast); // sub_0x3de4730
	void SetOcclusionBarkTint(struct FNone& InTint); // sub_0x3de46a0
	void SetMinOcclusion(float InMinOcclusion); // sub_0x3de4620
	void SetLowerHemisphereColor(struct FNone& InLowerHemisphereColor); // sub_0x3de4390
	void SetLightColor(struct FNone NewLightColor); // sub_0x3de4310
	void SetIntensity(float NewIntensity); // sub_0x3de4290
	void SetIndirectLightingIntensity(float NewIntensity); // sub_0x3de4210
	void SetCubemapBlend(struct FNone* SourceCubemap, struct FNone* DestinationCubemap, float InBlendFraction); // sub_0x3de4080
	void SetCubemap(struct FNone* NewCubemap); // sub_0x3de4000
	void SetAffectDynamicIndirectLighting(char bNewValue); // sub_0x3de3f70
	void RecaptureSky(); // sub_0x3de3ed0
};

// Class Engine.SlateBrushAsset
// Size: 0xb0 (Inherited: 0x28)
struct USlateBrushAsset : UObject 
{
	struct FNone                                  Brush;                                                       // 0x28(0x88)
};

// Class Engine.SlateTextureAtlasInterface
// Size: 0x28 (Inherited: 0x28)
struct USlateTextureAtlasInterface : UInterface 
{
};

// Class Engine.SmokeTestCommandlet
// Size: 0x80 (Inherited: 0x80)
struct USmokeTestCommandlet : UCommandlet 
{
};

// Class Engine.SoundAttenuation
// Size: 0x3c8 (Inherited: 0x28)
struct USoundAttenuation : UObject 
{
	struct FNone                                  Attenuation;                                                 // 0x28(0x3a0)
};

// Class Engine.SoundClass
// Size: 0xb8 (Inherited: 0x28)
struct USoundClass : UObject 
{
	struct FNone                                  Properties;                                                  // 0x28(0x58)
	struct TArray<None>                           ChildClasses;                                                // 0x80(0x10)
	struct TArray<None>                           PassiveSoundMixModifiers;                                    // 0x90(0x10)
	struct FNone                                  Modulation;                                                  // 0xa0(0x10)
	struct FNone*                                 ParentClass;                                                 // 0xb0(0x08)
};

// Class Engine.SoundConcurrency
// Size: 0x48 (Inherited: 0x28)
struct USoundConcurrency : UObject 
{
	struct FNone                                  Concurrency;                                                 // 0x28(0x20)
};

// Class Engine.SoundCue
// Size: 0x538 (Inherited: 0x160)
struct USoundCue : USoundBase 
{
	char                                          bPrimeOnLoad : 0;                                            // 0x160(0x01)
	char                                          UnknownData160[0x8];                                         // 0x160(0x08)
	struct FNone*                                 FirstNode;                                                   // 0x168(0x08)
	float                                         VolumeMultiplier;                                            // 0x170(0x04)
	float                                         PitchMultiplier;                                             // 0x174(0x04)
	struct FNone                                  AttenuationOverrides;                                        // 0x178(0x3a0)
	float                                         SubtitlePriority;                                            // 0x518(0x04)
	char                                          UnknownData51C[0x4];                                         // 0x51c(0x04)
	char                                          bOverrideAttenuation : 0;                                    // 0x520(0x01)
	char                                          bExcludeFromRandomNodeBranchCulling : 0;                     // 0x520(0x01)
	char                                          UnknownData520[0x4];                                         // 0x520(0x04)
	uint32_t                                      CookedQualityIndex;                                          // 0x524(0x04)
	char                                          bHasPlayWhenSilent : 0;                                      // 0x528(0x01)
	char                                          UnknownData528[0x10];                                        // 0x528(0x10)
};

// Class Engine.SoundEffectSourcePresetChain
// Size: 0x40 (Inherited: 0x28)
struct USoundEffectSourcePresetChain : UObject 
{
	struct TArray<None>                           Chain;                                                       // 0x28(0x10)
	char                                          bPlayEffectChainTails : 0;                                   // 0x38(0x01)
	char                                          UnknownData38[0x8];                                          // 0x38(0x08)
};

// Class Engine.SoundGroups
// Size: 0x88 (Inherited: 0x28)
struct USoundGroups : UObject 
{
	struct TArray<None>                           SoundGroupProfiles;                                          // 0x28(0x10)
	char                                          UnknownData38[0x50];                                         // 0x38(0x50)
};

// Class Engine.SoundMix
// Size: 0x90 (Inherited: 0x28)
struct USoundMix : UObject 
{
	char                                          bApplyEQ : 0;                                                // 0x28(0x01)
	char                                          UnknownData28[0x4];                                          // 0x28(0x04)
	float                                         EQPriority;                                                  // 0x2c(0x04)
	struct FNone                                  EQSettings;                                                  // 0x30(0x40)
	struct TArray<None>                           SoundClassEffects;                                           // 0x70(0x10)
	float                                         InitialDelay;                                                // 0x80(0x04)
	float                                         FadeInTime;                                                  // 0x84(0x04)
	float                                         Duration;                                                    // 0x88(0x04)
	float                                         FadeOutTime;                                                 // 0x8c(0x04)
};

// Class Engine.SoundNode
// Size: 0x48 (Inherited: 0x28)
struct USoundNode : UObject 
{
	struct TArray<None>                           ChildNodes;                                                  // 0x28(0x10)
	char                                          UnknownData38[0x10];                                         // 0x38(0x10)
};

// Class Engine.SoundNodeAssetReferencer
// Size: 0x48 (Inherited: 0x48)
struct USoundNodeAssetReferencer : USoundNode 
{
};

// Class Engine.SoundNodeAttenuation
// Size: 0x3f8 (Inherited: 0x48)
struct USoundNodeAttenuation : USoundNode 
{
	struct FNone*                                 AttenuationSettings;                                         // 0x48(0x08)
	struct FNone                                  AttenuationOverrides;                                        // 0x50(0x3a0)
	char                                          bOverrideAttenuation : 0;                                    // 0x3f0(0x01)
	char                                          UnknownData3F0[0x8];                                         // 0x3f0(0x08)
};

// Class Engine.SoundNodeBranch
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeBranch : USoundNode 
{
	struct FName                                  BoolParameterName;                                           // 0x48(0x08)
};

// Class Engine.SoundNodeConcatenator
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeConcatenator : USoundNode 
{
	struct TArray<None>                           InputVolume;                                                 // 0x48(0x10)
};

// Class Engine.SoundNodeDelay
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeDelay : USoundNode 
{
	float                                         DelayMin;                                                    // 0x48(0x04)
	float                                         DelayMax;                                                    // 0x4c(0x04)
};

// Class Engine.SoundNodeDialoguePlayer
// Size: 0x70 (Inherited: 0x48)
struct USoundNodeDialoguePlayer : USoundNode 
{
	struct FNone                                  DialogueWaveParameter;                                       // 0x48(0x20)
	char                                          bLooping : 0;                                                // 0x68(0x01)
	char                                          UnknownData68[0x8];                                          // 0x68(0x08)
};

// Class Engine.SoundNodeDistanceCrossFade
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeDistanceCrossFade : USoundNode 
{
	struct TArray<None>                           CrossFadeInput;                                              // 0x48(0x10)
};

// Class Engine.SoundNodeDoppler
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeDoppler : USoundNode 
{
	float                                         DopplerIntensity;                                            // 0x48(0x04)
	char                                          bUseSmoothing : 0;                                           // 0x4c(0x01)
	char                                          UnknownData4C[0x4];                                          // 0x4c(0x04)
	float                                         SmoothingInterpSpeed;                                        // 0x50(0x04)
	char                                          UnknownData54[0x4];                                          // 0x54(0x04)
};

// Class Engine.SoundNodeEnveloper
// Size: 0x190 (Inherited: 0x48)
struct USoundNodeEnveloper : USoundNode 
{
	float                                         LoopStart;                                                   // 0x48(0x04)
	float                                         LoopEnd;                                                     // 0x4c(0x04)
	float                                         DurationAfterLoop;                                           // 0x50(0x04)
	uint32_t                                      LoopCount;                                                   // 0x54(0x04)
	char                                          bLoopIndefinitely : 0;                                       // 0x58(0x01)
	char                                          bLoop : 0;                                                   // 0x58(0x01)
	char                                          UnknownData58[0x8];                                          // 0x58(0x08)
	struct FNone*                                 VolumeInterpCurve;                                           // 0x60(0x08)
	struct FNone*                                 PitchInterpCurve;                                            // 0x68(0x08)
	struct FNone                                  VolumeCurve;                                                 // 0x70(0x88)
	struct FNone                                  PitchCurve;                                                  // 0xf8(0x88)
	float                                         PitchMin;                                                    // 0x180(0x04)
	float                                         PitchMax;                                                    // 0x184(0x04)
	float                                         VolumeMin;                                                   // 0x188(0x04)
	float                                         VolumeMax;                                                   // 0x18c(0x04)
};

// Class Engine.SoundNodeGroupControl
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeGroupControl : USoundNode 
{
	struct TArray<None>                           GroupSizes;                                                  // 0x48(0x10)
};

// Class Engine.SoundNodeLooping
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeLooping : USoundNode 
{
	uint32_t                                      LoopCount;                                                   // 0x48(0x04)
	char                                          bLoopIndefinitely : 0;                                       // 0x4c(0x01)
	char                                          UnknownData4C[0x4];                                          // 0x4c(0x04)
};

// Class Engine.SoundNodeMature
// Size: 0x48 (Inherited: 0x48)
struct USoundNodeMature : USoundNode 
{
};

// Class Engine.SoundNodeMixer
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeMixer : USoundNode 
{
	struct TArray<None>                           InputVolume;                                                 // 0x48(0x10)
};

// Class Engine.SoundNodeModulator
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeModulator : USoundNode 
{
	float                                         PitchMin;                                                    // 0x48(0x04)
	float                                         PitchMax;                                                    // 0x4c(0x04)
	float                                         VolumeMin;                                                   // 0x50(0x04)
	float                                         VolumeMax;                                                   // 0x54(0x04)
};

// Class Engine.SoundNodeModulatorContinuous
// Size: 0x88 (Inherited: 0x48)
struct USoundNodeModulatorContinuous : USoundNode 
{
	struct FNone                                  PitchModulationParams;                                       // 0x48(0x20)
	struct FNone                                  VolumeModulationParams;                                      // 0x68(0x20)
};

// Class Engine.SoundNodeOscillator
// Size: 0x70 (Inherited: 0x48)
struct USoundNodeOscillator : USoundNode 
{
	char                                          bModulateVolume : 0;                                         // 0x48(0x01)
	char                                          bModulatePitch : 0;                                          // 0x48(0x01)
	char                                          UnknownData48[0x4];                                          // 0x48(0x04)
	float                                         AmplitudeMin;                                                // 0x4c(0x04)
	float                                         AmplitudeMax;                                                // 0x50(0x04)
	float                                         FrequencyMin;                                                // 0x54(0x04)
	float                                         FrequencyMax;                                                // 0x58(0x04)
	float                                         OffsetMin;                                                   // 0x5c(0x04)
	float                                         OffsetMax;                                                   // 0x60(0x04)
	float                                         CenterMin;                                                   // 0x64(0x04)
	float                                         CenterMax;                                                   // 0x68(0x04)
	char                                          UnknownData6C[0x4];                                          // 0x6c(0x04)
};

// Class Engine.SoundNodeParamCrossFade
// Size: 0x60 (Inherited: 0x58)
struct USoundNodeParamCrossFade : USoundNodeDistanceCrossFade 
{
	struct FName                                  ParamName;                                                   // 0x58(0x08)
};

// Class Engine.SoundNodeQualityLevel
// Size: 0x48 (Inherited: 0x48)
struct USoundNodeQualityLevel : USoundNode 
{
};

// Class Engine.SoundNodeRandom
// Size: 0x78 (Inherited: 0x48)
struct USoundNodeRandom : USoundNode 
{
	struct TArray<None>                           Weights;                                                     // 0x48(0x10)
	struct TArray<None>                           HasBeenUsed;                                                 // 0x58(0x10)
	uint32_t                                      NumRandomUsed;                                               // 0x68(0x04)
	uint32_t                                      PreselectAtLevelLoad;                                        // 0x6c(0x04)
	char                                          bShouldExcludeFromBranchCulling : 0;                         // 0x70(0x01)
	char                                          bSoundCueExcludedFromBranchCulling : 0;                      // 0x70(0x01)
	char                                          bRandomizeWithoutReplacement : 0;                            // 0x70(0x01)
	char                                          UnknownData70[0x8];                                          // 0x70(0x08)
};

// Class Engine.SoundNodeSoundClass
// Size: 0x58 (Inherited: 0x48)
struct USoundNodeSoundClass : USoundNode 
{
	struct FNone*                                 SoundClassOverride;                                          // 0x48(0x08)
	char                                          UnknownData50[0x8];                                          // 0x50(0x08)
};

// Class Engine.SoundNodeSwitch
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeSwitch : USoundNode 
{
	struct FName                                  IntParameterName;                                            // 0x48(0x08)
};

// Class Engine.SoundNodeWaveParam
// Size: 0x50 (Inherited: 0x48)
struct USoundNodeWaveParam : USoundNode 
{
	struct FName                                  WaveParameterName;                                           // 0x48(0x08)
};

// Class Engine.SoundNodeWavePlayer
// Size: 0x80 (Inherited: 0x48)
struct USoundNodeWavePlayer : USoundNodeAssetReferencer 
{
	struct TSoftObjectPtr<FNone>                  SoundWaveAssetPtr;                                           // 0x48(0x28)
	struct FNone*                                 SoundWave;                                                   // 0x70(0x08)
	char                                          bLooping : 0;                                                // 0x78(0x01)
	char                                          UnknownData78[0x8];                                          // 0x78(0x08)
};

// Class Engine.SoundSourceBus
// Size: 0x320 (Inherited: 0x308)
struct USoundSourceBus : USoundWave 
{
	enum class None                               SourceBusChannels;                                           // 0x308(0x01)
	char                                          UnknownData309[0x3];                                         // 0x309(0x03)
	float                                         SourceBusDuration;                                           // 0x30c(0x04)
	char                                          bAutoDeactivateWhenSilent : 0;                               // 0x310(0x01)
	char                                          UnknownData310[0x10];                                        // 0x310(0x10)
};

// Class Engine.SoundSubmixBase
// Size: 0x38 (Inherited: 0x28)
struct USoundSubmixBase : UObject 
{
	struct TArray<None>                           ChildSubmixes;                                               // 0x28(0x10)
};

// Class Engine.SoundSubmixWithParentBase
// Size: 0x40 (Inherited: 0x38)
struct USoundSubmixWithParentBase : USoundSubmixBase 
{
	struct FNone*                                 ParentSubmix;                                                // 0x38(0x08)
};

// Class Engine.SoundSubmix
// Size: 0x88 (Inherited: 0x40)
struct USoundSubmix : USoundSubmixWithParentBase 
{
	char                                          bMuteWhenBackgrounded : 0;                                   // 0x40(0x01)
	char                                          UnknownData40[0x8];                                          // 0x40(0x08)
	struct TArray<None>                           SubmixEffectChain;                                           // 0x48(0x10)
	struct FNone*                                 AmbisonicsPluginSettings;                                    // 0x58(0x08)
	uint32_t                                      EnvelopeFollowerAttackTime;                                  // 0x60(0x04)
	uint32_t                                      EnvelopeFollowerReleaseTime;                                 // 0x64(0x04)
	float                                         OutputVolume;                                                // 0x68(0x04)
	char                                          UnknownData6C[0x4];                                          // 0x6c(0x04)
	struct FMulticastInlineDelegate               OnSubmixRecordedFileDone;                                    // 0x70(0x10)
	char                                          UnknownData80[0x8];                                          // 0x80(0x08)

	void StopRecordingOutput(struct FNone* WorldContextObject, enum class None ExportType, struct FString Name, struct FString Path, struct FNone* ExistingSoundWaveToOverwrite); // sub_0x3deca70
	void StopEnvelopeFollowing(struct FNone* WorldContextObject); // sub_0x3dec9f0
	void StartRecordingOutput(struct FNone* WorldContextObject, float ExpectedDuration); // sub_0x3dec920
	void StartEnvelopeFollowing(struct FNone* WorldContextObject); // sub_0x3dec8a0
	void SetSubmixOutputVolume(struct FNone* WorldContextObject, float InOutputVolume); // sub_0x3dec7d0
	void AddEnvelopeFollowerDelegate(struct FNone* WorldContextObject, struct FDelegate& OnSubmixEnvelopeBP); // sub_0x3dec6e0
};

// Class Engine.SoundfieldSubmix
// Size: 0x68 (Inherited: 0x40)
struct USoundfieldSubmix : USoundSubmixWithParentBase 
{
	struct FName                                  SoundfieldEncodingFormat;                                    // 0x40(0x08)
	struct FNone*                                 EncodingSettings;                                            // 0x48(0x08)
	struct TArray<None>                           SoundfieldEffectChain;                                       // 0x50(0x10)
	struct FNone*                                 EncodingSettingsClass;                                       // 0x60(0x08)
};

// Class Engine.EndpointSubmix
// Size: 0x50 (Inherited: 0x38)
struct UEndpointSubmix : USoundSubmixBase 
{
	struct FName                                  EndpointType;                                                // 0x38(0x08)
	struct FNone*                                 EndpointSettingsClass;                                       // 0x40(0x08)
	struct FNone*                                 EndpointSettings;                                            // 0x48(0x08)
};

// Class Engine.SoundfieldEndpointSubmix
// Size: 0x70 (Inherited: 0x38)
struct USoundfieldEndpointSubmix : USoundSubmixBase 
{
	struct FName                                  SoundfieldEndpointType;                                      // 0x38(0x08)
	struct FNone*                                 EndpointSettingsClass;                                       // 0x40(0x08)
	struct FNone*                                 EndpointSettings;                                            // 0x48(0x08)
	struct FNone*                                 EncodingSettingsClass;                                       // 0x50(0x08)
	struct FNone*                                 EncodingSettings;                                            // 0x58(0x08)
	struct TArray<None>                           SoundfieldEffectChain;                                       // 0x60(0x10)
};

// Class Engine.SpectatorPawnMovement
// Size: 0x158 (Inherited: 0x150)
struct USpectatorPawnMovement : UFloatingPawnMovement 
{
	char                                          bIgnoreTimeDilation : 0;                                     // 0x150(0x01)
	char                                          UnknownData150[0x8];                                         // 0x150(0x08)
};

// Class Engine.SphereReflectionCapture
// Size: 0x320 (Inherited: 0x318)
struct ASphereReflectionCapture : AReflectionCapture 
{
	struct FNone*                                 DrawCaptureRadius;                                           // 0x318(0x08)
};

// Class Engine.SphereReflectionCaptureComponent
// Size: 0x2d0 (Inherited: 0x2c0)
struct USphereReflectionCaptureComponent : UReflectionCaptureComponent 
{
	float                                         InfluenceRadius;                                             // 0x2c0(0x04)
	float                                         CaptureDistanceScale;                                        // 0x2c4(0x04)
	struct FNone*                                 PreviewInfluenceRadius;                                      // 0x2c8(0x08)
};

// Class Engine.SplineMetadata
// Size: 0x28 (Inherited: 0x28)
struct USplineMetadata : UObject 
{
};

// Class Engine.SplineMeshActor
// Size: 0x318 (Inherited: 0x310)
struct ASplineMeshActor : AActor 
{
	struct FNone*                                 SplineMeshComponent;                                         // 0x310(0x08)
};

// Class Engine.SplineMeshComponent
// Size: 0x5f0 (Inherited: 0x550)
struct USplineMeshComponent : UStaticMeshComponent 
{
	char                                          UnknownData550[0x8];                                         // 0x550(0x08)
	struct FNone                                  SplineParams;                                                // 0x558(0x58)
	struct FNone                                  SplineUpDir;                                                 // 0x5b0(0x0c)
	float                                         SplineBoundaryMin;                                           // 0x5bc(0x04)
	struct FNone                                  CachedMeshBodySetupGuid;                                     // 0x5c0(0x10)
	struct FNone*                                 BodySetup;                                                   // 0x5d0(0x08)
	float                                         SplineBoundaryMax;                                           // 0x5d8(0x04)
	char                                          bAllowSplineEditingPerInstance : 0;                          // 0x5dc(0x01)
	char                                          bSmoothInterpRollScale : 0;                                  // 0x5dc(0x01)
	char                                          bMeshDirty : 0;                                              // 0x5dc(0x01)
	char                                          UnknownData5DC[0x1];                                         // 0x5dc(0x01)
	char                                          ForwardAxis;                                                 // 0x5dd(0x01)
	char                                          UnknownData5DE[0x2];                                         // 0x5de(0x02)
	float                                         VirtualTextureMainPassMaxDrawDistance;                       // 0x5e0(0x04)
	char                                          UnknownData5E4[0xc];                                         // 0x5e4(0x0c)

	void UpdateMesh(); // sub_0x3df9a20
	void SetStartTangent(struct FNone StartTangent, char bUpdateMesh); // sub_0x3df9940
	void SetStartScale(struct FNone StartScale, char bUpdateMesh); // sub_0x3df9880
	void SetStartRoll(float StartRoll, char bUpdateMesh); // sub_0x3df97b0
	void SetStartPosition(struct FNone StartPos, char bUpdateMesh); // sub_0x3df96d0
	void SetStartOffset(struct FNone StartOffset, char bUpdateMesh); // sub_0x3df9610
	void SetStartAndEnd(struct FNone StartPos, struct FNone StartTangent, struct FNone EndPos, struct FNone EndTangent, char bUpdateMesh); // sub_0x3df9450
	void SetSplineUpDir(struct FNone& InSplineUpDir, char bUpdateMesh); // sub_0x3df9370
	void SetForwardAxis(char InForwardAxis, char bUpdateMesh); // sub_0x3df90a0
	void SetEndTangent(struct FNone EndTangent, char bUpdateMesh); // sub_0x3df8fc0
	void SetEndScale(struct FNone EndScale, char bUpdateMesh); // sub_0x3df8f00
	void SetEndRoll(float EndRoll, char bUpdateMesh); // sub_0x3df8e30
	void SetEndPosition(struct FNone EndPos, char bUpdateMesh); // sub_0x3df8d50
	void SetEndOffset(struct FNone EndOffset, char bUpdateMesh); // sub_0x3df8c90
	void SetBoundaryMin(float InBoundaryMin, char bUpdateMesh); // sub_0x3df8bc0
	void SetBoundaryMax(float InBoundaryMax, char bUpdateMesh); // sub_0x3df8af0
	struct FNone GetStartTangent(); // sub_0x3df8a00
	struct FNone GetStartScale(); // sub_0x3df89c0
	float GetStartRoll(); // sub_0x3df8990
	struct FNone GetStartPosition(); // sub_0x3df8950
	struct FNone GetStartOffset(); // sub_0x3df8910
	struct FNone GetSplineUpDir(); // sub_0x3df88d0
	char GetForwardAxis(); // sub_0x3df8410
	struct FNone GetEndTangent(); // sub_0x3df83d0
	struct FNone GetEndScale(); // sub_0x3df8390
	float GetEndRoll(); // sub_0x3df8360
	struct FNone GetEndPosition(); // sub_0x3df8320
	struct FNone GetEndOffset(); // sub_0x3df82e0
	float GetBoundaryMin(); // sub_0x3df8210
	float GetBoundaryMax(); // sub_0x3df81e0
};

// Class Engine.SpotLightComponent
// Size: 0x3d0 (Inherited: 0x3b0)
struct USpotLightComponent : UPointLightComponent 
{
	float                                         InnerConeAngle;                                              // 0x3b0(0x04)
	float                                         OuterConeAngle;                                              // 0x3b4(0x04)
	float                                         LightShaftConeAngle;                                         // 0x3b8(0x04)
	char                                          bUsePCSS : 0;                                                // 0x3bc(0x01)
	char                                          UnknownData3BC[0x4];                                         // 0x3bc(0x04)
	float                                         PCSSSharpness;                                               // 0x3c0(0x04)
	float                                         PCSSContrast;                                                // 0x3c4(0x04)
	char                                          UnknownData3C8[0x8];                                         // 0x3c8(0x08)

	void SetOuterConeAngle(float NewOuterConeAngle); // sub_0x3df92f0
	void SetInnerConeAngle(float NewInnerConeAngle); // sub_0x3df91f0
};

// Class Engine.SpringArmComponent
// Size: 0x2c0 (Inherited: 0x240)
struct USpringArmComponent : USceneComponent 
{
	float                                         TargetArmLength;                                             // 0x238(0x04)
	struct FNone                                  SocketOffset;                                                // 0x23c(0x0c)
	struct FNone                                  TargetOffset;                                                // 0x248(0x0c)
	float                                         ProbeSize;                                                   // 0x254(0x04)
	char                                          ProbeChannel;                                                // 0x258(0x01)
	char                                          bDoCollisionTest : 0;                                        // 0x25c(0x01)
	char                                          bUsePawnControlRotation : 0;                                 // 0x25c(0x01)
	char                                          bInheritPitch : 0;                                           // 0x25c(0x01)
	char                                          bInheritYaw : 0;                                             // 0x25c(0x01)
	char                                          bInheritRoll : 0;                                            // 0x25c(0x01)
	char                                          bEnableCameraLag : 0;                                        // 0x25c(0x01)
	char                                          bEnableCameraRotationLag : 0;                                // 0x25c(0x01)
	char                                          bUseCameraLagSubstepping : 0;                                // 0x25c(0x01)
	char                                          bDrawDebugLagMarkers : 0;                                    // 0x25d(0x01)
	float                                         CameraLagSpeed;                                              // 0x260(0x04)
	float                                         CameraRotationLagSpeed;                                      // 0x264(0x04)
	float                                         CameraLagMaxTimeStep;                                        // 0x268(0x04)
	float                                         CameraLagMaxDistance;                                        // 0x26c(0x04)
	char                                          UnknownData271[0x4f];                                        // 0x271(0x4f)

	char IsCollisionFixApplied(); // sub_0x3df8ac0
	struct FNone GetUnfixedCameraPosition(); // sub_0x3df8a80
	struct FNone GetTargetRotation(); // sub_0x3df8a40
};

// Class Engine.StaticMesh
// Size: 0x158 (Inherited: 0x40)
struct UStaticMesh : UStreamableRenderAsset 
{
	char                                          UnknownData40[0x20];                                         // 0x40(0x20)
	char                                          bUseAsOccluderForSoftwareOcclusion : 0;                      // 0x60(0x01)
	char                                          UnknownData60[0x4];                                          // 0x60(0x04)
	struct FName                                  LODGroup;                                                    // 0x64(0x08)
	struct FName                                  MeshStreamingGroup;                                          // 0x6c(0x08)
	char                                          UnknownData74[0xc];                                          // 0x74(0x0c)
	struct FNone                                  MinLOD;                                                      // 0x80(0x04)
	float                                         LpvBiasMultiplier;                                           // 0x84(0x04)
	struct TArray<None>                           StaticMaterials;                                             // 0x88(0x10)
	float                                         LightmapUVDensity;                                           // 0x98(0x04)
	uint32_t                                      LightMapResolution;                                          // 0x9c(0x04)
	uint32_t                                      LightMapCoordinateIndex;                                     // 0xa0(0x04)
	float                                         DistanceFieldSelfShadowBias;                                 // 0xa4(0x04)
	struct FNone*                                 BodySetup;                                                   // 0xa8(0x08)
	uint32_t                                      LODForCollision;                                             // 0xb0(0x04)
	char                                          bGenerateMeshDistanceField : 0;                              // 0xb4(0x01)
	char                                          bStripComplexCollisionForConsole : 0;                        // 0xb4(0x01)
	char                                          bHasNavigationData : 0;                                      // 0xb4(0x01)
	char                                          bSupportUniformlyDistributedSampling : 0;                    // 0xb4(0x01)
	char                                          bSupportPhysicalMaterialMasks : 0;                           // 0xb4(0x01)
	char                                          bIsBuiltAtRuntime : 0;                                       // 0xb4(0x01)
	char                                          bAllowCPUAccess : 0;                                         // 0xb4(0x01)
	char                                          UnknownDataB4[0x1];                                          // 0xb4(0x01)
	char                                          bSupportGpuUniformlyDistributedSampling : 0;                 // 0xb5(0x01)
	char                                          UnknownDataB5[0x23];                                         // 0xb5(0x23)
	struct TArray<None>                           Sockets;                                                     // 0xd8(0x10)
	char                                          UnknownDataE8[0x10];                                         // 0xe8(0x10)
	struct FNone                                  PositiveBoundsExtension;                                     // 0xf8(0x0c)
	struct FNone                                  NegativeBoundsExtension;                                     // 0x104(0x0c)
	struct FNone                                  ExtendedBounds;                                              // 0x110(0x1c)
	uint32_t                                      ElementToIgnoreForTexFactor;                                 // 0x12c(0x04)
	struct TArray<None>                           AssetUserData;                                               // 0x130(0x10)
	char                                          UnknownData140[0x8];                                         // 0x140(0x08)
	struct FNone*                                 EditableMesh;                                                // 0x148(0x08)
	struct FNone*                                 NavCollision;                                                // 0x150(0x08)

	void RemoveSocket(struct FNone* Socket); // sub_0x1f71b00
	uint32_t GetNumTriangles(uint32_t LODIndex); // sub_0x3df8840
	uint32_t GetNumSections(uint32_t InLOD); // sub_0x3df87b0
	uint32_t GetNumMaterial(); // sub_0x3df8790
	uint32_t GetNumLODs(); // sub_0x3df8760
	void GetMinimumLODForPlatforms(struct TMap<None, None>& PlatformMinimumLODs); // sub_0x3df85e0
	uint32_t GetMinimumLODForPlatform(struct FName& PlatformName); // sub_0x3df8560
	uint32_t GetMaterialIndex(struct FName MaterialSlotName); // sub_0x3df84d0
	struct FNone* GetMaterial(uint32_t MaterialIndex); // sub_0x3df8440
	struct FNone GetBounds(); // sub_0x3df8290
	struct FNone GetBoundingBox(); // sub_0x3df8240
	struct FNone* FindSocket(struct FName InSocketName); // sub_0x3df8150
	struct FNone* CreateStaticMeshDescription(struct FNone* Outer); // sub_0x3df80d0
	void BuildFromStaticMeshDescriptions(struct TArray<None>& StaticMeshDescriptions, char bBuildSimpleCollision); // sub_0x3df7fd0
	void AddSocket(struct FNone* Socket); // sub_0x1f71a80
	struct FName AddMaterial(struct FNone* Material); // sub_0x3df7f40
};

// Class Engine.StaticMeshSocket
// Size: 0x68 (Inherited: 0x28)
struct UStaticMeshSocket : UObject 
{
	struct FName                                  SocketName;                                                  // 0x28(0x08)
	struct FNone                                  RelativeLocation;                                            // 0x30(0x0c)
	struct FNone                                  RelativeRotation;                                            // 0x3c(0x0c)
	struct FNone                                  RelativeScale;                                               // 0x48(0x0c)
	char                                          UnknownData54[0x4];                                          // 0x54(0x04)
	struct FString                                Tag;                                                         // 0x58(0x10)
};

// Class Engine.StereoLayerComponent
// Size: 0x320 (Inherited: 0x240)
struct UStereoLayerComponent : USceneComponent 
{
	char                                          bLiveTexture : 0;                                            // 0x238(0x01)
	char                                          bSupportsDepth : 0;                                          // 0x238(0x01)
	char                                          bNoAlphaChannel : 0;                                         // 0x238(0x01)
	struct FNone*                                 Texture;                                                     // 0x240(0x08)
	struct FNone*                                 LeftTexture;                                                 // 0x248(0x08)
	char                                          bQuadPreserveTextureRatio : 0;                               // 0x250(0x01)
	char                                          UnknownData250[0x4];                                         // 0x250(0x04)
	struct FNone                                  QuadSize;                                                    // 0x254(0x08)
	struct FNone                                  UVRect;                                                      // 0x25c(0x14)
	float                                         CylinderRadius;                                              // 0x270(0x04)
	float                                         CylinderOverlayArc;                                          // 0x274(0x04)
	uint32_t                                      CylinderHeight;                                              // 0x278(0x04)
	struct FNone                                  EquirectProps;                                               // 0x27c(0x48)
	char                                          StereoLayerType;                                             // 0x2c4(0x01)
	char                                          StereoLayerShape;                                            // 0x2c5(0x01)
	char                                          UnknownData2C6[0x2];                                         // 0x2c6(0x02)
	struct FNone*                                 Shape;                                                       // 0x2c8(0x08)
	uint32_t                                      Priority;                                                    // 0x2d0(0x04)
	char                                          UnknownData2D4[0x4c];                                        // 0x2d4(0x4c)

	void SetUVRect(struct FNone InUVRect); // sub_0x3dfe5c0
	void SetTexture(struct FNone* InTexture); // sub_0x3dfe540
	void SetQuadSize(struct FNone InQuadSize); // sub_0x3dfe210
	void SetPriority(uint32_t InPriority); // sub_0x3dfe190
	void SetLeftTexture(struct FNone* InTexture); // sub_0x3dfe090
	void SetEquirectProps(struct FNone InScaleBiases); // sub_0x3dfdd90
	void MarkTextureForUpdate(); // sub_0x3dfdc70
	struct FNone GetUVRect(); // sub_0x3dfdc40
	struct FNone* GetTexture(); // sub_0x3dfdc20
	struct FNone GetQuadSize(); // sub_0x3dfdbf0
	uint32_t GetPriority(); // sub_0x3dfdbd0
	struct FNone* GetLeftTexture(); // sub_0x3dfdad0
};

// Class Engine.StereoLayerShape
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerShape : UObject 
{
};

// Class Engine.StereoLayerShapeQuad
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerShapeQuad : UStereoLayerShape 
{
};

// Class Engine.StereoLayerShapeCylinder
// Size: 0x38 (Inherited: 0x28)
struct UStereoLayerShapeCylinder : UStereoLayerShape 
{
	float                                         Radius;                                                      // 0x28(0x04)
	float                                         OverlayArc;                                                  // 0x2c(0x04)
	uint32_t                                      Height;                                                      // 0x30(0x04)
	char                                          UnknownData34[0x4];                                          // 0x34(0x04)

	void SetRadius(float InRadius); // sub_0x3dfe290
	void SetOverlayArc(float InOverlayArc); // sub_0x3dfe110
	void SetHeight(uint32_t InHeight); // sub_0x3dfe010
};

// Class Engine.StereoLayerShapeCubemap
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerShapeCubemap : UStereoLayerShape 
{
};

// Class Engine.StereoLayerShapeEquirect
// Size: 0x70 (Inherited: 0x28)
struct UStereoLayerShapeEquirect : UStereoLayerShape 
{
	struct FNone                                  LeftUVRect;                                                  // 0x28(0x14)
	struct FNone                                  RightUVRect;                                                 // 0x3c(0x14)
	struct FNone                                  LeftScale;                                                   // 0x50(0x08)
	struct FNone                                  RightScale;                                                  // 0x58(0x08)
	struct FNone                                  LeftBias;                                                    // 0x60(0x08)
	struct FNone                                  RightBias;                                                   // 0x68(0x08)

	void SetEquirectProps(struct FNone InScaleBiases); // sub_0x3dfde90
};

// Class Engine.StereoLayerFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UStereoLayerFunctionLibrary : UBlueprintFunctionLibrary 
{

	void ShowSplashScreen(); // sub_0x2efec60
	void SetSplashScreen(struct FNone* Texture, struct FNone Scale, struct FNone Offset, char bShowLoadingMovie, char bShowOnSet); // sub_0x3dfe3a0
	void HideSplashScreen(); // sub_0x2efdd70
	void EnableAutoLoadingSplashScreen(char InAutoShowEnabled); // sub_0x3dfda50
};

// Class Engine.StringTable
// Size: 0x40 (Inherited: 0x28)
struct UStringTable : UObject 
{
	char                                          UnknownData28[0x18];                                         // 0x28(0x18)
};

// Class Engine.SubsurfaceProfile
// Size: 0xb8 (Inherited: 0x28)
struct USubsurfaceProfile : UObject 
{
	struct FNone                                  Settings;                                                    // 0x28(0x8c)
	char                                          UnknownDataB4[0x4];                                          // 0xb4(0x04)
};

// Class Engine.SubsystemBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct USubsystemBlueprintLibrary : UBlueprintFunctionLibrary 
{

	struct FNone* GetWorldSubsystem(struct FNone* ContextObject, struct FNone* Class); // sub_0x3e02480
	struct FNone* GetLocalPlayerSubSystemFromPlayerController(struct FNone* PlayerController, struct FNone* Class); // sub_0x3e02280
	struct FNone* GetLocalPlayerSubsystem(struct FNone* ContextObject, struct FNone* Class); // sub_0x3e02340
	struct FNone* GetGameInstanceSubsystem(struct FNone* ContextObject, struct FNone* Class); // sub_0x3e021c0
	struct FNone* GetEngineSubsystem(struct FNone* Class); // sub_0x3e02140
};

// Class Engine.SubUVAnimation
// Size: 0x68 (Inherited: 0x28)
struct USubUVAnimation : UObject 
{
	struct FNone*                                 SubUVTexture;                                                // 0x28(0x08)
	uint32_t                                      SubImages_Horizontal;                                        // 0x30(0x04)
	uint32_t                                      SubImages_Vertical;                                          // 0x34(0x04)
	char                                          BoundingMode;                                                // 0x38(0x01)
	char                                          OpacitySourceMode;                                           // 0x39(0x01)
	char                                          UnknownData3A[0x2];                                          // 0x3a(0x02)
	float                                         AlphaThreshold;                                              // 0x3c(0x04)
	char                                          UnknownData40[0x28];                                         // 0x40(0x28)
};

// Class Engine.TimecodeProvider
// Size: 0x30 (Inherited: 0x28)
struct UTimecodeProvider : UObject 
{
	float                                         FrameDelay;                                                  // 0x28(0x04)
	char                                          UnknownData2C[0x4];                                          // 0x2c(0x04)

	struct FNone GetTimecode(); // sub_0x3e06680
	enum class None GetSynchronizationState(); // sub_0x3e06650
	struct FNone GetQualifiedFrameTime(); // sub_0x3e06610
	struct FNone GetFrameRate(); // sub_0x3e06540
	struct FNone GetDelayedTimecode(); // sub_0x3e06500
	struct FNone GetDelayedQualifiedFrameTime(); // sub_0x3e064c0
};

// Class Engine.SystemTimeTimecodeProvider
// Size: 0x40 (Inherited: 0x30)
struct USystemTimeTimecodeProvider : UTimecodeProvider 
{
	struct FNone                                  FrameRate;                                                   // 0x30(0x08)
	char                                          bGenerateFullFrame : 0;                                      // 0x38(0x01)
	char                                          UnknownData38[0x1];                                          // 0x38(0x01)
	char                                          bUseHighPerformanceClock : 0;                                // 0x39(0x01)
	char                                          UnknownData39[0x7];                                          // 0x39(0x07)
};

// Class Engine.TextPropertyTestObject
// Size: 0x70 (Inherited: 0x28)
struct UTextPropertyTestObject : UObject 
{
	struct FText                                  DefaultedText;                                               // 0x28(0x18)
	struct FText                                  UndefaultedText;                                             // 0x40(0x18)
	struct FText                                  TransientText;                                               // 0x58(0x18)
};

// Class Engine.TextRenderActor
// Size: 0x318 (Inherited: 0x310)
struct ATextRenderActor : AActor 
{
	struct FNone*                                 TextRender;                                                  // 0x310(0x08)
};

// Class Engine.TextRenderComponent
// Size: 0x510 (Inherited: 0x4c0)
struct UTextRenderComponent : UPrimitiveComponent 
{
	struct FText                                  Text;                                                        // 0x4b8(0x18)
	struct FNone*                                 TextMaterial;                                                // 0x4d0(0x08)
	struct FNone*                                 Font;                                                        // 0x4d8(0x08)
	char                                          HorizontalAlignment;                                         // 0x4e0(0x01)
	char                                          VerticalAlignment;                                           // 0x4e1(0x01)
	struct FNone                                  TextRenderColor;                                             // 0x4e4(0x04)
	float                                         XScale;                                                      // 0x4e8(0x04)
	float                                         YScale;                                                      // 0x4ec(0x04)
	float                                         WorldSize;                                                   // 0x4f0(0x04)
	float                                         InvDefaultSize;                                              // 0x4f4(0x04)
	float                                         HorizSpacingAdjust;                                          // 0x4f8(0x04)
	float                                         VertSpacingAdjust;                                           // 0x4fc(0x04)
	char                                          bAlwaysRenderAsText : 0;                                     // 0x500(0x01)
	char                                          UnknownData506[0xa];                                         // 0x506(0x0a)

	void SetYScale(float Value); // sub_0x3e02b20
	void SetXScale(float Value); // sub_0x3e02aa0
	void SetWorldSize(float Value); // sub_0x3e02a20
	void SetVertSpacingAdjust(float Value); // sub_0x3e02920
	void SetVerticalAlignment(char Value); // sub_0x3e029a0
	void SetTextRenderColor(struct FNone Value); // sub_0x3e028b0
	void SetTextMaterial(struct FNone* Material); // sub_0x3e02830
	void SetText(struct FString Value); // sub_0x3e02790
	void SetHorizSpacingAdjust(float Value); // sub_0x3e02690
	void SetHorizontalAlignment(char Value); // sub_0x3e02710
	void SetFont(struct FNone* Value); // sub_0x3e02610
	void K2_SetText(struct FText& Value); // sub_0x3e02540
	struct FNone GetTextWorldSize(); // sub_0x3e02440
	struct FNone GetTextLocalSize(); // sub_0x3e02400
};

// Class Engine.Texture2DArray
// Size: 0x110 (Inherited: 0xb8)
struct UTexture2DArray : UTexture 
{
	char                                          UnknownDataB8[0x58];                                         // 0xb8(0x58)
};

// Class Engine.TextureLightProfile
// Size: 0xf0 (Inherited: 0xe8)
struct UTextureLightProfile : UTexture2D 
{
	float                                         Brightness;                                                  // 0xe8(0x04)
	float                                         TextureMultiplier;                                           // 0xec(0x04)
};

// Class Engine.TextureMipDataProviderFactory
// Size: 0x28 (Inherited: 0x28)
struct UTextureMipDataProviderFactory : UAssetUserData 
{
};

// Class Engine.TextureRenderTargetCube
// Size: 0xd8 (Inherited: 0xc0)
struct UTextureRenderTargetCube : UTextureRenderTarget 
{
	uint32_t                                      SizeX;                                                       // 0xc0(0x04)
	struct FNone                                  ClearColor;                                                  // 0xc4(0x10)
	char                                          OverrideFormat;                                              // 0xd4(0x01)
	char                                          bHDR : 0;                                                    // 0xd5(0x01)
	char                                          bForceLinearGamma : 0;                                       // 0xd5(0x01)
	char                                          UnknownDataD5[0x3];                                          // 0xd5(0x03)
};

// Class Engine.ThumbnailInfo
// Size: 0x28 (Inherited: 0x28)
struct UThumbnailInfo : UObject 
{
};

// Class Engine.TimelineComponent
// Size: 0x150 (Inherited: 0xb0)
struct UTimelineComponent : UActorComponent 
{
	struct FNone                                  TheTimeline;                                                 // 0xb0(0x98)
	char                                          bIgnoreTimeDilation : 0;                                     // 0x148(0x01)
	char                                          UnknownData148[0x8];                                         // 0x148(0x08)

	void Stop(); // sub_0x3e06e90
	void SetVectorCurve(struct FNone* NewVectorCurve, struct FName VectorTrackName); // sub_0x3e06dd0
	void SetTimelineLengthMode(char NewLengthMode); // sub_0x3e06d50
	void SetTimelineLength(float NewLength); // sub_0x3e06cd0
	void SetPlayRate(float NewRate); // sub_0x3e06b40
	void SetPlaybackPosition(float NewPosition, char bFireEvents, char bFireUpdate); // sub_0x3e06bc0
	void SetNewTime(float NewTime); // sub_0x3e06ac0
	void SetLooping(char bNewLooping); // sub_0x3e06a30
	void SetLinearColorCurve(struct FNone* NewLinearColorCurve, struct FName LinearColorTrackName); // sub_0x3e06970
	void SetIgnoreTimeDilation(char bNewIgnoreTimeDilation); // sub_0x3e068e0
	void SetFloatCurve(struct FNone* NewFloatCurve, struct FName FloatTrackName); // sub_0x3e06820
	void ReverseFromEnd(); // sub_0x3e06800
	void Reverse(); // sub_0x3e067e0
	void PlayFromStart(); // sub_0x3e067c0
	void Play(); // sub_0x3e067a0
	void OnRep_Timeline(); // sub_0x3e06780
	char IsReversing(); // sub_0x3e06750
	char IsPlaying(); // sub_0x3e06720
	char IsLooping(); // sub_0x3e066f0
	float GetTimelineLength(); // sub_0x3e066c0
	float GetPlayRate(); // sub_0x3e065b0
	float GetPlaybackPosition(); // sub_0x3e065e0
	char GetIgnoreTimeDilation(); // sub_0x3e06580
};

// Class Engine.TimelineTemplate
// Size: 0xb0 (Inherited: 0x28)
struct UTimelineTemplate : UObject 
{
	float                                         TimelineLength;                                              // 0x28(0x04)
	char                                          LengthMode;                                                  // 0x2c(0x01)
	char                                          bAutoPlay : 0;                                               // 0x2d(0x01)
	char                                          bLoop : 0;                                                   // 0x2d(0x01)
	char                                          bReplicated : 0;                                             // 0x2d(0x01)
	char                                          bIgnoreTimeDilation : 0;                                     // 0x2d(0x01)
	char                                          UnknownData2D[0x3];                                          // 0x2d(0x03)
	struct TArray<None>                           EventTracks;                                                 // 0x30(0x10)
	struct TArray<None>                           FloatTracks;                                                 // 0x40(0x10)
	struct TArray<None>                           VectorTracks;                                                // 0x50(0x10)
	struct TArray<None>                           LinearColorTracks;                                           // 0x60(0x10)
	struct TArray<None>                           MetaDataArray;                                               // 0x70(0x10)
	struct FNone                                  TimelineGuid;                                                // 0x80(0x10)
	struct FName                                  VariableName;                                                // 0x90(0x08)
	struct FName                                  DirectionPropertyName;                                       // 0x98(0x08)
	struct FName                                  UpdateFunctionName;                                          // 0xa0(0x08)
	struct FName                                  FinishedFunctionName;                                        // 0xa8(0x08)
};

// Class Engine.TireType
// Size: 0x38 (Inherited: 0x30)
struct UTireType : UDataAsset 
{
	float                                         FrictionScale;                                               // 0x30(0x04)
	char                                          UnknownData34[0x4];                                          // 0x34(0x04)
};

// Class Engine.TouchInterface
// Size: 0x58 (Inherited: 0x28)
struct UTouchInterface : UObject 
{
	struct TArray<None>                           Controls;                                                    // 0x28(0x10)
	float                                         ActiveOpacity;                                               // 0x38(0x04)
	float                                         InactiveOpacity;                                             // 0x3c(0x04)
	float                                         TimeUntilDeactive;                                           // 0x40(0x04)
	float                                         TimeUntilReset;                                              // 0x44(0x04)
	float                                         ActivationDelay;                                             // 0x48(0x04)
	char                                          bPreventRecenter : 0;                                        // 0x4c(0x01)
	char                                          UnknownData4C[0x4];                                          // 0x4c(0x04)
	float                                         StartupDelay;                                                // 0x50(0x04)
	char                                          UnknownData54[0x4];                                          // 0x54(0x04)
};

// Class Engine.TriggerBase
// Size: 0x318 (Inherited: 0x310)
struct ATriggerBase : AActor 
{
	struct FNone*                                 CollisionComponent;                                          // 0x310(0x08)
};

// Class Engine.TriggerBox
// Size: 0x318 (Inherited: 0x318)
struct ATriggerBox : ATriggerBase 
{
};

// Class Engine.TriggerCapsule
// Size: 0x318 (Inherited: 0x318)
struct ATriggerCapsule : ATriggerBase 
{
};

// Class Engine.TriggerSphere
// Size: 0x318 (Inherited: 0x318)
struct ATriggerSphere : ATriggerBase 
{
};

// Class Engine.TriggerVolume
// Size: 0x348 (Inherited: 0x348)
struct ATriggerVolume : AVolume 
{
};

// Class Engine.TwitterIntegrationBase
// Size: 0x38 (Inherited: 0x38)
struct UTwitterIntegrationBase : UPlatformInterfaceBase 
{

	char TwitterRequest(struct FString URL, struct TArray<None>& ParamKeysAndValues, char RequestMethod, uint32_t AccountIndex); // sub_0x3e0b300
	char ShowTweetUI(struct FString InitialMessage, struct FString URL, struct FString Picture); // sub_0x3e0b190
	void Init(); // sub_0x2ecb6d0
	uint32_t GetNumAccounts(); // sub_0x3e0b0e0
	struct FString GetAccountName(uint32_t AccountIndex); // sub_0x3e0b000
	char CanShowTweetUI(); // sub_0x2ecb6a0
	char AuthorizeAccounts(); // sub_0x3cdaf20
};

// Class Engine.UserDefinedEnum
// Size: 0xb0 (Inherited: 0x60)
struct UUserDefinedEnum : UEnum 
{
	struct TMap<None, None>                       DisplayNameMap;                                              // 0x60(0x50)
};

// Class Engine.UserDefinedStruct
// Size: 0x108 (Inherited: 0xc0)
struct UUserDefinedStruct : UScriptStruct 
{
	enum class None                               status;                                                      // 0xc0(0x01)
	char                                          UnknownDataC1[0x3];                                          // 0xc1(0x03)
	struct FNone                                  Guid;                                                        // 0xc4(0x10)
	char                                          UnknownDataD4[0x34];                                         // 0xd4(0x34)
};

// Class Engine.UserInterfaceSettings
// Size: 0x268 (Inherited: 0x38)
struct UUserInterfaceSettings : UDeveloperSettings 
{
	enum class None                               RenderFocusRule;                                             // 0x38(0x01)
	char                                          UnknownData39[0x7];                                          // 0x39(0x07)
	struct TMap<None, None>                       HardwareCursors;                                             // 0x40(0x50)
	struct TMap<None, None>                       SoftwareCursors;                                             // 0x90(0x50)
	struct FNone                                  DefaultCursor;                                               // 0xe0(0x18)
	struct FNone                                  TextEditBeamCursor;                                          // 0xf8(0x18)
	struct FNone                                  CrosshairsCursor;                                            // 0x110(0x18)
	struct FNone                                  HandCursor;                                                  // 0x128(0x18)
	struct FNone                                  GrabHandCursor;                                              // 0x140(0x18)
	struct FNone                                  GrabHandClosedCursor;                                        // 0x158(0x18)
	struct FNone                                  SlashedCircleCursor;                                         // 0x170(0x18)
	float                                         ApplicationScale;                                            // 0x188(0x04)
	enum class None                               UIScaleRule;                                                 // 0x18c(0x01)
	char                                          UnknownData18D[0x3];                                         // 0x18d(0x03)
	struct FNone                                  CustomScalingRuleClass;                                      // 0x190(0x18)
	struct FNone                                  UIScaleCurve;                                                // 0x1a8(0x88)
	char                                          bAllowHighDPIInGameMode : 0;                                 // 0x230(0x01)
	char                                          UnknownData230[0x1];                                         // 0x230(0x01)
	char                                          bLoadWidgetsOnDedicatedServer : 0;                           // 0x231(0x01)
	char                                          UnknownData231[0x7];                                         // 0x231(0x07)
	struct TArray<None>                           CursorClasses;                                               // 0x238(0x10)
	struct FNone*                                 CustomScalingRuleClassInstance;                              // 0x248(0x08)
	struct FNone*                                 CustomScalingRule;                                           // 0x250(0x08)
	char                                          UnknownData258[0x10];                                        // 0x258(0x10)
};

// Class Engine.VectorField
// Size: 0x48 (Inherited: 0x28)
struct UVectorField : UObject 
{
	struct FNone                                  Bounds;                                                      // 0x28(0x1c)
	float                                         Intensity;                                                   // 0x44(0x04)
};

// Class Engine.VectorFieldAnimated
// Size: 0x88 (Inherited: 0x48)
struct UVectorFieldAnimated : UVectorField 
{
	struct FNone*                                 Texture;                                                     // 0x48(0x08)
	char                                          ConstructionOp;                                              // 0x50(0x01)
	char                                          UnknownData51[0x3];                                          // 0x51(0x03)
	uint32_t                                      VolumeSizeX;                                                 // 0x54(0x04)
	uint32_t                                      VolumeSizeY;                                                 // 0x58(0x04)
	uint32_t                                      VolumeSizeZ;                                                 // 0x5c(0x04)
	uint32_t                                      SubImagesX;                                                  // 0x60(0x04)
	uint32_t                                      SubImagesY;                                                  // 0x64(0x04)
	uint32_t                                      FrameCount;                                                  // 0x68(0x04)
	float                                         FramesPerSecond;                                             // 0x6c(0x04)
	char                                          bLoop : 0;                                                   // 0x70(0x01)
	char                                          UnknownData70[0x8];                                          // 0x70(0x08)
	struct FNone*                                 NoiseField;                                                  // 0x78(0x08)
	float                                         NoiseScale;                                                  // 0x80(0x04)
	float                                         NoiseMax;                                                    // 0x84(0x04)
};

// Class Engine.VectorFieldComponent
// Size: 0x4e0 (Inherited: 0x4c0)
struct UVectorFieldComponent : UPrimitiveComponent 
{
	struct FNone*                                 VectorField;                                                 // 0x4b8(0x08)
	float                                         Intensity;                                                   // 0x4c0(0x04)
	float                                         Tightness;                                                   // 0x4c4(0x04)
	char                                          bPreviewVectorField : 0;                                     // 0x4c8(0x01)
	char                                          UnknownData4D0[0x10];                                        // 0x4d0(0x10)

	void SetIntensity(float NewIntensity); // sub_0x3e0b110
};

// Class Engine.VectorFieldStatic
// Size: 0x90 (Inherited: 0x48)
struct UVectorFieldStatic : UVectorField 
{
	uint32_t                                      SizeX;                                                       // 0x48(0x04)
	uint32_t                                      SizeY;                                                       // 0x4c(0x04)
	uint32_t                                      SizeZ;                                                       // 0x50(0x04)
	char                                          bAllowCPUAccess : 0;                                         // 0x54(0x01)
	char                                          UnknownData54[0x2c];                                         // 0x54(0x2c)
	struct TArray<None>                           CPUData;                                                     // 0x80(0x10)
};

// Class Engine.VectorFieldVolume
// Size: 0x318 (Inherited: 0x310)
struct AVectorFieldVolume : AActor 
{
	struct FNone*                                 VectorFieldComponent;                                        // 0x310(0x08)
};

// Class Engine.VirtualTexture
// Size: 0x28 (Inherited: 0x28)
struct UVirtualTexture : UObject 
{
};

// Class Engine.LightMapVirtualTexture
// Size: 0x28 (Inherited: 0x28)
struct ULightMapVirtualTexture : UVirtualTexture 
{
};

// Class Engine.LightMapVirtualTexture2D
// Size: 0xf8 (Inherited: 0xe8)
struct ULightMapVirtualTexture2D : UTexture2D 
{
	struct TArray<None>                           TypeToLayer;                                                 // 0xe8(0x10)
};

// Class Engine.VirtualTexturePoolConfig
// Size: 0x40 (Inherited: 0x28)
struct UVirtualTexturePoolConfig : UObject 
{
	uint32_t                                      DefaultSizeInMegabyte;                                       // 0x28(0x04)
	char                                          UnknownData2C[0x4];                                          // 0x2c(0x04)
	struct TArray<None>                           Pools;                                                       // 0x30(0x10)
};

// Class Engine.VisualLoggerAutomationTests
// Size: 0x28 (Inherited: 0x28)
struct UVisualLoggerAutomationTests : UObject 
{
};

// Class Engine.VisualLoggerDebugSnapshotInterface
// Size: 0x28 (Inherited: 0x28)
struct UVisualLoggerDebugSnapshotInterface : UInterface 
{
};

// Class Engine.VisualLoggerKismetLibrary
// Size: 0x28 (Inherited: 0x28)
struct UVisualLoggerKismetLibrary : UBlueprintFunctionLibrary 
{

	void RedirectVislog(struct FNone* SourceOwner, struct FNone* DestinationOwner); // sub_0x3d82d10
	void LogText(struct FNone* WorldContextObject, struct FString Text, struct FName LogCategory, char bAddToMessageLog); // sub_0x3e11ae0
	void LogSegment(struct FNone* WorldContextObject, struct FNone SegmentStart, struct FNone SegmentEnd, struct FString Text, struct FNone ObjectColor, float Thickness, struct FName CategoryName, char bAddToMessageLog); // sub_0x3e11810
	void LogLocation(struct FNone* WorldContextObject, struct FNone Location, struct FString Text, struct FNone ObjectColor, float Radius, struct FName LogCategory, char bAddToMessageLog); // sub_0x3e11590
	void LogBox(struct FNone* WorldContextObject, struct FNone BoxShape, struct FString Text, struct FNone ObjectColor, struct FName LogCategory, char bAddToMessageLog); // sub_0x3e11350
	void EnableRecording(char bEnabled); // sub_0x3d3a480
};

// Class Engine.VoiceChannel
// Size: 0x90 (Inherited: 0x80)
struct UVoiceChannel : UChannel 
{
	char                                          UnknownData80[0x10];                                         // 0x80(0x10)
};

// Class Engine.VOIPTalker
// Size: 0xe8 (Inherited: 0xb0)
struct UVOIPTalker : UActorComponent 
{
	struct FNone                                  Settings;                                                    // 0xb0(0x18)
	char                                          UnknownDataC8[0x20];                                         // 0xc8(0x20)

	void RegisterWithPlayerState(struct FNone* OwningState); // sub_0x3e11c80
	float GetVoiceLevel(); // sub_0x3e112d0
	struct FNone* CreateTalkerForPlayer(struct FNone* OwningState); // sub_0x3e11250
	void BPOnTalkingEnd(); // sub_0x120b420
	void BPOnTalkingBegin(struct FNone* AudioComponent); // sub_0x3e111c0
};

// Class Engine.VOIPStatics
// Size: 0x28 (Inherited: 0x28)
struct UVOIPStatics : UBlueprintFunctionLibrary 
{

	void SetMicThreshold(float InThreshold); // sub_0x3e11d80
};

// Class Engine.VolumeTexture
// Size: 0x110 (Inherited: 0xb8)
struct UVolumeTexture : UTexture 
{
	char                                          UnknownDataB8[0x58];                                         // 0xb8(0x58)
};

// Class Engine.VolumetricLightmapDensityVolume
// Size: 0x350 (Inherited: 0x348)
struct AVolumetricLightmapDensityVolume : AVolume 
{
	struct FNone                                  AllowedMipLevelRange;                                        // 0x348(0x08)
};

// Class Engine.WindDirectionalSource
// Size: 0x318 (Inherited: 0x310)
struct AWindDirectionalSource : AInfo 
{
	struct FNone*                                 Component;                                                   // 0x310(0x08)
};

// Class Engine.WindDirectionalSourceComponent
// Size: 0x260 (Inherited: 0x240)
struct UWindDirectionalSourceComponent : USceneComponent 
{
	float                                         Strength;                                                    // 0x238(0x04)
	float                                         Speed;                                                       // 0x23c(0x04)
	float                                         MinGustAmount;                                               // 0x240(0x04)
	float                                         MaxGustAmount;                                               // 0x244(0x04)
	float                                         Radius;                                                      // 0x248(0x04)
	char                                          bPointWind : 0;                                              // 0x24c(0x01)
	char                                          UnknownData254[0xc];                                         // 0x254(0x0c)

	void SetWindType(enum class None InNewType); // sub_0x3e11ff0
	void SetStrength(float InNewStrength); // sub_0x3e11f70
	void SetSpeed(float InNewSpeed); // sub_0x3e11ef0
	void SetRadius(float InNewRadius); // sub_0x3e11e70
	void SetMinimumGustAmount(float InNewMinGust); // sub_0x3e11df0
	void SetMaximumGustAmount(float InNewMaxGust); // sub_0x3e11d00
};

// Class Engine.WorldComposition
// Size: 0x170 (Inherited: 0x28)
struct UWorldComposition : UObject 
{
	char                                          UnknownData28[0x100];                                        // 0x28(0x100)
	struct TArray<None>                           TilesStreaming;                                              // 0x128(0x10)
	double                                        TilesStreamingTimeThreshold;                                 // 0x138(0x08)
	char                                          bLoadAllTilesDuringCinematic : 0;                            // 0x140(0x01)
	char                                          UnknownData140[0x1];                                         // 0x140(0x01)
	char                                          bRebaseOriginIn3DSpace : 0;                                  // 0x141(0x01)
	char                                          UnknownData141[0x3];                                         // 0x141(0x03)
	float                                         RebaseOriginDistance;                                        // 0x144(0x04)
	char                                          bApplyMinStreamingPriorityToLOD : 0;                         // 0x148(0x01)
	char                                          UnknownData148[0x1];                                         // 0x148(0x01)
	char                                          bApplyStreamingDistanceScaleToLOD : 0;                       // 0x149(0x01)
	char                                          UnknownData149[0x7];                                         // 0x149(0x07)
	struct TArray<None>                           DevFilterRule;                                               // 0x150(0x10)
	char                                          UnknownData160[0x10];                                        // 0x160(0x10)
};

// Class Engine.HierarchicalLODSetup
// Size: 0x60 (Inherited: 0x28)
struct UHierarchicalLODSetup : UObject 
{
	struct TArray<None>                           HierarchicalLODSetup;                                        // 0x28(0x10)
	struct TSoftObjectPtr<FNone>                  OverrideBaseMaterial;                                        // 0x38(0x28)
};

// Class Engine.WorldTileLODSetup
// Size: 0x538 (Inherited: 0x28)
struct UWorldTileLODSetup : UObject 
{
	uint32_t                                      NumLOD;                                                      // 0x28(0x04)
	struct FNone                                  LOD1;                                                        // 0x2c(0x13c)
	struct FNone                                  LOD2;                                                        // 0x168(0x13c)
	struct FNone                                  LOD3;                                                        // 0x2a4(0x13c)
	struct FNone                                  LOD4;                                                        // 0x3e0(0x13c)
	char                                          UnknownData51C[0x1c];                                        // 0x51c(0x1c)
};

